var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21751739012465388 ± 0.0015462978139136356\n   G2(1) = 0.9152210033710718 ± 0.0009940179653281263\n   G2(2) = 0.9812688716752891 ± 0.0005008670297783485\n   G2(3) = 0.9895028597826236 ± 0.0011810235384574338\n   G2(4) = 0.9812688716752891 ± 0.0005008670297783485\n   G2(5) = 0.9152210033710718 ± 0.0009940179653281263\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.029156727427169 ± 0.11025529171379606\n   Replica 2: -4.007260117294939 ± 0.1386983915441156\n   Replica 3: -4.140825053889913 ± 0.13503944001280097\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip820\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip821\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip822\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.9 2211.02,1003.9 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.915 2211.02,745.915 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.932 2211.02,487.932 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.949 2211.02,229.949 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.9 423.181,1003.9 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.915 423.181,745.915 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.932 423.181,487.932 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.949 423.181,229.949 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.59 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.59 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M290.043 1017.24 L306.363 1017.24 L306.363 1021.18 L284.418 1021.18 L284.418 1017.24 Q287.08 1014.49 291.664 1009.86 Q296.27 1005.21 297.451 1003.86 Q299.696 1001.34 300.576 999.603 Q301.478 997.844 301.478 996.154 Q301.478 993.4 299.534 991.663 Q297.613 989.927 294.511 989.927 Q292.312 989.927 289.858 990.691 Q287.427 991.455 284.65 993.006 L284.65 988.284 Q287.474 987.15 289.927 986.571 Q292.381 985.992 294.418 985.992 Q299.789 985.992 302.983 988.677 Q306.177 991.363 306.177 995.853 Q306.177 997.983 305.367 999.904 Q304.58 1001.8 302.474 1004.39 Q301.895 1005.07 298.793 1008.28 Q295.691 1011.48 290.043 1017.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M316.224 986.617 L334.58 986.617 L334.58 990.552 L320.506 990.552 L320.506 999.025 Q321.524 998.677 322.543 998.515 Q323.562 998.33 324.58 998.33 Q330.367 998.33 333.747 1001.5 Q337.126 1004.67 337.126 1010.09 Q337.126 1015.67 333.654 1018.77 Q330.182 1021.85 323.862 1021.85 Q321.687 1021.85 319.418 1021.48 Q317.173 1021.11 314.765 1020.37 L314.765 1015.67 Q316.849 1016.8 319.071 1017.36 Q321.293 1017.91 323.77 1017.91 Q327.774 1017.91 330.112 1015.81 Q332.45 1013.7 332.45 1010.09 Q332.45 1006.48 330.112 1004.37 Q327.774 1002.27 323.77 1002.27 Q321.895 1002.27 320.02 1002.68 Q318.168 1003.1 316.224 1003.98 L316.224 986.617 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M356.339 989.696 Q352.728 989.696 350.899 993.261 Q349.094 996.802 349.094 1003.93 Q349.094 1011.04 350.899 1014.6 Q352.728 1018.14 356.339 1018.14 Q359.973 1018.14 361.779 1014.6 Q363.608 1011.04 363.608 1003.93 Q363.608 996.802 361.779 993.261 Q359.973 989.696 356.339 989.696 M356.339 985.992 Q362.149 985.992 365.205 990.599 Q368.284 995.182 368.284 1003.93 Q368.284 1012.66 365.205 1017.27 Q362.149 1021.85 356.339 1021.85 Q350.529 1021.85 347.45 1017.27 Q344.395 1012.66 344.395 1003.93 Q344.395 995.182 347.45 990.599 Q350.529 985.992 356.339 985.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M286.062 728.635 L304.418 728.635 L304.418 732.57 L290.344 732.57 L290.344 741.042 Q291.363 740.695 292.381 740.533 Q293.4 740.348 294.418 740.348 Q300.205 740.348 303.585 743.519 Q306.964 746.69 306.964 752.107 Q306.964 757.685 303.492 760.787 Q300.02 763.866 293.701 763.866 Q291.525 763.866 289.256 763.496 Q287.011 763.125 284.603 762.384 L284.603 757.685 Q286.687 758.82 288.909 759.375 Q291.131 759.931 293.608 759.931 Q297.613 759.931 299.951 757.824 Q302.288 755.718 302.288 752.107 Q302.288 748.496 299.951 746.389 Q297.613 744.283 293.608 744.283 Q291.733 744.283 289.858 744.699 Q288.006 745.116 286.062 745.996 L286.062 728.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M326.177 731.713 Q322.566 731.713 320.737 735.278 Q318.932 738.82 318.932 745.949 Q318.932 753.056 320.737 756.621 Q322.566 760.162 326.177 760.162 Q329.811 760.162 331.617 756.621 Q333.446 753.056 333.446 745.949 Q333.446 738.82 331.617 735.278 Q329.811 731.713 326.177 731.713 M326.177 728.01 Q331.987 728.01 335.043 732.616 Q338.122 737.199 338.122 745.949 Q338.122 754.676 335.043 759.283 Q331.987 763.866 326.177 763.866 Q320.367 763.866 317.288 759.283 Q314.233 754.676 314.233 745.949 Q314.233 737.199 317.288 732.616 Q320.367 728.01 326.177 728.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M356.339 731.713 Q352.728 731.713 350.899 735.278 Q349.094 738.82 349.094 745.949 Q349.094 753.056 350.899 756.621 Q352.728 760.162 356.339 760.162 Q359.973 760.162 361.779 756.621 Q363.608 753.056 363.608 745.949 Q363.608 738.82 361.779 735.278 Q359.973 731.713 356.339 731.713 M356.339 728.01 Q362.149 728.01 365.205 732.616 Q368.284 737.199 368.284 745.949 Q368.284 754.676 365.205 759.283 Q362.149 763.866 356.339 763.866 Q350.529 763.866 347.45 759.283 Q344.395 754.676 344.395 745.949 Q344.395 737.199 347.45 732.616 Q350.529 728.01 356.339 728.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M284.835 470.652 L307.057 470.652 L307.057 472.643 L294.511 505.212 L289.627 505.212 L301.432 474.587 L284.835 474.587 L284.835 470.652 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M316.224 470.652 L334.58 470.652 L334.58 474.587 L320.506 474.587 L320.506 483.059 Q321.524 482.712 322.543 482.55 Q323.562 482.365 324.58 482.365 Q330.367 482.365 333.747 485.536 Q337.126 488.708 337.126 494.124 Q337.126 499.703 333.654 502.805 Q330.182 505.883 323.862 505.883 Q321.687 505.883 319.418 505.513 Q317.173 505.143 314.765 504.402 L314.765 499.703 Q316.849 500.837 319.071 501.393 Q321.293 501.948 323.77 501.948 Q327.774 501.948 330.112 499.842 Q332.45 497.735 332.45 494.124 Q332.45 490.513 330.112 488.407 Q327.774 486.3 323.77 486.3 Q321.895 486.3 320.02 486.717 Q318.168 487.133 316.224 488.013 L316.224 470.652 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M356.339 473.731 Q352.728 473.731 350.899 477.296 Q349.094 480.837 349.094 487.967 Q349.094 495.073 350.899 498.638 Q352.728 502.18 356.339 502.18 Q359.973 502.18 361.779 498.638 Q363.608 495.073 363.608 487.967 Q363.608 480.837 361.779 477.296 Q359.973 473.731 356.339 473.731 M356.339 470.027 Q362.149 470.027 365.205 474.634 Q368.284 479.217 368.284 487.967 Q368.284 496.694 365.205 501.3 Q362.149 505.883 356.339 505.883 Q350.529 505.883 347.45 501.3 Q344.395 496.694 344.395 487.967 Q344.395 479.217 347.45 474.634 Q350.529 470.027 356.339 470.027 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M256.664 243.294 L264.303 243.294 L264.303 216.929 L255.992 218.595 L255.992 214.336 L264.256 212.669 L268.932 212.669 L268.932 243.294 L276.571 243.294 L276.571 247.229 L256.664 247.229 L256.664 243.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M296.015 215.748 Q292.404 215.748 290.576 219.313 Q288.77 222.855 288.77 229.984 Q288.77 237.091 290.576 240.655 Q292.404 244.197 296.015 244.197 Q299.65 244.197 301.455 240.655 Q303.284 237.091 303.284 229.984 Q303.284 222.855 301.455 219.313 Q299.65 215.748 296.015 215.748 M296.015 212.044 Q301.826 212.044 304.881 216.651 Q307.96 221.234 307.96 229.984 Q307.96 238.711 304.881 243.317 Q301.826 247.901 296.015 247.901 Q290.205 247.901 287.127 243.317 Q284.071 238.711 284.071 229.984 Q284.071 221.234 287.127 216.651 Q290.205 212.044 296.015 212.044 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M326.177 215.748 Q322.566 215.748 320.737 219.313 Q318.932 222.855 318.932 229.984 Q318.932 237.091 320.737 240.655 Q322.566 244.197 326.177 244.197 Q329.811 244.197 331.617 240.655 Q333.446 237.091 333.446 229.984 Q333.446 222.855 331.617 219.313 Q329.811 215.748 326.177 215.748 M326.177 212.044 Q331.987 212.044 335.043 216.651 Q338.122 221.234 338.122 229.984 Q338.122 238.711 335.043 243.317 Q331.987 247.901 326.177 247.901 Q320.367 247.901 317.288 243.317 Q314.233 238.711 314.233 229.984 Q314.233 221.234 317.288 216.651 Q320.367 212.044 326.177 212.044 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M356.339 215.748 Q352.728 215.748 350.899 219.313 Q349.094 222.855 349.094 229.984 Q349.094 237.091 350.899 240.655 Q352.728 244.197 356.339 244.197 Q359.973 244.197 361.779 240.655 Q363.608 237.091 363.608 229.984 Q363.608 222.855 361.779 219.313 Q359.973 215.748 356.339 215.748 M356.339 212.044 Q362.149 212.044 365.205 216.651 Q368.284 221.234 368.284 229.984 Q368.284 238.711 365.205 243.317 Q362.149 247.901 356.339 247.901 Q350.529 247.901 347.45 243.317 Q344.395 238.711 344.395 229.984 Q344.395 221.234 347.45 216.651 Q350.529 212.044 356.339 212.044 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip822)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.949 4017.76,229.949 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.5 456.554,1249.48 457.123,1249.35 457.691,1248.15 458.259,1246.91 458.828,1246.67 459.396,1246.4 459.964,1245.98 460.533,1245.51 461.101,1242.92 461.669,1242.35 462.238,1241.75 462.806,1240.98 463.375,1240.14 463.943,1239.21 464.511,1238.18 465.08,1236.02 465.648,1234.78 466.216,1233.45 466.785,1231.99 467.353,1230.39 467.921,1228.69 468.49,1226.83 469.058,1224.83 469.626,1222.65 470.195,1220.33 470.763,1217.88 471.331,1215.26 471.9,1212.43 472.468,1208.46 473.036,1205.32 473.605,1202.03 474.173,1198.52 474.741,1193.78 475.31,1188.77 475.878,1184.6 476.446,1180.23 477.015,1174.5 477.583,1169.66 478.152,1163.54 478.72,1158.2 479.288,1151.57 479.857,1145.82 480.425,1139.81 480.993,1131.53 481.562,1124.99 482.13,1117.24 482.698,1109.26 483.267,1100.15 483.835,1090.92 484.403,1082.36 484.972,1074.68 485.54,1063.72 486.108,1055.76 486.677,1045.56 487.245,1036.38 487.813,1027.97 488.382,1017.39 488.95,1006.64 489.518,996.801 490.087,983.816 490.655,974.971 491.224,964.967 491.792,954.831 492.36,944.743 492.929,935.516 493.497,924.294 494.065,912.907 494.634,901.623 495.202,890.175 495.77,876.621 496.339,865.234 496.907,850.752 497.475,840.72 498.044,830.668 498.612,820.541 499.18,809.37 499.749,799.16 500.317,790.142 500.885,778.016 501.454,769.185 502.022,759.277 502.59,748.436 503.159,739.745 503.727,730.937 504.295,720.189 504.864,710.569 505.432,700.044 506.001,689.492 506.569,681.165 507.137,672.965 507.706,662.659 508.274,653.45 508.842,644.35 509.411,634.436 509.979,626.828 510.547,618.108 511.116,610.366 511.684,600.549 512.252,592.102 512.821,582.661 513.389,575.543 513.957,565.358 514.526,558.577 515.094,551.742 515.662,543.179 516.231,535.912 516.799,529.515 517.367,521.112 517.936,514.919 518.504,507.704 519.072,500.712 519.641,494.92 520.209,487.269 520.778,480.46 521.346,475.024 521.914,467.701 522.483,461.787 523.051,458.944 523.619,451.741 524.188,443.628 524.756,439.121 525.324,433.711 525.893,428.376 526.461,424.019 527.029,417.747 527.598,412.748 528.166,408.926 528.734,405.329 529.303,400.519 529.871,394.758 530.439,389.334 531.008,384.888 531.576,381.779 532.144,376.449 532.713,372.35 533.281,369.413 533.85,365.552 534.418,362.959 534.986,360.309 535.555,355.472 536.123,350.725 536.691,346.398 537.26,344.234 537.828,341.914 538.396,336.631 538.965,336.897 539.533,334.776 540.101,328.827 540.67,327.11 541.238,325.347 541.806,323.743 542.375,322.124 542.943,319.486 543.511,316.793 544.08,311.072 544.648,309.874 545.216,308.799 545.785,307.73 546.353,305.665 546.921,303.49 547.49,301.487 548.058,296.25 548.627,294.232 549.195,292.256 549.763,294.731 550.332,293.923 550.9,293.854 551.468,292.865 552.037,290.837 552.605,287.048 553.173,285.261 553.742,283.424 554.31,280.698 554.878,279.387 555.447,279.134 556.015,276.836 556.583,274.581 557.152,273.291 557.72,274.341 558.288,275.159 558.857,274.805 559.425,273.466 559.993,272.945 560.562,272.448 561.13,272.011 561.698,269.56 562.267,269.276 562.835,266.197 563.404,266.202 563.972,266.252 564.54,267.037 565.109,263.599 565.677,260.29 566.245,260.652 566.814,257.781 567.382,258.116 567.95,257.223 568.519,258.528 569.087,258.661 569.655,261.012 570.224,260.936 570.792,260.999 571.36,260.774 571.929,260.527 572.497,260.31 573.065,259.892 573.634,258.818 574.202,257.828 574.77,255.889 575.339,256.065 575.907,254.838 576.476,253.673 577.044,254.8 577.612,253.662 578.181,253.711 578.749,253.989 579.317,252.942 579.886,253.088 580.454,250.955 581.022,250.864 581.591,249.729 582.159,249.618 582.727,249.718 583.296,248.78 583.864,247.052 584.432,246.269 585.001,245.573 585.569,245.784 586.137,248.186 586.706,246.431 587.274,247.915 587.842,248.955 588.411,249.097 588.979,245.886 589.547,244.988 590.116,247.233 590.684,248.453 591.253,249.643 591.821,248.634 592.389,245.463 592.958,244.421 593.526,244.582 594.094,244.666 594.663,245.894 595.231,245.838 595.799,244.766 596.368,243.861 596.936,243.095 597.504,244.493 598.073,244.5 598.641,244.834 599.209,243.934 599.778,241.936 600.346,242.127 600.914,244.403 601.483,242.267 602.051,240.339 602.619,241.706 603.188,241.734 603.756,239.708 604.325,240.852 604.893,241.902 605.461,243.144 606.03,242.995 606.598,242.052 607.166,240.074 607.735,240.258 608.303,241.471 608.871,240.678 609.44,238.762 610.008,239.01 610.576,240.017 611.145,239.191 611.713,239.423 612.281,239.307 612.85,239.559 613.418,240.828 613.986,242.859 614.555,240.591 615.123,238.603 615.691,236.73 616.26,235.102 616.828,236.815 617.396,235.109 617.965,234.384 618.533,234.741 619.102,234.876 619.67,235.484 620.238,235.202 620.807,235.831 621.375,235.169 621.943,235.378 622.512,235.806 623.08,236.118 623.648,237.541 624.217,237.971 624.785,237.335 625.353,237.68 625.922,239.166 626.49,242.329 627.058,239.178 627.627,238.22 628.195,238.329 628.763,237.324 629.332,236.307 629.9,236.709 630.468,235.007 631.037,233.323 631.605,235.995 632.173,235.169 632.742,235.68 633.31,235.086 633.879,236.462 634.447,236.643 635.015,234.752 635.584,234.216 636.152,238.72 636.72,238.742 637.289,236.805 637.857,238.946 638.425,241.024 638.994,237.834 639.562,240.048 640.13,239.174 640.699,239.133 641.267,238.259 641.835,238.114 642.404,237.178 642.972,239.333 643.54,238.205 644.109,238.377 644.677,237.391 645.245,239.378 645.814,238.363 646.382,239.468 646.951,240.627 647.519,238.511 648.087,237.561 648.656,236.791 649.224,234.747 649.792,235.011 650.361,234.182 650.929,236.436 651.497,236.383 652.066,236.376 652.634,236.213 653.202,237.073 653.771,235.993 654.339,234.964 654.907,236.043 655.476,236.065 656.044,235.98 656.612,234.021 657.181,235.248 657.749,234.249 658.317,233.616 658.886,232.792 659.454,233.189 660.022,232.238 660.591,235.558 661.159,235.733 661.728,236.82 662.296,236.801 662.864,235.689 663.433,234.65 664.001,234.838 664.569,231.526 665.138,231.883 665.706,231.036 666.274,230.475 666.843,232.803 667.411,233.154 667.979,233.435 668.548,231.903 669.116,232.479 669.684,231.82 670.253,231.184 670.821,229.677 671.389,229.418 671.958,227.799 672.526,226.381 673.094,227.271 673.663,228.943 674.231,228.471 674.799,227.187 675.368,225.877 675.936,227.835 676.505,230.647 677.073,232.048 677.641,231.476 678.21,233.869 678.778,236.066 679.346,235.073 679.915,236.084 680.483,238.097 681.051,235.918 681.62,235.799 682.188,234.906 682.756,237.091 683.325,236.027 683.893,236.11 684.461,233.99 685.03,232.965 685.598,232.231 686.166,231.437 686.735,234.967 687.303,234.979 687.871,234.167 688.44,233.15 689.008,234.399 689.577,234.673 690.145,234.869 690.713,233.867 691.282,234.023 691.85,234.078 692.418,232.262 692.987,231.511 693.555,230.77 694.123,233.148 694.692,236.375 695.26,232.125 695.828,232.546 696.397,233.685 696.965,233.85 697.533,235.82 698.102,236.871 698.67,237.941 699.238,236.855 699.807,237.959 700.375,236.846 700.943,237.624 701.512,236.148 702.08,235.007 702.648,236.989 703.217,236.777 703.785,237.76 704.354,236.667 704.922,235.672 705.49,233.338 706.059,234.427 706.627,234.563 707.195,233.469 707.764,234.543 708.332,235.601 708.9,234.44 709.469,233.459 710.037,237.624 710.605,238.23 711.174,238.081 711.742,239.708 712.31,238.266 712.879,237.947 713.447,235.578 714.015,235.453 714.584,235.346 715.152,237.349 715.72,238.974 716.289,235.477 716.857,237.083 717.425,238.953 717.994,237.394 718.562,239.125 719.131,240.698 719.699,240.02 720.267,235.392 720.836,236.333 721.404,235.024 721.972,232.59 722.541,233.739 723.109,234.565 723.677,234.28 724.246,235.84 724.814,234.69 725.382,236.635 725.951,235.12 726.519,235.92 727.087,236.646 727.656,236.364 728.224,231.995 728.792,231.83 729.361,229.488 729.929,227.526 730.497,223.668 731.066,224.21 731.634,223.642 732.203,225.242 732.771,225.527 733.339,225.972 733.908,224.151 734.476,224.73 735.044,225.221 735.613,225.808 736.181,226.231 736.749,225.593 737.318,226.308 737.886,226.741 738.454,227.951 739.023,227.164 739.591,228.749 740.159,229.005 740.728,231.309 741.296,231.368 741.864,233.433 742.433,231.326 743.001,232.334 743.569,233.263 744.138,234.025 744.706,230.515 745.274,229.373 745.843,230.764 746.411,231.802 746.98,232.959 747.548,231.855 748.116,231.815 748.685,233.057 749.253,234.913 749.821,235.71 750.39,234.366 750.958,237.134 751.526,238.643 752.095,238.158 752.663,239.765 753.231,238.997 753.8,237.427 754.368,234.949 754.936,235.376 755.505,236.023 756.073,236.758 756.641,234.275 757.21,233.05 757.778,231.864 758.346,232.76 758.915,232.364 759.483,232.196 760.052,231.992 760.62,231.911 761.188,230.654 761.757,232.758 762.325,231.514 762.893,231.437 763.462,230.251 764.03,230.453 764.598,231.304 765.167,233.375 765.735,231.186 766.303,232.219 766.872,232.054 767.44,232.836 768.008,232.612 768.577,232.517 769.145,232.366 769.713,234.201 770.282,233.996 770.85,232.811 771.418,232.601 771.987,231.346 772.555,230.071 773.123,230.11 773.692,229.216 774.26,229.292 774.829,229.675 775.397,229.822 775.965,228.019 776.534,228.131 777.102,230.319 777.67,228.378 778.239,229.696 778.807,231.691 779.375,231.645 779.944,231.598 780.512,230.384 781.08,230.356 781.649,229.306 782.217,229.306 782.785,227.273 783.354,227.539 783.922,228.899 784.49,230.018 785.059,229.261 785.627,227.249 786.195,224.451 786.764,224.979 787.332,222.379 787.9,222.961 788.469,224.607 789.037,224.874 789.606,226.482 790.174,225.762 790.742,225.101 791.311,225.552 791.879,223.826 792.447,223.357 793.016,223.94 793.584,226.527 794.152,229.812 794.721,230.033 795.289,230.38 795.857,230.545 796.426,230.744 796.994,230.916 797.562,231.848 798.131,231.727 798.699,230.726 799.267,232.976 799.836,231.812 800.404,231.828 800.972,230.723 801.541,229.865 802.109,231.015 802.678,230.111 803.246,230.159 803.814,228.373 804.383,228.582 804.951,227.943 805.519,229.035 806.088,230.407 806.656,229.679 807.224,233.099 807.793,233.171 808.361,235.304 808.929,233.93 809.498,233.826 810.066,233.411 810.634,234.191 811.203,234.291 811.771,233.279 812.339,234.303 812.908,235.103 813.476,233.852 814.044,231.597 814.613,231.738 815.181,232.847 815.749,234.907 816.318,234.774 816.886,234.641 817.455,233.311 818.023,233.9 818.591,232.79 819.16,234.762 819.728,233.548 820.296,232.4 820.865,232.29 821.433,231.921 822.001,234.101 822.57,234.806 823.138,236.529 823.706,234.002 824.275,232.765 824.843,232.548 825.411,232.549 825.98,232.529 826.548,230.179 827.116,229.142 827.685,228.344 828.253,228.691 828.821,229.756 829.39,230.786 829.958,230.777 830.526,231.717 831.095,231.736 831.663,231.581 832.232,233.551 832.8,233.319 833.368,232.286 833.937,232.404 834.505,232.393 835.073,230.395 835.642,231.516 836.21,230.267 836.778,230.471 837.347,231.408 837.915,231.309 838.483,230.204 839.052,230.084 839.62,228.954 840.188,225.909 840.757,224.996 841.325,225.52 841.893,227.001 842.462,225.064 843.03,225.293 843.598,223.656 844.167,224.048 844.735,224.45 845.304,224.822 845.872,225.192 846.44,226.635 847.009,228.033 847.577,226.136 848.145,225.371 848.714,226.929 849.282,226.358 849.85,227.582 850.419,232.128 850.987,230.105 851.555,232.078 852.124,231.737 852.692,231.677 853.26,232.617 853.829,232.382 854.397,232.346 854.965,232.997 855.534,232.894 856.102,230.803 856.67,232.094 857.239,234.245 857.807,231.228 858.375,231.081 858.944,231.036 859.512,230.188 860.081,229.03 860.649,229.099 861.217,229.199 861.786,228.372 862.354,228.488 862.922,229.855 863.491,229.993 864.059,230.088 864.627,229.338 865.196,230.456 865.764,228.588 866.332,225.781 866.901,225.185 867.469,223.64 868.037,221.175 868.606,221.667 869.174,225.466 869.742,223.972 870.311,225.512 870.879,227.097 871.447,227.617 872.016,227.998 872.584,228.519 873.152,226.728 873.721,227.094 874.289,229.486 874.858,228.572 875.426,226.655 875.994,226.11 876.563,226.72 877.131,227.077 877.699,226.513 878.268,226.931 878.836,227.227 879.404,226.459 879.973,227.034 880.541,228.724 881.109,230.112 881.678,231.327 882.246,233.679 882.814,234.746 883.383,231.786 883.951,230.97 884.519,232.207 885.088,232.29 885.656,236.67 886.224,236.429 886.793,235.2 887.361,237.185 887.93,237.878 888.498,240.579 889.066,240.923 889.635,239.27 890.203,237.62 890.771,237.15 891.34,236.657 891.908,238.434 892.476,237.945 893.045,237.32 893.613,237.731 894.181,237.182 894.75,236.638 895.318,238.285 895.886,237.74 896.455,238.151 897.023,237.554 897.591,236.95 898.16,234.317 898.728,233.94 899.296,234.693 899.865,233.262 900.433,233.158 901.001,234.832 901.57,233.541 902.138,233.415 902.707,232.321 903.275,231.968 903.843,227.868 904.412,229.003 904.98,230.109 905.548,229.1 906.117,230.07 906.685,229.931 907.253,228.826 907.822,231.299 908.39,232.243 908.958,231.134 909.527,232.143 910.095,231.853 910.663,229.621 911.232,228.482 911.8,230.706 912.368,229.41 912.937,226.275 913.505,226.486 914.073,225.629 914.642,224.759 915.21,226.353 915.779,224.549 916.347,225.851 916.915,226.073 917.484,226.316 918.052,224.536 918.62,227.996 919.189,227.424 919.757,227.401 920.325,227.464 920.894,226.697 921.462,226.042 922.03,226.5 922.599,227.889 923.167,227.052 923.735,229.362 924.304,230.376 924.872,229.317 925.44,230.666 926.009,230.854 926.577,230.956 927.145,230.2 927.714,230.309 928.282,229.258 928.85,231.252 929.419,230.304 929.987,229.155 930.556,229.365 931.124,230.646 931.692,230.699 932.261,232.88 932.829,232.905 933.397,231.637 933.966,232.945 934.534,233.702 935.102,235.701 935.671,238.439 936.239,237.921 936.807,237.381 937.376,237.099 937.944,234.609 938.512,235.398 939.081,233.929 939.649,234.608 940.217,234.327 940.786,234.056 941.354,234.624 941.922,233.428 942.491,233.098 943.059,233.015 943.627,233.804 944.196,234.661 944.764,233.175 945.333,232.839 945.901,231.487 946.469,229.31 947.038,226.15 947.606,226.234 948.174,228.568 948.743,228.546 949.311,227.618 949.879,227.74 950.448,231.008 951.016,233.014 951.584,231.744 952.153,233.592 952.721,232.228 953.289,234.05 953.858,234.521 954.426,235.212 954.994,234.972 955.563,234.508 956.131,233.977 956.699,233.539 957.268,233.468 957.836,234.977 958.405,234.387 958.973,231.716 959.541,233.688 960.11,234.306 960.678,234.988 961.246,232.546 961.815,233.31 962.383,232.916 962.951,233.618 963.52,233.234 964.088,230.926 964.656,229.618 965.225,228.514 965.793,228.562 966.361,227.498 966.93,226.604 967.498,226.521 968.066,226.826 968.635,225.892 969.203,226.004 969.771,226.332 970.34,227.636 970.908,227.817 971.476,228.749 972.045,228.993 972.613,227.849 973.182,231.076 973.75,231.913 974.318,229.693 974.887,229.488 975.455,230.506 976.023,230.157 976.592,230.958 977.16,228.52 977.728,229.632 978.297,230.553 978.865,230.629 979.433,228.602 980.002,227.84 980.57,229.925 981.138,229.921 981.707,228.995 982.275,228.948 982.843,228.975 983.412,228.12 983.98,228.18 984.548,226.138 985.117,227.298 985.685,226.322 986.253,228.501 986.822,227.66 987.39,228.853 987.959,227.81 988.527,227.757 989.095,227.93 989.664,227.97 990.232,225.875 990.8,225.013 991.369,222.364 991.937,222.096 992.505,220.607 993.074,221.362 993.642,221.915 994.21,222.489 994.779,221.798 995.347,222.469 995.915,223.18 996.484,224.769 997.052,226.133 997.62,227.312 998.189,225.67 998.757,228.29 999.325,227.567 999.894,226.727 1000.46,226.741 1001.03,226.921 1001.6,227.241 1002.17,228.726 1002.74,228.765 1003.3,228.986 1003.87,229.457 1004.44,230.632 1005.01,232.582 1005.58,232.594 1006.15,231.303 1006.71,232.454 1007.28,232.432 1007.85,229.098 1008.42,232.221 1008.99,232.373 1009.56,232.39 1010.12,232.202 1010.69,235.174 1011.26,234.725 1011.83,235.39 1012.4,235.182 1012.97,233.916 1013.53,232.836 1014.1,232.846 1014.67,232.658 1015.24,230.342 1015.81,230.315 1016.38,229.47 1016.94,228.512 1017.51,231.682 1018.08,233.742 1018.65,232.534 1019.22,232.213 1019.79,231.08 1020.35,230.099 1020.92,229.785 1021.49,230.891 1022.06,230.761 1022.63,226.784 1023.2,225.98 1023.76,227.281 1024.33,227.401 1024.9,229.682 1025.47,227.662 1026.04,225.982 1026.61,224.195 1027.17,223.737 1027.74,224.464 1028.31,226.161 1028.88,226.492 1029.45,227.933 1030.02,229.2 1030.58,228.079 1031.15,229.398 1031.72,229.546 1032.29,228.73 1032.86,229.848 1033.43,228.96 1033.99,230.405 1034.56,227.647 1035.13,226.994 1035.7,228.415 1036.27,227.823 1036.84,228.016 1037.4,228.163 1037.97,229.62 1038.54,229.852 1039.11,225.829 1039.68,226.173 1040.25,227.619 1040.81,229.952 1041.38,230.933 1041.95,230.015 1042.52,230.206 1043.09,232.55 1043.66,231.403 1044.22,230.269 1044.79,231.582 1045.36,231.744 1045.93,231.85 1046.5,232.762 1047.07,233.579 1047.63,232.281 1048.2,232.114 1048.77,231.087 1049.34,229.136 1049.91,231.376 1050.48,231.44 1051.05,233.333 1051.61,232.251 1052.18,233.135 1052.75,231.41 1053.32,231.408 1053.89,229.336 1054.46,228.551 1055.02,227.565 1055.59,228.835 1056.16,227.937 1056.73,225.25 1057.3,223.472 1057.87,225.524 1058.43,227.18 1059,226.262 1059.57,225.537 1060.14,226.961 1060.71,229.304 1061.28,230.783 1061.84,232.112 1062.41,232.158 1062.98,236.18 1063.55,235.758 1064.12,235.66 1064.69,233.532 1065.25,235.305 1065.82,238.009 1066.39,235.304 1066.96,233.994 1067.53,233.717 1068.1,235.865 1068.66,234.519 1069.23,234.097 1069.8,234.126 1070.37,236.12 1070.94,236.697 1071.51,235.415 1072.07,235.167 1072.64,235.855 1073.21,235.515 1073.78,230.871 1074.35,230.89 1074.92,231.864 1075.48,230.65 1076.05,230.626 1076.62,228.715 1077.19,228.656 1077.76,228.825 1078.33,228.66 1078.89,228.908 1079.46,229.964 1080.03,233.038 1080.6,231.587 1081.17,232.624 1081.74,231.647 1082.3,231.46 1082.87,229.097 1083.44,229.312 1084.01,229.485 1084.58,232.91 1085.15,233.751 1085.71,233.653 1086.28,234.42 1086.85,235.922 1087.42,235.462 1087.99,237.179 1088.56,236.713 1089.12,237.142 1089.69,236.418 1090.26,231.756 1090.83,229.682 1091.4,230.511 1091.97,230.286 1092.53,232.303 1093.1,233.047 1093.67,231.825 1094.24,231.547 1094.81,231.495 1095.38,233.469 1095.94,236.12 1096.51,235.458 1097.08,238.124 1097.65,238.573 1098.22,236.867 1098.79,235.225 1099.35,232.652 1099.92,229.366 1100.49,229.368 1101.06,228.335 1101.63,229.279 1102.2,231.198 1102.76,229.798 1103.33,230.766 1103.9,230.667 1104.47,230.564 1105.04,231.412 1105.61,229.864 1106.17,227.675 1106.74,226.599 1107.31,226.45 1107.88,226.755 1108.45,226.912 1109.02,226.031 1109.58,226.356 1110.15,226.602 1110.72,225.666 1111.29,224.852 1111.86,223.954 1112.43,226.263 1112.99,226.583 1113.56,229.6 1114.13,229.464 1114.7,227.2 1115.27,225.96 1115.84,223.211 1116.4,222.452 1116.97,222.766 1117.54,223.117 1118.11,223.551 1118.68,224.123 1119.25,224.455 1119.81,223.924 1120.38,224.314 1120.95,224.642 1121.52,224.089 1122.09,223.286 1122.66,224.671 1123.23,225.245 1123.79,223.714 1124.36,225.261 1124.93,225.494 1125.5,226.964 1126.07,227.191 1126.64,226.557 1127.2,228.989 1127.77,229.191 1128.34,230.298 1128.91,228.252 1129.48,227.201 1130.05,227.158 1130.61,227.414 1131.18,228.617 1131.75,227.537 1132.32,225.638 1132.89,223.965 1133.46,223.29 1134.02,222.761 1134.59,225.554 1135.16,228.126 1135.73,226.122 1136.3,227.624 1136.87,230.25 1137.43,230.34 1138,230.503 1138.57,231.738 1139.14,230.795 1139.71,231.743 1140.28,231.849 1140.84,232.856 1141.41,232.916 1141.98,233.816 1142.55,233.699 1143.12,233.38 1143.69,237.492 1144.25,236.199 1144.82,235.729 1145.39,234.24 1145.96,234.301 1146.53,232.849 1147.1,234.829 1147.66,236.284 1148.23,236.99 1148.8,236.372 1149.37,233.694 1149.94,231.542 1150.51,231.554 1151.07,231.563 1151.64,231.406 1152.21,231.265 1152.78,232.286 1153.35,230.168 1153.92,230.209 1154.48,231.215 1155.05,232.11 1155.62,233.187 1156.19,233.023 1156.76,233.909 1157.33,233.623 1157.89,233.265 1158.46,234.272 1159.03,234.141 1159.6,231.94 1160.17,232.799 1160.74,232.592 1161.3,232.352 1161.87,232.032 1162.44,231.999 1163.01,232.859 1163.58,231.678 1164.15,230.34 1164.71,231.645 1165.28,231.384 1165.85,230.582 1166.42,228.43 1166.99,229.483 1167.56,229.317 1168.12,228.374 1168.69,230.388 1169.26,228.109 1169.83,226.956 1170.4,228.003 1170.97,224.155 1171.53,225.408 1172.1,226.775 1172.67,226.934 1173.24,226.058 1173.81,226.272 1174.38,229.432 1174.94,231.608 1175.51,231.129 1176.08,231.003 1176.65,231.975 1177.22,232.656 1177.79,231.714 1178.35,229.384 1178.92,230.342 1179.49,229.159 1180.06,229.171 1180.63,226.229 1181.2,226.408 1181.76,227.716 1182.33,227.805 1182.9,229.131 1183.47,229.051 1184.04,230.194 1184.61,230.24 1185.17,231.402 1185.74,229.259 1186.31,231.436 1186.88,230.498 1187.45,226.419 1188.02,224.6 1188.58,225.084 1189.15,229.635 1189.72,229.513 1190.29,228.402 1190.86,228.445 1191.43,229.577 1192,230.811 1192.56,230.978 1193.13,229.977 1193.7,230.869 1194.27,230.948 1194.84,231.814 1195.41,230.71 1195.97,231.649 1196.54,230.455 1197.11,231.264 1197.68,230.226 1198.25,230.393 1198.82,230.44 1199.38,230.712 1199.95,233.689 1200.52,235.635 1201.09,236.104 1201.66,236.661 1202.23,236.214 1202.79,235.675 1203.36,234.181 1203.93,234.074 1204.5,233.806 1205.07,233.516 1205.64,232.329 1206.2,234.163 1206.77,235.784 1207.34,232.473 1207.91,231.375 1208.48,231.002 1209.05,229.62 1209.61,229.636 1210.18,229.738 1210.75,228.433 1211.32,230.37 1211.89,230.279 1212.46,233.134 1213.02,231.755 1213.59,229.365 1214.16,232.396 1214.73,232.052 1215.3,230.732 1215.87,230.543 1216.43,228.375 1217,228.196 1217.57,229.21 1218.14,228.238 1218.71,227.247 1219.28,227.294 1219.84,227.58 1220.41,228.828 1220.98,228.88 1221.55,228.973 1222.12,227.975 1222.69,226.956 1223.25,227.031 1223.82,229.398 1224.39,230.468 1224.96,229.444 1225.53,227.173 1226.1,227.38 1226.66,229.688 1227.23,229.564 1227.8,228.602 1228.37,227.664 1228.94,226.85 1229.51,227.049 1230.07,226.261 1230.64,226.49 1231.21,226.714 1231.78,226.944 1232.35,226.118 1232.92,226.179 1233.48,228.497 1234.05,228.655 1234.62,227.674 1235.19,228.029 1235.76,226.055 1236.33,226.511 1236.89,226.896 1237.46,225.08 1238.03,226.515 1238.6,227.761 1239.17,229.047 1239.74,229.33 1240.3,230.526 1240.87,231.524 1241.44,232.36 1242.01,232.165 1242.58,228.977 1243.15,227.993 1243.71,228.099 1244.28,228.12 1244.85,230.226 1245.42,229.215 1245.99,231.148 1246.56,230.154 1247.12,230.038 1247.69,231.164 1248.26,229.961 1248.83,229.853 1249.4,231.073 1249.97,231.014 1250.53,232.022 1251.1,231.955 1251.67,232.968 1252.24,230.959 1252.81,228.66 1253.38,230.084 1253.94,229.062 1254.51,230.23 1255.08,231.276 1255.65,231.195 1256.22,230.225 1256.79,230.247 1257.35,230.362 1257.92,229.298 1258.49,227.241 1259.06,227.485 1259.63,231.87 1260.2,230.779 1260.76,229.885 1261.33,230.178 1261.9,231.123 1262.47,232.003 1263.04,232.178 1263.61,231.191 1264.18,228.144 1264.74,229.285 1265.31,230.257 1265.88,229.133 1266.45,229.094 1267.02,228.983 1267.59,229.814 1268.15,228.889 1268.72,230.706 1269.29,231.733 1269.86,230.741 1270.43,230.642 1271,227.72 1271.56,228.924 1272.13,228.994 1272.7,229.072 1273.27,230.113 1273.84,232.167 1274.41,234.249 1274.97,235.028 1275.54,232.504 1276.11,232.383 1276.68,231.263 1277.25,231.933 1277.82,231.874 1278.38,229.61 1278.95,227.583 1279.52,229.842 1280.09,229.67 1280.66,229.77 1281.23,227.528 1281.79,226.571 1282.36,228.822 1282.93,227.677 1283.5,226.893 1284.07,228.21 1284.64,229.435 1285.2,228.348 1285.77,229.447 1286.34,228.434 1286.91,225.42 1287.48,227.921 1288.05,229.105 1288.61,230.033 1289.18,228.843 1289.75,226.73 1290.32,227.179 1290.89,224.552 1291.46,224.006 1292.02,224.492 1292.59,224.904 1293.16,225.414 1293.73,226.928 1294.3,227.237 1294.87,225.465 1295.43,223.713 1296,226.226 1296.57,226.415 1297.14,226.524 1297.71,226.975 1298.28,226.187 1298.84,226.387 1299.41,227.793 1299.98,230.015 1300.55,230.081 1301.12,229.082 1301.69,230.33 1302.25,230.563 1302.82,228.754 1303.39,229.011 1303.96,227.096 1304.53,225.957 1305.1,228.647 1305.66,227.995 1306.23,226.314 1306.8,226.647 1307.37,226.99 1307.94,226.481 1308.51,226.789 1309.07,229.059 1309.64,229.113 1310.21,232.149 1310.78,232.078 1311.35,234.083 1311.92,230.939 1312.48,230.913 1313.05,230.942 1313.62,230.912 1314.19,230.881 1314.76,229.945 1315.33,227.948 1315.89,227.149 1316.46,227.483 1317.03,224.649 1317.6,226.106 1318.17,226.598 1318.74,227.124 1319.3,227.434 1319.87,226.75 1320.44,222.791 1321.01,223.667 1321.58,224.293 1322.15,221.855 1322.71,222.509 1323.28,224.569 1323.85,225.282 1324.42,227.975 1324.99,226.277 1325.56,225.83 1326.12,226.057 1326.69,226.549 1327.26,230.062 1327.83,233.284 1328.4,232.987 1328.97,233.927 1329.53,233.864 1330.1,234.588 1330.67,235.497 1331.24,235.153 1331.81,233.001 1332.38,234.107 1332.94,237.231 1333.51,232.858 1334.08,232.842 1334.65,233.726 1335.22,234.621 1335.79,234.395 1336.36,235.351 1336.92,233.17 1337.49,231.902 1338.06,232.031 1338.63,229.913 1339.2,228.903 1339.77,230.421 1340.33,234.73 1340.9,235.614 1341.47,238.284 1342.04,239.546 1342.61,236.981 1343.18,236.595 1343.74,235.145 1344.31,234.696 1344.88,239.457 1345.45,239.923 1346.02,240.125 1346.59,239.53 1347.15,238.747 1347.72,239.032 1348.29,239.525 1348.86,238.979 1349.43,239.315 1350,239.391 1350.56,239.614 1351.13,239.96 1351.7,237.318 1352.27,237.76 1352.84,235.14 1353.41,234.641 1353.97,234.517 1354.54,233.021 1355.11,234.716 1355.68,236.297 1356.25,234.64 1356.82,236.097 1357.38,235.393 1357.95,236.038 1358.52,234.348 1359.09,234.577 1359.66,233.278 1360.23,232.747 1360.79,232.27 1361.36,231.902 1361.93,229.6 1362.5,229.294 1363.07,232.064 1363.64,231.724 1364.2,231.47 1364.77,230.823 1365.34,230.605 1365.91,227.194 1366.48,226.244 1367.05,228.454 1367.61,230.603 1368.18,229.386 1368.75,227.148 1369.32,226.548 1369.89,224.877 1370.46,224.33 1371.02,225.524 1371.59,226.795 1372.16,226.824 1372.73,224.823 1373.3,223.942 1373.87,224.354 1374.43,223.808 1375,223.326 1375.57,223.727 1376.14,223.122 1376.71,222.683 1377.28,222.209 1377.84,224.842 1378.41,226.334 1378.98,227.569 1379.55,228.823 1380.12,230.684 1380.69,231.587 1381.25,231.331 1381.82,230.478 1382.39,230.238 1382.96,231.271 1383.53,232.172 1384.1,232.186 1384.66,232.001 1385.23,232.841 1385.8,233.697 1386.37,233.412 1386.94,234.192 1387.51,234.153 1388.07,232.908 1388.64,234.755 1389.21,234.433 1389.78,234.218 1390.35,231.821 1390.92,231.778 1391.48,231.768 1392.05,229.499 1392.62,228.267 1393.19,228.12 1393.76,227.153 1394.33,226.387 1394.89,226.318 1395.46,226.612 1396.03,225.79 1396.6,226.411 1397.17,224.453 1397.74,224.785 1398.3,226.207 1398.87,227.382 1399.44,227.35 1400.01,227.52 1400.58,227.576 1401.15,226.836 1401.71,228.235 1402.28,228.277 1402.85,225.412 1403.42,228.896 1403.99,227.817 1404.56,227.867 1405.13,224.7 1405.69,226.038 1406.26,225.381 1406.83,224.747 1407.4,226.09 1407.97,226.088 1408.54,227.28 1409.1,228.589 1409.67,228.372 1410.24,229.602 1410.81,228.64 1411.38,229.796 1411.95,233.104 1412.51,233.799 1413.08,234.662 1413.65,234.126 1414.22,231.936 1414.79,231.913 1415.36,230.68 1415.92,230.97 1416.49,230.881 1417.06,229.663 1417.63,229.722 1418.2,227.666 1418.77,233.068 1419.33,232.818 1419.9,234.563 1420.47,234.36 1421.04,232.03 1421.61,232.926 1422.18,232.665 1422.74,231.342 1423.31,231.172 1423.88,233.298 1424.45,231.129 1425.02,229.986 1425.59,227.902 1426.15,228.128 1426.72,229.263 1427.29,229.132 1427.86,229.267 1428.43,231.342 1429,231.12 1429.56,232.011 1430.13,235.903 1430.7,235.483 1431.27,236.027 1431.84,235.644 1432.41,232.846 1432.97,230.481 1433.54,229.419 1434.11,230.454 1434.68,232.154 1435.25,232.869 1435.82,228.746 1436.38,231.781 1436.95,229.578 1437.52,228.611 1438.09,225.526 1438.66,226.611 1439.23,225.908 1439.79,227.234 1440.36,227.389 1440.93,226.542 1441.5,225.554 1442.07,228.034 1442.64,229.149 1443.2,228.052 1443.77,227.168 1444.34,228.231 1444.91,230.435 1445.48,230.52 1446.05,234.393 1446.61,234 1447.18,233.719 1447.75,233.654 1448.32,233.39 1448.89,233.06 1449.46,232.825 1450.02,232.453 1450.59,235.315 1451.16,234.855 1451.73,234.363 1452.3,233.792 1452.87,234.328 1453.43,233.762 1454,233.494 1454.57,232.94 1455.14,230.757 1455.71,230.651 1456.28,230.47 1456.84,230.218 1457.41,230.14 1457.98,230.055 1458.55,225.808 1459.12,228.363 1459.69,229.55 1460.25,229.5 1460.82,228.531 1461.39,227.541 1461.96,229.72 1462.53,228.643 1463.1,227.646 1463.66,226.779 1464.23,227.88 1464.8,226.875 1465.37,227.086 1465.94,228.392 1466.51,228.627 1467.07,228.51 1467.64,228.515 1468.21,229.342 1468.78,229.053 1469.35,229.993 1469.92,229.989 1470.48,229.855 1471.05,230.649 1471.62,231.609 1472.19,230.628 1472.76,231.643 1473.33,232.415 1473.89,231.08 1474.46,229.768 1475.03,231.648 1475.6,232.4 1476.17,232.957 1476.74,232.532 1477.31,232.249 1477.87,229.913 1478.44,228.824 1479.01,229.683 1479.58,227.747 1480.15,228.012 1480.72,227.186 1481.28,228.449 1481.85,227.715 1482.42,227.622 1482.99,225.629 1483.56,226.895 1484.13,225.961 1484.69,225.026 1485.26,224.172 1485.83,224.695 1486.4,224.188 1486.97,224.769 1487.54,223.983 1488.1,225.391 1488.67,226.611 1489.24,225.786 1489.81,225.016 1490.38,226.234 1490.95,227.679 1491.51,227.989 1492.08,225.935 1492.65,229.331 1493.22,230.496 1493.79,230.39 1494.36,230.481 1494.92,229.384 1495.49,229.58 1496.06,229.507 1496.63,229.404 1497.2,227.378 1497.77,228.509 1498.33,225.449 1498.9,224.647 1499.47,224.013 1500.04,223.753 1500.61,225.233 1501.18,223.467 1501.74,224.793 1502.31,225.253 1502.88,225.784 1503.45,230.243 1504.02,230.163 1504.59,231.089 1505.15,231.154 1505.72,234.219 1506.29,232.945 1506.86,233.623 1507.43,232.536 1508,234.628 1508.56,234.289 1509.13,235.18 1509.7,229.9 1510.27,230.853 1510.84,230.85 1511.41,227.916 1511.97,228.891 1512.54,229.072 1513.11,228.214 1513.68,229.47 1514.25,227.372 1514.82,228.82 1515.38,230.935 1515.95,231.781 1516.52,232.561 1517.09,232.447 1517.66,233.055 1518.23,232.763 1518.79,231.512 1519.36,230.431 1519.93,230.543 1520.5,230.696 1521.07,231.907 1521.64,230.677 1522.2,232.459 1522.77,234.323 1523.34,233.79 1523.91,233.518 1524.48,233.078 1525.05,233.919 1525.61,232.714 1526.18,232.395 1526.75,232.193 1527.32,232.822 1527.89,231.492 1528.46,231.483 1529.02,232.218 1529.59,230.144 1530.16,229.046 1530.73,229.072 1531.3,229.327 1531.87,229.337 1532.43,232.475 1533,232.173 1533.57,232.183 1534.14,233.034 1534.71,230.88 1535.28,229.791 1535.84,229.506 1536.41,229.787 1536.98,227.769 1537.55,228.01 1538.12,228.151 1538.69,229.384 1539.25,229.36 1539.82,229.538 1540.39,229.472 1540.96,229.598 1541.53,228.679 1542.1,228.653 1542.66,230.72 1543.23,230.766 1543.8,230.503 1544.37,229.441 1544.94,230.551 1545.51,231.837 1546.08,230.63 1546.64,229.42 1547.21,230.685 1547.78,233.772 1548.35,232.481 1548.92,231.19 1549.49,230.051 1550.05,228.852 1550.62,229.881 1551.19,232.867 1551.76,234.888 1552.33,233.369 1552.9,232.016 1553.46,229.735 1554.03,229.953 1554.6,229.034 1555.17,229.082 1555.74,229.159 1556.31,229.289 1556.87,229.631 1557.44,229.71 1558.01,229.987 1558.58,233.066 1559.15,232.994 1559.72,230.687 1560.28,230.477 1560.85,229.398 1561.42,228.392 1561.99,230.591 1562.56,231.305 1563.13,232.339 1563.69,230.2 1564.26,229.139 1564.83,229.144 1565.4,227.299 1565.97,229.309 1566.54,230.543 1567.1,230.564 1567.67,232.513 1568.24,229.33 1568.81,229.3 1569.38,229.088 1569.95,228.233 1570.51,229.334 1571.08,231.295 1571.65,232.207 1572.22,231.031 1572.79,232.008 1573.36,233.119 1573.92,231.707 1574.49,231.623 1575.06,233.52 1575.63,236.457 1576.2,234.857 1576.77,233.512 1577.33,232.255 1577.9,232.178 1578.47,230.931 1579.04,229.759 1579.61,228.908 1580.18,229.16 1580.74,228.95 1581.31,227.743 1581.88,228.841 1582.45,229.656 1583.02,232.72 1583.59,232.767 1584.15,231.329 1584.72,230.141 1585.29,231.097 1585.86,231.809 1586.43,231.664 1587,231.497 1587.56,234.306 1588.13,231.808 1588.7,230.725 1589.27,230.391 1589.84,230.269 1590.41,232.156 1590.97,232.938 1591.54,230.784 1592.11,231.635 1592.68,232.44 1593.25,231.178 1593.82,232.918 1594.38,231.636 1594.95,229.331 1595.52,231.414 1596.09,231.098 1596.66,231.95 1597.23,231.733 1597.79,231.514 1598.36,231.219 1598.93,231.921 1599.5,231.387 1600.07,229.286 1600.64,229.142 1601.2,226.016 1601.77,222.011 1602.34,222.378 1602.91,223.708 1603.48,222.977 1604.05,223.463 1604.61,222.863 1605.18,222.25 1605.75,225.514 1606.32,225.779 1606.89,225.953 1607.46,227.347 1608.02,228.585 1608.59,228.81 1609.16,228.791 1609.73,229.823 1610.3,229.816 1610.87,227.717 1611.43,227.741 1612,227.802 1612.57,227.932 1613.14,225.951 1613.71,225.281 1614.28,224.709 1614.84,228.132 1615.41,227.532 1615.98,226.511 1616.55,227.896 1617.12,229.353 1617.69,229.346 1618.26,233.308 1618.82,233.014 1619.39,233.799 1619.96,235.292 1620.53,233.927 1621.1,233.53 1621.67,233.119 1622.23,232.898 1622.8,232.734 1623.37,232.53 1623.94,232.145 1624.51,232 1625.08,233.072 1625.64,232.948 1626.21,232.703 1626.78,231.511 1627.35,229.257 1627.92,228.074 1628.49,228.112 1629.05,227.578 1629.62,227.804 1630.19,224.842 1630.76,225.242 1631.33,225.334 1631.9,225.573 1632.46,226.993 1633.03,226.204 1633.6,226.642 1634.17,225.642 1634.74,226.031 1635.31,226.096 1635.87,226.391 1636.44,226.732 1637.01,224.965 1637.58,225.429 1638.15,224.626 1638.72,224.074 1639.28,225.352 1639.85,226.729 1640.42,225.105 1640.99,225.37 1641.56,224.79 1642.13,225.201 1642.69,224.464 1643.26,224.814 1643.83,226.443 1644.4,225.767 1644.97,224.974 1645.54,226.269 1646.1,226.954 1646.67,227.284 1647.24,228.751 1647.81,225.111 1648.38,227.675 1648.95,228.125 1649.51,229.37 1650.08,229.493 1650.65,232.59 1651.22,230.266 1651.79,229.292 1652.36,231.726 1652.92,230.549 1653.49,226.401 1654.06,226.899 1654.63,226.031 1655.2,227.482 1655.77,228.646 1656.33,228.78 1656.9,229.014 1657.47,230.224 1658.04,230.233 1658.61,232.395 1659.18,232.069 1659.74,229.952 1660.31,232.291 1660.88,233.246 1661.45,234.144 1662.02,233.955 1662.59,235.692 1663.15,234.311 1663.72,234.061 1664.29,232.954 1664.86,230.547 1665.43,231.658 1666,231.536 1666.56,232.903 1667.13,232.972 1667.7,232.865 1668.27,233.809 1668.84,232.631 1669.41,234.538 1669.97,233.156 1670.54,235.023 1671.11,234.668 1671.68,234.565 1672.25,236.132 1672.82,236.63 1673.38,237.092 1673.95,236.551 1674.52,234.868 1675.09,234.314 1675.66,234.109 1676.23,234.786 1676.79,236.36 1677.36,233.601 1677.93,231.211 1678.5,230.952 1679.07,232.005 1679.64,232.779 1680.2,232.65 1680.77,229.33 1681.34,228.263 1681.91,228.39 1682.48,229.658 1683.05,230.474 1683.61,230.752 1684.18,229.585 1684.75,230.616 1685.32,232.698 1685.89,231.36 1686.46,230.422 1687.02,229.144 1687.59,229.105 1688.16,228.087 1688.73,231.348 1689.3,230.321 1689.87,230.219 1690.44,230.28 1691,231.209 1691.57,235.238 1692.14,237.915 1692.71,237.342 1693.28,236.795 1693.85,236.336 1694.41,234.688 1694.98,234.275 1695.55,236.662 1696.12,236.074 1696.69,234.658 1697.26,233.355 1697.82,233.214 1698.39,231.875 1698.96,232.668 1699.53,233.36 1700.1,232.116 1700.67,232.895 1701.23,233.524 1701.8,232.017 1702.37,231.769 1702.94,230.504 1703.51,228.373 1704.08,227.244 1704.64,225.337 1705.21,226.67 1705.78,226.676 1706.35,225.575 1706.92,223.776 1707.49,222.172 1708.05,222.818 1708.62,222.137 1709.19,222.587 1709.76,224.023 1710.33,223.362 1710.9,223.897 1711.46,222.247 1712.03,223.044 1712.6,225.76 1713.17,225.05 1713.74,224.423 1714.31,223.616 1714.87,223.933 1715.44,223.295 1716.01,221.485 1716.58,223.187 1717.15,222.769 1717.72,220.39 1718.28,219.895 1718.85,223.843 1719.42,226.365 1719.99,228.673 1720.56,228.835 1721.13,226.866 1721.69,228.128 1722.26,228.151 1722.83,229.455 1723.4,228.671 1723.97,227.787 1724.54,227.91 1725.1,228.063 1725.67,229.503 1726.24,229.449 1726.81,231.7 1727.38,231.682 1727.95,233.427 1728.51,233.154 1729.08,231.971 1729.65,230.919 1730.22,233.019 1730.79,228.754 1731.36,229.837 1731.92,229.891 1732.49,232.998 1733.06,231.885 1733.63,231.928 1734.2,233.988 1734.77,232.74 1735.33,232.752 1735.9,232.613 1736.47,232.759 1737.04,229.409 1737.61,229.588 1738.18,229.835 1738.74,228.868 1739.31,229.099 1739.88,229.205 1740.45,229.422 1741.02,232.505 1741.59,232.327 1742.15,231.004 1742.72,229.642 1743.29,227.843 1743.86,229.056 1744.43,230.213 1745,228.124 1745.56,230.437 1746.13,231.331 1746.7,230.144 1747.27,230 1747.84,230 1748.41,228.023 1748.97,230.396 1749.54,229.522 1750.11,229.663 1750.68,227.445 1751.25,225.683 1751.82,224.901 1752.38,226.291 1752.95,226.42 1753.52,227.862 1754.09,226.871 1754.66,228.35 1755.23,228.327 1755.79,229.487 1756.36,228.712 1756.93,226.917 1757.5,227.041 1758.07,226.231 1758.64,226.533 1759.21,228.793 1759.77,228.983 1760.34,229.096 1760.91,229.19 1761.48,229.214 1762.05,229.366 1762.62,228.288 1763.18,228.691 1763.75,227.893 1764.32,231.245 1764.89,230.321 1765.46,229.45 1766.03,228.523 1766.59,229.948 1767.16,230.122 1767.73,229.14 1768.3,231.16 1768.87,231.198 1769.44,232.301 1770,232.235 1770.57,232.065 1771.14,231.093 1771.71,231.832 1772.28,231.681 1772.85,231.482 1773.41,231.489 1773.98,232.473 1774.55,232.521 1775.12,230.395 1775.69,231.377 1776.26,232.179 1776.82,231.15 1777.39,229.959 1777.96,229.074 1778.53,229.195 1779.1,229.361 1779.67,233.793 1780.23,234.518 1780.8,232.163 1781.37,232.957 1781.94,233.885 1782.51,232.755 1783.08,233.764 1783.64,231.394 1784.21,228.323 1784.78,225.5 1785.35,226.838 1785.92,225.967 1786.49,226.345 1787.05,227.586 1787.62,228.029 1788.19,229.288 1788.76,229.427 1789.33,229.711 1789.9,228.829 1790.46,229.126 1791.03,229.281 1791.6,231.443 1792.17,230.521 1792.74,232.566 1793.31,228.391 1793.87,229.403 1794.44,229.658 1795.01,228.978 1795.58,230.427 1796.15,230.543 1796.72,232.508 1797.28,233.355 1797.85,232.071 1798.42,228.811 1798.99,229.863 1799.56,231.013 1800.13,230.965 1800.69,230.832 1801.26,232.2 1801.83,230.962 1802.4,232.865 1802.97,234.634 1803.54,234.239 1804.1,233.718 1804.67,233.407 1805.24,231.059 1805.81,230.063 1806.38,231.019 1806.95,231.085 1807.51,229.849 1808.08,231.857 1808.65,231.674 1809.22,232.807 1809.79,232.653 1810.36,232.378 1810.92,232.163 1811.49,233.115 1812.06,235.055 1812.63,236.815 1813.2,235.285 1813.77,234.853 1814.33,233.572 1814.9,232.286 1815.47,231.063 1816.04,230.012 1816.61,230.084 1817.18,228.91 1817.74,229.953 1818.31,228.954 1818.88,230.929 1819.45,228.831 1820.02,228.671 1820.59,229.97 1821.15,231.099 1821.72,231.943 1822.29,232.738 1822.86,230.617 1823.43,232.51 1824,234.524 1824.56,234.341 1825.13,233.892 1825.7,233.347 1826.27,230.08 1826.84,228.928 1827.41,230.043 1827.97,232.14 1828.54,233.036 1829.11,232.792 1829.68,232.555 1830.25,233.207 1830.82,232.956 1831.39,231.705 1831.95,231.503 1832.52,231.12 1833.09,229.846 1833.66,230.695 1834.23,231.735 1834.8,232.481 1835.36,230.088 1835.93,228.71 1836.5,228.732 1837.07,229.689 1837.64,230.421 1838.21,229.288 1838.77,227.034 1839.34,223.963 1839.91,223.133 1840.48,220.562 1841.05,221.161 1841.62,221.615 1842.18,222.033 1842.75,223.649 1843.32,223.116 1843.89,224.368 1844.46,225.938 1845.03,226.093 1845.59,226.62 1846.16,226.027 1846.73,224.295 1847.3,225.808 1847.87,225.196 1848.44,226.674 1849,226.778 1849.57,227.868 1850.14,230.287 1850.71,231.302 1851.28,228.101 1851.85,227.285 1852.41,225.422 1852.98,224.905 1853.55,224.332 1854.12,223.752 1854.69,225.279 1855.26,226.603 1855.82,228.088 1856.39,228.183 1856.96,231.857 1857.53,231.833 1858.1,233.062 1858.67,232.908 1859.23,232.778 1859.8,230.597 1860.37,230.751 1860.94,231.966 1861.51,231.999 1862.08,231.996 1862.64,230.759 1863.21,230.824 1863.78,229.682 1864.35,228.711 1864.92,229.875 1865.49,230.083 1866.05,231.145 1866.62,230.561 1867.19,230.525 1867.76,228.294 1868.33,227.366 1868.9,228.492 1869.46,229.363 1870.03,229.392 1870.6,229.583 1871.17,232.821 1871.74,231.761 1872.31,231.564 1872.87,231.636 1873.44,232.552 1874.01,230.332 1874.58,230.323 1875.15,231.455 1875.72,229.552 1876.28,230.749 1876.85,230.582 1877.42,229.677 1877.99,227.789 1878.56,230.175 1879.13,231.314 1879.69,231.159 1880.26,230.041 1880.83,229.951 1881.4,230.835 1881.97,229.661 1882.54,228.515 1883.1,225.753 1883.67,226.072 1884.24,228.397 1884.81,227.439 1885.38,229.797 1885.95,226.684 1886.51,227.927 1887.08,230.025 1887.65,231.821 1888.22,230.65 1888.79,230.803 1889.36,229.774 1889.92,230.921 1890.49,231.968 1891.06,229.942 1891.63,229.949 1892.2,231.056 1892.77,231.89 1893.33,231.904 1893.9,233.6 1894.47,234.598 1895.04,234.081 1895.61,234.826 1896.18,231.592 1896.74,231.404 1897.31,233.16 1897.88,234.069 1898.45,235.754 1899.02,234.31 1899.59,232.854 1900.16,231.654 1900.72,231.497 1901.29,231.403 1901.86,232.216 1902.43,230.073 1903,227.888 1903.57,227.84 1904.13,229.014 1904.7,231.083 1905.27,229.935 1905.84,228.861 1906.41,229.967 1906.98,228.973 1907.54,229.103 1908.11,231.215 1908.68,232.053 1909.25,232.099 1909.82,231.912 1910.39,230.838 1910.95,230.498 1911.52,230.46 1912.09,230.348 1912.66,229.258 1913.23,228.25 1913.8,228.267 1914.36,233.523 1914.93,234.412 1915.5,234.144 1916.07,231.604 1916.64,230.542 1917.21,231.484 1917.77,231.309 1918.34,230.286 1918.91,232.556 1919.48,230.443 1920.05,233.712 1920.62,233.482 1921.18,232.163 1921.75,231.127 1922.32,234.089 1922.89,233.488 1923.46,232.07 1924.03,230.98 1924.59,230.851 1925.16,229.742 1925.73,230.851 1926.3,230.798 1926.87,232.865 1927.44,233.503 1928,232.006 1928.57,232.799 1929.14,232.641 1929.71,232.352 1930.28,231.983 1930.85,230.726 1931.41,229.812 1931.98,228.779 1932.55,228.832 1933.12,228.96 1933.69,227.766 1934.26,227.942 1934.82,226.987 1935.39,225.991 1935.96,227.16 1936.53,225.183 1937.1,225.471 1937.67,225.735 1938.23,223.98 1938.8,225.418 1939.37,224.684 1939.94,225.176 1940.51,228.485 1941.08,228.661 1941.64,228.727 1942.21,227.783 1942.78,226.643 1943.35,227.889 1943.92,226.997 1944.49,228.406 1945.05,229.742 1945.62,229.592 1946.19,229.403 1946.76,229.409 1947.33,229.551 1947.9,230.783 1948.46,230.756 1949.03,231.973 1949.6,233.928 1950.17,232.635 1950.74,232.271 1951.31,231.811 1951.87,232.568 1952.44,233.432 1953.01,231.197 1953.58,231.047 1954.15,232.867 1954.72,233.759 1955.28,234.71 1955.85,235.308 1956.42,231.714 1956.99,232.43 1957.56,229.884 1958.13,230.749 1958.69,230.588 1959.26,231.644 1959.83,231.486 1960.4,230.085 1960.97,230.041 1961.54,229.897 1962.1,227.706 1962.67,226.538 1963.24,225.8 1963.81,225.09 1964.38,225.226 1964.95,225.522 1965.51,225.828 1966.08,228.283 1966.65,230.45 1967.22,229.501 1967.79,230.577 1968.36,230.69 1968.92,228.713 1969.49,228.639 1970.06,228.687 1970.63,229.756 1971.2,231.858 1971.77,230.777 1972.34,229.639 1972.9,228.536 1973.47,229.607 1974.04,229.578 1974.61,230.467 1975.18,229.319 1975.75,229.214 1976.31,227.267 1976.88,224.48 1977.45,224.966 1978.02,228.279 1978.59,228.342 1979.16,230.574 1979.72,228.576 1980.29,229.829 1980.86,227.639 1981.43,227.62 1982,227.933 1982.57,228.889 1983.13,229.02 1983.7,232.245 1984.27,235.042 1984.84,234.81 1985.41,234.442 1985.98,235.157 1986.54,236.657 1987.11,235.062 1987.68,234.796 1988.25,234.628 1988.82,232.252 1989.39,231.015 1989.95,232.091 1990.52,233.918 1991.09,230.489 1991.66,232.502 1992.23,234.327 1992.8,233.825 1993.36,233.616 1993.93,234.336 1994.5,232.842 1995.07,230.356 1995.64,230.676 1996.21,231.601 1996.77,232.491 1997.34,231.294 1997.91,231.136 1998.48,231.993 1999.05,230.93 1999.62,231.9 2000.18,231.924 2000.75,231.904 2001.32,231.706 2001.89,229.556 2002.46,231.502 2003.03,230.344 2003.59,229.08 2004.16,227.955 2004.73,230.133 2005.3,230.049 2005.87,228.671 2006.44,228.777 2007,228.821 2007.57,228.836 2008.14,228.547 2008.71,228.52 2009.28,226.545 2009.85,226.555 2010.41,225.688 2010.98,225.02 2011.55,225.414 2012.12,224.532 2012.69,226.848 2013.26,227.123 2013.82,226.178 2014.39,226.344 2014.96,227.703 2015.53,227.857 2016.1,227.003 2016.67,227.11 2017.23,226.28 2017.8,226.88 2018.37,227.316 2018.94,229.541 2019.51,229.708 2020.08,230.913 2020.64,231.902 2021.21,230.772 2021.78,232.837 2022.35,231.485 2022.92,230.462 2023.49,231.391 2024.05,231.151 2024.62,231.043 2025.19,229.866 2025.76,228.935 2026.33,229.214 2026.9,229.326 2027.46,226.412 2028.03,223.557 2028.6,223.022 2029.17,224.296 2029.74,223.766 2030.31,225.308 2030.87,225.401 2031.44,227.925 2032.01,229.182 2032.58,226.294 2033.15,229.434 2033.72,229.472 2034.28,229.576 2034.85,230.698 2035.42,230.581 2035.99,231.602 2036.56,228.313 2037.13,228.713 2037.69,229.86 2038.26,230.823 2038.83,230.702 2039.4,227.86 2039.97,225.781 2040.54,227.008 2041.11,228.152 2041.67,228.321 2042.24,227.377 2042.81,230.862 2043.38,231.674 2043.95,229.428 2044.52,229.653 2045.08,230.724 2045.65,230.577 2046.22,231.677 2046.79,230.649 2047.36,229.651 2047.93,229.904 2048.49,230.265 2049.06,229.25 2049.63,227.357 2050.2,226.399 2050.77,225.791 2051.34,227.203 2051.9,228.621 2052.47,229.808 2053.04,231.145 2053.61,230.153 2054.18,230.04 2054.75,230.98 2055.31,232.072 2055.88,231.944 2056.45,230.851 2057.02,232.971 2057.59,234.636 2058.16,234.511 2058.72,236.472 2059.29,235.08 2059.86,234.838 2060.43,231.382 2061,231.278 2061.57,233.242 2062.13,231.966 2062.7,233.019 2063.27,235.793 2063.84,235.396 2064.41,235.945 2064.98,235.404 2065.54,237.06 2066.11,235.209 2066.68,233.782 2067.25,233.418 2067.82,233.259 2068.39,231.713 2068.95,232.625 2069.52,231.466 2070.09,232.269 2070.66,233 2071.23,232.615 2071.8,230.544 2072.36,230.643 2072.93,232.67 2073.5,233.529 2074.07,233.348 2074.64,234.149 2075.21,231.679 2075.77,231.774 2076.34,230.479 2076.91,229.04 2077.48,226.943 2078.05,227.066 2078.62,229.255 2079.18,230.292 2079.75,230.364 2080.32,230.337 2080.89,228.141 2081.46,226.13 2082.03,226.179 2082.59,228.204 2083.16,228.356 2083.73,231.52 2084.3,232.502 2084.87,232.359 2085.44,231.145 2086,231.104 2086.57,229.714 2087.14,228.851 2087.71,228.889 2088.28,228.981 2088.85,229.3 2089.41,229.119 2089.98,228.049 2090.55,228.26 2091.12,229.314 2091.69,227.393 2092.26,228.546 2092.82,227.396 2093.39,228.523 2093.96,229.585 2094.53,229.478 2095.1,230.133 2095.67,230.011 2096.23,229.139 2096.8,229.109 2097.37,226.805 2097.94,228.058 2098.51,225.976 2099.08,225.917 2099.64,227.229 2100.21,227.53 2100.78,226.628 2101.35,227.498 2101.92,227.692 2102.49,226.88 2103.05,227.035 2103.62,230.145 2104.19,228.998 2104.76,228.117 2105.33,230.376 2105.9,230.305 2106.46,231.233 2107.03,233.074 2107.6,231.783 2108.17,232.65 2108.74,234.235 2109.31,235.982 2109.87,235.561 2110.44,234.178 2111.01,232.731 2111.58,231.273 2112.15,231.046 2112.72,229.896 2113.29,231.928 2113.85,232.571 2114.42,232.288 2114.99,231.147 2115.56,232.93 2116.13,232.656 2116.7,231.262 2117.26,230.911 2117.83,230.562 2118.4,229.422 2118.97,228.246 2119.54,229.27 2120.11,228.035 2120.67,227.955 2121.24,230.202 2121.81,227.987 2122.38,228.901 2122.95,228.858 2123.52,228.654 2124.08,228.88 2124.65,231.068 2125.22,229.99 2125.79,231.233 2126.36,231.332 2126.93,232.382 2127.49,230.245 2128.06,231.097 2128.63,231.033 2129.2,231.045 2129.77,231.93 2130.34,231.651 2130.9,232.832 2131.47,233.574 2132.04,235.059 2132.61,235.798 2133.18,234.115 2133.75,233.905 2134.31,233.461 2134.88,235.282 2135.45,234.687 2136.02,233.332 2136.59,232.963 2137.16,231.565 2137.72,231.346 2138.29,233.156 2138.86,232.795 2139.43,232.661 2140,229.072 2140.57,228.843 2141.13,226.734 2141.7,225.922 2142.27,225.11 2142.84,227.267 2143.41,227.351 2143.98,227.343 2144.54,227.54 2145.11,225.547 2145.68,224.776 2146.25,226.179 2146.82,227.261 2147.39,227.359 2147.95,226.37 2148.52,225.502 2149.09,225.611 2149.66,225.875 2150.23,226.313 2150.8,225.72 2151.36,226.02 2151.93,229.349 2152.5,229.26 2153.07,227.227 2153.64,227.441 2154.21,228.514 2154.77,227.668 2155.34,225.656 2155.91,226.079 2156.48,226.219 2157.05,226.522 2157.62,226.903 2158.18,226.071 2158.75,227.361 2159.32,228.51 2159.89,228.781 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.022\n  with uncertainty of ± 0.0019923223875739724\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01957 ± (0.00254465, 0.00256233) (MC)\n  95% confidence interval: [-4.02441, -4.01447] (MC)\n  linear error propagation: -4.01946 ± 0.00248634\n  |δ_y| = |0.0015524| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0195674862655375, val_l = 0.004846430892879283, val_u = 0.005097816028727387)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip850\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip851\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip852\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.34 2211.02,1147.34 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,985.557 2211.02,985.557 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,823.776 2211.02,823.776 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,661.995 2211.02,661.995 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,500.214 2211.02,500.214 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,338.433 2211.02,338.433 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.34 365.751,1147.34 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,985.557 365.751,985.557 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,823.776 365.751,823.776 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,661.995 365.751,661.995 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,500.214 365.751,500.214 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,338.433 365.751,338.433 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M298.909 1133.14 Q295.298 1133.14 293.469 1136.7 Q291.664 1140.24 291.664 1147.37 Q291.664 1154.48 293.469 1158.04 Q295.298 1161.59 298.909 1161.59 Q302.543 1161.59 304.349 1158.04 Q306.177 1154.48 306.177 1147.37 Q306.177 1140.24 304.349 1136.7 Q302.543 1133.14 298.909 1133.14 M298.909 1129.43 Q304.719 1129.43 307.775 1134.04 Q310.853 1138.62 310.853 1147.37 Q310.853 1156.1 307.775 1160.71 Q304.719 1165.29 298.909 1165.29 Q293.099 1165.29 290.02 1160.71 Q286.964 1156.1 286.964 1147.37 Q286.964 1138.62 290.02 1134.04 Q293.099 1129.43 298.909 1129.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M259.557 998.902 L267.196 998.902 L267.196 972.536 L258.886 974.203 L258.886 969.944 L267.15 968.277 L271.826 968.277 L271.826 998.902 L279.465 998.902 L279.465 1002.84 L259.557 1002.84 L259.557 998.902 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M298.909 971.356 Q295.298 971.356 293.469 974.921 Q291.664 978.462 291.664 985.592 Q291.664 992.698 293.469 996.263 Q295.298 999.805 298.909 999.805 Q302.543 999.805 304.349 996.263 Q306.177 992.698 306.177 985.592 Q306.177 978.462 304.349 974.921 Q302.543 971.356 298.909 971.356 M298.909 967.652 Q304.719 967.652 307.775 972.259 Q310.853 976.842 310.853 985.592 Q310.853 994.319 307.775 998.925 Q304.719 1003.51 298.909 1003.51 Q293.099 1003.51 290.02 998.925 Q286.964 994.319 286.964 985.592 Q286.964 976.842 290.02 972.259 Q293.099 967.652 298.909 967.652 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M262.775 837.121 L279.094 837.121 L279.094 841.056 L257.15 841.056 L257.15 837.121 Q259.812 834.366 264.395 829.737 Q269.002 825.084 270.182 823.741 Q272.428 821.218 273.307 819.482 Q274.21 817.723 274.21 816.033 Q274.21 813.278 272.266 811.542 Q270.344 809.806 267.242 809.806 Q265.043 809.806 262.59 810.57 Q260.159 811.334 257.381 812.885 L257.381 808.163 Q260.205 807.028 262.659 806.45 Q265.113 805.871 267.15 805.871 Q272.52 805.871 275.715 808.556 Q278.909 811.241 278.909 815.732 Q278.909 817.862 278.099 819.783 Q277.312 821.681 275.205 824.274 Q274.627 824.945 271.525 828.163 Q268.423 831.357 262.775 837.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M298.909 809.575 Q295.298 809.575 293.469 813.14 Q291.664 816.681 291.664 823.811 Q291.664 830.917 293.469 834.482 Q295.298 838.024 298.909 838.024 Q302.543 838.024 304.349 834.482 Q306.177 830.917 306.177 823.811 Q306.177 816.681 304.349 813.14 Q302.543 809.575 298.909 809.575 M298.909 805.871 Q304.719 805.871 307.775 810.477 Q310.853 815.061 310.853 823.811 Q310.853 832.538 307.775 837.144 Q304.719 841.727 298.909 841.727 Q293.099 841.727 290.02 837.144 Q286.964 832.538 286.964 823.811 Q286.964 815.061 290.02 810.477 Q293.099 805.871 298.909 805.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M272.914 660.641 Q276.27 661.358 278.145 663.627 Q280.043 665.895 280.043 669.229 Q280.043 674.344 276.525 677.145 Q273.006 679.946 266.525 679.946 Q264.349 679.946 262.034 679.506 Q259.742 679.09 257.289 678.233 L257.289 673.719 Q259.233 674.854 261.548 675.432 Q263.863 676.011 266.386 676.011 Q270.784 676.011 273.076 674.275 Q275.39 672.539 275.39 669.229 Q275.39 666.173 273.238 664.46 Q271.108 662.724 267.289 662.724 L263.261 662.724 L263.261 658.881 L267.474 658.881 Q270.923 658.881 272.752 657.516 Q274.58 656.127 274.58 653.534 Q274.58 650.872 272.682 649.46 Q270.807 648.025 267.289 648.025 Q265.367 648.025 263.168 648.442 Q260.969 648.858 258.33 649.738 L258.33 645.571 Q260.992 644.831 263.307 644.46 Q265.645 644.09 267.705 644.09 Q273.029 644.09 276.131 646.52 Q279.233 648.928 279.233 653.048 Q279.233 655.919 277.59 657.909 Q275.946 659.877 272.914 660.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M298.909 647.794 Q295.298 647.794 293.469 651.358 Q291.664 654.9 291.664 662.03 Q291.664 669.136 293.469 672.701 Q295.298 676.242 298.909 676.242 Q302.543 676.242 304.349 672.701 Q306.177 669.136 306.177 662.03 Q306.177 654.9 304.349 651.358 Q302.543 647.794 298.909 647.794 M298.909 644.09 Q304.719 644.09 307.775 648.696 Q310.853 653.28 310.853 662.03 Q310.853 670.756 307.775 675.363 Q304.719 679.946 298.909 679.946 Q293.099 679.946 290.02 675.363 Q286.964 670.756 286.964 662.03 Q286.964 653.28 290.02 648.696 Q293.099 644.09 298.909 644.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M271.594 487.008 L259.789 505.457 L271.594 505.457 L271.594 487.008 M270.367 482.934 L276.247 482.934 L276.247 505.457 L281.177 505.457 L281.177 509.346 L276.247 509.346 L276.247 517.494 L271.594 517.494 L271.594 509.346 L255.992 509.346 L255.992 504.832 L270.367 482.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M298.909 486.012 Q295.298 486.012 293.469 489.577 Q291.664 493.119 291.664 500.248 Q291.664 507.355 293.469 510.92 Q295.298 514.461 298.909 514.461 Q302.543 514.461 304.349 510.92 Q306.177 507.355 306.177 500.248 Q306.177 493.119 304.349 489.577 Q302.543 486.012 298.909 486.012 M298.909 482.309 Q304.719 482.309 307.775 486.915 Q310.853 491.498 310.853 500.248 Q310.853 508.975 307.775 513.582 Q304.719 518.165 298.909 518.165 Q293.099 518.165 290.02 513.582 Q286.964 508.975 286.964 500.248 Q286.964 491.498 290.02 486.915 Q293.099 482.309 298.909 482.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M258.793 321.153 L277.15 321.153 L277.15 325.088 L263.076 325.088 L263.076 333.56 Q264.094 333.213 265.113 333.051 Q266.131 332.865 267.15 332.865 Q272.937 332.865 276.316 336.037 Q279.696 339.208 279.696 344.625 Q279.696 350.203 276.224 353.305 Q272.752 356.384 266.432 356.384 Q264.256 356.384 261.988 356.013 Q259.742 355.643 257.335 354.902 L257.335 350.203 Q259.418 351.338 261.641 351.893 Q263.863 352.449 266.34 352.449 Q270.344 352.449 272.682 350.342 Q275.02 348.236 275.02 344.625 Q275.02 341.014 272.682 338.907 Q270.344 336.801 266.34 336.801 Q264.465 336.801 262.59 337.217 Q260.738 337.634 258.793 338.514 L258.793 321.153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M298.909 324.231 Q295.298 324.231 293.469 327.796 Q291.664 331.338 291.664 338.467 Q291.664 345.574 293.469 349.139 Q295.298 352.68 298.909 352.68 Q302.543 352.68 304.349 349.139 Q306.177 345.574 306.177 338.467 Q306.177 331.338 304.349 327.796 Q302.543 324.231 298.909 324.231 M298.909 320.528 Q304.719 320.528 307.775 325.134 Q310.853 329.717 310.853 338.467 Q310.853 347.194 307.775 351.801 Q304.719 356.384 298.909 356.384 Q293.099 356.384 290.02 351.801 Q286.964 347.194 286.964 338.467 Q286.964 329.717 290.02 325.134 Q293.099 320.528 298.909 320.528 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip852)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1153.96 400.199,1151.63 400.786,1039.62 401.372,938.765 401.958,945.143 402.545,947.286 403.131,859.33 403.718,772.769 404.304,699.637 404.891,630.035 405.477,716.98 406.063,652.393 406.65,589.465 407.236,537.089 407.823,488.54 408.409,443.677 408.995,403.387 409.582,421.13 410.168,387.343 410.755,356.682 411.341,329.63 411.927,306.605 412.514,286.03 413.1,269.004 413.687,254.697 414.273,244.012 414.86,235.14 415.446,227.775 416.032,222.381 416.619,219.895 417.205,243.321 417.792,242.043 418.378,241.534 418.964,243.108 419.551,266.144 420.137,289.402 420.724,294.135 421.31,299.619 421.896,323.473 422.483,330.751 423.069,353.084 423.656,362.122 424.242,384.428 424.829,393.615 425.415,403.663 426.001,435.076 426.588,446.185 427.174,466.547 427.761,486.59 428.347,513.681 428.933,538.95 429.52,556.9 430.106,566.972 430.693,597.905 431.279,607.187 431.865,629.262 432.452,643.689 433.038,652.651 433.625,672.622 434.211,692.145 434.798,705.913 435.384,733.868 435.97,741.262 436.557,753.373 437.143,765.443 437.73,776.742 438.316,784.062 438.902,798.891 439.489,813.763 440.075,827.711 440.662,841.768 441.248,862.617 441.835,875.567 442.421,898.159 443.007,906.162 443.594,914.104 444.18,922.16 444.767,933.175 445.353,941.29 445.939,946.011 446.526,959.252 447.112,963.525 447.699,970.672 448.285,980.223 448.871,984.314 449.458,988.763 450.044,998.018 450.631,1004.57 451.217,1013.31 451.804,1022.14 452.39,1025.95 452.976,1029.58 453.563,1037.96 454.149,1044.03 454.736,1049.95 455.322,1057.68 455.908,1060.72 456.495,1066.15 457.081,1069.72 457.668,1077.56 458.254,1082.8 458.84,1090.09 459.427,1093.02 460.013,1101.91 460.6,1104.53 461.186,1107.37 461.773,1113.52 462.359,1117.44 462.945,1119.92 463.532,1126.1 464.118,1128.51 464.705,1132.84 465.291,1136.9 465.877,1139.03 466.464,1144.45 467.05,1148.58 467.637,1150.54 468.223,1155.75 468.809,1158.76 469.396,1156.86 469.982,1162.15 470.569,1169.05 471.155,1170.29 471.742,1173.08 472.328,1175.86 472.914,1177.22 473.501,1181.67 474.087,1184.27 474.674,1185.15 475.26,1185.77 475.846,1188.34 476.433,1192.47 477.019,1196.19 477.606,1198.56 478.192,1199.02 478.778,1202.87 479.365,1205.01 479.951,1205.52 480.538,1207.45 481.124,1207.62 481.711,1207.94 482.297,1211.5 482.883,1215.04 483.47,1218.07 484.056,1218.09 484.643,1218.39 485.229,1222.97 485.815,1219.77 486.402,1219.96 486.988,1225.63 487.575,1225.45 488.161,1225.38 488.748,1225.13 489.334,1224.94 489.92,1226.22 490.507,1227.63 491.093,1233.33 491.68,1232.87 492.266,1232.27 492.852,1231.69 493.439,1232.52 494.025,1233.55 494.612,1234.39 495.198,1239.71 495.784,1240.75 496.371,1241.77 496.957,1236.79 497.544,1236.21 498.13,1234.65 498.717,1234.34 499.303,1235.47 499.889,1239.04 500.476,1239.99 501.062,1241.04 501.649,1243.34 502.235,1243.79 502.821,1242.86 503.408,1244.68 503.994,1246.5 504.581,1247.08 505.167,1244.56 505.753,1242.33 506.34,1241.64 506.926,1242.28 507.513,1241.86 508.099,1241.43 508.686,1240.92 509.272,1243.11 509.858,1242.47 510.445,1245.55 511.031,1244.62 511.618,1243.63 512.204,1241.66 512.79,1245.27 513.377,1248.78 513.963,1247.53 514.55,1250.53 515.136,1249.38 515.722,1249.84 516.309,1247.43 516.895,1246.53 517.482,1242.7 518.068,1242.01 518.655,1241.13 519.241,1240.64 519.827,1240.18 520.414,1239.69 521,1239.47 521.587,1240.12 522.173,1240.69 522.759,1242.53 523.346,1241.63 523.932,1242.58 524.519,1243.47 525.105,1241.4 525.691,1242.26 526.278,1241.59 526.864,1240.62 527.451,1241.38 528.037,1240.61 528.624,1242.81 529.21,1242.4 529.796,1243.35 530.383,1242.99 530.969,1242.36 531.556,1243.09 532.142,1244.86 532.728,1245.45 533.315,1245.94 533.901,1245.27 534.488,1241.74 535.074,1243.56 535.661,1241.22 536.247,1239.41 536.833,1238.74 537.42,1242.44 538.006,1243.2 538.593,1239.9 539.179,1237.88 539.765,1235.86 540.352,1236.67 540.938,1240.33 541.525,1241.29 542.111,1240.71 542.697,1240.23 543.284,1238.27 543.87,1237.94 544.457,1238.93 545.043,1239.73 545.63,1240.37 546.216,1238.22 546.802,1237.85 547.389,1237.05 547.975,1237.84 548.562,1240.07 549.148,1239.52 549.734,1236.27 550.321,1238.67 550.907,1240.85 551.494,1238.82 552.08,1238.49 552.666,1240.81 553.253,1239.09 553.839,1237.45 554.426,1235.54 555.012,1235.4 555.599,1236.3 556.185,1238.55 556.771,1238.06 557.358,1236.23 557.944,1236.96 558.531,1239.17 559.117,1238.62 559.703,1237.1 560.29,1237.91 560.876,1237.38 561.463,1237.29 562.049,1236.73 562.635,1234.84 563.222,1231.94 563.808,1234.55 564.395,1236.85 564.981,1239.05 565.568,1240.97 566.154,1238.64 566.74,1240.66 567.327,1241.46 567.913,1240.89 568.5,1240.6 569.086,1239.69 569.672,1239.91 570.259,1238.97 570.845,1239.68 571.432,1239.28 572.018,1238.59 572.605,1238.04 573.191,1236.05 573.777,1235.31 574.364,1235.93 574.95,1235.29 575.537,1233.18 576.123,1228.86 576.709,1232.62 577.296,1233.63 577.882,1233.28 578.469,1234.36 579.055,1235.49 579.641,1234.81 580.228,1236.83 580.814,1238.86 581.401,1235.35 581.987,1236.26 582.574,1235.47 583.16,1236.09 583.746,1234.19 584.333,1233.79 584.919,1236.06 585.506,1236.62 586.092,1230.72 586.678,1230.47 587.265,1232.74 587.851,1229.81 588.438,1226.9 589.024,1230.74 589.61,1227.68 590.197,1228.56 590.783,1228.38 591.37,1229.27 591.956,1229.25 592.543,1230.25 593.129,1227.29 593.715,1228.51 594.302,1228.08 594.888,1229.14 595.475,1226.39 596.061,1227.46 596.647,1225.82 597.234,1224.09 597.82,1226.55 598.407,1227.56 598.993,1228.36 599.579,1230.82 600.166,1230.36 600.752,1231.3 601.339,1228.29 601.925,1228.2 602.512,1228.04 603.098,1228.09 603.684,1226.83 604.271,1228.04 604.857,1229.21 605.444,1227.69 606.03,1227.51 606.616,1227.47 607.203,1229.84 607.789,1228.16 608.376,1229.31 608.962,1230.01 609.548,1230.98 610.135,1230.4 610.721,1231.53 611.308,1227.21 611.894,1226.85 612.481,1225.3 613.067,1225.15 613.653,1226.41 614.24,1227.6 614.826,1227.24 615.413,1231.37 615.999,1230.87 616.585,1231.91 617.172,1232.6 617.758,1229.61 618.345,1229.08 618.931,1228.64 619.518,1230.52 620.104,1229.73 620.69,1230.51 621.277,1231.28 621.863,1233.18 622.45,1233.52 623.036,1235.6 623.622,1237.46 624.209,1236.42 624.795,1234.35 625.382,1234.98 625.968,1236.65 626.554,1238.39 627.141,1236 627.727,1232.46 628.314,1230.64 628.9,1231.32 629.487,1228.22 630.073,1225.29 630.659,1226.42 631.246,1224.99 631.832,1222.24 632.419,1224.84 633.005,1224.85 633.591,1225.85 634.178,1222.91 634.764,1224.1 635.351,1223.84 635.937,1226.41 636.523,1227.62 637.11,1228.49 637.696,1229.45 638.283,1224.88 638.869,1224.74 639.456,1225.66 640.042,1226.86 640.628,1225.17 641.215,1224.71 641.801,1224.34 642.388,1225.5 642.974,1225.21 643.56,1225.03 644.147,1227.26 644.733,1228.16 645.32,1229.07 645.906,1226 646.492,1221.78 647.079,1227.07 647.665,1226.48 648.252,1224.95 648.838,1224.65 649.425,1222.02 650.011,1220.52 650.597,1218.96 651.184,1220.16 651.77,1218.56 652.357,1219.8 652.943,1218.62 653.529,1220.33 654.116,1221.64 654.702,1218.96 655.289,1219.06 655.875,1217.62 656.462,1218.83 657.048,1219.94 657.634,1222.8 658.221,1221.31 658.807,1221.03 659.394,1222.32 659.98,1220.85 660.566,1219.37 661.153,1220.72 661.739,1221.87 662.326,1216.43 662.912,1215.45 663.498,1215.43 664.085,1213.13 664.671,1214.75 665.258,1214.95 665.844,1217.8 666.431,1217.82 667.017,1217.81 667.603,1215.1 668.19,1212.82 668.776,1217.1 669.363,1214.89 669.949,1212.3 670.535,1214.08 671.122,1211.66 671.708,1209.4 672.295,1210.01 672.881,1215.72 673.467,1214.37 674.054,1215.89 674.64,1218.89 675.227,1217.35 675.813,1216.19 676.4,1216.44 676.986,1214.33 677.572,1215.66 678.159,1213.04 678.745,1214.82 679.332,1213.66 679.918,1212.58 680.504,1212.77 681.091,1218.22 681.677,1218.38 682.264,1221.33 682.85,1223.85 683.436,1228.83 684.023,1228.29 684.609,1229.16 685.196,1227.28 685.782,1227.04 686.369,1226.58 686.955,1229 687.541,1228.41 688.128,1227.91 688.714,1227.28 689.301,1226.85 689.887,1227.75 690.473,1226.95 691.06,1226.49 691.646,1225.03 692.233,1226.08 692.819,1224.13 693.405,1223.83 693.992,1220.91 694.578,1220.8 695.165,1218.11 695.751,1220.73 696.338,1219.4 696.924,1218.15 697.51,1217.09 698.097,1221.49 698.683,1222.93 699.27,1221.17 699.856,1219.82 700.442,1218.29 701.029,1219.63 701.615,1219.63 702.202,1217.99 702.788,1215.53 703.375,1214.38 703.961,1215.96 704.547,1212.29 705.134,1210.16 705.72,1210.57 706.307,1208.29 706.893,1209.03 707.479,1210.83 708.066,1213.83 708.652,1213.16 709.239,1212.19 709.825,1211.09 710.411,1214.11 710.998,1215.58 711.584,1217.02 712.171,1215.82 712.757,1216.26 713.344,1216.41 713.93,1216.62 714.516,1216.67 715.103,1218.23 715.689,1215.52 716.276,1217.04 716.862,1217.1 717.448,1218.58 718.035,1218.32 718.621,1217.21 719.208,1214.53 719.794,1217.25 720.38,1215.89 720.967,1216.05 721.553,1214.99 722.14,1215.2 722.726,1215.26 723.313,1215.39 723.899,1212.97 724.485,1213.13 725.072,1214.55 725.658,1214.75 726.245,1216.29 726.831,1217.89 727.417,1217.83 728.004,1218.97 728.59,1218.89 729.177,1218.42 729.763,1218.24 730.349,1220.55 730.936,1220.45 731.522,1217.7 732.109,1220.17 732.695,1218.53 733.282,1215.98 733.868,1215.99 734.454,1216.01 735.041,1217.53 735.627,1217.55 736.214,1218.88 736.8,1218.9 737.386,1221.51 737.973,1221.24 738.559,1219.56 739.146,1218.16 739.732,1219.13 740.318,1221.71 740.905,1225.35 741.491,1224.81 742.078,1228.24 742.664,1227.69 743.251,1225.77 743.837,1225.57 744.423,1223.65 745.01,1224.65 745.596,1225.6 746.183,1225.14 746.769,1227.45 747.355,1228.2 747.942,1227.62 748.528,1224.48 749.115,1220.37 749.701,1220.09 750.288,1219.64 750.874,1219.42 751.46,1219.15 752.047,1218.91 752.633,1217.69 753.22,1217.8 753.806,1219.04 754.392,1216.14 754.979,1217.55 755.565,1217.48 756.152,1218.85 756.738,1219.93 757.324,1218.46 757.911,1219.59 758.497,1219.53 759.084,1221.8 759.67,1221.58 760.257,1222.43 760.843,1221.08 761.429,1219.35 762.016,1220.27 762.602,1215.9 763.189,1215.73 763.775,1212.9 764.361,1214.54 764.948,1214.57 765.534,1215 766.121,1213.92 766.707,1213.68 767.293,1214.87 767.88,1213.47 768.466,1212.33 769.053,1213.81 769.639,1216.61 770.226,1216.39 770.812,1214.92 771.398,1212.2 771.985,1212.25 772.571,1212.3 773.158,1213.89 773.744,1213.05 774.33,1214.37 774.917,1211.77 775.503,1213.21 776.09,1214.59 776.676,1214.67 777.262,1215.08 777.849,1212.24 778.435,1211.22 779.022,1208.89 779.608,1211.97 780.195,1213.46 780.781,1213.66 781.367,1213.6 781.954,1213.56 782.54,1216.5 783.127,1217.82 783.713,1218.86 784.299,1218.46 784.886,1217.13 785.472,1215.82 786.059,1215.81 786.645,1214.58 787.232,1214.52 787.818,1214.67 788.404,1212.1 788.991,1212.31 789.577,1213.55 790.164,1213.34 790.75,1213.29 791.336,1215.79 791.923,1214.34 792.509,1215.9 793.096,1215.63 793.682,1214.42 794.268,1214.51 794.855,1215.89 795.441,1216.04 796.028,1217.48 796.614,1221.39 797.201,1222.66 797.787,1222.11 798.373,1220.34 798.96,1222.88 799.546,1222.71 800.133,1224.91 800.719,1224.57 801.305,1224.2 801.892,1223.87 802.478,1223.52 803.065,1221.81 803.651,1220.1 804.237,1222.57 804.824,1223.64 805.41,1221.77 805.997,1222.57 806.583,1221.1 807.17,1215.35 807.756,1217.88 808.342,1215.35 808.929,1215.74 809.515,1215.77 810.102,1214.52 810.688,1214.75 811.274,1214.74 811.861,1213.84 812.447,1213.9 813.034,1216.51 813.62,1214.83 814.206,1212.02 814.793,1215.78 815.379,1215.93 815.966,1215.96 816.552,1217.02 817.139,1218.5 817.725,1218.43 818.311,1218.32 818.898,1219.4 819.484,1219.29 820.071,1217.58 820.657,1217.41 821.243,1217.28 821.83,1218.24 822.416,1216.83 823.003,1219.2 823.589,1222.82 824.175,1223.68 824.762,1225.77 825.348,1229.05 825.935,1228.65 826.521,1224.03 827.108,1226.04 827.694,1224.23 828.28,1222.32 828.867,1221.73 829.453,1221.3 830.04,1220.68 830.626,1223.01 831.212,1222.62 831.799,1219.63 832.385,1220.82 832.972,1223.3 833.558,1224.07 834.145,1223.39 834.731,1223.02 835.317,1223.81 835.904,1223.36 836.49,1223.06 837.077,1224.11 837.663,1223.46 838.249,1221.38 838.836,1219.63 839.422,1218.07 840.009,1215.02 840.595,1213.56 841.181,1217.24 841.768,1218.24 842.354,1216.63 842.941,1216.46 843.527,1210.77 844.114,1210.92 844.7,1212.33 845.286,1209.65 845.873,1208.57 846.459,1204.89 847.046,1204.17 847.632,1206.03 848.218,1207.93 848.805,1208.34 849.391,1208.79 849.978,1206.33 850.564,1206.75 851.15,1207.35 851.737,1206.64 852.323,1207.15 852.91,1207.67 853.496,1205.38 854.083,1205.87 854.669,1205.14 855.255,1205.71 855.842,1206.29 856.428,1209.51 857.015,1209.88 857.601,1208.81 858.187,1210.53 858.774,1210.58 859.36,1208.35 859.947,1209.89 860.533,1209.96 861.119,1211.27 861.706,1211.67 862.292,1216.86 862.879,1215.46 863.465,1214.07 864.052,1215.36 864.638,1214.14 865.224,1214.31 865.811,1215.73 866.397,1212.59 866.984,1211.35 867.57,1212.71 868.156,1211.39 868.743,1211.71 869.329,1214.52 869.916,1215.98 870.502,1213.17 871.089,1214.81 871.675,1218.83 872.261,1218.65 872.848,1219.83 873.434,1221.05 874.021,1219.14 874.607,1221.53 875.193,1220.01 875.78,1219.83 876.366,1219.62 876.953,1221.98 877.539,1217.7 878.125,1218.48 878.712,1218.57 879.298,1218.55 879.885,1219.6 880.471,1220.51 881.058,1220.03 881.644,1218.34 882.23,1219.46 882.817,1216.58 883.403,1215.3 883.99,1216.65 884.576,1214.94 885.162,1214.68 885.749,1214.52 886.335,1215.47 886.922,1215.32 887.508,1216.65 888.094,1214.12 888.681,1215.3 889.267,1216.76 889.854,1216.51 890.44,1214.89 891.027,1214.8 891.613,1211.99 892.199,1211.88 892.786,1213.44 893.372,1211.72 893.959,1210.67 894.545,1208.01 895.131,1204.34 895.718,1204.79 896.304,1205.28 896.891,1205.46 897.477,1208.48 898.063,1207.35 898.65,1209.1 899.236,1208.13 899.823,1208.38 900.409,1208.61 900.996,1207.78 901.582,1209.2 902.168,1209.54 902.755,1209.56 903.341,1208.47 903.928,1207.28 904.514,1209.06 905.1,1209.42 905.687,1211.08 906.273,1213.82 906.86,1217.87 907.446,1217.86 908.032,1214.98 908.619,1215.04 909.205,1216.26 909.792,1216.16 910.378,1212.04 910.965,1209.44 911.551,1210.99 912.137,1208.58 912.724,1210.24 913.31,1207.84 913.897,1207.13 914.483,1206.13 915.069,1206.3 915.656,1206.78 916.242,1207.34 916.829,1207.8 917.415,1207.8 918.002,1205.78 918.588,1206.41 919.174,1209.72 919.761,1207.15 920.347,1206.26 920.934,1205.28 921.52,1208.29 922.106,1207.24 922.693,1207.66 923.279,1206.69 923.866,1207.09 924.452,1209.96 925.038,1211.61 925.625,1213.03 926.211,1213.01 926.798,1214.4 927.384,1215.6 927.971,1215.79 928.557,1215.49 929.143,1216.76 929.73,1216.72 930.316,1216.4 930.903,1214.82 931.489,1214.65 932.075,1213.51 932.662,1213.23 933.248,1214.72 933.835,1210.64 934.421,1209.54 935.007,1212.34 935.594,1212.61 936.18,1211.31 936.767,1211.75 937.353,1210.72 937.94,1213.81 938.526,1212.42 939.112,1211.25 939.699,1211.14 940.285,1213.72 940.872,1214.72 941.458,1212.11 942.044,1212.12 942.631,1213.3 943.217,1213.39 943.804,1213.38 944.39,1214.49 944.976,1214.46 945.563,1217.11 946.149,1215.73 946.736,1217.04 947.322,1214.35 947.909,1215.46 948.495,1213.99 949.081,1215.35 949.668,1215.47 950.254,1215.31 950.841,1215.31 951.427,1218.03 952.013,1219.23 952.6,1222.72 953.186,1223.25 953.773,1225.34 954.359,1224.61 954.945,1224.13 955.532,1223.6 956.118,1224.66 956.705,1224.01 957.291,1223.3 957.878,1221.45 958.464,1219.84 959.05,1218.43 959.637,1220.59 960.223,1217.35 960.81,1218.32 961.396,1219.45 961.982,1219.51 962.569,1219.36 963.155,1219.03 963.742,1217.2 964.328,1217.18 964.915,1216.93 965.501,1216.35 966.087,1214.86 966.674,1212.35 967.26,1212.26 967.847,1213.85 968.433,1212.34 969.019,1212.31 969.606,1216.52 970.192,1212.54 970.779,1212.29 971.365,1212.2 971.951,1212.38 972.538,1208.51 973.124,1208.96 973.711,1207.98 974.297,1208.11 974.884,1209.61 975.47,1210.89 976.056,1210.81 976.643,1210.98 977.229,1213.88 977.816,1213.9 978.402,1214.97 978.988,1216.21 979.575,1212.19 980.161,1209.5 980.748,1210.96 981.334,1211.31 981.92,1212.7 982.507,1213.93 983.093,1214.33 983.68,1212.91 984.266,1213.06 984.853,1218.12 985.439,1219.22 986.025,1217.66 986.612,1217.58 987.198,1214.73 987.785,1217.31 988.371,1219.51 988.957,1221.89 989.544,1222.62 990.13,1221.85 990.717,1219.82 991.303,1219.5 991.889,1217.74 992.476,1216.18 993.062,1217.63 993.649,1215.99 994.235,1215.81 994.822,1216.87 995.408,1215.47 995.994,1216.61 996.581,1214.78 997.167,1218.3 997.754,1219.19 998.34,1217.45 998.926,1218.24 999.513,1218.05 1000.1,1217.91 1000.69,1216.09 1001.27,1215.8 1001.86,1220.94 1002.44,1220.61 1003.03,1218.86 1003.62,1215.93 1004.2,1214.68 1004.79,1215.83 1005.38,1215.58 1005.96,1212.57 1006.55,1213.98 1007.14,1215.39 1007.72,1213.7 1008.31,1213.46 1008.9,1213.27 1009.48,1212.06 1010.07,1210.94 1010.65,1212.51 1011.24,1212.67 1011.83,1213.93 1012.41,1216.4 1013,1213.55 1013.59,1213.43 1014.17,1210.97 1014.76,1212.27 1015.35,1211.08 1015.93,1213.21 1016.52,1213.18 1017.11,1215.79 1017.69,1216.81 1018.28,1218.11 1018.86,1216.54 1019.45,1217.72 1020.04,1221.19 1020.62,1223.57 1021.21,1221.13 1021.8,1219.13 1022.38,1220.37 1022.97,1221.38 1023.56,1219.68 1024.14,1216.76 1024.73,1214.88 1025.32,1213.16 1025.9,1213.05 1026.49,1207.82 1027.07,1208.21 1027.66,1208.19 1028.25,1210.78 1028.83,1208.41 1029.42,1204.8 1030.01,1208.08 1030.59,1209.63 1031.18,1209.88 1031.77,1207.02 1032.35,1208.61 1032.94,1209.03 1033.52,1208.89 1034.11,1206.22 1034.7,1205.33 1035.28,1206.81 1035.87,1206.99 1036.46,1205.97 1037.04,1206.26 1037.63,1212.08 1038.22,1212.03 1038.8,1210.76 1039.39,1212.27 1039.98,1212.28 1040.56,1214.71 1041.15,1214.82 1041.73,1214.63 1042.32,1214.87 1042.91,1214.59 1043.49,1213.26 1044.08,1209.32 1044.67,1211.11 1045.25,1209.74 1045.84,1210.92 1046.43,1211.12 1047.01,1214.1 1047.6,1213.85 1048.19,1213.64 1048.77,1209.27 1049.36,1208.12 1049.94,1208.15 1050.53,1207.07 1051.12,1205.02 1051.7,1205.47 1052.29,1203.12 1052.88,1203.54 1053.46,1202.81 1054.05,1203.56 1054.64,1209.39 1055.22,1212 1055.81,1210.94 1056.39,1211.22 1056.98,1208.63 1057.57,1207.61 1058.15,1209.1 1058.74,1209.41 1059.33,1209.44 1059.91,1206.87 1060.5,1203.37 1061.09,1204.07 1061.67,1200.5 1062.26,1199.71 1062.85,1201.69 1063.43,1203.63 1064.02,1206.8 1064.6,1210.94 1065.19,1210.96 1065.78,1212.29 1066.36,1211.12 1066.95,1208.69 1067.54,1210.45 1068.12,1209.21 1068.71,1209.32 1069.3,1209.43 1069.88,1208.33 1070.47,1210.28 1071.06,1213.08 1071.64,1214.5 1072.23,1214.78 1072.81,1214.48 1073.4,1214.36 1073.99,1215.56 1074.57,1215.24 1075.16,1215.02 1075.75,1216.29 1076.33,1217.44 1076.92,1218.71 1077.51,1215.92 1078.09,1215.6 1078.68,1211.83 1079.26,1212.02 1079.85,1214.92 1080.44,1216.57 1081.02,1220.17 1081.61,1221.3 1082.2,1221.09 1082.78,1220.82 1083.37,1220.44 1083.96,1219.88 1084.54,1219.6 1085.13,1220.41 1085.72,1220.07 1086.3,1219.79 1086.89,1220.63 1087.47,1221.79 1088.06,1220.2 1088.65,1219.6 1089.23,1221.67 1089.82,1219.85 1090.41,1219.67 1090.99,1217.91 1091.58,1217.7 1092.17,1218.57 1092.75,1215.56 1093.34,1215.32 1093.93,1213.92 1094.51,1216.53 1095.1,1217.91 1095.68,1218.04 1096.27,1217.78 1096.86,1216.31 1097.44,1217.72 1098.03,1220.2 1098.62,1222.44 1099.2,1223.45 1099.79,1224.29 1100.38,1220.91 1100.96,1217.74 1101.55,1220.35 1102.14,1218.53 1102.72,1215.23 1103.31,1215.11 1103.89,1214.89 1104.48,1213.29 1105.07,1214.46 1105.65,1213.22 1106.24,1213.04 1106.83,1211.7 1107.41,1211.55 1108,1210.32 1108.59,1210.37 1109.17,1210.69 1109.76,1205.31 1110.34,1206.79 1110.93,1207.24 1111.52,1209.01 1112.1,1208.82 1112.69,1210.57 1113.28,1207.96 1113.86,1205.96 1114.45,1204.9 1115.04,1205.51 1115.62,1208.8 1116.21,1211.46 1116.8,1211.41 1117.38,1211.35 1117.97,1211.52 1118.55,1211.66 1119.14,1210.32 1119.73,1212.97 1120.31,1212.91 1120.9,1211.62 1121.49,1210.44 1122.07,1209 1122.66,1209.13 1123.25,1207.92 1123.83,1208.19 1124.42,1208.55 1125.01,1207.18 1125.59,1207.24 1126.18,1209.96 1126.76,1208.8 1127.35,1209 1127.94,1209.24 1128.52,1209.59 1129.11,1209.58 1129.7,1208.43 1130.28,1209.87 1130.87,1211.54 1131.46,1209.86 1132.04,1210.15 1132.63,1211.14 1133.21,1213.88 1133.8,1212.57 1134.39,1212.79 1134.97,1214.01 1135.56,1211.48 1136.15,1214.38 1136.73,1215.9 1137.32,1214.64 1137.91,1219.59 1138.49,1218.14 1139.08,1216.51 1139.67,1216.39 1140.25,1217.58 1140.84,1217.4 1141.42,1213.46 1142.01,1210.69 1142.6,1211.26 1143.18,1211.39 1143.77,1210.12 1144.36,1209.2 1144.94,1210.34 1145.53,1213.28 1146.12,1212.06 1146.7,1213.57 1147.29,1213.57 1147.88,1217.35 1148.46,1217.21 1149.05,1215.63 1149.63,1215.57 1150.22,1213.93 1150.81,1214.06 1151.39,1212.62 1151.98,1212.55 1152.57,1211.06 1153.15,1213.76 1153.74,1211 1154.33,1212.16 1154.91,1217.36 1155.5,1219.76 1156.09,1219.28 1156.67,1213.59 1157.26,1213.76 1157.84,1215.19 1158.43,1215.17 1159.02,1213.76 1159.6,1212.19 1160.19,1211.96 1160.78,1213.21 1161.36,1212.07 1161.95,1211.95 1162.54,1210.81 1163.12,1212.18 1163.71,1210.96 1164.29,1212.44 1164.88,1211.4 1165.47,1212.69 1166.05,1212.47 1166.64,1212.4 1167.23,1212.04 1167.81,1208.2 1168.4,1205.61 1168.99,1204.86 1169.57,1203.99 1170.16,1204.4 1170.75,1204.93 1171.33,1206.71 1171.92,1206.74 1172.5,1206.98 1173.09,1207.26 1173.68,1208.69 1174.26,1206.28 1174.85,1204.09 1175.44,1208.19 1176.02,1209.54 1176.61,1209.98 1177.2,1211.72 1177.78,1211.71 1178.37,1211.59 1178.96,1213.26 1179.54,1210.82 1180.13,1210.93 1180.71,1207.26 1181.3,1208.95 1181.89,1211.96 1182.47,1208.1 1183.06,1208.47 1183.65,1210.11 1184.23,1210.34 1184.82,1213.09 1185.41,1213.36 1185.99,1212.11 1186.58,1213.37 1187.16,1214.68 1187.75,1214.68 1188.34,1214.39 1188.92,1212.85 1189.51,1212.81 1190.1,1212.72 1190.68,1214.02 1191.27,1215.37 1191.86,1215.35 1192.44,1212.4 1193.03,1211.05 1193.62,1212.34 1194.2,1215.26 1194.79,1215.06 1195.37,1212.18 1195.96,1212.34 1196.55,1213.58 1197.13,1214.81 1197.72,1215.91 1198.31,1215.73 1198.89,1216.81 1199.48,1216.61 1200.07,1216.41 1200.65,1216.2 1201.24,1217.33 1201.83,1217.35 1202.41,1214.48 1203,1214.32 1203.58,1215.6 1204.17,1215.21 1204.76,1217.77 1205.34,1217.29 1205.93,1216.88 1206.52,1219.28 1207.1,1217.57 1207.69,1216.06 1208.28,1214.48 1208.86,1214.14 1209.45,1212.62 1210.03,1211.33 1210.62,1210.22 1211.21,1210.41 1211.79,1214.43 1212.38,1215.72 1212.97,1215.63 1213.55,1215.65 1214.14,1213 1214.73,1214.29 1215.31,1211.83 1215.9,1213.08 1216.49,1213.22 1217.07,1211.78 1217.66,1213.29 1218.24,1213.42 1218.83,1211.86 1219.42,1211.91 1220,1210.59 1220.59,1210.63 1221.18,1209.28 1221.76,1211.78 1222.35,1214.69 1222.94,1212.9 1223.52,1214.21 1224.11,1212.74 1224.7,1211.39 1225.28,1211.46 1225.87,1212.67 1226.45,1212.64 1227.04,1212.48 1227.63,1213.83 1228.21,1216.48 1228.8,1216.23 1229.39,1210.69 1229.97,1212.03 1230.56,1213.16 1231.15,1212.78 1231.73,1211.57 1232.32,1210.41 1232.91,1210.14 1233.49,1211.35 1234.08,1215.21 1234.66,1213.8 1235.25,1212.57 1235.84,1214 1236.42,1214.07 1237.01,1214.23 1237.6,1213.2 1238.18,1214.38 1238.77,1212.09 1239.36,1210.75 1239.94,1211.98 1240.53,1212.08 1241.11,1215.8 1241.7,1214.32 1242.29,1214.26 1242.87,1214.18 1243.46,1212.87 1244.05,1210.24 1244.63,1207.51 1245.22,1206.4 1245.81,1209.51 1246.39,1209.6 1246.98,1210.98 1247.57,1210.09 1248.15,1210.11 1248.74,1212.96 1249.32,1215.56 1249.91,1212.73 1250.5,1212.96 1251.08,1212.83 1251.67,1215.7 1252.26,1216.99 1252.84,1214.2 1253.43,1215.69 1254.02,1216.74 1254.6,1215.14 1255.19,1213.62 1255.78,1215.02 1256.36,1213.66 1256.95,1214.96 1257.53,1218.85 1258.12,1215.77 1258.71,1214.31 1259.29,1213.14 1259.88,1214.66 1260.47,1217.39 1261.05,1216.9 1261.64,1220.31 1262.23,1221.14 1262.81,1220.67 1263.4,1220.28 1263.98,1219.76 1264.57,1217.95 1265.16,1217.63 1265.74,1219.95 1266.33,1222.3 1266.92,1219.25 1267.5,1219.1 1268.09,1219.05 1268.68,1218.56 1269.26,1219.64 1269.85,1219.48 1270.44,1217.78 1271.02,1214.99 1271.61,1214.91 1272.19,1216.18 1272.78,1214.61 1273.37,1214.3 1273.95,1216.6 1274.54,1216.3 1275.13,1218.77 1275.71,1220.29 1276.3,1216.96 1276.89,1217.82 1277.47,1220.02 1278.06,1219.68 1278.65,1219.33 1279.23,1220.05 1279.82,1219.75 1280.4,1216.93 1280.99,1216.88 1281.58,1213.02 1282.16,1213.05 1282.75,1210.42 1283.34,1214.35 1283.92,1214.36 1284.51,1214.3 1285.1,1214.31 1285.68,1214.33 1286.27,1215.5 1286.86,1218.06 1287.44,1219.13 1288.03,1218.77 1288.61,1222.44 1289.2,1220.72 1289.79,1220.19 1290.37,1219.6 1290.96,1219.28 1291.55,1220.21 1292.13,1225.33 1292.72,1224.4 1293.31,1223.76 1293.89,1227 1294.48,1226.37 1295.06,1223.94 1295.65,1223.16 1296.24,1219.85 1296.82,1222.06 1297.41,1222.72 1298,1222.54 1298.58,1222.01 1299.17,1217.61 1299.76,1213.48 1300.34,1213.77 1300.93,1212.49 1301.52,1212.47 1302.1,1211.44 1302.69,1210.16 1303.27,1210.46 1303.86,1213.09 1304.45,1211.6 1305.03,1207.47 1305.62,1212.91 1306.21,1212.86 1306.79,1211.65 1307.38,1210.41 1307.97,1210.58 1308.55,1209.24 1309.14,1211.91 1309.73,1213.45 1310.31,1213.24 1310.9,1215.9 1311.48,1217.19 1312.07,1215.28 1312.66,1209.74 1313.24,1208.48 1313.83,1204.9 1314.42,1203.06 1315,1206.13 1315.59,1206.45 1316.18,1208.14 1316.76,1208.59 1317.35,1202.34 1317.93,1201.5 1318.52,1200.99 1319.11,1201.5 1319.69,1202.27 1320.28,1201.68 1320.87,1200.81 1321.45,1201.27 1322.04,1200.61 1322.63,1200.28 1323.21,1199.75 1323.8,1199.06 1324.39,1202.22 1324.97,1201.46 1325.56,1204.64 1326.14,1205.15 1326.73,1205.19 1327.32,1207 1327.9,1204.74 1328.49,1202.59 1329.08,1204.56 1329.66,1202.57 1330.25,1203.32 1330.84,1202.36 1331.42,1204.38 1332.01,1203.97 1332.6,1205.52 1333.18,1206.12 1333.77,1206.66 1334.35,1207.08 1334.94,1209.97 1335.53,1210.37 1336.11,1206.84 1336.7,1207.23 1337.29,1207.51 1337.87,1208.3 1338.46,1208.56 1339.05,1212.9 1339.63,1214.18 1340.22,1211.45 1340.8,1208.74 1341.39,1210.28 1341.98,1213.15 1342.56,1213.99 1343.15,1216.2 1343.74,1217.03 1344.32,1215.65 1344.91,1214.14 1345.5,1214.18 1346.08,1216.81 1346.67,1218.06 1347.26,1217.68 1347.84,1218.52 1348.43,1219.28 1349.01,1218.94 1349.6,1219.86 1350.19,1220.59 1350.77,1221.38 1351.36,1218.22 1351.95,1216.45 1352.53,1214.96 1353.12,1213.42 1353.71,1211.07 1354.29,1209.9 1354.88,1210.18 1355.47,1211.24 1356.05,1211.53 1356.64,1210.2 1357.22,1209.02 1357.81,1208.94 1358.4,1209.12 1358.98,1208 1359.57,1206.82 1360.16,1207.1 1360.74,1206.01 1361.33,1205.95 1361.92,1207.44 1362.5,1205 1363.09,1205.29 1363.68,1205.45 1364.26,1208.42 1364.85,1208.43 1365.43,1208.4 1366.02,1211.26 1366.61,1212.84 1367.19,1213.07 1367.78,1214.35 1368.37,1215.4 1368.95,1215.58 1369.54,1215.29 1370.13,1216.42 1370.71,1215.74 1371.3,1218.32 1371.88,1218.03 1372.47,1216.35 1373.06,1214.95 1373.64,1215.05 1374.23,1214.9 1374.82,1214.89 1375.4,1215.89 1375.99,1214.19 1376.58,1214.17 1377.16,1217.87 1377.75,1213.54 1378.34,1214.94 1378.92,1214.93 1379.51,1219.02 1380.09,1217.45 1380.68,1218.38 1381.27,1219.31 1381.85,1217.73 1382.44,1217.83 1383.03,1216.4 1383.61,1214.8 1384.2,1215.11 1384.79,1213.58 1385.37,1214.81 1385.96,1213.37 1386.55,1209.14 1387.13,1208.16 1387.72,1206.96 1388.3,1207.53 1388.89,1210.23 1389.48,1210.21 1390.06,1211.74 1390.65,1211.35 1391.24,1211.44 1391.82,1212.98 1392.41,1212.91 1393,1215.54 1393.58,1208.69 1394.17,1208.93 1394.75,1206.62 1395.34,1206.76 1395.93,1209.64 1396.51,1208.44 1397.1,1208.7 1397.69,1210.33 1398.27,1210.51 1398.86,1207.75 1399.45,1210.45 1400.03,1211.88 1400.62,1214.55 1401.21,1214.31 1401.79,1212.9 1402.38,1213.09 1402.96,1212.94 1403.55,1210.3 1404.14,1210.55 1404.72,1209.38 1405.31,1204.33 1405.9,1204.72 1406.48,1203.88 1407.07,1204.22 1407.66,1207.67 1408.24,1210.63 1408.83,1211.97 1409.42,1210.66 1410,1208.47 1410.59,1207.5 1411.17,1212.7 1411.76,1208.85 1412.35,1211.62 1412.93,1212.87 1413.52,1216.84 1414.11,1215.57 1414.69,1216.55 1415.28,1214.96 1415.87,1214.83 1416.45,1215.97 1417.04,1217.32 1417.63,1214.26 1418.21,1212.89 1418.8,1214.31 1419.38,1215.48 1419.97,1214.2 1420.56,1211.42 1421.14,1211.3 1421.73,1206.32 1422.32,1206.71 1422.9,1206.97 1423.49,1206.96 1424.08,1207.21 1424.66,1207.54 1425.25,1207.77 1425.83,1208.17 1426.42,1204.43 1427.01,1204.89 1427.59,1205.4 1428.18,1206.02 1428.77,1205.24 1429.35,1205.85 1429.94,1206.1 1430.53,1206.72 1431.11,1209.45 1431.7,1209.56 1432.29,1209.78 1432.87,1210.09 1433.46,1210.18 1434.04,1210.28 1434.63,1215.7 1435.22,1212.55 1435.8,1211.07 1436.39,1211.14 1436.98,1212.39 1437.56,1213.69 1438.15,1210.97 1438.74,1212.35 1439.32,1213.66 1439.91,1214.82 1440.5,1213.5 1441.08,1214.83 1441.67,1214.64 1442.25,1213.04 1442.84,1212.78 1443.43,1212.96 1444.01,1212.99 1444.6,1211.97 1445.19,1212.36 1445.77,1211.18 1446.36,1211.18 1446.95,1211.35 1447.53,1210.34 1448.12,1209.09 1448.7,1210.31 1449.29,1208.99 1449.88,1207.96 1450.46,1209.61 1451.05,1211.26 1451.64,1208.85 1452.22,1207.85 1452.81,1207.07 1453.4,1207.54 1453.98,1207.84 1454.57,1210.77 1455.16,1212.17 1455.74,1211.1 1456.33,1213.58 1456.91,1213.29 1457.5,1214.4 1458.09,1212.86 1458.67,1213.83 1459.26,1214 1459.85,1216.6 1460.43,1215.1 1461.02,1216.37 1461.61,1217.66 1462.19,1218.87 1462.78,1218.35 1463.37,1219.12 1463.95,1218.53 1464.54,1219.66 1465.12,1218.01 1465.71,1216.57 1466.3,1217.71 1466.88,1218.79 1467.47,1217.36 1468.06,1215.61 1468.64,1215.28 1469.23,1217.94 1469.82,1213.71 1470.4,1212.24 1470.99,1212.36 1471.57,1212.23 1472.16,1213.62 1472.75,1213.38 1473.33,1213.49 1473.92,1213.63 1474.51,1216.23 1475.09,1214.85 1475.68,1218.79 1476.27,1219.92 1476.85,1220.86 1477.44,1221.34 1478.03,1219.62 1478.61,1221.98 1479.2,1220.45 1479.78,1220 1480.37,1219.44 1480.96,1213.85 1481.54,1213.95 1482.13,1212.75 1482.72,1212.64 1483.3,1208.68 1483.89,1210.21 1484.48,1209.26 1485.06,1210.57 1485.65,1207.82 1486.24,1208.13 1486.82,1206.88 1487.41,1213.52 1487.99,1212.3 1488.58,1212.28 1489.17,1216.01 1489.75,1214.82 1490.34,1214.61 1490.93,1215.73 1491.51,1214.17 1492.1,1216.86 1492.69,1215.08 1493.27,1212.4 1493.86,1211.29 1494.45,1210.24 1495.03,1210.33 1495.62,1209.48 1496.2,1209.78 1496.79,1211.31 1497.38,1212.66 1497.96,1212.5 1498.55,1212.29 1499.14,1210.72 1499.72,1212.25 1500.31,1209.95 1500.9,1207.49 1501.48,1208.07 1502.07,1208.32 1502.65,1208.79 1503.24,1207.63 1503.83,1209.08 1504.41,1209.42 1505,1209.62 1505.59,1208.76 1506.17,1210.39 1506.76,1210.36 1507.35,1209.38 1507.93,1211.98 1508.52,1213.38 1509.11,1213.37 1509.69,1213.07 1510.28,1213.07 1510.86,1209.06 1511.45,1209.39 1512.04,1209.32 1512.62,1208.17 1513.21,1210.86 1513.8,1212.23 1514.38,1212.59 1514.97,1212.25 1515.56,1214.83 1516.14,1214.58 1516.73,1214.45 1517.32,1212.91 1517.9,1212.96 1518.49,1212.75 1519.07,1212.84 1519.66,1212.69 1520.25,1213.88 1520.83,1213.94 1521.42,1211.33 1522.01,1211.25 1522.59,1211.57 1523.18,1212.91 1523.77,1211.5 1524.35,1209.84 1524.94,1211.34 1525.52,1212.87 1526.11,1211.27 1526.7,1207.29 1527.28,1208.85 1527.87,1210.44 1528.46,1211.87 1529.04,1213.4 1529.63,1212.11 1530.22,1208.29 1530.8,1205.62 1531.39,1207.45 1531.98,1209.1 1532.56,1211.96 1533.15,1211.69 1533.73,1212.87 1534.32,1212.83 1534.91,1212.75 1535.49,1212.61 1536.08,1212.18 1536.67,1212.09 1537.25,1211.74 1537.84,1207.8 1538.43,1207.81 1539.01,1210.69 1539.6,1210.94 1540.19,1212.31 1540.77,1213.61 1541.36,1210.84 1541.94,1209.9 1542.53,1208.55 1543.12,1211.23 1543.7,1212.58 1544.29,1212.59 1544.88,1214.97 1545.46,1212.47 1546.05,1210.9 1546.64,1210.86 1547.22,1208.35 1547.81,1212.36 1548.4,1212.41 1548.98,1212.7 1549.57,1213.81 1550.15,1212.45 1550.74,1209.96 1551.33,1208.75 1551.91,1210.2 1552.5,1208.93 1553.09,1207.45 1553.67,1209.18 1554.26,1209.24 1554.85,1206.77 1555.43,1202.9 1556.02,1204.8 1556.6,1206.4 1557.19,1207.93 1557.78,1207.97 1558.36,1209.51 1558.95,1210.98 1559.54,1212.08 1560.12,1211.78 1560.71,1212.07 1561.3,1213.63 1561.88,1212.29 1562.47,1211.27 1563.06,1207.36 1563.64,1207.23 1564.23,1209 1564.81,1210.49 1565.4,1209.26 1565.99,1208.32 1566.57,1208.46 1567.16,1208.63 1567.75,1204.98 1568.33,1208.08 1568.92,1209.42 1569.51,1209.83 1570.09,1209.97 1570.68,1207.55 1571.27,1206.49 1571.85,1209.18 1572.44,1208.06 1573.02,1206.99 1573.61,1208.55 1574.2,1206.28 1574.78,1207.85 1575.37,1210.76 1575.96,1208.11 1576.54,1208.48 1577.13,1207.36 1577.72,1207.59 1578.3,1207.82 1578.89,1208.16 1579.47,1207.23 1580.06,1207.86 1580.65,1210.52 1581.23,1210.72 1581.82,1214.73 1582.41,1219.92 1582.99,1219.65 1583.58,1218.15 1584.17,1219.24 1584.75,1218.79 1585.34,1219.72 1585.93,1220.67 1586.51,1216.72 1587.1,1216.49 1587.68,1216.37 1588.27,1214.69 1588.86,1213.18 1589.44,1212.92 1590.03,1212.98 1590.62,1211.69 1591.2,1211.7 1591.79,1214.39 1592.38,1214.41 1592.96,1214.39 1593.55,1214.28 1594.14,1216.85 1594.72,1217.81 1595.31,1218.65 1595.89,1214.42 1596.48,1215.23 1597.07,1216.59 1597.65,1214.91 1598.24,1213.1 1598.83,1213.13 1599.41,1208.07 1600,1208.36 1600.59,1207.27 1601.17,1205.26 1601.76,1206.88 1602.34,1207.29 1602.93,1207.73 1603.52,1207.93 1604.1,1208.07 1604.69,1208.26 1605.28,1208.69 1605.86,1208.82 1606.45,1207.39 1607.04,1207.47 1607.62,1207.71 1608.21,1209.17 1608.8,1212.02 1609.38,1213.54 1609.97,1213.54 1610.55,1214.27 1611.14,1214.04 1611.73,1217.87 1612.31,1217.49 1612.9,1217.49 1613.49,1217.3 1614.07,1215.6 1614.66,1216.68 1615.25,1216.22 1615.83,1217.57 1616.42,1217.19 1617.01,1217.2 1617.59,1216.92 1618.18,1216.58 1618.76,1218.91 1619.35,1218.44 1619.94,1219.58 1620.52,1220.41 1621.11,1218.93 1621.7,1217.29 1622.28,1219.44 1622.87,1219.23 1623.46,1220.08 1624.04,1219.69 1624.63,1220.74 1625.22,1220.44 1625.8,1218.49 1626.39,1219.44 1626.97,1220.55 1627.56,1219.03 1628.15,1218.25 1628.73,1217.9 1629.32,1216.09 1629.91,1220.77 1630.49,1217.62 1631.08,1217.1 1631.67,1215.56 1632.25,1215.41 1632.84,1211.46 1633.42,1214.37 1634.01,1215.61 1634.6,1212.51 1635.18,1213.97 1635.77,1219.26 1636.36,1218.71 1636.94,1219.89 1637.53,1218.14 1638.12,1216.72 1638.7,1216.58 1639.29,1216.31 1639.88,1214.78 1640.46,1214.76 1641.05,1211.99 1641.63,1212.35 1642.22,1215 1642.81,1212.01 1643.39,1210.72 1643.98,1209.49 1644.57,1209.62 1645.15,1207.29 1645.74,1208.92 1646.33,1209.13 1646.91,1210.45 1647.5,1213.46 1648.09,1212.02 1648.67,1212.14 1649.26,1210.34 1649.84,1210.18 1650.43,1210.24 1651.02,1208.96 1651.6,1210.37 1652.19,1207.86 1652.78,1209.52 1653.36,1207.04 1653.95,1207.37 1654.54,1207.38 1655.12,1205.25 1655.71,1204.45 1656.29,1203.69 1656.88,1204.21 1657.47,1206.2 1658.05,1206.79 1658.64,1206.95 1659.23,1205.97 1659.81,1203.83 1660.4,1207.21 1660.99,1210.18 1661.57,1210.48 1662.16,1209.11 1662.75,1208.07 1663.33,1208.16 1663.92,1212.34 1664.5,1213.72 1665.09,1213.6 1665.68,1212.02 1666.26,1210.99 1666.85,1210.62 1667.44,1212.09 1668.02,1210.78 1668.61,1208.09 1669.2,1209.74 1669.78,1210.91 1670.37,1212.53 1670.96,1212.6 1671.54,1213.92 1672.13,1209.8 1672.71,1211.08 1673.3,1211.2 1673.89,1211.11 1674.47,1209.92 1675.06,1204.71 1675.65,1201.13 1676.23,1201.67 1676.82,1202.19 1677.41,1202.61 1677.99,1204.57 1678.58,1204.98 1679.17,1201.8 1679.75,1202.39 1680.34,1204.05 1680.92,1205.61 1681.51,1205.71 1682.1,1207.34 1682.68,1206.28 1683.27,1205.32 1683.86,1206.83 1684.44,1205.78 1685.03,1204.89 1685.62,1206.74 1686.2,1207 1686.79,1208.58 1687.37,1211.29 1687.96,1212.77 1688.55,1215.27 1689.13,1213.69 1689.72,1213.76 1690.31,1215.25 1690.89,1217.65 1691.48,1219.84 1692.07,1219.21 1692.65,1220.26 1693.24,1219.88 1693.83,1218.24 1694.41,1219.23 1695,1218.71 1695.58,1220.96 1696.17,1220.14 1696.76,1216.86 1697.34,1217.86 1697.93,1218.78 1698.52,1219.95 1699.1,1219.7 1699.69,1220.67 1700.28,1223.13 1700.86,1221.18 1701.45,1221.88 1702.04,1225.08 1702.62,1225.95 1703.21,1221.19 1703.79,1218.13 1704.38,1215.27 1704.97,1215.1 1705.55,1217.64 1706.14,1216.11 1706.73,1216.12 1707.31,1214.5 1707.9,1215.51 1708.49,1216.68 1709.07,1216.57 1709.66,1216.43 1710.24,1214.64 1710.83,1214.72 1711.42,1211.85 1712,1211.83 1712.59,1209.54 1713.18,1209.81 1713.76,1211.24 1714.35,1212.54 1714.94,1209.83 1715.52,1215.21 1716.11,1213.85 1716.7,1213.79 1717.28,1209.81 1717.87,1211.16 1718.45,1211.06 1719.04,1208.36 1719.63,1209.86 1720.21,1209.78 1720.8,1209.89 1721.39,1209.63 1721.97,1213.85 1722.56,1213.64 1723.15,1213.33 1723.73,1214.57 1724.32,1214.3 1724.91,1214.19 1725.49,1213.93 1726.08,1209.99 1726.66,1210.16 1727.25,1211.79 1727.84,1213.51 1728.42,1215.82 1729.01,1214.32 1729.6,1212.86 1730.18,1215.53 1730.77,1212.61 1731.36,1211.46 1731.94,1212.94 1732.53,1213.12 1733.11,1213.12 1733.7,1215.65 1734.29,1212.66 1734.87,1213.77 1735.46,1213.6 1736.05,1216.44 1736.63,1218.75 1737.22,1219.85 1737.81,1218.21 1738.39,1218.13 1738.98,1216.38 1739.57,1217.7 1740.15,1215.89 1740.74,1215.96 1741.32,1214.52 1741.91,1215.52 1742.5,1217.84 1743.08,1217.76 1743.67,1218.86 1744.26,1218.57 1744.84,1215.77 1745.43,1215.56 1746.02,1215.44 1746.6,1215.34 1747.19,1215.33 1747.78,1215.15 1748.36,1216.55 1748.95,1216.07 1749.53,1217.12 1750.12,1212.89 1750.71,1214.04 1751.29,1215.14 1751.88,1216.34 1752.47,1214.55 1753.05,1214.33 1753.64,1215.58 1754.23,1213.02 1754.81,1212.94 1755.4,1211.5 1755.99,1211.52 1756.57,1211.68 1757.16,1212.87 1757.74,1211.9 1758.33,1212.05 1758.92,1212.26 1759.5,1212.21 1760.09,1210.91 1760.68,1210.78 1761.26,1213.44 1761.85,1212.17 1762.44,1211.11 1763.02,1212.37 1763.61,1213.87 1764.19,1215 1764.78,1214.87 1765.37,1214.67 1765.95,1209.01 1766.54,1207.98 1767.13,1210.89 1767.71,1209.82 1768.3,1208.55 1768.89,1209.9 1769.47,1208.53 1770.06,1211.48 1770.65,1215.37 1771.23,1219.01 1771.82,1217.42 1772.4,1218.61 1772.99,1218.22 1773.58,1216.73 1774.16,1216.22 1774.75,1214.66 1775.34,1214.5 1775.92,1214.15 1776.51,1215.29 1777.1,1214.93 1777.68,1214.76 1778.27,1212.01 1778.86,1213.15 1779.44,1210.52 1780.03,1215.79 1780.61,1214.54 1781.2,1214.23 1781.79,1215.1 1782.37,1213.28 1782.96,1213.12 1783.55,1210.58 1784.13,1209.43 1784.72,1210.99 1785.31,1215.11 1785.89,1213.8 1786.48,1212.33 1787.06,1212.36 1787.65,1212.51 1788.24,1210.73 1788.82,1212.26 1789.41,1209.8 1790,1207.45 1790.58,1207.84 1791.17,1208.4 1791.76,1208.71 1792.34,1211.63 1792.93,1212.88 1793.52,1211.65 1794.1,1211.54 1794.69,1213.09 1795.27,1210.52 1795.86,1210.71 1796.45,1209.21 1797.03,1209.34 1797.62,1209.63 1798.21,1209.84 1798.79,1208.56 1799.38,1205.99 1799.97,1203.6 1800.55,1205.4 1801.14,1205.82 1801.73,1207.34 1802.31,1208.9 1802.9,1210.41 1803.48,1211.72 1804.07,1211.63 1804.66,1213.13 1805.24,1211.82 1805.83,1213.1 1806.42,1210.6 1807,1213.26 1807.59,1213.49 1808.18,1211.86 1808.76,1210.41 1809.35,1209.3 1809.94,1208.23 1810.52,1210.88 1811.11,1208.44 1811.69,1205.79 1812.28,1205.91 1812.87,1206.38 1813.45,1206.98 1814.04,1211.08 1814.63,1212.55 1815.21,1211.15 1815.8,1208.46 1816.39,1207.26 1816.97,1207.49 1817.56,1207.72 1818.14,1206.82 1818.73,1207.06 1819.32,1208.59 1819.9,1208.81 1820.49,1209.26 1821.08,1210.86 1821.66,1209.77 1822.25,1208.42 1822.84,1207.42 1823.42,1210.42 1824.01,1212.18 1824.6,1212.19 1825.18,1210.99 1825.77,1210.06 1826.35,1211.5 1826.94,1214.4 1827.53,1218.38 1828.11,1219.59 1828.7,1223.02 1829.29,1222.49 1829.87,1222.14 1830.46,1221.81 1831.05,1219.96 1831.63,1220.79 1832.22,1219.37 1832.81,1217.51 1833.39,1217.42 1833.98,1216.84 1834.56,1217.68 1835.15,1219.99 1835.74,1218.2 1836.32,1219.08 1836.91,1217.32 1837.5,1217.27 1838.08,1215.96 1838.67,1212.92 1839.26,1211.61 1839.84,1215.67 1840.43,1216.76 1841.01,1219.2 1841.6,1219.97 1842.19,1220.83 1842.77,1221.7 1843.36,1219.92 1843.95,1218.35 1844.53,1216.53 1845.12,1216.46 1845.71,1211.8 1846.29,1211.79 1846.88,1210.16 1847.47,1210.28 1848.05,1210.37 1848.64,1213.1 1849.22,1212.88 1849.81,1211.31 1850.4,1211.22 1850.98,1211.17 1851.57,1212.7 1852.16,1212.6 1852.74,1214.04 1853.33,1215.28 1853.92,1213.83 1854.5,1213.56 1855.09,1212.2 1855.68,1212.92 1856.26,1212.95 1856.85,1215.79 1857.43,1217.01 1858.02,1215.64 1858.61,1214.56 1859.19,1214.54 1859.78,1214.31 1860.37,1210.17 1860.95,1211.46 1861.54,1211.67 1862.13,1211.53 1862.71,1210.32 1863.3,1213.1 1863.88,1213.1 1864.47,1211.64 1865.06,1214.04 1865.64,1212.52 1866.23,1212.71 1866.82,1213.85 1867.4,1216.27 1867.99,1213.28 1868.58,1211.81 1869.16,1211.98 1869.75,1213.38 1870.34,1213.49 1870.92,1212.36 1871.51,1213.84 1872.09,1215.31 1872.68,1218.87 1873.27,1218.57 1873.85,1215.7 1874.44,1216.96 1875.03,1214.01 1875.61,1217.99 1876.2,1216.49 1876.79,1213.86 1877.37,1211.55 1877.96,1213.01 1878.55,1212.79 1879.13,1214.09 1879.72,1212.63 1880.3,1211.26 1880.89,1213.8 1881.48,1213.8 1882.06,1212.38 1882.65,1211.28 1883.24,1211.22 1883.82,1208.99 1884.41,1207.62 1885,1208.16 1885.58,1207.1 1886.17,1211.13 1886.76,1211.33 1887.34,1209.04 1887.93,1207.8 1888.51,1205.53 1889.1,1207.24 1889.69,1209 1890.27,1210.46 1890.86,1210.62 1891.45,1210.7 1892.03,1209.62 1892.62,1212.31 1893.21,1215.1 1893.79,1215.21 1894.38,1213.77 1894.96,1211.14 1895.55,1212.58 1896.14,1213.96 1896.72,1212.57 1897.31,1213.84 1897.9,1213.7 1898.48,1211.02 1899.07,1209.91 1899.66,1209.8 1900.24,1209.99 1900.83,1211.31 1901.42,1211.73 1902,1211.76 1902.59,1211.89 1903.17,1213.28 1903.76,1214.58 1904.35,1214.6 1904.93,1207.91 1905.52,1206.68 1906.11,1206.91 1906.69,1210.07 1907.28,1211.39 1907.87,1210.16 1908.45,1210.35 1909.04,1211.63 1909.63,1208.71 1910.21,1211.35 1910.8,1207.15 1911.38,1207.35 1911.97,1208.95 1912.56,1210.22 1913.14,1206.4 1913.73,1207.06 1914.32,1208.79 1914.9,1210.14 1915.49,1210.28 1916.08,1211.67 1916.66,1210.26 1917.25,1210.3 1917.83,1207.63 1918.42,1206.74 1919.01,1208.57 1919.59,1207.5 1920.18,1207.63 1920.77,1207.94 1921.35,1208.35 1921.94,1209.91 1922.53,1211.06 1923.11,1212.38 1923.7,1212.35 1924.29,1212.21 1924.87,1213.76 1925.46,1213.59 1926.04,1214.86 1926.63,1216.2 1927.22,1214.81 1927.8,1217.4 1928.39,1217.15 1928.98,1216.93 1929.56,1219.27 1930.15,1217.59 1930.74,1218.64 1931.32,1218.14 1931.91,1214.04 1932.5,1213.85 1933.08,1213.8 1933.67,1215.04 1934.25,1216.55 1934.84,1215.04 1935.43,1216.23 1936.01,1214.5 1936.6,1212.84 1937.19,1213.03 1937.77,1213.28 1938.36,1213.29 1938.95,1213.12 1939.53,1211.56 1940.12,1211.57 1940.71,1209.99 1941.29,1207.43 1941.88,1208.99 1942.46,1209.39 1943.05,1209.92 1943.64,1208.9 1944.22,1207.73 1944.81,1210.51 1945.4,1210.67 1945.98,1208.31 1946.57,1207.09 1947.16,1205.77 1947.74,1204.88 1948.33,1209.36 1948.91,1208.4 1949.5,1211.6 1950.09,1210.49 1950.67,1210.68 1951.26,1209.31 1951.85,1209.47 1952.43,1211.23 1953.02,1211.28 1953.61,1211.46 1954.19,1214.26 1954.78,1215.81 1955.37,1216.83 1955.95,1217.84 1956.54,1217.79 1957.12,1217.53 1957.71,1217.25 1958.3,1214.22 1958.88,1211.5 1959.47,1212.7 1960.06,1211.33 1960.64,1211.17 1961.23,1213.68 1961.82,1213.81 1962.4,1213.78 1962.99,1212.44 1963.58,1209.76 1964.16,1211.09 1964.75,1212.53 1965.33,1213.95 1965.92,1212.61 1966.51,1212.66 1967.09,1211.53 1967.68,1212.99 1968.27,1213.14 1968.85,1215.64 1969.44,1219.26 1970.03,1218.78 1970.61,1214.68 1971.2,1214.64 1971.78,1211.83 1972.37,1214.37 1972.96,1212.8 1973.54,1215.6 1974.13,1215.68 1974.72,1215.34 1975.3,1214.17 1975.89,1214.03 1976.48,1209.92 1977.06,1206.28 1977.65,1206.45 1978.24,1206.8 1978.82,1205.76 1979.41,1203.7 1979.99,1205.59 1980.58,1205.8 1981.17,1205.89 1981.75,1208.83 1982.34,1210.35 1982.93,1208.95 1983.51,1206.55 1984.1,1210.85 1984.69,1208.25 1985.27,1205.85 1985.86,1206.38 1986.45,1206.55 1987.03,1205.54 1987.62,1207.34 1988.2,1210.46 1988.79,1210.04 1989.38,1208.83 1989.96,1207.65 1990.55,1209.12 1991.14,1209.29 1991.72,1208.16 1992.31,1209.47 1992.9,1208.21 1993.48,1208.13 1994.07,1208.1 1994.65,1208.31 1995.24,1211.02 1995.83,1208.53 1996.41,1209.98 1997,1211.59 1997.59,1213.04 1998.17,1210.31 1998.76,1210.41 1999.35,1212.17 1999.93,1212.07 2000.52,1212.04 2001.11,1212.05 2001.69,1212.45 2002.28,1212.52 2002.86,1215.07 2003.45,1215.15 2004.04,1216.34 2004.62,1217.3 2005.21,1216.92 2005.8,1218.15 2006.38,1215.34 2006.97,1215.06 2007.56,1216.34 2008.14,1216.22 2008.73,1214.58 2009.32,1214.44 2009.9,1215.58 2010.49,1215.52 2011.07,1216.65 2011.66,1215.98 2012.25,1215.5 2012.83,1212.72 2013.42,1212.52 2014.01,1210.98 2014.59,1209.69 2015.18,1211.09 2015.77,1208.42 2016.35,1210.08 2016.94,1211.35 2017.53,1210.15 2018.11,1210.42 2018.7,1210.53 2019.28,1212.01 2019.87,1213.2 2020.46,1212.87 2021.04,1212.75 2021.63,1216.48 2022.22,1220.2 2022.8,1221.05 2023.39,1219.6 2023.98,1220.41 2024.56,1218.61 2025.15,1218.6 2025.73,1215.5 2026.32,1213.94 2026.91,1217.65 2027.49,1213.73 2028.08,1213.7 2028.67,1213.58 2029.25,1212.15 2029.84,1212.28 2030.43,1210.96 2031.01,1215.12 2031.6,1214.65 2032.19,1213.22 2032.77,1211.99 2033.36,1212.12 2033.94,1215.73 2034.53,1218.44 2035.12,1216.98 2035.7,1215.59 2036.29,1215.42 2036.88,1216.67 2037.46,1212.28 2038.05,1211.21 2038.64,1214.05 2039.22,1213.77 2039.81,1212.41 2040.4,1212.58 2040.98,1211.15 2041.57,1212.43 2042.15,1213.69 2042.74,1213.37 2043.33,1212.91 2043.91,1214.2 2044.5,1216.63 2045.09,1217.92 2045.67,1218.78 2046.26,1217.09 2046.85,1215.35 2047.43,1213.86 2048.02,1212.16 2048.6,1213.4 2049.19,1213.54 2049.78,1212.33 2050.36,1210.9 2050.95,1211.01 2051.54,1212.37 2052.12,1209.63 2052.71,1207.41 2053.3,1207.45 2053.88,1204.82 2054.47,1206.44 2055.06,1206.63 2055.64,1210.94 2056.23,1211.04 2056.81,1208.48 2057.4,1210.04 2057.99,1208.64 2058.57,1205 2059.16,1205.36 2059.75,1204.52 2060.33,1205.06 2060.92,1202.79 2061.51,1205 2062.09,1206.7 2062.68,1207.07 2063.27,1207.18 2063.85,1209.08 2064.44,1207.87 2065.02,1209.29 2065.61,1208.22 2066.2,1207.23 2066.78,1207.64 2067.37,1210.23 2067.96,1210.09 2068.54,1207.47 2069.13,1206.3 2069.72,1206.45 2070.3,1205.33 2070.89,1208.39 2071.48,1208.23 2072.06,1209.84 2072.65,1211.67 2073.23,1214.37 2073.82,1214.29 2074.41,1211.57 2074.99,1210.26 2075.58,1210.15 2076.17,1210.18 2076.75,1212.98 2077.34,1215.59 2077.93,1215.62 2078.51,1213.13 2079.1,1212.98 2079.68,1208.97 2080.27,1207.68 2080.86,1207.8 2081.44,1209.29 2082.03,1209.31 2082.62,1211.06 2083.2,1212.17 2083.79,1212.15 2084.38,1212.06 2084.96,1211.68 2085.55,1211.92 2086.14,1213.31 2086.72,1213.09 2087.31,1211.79 2087.89,1214.26 2088.48,1212.85 2089.07,1214.35 2089.65,1212.98 2090.24,1211.65 2090.83,1211.8 2091.41,1210.97 2092,1211.13 2092.59,1212.24 2093.17,1212.3 2093.76,1215.26 2094.35,1213.74 2094.93,1216.44 2095.52,1216.62 2096.1,1215.05 2096.69,1214.73 2097.28,1215.94 2097.86,1214.92 2098.45,1214.73 2099.04,1215.82 2099.62,1215.7 2100.21,1211.8 2100.8,1213.26 2101.38,1214.41 2101.97,1211.57 2102.55,1211.65 2103.14,1210.45 2103.73,1208.06 2104.31,1209.64 2104.9,1208.48 2105.49,1206.38 2106.07,1204.02 2106.66,1204.41 2107.25,1206.05 2107.83,1207.8 2108.42,1209.6 2109.01,1209.86 2109.59,1211.3 2110.18,1208.7 2110.76,1207.83 2111.35,1208.13 2111.94,1209.53 2112.52,1207.21 2113.11,1207.49 2113.7,1209.21 2114.28,1209.62 2114.87,1210.05 2115.46,1211.49 2116.04,1213.01 2116.63,1211.74 2117.22,1213.34 2117.8,1213.49 2118.39,1210.66 2118.97,1213.49 2119.56,1212.37 2120.15,1212.45 2120.73,1212.74 2121.32,1212.48 2121.91,1209.71 2122.49,1211.06 2123.08,1209.47 2123.67,1209.31 2124.25,1207.93 2124.84,1210.61 2125.42,1209.51 2126.01,1209.56 2126.6,1209.52 2127.18,1208.36 2127.77,1208.67 2128.36,1207.11 2128.94,1206.09 2129.53,1204.09 2130.12,1203.01 2130.7,1205.02 2131.29,1205.19 2131.88,1205.66 2132.46,1203.23 2133.05,1203.86 2133.63,1205.48 2134.22,1205.87 2134.81,1207.59 2135.39,1207.83 2135.98,1205.47 2136.57,1205.85 2137.15,1205.96 2137.74,1210.48 2138.33,1210.8 2138.91,1213.52 2139.5,1214.63 2140.09,1215.77 2140.67,1213.14 2141.26,1213.1 2141.84,1213.18 2142.43,1212.99 2143.02,1215.59 2143.6,1216.68 2144.19,1215.03 2144.78,1213.74 2145.36,1213.68 2145.95,1215.01 2146.54,1216.2 2147.12,1216.18 2147.71,1215.95 2148.3,1215.49 2148.88,1216.34 2149.47,1216.06 2150.05,1211.91 2150.64,1212.04 2151.23,1214.65 2151.81,1214.45 2152.4,1213.14 2152.99,1214.26 2153.57,1216.88 2154.16,1216.45 2154.75,1216.37 2155.33,1216.08 2155.92,1215.68 2156.5,1216.81 2157.09,1215.27 2157.68,1213.86 2158.26,1213.55 \"/>\n<path clip-path=\"url(#clip852)\" d=\"M986.025 1212.83 L986.612 1212.83 L987.198 1212.83 L987.785 1212.83 L988.371 1212.83 L988.957 1212.83 L989.544 1212.83 L990.13 1212.83 L990.717 1212.83 L991.303 1212.83 L991.889 1212.83 L992.476 1212.83 L993.062 1212.83 L993.649 1212.83 L994.235 1212.83 L994.822 1212.83 L995.408 1212.83 L995.994 1212.83 L996.581 1212.83 L997.167 1212.83 L997.754 1212.83 L998.34 1212.83 L998.926 1212.83 L999.513 1212.83 L1000.1 1212.83 L1000.69 1212.83 L1001.27 1212.83 L1001.86 1212.83 L1002.44 1212.83 L1003.03 1212.83 L1003.62 1212.83 L1004.2 1212.83 L1004.79 1212.83 L1005.38 1212.83 L1005.96 1212.83 L1006.55 1212.83 L1007.14 1212.83 L1007.72 1212.83 L1008.31 1212.83 L1008.9 1212.83 L1009.48 1212.83 L1010.07 1212.83 L1010.65 1212.83 L1011.24 1212.83 L1011.83 1212.83 L1012.41 1212.83 L1013 1212.83 L1013.59 1212.83 L1014.17 1212.83 L1014.76 1212.83 L1015.35 1212.83 L1015.93 1212.83 L1016.52 1212.83 L1017.11 1212.83 L1017.69 1212.83 L1018.28 1212.83 L1018.86 1212.83 L1019.45 1212.83 L1020.04 1212.83 L1020.62 1212.83 L1021.21 1212.83 L1021.8 1212.83 L1022.38 1212.83 L1022.97 1212.83 L1023.56 1212.83 L1024.14 1212.83 L1024.73 1212.83 L1025.32 1212.83 L1025.9 1212.83 L1026.49 1212.83 L1027.07 1212.83 L1027.66 1212.83 L1028.25 1212.83 L1028.83 1212.83 L1029.42 1212.83 L1030.01 1212.83 L1030.59 1212.83 L1031.18 1212.83 L1031.77 1212.83 L1032.35 1212.83 L1032.94 1212.83 L1033.52 1212.83 L1034.11 1212.83 L1034.7 1212.83 L1035.28 1212.83 L1035.87 1212.83 L1036.46 1212.83 L1037.04 1212.83 L1037.63 1212.83 L1038.22 1212.83 L1038.8 1212.83 L1039.39 1212.83 L1039.98 1212.83 L1040.56 1212.83 L1041.15 1212.83 L1041.73 1212.83 L1042.32 1212.83 L1042.91 1212.83 L1043.49 1212.83 L1044.08 1212.83 L1044.67 1212.83 L1045.25 1212.83 L1045.84 1212.83 L1046.43 1212.83 L1047.01 1212.83 L1047.6 1212.83 L1048.19 1212.83 L1048.77 1212.83 L1049.36 1212.83 L1049.94 1212.83 L1050.53 1212.83 L1051.12 1212.83 L1051.7 1212.83 L1052.29 1212.83 L1052.88 1212.83 L1053.46 1212.83 L1054.05 1212.83 L1054.64 1212.83 L1055.22 1212.83 L1055.81 1212.83 L1056.39 1212.83 L1056.98 1212.83 L1057.57 1212.83 L1058.15 1212.83 L1058.74 1212.83 L1059.33 1212.83 L1059.91 1212.83 L1060.5 1212.83 L1061.09 1212.83 L1061.67 1212.83 L1062.26 1212.83 L1062.85 1212.83 L1063.43 1212.83 L1064.02 1212.83 L1064.6 1212.83 L1065.19 1212.83 L1065.78 1212.83 L1066.36 1212.83 L1066.95 1212.83 L1067.54 1212.83 L1068.12 1212.83 L1068.71 1212.83 L1069.3 1212.83 L1069.88 1212.83 L1070.47 1212.83 L1071.06 1212.83 L1071.64 1212.83 L1072.23 1212.83 L1072.81 1212.83 L1073.4 1212.83 L1073.99 1212.83 L1074.57 1212.83 L1075.16 1212.83 L1075.75 1212.83 L1076.33 1212.83 L1076.92 1212.83 L1077.51 1212.83 L1078.09 1212.83 L1078.68 1212.83 L1079.26 1212.83 L1079.85 1212.83 L1080.44 1212.83 L1081.02 1212.83 L1081.61 1212.83 L1082.2 1212.83 L1082.78 1212.83 L1083.37 1212.83 L1083.96 1212.83 L1084.54 1212.83 L1085.13 1212.83 L1085.72 1212.83 L1086.3 1212.83 L1086.89 1212.83 L1087.47 1212.83 L1088.06 1212.83 L1088.65 1212.83 L1089.23 1212.83 L1089.82 1212.83 L1090.41 1212.83 L1090.99 1212.83 L1091.58 1212.83 L1092.17 1212.83 L1092.75 1212.83 L1093.34 1212.83 L1093.93 1212.83 L1094.51 1212.83 L1095.1 1212.83 L1095.68 1212.83 L1096.27 1212.83 L1096.86 1212.83 L1097.44 1212.83 L1098.03 1212.83 L1098.62 1212.83 L1099.2 1212.83 L1099.79 1212.83 L1100.38 1212.83 L1100.96 1212.83 L1101.55 1212.83 L1102.14 1212.83 L1102.72 1212.83 L1103.31 1212.83 L1103.89 1212.83 L1104.48 1212.83 L1105.07 1212.83 L1105.65 1212.83 L1106.24 1212.83 L1106.83 1212.83 L1107.41 1212.83 L1108 1212.83 L1108.59 1212.83 L1109.17 1212.83 L1109.76 1212.83 L1110.34 1212.83 L1110.93 1212.83 L1111.52 1212.83 L1112.1 1212.83 L1112.69 1212.83 L1113.28 1212.83 L1113.86 1212.83 L1114.45 1212.83 L1115.04 1212.83 L1115.62 1212.83 L1116.21 1212.83 L1116.8 1212.83 L1117.38 1212.83 L1117.97 1212.83 L1118.55 1212.83 L1119.14 1212.83 L1119.73 1212.83 L1120.31 1212.83 L1120.9 1212.83 L1121.49 1212.83 L1122.07 1212.83 L1122.66 1212.83 L1123.25 1212.83 L1123.83 1212.83 L1124.42 1212.83 L1125.01 1212.83 L1125.59 1212.83 L1126.18 1212.83 L1126.76 1212.83 L1127.35 1212.83 L1127.94 1212.83 L1128.52 1212.83 L1129.11 1212.83 L1129.7 1212.83 L1130.28 1212.83 L1130.87 1212.83 L1131.46 1212.83 L1132.04 1212.83 L1132.63 1212.83 L1133.21 1212.83 L1133.8 1212.83 L1134.39 1212.83 L1134.97 1212.83 L1135.56 1212.83 L1136.15 1212.83 L1136.73 1212.83 L1137.32 1212.83 L1137.91 1212.83 L1138.49 1212.83 L1139.08 1212.83 L1139.67 1212.83 L1140.25 1212.83 L1140.84 1212.83 L1141.42 1212.83 L1142.01 1212.83 L1142.6 1212.83 L1143.18 1212.83 L1143.77 1212.83 L1144.36 1212.83 L1144.94 1212.83 L1145.53 1212.83 L1146.12 1212.83 L1146.7 1212.83 L1147.29 1212.83 L1147.88 1212.83 L1148.46 1212.83 L1149.05 1212.83 L1149.63 1212.83 L1150.22 1212.83 L1150.81 1212.83 L1151.39 1212.83 L1151.98 1212.83 L1152.57 1212.83 L1153.15 1212.83 L1153.74 1212.83 L1154.33 1212.83 L1154.91 1212.83 L1155.5 1212.83 L1156.09 1212.83 L1156.67 1212.83 L1157.26 1212.83 L1157.84 1212.83 L1158.43 1212.83 L1159.02 1212.83 L1159.6 1212.83 L1160.19 1212.83 L1160.78 1212.83 L1161.36 1212.83 L1161.95 1212.83 L1162.54 1212.83 L1163.12 1212.83 L1163.71 1212.83 L1164.29 1212.83 L1164.88 1212.83 L1165.47 1212.83 L1166.05 1212.83 L1166.64 1212.83 L1167.23 1212.83 L1167.81 1212.83 L1168.4 1212.83 L1168.99 1212.83 L1169.57 1212.83 L1170.16 1212.83 L1170.75 1212.83 L1171.33 1212.83 L1171.92 1212.83 L1172.5 1212.83 L1173.09 1212.83 L1173.68 1212.83 L1174.26 1212.83 L1174.85 1212.83 L1175.44 1212.83 L1176.02 1212.83 L1176.61 1212.83 L1177.2 1212.83 L1177.78 1212.83 L1178.37 1212.83 L1178.96 1212.83 L1179.54 1212.83 L1180.13 1212.83 L1180.71 1212.83 L1181.3 1212.83 L1181.89 1212.83 L1182.47 1212.83 L1183.06 1212.83 L1183.65 1212.83 L1184.23 1212.83 L1184.82 1212.83 L1185.41 1212.83 L1185.99 1212.83 L1186.58 1212.83 L1187.16 1212.83 L1187.75 1212.83 L1188.34 1212.83 L1188.92 1212.83 L1189.51 1212.83 L1190.1 1212.83 L1190.68 1212.83 L1191.27 1212.83 L1191.86 1212.83 L1192.44 1212.83 L1193.03 1212.83 L1193.62 1212.83 L1194.2 1212.83 L1194.79 1212.83 L1195.37 1212.83 L1195.96 1212.83 L1196.55 1212.83 L1197.13 1212.83 L1197.72 1212.83 L1198.31 1212.83 L1198.89 1212.83 L1199.48 1212.83 L1200.07 1212.83 L1200.65 1212.83 L1201.24 1212.83 L1201.83 1212.83 L1202.41 1212.83 L1203 1212.83 L1203.58 1212.83 L1204.17 1212.83 L1204.76 1212.83 L1205.34 1212.83 L1205.93 1212.83 L1206.52 1212.83 L1207.1 1212.83 L1207.69 1212.83 L1208.28 1212.83 L1208.86 1212.83 L1209.45 1212.83 L1210.03 1212.83 L1210.62 1212.83 L1211.21 1212.83 L1211.79 1212.83 L1212.38 1212.83 L1212.97 1212.83 L1213.55 1212.83 L1214.14 1212.83 L1214.73 1212.83 L1215.31 1212.83 L1215.9 1212.83 L1216.49 1212.83 L1217.07 1212.83 L1217.66 1212.83 L1218.24 1212.83 L1218.83 1212.83 L1219.42 1212.83 L1220 1212.83 L1220.59 1212.83 L1221.18 1212.83 L1221.76 1212.83 L1222.35 1212.83 L1222.94 1212.83 L1223.52 1212.83 L1224.11 1212.83 L1224.7 1212.83 L1225.28 1212.83 L1225.87 1212.83 L1226.45 1212.83 L1227.04 1212.83 L1227.63 1212.83 L1228.21 1212.83 L1228.8 1212.83 L1229.39 1212.83 L1229.97 1212.83 L1230.56 1212.83 L1231.15 1212.83 L1231.73 1212.83 L1232.32 1212.83 L1232.91 1212.83 L1233.49 1212.83 L1234.08 1212.83 L1234.66 1212.83 L1235.25 1212.83 L1235.84 1212.83 L1236.42 1212.83 L1237.01 1212.83 L1237.6 1212.83 L1238.18 1212.83 L1238.77 1212.83 L1239.36 1212.83 L1239.94 1212.83 L1240.53 1212.83 L1241.11 1212.83 L1241.7 1212.83 L1242.29 1212.83 L1242.87 1212.83 L1243.46 1212.83 L1244.05 1212.83 L1244.63 1212.83 L1245.22 1212.83 L1245.81 1212.83 L1246.39 1212.83 L1246.98 1212.83 L1247.57 1212.83 L1248.15 1212.83 L1248.74 1212.83 L1249.32 1212.83 L1249.91 1212.83 L1250.5 1212.83 L1251.08 1212.83 L1251.67 1212.83 L1252.26 1212.83 L1252.84 1212.83 L1253.43 1212.83 L1254.02 1212.83 L1254.6 1212.83 L1255.19 1212.83 L1255.78 1212.83 L1256.36 1212.83 L1256.95 1212.83 L1257.53 1212.83 L1258.12 1212.83 L1258.71 1212.83 L1259.29 1212.83 L1259.88 1212.83 L1260.47 1212.83 L1261.05 1212.83 L1261.64 1212.83 L1262.23 1212.83 L1262.81 1212.83 L1263.4 1212.83 L1263.98 1212.83 L1264.57 1212.83 L1265.16 1212.83 L1265.74 1212.83 L1266.33 1212.83 L1266.92 1212.83 L1267.5 1212.83 L1268.09 1212.83 L1268.68 1212.83 L1269.26 1212.83 L1269.85 1212.83 L1270.44 1212.83 L1271.02 1212.83 L1271.61 1212.83 L1272.19 1212.83 L1272.78 1212.83 L1273.37 1212.83 L1273.95 1212.83 L1274.54 1212.83 L1275.13 1212.83 L1275.71 1212.83 L1276.3 1212.83 L1276.89 1212.83 L1277.47 1212.83 L1278.06 1212.83 L1278.65 1212.83 L1279.23 1212.83 L1279.82 1212.83 L1280.4 1212.83 L1280.99 1212.83 L1281.58 1212.83 L1282.16 1212.83 L1282.75 1212.83 L1283.34 1212.83 L1283.92 1212.83 L1284.51 1212.83 L1285.1 1212.83 L1285.68 1212.83 L1286.27 1212.83 L1286.86 1212.83 L1287.44 1212.83 L1288.03 1212.83 L1288.61 1212.83 L1289.2 1212.83 L1289.79 1212.83 L1290.37 1212.83 L1290.96 1212.83 L1291.55 1212.83 L1292.13 1212.83 L1292.72 1212.83 L1293.31 1212.83 L1293.89 1212.83 L1294.48 1212.83 L1295.06 1212.83 L1295.65 1212.83 L1296.24 1212.83 L1296.82 1212.83 L1297.41 1212.83 L1298 1212.83 L1298.58 1212.83 L1299.17 1212.83 L1299.76 1212.83 L1300.34 1212.83 L1300.93 1212.83 L1301.52 1212.83 L1302.1 1212.83 L1302.69 1212.83 L1303.27 1212.83 L1303.86 1212.83 L1304.45 1212.83 L1305.03 1212.83 L1305.62 1212.83 L1306.21 1212.83 L1306.79 1212.83 L1307.38 1212.83 L1307.97 1212.83 L1308.55 1212.83 L1309.14 1212.83 L1309.73 1212.83 L1310.31 1212.83 L1310.9 1212.83 L1311.48 1212.83 L1312.07 1212.83 L1312.66 1212.83 L1313.24 1212.83 L1313.83 1212.83 L1314.42 1212.83 L1315 1212.83 L1315.59 1212.83 L1316.18 1212.83 L1316.76 1212.83 L1317.35 1212.83 L1317.93 1212.83 L1318.52 1212.83 L1319.11 1212.83 L1319.69 1212.83 L1320.28 1212.83 L1320.87 1212.83 L1321.45 1212.83 L1322.04 1212.83 L1322.63 1212.83 L1323.21 1212.83 L1323.8 1212.83 L1324.39 1212.83 L1324.97 1212.83 L1325.56 1212.83 L1326.14 1212.83 L1326.73 1212.83 L1327.32 1212.83 L1327.9 1212.83 L1328.49 1212.83 L1329.08 1212.83 L1329.66 1212.83 L1330.25 1212.83 L1330.84 1212.83 L1331.42 1212.83 L1332.01 1212.83 L1332.6 1212.83 L1333.18 1212.83 L1333.77 1212.83 L1334.35 1212.83 L1334.94 1212.83 L1335.53 1212.83 L1336.11 1212.83 L1336.7 1212.83 L1337.29 1212.83 L1337.87 1212.83 L1338.46 1212.83 L1339.05 1212.83 L1339.63 1212.83 L1340.22 1212.83 L1340.8 1212.83 L1341.39 1212.83 L1341.98 1212.83 L1342.56 1212.83 L1343.15 1212.83 L1343.74 1212.83 L1344.32 1212.83 L1344.91 1212.83 L1345.5 1212.83 L1346.08 1212.83 L1346.67 1212.83 L1347.26 1212.83 L1347.84 1212.83 L1348.43 1212.83 L1349.01 1212.83 L1349.6 1212.83 L1350.19 1212.83 L1350.77 1212.83 L1351.36 1212.83 L1351.95 1212.83 L1352.53 1212.83 L1353.12 1212.83 L1353.71 1212.83 L1354.29 1212.83 L1354.88 1212.83 L1355.47 1212.83 L1356.05 1212.83 L1356.64 1212.83 L1357.22 1212.83 L1357.81 1212.83 L1358.4 1212.83 L1358.98 1212.83 L1359.57 1212.83 L1360.16 1212.83 L1360.74 1212.83 L1361.33 1212.83 L1361.92 1212.83 L1362.5 1212.83 L1363.09 1212.83 L1363.68 1212.83 L1364.26 1212.83 L1364.85 1212.83 L1365.43 1212.83 L1366.02 1212.83 L1366.61 1212.83 L1367.19 1212.83 L1367.78 1212.83 L1368.37 1212.83 L1368.95 1212.83 L1369.54 1212.83 L1370.13 1212.83 L1370.71 1212.83 L1371.3 1212.83 L1371.88 1212.83 L1372.47 1212.83 L1373.06 1212.83 L1373.64 1212.83 L1374.23 1212.83 L1374.82 1212.83 L1375.4 1212.83 L1375.99 1212.83 L1376.58 1212.83 L1377.16 1212.83 L1377.75 1212.83 L1378.34 1212.83 L1378.92 1212.83 L1379.51 1212.83 L1380.09 1212.83 L1380.68 1212.83 L1381.27 1212.83 L1381.85 1212.83 L1382.44 1212.83 L1383.03 1212.83 L1383.61 1212.83 L1384.2 1212.83 L1384.79 1212.83 L1385.37 1212.83 L1385.96 1212.83 L1386.55 1212.83 L1387.13 1212.83 L1387.72 1212.83 L1388.3 1212.83 L1388.89 1212.83 L1389.48 1212.83 L1390.06 1212.83 L1390.65 1212.83 L1391.24 1212.83 L1391.82 1212.83 L1392.41 1212.83 L1393 1212.83 L1393.58 1212.83 L1394.17 1212.83 L1394.75 1212.83 L1395.34 1212.83 L1395.93 1212.83 L1396.51 1212.83 L1397.1 1212.83 L1397.69 1212.83 L1398.27 1212.83 L1398.86 1212.83 L1399.45 1212.83 L1400.03 1212.83 L1400.62 1212.83 L1401.21 1212.83 L1401.79 1212.83 L1402.38 1212.83 L1402.96 1212.83 L1403.55 1212.83 L1404.14 1212.83 L1404.72 1212.83 L1405.31 1212.83 L1405.9 1212.83 L1406.48 1212.83 L1407.07 1212.83 L1407.66 1212.83 L1408.24 1212.83 L1408.83 1212.83 L1409.42 1212.83 L1410 1212.83 L1410.59 1212.83 L1411.17 1212.83 L1411.76 1212.83 L1412.35 1212.83 L1412.93 1212.83 L1413.52 1212.83 L1414.11 1212.83 L1414.69 1212.83 L1415.28 1212.83 L1415.87 1212.83 L1416.45 1212.83 L1417.04 1212.83 L1417.63 1212.83 L1418.21 1212.83 L1418.8 1212.83 L1419.38 1212.83 L1419.97 1212.83 L1420.56 1212.83 L1421.14 1212.83 L1421.73 1212.83 L1422.32 1212.83 L1422.9 1212.83 L1423.49 1212.83 L1424.08 1212.83 L1424.66 1212.83 L1425.25 1212.83 L1425.83 1212.83 L1426.42 1212.83 L1427.01 1212.83 L1427.59 1212.83 L1428.18 1212.83 L1428.77 1212.83 L1429.35 1212.83 L1429.94 1212.83 L1430.53 1212.83 L1431.11 1212.83 L1431.7 1212.83 L1432.29 1212.83 L1432.87 1212.83 L1433.46 1212.83 L1434.04 1212.83 L1434.63 1212.83 L1435.22 1212.83 L1435.8 1212.83 L1436.39 1212.83 L1436.98 1212.83 L1437.56 1212.83 L1438.15 1212.83 L1438.74 1212.83 L1439.32 1212.83 L1439.91 1212.83 L1440.5 1212.83 L1441.08 1212.83 L1441.67 1212.83 L1442.25 1212.83 L1442.84 1212.83 L1443.43 1212.83 L1444.01 1212.83 L1444.6 1212.83 L1445.19 1212.83 L1445.77 1212.83 L1446.36 1212.83 L1446.95 1212.83 L1447.53 1212.83 L1448.12 1212.83 L1448.7 1212.83 L1449.29 1212.83 L1449.88 1212.83 L1450.46 1212.83 L1451.05 1212.83 L1451.64 1212.83 L1452.22 1212.83 L1452.81 1212.83 L1453.4 1212.83 L1453.98 1212.83 L1454.57 1212.83 L1455.16 1212.83 L1455.74 1212.83 L1456.33 1212.83 L1456.91 1212.83 L1457.5 1212.83 L1458.09 1212.83 L1458.67 1212.83 L1459.26 1212.83 L1459.85 1212.83 L1460.43 1212.83 L1461.02 1212.83 L1461.61 1212.83 L1462.19 1212.83 L1462.78 1212.83 L1463.37 1212.83 L1463.95 1212.83 L1464.54 1212.83 L1465.12 1212.83 L1465.71 1212.83 L1466.3 1212.83 L1466.88 1212.83 L1467.47 1212.83 L1468.06 1212.83 L1468.64 1212.83 L1469.23 1212.83 L1469.82 1212.83 L1470.4 1212.83 L1470.99 1212.83 L1471.57 1212.83 L1472.16 1212.83 L1472.75 1212.83 L1473.33 1212.83 L1473.92 1212.83 L1474.51 1212.83 L1475.09 1212.83 L1475.68 1212.83 L1476.27 1212.83 L1476.85 1212.83 L1477.44 1212.83 L1478.03 1212.83 L1478.61 1212.83 L1479.2 1212.83 L1479.78 1212.83 L1480.37 1212.83 L1480.96 1212.83 L1481.54 1212.83 L1482.13 1212.83 L1482.72 1212.83 L1483.3 1212.83 L1483.89 1212.83 L1484.48 1212.83 L1485.06 1212.83 L1485.65 1212.83 L1486.24 1212.83 L1486.82 1212.83 L1487.41 1212.83 L1487.99 1212.83 L1488.58 1212.83 L1489.17 1212.83 L1489.75 1212.83 L1490.34 1212.83 L1490.93 1212.83 L1491.51 1212.83 L1492.1 1212.83 L1492.69 1212.83 L1493.27 1212.83 L1493.86 1212.83 L1494.45 1212.83 L1495.03 1212.83 L1495.62 1212.83 L1496.2 1212.83 L1496.79 1212.83 L1497.38 1212.83 L1497.96 1212.83 L1498.55 1212.83 L1499.14 1212.83 L1499.72 1212.83 L1500.31 1212.83 L1500.9 1212.83 L1501.48 1212.83 L1502.07 1212.83 L1502.65 1212.83 L1503.24 1212.83 L1503.83 1212.83 L1504.41 1212.83 L1505 1212.83 L1505.59 1212.83 L1506.17 1212.83 L1506.76 1212.83 L1507.35 1212.83 L1507.93 1212.83 L1508.52 1212.83 L1509.11 1212.83 L1509.69 1212.83 L1510.28 1212.83 L1510.86 1212.83 L1511.45 1212.83 L1512.04 1212.83 L1512.62 1212.83 L1513.21 1212.83 L1513.8 1212.83 L1514.38 1212.83 L1514.97 1212.83 L1515.56 1212.83 L1516.14 1212.83 L1516.73 1212.83 L1517.32 1212.83 L1517.9 1212.83 L1518.49 1212.83 L1519.07 1212.83 L1519.66 1212.83 L1520.25 1212.83 L1520.83 1212.83 L1521.42 1212.83 L1522.01 1212.83 L1522.59 1212.83 L1523.18 1212.83 L1523.77 1212.83 L1524.35 1212.83 L1524.94 1212.83 L1525.52 1212.83 L1526.11 1212.83 L1526.7 1212.83 L1527.28 1212.83 L1527.87 1212.83 L1528.46 1212.83 L1529.04 1212.83 L1529.63 1212.83 L1530.22 1212.83 L1530.8 1212.83 L1531.39 1212.83 L1531.98 1212.83 L1532.56 1212.83 L1533.15 1212.83 L1533.73 1212.83 L1534.32 1212.83 L1534.91 1212.83 L1535.49 1212.83 L1536.08 1212.83 L1536.67 1212.83 L1537.25 1212.83 L1537.84 1212.83 L1538.43 1212.83 L1539.01 1212.83 L1539.6 1212.83 L1540.19 1212.83 L1540.77 1212.83 L1541.36 1212.83 L1541.94 1212.83 L1542.53 1212.83 L1543.12 1212.83 L1543.7 1212.83 L1544.29 1212.83 L1544.88 1212.83 L1545.46 1212.83 L1546.05 1212.83 L1546.64 1212.83 L1547.22 1212.83 L1547.81 1212.83 L1548.4 1212.83 L1548.98 1212.83 L1549.57 1212.83 L1550.15 1212.83 L1550.74 1212.83 L1551.33 1212.83 L1551.91 1212.83 L1552.5 1212.83 L1553.09 1212.83 L1553.67 1212.83 L1554.26 1212.83 L1554.85 1212.83 L1555.43 1212.83 L1556.02 1212.83 L1556.6 1212.83 L1557.19 1212.83 L1557.78 1212.83 L1558.36 1212.83 L1558.95 1212.83 L1559.54 1212.83 L1560.12 1212.83 L1560.71 1212.83 L1561.3 1212.83 L1561.88 1212.83 L1562.47 1212.83 L1563.06 1212.83 L1563.64 1212.83 L1564.23 1212.83 L1564.81 1212.83 L1565.4 1212.83 L1565.99 1212.83 L1566.57 1212.83 L1567.16 1212.83 L1567.75 1212.83 L1568.33 1212.83 L1568.92 1212.83 L1569.51 1212.83 L1570.09 1212.83 L1570.68 1212.83 L1571.27 1212.83 L1571.85 1212.83 L1572.44 1212.83 L1573.02 1212.83 L1573.61 1212.83 L1574.2 1212.83 L1574.78 1212.83 L1575.37 1212.83 L1575.96 1212.83 L1576.54 1212.83 L1577.13 1212.83 L1577.72 1212.83 L1578.3 1212.83 L1578.89 1212.83 L1579.47 1212.83 L1580.06 1212.83 L1580.65 1212.83 L1581.23 1212.83 L1581.82 1212.83 L1582.41 1212.83 L1582.99 1212.83 L1583.58 1212.83 L1584.17 1212.83 L1584.75 1212.83 L1585.34 1212.83 L1585.93 1212.83 L1586.51 1212.83 L1587.1 1212.83 L1587.68 1212.83 L1588.27 1212.83 L1588.86 1212.83 L1589.44 1212.83 L1590.03 1212.83 L1590.62 1212.83 L1591.2 1212.83 L1591.79 1212.83 L1592.38 1212.83 L1592.96 1212.83 L1593.55 1212.83 L1594.14 1212.83 L1594.72 1212.83 L1595.31 1212.83 L1595.89 1212.83 L1596.48 1212.83 L1597.07 1212.83 L1597.65 1212.83 L1598.24 1212.83 L1598.83 1212.83 L1599.41 1212.83 L1600 1212.83 L1600.59 1212.83 L1601.17 1212.83 L1601.76 1212.83 L1602.34 1212.83 L1602.93 1212.83 L1603.52 1212.83 L1604.1 1212.83 L1604.69 1212.83 L1605.28 1212.83 L1605.86 1212.83 L1606.45 1212.83 L1607.04 1212.83 L1607.62 1212.83 L1608.21 1212.83 L1608.8 1212.83 L1609.38 1212.83 L1609.97 1212.83 L1610.55 1212.83 L1611.14 1212.83 L1611.73 1212.83 L1612.31 1212.83 L1612.9 1212.83 L1613.49 1212.83 L1614.07 1212.83 L1614.66 1212.83 L1615.25 1212.83 L1615.83 1212.83 L1616.42 1212.83 L1617.01 1212.83 L1617.59 1212.83 L1618.18 1212.83 L1618.76 1212.83 L1619.35 1212.83 L1619.94 1212.83 L1620.52 1212.83 L1621.11 1212.83 L1621.7 1212.83 L1622.28 1212.83 L1622.87 1212.83 L1623.46 1212.83 L1624.04 1212.83 L1624.63 1212.83 L1625.22 1212.83 L1625.8 1212.83 L1626.39 1212.83 L1626.97 1212.83 L1627.56 1212.83 L1628.15 1212.83 L1628.73 1212.83 L1629.32 1212.83 L1629.91 1212.83 L1630.49 1212.83 L1631.08 1212.83 L1631.67 1212.83 L1632.25 1212.83 L1632.84 1212.83 L1633.42 1212.83 L1634.01 1212.83 L1634.6 1212.83 L1635.18 1212.83 L1635.77 1212.83 L1636.36 1212.83 L1636.94 1212.83 L1637.53 1212.83 L1638.12 1212.83 L1638.7 1212.83 L1639.29 1212.83 L1639.88 1212.83 L1640.46 1212.83 L1641.05 1212.83 L1641.63 1212.83 L1642.22 1212.83 L1642.81 1212.83 L1643.39 1212.83 L1643.98 1212.83 L1644.57 1212.83 L1645.15 1212.83 L1645.74 1212.83 L1646.33 1212.83 L1646.91 1212.83 L1647.5 1212.83 L1648.09 1212.83 L1648.67 1212.83 L1649.26 1212.83 L1649.84 1212.83 L1650.43 1212.83 L1651.02 1212.83 L1651.6 1212.83 L1652.19 1212.83 L1652.78 1212.83 L1653.36 1212.83 L1653.95 1212.83 L1654.54 1212.83 L1655.12 1212.83 L1655.71 1212.83 L1656.29 1212.83 L1656.88 1212.83 L1657.47 1212.83 L1658.05 1212.83 L1658.64 1212.83 L1659.23 1212.83 L1659.81 1212.83 L1660.4 1212.83 L1660.99 1212.83 L1661.57 1212.83 L1662.16 1212.83 L1662.75 1212.83 L1663.33 1212.83 L1663.92 1212.83 L1664.5 1212.83 L1665.09 1212.83 L1665.68 1212.83 L1666.26 1212.83 L1666.85 1212.83 L1667.44 1212.83 L1668.02 1212.83 L1668.61 1212.83 L1669.2 1212.83 L1669.78 1212.83 L1670.37 1212.83 L1670.96 1212.83 L1671.54 1212.83 L1672.13 1212.83 L1672.71 1212.83 L1673.3 1212.83 L1673.89 1212.83 L1674.47 1212.83 L1675.06 1212.83 L1675.65 1212.83 L1676.23 1212.83 L1676.82 1212.83 L1677.41 1212.83 L1677.99 1212.83 L1678.58 1212.83 L1679.17 1212.83 L1679.75 1212.83 L1680.34 1212.83 L1680.92 1212.83 L1681.51 1212.83 L1682.1 1212.83 L1682.68 1212.83 L1683.27 1212.83 L1683.86 1212.83 L1684.44 1212.83 L1685.03 1212.83 L1685.62 1212.83 L1686.2 1212.83 L1686.79 1212.83 L1687.37 1212.83 L1687.96 1212.83 L1688.55 1212.83 L1689.13 1212.83 L1689.72 1212.83 L1690.31 1212.83 L1690.89 1212.83 L1691.48 1212.83 L1692.07 1212.83 L1692.65 1212.83 L1693.24 1212.83 L1693.83 1212.83 L1694.41 1212.83 L1695 1212.83 L1695.58 1212.83 L1696.17 1212.83 L1696.76 1212.83 L1697.34 1212.83 L1697.93 1212.83 L1698.52 1212.83 L1699.1 1212.83 L1699.69 1212.83 L1700.28 1212.83 L1700.86 1212.83 L1701.45 1212.83 L1702.04 1212.83 L1702.62 1212.83 L1703.21 1212.83 L1703.79 1212.83 L1704.38 1212.83 L1704.97 1212.83 L1705.55 1212.83 L1706.14 1212.83 L1706.73 1212.83 L1707.31 1212.83 L1707.9 1212.83 L1708.49 1212.83 L1709.07 1212.83 L1709.66 1212.83 L1710.24 1212.83 L1710.83 1212.83 L1711.42 1212.83 L1712 1212.83 L1712.59 1212.83 L1713.18 1212.83 L1713.76 1212.83 L1714.35 1212.83 L1714.94 1212.83 L1715.52 1212.83 L1716.11 1212.83 L1716.7 1212.83 L1717.28 1212.83 L1717.87 1212.83 L1718.45 1212.83 L1719.04 1212.83 L1719.63 1212.83 L1720.21 1212.83 L1720.8 1212.83 L1721.39 1212.83 L1721.97 1212.83 L1722.56 1212.83 L1723.15 1212.83 L1723.73 1212.83 L1724.32 1212.83 L1724.91 1212.83 L1725.49 1212.83 L1726.08 1212.83 L1726.66 1212.83 L1727.25 1212.83 L1727.84 1212.83 L1728.42 1212.83 L1729.01 1212.83 L1729.6 1212.83 L1730.18 1212.83 L1730.77 1212.83 L1731.36 1212.83 L1731.94 1212.83 L1732.53 1212.83 L1733.11 1212.83 L1733.7 1212.83 L1734.29 1212.83 L1734.87 1212.83 L1735.46 1212.83 L1736.05 1212.83 L1736.63 1212.83 L1737.22 1212.83 L1737.81 1212.83 L1738.39 1212.83 L1738.98 1212.83 L1739.57 1212.83 L1740.15 1212.83 L1740.74 1212.83 L1741.32 1212.83 L1741.91 1212.83 L1742.5 1212.83 L1743.08 1212.83 L1743.67 1212.83 L1744.26 1212.83 L1744.84 1212.83 L1745.43 1212.83 L1746.02 1212.83 L1746.6 1212.83 L1747.19 1212.83 L1747.78 1212.83 L1748.36 1212.83 L1748.95 1212.83 L1749.53 1212.83 L1750.12 1212.83 L1750.71 1212.83 L1751.29 1212.83 L1751.88 1212.83 L1752.47 1212.83 L1753.05 1212.83 L1753.64 1212.83 L1754.23 1212.83 L1754.81 1212.83 L1755.4 1212.83 L1755.99 1212.83 L1756.57 1212.83 L1757.16 1212.83 L1757.74 1212.83 L1758.33 1212.83 L1758.92 1212.83 L1759.5 1212.83 L1760.09 1212.83 L1760.68 1212.83 L1761.26 1212.83 L1761.85 1212.83 L1762.44 1212.83 L1763.02 1212.83 L1763.61 1212.83 L1764.19 1212.83 L1764.78 1212.83 L1765.37 1212.83 L1765.95 1212.83 L1766.54 1212.83 L1767.13 1212.83 L1767.71 1212.83 L1768.3 1212.83 L1768.89 1212.83 L1769.47 1212.83 L1770.06 1212.83 L1770.65 1212.83 L1771.23 1212.83 L1771.82 1212.83 L1772.4 1212.83 L1772.99 1212.83 L1773.58 1212.83 L1774.16 1212.83 L1774.75 1212.83 L1775.34 1212.83 L1775.92 1212.83 L1776.51 1212.83 L1777.1 1212.83 L1777.68 1212.83 L1778.27 1212.83 L1778.86 1212.83 L1779.44 1212.83 L1780.03 1212.83 L1780.61 1212.83 L1781.2 1212.83 L1781.79 1212.83 L1782.37 1212.83 L1782.96 1212.83 L1783.55 1212.83 L1784.13 1212.83 L1784.72 1212.83 L1785.31 1212.83 L1785.89 1212.83 L1786.48 1212.83 L1787.06 1212.83 L1787.65 1212.83 L1788.24 1212.83 L1788.82 1212.83 L1789.41 1212.83 L1790 1212.83 L1790.58 1212.83 L1791.17 1212.83 L1791.76 1212.83 L1792.34 1212.83 L1792.93 1212.83 L1793.52 1212.83 L1794.1 1212.83 L1794.69 1212.83 L1795.27 1212.83 L1795.86 1212.83 L1796.45 1212.83 L1797.03 1212.83 L1797.62 1212.83 L1798.21 1212.83 L1798.79 1212.83 L1799.38 1212.83 L1799.97 1212.83 L1800.55 1212.83 L1801.14 1212.83 L1801.73 1212.83 L1802.31 1212.83 L1802.9 1212.83 L1803.48 1212.83 L1804.07 1212.83 L1804.66 1212.83 L1805.24 1212.83 L1805.83 1212.83 L1806.42 1212.83 L1807 1212.83 L1807.59 1212.83 L1808.18 1212.83 L1808.76 1212.83 L1809.35 1212.83 L1809.94 1212.83 L1810.52 1212.83 L1811.11 1212.83 L1811.69 1212.83 L1812.28 1212.83 L1812.87 1212.83 L1813.45 1212.83 L1814.04 1212.83 L1814.63 1212.83 L1815.21 1212.83 L1815.8 1212.83 L1816.39 1212.83 L1816.97 1212.83 L1817.56 1212.83 L1818.14 1212.83 L1818.73 1212.83 L1819.32 1212.83 L1819.9 1212.83 L1820.49 1212.83 L1821.08 1212.83 L1821.66 1212.83 L1822.25 1212.83 L1822.84 1212.83 L1823.42 1212.83 L1824.01 1212.83 L1824.6 1212.83 L1825.18 1212.83 L1825.77 1212.83 L1826.35 1212.83 L1826.94 1212.83 L1827.53 1212.83 L1828.11 1212.83 L1828.7 1212.83 L1829.29 1212.83 L1829.87 1212.83 L1830.46 1212.83 L1831.05 1212.83 L1831.63 1212.83 L1832.22 1212.83 L1832.81 1212.83 L1833.39 1212.83 L1833.98 1212.83 L1834.56 1212.83 L1835.15 1212.83 L1835.74 1212.83 L1836.32 1212.83 L1836.91 1212.83 L1837.5 1212.83 L1838.08 1212.83 L1838.67 1212.83 L1839.26 1212.83 L1839.84 1212.83 L1840.43 1212.83 L1841.01 1212.83 L1841.6 1212.83 L1842.19 1212.83 L1842.77 1212.83 L1843.36 1212.83 L1843.95 1212.83 L1844.53 1212.83 L1845.12 1212.83 L1845.71 1212.83 L1846.29 1212.83 L1846.88 1212.83 L1847.47 1212.83 L1848.05 1212.83 L1848.64 1212.83 L1849.22 1212.83 L1849.81 1212.83 L1850.4 1212.83 L1850.98 1212.83 L1851.57 1212.83 L1852.16 1212.83 L1852.74 1212.83 L1853.33 1212.83 L1853.92 1212.83 L1854.5 1212.83 L1855.09 1212.83 L1855.68 1212.83 L1856.26 1212.83 L1856.85 1212.83 L1857.43 1212.83 L1858.02 1212.83 L1858.61 1212.83 L1859.19 1212.83 L1859.78 1212.83 L1860.37 1212.83 L1860.95 1212.83 L1861.54 1212.83 L1862.13 1212.83 L1862.71 1212.83 L1863.3 1212.83 L1863.88 1212.83 L1864.47 1212.83 L1865.06 1212.83 L1865.64 1212.83 L1866.23 1212.83 L1866.82 1212.83 L1867.4 1212.83 L1867.99 1212.83 L1868.58 1212.83 L1869.16 1212.83 L1869.75 1212.83 L1870.34 1212.83 L1870.92 1212.83 L1871.51 1212.83 L1872.09 1212.83 L1872.68 1212.83 L1873.27 1212.83 L1873.85 1212.83 L1874.44 1212.83 L1875.03 1212.83 L1875.61 1212.83 L1876.2 1212.83 L1876.79 1212.83 L1877.37 1212.83 L1877.96 1212.83 L1878.55 1212.83 L1879.13 1212.83 L1879.72 1212.83 L1880.3 1212.83 L1880.89 1212.83 L1881.48 1212.83 L1882.06 1212.83 L1882.65 1212.83 L1883.24 1212.83 L1883.82 1212.83 L1884.41 1212.83 L1885 1212.83 L1885.58 1212.83 L1886.17 1212.83 L1886.76 1212.83 L1887.34 1212.83 L1887.93 1212.83 L1888.51 1212.83 L1889.1 1212.83 L1889.69 1212.83 L1890.27 1212.83 L1890.86 1212.83 L1891.45 1212.83 L1892.03 1212.83 L1892.62 1212.83 L1893.21 1212.83 L1893.79 1212.83 L1894.38 1212.83 L1894.96 1212.83 L1895.55 1212.83 L1896.14 1212.83 L1896.72 1212.83 L1897.31 1212.83 L1897.9 1212.83 L1898.48 1212.83 L1899.07 1212.83 L1899.66 1212.83 L1900.24 1212.83 L1900.83 1212.83 L1901.42 1212.83 L1902 1212.83 L1902.59 1212.83 L1903.17 1212.83 L1903.76 1212.83 L1904.35 1212.83 L1904.93 1212.83 L1905.52 1212.83 L1906.11 1212.83 L1906.69 1212.83 L1907.28 1212.83 L1907.87 1212.83 L1908.45 1212.83 L1909.04 1212.83 L1909.63 1212.83 L1910.21 1212.83 L1910.8 1212.83 L1911.38 1212.83 L1911.97 1212.83 L1912.56 1212.83 L1913.14 1212.83 L1913.73 1212.83 L1914.32 1212.83 L1914.9 1212.83 L1915.49 1212.83 L1916.08 1212.83 L1916.66 1212.83 L1917.25 1212.83 L1917.83 1212.83 L1918.42 1212.83 L1919.01 1212.83 L1919.59 1212.83 L1920.18 1212.83 L1920.77 1212.83 L1921.35 1212.83 L1921.94 1212.83 L1922.53 1212.83 L1923.11 1212.83 L1923.7 1212.83 L1924.29 1212.83 L1924.87 1212.83 L1925.46 1212.83 L1926.04 1212.83 L1926.63 1212.83 L1927.22 1212.83 L1927.8 1212.83 L1928.39 1212.83 L1928.98 1212.83 L1929.56 1212.83 L1930.15 1212.83 L1930.74 1212.83 L1931.32 1212.83 L1931.91 1212.83 L1932.5 1212.83 L1933.08 1212.83 L1933.67 1212.83 L1934.25 1212.83 L1934.84 1212.83 L1935.43 1212.83 L1936.01 1212.83 L1936.6 1212.83 L1937.19 1212.83 L1937.77 1212.83 L1938.36 1212.83 L1938.95 1212.83 L1939.53 1212.83 L1940.12 1212.83 L1940.71 1212.83 L1941.29 1212.83 L1941.88 1212.83 L1942.46 1212.83 L1943.05 1212.83 L1943.64 1212.83 L1944.22 1212.83 L1944.81 1212.83 L1945.4 1212.83 L1945.98 1212.83 L1946.57 1212.83 L1947.16 1212.83 L1947.74 1212.83 L1948.33 1212.83 L1948.91 1212.83 L1949.5 1212.83 L1950.09 1212.83 L1950.67 1212.83 L1951.26 1212.83 L1951.85 1212.83 L1952.43 1212.83 L1953.02 1212.83 L1953.61 1212.83 L1954.19 1212.83 L1954.78 1212.83 L1955.37 1212.83 L1955.95 1212.83 L1956.54 1212.83 L1957.12 1212.83 L1957.71 1212.83 L1958.3 1212.83 L1958.88 1212.83 L1959.47 1212.83 L1960.06 1212.83 L1960.64 1212.83 L1961.23 1212.83 L1961.82 1212.83 L1962.4 1212.83 L1962.99 1212.83 L1963.58 1212.83 L1964.16 1212.83 L1964.75 1212.83 L1965.33 1212.83 L1965.92 1212.83 L1966.51 1212.83 L1967.09 1212.83 L1967.68 1212.83 L1968.27 1212.83 L1968.85 1212.83 L1969.44 1212.83 L1970.03 1212.83 L1970.61 1212.83 L1971.2 1212.83 L1971.78 1212.83 L1972.37 1212.83 L1972.96 1212.83 L1973.54 1212.83 L1974.13 1212.83 L1974.72 1212.83 L1975.3 1212.83 L1975.89 1212.83 L1976.48 1212.83 L1977.06 1212.83 L1977.65 1212.83 L1978.24 1212.83 L1978.82 1212.83 L1979.41 1212.83 L1979.99 1212.83 L1980.58 1212.83 L1981.17 1212.83 L1981.75 1212.83 L1982.34 1212.83 L1982.93 1212.83 L1983.51 1212.83 L1984.1 1212.83 L1984.69 1212.83 L1985.27 1212.83 L1985.86 1212.83 L1986.45 1212.83 L1987.03 1212.83 L1987.62 1212.83 L1988.2 1212.83 L1988.79 1212.83 L1989.38 1212.83 L1989.96 1212.83 L1990.55 1212.83 L1991.14 1212.83 L1991.72 1212.83 L1992.31 1212.83 L1992.9 1212.83 L1993.48 1212.83 L1994.07 1212.83 L1994.65 1212.83 L1995.24 1212.83 L1995.83 1212.83 L1996.41 1212.83 L1997 1212.83 L1997.59 1212.83 L1998.17 1212.83 L1998.76 1212.83 L1999.35 1212.83 L1999.93 1212.83 L2000.52 1212.83 L2001.11 1212.83 L2001.69 1212.83 L2002.28 1212.83 L2002.86 1212.83 L2003.45 1212.83 L2004.04 1212.83 L2004.62 1212.83 L2005.21 1212.83 L2005.8 1212.83 L2006.38 1212.83 L2006.97 1212.83 L2007.56 1212.83 L2008.14 1212.83 L2008.73 1212.83 L2009.32 1212.83 L2009.9 1212.83 L2010.49 1212.83 L2011.07 1212.83 L2011.66 1212.83 L2012.25 1212.83 L2012.83 1212.83 L2013.42 1212.83 L2014.01 1212.83 L2014.59 1212.83 L2015.18 1212.83 L2015.77 1212.83 L2016.35 1212.83 L2016.94 1212.83 L2017.53 1212.83 L2018.11 1212.83 L2018.7 1212.83 L2019.28 1212.83 L2019.87 1212.83 L2020.46 1212.83 L2021.04 1212.83 L2021.63 1212.83 L2022.22 1212.83 L2022.8 1212.83 L2023.39 1212.83 L2023.98 1212.83 L2024.56 1212.83 L2025.15 1212.83 L2025.73 1212.83 L2026.32 1212.83 L2026.91 1212.83 L2027.49 1212.83 L2028.08 1212.83 L2028.67 1212.83 L2029.25 1212.83 L2029.84 1212.83 L2030.43 1212.83 L2031.01 1212.83 L2031.6 1212.83 L2032.19 1212.83 L2032.77 1212.83 L2033.36 1212.83 L2033.94 1212.83 L2034.53 1212.83 L2035.12 1212.83 L2035.7 1212.83 L2036.29 1212.83 L2036.88 1212.83 L2037.46 1212.83 L2038.05 1212.83 L2038.64 1212.83 L2039.22 1212.83 L2039.81 1212.83 L2040.4 1212.83 L2040.98 1212.83 L2041.57 1212.83 L2042.15 1212.83 L2042.74 1212.83 L2043.33 1212.83 L2043.91 1212.83 L2044.5 1212.83 L2045.09 1212.83 L2045.67 1212.83 L2046.26 1212.83 L2046.85 1212.83 L2047.43 1212.83 L2048.02 1212.83 L2048.6 1212.83 L2049.19 1212.83 L2049.78 1212.83 L2050.36 1212.83 L2050.95 1212.83 L2051.54 1212.83 L2052.12 1212.83 L2052.71 1212.83 L2053.3 1212.83 L2053.88 1212.83 L2054.47 1212.83 L2055.06 1212.83 L2055.64 1212.83 L2056.23 1212.83 L2056.81 1212.83 L2057.4 1212.83 L2057.99 1212.83 L2058.57 1212.83 L2059.16 1212.83 L2059.75 1212.83 L2060.33 1212.83 L2060.92 1212.83 L2061.51 1212.83 L2062.09 1212.83 L2062.68 1212.83 L2063.27 1212.83 L2063.85 1212.83 L2064.44 1212.83 L2065.02 1212.83 L2065.61 1212.83 L2066.2 1212.83 L2066.78 1212.83 L2067.37 1212.83 L2067.96 1212.83 L2068.54 1212.83 L2069.13 1212.83 L2069.72 1212.83 L2070.3 1212.83 L2070.89 1212.83 L2071.48 1212.83 L2072.06 1212.83 L2072.65 1212.83 L2073.23 1212.83 L2073.82 1212.83 L2074.41 1212.83 L2074.99 1212.83 L2075.58 1212.83 L2076.17 1212.83 L2076.75 1212.83 L2077.34 1212.83 L2077.93 1212.83 L2078.51 1212.83 L2079.1 1212.83 L2079.68 1212.83 L2080.27 1212.83 L2080.86 1212.83 L2081.44 1212.83 L2082.03 1212.83 L2082.62 1212.83 L2083.2 1212.83 L2083.79 1212.83 L2084.38 1212.83 L2084.96 1212.83 L2085.55 1212.83 L2086.14 1212.83 L2086.72 1212.83 L2087.31 1212.83 L2087.89 1212.83 L2088.48 1212.83 L2089.07 1212.83 L2089.65 1212.83 L2090.24 1212.83 L2090.83 1212.83 L2091.41 1212.83 L2092 1212.83 L2092.59 1212.83 L2093.17 1212.83 L2093.76 1212.83 L2094.35 1212.83 L2094.93 1212.83 L2095.52 1212.83 L2096.1 1212.83 L2096.69 1212.83 L2097.28 1212.83 L2097.86 1212.83 L2098.45 1212.83 L2099.04 1212.83 L2099.62 1212.83 L2100.21 1212.83 L2100.8 1212.83 L2101.38 1212.83 L2101.97 1212.83 L2102.55 1212.83 L2103.14 1212.83 L2103.73 1212.83 L2104.31 1212.83 L2104.9 1212.83 L2105.49 1212.83 L2106.07 1212.83 L2106.66 1212.83 L2107.25 1212.83 L2107.83 1212.83 L2108.42 1212.83 L2109.01 1212.83 L2109.59 1212.83 L2110.18 1212.83 L2110.76 1212.83 L2111.35 1212.83 L2111.94 1212.83 L2112.52 1212.83 L2113.11 1212.83 L2113.7 1212.83 L2114.28 1212.83 L2114.87 1212.83 L2115.46 1212.83 L2116.04 1212.83 L2116.63 1212.83 L2117.22 1212.83 L2117.8 1212.83 L2118.39 1212.83 L2118.97 1212.83 L2119.56 1212.83 L2120.15 1212.83 L2120.73 1212.83 L2121.32 1212.83 L2121.91 1212.83 L2122.49 1212.83 L2123.08 1212.83 L2123.67 1212.83 L2124.25 1212.83 L2124.84 1212.83 L2125.42 1212.83 L2126.01 1212.83 L2126.6 1212.83 L2127.18 1212.83 L2127.77 1212.83 L2128.36 1212.83 L2128.94 1212.83 L2129.53 1212.83 L2130.12 1212.83 L2130.7 1212.83 L2131.29 1212.83 L2131.88 1212.83 L2132.46 1212.83 L2133.05 1212.83 L2133.63 1212.83 L2134.22 1212.83 L2134.81 1212.83 L2135.39 1212.83 L2135.98 1212.83 L2136.57 1212.83 L2137.15 1212.83 L2137.74 1212.83 L2138.33 1212.83 L2138.91 1212.83 L2139.5 1212.83 L2140.09 1212.83 L2140.67 1212.83 L2141.26 1212.83 L2141.84 1212.83 L2142.43 1212.83 L2143.02 1212.83 L2143.6 1212.83 L2144.19 1212.83 L2144.78 1212.83 L2145.36 1212.83 L2145.95 1212.83 L2146.54 1212.83 L2147.12 1212.83 L2147.71 1212.83 L2148.3 1212.83 L2148.88 1212.83 L2149.47 1212.83 L2150.05 1212.83 L2150.64 1212.83 L2151.23 1212.83 L2151.81 1212.83 L2152.4 1212.83 L2152.99 1212.83 L2153.57 1212.83 L2154.16 1212.83 L2154.75 1212.83 L2155.33 1212.83 L2155.92 1212.83 L2156.5 1212.83 L2157.09 1212.83 L2157.68 1212.83 L2158.26 1212.83 L2158.26 1212.12 L2157.68 1212.12 L2157.09 1212.12 L2156.5 1212.12 L2155.92 1212.12 L2155.33 1212.12 L2154.75 1212.12 L2154.16 1212.12 L2153.57 1212.12 L2152.99 1212.12 L2152.4 1212.12 L2151.81 1212.12 L2151.23 1212.12 L2150.64 1212.12 L2150.05 1212.12 L2149.47 1212.12 L2148.88 1212.12 L2148.3 1212.12 L2147.71 1212.12 L2147.12 1212.12 L2146.54 1212.12 L2145.95 1212.12 L2145.36 1212.12 L2144.78 1212.12 L2144.19 1212.12 L2143.6 1212.12 L2143.02 1212.12 L2142.43 1212.12 L2141.84 1212.12 L2141.26 1212.12 L2140.67 1212.12 L2140.09 1212.12 L2139.5 1212.12 L2138.91 1212.12 L2138.33 1212.12 L2137.74 1212.12 L2137.15 1212.12 L2136.57 1212.12 L2135.98 1212.12 L2135.39 1212.12 L2134.81 1212.12 L2134.22 1212.12 L2133.63 1212.12 L2133.05 1212.12 L2132.46 1212.12 L2131.88 1212.12 L2131.29 1212.12 L2130.7 1212.12 L2130.12 1212.12 L2129.53 1212.12 L2128.94 1212.12 L2128.36 1212.12 L2127.77 1212.12 L2127.18 1212.12 L2126.6 1212.12 L2126.01 1212.12 L2125.42 1212.12 L2124.84 1212.12 L2124.25 1212.12 L2123.67 1212.12 L2123.08 1212.12 L2122.49 1212.12 L2121.91 1212.12 L2121.32 1212.12 L2120.73 1212.12 L2120.15 1212.12 L2119.56 1212.12 L2118.97 1212.12 L2118.39 1212.12 L2117.8 1212.12 L2117.22 1212.12 L2116.63 1212.12 L2116.04 1212.12 L2115.46 1212.12 L2114.87 1212.12 L2114.28 1212.12 L2113.7 1212.12 L2113.11 1212.12 L2112.52 1212.12 L2111.94 1212.12 L2111.35 1212.12 L2110.76 1212.12 L2110.18 1212.12 L2109.59 1212.12 L2109.01 1212.12 L2108.42 1212.12 L2107.83 1212.12 L2107.25 1212.12 L2106.66 1212.12 L2106.07 1212.12 L2105.49 1212.12 L2104.9 1212.12 L2104.31 1212.12 L2103.73 1212.12 L2103.14 1212.12 L2102.55 1212.12 L2101.97 1212.12 L2101.38 1212.12 L2100.8 1212.12 L2100.21 1212.12 L2099.62 1212.12 L2099.04 1212.12 L2098.45 1212.12 L2097.86 1212.12 L2097.28 1212.12 L2096.69 1212.12 L2096.1 1212.12 L2095.52 1212.12 L2094.93 1212.12 L2094.35 1212.12 L2093.76 1212.12 L2093.17 1212.12 L2092.59 1212.12 L2092 1212.12 L2091.41 1212.12 L2090.83 1212.12 L2090.24 1212.12 L2089.65 1212.12 L2089.07 1212.12 L2088.48 1212.12 L2087.89 1212.12 L2087.31 1212.12 L2086.72 1212.12 L2086.14 1212.12 L2085.55 1212.12 L2084.96 1212.12 L2084.38 1212.12 L2083.79 1212.12 L2083.2 1212.12 L2082.62 1212.12 L2082.03 1212.12 L2081.44 1212.12 L2080.86 1212.12 L2080.27 1212.12 L2079.68 1212.12 L2079.1 1212.12 L2078.51 1212.12 L2077.93 1212.12 L2077.34 1212.12 L2076.75 1212.12 L2076.17 1212.12 L2075.58 1212.12 L2074.99 1212.12 L2074.41 1212.12 L2073.82 1212.12 L2073.23 1212.12 L2072.65 1212.12 L2072.06 1212.12 L2071.48 1212.12 L2070.89 1212.12 L2070.3 1212.12 L2069.72 1212.12 L2069.13 1212.12 L2068.54 1212.12 L2067.96 1212.12 L2067.37 1212.12 L2066.78 1212.12 L2066.2 1212.12 L2065.61 1212.12 L2065.02 1212.12 L2064.44 1212.12 L2063.85 1212.12 L2063.27 1212.12 L2062.68 1212.12 L2062.09 1212.12 L2061.51 1212.12 L2060.92 1212.12 L2060.33 1212.12 L2059.75 1212.12 L2059.16 1212.12 L2058.57 1212.12 L2057.99 1212.12 L2057.4 1212.12 L2056.81 1212.12 L2056.23 1212.12 L2055.64 1212.12 L2055.06 1212.12 L2054.47 1212.12 L2053.88 1212.12 L2053.3 1212.12 L2052.71 1212.12 L2052.12 1212.12 L2051.54 1212.12 L2050.95 1212.12 L2050.36 1212.12 L2049.78 1212.12 L2049.19 1212.12 L2048.6 1212.12 L2048.02 1212.12 L2047.43 1212.12 L2046.85 1212.12 L2046.26 1212.12 L2045.67 1212.12 L2045.09 1212.12 L2044.5 1212.12 L2043.91 1212.12 L2043.33 1212.12 L2042.74 1212.12 L2042.15 1212.12 L2041.57 1212.12 L2040.98 1212.12 L2040.4 1212.12 L2039.81 1212.12 L2039.22 1212.12 L2038.64 1212.12 L2038.05 1212.12 L2037.46 1212.12 L2036.88 1212.12 L2036.29 1212.12 L2035.7 1212.12 L2035.12 1212.12 L2034.53 1212.12 L2033.94 1212.12 L2033.36 1212.12 L2032.77 1212.12 L2032.19 1212.12 L2031.6 1212.12 L2031.01 1212.12 L2030.43 1212.12 L2029.84 1212.12 L2029.25 1212.12 L2028.67 1212.12 L2028.08 1212.12 L2027.49 1212.12 L2026.91 1212.12 L2026.32 1212.12 L2025.73 1212.12 L2025.15 1212.12 L2024.56 1212.12 L2023.98 1212.12 L2023.39 1212.12 L2022.8 1212.12 L2022.22 1212.12 L2021.63 1212.12 L2021.04 1212.12 L2020.46 1212.12 L2019.87 1212.12 L2019.28 1212.12 L2018.7 1212.12 L2018.11 1212.12 L2017.53 1212.12 L2016.94 1212.12 L2016.35 1212.12 L2015.77 1212.12 L2015.18 1212.12 L2014.59 1212.12 L2014.01 1212.12 L2013.42 1212.12 L2012.83 1212.12 L2012.25 1212.12 L2011.66 1212.12 L2011.07 1212.12 L2010.49 1212.12 L2009.9 1212.12 L2009.32 1212.12 L2008.73 1212.12 L2008.14 1212.12 L2007.56 1212.12 L2006.97 1212.12 L2006.38 1212.12 L2005.8 1212.12 L2005.21 1212.12 L2004.62 1212.12 L2004.04 1212.12 L2003.45 1212.12 L2002.86 1212.12 L2002.28 1212.12 L2001.69 1212.12 L2001.11 1212.12 L2000.52 1212.12 L1999.93 1212.12 L1999.35 1212.12 L1998.76 1212.12 L1998.17 1212.12 L1997.59 1212.12 L1997 1212.12 L1996.41 1212.12 L1995.83 1212.12 L1995.24 1212.12 L1994.65 1212.12 L1994.07 1212.12 L1993.48 1212.12 L1992.9 1212.12 L1992.31 1212.12 L1991.72 1212.12 L1991.14 1212.12 L1990.55 1212.12 L1989.96 1212.12 L1989.38 1212.12 L1988.79 1212.12 L1988.2 1212.12 L1987.62 1212.12 L1987.03 1212.12 L1986.45 1212.12 L1985.86 1212.12 L1985.27 1212.12 L1984.69 1212.12 L1984.1 1212.12 L1983.51 1212.12 L1982.93 1212.12 L1982.34 1212.12 L1981.75 1212.12 L1981.17 1212.12 L1980.58 1212.12 L1979.99 1212.12 L1979.41 1212.12 L1978.82 1212.12 L1978.24 1212.12 L1977.65 1212.12 L1977.06 1212.12 L1976.48 1212.12 L1975.89 1212.12 L1975.3 1212.12 L1974.72 1212.12 L1974.13 1212.12 L1973.54 1212.12 L1972.96 1212.12 L1972.37 1212.12 L1971.78 1212.12 L1971.2 1212.12 L1970.61 1212.12 L1970.03 1212.12 L1969.44 1212.12 L1968.85 1212.12 L1968.27 1212.12 L1967.68 1212.12 L1967.09 1212.12 L1966.51 1212.12 L1965.92 1212.12 L1965.33 1212.12 L1964.75 1212.12 L1964.16 1212.12 L1963.58 1212.12 L1962.99 1212.12 L1962.4 1212.12 L1961.82 1212.12 L1961.23 1212.12 L1960.64 1212.12 L1960.06 1212.12 L1959.47 1212.12 L1958.88 1212.12 L1958.3 1212.12 L1957.71 1212.12 L1957.12 1212.12 L1956.54 1212.12 L1955.95 1212.12 L1955.37 1212.12 L1954.78 1212.12 L1954.19 1212.12 L1953.61 1212.12 L1953.02 1212.12 L1952.43 1212.12 L1951.85 1212.12 L1951.26 1212.12 L1950.67 1212.12 L1950.09 1212.12 L1949.5 1212.12 L1948.91 1212.12 L1948.33 1212.12 L1947.74 1212.12 L1947.16 1212.12 L1946.57 1212.12 L1945.98 1212.12 L1945.4 1212.12 L1944.81 1212.12 L1944.22 1212.12 L1943.64 1212.12 L1943.05 1212.12 L1942.46 1212.12 L1941.88 1212.12 L1941.29 1212.12 L1940.71 1212.12 L1940.12 1212.12 L1939.53 1212.12 L1938.95 1212.12 L1938.36 1212.12 L1937.77 1212.12 L1937.19 1212.12 L1936.6 1212.12 L1936.01 1212.12 L1935.43 1212.12 L1934.84 1212.12 L1934.25 1212.12 L1933.67 1212.12 L1933.08 1212.12 L1932.5 1212.12 L1931.91 1212.12 L1931.32 1212.12 L1930.74 1212.12 L1930.15 1212.12 L1929.56 1212.12 L1928.98 1212.12 L1928.39 1212.12 L1927.8 1212.12 L1927.22 1212.12 L1926.63 1212.12 L1926.04 1212.12 L1925.46 1212.12 L1924.87 1212.12 L1924.29 1212.12 L1923.7 1212.12 L1923.11 1212.12 L1922.53 1212.12 L1921.94 1212.12 L1921.35 1212.12 L1920.77 1212.12 L1920.18 1212.12 L1919.59 1212.12 L1919.01 1212.12 L1918.42 1212.12 L1917.83 1212.12 L1917.25 1212.12 L1916.66 1212.12 L1916.08 1212.12 L1915.49 1212.12 L1914.9 1212.12 L1914.32 1212.12 L1913.73 1212.12 L1913.14 1212.12 L1912.56 1212.12 L1911.97 1212.12 L1911.38 1212.12 L1910.8 1212.12 L1910.21 1212.12 L1909.63 1212.12 L1909.04 1212.12 L1908.45 1212.12 L1907.87 1212.12 L1907.28 1212.12 L1906.69 1212.12 L1906.11 1212.12 L1905.52 1212.12 L1904.93 1212.12 L1904.35 1212.12 L1903.76 1212.12 L1903.17 1212.12 L1902.59 1212.12 L1902 1212.12 L1901.42 1212.12 L1900.83 1212.12 L1900.24 1212.12 L1899.66 1212.12 L1899.07 1212.12 L1898.48 1212.12 L1897.9 1212.12 L1897.31 1212.12 L1896.72 1212.12 L1896.14 1212.12 L1895.55 1212.12 L1894.96 1212.12 L1894.38 1212.12 L1893.79 1212.12 L1893.21 1212.12 L1892.62 1212.12 L1892.03 1212.12 L1891.45 1212.12 L1890.86 1212.12 L1890.27 1212.12 L1889.69 1212.12 L1889.1 1212.12 L1888.51 1212.12 L1887.93 1212.12 L1887.34 1212.12 L1886.76 1212.12 L1886.17 1212.12 L1885.58 1212.12 L1885 1212.12 L1884.41 1212.12 L1883.82 1212.12 L1883.24 1212.12 L1882.65 1212.12 L1882.06 1212.12 L1881.48 1212.12 L1880.89 1212.12 L1880.3 1212.12 L1879.72 1212.12 L1879.13 1212.12 L1878.55 1212.12 L1877.96 1212.12 L1877.37 1212.12 L1876.79 1212.12 L1876.2 1212.12 L1875.61 1212.12 L1875.03 1212.12 L1874.44 1212.12 L1873.85 1212.12 L1873.27 1212.12 L1872.68 1212.12 L1872.09 1212.12 L1871.51 1212.12 L1870.92 1212.12 L1870.34 1212.12 L1869.75 1212.12 L1869.16 1212.12 L1868.58 1212.12 L1867.99 1212.12 L1867.4 1212.12 L1866.82 1212.12 L1866.23 1212.12 L1865.64 1212.12 L1865.06 1212.12 L1864.47 1212.12 L1863.88 1212.12 L1863.3 1212.12 L1862.71 1212.12 L1862.13 1212.12 L1861.54 1212.12 L1860.95 1212.12 L1860.37 1212.12 L1859.78 1212.12 L1859.19 1212.12 L1858.61 1212.12 L1858.02 1212.12 L1857.43 1212.12 L1856.85 1212.12 L1856.26 1212.12 L1855.68 1212.12 L1855.09 1212.12 L1854.5 1212.12 L1853.92 1212.12 L1853.33 1212.12 L1852.74 1212.12 L1852.16 1212.12 L1851.57 1212.12 L1850.98 1212.12 L1850.4 1212.12 L1849.81 1212.12 L1849.22 1212.12 L1848.64 1212.12 L1848.05 1212.12 L1847.47 1212.12 L1846.88 1212.12 L1846.29 1212.12 L1845.71 1212.12 L1845.12 1212.12 L1844.53 1212.12 L1843.95 1212.12 L1843.36 1212.12 L1842.77 1212.12 L1842.19 1212.12 L1841.6 1212.12 L1841.01 1212.12 L1840.43 1212.12 L1839.84 1212.12 L1839.26 1212.12 L1838.67 1212.12 L1838.08 1212.12 L1837.5 1212.12 L1836.91 1212.12 L1836.32 1212.12 L1835.74 1212.12 L1835.15 1212.12 L1834.56 1212.12 L1833.98 1212.12 L1833.39 1212.12 L1832.81 1212.12 L1832.22 1212.12 L1831.63 1212.12 L1831.05 1212.12 L1830.46 1212.12 L1829.87 1212.12 L1829.29 1212.12 L1828.7 1212.12 L1828.11 1212.12 L1827.53 1212.12 L1826.94 1212.12 L1826.35 1212.12 L1825.77 1212.12 L1825.18 1212.12 L1824.6 1212.12 L1824.01 1212.12 L1823.42 1212.12 L1822.84 1212.12 L1822.25 1212.12 L1821.66 1212.12 L1821.08 1212.12 L1820.49 1212.12 L1819.9 1212.12 L1819.32 1212.12 L1818.73 1212.12 L1818.14 1212.12 L1817.56 1212.12 L1816.97 1212.12 L1816.39 1212.12 L1815.8 1212.12 L1815.21 1212.12 L1814.63 1212.12 L1814.04 1212.12 L1813.45 1212.12 L1812.87 1212.12 L1812.28 1212.12 L1811.69 1212.12 L1811.11 1212.12 L1810.52 1212.12 L1809.94 1212.12 L1809.35 1212.12 L1808.76 1212.12 L1808.18 1212.12 L1807.59 1212.12 L1807 1212.12 L1806.42 1212.12 L1805.83 1212.12 L1805.24 1212.12 L1804.66 1212.12 L1804.07 1212.12 L1803.48 1212.12 L1802.9 1212.12 L1802.31 1212.12 L1801.73 1212.12 L1801.14 1212.12 L1800.55 1212.12 L1799.97 1212.12 L1799.38 1212.12 L1798.79 1212.12 L1798.21 1212.12 L1797.62 1212.12 L1797.03 1212.12 L1796.45 1212.12 L1795.86 1212.12 L1795.27 1212.12 L1794.69 1212.12 L1794.1 1212.12 L1793.52 1212.12 L1792.93 1212.12 L1792.34 1212.12 L1791.76 1212.12 L1791.17 1212.12 L1790.58 1212.12 L1790 1212.12 L1789.41 1212.12 L1788.82 1212.12 L1788.24 1212.12 L1787.65 1212.12 L1787.06 1212.12 L1786.48 1212.12 L1785.89 1212.12 L1785.31 1212.12 L1784.72 1212.12 L1784.13 1212.12 L1783.55 1212.12 L1782.96 1212.12 L1782.37 1212.12 L1781.79 1212.12 L1781.2 1212.12 L1780.61 1212.12 L1780.03 1212.12 L1779.44 1212.12 L1778.86 1212.12 L1778.27 1212.12 L1777.68 1212.12 L1777.1 1212.12 L1776.51 1212.12 L1775.92 1212.12 L1775.34 1212.12 L1774.75 1212.12 L1774.16 1212.12 L1773.58 1212.12 L1772.99 1212.12 L1772.4 1212.12 L1771.82 1212.12 L1771.23 1212.12 L1770.65 1212.12 L1770.06 1212.12 L1769.47 1212.12 L1768.89 1212.12 L1768.3 1212.12 L1767.71 1212.12 L1767.13 1212.12 L1766.54 1212.12 L1765.95 1212.12 L1765.37 1212.12 L1764.78 1212.12 L1764.19 1212.12 L1763.61 1212.12 L1763.02 1212.12 L1762.44 1212.12 L1761.85 1212.12 L1761.26 1212.12 L1760.68 1212.12 L1760.09 1212.12 L1759.5 1212.12 L1758.92 1212.12 L1758.33 1212.12 L1757.74 1212.12 L1757.16 1212.12 L1756.57 1212.12 L1755.99 1212.12 L1755.4 1212.12 L1754.81 1212.12 L1754.23 1212.12 L1753.64 1212.12 L1753.05 1212.12 L1752.47 1212.12 L1751.88 1212.12 L1751.29 1212.12 L1750.71 1212.12 L1750.12 1212.12 L1749.53 1212.12 L1748.95 1212.12 L1748.36 1212.12 L1747.78 1212.12 L1747.19 1212.12 L1746.6 1212.12 L1746.02 1212.12 L1745.43 1212.12 L1744.84 1212.12 L1744.26 1212.12 L1743.67 1212.12 L1743.08 1212.12 L1742.5 1212.12 L1741.91 1212.12 L1741.32 1212.12 L1740.74 1212.12 L1740.15 1212.12 L1739.57 1212.12 L1738.98 1212.12 L1738.39 1212.12 L1737.81 1212.12 L1737.22 1212.12 L1736.63 1212.12 L1736.05 1212.12 L1735.46 1212.12 L1734.87 1212.12 L1734.29 1212.12 L1733.7 1212.12 L1733.11 1212.12 L1732.53 1212.12 L1731.94 1212.12 L1731.36 1212.12 L1730.77 1212.12 L1730.18 1212.12 L1729.6 1212.12 L1729.01 1212.12 L1728.42 1212.12 L1727.84 1212.12 L1727.25 1212.12 L1726.66 1212.12 L1726.08 1212.12 L1725.49 1212.12 L1724.91 1212.12 L1724.32 1212.12 L1723.73 1212.12 L1723.15 1212.12 L1722.56 1212.12 L1721.97 1212.12 L1721.39 1212.12 L1720.8 1212.12 L1720.21 1212.12 L1719.63 1212.12 L1719.04 1212.12 L1718.45 1212.12 L1717.87 1212.12 L1717.28 1212.12 L1716.7 1212.12 L1716.11 1212.12 L1715.52 1212.12 L1714.94 1212.12 L1714.35 1212.12 L1713.76 1212.12 L1713.18 1212.12 L1712.59 1212.12 L1712 1212.12 L1711.42 1212.12 L1710.83 1212.12 L1710.24 1212.12 L1709.66 1212.12 L1709.07 1212.12 L1708.49 1212.12 L1707.9 1212.12 L1707.31 1212.12 L1706.73 1212.12 L1706.14 1212.12 L1705.55 1212.12 L1704.97 1212.12 L1704.38 1212.12 L1703.79 1212.12 L1703.21 1212.12 L1702.62 1212.12 L1702.04 1212.12 L1701.45 1212.12 L1700.86 1212.12 L1700.28 1212.12 L1699.69 1212.12 L1699.1 1212.12 L1698.52 1212.12 L1697.93 1212.12 L1697.34 1212.12 L1696.76 1212.12 L1696.17 1212.12 L1695.58 1212.12 L1695 1212.12 L1694.41 1212.12 L1693.83 1212.12 L1693.24 1212.12 L1692.65 1212.12 L1692.07 1212.12 L1691.48 1212.12 L1690.89 1212.12 L1690.31 1212.12 L1689.72 1212.12 L1689.13 1212.12 L1688.55 1212.12 L1687.96 1212.12 L1687.37 1212.12 L1686.79 1212.12 L1686.2 1212.12 L1685.62 1212.12 L1685.03 1212.12 L1684.44 1212.12 L1683.86 1212.12 L1683.27 1212.12 L1682.68 1212.12 L1682.1 1212.12 L1681.51 1212.12 L1680.92 1212.12 L1680.34 1212.12 L1679.75 1212.12 L1679.17 1212.12 L1678.58 1212.12 L1677.99 1212.12 L1677.41 1212.12 L1676.82 1212.12 L1676.23 1212.12 L1675.65 1212.12 L1675.06 1212.12 L1674.47 1212.12 L1673.89 1212.12 L1673.3 1212.12 L1672.71 1212.12 L1672.13 1212.12 L1671.54 1212.12 L1670.96 1212.12 L1670.37 1212.12 L1669.78 1212.12 L1669.2 1212.12 L1668.61 1212.12 L1668.02 1212.12 L1667.44 1212.12 L1666.85 1212.12 L1666.26 1212.12 L1665.68 1212.12 L1665.09 1212.12 L1664.5 1212.12 L1663.92 1212.12 L1663.33 1212.12 L1662.75 1212.12 L1662.16 1212.12 L1661.57 1212.12 L1660.99 1212.12 L1660.4 1212.12 L1659.81 1212.12 L1659.23 1212.12 L1658.64 1212.12 L1658.05 1212.12 L1657.47 1212.12 L1656.88 1212.12 L1656.29 1212.12 L1655.71 1212.12 L1655.12 1212.12 L1654.54 1212.12 L1653.95 1212.12 L1653.36 1212.12 L1652.78 1212.12 L1652.19 1212.12 L1651.6 1212.12 L1651.02 1212.12 L1650.43 1212.12 L1649.84 1212.12 L1649.26 1212.12 L1648.67 1212.12 L1648.09 1212.12 L1647.5 1212.12 L1646.91 1212.12 L1646.33 1212.12 L1645.74 1212.12 L1645.15 1212.12 L1644.57 1212.12 L1643.98 1212.12 L1643.39 1212.12 L1642.81 1212.12 L1642.22 1212.12 L1641.63 1212.12 L1641.05 1212.12 L1640.46 1212.12 L1639.88 1212.12 L1639.29 1212.12 L1638.7 1212.12 L1638.12 1212.12 L1637.53 1212.12 L1636.94 1212.12 L1636.36 1212.12 L1635.77 1212.12 L1635.18 1212.12 L1634.6 1212.12 L1634.01 1212.12 L1633.42 1212.12 L1632.84 1212.12 L1632.25 1212.12 L1631.67 1212.12 L1631.08 1212.12 L1630.49 1212.12 L1629.91 1212.12 L1629.32 1212.12 L1628.73 1212.12 L1628.15 1212.12 L1627.56 1212.12 L1626.97 1212.12 L1626.39 1212.12 L1625.8 1212.12 L1625.22 1212.12 L1624.63 1212.12 L1624.04 1212.12 L1623.46 1212.12 L1622.87 1212.12 L1622.28 1212.12 L1621.7 1212.12 L1621.11 1212.12 L1620.52 1212.12 L1619.94 1212.12 L1619.35 1212.12 L1618.76 1212.12 L1618.18 1212.12 L1617.59 1212.12 L1617.01 1212.12 L1616.42 1212.12 L1615.83 1212.12 L1615.25 1212.12 L1614.66 1212.12 L1614.07 1212.12 L1613.49 1212.12 L1612.9 1212.12 L1612.31 1212.12 L1611.73 1212.12 L1611.14 1212.12 L1610.55 1212.12 L1609.97 1212.12 L1609.38 1212.12 L1608.8 1212.12 L1608.21 1212.12 L1607.62 1212.12 L1607.04 1212.12 L1606.45 1212.12 L1605.86 1212.12 L1605.28 1212.12 L1604.69 1212.12 L1604.1 1212.12 L1603.52 1212.12 L1602.93 1212.12 L1602.34 1212.12 L1601.76 1212.12 L1601.17 1212.12 L1600.59 1212.12 L1600 1212.12 L1599.41 1212.12 L1598.83 1212.12 L1598.24 1212.12 L1597.65 1212.12 L1597.07 1212.12 L1596.48 1212.12 L1595.89 1212.12 L1595.31 1212.12 L1594.72 1212.12 L1594.14 1212.12 L1593.55 1212.12 L1592.96 1212.12 L1592.38 1212.12 L1591.79 1212.12 L1591.2 1212.12 L1590.62 1212.12 L1590.03 1212.12 L1589.44 1212.12 L1588.86 1212.12 L1588.27 1212.12 L1587.68 1212.12 L1587.1 1212.12 L1586.51 1212.12 L1585.93 1212.12 L1585.34 1212.12 L1584.75 1212.12 L1584.17 1212.12 L1583.58 1212.12 L1582.99 1212.12 L1582.41 1212.12 L1581.82 1212.12 L1581.23 1212.12 L1580.65 1212.12 L1580.06 1212.12 L1579.47 1212.12 L1578.89 1212.12 L1578.3 1212.12 L1577.72 1212.12 L1577.13 1212.12 L1576.54 1212.12 L1575.96 1212.12 L1575.37 1212.12 L1574.78 1212.12 L1574.2 1212.12 L1573.61 1212.12 L1573.02 1212.12 L1572.44 1212.12 L1571.85 1212.12 L1571.27 1212.12 L1570.68 1212.12 L1570.09 1212.12 L1569.51 1212.12 L1568.92 1212.12 L1568.33 1212.12 L1567.75 1212.12 L1567.16 1212.12 L1566.57 1212.12 L1565.99 1212.12 L1565.4 1212.12 L1564.81 1212.12 L1564.23 1212.12 L1563.64 1212.12 L1563.06 1212.12 L1562.47 1212.12 L1561.88 1212.12 L1561.3 1212.12 L1560.71 1212.12 L1560.12 1212.12 L1559.54 1212.12 L1558.95 1212.12 L1558.36 1212.12 L1557.78 1212.12 L1557.19 1212.12 L1556.6 1212.12 L1556.02 1212.12 L1555.43 1212.12 L1554.85 1212.12 L1554.26 1212.12 L1553.67 1212.12 L1553.09 1212.12 L1552.5 1212.12 L1551.91 1212.12 L1551.33 1212.12 L1550.74 1212.12 L1550.15 1212.12 L1549.57 1212.12 L1548.98 1212.12 L1548.4 1212.12 L1547.81 1212.12 L1547.22 1212.12 L1546.64 1212.12 L1546.05 1212.12 L1545.46 1212.12 L1544.88 1212.12 L1544.29 1212.12 L1543.7 1212.12 L1543.12 1212.12 L1542.53 1212.12 L1541.94 1212.12 L1541.36 1212.12 L1540.77 1212.12 L1540.19 1212.12 L1539.6 1212.12 L1539.01 1212.12 L1538.43 1212.12 L1537.84 1212.12 L1537.25 1212.12 L1536.67 1212.12 L1536.08 1212.12 L1535.49 1212.12 L1534.91 1212.12 L1534.32 1212.12 L1533.73 1212.12 L1533.15 1212.12 L1532.56 1212.12 L1531.98 1212.12 L1531.39 1212.12 L1530.8 1212.12 L1530.22 1212.12 L1529.63 1212.12 L1529.04 1212.12 L1528.46 1212.12 L1527.87 1212.12 L1527.28 1212.12 L1526.7 1212.12 L1526.11 1212.12 L1525.52 1212.12 L1524.94 1212.12 L1524.35 1212.12 L1523.77 1212.12 L1523.18 1212.12 L1522.59 1212.12 L1522.01 1212.12 L1521.42 1212.12 L1520.83 1212.12 L1520.25 1212.12 L1519.66 1212.12 L1519.07 1212.12 L1518.49 1212.12 L1517.9 1212.12 L1517.32 1212.12 L1516.73 1212.12 L1516.14 1212.12 L1515.56 1212.12 L1514.97 1212.12 L1514.38 1212.12 L1513.8 1212.12 L1513.21 1212.12 L1512.62 1212.12 L1512.04 1212.12 L1511.45 1212.12 L1510.86 1212.12 L1510.28 1212.12 L1509.69 1212.12 L1509.11 1212.12 L1508.52 1212.12 L1507.93 1212.12 L1507.35 1212.12 L1506.76 1212.12 L1506.17 1212.12 L1505.59 1212.12 L1505 1212.12 L1504.41 1212.12 L1503.83 1212.12 L1503.24 1212.12 L1502.65 1212.12 L1502.07 1212.12 L1501.48 1212.12 L1500.9 1212.12 L1500.31 1212.12 L1499.72 1212.12 L1499.14 1212.12 L1498.55 1212.12 L1497.96 1212.12 L1497.38 1212.12 L1496.79 1212.12 L1496.2 1212.12 L1495.62 1212.12 L1495.03 1212.12 L1494.45 1212.12 L1493.86 1212.12 L1493.27 1212.12 L1492.69 1212.12 L1492.1 1212.12 L1491.51 1212.12 L1490.93 1212.12 L1490.34 1212.12 L1489.75 1212.12 L1489.17 1212.12 L1488.58 1212.12 L1487.99 1212.12 L1487.41 1212.12 L1486.82 1212.12 L1486.24 1212.12 L1485.65 1212.12 L1485.06 1212.12 L1484.48 1212.12 L1483.89 1212.12 L1483.3 1212.12 L1482.72 1212.12 L1482.13 1212.12 L1481.54 1212.12 L1480.96 1212.12 L1480.37 1212.12 L1479.78 1212.12 L1479.2 1212.12 L1478.61 1212.12 L1478.03 1212.12 L1477.44 1212.12 L1476.85 1212.12 L1476.27 1212.12 L1475.68 1212.12 L1475.09 1212.12 L1474.51 1212.12 L1473.92 1212.12 L1473.33 1212.12 L1472.75 1212.12 L1472.16 1212.12 L1471.57 1212.12 L1470.99 1212.12 L1470.4 1212.12 L1469.82 1212.12 L1469.23 1212.12 L1468.64 1212.12 L1468.06 1212.12 L1467.47 1212.12 L1466.88 1212.12 L1466.3 1212.12 L1465.71 1212.12 L1465.12 1212.12 L1464.54 1212.12 L1463.95 1212.12 L1463.37 1212.12 L1462.78 1212.12 L1462.19 1212.12 L1461.61 1212.12 L1461.02 1212.12 L1460.43 1212.12 L1459.85 1212.12 L1459.26 1212.12 L1458.67 1212.12 L1458.09 1212.12 L1457.5 1212.12 L1456.91 1212.12 L1456.33 1212.12 L1455.74 1212.12 L1455.16 1212.12 L1454.57 1212.12 L1453.98 1212.12 L1453.4 1212.12 L1452.81 1212.12 L1452.22 1212.12 L1451.64 1212.12 L1451.05 1212.12 L1450.46 1212.12 L1449.88 1212.12 L1449.29 1212.12 L1448.7 1212.12 L1448.12 1212.12 L1447.53 1212.12 L1446.95 1212.12 L1446.36 1212.12 L1445.77 1212.12 L1445.19 1212.12 L1444.6 1212.12 L1444.01 1212.12 L1443.43 1212.12 L1442.84 1212.12 L1442.25 1212.12 L1441.67 1212.12 L1441.08 1212.12 L1440.5 1212.12 L1439.91 1212.12 L1439.32 1212.12 L1438.74 1212.12 L1438.15 1212.12 L1437.56 1212.12 L1436.98 1212.12 L1436.39 1212.12 L1435.8 1212.12 L1435.22 1212.12 L1434.63 1212.12 L1434.04 1212.12 L1433.46 1212.12 L1432.87 1212.12 L1432.29 1212.12 L1431.7 1212.12 L1431.11 1212.12 L1430.53 1212.12 L1429.94 1212.12 L1429.35 1212.12 L1428.77 1212.12 L1428.18 1212.12 L1427.59 1212.12 L1427.01 1212.12 L1426.42 1212.12 L1425.83 1212.12 L1425.25 1212.12 L1424.66 1212.12 L1424.08 1212.12 L1423.49 1212.12 L1422.9 1212.12 L1422.32 1212.12 L1421.73 1212.12 L1421.14 1212.12 L1420.56 1212.12 L1419.97 1212.12 L1419.38 1212.12 L1418.8 1212.12 L1418.21 1212.12 L1417.63 1212.12 L1417.04 1212.12 L1416.45 1212.12 L1415.87 1212.12 L1415.28 1212.12 L1414.69 1212.12 L1414.11 1212.12 L1413.52 1212.12 L1412.93 1212.12 L1412.35 1212.12 L1411.76 1212.12 L1411.17 1212.12 L1410.59 1212.12 L1410 1212.12 L1409.42 1212.12 L1408.83 1212.12 L1408.24 1212.12 L1407.66 1212.12 L1407.07 1212.12 L1406.48 1212.12 L1405.9 1212.12 L1405.31 1212.12 L1404.72 1212.12 L1404.14 1212.12 L1403.55 1212.12 L1402.96 1212.12 L1402.38 1212.12 L1401.79 1212.12 L1401.21 1212.12 L1400.62 1212.12 L1400.03 1212.12 L1399.45 1212.12 L1398.86 1212.12 L1398.27 1212.12 L1397.69 1212.12 L1397.1 1212.12 L1396.51 1212.12 L1395.93 1212.12 L1395.34 1212.12 L1394.75 1212.12 L1394.17 1212.12 L1393.58 1212.12 L1393 1212.12 L1392.41 1212.12 L1391.82 1212.12 L1391.24 1212.12 L1390.65 1212.12 L1390.06 1212.12 L1389.48 1212.12 L1388.89 1212.12 L1388.3 1212.12 L1387.72 1212.12 L1387.13 1212.12 L1386.55 1212.12 L1385.96 1212.12 L1385.37 1212.12 L1384.79 1212.12 L1384.2 1212.12 L1383.61 1212.12 L1383.03 1212.12 L1382.44 1212.12 L1381.85 1212.12 L1381.27 1212.12 L1380.68 1212.12 L1380.09 1212.12 L1379.51 1212.12 L1378.92 1212.12 L1378.34 1212.12 L1377.75 1212.12 L1377.16 1212.12 L1376.58 1212.12 L1375.99 1212.12 L1375.4 1212.12 L1374.82 1212.12 L1374.23 1212.12 L1373.64 1212.12 L1373.06 1212.12 L1372.47 1212.12 L1371.88 1212.12 L1371.3 1212.12 L1370.71 1212.12 L1370.13 1212.12 L1369.54 1212.12 L1368.95 1212.12 L1368.37 1212.12 L1367.78 1212.12 L1367.19 1212.12 L1366.61 1212.12 L1366.02 1212.12 L1365.43 1212.12 L1364.85 1212.12 L1364.26 1212.12 L1363.68 1212.12 L1363.09 1212.12 L1362.5 1212.12 L1361.92 1212.12 L1361.33 1212.12 L1360.74 1212.12 L1360.16 1212.12 L1359.57 1212.12 L1358.98 1212.12 L1358.4 1212.12 L1357.81 1212.12 L1357.22 1212.12 L1356.64 1212.12 L1356.05 1212.12 L1355.47 1212.12 L1354.88 1212.12 L1354.29 1212.12 L1353.71 1212.12 L1353.12 1212.12 L1352.53 1212.12 L1351.95 1212.12 L1351.36 1212.12 L1350.77 1212.12 L1350.19 1212.12 L1349.6 1212.12 L1349.01 1212.12 L1348.43 1212.12 L1347.84 1212.12 L1347.26 1212.12 L1346.67 1212.12 L1346.08 1212.12 L1345.5 1212.12 L1344.91 1212.12 L1344.32 1212.12 L1343.74 1212.12 L1343.15 1212.12 L1342.56 1212.12 L1341.98 1212.12 L1341.39 1212.12 L1340.8 1212.12 L1340.22 1212.12 L1339.63 1212.12 L1339.05 1212.12 L1338.46 1212.12 L1337.87 1212.12 L1337.29 1212.12 L1336.7 1212.12 L1336.11 1212.12 L1335.53 1212.12 L1334.94 1212.12 L1334.35 1212.12 L1333.77 1212.12 L1333.18 1212.12 L1332.6 1212.12 L1332.01 1212.12 L1331.42 1212.12 L1330.84 1212.12 L1330.25 1212.12 L1329.66 1212.12 L1329.08 1212.12 L1328.49 1212.12 L1327.9 1212.12 L1327.32 1212.12 L1326.73 1212.12 L1326.14 1212.12 L1325.56 1212.12 L1324.97 1212.12 L1324.39 1212.12 L1323.8 1212.12 L1323.21 1212.12 L1322.63 1212.12 L1322.04 1212.12 L1321.45 1212.12 L1320.87 1212.12 L1320.28 1212.12 L1319.69 1212.12 L1319.11 1212.12 L1318.52 1212.12 L1317.93 1212.12 L1317.35 1212.12 L1316.76 1212.12 L1316.18 1212.12 L1315.59 1212.12 L1315 1212.12 L1314.42 1212.12 L1313.83 1212.12 L1313.24 1212.12 L1312.66 1212.12 L1312.07 1212.12 L1311.48 1212.12 L1310.9 1212.12 L1310.31 1212.12 L1309.73 1212.12 L1309.14 1212.12 L1308.55 1212.12 L1307.97 1212.12 L1307.38 1212.12 L1306.79 1212.12 L1306.21 1212.12 L1305.62 1212.12 L1305.03 1212.12 L1304.45 1212.12 L1303.86 1212.12 L1303.27 1212.12 L1302.69 1212.12 L1302.1 1212.12 L1301.52 1212.12 L1300.93 1212.12 L1300.34 1212.12 L1299.76 1212.12 L1299.17 1212.12 L1298.58 1212.12 L1298 1212.12 L1297.41 1212.12 L1296.82 1212.12 L1296.24 1212.12 L1295.65 1212.12 L1295.06 1212.12 L1294.48 1212.12 L1293.89 1212.12 L1293.31 1212.12 L1292.72 1212.12 L1292.13 1212.12 L1291.55 1212.12 L1290.96 1212.12 L1290.37 1212.12 L1289.79 1212.12 L1289.2 1212.12 L1288.61 1212.12 L1288.03 1212.12 L1287.44 1212.12 L1286.86 1212.12 L1286.27 1212.12 L1285.68 1212.12 L1285.1 1212.12 L1284.51 1212.12 L1283.92 1212.12 L1283.34 1212.12 L1282.75 1212.12 L1282.16 1212.12 L1281.58 1212.12 L1280.99 1212.12 L1280.4 1212.12 L1279.82 1212.12 L1279.23 1212.12 L1278.65 1212.12 L1278.06 1212.12 L1277.47 1212.12 L1276.89 1212.12 L1276.3 1212.12 L1275.71 1212.12 L1275.13 1212.12 L1274.54 1212.12 L1273.95 1212.12 L1273.37 1212.12 L1272.78 1212.12 L1272.19 1212.12 L1271.61 1212.12 L1271.02 1212.12 L1270.44 1212.12 L1269.85 1212.12 L1269.26 1212.12 L1268.68 1212.12 L1268.09 1212.12 L1267.5 1212.12 L1266.92 1212.12 L1266.33 1212.12 L1265.74 1212.12 L1265.16 1212.12 L1264.57 1212.12 L1263.98 1212.12 L1263.4 1212.12 L1262.81 1212.12 L1262.23 1212.12 L1261.64 1212.12 L1261.05 1212.12 L1260.47 1212.12 L1259.88 1212.12 L1259.29 1212.12 L1258.71 1212.12 L1258.12 1212.12 L1257.53 1212.12 L1256.95 1212.12 L1256.36 1212.12 L1255.78 1212.12 L1255.19 1212.12 L1254.6 1212.12 L1254.02 1212.12 L1253.43 1212.12 L1252.84 1212.12 L1252.26 1212.12 L1251.67 1212.12 L1251.08 1212.12 L1250.5 1212.12 L1249.91 1212.12 L1249.32 1212.12 L1248.74 1212.12 L1248.15 1212.12 L1247.57 1212.12 L1246.98 1212.12 L1246.39 1212.12 L1245.81 1212.12 L1245.22 1212.12 L1244.63 1212.12 L1244.05 1212.12 L1243.46 1212.12 L1242.87 1212.12 L1242.29 1212.12 L1241.7 1212.12 L1241.11 1212.12 L1240.53 1212.12 L1239.94 1212.12 L1239.36 1212.12 L1238.77 1212.12 L1238.18 1212.12 L1237.6 1212.12 L1237.01 1212.12 L1236.42 1212.12 L1235.84 1212.12 L1235.25 1212.12 L1234.66 1212.12 L1234.08 1212.12 L1233.49 1212.12 L1232.91 1212.12 L1232.32 1212.12 L1231.73 1212.12 L1231.15 1212.12 L1230.56 1212.12 L1229.97 1212.12 L1229.39 1212.12 L1228.8 1212.12 L1228.21 1212.12 L1227.63 1212.12 L1227.04 1212.12 L1226.45 1212.12 L1225.87 1212.12 L1225.28 1212.12 L1224.7 1212.12 L1224.11 1212.12 L1223.52 1212.12 L1222.94 1212.12 L1222.35 1212.12 L1221.76 1212.12 L1221.18 1212.12 L1220.59 1212.12 L1220 1212.12 L1219.42 1212.12 L1218.83 1212.12 L1218.24 1212.12 L1217.66 1212.12 L1217.07 1212.12 L1216.49 1212.12 L1215.9 1212.12 L1215.31 1212.12 L1214.73 1212.12 L1214.14 1212.12 L1213.55 1212.12 L1212.97 1212.12 L1212.38 1212.12 L1211.79 1212.12 L1211.21 1212.12 L1210.62 1212.12 L1210.03 1212.12 L1209.45 1212.12 L1208.86 1212.12 L1208.28 1212.12 L1207.69 1212.12 L1207.1 1212.12 L1206.52 1212.12 L1205.93 1212.12 L1205.34 1212.12 L1204.76 1212.12 L1204.17 1212.12 L1203.58 1212.12 L1203 1212.12 L1202.41 1212.12 L1201.83 1212.12 L1201.24 1212.12 L1200.65 1212.12 L1200.07 1212.12 L1199.48 1212.12 L1198.89 1212.12 L1198.31 1212.12 L1197.72 1212.12 L1197.13 1212.12 L1196.55 1212.12 L1195.96 1212.12 L1195.37 1212.12 L1194.79 1212.12 L1194.2 1212.12 L1193.62 1212.12 L1193.03 1212.12 L1192.44 1212.12 L1191.86 1212.12 L1191.27 1212.12 L1190.68 1212.12 L1190.1 1212.12 L1189.51 1212.12 L1188.92 1212.12 L1188.34 1212.12 L1187.75 1212.12 L1187.16 1212.12 L1186.58 1212.12 L1185.99 1212.12 L1185.41 1212.12 L1184.82 1212.12 L1184.23 1212.12 L1183.65 1212.12 L1183.06 1212.12 L1182.47 1212.12 L1181.89 1212.12 L1181.3 1212.12 L1180.71 1212.12 L1180.13 1212.12 L1179.54 1212.12 L1178.96 1212.12 L1178.37 1212.12 L1177.78 1212.12 L1177.2 1212.12 L1176.61 1212.12 L1176.02 1212.12 L1175.44 1212.12 L1174.85 1212.12 L1174.26 1212.12 L1173.68 1212.12 L1173.09 1212.12 L1172.5 1212.12 L1171.92 1212.12 L1171.33 1212.12 L1170.75 1212.12 L1170.16 1212.12 L1169.57 1212.12 L1168.99 1212.12 L1168.4 1212.12 L1167.81 1212.12 L1167.23 1212.12 L1166.64 1212.12 L1166.05 1212.12 L1165.47 1212.12 L1164.88 1212.12 L1164.29 1212.12 L1163.71 1212.12 L1163.12 1212.12 L1162.54 1212.12 L1161.95 1212.12 L1161.36 1212.12 L1160.78 1212.12 L1160.19 1212.12 L1159.6 1212.12 L1159.02 1212.12 L1158.43 1212.12 L1157.84 1212.12 L1157.26 1212.12 L1156.67 1212.12 L1156.09 1212.12 L1155.5 1212.12 L1154.91 1212.12 L1154.33 1212.12 L1153.74 1212.12 L1153.15 1212.12 L1152.57 1212.12 L1151.98 1212.12 L1151.39 1212.12 L1150.81 1212.12 L1150.22 1212.12 L1149.63 1212.12 L1149.05 1212.12 L1148.46 1212.12 L1147.88 1212.12 L1147.29 1212.12 L1146.7 1212.12 L1146.12 1212.12 L1145.53 1212.12 L1144.94 1212.12 L1144.36 1212.12 L1143.77 1212.12 L1143.18 1212.12 L1142.6 1212.12 L1142.01 1212.12 L1141.42 1212.12 L1140.84 1212.12 L1140.25 1212.12 L1139.67 1212.12 L1139.08 1212.12 L1138.49 1212.12 L1137.91 1212.12 L1137.32 1212.12 L1136.73 1212.12 L1136.15 1212.12 L1135.56 1212.12 L1134.97 1212.12 L1134.39 1212.12 L1133.8 1212.12 L1133.21 1212.12 L1132.63 1212.12 L1132.04 1212.12 L1131.46 1212.12 L1130.87 1212.12 L1130.28 1212.12 L1129.7 1212.12 L1129.11 1212.12 L1128.52 1212.12 L1127.94 1212.12 L1127.35 1212.12 L1126.76 1212.12 L1126.18 1212.12 L1125.59 1212.12 L1125.01 1212.12 L1124.42 1212.12 L1123.83 1212.12 L1123.25 1212.12 L1122.66 1212.12 L1122.07 1212.12 L1121.49 1212.12 L1120.9 1212.12 L1120.31 1212.12 L1119.73 1212.12 L1119.14 1212.12 L1118.55 1212.12 L1117.97 1212.12 L1117.38 1212.12 L1116.8 1212.12 L1116.21 1212.12 L1115.62 1212.12 L1115.04 1212.12 L1114.45 1212.12 L1113.86 1212.12 L1113.28 1212.12 L1112.69 1212.12 L1112.1 1212.12 L1111.52 1212.12 L1110.93 1212.12 L1110.34 1212.12 L1109.76 1212.12 L1109.17 1212.12 L1108.59 1212.12 L1108 1212.12 L1107.41 1212.12 L1106.83 1212.12 L1106.24 1212.12 L1105.65 1212.12 L1105.07 1212.12 L1104.48 1212.12 L1103.89 1212.12 L1103.31 1212.12 L1102.72 1212.12 L1102.14 1212.12 L1101.55 1212.12 L1100.96 1212.12 L1100.38 1212.12 L1099.79 1212.12 L1099.2 1212.12 L1098.62 1212.12 L1098.03 1212.12 L1097.44 1212.12 L1096.86 1212.12 L1096.27 1212.12 L1095.68 1212.12 L1095.1 1212.12 L1094.51 1212.12 L1093.93 1212.12 L1093.34 1212.12 L1092.75 1212.12 L1092.17 1212.12 L1091.58 1212.12 L1090.99 1212.12 L1090.41 1212.12 L1089.82 1212.12 L1089.23 1212.12 L1088.65 1212.12 L1088.06 1212.12 L1087.47 1212.12 L1086.89 1212.12 L1086.3 1212.12 L1085.72 1212.12 L1085.13 1212.12 L1084.54 1212.12 L1083.96 1212.12 L1083.37 1212.12 L1082.78 1212.12 L1082.2 1212.12 L1081.61 1212.12 L1081.02 1212.12 L1080.44 1212.12 L1079.85 1212.12 L1079.26 1212.12 L1078.68 1212.12 L1078.09 1212.12 L1077.51 1212.12 L1076.92 1212.12 L1076.33 1212.12 L1075.75 1212.12 L1075.16 1212.12 L1074.57 1212.12 L1073.99 1212.12 L1073.4 1212.12 L1072.81 1212.12 L1072.23 1212.12 L1071.64 1212.12 L1071.06 1212.12 L1070.47 1212.12 L1069.88 1212.12 L1069.3 1212.12 L1068.71 1212.12 L1068.12 1212.12 L1067.54 1212.12 L1066.95 1212.12 L1066.36 1212.12 L1065.78 1212.12 L1065.19 1212.12 L1064.6 1212.12 L1064.02 1212.12 L1063.43 1212.12 L1062.85 1212.12 L1062.26 1212.12 L1061.67 1212.12 L1061.09 1212.12 L1060.5 1212.12 L1059.91 1212.12 L1059.33 1212.12 L1058.74 1212.12 L1058.15 1212.12 L1057.57 1212.12 L1056.98 1212.12 L1056.39 1212.12 L1055.81 1212.12 L1055.22 1212.12 L1054.64 1212.12 L1054.05 1212.12 L1053.46 1212.12 L1052.88 1212.12 L1052.29 1212.12 L1051.7 1212.12 L1051.12 1212.12 L1050.53 1212.12 L1049.94 1212.12 L1049.36 1212.12 L1048.77 1212.12 L1048.19 1212.12 L1047.6 1212.12 L1047.01 1212.12 L1046.43 1212.12 L1045.84 1212.12 L1045.25 1212.12 L1044.67 1212.12 L1044.08 1212.12 L1043.49 1212.12 L1042.91 1212.12 L1042.32 1212.12 L1041.73 1212.12 L1041.15 1212.12 L1040.56 1212.12 L1039.98 1212.12 L1039.39 1212.12 L1038.8 1212.12 L1038.22 1212.12 L1037.63 1212.12 L1037.04 1212.12 L1036.46 1212.12 L1035.87 1212.12 L1035.28 1212.12 L1034.7 1212.12 L1034.11 1212.12 L1033.52 1212.12 L1032.94 1212.12 L1032.35 1212.12 L1031.77 1212.12 L1031.18 1212.12 L1030.59 1212.12 L1030.01 1212.12 L1029.42 1212.12 L1028.83 1212.12 L1028.25 1212.12 L1027.66 1212.12 L1027.07 1212.12 L1026.49 1212.12 L1025.9 1212.12 L1025.32 1212.12 L1024.73 1212.12 L1024.14 1212.12 L1023.56 1212.12 L1022.97 1212.12 L1022.38 1212.12 L1021.8 1212.12 L1021.21 1212.12 L1020.62 1212.12 L1020.04 1212.12 L1019.45 1212.12 L1018.86 1212.12 L1018.28 1212.12 L1017.69 1212.12 L1017.11 1212.12 L1016.52 1212.12 L1015.93 1212.12 L1015.35 1212.12 L1014.76 1212.12 L1014.17 1212.12 L1013.59 1212.12 L1013 1212.12 L1012.41 1212.12 L1011.83 1212.12 L1011.24 1212.12 L1010.65 1212.12 L1010.07 1212.12 L1009.48 1212.12 L1008.9 1212.12 L1008.31 1212.12 L1007.72 1212.12 L1007.14 1212.12 L1006.55 1212.12 L1005.96 1212.12 L1005.38 1212.12 L1004.79 1212.12 L1004.2 1212.12 L1003.62 1212.12 L1003.03 1212.12 L1002.44 1212.12 L1001.86 1212.12 L1001.27 1212.12 L1000.69 1212.12 L1000.1 1212.12 L999.513 1212.12 L998.926 1212.12 L998.34 1212.12 L997.754 1212.12 L997.167 1212.12 L996.581 1212.12 L995.994 1212.12 L995.408 1212.12 L994.822 1212.12 L994.235 1212.12 L993.649 1212.12 L993.062 1212.12 L992.476 1212.12 L991.889 1212.12 L991.303 1212.12 L990.717 1212.12 L990.13 1212.12 L989.544 1212.12 L988.957 1212.12 L988.371 1212.12 L987.785 1212.12 L987.198 1212.12 L986.612 1212.12 L986.025 1212.12  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.48 986.612,1212.48 987.198,1212.48 987.785,1212.48 988.371,1212.48 988.957,1212.48 989.544,1212.48 990.13,1212.48 990.717,1212.48 991.303,1212.48 991.889,1212.48 992.476,1212.48 993.062,1212.48 993.649,1212.48 994.235,1212.48 994.822,1212.48 995.408,1212.48 995.994,1212.48 996.581,1212.48 997.167,1212.48 997.754,1212.48 998.34,1212.48 998.926,1212.48 999.513,1212.48 1000.1,1212.48 1000.69,1212.48 1001.27,1212.48 1001.86,1212.48 1002.44,1212.48 1003.03,1212.48 1003.62,1212.48 1004.2,1212.48 1004.79,1212.48 1005.38,1212.48 1005.96,1212.48 1006.55,1212.48 1007.14,1212.48 1007.72,1212.48 1008.31,1212.48 1008.9,1212.48 1009.48,1212.48 1010.07,1212.48 1010.65,1212.48 1011.24,1212.48 1011.83,1212.48 1012.41,1212.48 1013,1212.48 1013.59,1212.48 1014.17,1212.48 1014.76,1212.48 1015.35,1212.48 1015.93,1212.48 1016.52,1212.48 1017.11,1212.48 1017.69,1212.48 1018.28,1212.48 1018.86,1212.48 1019.45,1212.48 1020.04,1212.48 1020.62,1212.48 1021.21,1212.48 1021.8,1212.48 1022.38,1212.48 1022.97,1212.48 1023.56,1212.48 1024.14,1212.48 1024.73,1212.48 1025.32,1212.48 1025.9,1212.48 1026.49,1212.48 1027.07,1212.48 1027.66,1212.48 1028.25,1212.48 1028.83,1212.48 1029.42,1212.48 1030.01,1212.48 1030.59,1212.48 1031.18,1212.48 1031.77,1212.48 1032.35,1212.48 1032.94,1212.48 1033.52,1212.48 1034.11,1212.48 1034.7,1212.48 1035.28,1212.48 1035.87,1212.48 1036.46,1212.48 1037.04,1212.48 1037.63,1212.48 1038.22,1212.48 1038.8,1212.48 1039.39,1212.48 1039.98,1212.48 1040.56,1212.48 1041.15,1212.48 1041.73,1212.48 1042.32,1212.48 1042.91,1212.48 1043.49,1212.48 1044.08,1212.48 1044.67,1212.48 1045.25,1212.48 1045.84,1212.48 1046.43,1212.48 1047.01,1212.48 1047.6,1212.48 1048.19,1212.48 1048.77,1212.48 1049.36,1212.48 1049.94,1212.48 1050.53,1212.48 1051.12,1212.48 1051.7,1212.48 1052.29,1212.48 1052.88,1212.48 1053.46,1212.48 1054.05,1212.48 1054.64,1212.48 1055.22,1212.48 1055.81,1212.48 1056.39,1212.48 1056.98,1212.48 1057.57,1212.48 1058.15,1212.48 1058.74,1212.48 1059.33,1212.48 1059.91,1212.48 1060.5,1212.48 1061.09,1212.48 1061.67,1212.48 1062.26,1212.48 1062.85,1212.48 1063.43,1212.48 1064.02,1212.48 1064.6,1212.48 1065.19,1212.48 1065.78,1212.48 1066.36,1212.48 1066.95,1212.48 1067.54,1212.48 1068.12,1212.48 1068.71,1212.48 1069.3,1212.48 1069.88,1212.48 1070.47,1212.48 1071.06,1212.48 1071.64,1212.48 1072.23,1212.48 1072.81,1212.48 1073.4,1212.48 1073.99,1212.48 1074.57,1212.48 1075.16,1212.48 1075.75,1212.48 1076.33,1212.48 1076.92,1212.48 1077.51,1212.48 1078.09,1212.48 1078.68,1212.48 1079.26,1212.48 1079.85,1212.48 1080.44,1212.48 1081.02,1212.48 1081.61,1212.48 1082.2,1212.48 1082.78,1212.48 1083.37,1212.48 1083.96,1212.48 1084.54,1212.48 1085.13,1212.48 1085.72,1212.48 1086.3,1212.48 1086.89,1212.48 1087.47,1212.48 1088.06,1212.48 1088.65,1212.48 1089.23,1212.48 1089.82,1212.48 1090.41,1212.48 1090.99,1212.48 1091.58,1212.48 1092.17,1212.48 1092.75,1212.48 1093.34,1212.48 1093.93,1212.48 1094.51,1212.48 1095.1,1212.48 1095.68,1212.48 1096.27,1212.48 1096.86,1212.48 1097.44,1212.48 1098.03,1212.48 1098.62,1212.48 1099.2,1212.48 1099.79,1212.48 1100.38,1212.48 1100.96,1212.48 1101.55,1212.48 1102.14,1212.48 1102.72,1212.48 1103.31,1212.48 1103.89,1212.48 1104.48,1212.48 1105.07,1212.48 1105.65,1212.48 1106.24,1212.48 1106.83,1212.48 1107.41,1212.48 1108,1212.48 1108.59,1212.48 1109.17,1212.48 1109.76,1212.48 1110.34,1212.48 1110.93,1212.48 1111.52,1212.48 1112.1,1212.48 1112.69,1212.48 1113.28,1212.48 1113.86,1212.48 1114.45,1212.48 1115.04,1212.48 1115.62,1212.48 1116.21,1212.48 1116.8,1212.48 1117.38,1212.48 1117.97,1212.48 1118.55,1212.48 1119.14,1212.48 1119.73,1212.48 1120.31,1212.48 1120.9,1212.48 1121.49,1212.48 1122.07,1212.48 1122.66,1212.48 1123.25,1212.48 1123.83,1212.48 1124.42,1212.48 1125.01,1212.48 1125.59,1212.48 1126.18,1212.48 1126.76,1212.48 1127.35,1212.48 1127.94,1212.48 1128.52,1212.48 1129.11,1212.48 1129.7,1212.48 1130.28,1212.48 1130.87,1212.48 1131.46,1212.48 1132.04,1212.48 1132.63,1212.48 1133.21,1212.48 1133.8,1212.48 1134.39,1212.48 1134.97,1212.48 1135.56,1212.48 1136.15,1212.48 1136.73,1212.48 1137.32,1212.48 1137.91,1212.48 1138.49,1212.48 1139.08,1212.48 1139.67,1212.48 1140.25,1212.48 1140.84,1212.48 1141.42,1212.48 1142.01,1212.48 1142.6,1212.48 1143.18,1212.48 1143.77,1212.48 1144.36,1212.48 1144.94,1212.48 1145.53,1212.48 1146.12,1212.48 1146.7,1212.48 1147.29,1212.48 1147.88,1212.48 1148.46,1212.48 1149.05,1212.48 1149.63,1212.48 1150.22,1212.48 1150.81,1212.48 1151.39,1212.48 1151.98,1212.48 1152.57,1212.48 1153.15,1212.48 1153.74,1212.48 1154.33,1212.48 1154.91,1212.48 1155.5,1212.48 1156.09,1212.48 1156.67,1212.48 1157.26,1212.48 1157.84,1212.48 1158.43,1212.48 1159.02,1212.48 1159.6,1212.48 1160.19,1212.48 1160.78,1212.48 1161.36,1212.48 1161.95,1212.48 1162.54,1212.48 1163.12,1212.48 1163.71,1212.48 1164.29,1212.48 1164.88,1212.48 1165.47,1212.48 1166.05,1212.48 1166.64,1212.48 1167.23,1212.48 1167.81,1212.48 1168.4,1212.48 1168.99,1212.48 1169.57,1212.48 1170.16,1212.48 1170.75,1212.48 1171.33,1212.48 1171.92,1212.48 1172.5,1212.48 1173.09,1212.48 1173.68,1212.48 1174.26,1212.48 1174.85,1212.48 1175.44,1212.48 1176.02,1212.48 1176.61,1212.48 1177.2,1212.48 1177.78,1212.48 1178.37,1212.48 1178.96,1212.48 1179.54,1212.48 1180.13,1212.48 1180.71,1212.48 1181.3,1212.48 1181.89,1212.48 1182.47,1212.48 1183.06,1212.48 1183.65,1212.48 1184.23,1212.48 1184.82,1212.48 1185.41,1212.48 1185.99,1212.48 1186.58,1212.48 1187.16,1212.48 1187.75,1212.48 1188.34,1212.48 1188.92,1212.48 1189.51,1212.48 1190.1,1212.48 1190.68,1212.48 1191.27,1212.48 1191.86,1212.48 1192.44,1212.48 1193.03,1212.48 1193.62,1212.48 1194.2,1212.48 1194.79,1212.48 1195.37,1212.48 1195.96,1212.48 1196.55,1212.48 1197.13,1212.48 1197.72,1212.48 1198.31,1212.48 1198.89,1212.48 1199.48,1212.48 1200.07,1212.48 1200.65,1212.48 1201.24,1212.48 1201.83,1212.48 1202.41,1212.48 1203,1212.48 1203.58,1212.48 1204.17,1212.48 1204.76,1212.48 1205.34,1212.48 1205.93,1212.48 1206.52,1212.48 1207.1,1212.48 1207.69,1212.48 1208.28,1212.48 1208.86,1212.48 1209.45,1212.48 1210.03,1212.48 1210.62,1212.48 1211.21,1212.48 1211.79,1212.48 1212.38,1212.48 1212.97,1212.48 1213.55,1212.48 1214.14,1212.48 1214.73,1212.48 1215.31,1212.48 1215.9,1212.48 1216.49,1212.48 1217.07,1212.48 1217.66,1212.48 1218.24,1212.48 1218.83,1212.48 1219.42,1212.48 1220,1212.48 1220.59,1212.48 1221.18,1212.48 1221.76,1212.48 1222.35,1212.48 1222.94,1212.48 1223.52,1212.48 1224.11,1212.48 1224.7,1212.48 1225.28,1212.48 1225.87,1212.48 1226.45,1212.48 1227.04,1212.48 1227.63,1212.48 1228.21,1212.48 1228.8,1212.48 1229.39,1212.48 1229.97,1212.48 1230.56,1212.48 1231.15,1212.48 1231.73,1212.48 1232.32,1212.48 1232.91,1212.48 1233.49,1212.48 1234.08,1212.48 1234.66,1212.48 1235.25,1212.48 1235.84,1212.48 1236.42,1212.48 1237.01,1212.48 1237.6,1212.48 1238.18,1212.48 1238.77,1212.48 1239.36,1212.48 1239.94,1212.48 1240.53,1212.48 1241.11,1212.48 1241.7,1212.48 1242.29,1212.48 1242.87,1212.48 1243.46,1212.48 1244.05,1212.48 1244.63,1212.48 1245.22,1212.48 1245.81,1212.48 1246.39,1212.48 1246.98,1212.48 1247.57,1212.48 1248.15,1212.48 1248.74,1212.48 1249.32,1212.48 1249.91,1212.48 1250.5,1212.48 1251.08,1212.48 1251.67,1212.48 1252.26,1212.48 1252.84,1212.48 1253.43,1212.48 1254.02,1212.48 1254.6,1212.48 1255.19,1212.48 1255.78,1212.48 1256.36,1212.48 1256.95,1212.48 1257.53,1212.48 1258.12,1212.48 1258.71,1212.48 1259.29,1212.48 1259.88,1212.48 1260.47,1212.48 1261.05,1212.48 1261.64,1212.48 1262.23,1212.48 1262.81,1212.48 1263.4,1212.48 1263.98,1212.48 1264.57,1212.48 1265.16,1212.48 1265.74,1212.48 1266.33,1212.48 1266.92,1212.48 1267.5,1212.48 1268.09,1212.48 1268.68,1212.48 1269.26,1212.48 1269.85,1212.48 1270.44,1212.48 1271.02,1212.48 1271.61,1212.48 1272.19,1212.48 1272.78,1212.48 1273.37,1212.48 1273.95,1212.48 1274.54,1212.48 1275.13,1212.48 1275.71,1212.48 1276.3,1212.48 1276.89,1212.48 1277.47,1212.48 1278.06,1212.48 1278.65,1212.48 1279.23,1212.48 1279.82,1212.48 1280.4,1212.48 1280.99,1212.48 1281.58,1212.48 1282.16,1212.48 1282.75,1212.48 1283.34,1212.48 1283.92,1212.48 1284.51,1212.48 1285.1,1212.48 1285.68,1212.48 1286.27,1212.48 1286.86,1212.48 1287.44,1212.48 1288.03,1212.48 1288.61,1212.48 1289.2,1212.48 1289.79,1212.48 1290.37,1212.48 1290.96,1212.48 1291.55,1212.48 1292.13,1212.48 1292.72,1212.48 1293.31,1212.48 1293.89,1212.48 1294.48,1212.48 1295.06,1212.48 1295.65,1212.48 1296.24,1212.48 1296.82,1212.48 1297.41,1212.48 1298,1212.48 1298.58,1212.48 1299.17,1212.48 1299.76,1212.48 1300.34,1212.48 1300.93,1212.48 1301.52,1212.48 1302.1,1212.48 1302.69,1212.48 1303.27,1212.48 1303.86,1212.48 1304.45,1212.48 1305.03,1212.48 1305.62,1212.48 1306.21,1212.48 1306.79,1212.48 1307.38,1212.48 1307.97,1212.48 1308.55,1212.48 1309.14,1212.48 1309.73,1212.48 1310.31,1212.48 1310.9,1212.48 1311.48,1212.48 1312.07,1212.48 1312.66,1212.48 1313.24,1212.48 1313.83,1212.48 1314.42,1212.48 1315,1212.48 1315.59,1212.48 1316.18,1212.48 1316.76,1212.48 1317.35,1212.48 1317.93,1212.48 1318.52,1212.48 1319.11,1212.48 1319.69,1212.48 1320.28,1212.48 1320.87,1212.48 1321.45,1212.48 1322.04,1212.48 1322.63,1212.48 1323.21,1212.48 1323.8,1212.48 1324.39,1212.48 1324.97,1212.48 1325.56,1212.48 1326.14,1212.48 1326.73,1212.48 1327.32,1212.48 1327.9,1212.48 1328.49,1212.48 1329.08,1212.48 1329.66,1212.48 1330.25,1212.48 1330.84,1212.48 1331.42,1212.48 1332.01,1212.48 1332.6,1212.48 1333.18,1212.48 1333.77,1212.48 1334.35,1212.48 1334.94,1212.48 1335.53,1212.48 1336.11,1212.48 1336.7,1212.48 1337.29,1212.48 1337.87,1212.48 1338.46,1212.48 1339.05,1212.48 1339.63,1212.48 1340.22,1212.48 1340.8,1212.48 1341.39,1212.48 1341.98,1212.48 1342.56,1212.48 1343.15,1212.48 1343.74,1212.48 1344.32,1212.48 1344.91,1212.48 1345.5,1212.48 1346.08,1212.48 1346.67,1212.48 1347.26,1212.48 1347.84,1212.48 1348.43,1212.48 1349.01,1212.48 1349.6,1212.48 1350.19,1212.48 1350.77,1212.48 1351.36,1212.48 1351.95,1212.48 1352.53,1212.48 1353.12,1212.48 1353.71,1212.48 1354.29,1212.48 1354.88,1212.48 1355.47,1212.48 1356.05,1212.48 1356.64,1212.48 1357.22,1212.48 1357.81,1212.48 1358.4,1212.48 1358.98,1212.48 1359.57,1212.48 1360.16,1212.48 1360.74,1212.48 1361.33,1212.48 1361.92,1212.48 1362.5,1212.48 1363.09,1212.48 1363.68,1212.48 1364.26,1212.48 1364.85,1212.48 1365.43,1212.48 1366.02,1212.48 1366.61,1212.48 1367.19,1212.48 1367.78,1212.48 1368.37,1212.48 1368.95,1212.48 1369.54,1212.48 1370.13,1212.48 1370.71,1212.48 1371.3,1212.48 1371.88,1212.48 1372.47,1212.48 1373.06,1212.48 1373.64,1212.48 1374.23,1212.48 1374.82,1212.48 1375.4,1212.48 1375.99,1212.48 1376.58,1212.48 1377.16,1212.48 1377.75,1212.48 1378.34,1212.48 1378.92,1212.48 1379.51,1212.48 1380.09,1212.48 1380.68,1212.48 1381.27,1212.48 1381.85,1212.48 1382.44,1212.48 1383.03,1212.48 1383.61,1212.48 1384.2,1212.48 1384.79,1212.48 1385.37,1212.48 1385.96,1212.48 1386.55,1212.48 1387.13,1212.48 1387.72,1212.48 1388.3,1212.48 1388.89,1212.48 1389.48,1212.48 1390.06,1212.48 1390.65,1212.48 1391.24,1212.48 1391.82,1212.48 1392.41,1212.48 1393,1212.48 1393.58,1212.48 1394.17,1212.48 1394.75,1212.48 1395.34,1212.48 1395.93,1212.48 1396.51,1212.48 1397.1,1212.48 1397.69,1212.48 1398.27,1212.48 1398.86,1212.48 1399.45,1212.48 1400.03,1212.48 1400.62,1212.48 1401.21,1212.48 1401.79,1212.48 1402.38,1212.48 1402.96,1212.48 1403.55,1212.48 1404.14,1212.48 1404.72,1212.48 1405.31,1212.48 1405.9,1212.48 1406.48,1212.48 1407.07,1212.48 1407.66,1212.48 1408.24,1212.48 1408.83,1212.48 1409.42,1212.48 1410,1212.48 1410.59,1212.48 1411.17,1212.48 1411.76,1212.48 1412.35,1212.48 1412.93,1212.48 1413.52,1212.48 1414.11,1212.48 1414.69,1212.48 1415.28,1212.48 1415.87,1212.48 1416.45,1212.48 1417.04,1212.48 1417.63,1212.48 1418.21,1212.48 1418.8,1212.48 1419.38,1212.48 1419.97,1212.48 1420.56,1212.48 1421.14,1212.48 1421.73,1212.48 1422.32,1212.48 1422.9,1212.48 1423.49,1212.48 1424.08,1212.48 1424.66,1212.48 1425.25,1212.48 1425.83,1212.48 1426.42,1212.48 1427.01,1212.48 1427.59,1212.48 1428.18,1212.48 1428.77,1212.48 1429.35,1212.48 1429.94,1212.48 1430.53,1212.48 1431.11,1212.48 1431.7,1212.48 1432.29,1212.48 1432.87,1212.48 1433.46,1212.48 1434.04,1212.48 1434.63,1212.48 1435.22,1212.48 1435.8,1212.48 1436.39,1212.48 1436.98,1212.48 1437.56,1212.48 1438.15,1212.48 1438.74,1212.48 1439.32,1212.48 1439.91,1212.48 1440.5,1212.48 1441.08,1212.48 1441.67,1212.48 1442.25,1212.48 1442.84,1212.48 1443.43,1212.48 1444.01,1212.48 1444.6,1212.48 1445.19,1212.48 1445.77,1212.48 1446.36,1212.48 1446.95,1212.48 1447.53,1212.48 1448.12,1212.48 1448.7,1212.48 1449.29,1212.48 1449.88,1212.48 1450.46,1212.48 1451.05,1212.48 1451.64,1212.48 1452.22,1212.48 1452.81,1212.48 1453.4,1212.48 1453.98,1212.48 1454.57,1212.48 1455.16,1212.48 1455.74,1212.48 1456.33,1212.48 1456.91,1212.48 1457.5,1212.48 1458.09,1212.48 1458.67,1212.48 1459.26,1212.48 1459.85,1212.48 1460.43,1212.48 1461.02,1212.48 1461.61,1212.48 1462.19,1212.48 1462.78,1212.48 1463.37,1212.48 1463.95,1212.48 1464.54,1212.48 1465.12,1212.48 1465.71,1212.48 1466.3,1212.48 1466.88,1212.48 1467.47,1212.48 1468.06,1212.48 1468.64,1212.48 1469.23,1212.48 1469.82,1212.48 1470.4,1212.48 1470.99,1212.48 1471.57,1212.48 1472.16,1212.48 1472.75,1212.48 1473.33,1212.48 1473.92,1212.48 1474.51,1212.48 1475.09,1212.48 1475.68,1212.48 1476.27,1212.48 1476.85,1212.48 1477.44,1212.48 1478.03,1212.48 1478.61,1212.48 1479.2,1212.48 1479.78,1212.48 1480.37,1212.48 1480.96,1212.48 1481.54,1212.48 1482.13,1212.48 1482.72,1212.48 1483.3,1212.48 1483.89,1212.48 1484.48,1212.48 1485.06,1212.48 1485.65,1212.48 1486.24,1212.48 1486.82,1212.48 1487.41,1212.48 1487.99,1212.48 1488.58,1212.48 1489.17,1212.48 1489.75,1212.48 1490.34,1212.48 1490.93,1212.48 1491.51,1212.48 1492.1,1212.48 1492.69,1212.48 1493.27,1212.48 1493.86,1212.48 1494.45,1212.48 1495.03,1212.48 1495.62,1212.48 1496.2,1212.48 1496.79,1212.48 1497.38,1212.48 1497.96,1212.48 1498.55,1212.48 1499.14,1212.48 1499.72,1212.48 1500.31,1212.48 1500.9,1212.48 1501.48,1212.48 1502.07,1212.48 1502.65,1212.48 1503.24,1212.48 1503.83,1212.48 1504.41,1212.48 1505,1212.48 1505.59,1212.48 1506.17,1212.48 1506.76,1212.48 1507.35,1212.48 1507.93,1212.48 1508.52,1212.48 1509.11,1212.48 1509.69,1212.48 1510.28,1212.48 1510.86,1212.48 1511.45,1212.48 1512.04,1212.48 1512.62,1212.48 1513.21,1212.48 1513.8,1212.48 1514.38,1212.48 1514.97,1212.48 1515.56,1212.48 1516.14,1212.48 1516.73,1212.48 1517.32,1212.48 1517.9,1212.48 1518.49,1212.48 1519.07,1212.48 1519.66,1212.48 1520.25,1212.48 1520.83,1212.48 1521.42,1212.48 1522.01,1212.48 1522.59,1212.48 1523.18,1212.48 1523.77,1212.48 1524.35,1212.48 1524.94,1212.48 1525.52,1212.48 1526.11,1212.48 1526.7,1212.48 1527.28,1212.48 1527.87,1212.48 1528.46,1212.48 1529.04,1212.48 1529.63,1212.48 1530.22,1212.48 1530.8,1212.48 1531.39,1212.48 1531.98,1212.48 1532.56,1212.48 1533.15,1212.48 1533.73,1212.48 1534.32,1212.48 1534.91,1212.48 1535.49,1212.48 1536.08,1212.48 1536.67,1212.48 1537.25,1212.48 1537.84,1212.48 1538.43,1212.48 1539.01,1212.48 1539.6,1212.48 1540.19,1212.48 1540.77,1212.48 1541.36,1212.48 1541.94,1212.48 1542.53,1212.48 1543.12,1212.48 1543.7,1212.48 1544.29,1212.48 1544.88,1212.48 1545.46,1212.48 1546.05,1212.48 1546.64,1212.48 1547.22,1212.48 1547.81,1212.48 1548.4,1212.48 1548.98,1212.48 1549.57,1212.48 1550.15,1212.48 1550.74,1212.48 1551.33,1212.48 1551.91,1212.48 1552.5,1212.48 1553.09,1212.48 1553.67,1212.48 1554.26,1212.48 1554.85,1212.48 1555.43,1212.48 1556.02,1212.48 1556.6,1212.48 1557.19,1212.48 1557.78,1212.48 1558.36,1212.48 1558.95,1212.48 1559.54,1212.48 1560.12,1212.48 1560.71,1212.48 1561.3,1212.48 1561.88,1212.48 1562.47,1212.48 1563.06,1212.48 1563.64,1212.48 1564.23,1212.48 1564.81,1212.48 1565.4,1212.48 1565.99,1212.48 1566.57,1212.48 1567.16,1212.48 1567.75,1212.48 1568.33,1212.48 1568.92,1212.48 1569.51,1212.48 1570.09,1212.48 1570.68,1212.48 1571.27,1212.48 1571.85,1212.48 1572.44,1212.48 1573.02,1212.48 1573.61,1212.48 1574.2,1212.48 1574.78,1212.48 1575.37,1212.48 1575.96,1212.48 1576.54,1212.48 1577.13,1212.48 1577.72,1212.48 1578.3,1212.48 1578.89,1212.48 1579.47,1212.48 1580.06,1212.48 1580.65,1212.48 1581.23,1212.48 1581.82,1212.48 1582.41,1212.48 1582.99,1212.48 1583.58,1212.48 1584.17,1212.48 1584.75,1212.48 1585.34,1212.48 1585.93,1212.48 1586.51,1212.48 1587.1,1212.48 1587.68,1212.48 1588.27,1212.48 1588.86,1212.48 1589.44,1212.48 1590.03,1212.48 1590.62,1212.48 1591.2,1212.48 1591.79,1212.48 1592.38,1212.48 1592.96,1212.48 1593.55,1212.48 1594.14,1212.48 1594.72,1212.48 1595.31,1212.48 1595.89,1212.48 1596.48,1212.48 1597.07,1212.48 1597.65,1212.48 1598.24,1212.48 1598.83,1212.48 1599.41,1212.48 1600,1212.48 1600.59,1212.48 1601.17,1212.48 1601.76,1212.48 1602.34,1212.48 1602.93,1212.48 1603.52,1212.48 1604.1,1212.48 1604.69,1212.48 1605.28,1212.48 1605.86,1212.48 1606.45,1212.48 1607.04,1212.48 1607.62,1212.48 1608.21,1212.48 1608.8,1212.48 1609.38,1212.48 1609.97,1212.48 1610.55,1212.48 1611.14,1212.48 1611.73,1212.48 1612.31,1212.48 1612.9,1212.48 1613.49,1212.48 1614.07,1212.48 1614.66,1212.48 1615.25,1212.48 1615.83,1212.48 1616.42,1212.48 1617.01,1212.48 1617.59,1212.48 1618.18,1212.48 1618.76,1212.48 1619.35,1212.48 1619.94,1212.48 1620.52,1212.48 1621.11,1212.48 1621.7,1212.48 1622.28,1212.48 1622.87,1212.48 1623.46,1212.48 1624.04,1212.48 1624.63,1212.48 1625.22,1212.48 1625.8,1212.48 1626.39,1212.48 1626.97,1212.48 1627.56,1212.48 1628.15,1212.48 1628.73,1212.48 1629.32,1212.48 1629.91,1212.48 1630.49,1212.48 1631.08,1212.48 1631.67,1212.48 1632.25,1212.48 1632.84,1212.48 1633.42,1212.48 1634.01,1212.48 1634.6,1212.48 1635.18,1212.48 1635.77,1212.48 1636.36,1212.48 1636.94,1212.48 1637.53,1212.48 1638.12,1212.48 1638.7,1212.48 1639.29,1212.48 1639.88,1212.48 1640.46,1212.48 1641.05,1212.48 1641.63,1212.48 1642.22,1212.48 1642.81,1212.48 1643.39,1212.48 1643.98,1212.48 1644.57,1212.48 1645.15,1212.48 1645.74,1212.48 1646.33,1212.48 1646.91,1212.48 1647.5,1212.48 1648.09,1212.48 1648.67,1212.48 1649.26,1212.48 1649.84,1212.48 1650.43,1212.48 1651.02,1212.48 1651.6,1212.48 1652.19,1212.48 1652.78,1212.48 1653.36,1212.48 1653.95,1212.48 1654.54,1212.48 1655.12,1212.48 1655.71,1212.48 1656.29,1212.48 1656.88,1212.48 1657.47,1212.48 1658.05,1212.48 1658.64,1212.48 1659.23,1212.48 1659.81,1212.48 1660.4,1212.48 1660.99,1212.48 1661.57,1212.48 1662.16,1212.48 1662.75,1212.48 1663.33,1212.48 1663.92,1212.48 1664.5,1212.48 1665.09,1212.48 1665.68,1212.48 1666.26,1212.48 1666.85,1212.48 1667.44,1212.48 1668.02,1212.48 1668.61,1212.48 1669.2,1212.48 1669.78,1212.48 1670.37,1212.48 1670.96,1212.48 1671.54,1212.48 1672.13,1212.48 1672.71,1212.48 1673.3,1212.48 1673.89,1212.48 1674.47,1212.48 1675.06,1212.48 1675.65,1212.48 1676.23,1212.48 1676.82,1212.48 1677.41,1212.48 1677.99,1212.48 1678.58,1212.48 1679.17,1212.48 1679.75,1212.48 1680.34,1212.48 1680.92,1212.48 1681.51,1212.48 1682.1,1212.48 1682.68,1212.48 1683.27,1212.48 1683.86,1212.48 1684.44,1212.48 1685.03,1212.48 1685.62,1212.48 1686.2,1212.48 1686.79,1212.48 1687.37,1212.48 1687.96,1212.48 1688.55,1212.48 1689.13,1212.48 1689.72,1212.48 1690.31,1212.48 1690.89,1212.48 1691.48,1212.48 1692.07,1212.48 1692.65,1212.48 1693.24,1212.48 1693.83,1212.48 1694.41,1212.48 1695,1212.48 1695.58,1212.48 1696.17,1212.48 1696.76,1212.48 1697.34,1212.48 1697.93,1212.48 1698.52,1212.48 1699.1,1212.48 1699.69,1212.48 1700.28,1212.48 1700.86,1212.48 1701.45,1212.48 1702.04,1212.48 1702.62,1212.48 1703.21,1212.48 1703.79,1212.48 1704.38,1212.48 1704.97,1212.48 1705.55,1212.48 1706.14,1212.48 1706.73,1212.48 1707.31,1212.48 1707.9,1212.48 1708.49,1212.48 1709.07,1212.48 1709.66,1212.48 1710.24,1212.48 1710.83,1212.48 1711.42,1212.48 1712,1212.48 1712.59,1212.48 1713.18,1212.48 1713.76,1212.48 1714.35,1212.48 1714.94,1212.48 1715.52,1212.48 1716.11,1212.48 1716.7,1212.48 1717.28,1212.48 1717.87,1212.48 1718.45,1212.48 1719.04,1212.48 1719.63,1212.48 1720.21,1212.48 1720.8,1212.48 1721.39,1212.48 1721.97,1212.48 1722.56,1212.48 1723.15,1212.48 1723.73,1212.48 1724.32,1212.48 1724.91,1212.48 1725.49,1212.48 1726.08,1212.48 1726.66,1212.48 1727.25,1212.48 1727.84,1212.48 1728.42,1212.48 1729.01,1212.48 1729.6,1212.48 1730.18,1212.48 1730.77,1212.48 1731.36,1212.48 1731.94,1212.48 1732.53,1212.48 1733.11,1212.48 1733.7,1212.48 1734.29,1212.48 1734.87,1212.48 1735.46,1212.48 1736.05,1212.48 1736.63,1212.48 1737.22,1212.48 1737.81,1212.48 1738.39,1212.48 1738.98,1212.48 1739.57,1212.48 1740.15,1212.48 1740.74,1212.48 1741.32,1212.48 1741.91,1212.48 1742.5,1212.48 1743.08,1212.48 1743.67,1212.48 1744.26,1212.48 1744.84,1212.48 1745.43,1212.48 1746.02,1212.48 1746.6,1212.48 1747.19,1212.48 1747.78,1212.48 1748.36,1212.48 1748.95,1212.48 1749.53,1212.48 1750.12,1212.48 1750.71,1212.48 1751.29,1212.48 1751.88,1212.48 1752.47,1212.48 1753.05,1212.48 1753.64,1212.48 1754.23,1212.48 1754.81,1212.48 1755.4,1212.48 1755.99,1212.48 1756.57,1212.48 1757.16,1212.48 1757.74,1212.48 1758.33,1212.48 1758.92,1212.48 1759.5,1212.48 1760.09,1212.48 1760.68,1212.48 1761.26,1212.48 1761.85,1212.48 1762.44,1212.48 1763.02,1212.48 1763.61,1212.48 1764.19,1212.48 1764.78,1212.48 1765.37,1212.48 1765.95,1212.48 1766.54,1212.48 1767.13,1212.48 1767.71,1212.48 1768.3,1212.48 1768.89,1212.48 1769.47,1212.48 1770.06,1212.48 1770.65,1212.48 1771.23,1212.48 1771.82,1212.48 1772.4,1212.48 1772.99,1212.48 1773.58,1212.48 1774.16,1212.48 1774.75,1212.48 1775.34,1212.48 1775.92,1212.48 1776.51,1212.48 1777.1,1212.48 1777.68,1212.48 1778.27,1212.48 1778.86,1212.48 1779.44,1212.48 1780.03,1212.48 1780.61,1212.48 1781.2,1212.48 1781.79,1212.48 1782.37,1212.48 1782.96,1212.48 1783.55,1212.48 1784.13,1212.48 1784.72,1212.48 1785.31,1212.48 1785.89,1212.48 1786.48,1212.48 1787.06,1212.48 1787.65,1212.48 1788.24,1212.48 1788.82,1212.48 1789.41,1212.48 1790,1212.48 1790.58,1212.48 1791.17,1212.48 1791.76,1212.48 1792.34,1212.48 1792.93,1212.48 1793.52,1212.48 1794.1,1212.48 1794.69,1212.48 1795.27,1212.48 1795.86,1212.48 1796.45,1212.48 1797.03,1212.48 1797.62,1212.48 1798.21,1212.48 1798.79,1212.48 1799.38,1212.48 1799.97,1212.48 1800.55,1212.48 1801.14,1212.48 1801.73,1212.48 1802.31,1212.48 1802.9,1212.48 1803.48,1212.48 1804.07,1212.48 1804.66,1212.48 1805.24,1212.48 1805.83,1212.48 1806.42,1212.48 1807,1212.48 1807.59,1212.48 1808.18,1212.48 1808.76,1212.48 1809.35,1212.48 1809.94,1212.48 1810.52,1212.48 1811.11,1212.48 1811.69,1212.48 1812.28,1212.48 1812.87,1212.48 1813.45,1212.48 1814.04,1212.48 1814.63,1212.48 1815.21,1212.48 1815.8,1212.48 1816.39,1212.48 1816.97,1212.48 1817.56,1212.48 1818.14,1212.48 1818.73,1212.48 1819.32,1212.48 1819.9,1212.48 1820.49,1212.48 1821.08,1212.48 1821.66,1212.48 1822.25,1212.48 1822.84,1212.48 1823.42,1212.48 1824.01,1212.48 1824.6,1212.48 1825.18,1212.48 1825.77,1212.48 1826.35,1212.48 1826.94,1212.48 1827.53,1212.48 1828.11,1212.48 1828.7,1212.48 1829.29,1212.48 1829.87,1212.48 1830.46,1212.48 1831.05,1212.48 1831.63,1212.48 1832.22,1212.48 1832.81,1212.48 1833.39,1212.48 1833.98,1212.48 1834.56,1212.48 1835.15,1212.48 1835.74,1212.48 1836.32,1212.48 1836.91,1212.48 1837.5,1212.48 1838.08,1212.48 1838.67,1212.48 1839.26,1212.48 1839.84,1212.48 1840.43,1212.48 1841.01,1212.48 1841.6,1212.48 1842.19,1212.48 1842.77,1212.48 1843.36,1212.48 1843.95,1212.48 1844.53,1212.48 1845.12,1212.48 1845.71,1212.48 1846.29,1212.48 1846.88,1212.48 1847.47,1212.48 1848.05,1212.48 1848.64,1212.48 1849.22,1212.48 1849.81,1212.48 1850.4,1212.48 1850.98,1212.48 1851.57,1212.48 1852.16,1212.48 1852.74,1212.48 1853.33,1212.48 1853.92,1212.48 1854.5,1212.48 1855.09,1212.48 1855.68,1212.48 1856.26,1212.48 1856.85,1212.48 1857.43,1212.48 1858.02,1212.48 1858.61,1212.48 1859.19,1212.48 1859.78,1212.48 1860.37,1212.48 1860.95,1212.48 1861.54,1212.48 1862.13,1212.48 1862.71,1212.48 1863.3,1212.48 1863.88,1212.48 1864.47,1212.48 1865.06,1212.48 1865.64,1212.48 1866.23,1212.48 1866.82,1212.48 1867.4,1212.48 1867.99,1212.48 1868.58,1212.48 1869.16,1212.48 1869.75,1212.48 1870.34,1212.48 1870.92,1212.48 1871.51,1212.48 1872.09,1212.48 1872.68,1212.48 1873.27,1212.48 1873.85,1212.48 1874.44,1212.48 1875.03,1212.48 1875.61,1212.48 1876.2,1212.48 1876.79,1212.48 1877.37,1212.48 1877.96,1212.48 1878.55,1212.48 1879.13,1212.48 1879.72,1212.48 1880.3,1212.48 1880.89,1212.48 1881.48,1212.48 1882.06,1212.48 1882.65,1212.48 1883.24,1212.48 1883.82,1212.48 1884.41,1212.48 1885,1212.48 1885.58,1212.48 1886.17,1212.48 1886.76,1212.48 1887.34,1212.48 1887.93,1212.48 1888.51,1212.48 1889.1,1212.48 1889.69,1212.48 1890.27,1212.48 1890.86,1212.48 1891.45,1212.48 1892.03,1212.48 1892.62,1212.48 1893.21,1212.48 1893.79,1212.48 1894.38,1212.48 1894.96,1212.48 1895.55,1212.48 1896.14,1212.48 1896.72,1212.48 1897.31,1212.48 1897.9,1212.48 1898.48,1212.48 1899.07,1212.48 1899.66,1212.48 1900.24,1212.48 1900.83,1212.48 1901.42,1212.48 1902,1212.48 1902.59,1212.48 1903.17,1212.48 1903.76,1212.48 1904.35,1212.48 1904.93,1212.48 1905.52,1212.48 1906.11,1212.48 1906.69,1212.48 1907.28,1212.48 1907.87,1212.48 1908.45,1212.48 1909.04,1212.48 1909.63,1212.48 1910.21,1212.48 1910.8,1212.48 1911.38,1212.48 1911.97,1212.48 1912.56,1212.48 1913.14,1212.48 1913.73,1212.48 1914.32,1212.48 1914.9,1212.48 1915.49,1212.48 1916.08,1212.48 1916.66,1212.48 1917.25,1212.48 1917.83,1212.48 1918.42,1212.48 1919.01,1212.48 1919.59,1212.48 1920.18,1212.48 1920.77,1212.48 1921.35,1212.48 1921.94,1212.48 1922.53,1212.48 1923.11,1212.48 1923.7,1212.48 1924.29,1212.48 1924.87,1212.48 1925.46,1212.48 1926.04,1212.48 1926.63,1212.48 1927.22,1212.48 1927.8,1212.48 1928.39,1212.48 1928.98,1212.48 1929.56,1212.48 1930.15,1212.48 1930.74,1212.48 1931.32,1212.48 1931.91,1212.48 1932.5,1212.48 1933.08,1212.48 1933.67,1212.48 1934.25,1212.48 1934.84,1212.48 1935.43,1212.48 1936.01,1212.48 1936.6,1212.48 1937.19,1212.48 1937.77,1212.48 1938.36,1212.48 1938.95,1212.48 1939.53,1212.48 1940.12,1212.48 1940.71,1212.48 1941.29,1212.48 1941.88,1212.48 1942.46,1212.48 1943.05,1212.48 1943.64,1212.48 1944.22,1212.48 1944.81,1212.48 1945.4,1212.48 1945.98,1212.48 1946.57,1212.48 1947.16,1212.48 1947.74,1212.48 1948.33,1212.48 1948.91,1212.48 1949.5,1212.48 1950.09,1212.48 1950.67,1212.48 1951.26,1212.48 1951.85,1212.48 1952.43,1212.48 1953.02,1212.48 1953.61,1212.48 1954.19,1212.48 1954.78,1212.48 1955.37,1212.48 1955.95,1212.48 1956.54,1212.48 1957.12,1212.48 1957.71,1212.48 1958.3,1212.48 1958.88,1212.48 1959.47,1212.48 1960.06,1212.48 1960.64,1212.48 1961.23,1212.48 1961.82,1212.48 1962.4,1212.48 1962.99,1212.48 1963.58,1212.48 1964.16,1212.48 1964.75,1212.48 1965.33,1212.48 1965.92,1212.48 1966.51,1212.48 1967.09,1212.48 1967.68,1212.48 1968.27,1212.48 1968.85,1212.48 1969.44,1212.48 1970.03,1212.48 1970.61,1212.48 1971.2,1212.48 1971.78,1212.48 1972.37,1212.48 1972.96,1212.48 1973.54,1212.48 1974.13,1212.48 1974.72,1212.48 1975.3,1212.48 1975.89,1212.48 1976.48,1212.48 1977.06,1212.48 1977.65,1212.48 1978.24,1212.48 1978.82,1212.48 1979.41,1212.48 1979.99,1212.48 1980.58,1212.48 1981.17,1212.48 1981.75,1212.48 1982.34,1212.48 1982.93,1212.48 1983.51,1212.48 1984.1,1212.48 1984.69,1212.48 1985.27,1212.48 1985.86,1212.48 1986.45,1212.48 1987.03,1212.48 1987.62,1212.48 1988.2,1212.48 1988.79,1212.48 1989.38,1212.48 1989.96,1212.48 1990.55,1212.48 1991.14,1212.48 1991.72,1212.48 1992.31,1212.48 1992.9,1212.48 1993.48,1212.48 1994.07,1212.48 1994.65,1212.48 1995.24,1212.48 1995.83,1212.48 1996.41,1212.48 1997,1212.48 1997.59,1212.48 1998.17,1212.48 1998.76,1212.48 1999.35,1212.48 1999.93,1212.48 2000.52,1212.48 2001.11,1212.48 2001.69,1212.48 2002.28,1212.48 2002.86,1212.48 2003.45,1212.48 2004.04,1212.48 2004.62,1212.48 2005.21,1212.48 2005.8,1212.48 2006.38,1212.48 2006.97,1212.48 2007.56,1212.48 2008.14,1212.48 2008.73,1212.48 2009.32,1212.48 2009.9,1212.48 2010.49,1212.48 2011.07,1212.48 2011.66,1212.48 2012.25,1212.48 2012.83,1212.48 2013.42,1212.48 2014.01,1212.48 2014.59,1212.48 2015.18,1212.48 2015.77,1212.48 2016.35,1212.48 2016.94,1212.48 2017.53,1212.48 2018.11,1212.48 2018.7,1212.48 2019.28,1212.48 2019.87,1212.48 2020.46,1212.48 2021.04,1212.48 2021.63,1212.48 2022.22,1212.48 2022.8,1212.48 2023.39,1212.48 2023.98,1212.48 2024.56,1212.48 2025.15,1212.48 2025.73,1212.48 2026.32,1212.48 2026.91,1212.48 2027.49,1212.48 2028.08,1212.48 2028.67,1212.48 2029.25,1212.48 2029.84,1212.48 2030.43,1212.48 2031.01,1212.48 2031.6,1212.48 2032.19,1212.48 2032.77,1212.48 2033.36,1212.48 2033.94,1212.48 2034.53,1212.48 2035.12,1212.48 2035.7,1212.48 2036.29,1212.48 2036.88,1212.48 2037.46,1212.48 2038.05,1212.48 2038.64,1212.48 2039.22,1212.48 2039.81,1212.48 2040.4,1212.48 2040.98,1212.48 2041.57,1212.48 2042.15,1212.48 2042.74,1212.48 2043.33,1212.48 2043.91,1212.48 2044.5,1212.48 2045.09,1212.48 2045.67,1212.48 2046.26,1212.48 2046.85,1212.48 2047.43,1212.48 2048.02,1212.48 2048.6,1212.48 2049.19,1212.48 2049.78,1212.48 2050.36,1212.48 2050.95,1212.48 2051.54,1212.48 2052.12,1212.48 2052.71,1212.48 2053.3,1212.48 2053.88,1212.48 2054.47,1212.48 2055.06,1212.48 2055.64,1212.48 2056.23,1212.48 2056.81,1212.48 2057.4,1212.48 2057.99,1212.48 2058.57,1212.48 2059.16,1212.48 2059.75,1212.48 2060.33,1212.48 2060.92,1212.48 2061.51,1212.48 2062.09,1212.48 2062.68,1212.48 2063.27,1212.48 2063.85,1212.48 2064.44,1212.48 2065.02,1212.48 2065.61,1212.48 2066.2,1212.48 2066.78,1212.48 2067.37,1212.48 2067.96,1212.48 2068.54,1212.48 2069.13,1212.48 2069.72,1212.48 2070.3,1212.48 2070.89,1212.48 2071.48,1212.48 2072.06,1212.48 2072.65,1212.48 2073.23,1212.48 2073.82,1212.48 2074.41,1212.48 2074.99,1212.48 2075.58,1212.48 2076.17,1212.48 2076.75,1212.48 2077.34,1212.48 2077.93,1212.48 2078.51,1212.48 2079.1,1212.48 2079.68,1212.48 2080.27,1212.48 2080.86,1212.48 2081.44,1212.48 2082.03,1212.48 2082.62,1212.48 2083.2,1212.48 2083.79,1212.48 2084.38,1212.48 2084.96,1212.48 2085.55,1212.48 2086.14,1212.48 2086.72,1212.48 2087.31,1212.48 2087.89,1212.48 2088.48,1212.48 2089.07,1212.48 2089.65,1212.48 2090.24,1212.48 2090.83,1212.48 2091.41,1212.48 2092,1212.48 2092.59,1212.48 2093.17,1212.48 2093.76,1212.48 2094.35,1212.48 2094.93,1212.48 2095.52,1212.48 2096.1,1212.48 2096.69,1212.48 2097.28,1212.48 2097.86,1212.48 2098.45,1212.48 2099.04,1212.48 2099.62,1212.48 2100.21,1212.48 2100.8,1212.48 2101.38,1212.48 2101.97,1212.48 2102.55,1212.48 2103.14,1212.48 2103.73,1212.48 2104.31,1212.48 2104.9,1212.48 2105.49,1212.48 2106.07,1212.48 2106.66,1212.48 2107.25,1212.48 2107.83,1212.48 2108.42,1212.48 2109.01,1212.48 2109.59,1212.48 2110.18,1212.48 2110.76,1212.48 2111.35,1212.48 2111.94,1212.48 2112.52,1212.48 2113.11,1212.48 2113.7,1212.48 2114.28,1212.48 2114.87,1212.48 2115.46,1212.48 2116.04,1212.48 2116.63,1212.48 2117.22,1212.48 2117.8,1212.48 2118.39,1212.48 2118.97,1212.48 2119.56,1212.48 2120.15,1212.48 2120.73,1212.48 2121.32,1212.48 2121.91,1212.48 2122.49,1212.48 2123.08,1212.48 2123.67,1212.48 2124.25,1212.48 2124.84,1212.48 2125.42,1212.48 2126.01,1212.48 2126.6,1212.48 2127.18,1212.48 2127.77,1212.48 2128.36,1212.48 2128.94,1212.48 2129.53,1212.48 2130.12,1212.48 2130.7,1212.48 2131.29,1212.48 2131.88,1212.48 2132.46,1212.48 2133.05,1212.48 2133.63,1212.48 2134.22,1212.48 2134.81,1212.48 2135.39,1212.48 2135.98,1212.48 2136.57,1212.48 2137.15,1212.48 2137.74,1212.48 2138.33,1212.48 2138.91,1212.48 2139.5,1212.48 2140.09,1212.48 2140.67,1212.48 2141.26,1212.48 2141.84,1212.48 2142.43,1212.48 2143.02,1212.48 2143.6,1212.48 2144.19,1212.48 2144.78,1212.48 2145.36,1212.48 2145.95,1212.48 2146.54,1212.48 2147.12,1212.48 2147.71,1212.48 2148.3,1212.48 2148.88,1212.48 2149.47,1212.48 2150.05,1212.48 2150.64,1212.48 2151.23,1212.48 2151.81,1212.48 2152.4,1212.48 2152.99,1212.48 2153.57,1212.48 2154.16,1212.48 2154.75,1212.48 2155.33,1212.48 2155.92,1212.48 2156.5,1212.48 2157.09,1212.48 2157.68,1212.48 2158.26,1212.48 \"/>\n<path clip-path=\"url(#clip852)\" d=\"M986.025 1212.45 L986.612 1212.45 L987.198 1212.45 L987.785 1212.45 L988.371 1212.45 L988.957 1212.45 L989.544 1212.45 L990.13 1212.45 L990.717 1212.45 L991.303 1212.45 L991.889 1212.45 L992.476 1212.45 L993.062 1212.45 L993.649 1212.45 L994.235 1212.45 L994.822 1212.45 L995.408 1212.45 L995.994 1212.45 L996.581 1212.45 L997.167 1212.45 L997.754 1212.45 L998.34 1212.45 L998.926 1212.45 L999.513 1212.45 L1000.1 1212.45 L1000.69 1212.45 L1001.27 1212.45 L1001.86 1212.45 L1002.44 1212.45 L1003.03 1212.45 L1003.62 1212.45 L1004.2 1212.45 L1004.79 1212.45 L1005.38 1212.45 L1005.96 1212.45 L1006.55 1212.45 L1007.14 1212.45 L1007.72 1212.45 L1008.31 1212.45 L1008.9 1212.45 L1009.48 1212.45 L1010.07 1212.45 L1010.65 1212.45 L1011.24 1212.45 L1011.83 1212.45 L1012.41 1212.45 L1013 1212.45 L1013.59 1212.45 L1014.17 1212.45 L1014.76 1212.45 L1015.35 1212.45 L1015.93 1212.45 L1016.52 1212.45 L1017.11 1212.45 L1017.69 1212.45 L1018.28 1212.45 L1018.86 1212.45 L1019.45 1212.45 L1020.04 1212.45 L1020.62 1212.45 L1021.21 1212.45 L1021.8 1212.45 L1022.38 1212.45 L1022.97 1212.45 L1023.56 1212.45 L1024.14 1212.45 L1024.73 1212.45 L1025.32 1212.45 L1025.9 1212.45 L1026.49 1212.45 L1027.07 1212.45 L1027.66 1212.45 L1028.25 1212.45 L1028.83 1212.45 L1029.42 1212.45 L1030.01 1212.45 L1030.59 1212.45 L1031.18 1212.45 L1031.77 1212.45 L1032.35 1212.45 L1032.94 1212.45 L1033.52 1212.45 L1034.11 1212.45 L1034.7 1212.45 L1035.28 1212.45 L1035.87 1212.45 L1036.46 1212.45 L1037.04 1212.45 L1037.63 1212.45 L1038.22 1212.45 L1038.8 1212.45 L1039.39 1212.45 L1039.98 1212.45 L1040.56 1212.45 L1041.15 1212.45 L1041.73 1212.45 L1042.32 1212.45 L1042.91 1212.45 L1043.49 1212.45 L1044.08 1212.45 L1044.67 1212.45 L1045.25 1212.45 L1045.84 1212.45 L1046.43 1212.45 L1047.01 1212.45 L1047.6 1212.45 L1048.19 1212.45 L1048.77 1212.45 L1049.36 1212.45 L1049.94 1212.45 L1050.53 1212.45 L1051.12 1212.45 L1051.7 1212.45 L1052.29 1212.45 L1052.88 1212.45 L1053.46 1212.45 L1054.05 1212.45 L1054.64 1212.45 L1055.22 1212.45 L1055.81 1212.45 L1056.39 1212.45 L1056.98 1212.45 L1057.57 1212.45 L1058.15 1212.45 L1058.74 1212.45 L1059.33 1212.45 L1059.91 1212.45 L1060.5 1212.45 L1061.09 1212.45 L1061.67 1212.45 L1062.26 1212.45 L1062.85 1212.45 L1063.43 1212.45 L1064.02 1212.45 L1064.6 1212.45 L1065.19 1212.45 L1065.78 1212.45 L1066.36 1212.45 L1066.95 1212.45 L1067.54 1212.45 L1068.12 1212.45 L1068.71 1212.45 L1069.3 1212.45 L1069.88 1212.45 L1070.47 1212.45 L1071.06 1212.45 L1071.64 1212.45 L1072.23 1212.45 L1072.81 1212.45 L1073.4 1212.45 L1073.99 1212.45 L1074.57 1212.45 L1075.16 1212.45 L1075.75 1212.45 L1076.33 1212.45 L1076.92 1212.45 L1077.51 1212.45 L1078.09 1212.45 L1078.68 1212.45 L1079.26 1212.45 L1079.85 1212.45 L1080.44 1212.45 L1081.02 1212.45 L1081.61 1212.45 L1082.2 1212.45 L1082.78 1212.45 L1083.37 1212.45 L1083.96 1212.45 L1084.54 1212.45 L1085.13 1212.45 L1085.72 1212.45 L1086.3 1212.45 L1086.89 1212.45 L1087.47 1212.45 L1088.06 1212.45 L1088.65 1212.45 L1089.23 1212.45 L1089.82 1212.45 L1090.41 1212.45 L1090.99 1212.45 L1091.58 1212.45 L1092.17 1212.45 L1092.75 1212.45 L1093.34 1212.45 L1093.93 1212.45 L1094.51 1212.45 L1095.1 1212.45 L1095.68 1212.45 L1096.27 1212.45 L1096.86 1212.45 L1097.44 1212.45 L1098.03 1212.45 L1098.62 1212.45 L1099.2 1212.45 L1099.79 1212.45 L1100.38 1212.45 L1100.96 1212.45 L1101.55 1212.45 L1102.14 1212.45 L1102.72 1212.45 L1103.31 1212.45 L1103.89 1212.45 L1104.48 1212.45 L1105.07 1212.45 L1105.65 1212.45 L1106.24 1212.45 L1106.83 1212.45 L1107.41 1212.45 L1108 1212.45 L1108.59 1212.45 L1109.17 1212.45 L1109.76 1212.45 L1110.34 1212.45 L1110.93 1212.45 L1111.52 1212.45 L1112.1 1212.45 L1112.69 1212.45 L1113.28 1212.45 L1113.86 1212.45 L1114.45 1212.45 L1115.04 1212.45 L1115.62 1212.45 L1116.21 1212.45 L1116.8 1212.45 L1117.38 1212.45 L1117.97 1212.45 L1118.55 1212.45 L1119.14 1212.45 L1119.73 1212.45 L1120.31 1212.45 L1120.9 1212.45 L1121.49 1212.45 L1122.07 1212.45 L1122.66 1212.45 L1123.25 1212.45 L1123.83 1212.45 L1124.42 1212.45 L1125.01 1212.45 L1125.59 1212.45 L1126.18 1212.45 L1126.76 1212.45 L1127.35 1212.45 L1127.94 1212.45 L1128.52 1212.45 L1129.11 1212.45 L1129.7 1212.45 L1130.28 1212.45 L1130.87 1212.45 L1131.46 1212.45 L1132.04 1212.45 L1132.63 1212.45 L1133.21 1212.45 L1133.8 1212.45 L1134.39 1212.45 L1134.97 1212.45 L1135.56 1212.45 L1136.15 1212.45 L1136.73 1212.45 L1137.32 1212.45 L1137.91 1212.45 L1138.49 1212.45 L1139.08 1212.45 L1139.67 1212.45 L1140.25 1212.45 L1140.84 1212.45 L1141.42 1212.45 L1142.01 1212.45 L1142.6 1212.45 L1143.18 1212.45 L1143.77 1212.45 L1144.36 1212.45 L1144.94 1212.45 L1145.53 1212.45 L1146.12 1212.45 L1146.7 1212.45 L1147.29 1212.45 L1147.88 1212.45 L1148.46 1212.45 L1149.05 1212.45 L1149.63 1212.45 L1150.22 1212.45 L1150.81 1212.45 L1151.39 1212.45 L1151.98 1212.45 L1152.57 1212.45 L1153.15 1212.45 L1153.74 1212.45 L1154.33 1212.45 L1154.91 1212.45 L1155.5 1212.45 L1156.09 1212.45 L1156.67 1212.45 L1157.26 1212.45 L1157.84 1212.45 L1158.43 1212.45 L1159.02 1212.45 L1159.6 1212.45 L1160.19 1212.45 L1160.78 1212.45 L1161.36 1212.45 L1161.95 1212.45 L1162.54 1212.45 L1163.12 1212.45 L1163.71 1212.45 L1164.29 1212.45 L1164.88 1212.45 L1165.47 1212.45 L1166.05 1212.45 L1166.64 1212.45 L1167.23 1212.45 L1167.81 1212.45 L1168.4 1212.45 L1168.99 1212.45 L1169.57 1212.45 L1170.16 1212.45 L1170.75 1212.45 L1171.33 1212.45 L1171.92 1212.45 L1172.5 1212.45 L1173.09 1212.45 L1173.68 1212.45 L1174.26 1212.45 L1174.85 1212.45 L1175.44 1212.45 L1176.02 1212.45 L1176.61 1212.45 L1177.2 1212.45 L1177.78 1212.45 L1178.37 1212.45 L1178.96 1212.45 L1179.54 1212.45 L1180.13 1212.45 L1180.71 1212.45 L1181.3 1212.45 L1181.89 1212.45 L1182.47 1212.45 L1183.06 1212.45 L1183.65 1212.45 L1184.23 1212.45 L1184.82 1212.45 L1185.41 1212.45 L1185.99 1212.45 L1186.58 1212.45 L1187.16 1212.45 L1187.75 1212.45 L1188.34 1212.45 L1188.92 1212.45 L1189.51 1212.45 L1190.1 1212.45 L1190.68 1212.45 L1191.27 1212.45 L1191.86 1212.45 L1192.44 1212.45 L1193.03 1212.45 L1193.62 1212.45 L1194.2 1212.45 L1194.79 1212.45 L1195.37 1212.45 L1195.96 1212.45 L1196.55 1212.45 L1197.13 1212.45 L1197.72 1212.45 L1198.31 1212.45 L1198.89 1212.45 L1199.48 1212.45 L1200.07 1212.45 L1200.65 1212.45 L1201.24 1212.45 L1201.83 1212.45 L1202.41 1212.45 L1203 1212.45 L1203.58 1212.45 L1204.17 1212.45 L1204.76 1212.45 L1205.34 1212.45 L1205.93 1212.45 L1206.52 1212.45 L1207.1 1212.45 L1207.69 1212.45 L1208.28 1212.45 L1208.86 1212.45 L1209.45 1212.45 L1210.03 1212.45 L1210.62 1212.45 L1211.21 1212.45 L1211.79 1212.45 L1212.38 1212.45 L1212.97 1212.45 L1213.55 1212.45 L1214.14 1212.45 L1214.73 1212.45 L1215.31 1212.45 L1215.9 1212.45 L1216.49 1212.45 L1217.07 1212.45 L1217.66 1212.45 L1218.24 1212.45 L1218.83 1212.45 L1219.42 1212.45 L1220 1212.45 L1220.59 1212.45 L1221.18 1212.45 L1221.76 1212.45 L1222.35 1212.45 L1222.94 1212.45 L1223.52 1212.45 L1224.11 1212.45 L1224.7 1212.45 L1225.28 1212.45 L1225.87 1212.45 L1226.45 1212.45 L1227.04 1212.45 L1227.63 1212.45 L1228.21 1212.45 L1228.8 1212.45 L1229.39 1212.45 L1229.97 1212.45 L1230.56 1212.45 L1231.15 1212.45 L1231.73 1212.45 L1232.32 1212.45 L1232.91 1212.45 L1233.49 1212.45 L1234.08 1212.45 L1234.66 1212.45 L1235.25 1212.45 L1235.84 1212.45 L1236.42 1212.45 L1237.01 1212.45 L1237.6 1212.45 L1238.18 1212.45 L1238.77 1212.45 L1239.36 1212.45 L1239.94 1212.45 L1240.53 1212.45 L1241.11 1212.45 L1241.7 1212.45 L1242.29 1212.45 L1242.87 1212.45 L1243.46 1212.45 L1244.05 1212.45 L1244.63 1212.45 L1245.22 1212.45 L1245.81 1212.45 L1246.39 1212.45 L1246.98 1212.45 L1247.57 1212.45 L1248.15 1212.45 L1248.74 1212.45 L1249.32 1212.45 L1249.91 1212.45 L1250.5 1212.45 L1251.08 1212.45 L1251.67 1212.45 L1252.26 1212.45 L1252.84 1212.45 L1253.43 1212.45 L1254.02 1212.45 L1254.6 1212.45 L1255.19 1212.45 L1255.78 1212.45 L1256.36 1212.45 L1256.95 1212.45 L1257.53 1212.45 L1258.12 1212.45 L1258.71 1212.45 L1259.29 1212.45 L1259.88 1212.45 L1260.47 1212.45 L1261.05 1212.45 L1261.64 1212.45 L1262.23 1212.45 L1262.81 1212.45 L1263.4 1212.45 L1263.98 1212.45 L1264.57 1212.45 L1265.16 1212.45 L1265.74 1212.45 L1266.33 1212.45 L1266.92 1212.45 L1267.5 1212.45 L1268.09 1212.45 L1268.68 1212.45 L1269.26 1212.45 L1269.85 1212.45 L1270.44 1212.45 L1271.02 1212.45 L1271.61 1212.45 L1272.19 1212.45 L1272.78 1212.45 L1273.37 1212.45 L1273.95 1212.45 L1274.54 1212.45 L1275.13 1212.45 L1275.71 1212.45 L1276.3 1212.45 L1276.89 1212.45 L1277.47 1212.45 L1278.06 1212.45 L1278.65 1212.45 L1279.23 1212.45 L1279.82 1212.45 L1280.4 1212.45 L1280.99 1212.45 L1281.58 1212.45 L1282.16 1212.45 L1282.75 1212.45 L1283.34 1212.45 L1283.92 1212.45 L1284.51 1212.45 L1285.1 1212.45 L1285.68 1212.45 L1286.27 1212.45 L1286.86 1212.45 L1287.44 1212.45 L1288.03 1212.45 L1288.61 1212.45 L1289.2 1212.45 L1289.79 1212.45 L1290.37 1212.45 L1290.96 1212.45 L1291.55 1212.45 L1292.13 1212.45 L1292.72 1212.45 L1293.31 1212.45 L1293.89 1212.45 L1294.48 1212.45 L1295.06 1212.45 L1295.65 1212.45 L1296.24 1212.45 L1296.82 1212.45 L1297.41 1212.45 L1298 1212.45 L1298.58 1212.45 L1299.17 1212.45 L1299.76 1212.45 L1300.34 1212.45 L1300.93 1212.45 L1301.52 1212.45 L1302.1 1212.45 L1302.69 1212.45 L1303.27 1212.45 L1303.86 1212.45 L1304.45 1212.45 L1305.03 1212.45 L1305.62 1212.45 L1306.21 1212.45 L1306.79 1212.45 L1307.38 1212.45 L1307.97 1212.45 L1308.55 1212.45 L1309.14 1212.45 L1309.73 1212.45 L1310.31 1212.45 L1310.9 1212.45 L1311.48 1212.45 L1312.07 1212.45 L1312.66 1212.45 L1313.24 1212.45 L1313.83 1212.45 L1314.42 1212.45 L1315 1212.45 L1315.59 1212.45 L1316.18 1212.45 L1316.76 1212.45 L1317.35 1212.45 L1317.93 1212.45 L1318.52 1212.45 L1319.11 1212.45 L1319.69 1212.45 L1320.28 1212.45 L1320.87 1212.45 L1321.45 1212.45 L1322.04 1212.45 L1322.63 1212.45 L1323.21 1212.45 L1323.8 1212.45 L1324.39 1212.45 L1324.97 1212.45 L1325.56 1212.45 L1326.14 1212.45 L1326.73 1212.45 L1327.32 1212.45 L1327.9 1212.45 L1328.49 1212.45 L1329.08 1212.45 L1329.66 1212.45 L1330.25 1212.45 L1330.84 1212.45 L1331.42 1212.45 L1332.01 1212.45 L1332.6 1212.45 L1333.18 1212.45 L1333.77 1212.45 L1334.35 1212.45 L1334.94 1212.45 L1335.53 1212.45 L1336.11 1212.45 L1336.7 1212.45 L1337.29 1212.45 L1337.87 1212.45 L1338.46 1212.45 L1339.05 1212.45 L1339.63 1212.45 L1340.22 1212.45 L1340.8 1212.45 L1341.39 1212.45 L1341.98 1212.45 L1342.56 1212.45 L1343.15 1212.45 L1343.74 1212.45 L1344.32 1212.45 L1344.91 1212.45 L1345.5 1212.45 L1346.08 1212.45 L1346.67 1212.45 L1347.26 1212.45 L1347.84 1212.45 L1348.43 1212.45 L1349.01 1212.45 L1349.6 1212.45 L1350.19 1212.45 L1350.77 1212.45 L1351.36 1212.45 L1351.95 1212.45 L1352.53 1212.45 L1353.12 1212.45 L1353.71 1212.45 L1354.29 1212.45 L1354.88 1212.45 L1355.47 1212.45 L1356.05 1212.45 L1356.64 1212.45 L1357.22 1212.45 L1357.81 1212.45 L1358.4 1212.45 L1358.98 1212.45 L1359.57 1212.45 L1360.16 1212.45 L1360.74 1212.45 L1361.33 1212.45 L1361.92 1212.45 L1362.5 1212.45 L1363.09 1212.45 L1363.68 1212.45 L1364.26 1212.45 L1364.85 1212.45 L1365.43 1212.45 L1366.02 1212.45 L1366.61 1212.45 L1367.19 1212.45 L1367.78 1212.45 L1368.37 1212.45 L1368.95 1212.45 L1369.54 1212.45 L1370.13 1212.45 L1370.71 1212.45 L1371.3 1212.45 L1371.88 1212.45 L1372.47 1212.45 L1373.06 1212.45 L1373.64 1212.45 L1374.23 1212.45 L1374.82 1212.45 L1375.4 1212.45 L1375.99 1212.45 L1376.58 1212.45 L1377.16 1212.45 L1377.75 1212.45 L1378.34 1212.45 L1378.92 1212.45 L1379.51 1212.45 L1380.09 1212.45 L1380.68 1212.45 L1381.27 1212.45 L1381.85 1212.45 L1382.44 1212.45 L1383.03 1212.45 L1383.61 1212.45 L1384.2 1212.45 L1384.79 1212.45 L1385.37 1212.45 L1385.96 1212.45 L1386.55 1212.45 L1387.13 1212.45 L1387.72 1212.45 L1388.3 1212.45 L1388.89 1212.45 L1389.48 1212.45 L1390.06 1212.45 L1390.65 1212.45 L1391.24 1212.45 L1391.82 1212.45 L1392.41 1212.45 L1393 1212.45 L1393.58 1212.45 L1394.17 1212.45 L1394.75 1212.45 L1395.34 1212.45 L1395.93 1212.45 L1396.51 1212.45 L1397.1 1212.45 L1397.69 1212.45 L1398.27 1212.45 L1398.86 1212.45 L1399.45 1212.45 L1400.03 1212.45 L1400.62 1212.45 L1401.21 1212.45 L1401.79 1212.45 L1402.38 1212.45 L1402.96 1212.45 L1403.55 1212.45 L1404.14 1212.45 L1404.72 1212.45 L1405.31 1212.45 L1405.9 1212.45 L1406.48 1212.45 L1407.07 1212.45 L1407.66 1212.45 L1408.24 1212.45 L1408.83 1212.45 L1409.42 1212.45 L1410 1212.45 L1410.59 1212.45 L1411.17 1212.45 L1411.76 1212.45 L1412.35 1212.45 L1412.93 1212.45 L1413.52 1212.45 L1414.11 1212.45 L1414.69 1212.45 L1415.28 1212.45 L1415.87 1212.45 L1416.45 1212.45 L1417.04 1212.45 L1417.63 1212.45 L1418.21 1212.45 L1418.8 1212.45 L1419.38 1212.45 L1419.97 1212.45 L1420.56 1212.45 L1421.14 1212.45 L1421.73 1212.45 L1422.32 1212.45 L1422.9 1212.45 L1423.49 1212.45 L1424.08 1212.45 L1424.66 1212.45 L1425.25 1212.45 L1425.83 1212.45 L1426.42 1212.45 L1427.01 1212.45 L1427.59 1212.45 L1428.18 1212.45 L1428.77 1212.45 L1429.35 1212.45 L1429.94 1212.45 L1430.53 1212.45 L1431.11 1212.45 L1431.7 1212.45 L1432.29 1212.45 L1432.87 1212.45 L1433.46 1212.45 L1434.04 1212.45 L1434.63 1212.45 L1435.22 1212.45 L1435.8 1212.45 L1436.39 1212.45 L1436.98 1212.45 L1437.56 1212.45 L1438.15 1212.45 L1438.74 1212.45 L1439.32 1212.45 L1439.91 1212.45 L1440.5 1212.45 L1441.08 1212.45 L1441.67 1212.45 L1442.25 1212.45 L1442.84 1212.45 L1443.43 1212.45 L1444.01 1212.45 L1444.6 1212.45 L1445.19 1212.45 L1445.77 1212.45 L1446.36 1212.45 L1446.95 1212.45 L1447.53 1212.45 L1448.12 1212.45 L1448.7 1212.45 L1449.29 1212.45 L1449.88 1212.45 L1450.46 1212.45 L1451.05 1212.45 L1451.64 1212.45 L1452.22 1212.45 L1452.81 1212.45 L1453.4 1212.45 L1453.98 1212.45 L1454.57 1212.45 L1455.16 1212.45 L1455.74 1212.45 L1456.33 1212.45 L1456.91 1212.45 L1457.5 1212.45 L1458.09 1212.45 L1458.67 1212.45 L1459.26 1212.45 L1459.85 1212.45 L1460.43 1212.45 L1461.02 1212.45 L1461.61 1212.45 L1462.19 1212.45 L1462.78 1212.45 L1463.37 1212.45 L1463.95 1212.45 L1464.54 1212.45 L1465.12 1212.45 L1465.71 1212.45 L1466.3 1212.45 L1466.88 1212.45 L1467.47 1212.45 L1468.06 1212.45 L1468.64 1212.45 L1469.23 1212.45 L1469.82 1212.45 L1470.4 1212.45 L1470.99 1212.45 L1471.57 1212.45 L1472.16 1212.45 L1472.75 1212.45 L1473.33 1212.45 L1473.92 1212.45 L1474.51 1212.45 L1475.09 1212.45 L1475.68 1212.45 L1476.27 1212.45 L1476.85 1212.45 L1477.44 1212.45 L1478.03 1212.45 L1478.61 1212.45 L1479.2 1212.45 L1479.78 1212.45 L1480.37 1212.45 L1480.96 1212.45 L1481.54 1212.45 L1482.13 1212.45 L1482.72 1212.45 L1483.3 1212.45 L1483.89 1212.45 L1484.48 1212.45 L1485.06 1212.45 L1485.65 1212.45 L1486.24 1212.45 L1486.82 1212.45 L1487.41 1212.45 L1487.99 1212.45 L1488.58 1212.45 L1489.17 1212.45 L1489.75 1212.45 L1490.34 1212.45 L1490.93 1212.45 L1491.51 1212.45 L1492.1 1212.45 L1492.69 1212.45 L1493.27 1212.45 L1493.86 1212.45 L1494.45 1212.45 L1495.03 1212.45 L1495.62 1212.45 L1496.2 1212.45 L1496.79 1212.45 L1497.38 1212.45 L1497.96 1212.45 L1498.55 1212.45 L1499.14 1212.45 L1499.72 1212.45 L1500.31 1212.45 L1500.9 1212.45 L1501.48 1212.45 L1502.07 1212.45 L1502.65 1212.45 L1503.24 1212.45 L1503.83 1212.45 L1504.41 1212.45 L1505 1212.45 L1505.59 1212.45 L1506.17 1212.45 L1506.76 1212.45 L1507.35 1212.45 L1507.93 1212.45 L1508.52 1212.45 L1509.11 1212.45 L1509.69 1212.45 L1510.28 1212.45 L1510.86 1212.45 L1511.45 1212.45 L1512.04 1212.45 L1512.62 1212.45 L1513.21 1212.45 L1513.8 1212.45 L1514.38 1212.45 L1514.97 1212.45 L1515.56 1212.45 L1516.14 1212.45 L1516.73 1212.45 L1517.32 1212.45 L1517.9 1212.45 L1518.49 1212.45 L1519.07 1212.45 L1519.66 1212.45 L1520.25 1212.45 L1520.83 1212.45 L1521.42 1212.45 L1522.01 1212.45 L1522.59 1212.45 L1523.18 1212.45 L1523.77 1212.45 L1524.35 1212.45 L1524.94 1212.45 L1525.52 1212.45 L1526.11 1212.45 L1526.7 1212.45 L1527.28 1212.45 L1527.87 1212.45 L1528.46 1212.45 L1529.04 1212.45 L1529.63 1212.45 L1530.22 1212.45 L1530.8 1212.45 L1531.39 1212.45 L1531.98 1212.45 L1532.56 1212.45 L1533.15 1212.45 L1533.73 1212.45 L1534.32 1212.45 L1534.91 1212.45 L1535.49 1212.45 L1536.08 1212.45 L1536.67 1212.45 L1537.25 1212.45 L1537.84 1212.45 L1538.43 1212.45 L1539.01 1212.45 L1539.6 1212.45 L1540.19 1212.45 L1540.77 1212.45 L1541.36 1212.45 L1541.94 1212.45 L1542.53 1212.45 L1543.12 1212.45 L1543.7 1212.45 L1544.29 1212.45 L1544.88 1212.45 L1545.46 1212.45 L1546.05 1212.45 L1546.64 1212.45 L1547.22 1212.45 L1547.81 1212.45 L1548.4 1212.45 L1548.98 1212.45 L1549.57 1212.45 L1550.15 1212.45 L1550.74 1212.45 L1551.33 1212.45 L1551.91 1212.45 L1552.5 1212.45 L1553.09 1212.45 L1553.67 1212.45 L1554.26 1212.45 L1554.85 1212.45 L1555.43 1212.45 L1556.02 1212.45 L1556.6 1212.45 L1557.19 1212.45 L1557.78 1212.45 L1558.36 1212.45 L1558.95 1212.45 L1559.54 1212.45 L1560.12 1212.45 L1560.71 1212.45 L1561.3 1212.45 L1561.88 1212.45 L1562.47 1212.45 L1563.06 1212.45 L1563.64 1212.45 L1564.23 1212.45 L1564.81 1212.45 L1565.4 1212.45 L1565.99 1212.45 L1566.57 1212.45 L1567.16 1212.45 L1567.75 1212.45 L1568.33 1212.45 L1568.92 1212.45 L1569.51 1212.45 L1570.09 1212.45 L1570.68 1212.45 L1571.27 1212.45 L1571.85 1212.45 L1572.44 1212.45 L1573.02 1212.45 L1573.61 1212.45 L1574.2 1212.45 L1574.78 1212.45 L1575.37 1212.45 L1575.96 1212.45 L1576.54 1212.45 L1577.13 1212.45 L1577.72 1212.45 L1578.3 1212.45 L1578.89 1212.45 L1579.47 1212.45 L1580.06 1212.45 L1580.65 1212.45 L1581.23 1212.45 L1581.82 1212.45 L1582.41 1212.45 L1582.99 1212.45 L1583.58 1212.45 L1584.17 1212.45 L1584.75 1212.45 L1585.34 1212.45 L1585.93 1212.45 L1586.51 1212.45 L1587.1 1212.45 L1587.68 1212.45 L1588.27 1212.45 L1588.86 1212.45 L1589.44 1212.45 L1590.03 1212.45 L1590.62 1212.45 L1591.2 1212.45 L1591.79 1212.45 L1592.38 1212.45 L1592.96 1212.45 L1593.55 1212.45 L1594.14 1212.45 L1594.72 1212.45 L1595.31 1212.45 L1595.89 1212.45 L1596.48 1212.45 L1597.07 1212.45 L1597.65 1212.45 L1598.24 1212.45 L1598.83 1212.45 L1599.41 1212.45 L1600 1212.45 L1600.59 1212.45 L1601.17 1212.45 L1601.76 1212.45 L1602.34 1212.45 L1602.93 1212.45 L1603.52 1212.45 L1604.1 1212.45 L1604.69 1212.45 L1605.28 1212.45 L1605.86 1212.45 L1606.45 1212.45 L1607.04 1212.45 L1607.62 1212.45 L1608.21 1212.45 L1608.8 1212.45 L1609.38 1212.45 L1609.97 1212.45 L1610.55 1212.45 L1611.14 1212.45 L1611.73 1212.45 L1612.31 1212.45 L1612.9 1212.45 L1613.49 1212.45 L1614.07 1212.45 L1614.66 1212.45 L1615.25 1212.45 L1615.83 1212.45 L1616.42 1212.45 L1617.01 1212.45 L1617.59 1212.45 L1618.18 1212.45 L1618.76 1212.45 L1619.35 1212.45 L1619.94 1212.45 L1620.52 1212.45 L1621.11 1212.45 L1621.7 1212.45 L1622.28 1212.45 L1622.87 1212.45 L1623.46 1212.45 L1624.04 1212.45 L1624.63 1212.45 L1625.22 1212.45 L1625.8 1212.45 L1626.39 1212.45 L1626.97 1212.45 L1627.56 1212.45 L1628.15 1212.45 L1628.73 1212.45 L1629.32 1212.45 L1629.91 1212.45 L1630.49 1212.45 L1631.08 1212.45 L1631.67 1212.45 L1632.25 1212.45 L1632.84 1212.45 L1633.42 1212.45 L1634.01 1212.45 L1634.6 1212.45 L1635.18 1212.45 L1635.77 1212.45 L1636.36 1212.45 L1636.94 1212.45 L1637.53 1212.45 L1638.12 1212.45 L1638.7 1212.45 L1639.29 1212.45 L1639.88 1212.45 L1640.46 1212.45 L1641.05 1212.45 L1641.63 1212.45 L1642.22 1212.45 L1642.81 1212.45 L1643.39 1212.45 L1643.98 1212.45 L1644.57 1212.45 L1645.15 1212.45 L1645.74 1212.45 L1646.33 1212.45 L1646.91 1212.45 L1647.5 1212.45 L1648.09 1212.45 L1648.67 1212.45 L1649.26 1212.45 L1649.84 1212.45 L1650.43 1212.45 L1651.02 1212.45 L1651.6 1212.45 L1652.19 1212.45 L1652.78 1212.45 L1653.36 1212.45 L1653.95 1212.45 L1654.54 1212.45 L1655.12 1212.45 L1655.71 1212.45 L1656.29 1212.45 L1656.88 1212.45 L1657.47 1212.45 L1658.05 1212.45 L1658.64 1212.45 L1659.23 1212.45 L1659.81 1212.45 L1660.4 1212.45 L1660.99 1212.45 L1661.57 1212.45 L1662.16 1212.45 L1662.75 1212.45 L1663.33 1212.45 L1663.92 1212.45 L1664.5 1212.45 L1665.09 1212.45 L1665.68 1212.45 L1666.26 1212.45 L1666.85 1212.45 L1667.44 1212.45 L1668.02 1212.45 L1668.61 1212.45 L1669.2 1212.45 L1669.78 1212.45 L1670.37 1212.45 L1670.96 1212.45 L1671.54 1212.45 L1672.13 1212.45 L1672.71 1212.45 L1673.3 1212.45 L1673.89 1212.45 L1674.47 1212.45 L1675.06 1212.45 L1675.65 1212.45 L1676.23 1212.45 L1676.82 1212.45 L1677.41 1212.45 L1677.99 1212.45 L1678.58 1212.45 L1679.17 1212.45 L1679.75 1212.45 L1680.34 1212.45 L1680.92 1212.45 L1681.51 1212.45 L1682.1 1212.45 L1682.68 1212.45 L1683.27 1212.45 L1683.86 1212.45 L1684.44 1212.45 L1685.03 1212.45 L1685.62 1212.45 L1686.2 1212.45 L1686.79 1212.45 L1687.37 1212.45 L1687.96 1212.45 L1688.55 1212.45 L1689.13 1212.45 L1689.72 1212.45 L1690.31 1212.45 L1690.89 1212.45 L1691.48 1212.45 L1692.07 1212.45 L1692.65 1212.45 L1693.24 1212.45 L1693.83 1212.45 L1694.41 1212.45 L1695 1212.45 L1695.58 1212.45 L1696.17 1212.45 L1696.76 1212.45 L1697.34 1212.45 L1697.93 1212.45 L1698.52 1212.45 L1699.1 1212.45 L1699.69 1212.45 L1700.28 1212.45 L1700.86 1212.45 L1701.45 1212.45 L1702.04 1212.45 L1702.62 1212.45 L1703.21 1212.45 L1703.79 1212.45 L1704.38 1212.45 L1704.97 1212.45 L1705.55 1212.45 L1706.14 1212.45 L1706.73 1212.45 L1707.31 1212.45 L1707.9 1212.45 L1708.49 1212.45 L1709.07 1212.45 L1709.66 1212.45 L1710.24 1212.45 L1710.83 1212.45 L1711.42 1212.45 L1712 1212.45 L1712.59 1212.45 L1713.18 1212.45 L1713.76 1212.45 L1714.35 1212.45 L1714.94 1212.45 L1715.52 1212.45 L1716.11 1212.45 L1716.7 1212.45 L1717.28 1212.45 L1717.87 1212.45 L1718.45 1212.45 L1719.04 1212.45 L1719.63 1212.45 L1720.21 1212.45 L1720.8 1212.45 L1721.39 1212.45 L1721.97 1212.45 L1722.56 1212.45 L1723.15 1212.45 L1723.73 1212.45 L1724.32 1212.45 L1724.91 1212.45 L1725.49 1212.45 L1726.08 1212.45 L1726.66 1212.45 L1727.25 1212.45 L1727.84 1212.45 L1728.42 1212.45 L1729.01 1212.45 L1729.6 1212.45 L1730.18 1212.45 L1730.77 1212.45 L1731.36 1212.45 L1731.94 1212.45 L1732.53 1212.45 L1733.11 1212.45 L1733.7 1212.45 L1734.29 1212.45 L1734.87 1212.45 L1735.46 1212.45 L1736.05 1212.45 L1736.63 1212.45 L1737.22 1212.45 L1737.81 1212.45 L1738.39 1212.45 L1738.98 1212.45 L1739.57 1212.45 L1740.15 1212.45 L1740.74 1212.45 L1741.32 1212.45 L1741.91 1212.45 L1742.5 1212.45 L1743.08 1212.45 L1743.67 1212.45 L1744.26 1212.45 L1744.84 1212.45 L1745.43 1212.45 L1746.02 1212.45 L1746.6 1212.45 L1747.19 1212.45 L1747.78 1212.45 L1748.36 1212.45 L1748.95 1212.45 L1749.53 1212.45 L1750.12 1212.45 L1750.71 1212.45 L1751.29 1212.45 L1751.88 1212.45 L1752.47 1212.45 L1753.05 1212.45 L1753.64 1212.45 L1754.23 1212.45 L1754.81 1212.45 L1755.4 1212.45 L1755.99 1212.45 L1756.57 1212.45 L1757.16 1212.45 L1757.74 1212.45 L1758.33 1212.45 L1758.92 1212.45 L1759.5 1212.45 L1760.09 1212.45 L1760.68 1212.45 L1761.26 1212.45 L1761.85 1212.45 L1762.44 1212.45 L1763.02 1212.45 L1763.61 1212.45 L1764.19 1212.45 L1764.78 1212.45 L1765.37 1212.45 L1765.95 1212.45 L1766.54 1212.45 L1767.13 1212.45 L1767.71 1212.45 L1768.3 1212.45 L1768.89 1212.45 L1769.47 1212.45 L1770.06 1212.45 L1770.65 1212.45 L1771.23 1212.45 L1771.82 1212.45 L1772.4 1212.45 L1772.99 1212.45 L1773.58 1212.45 L1774.16 1212.45 L1774.75 1212.45 L1775.34 1212.45 L1775.92 1212.45 L1776.51 1212.45 L1777.1 1212.45 L1777.68 1212.45 L1778.27 1212.45 L1778.86 1212.45 L1779.44 1212.45 L1780.03 1212.45 L1780.61 1212.45 L1781.2 1212.45 L1781.79 1212.45 L1782.37 1212.45 L1782.96 1212.45 L1783.55 1212.45 L1784.13 1212.45 L1784.72 1212.45 L1785.31 1212.45 L1785.89 1212.45 L1786.48 1212.45 L1787.06 1212.45 L1787.65 1212.45 L1788.24 1212.45 L1788.82 1212.45 L1789.41 1212.45 L1790 1212.45 L1790.58 1212.45 L1791.17 1212.45 L1791.76 1212.45 L1792.34 1212.45 L1792.93 1212.45 L1793.52 1212.45 L1794.1 1212.45 L1794.69 1212.45 L1795.27 1212.45 L1795.86 1212.45 L1796.45 1212.45 L1797.03 1212.45 L1797.62 1212.45 L1798.21 1212.45 L1798.79 1212.45 L1799.38 1212.45 L1799.97 1212.45 L1800.55 1212.45 L1801.14 1212.45 L1801.73 1212.45 L1802.31 1212.45 L1802.9 1212.45 L1803.48 1212.45 L1804.07 1212.45 L1804.66 1212.45 L1805.24 1212.45 L1805.83 1212.45 L1806.42 1212.45 L1807 1212.45 L1807.59 1212.45 L1808.18 1212.45 L1808.76 1212.45 L1809.35 1212.45 L1809.94 1212.45 L1810.52 1212.45 L1811.11 1212.45 L1811.69 1212.45 L1812.28 1212.45 L1812.87 1212.45 L1813.45 1212.45 L1814.04 1212.45 L1814.63 1212.45 L1815.21 1212.45 L1815.8 1212.45 L1816.39 1212.45 L1816.97 1212.45 L1817.56 1212.45 L1818.14 1212.45 L1818.73 1212.45 L1819.32 1212.45 L1819.9 1212.45 L1820.49 1212.45 L1821.08 1212.45 L1821.66 1212.45 L1822.25 1212.45 L1822.84 1212.45 L1823.42 1212.45 L1824.01 1212.45 L1824.6 1212.45 L1825.18 1212.45 L1825.77 1212.45 L1826.35 1212.45 L1826.94 1212.45 L1827.53 1212.45 L1828.11 1212.45 L1828.7 1212.45 L1829.29 1212.45 L1829.87 1212.45 L1830.46 1212.45 L1831.05 1212.45 L1831.63 1212.45 L1832.22 1212.45 L1832.81 1212.45 L1833.39 1212.45 L1833.98 1212.45 L1834.56 1212.45 L1835.15 1212.45 L1835.74 1212.45 L1836.32 1212.45 L1836.91 1212.45 L1837.5 1212.45 L1838.08 1212.45 L1838.67 1212.45 L1839.26 1212.45 L1839.84 1212.45 L1840.43 1212.45 L1841.01 1212.45 L1841.6 1212.45 L1842.19 1212.45 L1842.77 1212.45 L1843.36 1212.45 L1843.95 1212.45 L1844.53 1212.45 L1845.12 1212.45 L1845.71 1212.45 L1846.29 1212.45 L1846.88 1212.45 L1847.47 1212.45 L1848.05 1212.45 L1848.64 1212.45 L1849.22 1212.45 L1849.81 1212.45 L1850.4 1212.45 L1850.98 1212.45 L1851.57 1212.45 L1852.16 1212.45 L1852.74 1212.45 L1853.33 1212.45 L1853.92 1212.45 L1854.5 1212.45 L1855.09 1212.45 L1855.68 1212.45 L1856.26 1212.45 L1856.85 1212.45 L1857.43 1212.45 L1858.02 1212.45 L1858.61 1212.45 L1859.19 1212.45 L1859.78 1212.45 L1860.37 1212.45 L1860.95 1212.45 L1861.54 1212.45 L1862.13 1212.45 L1862.71 1212.45 L1863.3 1212.45 L1863.88 1212.45 L1864.47 1212.45 L1865.06 1212.45 L1865.64 1212.45 L1866.23 1212.45 L1866.82 1212.45 L1867.4 1212.45 L1867.99 1212.45 L1868.58 1212.45 L1869.16 1212.45 L1869.75 1212.45 L1870.34 1212.45 L1870.92 1212.45 L1871.51 1212.45 L1872.09 1212.45 L1872.68 1212.45 L1873.27 1212.45 L1873.85 1212.45 L1874.44 1212.45 L1875.03 1212.45 L1875.61 1212.45 L1876.2 1212.45 L1876.79 1212.45 L1877.37 1212.45 L1877.96 1212.45 L1878.55 1212.45 L1879.13 1212.45 L1879.72 1212.45 L1880.3 1212.45 L1880.89 1212.45 L1881.48 1212.45 L1882.06 1212.45 L1882.65 1212.45 L1883.24 1212.45 L1883.82 1212.45 L1884.41 1212.45 L1885 1212.45 L1885.58 1212.45 L1886.17 1212.45 L1886.76 1212.45 L1887.34 1212.45 L1887.93 1212.45 L1888.51 1212.45 L1889.1 1212.45 L1889.69 1212.45 L1890.27 1212.45 L1890.86 1212.45 L1891.45 1212.45 L1892.03 1212.45 L1892.62 1212.45 L1893.21 1212.45 L1893.79 1212.45 L1894.38 1212.45 L1894.96 1212.45 L1895.55 1212.45 L1896.14 1212.45 L1896.72 1212.45 L1897.31 1212.45 L1897.9 1212.45 L1898.48 1212.45 L1899.07 1212.45 L1899.66 1212.45 L1900.24 1212.45 L1900.83 1212.45 L1901.42 1212.45 L1902 1212.45 L1902.59 1212.45 L1903.17 1212.45 L1903.76 1212.45 L1904.35 1212.45 L1904.93 1212.45 L1905.52 1212.45 L1906.11 1212.45 L1906.69 1212.45 L1907.28 1212.45 L1907.87 1212.45 L1908.45 1212.45 L1909.04 1212.45 L1909.63 1212.45 L1910.21 1212.45 L1910.8 1212.45 L1911.38 1212.45 L1911.97 1212.45 L1912.56 1212.45 L1913.14 1212.45 L1913.73 1212.45 L1914.32 1212.45 L1914.9 1212.45 L1915.49 1212.45 L1916.08 1212.45 L1916.66 1212.45 L1917.25 1212.45 L1917.83 1212.45 L1918.42 1212.45 L1919.01 1212.45 L1919.59 1212.45 L1920.18 1212.45 L1920.77 1212.45 L1921.35 1212.45 L1921.94 1212.45 L1922.53 1212.45 L1923.11 1212.45 L1923.7 1212.45 L1924.29 1212.45 L1924.87 1212.45 L1925.46 1212.45 L1926.04 1212.45 L1926.63 1212.45 L1927.22 1212.45 L1927.8 1212.45 L1928.39 1212.45 L1928.98 1212.45 L1929.56 1212.45 L1930.15 1212.45 L1930.74 1212.45 L1931.32 1212.45 L1931.91 1212.45 L1932.5 1212.45 L1933.08 1212.45 L1933.67 1212.45 L1934.25 1212.45 L1934.84 1212.45 L1935.43 1212.45 L1936.01 1212.45 L1936.6 1212.45 L1937.19 1212.45 L1937.77 1212.45 L1938.36 1212.45 L1938.95 1212.45 L1939.53 1212.45 L1940.12 1212.45 L1940.71 1212.45 L1941.29 1212.45 L1941.88 1212.45 L1942.46 1212.45 L1943.05 1212.45 L1943.64 1212.45 L1944.22 1212.45 L1944.81 1212.45 L1945.4 1212.45 L1945.98 1212.45 L1946.57 1212.45 L1947.16 1212.45 L1947.74 1212.45 L1948.33 1212.45 L1948.91 1212.45 L1949.5 1212.45 L1950.09 1212.45 L1950.67 1212.45 L1951.26 1212.45 L1951.85 1212.45 L1952.43 1212.45 L1953.02 1212.45 L1953.61 1212.45 L1954.19 1212.45 L1954.78 1212.45 L1955.37 1212.45 L1955.95 1212.45 L1956.54 1212.45 L1957.12 1212.45 L1957.71 1212.45 L1958.3 1212.45 L1958.88 1212.45 L1959.47 1212.45 L1960.06 1212.45 L1960.64 1212.45 L1961.23 1212.45 L1961.82 1212.45 L1962.4 1212.45 L1962.99 1212.45 L1963.58 1212.45 L1964.16 1212.45 L1964.75 1212.45 L1965.33 1212.45 L1965.92 1212.45 L1966.51 1212.45 L1967.09 1212.45 L1967.68 1212.45 L1968.27 1212.45 L1968.85 1212.45 L1969.44 1212.45 L1970.03 1212.45 L1970.61 1212.45 L1971.2 1212.45 L1971.78 1212.45 L1972.37 1212.45 L1972.96 1212.45 L1973.54 1212.45 L1974.13 1212.45 L1974.72 1212.45 L1975.3 1212.45 L1975.89 1212.45 L1976.48 1212.45 L1977.06 1212.45 L1977.65 1212.45 L1978.24 1212.45 L1978.82 1212.45 L1979.41 1212.45 L1979.99 1212.45 L1980.58 1212.45 L1981.17 1212.45 L1981.75 1212.45 L1982.34 1212.45 L1982.93 1212.45 L1983.51 1212.45 L1984.1 1212.45 L1984.69 1212.45 L1985.27 1212.45 L1985.86 1212.45 L1986.45 1212.45 L1987.03 1212.45 L1987.62 1212.45 L1988.2 1212.45 L1988.79 1212.45 L1989.38 1212.45 L1989.96 1212.45 L1990.55 1212.45 L1991.14 1212.45 L1991.72 1212.45 L1992.31 1212.45 L1992.9 1212.45 L1993.48 1212.45 L1994.07 1212.45 L1994.65 1212.45 L1995.24 1212.45 L1995.83 1212.45 L1996.41 1212.45 L1997 1212.45 L1997.59 1212.45 L1998.17 1212.45 L1998.76 1212.45 L1999.35 1212.45 L1999.93 1212.45 L2000.52 1212.45 L2001.11 1212.45 L2001.69 1212.45 L2002.28 1212.45 L2002.86 1212.45 L2003.45 1212.45 L2004.04 1212.45 L2004.62 1212.45 L2005.21 1212.45 L2005.8 1212.45 L2006.38 1212.45 L2006.97 1212.45 L2007.56 1212.45 L2008.14 1212.45 L2008.73 1212.45 L2009.32 1212.45 L2009.9 1212.45 L2010.49 1212.45 L2011.07 1212.45 L2011.66 1212.45 L2012.25 1212.45 L2012.83 1212.45 L2013.42 1212.45 L2014.01 1212.45 L2014.59 1212.45 L2015.18 1212.45 L2015.77 1212.45 L2016.35 1212.45 L2016.94 1212.45 L2017.53 1212.45 L2018.11 1212.45 L2018.7 1212.45 L2019.28 1212.45 L2019.87 1212.45 L2020.46 1212.45 L2021.04 1212.45 L2021.63 1212.45 L2022.22 1212.45 L2022.8 1212.45 L2023.39 1212.45 L2023.98 1212.45 L2024.56 1212.45 L2025.15 1212.45 L2025.73 1212.45 L2026.32 1212.45 L2026.91 1212.45 L2027.49 1212.45 L2028.08 1212.45 L2028.67 1212.45 L2029.25 1212.45 L2029.84 1212.45 L2030.43 1212.45 L2031.01 1212.45 L2031.6 1212.45 L2032.19 1212.45 L2032.77 1212.45 L2033.36 1212.45 L2033.94 1212.45 L2034.53 1212.45 L2035.12 1212.45 L2035.7 1212.45 L2036.29 1212.45 L2036.88 1212.45 L2037.46 1212.45 L2038.05 1212.45 L2038.64 1212.45 L2039.22 1212.45 L2039.81 1212.45 L2040.4 1212.45 L2040.98 1212.45 L2041.57 1212.45 L2042.15 1212.45 L2042.74 1212.45 L2043.33 1212.45 L2043.91 1212.45 L2044.5 1212.45 L2045.09 1212.45 L2045.67 1212.45 L2046.26 1212.45 L2046.85 1212.45 L2047.43 1212.45 L2048.02 1212.45 L2048.6 1212.45 L2049.19 1212.45 L2049.78 1212.45 L2050.36 1212.45 L2050.95 1212.45 L2051.54 1212.45 L2052.12 1212.45 L2052.71 1212.45 L2053.3 1212.45 L2053.88 1212.45 L2054.47 1212.45 L2055.06 1212.45 L2055.64 1212.45 L2056.23 1212.45 L2056.81 1212.45 L2057.4 1212.45 L2057.99 1212.45 L2058.57 1212.45 L2059.16 1212.45 L2059.75 1212.45 L2060.33 1212.45 L2060.92 1212.45 L2061.51 1212.45 L2062.09 1212.45 L2062.68 1212.45 L2063.27 1212.45 L2063.85 1212.45 L2064.44 1212.45 L2065.02 1212.45 L2065.61 1212.45 L2066.2 1212.45 L2066.78 1212.45 L2067.37 1212.45 L2067.96 1212.45 L2068.54 1212.45 L2069.13 1212.45 L2069.72 1212.45 L2070.3 1212.45 L2070.89 1212.45 L2071.48 1212.45 L2072.06 1212.45 L2072.65 1212.45 L2073.23 1212.45 L2073.82 1212.45 L2074.41 1212.45 L2074.99 1212.45 L2075.58 1212.45 L2076.17 1212.45 L2076.75 1212.45 L2077.34 1212.45 L2077.93 1212.45 L2078.51 1212.45 L2079.1 1212.45 L2079.68 1212.45 L2080.27 1212.45 L2080.86 1212.45 L2081.44 1212.45 L2082.03 1212.45 L2082.62 1212.45 L2083.2 1212.45 L2083.79 1212.45 L2084.38 1212.45 L2084.96 1212.45 L2085.55 1212.45 L2086.14 1212.45 L2086.72 1212.45 L2087.31 1212.45 L2087.89 1212.45 L2088.48 1212.45 L2089.07 1212.45 L2089.65 1212.45 L2090.24 1212.45 L2090.83 1212.45 L2091.41 1212.45 L2092 1212.45 L2092.59 1212.45 L2093.17 1212.45 L2093.76 1212.45 L2094.35 1212.45 L2094.93 1212.45 L2095.52 1212.45 L2096.1 1212.45 L2096.69 1212.45 L2097.28 1212.45 L2097.86 1212.45 L2098.45 1212.45 L2099.04 1212.45 L2099.62 1212.45 L2100.21 1212.45 L2100.8 1212.45 L2101.38 1212.45 L2101.97 1212.45 L2102.55 1212.45 L2103.14 1212.45 L2103.73 1212.45 L2104.31 1212.45 L2104.9 1212.45 L2105.49 1212.45 L2106.07 1212.45 L2106.66 1212.45 L2107.25 1212.45 L2107.83 1212.45 L2108.42 1212.45 L2109.01 1212.45 L2109.59 1212.45 L2110.18 1212.45 L2110.76 1212.45 L2111.35 1212.45 L2111.94 1212.45 L2112.52 1212.45 L2113.11 1212.45 L2113.7 1212.45 L2114.28 1212.45 L2114.87 1212.45 L2115.46 1212.45 L2116.04 1212.45 L2116.63 1212.45 L2117.22 1212.45 L2117.8 1212.45 L2118.39 1212.45 L2118.97 1212.45 L2119.56 1212.45 L2120.15 1212.45 L2120.73 1212.45 L2121.32 1212.45 L2121.91 1212.45 L2122.49 1212.45 L2123.08 1212.45 L2123.67 1212.45 L2124.25 1212.45 L2124.84 1212.45 L2125.42 1212.45 L2126.01 1212.45 L2126.6 1212.45 L2127.18 1212.45 L2127.77 1212.45 L2128.36 1212.45 L2128.94 1212.45 L2129.53 1212.45 L2130.12 1212.45 L2130.7 1212.45 L2131.29 1212.45 L2131.88 1212.45 L2132.46 1212.45 L2133.05 1212.45 L2133.63 1212.45 L2134.22 1212.45 L2134.81 1212.45 L2135.39 1212.45 L2135.98 1212.45 L2136.57 1212.45 L2137.15 1212.45 L2137.74 1212.45 L2138.33 1212.45 L2138.91 1212.45 L2139.5 1212.45 L2140.09 1212.45 L2140.67 1212.45 L2141.26 1212.45 L2141.84 1212.45 L2142.43 1212.45 L2143.02 1212.45 L2143.6 1212.45 L2144.19 1212.45 L2144.78 1212.45 L2145.36 1212.45 L2145.95 1212.45 L2146.54 1212.45 L2147.12 1212.45 L2147.71 1212.45 L2148.3 1212.45 L2148.88 1212.45 L2149.47 1212.45 L2150.05 1212.45 L2150.64 1212.45 L2151.23 1212.45 L2151.81 1212.45 L2152.4 1212.45 L2152.99 1212.45 L2153.57 1212.45 L2154.16 1212.45 L2154.75 1212.45 L2155.33 1212.45 L2155.92 1212.45 L2156.5 1212.45 L2157.09 1212.45 L2157.68 1212.45 L2158.26 1212.45 L2158.26 1212.28 L2157.68 1212.28 L2157.09 1212.28 L2156.5 1212.28 L2155.92 1212.28 L2155.33 1212.28 L2154.75 1212.28 L2154.16 1212.28 L2153.57 1212.28 L2152.99 1212.28 L2152.4 1212.28 L2151.81 1212.28 L2151.23 1212.28 L2150.64 1212.28 L2150.05 1212.28 L2149.47 1212.28 L2148.88 1212.28 L2148.3 1212.28 L2147.71 1212.28 L2147.12 1212.28 L2146.54 1212.28 L2145.95 1212.28 L2145.36 1212.28 L2144.78 1212.28 L2144.19 1212.28 L2143.6 1212.28 L2143.02 1212.28 L2142.43 1212.28 L2141.84 1212.28 L2141.26 1212.28 L2140.67 1212.28 L2140.09 1212.28 L2139.5 1212.28 L2138.91 1212.28 L2138.33 1212.28 L2137.74 1212.28 L2137.15 1212.28 L2136.57 1212.28 L2135.98 1212.28 L2135.39 1212.28 L2134.81 1212.28 L2134.22 1212.28 L2133.63 1212.28 L2133.05 1212.28 L2132.46 1212.28 L2131.88 1212.28 L2131.29 1212.28 L2130.7 1212.28 L2130.12 1212.28 L2129.53 1212.28 L2128.94 1212.28 L2128.36 1212.28 L2127.77 1212.28 L2127.18 1212.28 L2126.6 1212.28 L2126.01 1212.28 L2125.42 1212.28 L2124.84 1212.28 L2124.25 1212.28 L2123.67 1212.28 L2123.08 1212.28 L2122.49 1212.28 L2121.91 1212.28 L2121.32 1212.28 L2120.73 1212.28 L2120.15 1212.28 L2119.56 1212.28 L2118.97 1212.28 L2118.39 1212.28 L2117.8 1212.28 L2117.22 1212.28 L2116.63 1212.28 L2116.04 1212.28 L2115.46 1212.28 L2114.87 1212.28 L2114.28 1212.28 L2113.7 1212.28 L2113.11 1212.28 L2112.52 1212.28 L2111.94 1212.28 L2111.35 1212.28 L2110.76 1212.28 L2110.18 1212.28 L2109.59 1212.28 L2109.01 1212.28 L2108.42 1212.28 L2107.83 1212.28 L2107.25 1212.28 L2106.66 1212.28 L2106.07 1212.28 L2105.49 1212.28 L2104.9 1212.28 L2104.31 1212.28 L2103.73 1212.28 L2103.14 1212.28 L2102.55 1212.28 L2101.97 1212.28 L2101.38 1212.28 L2100.8 1212.28 L2100.21 1212.28 L2099.62 1212.28 L2099.04 1212.28 L2098.45 1212.28 L2097.86 1212.28 L2097.28 1212.28 L2096.69 1212.28 L2096.1 1212.28 L2095.52 1212.28 L2094.93 1212.28 L2094.35 1212.28 L2093.76 1212.28 L2093.17 1212.28 L2092.59 1212.28 L2092 1212.28 L2091.41 1212.28 L2090.83 1212.28 L2090.24 1212.28 L2089.65 1212.28 L2089.07 1212.28 L2088.48 1212.28 L2087.89 1212.28 L2087.31 1212.28 L2086.72 1212.28 L2086.14 1212.28 L2085.55 1212.28 L2084.96 1212.28 L2084.38 1212.28 L2083.79 1212.28 L2083.2 1212.28 L2082.62 1212.28 L2082.03 1212.28 L2081.44 1212.28 L2080.86 1212.28 L2080.27 1212.28 L2079.68 1212.28 L2079.1 1212.28 L2078.51 1212.28 L2077.93 1212.28 L2077.34 1212.28 L2076.75 1212.28 L2076.17 1212.28 L2075.58 1212.28 L2074.99 1212.28 L2074.41 1212.28 L2073.82 1212.28 L2073.23 1212.28 L2072.65 1212.28 L2072.06 1212.28 L2071.48 1212.28 L2070.89 1212.28 L2070.3 1212.28 L2069.72 1212.28 L2069.13 1212.28 L2068.54 1212.28 L2067.96 1212.28 L2067.37 1212.28 L2066.78 1212.28 L2066.2 1212.28 L2065.61 1212.28 L2065.02 1212.28 L2064.44 1212.28 L2063.85 1212.28 L2063.27 1212.28 L2062.68 1212.28 L2062.09 1212.28 L2061.51 1212.28 L2060.92 1212.28 L2060.33 1212.28 L2059.75 1212.28 L2059.16 1212.28 L2058.57 1212.28 L2057.99 1212.28 L2057.4 1212.28 L2056.81 1212.28 L2056.23 1212.28 L2055.64 1212.28 L2055.06 1212.28 L2054.47 1212.28 L2053.88 1212.28 L2053.3 1212.28 L2052.71 1212.28 L2052.12 1212.28 L2051.54 1212.28 L2050.95 1212.28 L2050.36 1212.28 L2049.78 1212.28 L2049.19 1212.28 L2048.6 1212.28 L2048.02 1212.28 L2047.43 1212.28 L2046.85 1212.28 L2046.26 1212.28 L2045.67 1212.28 L2045.09 1212.28 L2044.5 1212.28 L2043.91 1212.28 L2043.33 1212.28 L2042.74 1212.28 L2042.15 1212.28 L2041.57 1212.28 L2040.98 1212.28 L2040.4 1212.28 L2039.81 1212.28 L2039.22 1212.28 L2038.64 1212.28 L2038.05 1212.28 L2037.46 1212.28 L2036.88 1212.28 L2036.29 1212.28 L2035.7 1212.28 L2035.12 1212.28 L2034.53 1212.28 L2033.94 1212.28 L2033.36 1212.28 L2032.77 1212.28 L2032.19 1212.28 L2031.6 1212.28 L2031.01 1212.28 L2030.43 1212.28 L2029.84 1212.28 L2029.25 1212.28 L2028.67 1212.28 L2028.08 1212.28 L2027.49 1212.28 L2026.91 1212.28 L2026.32 1212.28 L2025.73 1212.28 L2025.15 1212.28 L2024.56 1212.28 L2023.98 1212.28 L2023.39 1212.28 L2022.8 1212.28 L2022.22 1212.28 L2021.63 1212.28 L2021.04 1212.28 L2020.46 1212.28 L2019.87 1212.28 L2019.28 1212.28 L2018.7 1212.28 L2018.11 1212.28 L2017.53 1212.28 L2016.94 1212.28 L2016.35 1212.28 L2015.77 1212.28 L2015.18 1212.28 L2014.59 1212.28 L2014.01 1212.28 L2013.42 1212.28 L2012.83 1212.28 L2012.25 1212.28 L2011.66 1212.28 L2011.07 1212.28 L2010.49 1212.28 L2009.9 1212.28 L2009.32 1212.28 L2008.73 1212.28 L2008.14 1212.28 L2007.56 1212.28 L2006.97 1212.28 L2006.38 1212.28 L2005.8 1212.28 L2005.21 1212.28 L2004.62 1212.28 L2004.04 1212.28 L2003.45 1212.28 L2002.86 1212.28 L2002.28 1212.28 L2001.69 1212.28 L2001.11 1212.28 L2000.52 1212.28 L1999.93 1212.28 L1999.35 1212.28 L1998.76 1212.28 L1998.17 1212.28 L1997.59 1212.28 L1997 1212.28 L1996.41 1212.28 L1995.83 1212.28 L1995.24 1212.28 L1994.65 1212.28 L1994.07 1212.28 L1993.48 1212.28 L1992.9 1212.28 L1992.31 1212.28 L1991.72 1212.28 L1991.14 1212.28 L1990.55 1212.28 L1989.96 1212.28 L1989.38 1212.28 L1988.79 1212.28 L1988.2 1212.28 L1987.62 1212.28 L1987.03 1212.28 L1986.45 1212.28 L1985.86 1212.28 L1985.27 1212.28 L1984.69 1212.28 L1984.1 1212.28 L1983.51 1212.28 L1982.93 1212.28 L1982.34 1212.28 L1981.75 1212.28 L1981.17 1212.28 L1980.58 1212.28 L1979.99 1212.28 L1979.41 1212.28 L1978.82 1212.28 L1978.24 1212.28 L1977.65 1212.28 L1977.06 1212.28 L1976.48 1212.28 L1975.89 1212.28 L1975.3 1212.28 L1974.72 1212.28 L1974.13 1212.28 L1973.54 1212.28 L1972.96 1212.28 L1972.37 1212.28 L1971.78 1212.28 L1971.2 1212.28 L1970.61 1212.28 L1970.03 1212.28 L1969.44 1212.28 L1968.85 1212.28 L1968.27 1212.28 L1967.68 1212.28 L1967.09 1212.28 L1966.51 1212.28 L1965.92 1212.28 L1965.33 1212.28 L1964.75 1212.28 L1964.16 1212.28 L1963.58 1212.28 L1962.99 1212.28 L1962.4 1212.28 L1961.82 1212.28 L1961.23 1212.28 L1960.64 1212.28 L1960.06 1212.28 L1959.47 1212.28 L1958.88 1212.28 L1958.3 1212.28 L1957.71 1212.28 L1957.12 1212.28 L1956.54 1212.28 L1955.95 1212.28 L1955.37 1212.28 L1954.78 1212.28 L1954.19 1212.28 L1953.61 1212.28 L1953.02 1212.28 L1952.43 1212.28 L1951.85 1212.28 L1951.26 1212.28 L1950.67 1212.28 L1950.09 1212.28 L1949.5 1212.28 L1948.91 1212.28 L1948.33 1212.28 L1947.74 1212.28 L1947.16 1212.28 L1946.57 1212.28 L1945.98 1212.28 L1945.4 1212.28 L1944.81 1212.28 L1944.22 1212.28 L1943.64 1212.28 L1943.05 1212.28 L1942.46 1212.28 L1941.88 1212.28 L1941.29 1212.28 L1940.71 1212.28 L1940.12 1212.28 L1939.53 1212.28 L1938.95 1212.28 L1938.36 1212.28 L1937.77 1212.28 L1937.19 1212.28 L1936.6 1212.28 L1936.01 1212.28 L1935.43 1212.28 L1934.84 1212.28 L1934.25 1212.28 L1933.67 1212.28 L1933.08 1212.28 L1932.5 1212.28 L1931.91 1212.28 L1931.32 1212.28 L1930.74 1212.28 L1930.15 1212.28 L1929.56 1212.28 L1928.98 1212.28 L1928.39 1212.28 L1927.8 1212.28 L1927.22 1212.28 L1926.63 1212.28 L1926.04 1212.28 L1925.46 1212.28 L1924.87 1212.28 L1924.29 1212.28 L1923.7 1212.28 L1923.11 1212.28 L1922.53 1212.28 L1921.94 1212.28 L1921.35 1212.28 L1920.77 1212.28 L1920.18 1212.28 L1919.59 1212.28 L1919.01 1212.28 L1918.42 1212.28 L1917.83 1212.28 L1917.25 1212.28 L1916.66 1212.28 L1916.08 1212.28 L1915.49 1212.28 L1914.9 1212.28 L1914.32 1212.28 L1913.73 1212.28 L1913.14 1212.28 L1912.56 1212.28 L1911.97 1212.28 L1911.38 1212.28 L1910.8 1212.28 L1910.21 1212.28 L1909.63 1212.28 L1909.04 1212.28 L1908.45 1212.28 L1907.87 1212.28 L1907.28 1212.28 L1906.69 1212.28 L1906.11 1212.28 L1905.52 1212.28 L1904.93 1212.28 L1904.35 1212.28 L1903.76 1212.28 L1903.17 1212.28 L1902.59 1212.28 L1902 1212.28 L1901.42 1212.28 L1900.83 1212.28 L1900.24 1212.28 L1899.66 1212.28 L1899.07 1212.28 L1898.48 1212.28 L1897.9 1212.28 L1897.31 1212.28 L1896.72 1212.28 L1896.14 1212.28 L1895.55 1212.28 L1894.96 1212.28 L1894.38 1212.28 L1893.79 1212.28 L1893.21 1212.28 L1892.62 1212.28 L1892.03 1212.28 L1891.45 1212.28 L1890.86 1212.28 L1890.27 1212.28 L1889.69 1212.28 L1889.1 1212.28 L1888.51 1212.28 L1887.93 1212.28 L1887.34 1212.28 L1886.76 1212.28 L1886.17 1212.28 L1885.58 1212.28 L1885 1212.28 L1884.41 1212.28 L1883.82 1212.28 L1883.24 1212.28 L1882.65 1212.28 L1882.06 1212.28 L1881.48 1212.28 L1880.89 1212.28 L1880.3 1212.28 L1879.72 1212.28 L1879.13 1212.28 L1878.55 1212.28 L1877.96 1212.28 L1877.37 1212.28 L1876.79 1212.28 L1876.2 1212.28 L1875.61 1212.28 L1875.03 1212.28 L1874.44 1212.28 L1873.85 1212.28 L1873.27 1212.28 L1872.68 1212.28 L1872.09 1212.28 L1871.51 1212.28 L1870.92 1212.28 L1870.34 1212.28 L1869.75 1212.28 L1869.16 1212.28 L1868.58 1212.28 L1867.99 1212.28 L1867.4 1212.28 L1866.82 1212.28 L1866.23 1212.28 L1865.64 1212.28 L1865.06 1212.28 L1864.47 1212.28 L1863.88 1212.28 L1863.3 1212.28 L1862.71 1212.28 L1862.13 1212.28 L1861.54 1212.28 L1860.95 1212.28 L1860.37 1212.28 L1859.78 1212.28 L1859.19 1212.28 L1858.61 1212.28 L1858.02 1212.28 L1857.43 1212.28 L1856.85 1212.28 L1856.26 1212.28 L1855.68 1212.28 L1855.09 1212.28 L1854.5 1212.28 L1853.92 1212.28 L1853.33 1212.28 L1852.74 1212.28 L1852.16 1212.28 L1851.57 1212.28 L1850.98 1212.28 L1850.4 1212.28 L1849.81 1212.28 L1849.22 1212.28 L1848.64 1212.28 L1848.05 1212.28 L1847.47 1212.28 L1846.88 1212.28 L1846.29 1212.28 L1845.71 1212.28 L1845.12 1212.28 L1844.53 1212.28 L1843.95 1212.28 L1843.36 1212.28 L1842.77 1212.28 L1842.19 1212.28 L1841.6 1212.28 L1841.01 1212.28 L1840.43 1212.28 L1839.84 1212.28 L1839.26 1212.28 L1838.67 1212.28 L1838.08 1212.28 L1837.5 1212.28 L1836.91 1212.28 L1836.32 1212.28 L1835.74 1212.28 L1835.15 1212.28 L1834.56 1212.28 L1833.98 1212.28 L1833.39 1212.28 L1832.81 1212.28 L1832.22 1212.28 L1831.63 1212.28 L1831.05 1212.28 L1830.46 1212.28 L1829.87 1212.28 L1829.29 1212.28 L1828.7 1212.28 L1828.11 1212.28 L1827.53 1212.28 L1826.94 1212.28 L1826.35 1212.28 L1825.77 1212.28 L1825.18 1212.28 L1824.6 1212.28 L1824.01 1212.28 L1823.42 1212.28 L1822.84 1212.28 L1822.25 1212.28 L1821.66 1212.28 L1821.08 1212.28 L1820.49 1212.28 L1819.9 1212.28 L1819.32 1212.28 L1818.73 1212.28 L1818.14 1212.28 L1817.56 1212.28 L1816.97 1212.28 L1816.39 1212.28 L1815.8 1212.28 L1815.21 1212.28 L1814.63 1212.28 L1814.04 1212.28 L1813.45 1212.28 L1812.87 1212.28 L1812.28 1212.28 L1811.69 1212.28 L1811.11 1212.28 L1810.52 1212.28 L1809.94 1212.28 L1809.35 1212.28 L1808.76 1212.28 L1808.18 1212.28 L1807.59 1212.28 L1807 1212.28 L1806.42 1212.28 L1805.83 1212.28 L1805.24 1212.28 L1804.66 1212.28 L1804.07 1212.28 L1803.48 1212.28 L1802.9 1212.28 L1802.31 1212.28 L1801.73 1212.28 L1801.14 1212.28 L1800.55 1212.28 L1799.97 1212.28 L1799.38 1212.28 L1798.79 1212.28 L1798.21 1212.28 L1797.62 1212.28 L1797.03 1212.28 L1796.45 1212.28 L1795.86 1212.28 L1795.27 1212.28 L1794.69 1212.28 L1794.1 1212.28 L1793.52 1212.28 L1792.93 1212.28 L1792.34 1212.28 L1791.76 1212.28 L1791.17 1212.28 L1790.58 1212.28 L1790 1212.28 L1789.41 1212.28 L1788.82 1212.28 L1788.24 1212.28 L1787.65 1212.28 L1787.06 1212.28 L1786.48 1212.28 L1785.89 1212.28 L1785.31 1212.28 L1784.72 1212.28 L1784.13 1212.28 L1783.55 1212.28 L1782.96 1212.28 L1782.37 1212.28 L1781.79 1212.28 L1781.2 1212.28 L1780.61 1212.28 L1780.03 1212.28 L1779.44 1212.28 L1778.86 1212.28 L1778.27 1212.28 L1777.68 1212.28 L1777.1 1212.28 L1776.51 1212.28 L1775.92 1212.28 L1775.34 1212.28 L1774.75 1212.28 L1774.16 1212.28 L1773.58 1212.28 L1772.99 1212.28 L1772.4 1212.28 L1771.82 1212.28 L1771.23 1212.28 L1770.65 1212.28 L1770.06 1212.28 L1769.47 1212.28 L1768.89 1212.28 L1768.3 1212.28 L1767.71 1212.28 L1767.13 1212.28 L1766.54 1212.28 L1765.95 1212.28 L1765.37 1212.28 L1764.78 1212.28 L1764.19 1212.28 L1763.61 1212.28 L1763.02 1212.28 L1762.44 1212.28 L1761.85 1212.28 L1761.26 1212.28 L1760.68 1212.28 L1760.09 1212.28 L1759.5 1212.28 L1758.92 1212.28 L1758.33 1212.28 L1757.74 1212.28 L1757.16 1212.28 L1756.57 1212.28 L1755.99 1212.28 L1755.4 1212.28 L1754.81 1212.28 L1754.23 1212.28 L1753.64 1212.28 L1753.05 1212.28 L1752.47 1212.28 L1751.88 1212.28 L1751.29 1212.28 L1750.71 1212.28 L1750.12 1212.28 L1749.53 1212.28 L1748.95 1212.28 L1748.36 1212.28 L1747.78 1212.28 L1747.19 1212.28 L1746.6 1212.28 L1746.02 1212.28 L1745.43 1212.28 L1744.84 1212.28 L1744.26 1212.28 L1743.67 1212.28 L1743.08 1212.28 L1742.5 1212.28 L1741.91 1212.28 L1741.32 1212.28 L1740.74 1212.28 L1740.15 1212.28 L1739.57 1212.28 L1738.98 1212.28 L1738.39 1212.28 L1737.81 1212.28 L1737.22 1212.28 L1736.63 1212.28 L1736.05 1212.28 L1735.46 1212.28 L1734.87 1212.28 L1734.29 1212.28 L1733.7 1212.28 L1733.11 1212.28 L1732.53 1212.28 L1731.94 1212.28 L1731.36 1212.28 L1730.77 1212.28 L1730.18 1212.28 L1729.6 1212.28 L1729.01 1212.28 L1728.42 1212.28 L1727.84 1212.28 L1727.25 1212.28 L1726.66 1212.28 L1726.08 1212.28 L1725.49 1212.28 L1724.91 1212.28 L1724.32 1212.28 L1723.73 1212.28 L1723.15 1212.28 L1722.56 1212.28 L1721.97 1212.28 L1721.39 1212.28 L1720.8 1212.28 L1720.21 1212.28 L1719.63 1212.28 L1719.04 1212.28 L1718.45 1212.28 L1717.87 1212.28 L1717.28 1212.28 L1716.7 1212.28 L1716.11 1212.28 L1715.52 1212.28 L1714.94 1212.28 L1714.35 1212.28 L1713.76 1212.28 L1713.18 1212.28 L1712.59 1212.28 L1712 1212.28 L1711.42 1212.28 L1710.83 1212.28 L1710.24 1212.28 L1709.66 1212.28 L1709.07 1212.28 L1708.49 1212.28 L1707.9 1212.28 L1707.31 1212.28 L1706.73 1212.28 L1706.14 1212.28 L1705.55 1212.28 L1704.97 1212.28 L1704.38 1212.28 L1703.79 1212.28 L1703.21 1212.28 L1702.62 1212.28 L1702.04 1212.28 L1701.45 1212.28 L1700.86 1212.28 L1700.28 1212.28 L1699.69 1212.28 L1699.1 1212.28 L1698.52 1212.28 L1697.93 1212.28 L1697.34 1212.28 L1696.76 1212.28 L1696.17 1212.28 L1695.58 1212.28 L1695 1212.28 L1694.41 1212.28 L1693.83 1212.28 L1693.24 1212.28 L1692.65 1212.28 L1692.07 1212.28 L1691.48 1212.28 L1690.89 1212.28 L1690.31 1212.28 L1689.72 1212.28 L1689.13 1212.28 L1688.55 1212.28 L1687.96 1212.28 L1687.37 1212.28 L1686.79 1212.28 L1686.2 1212.28 L1685.62 1212.28 L1685.03 1212.28 L1684.44 1212.28 L1683.86 1212.28 L1683.27 1212.28 L1682.68 1212.28 L1682.1 1212.28 L1681.51 1212.28 L1680.92 1212.28 L1680.34 1212.28 L1679.75 1212.28 L1679.17 1212.28 L1678.58 1212.28 L1677.99 1212.28 L1677.41 1212.28 L1676.82 1212.28 L1676.23 1212.28 L1675.65 1212.28 L1675.06 1212.28 L1674.47 1212.28 L1673.89 1212.28 L1673.3 1212.28 L1672.71 1212.28 L1672.13 1212.28 L1671.54 1212.28 L1670.96 1212.28 L1670.37 1212.28 L1669.78 1212.28 L1669.2 1212.28 L1668.61 1212.28 L1668.02 1212.28 L1667.44 1212.28 L1666.85 1212.28 L1666.26 1212.28 L1665.68 1212.28 L1665.09 1212.28 L1664.5 1212.28 L1663.92 1212.28 L1663.33 1212.28 L1662.75 1212.28 L1662.16 1212.28 L1661.57 1212.28 L1660.99 1212.28 L1660.4 1212.28 L1659.81 1212.28 L1659.23 1212.28 L1658.64 1212.28 L1658.05 1212.28 L1657.47 1212.28 L1656.88 1212.28 L1656.29 1212.28 L1655.71 1212.28 L1655.12 1212.28 L1654.54 1212.28 L1653.95 1212.28 L1653.36 1212.28 L1652.78 1212.28 L1652.19 1212.28 L1651.6 1212.28 L1651.02 1212.28 L1650.43 1212.28 L1649.84 1212.28 L1649.26 1212.28 L1648.67 1212.28 L1648.09 1212.28 L1647.5 1212.28 L1646.91 1212.28 L1646.33 1212.28 L1645.74 1212.28 L1645.15 1212.28 L1644.57 1212.28 L1643.98 1212.28 L1643.39 1212.28 L1642.81 1212.28 L1642.22 1212.28 L1641.63 1212.28 L1641.05 1212.28 L1640.46 1212.28 L1639.88 1212.28 L1639.29 1212.28 L1638.7 1212.28 L1638.12 1212.28 L1637.53 1212.28 L1636.94 1212.28 L1636.36 1212.28 L1635.77 1212.28 L1635.18 1212.28 L1634.6 1212.28 L1634.01 1212.28 L1633.42 1212.28 L1632.84 1212.28 L1632.25 1212.28 L1631.67 1212.28 L1631.08 1212.28 L1630.49 1212.28 L1629.91 1212.28 L1629.32 1212.28 L1628.73 1212.28 L1628.15 1212.28 L1627.56 1212.28 L1626.97 1212.28 L1626.39 1212.28 L1625.8 1212.28 L1625.22 1212.28 L1624.63 1212.28 L1624.04 1212.28 L1623.46 1212.28 L1622.87 1212.28 L1622.28 1212.28 L1621.7 1212.28 L1621.11 1212.28 L1620.52 1212.28 L1619.94 1212.28 L1619.35 1212.28 L1618.76 1212.28 L1618.18 1212.28 L1617.59 1212.28 L1617.01 1212.28 L1616.42 1212.28 L1615.83 1212.28 L1615.25 1212.28 L1614.66 1212.28 L1614.07 1212.28 L1613.49 1212.28 L1612.9 1212.28 L1612.31 1212.28 L1611.73 1212.28 L1611.14 1212.28 L1610.55 1212.28 L1609.97 1212.28 L1609.38 1212.28 L1608.8 1212.28 L1608.21 1212.28 L1607.62 1212.28 L1607.04 1212.28 L1606.45 1212.28 L1605.86 1212.28 L1605.28 1212.28 L1604.69 1212.28 L1604.1 1212.28 L1603.52 1212.28 L1602.93 1212.28 L1602.34 1212.28 L1601.76 1212.28 L1601.17 1212.28 L1600.59 1212.28 L1600 1212.28 L1599.41 1212.28 L1598.83 1212.28 L1598.24 1212.28 L1597.65 1212.28 L1597.07 1212.28 L1596.48 1212.28 L1595.89 1212.28 L1595.31 1212.28 L1594.72 1212.28 L1594.14 1212.28 L1593.55 1212.28 L1592.96 1212.28 L1592.38 1212.28 L1591.79 1212.28 L1591.2 1212.28 L1590.62 1212.28 L1590.03 1212.28 L1589.44 1212.28 L1588.86 1212.28 L1588.27 1212.28 L1587.68 1212.28 L1587.1 1212.28 L1586.51 1212.28 L1585.93 1212.28 L1585.34 1212.28 L1584.75 1212.28 L1584.17 1212.28 L1583.58 1212.28 L1582.99 1212.28 L1582.41 1212.28 L1581.82 1212.28 L1581.23 1212.28 L1580.65 1212.28 L1580.06 1212.28 L1579.47 1212.28 L1578.89 1212.28 L1578.3 1212.28 L1577.72 1212.28 L1577.13 1212.28 L1576.54 1212.28 L1575.96 1212.28 L1575.37 1212.28 L1574.78 1212.28 L1574.2 1212.28 L1573.61 1212.28 L1573.02 1212.28 L1572.44 1212.28 L1571.85 1212.28 L1571.27 1212.28 L1570.68 1212.28 L1570.09 1212.28 L1569.51 1212.28 L1568.92 1212.28 L1568.33 1212.28 L1567.75 1212.28 L1567.16 1212.28 L1566.57 1212.28 L1565.99 1212.28 L1565.4 1212.28 L1564.81 1212.28 L1564.23 1212.28 L1563.64 1212.28 L1563.06 1212.28 L1562.47 1212.28 L1561.88 1212.28 L1561.3 1212.28 L1560.71 1212.28 L1560.12 1212.28 L1559.54 1212.28 L1558.95 1212.28 L1558.36 1212.28 L1557.78 1212.28 L1557.19 1212.28 L1556.6 1212.28 L1556.02 1212.28 L1555.43 1212.28 L1554.85 1212.28 L1554.26 1212.28 L1553.67 1212.28 L1553.09 1212.28 L1552.5 1212.28 L1551.91 1212.28 L1551.33 1212.28 L1550.74 1212.28 L1550.15 1212.28 L1549.57 1212.28 L1548.98 1212.28 L1548.4 1212.28 L1547.81 1212.28 L1547.22 1212.28 L1546.64 1212.28 L1546.05 1212.28 L1545.46 1212.28 L1544.88 1212.28 L1544.29 1212.28 L1543.7 1212.28 L1543.12 1212.28 L1542.53 1212.28 L1541.94 1212.28 L1541.36 1212.28 L1540.77 1212.28 L1540.19 1212.28 L1539.6 1212.28 L1539.01 1212.28 L1538.43 1212.28 L1537.84 1212.28 L1537.25 1212.28 L1536.67 1212.28 L1536.08 1212.28 L1535.49 1212.28 L1534.91 1212.28 L1534.32 1212.28 L1533.73 1212.28 L1533.15 1212.28 L1532.56 1212.28 L1531.98 1212.28 L1531.39 1212.28 L1530.8 1212.28 L1530.22 1212.28 L1529.63 1212.28 L1529.04 1212.28 L1528.46 1212.28 L1527.87 1212.28 L1527.28 1212.28 L1526.7 1212.28 L1526.11 1212.28 L1525.52 1212.28 L1524.94 1212.28 L1524.35 1212.28 L1523.77 1212.28 L1523.18 1212.28 L1522.59 1212.28 L1522.01 1212.28 L1521.42 1212.28 L1520.83 1212.28 L1520.25 1212.28 L1519.66 1212.28 L1519.07 1212.28 L1518.49 1212.28 L1517.9 1212.28 L1517.32 1212.28 L1516.73 1212.28 L1516.14 1212.28 L1515.56 1212.28 L1514.97 1212.28 L1514.38 1212.28 L1513.8 1212.28 L1513.21 1212.28 L1512.62 1212.28 L1512.04 1212.28 L1511.45 1212.28 L1510.86 1212.28 L1510.28 1212.28 L1509.69 1212.28 L1509.11 1212.28 L1508.52 1212.28 L1507.93 1212.28 L1507.35 1212.28 L1506.76 1212.28 L1506.17 1212.28 L1505.59 1212.28 L1505 1212.28 L1504.41 1212.28 L1503.83 1212.28 L1503.24 1212.28 L1502.65 1212.28 L1502.07 1212.28 L1501.48 1212.28 L1500.9 1212.28 L1500.31 1212.28 L1499.72 1212.28 L1499.14 1212.28 L1498.55 1212.28 L1497.96 1212.28 L1497.38 1212.28 L1496.79 1212.28 L1496.2 1212.28 L1495.62 1212.28 L1495.03 1212.28 L1494.45 1212.28 L1493.86 1212.28 L1493.27 1212.28 L1492.69 1212.28 L1492.1 1212.28 L1491.51 1212.28 L1490.93 1212.28 L1490.34 1212.28 L1489.75 1212.28 L1489.17 1212.28 L1488.58 1212.28 L1487.99 1212.28 L1487.41 1212.28 L1486.82 1212.28 L1486.24 1212.28 L1485.65 1212.28 L1485.06 1212.28 L1484.48 1212.28 L1483.89 1212.28 L1483.3 1212.28 L1482.72 1212.28 L1482.13 1212.28 L1481.54 1212.28 L1480.96 1212.28 L1480.37 1212.28 L1479.78 1212.28 L1479.2 1212.28 L1478.61 1212.28 L1478.03 1212.28 L1477.44 1212.28 L1476.85 1212.28 L1476.27 1212.28 L1475.68 1212.28 L1475.09 1212.28 L1474.51 1212.28 L1473.92 1212.28 L1473.33 1212.28 L1472.75 1212.28 L1472.16 1212.28 L1471.57 1212.28 L1470.99 1212.28 L1470.4 1212.28 L1469.82 1212.28 L1469.23 1212.28 L1468.64 1212.28 L1468.06 1212.28 L1467.47 1212.28 L1466.88 1212.28 L1466.3 1212.28 L1465.71 1212.28 L1465.12 1212.28 L1464.54 1212.28 L1463.95 1212.28 L1463.37 1212.28 L1462.78 1212.28 L1462.19 1212.28 L1461.61 1212.28 L1461.02 1212.28 L1460.43 1212.28 L1459.85 1212.28 L1459.26 1212.28 L1458.67 1212.28 L1458.09 1212.28 L1457.5 1212.28 L1456.91 1212.28 L1456.33 1212.28 L1455.74 1212.28 L1455.16 1212.28 L1454.57 1212.28 L1453.98 1212.28 L1453.4 1212.28 L1452.81 1212.28 L1452.22 1212.28 L1451.64 1212.28 L1451.05 1212.28 L1450.46 1212.28 L1449.88 1212.28 L1449.29 1212.28 L1448.7 1212.28 L1448.12 1212.28 L1447.53 1212.28 L1446.95 1212.28 L1446.36 1212.28 L1445.77 1212.28 L1445.19 1212.28 L1444.6 1212.28 L1444.01 1212.28 L1443.43 1212.28 L1442.84 1212.28 L1442.25 1212.28 L1441.67 1212.28 L1441.08 1212.28 L1440.5 1212.28 L1439.91 1212.28 L1439.32 1212.28 L1438.74 1212.28 L1438.15 1212.28 L1437.56 1212.28 L1436.98 1212.28 L1436.39 1212.28 L1435.8 1212.28 L1435.22 1212.28 L1434.63 1212.28 L1434.04 1212.28 L1433.46 1212.28 L1432.87 1212.28 L1432.29 1212.28 L1431.7 1212.28 L1431.11 1212.28 L1430.53 1212.28 L1429.94 1212.28 L1429.35 1212.28 L1428.77 1212.28 L1428.18 1212.28 L1427.59 1212.28 L1427.01 1212.28 L1426.42 1212.28 L1425.83 1212.28 L1425.25 1212.28 L1424.66 1212.28 L1424.08 1212.28 L1423.49 1212.28 L1422.9 1212.28 L1422.32 1212.28 L1421.73 1212.28 L1421.14 1212.28 L1420.56 1212.28 L1419.97 1212.28 L1419.38 1212.28 L1418.8 1212.28 L1418.21 1212.28 L1417.63 1212.28 L1417.04 1212.28 L1416.45 1212.28 L1415.87 1212.28 L1415.28 1212.28 L1414.69 1212.28 L1414.11 1212.28 L1413.52 1212.28 L1412.93 1212.28 L1412.35 1212.28 L1411.76 1212.28 L1411.17 1212.28 L1410.59 1212.28 L1410 1212.28 L1409.42 1212.28 L1408.83 1212.28 L1408.24 1212.28 L1407.66 1212.28 L1407.07 1212.28 L1406.48 1212.28 L1405.9 1212.28 L1405.31 1212.28 L1404.72 1212.28 L1404.14 1212.28 L1403.55 1212.28 L1402.96 1212.28 L1402.38 1212.28 L1401.79 1212.28 L1401.21 1212.28 L1400.62 1212.28 L1400.03 1212.28 L1399.45 1212.28 L1398.86 1212.28 L1398.27 1212.28 L1397.69 1212.28 L1397.1 1212.28 L1396.51 1212.28 L1395.93 1212.28 L1395.34 1212.28 L1394.75 1212.28 L1394.17 1212.28 L1393.58 1212.28 L1393 1212.28 L1392.41 1212.28 L1391.82 1212.28 L1391.24 1212.28 L1390.65 1212.28 L1390.06 1212.28 L1389.48 1212.28 L1388.89 1212.28 L1388.3 1212.28 L1387.72 1212.28 L1387.13 1212.28 L1386.55 1212.28 L1385.96 1212.28 L1385.37 1212.28 L1384.79 1212.28 L1384.2 1212.28 L1383.61 1212.28 L1383.03 1212.28 L1382.44 1212.28 L1381.85 1212.28 L1381.27 1212.28 L1380.68 1212.28 L1380.09 1212.28 L1379.51 1212.28 L1378.92 1212.28 L1378.34 1212.28 L1377.75 1212.28 L1377.16 1212.28 L1376.58 1212.28 L1375.99 1212.28 L1375.4 1212.28 L1374.82 1212.28 L1374.23 1212.28 L1373.64 1212.28 L1373.06 1212.28 L1372.47 1212.28 L1371.88 1212.28 L1371.3 1212.28 L1370.71 1212.28 L1370.13 1212.28 L1369.54 1212.28 L1368.95 1212.28 L1368.37 1212.28 L1367.78 1212.28 L1367.19 1212.28 L1366.61 1212.28 L1366.02 1212.28 L1365.43 1212.28 L1364.85 1212.28 L1364.26 1212.28 L1363.68 1212.28 L1363.09 1212.28 L1362.5 1212.28 L1361.92 1212.28 L1361.33 1212.28 L1360.74 1212.28 L1360.16 1212.28 L1359.57 1212.28 L1358.98 1212.28 L1358.4 1212.28 L1357.81 1212.28 L1357.22 1212.28 L1356.64 1212.28 L1356.05 1212.28 L1355.47 1212.28 L1354.88 1212.28 L1354.29 1212.28 L1353.71 1212.28 L1353.12 1212.28 L1352.53 1212.28 L1351.95 1212.28 L1351.36 1212.28 L1350.77 1212.28 L1350.19 1212.28 L1349.6 1212.28 L1349.01 1212.28 L1348.43 1212.28 L1347.84 1212.28 L1347.26 1212.28 L1346.67 1212.28 L1346.08 1212.28 L1345.5 1212.28 L1344.91 1212.28 L1344.32 1212.28 L1343.74 1212.28 L1343.15 1212.28 L1342.56 1212.28 L1341.98 1212.28 L1341.39 1212.28 L1340.8 1212.28 L1340.22 1212.28 L1339.63 1212.28 L1339.05 1212.28 L1338.46 1212.28 L1337.87 1212.28 L1337.29 1212.28 L1336.7 1212.28 L1336.11 1212.28 L1335.53 1212.28 L1334.94 1212.28 L1334.35 1212.28 L1333.77 1212.28 L1333.18 1212.28 L1332.6 1212.28 L1332.01 1212.28 L1331.42 1212.28 L1330.84 1212.28 L1330.25 1212.28 L1329.66 1212.28 L1329.08 1212.28 L1328.49 1212.28 L1327.9 1212.28 L1327.32 1212.28 L1326.73 1212.28 L1326.14 1212.28 L1325.56 1212.28 L1324.97 1212.28 L1324.39 1212.28 L1323.8 1212.28 L1323.21 1212.28 L1322.63 1212.28 L1322.04 1212.28 L1321.45 1212.28 L1320.87 1212.28 L1320.28 1212.28 L1319.69 1212.28 L1319.11 1212.28 L1318.52 1212.28 L1317.93 1212.28 L1317.35 1212.28 L1316.76 1212.28 L1316.18 1212.28 L1315.59 1212.28 L1315 1212.28 L1314.42 1212.28 L1313.83 1212.28 L1313.24 1212.28 L1312.66 1212.28 L1312.07 1212.28 L1311.48 1212.28 L1310.9 1212.28 L1310.31 1212.28 L1309.73 1212.28 L1309.14 1212.28 L1308.55 1212.28 L1307.97 1212.28 L1307.38 1212.28 L1306.79 1212.28 L1306.21 1212.28 L1305.62 1212.28 L1305.03 1212.28 L1304.45 1212.28 L1303.86 1212.28 L1303.27 1212.28 L1302.69 1212.28 L1302.1 1212.28 L1301.52 1212.28 L1300.93 1212.28 L1300.34 1212.28 L1299.76 1212.28 L1299.17 1212.28 L1298.58 1212.28 L1298 1212.28 L1297.41 1212.28 L1296.82 1212.28 L1296.24 1212.28 L1295.65 1212.28 L1295.06 1212.28 L1294.48 1212.28 L1293.89 1212.28 L1293.31 1212.28 L1292.72 1212.28 L1292.13 1212.28 L1291.55 1212.28 L1290.96 1212.28 L1290.37 1212.28 L1289.79 1212.28 L1289.2 1212.28 L1288.61 1212.28 L1288.03 1212.28 L1287.44 1212.28 L1286.86 1212.28 L1286.27 1212.28 L1285.68 1212.28 L1285.1 1212.28 L1284.51 1212.28 L1283.92 1212.28 L1283.34 1212.28 L1282.75 1212.28 L1282.16 1212.28 L1281.58 1212.28 L1280.99 1212.28 L1280.4 1212.28 L1279.82 1212.28 L1279.23 1212.28 L1278.65 1212.28 L1278.06 1212.28 L1277.47 1212.28 L1276.89 1212.28 L1276.3 1212.28 L1275.71 1212.28 L1275.13 1212.28 L1274.54 1212.28 L1273.95 1212.28 L1273.37 1212.28 L1272.78 1212.28 L1272.19 1212.28 L1271.61 1212.28 L1271.02 1212.28 L1270.44 1212.28 L1269.85 1212.28 L1269.26 1212.28 L1268.68 1212.28 L1268.09 1212.28 L1267.5 1212.28 L1266.92 1212.28 L1266.33 1212.28 L1265.74 1212.28 L1265.16 1212.28 L1264.57 1212.28 L1263.98 1212.28 L1263.4 1212.28 L1262.81 1212.28 L1262.23 1212.28 L1261.64 1212.28 L1261.05 1212.28 L1260.47 1212.28 L1259.88 1212.28 L1259.29 1212.28 L1258.71 1212.28 L1258.12 1212.28 L1257.53 1212.28 L1256.95 1212.28 L1256.36 1212.28 L1255.78 1212.28 L1255.19 1212.28 L1254.6 1212.28 L1254.02 1212.28 L1253.43 1212.28 L1252.84 1212.28 L1252.26 1212.28 L1251.67 1212.28 L1251.08 1212.28 L1250.5 1212.28 L1249.91 1212.28 L1249.32 1212.28 L1248.74 1212.28 L1248.15 1212.28 L1247.57 1212.28 L1246.98 1212.28 L1246.39 1212.28 L1245.81 1212.28 L1245.22 1212.28 L1244.63 1212.28 L1244.05 1212.28 L1243.46 1212.28 L1242.87 1212.28 L1242.29 1212.28 L1241.7 1212.28 L1241.11 1212.28 L1240.53 1212.28 L1239.94 1212.28 L1239.36 1212.28 L1238.77 1212.28 L1238.18 1212.28 L1237.6 1212.28 L1237.01 1212.28 L1236.42 1212.28 L1235.84 1212.28 L1235.25 1212.28 L1234.66 1212.28 L1234.08 1212.28 L1233.49 1212.28 L1232.91 1212.28 L1232.32 1212.28 L1231.73 1212.28 L1231.15 1212.28 L1230.56 1212.28 L1229.97 1212.28 L1229.39 1212.28 L1228.8 1212.28 L1228.21 1212.28 L1227.63 1212.28 L1227.04 1212.28 L1226.45 1212.28 L1225.87 1212.28 L1225.28 1212.28 L1224.7 1212.28 L1224.11 1212.28 L1223.52 1212.28 L1222.94 1212.28 L1222.35 1212.28 L1221.76 1212.28 L1221.18 1212.28 L1220.59 1212.28 L1220 1212.28 L1219.42 1212.28 L1218.83 1212.28 L1218.24 1212.28 L1217.66 1212.28 L1217.07 1212.28 L1216.49 1212.28 L1215.9 1212.28 L1215.31 1212.28 L1214.73 1212.28 L1214.14 1212.28 L1213.55 1212.28 L1212.97 1212.28 L1212.38 1212.28 L1211.79 1212.28 L1211.21 1212.28 L1210.62 1212.28 L1210.03 1212.28 L1209.45 1212.28 L1208.86 1212.28 L1208.28 1212.28 L1207.69 1212.28 L1207.1 1212.28 L1206.52 1212.28 L1205.93 1212.28 L1205.34 1212.28 L1204.76 1212.28 L1204.17 1212.28 L1203.58 1212.28 L1203 1212.28 L1202.41 1212.28 L1201.83 1212.28 L1201.24 1212.28 L1200.65 1212.28 L1200.07 1212.28 L1199.48 1212.28 L1198.89 1212.28 L1198.31 1212.28 L1197.72 1212.28 L1197.13 1212.28 L1196.55 1212.28 L1195.96 1212.28 L1195.37 1212.28 L1194.79 1212.28 L1194.2 1212.28 L1193.62 1212.28 L1193.03 1212.28 L1192.44 1212.28 L1191.86 1212.28 L1191.27 1212.28 L1190.68 1212.28 L1190.1 1212.28 L1189.51 1212.28 L1188.92 1212.28 L1188.34 1212.28 L1187.75 1212.28 L1187.16 1212.28 L1186.58 1212.28 L1185.99 1212.28 L1185.41 1212.28 L1184.82 1212.28 L1184.23 1212.28 L1183.65 1212.28 L1183.06 1212.28 L1182.47 1212.28 L1181.89 1212.28 L1181.3 1212.28 L1180.71 1212.28 L1180.13 1212.28 L1179.54 1212.28 L1178.96 1212.28 L1178.37 1212.28 L1177.78 1212.28 L1177.2 1212.28 L1176.61 1212.28 L1176.02 1212.28 L1175.44 1212.28 L1174.85 1212.28 L1174.26 1212.28 L1173.68 1212.28 L1173.09 1212.28 L1172.5 1212.28 L1171.92 1212.28 L1171.33 1212.28 L1170.75 1212.28 L1170.16 1212.28 L1169.57 1212.28 L1168.99 1212.28 L1168.4 1212.28 L1167.81 1212.28 L1167.23 1212.28 L1166.64 1212.28 L1166.05 1212.28 L1165.47 1212.28 L1164.88 1212.28 L1164.29 1212.28 L1163.71 1212.28 L1163.12 1212.28 L1162.54 1212.28 L1161.95 1212.28 L1161.36 1212.28 L1160.78 1212.28 L1160.19 1212.28 L1159.6 1212.28 L1159.02 1212.28 L1158.43 1212.28 L1157.84 1212.28 L1157.26 1212.28 L1156.67 1212.28 L1156.09 1212.28 L1155.5 1212.28 L1154.91 1212.28 L1154.33 1212.28 L1153.74 1212.28 L1153.15 1212.28 L1152.57 1212.28 L1151.98 1212.28 L1151.39 1212.28 L1150.81 1212.28 L1150.22 1212.28 L1149.63 1212.28 L1149.05 1212.28 L1148.46 1212.28 L1147.88 1212.28 L1147.29 1212.28 L1146.7 1212.28 L1146.12 1212.28 L1145.53 1212.28 L1144.94 1212.28 L1144.36 1212.28 L1143.77 1212.28 L1143.18 1212.28 L1142.6 1212.28 L1142.01 1212.28 L1141.42 1212.28 L1140.84 1212.28 L1140.25 1212.28 L1139.67 1212.28 L1139.08 1212.28 L1138.49 1212.28 L1137.91 1212.28 L1137.32 1212.28 L1136.73 1212.28 L1136.15 1212.28 L1135.56 1212.28 L1134.97 1212.28 L1134.39 1212.28 L1133.8 1212.28 L1133.21 1212.28 L1132.63 1212.28 L1132.04 1212.28 L1131.46 1212.28 L1130.87 1212.28 L1130.28 1212.28 L1129.7 1212.28 L1129.11 1212.28 L1128.52 1212.28 L1127.94 1212.28 L1127.35 1212.28 L1126.76 1212.28 L1126.18 1212.28 L1125.59 1212.28 L1125.01 1212.28 L1124.42 1212.28 L1123.83 1212.28 L1123.25 1212.28 L1122.66 1212.28 L1122.07 1212.28 L1121.49 1212.28 L1120.9 1212.28 L1120.31 1212.28 L1119.73 1212.28 L1119.14 1212.28 L1118.55 1212.28 L1117.97 1212.28 L1117.38 1212.28 L1116.8 1212.28 L1116.21 1212.28 L1115.62 1212.28 L1115.04 1212.28 L1114.45 1212.28 L1113.86 1212.28 L1113.28 1212.28 L1112.69 1212.28 L1112.1 1212.28 L1111.52 1212.28 L1110.93 1212.28 L1110.34 1212.28 L1109.76 1212.28 L1109.17 1212.28 L1108.59 1212.28 L1108 1212.28 L1107.41 1212.28 L1106.83 1212.28 L1106.24 1212.28 L1105.65 1212.28 L1105.07 1212.28 L1104.48 1212.28 L1103.89 1212.28 L1103.31 1212.28 L1102.72 1212.28 L1102.14 1212.28 L1101.55 1212.28 L1100.96 1212.28 L1100.38 1212.28 L1099.79 1212.28 L1099.2 1212.28 L1098.62 1212.28 L1098.03 1212.28 L1097.44 1212.28 L1096.86 1212.28 L1096.27 1212.28 L1095.68 1212.28 L1095.1 1212.28 L1094.51 1212.28 L1093.93 1212.28 L1093.34 1212.28 L1092.75 1212.28 L1092.17 1212.28 L1091.58 1212.28 L1090.99 1212.28 L1090.41 1212.28 L1089.82 1212.28 L1089.23 1212.28 L1088.65 1212.28 L1088.06 1212.28 L1087.47 1212.28 L1086.89 1212.28 L1086.3 1212.28 L1085.72 1212.28 L1085.13 1212.28 L1084.54 1212.28 L1083.96 1212.28 L1083.37 1212.28 L1082.78 1212.28 L1082.2 1212.28 L1081.61 1212.28 L1081.02 1212.28 L1080.44 1212.28 L1079.85 1212.28 L1079.26 1212.28 L1078.68 1212.28 L1078.09 1212.28 L1077.51 1212.28 L1076.92 1212.28 L1076.33 1212.28 L1075.75 1212.28 L1075.16 1212.28 L1074.57 1212.28 L1073.99 1212.28 L1073.4 1212.28 L1072.81 1212.28 L1072.23 1212.28 L1071.64 1212.28 L1071.06 1212.28 L1070.47 1212.28 L1069.88 1212.28 L1069.3 1212.28 L1068.71 1212.28 L1068.12 1212.28 L1067.54 1212.28 L1066.95 1212.28 L1066.36 1212.28 L1065.78 1212.28 L1065.19 1212.28 L1064.6 1212.28 L1064.02 1212.28 L1063.43 1212.28 L1062.85 1212.28 L1062.26 1212.28 L1061.67 1212.28 L1061.09 1212.28 L1060.5 1212.28 L1059.91 1212.28 L1059.33 1212.28 L1058.74 1212.28 L1058.15 1212.28 L1057.57 1212.28 L1056.98 1212.28 L1056.39 1212.28 L1055.81 1212.28 L1055.22 1212.28 L1054.64 1212.28 L1054.05 1212.28 L1053.46 1212.28 L1052.88 1212.28 L1052.29 1212.28 L1051.7 1212.28 L1051.12 1212.28 L1050.53 1212.28 L1049.94 1212.28 L1049.36 1212.28 L1048.77 1212.28 L1048.19 1212.28 L1047.6 1212.28 L1047.01 1212.28 L1046.43 1212.28 L1045.84 1212.28 L1045.25 1212.28 L1044.67 1212.28 L1044.08 1212.28 L1043.49 1212.28 L1042.91 1212.28 L1042.32 1212.28 L1041.73 1212.28 L1041.15 1212.28 L1040.56 1212.28 L1039.98 1212.28 L1039.39 1212.28 L1038.8 1212.28 L1038.22 1212.28 L1037.63 1212.28 L1037.04 1212.28 L1036.46 1212.28 L1035.87 1212.28 L1035.28 1212.28 L1034.7 1212.28 L1034.11 1212.28 L1033.52 1212.28 L1032.94 1212.28 L1032.35 1212.28 L1031.77 1212.28 L1031.18 1212.28 L1030.59 1212.28 L1030.01 1212.28 L1029.42 1212.28 L1028.83 1212.28 L1028.25 1212.28 L1027.66 1212.28 L1027.07 1212.28 L1026.49 1212.28 L1025.9 1212.28 L1025.32 1212.28 L1024.73 1212.28 L1024.14 1212.28 L1023.56 1212.28 L1022.97 1212.28 L1022.38 1212.28 L1021.8 1212.28 L1021.21 1212.28 L1020.62 1212.28 L1020.04 1212.28 L1019.45 1212.28 L1018.86 1212.28 L1018.28 1212.28 L1017.69 1212.28 L1017.11 1212.28 L1016.52 1212.28 L1015.93 1212.28 L1015.35 1212.28 L1014.76 1212.28 L1014.17 1212.28 L1013.59 1212.28 L1013 1212.28 L1012.41 1212.28 L1011.83 1212.28 L1011.24 1212.28 L1010.65 1212.28 L1010.07 1212.28 L1009.48 1212.28 L1008.9 1212.28 L1008.31 1212.28 L1007.72 1212.28 L1007.14 1212.28 L1006.55 1212.28 L1005.96 1212.28 L1005.38 1212.28 L1004.79 1212.28 L1004.2 1212.28 L1003.62 1212.28 L1003.03 1212.28 L1002.44 1212.28 L1001.86 1212.28 L1001.27 1212.28 L1000.69 1212.28 L1000.1 1212.28 L999.513 1212.28 L998.926 1212.28 L998.34 1212.28 L997.754 1212.28 L997.167 1212.28 L996.581 1212.28 L995.994 1212.28 L995.408 1212.28 L994.822 1212.28 L994.235 1212.28 L993.649 1212.28 L993.062 1212.28 L992.476 1212.28 L991.889 1212.28 L991.303 1212.28 L990.717 1212.28 L990.13 1212.28 L989.544 1212.28 L988.957 1212.28 L988.371 1212.28 L987.785 1212.28 L987.198 1212.28 L986.612 1212.28 L986.025 1212.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.37 986.612,1212.37 987.198,1212.37 987.785,1212.37 988.371,1212.37 988.957,1212.37 989.544,1212.37 990.13,1212.37 990.717,1212.37 991.303,1212.37 991.889,1212.37 992.476,1212.37 993.062,1212.37 993.649,1212.37 994.235,1212.37 994.822,1212.37 995.408,1212.37 995.994,1212.37 996.581,1212.37 997.167,1212.37 997.754,1212.37 998.34,1212.37 998.926,1212.37 999.513,1212.37 1000.1,1212.37 1000.69,1212.37 1001.27,1212.37 1001.86,1212.37 1002.44,1212.37 1003.03,1212.37 1003.62,1212.37 1004.2,1212.37 1004.79,1212.37 1005.38,1212.37 1005.96,1212.37 1006.55,1212.37 1007.14,1212.37 1007.72,1212.37 1008.31,1212.37 1008.9,1212.37 1009.48,1212.37 1010.07,1212.37 1010.65,1212.37 1011.24,1212.37 1011.83,1212.37 1012.41,1212.37 1013,1212.37 1013.59,1212.37 1014.17,1212.37 1014.76,1212.37 1015.35,1212.37 1015.93,1212.37 1016.52,1212.37 1017.11,1212.37 1017.69,1212.37 1018.28,1212.37 1018.86,1212.37 1019.45,1212.37 1020.04,1212.37 1020.62,1212.37 1021.21,1212.37 1021.8,1212.37 1022.38,1212.37 1022.97,1212.37 1023.56,1212.37 1024.14,1212.37 1024.73,1212.37 1025.32,1212.37 1025.9,1212.37 1026.49,1212.37 1027.07,1212.37 1027.66,1212.37 1028.25,1212.37 1028.83,1212.37 1029.42,1212.37 1030.01,1212.37 1030.59,1212.37 1031.18,1212.37 1031.77,1212.37 1032.35,1212.37 1032.94,1212.37 1033.52,1212.37 1034.11,1212.37 1034.7,1212.37 1035.28,1212.37 1035.87,1212.37 1036.46,1212.37 1037.04,1212.37 1037.63,1212.37 1038.22,1212.37 1038.8,1212.37 1039.39,1212.37 1039.98,1212.37 1040.56,1212.37 1041.15,1212.37 1041.73,1212.37 1042.32,1212.37 1042.91,1212.37 1043.49,1212.37 1044.08,1212.37 1044.67,1212.37 1045.25,1212.37 1045.84,1212.37 1046.43,1212.37 1047.01,1212.37 1047.6,1212.37 1048.19,1212.37 1048.77,1212.37 1049.36,1212.37 1049.94,1212.37 1050.53,1212.37 1051.12,1212.37 1051.7,1212.37 1052.29,1212.37 1052.88,1212.37 1053.46,1212.37 1054.05,1212.37 1054.64,1212.37 1055.22,1212.37 1055.81,1212.37 1056.39,1212.37 1056.98,1212.37 1057.57,1212.37 1058.15,1212.37 1058.74,1212.37 1059.33,1212.37 1059.91,1212.37 1060.5,1212.37 1061.09,1212.37 1061.67,1212.37 1062.26,1212.37 1062.85,1212.37 1063.43,1212.37 1064.02,1212.37 1064.6,1212.37 1065.19,1212.37 1065.78,1212.37 1066.36,1212.37 1066.95,1212.37 1067.54,1212.37 1068.12,1212.37 1068.71,1212.37 1069.3,1212.37 1069.88,1212.37 1070.47,1212.37 1071.06,1212.37 1071.64,1212.37 1072.23,1212.37 1072.81,1212.37 1073.4,1212.37 1073.99,1212.37 1074.57,1212.37 1075.16,1212.37 1075.75,1212.37 1076.33,1212.37 1076.92,1212.37 1077.51,1212.37 1078.09,1212.37 1078.68,1212.37 1079.26,1212.37 1079.85,1212.37 1080.44,1212.37 1081.02,1212.37 1081.61,1212.37 1082.2,1212.37 1082.78,1212.37 1083.37,1212.37 1083.96,1212.37 1084.54,1212.37 1085.13,1212.37 1085.72,1212.37 1086.3,1212.37 1086.89,1212.37 1087.47,1212.37 1088.06,1212.37 1088.65,1212.37 1089.23,1212.37 1089.82,1212.37 1090.41,1212.37 1090.99,1212.37 1091.58,1212.37 1092.17,1212.37 1092.75,1212.37 1093.34,1212.37 1093.93,1212.37 1094.51,1212.37 1095.1,1212.37 1095.68,1212.37 1096.27,1212.37 1096.86,1212.37 1097.44,1212.37 1098.03,1212.37 1098.62,1212.37 1099.2,1212.37 1099.79,1212.37 1100.38,1212.37 1100.96,1212.37 1101.55,1212.37 1102.14,1212.37 1102.72,1212.37 1103.31,1212.37 1103.89,1212.37 1104.48,1212.37 1105.07,1212.37 1105.65,1212.37 1106.24,1212.37 1106.83,1212.37 1107.41,1212.37 1108,1212.37 1108.59,1212.37 1109.17,1212.37 1109.76,1212.37 1110.34,1212.37 1110.93,1212.37 1111.52,1212.37 1112.1,1212.37 1112.69,1212.37 1113.28,1212.37 1113.86,1212.37 1114.45,1212.37 1115.04,1212.37 1115.62,1212.37 1116.21,1212.37 1116.8,1212.37 1117.38,1212.37 1117.97,1212.37 1118.55,1212.37 1119.14,1212.37 1119.73,1212.37 1120.31,1212.37 1120.9,1212.37 1121.49,1212.37 1122.07,1212.37 1122.66,1212.37 1123.25,1212.37 1123.83,1212.37 1124.42,1212.37 1125.01,1212.37 1125.59,1212.37 1126.18,1212.37 1126.76,1212.37 1127.35,1212.37 1127.94,1212.37 1128.52,1212.37 1129.11,1212.37 1129.7,1212.37 1130.28,1212.37 1130.87,1212.37 1131.46,1212.37 1132.04,1212.37 1132.63,1212.37 1133.21,1212.37 1133.8,1212.37 1134.39,1212.37 1134.97,1212.37 1135.56,1212.37 1136.15,1212.37 1136.73,1212.37 1137.32,1212.37 1137.91,1212.37 1138.49,1212.37 1139.08,1212.37 1139.67,1212.37 1140.25,1212.37 1140.84,1212.37 1141.42,1212.37 1142.01,1212.37 1142.6,1212.37 1143.18,1212.37 1143.77,1212.37 1144.36,1212.37 1144.94,1212.37 1145.53,1212.37 1146.12,1212.37 1146.7,1212.37 1147.29,1212.37 1147.88,1212.37 1148.46,1212.37 1149.05,1212.37 1149.63,1212.37 1150.22,1212.37 1150.81,1212.37 1151.39,1212.37 1151.98,1212.37 1152.57,1212.37 1153.15,1212.37 1153.74,1212.37 1154.33,1212.37 1154.91,1212.37 1155.5,1212.37 1156.09,1212.37 1156.67,1212.37 1157.26,1212.37 1157.84,1212.37 1158.43,1212.37 1159.02,1212.37 1159.6,1212.37 1160.19,1212.37 1160.78,1212.37 1161.36,1212.37 1161.95,1212.37 1162.54,1212.37 1163.12,1212.37 1163.71,1212.37 1164.29,1212.37 1164.88,1212.37 1165.47,1212.37 1166.05,1212.37 1166.64,1212.37 1167.23,1212.37 1167.81,1212.37 1168.4,1212.37 1168.99,1212.37 1169.57,1212.37 1170.16,1212.37 1170.75,1212.37 1171.33,1212.37 1171.92,1212.37 1172.5,1212.37 1173.09,1212.37 1173.68,1212.37 1174.26,1212.37 1174.85,1212.37 1175.44,1212.37 1176.02,1212.37 1176.61,1212.37 1177.2,1212.37 1177.78,1212.37 1178.37,1212.37 1178.96,1212.37 1179.54,1212.37 1180.13,1212.37 1180.71,1212.37 1181.3,1212.37 1181.89,1212.37 1182.47,1212.37 1183.06,1212.37 1183.65,1212.37 1184.23,1212.37 1184.82,1212.37 1185.41,1212.37 1185.99,1212.37 1186.58,1212.37 1187.16,1212.37 1187.75,1212.37 1188.34,1212.37 1188.92,1212.37 1189.51,1212.37 1190.1,1212.37 1190.68,1212.37 1191.27,1212.37 1191.86,1212.37 1192.44,1212.37 1193.03,1212.37 1193.62,1212.37 1194.2,1212.37 1194.79,1212.37 1195.37,1212.37 1195.96,1212.37 1196.55,1212.37 1197.13,1212.37 1197.72,1212.37 1198.31,1212.37 1198.89,1212.37 1199.48,1212.37 1200.07,1212.37 1200.65,1212.37 1201.24,1212.37 1201.83,1212.37 1202.41,1212.37 1203,1212.37 1203.58,1212.37 1204.17,1212.37 1204.76,1212.37 1205.34,1212.37 1205.93,1212.37 1206.52,1212.37 1207.1,1212.37 1207.69,1212.37 1208.28,1212.37 1208.86,1212.37 1209.45,1212.37 1210.03,1212.37 1210.62,1212.37 1211.21,1212.37 1211.79,1212.37 1212.38,1212.37 1212.97,1212.37 1213.55,1212.37 1214.14,1212.37 1214.73,1212.37 1215.31,1212.37 1215.9,1212.37 1216.49,1212.37 1217.07,1212.37 1217.66,1212.37 1218.24,1212.37 1218.83,1212.37 1219.42,1212.37 1220,1212.37 1220.59,1212.37 1221.18,1212.37 1221.76,1212.37 1222.35,1212.37 1222.94,1212.37 1223.52,1212.37 1224.11,1212.37 1224.7,1212.37 1225.28,1212.37 1225.87,1212.37 1226.45,1212.37 1227.04,1212.37 1227.63,1212.37 1228.21,1212.37 1228.8,1212.37 1229.39,1212.37 1229.97,1212.37 1230.56,1212.37 1231.15,1212.37 1231.73,1212.37 1232.32,1212.37 1232.91,1212.37 1233.49,1212.37 1234.08,1212.37 1234.66,1212.37 1235.25,1212.37 1235.84,1212.37 1236.42,1212.37 1237.01,1212.37 1237.6,1212.37 1238.18,1212.37 1238.77,1212.37 1239.36,1212.37 1239.94,1212.37 1240.53,1212.37 1241.11,1212.37 1241.7,1212.37 1242.29,1212.37 1242.87,1212.37 1243.46,1212.37 1244.05,1212.37 1244.63,1212.37 1245.22,1212.37 1245.81,1212.37 1246.39,1212.37 1246.98,1212.37 1247.57,1212.37 1248.15,1212.37 1248.74,1212.37 1249.32,1212.37 1249.91,1212.37 1250.5,1212.37 1251.08,1212.37 1251.67,1212.37 1252.26,1212.37 1252.84,1212.37 1253.43,1212.37 1254.02,1212.37 1254.6,1212.37 1255.19,1212.37 1255.78,1212.37 1256.36,1212.37 1256.95,1212.37 1257.53,1212.37 1258.12,1212.37 1258.71,1212.37 1259.29,1212.37 1259.88,1212.37 1260.47,1212.37 1261.05,1212.37 1261.64,1212.37 1262.23,1212.37 1262.81,1212.37 1263.4,1212.37 1263.98,1212.37 1264.57,1212.37 1265.16,1212.37 1265.74,1212.37 1266.33,1212.37 1266.92,1212.37 1267.5,1212.37 1268.09,1212.37 1268.68,1212.37 1269.26,1212.37 1269.85,1212.37 1270.44,1212.37 1271.02,1212.37 1271.61,1212.37 1272.19,1212.37 1272.78,1212.37 1273.37,1212.37 1273.95,1212.37 1274.54,1212.37 1275.13,1212.37 1275.71,1212.37 1276.3,1212.37 1276.89,1212.37 1277.47,1212.37 1278.06,1212.37 1278.65,1212.37 1279.23,1212.37 1279.82,1212.37 1280.4,1212.37 1280.99,1212.37 1281.58,1212.37 1282.16,1212.37 1282.75,1212.37 1283.34,1212.37 1283.92,1212.37 1284.51,1212.37 1285.1,1212.37 1285.68,1212.37 1286.27,1212.37 1286.86,1212.37 1287.44,1212.37 1288.03,1212.37 1288.61,1212.37 1289.2,1212.37 1289.79,1212.37 1290.37,1212.37 1290.96,1212.37 1291.55,1212.37 1292.13,1212.37 1292.72,1212.37 1293.31,1212.37 1293.89,1212.37 1294.48,1212.37 1295.06,1212.37 1295.65,1212.37 1296.24,1212.37 1296.82,1212.37 1297.41,1212.37 1298,1212.37 1298.58,1212.37 1299.17,1212.37 1299.76,1212.37 1300.34,1212.37 1300.93,1212.37 1301.52,1212.37 1302.1,1212.37 1302.69,1212.37 1303.27,1212.37 1303.86,1212.37 1304.45,1212.37 1305.03,1212.37 1305.62,1212.37 1306.21,1212.37 1306.79,1212.37 1307.38,1212.37 1307.97,1212.37 1308.55,1212.37 1309.14,1212.37 1309.73,1212.37 1310.31,1212.37 1310.9,1212.37 1311.48,1212.37 1312.07,1212.37 1312.66,1212.37 1313.24,1212.37 1313.83,1212.37 1314.42,1212.37 1315,1212.37 1315.59,1212.37 1316.18,1212.37 1316.76,1212.37 1317.35,1212.37 1317.93,1212.37 1318.52,1212.37 1319.11,1212.37 1319.69,1212.37 1320.28,1212.37 1320.87,1212.37 1321.45,1212.37 1322.04,1212.37 1322.63,1212.37 1323.21,1212.37 1323.8,1212.37 1324.39,1212.37 1324.97,1212.37 1325.56,1212.37 1326.14,1212.37 1326.73,1212.37 1327.32,1212.37 1327.9,1212.37 1328.49,1212.37 1329.08,1212.37 1329.66,1212.37 1330.25,1212.37 1330.84,1212.37 1331.42,1212.37 1332.01,1212.37 1332.6,1212.37 1333.18,1212.37 1333.77,1212.37 1334.35,1212.37 1334.94,1212.37 1335.53,1212.37 1336.11,1212.37 1336.7,1212.37 1337.29,1212.37 1337.87,1212.37 1338.46,1212.37 1339.05,1212.37 1339.63,1212.37 1340.22,1212.37 1340.8,1212.37 1341.39,1212.37 1341.98,1212.37 1342.56,1212.37 1343.15,1212.37 1343.74,1212.37 1344.32,1212.37 1344.91,1212.37 1345.5,1212.37 1346.08,1212.37 1346.67,1212.37 1347.26,1212.37 1347.84,1212.37 1348.43,1212.37 1349.01,1212.37 1349.6,1212.37 1350.19,1212.37 1350.77,1212.37 1351.36,1212.37 1351.95,1212.37 1352.53,1212.37 1353.12,1212.37 1353.71,1212.37 1354.29,1212.37 1354.88,1212.37 1355.47,1212.37 1356.05,1212.37 1356.64,1212.37 1357.22,1212.37 1357.81,1212.37 1358.4,1212.37 1358.98,1212.37 1359.57,1212.37 1360.16,1212.37 1360.74,1212.37 1361.33,1212.37 1361.92,1212.37 1362.5,1212.37 1363.09,1212.37 1363.68,1212.37 1364.26,1212.37 1364.85,1212.37 1365.43,1212.37 1366.02,1212.37 1366.61,1212.37 1367.19,1212.37 1367.78,1212.37 1368.37,1212.37 1368.95,1212.37 1369.54,1212.37 1370.13,1212.37 1370.71,1212.37 1371.3,1212.37 1371.88,1212.37 1372.47,1212.37 1373.06,1212.37 1373.64,1212.37 1374.23,1212.37 1374.82,1212.37 1375.4,1212.37 1375.99,1212.37 1376.58,1212.37 1377.16,1212.37 1377.75,1212.37 1378.34,1212.37 1378.92,1212.37 1379.51,1212.37 1380.09,1212.37 1380.68,1212.37 1381.27,1212.37 1381.85,1212.37 1382.44,1212.37 1383.03,1212.37 1383.61,1212.37 1384.2,1212.37 1384.79,1212.37 1385.37,1212.37 1385.96,1212.37 1386.55,1212.37 1387.13,1212.37 1387.72,1212.37 1388.3,1212.37 1388.89,1212.37 1389.48,1212.37 1390.06,1212.37 1390.65,1212.37 1391.24,1212.37 1391.82,1212.37 1392.41,1212.37 1393,1212.37 1393.58,1212.37 1394.17,1212.37 1394.75,1212.37 1395.34,1212.37 1395.93,1212.37 1396.51,1212.37 1397.1,1212.37 1397.69,1212.37 1398.27,1212.37 1398.86,1212.37 1399.45,1212.37 1400.03,1212.37 1400.62,1212.37 1401.21,1212.37 1401.79,1212.37 1402.38,1212.37 1402.96,1212.37 1403.55,1212.37 1404.14,1212.37 1404.72,1212.37 1405.31,1212.37 1405.9,1212.37 1406.48,1212.37 1407.07,1212.37 1407.66,1212.37 1408.24,1212.37 1408.83,1212.37 1409.42,1212.37 1410,1212.37 1410.59,1212.37 1411.17,1212.37 1411.76,1212.37 1412.35,1212.37 1412.93,1212.37 1413.52,1212.37 1414.11,1212.37 1414.69,1212.37 1415.28,1212.37 1415.87,1212.37 1416.45,1212.37 1417.04,1212.37 1417.63,1212.37 1418.21,1212.37 1418.8,1212.37 1419.38,1212.37 1419.97,1212.37 1420.56,1212.37 1421.14,1212.37 1421.73,1212.37 1422.32,1212.37 1422.9,1212.37 1423.49,1212.37 1424.08,1212.37 1424.66,1212.37 1425.25,1212.37 1425.83,1212.37 1426.42,1212.37 1427.01,1212.37 1427.59,1212.37 1428.18,1212.37 1428.77,1212.37 1429.35,1212.37 1429.94,1212.37 1430.53,1212.37 1431.11,1212.37 1431.7,1212.37 1432.29,1212.37 1432.87,1212.37 1433.46,1212.37 1434.04,1212.37 1434.63,1212.37 1435.22,1212.37 1435.8,1212.37 1436.39,1212.37 1436.98,1212.37 1437.56,1212.37 1438.15,1212.37 1438.74,1212.37 1439.32,1212.37 1439.91,1212.37 1440.5,1212.37 1441.08,1212.37 1441.67,1212.37 1442.25,1212.37 1442.84,1212.37 1443.43,1212.37 1444.01,1212.37 1444.6,1212.37 1445.19,1212.37 1445.77,1212.37 1446.36,1212.37 1446.95,1212.37 1447.53,1212.37 1448.12,1212.37 1448.7,1212.37 1449.29,1212.37 1449.88,1212.37 1450.46,1212.37 1451.05,1212.37 1451.64,1212.37 1452.22,1212.37 1452.81,1212.37 1453.4,1212.37 1453.98,1212.37 1454.57,1212.37 1455.16,1212.37 1455.74,1212.37 1456.33,1212.37 1456.91,1212.37 1457.5,1212.37 1458.09,1212.37 1458.67,1212.37 1459.26,1212.37 1459.85,1212.37 1460.43,1212.37 1461.02,1212.37 1461.61,1212.37 1462.19,1212.37 1462.78,1212.37 1463.37,1212.37 1463.95,1212.37 1464.54,1212.37 1465.12,1212.37 1465.71,1212.37 1466.3,1212.37 1466.88,1212.37 1467.47,1212.37 1468.06,1212.37 1468.64,1212.37 1469.23,1212.37 1469.82,1212.37 1470.4,1212.37 1470.99,1212.37 1471.57,1212.37 1472.16,1212.37 1472.75,1212.37 1473.33,1212.37 1473.92,1212.37 1474.51,1212.37 1475.09,1212.37 1475.68,1212.37 1476.27,1212.37 1476.85,1212.37 1477.44,1212.37 1478.03,1212.37 1478.61,1212.37 1479.2,1212.37 1479.78,1212.37 1480.37,1212.37 1480.96,1212.37 1481.54,1212.37 1482.13,1212.37 1482.72,1212.37 1483.3,1212.37 1483.89,1212.37 1484.48,1212.37 1485.06,1212.37 1485.65,1212.37 1486.24,1212.37 1486.82,1212.37 1487.41,1212.37 1487.99,1212.37 1488.58,1212.37 1489.17,1212.37 1489.75,1212.37 1490.34,1212.37 1490.93,1212.37 1491.51,1212.37 1492.1,1212.37 1492.69,1212.37 1493.27,1212.37 1493.86,1212.37 1494.45,1212.37 1495.03,1212.37 1495.62,1212.37 1496.2,1212.37 1496.79,1212.37 1497.38,1212.37 1497.96,1212.37 1498.55,1212.37 1499.14,1212.37 1499.72,1212.37 1500.31,1212.37 1500.9,1212.37 1501.48,1212.37 1502.07,1212.37 1502.65,1212.37 1503.24,1212.37 1503.83,1212.37 1504.41,1212.37 1505,1212.37 1505.59,1212.37 1506.17,1212.37 1506.76,1212.37 1507.35,1212.37 1507.93,1212.37 1508.52,1212.37 1509.11,1212.37 1509.69,1212.37 1510.28,1212.37 1510.86,1212.37 1511.45,1212.37 1512.04,1212.37 1512.62,1212.37 1513.21,1212.37 1513.8,1212.37 1514.38,1212.37 1514.97,1212.37 1515.56,1212.37 1516.14,1212.37 1516.73,1212.37 1517.32,1212.37 1517.9,1212.37 1518.49,1212.37 1519.07,1212.37 1519.66,1212.37 1520.25,1212.37 1520.83,1212.37 1521.42,1212.37 1522.01,1212.37 1522.59,1212.37 1523.18,1212.37 1523.77,1212.37 1524.35,1212.37 1524.94,1212.37 1525.52,1212.37 1526.11,1212.37 1526.7,1212.37 1527.28,1212.37 1527.87,1212.37 1528.46,1212.37 1529.04,1212.37 1529.63,1212.37 1530.22,1212.37 1530.8,1212.37 1531.39,1212.37 1531.98,1212.37 1532.56,1212.37 1533.15,1212.37 1533.73,1212.37 1534.32,1212.37 1534.91,1212.37 1535.49,1212.37 1536.08,1212.37 1536.67,1212.37 1537.25,1212.37 1537.84,1212.37 1538.43,1212.37 1539.01,1212.37 1539.6,1212.37 1540.19,1212.37 1540.77,1212.37 1541.36,1212.37 1541.94,1212.37 1542.53,1212.37 1543.12,1212.37 1543.7,1212.37 1544.29,1212.37 1544.88,1212.37 1545.46,1212.37 1546.05,1212.37 1546.64,1212.37 1547.22,1212.37 1547.81,1212.37 1548.4,1212.37 1548.98,1212.37 1549.57,1212.37 1550.15,1212.37 1550.74,1212.37 1551.33,1212.37 1551.91,1212.37 1552.5,1212.37 1553.09,1212.37 1553.67,1212.37 1554.26,1212.37 1554.85,1212.37 1555.43,1212.37 1556.02,1212.37 1556.6,1212.37 1557.19,1212.37 1557.78,1212.37 1558.36,1212.37 1558.95,1212.37 1559.54,1212.37 1560.12,1212.37 1560.71,1212.37 1561.3,1212.37 1561.88,1212.37 1562.47,1212.37 1563.06,1212.37 1563.64,1212.37 1564.23,1212.37 1564.81,1212.37 1565.4,1212.37 1565.99,1212.37 1566.57,1212.37 1567.16,1212.37 1567.75,1212.37 1568.33,1212.37 1568.92,1212.37 1569.51,1212.37 1570.09,1212.37 1570.68,1212.37 1571.27,1212.37 1571.85,1212.37 1572.44,1212.37 1573.02,1212.37 1573.61,1212.37 1574.2,1212.37 1574.78,1212.37 1575.37,1212.37 1575.96,1212.37 1576.54,1212.37 1577.13,1212.37 1577.72,1212.37 1578.3,1212.37 1578.89,1212.37 1579.47,1212.37 1580.06,1212.37 1580.65,1212.37 1581.23,1212.37 1581.82,1212.37 1582.41,1212.37 1582.99,1212.37 1583.58,1212.37 1584.17,1212.37 1584.75,1212.37 1585.34,1212.37 1585.93,1212.37 1586.51,1212.37 1587.1,1212.37 1587.68,1212.37 1588.27,1212.37 1588.86,1212.37 1589.44,1212.37 1590.03,1212.37 1590.62,1212.37 1591.2,1212.37 1591.79,1212.37 1592.38,1212.37 1592.96,1212.37 1593.55,1212.37 1594.14,1212.37 1594.72,1212.37 1595.31,1212.37 1595.89,1212.37 1596.48,1212.37 1597.07,1212.37 1597.65,1212.37 1598.24,1212.37 1598.83,1212.37 1599.41,1212.37 1600,1212.37 1600.59,1212.37 1601.17,1212.37 1601.76,1212.37 1602.34,1212.37 1602.93,1212.37 1603.52,1212.37 1604.1,1212.37 1604.69,1212.37 1605.28,1212.37 1605.86,1212.37 1606.45,1212.37 1607.04,1212.37 1607.62,1212.37 1608.21,1212.37 1608.8,1212.37 1609.38,1212.37 1609.97,1212.37 1610.55,1212.37 1611.14,1212.37 1611.73,1212.37 1612.31,1212.37 1612.9,1212.37 1613.49,1212.37 1614.07,1212.37 1614.66,1212.37 1615.25,1212.37 1615.83,1212.37 1616.42,1212.37 1617.01,1212.37 1617.59,1212.37 1618.18,1212.37 1618.76,1212.37 1619.35,1212.37 1619.94,1212.37 1620.52,1212.37 1621.11,1212.37 1621.7,1212.37 1622.28,1212.37 1622.87,1212.37 1623.46,1212.37 1624.04,1212.37 1624.63,1212.37 1625.22,1212.37 1625.8,1212.37 1626.39,1212.37 1626.97,1212.37 1627.56,1212.37 1628.15,1212.37 1628.73,1212.37 1629.32,1212.37 1629.91,1212.37 1630.49,1212.37 1631.08,1212.37 1631.67,1212.37 1632.25,1212.37 1632.84,1212.37 1633.42,1212.37 1634.01,1212.37 1634.6,1212.37 1635.18,1212.37 1635.77,1212.37 1636.36,1212.37 1636.94,1212.37 1637.53,1212.37 1638.12,1212.37 1638.7,1212.37 1639.29,1212.37 1639.88,1212.37 1640.46,1212.37 1641.05,1212.37 1641.63,1212.37 1642.22,1212.37 1642.81,1212.37 1643.39,1212.37 1643.98,1212.37 1644.57,1212.37 1645.15,1212.37 1645.74,1212.37 1646.33,1212.37 1646.91,1212.37 1647.5,1212.37 1648.09,1212.37 1648.67,1212.37 1649.26,1212.37 1649.84,1212.37 1650.43,1212.37 1651.02,1212.37 1651.6,1212.37 1652.19,1212.37 1652.78,1212.37 1653.36,1212.37 1653.95,1212.37 1654.54,1212.37 1655.12,1212.37 1655.71,1212.37 1656.29,1212.37 1656.88,1212.37 1657.47,1212.37 1658.05,1212.37 1658.64,1212.37 1659.23,1212.37 1659.81,1212.37 1660.4,1212.37 1660.99,1212.37 1661.57,1212.37 1662.16,1212.37 1662.75,1212.37 1663.33,1212.37 1663.92,1212.37 1664.5,1212.37 1665.09,1212.37 1665.68,1212.37 1666.26,1212.37 1666.85,1212.37 1667.44,1212.37 1668.02,1212.37 1668.61,1212.37 1669.2,1212.37 1669.78,1212.37 1670.37,1212.37 1670.96,1212.37 1671.54,1212.37 1672.13,1212.37 1672.71,1212.37 1673.3,1212.37 1673.89,1212.37 1674.47,1212.37 1675.06,1212.37 1675.65,1212.37 1676.23,1212.37 1676.82,1212.37 1677.41,1212.37 1677.99,1212.37 1678.58,1212.37 1679.17,1212.37 1679.75,1212.37 1680.34,1212.37 1680.92,1212.37 1681.51,1212.37 1682.1,1212.37 1682.68,1212.37 1683.27,1212.37 1683.86,1212.37 1684.44,1212.37 1685.03,1212.37 1685.62,1212.37 1686.2,1212.37 1686.79,1212.37 1687.37,1212.37 1687.96,1212.37 1688.55,1212.37 1689.13,1212.37 1689.72,1212.37 1690.31,1212.37 1690.89,1212.37 1691.48,1212.37 1692.07,1212.37 1692.65,1212.37 1693.24,1212.37 1693.83,1212.37 1694.41,1212.37 1695,1212.37 1695.58,1212.37 1696.17,1212.37 1696.76,1212.37 1697.34,1212.37 1697.93,1212.37 1698.52,1212.37 1699.1,1212.37 1699.69,1212.37 1700.28,1212.37 1700.86,1212.37 1701.45,1212.37 1702.04,1212.37 1702.62,1212.37 1703.21,1212.37 1703.79,1212.37 1704.38,1212.37 1704.97,1212.37 1705.55,1212.37 1706.14,1212.37 1706.73,1212.37 1707.31,1212.37 1707.9,1212.37 1708.49,1212.37 1709.07,1212.37 1709.66,1212.37 1710.24,1212.37 1710.83,1212.37 1711.42,1212.37 1712,1212.37 1712.59,1212.37 1713.18,1212.37 1713.76,1212.37 1714.35,1212.37 1714.94,1212.37 1715.52,1212.37 1716.11,1212.37 1716.7,1212.37 1717.28,1212.37 1717.87,1212.37 1718.45,1212.37 1719.04,1212.37 1719.63,1212.37 1720.21,1212.37 1720.8,1212.37 1721.39,1212.37 1721.97,1212.37 1722.56,1212.37 1723.15,1212.37 1723.73,1212.37 1724.32,1212.37 1724.91,1212.37 1725.49,1212.37 1726.08,1212.37 1726.66,1212.37 1727.25,1212.37 1727.84,1212.37 1728.42,1212.37 1729.01,1212.37 1729.6,1212.37 1730.18,1212.37 1730.77,1212.37 1731.36,1212.37 1731.94,1212.37 1732.53,1212.37 1733.11,1212.37 1733.7,1212.37 1734.29,1212.37 1734.87,1212.37 1735.46,1212.37 1736.05,1212.37 1736.63,1212.37 1737.22,1212.37 1737.81,1212.37 1738.39,1212.37 1738.98,1212.37 1739.57,1212.37 1740.15,1212.37 1740.74,1212.37 1741.32,1212.37 1741.91,1212.37 1742.5,1212.37 1743.08,1212.37 1743.67,1212.37 1744.26,1212.37 1744.84,1212.37 1745.43,1212.37 1746.02,1212.37 1746.6,1212.37 1747.19,1212.37 1747.78,1212.37 1748.36,1212.37 1748.95,1212.37 1749.53,1212.37 1750.12,1212.37 1750.71,1212.37 1751.29,1212.37 1751.88,1212.37 1752.47,1212.37 1753.05,1212.37 1753.64,1212.37 1754.23,1212.37 1754.81,1212.37 1755.4,1212.37 1755.99,1212.37 1756.57,1212.37 1757.16,1212.37 1757.74,1212.37 1758.33,1212.37 1758.92,1212.37 1759.5,1212.37 1760.09,1212.37 1760.68,1212.37 1761.26,1212.37 1761.85,1212.37 1762.44,1212.37 1763.02,1212.37 1763.61,1212.37 1764.19,1212.37 1764.78,1212.37 1765.37,1212.37 1765.95,1212.37 1766.54,1212.37 1767.13,1212.37 1767.71,1212.37 1768.3,1212.37 1768.89,1212.37 1769.47,1212.37 1770.06,1212.37 1770.65,1212.37 1771.23,1212.37 1771.82,1212.37 1772.4,1212.37 1772.99,1212.37 1773.58,1212.37 1774.16,1212.37 1774.75,1212.37 1775.34,1212.37 1775.92,1212.37 1776.51,1212.37 1777.1,1212.37 1777.68,1212.37 1778.27,1212.37 1778.86,1212.37 1779.44,1212.37 1780.03,1212.37 1780.61,1212.37 1781.2,1212.37 1781.79,1212.37 1782.37,1212.37 1782.96,1212.37 1783.55,1212.37 1784.13,1212.37 1784.72,1212.37 1785.31,1212.37 1785.89,1212.37 1786.48,1212.37 1787.06,1212.37 1787.65,1212.37 1788.24,1212.37 1788.82,1212.37 1789.41,1212.37 1790,1212.37 1790.58,1212.37 1791.17,1212.37 1791.76,1212.37 1792.34,1212.37 1792.93,1212.37 1793.52,1212.37 1794.1,1212.37 1794.69,1212.37 1795.27,1212.37 1795.86,1212.37 1796.45,1212.37 1797.03,1212.37 1797.62,1212.37 1798.21,1212.37 1798.79,1212.37 1799.38,1212.37 1799.97,1212.37 1800.55,1212.37 1801.14,1212.37 1801.73,1212.37 1802.31,1212.37 1802.9,1212.37 1803.48,1212.37 1804.07,1212.37 1804.66,1212.37 1805.24,1212.37 1805.83,1212.37 1806.42,1212.37 1807,1212.37 1807.59,1212.37 1808.18,1212.37 1808.76,1212.37 1809.35,1212.37 1809.94,1212.37 1810.52,1212.37 1811.11,1212.37 1811.69,1212.37 1812.28,1212.37 1812.87,1212.37 1813.45,1212.37 1814.04,1212.37 1814.63,1212.37 1815.21,1212.37 1815.8,1212.37 1816.39,1212.37 1816.97,1212.37 1817.56,1212.37 1818.14,1212.37 1818.73,1212.37 1819.32,1212.37 1819.9,1212.37 1820.49,1212.37 1821.08,1212.37 1821.66,1212.37 1822.25,1212.37 1822.84,1212.37 1823.42,1212.37 1824.01,1212.37 1824.6,1212.37 1825.18,1212.37 1825.77,1212.37 1826.35,1212.37 1826.94,1212.37 1827.53,1212.37 1828.11,1212.37 1828.7,1212.37 1829.29,1212.37 1829.87,1212.37 1830.46,1212.37 1831.05,1212.37 1831.63,1212.37 1832.22,1212.37 1832.81,1212.37 1833.39,1212.37 1833.98,1212.37 1834.56,1212.37 1835.15,1212.37 1835.74,1212.37 1836.32,1212.37 1836.91,1212.37 1837.5,1212.37 1838.08,1212.37 1838.67,1212.37 1839.26,1212.37 1839.84,1212.37 1840.43,1212.37 1841.01,1212.37 1841.6,1212.37 1842.19,1212.37 1842.77,1212.37 1843.36,1212.37 1843.95,1212.37 1844.53,1212.37 1845.12,1212.37 1845.71,1212.37 1846.29,1212.37 1846.88,1212.37 1847.47,1212.37 1848.05,1212.37 1848.64,1212.37 1849.22,1212.37 1849.81,1212.37 1850.4,1212.37 1850.98,1212.37 1851.57,1212.37 1852.16,1212.37 1852.74,1212.37 1853.33,1212.37 1853.92,1212.37 1854.5,1212.37 1855.09,1212.37 1855.68,1212.37 1856.26,1212.37 1856.85,1212.37 1857.43,1212.37 1858.02,1212.37 1858.61,1212.37 1859.19,1212.37 1859.78,1212.37 1860.37,1212.37 1860.95,1212.37 1861.54,1212.37 1862.13,1212.37 1862.71,1212.37 1863.3,1212.37 1863.88,1212.37 1864.47,1212.37 1865.06,1212.37 1865.64,1212.37 1866.23,1212.37 1866.82,1212.37 1867.4,1212.37 1867.99,1212.37 1868.58,1212.37 1869.16,1212.37 1869.75,1212.37 1870.34,1212.37 1870.92,1212.37 1871.51,1212.37 1872.09,1212.37 1872.68,1212.37 1873.27,1212.37 1873.85,1212.37 1874.44,1212.37 1875.03,1212.37 1875.61,1212.37 1876.2,1212.37 1876.79,1212.37 1877.37,1212.37 1877.96,1212.37 1878.55,1212.37 1879.13,1212.37 1879.72,1212.37 1880.3,1212.37 1880.89,1212.37 1881.48,1212.37 1882.06,1212.37 1882.65,1212.37 1883.24,1212.37 1883.82,1212.37 1884.41,1212.37 1885,1212.37 1885.58,1212.37 1886.17,1212.37 1886.76,1212.37 1887.34,1212.37 1887.93,1212.37 1888.51,1212.37 1889.1,1212.37 1889.69,1212.37 1890.27,1212.37 1890.86,1212.37 1891.45,1212.37 1892.03,1212.37 1892.62,1212.37 1893.21,1212.37 1893.79,1212.37 1894.38,1212.37 1894.96,1212.37 1895.55,1212.37 1896.14,1212.37 1896.72,1212.37 1897.31,1212.37 1897.9,1212.37 1898.48,1212.37 1899.07,1212.37 1899.66,1212.37 1900.24,1212.37 1900.83,1212.37 1901.42,1212.37 1902,1212.37 1902.59,1212.37 1903.17,1212.37 1903.76,1212.37 1904.35,1212.37 1904.93,1212.37 1905.52,1212.37 1906.11,1212.37 1906.69,1212.37 1907.28,1212.37 1907.87,1212.37 1908.45,1212.37 1909.04,1212.37 1909.63,1212.37 1910.21,1212.37 1910.8,1212.37 1911.38,1212.37 1911.97,1212.37 1912.56,1212.37 1913.14,1212.37 1913.73,1212.37 1914.32,1212.37 1914.9,1212.37 1915.49,1212.37 1916.08,1212.37 1916.66,1212.37 1917.25,1212.37 1917.83,1212.37 1918.42,1212.37 1919.01,1212.37 1919.59,1212.37 1920.18,1212.37 1920.77,1212.37 1921.35,1212.37 1921.94,1212.37 1922.53,1212.37 1923.11,1212.37 1923.7,1212.37 1924.29,1212.37 1924.87,1212.37 1925.46,1212.37 1926.04,1212.37 1926.63,1212.37 1927.22,1212.37 1927.8,1212.37 1928.39,1212.37 1928.98,1212.37 1929.56,1212.37 1930.15,1212.37 1930.74,1212.37 1931.32,1212.37 1931.91,1212.37 1932.5,1212.37 1933.08,1212.37 1933.67,1212.37 1934.25,1212.37 1934.84,1212.37 1935.43,1212.37 1936.01,1212.37 1936.6,1212.37 1937.19,1212.37 1937.77,1212.37 1938.36,1212.37 1938.95,1212.37 1939.53,1212.37 1940.12,1212.37 1940.71,1212.37 1941.29,1212.37 1941.88,1212.37 1942.46,1212.37 1943.05,1212.37 1943.64,1212.37 1944.22,1212.37 1944.81,1212.37 1945.4,1212.37 1945.98,1212.37 1946.57,1212.37 1947.16,1212.37 1947.74,1212.37 1948.33,1212.37 1948.91,1212.37 1949.5,1212.37 1950.09,1212.37 1950.67,1212.37 1951.26,1212.37 1951.85,1212.37 1952.43,1212.37 1953.02,1212.37 1953.61,1212.37 1954.19,1212.37 1954.78,1212.37 1955.37,1212.37 1955.95,1212.37 1956.54,1212.37 1957.12,1212.37 1957.71,1212.37 1958.3,1212.37 1958.88,1212.37 1959.47,1212.37 1960.06,1212.37 1960.64,1212.37 1961.23,1212.37 1961.82,1212.37 1962.4,1212.37 1962.99,1212.37 1963.58,1212.37 1964.16,1212.37 1964.75,1212.37 1965.33,1212.37 1965.92,1212.37 1966.51,1212.37 1967.09,1212.37 1967.68,1212.37 1968.27,1212.37 1968.85,1212.37 1969.44,1212.37 1970.03,1212.37 1970.61,1212.37 1971.2,1212.37 1971.78,1212.37 1972.37,1212.37 1972.96,1212.37 1973.54,1212.37 1974.13,1212.37 1974.72,1212.37 1975.3,1212.37 1975.89,1212.37 1976.48,1212.37 1977.06,1212.37 1977.65,1212.37 1978.24,1212.37 1978.82,1212.37 1979.41,1212.37 1979.99,1212.37 1980.58,1212.37 1981.17,1212.37 1981.75,1212.37 1982.34,1212.37 1982.93,1212.37 1983.51,1212.37 1984.1,1212.37 1984.69,1212.37 1985.27,1212.37 1985.86,1212.37 1986.45,1212.37 1987.03,1212.37 1987.62,1212.37 1988.2,1212.37 1988.79,1212.37 1989.38,1212.37 1989.96,1212.37 1990.55,1212.37 1991.14,1212.37 1991.72,1212.37 1992.31,1212.37 1992.9,1212.37 1993.48,1212.37 1994.07,1212.37 1994.65,1212.37 1995.24,1212.37 1995.83,1212.37 1996.41,1212.37 1997,1212.37 1997.59,1212.37 1998.17,1212.37 1998.76,1212.37 1999.35,1212.37 1999.93,1212.37 2000.52,1212.37 2001.11,1212.37 2001.69,1212.37 2002.28,1212.37 2002.86,1212.37 2003.45,1212.37 2004.04,1212.37 2004.62,1212.37 2005.21,1212.37 2005.8,1212.37 2006.38,1212.37 2006.97,1212.37 2007.56,1212.37 2008.14,1212.37 2008.73,1212.37 2009.32,1212.37 2009.9,1212.37 2010.49,1212.37 2011.07,1212.37 2011.66,1212.37 2012.25,1212.37 2012.83,1212.37 2013.42,1212.37 2014.01,1212.37 2014.59,1212.37 2015.18,1212.37 2015.77,1212.37 2016.35,1212.37 2016.94,1212.37 2017.53,1212.37 2018.11,1212.37 2018.7,1212.37 2019.28,1212.37 2019.87,1212.37 2020.46,1212.37 2021.04,1212.37 2021.63,1212.37 2022.22,1212.37 2022.8,1212.37 2023.39,1212.37 2023.98,1212.37 2024.56,1212.37 2025.15,1212.37 2025.73,1212.37 2026.32,1212.37 2026.91,1212.37 2027.49,1212.37 2028.08,1212.37 2028.67,1212.37 2029.25,1212.37 2029.84,1212.37 2030.43,1212.37 2031.01,1212.37 2031.6,1212.37 2032.19,1212.37 2032.77,1212.37 2033.36,1212.37 2033.94,1212.37 2034.53,1212.37 2035.12,1212.37 2035.7,1212.37 2036.29,1212.37 2036.88,1212.37 2037.46,1212.37 2038.05,1212.37 2038.64,1212.37 2039.22,1212.37 2039.81,1212.37 2040.4,1212.37 2040.98,1212.37 2041.57,1212.37 2042.15,1212.37 2042.74,1212.37 2043.33,1212.37 2043.91,1212.37 2044.5,1212.37 2045.09,1212.37 2045.67,1212.37 2046.26,1212.37 2046.85,1212.37 2047.43,1212.37 2048.02,1212.37 2048.6,1212.37 2049.19,1212.37 2049.78,1212.37 2050.36,1212.37 2050.95,1212.37 2051.54,1212.37 2052.12,1212.37 2052.71,1212.37 2053.3,1212.37 2053.88,1212.37 2054.47,1212.37 2055.06,1212.37 2055.64,1212.37 2056.23,1212.37 2056.81,1212.37 2057.4,1212.37 2057.99,1212.37 2058.57,1212.37 2059.16,1212.37 2059.75,1212.37 2060.33,1212.37 2060.92,1212.37 2061.51,1212.37 2062.09,1212.37 2062.68,1212.37 2063.27,1212.37 2063.85,1212.37 2064.44,1212.37 2065.02,1212.37 2065.61,1212.37 2066.2,1212.37 2066.78,1212.37 2067.37,1212.37 2067.96,1212.37 2068.54,1212.37 2069.13,1212.37 2069.72,1212.37 2070.3,1212.37 2070.89,1212.37 2071.48,1212.37 2072.06,1212.37 2072.65,1212.37 2073.23,1212.37 2073.82,1212.37 2074.41,1212.37 2074.99,1212.37 2075.58,1212.37 2076.17,1212.37 2076.75,1212.37 2077.34,1212.37 2077.93,1212.37 2078.51,1212.37 2079.1,1212.37 2079.68,1212.37 2080.27,1212.37 2080.86,1212.37 2081.44,1212.37 2082.03,1212.37 2082.62,1212.37 2083.2,1212.37 2083.79,1212.37 2084.38,1212.37 2084.96,1212.37 2085.55,1212.37 2086.14,1212.37 2086.72,1212.37 2087.31,1212.37 2087.89,1212.37 2088.48,1212.37 2089.07,1212.37 2089.65,1212.37 2090.24,1212.37 2090.83,1212.37 2091.41,1212.37 2092,1212.37 2092.59,1212.37 2093.17,1212.37 2093.76,1212.37 2094.35,1212.37 2094.93,1212.37 2095.52,1212.37 2096.1,1212.37 2096.69,1212.37 2097.28,1212.37 2097.86,1212.37 2098.45,1212.37 2099.04,1212.37 2099.62,1212.37 2100.21,1212.37 2100.8,1212.37 2101.38,1212.37 2101.97,1212.37 2102.55,1212.37 2103.14,1212.37 2103.73,1212.37 2104.31,1212.37 2104.9,1212.37 2105.49,1212.37 2106.07,1212.37 2106.66,1212.37 2107.25,1212.37 2107.83,1212.37 2108.42,1212.37 2109.01,1212.37 2109.59,1212.37 2110.18,1212.37 2110.76,1212.37 2111.35,1212.37 2111.94,1212.37 2112.52,1212.37 2113.11,1212.37 2113.7,1212.37 2114.28,1212.37 2114.87,1212.37 2115.46,1212.37 2116.04,1212.37 2116.63,1212.37 2117.22,1212.37 2117.8,1212.37 2118.39,1212.37 2118.97,1212.37 2119.56,1212.37 2120.15,1212.37 2120.73,1212.37 2121.32,1212.37 2121.91,1212.37 2122.49,1212.37 2123.08,1212.37 2123.67,1212.37 2124.25,1212.37 2124.84,1212.37 2125.42,1212.37 2126.01,1212.37 2126.6,1212.37 2127.18,1212.37 2127.77,1212.37 2128.36,1212.37 2128.94,1212.37 2129.53,1212.37 2130.12,1212.37 2130.7,1212.37 2131.29,1212.37 2131.88,1212.37 2132.46,1212.37 2133.05,1212.37 2133.63,1212.37 2134.22,1212.37 2134.81,1212.37 2135.39,1212.37 2135.98,1212.37 2136.57,1212.37 2137.15,1212.37 2137.74,1212.37 2138.33,1212.37 2138.91,1212.37 2139.5,1212.37 2140.09,1212.37 2140.67,1212.37 2141.26,1212.37 2141.84,1212.37 2142.43,1212.37 2143.02,1212.37 2143.6,1212.37 2144.19,1212.37 2144.78,1212.37 2145.36,1212.37 2145.95,1212.37 2146.54,1212.37 2147.12,1212.37 2147.71,1212.37 2148.3,1212.37 2148.88,1212.37 2149.47,1212.37 2150.05,1212.37 2150.64,1212.37 2151.23,1212.37 2151.81,1212.37 2152.4,1212.37 2152.99,1212.37 2153.57,1212.37 2154.16,1212.37 2154.75,1212.37 2155.33,1212.37 2155.92,1212.37 2156.5,1212.37 2157.09,1212.37 2157.68,1212.37 2158.26,1212.37 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.04,1194.25 1399.36,899.083 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.85 985.439,1194.25 2158.26,1194.25 2158.26,1229.85 985.439,1229.85 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip853\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip853)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-61.1853 162.114,-1436.53 162.673,-2674.76 163.232,-2596.44 163.792,-2570.13 164.351,-3650.03 164.91,-4712.81 165.469,-5610.71 166.029,-6465.26 166.588,-5397.78 167.147,-6190.76 167.706,-6963.37 168.266,-7606.43 168.825,-8202.51 169.384,-8753.33 169.943,-9248 170.503,-9030.15 171.062,-9444.98 171.621,-9821.43 172.18,-10153.6 172.74,-10436.3 173.299,-10688.9 173.858,-10897.9 174.417,-11073.6 174.977,-11204.8 175.536,-11313.7 176.095,-11404.1 176.655,-11470.4 177.214,-11500.9 177.773,-11213.2 178.332,-11228.9 178.892,-11235.2 179.451,-11215.9 180.01,-10933 180.569,-10647.5 181.129,-10589.4 181.688,-10522 182.247,-10229.2 182.806,-10139.8 183.366,-9865.61 183.925,-9754.64 184.484,-9480.78 185.043,-9367.98 185.603,-9244.61 186.162,-8858.93 186.721,-8722.53 187.28,-8472.53 187.84,-8226.45 188.399,-7893.83 188.958,-7583.58 189.517,-7363.2 190.077,-7239.54 190.636,-6859.75 191.195,-6745.79 191.754,-6474.75 192.314,-6297.63 192.873,-6187.59 193.432,-5942.4 193.991,-5702.7 194.551,-5533.66 195.11,-5190.42 195.669,-5099.65 196.228,-4950.95 196.788,-4802.76 197.347,-4664.03 197.906,-4574.16 198.465,-4392.09 199.025,-4209.5 199.584,-4038.24 200.143,-3865.66 200.702,-3609.68 201.262,-3450.68 201.821,-3173.3 202.38,-3075.04 202.939,-2977.53 203.499,-2878.63 204.058,-2743.39 204.617,-2643.75 205.176,-2585.79 205.736,-2423.22 206.295,-2370.75 206.854,-2283.01 207.413,-2165.74 207.973,-2115.51 208.532,-2060.88 209.091,-1947.26 209.65,-1866.75 210.21,-1759.49 210.769,-1651.12 211.328,-1604.32 211.887,-1559.78 212.447,-1456.85 213.006,-1382.38 213.565,-1309.66 214.124,-1214.71 214.684,-1177.47 215.243,-1110.71 215.802,-1066.91 216.361,-970.679 216.921,-906.348 217.48,-816.85 218.039,-780.798 218.598,-671.659 219.158,-639.547 219.717,-604.628 220.276,-529.139 220.835,-481.033 221.395,-450.618 221.954,-374.684 222.513,-345.097 223.072,-291.998 223.632,-242.075 224.191,-215.925 224.75,-149.343 225.309,-98.6388 225.869,-74.6619 226.428,-10.6859 226.987,26.3435 227.546,2.96325 228.106,67.9782 228.665,152.582 229.224,167.882 229.783,202.115 230.343,236.291 230.902,252.916 231.461,307.596 232.02,339.455 232.58,350.27 233.139,357.95 233.698,389.508 234.257,440.142 234.817,485.909 235.376,514.969 235.935,520.621 236.494,567.909 237.054,594.107 237.613,600.347 238.172,624.157 238.731,626.216 239.291,630.075 239.85,673.875 240.409,717.327 240.968,754.546 241.528,754.77 242.087,758.384 242.646,814.701 243.205,775.367 243.765,777.717 244.324,847.338 244.883,845.127 245.442,844.244 246.002,841.147 246.561,838.813 247.12,854.512 247.679,871.924 248.239,941.79 248.798,936.186 249.357,928.853 249.916,921.771 250.476,931.896 251.035,944.516 251.594,954.86 252.153,1020.16 252.713,1032.9 253.272,1045.52 253.831,984.307 254.39,977.229 254.95,958.047 255.509,954.274 256.068,968.174 256.627,1011.97 257.187,1023.57 257.746,1036.51 258.305,1064.7 258.864,1070.32 259.424,1058.89 259.983,1081.22 260.542,1103.5 261.101,1110.61 261.661,1079.76 262.22,1052.35 262.779,1043.92 263.338,1051.78 263.898,1046.62 264.457,1041.24 265.016,1035.04 265.575,1061.89 266.135,1054.08 266.694,1091.94 267.253,1080.49 267.812,1068.31 268.372,1044.15 268.931,1088.44 269.49,1131.54 270.049,1116.2 270.609,1153.01 271.168,1138.91 271.727,1144.53 272.286,1114.94 272.846,1103.86 273.405,1056.88 273.964,1048.39 274.523,1037.67 275.083,1031.62 275.642,1025.98 276.201,1019.92 276.76,1017.21 277.32,1025.2 277.879,1032.18 278.438,1054.75 278.997,1043.81 279.557,1055.43 280.116,1066.41 280.675,1040.9 281.234,1051.45 281.794,1043.27 282.353,1031.41 282.912,1040.73 283.471,1031.23 284.031,1058.26 284.59,1053.18 285.149,1064.86 285.708,1060.49 286.268,1052.78 286.827,1061.63 287.386,1083.4 287.945,1090.6 288.505,1096.63 289.064,1088.43 289.623,1045.15 290.182,1067.51 290.742,1038.69 291.301,1016.47 291.86,1008.31 292.419,1053.66 292.979,1063.03 293.538,1022.53 294.097,997.669 294.656,972.875 295.216,982.895 295.775,1027.74 296.334,1039.54 296.893,1032.48 297.453,1026.6 298.012,1002.45 298.571,998.409 299.13,1010.57 299.69,1020.39 300.249,1028.26 300.808,1001.93 301.368,997.313 301.927,987.466 302.486,997.198 303.045,1024.63 303.605,1017.89 304.164,977.901 304.723,1007.41 305.282,1034.21 305.842,1009.29 306.401,1005.21 306.96,1033.71 307.519,1012.55 308.079,992.484 308.638,969.041 309.197,967.312 309.756,978.262 310.316,1005.92 310.875,999.873 311.434,977.429 311.993,986.45 312.553,1013.5 313.112,1006.86 313.671,988.09 314.23,998.072 314.79,991.538 315.349,990.442 315.908,983.549 316.467,960.44 317.027,924.796 317.586,956.837 318.145,985.067 318.704,1012.03 319.264,1035.65 319.823,1007 320.382,1031.83 320.941,1041.68 321.501,1034.68 322.06,1031.06 322.619,1019.95 323.178,1022.69 323.738,1011.14 324.297,1019.76 324.856,1014.86 325.415,1006.42 325.975,999.685 326.534,975.273 327.093,966.122 327.652,973.721 328.212,965.967 328.771,940.047 329.33,886.999 329.889,933.178 330.449,945.497 331.008,941.211 331.567,954.52 332.126,968.328 332.686,960.003 333.245,984.806 333.804,1009.8 334.363,966.596 334.923,977.782 335.482,968.094 336.041,975.711 336.6,952.387 337.16,947.508 337.719,975.316 338.278,982.286 338.837,909.78 339.397,906.708 339.956,934.655 340.515,898.648 341.074,862.896 341.634,910.041 342.193,872.527 342.752,883.257 343.311,881.053 343.871,892.056 344.43,891.779 344.989,904.073 345.548,867.707 346.108,882.683 346.667,877.4 347.226,890.412 347.785,856.641 348.345,869.802 348.904,849.699 349.463,828.367 350.022,858.604 350.582,871.005 351.141,880.826 351.7,910.994 352.259,905.356 352.819,916.868 353.378,879.975 353.937,878.803 354.496,876.931 355.056,877.525 355.615,861.996 356.174,876.865 356.733,891.236 357.293,872.652 357.852,870.429 358.411,869.88 358.97,898.946 359.53,878.314 360.089,892.444 360.648,901.108 361.207,912.96 361.767,905.821 362.326,919.805 362.885,866.758 363.444,862.249 364.004,843.287 364.563,841.471 365.122,856.919 365.681,871.55 366.241,867.138 366.8,917.814 367.359,911.704 367.918,924.438 368.478,932.916 369.037,896.129 369.596,889.72 370.155,884.303 370.715,907.358 371.274,897.683 371.833,907.283 372.392,916.706 372.952,940.002 373.511,944.164 374.07,969.719 374.629,992.589 375.189,979.755 375.748,954.362 376.307,962.076 376.866,982.654 377.426,1004.01 377.985,974.612 378.544,931.11 379.103,908.872 379.663,917.227 380.222,879.072 380.781,843.176 381.34,856.971 381.9,839.427 382.459,805.683 383.018,837.631 383.577,837.673 384.137,849.96 384.696,813.902 385.255,828.521 385.814,825.332 386.374,856.887 386.933,871.801 387.492,882.431 388.051,894.219 388.611,838.147 389.17,836.399 389.729,847.67 390.288,862.388 390.848,841.711 391.407,836.019 391.966,831.474 392.525,845.753 393.085,842.094 393.644,839.962 394.203,867.308 394.762,878.403 395.322,889.57 395.881,851.898 396.44,799.996 396.999,865.038 397.559,857.74 398.118,838.991 398.677,835.24 399.236,802.949 399.796,784.525 400.355,765.45 400.914,780.171 401.473,760.565 402.033,775.697 402.592,761.264 403.151,782.231 403.71,798.326 404.27,765.457 404.829,766.633 405.388,748.979 405.947,763.85 406.507,777.497 407.066,812.559 407.625,794.331 408.184,790.806 408.744,806.63 409.303,788.611 409.862,770.491 410.421,787.075 410.981,801.162 411.54,734.302 412.099,722.34 412.658,722.131 413.218,693.841 413.777,713.67 414.336,716.156 414.895,751.133 415.455,751.365 416.014,751.353 416.573,718.032 417.132,690.017 417.692,742.547 418.251,715.452 418.81,683.65 419.369,705.553 419.929,675.844 420.488,648.054 421.047,655.476 421.606,725.604 422.166,709.056 422.725,727.771 423.284,764.574 423.843,745.655 424.403,731.456 424.962,734.529 425.521,708.561 426.08,724.897 426.64,692.721 427.199,714.586 427.758,700.359 428.318,687.048 428.877,689.433 429.436,756.351 429.995,758.314 430.555,794.554 431.114,825.462 431.673,886.548 432.232,880.018 432.792,890.651 433.351,867.589 433.91,864.583 434.469,858.983 435.029,888.673 435.588,881.406 436.147,875.324 436.706,867.601 437.266,862.255 437.825,873.387 438.384,863.53 438.943,857.871 439.503,839.912 440.062,852.853 440.621,828.868 441.18,825.209 441.74,789.315 442.299,787.968 442.858,755.016 443.417,787.114 443.977,770.833 444.536,755.458 445.095,742.42 445.654,796.429 446.214,814.19 446.773,792.514 447.332,775.933 447.891,757.15 448.451,773.599 449.01,773.639 449.569,753.522 450.128,723.291 450.688,709.171 451.247,728.608 451.806,683.526 452.365,657.416 452.925,662.406 453.484,634.416 454.043,643.543 454.602,665.605 455.162,702.456 455.721,694.171 456.28,682.267 456.839,668.78 457.399,705.895 457.958,723.861 458.517,741.577 459.076,726.886 459.636,732.256 460.195,734.156 460.754,736.67 461.313,737.314 461.873,756.481 462.432,723.155 462.991,741.882 463.55,742.611 464.11,760.79 464.669,757.52 465.228,743.986 465.787,710.969 466.347,744.365 466.906,727.741 467.465,729.642 468.024,716.681 468.584,719.312 469.143,719.993 469.702,721.568 470.261,691.909 470.821,693.831 471.38,711.264 471.939,713.677 472.498,732.622 473.058,752.229 473.617,751.578 474.176,765.564 474.735,764.606 475.295,758.787 475.854,756.564 476.413,784.898 476.972,783.738 477.532,749.95 478.091,780.313 478.65,760.104 479.209,728.834 479.769,729.009 480.328,729.226 480.887,747.806 481.446,748.116 482.006,764.475 482.565,764.674 483.124,796.758 483.683,793.408 484.243,772.826 484.802,755.584 485.361,767.456 485.92,799.218 486.48,843.823 487.039,837.251 487.598,879.377 488.157,872.624 488.717,849.068 489.276,846.533 489.835,822.945 490.394,835.267 490.954,846.899 491.513,841.332 492.072,869.665 492.631,878.867 493.191,871.777 493.75,833.184 494.309,782.724 494.868,779.291 495.428,773.825 495.987,771.091 496.546,767.777 497.105,764.835 497.665,749.882 498.224,751.194 498.783,766.383 499.342,730.742 499.902,748.134 500.461,747.303 501.02,764.106 501.579,777.344 502.139,759.313 502.698,773.178 503.257,772.38 503.816,800.345 504.376,797.554 504.935,807.992 505.494,791.483 506.053,770.217 506.613,781.527 507.172,727.817 507.731,725.702 508.29,691.064 508.85,711.099 509.409,711.502 509.968,716.853 510.527,703.485 511.087,700.598 511.646,715.209 512.205,698.042 512.764,684.073 513.324,702.228 513.883,736.534 514.442,733.809 515.001,715.794 515.561,682.422 516.12,682.989 516.679,683.599 517.238,703.128 517.798,692.808 518.357,709.075 518.916,677.113 519.475,694.766 520.035,711.749 520.594,712.715 521.153,717.813 521.712,682.856 522.272,670.449 522.831,641.746 523.39,679.608 523.949,697.851 524.509,700.394 525.068,699.58 525.627,699.101 526.186,735.257 526.746,751.48 527.305,764.24 527.864,759.29 528.423,742.965 528.983,726.839 529.542,726.731 530.101,711.685 530.66,710.848 531.22,712.733 531.779,681.2 532.338,683.757 532.897,698.975 533.457,696.4 534.016,695.818 534.575,726.491 535.134,708.725 535.694,727.884 536.253,724.578 536.812,709.691 537.371,710.798 537.931,727.749 538.49,729.559 539.049,747.247 539.608,795.27 540.168,810.79 540.727,804.12 541.286,782.301 541.845,813.518 542.405,811.435 542.964,838.439 543.523,834.255 544.082,829.797 544.642,825.673 545.201,821.454 545.76,800.348 546.319,779.457 546.879,809.769 547.438,822.904 547.997,799.929 548.556,809.796 549.116,791.735 549.675,721.058 550.234,752.209 550.793,721.128 551.353,725.847 551.912,726.238 552.471,710.908 553.031,713.78 553.59,713.596 554.149,702.61 554.708,703.285 555.268,735.288 555.827,714.723 556.386,680.16 556.945,726.351 557.505,728.274 558.064,728.634 558.623,741.627 559.182,759.736 559.742,758.928 560.301,757.618 560.86,770.833 561.419,769.497 561.979,748.495 562.538,746.351 563.097,744.845 563.656,756.588 564.216,739.21 564.775,768.381 565.334,812.768 565.893,823.376 566.453,848.977 567.012,889.346 567.571,884.378 568.13,827.616 568.69,852.343 569.249,830.109 569.808,806.662 570.367,799.393 570.927,794.139 571.486,786.571 572.045,815.082 572.604,810.339 573.164,773.7 573.723,788.196 574.282,818.657 574.841,828.204 575.401,819.836 575.96,815.228 576.519,824.945 577.078,819.465 577.638,815.75 578.197,828.613 578.756,820.684 579.315,795.09 579.875,773.676 580.434,754.535 580.993,717.076 581.552,699.101 582.112,744.256 582.671,756.525 583.23,736.757 583.789,734.749 584.349,664.922 584.908,666.654 585.467,684.064 586.026,651.089 586.586,637.88 587.145,592.626 587.704,583.865 588.263,606.698 588.823,629.935 589.382,635.013 589.941,640.58 590.5,610.385 591.06,615.509 591.619,622.931 592.178,614.145 592.737,620.416 593.297,626.791 593.856,598.663 594.415,604.71 594.974,595.793 595.534,602.713 596.093,609.913 596.652,649.337 597.211,653.932 597.771,640.822 598.33,661.928 598.889,662.549 599.448,635.158 600.008,654.019 600.567,654.897 601.126,671.051 601.685,675.879 602.245,739.652 602.804,722.485 603.363,705.416 603.922,721.208 604.482,706.235 605.041,708.385 605.6,725.74 606.159,687.234 606.719,671.974 607.278,688.709 607.837,672.465 608.396,676.353 608.956,710.856 609.515,728.828 610.074,694.356 610.633,714.495 611.193,763.795 611.752,761.624 612.311,776.09 612.87,791.031 613.43,767.687 613.989,797.004 614.548,778.312 615.107,776.098 615.667,773.49 616.226,802.445 616.785,749.943 617.344,759.512 617.904,760.659 618.463,760.444 619.022,773.235 619.581,784.474 620.141,778.517 620.7,757.813 621.259,771.571 621.818,736.239 622.378,720.485 622.937,736.997 623.496,716.002 624.055,712.828 624.615,710.939 625.174,722.515 625.733,720.719 626.292,737.115 626.852,705.995 627.411,720.504 627.97,738.435 628.529,735.382 629.089,715.439 629.648,714.396 630.207,679.847 630.766,678.55 631.326,697.601 631.885,676.482 632.444,663.634 633.003,630.936 633.563,585.857 634.122,591.422 634.681,597.505 635.24,599.674 635.8,636.79 636.359,622.909 636.918,644.398 637.477,632.469 638.037,635.465 638.596,638.383 639.155,628.162 639.714,645.57 640.274,649.704 640.833,650.029 641.392,636.662 641.951,621.956 642.511,643.929 643.07,648.232 643.629,668.62 644.188,702.344 644.748,752.069 645.307,751.93 645.866,716.498 646.425,717.276 646.985,732.245 647.544,731.056 648.103,680.433 648.662,648.533 649.222,667.581 649.781,637.926 650.34,658.3 650.899,628.879 651.459,620.187 652.018,607.867 652.577,610.03 653.136,615.815 653.696,622.772 654.255,628.434 654.814,628.457 655.373,603.567 655.933,611.326 656.492,652.031 657.051,620.43 657.61,609.525 658.17,597.428 658.729,634.366 659.288,621.528 659.847,626.704 660.407,614.735 660.966,619.647 661.525,654.956 662.084,675.217 662.644,692.644 663.203,692.321 663.762,709.442 664.321,724.186 664.881,726.518 665.44,722.798 665.999,738.386 666.558,737.869 667.118,733.961 667.677,714.644 668.236,712.524 668.795,698.555 669.355,695.093 669.914,713.341 670.473,663.316 671.032,649.811 671.592,684.096 672.151,687.396 672.71,671.542 673.269,676.859 673.829,664.21 674.388,702.18 674.947,685.178 675.506,670.8 676.066,669.421 676.625,701.046 677.184,713.395 677.743,681.338 678.303,681.405 678.862,695.949 679.421,696.982 679.981,696.871 680.54,710.574 681.099,710.2 681.658,742.733 682.218,725.741 682.777,741.841 683.336,708.823 683.895,722.454 684.455,704.444 685.014,721.14 685.573,722.624 686.132,720.584 686.692,720.581 687.251,753.998 687.81,768.739 688.369,811.601 688.929,818.112 689.488,843.716 690.047,834.827 690.606,828.835 691.166,822.362 691.725,835.415 692.284,827.467 692.843,818.669 693.403,795.933 693.962,776.19 694.521,758.902 695.08,785.411 695.64,745.705 696.199,757.539 696.758,771.439 697.317,772.211 697.877,770.37 698.436,766.296 698.995,743.846 699.554,743.606 700.114,740.505 700.673,733.408 701.232,715.112 701.791,684.215 702.351,683.212 702.91,702.725 703.469,684.186 704.028,683.768 704.588,735.407 705.147,686.588 705.706,683.49 706.265,682.48 706.825,684.686 707.384,637.133 707.943,642.614 708.502,630.638 709.062,632.246 709.621,650.596 710.18,666.39 710.739,665.351 711.299,667.416 711.858,703.02 712.417,703.313 712.976,716.473 713.536,731.649 714.095,682.309 714.654,649.33 715.213,667.18 715.773,671.439 716.332,688.569 716.891,703.644 717.45,708.53 718.01,691.196 718.569,692.95 719.128,755.104 719.687,768.655 720.247,749.513 720.806,748.44 721.365,713.457 721.924,745.217 722.484,772.228 723.043,801.392 723.602,810.304 724.161,800.865 724.721,776.013 725.28,771.999 725.839,750.478 726.398,731.239 726.958,749.053 727.517,728.934 728.076,726.776 728.635,739.715 729.195,722.539 729.754,736.512 730.313,714.115 730.872,757.255 731.432,768.201 731.991,746.831 732.55,756.596 733.109,754.226 733.669,752.506 734.228,730.206 734.787,726.658 735.346,789.742 735.906,785.629 736.465,764.143 737.024,728.26 737.583,712.843 738.143,726.971 738.702,723.94 739.261,687.006 739.82,704.243 740.38,721.634 740.939,700.884 741.498,697.836 742.057,695.618 742.617,680.675 743.176,666.933 743.735,686.263 744.294,688.176 744.854,703.659 745.413,733.955 745.972,699.018 746.531,697.574 747.091,667.302 747.65,683.308 748.209,668.669 748.768,694.84 749.328,694.428 749.887,726.539 750.446,739.046 751.005,754.934 751.565,735.751 752.124,750.18 752.683,792.856 753.242,822.079 753.802,792.003 754.361,767.451 754.92,782.68 755.479,795.155 756.039,774.222 756.598,738.404 757.157,715.372 757.716,694.204 758.276,692.81 758.835,628.699 759.394,633.451 759.953,633.201 760.513,665.01 761.072,635.93 761.631,591.529 762.19,631.809 762.75,650.821 763.309,653.941 763.868,618.878 764.427,638.312 764.987,643.55 765.546,641.807 766.105,609.049 766.664,598.028 767.224,616.191 767.783,618.418 768.342,605.952 768.901,609.496 769.461,680.949 770.02,680.359 770.579,664.76 771.138,683.254 771.698,683.425 772.257,713.222 772.816,714.528 773.375,712.273 773.935,715.202 774.494,711.707 775.053,695.452 775.612,647.097 776.172,668.983 776.731,652.159 777.29,666.709 777.849,669.129 778.409,705.792 778.968,702.685 779.527,700.153 780.086,646.444 780.646,632.276 781.205,632.65 781.764,619.415 782.323,594.316 782.883,599.739 783.442,570.893 784.001,576.039 784.56,567.159 785.12,576.386 785.679,647.909 786.238,679.953 786.797,667.004 787.357,670.372 787.916,638.54 788.475,626.11 789.034,644.382 789.594,648.186 790.153,648.502 790.712,616.947 791.271,574.035 791.831,582.582 792.39,538.724 792.949,529.082 793.508,553.417 794.068,577.222 794.627,616.165 795.186,667.007 795.745,667.142 796.305,683.53 796.864,669.22 797.423,639.277 797.982,660.899 798.542,645.734 799.101,647.03 799.66,648.435 800.219,634.91 800.779,658.787 801.338,693.167 801.897,710.719 802.456,714.071 803.016,710.376 803.575,708.907 804.134,723.628 804.693,719.748 805.253,716.993 805.812,732.677 806.371,746.724 806.931,762.318 807.49,728.06 808.049,724.187 808.608,677.916 809.168,680.166 809.727,715.817 810.286,736.075 810.845,780.253 811.405,794.162 811.964,791.562 812.523,788.292 813.082,783.614 813.642,776.655 814.201,773.256 814.76,783.234 815.319,778.997 815.879,775.596 816.438,785.867 816.997,800.202 817.556,780.618 818.116,773.274 818.675,798.632 819.234,776.383 819.793,774.186 820.353,752.544 820.912,749.912 821.471,760.683 822.03,723.613 822.59,720.727 823.149,703.59 823.708,735.597 824.267,752.582 824.827,754.105 825.386,750.959 825.945,732.876 826.504,750.215 827.064,780.694 827.623,808.154 828.182,820.542 828.741,830.838 829.301,789.42 829.86,750.482 830.419,782.447 830.978,760.099 831.538,719.612 832.097,718.093 832.656,715.413 833.215,695.834 833.775,710.112 834.334,694.944 834.893,692.716 835.452,676.28 836.012,674.439 836.571,659.345 837.13,659.992 837.689,663.865 838.249,597.871 838.808,615.982 839.367,621.478 839.926,643.193 840.486,640.912 841.045,662.447 841.604,630.339 842.163,605.85 842.723,592.744 843.282,600.342 843.841,640.616 844.4,673.361 844.96,672.669 845.519,672.032 846.078,674.018 846.637,675.775 847.197,659.311 847.756,691.894 848.315,691.191 848.874,675.29 849.434,660.82 849.993,643.191 850.552,644.777 851.111,629.862 851.671,633.149 852.23,637.665 852.789,620.765 853.348,621.499 853.908,654.88 854.467,640.736 855.026,643.13 855.585,646.093 856.145,650.39 856.704,650.266 857.263,636.09 857.822,653.789 858.382,674.295 858.941,653.652 859.5,657.227 860.059,669.394 860.619,702.99 861.178,686.937 861.737,689.687 862.296,704.672 862.856,673.541 863.415,709.174 863.974,727.813 864.533,712.331 865.093,773.138 865.652,755.343 866.211,735.348 866.77,733.836 867.33,748.473 867.889,746.314 868.448,697.918 869.007,663.872 869.567,670.905 870.126,672.517 870.685,656.904 871.244,645.564 871.804,659.555 872.363,695.62 872.922,680.758 873.481,699.205 874.041,699.266 874.6,745.609 875.159,743.949 875.718,724.562 876.278,723.848 876.837,703.71 877.396,705.216 877.955,687.548 878.515,686.759 879.074,668.4 879.633,701.621 880.192,667.626 880.752,681.917 881.311,745.719 881.87,775.262 882.429,769.34 882.989,699.52 883.548,701.539 884.107,719.102 884.666,718.911 885.226,701.605 885.785,682.335 886.344,679.447 886.903,694.851 887.463,680.831 888.022,679.31 888.581,665.381 889.14,682.159 889.7,667.167 890.259,685.424 890.818,672.548 891.377,688.45 891.937,685.748 892.496,684.87 893.055,680.439 893.614,633.339 894.174,601.495 894.733,592.33 895.292,581.621 895.851,586.605 896.411,593.185 896.97,615.002 897.529,615.381 898.088,618.333 898.648,621.72 899.207,639.307 899.766,609.684 900.325,582.792 900.885,633.218 901.444,649.72 902.003,655.132 902.562,676.532 903.122,676.387 903.681,674.88 904.24,695.415 904.799,665.477 905.359,666.781 905.918,621.752 906.477,642.484 907.036,679.499 907.596,632.03 908.155,636.682 908.714,656.801 909.273,659.524 909.833,693.383 910.392,696.671 910.951,681.306 911.51,696.783 912.07,712.834 912.629,712.928 913.188,709.273 913.747,690.437 914.307,689.962 914.866,688.836 915.425,704.78 915.984,721.36 916.544,721.107 917.103,684.877 917.662,668.249 918.221,684.173 918.781,719.94 919.34,717.553 919.899,682.144 920.458,684.174 921.018,699.385 921.577,714.511 922.136,727.963 922.695,725.803 923.255,739.031 923.814,736.571 924.373,734.135 924.932,731.525 925.492,745.378 926.051,745.605 926.61,710.455 927.169,708.421 927.729,724.195 928.288,719.334 928.847,750.84 929.406,744.904 929.966,739.936 930.525,769.292 931.084,748.339 931.644,729.864 932.203,710.38 932.762,706.213 933.321,687.617 933.881,671.747 934.44,658.101 934.999,660.432 935.558,709.847 936.118,725.581 936.677,724.533 937.236,724.762 937.795,692.277 938.355,708.068 938.914,677.925 939.473,693.183 940.032,694.932 940.592,677.209 941.151,695.743 941.71,697.439 942.269,678.301 942.829,678.875 943.388,662.69 943.947,663.116 944.506,646.534 945.066,677.221 945.625,713.014 946.184,691.061 946.743,707.063 947.303,688.996 947.862,672.473 948.421,673.343 948.98,688.202 949.54,687.775 950.099,685.873 950.658,702.455 951.217,734.912 951.777,731.928 952.336,663.831 952.895,680.391 953.454,694.186 954.014,689.595 954.573,674.676 955.132,660.47 955.691,657.09 956.251,671.932 956.81,719.387 957.369,702.052 957.928,686.987 958.488,704.534 959.047,705.41 959.606,707.402 960.165,694.664 960.725,709.224 961.284,681.009 961.843,664.629 962.402,679.675 962.962,680.986 963.521,726.642 964.08,708.442 964.639,707.667 965.199,706.731 965.758,690.656 966.317,658.303 966.876,624.812 967.436,611.196 967.995,649.427 968.554,650.541 969.113,667.407 969.673,656.464 970.232,656.792 970.791,691.779 971.35,723.687 971.91,688.977 972.469,691.697 973.028,690.216 973.587,725.438 974.147,741.176 974.706,706.937 975.265,725.235 975.824,738.216 976.384,718.527 976.943,699.834 977.502,717.057 978.061,700.309 978.621,716.349 979.18,764.024 979.739,726.251 980.298,708.304 980.858,693.993 981.417,712.652 981.976,746.115 982.535,740.066 983.095,782.018 983.654,792.204 984.213,786.443 984.772,781.678 985.332,775.26 985.891,752.962 986.45,749.049 987.009,777.61 987.569,806.365 988.128,769 988.687,767.191 989.246,766.57 989.806,760.555 990.365,773.81 990.924,771.839 991.483,750.914 992.043,716.707 992.602,715.649 993.161,731.3 993.72,711.965 994.28,708.193 994.839,736.399 995.398,732.745 995.957,763.051 996.517,781.764 997.076,740.851 997.635,751.477 998.194,778.407 998.754,774.312 999.313,769.951 999.872,778.832 1000.43,775.077 1000.99,740.463 1001.55,739.898 1002.11,692.427 1002.67,692.876 1003.23,660.625 1003.79,708.855 1004.35,708.962 1004.91,708.21 1005.46,708.369 1006.02,708.572 1006.58,722.987 1007.14,754.319 1007.7,767.46 1008.26,763.092 1008.82,808.19 1009.38,787.039 1009.94,780.519 1010.5,773.311 1011.06,769.318 1011.62,780.815 1012.18,843.67 1012.73,832.201 1013.29,824.356 1013.85,864.133 1014.41,856.412 1014.97,826.534 1015.53,817.044 1016.09,776.32 1016.65,803.519 1017.21,811.641 1017.77,809.367 1018.33,802.864 1018.89,748.814 1019.45,698.082 1020.01,701.732 1020.56,685.985 1021.12,685.756 1021.68,673.131 1022.24,657.347 1022.8,661.07 1023.36,693.387 1023.92,675.017 1024.48,624.403 1025.04,691.167 1025.6,690.532 1026.16,675.711 1026.72,660.43 1027.28,662.541 1027.83,646.091 1028.39,678.823 1028.95,697.8 1029.51,695.164 1030.07,727.821 1030.63,743.691 1031.19,720.176 1031.75,652.174 1032.31,636.739 1032.87,592.778 1033.43,570.196 1033.99,607.846 1034.55,611.77 1035.1,632.622 1035.66,638.112 1036.22,561.344 1036.78,551.006 1037.34,544.726 1037.9,551.006 1038.46,560.456 1039.02,553.211 1039.58,542.586 1040.14,548.282 1040.7,540.172 1041.26,536.057 1041.82,529.61 1042.38,521.122 1042.93,559.881 1043.49,550.605 1044.05,589.608 1044.61,595.874 1045.17,596.388 1045.73,618.563 1046.29,590.887 1046.85,564.45 1047.41,588.664 1047.97,564.208 1048.53,573.428 1049.09,561.564 1049.65,586.355 1050.2,581.388 1050.76,600.446 1051.32,607.78 1051.88,614.429 1052.44,619.508 1053,655.081 1053.56,659.994 1054.12,616.664 1054.68,621.36 1055.24,624.812 1055.8,634.515 1056.36,637.673 1056.92,690.989 1057.48,706.719 1058.03,673.226 1058.59,639.951 1059.15,658.862 1059.71,694.126 1060.27,704.383 1060.83,731.573 1061.39,741.673 1061.95,724.742 1062.51,706.205 1063.07,706.728 1063.63,738.988 1064.19,754.329 1064.75,749.74 1065.3,759.98 1065.86,769.39 1066.42,765.174 1066.98,776.526 1067.54,785.466 1068.1,795.085 1068.66,756.357 1069.22,734.603 1069.78,716.363 1070.34,697.429 1070.9,668.56 1071.46,654.129 1072.02,657.656 1072.57,670.633 1073.13,674.25 1073.69,657.923 1074.25,643.331 1074.81,642.436 1075.37,644.657 1075.93,630.795 1076.49,616.419 1077.05,619.757 1077.61,606.383 1078.17,605.693 1078.73,624.017 1079.29,593.986 1079.85,597.578 1080.4,599.59 1080.96,636.041 1081.52,636.138 1082.08,635.73 1082.64,670.83 1083.2,690.302 1083.76,693.117 1084.32,708.832 1084.88,721.7 1085.44,723.868 1086,720.39 1086.56,734.278 1087.12,725.837 1087.67,757.549 1088.23,754.042 1088.79,733.393 1089.35,716.146 1089.91,717.439 1090.47,715.575 1091.03,715.437 1091.59,727.765 1092.15,706.798 1092.71,706.661 1093.27,752.045 1093.83,698.868 1094.39,716.113 1094.94,715.978 1095.5,766.197 1096.06,746.873 1096.62,758.355 1097.18,769.67 1097.74,750.266 1098.3,751.486 1098.86,734.007 1099.42,714.313 1099.98,718.129 1100.54,699.316 1101.1,714.524 1101.66,696.782 1102.22,644.801 1102.77,632.878 1103.33,618.074 1103.89,625.071 1104.45,658.285 1105.01,658.036 1105.57,676.816 1106.13,672.039 1106.69,673.118 1107.25,691.964 1107.81,691.134 1108.37,723.463 1108.93,639.27 1109.49,642.247 1110.04,613.862 1110.6,615.639 1111.16,650.987 1111.72,636.236 1112.28,639.433 1112.84,659.409 1113.4,661.658 1113.96,627.81 1114.52,660.931 1115.08,678.526 1115.64,711.224 1116.2,708.301 1116.76,691.052 1117.31,693.328 1117.87,691.456 1118.43,659.071 1118.99,662.131 1119.55,647.753 1120.11,585.751 1120.67,590.543 1121.23,580.237 1121.79,584.42 1122.35,626.78 1122.91,663.106 1123.47,679.611 1124.03,663.525 1124.59,636.638 1125.14,624.694 1125.7,688.613 1126.26,641.289 1126.82,675.353 1127.38,690.649 1127.94,739.377 1128.5,723.762 1129.06,735.783 1129.62,716.272 1130.18,714.673 1130.74,728.728 1131.3,745.236 1131.86,707.761 1132.41,690.855 1132.97,708.313 1133.53,722.741 1134.09,706.94 1134.65,672.873 1135.21,671.385 1135.77,610.237 1136.33,615.063 1136.89,618.234 1137.45,618.106 1138.01,621.122 1138.57,625.261 1139.13,628 1139.68,632.977 1140.24,587.075 1140.8,592.685 1141.36,598.927 1141.92,606.567 1142.48,596.934 1143.04,604.51 1143.6,607.551 1144.16,615.182 1144.72,648.625 1145.28,650.03 1145.84,652.665 1146.4,656.464 1146.96,657.599 1147.51,658.876 1148.07,725.419 1148.63,686.684 1149.19,668.548 1149.75,669.45 1150.31,684.794 1150.87,700.755 1151.43,667.318 1151.99,684.288 1152.55,700.314 1153.11,714.611 1153.67,698.329 1154.23,714.725 1154.78,712.367 1155.34,692.778 1155.9,689.564 1156.46,691.801 1157.02,692.174 1157.58,679.631 1158.14,684.356 1158.7,669.881 1159.26,669.919 1159.82,672.013 1160.38,659.576 1160.94,644.266 1161.5,659.173 1162.05,643.006 1162.61,630.34 1163.17,650.575 1163.73,670.848 1164.29,641.348 1164.85,628.987 1165.41,619.468 1165.97,625.232 1166.53,628.893 1167.09,664.913 1167.65,682.016 1168.21,668.88 1168.77,699.343 1169.33,695.855 1169.88,709.406 1170.44,690.462 1171,702.423 1171.56,704.562 1172.12,736.495 1172.68,718.007 1173.24,733.566 1173.8,749.415 1174.36,764.265 1174.92,757.877 1175.48,767.414 1176.04,760.096 1176.6,773.975 1177.15,753.804 1177.71,736.107 1178.27,750.056 1178.83,763.362 1179.39,745.829 1179.95,724.345 1180.51,720.187 1181.07,752.952 1181.63,700.971 1182.19,682.865 1182.75,684.362 1183.31,682.79 1183.87,699.858 1184.43,696.96 1184.98,698.224 1185.54,699.965 1186.1,731.914 1186.66,714.968 1187.22,763.349 1187.78,777.264 1188.34,788.794 1188.9,794.681 1189.46,773.464 1190.02,802.495 1190.58,783.768 1191.14,778.167 1191.7,771.307 1192.25,702.68 1192.81,703.854 1193.37,689.229 1193.93,687.857 1194.49,639.207 1195.05,657.979 1195.61,646.371 1196.17,662.358 1196.73,628.588 1197.29,632.496 1197.85,617.099 1198.41,698.623 1198.97,683.664 1199.52,683.437 1200.08,729.204 1200.64,714.544 1201.2,712.031 1201.76,725.752 1202.32,706.586 1202.88,739.633 1203.44,717.725 1204,684.864 1204.56,671.257 1205.12,658.401 1205.68,659.401 1206.24,649.045 1206.8,652.688 1207.35,671.508 1207.91,688.036 1208.47,686.124 1209.03,683.527 1209.59,664.252 1210.15,682.992 1210.71,654.749 1211.27,624.594 1211.83,631.655 1212.39,634.744 1212.95,640.58 1213.51,626.37 1214.07,644.134 1214.62,648.291 1215.18,650.72 1215.74,640.13 1216.3,660.183 1216.86,659.85 1217.42,647.807 1217.98,679.715 1218.54,696.895 1219.1,696.774 1219.66,693.042 1220.22,693.074 1220.78,643.926 1221.34,647.896 1221.89,647.058 1222.45,632.974 1223.01,665.918 1223.57,682.74 1224.13,687.259 1224.69,682.991 1225.25,714.704 1225.81,711.587 1226.37,709.986 1226.93,691.187 1227.49,691.74 1228.05,689.13 1228.61,690.285 1229.17,688.461 1229.72,702.993 1230.28,703.788 1230.84,671.734 1231.4,670.766 1231.96,674.647 1232.52,691.154 1233.08,673.879 1233.64,653.474 1234.2,671.869 1234.76,690.678 1235.32,670.96 1235.88,622.15 1236.44,641.303 1236.99,660.831 1237.55,678.356 1238.11,697.156 1238.67,681.326 1239.23,634.395 1239.79,601.63 1240.35,624.058 1240.91,644.306 1241.47,679.524 1242.03,676.174 1242.59,690.602 1243.15,690.135 1243.71,689.187 1244.26,687.393 1244.82,682.222 1245.38,681.082 1245.94,676.807 1246.5,628.365 1247.06,628.529 1247.62,663.903 1248.18,666.968 1248.74,683.757 1249.3,699.71 1249.86,665.662 1250.42,654.234 1250.98,637.557 1251.54,670.459 1252.09,687.032 1252.65,687.215 1253.21,716.393 1253.77,685.681 1254.33,666.495 1254.89,665.986 1255.45,635.134 1256.01,684.381 1256.57,685.045 1257.13,688.582 1257.69,702.248 1258.25,685.505 1258.81,654.889 1259.36,640.121 1259.92,657.926 1260.48,642.232 1261.04,624.094 1261.6,645.352 1262.16,646.127 1262.72,615.744 1263.28,568.281 1263.84,591.54 1264.4,611.241 1264.96,629.937 1265.52,630.435 1266.08,649.368 1266.63,667.477 1267.19,680.903 1267.75,677.273 1268.31,680.809 1268.87,700.039 1269.43,683.502 1269.99,671.047 1270.55,622.952 1271.11,621.362 1271.67,643.129 1272.23,661.381 1272.79,646.285 1273.35,634.736 1273.91,636.44 1274.46,638.553 1275.02,593.822 1275.58,631.835 1276.14,648.293 1276.7,653.294 1277.26,655.08 1277.82,625.302 1278.38,612.314 1278.94,645.289 1279.5,631.651 1280.06,618.456 1280.62,637.555 1281.18,609.784 1281.73,629.048 1282.29,664.75 1282.85,632.206 1283.41,636.734 1283.97,622.971 1284.53,625.774 1285.09,628.667 1285.65,632.827 1286.21,621.39 1286.77,629.192 1287.33,661.75 1287.89,664.219 1288.45,713.461 1289,777.203 1289.56,773.928 1290.12,755.496 1290.68,768.816 1291.24,763.371 1291.8,774.724 1292.36,786.463 1292.92,737.856 1293.48,735.079 1294.04,733.636 1294.6,713.045 1295.16,694.427 1295.72,691.319 1296.28,691.973 1296.83,676.128 1297.39,676.276 1297.95,709.252 1298.51,709.555 1299.07,709.285 1299.63,707.903 1300.19,739.552 1300.75,751.261 1301.31,761.643 1301.87,709.674 1302.43,719.629 1302.99,736.373 1303.55,715.73 1304.1,693.501 1304.66,693.796 1305.22,631.668 1305.78,635.269 1306.34,621.942 1306.9,597.211 1307.46,617.094 1308.02,622.117 1308.58,627.488 1309.14,629.992 1309.7,631.678 1310.26,634.019 1310.82,639.296 1311.38,640.893 1311.93,623.387 1312.49,624.37 1313.05,627.315 1313.61,645.218 1314.17,680.156 1314.73,698.932 1315.29,698.912 1315.85,707.841 1316.41,705.035 1316.97,752.048 1317.53,747.367 1318.09,747.382 1318.65,745.053 1319.2,724.177 1319.76,737.441 1320.32,731.737 1320.88,748.405 1321.44,743.644 1322,743.827 1322.56,740.402 1323.12,736.146 1323.68,764.791 1324.24,759.064 1324.8,772.997 1325.36,783.257 1325.92,765.096 1326.47,744.963 1327.03,771.36 1327.59,768.708 1328.15,779.178 1328.71,774.335 1329.27,787.312 1329.83,783.533 1330.39,759.637 1330.95,771.29 1331.51,784.97 1332.07,766.246 1332.63,756.658 1333.19,752.408 1333.75,730.223 1334.3,787.598 1334.86,748.961 1335.42,742.596 1335.98,723.622 1336.54,721.882 1337.1,673.316 1337.66,709.061 1338.22,724.258 1338.78,686.207 1339.34,704.178 1339.9,769.047 1340.46,762.346 1341.02,776.871 1341.57,755.354 1342.13,737.862 1342.69,736.163 1343.25,732.844 1343.81,714.131 1344.37,713.911 1344.93,679.828 1345.49,684.205 1346.05,716.824 1346.61,680.054 1347.17,664.28 1347.73,649.119 1348.29,650.802 1348.84,622.156 1349.4,642.174 1349.96,644.776 1350.52,660.95 1351.08,697.904 1351.64,680.241 1352.2,681.63 1352.76,659.63 1353.32,657.627 1353.88,658.388 1354.44,642.614 1355,659.98 1355.56,629.095 1356.12,649.47 1356.67,619.039 1357.23,623.064 1357.79,623.238 1358.35,597.072 1358.91,587.293 1359.47,577.917 1360.03,584.262 1360.59,608.805 1361.15,616.036 1361.71,617.92 1362.27,605.956 1362.83,579.608 1363.39,621.168 1363.94,657.68 1364.5,661.36 1365.06,644.489 1365.62,631.664 1366.18,632.831 1366.74,684.189 1367.3,701.119 1367.86,699.654 1368.42,680.233 1368.98,667.505 1369.54,662.971 1370.1,681.054 1370.66,664.974 1371.21,632.01 1371.77,652.219 1372.33,666.529 1372.89,686.456 1373.45,687.322 1374.01,703.556 1374.57,652.91 1375.13,668.631 1375.69,670.122 1376.25,669.075 1376.81,654.372 1377.37,590.492 1377.93,546.548 1378.49,553.155 1379.04,559.516 1379.6,564.657 1380.16,588.712 1380.72,593.756 1381.28,554.736 1381.84,561.947 1382.4,582.416 1382.96,601.51 1383.52,602.682 1384.08,622.762 1384.64,609.692 1385.2,597.95 1385.76,616.48 1386.31,603.543 1386.87,592.729 1387.43,615.365 1387.99,618.628 1388.55,637.961 1389.11,671.246 1389.67,689.418 1390.23,720.107 1390.79,700.663 1391.35,701.585 1391.91,719.822 1392.47,749.274 1393.03,776.194 1393.58,768.504 1394.14,781.32 1394.7,776.7 1395.26,756.545 1395.82,768.677 1396.38,762.356 1396.94,789.954 1397.5,779.894 1398.06,739.575 1398.62,751.973 1399.18,763.268 1399.74,777.574 1400.3,774.562 1400.86,786.379 1401.41,816.639 1401.97,792.701 1402.53,801.297 1403.09,840.559 1403.65,851.192 1404.21,792.743 1404.77,755.205 1405.33,720.128 1405.89,717.991 1406.45,749.191 1407.01,730.371 1407.57,730.566 1408.13,710.653 1408.68,723.108 1409.24,737.366 1409.8,736.104 1410.36,734.341 1410.92,712.323 1411.48,713.304 1412.04,678.081 1412.6,677.824 1413.16,649.817 1413.72,653.046 1414.28,670.691 1414.84,686.605 1415.4,653.269 1415.95,719.366 1416.51,702.735 1417.07,701.919 1417.63,653.07 1418.19,669.648 1418.75,668.383 1419.31,635.324 1419.87,653.746 1420.43,652.684 1420.99,654.007 1421.55,650.893 1422.11,702.711 1422.67,700.057 1423.23,696.294 1423.78,711.504 1424.34,708.21 1424.9,706.815 1425.46,703.633 1426.02,655.324 1426.58,657.34 1427.14,677.427 1427.7,698.506 1428.26,726.812 1428.82,708.446 1429.38,690.554 1429.94,723.253 1430.5,687.509 1431.05,673.306 1431.61,691.531 1432.17,693.737 1432.73,693.726 1433.29,724.737 1433.85,688.074 1434.41,701.677 1434.97,699.582 1435.53,734.471 1436.09,762.817 1436.65,776.365 1437.21,756.167 1437.77,755.272 1438.33,733.769 1438.88,749.946 1439.44,727.709 1440,728.57 1440.56,710.857 1441.12,723.174 1441.68,751.681 1442.24,750.67 1442.8,764.248 1443.36,760.664 1443.92,726.296 1444.48,723.668 1445.04,722.204 1445.6,720.981 1446.15,720.84 1446.71,718.681 1447.27,735.77 1447.83,729.961 1448.39,742.865 1448.95,690.867 1449.51,704.99 1450.07,718.558 1450.63,733.255 1451.19,711.331 1451.75,708.595 1452.31,723.967 1452.87,692.484 1453.42,691.506 1453.98,673.773 1454.54,674.088 1455.1,676.05 1455.66,690.701 1456.22,678.714 1456.78,680.518 1457.34,683.104 1457.9,682.522 1458.46,666.567 1459.02,665.032 1459.58,697.678 1460.14,682.111 1460.7,669.048 1461.25,684.551 1461.81,702.903 1462.37,716.79 1462.93,715.167 1463.49,712.788 1464.05,643.242 1464.61,630.627 1465.17,666.329 1465.73,653.138 1466.29,637.584 1466.85,654.184 1467.41,637.412 1467.97,673.562 1468.52,721.351 1469.08,766.062 1469.64,746.485 1470.2,761.071 1470.76,756.384 1471.32,738.062 1471.88,731.838 1472.44,712.674 1473,710.71 1473.56,706.397 1474.12,720.325 1474.68,716 1475.24,713.821 1475.79,680.06 1476.35,694.097 1476.91,661.752 1477.47,726.547 1478.03,711.153 1478.59,707.317 1479.15,718.083 1479.71,695.629 1480.27,693.657 1480.83,662.558 1481.39,648.426 1481.95,667.604 1482.51,718.178 1483.07,702.019 1483.62,683.966 1484.18,684.394 1484.74,686.181 1485.3,664.379 1485.86,683.166 1486.42,652.902 1486.98,624.113 1487.54,628.9 1488.1,635.798 1488.66,639.534 1489.22,675.426 1489.78,690.748 1490.34,675.686 1490.89,674.316 1491.45,693.389 1492.01,661.849 1492.57,664.139 1493.13,645.771 1493.69,647.327 1494.25,650.815 1494.81,653.456 1495.37,637.783 1495.93,606.209 1496.49,576.823 1497.05,598.876 1497.61,604.046 1498.16,622.748 1498.72,641.888 1499.28,660.397 1499.84,676.583 1500.4,675.425 1500.96,693.818 1501.52,677.769 1502.08,693.452 1502.64,662.737 1503.2,695.381 1503.76,698.235 1504.32,678.241 1504.88,660.482 1505.44,646.854 1505.99,633.72 1506.55,666.233 1507.11,636.254 1507.67,603.722 1508.23,605.187 1508.79,610.915 1509.35,618.292 1509.91,668.652 1510.47,686.69 1511.03,669.502 1511.59,636.5 1512.15,621.714 1512.71,624.611 1513.26,627.467 1513.82,616.393 1514.38,619.339 1514.94,638.11 1515.5,640.743 1516.06,646.292 1516.62,665.942 1517.18,652.636 1517.74,636.062 1518.3,623.766 1518.86,660.619 1519.42,682.208 1519.98,682.245 1520.53,667.604 1521.09,656.187 1521.65,673.822 1522.21,709.373 1522.77,758.3 1523.33,773.095 1523.89,815.26 1524.45,808.802 1525.01,804.429 1525.57,800.464 1526.13,777.695 1526.69,787.94 1527.25,770.491 1527.81,747.659 1528.36,746.478 1528.92,739.406 1529.48,749.718 1530.04,778.004 1530.6,756.09 1531.16,766.933 1531.72,745.256 1532.28,744.639 1532.84,728.533 1533.4,691.214 1533.96,675.156 1534.52,725.012 1535.08,738.371 1535.63,768.34 1536.19,777.814 1536.75,788.322 1537.31,799.106 1537.87,777.152 1538.43,757.877 1538.99,735.63 1539.55,734.715 1540.11,677.548 1540.67,677.34 1541.23,657.399 1541.79,658.869 1542.35,660.012 1542.9,693.455 1543.46,690.828 1544.02,671.479 1544.58,670.328 1545.14,669.754 1545.7,688.569 1546.26,687.303 1546.82,704.972 1547.38,720.292 1547.94,702.41 1548.5,699.163 1549.06,682.423 1549.62,691.246 1550.18,691.614 1550.73,726.472 1551.29,741.529 1551.85,724.665 1552.41,711.447 1552.97,711.176 1553.53,708.343 1554.09,657.532 1554.65,673.339 1555.21,675.885 1555.77,674.243 1556.33,659.317 1556.89,693.429 1557.45,693.455 1558,675.539 1558.56,704.991 1559.12,686.308 1559.68,688.682 1560.24,702.711 1560.8,732.4 1561.36,695.632 1561.92,677.664 1562.48,679.681 1563.04,696.876 1563.6,698.265 1564.16,684.365 1564.72,702.545 1565.28,720.61 1565.83,764.32 1566.39,760.61 1566.95,725.382 1567.51,740.886 1568.07,704.665 1568.63,753.529 1569.19,735.056 1569.75,702.755 1570.31,674.491 1570.87,692.335 1571.43,689.723 1571.99,705.625 1572.55,687.659 1573.1,670.882 1573.66,702.116 1574.22,702.009 1574.78,684.604 1575.34,671.155 1575.9,670.334 1576.46,643.018 1577.02,626.153 1577.58,632.878 1578.14,619.848 1578.7,669.304 1579.26,671.742 1579.82,643.663 1580.37,628.337 1580.93,600.481 1581.49,621.471 1582.05,643.081 1582.61,661.079 1583.17,663.01 1583.73,664.022 1584.29,650.771 1584.85,683.78 1585.41,718.034 1585.97,719.409 1586.53,701.643 1587.09,669.434 1587.65,687.126 1588.2,703.99 1588.76,686.972 1589.32,702.56 1589.88,700.826 1590.44,667.901 1591,654.33 1591.56,652.957 1592.12,655.246 1592.68,671.522 1593.24,676.605 1593.8,677.033 1594.36,678.627 1594.92,695.628 1595.47,711.648 1596.03,711.903 1596.59,629.791 1597.15,614.669 1597.71,617.528 1598.27,656.232 1598.83,672.429 1599.39,657.428 1599.95,659.707 1600.51,675.38 1601.07,639.571 1601.63,672.005 1602.19,620.394 1602.74,622.861 1603.3,642.542 1603.86,658.167 1604.42,611.16 1604.98,619.363 1605.54,640.601 1606.1,657.096 1606.66,658.807 1607.22,675.942 1607.78,658.584 1608.34,659.136 1608.9,626.354 1609.46,615.398 1610.02,637.877 1610.57,624.767 1611.13,626.369 1611.69,630.098 1612.25,635.166 1612.81,654.309 1613.37,668.432 1613.93,684.692 1614.49,684.21 1615.05,682.543 1615.61,701.578 1616.17,699.488 1616.73,715.081 1617.29,731.574 1617.84,714.495 1618.4,746.295 1618.96,743.247 1619.52,740.501 1620.08,769.219 1620.64,748.589 1621.2,761.458 1621.76,755.371 1622.32,705.033 1622.88,702.722 1623.44,702.083 1624,717.265 1624.56,735.784 1625.11,717.285 1625.67,731.897 1626.23,710.713 1626.79,690.232 1627.35,692.648 1627.91,695.725 1628.47,695.788 1629.03,693.732 1629.59,674.505 1630.15,674.662 1630.71,655.27 1631.27,623.863 1631.83,643.006 1632.39,647.914 1632.94,654.435 1633.5,641.946 1634.06,627.524 1634.62,661.629 1635.18,663.605 1635.74,634.631 1636.3,619.677 1636.86,603.502 1637.42,592.587 1637.98,647.581 1638.54,635.766 1639.1,675.046 1639.66,661.47 1640.21,663.755 1640.77,646.954 1641.33,648.921 1641.89,670.46 1642.45,671.117 1643.01,673.34 1643.57,707.742 1644.13,726.718 1644.69,739.327 1645.25,751.707 1645.81,751.061 1646.37,747.883 1646.93,744.462 1647.48,707.281 1648.04,673.777 1648.6,688.526 1649.16,671.766 1649.72,669.794 1650.28,700.603 1650.84,702.151 1651.4,701.802 1651.96,685.417 1652.52,652.433 1653.08,668.837 1653.64,686.457 1654.2,703.864 1654.76,687.494 1655.31,688.062 1655.87,674.201 1656.43,692.077 1656.99,693.916 1657.55,724.674 1658.11,769.113 1658.67,763.188 1659.23,712.859 1659.79,712.385 1660.35,677.837 1660.91,709.005 1661.47,689.772 1662.03,724.166 1662.58,725.169 1663.14,720.987 1663.7,706.613 1664.26,704.874 1664.82,654.472 1665.38,609.676 1665.94,611.762 1666.5,616.07 1667.06,603.399 1667.62,578.106 1668.18,601.225 1668.74,603.848 1669.3,605 1669.85,641.005 1670.41,659.75 1670.97,642.491 1671.53,613.05 1672.09,665.811 1672.65,633.97 1673.21,604.433 1673.77,610.997 1674.33,613.087 1674.89,600.606 1675.45,622.807 1676.01,661.017 1676.57,655.858 1677.13,641.101 1677.68,626.579 1678.24,644.625 1678.8,646.701 1679.36,632.86 1679.92,648.94 1680.48,633.383 1681.04,632.411 1681.6,632.107 1682.16,634.632 1682.72,667.882 1683.28,637.422 1683.84,655.14 1684.4,674.875 1684.95,692.784 1685.51,659.224 1686.07,660.486 1686.63,682.081 1687.19,680.818 1687.75,680.488 1688.31,680.597 1688.87,685.479 1689.43,686.33 1689.99,717.717 1690.55,718.604 1691.11,733.218 1691.67,744.978 1692.23,740.329 1692.78,755.514 1693.34,720.946 1693.9,717.589 1694.46,733.253 1695.02,731.823 1695.58,711.637 1696.14,709.92 1696.7,723.941 1697.26,723.171 1697.82,737.044 1698.38,728.771 1698.94,722.887 1699.5,688.8 1700.05,686.301 1700.61,667.452 1701.17,651.6 1701.73,668.761 1702.29,636.014 1702.85,656.415 1703.41,672.016 1703.97,657.257 1704.53,660.594 1705.09,661.925 1705.65,680.074 1706.21,694.714 1706.77,690.646 1707.32,689.122 1707.88,734.987 1708.44,780.697 1709,791.022 1709.56,773.254 1710.12,783.263 1710.68,761.073 1711.24,761.05 1711.8,722.927 1712.36,703.83 1712.92,749.338 1713.48,701.231 1714.04,700.792 1714.6,699.318 1715.15,681.799 1715.71,683.406 1716.27,667.159 1716.83,718.304 1717.39,712.532 1717.95,694.914 1718.51,679.807 1719.07,681.45 1719.63,725.822 1720.19,759.015 1720.75,741.089 1721.31,724.08 1721.87,721.971 1722.42,737.268 1722.98,683.375 1723.54,670.313 1724.1,705.079 1724.66,701.708 1725.22,684.975 1725.78,687.058 1726.34,669.558 1726.9,685.194 1727.46,700.66 1728.02,696.78 1728.58,691.125 1729.14,706.967 1729.69,736.868 1730.25,752.662 1730.81,763.265 1731.37,742.439 1731.93,721.059 1732.49,702.831 1733.05,681.872 1733.61,697.099 1734.17,698.812 1734.73,684.011 1735.29,666.507 1735.85,667.863 1736.41,684.446 1736.97,650.812 1737.52,623.618 1738.08,624.147 1738.64,591.774 1739.2,611.75 1739.76,613.988 1740.32,666.919 1740.88,668.122 1741.44,636.794 1742,655.869 1742.56,638.67 1743.12,593.969 1743.68,598.425 1744.24,588.076 1744.79,594.761 1745.35,566.916 1745.91,593.971 1746.47,614.858 1747.03,619.403 1747.59,620.844 1748.15,644.163 1748.71,629.259 1749.27,646.675 1749.83,633.571 1750.39,621.358 1750.95,626.482 1751.51,658.237 1752.06,656.5 1752.62,624.384 1753.18,610.012 1753.74,611.768 1754.3,598.096 1754.86,635.696 1755.42,633.681 1755.98,653.478 1756.54,675.909 1757.1,709.072 1757.66,708.069 1758.22,674.63 1758.78,658.563 1759.34,657.312 1759.89,657.619 1760.45,691.958 1761.01,724.023 1761.57,724.434 1762.13,693.87 1762.69,692.014 1763.25,642.808 1763.81,626.88 1764.37,628.346 1764.93,646.697 1765.49,646.968 1766.05,668.458 1766.61,682.082 1767.16,681.815 1767.72,680.707 1768.28,675.999 1768.84,679.042 1769.4,696.074 1769.96,693.354 1770.52,677.33 1771.08,707.663 1771.64,690.369 1772.2,708.823 1772.76,691.948 1773.32,675.725 1773.88,677.52 1774.43,667.378 1774.99,669.229 1775.55,682.899 1776.11,683.629 1776.67,719.999 1777.23,701.34 1777.79,734.519 1778.35,736.676 1778.91,717.372 1779.47,713.486 1780.03,728.361 1780.59,715.755 1781.15,713.478 1781.71,726.894 1782.26,725.398 1782.82,677.521 1783.38,695.464 1783.94,709.57 1784.5,674.691 1785.06,675.673 1785.62,660.977 1786.18,631.599 1786.74,650.961 1787.3,636.752 1787.86,610.935 1788.42,582.03 1788.98,586.826 1789.53,606.912 1790.09,628.409 1790.65,650.509 1791.21,653.672 1791.77,671.405 1792.33,639.477 1792.89,628.738 1793.45,632.392 1794.01,649.621 1794.57,621.181 1795.13,624.582 1795.69,645.688 1796.25,650.804 1796.8,655.985 1797.36,673.714 1797.92,692.314 1798.48,676.785 1799.04,696.37 1799.6,698.209 1800.16,663.561 1800.72,698.239 1801.28,684.515 1801.84,685.514 1802.4,689.047 1802.96,685.901 1803.52,651.864 1804.08,668.454 1804.63,648.9 1805.19,646.948 1805.75,630.005 1806.31,662.873 1806.87,649.382 1807.43,650.041 1807.99,649.513 1808.55,635.261 1809.11,639.034 1809.67,619.917 1810.23,607.345 1810.79,582.798 1811.35,569.544 1811.9,594.307 1812.46,596.33 1813.02,602.117 1813.58,572.3 1814.14,580.049 1814.7,599.953 1815.26,604.722 1815.82,625.807 1816.38,628.75 1816.94,599.821 1817.5,604.515 1818.06,605.749 1818.62,661.346 1819.18,665.21 1819.73,698.607 1820.29,712.295 1820.85,726.234 1821.41,693.966 1821.97,693.473 1822.53,694.403 1823.09,692.121 1823.65,724.05 1824.21,737.463 1824.77,717.108 1825.33,701.33 1825.89,700.62 1826.45,716.911 1827,731.585 1827.56,731.243 1828.12,728.448 1828.68,722.855 1829.24,733.244 1829.8,729.856 1830.36,678.892 1830.92,680.478 1831.48,712.556 1832.04,710.041 1832.6,693.992 1833.16,707.709 1833.72,739.902 1834.27,734.606 1834.83,733.606 1835.39,730.012 1835.95,725.091 1836.51,739.055 1837.07,720.061 1837.63,702.841 1838.19,699.024 \"/>\n<path clip-path=\"url(#clip853)\" d=\"M720.247 690.214 L720.806 690.214 L721.365 690.214 L721.924 690.214 L722.484 690.214 L723.043 690.214 L723.602 690.214 L724.161 690.214 L724.721 690.214 L725.28 690.214 L725.839 690.214 L726.398 690.214 L726.958 690.214 L727.517 690.214 L728.076 690.214 L728.635 690.214 L729.195 690.214 L729.754 690.214 L730.313 690.214 L730.872 690.214 L731.432 690.214 L731.991 690.214 L732.55 690.214 L733.109 690.214 L733.669 690.214 L734.228 690.214 L734.787 690.214 L735.346 690.214 L735.906 690.214 L736.465 690.214 L737.024 690.214 L737.583 690.214 L738.143 690.214 L738.702 690.214 L739.261 690.214 L739.82 690.214 L740.38 690.214 L740.939 690.214 L741.498 690.214 L742.057 690.214 L742.617 690.214 L743.176 690.214 L743.735 690.214 L744.294 690.214 L744.854 690.214 L745.413 690.214 L745.972 690.214 L746.531 690.214 L747.091 690.214 L747.65 690.214 L748.209 690.214 L748.768 690.214 L749.328 690.214 L749.887 690.214 L750.446 690.214 L751.005 690.214 L751.565 690.214 L752.124 690.214 L752.683 690.214 L753.242 690.214 L753.802 690.214 L754.361 690.214 L754.92 690.214 L755.479 690.214 L756.039 690.214 L756.598 690.214 L757.157 690.214 L757.716 690.214 L758.276 690.214 L758.835 690.214 L759.394 690.214 L759.953 690.214 L760.513 690.214 L761.072 690.214 L761.631 690.214 L762.19 690.214 L762.75 690.214 L763.309 690.214 L763.868 690.214 L764.427 690.214 L764.987 690.214 L765.546 690.214 L766.105 690.214 L766.664 690.214 L767.224 690.214 L767.783 690.214 L768.342 690.214 L768.901 690.214 L769.461 690.214 L770.02 690.214 L770.579 690.214 L771.138 690.214 L771.698 690.214 L772.257 690.214 L772.816 690.214 L773.375 690.214 L773.935 690.214 L774.494 690.214 L775.053 690.214 L775.612 690.214 L776.172 690.214 L776.731 690.214 L777.29 690.214 L777.849 690.214 L778.409 690.214 L778.968 690.214 L779.527 690.214 L780.086 690.214 L780.646 690.214 L781.205 690.214 L781.764 690.214 L782.323 690.214 L782.883 690.214 L783.442 690.214 L784.001 690.214 L784.56 690.214 L785.12 690.214 L785.679 690.214 L786.238 690.214 L786.797 690.214 L787.357 690.214 L787.916 690.214 L788.475 690.214 L789.034 690.214 L789.594 690.214 L790.153 690.214 L790.712 690.214 L791.271 690.214 L791.831 690.214 L792.39 690.214 L792.949 690.214 L793.508 690.214 L794.068 690.214 L794.627 690.214 L795.186 690.214 L795.745 690.214 L796.305 690.214 L796.864 690.214 L797.423 690.214 L797.982 690.214 L798.542 690.214 L799.101 690.214 L799.66 690.214 L800.219 690.214 L800.779 690.214 L801.338 690.214 L801.897 690.214 L802.456 690.214 L803.016 690.214 L803.575 690.214 L804.134 690.214 L804.693 690.214 L805.253 690.214 L805.812 690.214 L806.371 690.214 L806.931 690.214 L807.49 690.214 L808.049 690.214 L808.608 690.214 L809.168 690.214 L809.727 690.214 L810.286 690.214 L810.845 690.214 L811.405 690.214 L811.964 690.214 L812.523 690.214 L813.082 690.214 L813.642 690.214 L814.201 690.214 L814.76 690.214 L815.319 690.214 L815.879 690.214 L816.438 690.214 L816.997 690.214 L817.556 690.214 L818.116 690.214 L818.675 690.214 L819.234 690.214 L819.793 690.214 L820.353 690.214 L820.912 690.214 L821.471 690.214 L822.03 690.214 L822.59 690.214 L823.149 690.214 L823.708 690.214 L824.267 690.214 L824.827 690.214 L825.386 690.214 L825.945 690.214 L826.504 690.214 L827.064 690.214 L827.623 690.214 L828.182 690.214 L828.741 690.214 L829.301 690.214 L829.86 690.214 L830.419 690.214 L830.978 690.214 L831.538 690.214 L832.097 690.214 L832.656 690.214 L833.215 690.214 L833.775 690.214 L834.334 690.214 L834.893 690.214 L835.452 690.214 L836.012 690.214 L836.571 690.214 L837.13 690.214 L837.689 690.214 L838.249 690.214 L838.808 690.214 L839.367 690.214 L839.926 690.214 L840.486 690.214 L841.045 690.214 L841.604 690.214 L842.163 690.214 L842.723 690.214 L843.282 690.214 L843.841 690.214 L844.4 690.214 L844.96 690.214 L845.519 690.214 L846.078 690.214 L846.637 690.214 L847.197 690.214 L847.756 690.214 L848.315 690.214 L848.874 690.214 L849.434 690.214 L849.993 690.214 L850.552 690.214 L851.111 690.214 L851.671 690.214 L852.23 690.214 L852.789 690.214 L853.348 690.214 L853.908 690.214 L854.467 690.214 L855.026 690.214 L855.585 690.214 L856.145 690.214 L856.704 690.214 L857.263 690.214 L857.822 690.214 L858.382 690.214 L858.941 690.214 L859.5 690.214 L860.059 690.214 L860.619 690.214 L861.178 690.214 L861.737 690.214 L862.296 690.214 L862.856 690.214 L863.415 690.214 L863.974 690.214 L864.533 690.214 L865.093 690.214 L865.652 690.214 L866.211 690.214 L866.77 690.214 L867.33 690.214 L867.889 690.214 L868.448 690.214 L869.007 690.214 L869.567 690.214 L870.126 690.214 L870.685 690.214 L871.244 690.214 L871.804 690.214 L872.363 690.214 L872.922 690.214 L873.481 690.214 L874.041 690.214 L874.6 690.214 L875.159 690.214 L875.718 690.214 L876.278 690.214 L876.837 690.214 L877.396 690.214 L877.955 690.214 L878.515 690.214 L879.074 690.214 L879.633 690.214 L880.192 690.214 L880.752 690.214 L881.311 690.214 L881.87 690.214 L882.429 690.214 L882.989 690.214 L883.548 690.214 L884.107 690.214 L884.666 690.214 L885.226 690.214 L885.785 690.214 L886.344 690.214 L886.903 690.214 L887.463 690.214 L888.022 690.214 L888.581 690.214 L889.14 690.214 L889.7 690.214 L890.259 690.214 L890.818 690.214 L891.377 690.214 L891.937 690.214 L892.496 690.214 L893.055 690.214 L893.614 690.214 L894.174 690.214 L894.733 690.214 L895.292 690.214 L895.851 690.214 L896.411 690.214 L896.97 690.214 L897.529 690.214 L898.088 690.214 L898.648 690.214 L899.207 690.214 L899.766 690.214 L900.325 690.214 L900.885 690.214 L901.444 690.214 L902.003 690.214 L902.562 690.214 L903.122 690.214 L903.681 690.214 L904.24 690.214 L904.799 690.214 L905.359 690.214 L905.918 690.214 L906.477 690.214 L907.036 690.214 L907.596 690.214 L908.155 690.214 L908.714 690.214 L909.273 690.214 L909.833 690.214 L910.392 690.214 L910.951 690.214 L911.51 690.214 L912.07 690.214 L912.629 690.214 L913.188 690.214 L913.747 690.214 L914.307 690.214 L914.866 690.214 L915.425 690.214 L915.984 690.214 L916.544 690.214 L917.103 690.214 L917.662 690.214 L918.221 690.214 L918.781 690.214 L919.34 690.214 L919.899 690.214 L920.458 690.214 L921.018 690.214 L921.577 690.214 L922.136 690.214 L922.695 690.214 L923.255 690.214 L923.814 690.214 L924.373 690.214 L924.932 690.214 L925.492 690.214 L926.051 690.214 L926.61 690.214 L927.169 690.214 L927.729 690.214 L928.288 690.214 L928.847 690.214 L929.406 690.214 L929.966 690.214 L930.525 690.214 L931.084 690.214 L931.644 690.214 L932.203 690.214 L932.762 690.214 L933.321 690.214 L933.881 690.214 L934.44 690.214 L934.999 690.214 L935.558 690.214 L936.118 690.214 L936.677 690.214 L937.236 690.214 L937.795 690.214 L938.355 690.214 L938.914 690.214 L939.473 690.214 L940.032 690.214 L940.592 690.214 L941.151 690.214 L941.71 690.214 L942.269 690.214 L942.829 690.214 L943.388 690.214 L943.947 690.214 L944.506 690.214 L945.066 690.214 L945.625 690.214 L946.184 690.214 L946.743 690.214 L947.303 690.214 L947.862 690.214 L948.421 690.214 L948.98 690.214 L949.54 690.214 L950.099 690.214 L950.658 690.214 L951.217 690.214 L951.777 690.214 L952.336 690.214 L952.895 690.214 L953.454 690.214 L954.014 690.214 L954.573 690.214 L955.132 690.214 L955.691 690.214 L956.251 690.214 L956.81 690.214 L957.369 690.214 L957.928 690.214 L958.488 690.214 L959.047 690.214 L959.606 690.214 L960.165 690.214 L960.725 690.214 L961.284 690.214 L961.843 690.214 L962.402 690.214 L962.962 690.214 L963.521 690.214 L964.08 690.214 L964.639 690.214 L965.199 690.214 L965.758 690.214 L966.317 690.214 L966.876 690.214 L967.436 690.214 L967.995 690.214 L968.554 690.214 L969.113 690.214 L969.673 690.214 L970.232 690.214 L970.791 690.214 L971.35 690.214 L971.91 690.214 L972.469 690.214 L973.028 690.214 L973.587 690.214 L974.147 690.214 L974.706 690.214 L975.265 690.214 L975.824 690.214 L976.384 690.214 L976.943 690.214 L977.502 690.214 L978.061 690.214 L978.621 690.214 L979.18 690.214 L979.739 690.214 L980.298 690.214 L980.858 690.214 L981.417 690.214 L981.976 690.214 L982.535 690.214 L983.095 690.214 L983.654 690.214 L984.213 690.214 L984.772 690.214 L985.332 690.214 L985.891 690.214 L986.45 690.214 L987.009 690.214 L987.569 690.214 L988.128 690.214 L988.687 690.214 L989.246 690.214 L989.806 690.214 L990.365 690.214 L990.924 690.214 L991.483 690.214 L992.043 690.214 L992.602 690.214 L993.161 690.214 L993.72 690.214 L994.28 690.214 L994.839 690.214 L995.398 690.214 L995.957 690.214 L996.517 690.214 L997.076 690.214 L997.635 690.214 L998.194 690.214 L998.754 690.214 L999.313 690.214 L999.872 690.214 L1000.43 690.214 L1000.99 690.214 L1001.55 690.214 L1002.11 690.214 L1002.67 690.214 L1003.23 690.214 L1003.79 690.214 L1004.35 690.214 L1004.91 690.214 L1005.46 690.214 L1006.02 690.214 L1006.58 690.214 L1007.14 690.214 L1007.7 690.214 L1008.26 690.214 L1008.82 690.214 L1009.38 690.214 L1009.94 690.214 L1010.5 690.214 L1011.06 690.214 L1011.62 690.214 L1012.18 690.214 L1012.73 690.214 L1013.29 690.214 L1013.85 690.214 L1014.41 690.214 L1014.97 690.214 L1015.53 690.214 L1016.09 690.214 L1016.65 690.214 L1017.21 690.214 L1017.77 690.214 L1018.33 690.214 L1018.89 690.214 L1019.45 690.214 L1020.01 690.214 L1020.56 690.214 L1021.12 690.214 L1021.68 690.214 L1022.24 690.214 L1022.8 690.214 L1023.36 690.214 L1023.92 690.214 L1024.48 690.214 L1025.04 690.214 L1025.6 690.214 L1026.16 690.214 L1026.72 690.214 L1027.28 690.214 L1027.83 690.214 L1028.39 690.214 L1028.95 690.214 L1029.51 690.214 L1030.07 690.214 L1030.63 690.214 L1031.19 690.214 L1031.75 690.214 L1032.31 690.214 L1032.87 690.214 L1033.43 690.214 L1033.99 690.214 L1034.55 690.214 L1035.1 690.214 L1035.66 690.214 L1036.22 690.214 L1036.78 690.214 L1037.34 690.214 L1037.9 690.214 L1038.46 690.214 L1039.02 690.214 L1039.58 690.214 L1040.14 690.214 L1040.7 690.214 L1041.26 690.214 L1041.82 690.214 L1042.38 690.214 L1042.93 690.214 L1043.49 690.214 L1044.05 690.214 L1044.61 690.214 L1045.17 690.214 L1045.73 690.214 L1046.29 690.214 L1046.85 690.214 L1047.41 690.214 L1047.97 690.214 L1048.53 690.214 L1049.09 690.214 L1049.65 690.214 L1050.2 690.214 L1050.76 690.214 L1051.32 690.214 L1051.88 690.214 L1052.44 690.214 L1053 690.214 L1053.56 690.214 L1054.12 690.214 L1054.68 690.214 L1055.24 690.214 L1055.8 690.214 L1056.36 690.214 L1056.92 690.214 L1057.48 690.214 L1058.03 690.214 L1058.59 690.214 L1059.15 690.214 L1059.71 690.214 L1060.27 690.214 L1060.83 690.214 L1061.39 690.214 L1061.95 690.214 L1062.51 690.214 L1063.07 690.214 L1063.63 690.214 L1064.19 690.214 L1064.75 690.214 L1065.3 690.214 L1065.86 690.214 L1066.42 690.214 L1066.98 690.214 L1067.54 690.214 L1068.1 690.214 L1068.66 690.214 L1069.22 690.214 L1069.78 690.214 L1070.34 690.214 L1070.9 690.214 L1071.46 690.214 L1072.02 690.214 L1072.57 690.214 L1073.13 690.214 L1073.69 690.214 L1074.25 690.214 L1074.81 690.214 L1075.37 690.214 L1075.93 690.214 L1076.49 690.214 L1077.05 690.214 L1077.61 690.214 L1078.17 690.214 L1078.73 690.214 L1079.29 690.214 L1079.85 690.214 L1080.4 690.214 L1080.96 690.214 L1081.52 690.214 L1082.08 690.214 L1082.64 690.214 L1083.2 690.214 L1083.76 690.214 L1084.32 690.214 L1084.88 690.214 L1085.44 690.214 L1086 690.214 L1086.56 690.214 L1087.12 690.214 L1087.67 690.214 L1088.23 690.214 L1088.79 690.214 L1089.35 690.214 L1089.91 690.214 L1090.47 690.214 L1091.03 690.214 L1091.59 690.214 L1092.15 690.214 L1092.71 690.214 L1093.27 690.214 L1093.83 690.214 L1094.39 690.214 L1094.94 690.214 L1095.5 690.214 L1096.06 690.214 L1096.62 690.214 L1097.18 690.214 L1097.74 690.214 L1098.3 690.214 L1098.86 690.214 L1099.42 690.214 L1099.98 690.214 L1100.54 690.214 L1101.1 690.214 L1101.66 690.214 L1102.22 690.214 L1102.77 690.214 L1103.33 690.214 L1103.89 690.214 L1104.45 690.214 L1105.01 690.214 L1105.57 690.214 L1106.13 690.214 L1106.69 690.214 L1107.25 690.214 L1107.81 690.214 L1108.37 690.214 L1108.93 690.214 L1109.49 690.214 L1110.04 690.214 L1110.6 690.214 L1111.16 690.214 L1111.72 690.214 L1112.28 690.214 L1112.84 690.214 L1113.4 690.214 L1113.96 690.214 L1114.52 690.214 L1115.08 690.214 L1115.64 690.214 L1116.2 690.214 L1116.76 690.214 L1117.31 690.214 L1117.87 690.214 L1118.43 690.214 L1118.99 690.214 L1119.55 690.214 L1120.11 690.214 L1120.67 690.214 L1121.23 690.214 L1121.79 690.214 L1122.35 690.214 L1122.91 690.214 L1123.47 690.214 L1124.03 690.214 L1124.59 690.214 L1125.14 690.214 L1125.7 690.214 L1126.26 690.214 L1126.82 690.214 L1127.38 690.214 L1127.94 690.214 L1128.5 690.214 L1129.06 690.214 L1129.62 690.214 L1130.18 690.214 L1130.74 690.214 L1131.3 690.214 L1131.86 690.214 L1132.41 690.214 L1132.97 690.214 L1133.53 690.214 L1134.09 690.214 L1134.65 690.214 L1135.21 690.214 L1135.77 690.214 L1136.33 690.214 L1136.89 690.214 L1137.45 690.214 L1138.01 690.214 L1138.57 690.214 L1139.13 690.214 L1139.68 690.214 L1140.24 690.214 L1140.8 690.214 L1141.36 690.214 L1141.92 690.214 L1142.48 690.214 L1143.04 690.214 L1143.6 690.214 L1144.16 690.214 L1144.72 690.214 L1145.28 690.214 L1145.84 690.214 L1146.4 690.214 L1146.96 690.214 L1147.51 690.214 L1148.07 690.214 L1148.63 690.214 L1149.19 690.214 L1149.75 690.214 L1150.31 690.214 L1150.87 690.214 L1151.43 690.214 L1151.99 690.214 L1152.55 690.214 L1153.11 690.214 L1153.67 690.214 L1154.23 690.214 L1154.78 690.214 L1155.34 690.214 L1155.9 690.214 L1156.46 690.214 L1157.02 690.214 L1157.58 690.214 L1158.14 690.214 L1158.7 690.214 L1159.26 690.214 L1159.82 690.214 L1160.38 690.214 L1160.94 690.214 L1161.5 690.214 L1162.05 690.214 L1162.61 690.214 L1163.17 690.214 L1163.73 690.214 L1164.29 690.214 L1164.85 690.214 L1165.41 690.214 L1165.97 690.214 L1166.53 690.214 L1167.09 690.214 L1167.65 690.214 L1168.21 690.214 L1168.77 690.214 L1169.33 690.214 L1169.88 690.214 L1170.44 690.214 L1171 690.214 L1171.56 690.214 L1172.12 690.214 L1172.68 690.214 L1173.24 690.214 L1173.8 690.214 L1174.36 690.214 L1174.92 690.214 L1175.48 690.214 L1176.04 690.214 L1176.6 690.214 L1177.15 690.214 L1177.71 690.214 L1178.27 690.214 L1178.83 690.214 L1179.39 690.214 L1179.95 690.214 L1180.51 690.214 L1181.07 690.214 L1181.63 690.214 L1182.19 690.214 L1182.75 690.214 L1183.31 690.214 L1183.87 690.214 L1184.43 690.214 L1184.98 690.214 L1185.54 690.214 L1186.1 690.214 L1186.66 690.214 L1187.22 690.214 L1187.78 690.214 L1188.34 690.214 L1188.9 690.214 L1189.46 690.214 L1190.02 690.214 L1190.58 690.214 L1191.14 690.214 L1191.7 690.214 L1192.25 690.214 L1192.81 690.214 L1193.37 690.214 L1193.93 690.214 L1194.49 690.214 L1195.05 690.214 L1195.61 690.214 L1196.17 690.214 L1196.73 690.214 L1197.29 690.214 L1197.85 690.214 L1198.41 690.214 L1198.97 690.214 L1199.52 690.214 L1200.08 690.214 L1200.64 690.214 L1201.2 690.214 L1201.76 690.214 L1202.32 690.214 L1202.88 690.214 L1203.44 690.214 L1204 690.214 L1204.56 690.214 L1205.12 690.214 L1205.68 690.214 L1206.24 690.214 L1206.8 690.214 L1207.35 690.214 L1207.91 690.214 L1208.47 690.214 L1209.03 690.214 L1209.59 690.214 L1210.15 690.214 L1210.71 690.214 L1211.27 690.214 L1211.83 690.214 L1212.39 690.214 L1212.95 690.214 L1213.51 690.214 L1214.07 690.214 L1214.62 690.214 L1215.18 690.214 L1215.74 690.214 L1216.3 690.214 L1216.86 690.214 L1217.42 690.214 L1217.98 690.214 L1218.54 690.214 L1219.1 690.214 L1219.66 690.214 L1220.22 690.214 L1220.78 690.214 L1221.34 690.214 L1221.89 690.214 L1222.45 690.214 L1223.01 690.214 L1223.57 690.214 L1224.13 690.214 L1224.69 690.214 L1225.25 690.214 L1225.81 690.214 L1226.37 690.214 L1226.93 690.214 L1227.49 690.214 L1228.05 690.214 L1228.61 690.214 L1229.17 690.214 L1229.72 690.214 L1230.28 690.214 L1230.84 690.214 L1231.4 690.214 L1231.96 690.214 L1232.52 690.214 L1233.08 690.214 L1233.64 690.214 L1234.2 690.214 L1234.76 690.214 L1235.32 690.214 L1235.88 690.214 L1236.44 690.214 L1236.99 690.214 L1237.55 690.214 L1238.11 690.214 L1238.67 690.214 L1239.23 690.214 L1239.79 690.214 L1240.35 690.214 L1240.91 690.214 L1241.47 690.214 L1242.03 690.214 L1242.59 690.214 L1243.15 690.214 L1243.71 690.214 L1244.26 690.214 L1244.82 690.214 L1245.38 690.214 L1245.94 690.214 L1246.5 690.214 L1247.06 690.214 L1247.62 690.214 L1248.18 690.214 L1248.74 690.214 L1249.3 690.214 L1249.86 690.214 L1250.42 690.214 L1250.98 690.214 L1251.54 690.214 L1252.09 690.214 L1252.65 690.214 L1253.21 690.214 L1253.77 690.214 L1254.33 690.214 L1254.89 690.214 L1255.45 690.214 L1256.01 690.214 L1256.57 690.214 L1257.13 690.214 L1257.69 690.214 L1258.25 690.214 L1258.81 690.214 L1259.36 690.214 L1259.92 690.214 L1260.48 690.214 L1261.04 690.214 L1261.6 690.214 L1262.16 690.214 L1262.72 690.214 L1263.28 690.214 L1263.84 690.214 L1264.4 690.214 L1264.96 690.214 L1265.52 690.214 L1266.08 690.214 L1266.63 690.214 L1267.19 690.214 L1267.75 690.214 L1268.31 690.214 L1268.87 690.214 L1269.43 690.214 L1269.99 690.214 L1270.55 690.214 L1271.11 690.214 L1271.67 690.214 L1272.23 690.214 L1272.79 690.214 L1273.35 690.214 L1273.91 690.214 L1274.46 690.214 L1275.02 690.214 L1275.58 690.214 L1276.14 690.214 L1276.7 690.214 L1277.26 690.214 L1277.82 690.214 L1278.38 690.214 L1278.94 690.214 L1279.5 690.214 L1280.06 690.214 L1280.62 690.214 L1281.18 690.214 L1281.73 690.214 L1282.29 690.214 L1282.85 690.214 L1283.41 690.214 L1283.97 690.214 L1284.53 690.214 L1285.09 690.214 L1285.65 690.214 L1286.21 690.214 L1286.77 690.214 L1287.33 690.214 L1287.89 690.214 L1288.45 690.214 L1289 690.214 L1289.56 690.214 L1290.12 690.214 L1290.68 690.214 L1291.24 690.214 L1291.8 690.214 L1292.36 690.214 L1292.92 690.214 L1293.48 690.214 L1294.04 690.214 L1294.6 690.214 L1295.16 690.214 L1295.72 690.214 L1296.28 690.214 L1296.83 690.214 L1297.39 690.214 L1297.95 690.214 L1298.51 690.214 L1299.07 690.214 L1299.63 690.214 L1300.19 690.214 L1300.75 690.214 L1301.31 690.214 L1301.87 690.214 L1302.43 690.214 L1302.99 690.214 L1303.55 690.214 L1304.1 690.214 L1304.66 690.214 L1305.22 690.214 L1305.78 690.214 L1306.34 690.214 L1306.9 690.214 L1307.46 690.214 L1308.02 690.214 L1308.58 690.214 L1309.14 690.214 L1309.7 690.214 L1310.26 690.214 L1310.82 690.214 L1311.38 690.214 L1311.93 690.214 L1312.49 690.214 L1313.05 690.214 L1313.61 690.214 L1314.17 690.214 L1314.73 690.214 L1315.29 690.214 L1315.85 690.214 L1316.41 690.214 L1316.97 690.214 L1317.53 690.214 L1318.09 690.214 L1318.65 690.214 L1319.2 690.214 L1319.76 690.214 L1320.32 690.214 L1320.88 690.214 L1321.44 690.214 L1322 690.214 L1322.56 690.214 L1323.12 690.214 L1323.68 690.214 L1324.24 690.214 L1324.8 690.214 L1325.36 690.214 L1325.92 690.214 L1326.47 690.214 L1327.03 690.214 L1327.59 690.214 L1328.15 690.214 L1328.71 690.214 L1329.27 690.214 L1329.83 690.214 L1330.39 690.214 L1330.95 690.214 L1331.51 690.214 L1332.07 690.214 L1332.63 690.214 L1333.19 690.214 L1333.75 690.214 L1334.3 690.214 L1334.86 690.214 L1335.42 690.214 L1335.98 690.214 L1336.54 690.214 L1337.1 690.214 L1337.66 690.214 L1338.22 690.214 L1338.78 690.214 L1339.34 690.214 L1339.9 690.214 L1340.46 690.214 L1341.02 690.214 L1341.57 690.214 L1342.13 690.214 L1342.69 690.214 L1343.25 690.214 L1343.81 690.214 L1344.37 690.214 L1344.93 690.214 L1345.49 690.214 L1346.05 690.214 L1346.61 690.214 L1347.17 690.214 L1347.73 690.214 L1348.29 690.214 L1348.84 690.214 L1349.4 690.214 L1349.96 690.214 L1350.52 690.214 L1351.08 690.214 L1351.64 690.214 L1352.2 690.214 L1352.76 690.214 L1353.32 690.214 L1353.88 690.214 L1354.44 690.214 L1355 690.214 L1355.56 690.214 L1356.12 690.214 L1356.67 690.214 L1357.23 690.214 L1357.79 690.214 L1358.35 690.214 L1358.91 690.214 L1359.47 690.214 L1360.03 690.214 L1360.59 690.214 L1361.15 690.214 L1361.71 690.214 L1362.27 690.214 L1362.83 690.214 L1363.39 690.214 L1363.94 690.214 L1364.5 690.214 L1365.06 690.214 L1365.62 690.214 L1366.18 690.214 L1366.74 690.214 L1367.3 690.214 L1367.86 690.214 L1368.42 690.214 L1368.98 690.214 L1369.54 690.214 L1370.1 690.214 L1370.66 690.214 L1371.21 690.214 L1371.77 690.214 L1372.33 690.214 L1372.89 690.214 L1373.45 690.214 L1374.01 690.214 L1374.57 690.214 L1375.13 690.214 L1375.69 690.214 L1376.25 690.214 L1376.81 690.214 L1377.37 690.214 L1377.93 690.214 L1378.49 690.214 L1379.04 690.214 L1379.6 690.214 L1380.16 690.214 L1380.72 690.214 L1381.28 690.214 L1381.84 690.214 L1382.4 690.214 L1382.96 690.214 L1383.52 690.214 L1384.08 690.214 L1384.64 690.214 L1385.2 690.214 L1385.76 690.214 L1386.31 690.214 L1386.87 690.214 L1387.43 690.214 L1387.99 690.214 L1388.55 690.214 L1389.11 690.214 L1389.67 690.214 L1390.23 690.214 L1390.79 690.214 L1391.35 690.214 L1391.91 690.214 L1392.47 690.214 L1393.03 690.214 L1393.58 690.214 L1394.14 690.214 L1394.7 690.214 L1395.26 690.214 L1395.82 690.214 L1396.38 690.214 L1396.94 690.214 L1397.5 690.214 L1398.06 690.214 L1398.62 690.214 L1399.18 690.214 L1399.74 690.214 L1400.3 690.214 L1400.86 690.214 L1401.41 690.214 L1401.97 690.214 L1402.53 690.214 L1403.09 690.214 L1403.65 690.214 L1404.21 690.214 L1404.77 690.214 L1405.33 690.214 L1405.89 690.214 L1406.45 690.214 L1407.01 690.214 L1407.57 690.214 L1408.13 690.214 L1408.68 690.214 L1409.24 690.214 L1409.8 690.214 L1410.36 690.214 L1410.92 690.214 L1411.48 690.214 L1412.04 690.214 L1412.6 690.214 L1413.16 690.214 L1413.72 690.214 L1414.28 690.214 L1414.84 690.214 L1415.4 690.214 L1415.95 690.214 L1416.51 690.214 L1417.07 690.214 L1417.63 690.214 L1418.19 690.214 L1418.75 690.214 L1419.31 690.214 L1419.87 690.214 L1420.43 690.214 L1420.99 690.214 L1421.55 690.214 L1422.11 690.214 L1422.67 690.214 L1423.23 690.214 L1423.78 690.214 L1424.34 690.214 L1424.9 690.214 L1425.46 690.214 L1426.02 690.214 L1426.58 690.214 L1427.14 690.214 L1427.7 690.214 L1428.26 690.214 L1428.82 690.214 L1429.38 690.214 L1429.94 690.214 L1430.5 690.214 L1431.05 690.214 L1431.61 690.214 L1432.17 690.214 L1432.73 690.214 L1433.29 690.214 L1433.85 690.214 L1434.41 690.214 L1434.97 690.214 L1435.53 690.214 L1436.09 690.214 L1436.65 690.214 L1437.21 690.214 L1437.77 690.214 L1438.33 690.214 L1438.88 690.214 L1439.44 690.214 L1440 690.214 L1440.56 690.214 L1441.12 690.214 L1441.68 690.214 L1442.24 690.214 L1442.8 690.214 L1443.36 690.214 L1443.92 690.214 L1444.48 690.214 L1445.04 690.214 L1445.6 690.214 L1446.15 690.214 L1446.71 690.214 L1447.27 690.214 L1447.83 690.214 L1448.39 690.214 L1448.95 690.214 L1449.51 690.214 L1450.07 690.214 L1450.63 690.214 L1451.19 690.214 L1451.75 690.214 L1452.31 690.214 L1452.87 690.214 L1453.42 690.214 L1453.98 690.214 L1454.54 690.214 L1455.1 690.214 L1455.66 690.214 L1456.22 690.214 L1456.78 690.214 L1457.34 690.214 L1457.9 690.214 L1458.46 690.214 L1459.02 690.214 L1459.58 690.214 L1460.14 690.214 L1460.7 690.214 L1461.25 690.214 L1461.81 690.214 L1462.37 690.214 L1462.93 690.214 L1463.49 690.214 L1464.05 690.214 L1464.61 690.214 L1465.17 690.214 L1465.73 690.214 L1466.29 690.214 L1466.85 690.214 L1467.41 690.214 L1467.97 690.214 L1468.52 690.214 L1469.08 690.214 L1469.64 690.214 L1470.2 690.214 L1470.76 690.214 L1471.32 690.214 L1471.88 690.214 L1472.44 690.214 L1473 690.214 L1473.56 690.214 L1474.12 690.214 L1474.68 690.214 L1475.24 690.214 L1475.79 690.214 L1476.35 690.214 L1476.91 690.214 L1477.47 690.214 L1478.03 690.214 L1478.59 690.214 L1479.15 690.214 L1479.71 690.214 L1480.27 690.214 L1480.83 690.214 L1481.39 690.214 L1481.95 690.214 L1482.51 690.214 L1483.07 690.214 L1483.62 690.214 L1484.18 690.214 L1484.74 690.214 L1485.3 690.214 L1485.86 690.214 L1486.42 690.214 L1486.98 690.214 L1487.54 690.214 L1488.1 690.214 L1488.66 690.214 L1489.22 690.214 L1489.78 690.214 L1490.34 690.214 L1490.89 690.214 L1491.45 690.214 L1492.01 690.214 L1492.57 690.214 L1493.13 690.214 L1493.69 690.214 L1494.25 690.214 L1494.81 690.214 L1495.37 690.214 L1495.93 690.214 L1496.49 690.214 L1497.05 690.214 L1497.61 690.214 L1498.16 690.214 L1498.72 690.214 L1499.28 690.214 L1499.84 690.214 L1500.4 690.214 L1500.96 690.214 L1501.52 690.214 L1502.08 690.214 L1502.64 690.214 L1503.2 690.214 L1503.76 690.214 L1504.32 690.214 L1504.88 690.214 L1505.44 690.214 L1505.99 690.214 L1506.55 690.214 L1507.11 690.214 L1507.67 690.214 L1508.23 690.214 L1508.79 690.214 L1509.35 690.214 L1509.91 690.214 L1510.47 690.214 L1511.03 690.214 L1511.59 690.214 L1512.15 690.214 L1512.71 690.214 L1513.26 690.214 L1513.82 690.214 L1514.38 690.214 L1514.94 690.214 L1515.5 690.214 L1516.06 690.214 L1516.62 690.214 L1517.18 690.214 L1517.74 690.214 L1518.3 690.214 L1518.86 690.214 L1519.42 690.214 L1519.98 690.214 L1520.53 690.214 L1521.09 690.214 L1521.65 690.214 L1522.21 690.214 L1522.77 690.214 L1523.33 690.214 L1523.89 690.214 L1524.45 690.214 L1525.01 690.214 L1525.57 690.214 L1526.13 690.214 L1526.69 690.214 L1527.25 690.214 L1527.81 690.214 L1528.36 690.214 L1528.92 690.214 L1529.48 690.214 L1530.04 690.214 L1530.6 690.214 L1531.16 690.214 L1531.72 690.214 L1532.28 690.214 L1532.84 690.214 L1533.4 690.214 L1533.96 690.214 L1534.52 690.214 L1535.08 690.214 L1535.63 690.214 L1536.19 690.214 L1536.75 690.214 L1537.31 690.214 L1537.87 690.214 L1538.43 690.214 L1538.99 690.214 L1539.55 690.214 L1540.11 690.214 L1540.67 690.214 L1541.23 690.214 L1541.79 690.214 L1542.35 690.214 L1542.9 690.214 L1543.46 690.214 L1544.02 690.214 L1544.58 690.214 L1545.14 690.214 L1545.7 690.214 L1546.26 690.214 L1546.82 690.214 L1547.38 690.214 L1547.94 690.214 L1548.5 690.214 L1549.06 690.214 L1549.62 690.214 L1550.18 690.214 L1550.73 690.214 L1551.29 690.214 L1551.85 690.214 L1552.41 690.214 L1552.97 690.214 L1553.53 690.214 L1554.09 690.214 L1554.65 690.214 L1555.21 690.214 L1555.77 690.214 L1556.33 690.214 L1556.89 690.214 L1557.45 690.214 L1558 690.214 L1558.56 690.214 L1559.12 690.214 L1559.68 690.214 L1560.24 690.214 L1560.8 690.214 L1561.36 690.214 L1561.92 690.214 L1562.48 690.214 L1563.04 690.214 L1563.6 690.214 L1564.16 690.214 L1564.72 690.214 L1565.28 690.214 L1565.83 690.214 L1566.39 690.214 L1566.95 690.214 L1567.51 690.214 L1568.07 690.214 L1568.63 690.214 L1569.19 690.214 L1569.75 690.214 L1570.31 690.214 L1570.87 690.214 L1571.43 690.214 L1571.99 690.214 L1572.55 690.214 L1573.1 690.214 L1573.66 690.214 L1574.22 690.214 L1574.78 690.214 L1575.34 690.214 L1575.9 690.214 L1576.46 690.214 L1577.02 690.214 L1577.58 690.214 L1578.14 690.214 L1578.7 690.214 L1579.26 690.214 L1579.82 690.214 L1580.37 690.214 L1580.93 690.214 L1581.49 690.214 L1582.05 690.214 L1582.61 690.214 L1583.17 690.214 L1583.73 690.214 L1584.29 690.214 L1584.85 690.214 L1585.41 690.214 L1585.97 690.214 L1586.53 690.214 L1587.09 690.214 L1587.65 690.214 L1588.2 690.214 L1588.76 690.214 L1589.32 690.214 L1589.88 690.214 L1590.44 690.214 L1591 690.214 L1591.56 690.214 L1592.12 690.214 L1592.68 690.214 L1593.24 690.214 L1593.8 690.214 L1594.36 690.214 L1594.92 690.214 L1595.47 690.214 L1596.03 690.214 L1596.59 690.214 L1597.15 690.214 L1597.71 690.214 L1598.27 690.214 L1598.83 690.214 L1599.39 690.214 L1599.95 690.214 L1600.51 690.214 L1601.07 690.214 L1601.63 690.214 L1602.19 690.214 L1602.74 690.214 L1603.3 690.214 L1603.86 690.214 L1604.42 690.214 L1604.98 690.214 L1605.54 690.214 L1606.1 690.214 L1606.66 690.214 L1607.22 690.214 L1607.78 690.214 L1608.34 690.214 L1608.9 690.214 L1609.46 690.214 L1610.02 690.214 L1610.57 690.214 L1611.13 690.214 L1611.69 690.214 L1612.25 690.214 L1612.81 690.214 L1613.37 690.214 L1613.93 690.214 L1614.49 690.214 L1615.05 690.214 L1615.61 690.214 L1616.17 690.214 L1616.73 690.214 L1617.29 690.214 L1617.84 690.214 L1618.4 690.214 L1618.96 690.214 L1619.52 690.214 L1620.08 690.214 L1620.64 690.214 L1621.2 690.214 L1621.76 690.214 L1622.32 690.214 L1622.88 690.214 L1623.44 690.214 L1624 690.214 L1624.56 690.214 L1625.11 690.214 L1625.67 690.214 L1626.23 690.214 L1626.79 690.214 L1627.35 690.214 L1627.91 690.214 L1628.47 690.214 L1629.03 690.214 L1629.59 690.214 L1630.15 690.214 L1630.71 690.214 L1631.27 690.214 L1631.83 690.214 L1632.39 690.214 L1632.94 690.214 L1633.5 690.214 L1634.06 690.214 L1634.62 690.214 L1635.18 690.214 L1635.74 690.214 L1636.3 690.214 L1636.86 690.214 L1637.42 690.214 L1637.98 690.214 L1638.54 690.214 L1639.1 690.214 L1639.66 690.214 L1640.21 690.214 L1640.77 690.214 L1641.33 690.214 L1641.89 690.214 L1642.45 690.214 L1643.01 690.214 L1643.57 690.214 L1644.13 690.214 L1644.69 690.214 L1645.25 690.214 L1645.81 690.214 L1646.37 690.214 L1646.93 690.214 L1647.48 690.214 L1648.04 690.214 L1648.6 690.214 L1649.16 690.214 L1649.72 690.214 L1650.28 690.214 L1650.84 690.214 L1651.4 690.214 L1651.96 690.214 L1652.52 690.214 L1653.08 690.214 L1653.64 690.214 L1654.2 690.214 L1654.76 690.214 L1655.31 690.214 L1655.87 690.214 L1656.43 690.214 L1656.99 690.214 L1657.55 690.214 L1658.11 690.214 L1658.67 690.214 L1659.23 690.214 L1659.79 690.214 L1660.35 690.214 L1660.91 690.214 L1661.47 690.214 L1662.03 690.214 L1662.58 690.214 L1663.14 690.214 L1663.7 690.214 L1664.26 690.214 L1664.82 690.214 L1665.38 690.214 L1665.94 690.214 L1666.5 690.214 L1667.06 690.214 L1667.62 690.214 L1668.18 690.214 L1668.74 690.214 L1669.3 690.214 L1669.85 690.214 L1670.41 690.214 L1670.97 690.214 L1671.53 690.214 L1672.09 690.214 L1672.65 690.214 L1673.21 690.214 L1673.77 690.214 L1674.33 690.214 L1674.89 690.214 L1675.45 690.214 L1676.01 690.214 L1676.57 690.214 L1677.13 690.214 L1677.68 690.214 L1678.24 690.214 L1678.8 690.214 L1679.36 690.214 L1679.92 690.214 L1680.48 690.214 L1681.04 690.214 L1681.6 690.214 L1682.16 690.214 L1682.72 690.214 L1683.28 690.214 L1683.84 690.214 L1684.4 690.214 L1684.95 690.214 L1685.51 690.214 L1686.07 690.214 L1686.63 690.214 L1687.19 690.214 L1687.75 690.214 L1688.31 690.214 L1688.87 690.214 L1689.43 690.214 L1689.99 690.214 L1690.55 690.214 L1691.11 690.214 L1691.67 690.214 L1692.23 690.214 L1692.78 690.214 L1693.34 690.214 L1693.9 690.214 L1694.46 690.214 L1695.02 690.214 L1695.58 690.214 L1696.14 690.214 L1696.7 690.214 L1697.26 690.214 L1697.82 690.214 L1698.38 690.214 L1698.94 690.214 L1699.5 690.214 L1700.05 690.214 L1700.61 690.214 L1701.17 690.214 L1701.73 690.214 L1702.29 690.214 L1702.85 690.214 L1703.41 690.214 L1703.97 690.214 L1704.53 690.214 L1705.09 690.214 L1705.65 690.214 L1706.21 690.214 L1706.77 690.214 L1707.32 690.214 L1707.88 690.214 L1708.44 690.214 L1709 690.214 L1709.56 690.214 L1710.12 690.214 L1710.68 690.214 L1711.24 690.214 L1711.8 690.214 L1712.36 690.214 L1712.92 690.214 L1713.48 690.214 L1714.04 690.214 L1714.6 690.214 L1715.15 690.214 L1715.71 690.214 L1716.27 690.214 L1716.83 690.214 L1717.39 690.214 L1717.95 690.214 L1718.51 690.214 L1719.07 690.214 L1719.63 690.214 L1720.19 690.214 L1720.75 690.214 L1721.31 690.214 L1721.87 690.214 L1722.42 690.214 L1722.98 690.214 L1723.54 690.214 L1724.1 690.214 L1724.66 690.214 L1725.22 690.214 L1725.78 690.214 L1726.34 690.214 L1726.9 690.214 L1727.46 690.214 L1728.02 690.214 L1728.58 690.214 L1729.14 690.214 L1729.69 690.214 L1730.25 690.214 L1730.81 690.214 L1731.37 690.214 L1731.93 690.214 L1732.49 690.214 L1733.05 690.214 L1733.61 690.214 L1734.17 690.214 L1734.73 690.214 L1735.29 690.214 L1735.85 690.214 L1736.41 690.214 L1736.97 690.214 L1737.52 690.214 L1738.08 690.214 L1738.64 690.214 L1739.2 690.214 L1739.76 690.214 L1740.32 690.214 L1740.88 690.214 L1741.44 690.214 L1742 690.214 L1742.56 690.214 L1743.12 690.214 L1743.68 690.214 L1744.24 690.214 L1744.79 690.214 L1745.35 690.214 L1745.91 690.214 L1746.47 690.214 L1747.03 690.214 L1747.59 690.214 L1748.15 690.214 L1748.71 690.214 L1749.27 690.214 L1749.83 690.214 L1750.39 690.214 L1750.95 690.214 L1751.51 690.214 L1752.06 690.214 L1752.62 690.214 L1753.18 690.214 L1753.74 690.214 L1754.3 690.214 L1754.86 690.214 L1755.42 690.214 L1755.98 690.214 L1756.54 690.214 L1757.1 690.214 L1757.66 690.214 L1758.22 690.214 L1758.78 690.214 L1759.34 690.214 L1759.89 690.214 L1760.45 690.214 L1761.01 690.214 L1761.57 690.214 L1762.13 690.214 L1762.69 690.214 L1763.25 690.214 L1763.81 690.214 L1764.37 690.214 L1764.93 690.214 L1765.49 690.214 L1766.05 690.214 L1766.61 690.214 L1767.16 690.214 L1767.72 690.214 L1768.28 690.214 L1768.84 690.214 L1769.4 690.214 L1769.96 690.214 L1770.52 690.214 L1771.08 690.214 L1771.64 690.214 L1772.2 690.214 L1772.76 690.214 L1773.32 690.214 L1773.88 690.214 L1774.43 690.214 L1774.99 690.214 L1775.55 690.214 L1776.11 690.214 L1776.67 690.214 L1777.23 690.214 L1777.79 690.214 L1778.35 690.214 L1778.91 690.214 L1779.47 690.214 L1780.03 690.214 L1780.59 690.214 L1781.15 690.214 L1781.71 690.214 L1782.26 690.214 L1782.82 690.214 L1783.38 690.214 L1783.94 690.214 L1784.5 690.214 L1785.06 690.214 L1785.62 690.214 L1786.18 690.214 L1786.74 690.214 L1787.3 690.214 L1787.86 690.214 L1788.42 690.214 L1788.98 690.214 L1789.53 690.214 L1790.09 690.214 L1790.65 690.214 L1791.21 690.214 L1791.77 690.214 L1792.33 690.214 L1792.89 690.214 L1793.45 690.214 L1794.01 690.214 L1794.57 690.214 L1795.13 690.214 L1795.69 690.214 L1796.25 690.214 L1796.8 690.214 L1797.36 690.214 L1797.92 690.214 L1798.48 690.214 L1799.04 690.214 L1799.6 690.214 L1800.16 690.214 L1800.72 690.214 L1801.28 690.214 L1801.84 690.214 L1802.4 690.214 L1802.96 690.214 L1803.52 690.214 L1804.08 690.214 L1804.63 690.214 L1805.19 690.214 L1805.75 690.214 L1806.31 690.214 L1806.87 690.214 L1807.43 690.214 L1807.99 690.214 L1808.55 690.214 L1809.11 690.214 L1809.67 690.214 L1810.23 690.214 L1810.79 690.214 L1811.35 690.214 L1811.9 690.214 L1812.46 690.214 L1813.02 690.214 L1813.58 690.214 L1814.14 690.214 L1814.7 690.214 L1815.26 690.214 L1815.82 690.214 L1816.38 690.214 L1816.94 690.214 L1817.5 690.214 L1818.06 690.214 L1818.62 690.214 L1819.18 690.214 L1819.73 690.214 L1820.29 690.214 L1820.85 690.214 L1821.41 690.214 L1821.97 690.214 L1822.53 690.214 L1823.09 690.214 L1823.65 690.214 L1824.21 690.214 L1824.77 690.214 L1825.33 690.214 L1825.89 690.214 L1826.45 690.214 L1827 690.214 L1827.56 690.214 L1828.12 690.214 L1828.68 690.214 L1829.24 690.214 L1829.8 690.214 L1830.36 690.214 L1830.92 690.214 L1831.48 690.214 L1832.04 690.214 L1832.6 690.214 L1833.16 690.214 L1833.72 690.214 L1834.27 690.214 L1834.83 690.214 L1835.39 690.214 L1835.95 690.214 L1836.51 690.214 L1837.07 690.214 L1837.63 690.214 L1838.19 690.214 L1838.19 681.472 L1837.63 681.472 L1837.07 681.472 L1836.51 681.472 L1835.95 681.472 L1835.39 681.472 L1834.83 681.472 L1834.27 681.472 L1833.72 681.472 L1833.16 681.472 L1832.6 681.472 L1832.04 681.472 L1831.48 681.472 L1830.92 681.472 L1830.36 681.472 L1829.8 681.472 L1829.24 681.472 L1828.68 681.472 L1828.12 681.472 L1827.56 681.472 L1827 681.472 L1826.45 681.472 L1825.89 681.472 L1825.33 681.472 L1824.77 681.472 L1824.21 681.472 L1823.65 681.472 L1823.09 681.472 L1822.53 681.472 L1821.97 681.472 L1821.41 681.472 L1820.85 681.472 L1820.29 681.472 L1819.73 681.472 L1819.18 681.472 L1818.62 681.472 L1818.06 681.472 L1817.5 681.472 L1816.94 681.472 L1816.38 681.472 L1815.82 681.472 L1815.26 681.472 L1814.7 681.472 L1814.14 681.472 L1813.58 681.472 L1813.02 681.472 L1812.46 681.472 L1811.9 681.472 L1811.35 681.472 L1810.79 681.472 L1810.23 681.472 L1809.67 681.472 L1809.11 681.472 L1808.55 681.472 L1807.99 681.472 L1807.43 681.472 L1806.87 681.472 L1806.31 681.472 L1805.75 681.472 L1805.19 681.472 L1804.63 681.472 L1804.08 681.472 L1803.52 681.472 L1802.96 681.472 L1802.4 681.472 L1801.84 681.472 L1801.28 681.472 L1800.72 681.472 L1800.16 681.472 L1799.6 681.472 L1799.04 681.472 L1798.48 681.472 L1797.92 681.472 L1797.36 681.472 L1796.8 681.472 L1796.25 681.472 L1795.69 681.472 L1795.13 681.472 L1794.57 681.472 L1794.01 681.472 L1793.45 681.472 L1792.89 681.472 L1792.33 681.472 L1791.77 681.472 L1791.21 681.472 L1790.65 681.472 L1790.09 681.472 L1789.53 681.472 L1788.98 681.472 L1788.42 681.472 L1787.86 681.472 L1787.3 681.472 L1786.74 681.472 L1786.18 681.472 L1785.62 681.472 L1785.06 681.472 L1784.5 681.472 L1783.94 681.472 L1783.38 681.472 L1782.82 681.472 L1782.26 681.472 L1781.71 681.472 L1781.15 681.472 L1780.59 681.472 L1780.03 681.472 L1779.47 681.472 L1778.91 681.472 L1778.35 681.472 L1777.79 681.472 L1777.23 681.472 L1776.67 681.472 L1776.11 681.472 L1775.55 681.472 L1774.99 681.472 L1774.43 681.472 L1773.88 681.472 L1773.32 681.472 L1772.76 681.472 L1772.2 681.472 L1771.64 681.472 L1771.08 681.472 L1770.52 681.472 L1769.96 681.472 L1769.4 681.472 L1768.84 681.472 L1768.28 681.472 L1767.72 681.472 L1767.16 681.472 L1766.61 681.472 L1766.05 681.472 L1765.49 681.472 L1764.93 681.472 L1764.37 681.472 L1763.81 681.472 L1763.25 681.472 L1762.69 681.472 L1762.13 681.472 L1761.57 681.472 L1761.01 681.472 L1760.45 681.472 L1759.89 681.472 L1759.34 681.472 L1758.78 681.472 L1758.22 681.472 L1757.66 681.472 L1757.1 681.472 L1756.54 681.472 L1755.98 681.472 L1755.42 681.472 L1754.86 681.472 L1754.3 681.472 L1753.74 681.472 L1753.18 681.472 L1752.62 681.472 L1752.06 681.472 L1751.51 681.472 L1750.95 681.472 L1750.39 681.472 L1749.83 681.472 L1749.27 681.472 L1748.71 681.472 L1748.15 681.472 L1747.59 681.472 L1747.03 681.472 L1746.47 681.472 L1745.91 681.472 L1745.35 681.472 L1744.79 681.472 L1744.24 681.472 L1743.68 681.472 L1743.12 681.472 L1742.56 681.472 L1742 681.472 L1741.44 681.472 L1740.88 681.472 L1740.32 681.472 L1739.76 681.472 L1739.2 681.472 L1738.64 681.472 L1738.08 681.472 L1737.52 681.472 L1736.97 681.472 L1736.41 681.472 L1735.85 681.472 L1735.29 681.472 L1734.73 681.472 L1734.17 681.472 L1733.61 681.472 L1733.05 681.472 L1732.49 681.472 L1731.93 681.472 L1731.37 681.472 L1730.81 681.472 L1730.25 681.472 L1729.69 681.472 L1729.14 681.472 L1728.58 681.472 L1728.02 681.472 L1727.46 681.472 L1726.9 681.472 L1726.34 681.472 L1725.78 681.472 L1725.22 681.472 L1724.66 681.472 L1724.1 681.472 L1723.54 681.472 L1722.98 681.472 L1722.42 681.472 L1721.87 681.472 L1721.31 681.472 L1720.75 681.472 L1720.19 681.472 L1719.63 681.472 L1719.07 681.472 L1718.51 681.472 L1717.95 681.472 L1717.39 681.472 L1716.83 681.472 L1716.27 681.472 L1715.71 681.472 L1715.15 681.472 L1714.6 681.472 L1714.04 681.472 L1713.48 681.472 L1712.92 681.472 L1712.36 681.472 L1711.8 681.472 L1711.24 681.472 L1710.68 681.472 L1710.12 681.472 L1709.56 681.472 L1709 681.472 L1708.44 681.472 L1707.88 681.472 L1707.32 681.472 L1706.77 681.472 L1706.21 681.472 L1705.65 681.472 L1705.09 681.472 L1704.53 681.472 L1703.97 681.472 L1703.41 681.472 L1702.85 681.472 L1702.29 681.472 L1701.73 681.472 L1701.17 681.472 L1700.61 681.472 L1700.05 681.472 L1699.5 681.472 L1698.94 681.472 L1698.38 681.472 L1697.82 681.472 L1697.26 681.472 L1696.7 681.472 L1696.14 681.472 L1695.58 681.472 L1695.02 681.472 L1694.46 681.472 L1693.9 681.472 L1693.34 681.472 L1692.78 681.472 L1692.23 681.472 L1691.67 681.472 L1691.11 681.472 L1690.55 681.472 L1689.99 681.472 L1689.43 681.472 L1688.87 681.472 L1688.31 681.472 L1687.75 681.472 L1687.19 681.472 L1686.63 681.472 L1686.07 681.472 L1685.51 681.472 L1684.95 681.472 L1684.4 681.472 L1683.84 681.472 L1683.28 681.472 L1682.72 681.472 L1682.16 681.472 L1681.6 681.472 L1681.04 681.472 L1680.48 681.472 L1679.92 681.472 L1679.36 681.472 L1678.8 681.472 L1678.24 681.472 L1677.68 681.472 L1677.13 681.472 L1676.57 681.472 L1676.01 681.472 L1675.45 681.472 L1674.89 681.472 L1674.33 681.472 L1673.77 681.472 L1673.21 681.472 L1672.65 681.472 L1672.09 681.472 L1671.53 681.472 L1670.97 681.472 L1670.41 681.472 L1669.85 681.472 L1669.3 681.472 L1668.74 681.472 L1668.18 681.472 L1667.62 681.472 L1667.06 681.472 L1666.5 681.472 L1665.94 681.472 L1665.38 681.472 L1664.82 681.472 L1664.26 681.472 L1663.7 681.472 L1663.14 681.472 L1662.58 681.472 L1662.03 681.472 L1661.47 681.472 L1660.91 681.472 L1660.35 681.472 L1659.79 681.472 L1659.23 681.472 L1658.67 681.472 L1658.11 681.472 L1657.55 681.472 L1656.99 681.472 L1656.43 681.472 L1655.87 681.472 L1655.31 681.472 L1654.76 681.472 L1654.2 681.472 L1653.64 681.472 L1653.08 681.472 L1652.52 681.472 L1651.96 681.472 L1651.4 681.472 L1650.84 681.472 L1650.28 681.472 L1649.72 681.472 L1649.16 681.472 L1648.6 681.472 L1648.04 681.472 L1647.48 681.472 L1646.93 681.472 L1646.37 681.472 L1645.81 681.472 L1645.25 681.472 L1644.69 681.472 L1644.13 681.472 L1643.57 681.472 L1643.01 681.472 L1642.45 681.472 L1641.89 681.472 L1641.33 681.472 L1640.77 681.472 L1640.21 681.472 L1639.66 681.472 L1639.1 681.472 L1638.54 681.472 L1637.98 681.472 L1637.42 681.472 L1636.86 681.472 L1636.3 681.472 L1635.74 681.472 L1635.18 681.472 L1634.62 681.472 L1634.06 681.472 L1633.5 681.472 L1632.94 681.472 L1632.39 681.472 L1631.83 681.472 L1631.27 681.472 L1630.71 681.472 L1630.15 681.472 L1629.59 681.472 L1629.03 681.472 L1628.47 681.472 L1627.91 681.472 L1627.35 681.472 L1626.79 681.472 L1626.23 681.472 L1625.67 681.472 L1625.11 681.472 L1624.56 681.472 L1624 681.472 L1623.44 681.472 L1622.88 681.472 L1622.32 681.472 L1621.76 681.472 L1621.2 681.472 L1620.64 681.472 L1620.08 681.472 L1619.52 681.472 L1618.96 681.472 L1618.4 681.472 L1617.84 681.472 L1617.29 681.472 L1616.73 681.472 L1616.17 681.472 L1615.61 681.472 L1615.05 681.472 L1614.49 681.472 L1613.93 681.472 L1613.37 681.472 L1612.81 681.472 L1612.25 681.472 L1611.69 681.472 L1611.13 681.472 L1610.57 681.472 L1610.02 681.472 L1609.46 681.472 L1608.9 681.472 L1608.34 681.472 L1607.78 681.472 L1607.22 681.472 L1606.66 681.472 L1606.1 681.472 L1605.54 681.472 L1604.98 681.472 L1604.42 681.472 L1603.86 681.472 L1603.3 681.472 L1602.74 681.472 L1602.19 681.472 L1601.63 681.472 L1601.07 681.472 L1600.51 681.472 L1599.95 681.472 L1599.39 681.472 L1598.83 681.472 L1598.27 681.472 L1597.71 681.472 L1597.15 681.472 L1596.59 681.472 L1596.03 681.472 L1595.47 681.472 L1594.92 681.472 L1594.36 681.472 L1593.8 681.472 L1593.24 681.472 L1592.68 681.472 L1592.12 681.472 L1591.56 681.472 L1591 681.472 L1590.44 681.472 L1589.88 681.472 L1589.32 681.472 L1588.76 681.472 L1588.2 681.472 L1587.65 681.472 L1587.09 681.472 L1586.53 681.472 L1585.97 681.472 L1585.41 681.472 L1584.85 681.472 L1584.29 681.472 L1583.73 681.472 L1583.17 681.472 L1582.61 681.472 L1582.05 681.472 L1581.49 681.472 L1580.93 681.472 L1580.37 681.472 L1579.82 681.472 L1579.26 681.472 L1578.7 681.472 L1578.14 681.472 L1577.58 681.472 L1577.02 681.472 L1576.46 681.472 L1575.9 681.472 L1575.34 681.472 L1574.78 681.472 L1574.22 681.472 L1573.66 681.472 L1573.1 681.472 L1572.55 681.472 L1571.99 681.472 L1571.43 681.472 L1570.87 681.472 L1570.31 681.472 L1569.75 681.472 L1569.19 681.472 L1568.63 681.472 L1568.07 681.472 L1567.51 681.472 L1566.95 681.472 L1566.39 681.472 L1565.83 681.472 L1565.28 681.472 L1564.72 681.472 L1564.16 681.472 L1563.6 681.472 L1563.04 681.472 L1562.48 681.472 L1561.92 681.472 L1561.36 681.472 L1560.8 681.472 L1560.24 681.472 L1559.68 681.472 L1559.12 681.472 L1558.56 681.472 L1558 681.472 L1557.45 681.472 L1556.89 681.472 L1556.33 681.472 L1555.77 681.472 L1555.21 681.472 L1554.65 681.472 L1554.09 681.472 L1553.53 681.472 L1552.97 681.472 L1552.41 681.472 L1551.85 681.472 L1551.29 681.472 L1550.73 681.472 L1550.18 681.472 L1549.62 681.472 L1549.06 681.472 L1548.5 681.472 L1547.94 681.472 L1547.38 681.472 L1546.82 681.472 L1546.26 681.472 L1545.7 681.472 L1545.14 681.472 L1544.58 681.472 L1544.02 681.472 L1543.46 681.472 L1542.9 681.472 L1542.35 681.472 L1541.79 681.472 L1541.23 681.472 L1540.67 681.472 L1540.11 681.472 L1539.55 681.472 L1538.99 681.472 L1538.43 681.472 L1537.87 681.472 L1537.31 681.472 L1536.75 681.472 L1536.19 681.472 L1535.63 681.472 L1535.08 681.472 L1534.52 681.472 L1533.96 681.472 L1533.4 681.472 L1532.84 681.472 L1532.28 681.472 L1531.72 681.472 L1531.16 681.472 L1530.6 681.472 L1530.04 681.472 L1529.48 681.472 L1528.92 681.472 L1528.36 681.472 L1527.81 681.472 L1527.25 681.472 L1526.69 681.472 L1526.13 681.472 L1525.57 681.472 L1525.01 681.472 L1524.45 681.472 L1523.89 681.472 L1523.33 681.472 L1522.77 681.472 L1522.21 681.472 L1521.65 681.472 L1521.09 681.472 L1520.53 681.472 L1519.98 681.472 L1519.42 681.472 L1518.86 681.472 L1518.3 681.472 L1517.74 681.472 L1517.18 681.472 L1516.62 681.472 L1516.06 681.472 L1515.5 681.472 L1514.94 681.472 L1514.38 681.472 L1513.82 681.472 L1513.26 681.472 L1512.71 681.472 L1512.15 681.472 L1511.59 681.472 L1511.03 681.472 L1510.47 681.472 L1509.91 681.472 L1509.35 681.472 L1508.79 681.472 L1508.23 681.472 L1507.67 681.472 L1507.11 681.472 L1506.55 681.472 L1505.99 681.472 L1505.44 681.472 L1504.88 681.472 L1504.32 681.472 L1503.76 681.472 L1503.2 681.472 L1502.64 681.472 L1502.08 681.472 L1501.52 681.472 L1500.96 681.472 L1500.4 681.472 L1499.84 681.472 L1499.28 681.472 L1498.72 681.472 L1498.16 681.472 L1497.61 681.472 L1497.05 681.472 L1496.49 681.472 L1495.93 681.472 L1495.37 681.472 L1494.81 681.472 L1494.25 681.472 L1493.69 681.472 L1493.13 681.472 L1492.57 681.472 L1492.01 681.472 L1491.45 681.472 L1490.89 681.472 L1490.34 681.472 L1489.78 681.472 L1489.22 681.472 L1488.66 681.472 L1488.1 681.472 L1487.54 681.472 L1486.98 681.472 L1486.42 681.472 L1485.86 681.472 L1485.3 681.472 L1484.74 681.472 L1484.18 681.472 L1483.62 681.472 L1483.07 681.472 L1482.51 681.472 L1481.95 681.472 L1481.39 681.472 L1480.83 681.472 L1480.27 681.472 L1479.71 681.472 L1479.15 681.472 L1478.59 681.472 L1478.03 681.472 L1477.47 681.472 L1476.91 681.472 L1476.35 681.472 L1475.79 681.472 L1475.24 681.472 L1474.68 681.472 L1474.12 681.472 L1473.56 681.472 L1473 681.472 L1472.44 681.472 L1471.88 681.472 L1471.32 681.472 L1470.76 681.472 L1470.2 681.472 L1469.64 681.472 L1469.08 681.472 L1468.52 681.472 L1467.97 681.472 L1467.41 681.472 L1466.85 681.472 L1466.29 681.472 L1465.73 681.472 L1465.17 681.472 L1464.61 681.472 L1464.05 681.472 L1463.49 681.472 L1462.93 681.472 L1462.37 681.472 L1461.81 681.472 L1461.25 681.472 L1460.7 681.472 L1460.14 681.472 L1459.58 681.472 L1459.02 681.472 L1458.46 681.472 L1457.9 681.472 L1457.34 681.472 L1456.78 681.472 L1456.22 681.472 L1455.66 681.472 L1455.1 681.472 L1454.54 681.472 L1453.98 681.472 L1453.42 681.472 L1452.87 681.472 L1452.31 681.472 L1451.75 681.472 L1451.19 681.472 L1450.63 681.472 L1450.07 681.472 L1449.51 681.472 L1448.95 681.472 L1448.39 681.472 L1447.83 681.472 L1447.27 681.472 L1446.71 681.472 L1446.15 681.472 L1445.6 681.472 L1445.04 681.472 L1444.48 681.472 L1443.92 681.472 L1443.36 681.472 L1442.8 681.472 L1442.24 681.472 L1441.68 681.472 L1441.12 681.472 L1440.56 681.472 L1440 681.472 L1439.44 681.472 L1438.88 681.472 L1438.33 681.472 L1437.77 681.472 L1437.21 681.472 L1436.65 681.472 L1436.09 681.472 L1435.53 681.472 L1434.97 681.472 L1434.41 681.472 L1433.85 681.472 L1433.29 681.472 L1432.73 681.472 L1432.17 681.472 L1431.61 681.472 L1431.05 681.472 L1430.5 681.472 L1429.94 681.472 L1429.38 681.472 L1428.82 681.472 L1428.26 681.472 L1427.7 681.472 L1427.14 681.472 L1426.58 681.472 L1426.02 681.472 L1425.46 681.472 L1424.9 681.472 L1424.34 681.472 L1423.78 681.472 L1423.23 681.472 L1422.67 681.472 L1422.11 681.472 L1421.55 681.472 L1420.99 681.472 L1420.43 681.472 L1419.87 681.472 L1419.31 681.472 L1418.75 681.472 L1418.19 681.472 L1417.63 681.472 L1417.07 681.472 L1416.51 681.472 L1415.95 681.472 L1415.4 681.472 L1414.84 681.472 L1414.28 681.472 L1413.72 681.472 L1413.16 681.472 L1412.6 681.472 L1412.04 681.472 L1411.48 681.472 L1410.92 681.472 L1410.36 681.472 L1409.8 681.472 L1409.24 681.472 L1408.68 681.472 L1408.13 681.472 L1407.57 681.472 L1407.01 681.472 L1406.45 681.472 L1405.89 681.472 L1405.33 681.472 L1404.77 681.472 L1404.21 681.472 L1403.65 681.472 L1403.09 681.472 L1402.53 681.472 L1401.97 681.472 L1401.41 681.472 L1400.86 681.472 L1400.3 681.472 L1399.74 681.472 L1399.18 681.472 L1398.62 681.472 L1398.06 681.472 L1397.5 681.472 L1396.94 681.472 L1396.38 681.472 L1395.82 681.472 L1395.26 681.472 L1394.7 681.472 L1394.14 681.472 L1393.58 681.472 L1393.03 681.472 L1392.47 681.472 L1391.91 681.472 L1391.35 681.472 L1390.79 681.472 L1390.23 681.472 L1389.67 681.472 L1389.11 681.472 L1388.55 681.472 L1387.99 681.472 L1387.43 681.472 L1386.87 681.472 L1386.31 681.472 L1385.76 681.472 L1385.2 681.472 L1384.64 681.472 L1384.08 681.472 L1383.52 681.472 L1382.96 681.472 L1382.4 681.472 L1381.84 681.472 L1381.28 681.472 L1380.72 681.472 L1380.16 681.472 L1379.6 681.472 L1379.04 681.472 L1378.49 681.472 L1377.93 681.472 L1377.37 681.472 L1376.81 681.472 L1376.25 681.472 L1375.69 681.472 L1375.13 681.472 L1374.57 681.472 L1374.01 681.472 L1373.45 681.472 L1372.89 681.472 L1372.33 681.472 L1371.77 681.472 L1371.21 681.472 L1370.66 681.472 L1370.1 681.472 L1369.54 681.472 L1368.98 681.472 L1368.42 681.472 L1367.86 681.472 L1367.3 681.472 L1366.74 681.472 L1366.18 681.472 L1365.62 681.472 L1365.06 681.472 L1364.5 681.472 L1363.94 681.472 L1363.39 681.472 L1362.83 681.472 L1362.27 681.472 L1361.71 681.472 L1361.15 681.472 L1360.59 681.472 L1360.03 681.472 L1359.47 681.472 L1358.91 681.472 L1358.35 681.472 L1357.79 681.472 L1357.23 681.472 L1356.67 681.472 L1356.12 681.472 L1355.56 681.472 L1355 681.472 L1354.44 681.472 L1353.88 681.472 L1353.32 681.472 L1352.76 681.472 L1352.2 681.472 L1351.64 681.472 L1351.08 681.472 L1350.52 681.472 L1349.96 681.472 L1349.4 681.472 L1348.84 681.472 L1348.29 681.472 L1347.73 681.472 L1347.17 681.472 L1346.61 681.472 L1346.05 681.472 L1345.49 681.472 L1344.93 681.472 L1344.37 681.472 L1343.81 681.472 L1343.25 681.472 L1342.69 681.472 L1342.13 681.472 L1341.57 681.472 L1341.02 681.472 L1340.46 681.472 L1339.9 681.472 L1339.34 681.472 L1338.78 681.472 L1338.22 681.472 L1337.66 681.472 L1337.1 681.472 L1336.54 681.472 L1335.98 681.472 L1335.42 681.472 L1334.86 681.472 L1334.3 681.472 L1333.75 681.472 L1333.19 681.472 L1332.63 681.472 L1332.07 681.472 L1331.51 681.472 L1330.95 681.472 L1330.39 681.472 L1329.83 681.472 L1329.27 681.472 L1328.71 681.472 L1328.15 681.472 L1327.59 681.472 L1327.03 681.472 L1326.47 681.472 L1325.92 681.472 L1325.36 681.472 L1324.8 681.472 L1324.24 681.472 L1323.68 681.472 L1323.12 681.472 L1322.56 681.472 L1322 681.472 L1321.44 681.472 L1320.88 681.472 L1320.32 681.472 L1319.76 681.472 L1319.2 681.472 L1318.65 681.472 L1318.09 681.472 L1317.53 681.472 L1316.97 681.472 L1316.41 681.472 L1315.85 681.472 L1315.29 681.472 L1314.73 681.472 L1314.17 681.472 L1313.61 681.472 L1313.05 681.472 L1312.49 681.472 L1311.93 681.472 L1311.38 681.472 L1310.82 681.472 L1310.26 681.472 L1309.7 681.472 L1309.14 681.472 L1308.58 681.472 L1308.02 681.472 L1307.46 681.472 L1306.9 681.472 L1306.34 681.472 L1305.78 681.472 L1305.22 681.472 L1304.66 681.472 L1304.1 681.472 L1303.55 681.472 L1302.99 681.472 L1302.43 681.472 L1301.87 681.472 L1301.31 681.472 L1300.75 681.472 L1300.19 681.472 L1299.63 681.472 L1299.07 681.472 L1298.51 681.472 L1297.95 681.472 L1297.39 681.472 L1296.83 681.472 L1296.28 681.472 L1295.72 681.472 L1295.16 681.472 L1294.6 681.472 L1294.04 681.472 L1293.48 681.472 L1292.92 681.472 L1292.36 681.472 L1291.8 681.472 L1291.24 681.472 L1290.68 681.472 L1290.12 681.472 L1289.56 681.472 L1289 681.472 L1288.45 681.472 L1287.89 681.472 L1287.33 681.472 L1286.77 681.472 L1286.21 681.472 L1285.65 681.472 L1285.09 681.472 L1284.53 681.472 L1283.97 681.472 L1283.41 681.472 L1282.85 681.472 L1282.29 681.472 L1281.73 681.472 L1281.18 681.472 L1280.62 681.472 L1280.06 681.472 L1279.5 681.472 L1278.94 681.472 L1278.38 681.472 L1277.82 681.472 L1277.26 681.472 L1276.7 681.472 L1276.14 681.472 L1275.58 681.472 L1275.02 681.472 L1274.46 681.472 L1273.91 681.472 L1273.35 681.472 L1272.79 681.472 L1272.23 681.472 L1271.67 681.472 L1271.11 681.472 L1270.55 681.472 L1269.99 681.472 L1269.43 681.472 L1268.87 681.472 L1268.31 681.472 L1267.75 681.472 L1267.19 681.472 L1266.63 681.472 L1266.08 681.472 L1265.52 681.472 L1264.96 681.472 L1264.4 681.472 L1263.84 681.472 L1263.28 681.472 L1262.72 681.472 L1262.16 681.472 L1261.6 681.472 L1261.04 681.472 L1260.48 681.472 L1259.92 681.472 L1259.36 681.472 L1258.81 681.472 L1258.25 681.472 L1257.69 681.472 L1257.13 681.472 L1256.57 681.472 L1256.01 681.472 L1255.45 681.472 L1254.89 681.472 L1254.33 681.472 L1253.77 681.472 L1253.21 681.472 L1252.65 681.472 L1252.09 681.472 L1251.54 681.472 L1250.98 681.472 L1250.42 681.472 L1249.86 681.472 L1249.3 681.472 L1248.74 681.472 L1248.18 681.472 L1247.62 681.472 L1247.06 681.472 L1246.5 681.472 L1245.94 681.472 L1245.38 681.472 L1244.82 681.472 L1244.26 681.472 L1243.71 681.472 L1243.15 681.472 L1242.59 681.472 L1242.03 681.472 L1241.47 681.472 L1240.91 681.472 L1240.35 681.472 L1239.79 681.472 L1239.23 681.472 L1238.67 681.472 L1238.11 681.472 L1237.55 681.472 L1236.99 681.472 L1236.44 681.472 L1235.88 681.472 L1235.32 681.472 L1234.76 681.472 L1234.2 681.472 L1233.64 681.472 L1233.08 681.472 L1232.52 681.472 L1231.96 681.472 L1231.4 681.472 L1230.84 681.472 L1230.28 681.472 L1229.72 681.472 L1229.17 681.472 L1228.61 681.472 L1228.05 681.472 L1227.49 681.472 L1226.93 681.472 L1226.37 681.472 L1225.81 681.472 L1225.25 681.472 L1224.69 681.472 L1224.13 681.472 L1223.57 681.472 L1223.01 681.472 L1222.45 681.472 L1221.89 681.472 L1221.34 681.472 L1220.78 681.472 L1220.22 681.472 L1219.66 681.472 L1219.1 681.472 L1218.54 681.472 L1217.98 681.472 L1217.42 681.472 L1216.86 681.472 L1216.3 681.472 L1215.74 681.472 L1215.18 681.472 L1214.62 681.472 L1214.07 681.472 L1213.51 681.472 L1212.95 681.472 L1212.39 681.472 L1211.83 681.472 L1211.27 681.472 L1210.71 681.472 L1210.15 681.472 L1209.59 681.472 L1209.03 681.472 L1208.47 681.472 L1207.91 681.472 L1207.35 681.472 L1206.8 681.472 L1206.24 681.472 L1205.68 681.472 L1205.12 681.472 L1204.56 681.472 L1204 681.472 L1203.44 681.472 L1202.88 681.472 L1202.32 681.472 L1201.76 681.472 L1201.2 681.472 L1200.64 681.472 L1200.08 681.472 L1199.52 681.472 L1198.97 681.472 L1198.41 681.472 L1197.85 681.472 L1197.29 681.472 L1196.73 681.472 L1196.17 681.472 L1195.61 681.472 L1195.05 681.472 L1194.49 681.472 L1193.93 681.472 L1193.37 681.472 L1192.81 681.472 L1192.25 681.472 L1191.7 681.472 L1191.14 681.472 L1190.58 681.472 L1190.02 681.472 L1189.46 681.472 L1188.9 681.472 L1188.34 681.472 L1187.78 681.472 L1187.22 681.472 L1186.66 681.472 L1186.1 681.472 L1185.54 681.472 L1184.98 681.472 L1184.43 681.472 L1183.87 681.472 L1183.31 681.472 L1182.75 681.472 L1182.19 681.472 L1181.63 681.472 L1181.07 681.472 L1180.51 681.472 L1179.95 681.472 L1179.39 681.472 L1178.83 681.472 L1178.27 681.472 L1177.71 681.472 L1177.15 681.472 L1176.6 681.472 L1176.04 681.472 L1175.48 681.472 L1174.92 681.472 L1174.36 681.472 L1173.8 681.472 L1173.24 681.472 L1172.68 681.472 L1172.12 681.472 L1171.56 681.472 L1171 681.472 L1170.44 681.472 L1169.88 681.472 L1169.33 681.472 L1168.77 681.472 L1168.21 681.472 L1167.65 681.472 L1167.09 681.472 L1166.53 681.472 L1165.97 681.472 L1165.41 681.472 L1164.85 681.472 L1164.29 681.472 L1163.73 681.472 L1163.17 681.472 L1162.61 681.472 L1162.05 681.472 L1161.5 681.472 L1160.94 681.472 L1160.38 681.472 L1159.82 681.472 L1159.26 681.472 L1158.7 681.472 L1158.14 681.472 L1157.58 681.472 L1157.02 681.472 L1156.46 681.472 L1155.9 681.472 L1155.34 681.472 L1154.78 681.472 L1154.23 681.472 L1153.67 681.472 L1153.11 681.472 L1152.55 681.472 L1151.99 681.472 L1151.43 681.472 L1150.87 681.472 L1150.31 681.472 L1149.75 681.472 L1149.19 681.472 L1148.63 681.472 L1148.07 681.472 L1147.51 681.472 L1146.96 681.472 L1146.4 681.472 L1145.84 681.472 L1145.28 681.472 L1144.72 681.472 L1144.16 681.472 L1143.6 681.472 L1143.04 681.472 L1142.48 681.472 L1141.92 681.472 L1141.36 681.472 L1140.8 681.472 L1140.24 681.472 L1139.68 681.472 L1139.13 681.472 L1138.57 681.472 L1138.01 681.472 L1137.45 681.472 L1136.89 681.472 L1136.33 681.472 L1135.77 681.472 L1135.21 681.472 L1134.65 681.472 L1134.09 681.472 L1133.53 681.472 L1132.97 681.472 L1132.41 681.472 L1131.86 681.472 L1131.3 681.472 L1130.74 681.472 L1130.18 681.472 L1129.62 681.472 L1129.06 681.472 L1128.5 681.472 L1127.94 681.472 L1127.38 681.472 L1126.82 681.472 L1126.26 681.472 L1125.7 681.472 L1125.14 681.472 L1124.59 681.472 L1124.03 681.472 L1123.47 681.472 L1122.91 681.472 L1122.35 681.472 L1121.79 681.472 L1121.23 681.472 L1120.67 681.472 L1120.11 681.472 L1119.55 681.472 L1118.99 681.472 L1118.43 681.472 L1117.87 681.472 L1117.31 681.472 L1116.76 681.472 L1116.2 681.472 L1115.64 681.472 L1115.08 681.472 L1114.52 681.472 L1113.96 681.472 L1113.4 681.472 L1112.84 681.472 L1112.28 681.472 L1111.72 681.472 L1111.16 681.472 L1110.6 681.472 L1110.04 681.472 L1109.49 681.472 L1108.93 681.472 L1108.37 681.472 L1107.81 681.472 L1107.25 681.472 L1106.69 681.472 L1106.13 681.472 L1105.57 681.472 L1105.01 681.472 L1104.45 681.472 L1103.89 681.472 L1103.33 681.472 L1102.77 681.472 L1102.22 681.472 L1101.66 681.472 L1101.1 681.472 L1100.54 681.472 L1099.98 681.472 L1099.42 681.472 L1098.86 681.472 L1098.3 681.472 L1097.74 681.472 L1097.18 681.472 L1096.62 681.472 L1096.06 681.472 L1095.5 681.472 L1094.94 681.472 L1094.39 681.472 L1093.83 681.472 L1093.27 681.472 L1092.71 681.472 L1092.15 681.472 L1091.59 681.472 L1091.03 681.472 L1090.47 681.472 L1089.91 681.472 L1089.35 681.472 L1088.79 681.472 L1088.23 681.472 L1087.67 681.472 L1087.12 681.472 L1086.56 681.472 L1086 681.472 L1085.44 681.472 L1084.88 681.472 L1084.32 681.472 L1083.76 681.472 L1083.2 681.472 L1082.64 681.472 L1082.08 681.472 L1081.52 681.472 L1080.96 681.472 L1080.4 681.472 L1079.85 681.472 L1079.29 681.472 L1078.73 681.472 L1078.17 681.472 L1077.61 681.472 L1077.05 681.472 L1076.49 681.472 L1075.93 681.472 L1075.37 681.472 L1074.81 681.472 L1074.25 681.472 L1073.69 681.472 L1073.13 681.472 L1072.57 681.472 L1072.02 681.472 L1071.46 681.472 L1070.9 681.472 L1070.34 681.472 L1069.78 681.472 L1069.22 681.472 L1068.66 681.472 L1068.1 681.472 L1067.54 681.472 L1066.98 681.472 L1066.42 681.472 L1065.86 681.472 L1065.3 681.472 L1064.75 681.472 L1064.19 681.472 L1063.63 681.472 L1063.07 681.472 L1062.51 681.472 L1061.95 681.472 L1061.39 681.472 L1060.83 681.472 L1060.27 681.472 L1059.71 681.472 L1059.15 681.472 L1058.59 681.472 L1058.03 681.472 L1057.48 681.472 L1056.92 681.472 L1056.36 681.472 L1055.8 681.472 L1055.24 681.472 L1054.68 681.472 L1054.12 681.472 L1053.56 681.472 L1053 681.472 L1052.44 681.472 L1051.88 681.472 L1051.32 681.472 L1050.76 681.472 L1050.2 681.472 L1049.65 681.472 L1049.09 681.472 L1048.53 681.472 L1047.97 681.472 L1047.41 681.472 L1046.85 681.472 L1046.29 681.472 L1045.73 681.472 L1045.17 681.472 L1044.61 681.472 L1044.05 681.472 L1043.49 681.472 L1042.93 681.472 L1042.38 681.472 L1041.82 681.472 L1041.26 681.472 L1040.7 681.472 L1040.14 681.472 L1039.58 681.472 L1039.02 681.472 L1038.46 681.472 L1037.9 681.472 L1037.34 681.472 L1036.78 681.472 L1036.22 681.472 L1035.66 681.472 L1035.1 681.472 L1034.55 681.472 L1033.99 681.472 L1033.43 681.472 L1032.87 681.472 L1032.31 681.472 L1031.75 681.472 L1031.19 681.472 L1030.63 681.472 L1030.07 681.472 L1029.51 681.472 L1028.95 681.472 L1028.39 681.472 L1027.83 681.472 L1027.28 681.472 L1026.72 681.472 L1026.16 681.472 L1025.6 681.472 L1025.04 681.472 L1024.48 681.472 L1023.92 681.472 L1023.36 681.472 L1022.8 681.472 L1022.24 681.472 L1021.68 681.472 L1021.12 681.472 L1020.56 681.472 L1020.01 681.472 L1019.45 681.472 L1018.89 681.472 L1018.33 681.472 L1017.77 681.472 L1017.21 681.472 L1016.65 681.472 L1016.09 681.472 L1015.53 681.472 L1014.97 681.472 L1014.41 681.472 L1013.85 681.472 L1013.29 681.472 L1012.73 681.472 L1012.18 681.472 L1011.62 681.472 L1011.06 681.472 L1010.5 681.472 L1009.94 681.472 L1009.38 681.472 L1008.82 681.472 L1008.26 681.472 L1007.7 681.472 L1007.14 681.472 L1006.58 681.472 L1006.02 681.472 L1005.46 681.472 L1004.91 681.472 L1004.35 681.472 L1003.79 681.472 L1003.23 681.472 L1002.67 681.472 L1002.11 681.472 L1001.55 681.472 L1000.99 681.472 L1000.43 681.472 L999.872 681.472 L999.313 681.472 L998.754 681.472 L998.194 681.472 L997.635 681.472 L997.076 681.472 L996.517 681.472 L995.957 681.472 L995.398 681.472 L994.839 681.472 L994.28 681.472 L993.72 681.472 L993.161 681.472 L992.602 681.472 L992.043 681.472 L991.483 681.472 L990.924 681.472 L990.365 681.472 L989.806 681.472 L989.246 681.472 L988.687 681.472 L988.128 681.472 L987.569 681.472 L987.009 681.472 L986.45 681.472 L985.891 681.472 L985.332 681.472 L984.772 681.472 L984.213 681.472 L983.654 681.472 L983.095 681.472 L982.535 681.472 L981.976 681.472 L981.417 681.472 L980.858 681.472 L980.298 681.472 L979.739 681.472 L979.18 681.472 L978.621 681.472 L978.061 681.472 L977.502 681.472 L976.943 681.472 L976.384 681.472 L975.824 681.472 L975.265 681.472 L974.706 681.472 L974.147 681.472 L973.587 681.472 L973.028 681.472 L972.469 681.472 L971.91 681.472 L971.35 681.472 L970.791 681.472 L970.232 681.472 L969.673 681.472 L969.113 681.472 L968.554 681.472 L967.995 681.472 L967.436 681.472 L966.876 681.472 L966.317 681.472 L965.758 681.472 L965.199 681.472 L964.639 681.472 L964.08 681.472 L963.521 681.472 L962.962 681.472 L962.402 681.472 L961.843 681.472 L961.284 681.472 L960.725 681.472 L960.165 681.472 L959.606 681.472 L959.047 681.472 L958.488 681.472 L957.928 681.472 L957.369 681.472 L956.81 681.472 L956.251 681.472 L955.691 681.472 L955.132 681.472 L954.573 681.472 L954.014 681.472 L953.454 681.472 L952.895 681.472 L952.336 681.472 L951.777 681.472 L951.217 681.472 L950.658 681.472 L950.099 681.472 L949.54 681.472 L948.98 681.472 L948.421 681.472 L947.862 681.472 L947.303 681.472 L946.743 681.472 L946.184 681.472 L945.625 681.472 L945.066 681.472 L944.506 681.472 L943.947 681.472 L943.388 681.472 L942.829 681.472 L942.269 681.472 L941.71 681.472 L941.151 681.472 L940.592 681.472 L940.032 681.472 L939.473 681.472 L938.914 681.472 L938.355 681.472 L937.795 681.472 L937.236 681.472 L936.677 681.472 L936.118 681.472 L935.558 681.472 L934.999 681.472 L934.44 681.472 L933.881 681.472 L933.321 681.472 L932.762 681.472 L932.203 681.472 L931.644 681.472 L931.084 681.472 L930.525 681.472 L929.966 681.472 L929.406 681.472 L928.847 681.472 L928.288 681.472 L927.729 681.472 L927.169 681.472 L926.61 681.472 L926.051 681.472 L925.492 681.472 L924.932 681.472 L924.373 681.472 L923.814 681.472 L923.255 681.472 L922.695 681.472 L922.136 681.472 L921.577 681.472 L921.018 681.472 L920.458 681.472 L919.899 681.472 L919.34 681.472 L918.781 681.472 L918.221 681.472 L917.662 681.472 L917.103 681.472 L916.544 681.472 L915.984 681.472 L915.425 681.472 L914.866 681.472 L914.307 681.472 L913.747 681.472 L913.188 681.472 L912.629 681.472 L912.07 681.472 L911.51 681.472 L910.951 681.472 L910.392 681.472 L909.833 681.472 L909.273 681.472 L908.714 681.472 L908.155 681.472 L907.596 681.472 L907.036 681.472 L906.477 681.472 L905.918 681.472 L905.359 681.472 L904.799 681.472 L904.24 681.472 L903.681 681.472 L903.122 681.472 L902.562 681.472 L902.003 681.472 L901.444 681.472 L900.885 681.472 L900.325 681.472 L899.766 681.472 L899.207 681.472 L898.648 681.472 L898.088 681.472 L897.529 681.472 L896.97 681.472 L896.411 681.472 L895.851 681.472 L895.292 681.472 L894.733 681.472 L894.174 681.472 L893.614 681.472 L893.055 681.472 L892.496 681.472 L891.937 681.472 L891.377 681.472 L890.818 681.472 L890.259 681.472 L889.7 681.472 L889.14 681.472 L888.581 681.472 L888.022 681.472 L887.463 681.472 L886.903 681.472 L886.344 681.472 L885.785 681.472 L885.226 681.472 L884.666 681.472 L884.107 681.472 L883.548 681.472 L882.989 681.472 L882.429 681.472 L881.87 681.472 L881.311 681.472 L880.752 681.472 L880.192 681.472 L879.633 681.472 L879.074 681.472 L878.515 681.472 L877.955 681.472 L877.396 681.472 L876.837 681.472 L876.278 681.472 L875.718 681.472 L875.159 681.472 L874.6 681.472 L874.041 681.472 L873.481 681.472 L872.922 681.472 L872.363 681.472 L871.804 681.472 L871.244 681.472 L870.685 681.472 L870.126 681.472 L869.567 681.472 L869.007 681.472 L868.448 681.472 L867.889 681.472 L867.33 681.472 L866.77 681.472 L866.211 681.472 L865.652 681.472 L865.093 681.472 L864.533 681.472 L863.974 681.472 L863.415 681.472 L862.856 681.472 L862.296 681.472 L861.737 681.472 L861.178 681.472 L860.619 681.472 L860.059 681.472 L859.5 681.472 L858.941 681.472 L858.382 681.472 L857.822 681.472 L857.263 681.472 L856.704 681.472 L856.145 681.472 L855.585 681.472 L855.026 681.472 L854.467 681.472 L853.908 681.472 L853.348 681.472 L852.789 681.472 L852.23 681.472 L851.671 681.472 L851.111 681.472 L850.552 681.472 L849.993 681.472 L849.434 681.472 L848.874 681.472 L848.315 681.472 L847.756 681.472 L847.197 681.472 L846.637 681.472 L846.078 681.472 L845.519 681.472 L844.96 681.472 L844.4 681.472 L843.841 681.472 L843.282 681.472 L842.723 681.472 L842.163 681.472 L841.604 681.472 L841.045 681.472 L840.486 681.472 L839.926 681.472 L839.367 681.472 L838.808 681.472 L838.249 681.472 L837.689 681.472 L837.13 681.472 L836.571 681.472 L836.012 681.472 L835.452 681.472 L834.893 681.472 L834.334 681.472 L833.775 681.472 L833.215 681.472 L832.656 681.472 L832.097 681.472 L831.538 681.472 L830.978 681.472 L830.419 681.472 L829.86 681.472 L829.301 681.472 L828.741 681.472 L828.182 681.472 L827.623 681.472 L827.064 681.472 L826.504 681.472 L825.945 681.472 L825.386 681.472 L824.827 681.472 L824.267 681.472 L823.708 681.472 L823.149 681.472 L822.59 681.472 L822.03 681.472 L821.471 681.472 L820.912 681.472 L820.353 681.472 L819.793 681.472 L819.234 681.472 L818.675 681.472 L818.116 681.472 L817.556 681.472 L816.997 681.472 L816.438 681.472 L815.879 681.472 L815.319 681.472 L814.76 681.472 L814.201 681.472 L813.642 681.472 L813.082 681.472 L812.523 681.472 L811.964 681.472 L811.405 681.472 L810.845 681.472 L810.286 681.472 L809.727 681.472 L809.168 681.472 L808.608 681.472 L808.049 681.472 L807.49 681.472 L806.931 681.472 L806.371 681.472 L805.812 681.472 L805.253 681.472 L804.693 681.472 L804.134 681.472 L803.575 681.472 L803.016 681.472 L802.456 681.472 L801.897 681.472 L801.338 681.472 L800.779 681.472 L800.219 681.472 L799.66 681.472 L799.101 681.472 L798.542 681.472 L797.982 681.472 L797.423 681.472 L796.864 681.472 L796.305 681.472 L795.745 681.472 L795.186 681.472 L794.627 681.472 L794.068 681.472 L793.508 681.472 L792.949 681.472 L792.39 681.472 L791.831 681.472 L791.271 681.472 L790.712 681.472 L790.153 681.472 L789.594 681.472 L789.034 681.472 L788.475 681.472 L787.916 681.472 L787.357 681.472 L786.797 681.472 L786.238 681.472 L785.679 681.472 L785.12 681.472 L784.56 681.472 L784.001 681.472 L783.442 681.472 L782.883 681.472 L782.323 681.472 L781.764 681.472 L781.205 681.472 L780.646 681.472 L780.086 681.472 L779.527 681.472 L778.968 681.472 L778.409 681.472 L777.849 681.472 L777.29 681.472 L776.731 681.472 L776.172 681.472 L775.612 681.472 L775.053 681.472 L774.494 681.472 L773.935 681.472 L773.375 681.472 L772.816 681.472 L772.257 681.472 L771.698 681.472 L771.138 681.472 L770.579 681.472 L770.02 681.472 L769.461 681.472 L768.901 681.472 L768.342 681.472 L767.783 681.472 L767.224 681.472 L766.664 681.472 L766.105 681.472 L765.546 681.472 L764.987 681.472 L764.427 681.472 L763.868 681.472 L763.309 681.472 L762.75 681.472 L762.19 681.472 L761.631 681.472 L761.072 681.472 L760.513 681.472 L759.953 681.472 L759.394 681.472 L758.835 681.472 L758.276 681.472 L757.716 681.472 L757.157 681.472 L756.598 681.472 L756.039 681.472 L755.479 681.472 L754.92 681.472 L754.361 681.472 L753.802 681.472 L753.242 681.472 L752.683 681.472 L752.124 681.472 L751.565 681.472 L751.005 681.472 L750.446 681.472 L749.887 681.472 L749.328 681.472 L748.768 681.472 L748.209 681.472 L747.65 681.472 L747.091 681.472 L746.531 681.472 L745.972 681.472 L745.413 681.472 L744.854 681.472 L744.294 681.472 L743.735 681.472 L743.176 681.472 L742.617 681.472 L742.057 681.472 L741.498 681.472 L740.939 681.472 L740.38 681.472 L739.82 681.472 L739.261 681.472 L738.702 681.472 L738.143 681.472 L737.583 681.472 L737.024 681.472 L736.465 681.472 L735.906 681.472 L735.346 681.472 L734.787 681.472 L734.228 681.472 L733.669 681.472 L733.109 681.472 L732.55 681.472 L731.991 681.472 L731.432 681.472 L730.872 681.472 L730.313 681.472 L729.754 681.472 L729.195 681.472 L728.635 681.472 L728.076 681.472 L727.517 681.472 L726.958 681.472 L726.398 681.472 L725.839 681.472 L725.28 681.472 L724.721 681.472 L724.161 681.472 L723.602 681.472 L723.043 681.472 L722.484 681.472 L721.924 681.472 L721.365 681.472 L720.806 681.472 L720.247 681.472  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.843 720.806,685.843 721.365,685.843 721.924,685.843 722.484,685.843 723.043,685.843 723.602,685.843 724.161,685.843 724.721,685.843 725.28,685.843 725.839,685.843 726.398,685.843 726.958,685.843 727.517,685.843 728.076,685.843 728.635,685.843 729.195,685.843 729.754,685.843 730.313,685.843 730.872,685.843 731.432,685.843 731.991,685.843 732.55,685.843 733.109,685.843 733.669,685.843 734.228,685.843 734.787,685.843 735.346,685.843 735.906,685.843 736.465,685.843 737.024,685.843 737.583,685.843 738.143,685.843 738.702,685.843 739.261,685.843 739.82,685.843 740.38,685.843 740.939,685.843 741.498,685.843 742.057,685.843 742.617,685.843 743.176,685.843 743.735,685.843 744.294,685.843 744.854,685.843 745.413,685.843 745.972,685.843 746.531,685.843 747.091,685.843 747.65,685.843 748.209,685.843 748.768,685.843 749.328,685.843 749.887,685.843 750.446,685.843 751.005,685.843 751.565,685.843 752.124,685.843 752.683,685.843 753.242,685.843 753.802,685.843 754.361,685.843 754.92,685.843 755.479,685.843 756.039,685.843 756.598,685.843 757.157,685.843 757.716,685.843 758.276,685.843 758.835,685.843 759.394,685.843 759.953,685.843 760.513,685.843 761.072,685.843 761.631,685.843 762.19,685.843 762.75,685.843 763.309,685.843 763.868,685.843 764.427,685.843 764.987,685.843 765.546,685.843 766.105,685.843 766.664,685.843 767.224,685.843 767.783,685.843 768.342,685.843 768.901,685.843 769.461,685.843 770.02,685.843 770.579,685.843 771.138,685.843 771.698,685.843 772.257,685.843 772.816,685.843 773.375,685.843 773.935,685.843 774.494,685.843 775.053,685.843 775.612,685.843 776.172,685.843 776.731,685.843 777.29,685.843 777.849,685.843 778.409,685.843 778.968,685.843 779.527,685.843 780.086,685.843 780.646,685.843 781.205,685.843 781.764,685.843 782.323,685.843 782.883,685.843 783.442,685.843 784.001,685.843 784.56,685.843 785.12,685.843 785.679,685.843 786.238,685.843 786.797,685.843 787.357,685.843 787.916,685.843 788.475,685.843 789.034,685.843 789.594,685.843 790.153,685.843 790.712,685.843 791.271,685.843 791.831,685.843 792.39,685.843 792.949,685.843 793.508,685.843 794.068,685.843 794.627,685.843 795.186,685.843 795.745,685.843 796.305,685.843 796.864,685.843 797.423,685.843 797.982,685.843 798.542,685.843 799.101,685.843 799.66,685.843 800.219,685.843 800.779,685.843 801.338,685.843 801.897,685.843 802.456,685.843 803.016,685.843 803.575,685.843 804.134,685.843 804.693,685.843 805.253,685.843 805.812,685.843 806.371,685.843 806.931,685.843 807.49,685.843 808.049,685.843 808.608,685.843 809.168,685.843 809.727,685.843 810.286,685.843 810.845,685.843 811.405,685.843 811.964,685.843 812.523,685.843 813.082,685.843 813.642,685.843 814.201,685.843 814.76,685.843 815.319,685.843 815.879,685.843 816.438,685.843 816.997,685.843 817.556,685.843 818.116,685.843 818.675,685.843 819.234,685.843 819.793,685.843 820.353,685.843 820.912,685.843 821.471,685.843 822.03,685.843 822.59,685.843 823.149,685.843 823.708,685.843 824.267,685.843 824.827,685.843 825.386,685.843 825.945,685.843 826.504,685.843 827.064,685.843 827.623,685.843 828.182,685.843 828.741,685.843 829.301,685.843 829.86,685.843 830.419,685.843 830.978,685.843 831.538,685.843 832.097,685.843 832.656,685.843 833.215,685.843 833.775,685.843 834.334,685.843 834.893,685.843 835.452,685.843 836.012,685.843 836.571,685.843 837.13,685.843 837.689,685.843 838.249,685.843 838.808,685.843 839.367,685.843 839.926,685.843 840.486,685.843 841.045,685.843 841.604,685.843 842.163,685.843 842.723,685.843 843.282,685.843 843.841,685.843 844.4,685.843 844.96,685.843 845.519,685.843 846.078,685.843 846.637,685.843 847.197,685.843 847.756,685.843 848.315,685.843 848.874,685.843 849.434,685.843 849.993,685.843 850.552,685.843 851.111,685.843 851.671,685.843 852.23,685.843 852.789,685.843 853.348,685.843 853.908,685.843 854.467,685.843 855.026,685.843 855.585,685.843 856.145,685.843 856.704,685.843 857.263,685.843 857.822,685.843 858.382,685.843 858.941,685.843 859.5,685.843 860.059,685.843 860.619,685.843 861.178,685.843 861.737,685.843 862.296,685.843 862.856,685.843 863.415,685.843 863.974,685.843 864.533,685.843 865.093,685.843 865.652,685.843 866.211,685.843 866.77,685.843 867.33,685.843 867.889,685.843 868.448,685.843 869.007,685.843 869.567,685.843 870.126,685.843 870.685,685.843 871.244,685.843 871.804,685.843 872.363,685.843 872.922,685.843 873.481,685.843 874.041,685.843 874.6,685.843 875.159,685.843 875.718,685.843 876.278,685.843 876.837,685.843 877.396,685.843 877.955,685.843 878.515,685.843 879.074,685.843 879.633,685.843 880.192,685.843 880.752,685.843 881.311,685.843 881.87,685.843 882.429,685.843 882.989,685.843 883.548,685.843 884.107,685.843 884.666,685.843 885.226,685.843 885.785,685.843 886.344,685.843 886.903,685.843 887.463,685.843 888.022,685.843 888.581,685.843 889.14,685.843 889.7,685.843 890.259,685.843 890.818,685.843 891.377,685.843 891.937,685.843 892.496,685.843 893.055,685.843 893.614,685.843 894.174,685.843 894.733,685.843 895.292,685.843 895.851,685.843 896.411,685.843 896.97,685.843 897.529,685.843 898.088,685.843 898.648,685.843 899.207,685.843 899.766,685.843 900.325,685.843 900.885,685.843 901.444,685.843 902.003,685.843 902.562,685.843 903.122,685.843 903.681,685.843 904.24,685.843 904.799,685.843 905.359,685.843 905.918,685.843 906.477,685.843 907.036,685.843 907.596,685.843 908.155,685.843 908.714,685.843 909.273,685.843 909.833,685.843 910.392,685.843 910.951,685.843 911.51,685.843 912.07,685.843 912.629,685.843 913.188,685.843 913.747,685.843 914.307,685.843 914.866,685.843 915.425,685.843 915.984,685.843 916.544,685.843 917.103,685.843 917.662,685.843 918.221,685.843 918.781,685.843 919.34,685.843 919.899,685.843 920.458,685.843 921.018,685.843 921.577,685.843 922.136,685.843 922.695,685.843 923.255,685.843 923.814,685.843 924.373,685.843 924.932,685.843 925.492,685.843 926.051,685.843 926.61,685.843 927.169,685.843 927.729,685.843 928.288,685.843 928.847,685.843 929.406,685.843 929.966,685.843 930.525,685.843 931.084,685.843 931.644,685.843 932.203,685.843 932.762,685.843 933.321,685.843 933.881,685.843 934.44,685.843 934.999,685.843 935.558,685.843 936.118,685.843 936.677,685.843 937.236,685.843 937.795,685.843 938.355,685.843 938.914,685.843 939.473,685.843 940.032,685.843 940.592,685.843 941.151,685.843 941.71,685.843 942.269,685.843 942.829,685.843 943.388,685.843 943.947,685.843 944.506,685.843 945.066,685.843 945.625,685.843 946.184,685.843 946.743,685.843 947.303,685.843 947.862,685.843 948.421,685.843 948.98,685.843 949.54,685.843 950.099,685.843 950.658,685.843 951.217,685.843 951.777,685.843 952.336,685.843 952.895,685.843 953.454,685.843 954.014,685.843 954.573,685.843 955.132,685.843 955.691,685.843 956.251,685.843 956.81,685.843 957.369,685.843 957.928,685.843 958.488,685.843 959.047,685.843 959.606,685.843 960.165,685.843 960.725,685.843 961.284,685.843 961.843,685.843 962.402,685.843 962.962,685.843 963.521,685.843 964.08,685.843 964.639,685.843 965.199,685.843 965.758,685.843 966.317,685.843 966.876,685.843 967.436,685.843 967.995,685.843 968.554,685.843 969.113,685.843 969.673,685.843 970.232,685.843 970.791,685.843 971.35,685.843 971.91,685.843 972.469,685.843 973.028,685.843 973.587,685.843 974.147,685.843 974.706,685.843 975.265,685.843 975.824,685.843 976.384,685.843 976.943,685.843 977.502,685.843 978.061,685.843 978.621,685.843 979.18,685.843 979.739,685.843 980.298,685.843 980.858,685.843 981.417,685.843 981.976,685.843 982.535,685.843 983.095,685.843 983.654,685.843 984.213,685.843 984.772,685.843 985.332,685.843 985.891,685.843 986.45,685.843 987.009,685.843 987.569,685.843 988.128,685.843 988.687,685.843 989.246,685.843 989.806,685.843 990.365,685.843 990.924,685.843 991.483,685.843 992.043,685.843 992.602,685.843 993.161,685.843 993.72,685.843 994.28,685.843 994.839,685.843 995.398,685.843 995.957,685.843 996.517,685.843 997.076,685.843 997.635,685.843 998.194,685.843 998.754,685.843 999.313,685.843 999.872,685.843 1000.43,685.843 1000.99,685.843 1001.55,685.843 1002.11,685.843 1002.67,685.843 1003.23,685.843 1003.79,685.843 1004.35,685.843 1004.91,685.843 1005.46,685.843 1006.02,685.843 1006.58,685.843 1007.14,685.843 1007.7,685.843 1008.26,685.843 1008.82,685.843 1009.38,685.843 1009.94,685.843 1010.5,685.843 1011.06,685.843 1011.62,685.843 1012.18,685.843 1012.73,685.843 1013.29,685.843 1013.85,685.843 1014.41,685.843 1014.97,685.843 1015.53,685.843 1016.09,685.843 1016.65,685.843 1017.21,685.843 1017.77,685.843 1018.33,685.843 1018.89,685.843 1019.45,685.843 1020.01,685.843 1020.56,685.843 1021.12,685.843 1021.68,685.843 1022.24,685.843 1022.8,685.843 1023.36,685.843 1023.92,685.843 1024.48,685.843 1025.04,685.843 1025.6,685.843 1026.16,685.843 1026.72,685.843 1027.28,685.843 1027.83,685.843 1028.39,685.843 1028.95,685.843 1029.51,685.843 1030.07,685.843 1030.63,685.843 1031.19,685.843 1031.75,685.843 1032.31,685.843 1032.87,685.843 1033.43,685.843 1033.99,685.843 1034.55,685.843 1035.1,685.843 1035.66,685.843 1036.22,685.843 1036.78,685.843 1037.34,685.843 1037.9,685.843 1038.46,685.843 1039.02,685.843 1039.58,685.843 1040.14,685.843 1040.7,685.843 1041.26,685.843 1041.82,685.843 1042.38,685.843 1042.93,685.843 1043.49,685.843 1044.05,685.843 1044.61,685.843 1045.17,685.843 1045.73,685.843 1046.29,685.843 1046.85,685.843 1047.41,685.843 1047.97,685.843 1048.53,685.843 1049.09,685.843 1049.65,685.843 1050.2,685.843 1050.76,685.843 1051.32,685.843 1051.88,685.843 1052.44,685.843 1053,685.843 1053.56,685.843 1054.12,685.843 1054.68,685.843 1055.24,685.843 1055.8,685.843 1056.36,685.843 1056.92,685.843 1057.48,685.843 1058.03,685.843 1058.59,685.843 1059.15,685.843 1059.71,685.843 1060.27,685.843 1060.83,685.843 1061.39,685.843 1061.95,685.843 1062.51,685.843 1063.07,685.843 1063.63,685.843 1064.19,685.843 1064.75,685.843 1065.3,685.843 1065.86,685.843 1066.42,685.843 1066.98,685.843 1067.54,685.843 1068.1,685.843 1068.66,685.843 1069.22,685.843 1069.78,685.843 1070.34,685.843 1070.9,685.843 1071.46,685.843 1072.02,685.843 1072.57,685.843 1073.13,685.843 1073.69,685.843 1074.25,685.843 1074.81,685.843 1075.37,685.843 1075.93,685.843 1076.49,685.843 1077.05,685.843 1077.61,685.843 1078.17,685.843 1078.73,685.843 1079.29,685.843 1079.85,685.843 1080.4,685.843 1080.96,685.843 1081.52,685.843 1082.08,685.843 1082.64,685.843 1083.2,685.843 1083.76,685.843 1084.32,685.843 1084.88,685.843 1085.44,685.843 1086,685.843 1086.56,685.843 1087.12,685.843 1087.67,685.843 1088.23,685.843 1088.79,685.843 1089.35,685.843 1089.91,685.843 1090.47,685.843 1091.03,685.843 1091.59,685.843 1092.15,685.843 1092.71,685.843 1093.27,685.843 1093.83,685.843 1094.39,685.843 1094.94,685.843 1095.5,685.843 1096.06,685.843 1096.62,685.843 1097.18,685.843 1097.74,685.843 1098.3,685.843 1098.86,685.843 1099.42,685.843 1099.98,685.843 1100.54,685.843 1101.1,685.843 1101.66,685.843 1102.22,685.843 1102.77,685.843 1103.33,685.843 1103.89,685.843 1104.45,685.843 1105.01,685.843 1105.57,685.843 1106.13,685.843 1106.69,685.843 1107.25,685.843 1107.81,685.843 1108.37,685.843 1108.93,685.843 1109.49,685.843 1110.04,685.843 1110.6,685.843 1111.16,685.843 1111.72,685.843 1112.28,685.843 1112.84,685.843 1113.4,685.843 1113.96,685.843 1114.52,685.843 1115.08,685.843 1115.64,685.843 1116.2,685.843 1116.76,685.843 1117.31,685.843 1117.87,685.843 1118.43,685.843 1118.99,685.843 1119.55,685.843 1120.11,685.843 1120.67,685.843 1121.23,685.843 1121.79,685.843 1122.35,685.843 1122.91,685.843 1123.47,685.843 1124.03,685.843 1124.59,685.843 1125.14,685.843 1125.7,685.843 1126.26,685.843 1126.82,685.843 1127.38,685.843 1127.94,685.843 1128.5,685.843 1129.06,685.843 1129.62,685.843 1130.18,685.843 1130.74,685.843 1131.3,685.843 1131.86,685.843 1132.41,685.843 1132.97,685.843 1133.53,685.843 1134.09,685.843 1134.65,685.843 1135.21,685.843 1135.77,685.843 1136.33,685.843 1136.89,685.843 1137.45,685.843 1138.01,685.843 1138.57,685.843 1139.13,685.843 1139.68,685.843 1140.24,685.843 1140.8,685.843 1141.36,685.843 1141.92,685.843 1142.48,685.843 1143.04,685.843 1143.6,685.843 1144.16,685.843 1144.72,685.843 1145.28,685.843 1145.84,685.843 1146.4,685.843 1146.96,685.843 1147.51,685.843 1148.07,685.843 1148.63,685.843 1149.19,685.843 1149.75,685.843 1150.31,685.843 1150.87,685.843 1151.43,685.843 1151.99,685.843 1152.55,685.843 1153.11,685.843 1153.67,685.843 1154.23,685.843 1154.78,685.843 1155.34,685.843 1155.9,685.843 1156.46,685.843 1157.02,685.843 1157.58,685.843 1158.14,685.843 1158.7,685.843 1159.26,685.843 1159.82,685.843 1160.38,685.843 1160.94,685.843 1161.5,685.843 1162.05,685.843 1162.61,685.843 1163.17,685.843 1163.73,685.843 1164.29,685.843 1164.85,685.843 1165.41,685.843 1165.97,685.843 1166.53,685.843 1167.09,685.843 1167.65,685.843 1168.21,685.843 1168.77,685.843 1169.33,685.843 1169.88,685.843 1170.44,685.843 1171,685.843 1171.56,685.843 1172.12,685.843 1172.68,685.843 1173.24,685.843 1173.8,685.843 1174.36,685.843 1174.92,685.843 1175.48,685.843 1176.04,685.843 1176.6,685.843 1177.15,685.843 1177.71,685.843 1178.27,685.843 1178.83,685.843 1179.39,685.843 1179.95,685.843 1180.51,685.843 1181.07,685.843 1181.63,685.843 1182.19,685.843 1182.75,685.843 1183.31,685.843 1183.87,685.843 1184.43,685.843 1184.98,685.843 1185.54,685.843 1186.1,685.843 1186.66,685.843 1187.22,685.843 1187.78,685.843 1188.34,685.843 1188.9,685.843 1189.46,685.843 1190.02,685.843 1190.58,685.843 1191.14,685.843 1191.7,685.843 1192.25,685.843 1192.81,685.843 1193.37,685.843 1193.93,685.843 1194.49,685.843 1195.05,685.843 1195.61,685.843 1196.17,685.843 1196.73,685.843 1197.29,685.843 1197.85,685.843 1198.41,685.843 1198.97,685.843 1199.52,685.843 1200.08,685.843 1200.64,685.843 1201.2,685.843 1201.76,685.843 1202.32,685.843 1202.88,685.843 1203.44,685.843 1204,685.843 1204.56,685.843 1205.12,685.843 1205.68,685.843 1206.24,685.843 1206.8,685.843 1207.35,685.843 1207.91,685.843 1208.47,685.843 1209.03,685.843 1209.59,685.843 1210.15,685.843 1210.71,685.843 1211.27,685.843 1211.83,685.843 1212.39,685.843 1212.95,685.843 1213.51,685.843 1214.07,685.843 1214.62,685.843 1215.18,685.843 1215.74,685.843 1216.3,685.843 1216.86,685.843 1217.42,685.843 1217.98,685.843 1218.54,685.843 1219.1,685.843 1219.66,685.843 1220.22,685.843 1220.78,685.843 1221.34,685.843 1221.89,685.843 1222.45,685.843 1223.01,685.843 1223.57,685.843 1224.13,685.843 1224.69,685.843 1225.25,685.843 1225.81,685.843 1226.37,685.843 1226.93,685.843 1227.49,685.843 1228.05,685.843 1228.61,685.843 1229.17,685.843 1229.72,685.843 1230.28,685.843 1230.84,685.843 1231.4,685.843 1231.96,685.843 1232.52,685.843 1233.08,685.843 1233.64,685.843 1234.2,685.843 1234.76,685.843 1235.32,685.843 1235.88,685.843 1236.44,685.843 1236.99,685.843 1237.55,685.843 1238.11,685.843 1238.67,685.843 1239.23,685.843 1239.79,685.843 1240.35,685.843 1240.91,685.843 1241.47,685.843 1242.03,685.843 1242.59,685.843 1243.15,685.843 1243.71,685.843 1244.26,685.843 1244.82,685.843 1245.38,685.843 1245.94,685.843 1246.5,685.843 1247.06,685.843 1247.62,685.843 1248.18,685.843 1248.74,685.843 1249.3,685.843 1249.86,685.843 1250.42,685.843 1250.98,685.843 1251.54,685.843 1252.09,685.843 1252.65,685.843 1253.21,685.843 1253.77,685.843 1254.33,685.843 1254.89,685.843 1255.45,685.843 1256.01,685.843 1256.57,685.843 1257.13,685.843 1257.69,685.843 1258.25,685.843 1258.81,685.843 1259.36,685.843 1259.92,685.843 1260.48,685.843 1261.04,685.843 1261.6,685.843 1262.16,685.843 1262.72,685.843 1263.28,685.843 1263.84,685.843 1264.4,685.843 1264.96,685.843 1265.52,685.843 1266.08,685.843 1266.63,685.843 1267.19,685.843 1267.75,685.843 1268.31,685.843 1268.87,685.843 1269.43,685.843 1269.99,685.843 1270.55,685.843 1271.11,685.843 1271.67,685.843 1272.23,685.843 1272.79,685.843 1273.35,685.843 1273.91,685.843 1274.46,685.843 1275.02,685.843 1275.58,685.843 1276.14,685.843 1276.7,685.843 1277.26,685.843 1277.82,685.843 1278.38,685.843 1278.94,685.843 1279.5,685.843 1280.06,685.843 1280.62,685.843 1281.18,685.843 1281.73,685.843 1282.29,685.843 1282.85,685.843 1283.41,685.843 1283.97,685.843 1284.53,685.843 1285.09,685.843 1285.65,685.843 1286.21,685.843 1286.77,685.843 1287.33,685.843 1287.89,685.843 1288.45,685.843 1289,685.843 1289.56,685.843 1290.12,685.843 1290.68,685.843 1291.24,685.843 1291.8,685.843 1292.36,685.843 1292.92,685.843 1293.48,685.843 1294.04,685.843 1294.6,685.843 1295.16,685.843 1295.72,685.843 1296.28,685.843 1296.83,685.843 1297.39,685.843 1297.95,685.843 1298.51,685.843 1299.07,685.843 1299.63,685.843 1300.19,685.843 1300.75,685.843 1301.31,685.843 1301.87,685.843 1302.43,685.843 1302.99,685.843 1303.55,685.843 1304.1,685.843 1304.66,685.843 1305.22,685.843 1305.78,685.843 1306.34,685.843 1306.9,685.843 1307.46,685.843 1308.02,685.843 1308.58,685.843 1309.14,685.843 1309.7,685.843 1310.26,685.843 1310.82,685.843 1311.38,685.843 1311.93,685.843 1312.49,685.843 1313.05,685.843 1313.61,685.843 1314.17,685.843 1314.73,685.843 1315.29,685.843 1315.85,685.843 1316.41,685.843 1316.97,685.843 1317.53,685.843 1318.09,685.843 1318.65,685.843 1319.2,685.843 1319.76,685.843 1320.32,685.843 1320.88,685.843 1321.44,685.843 1322,685.843 1322.56,685.843 1323.12,685.843 1323.68,685.843 1324.24,685.843 1324.8,685.843 1325.36,685.843 1325.92,685.843 1326.47,685.843 1327.03,685.843 1327.59,685.843 1328.15,685.843 1328.71,685.843 1329.27,685.843 1329.83,685.843 1330.39,685.843 1330.95,685.843 1331.51,685.843 1332.07,685.843 1332.63,685.843 1333.19,685.843 1333.75,685.843 1334.3,685.843 1334.86,685.843 1335.42,685.843 1335.98,685.843 1336.54,685.843 1337.1,685.843 1337.66,685.843 1338.22,685.843 1338.78,685.843 1339.34,685.843 1339.9,685.843 1340.46,685.843 1341.02,685.843 1341.57,685.843 1342.13,685.843 1342.69,685.843 1343.25,685.843 1343.81,685.843 1344.37,685.843 1344.93,685.843 1345.49,685.843 1346.05,685.843 1346.61,685.843 1347.17,685.843 1347.73,685.843 1348.29,685.843 1348.84,685.843 1349.4,685.843 1349.96,685.843 1350.52,685.843 1351.08,685.843 1351.64,685.843 1352.2,685.843 1352.76,685.843 1353.32,685.843 1353.88,685.843 1354.44,685.843 1355,685.843 1355.56,685.843 1356.12,685.843 1356.67,685.843 1357.23,685.843 1357.79,685.843 1358.35,685.843 1358.91,685.843 1359.47,685.843 1360.03,685.843 1360.59,685.843 1361.15,685.843 1361.71,685.843 1362.27,685.843 1362.83,685.843 1363.39,685.843 1363.94,685.843 1364.5,685.843 1365.06,685.843 1365.62,685.843 1366.18,685.843 1366.74,685.843 1367.3,685.843 1367.86,685.843 1368.42,685.843 1368.98,685.843 1369.54,685.843 1370.1,685.843 1370.66,685.843 1371.21,685.843 1371.77,685.843 1372.33,685.843 1372.89,685.843 1373.45,685.843 1374.01,685.843 1374.57,685.843 1375.13,685.843 1375.69,685.843 1376.25,685.843 1376.81,685.843 1377.37,685.843 1377.93,685.843 1378.49,685.843 1379.04,685.843 1379.6,685.843 1380.16,685.843 1380.72,685.843 1381.28,685.843 1381.84,685.843 1382.4,685.843 1382.96,685.843 1383.52,685.843 1384.08,685.843 1384.64,685.843 1385.2,685.843 1385.76,685.843 1386.31,685.843 1386.87,685.843 1387.43,685.843 1387.99,685.843 1388.55,685.843 1389.11,685.843 1389.67,685.843 1390.23,685.843 1390.79,685.843 1391.35,685.843 1391.91,685.843 1392.47,685.843 1393.03,685.843 1393.58,685.843 1394.14,685.843 1394.7,685.843 1395.26,685.843 1395.82,685.843 1396.38,685.843 1396.94,685.843 1397.5,685.843 1398.06,685.843 1398.62,685.843 1399.18,685.843 1399.74,685.843 1400.3,685.843 1400.86,685.843 1401.41,685.843 1401.97,685.843 1402.53,685.843 1403.09,685.843 1403.65,685.843 1404.21,685.843 1404.77,685.843 1405.33,685.843 1405.89,685.843 1406.45,685.843 1407.01,685.843 1407.57,685.843 1408.13,685.843 1408.68,685.843 1409.24,685.843 1409.8,685.843 1410.36,685.843 1410.92,685.843 1411.48,685.843 1412.04,685.843 1412.6,685.843 1413.16,685.843 1413.72,685.843 1414.28,685.843 1414.84,685.843 1415.4,685.843 1415.95,685.843 1416.51,685.843 1417.07,685.843 1417.63,685.843 1418.19,685.843 1418.75,685.843 1419.31,685.843 1419.87,685.843 1420.43,685.843 1420.99,685.843 1421.55,685.843 1422.11,685.843 1422.67,685.843 1423.23,685.843 1423.78,685.843 1424.34,685.843 1424.9,685.843 1425.46,685.843 1426.02,685.843 1426.58,685.843 1427.14,685.843 1427.7,685.843 1428.26,685.843 1428.82,685.843 1429.38,685.843 1429.94,685.843 1430.5,685.843 1431.05,685.843 1431.61,685.843 1432.17,685.843 1432.73,685.843 1433.29,685.843 1433.85,685.843 1434.41,685.843 1434.97,685.843 1435.53,685.843 1436.09,685.843 1436.65,685.843 1437.21,685.843 1437.77,685.843 1438.33,685.843 1438.88,685.843 1439.44,685.843 1440,685.843 1440.56,685.843 1441.12,685.843 1441.68,685.843 1442.24,685.843 1442.8,685.843 1443.36,685.843 1443.92,685.843 1444.48,685.843 1445.04,685.843 1445.6,685.843 1446.15,685.843 1446.71,685.843 1447.27,685.843 1447.83,685.843 1448.39,685.843 1448.95,685.843 1449.51,685.843 1450.07,685.843 1450.63,685.843 1451.19,685.843 1451.75,685.843 1452.31,685.843 1452.87,685.843 1453.42,685.843 1453.98,685.843 1454.54,685.843 1455.1,685.843 1455.66,685.843 1456.22,685.843 1456.78,685.843 1457.34,685.843 1457.9,685.843 1458.46,685.843 1459.02,685.843 1459.58,685.843 1460.14,685.843 1460.7,685.843 1461.25,685.843 1461.81,685.843 1462.37,685.843 1462.93,685.843 1463.49,685.843 1464.05,685.843 1464.61,685.843 1465.17,685.843 1465.73,685.843 1466.29,685.843 1466.85,685.843 1467.41,685.843 1467.97,685.843 1468.52,685.843 1469.08,685.843 1469.64,685.843 1470.2,685.843 1470.76,685.843 1471.32,685.843 1471.88,685.843 1472.44,685.843 1473,685.843 1473.56,685.843 1474.12,685.843 1474.68,685.843 1475.24,685.843 1475.79,685.843 1476.35,685.843 1476.91,685.843 1477.47,685.843 1478.03,685.843 1478.59,685.843 1479.15,685.843 1479.71,685.843 1480.27,685.843 1480.83,685.843 1481.39,685.843 1481.95,685.843 1482.51,685.843 1483.07,685.843 1483.62,685.843 1484.18,685.843 1484.74,685.843 1485.3,685.843 1485.86,685.843 1486.42,685.843 1486.98,685.843 1487.54,685.843 1488.1,685.843 1488.66,685.843 1489.22,685.843 1489.78,685.843 1490.34,685.843 1490.89,685.843 1491.45,685.843 1492.01,685.843 1492.57,685.843 1493.13,685.843 1493.69,685.843 1494.25,685.843 1494.81,685.843 1495.37,685.843 1495.93,685.843 1496.49,685.843 1497.05,685.843 1497.61,685.843 1498.16,685.843 1498.72,685.843 1499.28,685.843 1499.84,685.843 1500.4,685.843 1500.96,685.843 1501.52,685.843 1502.08,685.843 1502.64,685.843 1503.2,685.843 1503.76,685.843 1504.32,685.843 1504.88,685.843 1505.44,685.843 1505.99,685.843 1506.55,685.843 1507.11,685.843 1507.67,685.843 1508.23,685.843 1508.79,685.843 1509.35,685.843 1509.91,685.843 1510.47,685.843 1511.03,685.843 1511.59,685.843 1512.15,685.843 1512.71,685.843 1513.26,685.843 1513.82,685.843 1514.38,685.843 1514.94,685.843 1515.5,685.843 1516.06,685.843 1516.62,685.843 1517.18,685.843 1517.74,685.843 1518.3,685.843 1518.86,685.843 1519.42,685.843 1519.98,685.843 1520.53,685.843 1521.09,685.843 1521.65,685.843 1522.21,685.843 1522.77,685.843 1523.33,685.843 1523.89,685.843 1524.45,685.843 1525.01,685.843 1525.57,685.843 1526.13,685.843 1526.69,685.843 1527.25,685.843 1527.81,685.843 1528.36,685.843 1528.92,685.843 1529.48,685.843 1530.04,685.843 1530.6,685.843 1531.16,685.843 1531.72,685.843 1532.28,685.843 1532.84,685.843 1533.4,685.843 1533.96,685.843 1534.52,685.843 1535.08,685.843 1535.63,685.843 1536.19,685.843 1536.75,685.843 1537.31,685.843 1537.87,685.843 1538.43,685.843 1538.99,685.843 1539.55,685.843 1540.11,685.843 1540.67,685.843 1541.23,685.843 1541.79,685.843 1542.35,685.843 1542.9,685.843 1543.46,685.843 1544.02,685.843 1544.58,685.843 1545.14,685.843 1545.7,685.843 1546.26,685.843 1546.82,685.843 1547.38,685.843 1547.94,685.843 1548.5,685.843 1549.06,685.843 1549.62,685.843 1550.18,685.843 1550.73,685.843 1551.29,685.843 1551.85,685.843 1552.41,685.843 1552.97,685.843 1553.53,685.843 1554.09,685.843 1554.65,685.843 1555.21,685.843 1555.77,685.843 1556.33,685.843 1556.89,685.843 1557.45,685.843 1558,685.843 1558.56,685.843 1559.12,685.843 1559.68,685.843 1560.24,685.843 1560.8,685.843 1561.36,685.843 1561.92,685.843 1562.48,685.843 1563.04,685.843 1563.6,685.843 1564.16,685.843 1564.72,685.843 1565.28,685.843 1565.83,685.843 1566.39,685.843 1566.95,685.843 1567.51,685.843 1568.07,685.843 1568.63,685.843 1569.19,685.843 1569.75,685.843 1570.31,685.843 1570.87,685.843 1571.43,685.843 1571.99,685.843 1572.55,685.843 1573.1,685.843 1573.66,685.843 1574.22,685.843 1574.78,685.843 1575.34,685.843 1575.9,685.843 1576.46,685.843 1577.02,685.843 1577.58,685.843 1578.14,685.843 1578.7,685.843 1579.26,685.843 1579.82,685.843 1580.37,685.843 1580.93,685.843 1581.49,685.843 1582.05,685.843 1582.61,685.843 1583.17,685.843 1583.73,685.843 1584.29,685.843 1584.85,685.843 1585.41,685.843 1585.97,685.843 1586.53,685.843 1587.09,685.843 1587.65,685.843 1588.2,685.843 1588.76,685.843 1589.32,685.843 1589.88,685.843 1590.44,685.843 1591,685.843 1591.56,685.843 1592.12,685.843 1592.68,685.843 1593.24,685.843 1593.8,685.843 1594.36,685.843 1594.92,685.843 1595.47,685.843 1596.03,685.843 1596.59,685.843 1597.15,685.843 1597.71,685.843 1598.27,685.843 1598.83,685.843 1599.39,685.843 1599.95,685.843 1600.51,685.843 1601.07,685.843 1601.63,685.843 1602.19,685.843 1602.74,685.843 1603.3,685.843 1603.86,685.843 1604.42,685.843 1604.98,685.843 1605.54,685.843 1606.1,685.843 1606.66,685.843 1607.22,685.843 1607.78,685.843 1608.34,685.843 1608.9,685.843 1609.46,685.843 1610.02,685.843 1610.57,685.843 1611.13,685.843 1611.69,685.843 1612.25,685.843 1612.81,685.843 1613.37,685.843 1613.93,685.843 1614.49,685.843 1615.05,685.843 1615.61,685.843 1616.17,685.843 1616.73,685.843 1617.29,685.843 1617.84,685.843 1618.4,685.843 1618.96,685.843 1619.52,685.843 1620.08,685.843 1620.64,685.843 1621.2,685.843 1621.76,685.843 1622.32,685.843 1622.88,685.843 1623.44,685.843 1624,685.843 1624.56,685.843 1625.11,685.843 1625.67,685.843 1626.23,685.843 1626.79,685.843 1627.35,685.843 1627.91,685.843 1628.47,685.843 1629.03,685.843 1629.59,685.843 1630.15,685.843 1630.71,685.843 1631.27,685.843 1631.83,685.843 1632.39,685.843 1632.94,685.843 1633.5,685.843 1634.06,685.843 1634.62,685.843 1635.18,685.843 1635.74,685.843 1636.3,685.843 1636.86,685.843 1637.42,685.843 1637.98,685.843 1638.54,685.843 1639.1,685.843 1639.66,685.843 1640.21,685.843 1640.77,685.843 1641.33,685.843 1641.89,685.843 1642.45,685.843 1643.01,685.843 1643.57,685.843 1644.13,685.843 1644.69,685.843 1645.25,685.843 1645.81,685.843 1646.37,685.843 1646.93,685.843 1647.48,685.843 1648.04,685.843 1648.6,685.843 1649.16,685.843 1649.72,685.843 1650.28,685.843 1650.84,685.843 1651.4,685.843 1651.96,685.843 1652.52,685.843 1653.08,685.843 1653.64,685.843 1654.2,685.843 1654.76,685.843 1655.31,685.843 1655.87,685.843 1656.43,685.843 1656.99,685.843 1657.55,685.843 1658.11,685.843 1658.67,685.843 1659.23,685.843 1659.79,685.843 1660.35,685.843 1660.91,685.843 1661.47,685.843 1662.03,685.843 1662.58,685.843 1663.14,685.843 1663.7,685.843 1664.26,685.843 1664.82,685.843 1665.38,685.843 1665.94,685.843 1666.5,685.843 1667.06,685.843 1667.62,685.843 1668.18,685.843 1668.74,685.843 1669.3,685.843 1669.85,685.843 1670.41,685.843 1670.97,685.843 1671.53,685.843 1672.09,685.843 1672.65,685.843 1673.21,685.843 1673.77,685.843 1674.33,685.843 1674.89,685.843 1675.45,685.843 1676.01,685.843 1676.57,685.843 1677.13,685.843 1677.68,685.843 1678.24,685.843 1678.8,685.843 1679.36,685.843 1679.92,685.843 1680.48,685.843 1681.04,685.843 1681.6,685.843 1682.16,685.843 1682.72,685.843 1683.28,685.843 1683.84,685.843 1684.4,685.843 1684.95,685.843 1685.51,685.843 1686.07,685.843 1686.63,685.843 1687.19,685.843 1687.75,685.843 1688.31,685.843 1688.87,685.843 1689.43,685.843 1689.99,685.843 1690.55,685.843 1691.11,685.843 1691.67,685.843 1692.23,685.843 1692.78,685.843 1693.34,685.843 1693.9,685.843 1694.46,685.843 1695.02,685.843 1695.58,685.843 1696.14,685.843 1696.7,685.843 1697.26,685.843 1697.82,685.843 1698.38,685.843 1698.94,685.843 1699.5,685.843 1700.05,685.843 1700.61,685.843 1701.17,685.843 1701.73,685.843 1702.29,685.843 1702.85,685.843 1703.41,685.843 1703.97,685.843 1704.53,685.843 1705.09,685.843 1705.65,685.843 1706.21,685.843 1706.77,685.843 1707.32,685.843 1707.88,685.843 1708.44,685.843 1709,685.843 1709.56,685.843 1710.12,685.843 1710.68,685.843 1711.24,685.843 1711.8,685.843 1712.36,685.843 1712.92,685.843 1713.48,685.843 1714.04,685.843 1714.6,685.843 1715.15,685.843 1715.71,685.843 1716.27,685.843 1716.83,685.843 1717.39,685.843 1717.95,685.843 1718.51,685.843 1719.07,685.843 1719.63,685.843 1720.19,685.843 1720.75,685.843 1721.31,685.843 1721.87,685.843 1722.42,685.843 1722.98,685.843 1723.54,685.843 1724.1,685.843 1724.66,685.843 1725.22,685.843 1725.78,685.843 1726.34,685.843 1726.9,685.843 1727.46,685.843 1728.02,685.843 1728.58,685.843 1729.14,685.843 1729.69,685.843 1730.25,685.843 1730.81,685.843 1731.37,685.843 1731.93,685.843 1732.49,685.843 1733.05,685.843 1733.61,685.843 1734.17,685.843 1734.73,685.843 1735.29,685.843 1735.85,685.843 1736.41,685.843 1736.97,685.843 1737.52,685.843 1738.08,685.843 1738.64,685.843 1739.2,685.843 1739.76,685.843 1740.32,685.843 1740.88,685.843 1741.44,685.843 1742,685.843 1742.56,685.843 1743.12,685.843 1743.68,685.843 1744.24,685.843 1744.79,685.843 1745.35,685.843 1745.91,685.843 1746.47,685.843 1747.03,685.843 1747.59,685.843 1748.15,685.843 1748.71,685.843 1749.27,685.843 1749.83,685.843 1750.39,685.843 1750.95,685.843 1751.51,685.843 1752.06,685.843 1752.62,685.843 1753.18,685.843 1753.74,685.843 1754.3,685.843 1754.86,685.843 1755.42,685.843 1755.98,685.843 1756.54,685.843 1757.1,685.843 1757.66,685.843 1758.22,685.843 1758.78,685.843 1759.34,685.843 1759.89,685.843 1760.45,685.843 1761.01,685.843 1761.57,685.843 1762.13,685.843 1762.69,685.843 1763.25,685.843 1763.81,685.843 1764.37,685.843 1764.93,685.843 1765.49,685.843 1766.05,685.843 1766.61,685.843 1767.16,685.843 1767.72,685.843 1768.28,685.843 1768.84,685.843 1769.4,685.843 1769.96,685.843 1770.52,685.843 1771.08,685.843 1771.64,685.843 1772.2,685.843 1772.76,685.843 1773.32,685.843 1773.88,685.843 1774.43,685.843 1774.99,685.843 1775.55,685.843 1776.11,685.843 1776.67,685.843 1777.23,685.843 1777.79,685.843 1778.35,685.843 1778.91,685.843 1779.47,685.843 1780.03,685.843 1780.59,685.843 1781.15,685.843 1781.71,685.843 1782.26,685.843 1782.82,685.843 1783.38,685.843 1783.94,685.843 1784.5,685.843 1785.06,685.843 1785.62,685.843 1786.18,685.843 1786.74,685.843 1787.3,685.843 1787.86,685.843 1788.42,685.843 1788.98,685.843 1789.53,685.843 1790.09,685.843 1790.65,685.843 1791.21,685.843 1791.77,685.843 1792.33,685.843 1792.89,685.843 1793.45,685.843 1794.01,685.843 1794.57,685.843 1795.13,685.843 1795.69,685.843 1796.25,685.843 1796.8,685.843 1797.36,685.843 1797.92,685.843 1798.48,685.843 1799.04,685.843 1799.6,685.843 1800.16,685.843 1800.72,685.843 1801.28,685.843 1801.84,685.843 1802.4,685.843 1802.96,685.843 1803.52,685.843 1804.08,685.843 1804.63,685.843 1805.19,685.843 1805.75,685.843 1806.31,685.843 1806.87,685.843 1807.43,685.843 1807.99,685.843 1808.55,685.843 1809.11,685.843 1809.67,685.843 1810.23,685.843 1810.79,685.843 1811.35,685.843 1811.9,685.843 1812.46,685.843 1813.02,685.843 1813.58,685.843 1814.14,685.843 1814.7,685.843 1815.26,685.843 1815.82,685.843 1816.38,685.843 1816.94,685.843 1817.5,685.843 1818.06,685.843 1818.62,685.843 1819.18,685.843 1819.73,685.843 1820.29,685.843 1820.85,685.843 1821.41,685.843 1821.97,685.843 1822.53,685.843 1823.09,685.843 1823.65,685.843 1824.21,685.843 1824.77,685.843 1825.33,685.843 1825.89,685.843 1826.45,685.843 1827,685.843 1827.56,685.843 1828.12,685.843 1828.68,685.843 1829.24,685.843 1829.8,685.843 1830.36,685.843 1830.92,685.843 1831.48,685.843 1832.04,685.843 1832.6,685.843 1833.16,685.843 1833.72,685.843 1834.27,685.843 1834.83,685.843 1835.39,685.843 1835.95,685.843 1836.51,685.843 1837.07,685.843 1837.63,685.843 1838.19,685.843 \"/>\n<path clip-path=\"url(#clip853)\" d=\"M720.247 685.438 L720.806 685.438 L721.365 685.438 L721.924 685.438 L722.484 685.438 L723.043 685.438 L723.602 685.438 L724.161 685.438 L724.721 685.438 L725.28 685.438 L725.839 685.438 L726.398 685.438 L726.958 685.438 L727.517 685.438 L728.076 685.438 L728.635 685.438 L729.195 685.438 L729.754 685.438 L730.313 685.438 L730.872 685.438 L731.432 685.438 L731.991 685.438 L732.55 685.438 L733.109 685.438 L733.669 685.438 L734.228 685.438 L734.787 685.438 L735.346 685.438 L735.906 685.438 L736.465 685.438 L737.024 685.438 L737.583 685.438 L738.143 685.438 L738.702 685.438 L739.261 685.438 L739.82 685.438 L740.38 685.438 L740.939 685.438 L741.498 685.438 L742.057 685.438 L742.617 685.438 L743.176 685.438 L743.735 685.438 L744.294 685.438 L744.854 685.438 L745.413 685.438 L745.972 685.438 L746.531 685.438 L747.091 685.438 L747.65 685.438 L748.209 685.438 L748.768 685.438 L749.328 685.438 L749.887 685.438 L750.446 685.438 L751.005 685.438 L751.565 685.438 L752.124 685.438 L752.683 685.438 L753.242 685.438 L753.802 685.438 L754.361 685.438 L754.92 685.438 L755.479 685.438 L756.039 685.438 L756.598 685.438 L757.157 685.438 L757.716 685.438 L758.276 685.438 L758.835 685.438 L759.394 685.438 L759.953 685.438 L760.513 685.438 L761.072 685.438 L761.631 685.438 L762.19 685.438 L762.75 685.438 L763.309 685.438 L763.868 685.438 L764.427 685.438 L764.987 685.438 L765.546 685.438 L766.105 685.438 L766.664 685.438 L767.224 685.438 L767.783 685.438 L768.342 685.438 L768.901 685.438 L769.461 685.438 L770.02 685.438 L770.579 685.438 L771.138 685.438 L771.698 685.438 L772.257 685.438 L772.816 685.438 L773.375 685.438 L773.935 685.438 L774.494 685.438 L775.053 685.438 L775.612 685.438 L776.172 685.438 L776.731 685.438 L777.29 685.438 L777.849 685.438 L778.409 685.438 L778.968 685.438 L779.527 685.438 L780.086 685.438 L780.646 685.438 L781.205 685.438 L781.764 685.438 L782.323 685.438 L782.883 685.438 L783.442 685.438 L784.001 685.438 L784.56 685.438 L785.12 685.438 L785.679 685.438 L786.238 685.438 L786.797 685.438 L787.357 685.438 L787.916 685.438 L788.475 685.438 L789.034 685.438 L789.594 685.438 L790.153 685.438 L790.712 685.438 L791.271 685.438 L791.831 685.438 L792.39 685.438 L792.949 685.438 L793.508 685.438 L794.068 685.438 L794.627 685.438 L795.186 685.438 L795.745 685.438 L796.305 685.438 L796.864 685.438 L797.423 685.438 L797.982 685.438 L798.542 685.438 L799.101 685.438 L799.66 685.438 L800.219 685.438 L800.779 685.438 L801.338 685.438 L801.897 685.438 L802.456 685.438 L803.016 685.438 L803.575 685.438 L804.134 685.438 L804.693 685.438 L805.253 685.438 L805.812 685.438 L806.371 685.438 L806.931 685.438 L807.49 685.438 L808.049 685.438 L808.608 685.438 L809.168 685.438 L809.727 685.438 L810.286 685.438 L810.845 685.438 L811.405 685.438 L811.964 685.438 L812.523 685.438 L813.082 685.438 L813.642 685.438 L814.201 685.438 L814.76 685.438 L815.319 685.438 L815.879 685.438 L816.438 685.438 L816.997 685.438 L817.556 685.438 L818.116 685.438 L818.675 685.438 L819.234 685.438 L819.793 685.438 L820.353 685.438 L820.912 685.438 L821.471 685.438 L822.03 685.438 L822.59 685.438 L823.149 685.438 L823.708 685.438 L824.267 685.438 L824.827 685.438 L825.386 685.438 L825.945 685.438 L826.504 685.438 L827.064 685.438 L827.623 685.438 L828.182 685.438 L828.741 685.438 L829.301 685.438 L829.86 685.438 L830.419 685.438 L830.978 685.438 L831.538 685.438 L832.097 685.438 L832.656 685.438 L833.215 685.438 L833.775 685.438 L834.334 685.438 L834.893 685.438 L835.452 685.438 L836.012 685.438 L836.571 685.438 L837.13 685.438 L837.689 685.438 L838.249 685.438 L838.808 685.438 L839.367 685.438 L839.926 685.438 L840.486 685.438 L841.045 685.438 L841.604 685.438 L842.163 685.438 L842.723 685.438 L843.282 685.438 L843.841 685.438 L844.4 685.438 L844.96 685.438 L845.519 685.438 L846.078 685.438 L846.637 685.438 L847.197 685.438 L847.756 685.438 L848.315 685.438 L848.874 685.438 L849.434 685.438 L849.993 685.438 L850.552 685.438 L851.111 685.438 L851.671 685.438 L852.23 685.438 L852.789 685.438 L853.348 685.438 L853.908 685.438 L854.467 685.438 L855.026 685.438 L855.585 685.438 L856.145 685.438 L856.704 685.438 L857.263 685.438 L857.822 685.438 L858.382 685.438 L858.941 685.438 L859.5 685.438 L860.059 685.438 L860.619 685.438 L861.178 685.438 L861.737 685.438 L862.296 685.438 L862.856 685.438 L863.415 685.438 L863.974 685.438 L864.533 685.438 L865.093 685.438 L865.652 685.438 L866.211 685.438 L866.77 685.438 L867.33 685.438 L867.889 685.438 L868.448 685.438 L869.007 685.438 L869.567 685.438 L870.126 685.438 L870.685 685.438 L871.244 685.438 L871.804 685.438 L872.363 685.438 L872.922 685.438 L873.481 685.438 L874.041 685.438 L874.6 685.438 L875.159 685.438 L875.718 685.438 L876.278 685.438 L876.837 685.438 L877.396 685.438 L877.955 685.438 L878.515 685.438 L879.074 685.438 L879.633 685.438 L880.192 685.438 L880.752 685.438 L881.311 685.438 L881.87 685.438 L882.429 685.438 L882.989 685.438 L883.548 685.438 L884.107 685.438 L884.666 685.438 L885.226 685.438 L885.785 685.438 L886.344 685.438 L886.903 685.438 L887.463 685.438 L888.022 685.438 L888.581 685.438 L889.14 685.438 L889.7 685.438 L890.259 685.438 L890.818 685.438 L891.377 685.438 L891.937 685.438 L892.496 685.438 L893.055 685.438 L893.614 685.438 L894.174 685.438 L894.733 685.438 L895.292 685.438 L895.851 685.438 L896.411 685.438 L896.97 685.438 L897.529 685.438 L898.088 685.438 L898.648 685.438 L899.207 685.438 L899.766 685.438 L900.325 685.438 L900.885 685.438 L901.444 685.438 L902.003 685.438 L902.562 685.438 L903.122 685.438 L903.681 685.438 L904.24 685.438 L904.799 685.438 L905.359 685.438 L905.918 685.438 L906.477 685.438 L907.036 685.438 L907.596 685.438 L908.155 685.438 L908.714 685.438 L909.273 685.438 L909.833 685.438 L910.392 685.438 L910.951 685.438 L911.51 685.438 L912.07 685.438 L912.629 685.438 L913.188 685.438 L913.747 685.438 L914.307 685.438 L914.866 685.438 L915.425 685.438 L915.984 685.438 L916.544 685.438 L917.103 685.438 L917.662 685.438 L918.221 685.438 L918.781 685.438 L919.34 685.438 L919.899 685.438 L920.458 685.438 L921.018 685.438 L921.577 685.438 L922.136 685.438 L922.695 685.438 L923.255 685.438 L923.814 685.438 L924.373 685.438 L924.932 685.438 L925.492 685.438 L926.051 685.438 L926.61 685.438 L927.169 685.438 L927.729 685.438 L928.288 685.438 L928.847 685.438 L929.406 685.438 L929.966 685.438 L930.525 685.438 L931.084 685.438 L931.644 685.438 L932.203 685.438 L932.762 685.438 L933.321 685.438 L933.881 685.438 L934.44 685.438 L934.999 685.438 L935.558 685.438 L936.118 685.438 L936.677 685.438 L937.236 685.438 L937.795 685.438 L938.355 685.438 L938.914 685.438 L939.473 685.438 L940.032 685.438 L940.592 685.438 L941.151 685.438 L941.71 685.438 L942.269 685.438 L942.829 685.438 L943.388 685.438 L943.947 685.438 L944.506 685.438 L945.066 685.438 L945.625 685.438 L946.184 685.438 L946.743 685.438 L947.303 685.438 L947.862 685.438 L948.421 685.438 L948.98 685.438 L949.54 685.438 L950.099 685.438 L950.658 685.438 L951.217 685.438 L951.777 685.438 L952.336 685.438 L952.895 685.438 L953.454 685.438 L954.014 685.438 L954.573 685.438 L955.132 685.438 L955.691 685.438 L956.251 685.438 L956.81 685.438 L957.369 685.438 L957.928 685.438 L958.488 685.438 L959.047 685.438 L959.606 685.438 L960.165 685.438 L960.725 685.438 L961.284 685.438 L961.843 685.438 L962.402 685.438 L962.962 685.438 L963.521 685.438 L964.08 685.438 L964.639 685.438 L965.199 685.438 L965.758 685.438 L966.317 685.438 L966.876 685.438 L967.436 685.438 L967.995 685.438 L968.554 685.438 L969.113 685.438 L969.673 685.438 L970.232 685.438 L970.791 685.438 L971.35 685.438 L971.91 685.438 L972.469 685.438 L973.028 685.438 L973.587 685.438 L974.147 685.438 L974.706 685.438 L975.265 685.438 L975.824 685.438 L976.384 685.438 L976.943 685.438 L977.502 685.438 L978.061 685.438 L978.621 685.438 L979.18 685.438 L979.739 685.438 L980.298 685.438 L980.858 685.438 L981.417 685.438 L981.976 685.438 L982.535 685.438 L983.095 685.438 L983.654 685.438 L984.213 685.438 L984.772 685.438 L985.332 685.438 L985.891 685.438 L986.45 685.438 L987.009 685.438 L987.569 685.438 L988.128 685.438 L988.687 685.438 L989.246 685.438 L989.806 685.438 L990.365 685.438 L990.924 685.438 L991.483 685.438 L992.043 685.438 L992.602 685.438 L993.161 685.438 L993.72 685.438 L994.28 685.438 L994.839 685.438 L995.398 685.438 L995.957 685.438 L996.517 685.438 L997.076 685.438 L997.635 685.438 L998.194 685.438 L998.754 685.438 L999.313 685.438 L999.872 685.438 L1000.43 685.438 L1000.99 685.438 L1001.55 685.438 L1002.11 685.438 L1002.67 685.438 L1003.23 685.438 L1003.79 685.438 L1004.35 685.438 L1004.91 685.438 L1005.46 685.438 L1006.02 685.438 L1006.58 685.438 L1007.14 685.438 L1007.7 685.438 L1008.26 685.438 L1008.82 685.438 L1009.38 685.438 L1009.94 685.438 L1010.5 685.438 L1011.06 685.438 L1011.62 685.438 L1012.18 685.438 L1012.73 685.438 L1013.29 685.438 L1013.85 685.438 L1014.41 685.438 L1014.97 685.438 L1015.53 685.438 L1016.09 685.438 L1016.65 685.438 L1017.21 685.438 L1017.77 685.438 L1018.33 685.438 L1018.89 685.438 L1019.45 685.438 L1020.01 685.438 L1020.56 685.438 L1021.12 685.438 L1021.68 685.438 L1022.24 685.438 L1022.8 685.438 L1023.36 685.438 L1023.92 685.438 L1024.48 685.438 L1025.04 685.438 L1025.6 685.438 L1026.16 685.438 L1026.72 685.438 L1027.28 685.438 L1027.83 685.438 L1028.39 685.438 L1028.95 685.438 L1029.51 685.438 L1030.07 685.438 L1030.63 685.438 L1031.19 685.438 L1031.75 685.438 L1032.31 685.438 L1032.87 685.438 L1033.43 685.438 L1033.99 685.438 L1034.55 685.438 L1035.1 685.438 L1035.66 685.438 L1036.22 685.438 L1036.78 685.438 L1037.34 685.438 L1037.9 685.438 L1038.46 685.438 L1039.02 685.438 L1039.58 685.438 L1040.14 685.438 L1040.7 685.438 L1041.26 685.438 L1041.82 685.438 L1042.38 685.438 L1042.93 685.438 L1043.49 685.438 L1044.05 685.438 L1044.61 685.438 L1045.17 685.438 L1045.73 685.438 L1046.29 685.438 L1046.85 685.438 L1047.41 685.438 L1047.97 685.438 L1048.53 685.438 L1049.09 685.438 L1049.65 685.438 L1050.2 685.438 L1050.76 685.438 L1051.32 685.438 L1051.88 685.438 L1052.44 685.438 L1053 685.438 L1053.56 685.438 L1054.12 685.438 L1054.68 685.438 L1055.24 685.438 L1055.8 685.438 L1056.36 685.438 L1056.92 685.438 L1057.48 685.438 L1058.03 685.438 L1058.59 685.438 L1059.15 685.438 L1059.71 685.438 L1060.27 685.438 L1060.83 685.438 L1061.39 685.438 L1061.95 685.438 L1062.51 685.438 L1063.07 685.438 L1063.63 685.438 L1064.19 685.438 L1064.75 685.438 L1065.3 685.438 L1065.86 685.438 L1066.42 685.438 L1066.98 685.438 L1067.54 685.438 L1068.1 685.438 L1068.66 685.438 L1069.22 685.438 L1069.78 685.438 L1070.34 685.438 L1070.9 685.438 L1071.46 685.438 L1072.02 685.438 L1072.57 685.438 L1073.13 685.438 L1073.69 685.438 L1074.25 685.438 L1074.81 685.438 L1075.37 685.438 L1075.93 685.438 L1076.49 685.438 L1077.05 685.438 L1077.61 685.438 L1078.17 685.438 L1078.73 685.438 L1079.29 685.438 L1079.85 685.438 L1080.4 685.438 L1080.96 685.438 L1081.52 685.438 L1082.08 685.438 L1082.64 685.438 L1083.2 685.438 L1083.76 685.438 L1084.32 685.438 L1084.88 685.438 L1085.44 685.438 L1086 685.438 L1086.56 685.438 L1087.12 685.438 L1087.67 685.438 L1088.23 685.438 L1088.79 685.438 L1089.35 685.438 L1089.91 685.438 L1090.47 685.438 L1091.03 685.438 L1091.59 685.438 L1092.15 685.438 L1092.71 685.438 L1093.27 685.438 L1093.83 685.438 L1094.39 685.438 L1094.94 685.438 L1095.5 685.438 L1096.06 685.438 L1096.62 685.438 L1097.18 685.438 L1097.74 685.438 L1098.3 685.438 L1098.86 685.438 L1099.42 685.438 L1099.98 685.438 L1100.54 685.438 L1101.1 685.438 L1101.66 685.438 L1102.22 685.438 L1102.77 685.438 L1103.33 685.438 L1103.89 685.438 L1104.45 685.438 L1105.01 685.438 L1105.57 685.438 L1106.13 685.438 L1106.69 685.438 L1107.25 685.438 L1107.81 685.438 L1108.37 685.438 L1108.93 685.438 L1109.49 685.438 L1110.04 685.438 L1110.6 685.438 L1111.16 685.438 L1111.72 685.438 L1112.28 685.438 L1112.84 685.438 L1113.4 685.438 L1113.96 685.438 L1114.52 685.438 L1115.08 685.438 L1115.64 685.438 L1116.2 685.438 L1116.76 685.438 L1117.31 685.438 L1117.87 685.438 L1118.43 685.438 L1118.99 685.438 L1119.55 685.438 L1120.11 685.438 L1120.67 685.438 L1121.23 685.438 L1121.79 685.438 L1122.35 685.438 L1122.91 685.438 L1123.47 685.438 L1124.03 685.438 L1124.59 685.438 L1125.14 685.438 L1125.7 685.438 L1126.26 685.438 L1126.82 685.438 L1127.38 685.438 L1127.94 685.438 L1128.5 685.438 L1129.06 685.438 L1129.62 685.438 L1130.18 685.438 L1130.74 685.438 L1131.3 685.438 L1131.86 685.438 L1132.41 685.438 L1132.97 685.438 L1133.53 685.438 L1134.09 685.438 L1134.65 685.438 L1135.21 685.438 L1135.77 685.438 L1136.33 685.438 L1136.89 685.438 L1137.45 685.438 L1138.01 685.438 L1138.57 685.438 L1139.13 685.438 L1139.68 685.438 L1140.24 685.438 L1140.8 685.438 L1141.36 685.438 L1141.92 685.438 L1142.48 685.438 L1143.04 685.438 L1143.6 685.438 L1144.16 685.438 L1144.72 685.438 L1145.28 685.438 L1145.84 685.438 L1146.4 685.438 L1146.96 685.438 L1147.51 685.438 L1148.07 685.438 L1148.63 685.438 L1149.19 685.438 L1149.75 685.438 L1150.31 685.438 L1150.87 685.438 L1151.43 685.438 L1151.99 685.438 L1152.55 685.438 L1153.11 685.438 L1153.67 685.438 L1154.23 685.438 L1154.78 685.438 L1155.34 685.438 L1155.9 685.438 L1156.46 685.438 L1157.02 685.438 L1157.58 685.438 L1158.14 685.438 L1158.7 685.438 L1159.26 685.438 L1159.82 685.438 L1160.38 685.438 L1160.94 685.438 L1161.5 685.438 L1162.05 685.438 L1162.61 685.438 L1163.17 685.438 L1163.73 685.438 L1164.29 685.438 L1164.85 685.438 L1165.41 685.438 L1165.97 685.438 L1166.53 685.438 L1167.09 685.438 L1167.65 685.438 L1168.21 685.438 L1168.77 685.438 L1169.33 685.438 L1169.88 685.438 L1170.44 685.438 L1171 685.438 L1171.56 685.438 L1172.12 685.438 L1172.68 685.438 L1173.24 685.438 L1173.8 685.438 L1174.36 685.438 L1174.92 685.438 L1175.48 685.438 L1176.04 685.438 L1176.6 685.438 L1177.15 685.438 L1177.71 685.438 L1178.27 685.438 L1178.83 685.438 L1179.39 685.438 L1179.95 685.438 L1180.51 685.438 L1181.07 685.438 L1181.63 685.438 L1182.19 685.438 L1182.75 685.438 L1183.31 685.438 L1183.87 685.438 L1184.43 685.438 L1184.98 685.438 L1185.54 685.438 L1186.1 685.438 L1186.66 685.438 L1187.22 685.438 L1187.78 685.438 L1188.34 685.438 L1188.9 685.438 L1189.46 685.438 L1190.02 685.438 L1190.58 685.438 L1191.14 685.438 L1191.7 685.438 L1192.25 685.438 L1192.81 685.438 L1193.37 685.438 L1193.93 685.438 L1194.49 685.438 L1195.05 685.438 L1195.61 685.438 L1196.17 685.438 L1196.73 685.438 L1197.29 685.438 L1197.85 685.438 L1198.41 685.438 L1198.97 685.438 L1199.52 685.438 L1200.08 685.438 L1200.64 685.438 L1201.2 685.438 L1201.76 685.438 L1202.32 685.438 L1202.88 685.438 L1203.44 685.438 L1204 685.438 L1204.56 685.438 L1205.12 685.438 L1205.68 685.438 L1206.24 685.438 L1206.8 685.438 L1207.35 685.438 L1207.91 685.438 L1208.47 685.438 L1209.03 685.438 L1209.59 685.438 L1210.15 685.438 L1210.71 685.438 L1211.27 685.438 L1211.83 685.438 L1212.39 685.438 L1212.95 685.438 L1213.51 685.438 L1214.07 685.438 L1214.62 685.438 L1215.18 685.438 L1215.74 685.438 L1216.3 685.438 L1216.86 685.438 L1217.42 685.438 L1217.98 685.438 L1218.54 685.438 L1219.1 685.438 L1219.66 685.438 L1220.22 685.438 L1220.78 685.438 L1221.34 685.438 L1221.89 685.438 L1222.45 685.438 L1223.01 685.438 L1223.57 685.438 L1224.13 685.438 L1224.69 685.438 L1225.25 685.438 L1225.81 685.438 L1226.37 685.438 L1226.93 685.438 L1227.49 685.438 L1228.05 685.438 L1228.61 685.438 L1229.17 685.438 L1229.72 685.438 L1230.28 685.438 L1230.84 685.438 L1231.4 685.438 L1231.96 685.438 L1232.52 685.438 L1233.08 685.438 L1233.64 685.438 L1234.2 685.438 L1234.76 685.438 L1235.32 685.438 L1235.88 685.438 L1236.44 685.438 L1236.99 685.438 L1237.55 685.438 L1238.11 685.438 L1238.67 685.438 L1239.23 685.438 L1239.79 685.438 L1240.35 685.438 L1240.91 685.438 L1241.47 685.438 L1242.03 685.438 L1242.59 685.438 L1243.15 685.438 L1243.71 685.438 L1244.26 685.438 L1244.82 685.438 L1245.38 685.438 L1245.94 685.438 L1246.5 685.438 L1247.06 685.438 L1247.62 685.438 L1248.18 685.438 L1248.74 685.438 L1249.3 685.438 L1249.86 685.438 L1250.42 685.438 L1250.98 685.438 L1251.54 685.438 L1252.09 685.438 L1252.65 685.438 L1253.21 685.438 L1253.77 685.438 L1254.33 685.438 L1254.89 685.438 L1255.45 685.438 L1256.01 685.438 L1256.57 685.438 L1257.13 685.438 L1257.69 685.438 L1258.25 685.438 L1258.81 685.438 L1259.36 685.438 L1259.92 685.438 L1260.48 685.438 L1261.04 685.438 L1261.6 685.438 L1262.16 685.438 L1262.72 685.438 L1263.28 685.438 L1263.84 685.438 L1264.4 685.438 L1264.96 685.438 L1265.52 685.438 L1266.08 685.438 L1266.63 685.438 L1267.19 685.438 L1267.75 685.438 L1268.31 685.438 L1268.87 685.438 L1269.43 685.438 L1269.99 685.438 L1270.55 685.438 L1271.11 685.438 L1271.67 685.438 L1272.23 685.438 L1272.79 685.438 L1273.35 685.438 L1273.91 685.438 L1274.46 685.438 L1275.02 685.438 L1275.58 685.438 L1276.14 685.438 L1276.7 685.438 L1277.26 685.438 L1277.82 685.438 L1278.38 685.438 L1278.94 685.438 L1279.5 685.438 L1280.06 685.438 L1280.62 685.438 L1281.18 685.438 L1281.73 685.438 L1282.29 685.438 L1282.85 685.438 L1283.41 685.438 L1283.97 685.438 L1284.53 685.438 L1285.09 685.438 L1285.65 685.438 L1286.21 685.438 L1286.77 685.438 L1287.33 685.438 L1287.89 685.438 L1288.45 685.438 L1289 685.438 L1289.56 685.438 L1290.12 685.438 L1290.68 685.438 L1291.24 685.438 L1291.8 685.438 L1292.36 685.438 L1292.92 685.438 L1293.48 685.438 L1294.04 685.438 L1294.6 685.438 L1295.16 685.438 L1295.72 685.438 L1296.28 685.438 L1296.83 685.438 L1297.39 685.438 L1297.95 685.438 L1298.51 685.438 L1299.07 685.438 L1299.63 685.438 L1300.19 685.438 L1300.75 685.438 L1301.31 685.438 L1301.87 685.438 L1302.43 685.438 L1302.99 685.438 L1303.55 685.438 L1304.1 685.438 L1304.66 685.438 L1305.22 685.438 L1305.78 685.438 L1306.34 685.438 L1306.9 685.438 L1307.46 685.438 L1308.02 685.438 L1308.58 685.438 L1309.14 685.438 L1309.7 685.438 L1310.26 685.438 L1310.82 685.438 L1311.38 685.438 L1311.93 685.438 L1312.49 685.438 L1313.05 685.438 L1313.61 685.438 L1314.17 685.438 L1314.73 685.438 L1315.29 685.438 L1315.85 685.438 L1316.41 685.438 L1316.97 685.438 L1317.53 685.438 L1318.09 685.438 L1318.65 685.438 L1319.2 685.438 L1319.76 685.438 L1320.32 685.438 L1320.88 685.438 L1321.44 685.438 L1322 685.438 L1322.56 685.438 L1323.12 685.438 L1323.68 685.438 L1324.24 685.438 L1324.8 685.438 L1325.36 685.438 L1325.92 685.438 L1326.47 685.438 L1327.03 685.438 L1327.59 685.438 L1328.15 685.438 L1328.71 685.438 L1329.27 685.438 L1329.83 685.438 L1330.39 685.438 L1330.95 685.438 L1331.51 685.438 L1332.07 685.438 L1332.63 685.438 L1333.19 685.438 L1333.75 685.438 L1334.3 685.438 L1334.86 685.438 L1335.42 685.438 L1335.98 685.438 L1336.54 685.438 L1337.1 685.438 L1337.66 685.438 L1338.22 685.438 L1338.78 685.438 L1339.34 685.438 L1339.9 685.438 L1340.46 685.438 L1341.02 685.438 L1341.57 685.438 L1342.13 685.438 L1342.69 685.438 L1343.25 685.438 L1343.81 685.438 L1344.37 685.438 L1344.93 685.438 L1345.49 685.438 L1346.05 685.438 L1346.61 685.438 L1347.17 685.438 L1347.73 685.438 L1348.29 685.438 L1348.84 685.438 L1349.4 685.438 L1349.96 685.438 L1350.52 685.438 L1351.08 685.438 L1351.64 685.438 L1352.2 685.438 L1352.76 685.438 L1353.32 685.438 L1353.88 685.438 L1354.44 685.438 L1355 685.438 L1355.56 685.438 L1356.12 685.438 L1356.67 685.438 L1357.23 685.438 L1357.79 685.438 L1358.35 685.438 L1358.91 685.438 L1359.47 685.438 L1360.03 685.438 L1360.59 685.438 L1361.15 685.438 L1361.71 685.438 L1362.27 685.438 L1362.83 685.438 L1363.39 685.438 L1363.94 685.438 L1364.5 685.438 L1365.06 685.438 L1365.62 685.438 L1366.18 685.438 L1366.74 685.438 L1367.3 685.438 L1367.86 685.438 L1368.42 685.438 L1368.98 685.438 L1369.54 685.438 L1370.1 685.438 L1370.66 685.438 L1371.21 685.438 L1371.77 685.438 L1372.33 685.438 L1372.89 685.438 L1373.45 685.438 L1374.01 685.438 L1374.57 685.438 L1375.13 685.438 L1375.69 685.438 L1376.25 685.438 L1376.81 685.438 L1377.37 685.438 L1377.93 685.438 L1378.49 685.438 L1379.04 685.438 L1379.6 685.438 L1380.16 685.438 L1380.72 685.438 L1381.28 685.438 L1381.84 685.438 L1382.4 685.438 L1382.96 685.438 L1383.52 685.438 L1384.08 685.438 L1384.64 685.438 L1385.2 685.438 L1385.76 685.438 L1386.31 685.438 L1386.87 685.438 L1387.43 685.438 L1387.99 685.438 L1388.55 685.438 L1389.11 685.438 L1389.67 685.438 L1390.23 685.438 L1390.79 685.438 L1391.35 685.438 L1391.91 685.438 L1392.47 685.438 L1393.03 685.438 L1393.58 685.438 L1394.14 685.438 L1394.7 685.438 L1395.26 685.438 L1395.82 685.438 L1396.38 685.438 L1396.94 685.438 L1397.5 685.438 L1398.06 685.438 L1398.62 685.438 L1399.18 685.438 L1399.74 685.438 L1400.3 685.438 L1400.86 685.438 L1401.41 685.438 L1401.97 685.438 L1402.53 685.438 L1403.09 685.438 L1403.65 685.438 L1404.21 685.438 L1404.77 685.438 L1405.33 685.438 L1405.89 685.438 L1406.45 685.438 L1407.01 685.438 L1407.57 685.438 L1408.13 685.438 L1408.68 685.438 L1409.24 685.438 L1409.8 685.438 L1410.36 685.438 L1410.92 685.438 L1411.48 685.438 L1412.04 685.438 L1412.6 685.438 L1413.16 685.438 L1413.72 685.438 L1414.28 685.438 L1414.84 685.438 L1415.4 685.438 L1415.95 685.438 L1416.51 685.438 L1417.07 685.438 L1417.63 685.438 L1418.19 685.438 L1418.75 685.438 L1419.31 685.438 L1419.87 685.438 L1420.43 685.438 L1420.99 685.438 L1421.55 685.438 L1422.11 685.438 L1422.67 685.438 L1423.23 685.438 L1423.78 685.438 L1424.34 685.438 L1424.9 685.438 L1425.46 685.438 L1426.02 685.438 L1426.58 685.438 L1427.14 685.438 L1427.7 685.438 L1428.26 685.438 L1428.82 685.438 L1429.38 685.438 L1429.94 685.438 L1430.5 685.438 L1431.05 685.438 L1431.61 685.438 L1432.17 685.438 L1432.73 685.438 L1433.29 685.438 L1433.85 685.438 L1434.41 685.438 L1434.97 685.438 L1435.53 685.438 L1436.09 685.438 L1436.65 685.438 L1437.21 685.438 L1437.77 685.438 L1438.33 685.438 L1438.88 685.438 L1439.44 685.438 L1440 685.438 L1440.56 685.438 L1441.12 685.438 L1441.68 685.438 L1442.24 685.438 L1442.8 685.438 L1443.36 685.438 L1443.92 685.438 L1444.48 685.438 L1445.04 685.438 L1445.6 685.438 L1446.15 685.438 L1446.71 685.438 L1447.27 685.438 L1447.83 685.438 L1448.39 685.438 L1448.95 685.438 L1449.51 685.438 L1450.07 685.438 L1450.63 685.438 L1451.19 685.438 L1451.75 685.438 L1452.31 685.438 L1452.87 685.438 L1453.42 685.438 L1453.98 685.438 L1454.54 685.438 L1455.1 685.438 L1455.66 685.438 L1456.22 685.438 L1456.78 685.438 L1457.34 685.438 L1457.9 685.438 L1458.46 685.438 L1459.02 685.438 L1459.58 685.438 L1460.14 685.438 L1460.7 685.438 L1461.25 685.438 L1461.81 685.438 L1462.37 685.438 L1462.93 685.438 L1463.49 685.438 L1464.05 685.438 L1464.61 685.438 L1465.17 685.438 L1465.73 685.438 L1466.29 685.438 L1466.85 685.438 L1467.41 685.438 L1467.97 685.438 L1468.52 685.438 L1469.08 685.438 L1469.64 685.438 L1470.2 685.438 L1470.76 685.438 L1471.32 685.438 L1471.88 685.438 L1472.44 685.438 L1473 685.438 L1473.56 685.438 L1474.12 685.438 L1474.68 685.438 L1475.24 685.438 L1475.79 685.438 L1476.35 685.438 L1476.91 685.438 L1477.47 685.438 L1478.03 685.438 L1478.59 685.438 L1479.15 685.438 L1479.71 685.438 L1480.27 685.438 L1480.83 685.438 L1481.39 685.438 L1481.95 685.438 L1482.51 685.438 L1483.07 685.438 L1483.62 685.438 L1484.18 685.438 L1484.74 685.438 L1485.3 685.438 L1485.86 685.438 L1486.42 685.438 L1486.98 685.438 L1487.54 685.438 L1488.1 685.438 L1488.66 685.438 L1489.22 685.438 L1489.78 685.438 L1490.34 685.438 L1490.89 685.438 L1491.45 685.438 L1492.01 685.438 L1492.57 685.438 L1493.13 685.438 L1493.69 685.438 L1494.25 685.438 L1494.81 685.438 L1495.37 685.438 L1495.93 685.438 L1496.49 685.438 L1497.05 685.438 L1497.61 685.438 L1498.16 685.438 L1498.72 685.438 L1499.28 685.438 L1499.84 685.438 L1500.4 685.438 L1500.96 685.438 L1501.52 685.438 L1502.08 685.438 L1502.64 685.438 L1503.2 685.438 L1503.76 685.438 L1504.32 685.438 L1504.88 685.438 L1505.44 685.438 L1505.99 685.438 L1506.55 685.438 L1507.11 685.438 L1507.67 685.438 L1508.23 685.438 L1508.79 685.438 L1509.35 685.438 L1509.91 685.438 L1510.47 685.438 L1511.03 685.438 L1511.59 685.438 L1512.15 685.438 L1512.71 685.438 L1513.26 685.438 L1513.82 685.438 L1514.38 685.438 L1514.94 685.438 L1515.5 685.438 L1516.06 685.438 L1516.62 685.438 L1517.18 685.438 L1517.74 685.438 L1518.3 685.438 L1518.86 685.438 L1519.42 685.438 L1519.98 685.438 L1520.53 685.438 L1521.09 685.438 L1521.65 685.438 L1522.21 685.438 L1522.77 685.438 L1523.33 685.438 L1523.89 685.438 L1524.45 685.438 L1525.01 685.438 L1525.57 685.438 L1526.13 685.438 L1526.69 685.438 L1527.25 685.438 L1527.81 685.438 L1528.36 685.438 L1528.92 685.438 L1529.48 685.438 L1530.04 685.438 L1530.6 685.438 L1531.16 685.438 L1531.72 685.438 L1532.28 685.438 L1532.84 685.438 L1533.4 685.438 L1533.96 685.438 L1534.52 685.438 L1535.08 685.438 L1535.63 685.438 L1536.19 685.438 L1536.75 685.438 L1537.31 685.438 L1537.87 685.438 L1538.43 685.438 L1538.99 685.438 L1539.55 685.438 L1540.11 685.438 L1540.67 685.438 L1541.23 685.438 L1541.79 685.438 L1542.35 685.438 L1542.9 685.438 L1543.46 685.438 L1544.02 685.438 L1544.58 685.438 L1545.14 685.438 L1545.7 685.438 L1546.26 685.438 L1546.82 685.438 L1547.38 685.438 L1547.94 685.438 L1548.5 685.438 L1549.06 685.438 L1549.62 685.438 L1550.18 685.438 L1550.73 685.438 L1551.29 685.438 L1551.85 685.438 L1552.41 685.438 L1552.97 685.438 L1553.53 685.438 L1554.09 685.438 L1554.65 685.438 L1555.21 685.438 L1555.77 685.438 L1556.33 685.438 L1556.89 685.438 L1557.45 685.438 L1558 685.438 L1558.56 685.438 L1559.12 685.438 L1559.68 685.438 L1560.24 685.438 L1560.8 685.438 L1561.36 685.438 L1561.92 685.438 L1562.48 685.438 L1563.04 685.438 L1563.6 685.438 L1564.16 685.438 L1564.72 685.438 L1565.28 685.438 L1565.83 685.438 L1566.39 685.438 L1566.95 685.438 L1567.51 685.438 L1568.07 685.438 L1568.63 685.438 L1569.19 685.438 L1569.75 685.438 L1570.31 685.438 L1570.87 685.438 L1571.43 685.438 L1571.99 685.438 L1572.55 685.438 L1573.1 685.438 L1573.66 685.438 L1574.22 685.438 L1574.78 685.438 L1575.34 685.438 L1575.9 685.438 L1576.46 685.438 L1577.02 685.438 L1577.58 685.438 L1578.14 685.438 L1578.7 685.438 L1579.26 685.438 L1579.82 685.438 L1580.37 685.438 L1580.93 685.438 L1581.49 685.438 L1582.05 685.438 L1582.61 685.438 L1583.17 685.438 L1583.73 685.438 L1584.29 685.438 L1584.85 685.438 L1585.41 685.438 L1585.97 685.438 L1586.53 685.438 L1587.09 685.438 L1587.65 685.438 L1588.2 685.438 L1588.76 685.438 L1589.32 685.438 L1589.88 685.438 L1590.44 685.438 L1591 685.438 L1591.56 685.438 L1592.12 685.438 L1592.68 685.438 L1593.24 685.438 L1593.8 685.438 L1594.36 685.438 L1594.92 685.438 L1595.47 685.438 L1596.03 685.438 L1596.59 685.438 L1597.15 685.438 L1597.71 685.438 L1598.27 685.438 L1598.83 685.438 L1599.39 685.438 L1599.95 685.438 L1600.51 685.438 L1601.07 685.438 L1601.63 685.438 L1602.19 685.438 L1602.74 685.438 L1603.3 685.438 L1603.86 685.438 L1604.42 685.438 L1604.98 685.438 L1605.54 685.438 L1606.1 685.438 L1606.66 685.438 L1607.22 685.438 L1607.78 685.438 L1608.34 685.438 L1608.9 685.438 L1609.46 685.438 L1610.02 685.438 L1610.57 685.438 L1611.13 685.438 L1611.69 685.438 L1612.25 685.438 L1612.81 685.438 L1613.37 685.438 L1613.93 685.438 L1614.49 685.438 L1615.05 685.438 L1615.61 685.438 L1616.17 685.438 L1616.73 685.438 L1617.29 685.438 L1617.84 685.438 L1618.4 685.438 L1618.96 685.438 L1619.52 685.438 L1620.08 685.438 L1620.64 685.438 L1621.2 685.438 L1621.76 685.438 L1622.32 685.438 L1622.88 685.438 L1623.44 685.438 L1624 685.438 L1624.56 685.438 L1625.11 685.438 L1625.67 685.438 L1626.23 685.438 L1626.79 685.438 L1627.35 685.438 L1627.91 685.438 L1628.47 685.438 L1629.03 685.438 L1629.59 685.438 L1630.15 685.438 L1630.71 685.438 L1631.27 685.438 L1631.83 685.438 L1632.39 685.438 L1632.94 685.438 L1633.5 685.438 L1634.06 685.438 L1634.62 685.438 L1635.18 685.438 L1635.74 685.438 L1636.3 685.438 L1636.86 685.438 L1637.42 685.438 L1637.98 685.438 L1638.54 685.438 L1639.1 685.438 L1639.66 685.438 L1640.21 685.438 L1640.77 685.438 L1641.33 685.438 L1641.89 685.438 L1642.45 685.438 L1643.01 685.438 L1643.57 685.438 L1644.13 685.438 L1644.69 685.438 L1645.25 685.438 L1645.81 685.438 L1646.37 685.438 L1646.93 685.438 L1647.48 685.438 L1648.04 685.438 L1648.6 685.438 L1649.16 685.438 L1649.72 685.438 L1650.28 685.438 L1650.84 685.438 L1651.4 685.438 L1651.96 685.438 L1652.52 685.438 L1653.08 685.438 L1653.64 685.438 L1654.2 685.438 L1654.76 685.438 L1655.31 685.438 L1655.87 685.438 L1656.43 685.438 L1656.99 685.438 L1657.55 685.438 L1658.11 685.438 L1658.67 685.438 L1659.23 685.438 L1659.79 685.438 L1660.35 685.438 L1660.91 685.438 L1661.47 685.438 L1662.03 685.438 L1662.58 685.438 L1663.14 685.438 L1663.7 685.438 L1664.26 685.438 L1664.82 685.438 L1665.38 685.438 L1665.94 685.438 L1666.5 685.438 L1667.06 685.438 L1667.62 685.438 L1668.18 685.438 L1668.74 685.438 L1669.3 685.438 L1669.85 685.438 L1670.41 685.438 L1670.97 685.438 L1671.53 685.438 L1672.09 685.438 L1672.65 685.438 L1673.21 685.438 L1673.77 685.438 L1674.33 685.438 L1674.89 685.438 L1675.45 685.438 L1676.01 685.438 L1676.57 685.438 L1677.13 685.438 L1677.68 685.438 L1678.24 685.438 L1678.8 685.438 L1679.36 685.438 L1679.92 685.438 L1680.48 685.438 L1681.04 685.438 L1681.6 685.438 L1682.16 685.438 L1682.72 685.438 L1683.28 685.438 L1683.84 685.438 L1684.4 685.438 L1684.95 685.438 L1685.51 685.438 L1686.07 685.438 L1686.63 685.438 L1687.19 685.438 L1687.75 685.438 L1688.31 685.438 L1688.87 685.438 L1689.43 685.438 L1689.99 685.438 L1690.55 685.438 L1691.11 685.438 L1691.67 685.438 L1692.23 685.438 L1692.78 685.438 L1693.34 685.438 L1693.9 685.438 L1694.46 685.438 L1695.02 685.438 L1695.58 685.438 L1696.14 685.438 L1696.7 685.438 L1697.26 685.438 L1697.82 685.438 L1698.38 685.438 L1698.94 685.438 L1699.5 685.438 L1700.05 685.438 L1700.61 685.438 L1701.17 685.438 L1701.73 685.438 L1702.29 685.438 L1702.85 685.438 L1703.41 685.438 L1703.97 685.438 L1704.53 685.438 L1705.09 685.438 L1705.65 685.438 L1706.21 685.438 L1706.77 685.438 L1707.32 685.438 L1707.88 685.438 L1708.44 685.438 L1709 685.438 L1709.56 685.438 L1710.12 685.438 L1710.68 685.438 L1711.24 685.438 L1711.8 685.438 L1712.36 685.438 L1712.92 685.438 L1713.48 685.438 L1714.04 685.438 L1714.6 685.438 L1715.15 685.438 L1715.71 685.438 L1716.27 685.438 L1716.83 685.438 L1717.39 685.438 L1717.95 685.438 L1718.51 685.438 L1719.07 685.438 L1719.63 685.438 L1720.19 685.438 L1720.75 685.438 L1721.31 685.438 L1721.87 685.438 L1722.42 685.438 L1722.98 685.438 L1723.54 685.438 L1724.1 685.438 L1724.66 685.438 L1725.22 685.438 L1725.78 685.438 L1726.34 685.438 L1726.9 685.438 L1727.46 685.438 L1728.02 685.438 L1728.58 685.438 L1729.14 685.438 L1729.69 685.438 L1730.25 685.438 L1730.81 685.438 L1731.37 685.438 L1731.93 685.438 L1732.49 685.438 L1733.05 685.438 L1733.61 685.438 L1734.17 685.438 L1734.73 685.438 L1735.29 685.438 L1735.85 685.438 L1736.41 685.438 L1736.97 685.438 L1737.52 685.438 L1738.08 685.438 L1738.64 685.438 L1739.2 685.438 L1739.76 685.438 L1740.32 685.438 L1740.88 685.438 L1741.44 685.438 L1742 685.438 L1742.56 685.438 L1743.12 685.438 L1743.68 685.438 L1744.24 685.438 L1744.79 685.438 L1745.35 685.438 L1745.91 685.438 L1746.47 685.438 L1747.03 685.438 L1747.59 685.438 L1748.15 685.438 L1748.71 685.438 L1749.27 685.438 L1749.83 685.438 L1750.39 685.438 L1750.95 685.438 L1751.51 685.438 L1752.06 685.438 L1752.62 685.438 L1753.18 685.438 L1753.74 685.438 L1754.3 685.438 L1754.86 685.438 L1755.42 685.438 L1755.98 685.438 L1756.54 685.438 L1757.1 685.438 L1757.66 685.438 L1758.22 685.438 L1758.78 685.438 L1759.34 685.438 L1759.89 685.438 L1760.45 685.438 L1761.01 685.438 L1761.57 685.438 L1762.13 685.438 L1762.69 685.438 L1763.25 685.438 L1763.81 685.438 L1764.37 685.438 L1764.93 685.438 L1765.49 685.438 L1766.05 685.438 L1766.61 685.438 L1767.16 685.438 L1767.72 685.438 L1768.28 685.438 L1768.84 685.438 L1769.4 685.438 L1769.96 685.438 L1770.52 685.438 L1771.08 685.438 L1771.64 685.438 L1772.2 685.438 L1772.76 685.438 L1773.32 685.438 L1773.88 685.438 L1774.43 685.438 L1774.99 685.438 L1775.55 685.438 L1776.11 685.438 L1776.67 685.438 L1777.23 685.438 L1777.79 685.438 L1778.35 685.438 L1778.91 685.438 L1779.47 685.438 L1780.03 685.438 L1780.59 685.438 L1781.15 685.438 L1781.71 685.438 L1782.26 685.438 L1782.82 685.438 L1783.38 685.438 L1783.94 685.438 L1784.5 685.438 L1785.06 685.438 L1785.62 685.438 L1786.18 685.438 L1786.74 685.438 L1787.3 685.438 L1787.86 685.438 L1788.42 685.438 L1788.98 685.438 L1789.53 685.438 L1790.09 685.438 L1790.65 685.438 L1791.21 685.438 L1791.77 685.438 L1792.33 685.438 L1792.89 685.438 L1793.45 685.438 L1794.01 685.438 L1794.57 685.438 L1795.13 685.438 L1795.69 685.438 L1796.25 685.438 L1796.8 685.438 L1797.36 685.438 L1797.92 685.438 L1798.48 685.438 L1799.04 685.438 L1799.6 685.438 L1800.16 685.438 L1800.72 685.438 L1801.28 685.438 L1801.84 685.438 L1802.4 685.438 L1802.96 685.438 L1803.52 685.438 L1804.08 685.438 L1804.63 685.438 L1805.19 685.438 L1805.75 685.438 L1806.31 685.438 L1806.87 685.438 L1807.43 685.438 L1807.99 685.438 L1808.55 685.438 L1809.11 685.438 L1809.67 685.438 L1810.23 685.438 L1810.79 685.438 L1811.35 685.438 L1811.9 685.438 L1812.46 685.438 L1813.02 685.438 L1813.58 685.438 L1814.14 685.438 L1814.7 685.438 L1815.26 685.438 L1815.82 685.438 L1816.38 685.438 L1816.94 685.438 L1817.5 685.438 L1818.06 685.438 L1818.62 685.438 L1819.18 685.438 L1819.73 685.438 L1820.29 685.438 L1820.85 685.438 L1821.41 685.438 L1821.97 685.438 L1822.53 685.438 L1823.09 685.438 L1823.65 685.438 L1824.21 685.438 L1824.77 685.438 L1825.33 685.438 L1825.89 685.438 L1826.45 685.438 L1827 685.438 L1827.56 685.438 L1828.12 685.438 L1828.68 685.438 L1829.24 685.438 L1829.8 685.438 L1830.36 685.438 L1830.92 685.438 L1831.48 685.438 L1832.04 685.438 L1832.6 685.438 L1833.16 685.438 L1833.72 685.438 L1834.27 685.438 L1834.83 685.438 L1835.39 685.438 L1835.95 685.438 L1836.51 685.438 L1837.07 685.438 L1837.63 685.438 L1838.19 685.438 L1838.19 683.463 L1837.63 683.463 L1837.07 683.463 L1836.51 683.463 L1835.95 683.463 L1835.39 683.463 L1834.83 683.463 L1834.27 683.463 L1833.72 683.463 L1833.16 683.463 L1832.6 683.463 L1832.04 683.463 L1831.48 683.463 L1830.92 683.463 L1830.36 683.463 L1829.8 683.463 L1829.24 683.463 L1828.68 683.463 L1828.12 683.463 L1827.56 683.463 L1827 683.463 L1826.45 683.463 L1825.89 683.463 L1825.33 683.463 L1824.77 683.463 L1824.21 683.463 L1823.65 683.463 L1823.09 683.463 L1822.53 683.463 L1821.97 683.463 L1821.41 683.463 L1820.85 683.463 L1820.29 683.463 L1819.73 683.463 L1819.18 683.463 L1818.62 683.463 L1818.06 683.463 L1817.5 683.463 L1816.94 683.463 L1816.38 683.463 L1815.82 683.463 L1815.26 683.463 L1814.7 683.463 L1814.14 683.463 L1813.58 683.463 L1813.02 683.463 L1812.46 683.463 L1811.9 683.463 L1811.35 683.463 L1810.79 683.463 L1810.23 683.463 L1809.67 683.463 L1809.11 683.463 L1808.55 683.463 L1807.99 683.463 L1807.43 683.463 L1806.87 683.463 L1806.31 683.463 L1805.75 683.463 L1805.19 683.463 L1804.63 683.463 L1804.08 683.463 L1803.52 683.463 L1802.96 683.463 L1802.4 683.463 L1801.84 683.463 L1801.28 683.463 L1800.72 683.463 L1800.16 683.463 L1799.6 683.463 L1799.04 683.463 L1798.48 683.463 L1797.92 683.463 L1797.36 683.463 L1796.8 683.463 L1796.25 683.463 L1795.69 683.463 L1795.13 683.463 L1794.57 683.463 L1794.01 683.463 L1793.45 683.463 L1792.89 683.463 L1792.33 683.463 L1791.77 683.463 L1791.21 683.463 L1790.65 683.463 L1790.09 683.463 L1789.53 683.463 L1788.98 683.463 L1788.42 683.463 L1787.86 683.463 L1787.3 683.463 L1786.74 683.463 L1786.18 683.463 L1785.62 683.463 L1785.06 683.463 L1784.5 683.463 L1783.94 683.463 L1783.38 683.463 L1782.82 683.463 L1782.26 683.463 L1781.71 683.463 L1781.15 683.463 L1780.59 683.463 L1780.03 683.463 L1779.47 683.463 L1778.91 683.463 L1778.35 683.463 L1777.79 683.463 L1777.23 683.463 L1776.67 683.463 L1776.11 683.463 L1775.55 683.463 L1774.99 683.463 L1774.43 683.463 L1773.88 683.463 L1773.32 683.463 L1772.76 683.463 L1772.2 683.463 L1771.64 683.463 L1771.08 683.463 L1770.52 683.463 L1769.96 683.463 L1769.4 683.463 L1768.84 683.463 L1768.28 683.463 L1767.72 683.463 L1767.16 683.463 L1766.61 683.463 L1766.05 683.463 L1765.49 683.463 L1764.93 683.463 L1764.37 683.463 L1763.81 683.463 L1763.25 683.463 L1762.69 683.463 L1762.13 683.463 L1761.57 683.463 L1761.01 683.463 L1760.45 683.463 L1759.89 683.463 L1759.34 683.463 L1758.78 683.463 L1758.22 683.463 L1757.66 683.463 L1757.1 683.463 L1756.54 683.463 L1755.98 683.463 L1755.42 683.463 L1754.86 683.463 L1754.3 683.463 L1753.74 683.463 L1753.18 683.463 L1752.62 683.463 L1752.06 683.463 L1751.51 683.463 L1750.95 683.463 L1750.39 683.463 L1749.83 683.463 L1749.27 683.463 L1748.71 683.463 L1748.15 683.463 L1747.59 683.463 L1747.03 683.463 L1746.47 683.463 L1745.91 683.463 L1745.35 683.463 L1744.79 683.463 L1744.24 683.463 L1743.68 683.463 L1743.12 683.463 L1742.56 683.463 L1742 683.463 L1741.44 683.463 L1740.88 683.463 L1740.32 683.463 L1739.76 683.463 L1739.2 683.463 L1738.64 683.463 L1738.08 683.463 L1737.52 683.463 L1736.97 683.463 L1736.41 683.463 L1735.85 683.463 L1735.29 683.463 L1734.73 683.463 L1734.17 683.463 L1733.61 683.463 L1733.05 683.463 L1732.49 683.463 L1731.93 683.463 L1731.37 683.463 L1730.81 683.463 L1730.25 683.463 L1729.69 683.463 L1729.14 683.463 L1728.58 683.463 L1728.02 683.463 L1727.46 683.463 L1726.9 683.463 L1726.34 683.463 L1725.78 683.463 L1725.22 683.463 L1724.66 683.463 L1724.1 683.463 L1723.54 683.463 L1722.98 683.463 L1722.42 683.463 L1721.87 683.463 L1721.31 683.463 L1720.75 683.463 L1720.19 683.463 L1719.63 683.463 L1719.07 683.463 L1718.51 683.463 L1717.95 683.463 L1717.39 683.463 L1716.83 683.463 L1716.27 683.463 L1715.71 683.463 L1715.15 683.463 L1714.6 683.463 L1714.04 683.463 L1713.48 683.463 L1712.92 683.463 L1712.36 683.463 L1711.8 683.463 L1711.24 683.463 L1710.68 683.463 L1710.12 683.463 L1709.56 683.463 L1709 683.463 L1708.44 683.463 L1707.88 683.463 L1707.32 683.463 L1706.77 683.463 L1706.21 683.463 L1705.65 683.463 L1705.09 683.463 L1704.53 683.463 L1703.97 683.463 L1703.41 683.463 L1702.85 683.463 L1702.29 683.463 L1701.73 683.463 L1701.17 683.463 L1700.61 683.463 L1700.05 683.463 L1699.5 683.463 L1698.94 683.463 L1698.38 683.463 L1697.82 683.463 L1697.26 683.463 L1696.7 683.463 L1696.14 683.463 L1695.58 683.463 L1695.02 683.463 L1694.46 683.463 L1693.9 683.463 L1693.34 683.463 L1692.78 683.463 L1692.23 683.463 L1691.67 683.463 L1691.11 683.463 L1690.55 683.463 L1689.99 683.463 L1689.43 683.463 L1688.87 683.463 L1688.31 683.463 L1687.75 683.463 L1687.19 683.463 L1686.63 683.463 L1686.07 683.463 L1685.51 683.463 L1684.95 683.463 L1684.4 683.463 L1683.84 683.463 L1683.28 683.463 L1682.72 683.463 L1682.16 683.463 L1681.6 683.463 L1681.04 683.463 L1680.48 683.463 L1679.92 683.463 L1679.36 683.463 L1678.8 683.463 L1678.24 683.463 L1677.68 683.463 L1677.13 683.463 L1676.57 683.463 L1676.01 683.463 L1675.45 683.463 L1674.89 683.463 L1674.33 683.463 L1673.77 683.463 L1673.21 683.463 L1672.65 683.463 L1672.09 683.463 L1671.53 683.463 L1670.97 683.463 L1670.41 683.463 L1669.85 683.463 L1669.3 683.463 L1668.74 683.463 L1668.18 683.463 L1667.62 683.463 L1667.06 683.463 L1666.5 683.463 L1665.94 683.463 L1665.38 683.463 L1664.82 683.463 L1664.26 683.463 L1663.7 683.463 L1663.14 683.463 L1662.58 683.463 L1662.03 683.463 L1661.47 683.463 L1660.91 683.463 L1660.35 683.463 L1659.79 683.463 L1659.23 683.463 L1658.67 683.463 L1658.11 683.463 L1657.55 683.463 L1656.99 683.463 L1656.43 683.463 L1655.87 683.463 L1655.31 683.463 L1654.76 683.463 L1654.2 683.463 L1653.64 683.463 L1653.08 683.463 L1652.52 683.463 L1651.96 683.463 L1651.4 683.463 L1650.84 683.463 L1650.28 683.463 L1649.72 683.463 L1649.16 683.463 L1648.6 683.463 L1648.04 683.463 L1647.48 683.463 L1646.93 683.463 L1646.37 683.463 L1645.81 683.463 L1645.25 683.463 L1644.69 683.463 L1644.13 683.463 L1643.57 683.463 L1643.01 683.463 L1642.45 683.463 L1641.89 683.463 L1641.33 683.463 L1640.77 683.463 L1640.21 683.463 L1639.66 683.463 L1639.1 683.463 L1638.54 683.463 L1637.98 683.463 L1637.42 683.463 L1636.86 683.463 L1636.3 683.463 L1635.74 683.463 L1635.18 683.463 L1634.62 683.463 L1634.06 683.463 L1633.5 683.463 L1632.94 683.463 L1632.39 683.463 L1631.83 683.463 L1631.27 683.463 L1630.71 683.463 L1630.15 683.463 L1629.59 683.463 L1629.03 683.463 L1628.47 683.463 L1627.91 683.463 L1627.35 683.463 L1626.79 683.463 L1626.23 683.463 L1625.67 683.463 L1625.11 683.463 L1624.56 683.463 L1624 683.463 L1623.44 683.463 L1622.88 683.463 L1622.32 683.463 L1621.76 683.463 L1621.2 683.463 L1620.64 683.463 L1620.08 683.463 L1619.52 683.463 L1618.96 683.463 L1618.4 683.463 L1617.84 683.463 L1617.29 683.463 L1616.73 683.463 L1616.17 683.463 L1615.61 683.463 L1615.05 683.463 L1614.49 683.463 L1613.93 683.463 L1613.37 683.463 L1612.81 683.463 L1612.25 683.463 L1611.69 683.463 L1611.13 683.463 L1610.57 683.463 L1610.02 683.463 L1609.46 683.463 L1608.9 683.463 L1608.34 683.463 L1607.78 683.463 L1607.22 683.463 L1606.66 683.463 L1606.1 683.463 L1605.54 683.463 L1604.98 683.463 L1604.42 683.463 L1603.86 683.463 L1603.3 683.463 L1602.74 683.463 L1602.19 683.463 L1601.63 683.463 L1601.07 683.463 L1600.51 683.463 L1599.95 683.463 L1599.39 683.463 L1598.83 683.463 L1598.27 683.463 L1597.71 683.463 L1597.15 683.463 L1596.59 683.463 L1596.03 683.463 L1595.47 683.463 L1594.92 683.463 L1594.36 683.463 L1593.8 683.463 L1593.24 683.463 L1592.68 683.463 L1592.12 683.463 L1591.56 683.463 L1591 683.463 L1590.44 683.463 L1589.88 683.463 L1589.32 683.463 L1588.76 683.463 L1588.2 683.463 L1587.65 683.463 L1587.09 683.463 L1586.53 683.463 L1585.97 683.463 L1585.41 683.463 L1584.85 683.463 L1584.29 683.463 L1583.73 683.463 L1583.17 683.463 L1582.61 683.463 L1582.05 683.463 L1581.49 683.463 L1580.93 683.463 L1580.37 683.463 L1579.82 683.463 L1579.26 683.463 L1578.7 683.463 L1578.14 683.463 L1577.58 683.463 L1577.02 683.463 L1576.46 683.463 L1575.9 683.463 L1575.34 683.463 L1574.78 683.463 L1574.22 683.463 L1573.66 683.463 L1573.1 683.463 L1572.55 683.463 L1571.99 683.463 L1571.43 683.463 L1570.87 683.463 L1570.31 683.463 L1569.75 683.463 L1569.19 683.463 L1568.63 683.463 L1568.07 683.463 L1567.51 683.463 L1566.95 683.463 L1566.39 683.463 L1565.83 683.463 L1565.28 683.463 L1564.72 683.463 L1564.16 683.463 L1563.6 683.463 L1563.04 683.463 L1562.48 683.463 L1561.92 683.463 L1561.36 683.463 L1560.8 683.463 L1560.24 683.463 L1559.68 683.463 L1559.12 683.463 L1558.56 683.463 L1558 683.463 L1557.45 683.463 L1556.89 683.463 L1556.33 683.463 L1555.77 683.463 L1555.21 683.463 L1554.65 683.463 L1554.09 683.463 L1553.53 683.463 L1552.97 683.463 L1552.41 683.463 L1551.85 683.463 L1551.29 683.463 L1550.73 683.463 L1550.18 683.463 L1549.62 683.463 L1549.06 683.463 L1548.5 683.463 L1547.94 683.463 L1547.38 683.463 L1546.82 683.463 L1546.26 683.463 L1545.7 683.463 L1545.14 683.463 L1544.58 683.463 L1544.02 683.463 L1543.46 683.463 L1542.9 683.463 L1542.35 683.463 L1541.79 683.463 L1541.23 683.463 L1540.67 683.463 L1540.11 683.463 L1539.55 683.463 L1538.99 683.463 L1538.43 683.463 L1537.87 683.463 L1537.31 683.463 L1536.75 683.463 L1536.19 683.463 L1535.63 683.463 L1535.08 683.463 L1534.52 683.463 L1533.96 683.463 L1533.4 683.463 L1532.84 683.463 L1532.28 683.463 L1531.72 683.463 L1531.16 683.463 L1530.6 683.463 L1530.04 683.463 L1529.48 683.463 L1528.92 683.463 L1528.36 683.463 L1527.81 683.463 L1527.25 683.463 L1526.69 683.463 L1526.13 683.463 L1525.57 683.463 L1525.01 683.463 L1524.45 683.463 L1523.89 683.463 L1523.33 683.463 L1522.77 683.463 L1522.21 683.463 L1521.65 683.463 L1521.09 683.463 L1520.53 683.463 L1519.98 683.463 L1519.42 683.463 L1518.86 683.463 L1518.3 683.463 L1517.74 683.463 L1517.18 683.463 L1516.62 683.463 L1516.06 683.463 L1515.5 683.463 L1514.94 683.463 L1514.38 683.463 L1513.82 683.463 L1513.26 683.463 L1512.71 683.463 L1512.15 683.463 L1511.59 683.463 L1511.03 683.463 L1510.47 683.463 L1509.91 683.463 L1509.35 683.463 L1508.79 683.463 L1508.23 683.463 L1507.67 683.463 L1507.11 683.463 L1506.55 683.463 L1505.99 683.463 L1505.44 683.463 L1504.88 683.463 L1504.32 683.463 L1503.76 683.463 L1503.2 683.463 L1502.64 683.463 L1502.08 683.463 L1501.52 683.463 L1500.96 683.463 L1500.4 683.463 L1499.84 683.463 L1499.28 683.463 L1498.72 683.463 L1498.16 683.463 L1497.61 683.463 L1497.05 683.463 L1496.49 683.463 L1495.93 683.463 L1495.37 683.463 L1494.81 683.463 L1494.25 683.463 L1493.69 683.463 L1493.13 683.463 L1492.57 683.463 L1492.01 683.463 L1491.45 683.463 L1490.89 683.463 L1490.34 683.463 L1489.78 683.463 L1489.22 683.463 L1488.66 683.463 L1488.1 683.463 L1487.54 683.463 L1486.98 683.463 L1486.42 683.463 L1485.86 683.463 L1485.3 683.463 L1484.74 683.463 L1484.18 683.463 L1483.62 683.463 L1483.07 683.463 L1482.51 683.463 L1481.95 683.463 L1481.39 683.463 L1480.83 683.463 L1480.27 683.463 L1479.71 683.463 L1479.15 683.463 L1478.59 683.463 L1478.03 683.463 L1477.47 683.463 L1476.91 683.463 L1476.35 683.463 L1475.79 683.463 L1475.24 683.463 L1474.68 683.463 L1474.12 683.463 L1473.56 683.463 L1473 683.463 L1472.44 683.463 L1471.88 683.463 L1471.32 683.463 L1470.76 683.463 L1470.2 683.463 L1469.64 683.463 L1469.08 683.463 L1468.52 683.463 L1467.97 683.463 L1467.41 683.463 L1466.85 683.463 L1466.29 683.463 L1465.73 683.463 L1465.17 683.463 L1464.61 683.463 L1464.05 683.463 L1463.49 683.463 L1462.93 683.463 L1462.37 683.463 L1461.81 683.463 L1461.25 683.463 L1460.7 683.463 L1460.14 683.463 L1459.58 683.463 L1459.02 683.463 L1458.46 683.463 L1457.9 683.463 L1457.34 683.463 L1456.78 683.463 L1456.22 683.463 L1455.66 683.463 L1455.1 683.463 L1454.54 683.463 L1453.98 683.463 L1453.42 683.463 L1452.87 683.463 L1452.31 683.463 L1451.75 683.463 L1451.19 683.463 L1450.63 683.463 L1450.07 683.463 L1449.51 683.463 L1448.95 683.463 L1448.39 683.463 L1447.83 683.463 L1447.27 683.463 L1446.71 683.463 L1446.15 683.463 L1445.6 683.463 L1445.04 683.463 L1444.48 683.463 L1443.92 683.463 L1443.36 683.463 L1442.8 683.463 L1442.24 683.463 L1441.68 683.463 L1441.12 683.463 L1440.56 683.463 L1440 683.463 L1439.44 683.463 L1438.88 683.463 L1438.33 683.463 L1437.77 683.463 L1437.21 683.463 L1436.65 683.463 L1436.09 683.463 L1435.53 683.463 L1434.97 683.463 L1434.41 683.463 L1433.85 683.463 L1433.29 683.463 L1432.73 683.463 L1432.17 683.463 L1431.61 683.463 L1431.05 683.463 L1430.5 683.463 L1429.94 683.463 L1429.38 683.463 L1428.82 683.463 L1428.26 683.463 L1427.7 683.463 L1427.14 683.463 L1426.58 683.463 L1426.02 683.463 L1425.46 683.463 L1424.9 683.463 L1424.34 683.463 L1423.78 683.463 L1423.23 683.463 L1422.67 683.463 L1422.11 683.463 L1421.55 683.463 L1420.99 683.463 L1420.43 683.463 L1419.87 683.463 L1419.31 683.463 L1418.75 683.463 L1418.19 683.463 L1417.63 683.463 L1417.07 683.463 L1416.51 683.463 L1415.95 683.463 L1415.4 683.463 L1414.84 683.463 L1414.28 683.463 L1413.72 683.463 L1413.16 683.463 L1412.6 683.463 L1412.04 683.463 L1411.48 683.463 L1410.92 683.463 L1410.36 683.463 L1409.8 683.463 L1409.24 683.463 L1408.68 683.463 L1408.13 683.463 L1407.57 683.463 L1407.01 683.463 L1406.45 683.463 L1405.89 683.463 L1405.33 683.463 L1404.77 683.463 L1404.21 683.463 L1403.65 683.463 L1403.09 683.463 L1402.53 683.463 L1401.97 683.463 L1401.41 683.463 L1400.86 683.463 L1400.3 683.463 L1399.74 683.463 L1399.18 683.463 L1398.62 683.463 L1398.06 683.463 L1397.5 683.463 L1396.94 683.463 L1396.38 683.463 L1395.82 683.463 L1395.26 683.463 L1394.7 683.463 L1394.14 683.463 L1393.58 683.463 L1393.03 683.463 L1392.47 683.463 L1391.91 683.463 L1391.35 683.463 L1390.79 683.463 L1390.23 683.463 L1389.67 683.463 L1389.11 683.463 L1388.55 683.463 L1387.99 683.463 L1387.43 683.463 L1386.87 683.463 L1386.31 683.463 L1385.76 683.463 L1385.2 683.463 L1384.64 683.463 L1384.08 683.463 L1383.52 683.463 L1382.96 683.463 L1382.4 683.463 L1381.84 683.463 L1381.28 683.463 L1380.72 683.463 L1380.16 683.463 L1379.6 683.463 L1379.04 683.463 L1378.49 683.463 L1377.93 683.463 L1377.37 683.463 L1376.81 683.463 L1376.25 683.463 L1375.69 683.463 L1375.13 683.463 L1374.57 683.463 L1374.01 683.463 L1373.45 683.463 L1372.89 683.463 L1372.33 683.463 L1371.77 683.463 L1371.21 683.463 L1370.66 683.463 L1370.1 683.463 L1369.54 683.463 L1368.98 683.463 L1368.42 683.463 L1367.86 683.463 L1367.3 683.463 L1366.74 683.463 L1366.18 683.463 L1365.62 683.463 L1365.06 683.463 L1364.5 683.463 L1363.94 683.463 L1363.39 683.463 L1362.83 683.463 L1362.27 683.463 L1361.71 683.463 L1361.15 683.463 L1360.59 683.463 L1360.03 683.463 L1359.47 683.463 L1358.91 683.463 L1358.35 683.463 L1357.79 683.463 L1357.23 683.463 L1356.67 683.463 L1356.12 683.463 L1355.56 683.463 L1355 683.463 L1354.44 683.463 L1353.88 683.463 L1353.32 683.463 L1352.76 683.463 L1352.2 683.463 L1351.64 683.463 L1351.08 683.463 L1350.52 683.463 L1349.96 683.463 L1349.4 683.463 L1348.84 683.463 L1348.29 683.463 L1347.73 683.463 L1347.17 683.463 L1346.61 683.463 L1346.05 683.463 L1345.49 683.463 L1344.93 683.463 L1344.37 683.463 L1343.81 683.463 L1343.25 683.463 L1342.69 683.463 L1342.13 683.463 L1341.57 683.463 L1341.02 683.463 L1340.46 683.463 L1339.9 683.463 L1339.34 683.463 L1338.78 683.463 L1338.22 683.463 L1337.66 683.463 L1337.1 683.463 L1336.54 683.463 L1335.98 683.463 L1335.42 683.463 L1334.86 683.463 L1334.3 683.463 L1333.75 683.463 L1333.19 683.463 L1332.63 683.463 L1332.07 683.463 L1331.51 683.463 L1330.95 683.463 L1330.39 683.463 L1329.83 683.463 L1329.27 683.463 L1328.71 683.463 L1328.15 683.463 L1327.59 683.463 L1327.03 683.463 L1326.47 683.463 L1325.92 683.463 L1325.36 683.463 L1324.8 683.463 L1324.24 683.463 L1323.68 683.463 L1323.12 683.463 L1322.56 683.463 L1322 683.463 L1321.44 683.463 L1320.88 683.463 L1320.32 683.463 L1319.76 683.463 L1319.2 683.463 L1318.65 683.463 L1318.09 683.463 L1317.53 683.463 L1316.97 683.463 L1316.41 683.463 L1315.85 683.463 L1315.29 683.463 L1314.73 683.463 L1314.17 683.463 L1313.61 683.463 L1313.05 683.463 L1312.49 683.463 L1311.93 683.463 L1311.38 683.463 L1310.82 683.463 L1310.26 683.463 L1309.7 683.463 L1309.14 683.463 L1308.58 683.463 L1308.02 683.463 L1307.46 683.463 L1306.9 683.463 L1306.34 683.463 L1305.78 683.463 L1305.22 683.463 L1304.66 683.463 L1304.1 683.463 L1303.55 683.463 L1302.99 683.463 L1302.43 683.463 L1301.87 683.463 L1301.31 683.463 L1300.75 683.463 L1300.19 683.463 L1299.63 683.463 L1299.07 683.463 L1298.51 683.463 L1297.95 683.463 L1297.39 683.463 L1296.83 683.463 L1296.28 683.463 L1295.72 683.463 L1295.16 683.463 L1294.6 683.463 L1294.04 683.463 L1293.48 683.463 L1292.92 683.463 L1292.36 683.463 L1291.8 683.463 L1291.24 683.463 L1290.68 683.463 L1290.12 683.463 L1289.56 683.463 L1289 683.463 L1288.45 683.463 L1287.89 683.463 L1287.33 683.463 L1286.77 683.463 L1286.21 683.463 L1285.65 683.463 L1285.09 683.463 L1284.53 683.463 L1283.97 683.463 L1283.41 683.463 L1282.85 683.463 L1282.29 683.463 L1281.73 683.463 L1281.18 683.463 L1280.62 683.463 L1280.06 683.463 L1279.5 683.463 L1278.94 683.463 L1278.38 683.463 L1277.82 683.463 L1277.26 683.463 L1276.7 683.463 L1276.14 683.463 L1275.58 683.463 L1275.02 683.463 L1274.46 683.463 L1273.91 683.463 L1273.35 683.463 L1272.79 683.463 L1272.23 683.463 L1271.67 683.463 L1271.11 683.463 L1270.55 683.463 L1269.99 683.463 L1269.43 683.463 L1268.87 683.463 L1268.31 683.463 L1267.75 683.463 L1267.19 683.463 L1266.63 683.463 L1266.08 683.463 L1265.52 683.463 L1264.96 683.463 L1264.4 683.463 L1263.84 683.463 L1263.28 683.463 L1262.72 683.463 L1262.16 683.463 L1261.6 683.463 L1261.04 683.463 L1260.48 683.463 L1259.92 683.463 L1259.36 683.463 L1258.81 683.463 L1258.25 683.463 L1257.69 683.463 L1257.13 683.463 L1256.57 683.463 L1256.01 683.463 L1255.45 683.463 L1254.89 683.463 L1254.33 683.463 L1253.77 683.463 L1253.21 683.463 L1252.65 683.463 L1252.09 683.463 L1251.54 683.463 L1250.98 683.463 L1250.42 683.463 L1249.86 683.463 L1249.3 683.463 L1248.74 683.463 L1248.18 683.463 L1247.62 683.463 L1247.06 683.463 L1246.5 683.463 L1245.94 683.463 L1245.38 683.463 L1244.82 683.463 L1244.26 683.463 L1243.71 683.463 L1243.15 683.463 L1242.59 683.463 L1242.03 683.463 L1241.47 683.463 L1240.91 683.463 L1240.35 683.463 L1239.79 683.463 L1239.23 683.463 L1238.67 683.463 L1238.11 683.463 L1237.55 683.463 L1236.99 683.463 L1236.44 683.463 L1235.88 683.463 L1235.32 683.463 L1234.76 683.463 L1234.2 683.463 L1233.64 683.463 L1233.08 683.463 L1232.52 683.463 L1231.96 683.463 L1231.4 683.463 L1230.84 683.463 L1230.28 683.463 L1229.72 683.463 L1229.17 683.463 L1228.61 683.463 L1228.05 683.463 L1227.49 683.463 L1226.93 683.463 L1226.37 683.463 L1225.81 683.463 L1225.25 683.463 L1224.69 683.463 L1224.13 683.463 L1223.57 683.463 L1223.01 683.463 L1222.45 683.463 L1221.89 683.463 L1221.34 683.463 L1220.78 683.463 L1220.22 683.463 L1219.66 683.463 L1219.1 683.463 L1218.54 683.463 L1217.98 683.463 L1217.42 683.463 L1216.86 683.463 L1216.3 683.463 L1215.74 683.463 L1215.18 683.463 L1214.62 683.463 L1214.07 683.463 L1213.51 683.463 L1212.95 683.463 L1212.39 683.463 L1211.83 683.463 L1211.27 683.463 L1210.71 683.463 L1210.15 683.463 L1209.59 683.463 L1209.03 683.463 L1208.47 683.463 L1207.91 683.463 L1207.35 683.463 L1206.8 683.463 L1206.24 683.463 L1205.68 683.463 L1205.12 683.463 L1204.56 683.463 L1204 683.463 L1203.44 683.463 L1202.88 683.463 L1202.32 683.463 L1201.76 683.463 L1201.2 683.463 L1200.64 683.463 L1200.08 683.463 L1199.52 683.463 L1198.97 683.463 L1198.41 683.463 L1197.85 683.463 L1197.29 683.463 L1196.73 683.463 L1196.17 683.463 L1195.61 683.463 L1195.05 683.463 L1194.49 683.463 L1193.93 683.463 L1193.37 683.463 L1192.81 683.463 L1192.25 683.463 L1191.7 683.463 L1191.14 683.463 L1190.58 683.463 L1190.02 683.463 L1189.46 683.463 L1188.9 683.463 L1188.34 683.463 L1187.78 683.463 L1187.22 683.463 L1186.66 683.463 L1186.1 683.463 L1185.54 683.463 L1184.98 683.463 L1184.43 683.463 L1183.87 683.463 L1183.31 683.463 L1182.75 683.463 L1182.19 683.463 L1181.63 683.463 L1181.07 683.463 L1180.51 683.463 L1179.95 683.463 L1179.39 683.463 L1178.83 683.463 L1178.27 683.463 L1177.71 683.463 L1177.15 683.463 L1176.6 683.463 L1176.04 683.463 L1175.48 683.463 L1174.92 683.463 L1174.36 683.463 L1173.8 683.463 L1173.24 683.463 L1172.68 683.463 L1172.12 683.463 L1171.56 683.463 L1171 683.463 L1170.44 683.463 L1169.88 683.463 L1169.33 683.463 L1168.77 683.463 L1168.21 683.463 L1167.65 683.463 L1167.09 683.463 L1166.53 683.463 L1165.97 683.463 L1165.41 683.463 L1164.85 683.463 L1164.29 683.463 L1163.73 683.463 L1163.17 683.463 L1162.61 683.463 L1162.05 683.463 L1161.5 683.463 L1160.94 683.463 L1160.38 683.463 L1159.82 683.463 L1159.26 683.463 L1158.7 683.463 L1158.14 683.463 L1157.58 683.463 L1157.02 683.463 L1156.46 683.463 L1155.9 683.463 L1155.34 683.463 L1154.78 683.463 L1154.23 683.463 L1153.67 683.463 L1153.11 683.463 L1152.55 683.463 L1151.99 683.463 L1151.43 683.463 L1150.87 683.463 L1150.31 683.463 L1149.75 683.463 L1149.19 683.463 L1148.63 683.463 L1148.07 683.463 L1147.51 683.463 L1146.96 683.463 L1146.4 683.463 L1145.84 683.463 L1145.28 683.463 L1144.72 683.463 L1144.16 683.463 L1143.6 683.463 L1143.04 683.463 L1142.48 683.463 L1141.92 683.463 L1141.36 683.463 L1140.8 683.463 L1140.24 683.463 L1139.68 683.463 L1139.13 683.463 L1138.57 683.463 L1138.01 683.463 L1137.45 683.463 L1136.89 683.463 L1136.33 683.463 L1135.77 683.463 L1135.21 683.463 L1134.65 683.463 L1134.09 683.463 L1133.53 683.463 L1132.97 683.463 L1132.41 683.463 L1131.86 683.463 L1131.3 683.463 L1130.74 683.463 L1130.18 683.463 L1129.62 683.463 L1129.06 683.463 L1128.5 683.463 L1127.94 683.463 L1127.38 683.463 L1126.82 683.463 L1126.26 683.463 L1125.7 683.463 L1125.14 683.463 L1124.59 683.463 L1124.03 683.463 L1123.47 683.463 L1122.91 683.463 L1122.35 683.463 L1121.79 683.463 L1121.23 683.463 L1120.67 683.463 L1120.11 683.463 L1119.55 683.463 L1118.99 683.463 L1118.43 683.463 L1117.87 683.463 L1117.31 683.463 L1116.76 683.463 L1116.2 683.463 L1115.64 683.463 L1115.08 683.463 L1114.52 683.463 L1113.96 683.463 L1113.4 683.463 L1112.84 683.463 L1112.28 683.463 L1111.72 683.463 L1111.16 683.463 L1110.6 683.463 L1110.04 683.463 L1109.49 683.463 L1108.93 683.463 L1108.37 683.463 L1107.81 683.463 L1107.25 683.463 L1106.69 683.463 L1106.13 683.463 L1105.57 683.463 L1105.01 683.463 L1104.45 683.463 L1103.89 683.463 L1103.33 683.463 L1102.77 683.463 L1102.22 683.463 L1101.66 683.463 L1101.1 683.463 L1100.54 683.463 L1099.98 683.463 L1099.42 683.463 L1098.86 683.463 L1098.3 683.463 L1097.74 683.463 L1097.18 683.463 L1096.62 683.463 L1096.06 683.463 L1095.5 683.463 L1094.94 683.463 L1094.39 683.463 L1093.83 683.463 L1093.27 683.463 L1092.71 683.463 L1092.15 683.463 L1091.59 683.463 L1091.03 683.463 L1090.47 683.463 L1089.91 683.463 L1089.35 683.463 L1088.79 683.463 L1088.23 683.463 L1087.67 683.463 L1087.12 683.463 L1086.56 683.463 L1086 683.463 L1085.44 683.463 L1084.88 683.463 L1084.32 683.463 L1083.76 683.463 L1083.2 683.463 L1082.64 683.463 L1082.08 683.463 L1081.52 683.463 L1080.96 683.463 L1080.4 683.463 L1079.85 683.463 L1079.29 683.463 L1078.73 683.463 L1078.17 683.463 L1077.61 683.463 L1077.05 683.463 L1076.49 683.463 L1075.93 683.463 L1075.37 683.463 L1074.81 683.463 L1074.25 683.463 L1073.69 683.463 L1073.13 683.463 L1072.57 683.463 L1072.02 683.463 L1071.46 683.463 L1070.9 683.463 L1070.34 683.463 L1069.78 683.463 L1069.22 683.463 L1068.66 683.463 L1068.1 683.463 L1067.54 683.463 L1066.98 683.463 L1066.42 683.463 L1065.86 683.463 L1065.3 683.463 L1064.75 683.463 L1064.19 683.463 L1063.63 683.463 L1063.07 683.463 L1062.51 683.463 L1061.95 683.463 L1061.39 683.463 L1060.83 683.463 L1060.27 683.463 L1059.71 683.463 L1059.15 683.463 L1058.59 683.463 L1058.03 683.463 L1057.48 683.463 L1056.92 683.463 L1056.36 683.463 L1055.8 683.463 L1055.24 683.463 L1054.68 683.463 L1054.12 683.463 L1053.56 683.463 L1053 683.463 L1052.44 683.463 L1051.88 683.463 L1051.32 683.463 L1050.76 683.463 L1050.2 683.463 L1049.65 683.463 L1049.09 683.463 L1048.53 683.463 L1047.97 683.463 L1047.41 683.463 L1046.85 683.463 L1046.29 683.463 L1045.73 683.463 L1045.17 683.463 L1044.61 683.463 L1044.05 683.463 L1043.49 683.463 L1042.93 683.463 L1042.38 683.463 L1041.82 683.463 L1041.26 683.463 L1040.7 683.463 L1040.14 683.463 L1039.58 683.463 L1039.02 683.463 L1038.46 683.463 L1037.9 683.463 L1037.34 683.463 L1036.78 683.463 L1036.22 683.463 L1035.66 683.463 L1035.1 683.463 L1034.55 683.463 L1033.99 683.463 L1033.43 683.463 L1032.87 683.463 L1032.31 683.463 L1031.75 683.463 L1031.19 683.463 L1030.63 683.463 L1030.07 683.463 L1029.51 683.463 L1028.95 683.463 L1028.39 683.463 L1027.83 683.463 L1027.28 683.463 L1026.72 683.463 L1026.16 683.463 L1025.6 683.463 L1025.04 683.463 L1024.48 683.463 L1023.92 683.463 L1023.36 683.463 L1022.8 683.463 L1022.24 683.463 L1021.68 683.463 L1021.12 683.463 L1020.56 683.463 L1020.01 683.463 L1019.45 683.463 L1018.89 683.463 L1018.33 683.463 L1017.77 683.463 L1017.21 683.463 L1016.65 683.463 L1016.09 683.463 L1015.53 683.463 L1014.97 683.463 L1014.41 683.463 L1013.85 683.463 L1013.29 683.463 L1012.73 683.463 L1012.18 683.463 L1011.62 683.463 L1011.06 683.463 L1010.5 683.463 L1009.94 683.463 L1009.38 683.463 L1008.82 683.463 L1008.26 683.463 L1007.7 683.463 L1007.14 683.463 L1006.58 683.463 L1006.02 683.463 L1005.46 683.463 L1004.91 683.463 L1004.35 683.463 L1003.79 683.463 L1003.23 683.463 L1002.67 683.463 L1002.11 683.463 L1001.55 683.463 L1000.99 683.463 L1000.43 683.463 L999.872 683.463 L999.313 683.463 L998.754 683.463 L998.194 683.463 L997.635 683.463 L997.076 683.463 L996.517 683.463 L995.957 683.463 L995.398 683.463 L994.839 683.463 L994.28 683.463 L993.72 683.463 L993.161 683.463 L992.602 683.463 L992.043 683.463 L991.483 683.463 L990.924 683.463 L990.365 683.463 L989.806 683.463 L989.246 683.463 L988.687 683.463 L988.128 683.463 L987.569 683.463 L987.009 683.463 L986.45 683.463 L985.891 683.463 L985.332 683.463 L984.772 683.463 L984.213 683.463 L983.654 683.463 L983.095 683.463 L982.535 683.463 L981.976 683.463 L981.417 683.463 L980.858 683.463 L980.298 683.463 L979.739 683.463 L979.18 683.463 L978.621 683.463 L978.061 683.463 L977.502 683.463 L976.943 683.463 L976.384 683.463 L975.824 683.463 L975.265 683.463 L974.706 683.463 L974.147 683.463 L973.587 683.463 L973.028 683.463 L972.469 683.463 L971.91 683.463 L971.35 683.463 L970.791 683.463 L970.232 683.463 L969.673 683.463 L969.113 683.463 L968.554 683.463 L967.995 683.463 L967.436 683.463 L966.876 683.463 L966.317 683.463 L965.758 683.463 L965.199 683.463 L964.639 683.463 L964.08 683.463 L963.521 683.463 L962.962 683.463 L962.402 683.463 L961.843 683.463 L961.284 683.463 L960.725 683.463 L960.165 683.463 L959.606 683.463 L959.047 683.463 L958.488 683.463 L957.928 683.463 L957.369 683.463 L956.81 683.463 L956.251 683.463 L955.691 683.463 L955.132 683.463 L954.573 683.463 L954.014 683.463 L953.454 683.463 L952.895 683.463 L952.336 683.463 L951.777 683.463 L951.217 683.463 L950.658 683.463 L950.099 683.463 L949.54 683.463 L948.98 683.463 L948.421 683.463 L947.862 683.463 L947.303 683.463 L946.743 683.463 L946.184 683.463 L945.625 683.463 L945.066 683.463 L944.506 683.463 L943.947 683.463 L943.388 683.463 L942.829 683.463 L942.269 683.463 L941.71 683.463 L941.151 683.463 L940.592 683.463 L940.032 683.463 L939.473 683.463 L938.914 683.463 L938.355 683.463 L937.795 683.463 L937.236 683.463 L936.677 683.463 L936.118 683.463 L935.558 683.463 L934.999 683.463 L934.44 683.463 L933.881 683.463 L933.321 683.463 L932.762 683.463 L932.203 683.463 L931.644 683.463 L931.084 683.463 L930.525 683.463 L929.966 683.463 L929.406 683.463 L928.847 683.463 L928.288 683.463 L927.729 683.463 L927.169 683.463 L926.61 683.463 L926.051 683.463 L925.492 683.463 L924.932 683.463 L924.373 683.463 L923.814 683.463 L923.255 683.463 L922.695 683.463 L922.136 683.463 L921.577 683.463 L921.018 683.463 L920.458 683.463 L919.899 683.463 L919.34 683.463 L918.781 683.463 L918.221 683.463 L917.662 683.463 L917.103 683.463 L916.544 683.463 L915.984 683.463 L915.425 683.463 L914.866 683.463 L914.307 683.463 L913.747 683.463 L913.188 683.463 L912.629 683.463 L912.07 683.463 L911.51 683.463 L910.951 683.463 L910.392 683.463 L909.833 683.463 L909.273 683.463 L908.714 683.463 L908.155 683.463 L907.596 683.463 L907.036 683.463 L906.477 683.463 L905.918 683.463 L905.359 683.463 L904.799 683.463 L904.24 683.463 L903.681 683.463 L903.122 683.463 L902.562 683.463 L902.003 683.463 L901.444 683.463 L900.885 683.463 L900.325 683.463 L899.766 683.463 L899.207 683.463 L898.648 683.463 L898.088 683.463 L897.529 683.463 L896.97 683.463 L896.411 683.463 L895.851 683.463 L895.292 683.463 L894.733 683.463 L894.174 683.463 L893.614 683.463 L893.055 683.463 L892.496 683.463 L891.937 683.463 L891.377 683.463 L890.818 683.463 L890.259 683.463 L889.7 683.463 L889.14 683.463 L888.581 683.463 L888.022 683.463 L887.463 683.463 L886.903 683.463 L886.344 683.463 L885.785 683.463 L885.226 683.463 L884.666 683.463 L884.107 683.463 L883.548 683.463 L882.989 683.463 L882.429 683.463 L881.87 683.463 L881.311 683.463 L880.752 683.463 L880.192 683.463 L879.633 683.463 L879.074 683.463 L878.515 683.463 L877.955 683.463 L877.396 683.463 L876.837 683.463 L876.278 683.463 L875.718 683.463 L875.159 683.463 L874.6 683.463 L874.041 683.463 L873.481 683.463 L872.922 683.463 L872.363 683.463 L871.804 683.463 L871.244 683.463 L870.685 683.463 L870.126 683.463 L869.567 683.463 L869.007 683.463 L868.448 683.463 L867.889 683.463 L867.33 683.463 L866.77 683.463 L866.211 683.463 L865.652 683.463 L865.093 683.463 L864.533 683.463 L863.974 683.463 L863.415 683.463 L862.856 683.463 L862.296 683.463 L861.737 683.463 L861.178 683.463 L860.619 683.463 L860.059 683.463 L859.5 683.463 L858.941 683.463 L858.382 683.463 L857.822 683.463 L857.263 683.463 L856.704 683.463 L856.145 683.463 L855.585 683.463 L855.026 683.463 L854.467 683.463 L853.908 683.463 L853.348 683.463 L852.789 683.463 L852.23 683.463 L851.671 683.463 L851.111 683.463 L850.552 683.463 L849.993 683.463 L849.434 683.463 L848.874 683.463 L848.315 683.463 L847.756 683.463 L847.197 683.463 L846.637 683.463 L846.078 683.463 L845.519 683.463 L844.96 683.463 L844.4 683.463 L843.841 683.463 L843.282 683.463 L842.723 683.463 L842.163 683.463 L841.604 683.463 L841.045 683.463 L840.486 683.463 L839.926 683.463 L839.367 683.463 L838.808 683.463 L838.249 683.463 L837.689 683.463 L837.13 683.463 L836.571 683.463 L836.012 683.463 L835.452 683.463 L834.893 683.463 L834.334 683.463 L833.775 683.463 L833.215 683.463 L832.656 683.463 L832.097 683.463 L831.538 683.463 L830.978 683.463 L830.419 683.463 L829.86 683.463 L829.301 683.463 L828.741 683.463 L828.182 683.463 L827.623 683.463 L827.064 683.463 L826.504 683.463 L825.945 683.463 L825.386 683.463 L824.827 683.463 L824.267 683.463 L823.708 683.463 L823.149 683.463 L822.59 683.463 L822.03 683.463 L821.471 683.463 L820.912 683.463 L820.353 683.463 L819.793 683.463 L819.234 683.463 L818.675 683.463 L818.116 683.463 L817.556 683.463 L816.997 683.463 L816.438 683.463 L815.879 683.463 L815.319 683.463 L814.76 683.463 L814.201 683.463 L813.642 683.463 L813.082 683.463 L812.523 683.463 L811.964 683.463 L811.405 683.463 L810.845 683.463 L810.286 683.463 L809.727 683.463 L809.168 683.463 L808.608 683.463 L808.049 683.463 L807.49 683.463 L806.931 683.463 L806.371 683.463 L805.812 683.463 L805.253 683.463 L804.693 683.463 L804.134 683.463 L803.575 683.463 L803.016 683.463 L802.456 683.463 L801.897 683.463 L801.338 683.463 L800.779 683.463 L800.219 683.463 L799.66 683.463 L799.101 683.463 L798.542 683.463 L797.982 683.463 L797.423 683.463 L796.864 683.463 L796.305 683.463 L795.745 683.463 L795.186 683.463 L794.627 683.463 L794.068 683.463 L793.508 683.463 L792.949 683.463 L792.39 683.463 L791.831 683.463 L791.271 683.463 L790.712 683.463 L790.153 683.463 L789.594 683.463 L789.034 683.463 L788.475 683.463 L787.916 683.463 L787.357 683.463 L786.797 683.463 L786.238 683.463 L785.679 683.463 L785.12 683.463 L784.56 683.463 L784.001 683.463 L783.442 683.463 L782.883 683.463 L782.323 683.463 L781.764 683.463 L781.205 683.463 L780.646 683.463 L780.086 683.463 L779.527 683.463 L778.968 683.463 L778.409 683.463 L777.849 683.463 L777.29 683.463 L776.731 683.463 L776.172 683.463 L775.612 683.463 L775.053 683.463 L774.494 683.463 L773.935 683.463 L773.375 683.463 L772.816 683.463 L772.257 683.463 L771.698 683.463 L771.138 683.463 L770.579 683.463 L770.02 683.463 L769.461 683.463 L768.901 683.463 L768.342 683.463 L767.783 683.463 L767.224 683.463 L766.664 683.463 L766.105 683.463 L765.546 683.463 L764.987 683.463 L764.427 683.463 L763.868 683.463 L763.309 683.463 L762.75 683.463 L762.19 683.463 L761.631 683.463 L761.072 683.463 L760.513 683.463 L759.953 683.463 L759.394 683.463 L758.835 683.463 L758.276 683.463 L757.716 683.463 L757.157 683.463 L756.598 683.463 L756.039 683.463 L755.479 683.463 L754.92 683.463 L754.361 683.463 L753.802 683.463 L753.242 683.463 L752.683 683.463 L752.124 683.463 L751.565 683.463 L751.005 683.463 L750.446 683.463 L749.887 683.463 L749.328 683.463 L748.768 683.463 L748.209 683.463 L747.65 683.463 L747.091 683.463 L746.531 683.463 L745.972 683.463 L745.413 683.463 L744.854 683.463 L744.294 683.463 L743.735 683.463 L743.176 683.463 L742.617 683.463 L742.057 683.463 L741.498 683.463 L740.939 683.463 L740.38 683.463 L739.82 683.463 L739.261 683.463 L738.702 683.463 L738.143 683.463 L737.583 683.463 L737.024 683.463 L736.465 683.463 L735.906 683.463 L735.346 683.463 L734.787 683.463 L734.228 683.463 L733.669 683.463 L733.109 683.463 L732.55 683.463 L731.991 683.463 L731.432 683.463 L730.872 683.463 L730.313 683.463 L729.754 683.463 L729.195 683.463 L728.635 683.463 L728.076 683.463 L727.517 683.463 L726.958 683.463 L726.398 683.463 L725.839 683.463 L725.28 683.463 L724.721 683.463 L724.161 683.463 L723.602 683.463 L723.043 683.463 L722.484 683.463 L721.924 683.463 L721.365 683.463 L720.806 683.463 L720.247 683.463  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip853)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.475 720.806,684.475 721.365,684.475 721.924,684.475 722.484,684.475 723.043,684.475 723.602,684.475 724.161,684.475 724.721,684.475 725.28,684.475 725.839,684.475 726.398,684.475 726.958,684.475 727.517,684.475 728.076,684.475 728.635,684.475 729.195,684.475 729.754,684.475 730.313,684.475 730.872,684.475 731.432,684.475 731.991,684.475 732.55,684.475 733.109,684.475 733.669,684.475 734.228,684.475 734.787,684.475 735.346,684.475 735.906,684.475 736.465,684.475 737.024,684.475 737.583,684.475 738.143,684.475 738.702,684.475 739.261,684.475 739.82,684.475 740.38,684.475 740.939,684.475 741.498,684.475 742.057,684.475 742.617,684.475 743.176,684.475 743.735,684.475 744.294,684.475 744.854,684.475 745.413,684.475 745.972,684.475 746.531,684.475 747.091,684.475 747.65,684.475 748.209,684.475 748.768,684.475 749.328,684.475 749.887,684.475 750.446,684.475 751.005,684.475 751.565,684.475 752.124,684.475 752.683,684.475 753.242,684.475 753.802,684.475 754.361,684.475 754.92,684.475 755.479,684.475 756.039,684.475 756.598,684.475 757.157,684.475 757.716,684.475 758.276,684.475 758.835,684.475 759.394,684.475 759.953,684.475 760.513,684.475 761.072,684.475 761.631,684.475 762.19,684.475 762.75,684.475 763.309,684.475 763.868,684.475 764.427,684.475 764.987,684.475 765.546,684.475 766.105,684.475 766.664,684.475 767.224,684.475 767.783,684.475 768.342,684.475 768.901,684.475 769.461,684.475 770.02,684.475 770.579,684.475 771.138,684.475 771.698,684.475 772.257,684.475 772.816,684.475 773.375,684.475 773.935,684.475 774.494,684.475 775.053,684.475 775.612,684.475 776.172,684.475 776.731,684.475 777.29,684.475 777.849,684.475 778.409,684.475 778.968,684.475 779.527,684.475 780.086,684.475 780.646,684.475 781.205,684.475 781.764,684.475 782.323,684.475 782.883,684.475 783.442,684.475 784.001,684.475 784.56,684.475 785.12,684.475 785.679,684.475 786.238,684.475 786.797,684.475 787.357,684.475 787.916,684.475 788.475,684.475 789.034,684.475 789.594,684.475 790.153,684.475 790.712,684.475 791.271,684.475 791.831,684.475 792.39,684.475 792.949,684.475 793.508,684.475 794.068,684.475 794.627,684.475 795.186,684.475 795.745,684.475 796.305,684.475 796.864,684.475 797.423,684.475 797.982,684.475 798.542,684.475 799.101,684.475 799.66,684.475 800.219,684.475 800.779,684.475 801.338,684.475 801.897,684.475 802.456,684.475 803.016,684.475 803.575,684.475 804.134,684.475 804.693,684.475 805.253,684.475 805.812,684.475 806.371,684.475 806.931,684.475 807.49,684.475 808.049,684.475 808.608,684.475 809.168,684.475 809.727,684.475 810.286,684.475 810.845,684.475 811.405,684.475 811.964,684.475 812.523,684.475 813.082,684.475 813.642,684.475 814.201,684.475 814.76,684.475 815.319,684.475 815.879,684.475 816.438,684.475 816.997,684.475 817.556,684.475 818.116,684.475 818.675,684.475 819.234,684.475 819.793,684.475 820.353,684.475 820.912,684.475 821.471,684.475 822.03,684.475 822.59,684.475 823.149,684.475 823.708,684.475 824.267,684.475 824.827,684.475 825.386,684.475 825.945,684.475 826.504,684.475 827.064,684.475 827.623,684.475 828.182,684.475 828.741,684.475 829.301,684.475 829.86,684.475 830.419,684.475 830.978,684.475 831.538,684.475 832.097,684.475 832.656,684.475 833.215,684.475 833.775,684.475 834.334,684.475 834.893,684.475 835.452,684.475 836.012,684.475 836.571,684.475 837.13,684.475 837.689,684.475 838.249,684.475 838.808,684.475 839.367,684.475 839.926,684.475 840.486,684.475 841.045,684.475 841.604,684.475 842.163,684.475 842.723,684.475 843.282,684.475 843.841,684.475 844.4,684.475 844.96,684.475 845.519,684.475 846.078,684.475 846.637,684.475 847.197,684.475 847.756,684.475 848.315,684.475 848.874,684.475 849.434,684.475 849.993,684.475 850.552,684.475 851.111,684.475 851.671,684.475 852.23,684.475 852.789,684.475 853.348,684.475 853.908,684.475 854.467,684.475 855.026,684.475 855.585,684.475 856.145,684.475 856.704,684.475 857.263,684.475 857.822,684.475 858.382,684.475 858.941,684.475 859.5,684.475 860.059,684.475 860.619,684.475 861.178,684.475 861.737,684.475 862.296,684.475 862.856,684.475 863.415,684.475 863.974,684.475 864.533,684.475 865.093,684.475 865.652,684.475 866.211,684.475 866.77,684.475 867.33,684.475 867.889,684.475 868.448,684.475 869.007,684.475 869.567,684.475 870.126,684.475 870.685,684.475 871.244,684.475 871.804,684.475 872.363,684.475 872.922,684.475 873.481,684.475 874.041,684.475 874.6,684.475 875.159,684.475 875.718,684.475 876.278,684.475 876.837,684.475 877.396,684.475 877.955,684.475 878.515,684.475 879.074,684.475 879.633,684.475 880.192,684.475 880.752,684.475 881.311,684.475 881.87,684.475 882.429,684.475 882.989,684.475 883.548,684.475 884.107,684.475 884.666,684.475 885.226,684.475 885.785,684.475 886.344,684.475 886.903,684.475 887.463,684.475 888.022,684.475 888.581,684.475 889.14,684.475 889.7,684.475 890.259,684.475 890.818,684.475 891.377,684.475 891.937,684.475 892.496,684.475 893.055,684.475 893.614,684.475 894.174,684.475 894.733,684.475 895.292,684.475 895.851,684.475 896.411,684.475 896.97,684.475 897.529,684.475 898.088,684.475 898.648,684.475 899.207,684.475 899.766,684.475 900.325,684.475 900.885,684.475 901.444,684.475 902.003,684.475 902.562,684.475 903.122,684.475 903.681,684.475 904.24,684.475 904.799,684.475 905.359,684.475 905.918,684.475 906.477,684.475 907.036,684.475 907.596,684.475 908.155,684.475 908.714,684.475 909.273,684.475 909.833,684.475 910.392,684.475 910.951,684.475 911.51,684.475 912.07,684.475 912.629,684.475 913.188,684.475 913.747,684.475 914.307,684.475 914.866,684.475 915.425,684.475 915.984,684.475 916.544,684.475 917.103,684.475 917.662,684.475 918.221,684.475 918.781,684.475 919.34,684.475 919.899,684.475 920.458,684.475 921.018,684.475 921.577,684.475 922.136,684.475 922.695,684.475 923.255,684.475 923.814,684.475 924.373,684.475 924.932,684.475 925.492,684.475 926.051,684.475 926.61,684.475 927.169,684.475 927.729,684.475 928.288,684.475 928.847,684.475 929.406,684.475 929.966,684.475 930.525,684.475 931.084,684.475 931.644,684.475 932.203,684.475 932.762,684.475 933.321,684.475 933.881,684.475 934.44,684.475 934.999,684.475 935.558,684.475 936.118,684.475 936.677,684.475 937.236,684.475 937.795,684.475 938.355,684.475 938.914,684.475 939.473,684.475 940.032,684.475 940.592,684.475 941.151,684.475 941.71,684.475 942.269,684.475 942.829,684.475 943.388,684.475 943.947,684.475 944.506,684.475 945.066,684.475 945.625,684.475 946.184,684.475 946.743,684.475 947.303,684.475 947.862,684.475 948.421,684.475 948.98,684.475 949.54,684.475 950.099,684.475 950.658,684.475 951.217,684.475 951.777,684.475 952.336,684.475 952.895,684.475 953.454,684.475 954.014,684.475 954.573,684.475 955.132,684.475 955.691,684.475 956.251,684.475 956.81,684.475 957.369,684.475 957.928,684.475 958.488,684.475 959.047,684.475 959.606,684.475 960.165,684.475 960.725,684.475 961.284,684.475 961.843,684.475 962.402,684.475 962.962,684.475 963.521,684.475 964.08,684.475 964.639,684.475 965.199,684.475 965.758,684.475 966.317,684.475 966.876,684.475 967.436,684.475 967.995,684.475 968.554,684.475 969.113,684.475 969.673,684.475 970.232,684.475 970.791,684.475 971.35,684.475 971.91,684.475 972.469,684.475 973.028,684.475 973.587,684.475 974.147,684.475 974.706,684.475 975.265,684.475 975.824,684.475 976.384,684.475 976.943,684.475 977.502,684.475 978.061,684.475 978.621,684.475 979.18,684.475 979.739,684.475 980.298,684.475 980.858,684.475 981.417,684.475 981.976,684.475 982.535,684.475 983.095,684.475 983.654,684.475 984.213,684.475 984.772,684.475 985.332,684.475 985.891,684.475 986.45,684.475 987.009,684.475 987.569,684.475 988.128,684.475 988.687,684.475 989.246,684.475 989.806,684.475 990.365,684.475 990.924,684.475 991.483,684.475 992.043,684.475 992.602,684.475 993.161,684.475 993.72,684.475 994.28,684.475 994.839,684.475 995.398,684.475 995.957,684.475 996.517,684.475 997.076,684.475 997.635,684.475 998.194,684.475 998.754,684.475 999.313,684.475 999.872,684.475 1000.43,684.475 1000.99,684.475 1001.55,684.475 1002.11,684.475 1002.67,684.475 1003.23,684.475 1003.79,684.475 1004.35,684.475 1004.91,684.475 1005.46,684.475 1006.02,684.475 1006.58,684.475 1007.14,684.475 1007.7,684.475 1008.26,684.475 1008.82,684.475 1009.38,684.475 1009.94,684.475 1010.5,684.475 1011.06,684.475 1011.62,684.475 1012.18,684.475 1012.73,684.475 1013.29,684.475 1013.85,684.475 1014.41,684.475 1014.97,684.475 1015.53,684.475 1016.09,684.475 1016.65,684.475 1017.21,684.475 1017.77,684.475 1018.33,684.475 1018.89,684.475 1019.45,684.475 1020.01,684.475 1020.56,684.475 1021.12,684.475 1021.68,684.475 1022.24,684.475 1022.8,684.475 1023.36,684.475 1023.92,684.475 1024.48,684.475 1025.04,684.475 1025.6,684.475 1026.16,684.475 1026.72,684.475 1027.28,684.475 1027.83,684.475 1028.39,684.475 1028.95,684.475 1029.51,684.475 1030.07,684.475 1030.63,684.475 1031.19,684.475 1031.75,684.475 1032.31,684.475 1032.87,684.475 1033.43,684.475 1033.99,684.475 1034.55,684.475 1035.1,684.475 1035.66,684.475 1036.22,684.475 1036.78,684.475 1037.34,684.475 1037.9,684.475 1038.46,684.475 1039.02,684.475 1039.58,684.475 1040.14,684.475 1040.7,684.475 1041.26,684.475 1041.82,684.475 1042.38,684.475 1042.93,684.475 1043.49,684.475 1044.05,684.475 1044.61,684.475 1045.17,684.475 1045.73,684.475 1046.29,684.475 1046.85,684.475 1047.41,684.475 1047.97,684.475 1048.53,684.475 1049.09,684.475 1049.65,684.475 1050.2,684.475 1050.76,684.475 1051.32,684.475 1051.88,684.475 1052.44,684.475 1053,684.475 1053.56,684.475 1054.12,684.475 1054.68,684.475 1055.24,684.475 1055.8,684.475 1056.36,684.475 1056.92,684.475 1057.48,684.475 1058.03,684.475 1058.59,684.475 1059.15,684.475 1059.71,684.475 1060.27,684.475 1060.83,684.475 1061.39,684.475 1061.95,684.475 1062.51,684.475 1063.07,684.475 1063.63,684.475 1064.19,684.475 1064.75,684.475 1065.3,684.475 1065.86,684.475 1066.42,684.475 1066.98,684.475 1067.54,684.475 1068.1,684.475 1068.66,684.475 1069.22,684.475 1069.78,684.475 1070.34,684.475 1070.9,684.475 1071.46,684.475 1072.02,684.475 1072.57,684.475 1073.13,684.475 1073.69,684.475 1074.25,684.475 1074.81,684.475 1075.37,684.475 1075.93,684.475 1076.49,684.475 1077.05,684.475 1077.61,684.475 1078.17,684.475 1078.73,684.475 1079.29,684.475 1079.85,684.475 1080.4,684.475 1080.96,684.475 1081.52,684.475 1082.08,684.475 1082.64,684.475 1083.2,684.475 1083.76,684.475 1084.32,684.475 1084.88,684.475 1085.44,684.475 1086,684.475 1086.56,684.475 1087.12,684.475 1087.67,684.475 1088.23,684.475 1088.79,684.475 1089.35,684.475 1089.91,684.475 1090.47,684.475 1091.03,684.475 1091.59,684.475 1092.15,684.475 1092.71,684.475 1093.27,684.475 1093.83,684.475 1094.39,684.475 1094.94,684.475 1095.5,684.475 1096.06,684.475 1096.62,684.475 1097.18,684.475 1097.74,684.475 1098.3,684.475 1098.86,684.475 1099.42,684.475 1099.98,684.475 1100.54,684.475 1101.1,684.475 1101.66,684.475 1102.22,684.475 1102.77,684.475 1103.33,684.475 1103.89,684.475 1104.45,684.475 1105.01,684.475 1105.57,684.475 1106.13,684.475 1106.69,684.475 1107.25,684.475 1107.81,684.475 1108.37,684.475 1108.93,684.475 1109.49,684.475 1110.04,684.475 1110.6,684.475 1111.16,684.475 1111.72,684.475 1112.28,684.475 1112.84,684.475 1113.4,684.475 1113.96,684.475 1114.52,684.475 1115.08,684.475 1115.64,684.475 1116.2,684.475 1116.76,684.475 1117.31,684.475 1117.87,684.475 1118.43,684.475 1118.99,684.475 1119.55,684.475 1120.11,684.475 1120.67,684.475 1121.23,684.475 1121.79,684.475 1122.35,684.475 1122.91,684.475 1123.47,684.475 1124.03,684.475 1124.59,684.475 1125.14,684.475 1125.7,684.475 1126.26,684.475 1126.82,684.475 1127.38,684.475 1127.94,684.475 1128.5,684.475 1129.06,684.475 1129.62,684.475 1130.18,684.475 1130.74,684.475 1131.3,684.475 1131.86,684.475 1132.41,684.475 1132.97,684.475 1133.53,684.475 1134.09,684.475 1134.65,684.475 1135.21,684.475 1135.77,684.475 1136.33,684.475 1136.89,684.475 1137.45,684.475 1138.01,684.475 1138.57,684.475 1139.13,684.475 1139.68,684.475 1140.24,684.475 1140.8,684.475 1141.36,684.475 1141.92,684.475 1142.48,684.475 1143.04,684.475 1143.6,684.475 1144.16,684.475 1144.72,684.475 1145.28,684.475 1145.84,684.475 1146.4,684.475 1146.96,684.475 1147.51,684.475 1148.07,684.475 1148.63,684.475 1149.19,684.475 1149.75,684.475 1150.31,684.475 1150.87,684.475 1151.43,684.475 1151.99,684.475 1152.55,684.475 1153.11,684.475 1153.67,684.475 1154.23,684.475 1154.78,684.475 1155.34,684.475 1155.9,684.475 1156.46,684.475 1157.02,684.475 1157.58,684.475 1158.14,684.475 1158.7,684.475 1159.26,684.475 1159.82,684.475 1160.38,684.475 1160.94,684.475 1161.5,684.475 1162.05,684.475 1162.61,684.475 1163.17,684.475 1163.73,684.475 1164.29,684.475 1164.85,684.475 1165.41,684.475 1165.97,684.475 1166.53,684.475 1167.09,684.475 1167.65,684.475 1168.21,684.475 1168.77,684.475 1169.33,684.475 1169.88,684.475 1170.44,684.475 1171,684.475 1171.56,684.475 1172.12,684.475 1172.68,684.475 1173.24,684.475 1173.8,684.475 1174.36,684.475 1174.92,684.475 1175.48,684.475 1176.04,684.475 1176.6,684.475 1177.15,684.475 1177.71,684.475 1178.27,684.475 1178.83,684.475 1179.39,684.475 1179.95,684.475 1180.51,684.475 1181.07,684.475 1181.63,684.475 1182.19,684.475 1182.75,684.475 1183.31,684.475 1183.87,684.475 1184.43,684.475 1184.98,684.475 1185.54,684.475 1186.1,684.475 1186.66,684.475 1187.22,684.475 1187.78,684.475 1188.34,684.475 1188.9,684.475 1189.46,684.475 1190.02,684.475 1190.58,684.475 1191.14,684.475 1191.7,684.475 1192.25,684.475 1192.81,684.475 1193.37,684.475 1193.93,684.475 1194.49,684.475 1195.05,684.475 1195.61,684.475 1196.17,684.475 1196.73,684.475 1197.29,684.475 1197.85,684.475 1198.41,684.475 1198.97,684.475 1199.52,684.475 1200.08,684.475 1200.64,684.475 1201.2,684.475 1201.76,684.475 1202.32,684.475 1202.88,684.475 1203.44,684.475 1204,684.475 1204.56,684.475 1205.12,684.475 1205.68,684.475 1206.24,684.475 1206.8,684.475 1207.35,684.475 1207.91,684.475 1208.47,684.475 1209.03,684.475 1209.59,684.475 1210.15,684.475 1210.71,684.475 1211.27,684.475 1211.83,684.475 1212.39,684.475 1212.95,684.475 1213.51,684.475 1214.07,684.475 1214.62,684.475 1215.18,684.475 1215.74,684.475 1216.3,684.475 1216.86,684.475 1217.42,684.475 1217.98,684.475 1218.54,684.475 1219.1,684.475 1219.66,684.475 1220.22,684.475 1220.78,684.475 1221.34,684.475 1221.89,684.475 1222.45,684.475 1223.01,684.475 1223.57,684.475 1224.13,684.475 1224.69,684.475 1225.25,684.475 1225.81,684.475 1226.37,684.475 1226.93,684.475 1227.49,684.475 1228.05,684.475 1228.61,684.475 1229.17,684.475 1229.72,684.475 1230.28,684.475 1230.84,684.475 1231.4,684.475 1231.96,684.475 1232.52,684.475 1233.08,684.475 1233.64,684.475 1234.2,684.475 1234.76,684.475 1235.32,684.475 1235.88,684.475 1236.44,684.475 1236.99,684.475 1237.55,684.475 1238.11,684.475 1238.67,684.475 1239.23,684.475 1239.79,684.475 1240.35,684.475 1240.91,684.475 1241.47,684.475 1242.03,684.475 1242.59,684.475 1243.15,684.475 1243.71,684.475 1244.26,684.475 1244.82,684.475 1245.38,684.475 1245.94,684.475 1246.5,684.475 1247.06,684.475 1247.62,684.475 1248.18,684.475 1248.74,684.475 1249.3,684.475 1249.86,684.475 1250.42,684.475 1250.98,684.475 1251.54,684.475 1252.09,684.475 1252.65,684.475 1253.21,684.475 1253.77,684.475 1254.33,684.475 1254.89,684.475 1255.45,684.475 1256.01,684.475 1256.57,684.475 1257.13,684.475 1257.69,684.475 1258.25,684.475 1258.81,684.475 1259.36,684.475 1259.92,684.475 1260.48,684.475 1261.04,684.475 1261.6,684.475 1262.16,684.475 1262.72,684.475 1263.28,684.475 1263.84,684.475 1264.4,684.475 1264.96,684.475 1265.52,684.475 1266.08,684.475 1266.63,684.475 1267.19,684.475 1267.75,684.475 1268.31,684.475 1268.87,684.475 1269.43,684.475 1269.99,684.475 1270.55,684.475 1271.11,684.475 1271.67,684.475 1272.23,684.475 1272.79,684.475 1273.35,684.475 1273.91,684.475 1274.46,684.475 1275.02,684.475 1275.58,684.475 1276.14,684.475 1276.7,684.475 1277.26,684.475 1277.82,684.475 1278.38,684.475 1278.94,684.475 1279.5,684.475 1280.06,684.475 1280.62,684.475 1281.18,684.475 1281.73,684.475 1282.29,684.475 1282.85,684.475 1283.41,684.475 1283.97,684.475 1284.53,684.475 1285.09,684.475 1285.65,684.475 1286.21,684.475 1286.77,684.475 1287.33,684.475 1287.89,684.475 1288.45,684.475 1289,684.475 1289.56,684.475 1290.12,684.475 1290.68,684.475 1291.24,684.475 1291.8,684.475 1292.36,684.475 1292.92,684.475 1293.48,684.475 1294.04,684.475 1294.6,684.475 1295.16,684.475 1295.72,684.475 1296.28,684.475 1296.83,684.475 1297.39,684.475 1297.95,684.475 1298.51,684.475 1299.07,684.475 1299.63,684.475 1300.19,684.475 1300.75,684.475 1301.31,684.475 1301.87,684.475 1302.43,684.475 1302.99,684.475 1303.55,684.475 1304.1,684.475 1304.66,684.475 1305.22,684.475 1305.78,684.475 1306.34,684.475 1306.9,684.475 1307.46,684.475 1308.02,684.475 1308.58,684.475 1309.14,684.475 1309.7,684.475 1310.26,684.475 1310.82,684.475 1311.38,684.475 1311.93,684.475 1312.49,684.475 1313.05,684.475 1313.61,684.475 1314.17,684.475 1314.73,684.475 1315.29,684.475 1315.85,684.475 1316.41,684.475 1316.97,684.475 1317.53,684.475 1318.09,684.475 1318.65,684.475 1319.2,684.475 1319.76,684.475 1320.32,684.475 1320.88,684.475 1321.44,684.475 1322,684.475 1322.56,684.475 1323.12,684.475 1323.68,684.475 1324.24,684.475 1324.8,684.475 1325.36,684.475 1325.92,684.475 1326.47,684.475 1327.03,684.475 1327.59,684.475 1328.15,684.475 1328.71,684.475 1329.27,684.475 1329.83,684.475 1330.39,684.475 1330.95,684.475 1331.51,684.475 1332.07,684.475 1332.63,684.475 1333.19,684.475 1333.75,684.475 1334.3,684.475 1334.86,684.475 1335.42,684.475 1335.98,684.475 1336.54,684.475 1337.1,684.475 1337.66,684.475 1338.22,684.475 1338.78,684.475 1339.34,684.475 1339.9,684.475 1340.46,684.475 1341.02,684.475 1341.57,684.475 1342.13,684.475 1342.69,684.475 1343.25,684.475 1343.81,684.475 1344.37,684.475 1344.93,684.475 1345.49,684.475 1346.05,684.475 1346.61,684.475 1347.17,684.475 1347.73,684.475 1348.29,684.475 1348.84,684.475 1349.4,684.475 1349.96,684.475 1350.52,684.475 1351.08,684.475 1351.64,684.475 1352.2,684.475 1352.76,684.475 1353.32,684.475 1353.88,684.475 1354.44,684.475 1355,684.475 1355.56,684.475 1356.12,684.475 1356.67,684.475 1357.23,684.475 1357.79,684.475 1358.35,684.475 1358.91,684.475 1359.47,684.475 1360.03,684.475 1360.59,684.475 1361.15,684.475 1361.71,684.475 1362.27,684.475 1362.83,684.475 1363.39,684.475 1363.94,684.475 1364.5,684.475 1365.06,684.475 1365.62,684.475 1366.18,684.475 1366.74,684.475 1367.3,684.475 1367.86,684.475 1368.42,684.475 1368.98,684.475 1369.54,684.475 1370.1,684.475 1370.66,684.475 1371.21,684.475 1371.77,684.475 1372.33,684.475 1372.89,684.475 1373.45,684.475 1374.01,684.475 1374.57,684.475 1375.13,684.475 1375.69,684.475 1376.25,684.475 1376.81,684.475 1377.37,684.475 1377.93,684.475 1378.49,684.475 1379.04,684.475 1379.6,684.475 1380.16,684.475 1380.72,684.475 1381.28,684.475 1381.84,684.475 1382.4,684.475 1382.96,684.475 1383.52,684.475 1384.08,684.475 1384.64,684.475 1385.2,684.475 1385.76,684.475 1386.31,684.475 1386.87,684.475 1387.43,684.475 1387.99,684.475 1388.55,684.475 1389.11,684.475 1389.67,684.475 1390.23,684.475 1390.79,684.475 1391.35,684.475 1391.91,684.475 1392.47,684.475 1393.03,684.475 1393.58,684.475 1394.14,684.475 1394.7,684.475 1395.26,684.475 1395.82,684.475 1396.38,684.475 1396.94,684.475 1397.5,684.475 1398.06,684.475 1398.62,684.475 1399.18,684.475 1399.74,684.475 1400.3,684.475 1400.86,684.475 1401.41,684.475 1401.97,684.475 1402.53,684.475 1403.09,684.475 1403.65,684.475 1404.21,684.475 1404.77,684.475 1405.33,684.475 1405.89,684.475 1406.45,684.475 1407.01,684.475 1407.57,684.475 1408.13,684.475 1408.68,684.475 1409.24,684.475 1409.8,684.475 1410.36,684.475 1410.92,684.475 1411.48,684.475 1412.04,684.475 1412.6,684.475 1413.16,684.475 1413.72,684.475 1414.28,684.475 1414.84,684.475 1415.4,684.475 1415.95,684.475 1416.51,684.475 1417.07,684.475 1417.63,684.475 1418.19,684.475 1418.75,684.475 1419.31,684.475 1419.87,684.475 1420.43,684.475 1420.99,684.475 1421.55,684.475 1422.11,684.475 1422.67,684.475 1423.23,684.475 1423.78,684.475 1424.34,684.475 1424.9,684.475 1425.46,684.475 1426.02,684.475 1426.58,684.475 1427.14,684.475 1427.7,684.475 1428.26,684.475 1428.82,684.475 1429.38,684.475 1429.94,684.475 1430.5,684.475 1431.05,684.475 1431.61,684.475 1432.17,684.475 1432.73,684.475 1433.29,684.475 1433.85,684.475 1434.41,684.475 1434.97,684.475 1435.53,684.475 1436.09,684.475 1436.65,684.475 1437.21,684.475 1437.77,684.475 1438.33,684.475 1438.88,684.475 1439.44,684.475 1440,684.475 1440.56,684.475 1441.12,684.475 1441.68,684.475 1442.24,684.475 1442.8,684.475 1443.36,684.475 1443.92,684.475 1444.48,684.475 1445.04,684.475 1445.6,684.475 1446.15,684.475 1446.71,684.475 1447.27,684.475 1447.83,684.475 1448.39,684.475 1448.95,684.475 1449.51,684.475 1450.07,684.475 1450.63,684.475 1451.19,684.475 1451.75,684.475 1452.31,684.475 1452.87,684.475 1453.42,684.475 1453.98,684.475 1454.54,684.475 1455.1,684.475 1455.66,684.475 1456.22,684.475 1456.78,684.475 1457.34,684.475 1457.9,684.475 1458.46,684.475 1459.02,684.475 1459.58,684.475 1460.14,684.475 1460.7,684.475 1461.25,684.475 1461.81,684.475 1462.37,684.475 1462.93,684.475 1463.49,684.475 1464.05,684.475 1464.61,684.475 1465.17,684.475 1465.73,684.475 1466.29,684.475 1466.85,684.475 1467.41,684.475 1467.97,684.475 1468.52,684.475 1469.08,684.475 1469.64,684.475 1470.2,684.475 1470.76,684.475 1471.32,684.475 1471.88,684.475 1472.44,684.475 1473,684.475 1473.56,684.475 1474.12,684.475 1474.68,684.475 1475.24,684.475 1475.79,684.475 1476.35,684.475 1476.91,684.475 1477.47,684.475 1478.03,684.475 1478.59,684.475 1479.15,684.475 1479.71,684.475 1480.27,684.475 1480.83,684.475 1481.39,684.475 1481.95,684.475 1482.51,684.475 1483.07,684.475 1483.62,684.475 1484.18,684.475 1484.74,684.475 1485.3,684.475 1485.86,684.475 1486.42,684.475 1486.98,684.475 1487.54,684.475 1488.1,684.475 1488.66,684.475 1489.22,684.475 1489.78,684.475 1490.34,684.475 1490.89,684.475 1491.45,684.475 1492.01,684.475 1492.57,684.475 1493.13,684.475 1493.69,684.475 1494.25,684.475 1494.81,684.475 1495.37,684.475 1495.93,684.475 1496.49,684.475 1497.05,684.475 1497.61,684.475 1498.16,684.475 1498.72,684.475 1499.28,684.475 1499.84,684.475 1500.4,684.475 1500.96,684.475 1501.52,684.475 1502.08,684.475 1502.64,684.475 1503.2,684.475 1503.76,684.475 1504.32,684.475 1504.88,684.475 1505.44,684.475 1505.99,684.475 1506.55,684.475 1507.11,684.475 1507.67,684.475 1508.23,684.475 1508.79,684.475 1509.35,684.475 1509.91,684.475 1510.47,684.475 1511.03,684.475 1511.59,684.475 1512.15,684.475 1512.71,684.475 1513.26,684.475 1513.82,684.475 1514.38,684.475 1514.94,684.475 1515.5,684.475 1516.06,684.475 1516.62,684.475 1517.18,684.475 1517.74,684.475 1518.3,684.475 1518.86,684.475 1519.42,684.475 1519.98,684.475 1520.53,684.475 1521.09,684.475 1521.65,684.475 1522.21,684.475 1522.77,684.475 1523.33,684.475 1523.89,684.475 1524.45,684.475 1525.01,684.475 1525.57,684.475 1526.13,684.475 1526.69,684.475 1527.25,684.475 1527.81,684.475 1528.36,684.475 1528.92,684.475 1529.48,684.475 1530.04,684.475 1530.6,684.475 1531.16,684.475 1531.72,684.475 1532.28,684.475 1532.84,684.475 1533.4,684.475 1533.96,684.475 1534.52,684.475 1535.08,684.475 1535.63,684.475 1536.19,684.475 1536.75,684.475 1537.31,684.475 1537.87,684.475 1538.43,684.475 1538.99,684.475 1539.55,684.475 1540.11,684.475 1540.67,684.475 1541.23,684.475 1541.79,684.475 1542.35,684.475 1542.9,684.475 1543.46,684.475 1544.02,684.475 1544.58,684.475 1545.14,684.475 1545.7,684.475 1546.26,684.475 1546.82,684.475 1547.38,684.475 1547.94,684.475 1548.5,684.475 1549.06,684.475 1549.62,684.475 1550.18,684.475 1550.73,684.475 1551.29,684.475 1551.85,684.475 1552.41,684.475 1552.97,684.475 1553.53,684.475 1554.09,684.475 1554.65,684.475 1555.21,684.475 1555.77,684.475 1556.33,684.475 1556.89,684.475 1557.45,684.475 1558,684.475 1558.56,684.475 1559.12,684.475 1559.68,684.475 1560.24,684.475 1560.8,684.475 1561.36,684.475 1561.92,684.475 1562.48,684.475 1563.04,684.475 1563.6,684.475 1564.16,684.475 1564.72,684.475 1565.28,684.475 1565.83,684.475 1566.39,684.475 1566.95,684.475 1567.51,684.475 1568.07,684.475 1568.63,684.475 1569.19,684.475 1569.75,684.475 1570.31,684.475 1570.87,684.475 1571.43,684.475 1571.99,684.475 1572.55,684.475 1573.1,684.475 1573.66,684.475 1574.22,684.475 1574.78,684.475 1575.34,684.475 1575.9,684.475 1576.46,684.475 1577.02,684.475 1577.58,684.475 1578.14,684.475 1578.7,684.475 1579.26,684.475 1579.82,684.475 1580.37,684.475 1580.93,684.475 1581.49,684.475 1582.05,684.475 1582.61,684.475 1583.17,684.475 1583.73,684.475 1584.29,684.475 1584.85,684.475 1585.41,684.475 1585.97,684.475 1586.53,684.475 1587.09,684.475 1587.65,684.475 1588.2,684.475 1588.76,684.475 1589.32,684.475 1589.88,684.475 1590.44,684.475 1591,684.475 1591.56,684.475 1592.12,684.475 1592.68,684.475 1593.24,684.475 1593.8,684.475 1594.36,684.475 1594.92,684.475 1595.47,684.475 1596.03,684.475 1596.59,684.475 1597.15,684.475 1597.71,684.475 1598.27,684.475 1598.83,684.475 1599.39,684.475 1599.95,684.475 1600.51,684.475 1601.07,684.475 1601.63,684.475 1602.19,684.475 1602.74,684.475 1603.3,684.475 1603.86,684.475 1604.42,684.475 1604.98,684.475 1605.54,684.475 1606.1,684.475 1606.66,684.475 1607.22,684.475 1607.78,684.475 1608.34,684.475 1608.9,684.475 1609.46,684.475 1610.02,684.475 1610.57,684.475 1611.13,684.475 1611.69,684.475 1612.25,684.475 1612.81,684.475 1613.37,684.475 1613.93,684.475 1614.49,684.475 1615.05,684.475 1615.61,684.475 1616.17,684.475 1616.73,684.475 1617.29,684.475 1617.84,684.475 1618.4,684.475 1618.96,684.475 1619.52,684.475 1620.08,684.475 1620.64,684.475 1621.2,684.475 1621.76,684.475 1622.32,684.475 1622.88,684.475 1623.44,684.475 1624,684.475 1624.56,684.475 1625.11,684.475 1625.67,684.475 1626.23,684.475 1626.79,684.475 1627.35,684.475 1627.91,684.475 1628.47,684.475 1629.03,684.475 1629.59,684.475 1630.15,684.475 1630.71,684.475 1631.27,684.475 1631.83,684.475 1632.39,684.475 1632.94,684.475 1633.5,684.475 1634.06,684.475 1634.62,684.475 1635.18,684.475 1635.74,684.475 1636.3,684.475 1636.86,684.475 1637.42,684.475 1637.98,684.475 1638.54,684.475 1639.1,684.475 1639.66,684.475 1640.21,684.475 1640.77,684.475 1641.33,684.475 1641.89,684.475 1642.45,684.475 1643.01,684.475 1643.57,684.475 1644.13,684.475 1644.69,684.475 1645.25,684.475 1645.81,684.475 1646.37,684.475 1646.93,684.475 1647.48,684.475 1648.04,684.475 1648.6,684.475 1649.16,684.475 1649.72,684.475 1650.28,684.475 1650.84,684.475 1651.4,684.475 1651.96,684.475 1652.52,684.475 1653.08,684.475 1653.64,684.475 1654.2,684.475 1654.76,684.475 1655.31,684.475 1655.87,684.475 1656.43,684.475 1656.99,684.475 1657.55,684.475 1658.11,684.475 1658.67,684.475 1659.23,684.475 1659.79,684.475 1660.35,684.475 1660.91,684.475 1661.47,684.475 1662.03,684.475 1662.58,684.475 1663.14,684.475 1663.7,684.475 1664.26,684.475 1664.82,684.475 1665.38,684.475 1665.94,684.475 1666.5,684.475 1667.06,684.475 1667.62,684.475 1668.18,684.475 1668.74,684.475 1669.3,684.475 1669.85,684.475 1670.41,684.475 1670.97,684.475 1671.53,684.475 1672.09,684.475 1672.65,684.475 1673.21,684.475 1673.77,684.475 1674.33,684.475 1674.89,684.475 1675.45,684.475 1676.01,684.475 1676.57,684.475 1677.13,684.475 1677.68,684.475 1678.24,684.475 1678.8,684.475 1679.36,684.475 1679.92,684.475 1680.48,684.475 1681.04,684.475 1681.6,684.475 1682.16,684.475 1682.72,684.475 1683.28,684.475 1683.84,684.475 1684.4,684.475 1684.95,684.475 1685.51,684.475 1686.07,684.475 1686.63,684.475 1687.19,684.475 1687.75,684.475 1688.31,684.475 1688.87,684.475 1689.43,684.475 1689.99,684.475 1690.55,684.475 1691.11,684.475 1691.67,684.475 1692.23,684.475 1692.78,684.475 1693.34,684.475 1693.9,684.475 1694.46,684.475 1695.02,684.475 1695.58,684.475 1696.14,684.475 1696.7,684.475 1697.26,684.475 1697.82,684.475 1698.38,684.475 1698.94,684.475 1699.5,684.475 1700.05,684.475 1700.61,684.475 1701.17,684.475 1701.73,684.475 1702.29,684.475 1702.85,684.475 1703.41,684.475 1703.97,684.475 1704.53,684.475 1705.09,684.475 1705.65,684.475 1706.21,684.475 1706.77,684.475 1707.32,684.475 1707.88,684.475 1708.44,684.475 1709,684.475 1709.56,684.475 1710.12,684.475 1710.68,684.475 1711.24,684.475 1711.8,684.475 1712.36,684.475 1712.92,684.475 1713.48,684.475 1714.04,684.475 1714.6,684.475 1715.15,684.475 1715.71,684.475 1716.27,684.475 1716.83,684.475 1717.39,684.475 1717.95,684.475 1718.51,684.475 1719.07,684.475 1719.63,684.475 1720.19,684.475 1720.75,684.475 1721.31,684.475 1721.87,684.475 1722.42,684.475 1722.98,684.475 1723.54,684.475 1724.1,684.475 1724.66,684.475 1725.22,684.475 1725.78,684.475 1726.34,684.475 1726.9,684.475 1727.46,684.475 1728.02,684.475 1728.58,684.475 1729.14,684.475 1729.69,684.475 1730.25,684.475 1730.81,684.475 1731.37,684.475 1731.93,684.475 1732.49,684.475 1733.05,684.475 1733.61,684.475 1734.17,684.475 1734.73,684.475 1735.29,684.475 1735.85,684.475 1736.41,684.475 1736.97,684.475 1737.52,684.475 1738.08,684.475 1738.64,684.475 1739.2,684.475 1739.76,684.475 1740.32,684.475 1740.88,684.475 1741.44,684.475 1742,684.475 1742.56,684.475 1743.12,684.475 1743.68,684.475 1744.24,684.475 1744.79,684.475 1745.35,684.475 1745.91,684.475 1746.47,684.475 1747.03,684.475 1747.59,684.475 1748.15,684.475 1748.71,684.475 1749.27,684.475 1749.83,684.475 1750.39,684.475 1750.95,684.475 1751.51,684.475 1752.06,684.475 1752.62,684.475 1753.18,684.475 1753.74,684.475 1754.3,684.475 1754.86,684.475 1755.42,684.475 1755.98,684.475 1756.54,684.475 1757.1,684.475 1757.66,684.475 1758.22,684.475 1758.78,684.475 1759.34,684.475 1759.89,684.475 1760.45,684.475 1761.01,684.475 1761.57,684.475 1762.13,684.475 1762.69,684.475 1763.25,684.475 1763.81,684.475 1764.37,684.475 1764.93,684.475 1765.49,684.475 1766.05,684.475 1766.61,684.475 1767.16,684.475 1767.72,684.475 1768.28,684.475 1768.84,684.475 1769.4,684.475 1769.96,684.475 1770.52,684.475 1771.08,684.475 1771.64,684.475 1772.2,684.475 1772.76,684.475 1773.32,684.475 1773.88,684.475 1774.43,684.475 1774.99,684.475 1775.55,684.475 1776.11,684.475 1776.67,684.475 1777.23,684.475 1777.79,684.475 1778.35,684.475 1778.91,684.475 1779.47,684.475 1780.03,684.475 1780.59,684.475 1781.15,684.475 1781.71,684.475 1782.26,684.475 1782.82,684.475 1783.38,684.475 1783.94,684.475 1784.5,684.475 1785.06,684.475 1785.62,684.475 1786.18,684.475 1786.74,684.475 1787.3,684.475 1787.86,684.475 1788.42,684.475 1788.98,684.475 1789.53,684.475 1790.09,684.475 1790.65,684.475 1791.21,684.475 1791.77,684.475 1792.33,684.475 1792.89,684.475 1793.45,684.475 1794.01,684.475 1794.57,684.475 1795.13,684.475 1795.69,684.475 1796.25,684.475 1796.8,684.475 1797.36,684.475 1797.92,684.475 1798.48,684.475 1799.04,684.475 1799.6,684.475 1800.16,684.475 1800.72,684.475 1801.28,684.475 1801.84,684.475 1802.4,684.475 1802.96,684.475 1803.52,684.475 1804.08,684.475 1804.63,684.475 1805.19,684.475 1805.75,684.475 1806.31,684.475 1806.87,684.475 1807.43,684.475 1807.99,684.475 1808.55,684.475 1809.11,684.475 1809.67,684.475 1810.23,684.475 1810.79,684.475 1811.35,684.475 1811.9,684.475 1812.46,684.475 1813.02,684.475 1813.58,684.475 1814.14,684.475 1814.7,684.475 1815.26,684.475 1815.82,684.475 1816.38,684.475 1816.94,684.475 1817.5,684.475 1818.06,684.475 1818.62,684.475 1819.18,684.475 1819.73,684.475 1820.29,684.475 1820.85,684.475 1821.41,684.475 1821.97,684.475 1822.53,684.475 1823.09,684.475 1823.65,684.475 1824.21,684.475 1824.77,684.475 1825.33,684.475 1825.89,684.475 1826.45,684.475 1827,684.475 1827.56,684.475 1828.12,684.475 1828.68,684.475 1829.24,684.475 1829.8,684.475 1830.36,684.475 1830.92,684.475 1831.48,684.475 1832.04,684.475 1832.6,684.475 1833.16,684.475 1833.72,684.475 1834.27,684.475 1834.83,684.475 1835.39,684.475 1835.95,684.475 1836.51,684.475 1837.07,684.475 1837.63,684.475 1838.19,684.475 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.026454827646584 ± 0.022005920033379006\nProjected Energy: -4.0195674862655375 ± (0.004846430892879283, 0.005097816028727387)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.15241</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5247e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.1962e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.597e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.857e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.153e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3586e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621788\n  0.15789998694608975\n  0.8767114411781343\n  1.5305929970973304\n  1.583573261186733\n  3.072870330325868\n  3.1256726539518365\n  4.8621072215621695\n  6.260694850380595\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
