var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2133206356638052 ± 0.0014298631848206661\n   G2(1) = 0.9179043332772086 ± 0.0006198296439296585\n   G2(2) = 0.9803300514104727 ± 0.0006080081379463247\n   G2(3) = 0.9902105949608319 ± 0.0008410606861380027\n   G2(4) = 0.9803300514104727 ± 0.0006080081379463247\n   G2(5) = 0.9179043332772086 ± 0.0006198296439296585\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.073247708298921 ± 0.1391610335323714\n   Replica 2: -4.007670266572159 ± 0.14107908241610068\n   Replica 3: -4.039885013218581 ± 0.13266269312490628\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.18 2211.02,1003.18 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.522 2211.02,745.522 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.866 2211.02,487.866 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.209 2211.02,230.209 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.18 423.181,1003.18 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.522 423.181,745.522 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.866 423.181,487.866 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.209 423.181,230.209 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M290.043 1016.52 L306.363 1016.52 L306.363 1020.46 L284.418 1020.46 L284.418 1016.52 Q287.08 1013.77 291.664 1009.14 Q296.27 1004.49 297.451 1003.14 Q299.696 1000.62 300.576 998.885 Q301.478 997.125 301.478 995.435 Q301.478 992.681 299.534 990.945 Q297.613 989.209 294.511 989.209 Q292.312 989.209 289.858 989.973 Q287.427 990.736 284.65 992.287 L284.65 987.565 Q287.474 986.431 289.927 985.852 Q292.381 985.273 294.418 985.273 Q299.789 985.273 302.983 987.959 Q306.177 990.644 306.177 995.135 Q306.177 997.264 305.367 999.185 Q304.58 1001.08 302.474 1003.68 Q301.895 1004.35 298.793 1007.57 Q295.691 1010.76 290.043 1016.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 985.898 L334.58 985.898 L334.58 989.834 L320.506 989.834 L320.506 998.306 Q321.524 997.959 322.543 997.797 Q323.562 997.611 324.58 997.611 Q330.367 997.611 333.747 1000.78 Q337.126 1003.95 337.126 1009.37 Q337.126 1014.95 333.654 1018.05 Q330.182 1021.13 323.862 1021.13 Q321.687 1021.13 319.418 1020.76 Q317.173 1020.39 314.765 1019.65 L314.765 1014.95 Q316.849 1016.08 319.071 1016.64 Q321.293 1017.19 323.77 1017.19 Q327.774 1017.19 330.112 1015.09 Q332.45 1012.98 332.45 1009.37 Q332.45 1005.76 330.112 1003.65 Q327.774 1001.55 323.77 1001.55 Q321.895 1001.55 320.02 1001.96 Q318.168 1002.38 316.224 1003.26 L316.224 985.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 988.977 Q352.728 988.977 350.899 992.542 Q349.094 996.084 349.094 1003.21 Q349.094 1010.32 350.899 1013.88 Q352.728 1017.43 356.339 1017.43 Q359.973 1017.43 361.779 1013.88 Q363.608 1010.32 363.608 1003.21 Q363.608 996.084 361.779 992.542 Q359.973 988.977 356.339 988.977 M356.339 985.273 Q362.149 985.273 365.205 989.88 Q368.284 994.463 368.284 1003.21 Q368.284 1011.94 365.205 1016.55 Q362.149 1021.13 356.339 1021.13 Q350.529 1021.13 347.45 1016.55 Q344.395 1011.94 344.395 1003.21 Q344.395 994.463 347.45 989.88 Q350.529 985.273 356.339 985.273 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M286.062 728.242 L304.418 728.242 L304.418 732.177 L290.344 732.177 L290.344 740.649 Q291.363 740.302 292.381 740.14 Q293.4 739.955 294.418 739.955 Q300.205 739.955 303.585 743.126 Q306.964 746.298 306.964 751.714 Q306.964 757.293 303.492 760.395 Q300.02 763.473 293.701 763.473 Q291.525 763.473 289.256 763.103 Q287.011 762.733 284.603 761.992 L284.603 757.293 Q286.687 758.427 288.909 758.983 Q291.131 759.538 293.608 759.538 Q297.613 759.538 299.951 757.432 Q302.288 755.325 302.288 751.714 Q302.288 748.103 299.951 745.997 Q297.613 743.89 293.608 743.89 Q291.733 743.89 289.858 744.307 Q288.006 744.724 286.062 745.603 L286.062 728.242 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 731.321 Q322.566 731.321 320.737 734.886 Q318.932 738.427 318.932 745.557 Q318.932 752.663 320.737 756.228 Q322.566 759.77 326.177 759.77 Q329.811 759.77 331.617 756.228 Q333.446 752.663 333.446 745.557 Q333.446 738.427 331.617 734.886 Q329.811 731.321 326.177 731.321 M326.177 727.617 Q331.987 727.617 335.043 732.224 Q338.122 736.807 338.122 745.557 Q338.122 754.284 335.043 758.89 Q331.987 763.473 326.177 763.473 Q320.367 763.473 317.288 758.89 Q314.233 754.284 314.233 745.557 Q314.233 736.807 317.288 732.224 Q320.367 727.617 326.177 727.617 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 731.321 Q352.728 731.321 350.899 734.886 Q349.094 738.427 349.094 745.557 Q349.094 752.663 350.899 756.228 Q352.728 759.77 356.339 759.77 Q359.973 759.77 361.779 756.228 Q363.608 752.663 363.608 745.557 Q363.608 738.427 361.779 734.886 Q359.973 731.321 356.339 731.321 M356.339 727.617 Q362.149 727.617 365.205 732.224 Q368.284 736.807 368.284 745.557 Q368.284 754.284 365.205 758.89 Q362.149 763.473 356.339 763.473 Q350.529 763.473 347.45 758.89 Q344.395 754.284 344.395 745.557 Q344.395 736.807 347.45 732.224 Q350.529 727.617 356.339 727.617 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M284.835 470.586 L307.057 470.586 L307.057 472.576 L294.511 505.146 L289.627 505.146 L301.432 474.521 L284.835 474.521 L284.835 470.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 470.586 L334.58 470.586 L334.58 474.521 L320.506 474.521 L320.506 482.993 Q321.524 482.646 322.543 482.484 Q323.562 482.299 324.58 482.299 Q330.367 482.299 333.747 485.47 Q337.126 488.641 337.126 494.058 Q337.126 499.637 333.654 502.738 Q330.182 505.817 323.862 505.817 Q321.687 505.817 319.418 505.447 Q317.173 505.076 314.765 504.336 L314.765 499.637 Q316.849 500.771 319.071 501.326 Q321.293 501.882 323.77 501.882 Q327.774 501.882 330.112 499.775 Q332.45 497.669 332.45 494.058 Q332.45 490.447 330.112 488.34 Q327.774 486.234 323.77 486.234 Q321.895 486.234 320.02 486.65 Q318.168 487.067 316.224 487.947 L316.224 470.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 473.664 Q352.728 473.664 350.899 477.229 Q349.094 480.771 349.094 487.9 Q349.094 495.007 350.899 498.572 Q352.728 502.113 356.339 502.113 Q359.973 502.113 361.779 498.572 Q363.608 495.007 363.608 487.9 Q363.608 480.771 361.779 477.229 Q359.973 473.664 356.339 473.664 M356.339 469.961 Q362.149 469.961 365.205 474.567 Q368.284 479.151 368.284 487.9 Q368.284 496.627 365.205 501.234 Q362.149 505.817 356.339 505.817 Q350.529 505.817 347.45 501.234 Q344.395 496.627 344.395 487.9 Q344.395 479.151 347.45 474.567 Q350.529 469.961 356.339 469.961 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M256.664 243.554 L264.303 243.554 L264.303 217.189 L255.992 218.855 L255.992 214.596 L264.256 212.929 L268.932 212.929 L268.932 243.554 L276.571 243.554 L276.571 247.489 L256.664 247.489 L256.664 243.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M296.015 216.008 Q292.404 216.008 290.576 219.573 Q288.77 223.115 288.77 230.244 Q288.77 237.351 290.576 240.915 Q292.404 244.457 296.015 244.457 Q299.65 244.457 301.455 240.915 Q303.284 237.351 303.284 230.244 Q303.284 223.115 301.455 219.573 Q299.65 216.008 296.015 216.008 M296.015 212.304 Q301.826 212.304 304.881 216.911 Q307.96 221.494 307.96 230.244 Q307.96 238.971 304.881 243.577 Q301.826 248.161 296.015 248.161 Q290.205 248.161 287.127 243.577 Q284.071 238.971 284.071 230.244 Q284.071 221.494 287.127 216.911 Q290.205 212.304 296.015 212.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 216.008 Q322.566 216.008 320.737 219.573 Q318.932 223.115 318.932 230.244 Q318.932 237.351 320.737 240.915 Q322.566 244.457 326.177 244.457 Q329.811 244.457 331.617 240.915 Q333.446 237.351 333.446 230.244 Q333.446 223.115 331.617 219.573 Q329.811 216.008 326.177 216.008 M326.177 212.304 Q331.987 212.304 335.043 216.911 Q338.122 221.494 338.122 230.244 Q338.122 238.971 335.043 243.577 Q331.987 248.161 326.177 248.161 Q320.367 248.161 317.288 243.577 Q314.233 238.971 314.233 230.244 Q314.233 221.494 317.288 216.911 Q320.367 212.304 326.177 212.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 216.008 Q352.728 216.008 350.899 219.573 Q349.094 223.115 349.094 230.244 Q349.094 237.351 350.899 240.915 Q352.728 244.457 356.339 244.457 Q359.973 244.457 361.779 240.915 Q363.608 237.351 363.608 230.244 Q363.608 223.115 361.779 219.573 Q359.973 216.008 356.339 216.008 M356.339 212.304 Q362.149 212.304 365.205 216.911 Q368.284 221.494 368.284 230.244 Q368.284 238.971 365.205 243.577 Q362.149 248.161 356.339 248.161 Q350.529 248.161 347.45 243.577 Q344.395 238.971 344.395 230.244 Q344.395 221.494 347.45 216.911 Q350.529 212.304 356.339 212.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.209 4017.76,230.209 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.74 461.669,1245 462.238,1243.14 462.806,1242.25 463.375,1241.26 463.943,1240.18 464.511,1239 465.08,1237.7 465.648,1236.31 466.216,1234.81 466.785,1233.18 467.353,1231.42 467.921,1227.47 468.49,1224.38 469.058,1222.2 469.626,1219.89 470.195,1217.41 470.763,1213.74 471.331,1210.93 471.9,1207.96 472.468,1204.8 473.036,1201.46 473.605,1196.91 474.173,1192.08 474.741,1188.12 475.31,1182.97 475.878,1178.51 476.446,1172.84 477.015,1167.04 477.583,1162.05 478.152,1155.78 478.72,1148.27 479.288,1141.4 479.857,1135.37 480.425,1127.97 480.993,1120.47 481.562,1113.68 482.13,1106.72 482.698,1099.5 483.267,1092.22 483.835,1083.67 484.403,1074.91 484.972,1064.77 485.54,1054.31 486.108,1044.85 486.677,1034.31 487.245,1025.74 487.813,1017 488.382,1008.14 488.95,998.954 489.518,987.64 490.087,978.108 490.655,968.519 491.224,957.686 491.792,947.852 492.36,937.842 492.929,926.866 493.497,913.746 494.065,902.815 494.634,892.777 495.202,881.75 495.77,870.699 496.339,859.668 496.907,849.732 497.475,837.676 498.044,826.659 498.612,814.786 499.18,805.226 499.749,792.368 500.317,782.764 500.885,770.135 501.454,759.715 502.022,748.223 502.59,736.923 503.159,724.697 503.727,714.818 504.295,704.976 504.864,695.401 505.432,684.732 506.001,676.302 506.569,665.741 507.137,655.397 507.706,647.147 508.274,635.844 508.842,625.967 509.411,617.186 509.979,606.354 510.547,597.788 511.116,589.541 511.684,582.531 512.252,572.296 512.821,562.406 513.389,551.632 513.957,544.344 514.526,536.126 515.094,530.163 515.662,524.167 516.231,516.292 516.799,508.532 517.367,502.972 517.936,497.452 518.504,492.072 519.072,486.751 519.641,480.399 520.209,473.057 520.778,465.014 521.346,460.281 521.914,453.51 522.483,449.132 523.051,444.712 523.619,439.171 524.188,432.814 524.756,427.648 525.324,422.702 525.893,416.953 526.461,413.157 527.029,409.545 527.598,404.959 528.166,400.474 528.734,394.034 529.303,389.926 529.871,385.975 530.439,378.809 531.008,376.261 531.576,373.746 532.144,366.119 532.713,363.011 533.281,359.909 533.85,356.86 534.418,353.686 534.986,350.673 535.555,348.563 536.123,343.535 536.691,339.816 537.26,338.547 537.828,333.845 538.396,331.361 538.965,329.05 539.533,327.737 540.101,325.366 540.67,324.288 541.238,322.89 541.806,320.706 542.375,318.187 542.943,315.073 543.511,311.186 544.08,310.356 544.648,309.477 545.216,309.742 545.785,309.921 546.353,307.705 546.921,305.578 547.49,301.469 548.058,300.475 548.627,300.81 549.195,299.831 549.763,297.933 550.332,296.244 550.9,295.467 551.468,293.52 552.037,291.501 552.605,289.911 553.173,287.265 553.742,282.513 554.31,279.183 554.878,279.167 555.447,280.173 556.015,278.967 556.583,278.906 557.152,276.478 557.72,277.446 558.288,277.197 558.857,277.279 559.425,276.095 559.993,274.644 560.562,273.51 561.13,273.415 561.698,272.395 562.267,273.369 562.835,271.202 563.404,268.988 563.972,267.796 564.54,267.644 565.109,269.803 565.677,268.625 566.245,269.5 566.814,272.472 567.382,271.858 567.95,272.439 568.519,272.83 569.087,272.153 569.655,272.403 570.224,271.611 570.792,272.172 571.36,269.544 571.929,267.888 572.497,266.165 573.065,266.911 573.634,266.291 574.202,263.762 574.77,263.528 575.339,263.055 575.907,261.734 576.476,260.316 577.044,257.829 577.612,258.525 578.181,258.437 578.749,262.202 579.317,262.76 579.886,262.36 580.454,258.69 581.022,257.402 581.591,255.186 582.159,255.007 582.727,255.069 583.296,254.702 583.864,253.345 584.432,254.212 585.001,253.823 585.569,252.579 586.137,253.246 586.706,252.166 587.274,252.988 587.842,250.699 588.411,248.68 588.979,248.835 589.547,250.816 590.116,249.642 590.684,245.387 591.253,244.69 591.821,245.729 592.389,243.783 592.958,243.144 593.526,244.655 594.094,244.772 594.663,244.957 595.231,243.091 595.799,242.508 596.368,243.086 596.936,240.292 597.504,240.777 598.073,241.217 598.641,242.561 599.209,240.866 599.778,241.4 600.346,240.619 600.914,240.853 601.483,241.457 602.051,241.678 602.619,242.84 603.188,244.074 603.756,246.19 604.325,245.102 604.893,245.219 605.461,245.2 606.03,246.175 606.598,246.133 607.166,246.959 607.735,245.701 608.303,245.622 608.871,246.448 609.44,247.228 610.008,247.013 610.576,245.656 611.145,245.445 611.713,244.192 612.281,245.003 612.85,247.009 613.418,245.449 613.986,245.092 614.555,244.946 615.123,244.639 615.691,244.208 616.26,242.778 616.828,241.693 617.396,241.625 617.965,241.468 618.533,240.251 619.102,240.364 619.67,239.247 620.238,236.202 620.807,235.631 621.375,235.073 621.943,232.403 622.512,232.033 623.08,233.712 623.648,231.175 624.217,231.932 624.785,233.751 625.353,233.202 625.922,231.861 626.49,232.493 627.058,233.967 627.627,234.608 628.195,234.032 628.763,236.749 629.332,237.981 629.9,239.221 630.468,239.247 631.037,238.351 631.605,237.393 632.173,236.605 632.742,237.906 633.31,236.898 633.879,238.196 634.447,238.355 635.015,236.585 635.584,234.727 636.152,232.977 636.72,232.416 637.289,232.697 637.857,232.364 638.425,234.103 638.994,236.678 639.562,237.998 640.13,238.274 640.699,238.336 641.267,238.225 641.835,241.412 642.404,240.906 642.972,240.718 643.54,240.569 644.109,240.498 644.677,237.062 645.245,238.24 645.814,236.244 646.382,235.452 646.951,233.833 647.519,234.073 648.087,234.301 648.656,235.779 649.224,235.872 649.792,234.887 650.361,234.983 650.929,233.479 651.497,231.804 652.066,231.429 652.634,231.849 653.202,234.196 653.771,234.542 654.339,234.725 654.907,234.201 655.476,232.368 656.044,231.647 656.612,232.086 657.181,233.482 657.749,234.678 658.317,234.926 658.886,234.286 659.454,232.613 660.022,233.02 660.591,233.454 661.159,233.902 661.728,235.515 662.296,234.708 662.864,235.884 663.433,235.071 664.001,236.237 664.569,235.419 665.138,234.734 665.706,235.968 666.274,236.931 666.843,239.097 667.411,238.071 667.979,238.817 668.548,238.637 669.116,238.591 669.684,237.577 670.253,234.606 670.821,233.787 671.389,234.002 671.958,235.395 672.526,233.558 673.094,234.789 673.663,233.944 674.231,233.051 674.799,234.265 675.368,234.546 675.936,232.838 676.505,233.244 677.073,233.624 677.641,233.005 678.21,232.56 678.778,232.973 679.346,233.623 679.915,232.797 680.483,233.25 681.051,233.779 681.62,233.054 682.188,232.567 682.756,232.783 683.325,233.954 683.893,236.42 684.461,237.453 685.03,234.516 685.598,233.595 686.166,231.911 686.735,229.338 687.303,230.835 687.871,231.336 688.44,233.931 689.008,235.131 689.577,236.124 690.145,235.899 690.713,239.082 691.282,237.872 691.85,236.874 692.418,237.929 692.987,235.852 693.555,234.876 694.123,234.926 694.692,234.08 695.26,233.281 695.828,231.636 696.397,229.842 696.965,231.249 697.533,230.551 698.102,232.16 698.67,232.584 699.238,231.84 699.807,232.046 700.375,234.614 700.943,234.799 701.512,234.806 702.08,234.895 702.648,234.901 703.217,235.907 703.785,238.159 704.354,237.854 704.922,238.745 705.49,238.542 706.059,238.223 706.627,236.02 707.195,237.036 707.764,236.13 708.332,236.355 708.9,237.349 709.469,236.287 710.037,238.053 710.605,237.785 711.174,238.582 711.742,236.408 712.31,234.364 712.879,234.207 713.447,235.291 714.015,236.124 714.584,235.711 715.152,234.515 715.72,235.605 716.289,235.643 716.857,235.685 717.425,237.418 717.994,237.157 718.562,238.008 719.131,237.72 719.699,235.371 720.267,234.359 720.836,234.464 721.404,232.241 721.972,232.24 722.541,236.783 723.109,234.419 723.677,234.535 724.246,232.369 724.814,231.387 725.382,228.343 725.951,227.559 726.519,227.907 727.087,224.891 727.656,226.35 728.224,226.787 728.792,224.137 729.361,225.736 729.929,229.299 730.497,229.53 731.066,227.759 731.634,230.305 732.203,229.675 732.771,230.067 733.339,230.189 733.908,229.332 734.476,230.554 735.044,230.857 735.613,232.03 736.181,234.281 736.749,233.366 737.318,233.277 737.886,233.504 738.454,231.605 739.023,229.943 739.591,228.206 740.159,228.378 740.728,228.62 741.296,230.081 741.864,231.34 742.433,230.486 743.001,229.485 743.569,230.902 744.138,232.286 744.706,233.254 745.274,236.28 745.843,235.05 746.411,233.115 746.98,232.204 747.548,233.211 748.116,233.324 748.685,234.154 749.253,234.049 749.821,233.324 750.39,233.364 750.958,233.44 751.526,231.435 752.095,231.573 752.663,231.501 753.231,228.724 753.8,228.347 754.368,229.837 754.936,228.959 755.505,229.522 756.073,230.763 756.641,231.153 757.21,235.533 757.778,236.423 758.346,235.342 758.915,237.279 759.483,238.223 760.052,239.054 760.62,240.736 761.188,240.003 761.757,237.658 762.325,236.166 762.893,235.022 763.462,236.927 764.03,235.411 764.598,236.32 765.167,235.194 765.735,234.058 766.303,235.981 766.872,235.836 767.44,236.511 768.008,236.207 768.577,235.758 769.145,236.414 769.713,236.188 770.282,235.124 770.85,234.704 771.418,234.441 771.987,236.271 772.555,234.858 773.123,234.55 773.692,235.438 774.26,234.103 774.829,234.83 775.397,234.628 775.965,233.341 776.534,234.18 777.102,233.996 777.67,234.803 778.239,233.469 778.807,233.176 779.375,230.057 779.944,230.326 780.512,231.314 781.08,231.577 781.649,229.212 782.217,228.413 782.785,228.487 783.354,227.618 783.922,227.901 784.49,231.198 785.059,231.218 785.627,231.07 786.195,230.981 786.764,231.053 787.332,230.922 787.9,230.042 788.469,229.227 789.037,228.581 789.606,228.747 790.174,229.966 790.742,232.187 791.311,237.219 791.879,236.803 792.447,235.139 793.016,230.884 793.584,228.762 794.152,227.929 794.721,226.007 795.289,225.231 795.857,225.692 796.426,225.127 796.994,227.58 797.562,224.968 798.131,226.346 798.699,227.769 799.267,229.068 799.836,229.182 800.404,227.223 800.972,229.631 801.541,230.831 802.109,233.056 802.678,234.025 803.246,233.874 803.814,234.615 804.383,236.206 804.951,234.816 805.519,234.902 806.088,235.848 806.656,235.506 807.224,233.227 807.793,233.195 808.361,231.078 808.929,231.217 809.498,231.28 810.066,230.273 810.634,230.311 811.203,230.361 811.771,229.564 812.339,230.711 812.908,231.789 813.476,233.739 814.044,235.569 814.613,234.131 815.181,233.868 815.749,234.722 816.318,237.755 816.886,238.447 817.455,238.025 818.023,236.498 818.591,235.077 819.16,235.966 819.728,234.481 820.296,233.158 820.865,233.006 821.433,232.842 822.001,233.475 822.57,234.232 823.138,234.875 823.706,234.531 824.275,234.451 824.843,232.895 825.411,234.59 825.98,233.092 826.548,231.606 827.116,231.492 827.685,233.368 828.253,234.221 828.821,233.75 829.39,233.247 829.958,232.816 830.526,230.563 831.095,230.61 831.663,228.647 832.232,230.835 832.8,231.727 833.368,228.307 833.937,227.325 834.505,225.317 835.073,224.634 835.642,225.044 836.21,222.371 836.778,222.948 837.347,222.551 837.915,223.182 838.483,222.645 839.052,225.288 839.62,225.658 840.188,227.999 840.757,228.085 841.325,229.309 841.893,226.201 842.462,225.544 843.03,226.006 843.598,226.262 844.167,228.643 844.735,226.754 845.304,228.208 845.872,227.441 846.44,226.698 847.009,226.945 847.577,228.256 848.145,230.443 848.714,231.631 849.282,230.794 849.85,229.757 850.419,231.006 850.987,230.915 851.555,231.066 852.124,231.997 852.692,232.04 853.26,232.134 853.829,232.151 854.397,232.079 854.965,232.906 855.534,233.89 856.102,232.763 856.67,234.788 857.239,234.679 857.807,236.428 858.375,238.178 858.944,237.607 859.512,236.126 860.081,234.672 860.649,235.303 861.217,234.056 861.786,233.631 862.354,233.518 862.922,231.436 863.491,231.402 864.059,231.272 864.627,234.207 865.196,234.001 865.764,231.499 866.332,231.114 866.901,233.095 867.469,234.813 868.037,230.449 868.606,231.267 869.174,231.295 869.742,232.14 870.311,231.856 870.879,231.63 871.447,231.603 872.016,231.565 872.584,230.491 873.152,230.569 873.721,230.43 874.289,229.244 874.858,229.307 875.426,228.518 875.994,229.553 876.563,228.573 877.131,227.644 877.699,226.935 878.268,228.209 878.836,228.409 879.404,228.362 879.973,223.362 880.541,223.818 881.109,224.369 881.678,224.936 882.246,223.319 882.814,222.708 883.383,222.281 883.951,225.02 884.519,225.458 885.088,224.914 885.656,225.297 886.224,226.667 886.793,226.028 887.361,226.514 887.93,227.883 888.498,229.375 889.066,226.593 889.635,229.207 890.203,230.566 890.771,229.877 891.34,230.272 891.908,231.333 892.476,230.214 893.045,230.21 893.613,232.444 894.181,230.478 894.75,231.636 895.318,231.679 895.886,229.587 896.455,229.411 897.023,227.726 897.591,226.056 898.16,226.676 898.728,227.906 899.296,227.085 899.865,228.337 900.433,228.736 901.001,229.983 901.57,230.134 902.138,230.361 902.707,228.461 903.275,228.973 903.843,228.25 904.412,229.706 904.98,229.58 905.548,228.733 906.117,228.935 906.685,229.301 907.253,231.576 907.822,232.683 908.39,231.651 908.958,229.588 909.527,228.985 910.095,227.094 910.663,227.367 911.232,225.74 911.8,226.169 912.368,227.801 912.937,230.14 913.505,234.366 914.073,236.318 914.642,235.134 915.21,233.685 915.779,233.539 916.347,233.326 916.915,234.239 917.484,233.06 918.052,233.047 918.62,232.929 919.189,233.067 919.757,233.934 920.325,233.599 920.894,233.693 921.462,232.752 922.03,233.81 922.599,232.695 923.167,234.552 923.735,236.547 924.304,237.007 924.872,237.729 925.44,237.384 926.009,236.949 926.577,236.581 927.145,236.015 927.714,235.388 928.282,235.246 928.85,233.917 929.419,234.819 929.987,234.609 930.556,234.307 931.124,234.973 931.692,234.569 932.261,234.319 932.829,234.238 933.397,231.738 933.966,230.381 934.534,227.17 935.102,227.483 935.671,229.789 936.239,231.792 936.807,232.763 937.376,234.74 937.944,234.571 938.512,234.446 939.081,232.275 939.649,230.933 940.217,233.174 940.786,232.939 941.354,231.752 941.922,232.691 942.491,232.539 943.059,231.332 943.627,233.359 944.196,233.369 944.764,235.124 945.333,233.61 945.901,234.428 946.469,234.844 947.038,234.482 947.606,230.989 948.174,230.899 948.743,229.772 949.311,229.572 949.879,229.406 950.448,228.434 951.016,227.546 951.584,227.873 952.153,228.073 952.721,226.247 953.289,226.53 953.858,226.938 954.426,226.964 954.994,226.405 955.563,222.67 956.131,224.363 956.699,223.688 957.268,226.189 957.836,225.524 958.405,226.964 958.973,228.195 959.541,228.344 960.11,229.739 960.678,227.925 961.246,229.164 961.815,229.447 962.383,229.47 962.951,230.613 963.52,230.459 964.088,231.425 964.656,231.265 965.225,230.118 965.793,232.365 966.361,234.478 966.93,234.045 967.498,235.863 968.066,236.512 968.635,236.111 969.203,235.76 969.771,233.326 970.34,232.975 970.908,231.874 971.476,233.768 972.045,234.622 972.613,234.271 973.182,233.765 973.75,232.398 974.318,234.266 974.887,233.976 975.455,233.74 976.023,234.476 976.592,233.153 977.16,232.891 977.728,232.615 978.297,232.445 978.865,232.151 979.433,234.159 980.002,233.669 980.57,234.565 981.138,234.161 981.707,234.776 982.275,234.756 982.843,234.519 983.412,233.102 983.98,232.802 984.548,232.473 985.117,231.075 985.685,233.871 986.253,232.429 986.822,231.944 987.39,229.712 987.959,232.729 988.527,231.707 989.095,229.446 989.664,230.596 990.232,231.419 990.8,231.274 991.369,229.135 991.937,229.176 992.505,228.913 993.074,227.972 993.642,228.126 994.21,228.114 994.779,225.929 995.347,224.242 995.915,222.421 996.484,225.815 997.052,224.793 997.62,225.29 998.189,224.411 998.757,226.025 999.325,226.122 999.894,227.553 1000.46,227.58 1001.03,225.737 1001.6,226.002 1002.17,225.162 1002.74,225.459 1003.3,224.806 1003.87,226.426 1004.44,228.764 1005.01,227.783 1005.58,228.973 1006.15,227.101 1006.71,227.38 1007.28,227.502 1007.85,227.611 1008.42,228.795 1008.99,229.127 1009.56,228.221 1010.12,227.466 1010.69,227.519 1011.26,227.864 1011.83,228 1012.4,226.081 1012.97,228.269 1013.53,228.759 1014.1,227.969 1014.67,227.192 1015.24,227.493 1015.81,225.813 1016.38,225.192 1016.94,225.633 1017.51,226.98 1018.08,227.345 1018.65,227.561 1019.22,226.72 1019.79,225.978 1020.35,226.328 1020.92,227.708 1021.49,226.071 1022.06,225.191 1022.63,225.453 1023.2,225.846 1023.76,226.323 1024.33,228.765 1024.9,229.97 1025.47,231.267 1026.04,233.297 1026.61,234.345 1027.17,233.291 1027.74,233.032 1028.31,233.951 1028.88,233.97 1029.45,234.941 1030.02,235.816 1030.58,234.475 1031.15,235.301 1031.72,232.906 1032.29,232.577 1032.86,231.289 1033.43,233.268 1033.99,233.932 1034.56,232.636 1035.13,232.416 1035.7,232.277 1036.27,234.233 1036.84,233.961 1037.4,232.771 1037.97,233.934 1038.54,232.704 1039.11,232.442 1039.68,234.37 1040.25,234.127 1040.81,232.847 1041.38,231.568 1041.95,231.574 1042.52,228.459 1043.09,228.566 1043.66,227.542 1044.22,228.748 1044.79,229.015 1045.36,229.145 1045.93,229.291 1046.5,229.571 1047.07,230.5 1047.63,232.733 1048.2,234.849 1048.77,235.711 1049.34,237.274 1049.91,236.707 1050.48,235.952 1051.05,235.434 1051.61,239.244 1052.18,238.436 1052.75,235.64 1053.32,235.233 1053.89,237.187 1054.46,233.615 1055.02,234.315 1055.59,234.187 1056.16,234.106 1056.73,234.824 1057.3,235.428 1057.87,235.094 1058.43,234.837 1059,233.208 1059.57,234.146 1060.14,234.853 1060.71,236.636 1061.28,237.269 1061.84,234.634 1062.41,234.285 1062.98,234.018 1063.55,234.571 1064.12,233.144 1064.69,233.811 1065.25,233.62 1065.82,233.35 1066.39,232.994 1066.96,229.576 1067.53,230.659 1068.1,229.566 1068.66,229.481 1069.23,229.405 1069.8,227.391 1070.37,226.264 1070.94,226.549 1071.51,225.631 1072.07,224.642 1072.64,223.109 1073.21,223.558 1073.78,225.216 1074.35,225.301 1074.92,223.337 1075.48,224.717 1076.05,224.929 1076.62,226.234 1077.19,227.703 1077.76,228.926 1078.33,229.17 1078.89,228.129 1079.46,228.096 1080.03,229.219 1080.6,229.118 1081.17,230.019 1081.74,230.106 1082.3,230.978 1082.87,230.838 1083.44,231.544 1084.01,229.225 1084.58,229.029 1085.15,229.954 1085.71,231.087 1086.28,229.069 1086.85,225.886 1087.42,226.215 1087.99,225.371 1088.56,225.587 1089.12,225.793 1089.69,225.171 1090.26,226.455 1090.83,225.608 1091.4,224.977 1091.97,226.449 1092.53,224.662 1093.1,224.9 1093.67,224.066 1094.24,224.472 1094.81,224.709 1095.38,228.205 1095.94,228.41 1096.51,226.545 1097.08,226.694 1097.65,226.231 1098.22,227.509 1098.79,224.736 1099.35,223.223 1099.92,224.724 1100.49,224.081 1101.06,222.4 1101.63,222.095 1102.2,221.643 1102.76,223.284 1103.33,223.991 1103.9,222.707 1104.47,224.483 1105.04,226.281 1105.61,224.66 1106.17,227.171 1106.74,228.61 1107.31,228.815 1107.88,229.133 1108.45,230.433 1109.02,230.418 1109.58,230.73 1110.15,230.755 1110.72,231.854 1111.29,230.859 1111.86,230.132 1112.43,231.168 1112.99,232.274 1113.56,231.439 1114.13,230.602 1114.7,232.074 1115.27,232.284 1115.84,232.355 1116.4,232.536 1116.97,231.702 1117.54,230.897 1118.11,229.908 1118.68,232.297 1119.25,232.25 1119.81,233.461 1120.38,235.342 1120.95,232.97 1121.52,233.216 1122.09,233.158 1122.66,234.1 1123.23,237.189 1123.79,236.816 1124.36,237.346 1124.93,238.103 1125.5,238.4 1126.07,236.996 1126.64,236.547 1127.2,237.083 1127.77,236.597 1128.34,235.223 1128.91,231.765 1129.48,232.685 1130.05,235.668 1130.61,235.025 1131.18,232.515 1131.75,231.201 1132.32,229.996 1132.89,229.88 1133.46,228.823 1134.02,230.019 1134.59,230.161 1135.16,229.286 1135.73,230.376 1136.3,229.13 1136.87,227.072 1137.43,227.109 1138,229.523 1138.57,227.529 1139.14,229.794 1139.71,230.82 1140.28,231.086 1140.84,233.303 1141.41,233.188 1141.98,232.031 1142.55,231.119 1143.12,231.242 1143.69,233.292 1144.25,232.151 1144.82,232.051 1145.39,232.188 1145.96,233.37 1146.53,236.145 1147.1,235.612 1147.66,235.202 1148.23,235.633 1148.8,235.243 1149.37,234.801 1149.94,235.546 1150.51,235.189 1151.07,234.799 1151.64,234.298 1152.21,233.697 1152.78,233.395 1153.35,232.133 1153.92,230.854 1154.48,236.019 1155.05,234.362 1155.62,232.906 1156.19,230.562 1156.76,229.389 1157.33,228.384 1157.89,230.63 1158.46,231.564 1159.03,230.115 1159.6,230.979 1160.17,230.977 1160.74,229.939 1161.3,229.934 1161.87,229.958 1162.44,231.871 1163.01,232.664 1163.58,230.43 1164.15,229.395 1164.71,228.256 1165.28,226.433 1165.85,225.453 1166.42,223.734 1166.99,225.211 1167.56,224.606 1168.12,225.955 1168.69,225.217 1169.26,225.535 1169.83,226.134 1170.4,224.31 1170.97,225.779 1171.53,229.218 1172.1,227.874 1172.67,227.944 1173.24,229.418 1173.81,231.243 1174.38,230.186 1174.94,230.008 1175.51,228.16 1176.08,227.285 1176.65,226.521 1177.22,226.893 1177.79,229.054 1178.35,228.168 1178.92,228.429 1179.49,227.693 1180.06,226.916 1180.63,228.167 1181.2,229.395 1181.76,225.399 1182.33,226.692 1182.9,227.009 1183.47,227.472 1184.04,228.68 1184.61,229.016 1185.17,229.202 1185.74,230.457 1186.31,229.655 1186.88,227.531 1187.45,228.908 1188.02,228.128 1188.58,226.461 1189.15,226.877 1189.72,227.299 1190.29,224.536 1190.86,224.028 1191.43,226.866 1192,228.088 1192.56,229.479 1193.13,232.751 1193.7,231.636 1194.27,230.711 1194.84,232.751 1195.41,232.91 1195.97,232.915 1196.54,232.706 1197.11,234.902 1197.68,233.491 1198.25,232.388 1198.82,231.125 1199.38,231.019 1199.95,231.033 1200.52,228.198 1201.09,229.555 1201.66,229.471 1202.23,228.561 1202.79,229.896 1203.36,232.078 1203.93,231.823 1204.5,231.724 1205.07,232.968 1205.64,231.804 1206.2,230.839 1206.77,230.903 1207.34,230.117 1207.91,230.104 1208.48,229.176 1209.05,231.354 1209.61,230.426 1210.18,230.575 1210.75,231.5 1211.32,230.645 1211.89,229.533 1212.46,230.511 1213.02,229.561 1213.59,228.644 1214.16,231.942 1214.73,230.082 1215.3,225.986 1215.87,226.306 1216.43,227.622 1217,230.979 1217.57,232 1218.14,233.023 1218.71,236.001 1219.28,234.716 1219.84,235.446 1220.41,232.044 1220.98,234.784 1221.55,233.335 1222.12,235.066 1222.69,236.508 1223.25,234.976 1223.82,236.596 1224.39,235.255 1224.96,234.893 1225.53,235.592 1226.1,235.11 1226.66,235.74 1227.23,236.345 1227.8,234.837 1228.37,236.582 1228.94,235.143 1229.51,234.708 1230.07,233.332 1230.64,232.187 1231.21,233.073 1231.78,234.714 1232.35,235.2 1232.92,235.652 1233.48,235.151 1234.05,234.669 1234.62,232.428 1235.19,232.245 1235.76,233.958 1236.33,233.678 1236.89,232.427 1237.46,232.293 1238.03,231.958 1238.6,231.735 1239.17,232.701 1239.74,233.72 1240.3,232.434 1240.87,232.124 1241.44,231.022 1242.01,230.791 1242.58,228.657 1243.15,228.634 1243.71,228.314 1244.28,228.202 1244.85,229.298 1245.42,229.21 1245.99,229.044 1246.56,228.204 1247.12,227.413 1247.69,227.542 1248.26,224.646 1248.83,226.88 1249.4,227.967 1249.97,225.015 1250.53,225.365 1251.1,225.577 1251.67,226.752 1252.24,226.147 1252.81,225.244 1253.38,224.644 1253.94,225.895 1254.51,224.179 1255.08,224.587 1255.65,226.038 1256.22,226.256 1256.79,226.538 1257.35,225.617 1257.92,223.855 1258.49,225.429 1259.06,227.783 1259.63,226.819 1260.2,229.066 1260.76,228.025 1261.33,229.293 1261.9,229.532 1262.47,229.502 1263.04,231.552 1263.61,231.53 1264.18,231.57 1264.74,229.385 1265.31,228.317 1265.88,228.402 1266.45,230.487 1267.02,232.625 1267.59,233.606 1268.15,234.891 1268.72,233.389 1269.29,232.974 1269.86,231.723 1270.43,230.52 1271,231.5 1271.56,231.357 1272.13,230.393 1272.7,226.268 1273.27,225.546 1273.84,223.846 1274.41,224.22 1274.97,222.882 1275.54,223.472 1276.11,226.221 1276.68,225.698 1277.25,229.199 1277.82,230.365 1278.38,228.277 1278.95,230.687 1279.52,230.659 1280.09,229.555 1280.66,230.677 1281.23,231.807 1281.79,232.737 1282.36,232.627 1282.93,232.662 1283.5,230.361 1284.07,227.369 1284.64,225.43 1285.2,224.709 1285.77,224.862 1286.34,225.396 1286.91,225.769 1287.48,226.086 1288.05,227.634 1288.61,229.018 1289.18,228.132 1289.75,228.221 1290.32,229.392 1290.89,229.689 1291.46,228.631 1292.02,228.742 1292.59,228.924 1293.16,232.192 1293.73,234.242 1294.3,234.023 1294.87,231.537 1295.43,230.329 1296,233.488 1296.57,233.161 1297.14,229.997 1297.71,230.139 1298.28,230.179 1298.84,229.169 1299.41,230.638 1299.98,229.697 1300.55,229.757 1301.12,228.8 1301.69,227.91 1302.25,228.224 1302.82,228.387 1303.39,229.614 1303.96,229.775 1304.53,230.889 1305.1,230.619 1305.66,229.627 1306.23,228.819 1306.8,230.098 1307.37,231.192 1307.94,232.332 1308.51,232.465 1309.07,232.335 1309.64,232.536 1310.21,232.485 1310.78,233.357 1311.35,234.43 1311.92,234.141 1312.48,232.956 1313.05,233.802 1313.62,232.591 1314.19,234.411 1314.76,233.95 1315.33,232.561 1315.89,232.336 1316.46,232.13 1317.03,230.975 1317.6,230.998 1318.17,231.072 1318.74,230.985 1319.3,229.825 1319.87,229.987 1320.44,232.014 1321.01,234.03 1321.58,234.689 1322.15,233.235 1322.71,232.794 1323.28,229.676 1323.85,231.629 1324.42,233.444 1324.99,234.082 1325.56,232.812 1326.12,231.645 1326.69,233.597 1327.26,233.201 1327.83,230.934 1328.4,230.968 1328.97,231.995 1329.53,232.771 1330.1,232.538 1330.67,233.495 1331.24,233.092 1331.81,233.783 1332.38,232.459 1332.94,230.14 1333.51,233.105 1334.08,233.036 1334.65,229.741 1335.22,228.519 1335.79,229.647 1336.36,233.573 1336.92,232.226 1337.49,235.198 1338.06,234.877 1338.63,236.563 1339.2,237.091 1339.77,235.588 1340.33,233.971 1340.9,233.552 1341.47,232.227 1342.04,231.785 1342.61,229.665 1343.18,228.449 1343.74,228.358 1344.31,227.095 1344.88,227.265 1345.45,227.337 1346.02,228.465 1346.59,227.405 1347.15,227.59 1347.72,229.596 1348.29,233.509 1348.86,231.963 1349.43,231.943 1350,231.695 1350.56,230.503 1351.13,231.336 1351.7,230.192 1352.27,228.96 1352.84,228.156 1353.41,227.238 1353.97,230.633 1354.54,231.744 1355.11,230.657 1355.68,232.709 1356.25,232.459 1356.82,230.945 1357.38,229.882 1357.95,230.049 1358.52,230.983 1359.09,230.96 1359.66,231.783 1360.23,229.636 1360.79,228.637 1361.36,228.625 1361.93,228.803 1362.5,228.915 1363.07,228.994 1363.64,227.824 1364.2,230.117 1364.77,229.768 1365.34,228.85 1365.91,227.56 1366.48,228.586 1367.05,229.825 1367.61,227.813 1368.18,226.639 1368.75,225.762 1369.32,228.009 1369.89,229.102 1370.46,228.056 1371.02,228.079 1371.59,226.239 1372.16,226.65 1372.73,227.635 1373.3,228.759 1373.87,229.827 1374.43,228.794 1375,228.796 1375.57,228.692 1376.14,228.718 1376.71,229.788 1377.28,228.696 1377.84,226.689 1378.41,228.989 1378.98,227.115 1379.55,228.24 1380.12,226.324 1380.69,227.684 1381.25,227.922 1381.82,231.291 1382.39,230.857 1382.96,229.817 1383.53,228.462 1384.1,228.472 1384.66,229.533 1385.23,230.367 1385.8,229.255 1386.37,231.371 1386.94,230.169 1387.51,229.082 1388.07,229.107 1388.64,229.23 1389.21,228.398 1389.78,226.503 1390.35,226.699 1390.92,227.917 1391.48,229.297 1392.05,229.484 1392.62,229.662 1393.19,230.732 1393.76,228.467 1394.33,227.669 1394.89,227.849 1395.46,228.026 1396.03,228.198 1396.6,230.463 1397.17,231.463 1397.74,230.377 1398.3,230.48 1398.87,231.384 1399.44,231.48 1400.01,232.333 1400.58,229.222 1401.15,229.342 1401.71,229.528 1402.28,229.522 1402.85,226.454 1403.42,224.661 1403.99,228.183 1404.56,228.571 1405.13,231.994 1405.69,229.908 1406.26,231.03 1406.83,230.937 1407.4,232.086 1407.97,234.069 1408.54,233.766 1409.1,232.394 1409.67,233.249 1410.24,230.993 1410.81,231.976 1411.38,229.658 1411.95,231.881 1412.51,230.652 1413.08,233.73 1413.65,235.61 1414.22,234.288 1414.79,230.003 1415.36,228.947 1415.92,229.05 1416.49,230.212 1417.06,229.098 1417.63,229.004 1418.2,229.163 1418.77,227.281 1419.33,228.492 1419.9,230.554 1420.47,230.488 1421.04,230.22 1421.61,229.256 1422.18,230.063 1422.74,229.464 1423.31,227.691 1423.88,225.821 1424.45,226.171 1425.02,227.541 1425.59,230.845 1426.15,226.878 1426.72,226.175 1427.29,227.506 1427.86,228.84 1428.43,228.889 1429,229.084 1429.56,227.214 1430.13,227.392 1430.7,227.51 1431.27,226.64 1431.84,225.887 1432.41,224.123 1432.97,225.594 1433.54,226.033 1434.11,227.316 1434.68,228.632 1435.25,229.816 1435.82,226.75 1436.38,228.084 1436.95,226.197 1437.52,226.348 1438.09,227.644 1438.66,225.813 1439.23,226.238 1439.79,225.667 1440.36,227.024 1440.93,228.426 1441.5,227.905 1442.07,227.153 1442.64,227.669 1443.2,227.051 1443.77,226.453 1444.34,226.047 1444.91,224.559 1445.48,224.201 1446.05,224.821 1446.61,225.443 1447.18,226.889 1447.75,226.465 1448.32,227.999 1448.89,229.281 1449.46,230.532 1450.02,230.633 1450.59,231.903 1451.16,231.974 1451.73,233 1452.3,235.089 1452.87,235.033 1453.43,233.811 1454,234.735 1454.57,233.539 1455.14,233.583 1455.71,232.521 1456.28,232.748 1456.84,233.781 1457.41,234.8 1457.98,234.539 1458.55,234.36 1459.12,233.146 1459.69,236.253 1460.25,237.039 1460.82,240.831 1461.39,241.231 1461.96,239.588 1462.53,238.782 1463.1,233.191 1463.66,232.078 1464.23,233.142 1464.8,233.107 1465.37,232.923 1465.94,233.961 1466.51,233.695 1467.07,234.38 1467.64,236.094 1468.21,235.623 1468.78,236.49 1469.35,236.187 1469.92,239.048 1470.48,237.331 1471.05,234.679 1471.62,237.175 1472.19,238.743 1472.76,237.836 1473.33,233.889 1473.89,234.767 1474.46,235.728 1475.03,236.49 1475.6,235.791 1476.17,237.464 1476.74,235.538 1477.31,236.137 1477.87,235.382 1478.44,234 1479.01,233.531 1479.58,233.358 1480.15,232.928 1480.72,234.44 1481.28,233.717 1481.85,234.087 1482.42,233.625 1482.99,236.29 1483.56,232.627 1484.13,232.384 1484.69,232.077 1485.26,233.82 1485.83,233.283 1486.4,230.836 1486.97,229.468 1487.54,230.417 1488.1,232.195 1488.67,234.138 1489.24,233.766 1489.81,234.443 1490.38,234.023 1490.95,234.626 1491.51,233.907 1492.08,233.334 1492.65,232.797 1493.22,229.397 1493.79,227.223 1494.36,228.015 1494.92,226.829 1495.49,226.068 1496.06,225.383 1496.63,227.616 1497.2,227.104 1497.77,226.24 1498.33,226.253 1498.9,224.194 1499.47,223.385 1500.04,222.677 1500.61,223.185 1501.18,223.758 1501.74,225.068 1502.31,224.448 1502.88,222.681 1503.45,223.475 1504.02,223.716 1504.59,222.937 1505.15,221.453 1505.72,220.009 1506.29,219.895 1506.86,221.626 1507.43,222.349 1508,222.787 1508.56,223.149 1509.13,222.793 1509.7,223.262 1510.27,223.753 1510.84,224.274 1511.41,225.704 1511.97,225.963 1512.54,226.36 1513.11,226.589 1513.68,228.038 1514.25,227.03 1514.82,227.459 1515.38,227.727 1515.95,230.033 1516.52,228.016 1517.09,229.153 1517.66,228.275 1518.23,229.757 1518.79,231.042 1519.36,229.067 1519.93,230.468 1520.5,229.455 1521.07,230.576 1521.64,229.833 1522.2,231.965 1522.77,234.119 1523.34,234.864 1523.91,234.617 1524.48,235.375 1525.05,233.922 1525.61,233.782 1526.18,234.547 1526.75,232.227 1527.32,233.398 1527.89,233.479 1528.46,233.275 1529.02,233.298 1529.59,232.054 1530.16,231.105 1530.73,230.992 1531.3,230.934 1531.87,231.711 1532.43,232.482 1533,231.321 1533.57,230.188 1534.14,231.303 1534.71,229.121 1535.28,231.251 1535.84,229.151 1536.41,229.294 1536.98,227.309 1537.55,226.455 1538.12,227.855 1538.69,228.169 1539.25,227.332 1539.82,225.519 1540.39,226.884 1540.96,227.145 1541.53,224.495 1542.1,225.171 1542.66,228.712 1543.23,229.697 1543.8,228.599 1544.37,230.783 1544.94,229.778 1545.51,229.854 1546.08,230.923 1546.64,229.91 1547.21,228.886 1547.78,229.863 1548.35,230.838 1548.92,229.953 1549.49,230.045 1550.05,226.131 1550.62,226.353 1551.19,226.678 1551.76,228.002 1552.33,230.092 1552.9,228.126 1553.46,229.156 1554.03,231.295 1554.6,232.429 1555.17,236.664 1555.74,236.599 1556.31,236.142 1556.87,236.66 1557.44,237.416 1558.01,237.032 1558.58,236.643 1559.15,239.214 1559.72,239.552 1560.28,241.09 1560.85,242.115 1561.42,241.227 1561.99,241.219 1562.56,238.293 1563.13,236.662 1563.69,233.92 1564.26,234.743 1564.83,233.276 1565.4,232.974 1565.97,232.732 1566.54,231.316 1567.1,231.205 1567.67,228.146 1568.24,228.297 1568.81,227.61 1569.38,228.599 1569.95,226.604 1570.51,227.838 1571.08,227.809 1571.65,228.809 1572.22,227.81 1572.79,228.893 1573.36,228.969 1573.92,225.679 1574.49,226.834 1575.06,228.014 1575.63,227.853 1576.2,228.125 1576.77,229.188 1577.33,230.347 1577.9,226.975 1578.47,226.194 1579.04,225.432 1579.61,226.508 1580.18,227.652 1580.74,226.731 1581.31,228.884 1581.88,225.834 1582.45,227.259 1583.02,226.399 1583.59,227.636 1584.15,227.827 1584.72,229.073 1585.29,229.241 1585.86,230.223 1586.43,230.025 1587,228.823 1587.56,228.882 1588.13,226.984 1588.7,226.886 1589.27,228.145 1589.84,227.105 1590.41,226.463 1590.97,230.89 1591.54,229.904 1592.11,231.015 1592.68,229.884 1593.25,230.81 1593.82,229.843 1594.38,229.717 1594.95,228.97 1595.52,228.882 1596.09,228.875 1596.66,228.886 1597.23,228.122 1597.79,229.384 1598.36,229.506 1598.93,229.593 1599.5,230.631 1600.07,231.669 1600.64,233.866 1601.2,232.693 1601.77,233.318 1602.34,235.278 1602.91,235.885 1603.48,235.385 1604.05,234.905 1604.61,232.631 1605.18,232.398 1605.75,232.148 1606.32,231.891 1606.89,232.768 1607.46,233.463 1608.02,231.028 1608.59,230.61 1609.16,229.694 1609.73,228.826 1610.3,227.778 1610.87,226.848 1611.43,226.181 1612,225.346 1612.57,227.759 1613.14,228.075 1613.71,226.967 1614.28,229.21 1614.84,226.023 1615.41,227.365 1615.98,227.6 1616.55,226.941 1617.12,228.105 1617.69,228.296 1618.26,229.389 1618.82,229.439 1619.39,228.486 1619.96,227.589 1620.53,228.791 1621.1,227.918 1621.67,230.308 1622.23,230.503 1622.8,229.527 1623.37,229.531 1623.94,229.512 1624.51,228.627 1625.08,229.066 1625.64,228.005 1626.21,229.086 1626.78,229.876 1627.35,231.826 1627.92,231.708 1628.49,231.654 1629.05,230.268 1629.62,231.239 1630.19,231.251 1630.76,232.146 1631.33,232.916 1631.9,234.621 1632.46,233.512 1633.03,233.448 1633.6,233.226 1634.17,232.896 1634.74,232.734 1635.31,229.547 1635.87,230.214 1636.44,229.127 1637.01,228.342 1637.58,229.365 1638.15,230.581 1638.72,230.614 1639.28,231.638 1639.85,231.472 1640.42,231.55 1640.99,231.645 1641.56,233.649 1642.13,234.485 1642.69,231.106 1643.26,231.05 1643.83,230.105 1644.4,231.1 1644.97,232.181 1645.54,232.08 1646.1,231.901 1646.67,232.906 1647.24,232.665 1647.81,232.469 1648.38,231.556 1648.95,231.499 1649.51,231.558 1650.08,231.448 1650.65,229.328 1651.22,228.169 1651.79,229.327 1652.36,231.294 1652.92,229.21 1653.49,229.129 1654.06,230.256 1654.63,230.108 1655.2,230.212 1655.77,230.054 1656.33,233.028 1656.9,232.701 1657.47,232.628 1658.04,231.407 1658.61,230.26 1659.18,229.379 1659.74,228.176 1660.31,230.424 1660.88,229.265 1661.45,228.075 1662.02,227.172 1662.59,227.483 1663.15,226.647 1663.72,226.847 1664.29,228.147 1664.86,228.182 1665.43,230.5 1666,230.449 1666.56,229.404 1667.13,231.689 1667.7,230.67 1668.27,229.5 1668.84,228.6 1669.41,230.79 1669.97,228.664 1670.54,228.643 1671.11,229.908 1671.68,229.902 1672.25,228.062 1672.82,228.152 1673.38,227.495 1673.95,226.597 1674.52,226.904 1675.09,226.13 1675.66,225.763 1676.23,223.349 1676.79,223.992 1677.36,226.453 1677.93,226.841 1678.5,229.241 1679.07,230.583 1679.64,231.748 1680.2,231.893 1680.77,233.153 1681.34,233.999 1681.91,234.688 1682.48,233.285 1683.05,232.194 1683.61,231.788 1684.18,233.913 1684.75,234.709 1685.32,235.341 1685.89,233.912 1686.46,233.767 1687.02,233.527 1687.59,234.472 1688.16,235.233 1688.73,234.573 1689.3,234.198 1689.87,234.984 1690.44,234.711 1691,236.38 1691.57,237.168 1692.14,234.673 1692.71,234.359 1693.28,236.049 1693.85,234.522 1694.41,232.923 1694.98,232.374 1695.55,232.083 1696.12,231.988 1696.69,232.965 1697.26,230.616 1697.82,229.375 1698.39,229.558 1698.96,230.515 1699.53,228.373 1700.1,227.531 1700.67,227.388 1701.23,231.654 1701.8,232.451 1702.37,233.268 1702.94,232.085 1703.51,231.647 1704.08,231.502 1704.64,233.342 1705.21,229.832 1705.78,227.755 1706.35,227.811 1706.92,227.978 1707.49,226.932 1708.05,228.022 1708.62,227.062 1709.19,226.892 1709.76,226.269 1710.33,226.328 1710.9,228.662 1711.46,229.788 1712.03,229.765 1712.6,227.89 1713.17,229.011 1713.74,228.966 1714.31,229.195 1714.87,230.185 1715.44,229.073 1716.01,228.72 1716.58,228.816 1717.15,228.866 1717.72,228.661 1718.28,227.714 1718.85,226.762 1719.42,227.005 1719.99,227.342 1720.56,228.577 1721.13,228.416 1721.69,225.279 1722.26,226.772 1722.83,225.001 1723.4,226.308 1723.97,228.496 1724.54,227.584 1725.1,227.691 1725.67,227.819 1726.24,227.709 1726.81,226.797 1727.38,226.126 1727.95,227.379 1728.51,229.886 1729.08,230.107 1729.65,230.094 1730.22,228.911 1730.79,227.786 1731.36,227.076 1731.92,229.443 1732.49,231.643 1733.06,231.406 1733.63,234.363 1734.2,234.345 1734.77,234.146 1735.33,234.97 1735.9,233.564 1736.47,232.389 1737.04,232.178 1737.61,232.021 1738.18,233.815 1738.74,234.531 1739.31,235.243 1739.88,233.803 1740.45,234.633 1741.02,234.275 1741.59,235.006 1742.15,234.631 1742.72,233.166 1743.29,231.78 1743.86,231.449 1744.43,232.357 1745,230.998 1745.56,230.958 1746.13,230.751 1746.7,230.634 1747.27,228.539 1747.84,228.488 1748.41,230.47 1748.97,230.436 1749.54,228.281 1750.11,228.417 1750.68,227.287 1751.25,228.336 1751.82,227.518 1752.38,228.6 1752.95,229.569 1753.52,228.513 1754.09,229.703 1754.66,229.72 1755.23,228.776 1755.79,227.837 1756.36,226.951 1756.93,226.281 1757.5,226.37 1758.07,227.66 1758.64,228.856 1759.21,228.972 1759.77,228.2 1760.34,230.194 1760.91,226.95 1761.48,226.36 1762.05,227.467 1762.62,227.691 1763.18,227.868 1763.75,229.028 1764.32,231.23 1764.89,232.178 1765.46,231.103 1766.03,228.967 1766.59,230.112 1767.16,229.119 1767.73,230.104 1768.3,231.34 1768.87,230.149 1769.44,230.15 1770,231.219 1770.57,230.974 1771.14,230.886 1771.71,230.932 1772.28,229.768 1772.85,229.993 1773.41,229.759 1773.98,230.033 1774.55,234.031 1775.12,231.789 1775.69,232.661 1776.26,232.45 1776.82,232.316 1777.39,233.22 1777.96,233.046 1778.53,231.945 1779.1,232.787 1779.67,232.776 1780.23,231.577 1780.8,231.114 1781.37,231.175 1781.94,230.943 1782.51,232.01 1783.08,231.775 1783.64,228.711 1784.21,228.81 1784.78,231.859 1785.35,231.59 1785.92,231.573 1786.49,230.49 1787.05,230.581 1787.62,231.498 1788.19,231.538 1788.76,232.378 1789.33,233.291 1789.9,231.978 1790.46,231.713 1791.03,228.4 1791.6,230.51 1792.17,232.465 1792.74,232.231 1793.31,233.168 1793.87,234.756 1794.44,233.325 1795.01,233.038 1795.58,230.736 1796.15,230.562 1796.72,228.524 1797.28,230.667 1797.85,228.415 1798.42,228.571 1798.99,228.61 1799.56,227.546 1800.13,225.625 1800.69,226.995 1801.26,228.188 1801.83,229.242 1802.4,230.267 1802.97,230.313 1803.54,232.291 1804.1,232.388 1804.67,231.108 1805.24,231.146 1805.81,229.146 1806.38,229.967 1806.95,229.742 1807.51,227.684 1808.08,229.044 1808.65,229.248 1809.22,228.196 1809.79,229.349 1810.36,230.218 1810.92,231.194 1811.49,230.142 1812.06,230.138 1812.63,230.274 1813.2,230.436 1813.77,231.506 1814.33,230.26 1814.9,232.336 1815.47,232.308 1816.04,230.905 1816.61,230.735 1817.18,229.55 1817.74,229.679 1818.31,230.743 1818.88,230.965 1819.45,228.948 1820.02,227.045 1820.59,226.188 1821.15,226.341 1821.72,229.716 1822.29,229.788 1822.86,229.831 1823.43,229.779 1824,228.636 1824.56,229.657 1825.13,230.721 1825.7,230.551 1826.27,229.4 1826.84,230.669 1827.41,229.814 1827.97,230.814 1828.54,232.818 1829.11,232.639 1829.68,231.553 1830.25,229.346 1830.82,233.582 1831.39,234.197 1831.95,235.833 1832.52,234.294 1833.09,233.077 1833.66,231.073 1834.23,229.839 1834.8,228.796 1835.36,225.891 1835.93,226.181 1836.5,227.415 1837.07,225.518 1837.64,224.831 1838.21,223.172 1838.77,222.621 1839.34,222.112 1839.91,223.791 1840.48,225.27 1841.05,224.38 1841.62,224.703 1842.18,224.26 1842.75,224.811 1843.32,226.228 1843.89,225.232 1844.46,225.462 1845.03,225.722 1845.59,225.943 1846.16,228.448 1846.73,228.579 1847.3,227.797 1847.87,229.251 1848.44,230.474 1849,232.707 1849.57,231.653 1850.14,232.849 1850.71,232.792 1851.28,232.717 1851.85,232.503 1852.41,232.281 1852.98,231.936 1853.55,233.819 1854.12,233.628 1854.69,229.491 1855.26,229.753 1855.82,228.884 1856.39,230.139 1856.96,226.875 1857.53,227.249 1858.1,226.45 1858.67,226.664 1859.23,225.824 1859.8,226.197 1860.37,225.552 1860.94,224.962 1861.51,225.259 1862.08,225.632 1862.64,226.025 1863.21,226.252 1863.78,228.762 1864.35,228.984 1864.92,230.257 1865.49,230.295 1866.05,231.187 1866.62,229.314 1867.19,230.255 1867.76,229.653 1868.33,230.889 1868.9,230.843 1869.46,229.842 1870.03,229.007 1870.6,230.134 1871.17,229.204 1871.74,228.212 1872.31,227.308 1872.87,227.513 1873.44,229.004 1874.01,227.159 1874.58,227.518 1875.15,226.706 1875.72,227.241 1876.28,226.647 1876.85,225.922 1877.42,225.352 1877.99,225.777 1878.56,226.247 1879.13,229.063 1879.69,228.244 1880.26,229.477 1880.83,230.722 1881.4,228.573 1881.97,230.806 1882.54,229.973 1883.1,230.928 1883.67,230.974 1884.24,231.177 1884.81,230.331 1885.38,230.293 1885.95,231.236 1886.51,232.417 1887.08,232.505 1887.65,233.36 1888.22,233.363 1888.79,232.112 1889.36,233.132 1889.92,234.176 1890.49,236.098 1891.06,234.799 1891.63,233.564 1892.2,234.579 1892.77,234.24 1893.33,234.107 1893.9,233.566 1894.47,232.47 1895.04,233.6 1895.61,234.486 1896.18,233.096 1896.74,233.724 1897.31,230.498 1897.88,231.64 1898.45,230.387 1899.02,233.531 1899.59,230.336 1900.16,231.476 1900.72,232.515 1901.29,233.489 1901.86,234.18 1902.43,232.916 1903,235.78 1903.57,236.363 1904.13,235.111 1904.7,232.795 1905.27,232.639 1905.84,233.385 1906.41,232.03 1906.98,231.923 1907.54,231.659 1908.11,232.492 1908.68,232.601 1909.25,232.638 1909.82,231.434 1910.39,230.015 1910.95,231.029 1911.52,231.209 1912.09,230.217 1912.66,231.226 1913.23,230.247 1913.8,231.442 1914.36,230.244 1914.93,230.966 1915.5,231.952 1916.07,231.727 1916.64,233.725 1917.21,233.581 1917.77,232.458 1918.34,232.637 1918.91,231.321 1919.48,232.143 1920.05,232.725 1920.62,234.674 1921.18,235.584 1921.75,234.065 1922.32,233.908 1922.89,232.86 1923.46,232.553 1924.03,231.343 1924.59,232.171 1925.16,232.142 1925.73,232.129 1926.3,231.91 1926.87,231.739 1927.44,231.542 1928,232.668 1928.57,232.606 1929.14,232.143 1929.71,232.999 1930.28,231.593 1930.85,232.392 1931.41,233.212 1931.98,230.876 1932.55,231.615 1933.12,231.538 1933.69,231.01 1934.26,231.905 1934.82,231.917 1935.39,232.621 1935.96,233.491 1936.53,232.941 1937.1,231.586 1937.67,231.226 1938.23,231.072 1938.8,231.868 1939.37,231.601 1939.94,230.386 1940.51,230.365 1941.08,230.223 1941.64,230.147 1942.21,230.998 1942.78,233.072 1943.35,231.651 1943.92,230.554 1944.49,228.165 1945.05,228.475 1945.62,228.482 1946.19,228.668 1946.76,227.675 1947.33,228.884 1947.9,228.892 1948.46,227.74 1949.03,228.908 1949.6,227.864 1950.17,228.851 1950.74,229.915 1951.31,229.701 1951.87,231.953 1952.44,230.745 1953.01,227.51 1953.58,228.864 1954.15,228.832 1954.72,227.935 1955.28,224.984 1955.85,226.371 1956.42,229.613 1956.99,228.537 1957.56,228.517 1958.13,228.746 1958.69,227.805 1959.26,226.945 1959.83,229.057 1960.4,229.927 1960.97,230.92 1961.54,230.864 1962.1,227.941 1962.67,225.878 1963.24,228.133 1963.81,227.199 1964.38,229.331 1964.95,230.609 1965.51,230.855 1966.08,228.638 1966.65,228.758 1967.22,228.887 1967.79,228.988 1968.36,231.011 1968.92,231.021 1969.49,231.879 1970.06,230.738 1970.63,231.613 1971.2,230.388 1971.77,229.13 1972.34,231.44 1972.9,232.602 1973.47,234.566 1974.04,233.268 1974.61,232.986 1975.18,232.756 1975.75,231.619 1976.31,231.166 1976.88,231.085 1977.45,231.067 1978.02,227.869 1978.59,227.934 1979.16,229.205 1979.72,229.148 1980.29,229.113 1980.86,230.153 1981.43,232.266 1982,232.001 1982.57,231.66 1983.13,231.507 1983.7,232.356 1984.27,227.551 1984.84,225.617 1985.41,225.853 1985.98,227.022 1986.54,227.293 1987.11,229.32 1987.68,229.357 1988.25,231.426 1988.82,232.241 1989.39,231.776 1989.95,232.901 1990.52,232.611 1991.09,232.427 1991.66,231.063 1992.23,229.878 1992.8,228.932 1993.36,229.053 1993.93,227.145 1994.5,230.172 1995.07,228.048 1995.64,229.357 1996.21,228.095 1996.77,227.219 1997.34,228.341 1997.91,228.553 1998.48,227.459 1999.05,228.806 1999.62,228.957 2000.18,229.185 2000.75,228.249 2001.32,228.39 2001.89,229.496 2002.46,229.474 2003.03,230.493 2003.59,228.326 2004.16,229.375 2004.73,229.317 2005.3,227.167 2005.87,228.327 2006.44,227.268 2007,227.265 2007.57,225.403 2008.14,224.424 2008.71,227.843 2009.28,228.957 2009.85,226.786 2010.41,227.22 2010.98,226.477 2011.55,228.928 2012.12,226.864 2012.69,227.069 2013.26,226.336 2013.82,227.842 2014.39,228.026 2014.96,228.259 2015.53,230.49 2016.1,230.395 2016.67,230.45 2017.23,230.748 2017.8,230.786 2018.37,229.95 2018.94,229.944 2019.51,228.833 2020.08,227.731 2020.64,223.684 2021.21,228.335 2021.78,227.566 2022.35,228.797 2022.92,229.915 2023.49,230.227 2024.05,228.443 2024.62,228.647 2025.19,229.832 2025.76,232.194 2026.33,233.05 2026.9,231.722 2027.46,233.788 2028.03,234.511 2028.6,234.149 2029.17,233.061 2029.74,233.125 2030.31,233.289 2030.87,230.025 2031.44,230.906 2032.01,229.793 2032.58,231.839 2033.15,230.714 2033.72,230.709 2034.28,231.535 2034.85,232.466 2035.42,232.358 2035.99,232.367 2036.56,231.375 2037.13,230.438 2037.69,229.434 2038.26,230.62 2038.83,229.557 2039.4,230.433 2039.97,229.258 2040.54,228.337 2041.11,228.302 2041.67,226.431 2042.24,227.813 2042.81,225.898 2043.38,231.293 2043.95,231.248 2044.52,230.842 2045.08,228.842 2045.65,227.973 2046.22,227.206 2046.79,229.56 2047.36,229.547 2047.93,230.671 2048.49,228.815 2049.06,228.797 2049.63,228.812 2050.2,228.914 2050.77,230.249 2051.34,230.235 2051.9,230.532 2052.47,230.641 2053.04,230.636 2053.61,229.988 2054.18,229.992 2054.75,231.051 2055.31,231.175 2055.88,229.124 2056.45,229.325 2057.02,230.538 2057.59,231.61 2058.16,232.592 2058.72,231.232 2059.29,229.197 2059.86,229.3 2060.43,230.397 2061,228.471 2061.57,228.649 2062.13,228.761 2062.7,227.897 2063.27,227.306 2063.84,228.476 2064.41,228.669 2064.98,226.956 2065.54,229.419 2066.11,231.611 2066.68,231.424 2067.25,230.333 2067.82,229.42 2068.39,229.588 2068.95,228.622 2069.52,229.083 2070.09,228.47 2070.66,228.7 2071.23,228.125 2071.8,228.253 2072.36,227.617 2072.93,226.728 2073.5,226.108 2074.07,224.567 2074.64,224.024 2075.21,225.537 2075.77,224.903 2076.34,227.187 2076.91,226.471 2077.48,230.081 2078.05,230.001 2078.62,227.082 2079.18,226.494 2079.75,228.013 2080.32,230.587 2080.89,231.762 2081.46,233.85 2082.03,231.884 2082.59,233.005 2083.16,234.022 2083.73,232.927 2084.3,231.556 2084.87,230.369 2085.44,229.421 2086,229.732 2086.57,229.014 2087.14,230.067 2087.71,231.175 2088.28,230.897 2088.85,233.899 2089.41,233.686 2089.98,232.601 2090.55,228.444 2091.12,228.666 2091.69,229.899 2092.26,230.878 2092.82,231.932 2093.39,235.91 2093.96,236.845 2094.53,232.409 2095.1,232.179 2095.67,232.145 2096.23,231.19 2096.8,230.924 2097.37,234.022 2097.94,235.572 2098.51,235.206 2099.08,234.952 2099.64,234.575 2100.21,234.129 2100.78,232.897 2101.35,232.79 2101.92,231.332 2102.49,230.221 2103.05,228.117 2103.62,228.041 2104.19,228.514 2104.76,230.74 2105.33,230.617 2105.9,230.757 2106.46,230.788 2107.03,231.785 2107.6,231.59 2108.17,232.422 2108.74,231.256 2109.31,229.927 2109.87,229.914 2110.44,229.175 2111.01,231.349 2111.58,229.179 2112.15,230.299 2112.72,229.38 2113.29,229.45 2113.85,226.537 2114.42,226.013 2114.99,227.445 2115.56,229.595 2116.13,228.573 2116.7,228.741 2117.26,229.891 2117.83,229.064 2118.4,230.167 2118.97,230.184 2119.54,231.292 2120.11,230.019 2120.67,230.178 2121.24,230.219 2121.81,233.402 2122.38,233.185 2122.95,232.856 2123.52,233.789 2124.08,232.647 2124.65,232.373 2125.22,232.505 2125.79,233.294 2126.36,233.318 2126.93,234.189 2127.49,234.01 2128.06,235.637 2128.63,235.464 2129.2,235.09 2129.77,232.636 2130.34,229.341 2130.9,228.488 2131.47,227.51 2132.04,229.861 2132.61,230.128 2133.18,231.044 2133.75,228.871 2134.31,230.896 2134.88,231.913 2135.45,231.843 2136.02,229.699 2136.59,231.688 2137.16,232.739 2137.72,232.545 2138.29,232.356 2138.86,232.316 2139.43,230.109 2140,230.025 2140.57,230.97 2141.13,230.559 2141.7,229.593 2142.27,229.495 2142.84,229.465 2143.41,231.773 2143.98,229.566 2144.54,230.57 2145.11,230.689 2145.68,231.764 2146.25,231.668 2146.82,230.599 2147.39,231.534 2147.95,231.289 2148.52,234.162 2149.09,235.857 2149.66,234.49 2150.23,233.018 2150.8,231.613 2151.36,231.495 2151.93,230.235 2152.5,227.868 2153.07,226.858 2153.64,225.191 2154.21,224.747 2154.77,226.024 2155.34,227.118 2155.91,226.22 2156.48,223.764 2157.05,225.334 2157.62,228.605 2158.18,229.576 2158.75,229.497 2159.32,230.777 2159.89,230.794 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.023\n  with uncertainty of ± 0.0021003246328049536\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01679 ± (0.00217773, 0.00223792) (MC)\n  95% confidence interval: [-4.02114, -4.01262] (MC)\n  linear error propagation: -4.01678 ± 0.00217198\n  |δ_y| = |0.00144806| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016785020703425, val_l = 0.004358047327035486, val_u = 0.004165649033827101)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.52 2211.02,1148.52 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1000.17 2211.02,1000.17 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,851.812 2211.02,851.812 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,703.457 2211.02,703.457 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,555.102 2211.02,555.102 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,406.748 2211.02,406.748 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,258.393 2211.02,258.393 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.52 365.751,1148.52 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1000.17 365.751,1000.17 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,851.812 365.751,851.812 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,703.457 365.751,703.457 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,555.102 365.751,555.102 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,406.748 365.751,406.748 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,258.393 365.751,258.393 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M298.909 1134.32 Q295.298 1134.32 293.469 1137.88 Q291.664 1141.43 291.664 1148.56 Q291.664 1155.66 293.469 1159.23 Q295.298 1162.77 298.909 1162.77 Q302.543 1162.77 304.349 1159.23 Q306.177 1155.66 306.177 1148.56 Q306.177 1141.43 304.349 1137.88 Q302.543 1134.32 298.909 1134.32 M298.909 1130.62 Q304.719 1130.62 307.775 1135.22 Q310.853 1139.81 310.853 1148.56 Q310.853 1157.28 307.775 1161.89 Q304.719 1166.47 298.909 1166.47 Q293.099 1166.47 290.02 1161.89 Q286.964 1157.28 286.964 1148.56 Q286.964 1139.81 290.02 1135.22 Q293.099 1130.62 298.909 1130.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M259.557 1013.51 L267.196 1013.51 L267.196 987.146 L258.886 988.812 L258.886 984.553 L267.15 982.886 L271.826 982.886 L271.826 1013.51 L279.465 1013.51 L279.465 1017.45 L259.557 1017.45 L259.557 1013.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 985.965 Q295.298 985.965 293.469 989.53 Q291.664 993.072 291.664 1000.2 Q291.664 1007.31 293.469 1010.87 Q295.298 1014.41 298.909 1014.41 Q302.543 1014.41 304.349 1010.87 Q306.177 1007.31 306.177 1000.2 Q306.177 993.072 304.349 989.53 Q302.543 985.965 298.909 985.965 M298.909 982.261 Q304.719 982.261 307.775 986.868 Q310.853 991.451 310.853 1000.2 Q310.853 1008.93 307.775 1013.53 Q304.719 1018.12 298.909 1018.12 Q293.099 1018.12 290.02 1013.53 Q286.964 1008.93 286.964 1000.2 Q286.964 991.451 290.02 986.868 Q293.099 982.261 298.909 982.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M262.775 865.157 L279.094 865.157 L279.094 869.092 L257.15 869.092 L257.15 865.157 Q259.812 862.402 264.395 857.772 Q269.002 853.12 270.182 851.777 Q272.428 849.254 273.307 847.518 Q274.21 845.759 274.21 844.069 Q274.21 841.314 272.266 839.578 Q270.344 837.842 267.242 837.842 Q265.043 837.842 262.59 838.606 Q260.159 839.37 257.381 840.921 L257.381 836.198 Q260.205 835.064 262.659 834.485 Q265.113 833.907 267.15 833.907 Q272.52 833.907 275.715 836.592 Q278.909 839.277 278.909 843.768 Q278.909 845.897 278.099 847.819 Q277.312 849.717 275.205 852.309 Q274.627 852.981 271.525 856.198 Q268.423 859.393 262.775 865.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 837.61 Q295.298 837.61 293.469 841.175 Q291.664 844.717 291.664 851.846 Q291.664 858.953 293.469 862.518 Q295.298 866.059 298.909 866.059 Q302.543 866.059 304.349 862.518 Q306.177 858.953 306.177 851.846 Q306.177 844.717 304.349 841.175 Q302.543 837.61 298.909 837.61 M298.909 833.907 Q304.719 833.907 307.775 838.513 Q310.853 843.097 310.853 851.846 Q310.853 860.573 307.775 865.18 Q304.719 869.763 298.909 869.763 Q293.099 869.763 290.02 865.18 Q286.964 860.573 286.964 851.846 Q286.964 843.097 290.02 838.513 Q293.099 833.907 298.909 833.907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M272.914 702.103 Q276.27 702.821 278.145 705.089 Q280.043 707.358 280.043 710.691 Q280.043 715.807 276.525 718.607 Q273.006 721.408 266.525 721.408 Q264.349 721.408 262.034 720.969 Q259.742 720.552 257.289 719.695 L257.289 715.182 Q259.233 716.316 261.548 716.895 Q263.863 717.473 266.386 717.473 Q270.784 717.473 273.076 715.737 Q275.39 714.001 275.39 710.691 Q275.39 707.635 273.238 705.922 Q271.108 704.186 267.289 704.186 L263.261 704.186 L263.261 700.344 L267.474 700.344 Q270.923 700.344 272.752 698.978 Q274.58 697.589 274.58 694.996 Q274.58 692.334 272.682 690.922 Q270.807 689.487 267.289 689.487 Q265.367 689.487 263.168 689.904 Q260.969 690.321 258.33 691.2 L258.33 687.034 Q260.992 686.293 263.307 685.922 Q265.645 685.552 267.705 685.552 Q273.029 685.552 276.131 687.983 Q279.233 690.39 279.233 694.51 Q279.233 697.381 277.59 699.371 Q275.946 701.339 272.914 702.103 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 689.256 Q295.298 689.256 293.469 692.821 Q291.664 696.362 291.664 703.492 Q291.664 710.598 293.469 714.163 Q295.298 717.705 298.909 717.705 Q302.543 717.705 304.349 714.163 Q306.177 710.598 306.177 703.492 Q306.177 696.362 304.349 692.821 Q302.543 689.256 298.909 689.256 M298.909 685.552 Q304.719 685.552 307.775 690.159 Q310.853 694.742 310.853 703.492 Q310.853 712.219 307.775 716.825 Q304.719 721.408 298.909 721.408 Q293.099 721.408 290.02 716.825 Q286.964 712.219 286.964 703.492 Q286.964 694.742 290.02 690.159 Q293.099 685.552 298.909 685.552 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M271.594 541.896 L259.789 560.345 L271.594 560.345 L271.594 541.896 M270.367 537.822 L276.247 537.822 L276.247 560.345 L281.177 560.345 L281.177 564.234 L276.247 564.234 L276.247 572.382 L271.594 572.382 L271.594 564.234 L255.992 564.234 L255.992 559.72 L270.367 537.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 540.901 Q295.298 540.901 293.469 544.466 Q291.664 548.008 291.664 555.137 Q291.664 562.244 293.469 565.808 Q295.298 569.35 298.909 569.35 Q302.543 569.35 304.349 565.808 Q306.177 562.244 306.177 555.137 Q306.177 548.008 304.349 544.466 Q302.543 540.901 298.909 540.901 M298.909 537.197 Q304.719 537.197 307.775 541.804 Q310.853 546.387 310.853 555.137 Q310.853 563.864 307.775 568.47 Q304.719 573.054 298.909 573.054 Q293.099 573.054 290.02 568.47 Q286.964 563.864 286.964 555.137 Q286.964 546.387 290.02 541.804 Q293.099 537.197 298.909 537.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M258.793 389.468 L277.15 389.468 L277.15 393.403 L263.076 393.403 L263.076 401.875 Q264.094 401.528 265.113 401.366 Q266.131 401.181 267.15 401.181 Q272.937 401.181 276.316 404.352 Q279.696 407.523 279.696 412.94 Q279.696 418.519 276.224 421.62 Q272.752 424.699 266.432 424.699 Q264.256 424.699 261.988 424.329 Q259.742 423.958 257.335 423.218 L257.335 418.519 Q259.418 419.653 261.641 420.208 Q263.863 420.764 266.34 420.764 Q270.344 420.764 272.682 418.657 Q275.02 416.551 275.02 412.94 Q275.02 409.329 272.682 407.222 Q270.344 405.116 266.34 405.116 Q264.465 405.116 262.59 405.532 Q260.738 405.949 258.793 406.829 L258.793 389.468 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 392.546 Q295.298 392.546 293.469 396.111 Q291.664 399.653 291.664 406.782 Q291.664 413.889 293.469 417.454 Q295.298 420.995 298.909 420.995 Q302.543 420.995 304.349 417.454 Q306.177 413.889 306.177 406.782 Q306.177 399.653 304.349 396.111 Q302.543 392.546 298.909 392.546 M298.909 388.843 Q304.719 388.843 307.775 393.449 Q310.853 398.033 310.853 406.782 Q310.853 415.509 307.775 420.116 Q304.719 424.699 298.909 424.699 Q293.099 424.699 290.02 420.116 Q286.964 415.509 286.964 406.782 Q286.964 398.033 290.02 393.449 Q293.099 388.843 298.909 388.843 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M269.326 256.53 Q266.178 256.53 264.326 258.682 Q262.497 260.835 262.497 264.585 Q262.497 268.312 264.326 270.488 Q266.178 272.641 269.326 272.641 Q272.474 272.641 274.303 270.488 Q276.154 268.312 276.154 264.585 Q276.154 260.835 274.303 258.682 Q272.474 256.53 269.326 256.53 M278.608 241.877 L278.608 246.136 Q276.849 245.303 275.043 244.863 Q273.261 244.423 271.502 244.423 Q266.872 244.423 264.418 247.548 Q261.988 250.673 261.641 256.993 Q263.006 254.979 265.066 253.914 Q267.127 252.826 269.603 252.826 Q274.812 252.826 277.821 255.997 Q280.853 259.145 280.853 264.585 Q280.853 269.909 277.705 273.127 Q274.557 276.344 269.326 276.344 Q263.33 276.344 260.159 271.761 Q256.988 267.155 256.988 258.428 Q256.988 250.233 260.877 245.372 Q264.766 240.488 271.316 240.488 Q273.076 240.488 274.858 240.835 Q276.664 241.183 278.608 241.877 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 244.192 Q295.298 244.192 293.469 247.757 Q291.664 251.298 291.664 258.428 Q291.664 265.534 293.469 269.099 Q295.298 272.641 298.909 272.641 Q302.543 272.641 304.349 269.099 Q306.177 265.534 306.177 258.428 Q306.177 251.298 304.349 247.757 Q302.543 244.192 298.909 244.192 M298.909 240.488 Q304.719 240.488 307.775 245.095 Q310.853 249.678 310.853 258.428 Q310.853 267.155 307.775 271.761 Q304.719 276.344 298.909 276.344 Q293.099 276.344 290.02 271.761 Q286.964 267.155 286.964 258.428 Q286.964 249.678 290.02 245.095 Q293.099 240.488 298.909 240.488 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1039.21 400.199,938.785 400.786,846.642 401.372,762.224 401.958,685.016 402.545,614.543 403.131,550.364 403.718,492.069 404.304,439.276 404.891,481.298 405.477,434.266 406.063,391.955 406.65,426.727 407.236,389.711 407.823,357.679 408.409,328.396 408.995,302.632 409.582,281.32 410.168,261.85 410.755,245.249 411.341,231.325 411.927,219.895 412.514,287.999 413.1,313.819 413.687,304.872 414.273,297.404 414.86,291.863 415.446,314.899 416.032,311.804 416.619,310.098 417.205,309.809 417.792,310.728 418.378,332.46 418.964,354.571 419.551,358.154 420.137,378.01 420.724,384.093 421.31,404.775 421.896,423.544 422.483,429.49 423.069,448.357 423.656,477.714 424.242,496.886 424.829,505.275 425.415,524.654 426.001,542.552 426.588,552.423 427.174,562.135 427.761,572.462 428.347,581.881 428.933,598.797 429.52,615.435 430.106,639.067 430.693,662.597 431.279,678.618 431.865,699.247 432.452,708.243 433.038,717.345 433.625,726.328 434.211,736.178 434.798,754.862 435.384,764.865 435.97,774.539 436.557,788.682 437.143,798.282 437.73,808.104 438.316,821.016 438.902,840.915 439.489,852.617 440.075,860.994 440.662,872.289 441.248,883.335 441.835,894.031 442.421,901.251 443.007,914.424 443.594,924.411 444.18,936.551 444.767,942.343 445.353,956.657 445.939,962.51 446.526,975.84 447.112,983.663 447.699,993.994 448.285,1003.81 448.871,1015.68 449.458,1022.27 450.044,1028.82 450.631,1034.84 451.217,1043.21 451.804,1047 452.39,1055.21 452.976,1063.04 453.563,1066.79 454.149,1076.58 454.736,1083.69 455.322,1088.82 455.908,1097.85 456.495,1102.81 457.081,1107.3 457.668,1109.7 458.254,1117.9 458.84,1125.59 459.427,1134.89 460.013,1138.4 460.6,1143.57 461.186,1145.13 461.773,1146.86 462.359,1151.76 462.945,1156.6 463.532,1158.04 464.118,1159.53 464.705,1160.9 465.291,1162.3 465.877,1165.4 466.464,1170.13 467.05,1176.05 467.637,1177.09 468.223,1181.29 468.809,1182.04 469.396,1182.95 469.982,1185.6 470.569,1189.55 471.155,1191.88 471.742,1194 472.328,1197.37 472.914,1198.06 473.501,1198.57 474.087,1200.53 474.674,1202.45 475.26,1207.19 475.846,1208.81 476.433,1210.29 477.019,1216.27 477.606,1216.07 478.192,1215.88 478.778,1222.68 479.365,1223.52 479.951,1224.43 480.538,1225.32 481.124,1226.45 481.711,1227.44 482.297,1227.29 482.883,1231.05 483.47,1233.18 484.056,1232.18 484.643,1235.7 485.229,1236.43 485.815,1236.98 486.402,1236.29 486.988,1237 487.575,1236.1 488.161,1235.63 488.748,1236.21 489.334,1237.27 489.92,1239.14 490.507,1242.07 491.093,1241.18 491.68,1240.38 492.266,1238.14 492.852,1236.01 493.439,1236.92 494.025,1237.76 494.612,1241.15 495.198,1240.71 495.784,1238.61 496.371,1238.16 496.957,1238.88 497.544,1239.39 498.13,1238.8 498.717,1239.68 499.303,1240.7 499.889,1241.23 500.476,1243.11 501.062,1247.65 501.649,1250.53 502.235,1249.39 502.821,1247 503.408,1247.3 503.994,1246.23 504.581,1248.07 505.167,1245.79 505.753,1244.98 506.34,1243.77 506.926,1244.12 507.513,1244.82 508.099,1245.17 508.686,1244.26 509.272,1244.5 509.858,1242.31 510.445,1243.95 511.031,1245.69 511.618,1246.24 512.204,1245.54 512.79,1242.03 513.377,1242.53 513.963,1240.56 514.55,1236.01 515.136,1235.77 515.722,1234.08 516.309,1232.6 516.895,1232.43 517.482,1231.14 518.068,1231.11 518.655,1229.45 519.241,1231.68 519.827,1232.78 520.414,1233.99 521,1232.24 521.587,1232.14 522.173,1234.37 522.759,1233.86 523.346,1233.66 523.932,1234.49 524.519,1235.47 525.105,1237.77 525.691,1236.29 526.278,1235.73 526.864,1230.52 527.451,1229.09 528.037,1228.81 528.624,1232.5 529.21,1233.39 529.796,1235.43 530.383,1235.06 530.969,1234.41 531.556,1234.27 532.142,1235.33 532.728,1233.75 533.315,1233.66 533.901,1234.6 534.488,1233.28 535.074,1234.04 535.661,1232.55 536.247,1234.76 536.833,1236.7 537.42,1236.09 538.006,1233.28 538.593,1234.21 539.179,1238.84 539.765,1239.32 540.352,1237.74 540.938,1239.7 541.525,1240.15 542.111,1238.05 542.697,1237.57 543.284,1237.02 543.87,1238.9 544.457,1239.29 545.043,1238.32 545.63,1241.34 546.216,1240.53 546.802,1239.76 547.389,1237.91 547.975,1239.64 548.562,1238.76 549.148,1239.43 549.734,1238.91 550.321,1237.94 550.907,1237.42 551.494,1235.77 552.08,1234.01 552.666,1231.17 553.253,1232.1 553.839,1231.61 554.426,1231.29 555.012,1229.78 555.599,1229.46 556.185,1228.1 556.771,1229.21 557.358,1228.95 557.944,1227.6 558.531,1226.3 559.117,1226.16 559.703,1227.39 560.29,1227.28 560.876,1228.42 561.463,1227.13 562.049,1224.39 562.635,1225.86 563.222,1225.93 563.808,1225.76 564.395,1225.79 564.981,1225.97 565.568,1227.34 566.154,1228.34 566.74,1228.16 567.327,1228.08 567.913,1229.26 568.5,1228.9 569.086,1229.99 569.672,1233.38 570.259,1233.91 570.845,1234.45 571.432,1237.48 572.018,1237.87 572.605,1235.85 573.191,1238.75 573.777,1237.84 574.364,1235.66 574.95,1236.23 575.537,1237.73 576.123,1236.95 576.709,1235.16 577.296,1234.32 577.882,1234.9 578.469,1231.6 579.055,1230 579.641,1228.35 580.228,1228.11 580.814,1228.96 581.401,1229.9 581.987,1230.67 582.574,1228.98 583.16,1230 583.746,1228.31 584.333,1227.94 584.919,1229.84 585.506,1231.89 586.092,1233.85 586.678,1234.44 587.265,1234.06 587.851,1234.4 588.438,1232.3 589.024,1229.17 589.61,1227.46 590.197,1226.95 590.783,1226.69 591.37,1226.63 591.956,1222.67 592.543,1223.01 593.129,1222.99 593.715,1222.92 594.302,1222.77 594.888,1226.6 595.475,1225.05 596.061,1227.22 596.647,1228.02 597.234,1229.8 597.82,1229.44 598.407,1229.08 598.993,1227.24 599.579,1227 600.166,1228.03 600.752,1227.81 601.339,1229.48 601.925,1231.37 602.512,1231.78 603.098,1231.26 603.684,1228.45 604.271,1227.95 604.857,1227.64 605.444,1228.15 606.03,1230.22 606.616,1231.02 607.203,1230.47 607.789,1228.78 608.376,1227.3 608.962,1226.9 609.548,1227.55 610.135,1229.42 610.721,1228.89 611.308,1228.31 611.894,1227.71 612.481,1225.72 613.067,1226.55 613.653,1225.06 614.24,1225.89 614.826,1224.4 615.413,1225.23 615.999,1225.91 616.585,1224.35 617.172,1223.08 617.758,1220.36 618.345,1221.37 618.931,1220.31 619.518,1220.32 620.104,1220.18 620.69,1221.19 621.277,1224.53 621.863,1225.39 622.45,1225.05 623.036,1223.32 623.622,1225.37 624.209,1223.84 624.795,1224.73 625.382,1225.7 625.968,1224.2 626.554,1223.78 627.141,1225.69 627.727,1225.15 628.314,1224.63 628.9,1225.28 629.487,1225.74 630.073,1225.2 630.659,1224.37 631.246,1225.27 631.832,1224.67 632.419,1223.98 633.005,1224.75 633.591,1225.26 634.178,1224.95 634.764,1223.51 635.351,1220.52 635.937,1219.15 636.523,1222.45 637.11,1223.44 637.696,1225.34 638.283,1228.33 638.869,1226.59 639.456,1225.99 640.042,1222.91 640.628,1221.41 641.215,1220.12 641.801,1220.25 642.388,1216.35 642.974,1217.58 643.56,1218.58 644.147,1217.18 644.733,1219.46 645.32,1220.48 645.906,1220.31 646.492,1221.2 647.079,1222.05 647.665,1223.92 648.252,1226 648.838,1224.35 649.425,1225.15 650.011,1223.25 650.597,1222.7 651.184,1223.52 651.77,1223.24 652.357,1220.18 652.943,1219.86 653.529,1219.74 654.116,1219.53 654.702,1219.42 655.289,1218.12 655.875,1215.32 656.462,1215.5 657.048,1214.27 657.634,1214.31 658.221,1214.5 658.807,1216.92 659.394,1215.58 659.98,1216.5 660.566,1216.09 661.153,1214.78 661.739,1215.87 662.326,1213.64 662.912,1213.77 663.498,1212.66 664.085,1215.03 664.671,1217.3 665.258,1217.39 665.844,1216.02 666.431,1214.92 667.017,1215.27 667.603,1216.56 668.19,1215.17 668.776,1215 669.363,1214.83 669.949,1212.65 670.535,1212.79 671.122,1211.63 671.708,1211.79 672.295,1214.39 672.881,1215.46 673.467,1215.24 674.054,1217.77 674.64,1217.72 675.227,1212.31 675.813,1214.95 676.4,1214.72 676.986,1217.17 677.572,1218.28 678.159,1221.83 678.745,1222.79 679.332,1222.44 679.918,1226.02 680.504,1224.44 681.091,1224.02 681.677,1227.19 682.264,1225.46 682.85,1221.39 683.436,1221.14 684.023,1223.24 684.609,1220.3 685.196,1221.04 685.782,1220.59 686.369,1220.45 686.955,1221.46 687.541,1220.05 688.128,1219.68 688.714,1218.29 689.301,1215.59 689.887,1216.58 690.473,1216.61 691.06,1216.27 691.646,1218.43 692.233,1220.35 692.819,1222.4 693.405,1222.24 693.992,1222 694.578,1220.32 695.165,1218.85 695.751,1219.82 696.338,1220.99 696.924,1219.34 697.51,1217.7 698.097,1216.51 698.683,1212.87 699.27,1214.18 699.856,1216.35 700.442,1217.36 701.029,1216.13 701.615,1215.93 702.202,1214.88 702.788,1214.91 703.375,1215.67 703.961,1215.56 704.547,1215.39 705.134,1217.68 705.72,1217.49 706.307,1217.54 706.893,1220.77 707.479,1221.25 708.066,1219.54 708.652,1220.58 709.239,1219.95 709.825,1218.51 710.411,1218.04 710.998,1212.86 711.584,1211.68 712.171,1212.82 712.757,1210.41 713.344,1209.13 713.93,1207.96 714.516,1205.76 715.103,1206.39 715.689,1208.94 716.276,1210.53 716.862,1211.74 717.448,1209.38 718.035,1211.02 718.621,1209.82 719.208,1211.01 719.794,1212.24 720.38,1209.88 720.967,1209.92 721.553,1208.99 722.14,1209.2 722.726,1209.59 723.313,1208.69 723.899,1208.81 724.485,1209.93 725.072,1210.31 725.658,1210.52 726.245,1208.26 726.831,1209.79 727.417,1210.05 728.004,1208.9 728.59,1210.35 729.177,1209.41 729.763,1209.54 730.349,1210.95 730.936,1209.89 731.522,1210.02 732.109,1208.98 732.695,1210.45 733.282,1210.71 733.868,1214.32 734.454,1214 735.041,1212.84 735.627,1212.5 736.214,1215.25 736.8,1216.21 737.386,1216.17 737.973,1217.22 738.559,1216.95 739.146,1213.13 739.732,1213.09 740.318,1213.24 740.905,1213.32 741.491,1213.22 742.078,1213.36 742.664,1214.37 743.251,1215.33 743.837,1216.11 744.423,1215.96 745.01,1214.56 745.596,1211.96 746.183,1205.97 746.769,1206.3 747.355,1208.12 747.942,1213.01 748.528,1215.49 749.115,1216.5 749.701,1218.8 750.288,1219.81 750.874,1219.38 751.46,1220.15 752.047,1217.39 752.633,1220.51 753.22,1219.02 753.806,1217.44 754.392,1215.97 754.979,1215.87 755.565,1218.19 756.152,1215.43 756.738,1214.04 757.324,1211.4 757.911,1210.2 758.497,1210.29 759.084,1209.33 759.67,1207.35 760.257,1208.85 760.843,1208.64 761.429,1207.42 762.016,1207.69 762.602,1210.26 763.189,1210.23 763.775,1212.65 764.361,1212.46 764.948,1212.37 765.534,1213.53 766.121,1213.48 766.707,1213.42 767.293,1214.35 767.88,1213.02 768.466,1211.74 769.053,1209.41 769.639,1207.17 770.226,1208.74 770.812,1208.96 771.398,1207.87 771.985,1204.18 772.571,1203.19 773.158,1203.5 773.744,1205.12 774.33,1206.65 774.917,1205.49 775.503,1207.11 776.09,1208.57 776.676,1208.68 777.262,1208.81 777.849,1208.01 778.435,1207.04 779.022,1206.19 779.608,1206.49 780.195,1206.48 780.781,1208.22 781.367,1206.16 781.954,1207.82 782.54,1209.5 783.127,1209.6 783.713,1207.37 784.299,1206.29 784.886,1206.75 785.472,1207.26 786.059,1207.7 786.645,1210.29 787.232,1210.23 787.818,1212.52 788.404,1209.99 788.991,1208.93 789.577,1212.91 790.164,1214.1 790.75,1216.52 791.336,1217.43 791.923,1217.08 792.509,1220.32 793.096,1219.82 793.682,1220.45 794.268,1219.89 794.855,1220.68 795.441,1217.77 796.028,1217.45 796.614,1214.81 797.201,1214.76 797.787,1213.38 798.373,1217.04 798.96,1217.9 799.546,1217.47 800.133,1217.26 800.719,1214.56 801.305,1216.81 801.892,1215.19 802.478,1216.14 803.065,1217.07 803.651,1216.86 804.237,1215.4 804.824,1212.88 805.41,1211.48 805.997,1212.43 806.583,1213.63 807.17,1212.17 807.756,1212.26 808.342,1212.07 808.929,1210.95 809.515,1210.86 810.102,1210.71 810.688,1210.65 811.274,1210.69 811.861,1209.67 812.447,1208.45 813.034,1209.69 813.62,1207.24 814.206,1207.27 814.793,1205.1 815.379,1202.89 815.966,1203.38 816.552,1204.96 817.139,1206.54 817.725,1205.69 818.311,1207.04 818.898,1207.46 819.484,1207.51 820.071,1209.88 820.657,1209.9 821.243,1210.02 821.83,1206.54 822.416,1206.69 823.003,1209.55 823.589,1209.97 824.175,1207.62 824.762,1205.53 825.348,1210.56 825.935,1209.59 826.521,1209.54 827.108,1208.52 827.694,1208.81 828.28,1209.03 828.867,1209.03 829.453,1209.05 830.04,1210.28 830.626,1210.18 831.212,1210.34 831.799,1211.72 832.385,1211.67 832.972,1212.62 833.558,1211.44 834.145,1212.61 834.731,1213.73 835.317,1214.62 835.904,1213.21 836.49,1213.02 837.077,1213.11 837.663,1219 838.249,1218.63 838.836,1218.13 839.422,1217.6 840.009,1219.61 840.595,1220.48 841.181,1221.15 841.768,1218.14 842.354,1217.75 842.941,1218.49 843.527,1218.17 844.114,1216.68 844.7,1217.51 845.286,1217.03 845.873,1215.51 846.459,1213.82 847.046,1217.1 847.632,1214.12 848.218,1212.54 848.805,1213.35 849.391,1212.89 849.978,1211.64 850.564,1212.93 851.15,1212.93 851.737,1210.31 852.323,1212.57 852.91,1211.2 853.496,1211.12 854.083,1213.54 854.669,1213.76 855.255,1215.76 855.842,1217.77 856.428,1217.14 857.015,1215.78 857.601,1216.79 858.187,1215.4 858.774,1214.98 859.36,1213.55 859.947,1213.37 860.533,1213.11 861.119,1215.33 861.706,1214.77 862.292,1215.65 862.879,1213.99 863.465,1214.15 864.052,1215.16 864.638,1214.95 865.224,1214.55 865.811,1211.9 866.397,1210.57 866.984,1211.72 867.57,1214.11 868.156,1214.84 868.743,1217.08 869.329,1216.83 869.916,1218.8 870.502,1218.4 871.089,1216.59 871.675,1213.9 872.261,1208.93 872.848,1206.53 873.434,1207.78 874.021,1209.38 874.607,1209.47 875.193,1209.64 875.78,1208.5 876.366,1209.79 876.953,1209.74 877.539,1209.82 878.125,1209.59 878.712,1208.5 879.298,1208.81 879.885,1208.62 880.471,1209.65 881.058,1208.35 881.644,1209.58 882.23,1207.33 882.817,1204.87 883.403,1204.18 883.99,1203.17 884.576,1203.41 885.162,1203.76 885.749,1204.03 886.335,1204.56 886.922,1205.16 887.508,1205.21 888.094,1206.66 888.681,1205.51 889.267,1205.65 889.854,1205.91 890.44,1205.03 891.027,1205.4 891.613,1205.59 892.199,1205.59 892.786,1208.44 893.372,1210 893.959,1213.76 894.545,1213.47 895.131,1210.83 895.718,1208.48 896.304,1207.3 896.891,1204.91 897.477,1205.01 898.063,1205.05 898.65,1207.52 899.236,1209.05 899.823,1206.39 900.409,1206.6 900.996,1207.93 901.582,1206.79 902.168,1206.92 902.755,1208.28 903.341,1205.87 903.928,1205.79 904.514,1203.64 905.1,1205.32 905.687,1204.27 906.273,1203.69 906.86,1204.01 907.446,1208.02 908.032,1208.11 908.619,1209.42 909.205,1209.66 909.792,1209.87 910.378,1211.03 910.965,1212.11 911.551,1211.79 912.137,1211.61 912.724,1213.79 913.31,1213.55 913.897,1213.16 914.483,1213.21 915.069,1213.94 915.656,1218.39 916.242,1216.58 916.829,1217.51 917.415,1214.73 918.002,1215.6 918.588,1214.03 919.174,1212.66 919.761,1212.53 920.347,1210.94 920.934,1213.07 921.52,1211.67 922.106,1211.37 922.693,1211.36 923.279,1210.03 923.866,1210.2 924.452,1209.06 925.038,1209.22 925.625,1210.55 926.211,1207.91 926.798,1205.37 927.384,1205.78 927.971,1203.55 928.557,1202.65 929.143,1202.98 929.73,1203.25 930.316,1206 930.903,1206.34 931.489,1207.57 932.075,1205.3 932.662,1204.21 933.248,1204.53 933.835,1205.03 934.421,1206.56 935.007,1204.3 935.594,1204.55 936.18,1204.74 936.767,1203.8 937.353,1205.26 937.94,1205.5 938.526,1205.76 939.112,1205.9 939.699,1206.2 940.285,1203.79 940.872,1204.28 941.458,1203.14 942.044,1203.51 942.631,1202.7 943.217,1202.62 943.804,1202.79 944.39,1204.36 944.976,1204.65 945.563,1204.98 946.149,1206.57 946.736,1203.26 947.322,1204.87 947.909,1205.39 948.495,1207.97 949.081,1204.44 949.668,1205.58 950.254,1208.21 950.841,1206.87 951.427,1205.9 952.013,1206.04 952.6,1208.53 953.186,1208.5 953.773,1208.84 954.359,1209.97 954.945,1209.84 955.532,1209.9 956.118,1212.51 956.705,1214.58 957.291,1216.84 957.878,1213.06 958.464,1214.35 959.05,1213.9 959.637,1215.04 960.223,1213.28 960.81,1213.26 961.396,1211.68 961.982,1211.71 962.569,1213.93 963.155,1213.72 963.742,1214.8 964.328,1214.57 964.915,1215.44 965.501,1213.67 966.087,1211.02 966.674,1212.2 967.26,1210.86 967.847,1213.09 968.433,1212.83 969.019,1212.75 969.606,1212.69 970.192,1211.36 970.779,1211 971.365,1212.09 971.951,1213.02 972.538,1213.02 973.124,1212.68 973.711,1212.58 974.297,1214.87 974.884,1212.41 975.47,1211.88 976.056,1212.84 976.643,1213.8 977.229,1213.51 977.816,1215.54 978.402,1216.37 978.988,1215.97 979.575,1214.5 980.161,1214.15 980.748,1213.96 981.334,1215 981.92,1215.95 982.507,1215.64 983.093,1214.11 983.68,1216.09 984.266,1217.21 984.853,1217.02 985.439,1216.67 986.025,1216.21 986.612,1213.44 987.198,1212.06 987.785,1210.54 988.371,1208.13 988.957,1206.82 989.544,1207.97 990.13,1208.2 990.717,1207.05 991.303,1206.95 991.889,1205.71 992.476,1204.57 993.062,1206.02 993.649,1204.95 994.235,1207.66 994.822,1207.98 995.408,1209.44 995.994,1207.09 996.581,1206.24 997.167,1207.68 997.754,1207.88 998.34,1207.99 998.926,1205.64 999.513,1205.87 1000.1,1207.19 1000.69,1205.76 1001.27,1207.12 1001.86,1207.37 1002.44,1205.05 1003.03,1205.24 1003.62,1206.66 1004.2,1208.1 1004.79,1208.06 1005.38,1211.69 1005.96,1211.6 1006.55,1212.84 1007.14,1211.49 1007.72,1211.21 1008.31,1211.08 1008.9,1210.94 1009.48,1210.63 1010.07,1209.55 1010.65,1206.92 1011.24,1204.37 1011.83,1203.24 1012.41,1201.27 1013,1201.78 1013.59,1202.52 1014.17,1203 1014.76,1198.37 1015.35,1199.12 1015.93,1202.23 1016.52,1202.59 1017.11,1200.17 1017.69,1204.22 1018.28,1203.32 1018.86,1203.37 1019.45,1203.38 1020.04,1202.44 1020.62,1201.62 1021.21,1201.89 1021.8,1202.09 1022.38,1203.9 1022.97,1202.72 1023.56,1201.8 1024.14,1199.59 1024.73,1198.69 1025.32,1201.64 1025.9,1201.95 1026.49,1202.17 1027.07,1201.43 1027.66,1203.01 1028.25,1202.16 1028.83,1202.3 1029.42,1202.54 1030.01,1202.88 1030.59,1206.84 1031.18,1205.58 1031.77,1206.86 1032.35,1206.97 1032.94,1207.08 1033.52,1209.46 1034.11,1210.84 1034.7,1210.6 1035.28,1211.76 1035.87,1213.02 1036.46,1214.93 1037.04,1214.57 1037.63,1212.79 1038.22,1212.81 1038.8,1215.21 1039.39,1213.76 1039.98,1213.64 1040.56,1212.23 1041.15,1210.6 1041.73,1209.23 1042.32,1208.97 1042.91,1210.22 1043.49,1210.3 1044.08,1209.03 1044.67,1209.17 1045.25,1208.14 1045.84,1208.04 1046.43,1207.02 1047.01,1207.17 1047.6,1206.32 1048.19,1209.02 1048.77,1209.27 1049.36,1208.21 1049.94,1206.89 1050.53,1209.24 1051.12,1212.99 1051.7,1212.71 1052.29,1213.78 1052.88,1213.64 1053.46,1213.51 1054.05,1214.34 1054.64,1212.95 1055.22,1214.03 1055.81,1214.87 1056.39,1213.27 1056.98,1215.45 1057.57,1215.3 1058.15,1216.39 1058.74,1216.06 1059.33,1215.91 1059.91,1211.95 1060.5,1211.75 1061.09,1213.98 1061.67,1213.89 1062.26,1214.51 1062.85,1213.11 1063.43,1216.42 1064.02,1218.31 1064.6,1216.72 1065.19,1217.59 1065.78,1219.69 1066.36,1220.23 1066.95,1220.94 1067.54,1219.23 1068.12,1218.56 1068.71,1220.2 1069.3,1218.3 1069.88,1216.33 1070.47,1218.31 1071.06,1215.51 1071.64,1213.89 1072.23,1213.68 1072.81,1213.34 1073.4,1211.84 1073.99,1211.85 1074.57,1211.48 1075.16,1211.44 1075.75,1210.14 1076.33,1211.27 1076.92,1212.11 1077.51,1210.89 1078.09,1209.57 1078.68,1210.5 1079.26,1211.46 1079.85,1209.72 1080.44,1209.43 1081.02,1209.3 1081.61,1209.04 1082.2,1209.96 1082.78,1210.88 1083.37,1212.02 1083.96,1209.22 1084.54,1209.23 1085.13,1207.75 1085.72,1205.46 1086.3,1208.14 1086.89,1207.79 1087.47,1207.78 1088.06,1206.61 1088.65,1202.87 1089.23,1203.15 1089.82,1202.37 1090.41,1201.31 1090.99,1200.77 1091.58,1202.25 1092.17,1202.62 1092.75,1201.84 1093.34,1202.26 1093.93,1203.73 1094.51,1207.69 1095.1,1206.57 1095.68,1203 1096.27,1203.63 1096.86,1206.48 1097.44,1207.97 1098.03,1209.36 1098.62,1209.51 1099.2,1210.75 1099.79,1209.38 1100.38,1209.22 1100.96,1210.25 1101.55,1208.99 1102.14,1210.45 1102.72,1212.88 1103.31,1212.91 1103.89,1210.15 1104.48,1212.51 1105.07,1209.91 1105.65,1208.72 1106.24,1208.39 1106.83,1205.76 1107.41,1205.83 1108,1207.12 1108.59,1208.15 1109.17,1207.99 1109.76,1205.55 1110.34,1206.82 1110.93,1206.89 1111.52,1206.69 1112.1,1205.25 1112.69,1201.91 1113.28,1202.4 1113.86,1202.76 1114.45,1202.13 1115.04,1202.47 1115.62,1202.87 1116.21,1201.89 1116.8,1202.19 1117.38,1202.53 1117.97,1203.02 1118.55,1203.63 1119.14,1203.91 1119.73,1205.32 1120.31,1206.78 1120.9,1200.68 1121.49,1202.5 1122.07,1204.12 1122.66,1206.82 1123.25,1208.18 1123.83,1209.38 1124.42,1206.79 1125.01,1205.68 1125.59,1207.35 1126.18,1206.34 1126.76,1206.32 1127.35,1207.53 1127.94,1207.54 1128.52,1207.52 1129.11,1205.27 1129.7,1204.3 1130.28,1206.87 1130.87,1208.08 1131.46,1209.44 1132.04,1211.62 1132.63,1212.85 1133.21,1214.97 1133.8,1213.39 1134.39,1214.21 1134.97,1212.77 1135.56,1213.73 1136.15,1213.47 1136.73,1212.88 1137.32,1215.1 1137.91,1213.52 1138.49,1209.59 1139.08,1211.19 1139.67,1211.16 1140.25,1209.49 1140.84,1207.36 1141.42,1208.58 1142.01,1208.79 1142.6,1210.96 1143.18,1212.03 1143.77,1213 1144.36,1212.65 1144.94,1210.19 1145.53,1211.25 1146.12,1211 1146.7,1211.9 1147.29,1212.87 1147.88,1211.48 1148.46,1210.08 1149.05,1214.78 1149.63,1213.38 1150.22,1213.09 1150.81,1212.62 1151.39,1211.27 1151.98,1210.91 1152.57,1210.72 1153.15,1209.27 1153.74,1210.21 1154.33,1212.71 1154.91,1211.16 1155.5,1212.1 1156.09,1214.1 1156.67,1213.7 1157.26,1213.28 1157.84,1216.58 1158.43,1217.31 1159.02,1214.13 1159.6,1212.78 1160.19,1211.19 1160.78,1207.36 1161.36,1208.62 1161.95,1209.67 1162.54,1207.26 1163.12,1207.01 1163.71,1206.95 1164.29,1207.13 1164.88,1204.48 1165.47,1206.04 1166.05,1207.26 1166.64,1208.7 1167.23,1208.8 1167.81,1208.77 1168.4,1212.07 1168.99,1210.53 1169.57,1210.64 1170.16,1211.73 1170.75,1210.2 1171.33,1207.64 1171.92,1207.9 1172.5,1207.98 1173.09,1206.48 1173.68,1207.78 1174.26,1208.88 1174.85,1208.79 1175.44,1209.7 1176.02,1209.72 1176.61,1210.81 1177.2,1208.27 1177.78,1209.34 1178.37,1209.16 1178.96,1208.06 1179.54,1209.04 1180.13,1210.34 1180.71,1209.2 1181.3,1210.31 1181.89,1211.4 1182.47,1207.56 1183.06,1209.71 1183.65,1214.51 1184.23,1214.24 1184.82,1212.79 1185.41,1208.91 1185.99,1207.69 1186.58,1206.44 1187.16,1202.86 1187.75,1204.25 1188.34,1203.28 1188.92,1207.17 1189.51,1203.9 1190.1,1205.5 1190.68,1203.39 1191.27,1201.57 1191.86,1203.24 1192.44,1201.21 1193.03,1202.65 1193.62,1202.96 1194.2,1202.03 1194.79,1202.47 1195.37,1201.62 1195.96,1200.77 1196.55,1202.41 1197.13,1200.25 1197.72,1201.8 1198.31,1202.2 1198.89,1203.72 1199.48,1204.99 1200.07,1203.9 1200.65,1201.9 1201.24,1201.22 1201.83,1200.58 1202.41,1201.04 1203,1201.5 1203.58,1204.03 1204.17,1204.2 1204.76,1202.13 1205.34,1202.38 1205.93,1203.77 1206.52,1203.88 1207.1,1204.22 1207.69,1204.45 1208.28,1203.27 1208.86,1202.02 1209.45,1203.45 1210.03,1203.76 1210.62,1205.02 1211.21,1205.27 1211.79,1207.76 1212.38,1207.82 1212.97,1208.23 1213.55,1208.41 1214.14,1207.17 1214.73,1207.29 1215.31,1207.51 1215.9,1208.52 1216.49,1209.5 1217.07,1209.41 1217.66,1212.86 1218.24,1210.37 1218.83,1209.18 1219.42,1212.68 1220,1212.39 1220.59,1212.26 1221.18,1210.99 1221.76,1211.78 1222.35,1212.93 1222.94,1213.74 1223.52,1212.41 1224.11,1214.51 1224.7,1214.17 1225.28,1212.61 1225.87,1212.45 1226.45,1212.21 1227.04,1213.37 1227.63,1215.54 1228.21,1213.84 1228.8,1211.2 1229.39,1212.38 1229.97,1209.83 1230.56,1211.07 1231.15,1209.64 1231.73,1209.38 1232.32,1209.43 1232.91,1207.03 1233.49,1207.03 1234.08,1206.95 1234.66,1209.49 1235.25,1210.76 1235.84,1210.7 1236.42,1208.3 1237.01,1205.78 1237.6,1204.57 1238.18,1202.97 1238.77,1204.64 1239.36,1205.05 1239.94,1206.46 1240.53,1207.84 1241.11,1206.68 1241.7,1206.82 1242.29,1207.92 1242.87,1212.76 1243.46,1213.69 1244.05,1215.79 1244.63,1215.49 1245.22,1217.19 1245.81,1216.67 1246.39,1213.62 1246.98,1214.32 1247.57,1210.32 1248.15,1208.98 1248.74,1211.42 1249.32,1208.64 1249.91,1208.66 1250.5,1209.95 1251.08,1208.64 1251.67,1207.31 1252.26,1206.17 1252.84,1206.24 1253.43,1206.15 1254.02,1208.8 1254.6,1212.3 1255.19,1214.64 1255.78,1215.59 1256.36,1215.54 1256.95,1215.04 1257.53,1214.71 1258.12,1214.44 1258.71,1212.73 1259.29,1211.16 1259.88,1212.23 1260.47,1212.17 1261.05,1210.84 1261.64,1210.51 1262.23,1211.77 1262.81,1211.67 1263.4,1211.49 1263.98,1207.68 1264.57,1205.22 1265.16,1205.39 1265.74,1208.23 1266.33,1209.62 1266.92,1205.9 1267.5,1206.21 1268.09,1209.86 1268.68,1209.7 1269.26,1209.65 1269.85,1210.84 1270.44,1209.14 1271.02,1210.23 1271.61,1210.17 1272.19,1211.31 1272.78,1212.38 1273.37,1212.07 1273.95,1211.92 1274.54,1210.53 1275.13,1210.35 1275.71,1209.05 1276.3,1209.35 1276.89,1210.51 1277.47,1211.47 1278.06,1210 1278.65,1208.72 1279.23,1207.35 1279.82,1207.15 1280.4,1207.25 1280.99,1206.97 1281.58,1206.97 1282.16,1205.89 1282.75,1204.56 1283.34,1204.8 1283.92,1206.1 1284.51,1205.04 1285.1,1206.39 1285.68,1204.19 1286.27,1204.63 1286.86,1206.18 1287.44,1206.4 1288.03,1206.59 1288.61,1207.9 1289.2,1207.86 1289.79,1207.75 1290.37,1207.84 1290.96,1209.18 1291.55,1209 1292.13,1206.62 1292.72,1204.2 1293.31,1203.34 1293.89,1204.95 1294.48,1205.4 1295.06,1209.01 1295.65,1206.72 1296.24,1204.55 1296.82,1203.73 1297.41,1205.13 1298,1206.45 1298.58,1204.12 1299.17,1204.51 1299.76,1207.1 1300.34,1207.05 1300.93,1205.82 1301.52,1204.87 1302.1,1205.08 1302.69,1203.9 1303.27,1204.3 1303.86,1203.42 1304.45,1204.9 1305.03,1207.57 1305.62,1204.09 1306.21,1204.1 1306.79,1207.91 1307.38,1209.35 1307.97,1208.07 1308.55,1203.47 1309.14,1204.97 1309.73,1201.43 1310.31,1201.69 1310.9,1199.59 1311.48,1198.82 1312.07,1200.44 1312.66,1202.22 1313.24,1202.63 1313.83,1204.11 1314.42,1204.58 1315,1207.04 1315.59,1208.48 1316.18,1208.63 1316.76,1210.15 1317.35,1210.02 1317.93,1210 1318.52,1208.75 1319.11,1210.03 1319.69,1209.88 1320.28,1207.59 1320.87,1203 1321.45,1204.74 1322.04,1204.72 1322.63,1204.98 1323.21,1206.34 1323.8,1205.36 1324.39,1206.68 1324.97,1208.12 1325.56,1209.09 1326.14,1210.22 1326.73,1206.3 1327.32,1204.99 1327.9,1206.23 1328.49,1203.81 1329.08,1204.04 1329.66,1205.77 1330.25,1207 1330.84,1206.81 1331.42,1205.72 1332.01,1205.73 1332.6,1204.74 1333.18,1207.23 1333.77,1208.42 1334.35,1208.47 1334.94,1208.3 1335.53,1208.2 1336.11,1208.13 1336.7,1209.53 1337.29,1206.9 1337.87,1207.31 1338.46,1208.4 1339.05,1209.94 1339.63,1208.8 1340.22,1207.38 1340.8,1209.75 1341.39,1211.18 1341.98,1212.29 1342.56,1209.76 1343.15,1208.53 1343.74,1209.78 1344.32,1209.81 1344.91,1212.01 1345.5,1211.62 1346.08,1210.55 1346.67,1209.29 1347.26,1208.07 1347.84,1209.29 1348.43,1209.32 1349.01,1209.47 1349.6,1209.48 1350.19,1208.26 1350.77,1209.55 1351.36,1211.94 1351.95,1209.32 1352.53,1211.55 1353.12,1210.3 1353.71,1212.59 1354.29,1211.09 1354.88,1210.86 1355.47,1206.96 1356.05,1207.45 1356.64,1208.65 1357.22,1210.25 1357.81,1210.28 1358.4,1209.08 1358.98,1208.11 1359.57,1209.42 1360.16,1206.95 1360.74,1208.34 1361.33,1209.61 1361.92,1209.61 1362.5,1209.49 1363.09,1210.49 1363.68,1212.75 1364.26,1212.61 1364.85,1211.26 1365.43,1209.7 1366.02,1209.5 1366.61,1209.31 1367.19,1208.06 1367.78,1210.71 1368.37,1211.68 1368.95,1211.53 1369.54,1211.38 1370.13,1211.23 1370.71,1208.62 1371.3,1207.43 1371.88,1208.68 1372.47,1208.56 1373.06,1207.49 1373.64,1207.35 1374.23,1206.31 1374.82,1209.92 1375.4,1209.8 1375.99,1209.61 1376.58,1209.63 1377.16,1213.24 1377.75,1215.42 1378.34,1211.43 1378.92,1211.02 1379.51,1207.04 1380.09,1209.45 1380.68,1208.14 1381.27,1208.23 1381.85,1206.86 1382.44,1204.48 1383.03,1204.75 1383.61,1206.28 1384.2,1205.22 1384.79,1207.81 1385.37,1206.64 1385.96,1209.32 1386.55,1206.72 1387.13,1208.13 1387.72,1204.49 1388.3,1202.19 1388.89,1203.63 1389.48,1208.58 1390.06,1209.82 1390.65,1209.73 1391.24,1208.39 1391.82,1209.7 1392.41,1209.84 1393,1209.68 1393.58,1211.91 1394.17,1210.56 1394.75,1208.18 1395.34,1208.24 1395.93,1208.55 1396.51,1209.68 1397.1,1208.76 1397.69,1209.47 1398.27,1211.56 1398.86,1213.81 1399.45,1213.5 1400.03,1211.99 1400.62,1208.17 1401.21,1212.81 1401.79,1213.71 1402.38,1212.25 1402.96,1210.75 1403.55,1210.72 1404.14,1210.52 1404.72,1212.74 1405.31,1212.6 1405.9,1212.53 1406.48,1213.61 1407.07,1214.57 1407.66,1216.73 1408.24,1215.15 1408.83,1214.74 1409.42,1213.34 1410,1211.86 1410.59,1210.51 1411.17,1214.11 1411.76,1212.63 1412.35,1214.89 1412.93,1214.8 1413.52,1213.38 1414.11,1215.58 1414.69,1215.18 1415.28,1215.94 1415.87,1214.46 1416.45,1212.89 1417.04,1213.54 1417.63,1214.47 1418.21,1213.94 1418.8,1214.72 1419.38,1215.49 1419.97,1216.06 1420.56,1217.89 1421.14,1218.44 1421.73,1217.85 1422.32,1217.25 1422.9,1215.67 1423.49,1216.24 1424.08,1214.53 1424.66,1213.08 1425.25,1211.63 1425.83,1211.5 1426.42,1210 1427.01,1209.88 1427.59,1208.63 1428.18,1206.1 1428.77,1206.06 1429.35,1207.39 1429.94,1206.21 1430.53,1207.52 1431.11,1207.39 1431.7,1208.56 1432.29,1208.24 1432.87,1206.97 1433.46,1205.68 1434.04,1205.88 1434.63,1206 1435.22,1207.33 1435.8,1203.6 1436.39,1202.53 1436.98,1197.88 1437.56,1197.16 1438.15,1198.85 1438.74,1199.59 1439.32,1206 1439.91,1207.24 1440.5,1205.94 1441.08,1205.92 1441.67,1206.07 1442.25,1204.78 1442.84,1205.01 1443.43,1204.12 1444.01,1202 1444.6,1202.42 1445.19,1201.27 1445.77,1201.48 1446.36,1197.96 1446.95,1199.79 1447.53,1202.76 1448.12,1199.71 1448.7,1197.69 1449.29,1198.57 1449.88,1203.05 1450.46,1201.93 1451.05,1200.69 1451.64,1199.66 1452.22,1200.34 1452.81,1198.24 1453.4,1200.35 1453.98,1199.52 1454.57,1200.27 1455.16,1201.78 1455.74,1202.25 1456.33,1202.37 1456.91,1202.81 1457.5,1200.96 1458.09,1201.72 1458.67,1201.2 1459.26,1201.66 1459.85,1198.43 1460.43,1202.61 1461.02,1202.84 1461.61,1203.15 1462.19,1201.06 1462.78,1201.61 1463.37,1204.41 1463.95,1206.01 1464.54,1204.91 1465.12,1202.81 1465.71,1200.48 1466.3,1200.83 1466.88,1199.95 1467.47,1200.35 1468.06,1199.55 1468.64,1200.29 1469.23,1200.88 1469.82,1201.44 1470.4,1205.38 1470.99,1207.95 1471.57,1207.09 1472.16,1208.53 1472.75,1209.5 1473.33,1210.39 1473.92,1207.89 1474.51,1208.55 1475.09,1209.63 1475.68,1209.71 1476.27,1212.21 1476.85,1213.29 1477.44,1214.27 1478.03,1213.85 1478.61,1213.34 1479.2,1211.96 1479.78,1212.81 1480.37,1215 1480.96,1214.25 1481.54,1214.12 1482.13,1215.18 1482.72,1217.07 1483.3,1218.96 1483.89,1219.32 1484.48,1217.54 1485.06,1216.9 1485.65,1216.57 1486.24,1216.32 1486.82,1216.89 1487.41,1216.52 1487.99,1216.1 1488.58,1215.64 1489.17,1214.11 1489.75,1213.91 1490.34,1213.54 1490.93,1213.36 1491.51,1211.75 1492.1,1212.98 1492.69,1212.55 1493.27,1212.3 1493.86,1209.65 1494.45,1212.02 1495.03,1210.74 1495.62,1211.79 1496.2,1210.1 1496.79,1208.6 1497.38,1210.9 1497.96,1209.28 1498.55,1210.46 1499.14,1209.17 1499.72,1210.03 1500.31,1207.53 1500.9,1204.95 1501.48,1203.99 1502.07,1204.17 1502.65,1203.17 1503.24,1204.77 1503.83,1204.85 1504.41,1203.86 1505,1206.5 1505.59,1205.07 1506.17,1204.9 1506.76,1205.07 1507.35,1204.97 1507.93,1206.36 1508.52,1207.44 1509.11,1207.55 1509.69,1207.6 1510.28,1206.67 1510.86,1205.73 1511.45,1207.04 1512.04,1208.35 1512.62,1207.04 1513.21,1209.57 1513.8,1207.1 1514.38,1209.54 1514.97,1209.4 1515.56,1211.74 1516.14,1212.81 1516.73,1211.26 1517.32,1210.94 1517.9,1211.97 1518.49,1214.16 1519.07,1212.67 1519.66,1212.44 1520.25,1215.61 1520.83,1214.95 1521.42,1210.92 1522.01,1209.8 1522.59,1211.1 1523.18,1208.57 1523.77,1209.74 1524.35,1209.66 1524.94,1208.41 1525.52,1209.59 1526.11,1210.8 1526.7,1209.68 1527.28,1208.54 1527.87,1209.57 1528.46,1209.47 1529.04,1214.06 1529.63,1213.89 1530.22,1213.6 1530.8,1212.13 1531.39,1209.73 1531.98,1212.04 1532.56,1210.88 1533.15,1208.39 1533.73,1207.03 1534.32,1201.98 1534.91,1201.91 1535.49,1202.3 1536.08,1201.56 1536.67,1200.51 1537.25,1200.8 1537.84,1201.1 1538.43,1197.91 1539.01,1197.3 1539.6,1195.26 1540.19,1193.79 1540.77,1194.57 1541.36,1194.32 1541.94,1197.54 1542.53,1199.28 1543.12,1202.37 1543.7,1201.31 1544.29,1202.94 1544.88,1203.22 1545.46,1203.44 1546.05,1205.05 1546.64,1205.16 1547.22,1208.73 1547.81,1208.6 1548.4,1209.45 1548.98,1208.35 1549.57,1210.72 1550.15,1209.36 1550.74,1209.45 1551.33,1208.33 1551.91,1209.53 1552.5,1208.32 1553.09,1208.26 1553.67,1212.14 1554.26,1210.89 1554.85,1209.59 1555.43,1209.83 1556.02,1209.56 1556.6,1208.37 1557.19,1207.03 1557.78,1210.98 1558.36,1211.97 1558.95,1212.95 1559.54,1211.8 1560.12,1210.55 1560.71,1211.69 1561.3,1209.24 1561.88,1212.85 1562.47,1211.28 1563.06,1212.35 1563.64,1210.99 1564.23,1210.83 1564.81,1209.42 1565.4,1209.25 1565.99,1208.12 1566.57,1208.35 1567.16,1209.77 1567.75,1209.73 1568.33,1211.98 1568.92,1212.17 1569.51,1210.77 1570.09,1212.04 1570.68,1212.86 1571.27,1207.76 1571.85,1208.9 1572.44,1207.6 1573.02,1208.91 1573.61,1207.83 1574.2,1208.95 1574.78,1209.11 1575.37,1210 1575.96,1210.13 1576.54,1210.17 1577.13,1210.19 1577.72,1211.11 1578.3,1209.68 1578.89,1209.56 1579.47,1209.47 1580.06,1208.27 1580.65,1207.04 1581.23,1204.42 1581.82,1205.71 1582.41,1204.92 1582.99,1202.54 1583.58,1201.7 1584.17,1202.16 1584.75,1202.61 1585.34,1205.18 1585.93,1205.4 1586.51,1205.64 1587.1,1205.9 1587.68,1204.83 1588.27,1203.95 1588.86,1206.74 1589.44,1207.22 1590.03,1208.28 1590.62,1209.31 1591.2,1210.57 1591.79,1211.72 1592.38,1212.58 1592.96,1213.65 1593.55,1210.93 1594.14,1210.62 1594.72,1211.97 1595.31,1209.41 1595.89,1213.17 1596.48,1211.69 1597.07,1211.48 1597.65,1212.32 1598.24,1211.03 1598.83,1210.85 1599.41,1209.61 1600,1209.57 1600.59,1210.71 1601.17,1211.8 1601.76,1210.45 1602.34,1211.51 1602.93,1208.76 1603.52,1208.53 1604.1,1209.66 1604.69,1209.68 1605.28,1209.71 1605.86,1210.77 1606.45,1210.29 1607.04,1211.56 1607.62,1210.34 1608.21,1209.44 1608.8,1207.16 1609.38,1207.26 1609.97,1207.29 1610.55,1208.88 1611.14,1207.74 1611.73,1207.7 1612.31,1206.63 1612.9,1205.68 1613.49,1203.6 1614.07,1204.81 1614.66,1204.81 1615.25,1205 1615.83,1205.31 1616.42,1205.44 1617.01,1209.13 1617.59,1208.36 1618.18,1209.64 1618.76,1210.59 1619.35,1209.43 1619.94,1208.02 1620.52,1207.97 1621.11,1206.76 1621.7,1206.92 1622.28,1206.8 1622.87,1206.66 1623.46,1204.27 1624.04,1203.2 1624.63,1207.08 1625.22,1207.13 1625.8,1208.22 1626.39,1207.05 1626.97,1205.76 1627.56,1205.83 1628.15,1206 1628.73,1204.78 1629.32,1205 1629.91,1205.17 1630.49,1206.2 1631.08,1206.23 1631.67,1206.13 1632.25,1206.23 1632.84,1208.69 1633.42,1210.07 1634.01,1208.76 1634.6,1206.47 1635.18,1208.89 1635.77,1209.01 1636.36,1207.71 1636.94,1207.89 1637.53,1207.77 1638.12,1207.95 1638.7,1204.46 1639.29,1204.78 1639.88,1204.81 1640.46,1206.19 1641.05,1207.51 1641.63,1208.54 1642.22,1209.97 1642.81,1207.38 1643.39,1208.74 1643.98,1210.15 1644.57,1211.26 1645.15,1210.97 1645.74,1212.01 1646.33,1211.86 1646.91,1210.41 1647.5,1210.42 1648.09,1207.74 1648.67,1207.8 1649.26,1209.02 1649.84,1206.35 1650.43,1207.51 1651.02,1208.88 1651.6,1209.95 1652.19,1207.42 1652.78,1209.9 1653.36,1209.96 1653.95,1208.51 1654.54,1208.52 1655.12,1210.69 1655.71,1210.63 1656.29,1211.45 1656.88,1212.57 1657.47,1212.29 1658.05,1213.27 1658.64,1213.79 1659.23,1216.72 1659.81,1216.12 1660.4,1213.39 1660.99,1213.02 1661.57,1210.29 1662.16,1208.73 1662.75,1207.35 1663.33,1207.15 1663.92,1205.63 1664.5,1204.56 1665.09,1203.66 1665.68,1205.21 1666.26,1206.43 1666.85,1206.86 1667.44,1204.32 1668.02,1203.29 1668.61,1202.45 1669.2,1204.01 1669.78,1204.1 1670.37,1204.3 1670.96,1203.11 1671.54,1202.11 1672.13,1202.77 1672.71,1203.12 1673.3,1202.1 1673.89,1202.31 1674.47,1200.23 1675.06,1199.16 1675.65,1201.95 1676.23,1202.21 1676.82,1200.12 1677.41,1201.79 1677.99,1203.58 1678.58,1204.16 1679.17,1204.45 1679.75,1204.52 1680.34,1203.33 1680.92,1206.03 1681.51,1207.48 1682.1,1207.28 1682.68,1206.17 1683.27,1208.68 1683.86,1209.71 1684.44,1209.94 1685.03,1205 1685.62,1204.02 1686.2,1203.01 1686.79,1204.33 1687.37,1204.81 1687.96,1204.94 1688.55,1202.75 1689.13,1206.8 1689.72,1209.25 1690.31,1209.24 1690.89,1209.1 1691.48,1210.37 1692.07,1209.17 1692.65,1210.35 1693.24,1210.62 1693.83,1211.42 1694.41,1211.45 1695,1208.8 1695.58,1207.52 1696.17,1207.55 1696.76,1209.76 1697.34,1208.5 1697.93,1208.58 1698.52,1208.34 1699.1,1207.2 1699.69,1208.51 1700.28,1208.95 1700.86,1208.87 1701.45,1208.84 1702.04,1209.12 1702.62,1210.26 1703.21,1211.43 1703.79,1211.23 1704.38,1210.91 1704.97,1209.53 1705.55,1209.75 1706.14,1213.47 1706.73,1211.83 1707.31,1213.98 1707.9,1212.58 1708.49,1210.1 1709.07,1211.21 1709.66,1211.14 1710.24,1211.05 1710.83,1211.24 1711.42,1212.36 1712,1213.23 1712.59,1211.85 1713.18,1208.98 1713.76,1208.73 1714.35,1208.74 1714.94,1210.13 1715.52,1211.48 1716.11,1212.37 1716.7,1209.67 1717.28,1207.1 1717.87,1207.35 1718.45,1203.84 1719.04,1203.76 1719.63,1203.9 1720.21,1202.84 1720.8,1204.39 1721.39,1205.69 1721.97,1205.89 1722.56,1206.03 1723.15,1203.88 1723.73,1202.95 1724.32,1202.01 1724.91,1203.59 1725.49,1202.53 1726.08,1202.85 1726.66,1201.89 1727.25,1202.23 1727.84,1203.85 1728.42,1205.41 1729.01,1205.77 1729.6,1204.67 1730.18,1206.22 1730.77,1206.25 1731.36,1206.47 1731.94,1206.6 1732.53,1209.05 1733.11,1209.15 1733.7,1206.86 1734.29,1206.89 1734.87,1209.42 1735.46,1209.3 1736.05,1210.67 1736.63,1209.51 1737.22,1210.51 1737.81,1209.3 1738.39,1208.2 1738.98,1209.45 1739.57,1208.1 1740.15,1208.09 1740.74,1209.21 1741.32,1210.34 1741.91,1211.43 1742.5,1212.29 1743.08,1212.28 1743.67,1210.86 1744.26,1209.51 1744.84,1209.41 1745.43,1210.34 1746.02,1208.05 1746.6,1211.85 1747.19,1212.62 1747.78,1211.41 1748.36,1211.21 1748.95,1211.06 1749.53,1209.76 1750.12,1207.2 1750.71,1206.06 1751.29,1207.28 1751.88,1209.77 1752.47,1208.45 1753.05,1209.62 1753.64,1208.49 1754.23,1207.04 1754.81,1208.41 1755.4,1208.41 1755.99,1207.16 1756.57,1207.42 1757.16,1207.51 1757.74,1207.44 1758.33,1208.79 1758.92,1208.53 1759.5,1208.81 1760.09,1208.5 1760.68,1203.8 1761.26,1206.35 1761.85,1205.29 1762.44,1205.48 1763.02,1205.59 1763.61,1204.48 1764.19,1204.61 1764.78,1205.84 1765.37,1204.81 1765.95,1204.77 1766.54,1206.12 1767.13,1206.63 1767.71,1206.54 1768.3,1206.79 1768.89,1205.52 1769.47,1205.75 1770.06,1209.31 1770.65,1209.23 1771.23,1205.68 1771.82,1205.96 1772.4,1205.95 1772.99,1207.19 1773.58,1207.08 1774.16,1205.99 1774.75,1205.92 1775.34,1204.9 1775.92,1203.77 1776.51,1205.25 1777.1,1205.52 1777.68,1209.37 1778.27,1206.94 1778.86,1204.63 1779.44,1204.85 1780.03,1203.71 1780.61,1201.77 1781.2,1203.35 1781.79,1203.61 1782.37,1206.26 1782.96,1206.45 1783.55,1208.83 1784.13,1206.36 1784.72,1208.99 1785.31,1208.85 1785.89,1208.84 1786.48,1210.12 1787.06,1212.43 1787.65,1210.94 1788.24,1209.61 1788.82,1208.42 1789.41,1207.24 1790,1207.18 1790.58,1204.86 1791.17,1204.69 1791.76,1206.15 1792.34,1206.09 1792.93,1208.41 1793.52,1207.47 1794.1,1207.74 1794.69,1210.17 1795.27,1208.63 1795.86,1208.42 1796.45,1209.67 1797.03,1208.37 1797.62,1207.37 1798.21,1206.22 1798.79,1207.43 1799.38,1207.44 1799.97,1207.28 1800.55,1207.09 1801.14,1205.83 1801.73,1207.26 1802.31,1204.82 1802.9,1204.8 1803.48,1206.41 1804.07,1206.59 1804.66,1207.97 1805.24,1207.83 1805.83,1206.6 1806.42,1206.32 1807,1208.67 1807.59,1210.93 1808.18,1212.01 1808.76,1211.92 1809.35,1208.06 1809.94,1207.98 1810.52,1207.94 1811.11,1208.01 1811.69,1209.36 1812.28,1208.2 1812.87,1206.96 1813.45,1207.15 1814.04,1208.5 1814.63,1207.02 1815.21,1208.02 1815.8,1206.85 1816.39,1204.48 1816.97,1204.63 1817.56,1205.85 1818.14,1208.41 1818.73,1203.45 1819.32,1202.65 1819.9,1200.63 1820.49,1202.31 1821.08,1203.65 1821.66,1205.95 1822.25,1207.38 1822.84,1208.61 1823.42,1212.04 1824.01,1211.8 1824.6,1210.45 1825.18,1212.74 1825.77,1213.65 1826.35,1215.71 1826.94,1216.51 1827.53,1217.28 1828.11,1215.51 1828.7,1213.93 1829.29,1215.08 1829.87,1214.84 1830.46,1215.48 1831.05,1214.97 1831.63,1213.44 1832.22,1214.7 1832.81,1214.54 1833.39,1214.35 1833.98,1214.19 1834.56,1211.36 1835.15,1211.24 1835.74,1212.2 1836.32,1210.55 1836.91,1209.13 1837.5,1206.5 1838.08,1207.68 1838.67,1206.24 1839.26,1206.25 1839.84,1206.28 1840.43,1206.47 1841.01,1206.68 1841.6,1207.04 1842.19,1204.78 1842.77,1204.92 1843.36,1209.71 1843.95,1209.42 1844.53,1210.45 1845.12,1209.01 1845.71,1212.84 1846.29,1212.47 1846.88,1213.48 1847.47,1213.31 1848.05,1214.38 1848.64,1214.04 1849.22,1214.89 1849.81,1215.69 1850.4,1215.46 1850.98,1215.14 1851.57,1214.78 1852.16,1214.61 1852.74,1211.76 1853.33,1211.54 1853.92,1210.07 1854.5,1210.02 1855.09,1208.98 1855.68,1211.15 1856.26,1210.07 1856.85,1210.77 1857.43,1209.34 1858.02,1209.37 1858.61,1210.53 1859.19,1211.52 1859.78,1210.23 1860.37,1211.32 1860.95,1212.51 1861.54,1213.61 1862.13,1213.44 1862.71,1211.75 1863.3,1213.94 1863.88,1213.59 1864.47,1214.61 1865.06,1214.06 1865.64,1214.82 1866.23,1215.76 1866.82,1216.52 1867.4,1216.13 1867.99,1215.69 1868.58,1212.48 1869.16,1213.47 1869.75,1212.06 1870.34,1210.62 1870.92,1213.13 1871.51,1210.55 1872.09,1211.51 1872.68,1210.39 1873.27,1210.32 1873.85,1210.07 1874.44,1211.04 1875.03,1211.08 1875.61,1209.97 1876.2,1208.56 1876.79,1208.4 1877.37,1207.34 1877.96,1207.27 1878.55,1208.67 1879.13,1207.42 1879.72,1206.13 1880.3,1203.77 1880.89,1205.16 1881.48,1206.51 1882.06,1205.24 1882.65,1205.54 1883.24,1205.6 1883.82,1206.15 1884.41,1207.36 1885,1205.98 1885.58,1204.86 1886.17,1206.4 1886.76,1205.59 1887.34,1209.31 1887.93,1207.96 1888.51,1209.4 1889.1,1205.69 1889.69,1209.37 1890.27,1208.03 1890.86,1206.78 1891.45,1205.58 1892.03,1204.69 1892.62,1206.09 1893.21,1202.65 1893.79,1201.83 1894.38,1203.17 1894.96,1205.78 1895.55,1205.91 1896.14,1204.97 1896.72,1206.5 1897.31,1206.58 1897.9,1206.85 1898.48,1205.84 1899.07,1205.66 1899.66,1205.56 1900.24,1206.92 1900.83,1208.56 1901.42,1207.37 1902,1207.14 1902.59,1208.28 1903.17,1207.1 1903.76,1208.22 1904.35,1206.82 1904.93,1208.2 1905.52,1207.35 1906.11,1206.17 1906.69,1206.4 1907.28,1204.01 1907.87,1204.1 1908.45,1205.34 1909.04,1205.08 1909.63,1206.57 1910.21,1205.58 1910.8,1204.85 1911.38,1202.5 1911.97,1201.32 1912.56,1202.99 1913.14,1203.08 1913.73,1204.23 1914.32,1204.53 1914.9,1205.9 1915.49,1204.9 1916.08,1204.89 1916.66,1204.86 1917.25,1205.08 1917.83,1205.24 1918.42,1205.43 1919.01,1204.08 1919.59,1204.09 1920.18,1204.58 1920.77,1203.53 1921.35,1205.12 1921.94,1204.15 1922.53,1203.13 1923.11,1205.81 1923.7,1204.93 1924.29,1204.99 1924.87,1205.58 1925.46,1204.51 1926.04,1204.45 1926.63,1203.58 1927.22,1202.51 1927.8,1203.08 1928.39,1204.61 1928.98,1205 1929.56,1205.16 1930.15,1204.2 1930.74,1204.48 1931.32,1205.87 1931.91,1205.9 1932.5,1206.06 1933.08,1206.15 1933.67,1205.15 1934.25,1202.69 1934.84,1204.3 1935.43,1205.55 1936.01,1208.35 1936.6,1208.03 1937.19,1208.06 1937.77,1207.89 1938.36,1209.09 1938.95,1207.73 1939.53,1207.75 1940.12,1209.13 1940.71,1207.82 1941.29,1209.07 1941.88,1207.97 1942.46,1206.75 1943.05,1207.01 1943.64,1204.37 1944.22,1205.75 1944.81,1209.54 1945.4,1208.01 1945.98,1208.08 1946.57,1209.16 1947.16,1212.67 1947.74,1211.17 1948.33,1207.45 1948.91,1208.73 1949.5,1208.79 1950.09,1208.56 1950.67,1209.7 1951.26,1210.76 1951.85,1208.36 1952.43,1207.37 1953.02,1206.21 1953.61,1206.26 1954.19,1209.67 1954.78,1212.14 1955.37,1209.6 1955.95,1210.74 1956.54,1208.31 1957.12,1206.83 1957.71,1206.53 1958.3,1209.12 1958.88,1209.02 1959.47,1208.9 1960.06,1208.81 1960.64,1206.46 1961.23,1206.43 1961.82,1205.4 1962.4,1206.71 1962.99,1205.67 1963.58,1207.07 1964.16,1208.55 1964.75,1205.86 1965.33,1204.46 1965.92,1202.09 1966.51,1203.52 1967.09,1203.78 1967.68,1203.99 1968.27,1205.27 1968.85,1205.77 1969.44,1205.84 1970.03,1205.85 1970.61,1209.58 1971.2,1209.56 1971.78,1208.12 1972.37,1208.21 1972.96,1208.27 1973.54,1207.08 1974.13,1204.59 1974.72,1204.86 1975.3,1205.22 1975.89,1205.37 1976.48,1204.34 1977.06,1209.93 1977.65,1212.25 1978.24,1212.08 1978.82,1210.82 1979.41,1210.57 1979.99,1208.26 1980.58,1208.24 1981.17,1205.83 1981.75,1204.84 1982.34,1205.34 1982.93,1203.98 1983.51,1204.26 1984.1,1204.42 1984.69,1205.98 1985.27,1207.35 1985.86,1208.47 1986.45,1208.35 1987.03,1210.62 1987.62,1207.14 1988.2,1209.63 1988.79,1208.15 1989.38,1209.64 1989.96,1210.72 1990.55,1209.47 1991.14,1209.27 1991.72,1210.59 1992.31,1209.07 1992.9,1208.93 1993.48,1208.69 1994.07,1209.81 1994.65,1209.69 1995.24,1208.44 1995.83,1208.48 1996.41,1207.3 1997,1209.83 1997.59,1208.65 1998.17,1208.74 1998.76,1211.28 1999.35,1209.99 1999.93,1211.27 2000.52,1211.34 2001.11,1213.59 2001.69,1214.84 2002.28,1210.98 2002.86,1209.72 2003.45,1212.3 2004.04,1211.87 2004.62,1212.81 2005.21,1210.02 2005.8,1212.47 2006.38,1212.31 2006.97,1213.24 2007.56,1211.56 2008.14,1211.4 2008.73,1211.18 2009.32,1208.6 2009.9,1208.71 2010.49,1208.64 2011.07,1208.28 2011.66,1208.23 2012.25,1209.2 2012.83,1209.21 2013.42,1210.52 2014.01,1211.84 2014.59,1216.63 2015.18,1211.34 2015.77,1212.29 2016.35,1210.9 2016.94,1209.62 2017.53,1209.26 2018.11,1211.36 2018.7,1211.16 2019.28,1209.8 2019.87,1207.04 2020.46,1205.98 2021.04,1207.48 2021.63,1205.01 2022.22,1204.08 2022.8,1204.41 2023.39,1205.6 2023.98,1205.46 2024.56,1205.2 2025.15,1208.96 2025.73,1207.93 2026.32,1209.22 2026.91,1206.83 2027.49,1208.11 2028.08,1208.11 2028.67,1207.13 2029.25,1206 2029.84,1206.08 2030.43,1206.02 2031.01,1207.13 2031.6,1208.21 2032.19,1209.38 2032.77,1208.01 2033.36,1209.24 2033.94,1208.23 2034.53,1209.61 2035.12,1210.71 2035.7,1210.79 2036.29,1213.03 2036.88,1211.5 2037.46,1213.79 2038.05,1207.57 2038.64,1207.59 2039.22,1208.05 2039.81,1210.38 2040.4,1211.43 2040.98,1212.38 2041.57,1209.69 2042.15,1209.72 2042.74,1208.41 2043.33,1210.58 2043.91,1210.64 2044.5,1210.65 2045.09,1210.56 2045.67,1209.03 2046.26,1209.04 2046.85,1208.69 2047.43,1208.56 2048.02,1208.55 2048.6,1209.3 2049.19,1209.3 2049.78,1208.07 2050.36,1207.9 2050.95,1210.29 2051.54,1210.08 2052.12,1208.67 2052.71,1207.4 2053.3,1206.22 2053.88,1207.76 2054.47,1210.13 2055.06,1210.03 2055.64,1208.76 2056.23,1211.02 2056.81,1210.85 2057.4,1210.76 2057.99,1211.8 2058.57,1212.55 2059.16,1211.24 2059.75,1211.06 2060.33,1213.1 2060.92,1210.29 2061.51,1207.73 2062.09,1207.92 2062.68,1209.17 2063.27,1210.24 2063.85,1210.06 2064.44,1211.21 2065.02,1210.71 2065.61,1211.45 2066.2,1211.22 2066.78,1211.93 2067.37,1211.83 2067.96,1212.62 2068.54,1213.72 2069.13,1214.52 2069.72,1216.42 2070.3,1217.18 2070.89,1215.56 2071.48,1216.41 2072.06,1213.86 2072.65,1214.76 2073.23,1210.62 2073.82,1210.72 2074.41,1214.14 2074.99,1214.9 2075.58,1213.21 2076.17,1210.24 2076.75,1208.85 2077.34,1206.35 2077.93,1208.59 2078.51,1207.23 2079.1,1205.96 2079.68,1207.17 2080.27,1208.72 2080.86,1210.08 2081.44,1211.19 2082.03,1210.84 2082.62,1211.7 2083.2,1210.49 2083.79,1209.19 2084.38,1209.5 2084.96,1205.95 2085.55,1206.11 2086.14,1207.31 2086.72,1212.14 2087.31,1211.92 2087.89,1210.51 2088.48,1209.36 2089.07,1208.11 2089.65,1203.38 2090.24,1202.14 2090.83,1207.22 2091.41,1207.44 2092,1207.44 2092.59,1208.52 2093.17,1208.81 2093.76,1205.14 2094.35,1203.23 2094.93,1203.54 2095.52,1203.72 2096.1,1204.05 2096.69,1204.48 2097.28,1205.84 2097.86,1205.91 2098.45,1207.56 2099.04,1208.84 2099.62,1211.31 2100.21,1211.45 2100.8,1210.94 2101.38,1208.37 2101.97,1208.5 2102.55,1208.33 2103.14,1208.28 2103.73,1207.09 2104.31,1207.29 2104.9,1206.27 2105.49,1207.6 2106.07,1209.13 2106.66,1209.15 2107.25,1210.03 2107.83,1207.5 2108.42,1210.02 2109.01,1208.73 2109.59,1209.81 2110.18,1209.75 2110.76,1213.18 2111.35,1213.87 2111.94,1212.29 2112.52,1209.84 2113.11,1211.05 2113.7,1210.89 2114.28,1209.57 2114.87,1210.55 2115.46,1209.28 2116.04,1209.27 2116.63,1207.96 2117.22,1209.43 2117.8,1209.25 2118.39,1209.2 2118.97,1205.46 2119.56,1205.64 2120.15,1205.96 2120.73,1204.8 2121.32,1206.06 2121.91,1206.33 2122.49,1206.12 2123.08,1205.14 2123.67,1205.04 2124.25,1203.94 2124.84,1204.06 2125.42,1202.06 2126.01,1202.14 2126.6,1202.46 2127.18,1205.23 2127.77,1209.05 2128.36,1210.07 2128.94,1211.26 2129.53,1208.56 2130.12,1208.26 2130.7,1207.18 2131.29,1209.72 2131.88,1207.37 2132.46,1206.16 2133.05,1206.2 2133.63,1208.68 2134.22,1206.36 2134.81,1205.09 2135.39,1205.26 2135.98,1205.43 2136.57,1205.42 2137.15,1207.97 2137.74,1208.07 2138.33,1206.96 2138.91,1207.43 2139.5,1208.56 2140.09,1208.68 2140.67,1208.74 2141.26,1206.04 2141.84,1208.6 2142.43,1207.44 2143.02,1207.29 2143.6,1206.01 2144.19,1206.09 2144.78,1207.31 2145.36,1206.2 2145.95,1206.46 2146.54,1203.05 2147.12,1200.96 2147.71,1202.45 2148.3,1204.08 2148.88,1205.67 2149.47,1205.78 2150.05,1207.23 2150.64,1210 2151.23,1211.24 2151.81,1213.27 2152.4,1213.9 2152.99,1212.54 2153.57,1211.35 2154.16,1212.47 2154.75,1215.44 2155.33,1213.75 2155.92,1210.03 2156.5,1208.93 2157.09,1209.04 2157.68,1207.55 2158.26,1207.52 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1208.65 L986.612 1208.65 L987.198 1208.65 L987.785 1208.65 L988.371 1208.65 L988.957 1208.65 L989.544 1208.65 L990.13 1208.65 L990.717 1208.65 L991.303 1208.65 L991.889 1208.65 L992.476 1208.65 L993.062 1208.65 L993.649 1208.65 L994.235 1208.65 L994.822 1208.65 L995.408 1208.65 L995.994 1208.65 L996.581 1208.65 L997.167 1208.65 L997.754 1208.65 L998.34 1208.65 L998.926 1208.65 L999.513 1208.65 L1000.1 1208.65 L1000.69 1208.65 L1001.27 1208.65 L1001.86 1208.65 L1002.44 1208.65 L1003.03 1208.65 L1003.62 1208.65 L1004.2 1208.65 L1004.79 1208.65 L1005.38 1208.65 L1005.96 1208.65 L1006.55 1208.65 L1007.14 1208.65 L1007.72 1208.65 L1008.31 1208.65 L1008.9 1208.65 L1009.48 1208.65 L1010.07 1208.65 L1010.65 1208.65 L1011.24 1208.65 L1011.83 1208.65 L1012.41 1208.65 L1013 1208.65 L1013.59 1208.65 L1014.17 1208.65 L1014.76 1208.65 L1015.35 1208.65 L1015.93 1208.65 L1016.52 1208.65 L1017.11 1208.65 L1017.69 1208.65 L1018.28 1208.65 L1018.86 1208.65 L1019.45 1208.65 L1020.04 1208.65 L1020.62 1208.65 L1021.21 1208.65 L1021.8 1208.65 L1022.38 1208.65 L1022.97 1208.65 L1023.56 1208.65 L1024.14 1208.65 L1024.73 1208.65 L1025.32 1208.65 L1025.9 1208.65 L1026.49 1208.65 L1027.07 1208.65 L1027.66 1208.65 L1028.25 1208.65 L1028.83 1208.65 L1029.42 1208.65 L1030.01 1208.65 L1030.59 1208.65 L1031.18 1208.65 L1031.77 1208.65 L1032.35 1208.65 L1032.94 1208.65 L1033.52 1208.65 L1034.11 1208.65 L1034.7 1208.65 L1035.28 1208.65 L1035.87 1208.65 L1036.46 1208.65 L1037.04 1208.65 L1037.63 1208.65 L1038.22 1208.65 L1038.8 1208.65 L1039.39 1208.65 L1039.98 1208.65 L1040.56 1208.65 L1041.15 1208.65 L1041.73 1208.65 L1042.32 1208.65 L1042.91 1208.65 L1043.49 1208.65 L1044.08 1208.65 L1044.67 1208.65 L1045.25 1208.65 L1045.84 1208.65 L1046.43 1208.65 L1047.01 1208.65 L1047.6 1208.65 L1048.19 1208.65 L1048.77 1208.65 L1049.36 1208.65 L1049.94 1208.65 L1050.53 1208.65 L1051.12 1208.65 L1051.7 1208.65 L1052.29 1208.65 L1052.88 1208.65 L1053.46 1208.65 L1054.05 1208.65 L1054.64 1208.65 L1055.22 1208.65 L1055.81 1208.65 L1056.39 1208.65 L1056.98 1208.65 L1057.57 1208.65 L1058.15 1208.65 L1058.74 1208.65 L1059.33 1208.65 L1059.91 1208.65 L1060.5 1208.65 L1061.09 1208.65 L1061.67 1208.65 L1062.26 1208.65 L1062.85 1208.65 L1063.43 1208.65 L1064.02 1208.65 L1064.6 1208.65 L1065.19 1208.65 L1065.78 1208.65 L1066.36 1208.65 L1066.95 1208.65 L1067.54 1208.65 L1068.12 1208.65 L1068.71 1208.65 L1069.3 1208.65 L1069.88 1208.65 L1070.47 1208.65 L1071.06 1208.65 L1071.64 1208.65 L1072.23 1208.65 L1072.81 1208.65 L1073.4 1208.65 L1073.99 1208.65 L1074.57 1208.65 L1075.16 1208.65 L1075.75 1208.65 L1076.33 1208.65 L1076.92 1208.65 L1077.51 1208.65 L1078.09 1208.65 L1078.68 1208.65 L1079.26 1208.65 L1079.85 1208.65 L1080.44 1208.65 L1081.02 1208.65 L1081.61 1208.65 L1082.2 1208.65 L1082.78 1208.65 L1083.37 1208.65 L1083.96 1208.65 L1084.54 1208.65 L1085.13 1208.65 L1085.72 1208.65 L1086.3 1208.65 L1086.89 1208.65 L1087.47 1208.65 L1088.06 1208.65 L1088.65 1208.65 L1089.23 1208.65 L1089.82 1208.65 L1090.41 1208.65 L1090.99 1208.65 L1091.58 1208.65 L1092.17 1208.65 L1092.75 1208.65 L1093.34 1208.65 L1093.93 1208.65 L1094.51 1208.65 L1095.1 1208.65 L1095.68 1208.65 L1096.27 1208.65 L1096.86 1208.65 L1097.44 1208.65 L1098.03 1208.65 L1098.62 1208.65 L1099.2 1208.65 L1099.79 1208.65 L1100.38 1208.65 L1100.96 1208.65 L1101.55 1208.65 L1102.14 1208.65 L1102.72 1208.65 L1103.31 1208.65 L1103.89 1208.65 L1104.48 1208.65 L1105.07 1208.65 L1105.65 1208.65 L1106.24 1208.65 L1106.83 1208.65 L1107.41 1208.65 L1108 1208.65 L1108.59 1208.65 L1109.17 1208.65 L1109.76 1208.65 L1110.34 1208.65 L1110.93 1208.65 L1111.52 1208.65 L1112.1 1208.65 L1112.69 1208.65 L1113.28 1208.65 L1113.86 1208.65 L1114.45 1208.65 L1115.04 1208.65 L1115.62 1208.65 L1116.21 1208.65 L1116.8 1208.65 L1117.38 1208.65 L1117.97 1208.65 L1118.55 1208.65 L1119.14 1208.65 L1119.73 1208.65 L1120.31 1208.65 L1120.9 1208.65 L1121.49 1208.65 L1122.07 1208.65 L1122.66 1208.65 L1123.25 1208.65 L1123.83 1208.65 L1124.42 1208.65 L1125.01 1208.65 L1125.59 1208.65 L1126.18 1208.65 L1126.76 1208.65 L1127.35 1208.65 L1127.94 1208.65 L1128.52 1208.65 L1129.11 1208.65 L1129.7 1208.65 L1130.28 1208.65 L1130.87 1208.65 L1131.46 1208.65 L1132.04 1208.65 L1132.63 1208.65 L1133.21 1208.65 L1133.8 1208.65 L1134.39 1208.65 L1134.97 1208.65 L1135.56 1208.65 L1136.15 1208.65 L1136.73 1208.65 L1137.32 1208.65 L1137.91 1208.65 L1138.49 1208.65 L1139.08 1208.65 L1139.67 1208.65 L1140.25 1208.65 L1140.84 1208.65 L1141.42 1208.65 L1142.01 1208.65 L1142.6 1208.65 L1143.18 1208.65 L1143.77 1208.65 L1144.36 1208.65 L1144.94 1208.65 L1145.53 1208.65 L1146.12 1208.65 L1146.7 1208.65 L1147.29 1208.65 L1147.88 1208.65 L1148.46 1208.65 L1149.05 1208.65 L1149.63 1208.65 L1150.22 1208.65 L1150.81 1208.65 L1151.39 1208.65 L1151.98 1208.65 L1152.57 1208.65 L1153.15 1208.65 L1153.74 1208.65 L1154.33 1208.65 L1154.91 1208.65 L1155.5 1208.65 L1156.09 1208.65 L1156.67 1208.65 L1157.26 1208.65 L1157.84 1208.65 L1158.43 1208.65 L1159.02 1208.65 L1159.6 1208.65 L1160.19 1208.65 L1160.78 1208.65 L1161.36 1208.65 L1161.95 1208.65 L1162.54 1208.65 L1163.12 1208.65 L1163.71 1208.65 L1164.29 1208.65 L1164.88 1208.65 L1165.47 1208.65 L1166.05 1208.65 L1166.64 1208.65 L1167.23 1208.65 L1167.81 1208.65 L1168.4 1208.65 L1168.99 1208.65 L1169.57 1208.65 L1170.16 1208.65 L1170.75 1208.65 L1171.33 1208.65 L1171.92 1208.65 L1172.5 1208.65 L1173.09 1208.65 L1173.68 1208.65 L1174.26 1208.65 L1174.85 1208.65 L1175.44 1208.65 L1176.02 1208.65 L1176.61 1208.65 L1177.2 1208.65 L1177.78 1208.65 L1178.37 1208.65 L1178.96 1208.65 L1179.54 1208.65 L1180.13 1208.65 L1180.71 1208.65 L1181.3 1208.65 L1181.89 1208.65 L1182.47 1208.65 L1183.06 1208.65 L1183.65 1208.65 L1184.23 1208.65 L1184.82 1208.65 L1185.41 1208.65 L1185.99 1208.65 L1186.58 1208.65 L1187.16 1208.65 L1187.75 1208.65 L1188.34 1208.65 L1188.92 1208.65 L1189.51 1208.65 L1190.1 1208.65 L1190.68 1208.65 L1191.27 1208.65 L1191.86 1208.65 L1192.44 1208.65 L1193.03 1208.65 L1193.62 1208.65 L1194.2 1208.65 L1194.79 1208.65 L1195.37 1208.65 L1195.96 1208.65 L1196.55 1208.65 L1197.13 1208.65 L1197.72 1208.65 L1198.31 1208.65 L1198.89 1208.65 L1199.48 1208.65 L1200.07 1208.65 L1200.65 1208.65 L1201.24 1208.65 L1201.83 1208.65 L1202.41 1208.65 L1203 1208.65 L1203.58 1208.65 L1204.17 1208.65 L1204.76 1208.65 L1205.34 1208.65 L1205.93 1208.65 L1206.52 1208.65 L1207.1 1208.65 L1207.69 1208.65 L1208.28 1208.65 L1208.86 1208.65 L1209.45 1208.65 L1210.03 1208.65 L1210.62 1208.65 L1211.21 1208.65 L1211.79 1208.65 L1212.38 1208.65 L1212.97 1208.65 L1213.55 1208.65 L1214.14 1208.65 L1214.73 1208.65 L1215.31 1208.65 L1215.9 1208.65 L1216.49 1208.65 L1217.07 1208.65 L1217.66 1208.65 L1218.24 1208.65 L1218.83 1208.65 L1219.42 1208.65 L1220 1208.65 L1220.59 1208.65 L1221.18 1208.65 L1221.76 1208.65 L1222.35 1208.65 L1222.94 1208.65 L1223.52 1208.65 L1224.11 1208.65 L1224.7 1208.65 L1225.28 1208.65 L1225.87 1208.65 L1226.45 1208.65 L1227.04 1208.65 L1227.63 1208.65 L1228.21 1208.65 L1228.8 1208.65 L1229.39 1208.65 L1229.97 1208.65 L1230.56 1208.65 L1231.15 1208.65 L1231.73 1208.65 L1232.32 1208.65 L1232.91 1208.65 L1233.49 1208.65 L1234.08 1208.65 L1234.66 1208.65 L1235.25 1208.65 L1235.84 1208.65 L1236.42 1208.65 L1237.01 1208.65 L1237.6 1208.65 L1238.18 1208.65 L1238.77 1208.65 L1239.36 1208.65 L1239.94 1208.65 L1240.53 1208.65 L1241.11 1208.65 L1241.7 1208.65 L1242.29 1208.65 L1242.87 1208.65 L1243.46 1208.65 L1244.05 1208.65 L1244.63 1208.65 L1245.22 1208.65 L1245.81 1208.65 L1246.39 1208.65 L1246.98 1208.65 L1247.57 1208.65 L1248.15 1208.65 L1248.74 1208.65 L1249.32 1208.65 L1249.91 1208.65 L1250.5 1208.65 L1251.08 1208.65 L1251.67 1208.65 L1252.26 1208.65 L1252.84 1208.65 L1253.43 1208.65 L1254.02 1208.65 L1254.6 1208.65 L1255.19 1208.65 L1255.78 1208.65 L1256.36 1208.65 L1256.95 1208.65 L1257.53 1208.65 L1258.12 1208.65 L1258.71 1208.65 L1259.29 1208.65 L1259.88 1208.65 L1260.47 1208.65 L1261.05 1208.65 L1261.64 1208.65 L1262.23 1208.65 L1262.81 1208.65 L1263.4 1208.65 L1263.98 1208.65 L1264.57 1208.65 L1265.16 1208.65 L1265.74 1208.65 L1266.33 1208.65 L1266.92 1208.65 L1267.5 1208.65 L1268.09 1208.65 L1268.68 1208.65 L1269.26 1208.65 L1269.85 1208.65 L1270.44 1208.65 L1271.02 1208.65 L1271.61 1208.65 L1272.19 1208.65 L1272.78 1208.65 L1273.37 1208.65 L1273.95 1208.65 L1274.54 1208.65 L1275.13 1208.65 L1275.71 1208.65 L1276.3 1208.65 L1276.89 1208.65 L1277.47 1208.65 L1278.06 1208.65 L1278.65 1208.65 L1279.23 1208.65 L1279.82 1208.65 L1280.4 1208.65 L1280.99 1208.65 L1281.58 1208.65 L1282.16 1208.65 L1282.75 1208.65 L1283.34 1208.65 L1283.92 1208.65 L1284.51 1208.65 L1285.1 1208.65 L1285.68 1208.65 L1286.27 1208.65 L1286.86 1208.65 L1287.44 1208.65 L1288.03 1208.65 L1288.61 1208.65 L1289.2 1208.65 L1289.79 1208.65 L1290.37 1208.65 L1290.96 1208.65 L1291.55 1208.65 L1292.13 1208.65 L1292.72 1208.65 L1293.31 1208.65 L1293.89 1208.65 L1294.48 1208.65 L1295.06 1208.65 L1295.65 1208.65 L1296.24 1208.65 L1296.82 1208.65 L1297.41 1208.65 L1298 1208.65 L1298.58 1208.65 L1299.17 1208.65 L1299.76 1208.65 L1300.34 1208.65 L1300.93 1208.65 L1301.52 1208.65 L1302.1 1208.65 L1302.69 1208.65 L1303.27 1208.65 L1303.86 1208.65 L1304.45 1208.65 L1305.03 1208.65 L1305.62 1208.65 L1306.21 1208.65 L1306.79 1208.65 L1307.38 1208.65 L1307.97 1208.65 L1308.55 1208.65 L1309.14 1208.65 L1309.73 1208.65 L1310.31 1208.65 L1310.9 1208.65 L1311.48 1208.65 L1312.07 1208.65 L1312.66 1208.65 L1313.24 1208.65 L1313.83 1208.65 L1314.42 1208.65 L1315 1208.65 L1315.59 1208.65 L1316.18 1208.65 L1316.76 1208.65 L1317.35 1208.65 L1317.93 1208.65 L1318.52 1208.65 L1319.11 1208.65 L1319.69 1208.65 L1320.28 1208.65 L1320.87 1208.65 L1321.45 1208.65 L1322.04 1208.65 L1322.63 1208.65 L1323.21 1208.65 L1323.8 1208.65 L1324.39 1208.65 L1324.97 1208.65 L1325.56 1208.65 L1326.14 1208.65 L1326.73 1208.65 L1327.32 1208.65 L1327.9 1208.65 L1328.49 1208.65 L1329.08 1208.65 L1329.66 1208.65 L1330.25 1208.65 L1330.84 1208.65 L1331.42 1208.65 L1332.01 1208.65 L1332.6 1208.65 L1333.18 1208.65 L1333.77 1208.65 L1334.35 1208.65 L1334.94 1208.65 L1335.53 1208.65 L1336.11 1208.65 L1336.7 1208.65 L1337.29 1208.65 L1337.87 1208.65 L1338.46 1208.65 L1339.05 1208.65 L1339.63 1208.65 L1340.22 1208.65 L1340.8 1208.65 L1341.39 1208.65 L1341.98 1208.65 L1342.56 1208.65 L1343.15 1208.65 L1343.74 1208.65 L1344.32 1208.65 L1344.91 1208.65 L1345.5 1208.65 L1346.08 1208.65 L1346.67 1208.65 L1347.26 1208.65 L1347.84 1208.65 L1348.43 1208.65 L1349.01 1208.65 L1349.6 1208.65 L1350.19 1208.65 L1350.77 1208.65 L1351.36 1208.65 L1351.95 1208.65 L1352.53 1208.65 L1353.12 1208.65 L1353.71 1208.65 L1354.29 1208.65 L1354.88 1208.65 L1355.47 1208.65 L1356.05 1208.65 L1356.64 1208.65 L1357.22 1208.65 L1357.81 1208.65 L1358.4 1208.65 L1358.98 1208.65 L1359.57 1208.65 L1360.16 1208.65 L1360.74 1208.65 L1361.33 1208.65 L1361.92 1208.65 L1362.5 1208.65 L1363.09 1208.65 L1363.68 1208.65 L1364.26 1208.65 L1364.85 1208.65 L1365.43 1208.65 L1366.02 1208.65 L1366.61 1208.65 L1367.19 1208.65 L1367.78 1208.65 L1368.37 1208.65 L1368.95 1208.65 L1369.54 1208.65 L1370.13 1208.65 L1370.71 1208.65 L1371.3 1208.65 L1371.88 1208.65 L1372.47 1208.65 L1373.06 1208.65 L1373.64 1208.65 L1374.23 1208.65 L1374.82 1208.65 L1375.4 1208.65 L1375.99 1208.65 L1376.58 1208.65 L1377.16 1208.65 L1377.75 1208.65 L1378.34 1208.65 L1378.92 1208.65 L1379.51 1208.65 L1380.09 1208.65 L1380.68 1208.65 L1381.27 1208.65 L1381.85 1208.65 L1382.44 1208.65 L1383.03 1208.65 L1383.61 1208.65 L1384.2 1208.65 L1384.79 1208.65 L1385.37 1208.65 L1385.96 1208.65 L1386.55 1208.65 L1387.13 1208.65 L1387.72 1208.65 L1388.3 1208.65 L1388.89 1208.65 L1389.48 1208.65 L1390.06 1208.65 L1390.65 1208.65 L1391.24 1208.65 L1391.82 1208.65 L1392.41 1208.65 L1393 1208.65 L1393.58 1208.65 L1394.17 1208.65 L1394.75 1208.65 L1395.34 1208.65 L1395.93 1208.65 L1396.51 1208.65 L1397.1 1208.65 L1397.69 1208.65 L1398.27 1208.65 L1398.86 1208.65 L1399.45 1208.65 L1400.03 1208.65 L1400.62 1208.65 L1401.21 1208.65 L1401.79 1208.65 L1402.38 1208.65 L1402.96 1208.65 L1403.55 1208.65 L1404.14 1208.65 L1404.72 1208.65 L1405.31 1208.65 L1405.9 1208.65 L1406.48 1208.65 L1407.07 1208.65 L1407.66 1208.65 L1408.24 1208.65 L1408.83 1208.65 L1409.42 1208.65 L1410 1208.65 L1410.59 1208.65 L1411.17 1208.65 L1411.76 1208.65 L1412.35 1208.65 L1412.93 1208.65 L1413.52 1208.65 L1414.11 1208.65 L1414.69 1208.65 L1415.28 1208.65 L1415.87 1208.65 L1416.45 1208.65 L1417.04 1208.65 L1417.63 1208.65 L1418.21 1208.65 L1418.8 1208.65 L1419.38 1208.65 L1419.97 1208.65 L1420.56 1208.65 L1421.14 1208.65 L1421.73 1208.65 L1422.32 1208.65 L1422.9 1208.65 L1423.49 1208.65 L1424.08 1208.65 L1424.66 1208.65 L1425.25 1208.65 L1425.83 1208.65 L1426.42 1208.65 L1427.01 1208.65 L1427.59 1208.65 L1428.18 1208.65 L1428.77 1208.65 L1429.35 1208.65 L1429.94 1208.65 L1430.53 1208.65 L1431.11 1208.65 L1431.7 1208.65 L1432.29 1208.65 L1432.87 1208.65 L1433.46 1208.65 L1434.04 1208.65 L1434.63 1208.65 L1435.22 1208.65 L1435.8 1208.65 L1436.39 1208.65 L1436.98 1208.65 L1437.56 1208.65 L1438.15 1208.65 L1438.74 1208.65 L1439.32 1208.65 L1439.91 1208.65 L1440.5 1208.65 L1441.08 1208.65 L1441.67 1208.65 L1442.25 1208.65 L1442.84 1208.65 L1443.43 1208.65 L1444.01 1208.65 L1444.6 1208.65 L1445.19 1208.65 L1445.77 1208.65 L1446.36 1208.65 L1446.95 1208.65 L1447.53 1208.65 L1448.12 1208.65 L1448.7 1208.65 L1449.29 1208.65 L1449.88 1208.65 L1450.46 1208.65 L1451.05 1208.65 L1451.64 1208.65 L1452.22 1208.65 L1452.81 1208.65 L1453.4 1208.65 L1453.98 1208.65 L1454.57 1208.65 L1455.16 1208.65 L1455.74 1208.65 L1456.33 1208.65 L1456.91 1208.65 L1457.5 1208.65 L1458.09 1208.65 L1458.67 1208.65 L1459.26 1208.65 L1459.85 1208.65 L1460.43 1208.65 L1461.02 1208.65 L1461.61 1208.65 L1462.19 1208.65 L1462.78 1208.65 L1463.37 1208.65 L1463.95 1208.65 L1464.54 1208.65 L1465.12 1208.65 L1465.71 1208.65 L1466.3 1208.65 L1466.88 1208.65 L1467.47 1208.65 L1468.06 1208.65 L1468.64 1208.65 L1469.23 1208.65 L1469.82 1208.65 L1470.4 1208.65 L1470.99 1208.65 L1471.57 1208.65 L1472.16 1208.65 L1472.75 1208.65 L1473.33 1208.65 L1473.92 1208.65 L1474.51 1208.65 L1475.09 1208.65 L1475.68 1208.65 L1476.27 1208.65 L1476.85 1208.65 L1477.44 1208.65 L1478.03 1208.65 L1478.61 1208.65 L1479.2 1208.65 L1479.78 1208.65 L1480.37 1208.65 L1480.96 1208.65 L1481.54 1208.65 L1482.13 1208.65 L1482.72 1208.65 L1483.3 1208.65 L1483.89 1208.65 L1484.48 1208.65 L1485.06 1208.65 L1485.65 1208.65 L1486.24 1208.65 L1486.82 1208.65 L1487.41 1208.65 L1487.99 1208.65 L1488.58 1208.65 L1489.17 1208.65 L1489.75 1208.65 L1490.34 1208.65 L1490.93 1208.65 L1491.51 1208.65 L1492.1 1208.65 L1492.69 1208.65 L1493.27 1208.65 L1493.86 1208.65 L1494.45 1208.65 L1495.03 1208.65 L1495.62 1208.65 L1496.2 1208.65 L1496.79 1208.65 L1497.38 1208.65 L1497.96 1208.65 L1498.55 1208.65 L1499.14 1208.65 L1499.72 1208.65 L1500.31 1208.65 L1500.9 1208.65 L1501.48 1208.65 L1502.07 1208.65 L1502.65 1208.65 L1503.24 1208.65 L1503.83 1208.65 L1504.41 1208.65 L1505 1208.65 L1505.59 1208.65 L1506.17 1208.65 L1506.76 1208.65 L1507.35 1208.65 L1507.93 1208.65 L1508.52 1208.65 L1509.11 1208.65 L1509.69 1208.65 L1510.28 1208.65 L1510.86 1208.65 L1511.45 1208.65 L1512.04 1208.65 L1512.62 1208.65 L1513.21 1208.65 L1513.8 1208.65 L1514.38 1208.65 L1514.97 1208.65 L1515.56 1208.65 L1516.14 1208.65 L1516.73 1208.65 L1517.32 1208.65 L1517.9 1208.65 L1518.49 1208.65 L1519.07 1208.65 L1519.66 1208.65 L1520.25 1208.65 L1520.83 1208.65 L1521.42 1208.65 L1522.01 1208.65 L1522.59 1208.65 L1523.18 1208.65 L1523.77 1208.65 L1524.35 1208.65 L1524.94 1208.65 L1525.52 1208.65 L1526.11 1208.65 L1526.7 1208.65 L1527.28 1208.65 L1527.87 1208.65 L1528.46 1208.65 L1529.04 1208.65 L1529.63 1208.65 L1530.22 1208.65 L1530.8 1208.65 L1531.39 1208.65 L1531.98 1208.65 L1532.56 1208.65 L1533.15 1208.65 L1533.73 1208.65 L1534.32 1208.65 L1534.91 1208.65 L1535.49 1208.65 L1536.08 1208.65 L1536.67 1208.65 L1537.25 1208.65 L1537.84 1208.65 L1538.43 1208.65 L1539.01 1208.65 L1539.6 1208.65 L1540.19 1208.65 L1540.77 1208.65 L1541.36 1208.65 L1541.94 1208.65 L1542.53 1208.65 L1543.12 1208.65 L1543.7 1208.65 L1544.29 1208.65 L1544.88 1208.65 L1545.46 1208.65 L1546.05 1208.65 L1546.64 1208.65 L1547.22 1208.65 L1547.81 1208.65 L1548.4 1208.65 L1548.98 1208.65 L1549.57 1208.65 L1550.15 1208.65 L1550.74 1208.65 L1551.33 1208.65 L1551.91 1208.65 L1552.5 1208.65 L1553.09 1208.65 L1553.67 1208.65 L1554.26 1208.65 L1554.85 1208.65 L1555.43 1208.65 L1556.02 1208.65 L1556.6 1208.65 L1557.19 1208.65 L1557.78 1208.65 L1558.36 1208.65 L1558.95 1208.65 L1559.54 1208.65 L1560.12 1208.65 L1560.71 1208.65 L1561.3 1208.65 L1561.88 1208.65 L1562.47 1208.65 L1563.06 1208.65 L1563.64 1208.65 L1564.23 1208.65 L1564.81 1208.65 L1565.4 1208.65 L1565.99 1208.65 L1566.57 1208.65 L1567.16 1208.65 L1567.75 1208.65 L1568.33 1208.65 L1568.92 1208.65 L1569.51 1208.65 L1570.09 1208.65 L1570.68 1208.65 L1571.27 1208.65 L1571.85 1208.65 L1572.44 1208.65 L1573.02 1208.65 L1573.61 1208.65 L1574.2 1208.65 L1574.78 1208.65 L1575.37 1208.65 L1575.96 1208.65 L1576.54 1208.65 L1577.13 1208.65 L1577.72 1208.65 L1578.3 1208.65 L1578.89 1208.65 L1579.47 1208.65 L1580.06 1208.65 L1580.65 1208.65 L1581.23 1208.65 L1581.82 1208.65 L1582.41 1208.65 L1582.99 1208.65 L1583.58 1208.65 L1584.17 1208.65 L1584.75 1208.65 L1585.34 1208.65 L1585.93 1208.65 L1586.51 1208.65 L1587.1 1208.65 L1587.68 1208.65 L1588.27 1208.65 L1588.86 1208.65 L1589.44 1208.65 L1590.03 1208.65 L1590.62 1208.65 L1591.2 1208.65 L1591.79 1208.65 L1592.38 1208.65 L1592.96 1208.65 L1593.55 1208.65 L1594.14 1208.65 L1594.72 1208.65 L1595.31 1208.65 L1595.89 1208.65 L1596.48 1208.65 L1597.07 1208.65 L1597.65 1208.65 L1598.24 1208.65 L1598.83 1208.65 L1599.41 1208.65 L1600 1208.65 L1600.59 1208.65 L1601.17 1208.65 L1601.76 1208.65 L1602.34 1208.65 L1602.93 1208.65 L1603.52 1208.65 L1604.1 1208.65 L1604.69 1208.65 L1605.28 1208.65 L1605.86 1208.65 L1606.45 1208.65 L1607.04 1208.65 L1607.62 1208.65 L1608.21 1208.65 L1608.8 1208.65 L1609.38 1208.65 L1609.97 1208.65 L1610.55 1208.65 L1611.14 1208.65 L1611.73 1208.65 L1612.31 1208.65 L1612.9 1208.65 L1613.49 1208.65 L1614.07 1208.65 L1614.66 1208.65 L1615.25 1208.65 L1615.83 1208.65 L1616.42 1208.65 L1617.01 1208.65 L1617.59 1208.65 L1618.18 1208.65 L1618.76 1208.65 L1619.35 1208.65 L1619.94 1208.65 L1620.52 1208.65 L1621.11 1208.65 L1621.7 1208.65 L1622.28 1208.65 L1622.87 1208.65 L1623.46 1208.65 L1624.04 1208.65 L1624.63 1208.65 L1625.22 1208.65 L1625.8 1208.65 L1626.39 1208.65 L1626.97 1208.65 L1627.56 1208.65 L1628.15 1208.65 L1628.73 1208.65 L1629.32 1208.65 L1629.91 1208.65 L1630.49 1208.65 L1631.08 1208.65 L1631.67 1208.65 L1632.25 1208.65 L1632.84 1208.65 L1633.42 1208.65 L1634.01 1208.65 L1634.6 1208.65 L1635.18 1208.65 L1635.77 1208.65 L1636.36 1208.65 L1636.94 1208.65 L1637.53 1208.65 L1638.12 1208.65 L1638.7 1208.65 L1639.29 1208.65 L1639.88 1208.65 L1640.46 1208.65 L1641.05 1208.65 L1641.63 1208.65 L1642.22 1208.65 L1642.81 1208.65 L1643.39 1208.65 L1643.98 1208.65 L1644.57 1208.65 L1645.15 1208.65 L1645.74 1208.65 L1646.33 1208.65 L1646.91 1208.65 L1647.5 1208.65 L1648.09 1208.65 L1648.67 1208.65 L1649.26 1208.65 L1649.84 1208.65 L1650.43 1208.65 L1651.02 1208.65 L1651.6 1208.65 L1652.19 1208.65 L1652.78 1208.65 L1653.36 1208.65 L1653.95 1208.65 L1654.54 1208.65 L1655.12 1208.65 L1655.71 1208.65 L1656.29 1208.65 L1656.88 1208.65 L1657.47 1208.65 L1658.05 1208.65 L1658.64 1208.65 L1659.23 1208.65 L1659.81 1208.65 L1660.4 1208.65 L1660.99 1208.65 L1661.57 1208.65 L1662.16 1208.65 L1662.75 1208.65 L1663.33 1208.65 L1663.92 1208.65 L1664.5 1208.65 L1665.09 1208.65 L1665.68 1208.65 L1666.26 1208.65 L1666.85 1208.65 L1667.44 1208.65 L1668.02 1208.65 L1668.61 1208.65 L1669.2 1208.65 L1669.78 1208.65 L1670.37 1208.65 L1670.96 1208.65 L1671.54 1208.65 L1672.13 1208.65 L1672.71 1208.65 L1673.3 1208.65 L1673.89 1208.65 L1674.47 1208.65 L1675.06 1208.65 L1675.65 1208.65 L1676.23 1208.65 L1676.82 1208.65 L1677.41 1208.65 L1677.99 1208.65 L1678.58 1208.65 L1679.17 1208.65 L1679.75 1208.65 L1680.34 1208.65 L1680.92 1208.65 L1681.51 1208.65 L1682.1 1208.65 L1682.68 1208.65 L1683.27 1208.65 L1683.86 1208.65 L1684.44 1208.65 L1685.03 1208.65 L1685.62 1208.65 L1686.2 1208.65 L1686.79 1208.65 L1687.37 1208.65 L1687.96 1208.65 L1688.55 1208.65 L1689.13 1208.65 L1689.72 1208.65 L1690.31 1208.65 L1690.89 1208.65 L1691.48 1208.65 L1692.07 1208.65 L1692.65 1208.65 L1693.24 1208.65 L1693.83 1208.65 L1694.41 1208.65 L1695 1208.65 L1695.58 1208.65 L1696.17 1208.65 L1696.76 1208.65 L1697.34 1208.65 L1697.93 1208.65 L1698.52 1208.65 L1699.1 1208.65 L1699.69 1208.65 L1700.28 1208.65 L1700.86 1208.65 L1701.45 1208.65 L1702.04 1208.65 L1702.62 1208.65 L1703.21 1208.65 L1703.79 1208.65 L1704.38 1208.65 L1704.97 1208.65 L1705.55 1208.65 L1706.14 1208.65 L1706.73 1208.65 L1707.31 1208.65 L1707.9 1208.65 L1708.49 1208.65 L1709.07 1208.65 L1709.66 1208.65 L1710.24 1208.65 L1710.83 1208.65 L1711.42 1208.65 L1712 1208.65 L1712.59 1208.65 L1713.18 1208.65 L1713.76 1208.65 L1714.35 1208.65 L1714.94 1208.65 L1715.52 1208.65 L1716.11 1208.65 L1716.7 1208.65 L1717.28 1208.65 L1717.87 1208.65 L1718.45 1208.65 L1719.04 1208.65 L1719.63 1208.65 L1720.21 1208.65 L1720.8 1208.65 L1721.39 1208.65 L1721.97 1208.65 L1722.56 1208.65 L1723.15 1208.65 L1723.73 1208.65 L1724.32 1208.65 L1724.91 1208.65 L1725.49 1208.65 L1726.08 1208.65 L1726.66 1208.65 L1727.25 1208.65 L1727.84 1208.65 L1728.42 1208.65 L1729.01 1208.65 L1729.6 1208.65 L1730.18 1208.65 L1730.77 1208.65 L1731.36 1208.65 L1731.94 1208.65 L1732.53 1208.65 L1733.11 1208.65 L1733.7 1208.65 L1734.29 1208.65 L1734.87 1208.65 L1735.46 1208.65 L1736.05 1208.65 L1736.63 1208.65 L1737.22 1208.65 L1737.81 1208.65 L1738.39 1208.65 L1738.98 1208.65 L1739.57 1208.65 L1740.15 1208.65 L1740.74 1208.65 L1741.32 1208.65 L1741.91 1208.65 L1742.5 1208.65 L1743.08 1208.65 L1743.67 1208.65 L1744.26 1208.65 L1744.84 1208.65 L1745.43 1208.65 L1746.02 1208.65 L1746.6 1208.65 L1747.19 1208.65 L1747.78 1208.65 L1748.36 1208.65 L1748.95 1208.65 L1749.53 1208.65 L1750.12 1208.65 L1750.71 1208.65 L1751.29 1208.65 L1751.88 1208.65 L1752.47 1208.65 L1753.05 1208.65 L1753.64 1208.65 L1754.23 1208.65 L1754.81 1208.65 L1755.4 1208.65 L1755.99 1208.65 L1756.57 1208.65 L1757.16 1208.65 L1757.74 1208.65 L1758.33 1208.65 L1758.92 1208.65 L1759.5 1208.65 L1760.09 1208.65 L1760.68 1208.65 L1761.26 1208.65 L1761.85 1208.65 L1762.44 1208.65 L1763.02 1208.65 L1763.61 1208.65 L1764.19 1208.65 L1764.78 1208.65 L1765.37 1208.65 L1765.95 1208.65 L1766.54 1208.65 L1767.13 1208.65 L1767.71 1208.65 L1768.3 1208.65 L1768.89 1208.65 L1769.47 1208.65 L1770.06 1208.65 L1770.65 1208.65 L1771.23 1208.65 L1771.82 1208.65 L1772.4 1208.65 L1772.99 1208.65 L1773.58 1208.65 L1774.16 1208.65 L1774.75 1208.65 L1775.34 1208.65 L1775.92 1208.65 L1776.51 1208.65 L1777.1 1208.65 L1777.68 1208.65 L1778.27 1208.65 L1778.86 1208.65 L1779.44 1208.65 L1780.03 1208.65 L1780.61 1208.65 L1781.2 1208.65 L1781.79 1208.65 L1782.37 1208.65 L1782.96 1208.65 L1783.55 1208.65 L1784.13 1208.65 L1784.72 1208.65 L1785.31 1208.65 L1785.89 1208.65 L1786.48 1208.65 L1787.06 1208.65 L1787.65 1208.65 L1788.24 1208.65 L1788.82 1208.65 L1789.41 1208.65 L1790 1208.65 L1790.58 1208.65 L1791.17 1208.65 L1791.76 1208.65 L1792.34 1208.65 L1792.93 1208.65 L1793.52 1208.65 L1794.1 1208.65 L1794.69 1208.65 L1795.27 1208.65 L1795.86 1208.65 L1796.45 1208.65 L1797.03 1208.65 L1797.62 1208.65 L1798.21 1208.65 L1798.79 1208.65 L1799.38 1208.65 L1799.97 1208.65 L1800.55 1208.65 L1801.14 1208.65 L1801.73 1208.65 L1802.31 1208.65 L1802.9 1208.65 L1803.48 1208.65 L1804.07 1208.65 L1804.66 1208.65 L1805.24 1208.65 L1805.83 1208.65 L1806.42 1208.65 L1807 1208.65 L1807.59 1208.65 L1808.18 1208.65 L1808.76 1208.65 L1809.35 1208.65 L1809.94 1208.65 L1810.52 1208.65 L1811.11 1208.65 L1811.69 1208.65 L1812.28 1208.65 L1812.87 1208.65 L1813.45 1208.65 L1814.04 1208.65 L1814.63 1208.65 L1815.21 1208.65 L1815.8 1208.65 L1816.39 1208.65 L1816.97 1208.65 L1817.56 1208.65 L1818.14 1208.65 L1818.73 1208.65 L1819.32 1208.65 L1819.9 1208.65 L1820.49 1208.65 L1821.08 1208.65 L1821.66 1208.65 L1822.25 1208.65 L1822.84 1208.65 L1823.42 1208.65 L1824.01 1208.65 L1824.6 1208.65 L1825.18 1208.65 L1825.77 1208.65 L1826.35 1208.65 L1826.94 1208.65 L1827.53 1208.65 L1828.11 1208.65 L1828.7 1208.65 L1829.29 1208.65 L1829.87 1208.65 L1830.46 1208.65 L1831.05 1208.65 L1831.63 1208.65 L1832.22 1208.65 L1832.81 1208.65 L1833.39 1208.65 L1833.98 1208.65 L1834.56 1208.65 L1835.15 1208.65 L1835.74 1208.65 L1836.32 1208.65 L1836.91 1208.65 L1837.5 1208.65 L1838.08 1208.65 L1838.67 1208.65 L1839.26 1208.65 L1839.84 1208.65 L1840.43 1208.65 L1841.01 1208.65 L1841.6 1208.65 L1842.19 1208.65 L1842.77 1208.65 L1843.36 1208.65 L1843.95 1208.65 L1844.53 1208.65 L1845.12 1208.65 L1845.71 1208.65 L1846.29 1208.65 L1846.88 1208.65 L1847.47 1208.65 L1848.05 1208.65 L1848.64 1208.65 L1849.22 1208.65 L1849.81 1208.65 L1850.4 1208.65 L1850.98 1208.65 L1851.57 1208.65 L1852.16 1208.65 L1852.74 1208.65 L1853.33 1208.65 L1853.92 1208.65 L1854.5 1208.65 L1855.09 1208.65 L1855.68 1208.65 L1856.26 1208.65 L1856.85 1208.65 L1857.43 1208.65 L1858.02 1208.65 L1858.61 1208.65 L1859.19 1208.65 L1859.78 1208.65 L1860.37 1208.65 L1860.95 1208.65 L1861.54 1208.65 L1862.13 1208.65 L1862.71 1208.65 L1863.3 1208.65 L1863.88 1208.65 L1864.47 1208.65 L1865.06 1208.65 L1865.64 1208.65 L1866.23 1208.65 L1866.82 1208.65 L1867.4 1208.65 L1867.99 1208.65 L1868.58 1208.65 L1869.16 1208.65 L1869.75 1208.65 L1870.34 1208.65 L1870.92 1208.65 L1871.51 1208.65 L1872.09 1208.65 L1872.68 1208.65 L1873.27 1208.65 L1873.85 1208.65 L1874.44 1208.65 L1875.03 1208.65 L1875.61 1208.65 L1876.2 1208.65 L1876.79 1208.65 L1877.37 1208.65 L1877.96 1208.65 L1878.55 1208.65 L1879.13 1208.65 L1879.72 1208.65 L1880.3 1208.65 L1880.89 1208.65 L1881.48 1208.65 L1882.06 1208.65 L1882.65 1208.65 L1883.24 1208.65 L1883.82 1208.65 L1884.41 1208.65 L1885 1208.65 L1885.58 1208.65 L1886.17 1208.65 L1886.76 1208.65 L1887.34 1208.65 L1887.93 1208.65 L1888.51 1208.65 L1889.1 1208.65 L1889.69 1208.65 L1890.27 1208.65 L1890.86 1208.65 L1891.45 1208.65 L1892.03 1208.65 L1892.62 1208.65 L1893.21 1208.65 L1893.79 1208.65 L1894.38 1208.65 L1894.96 1208.65 L1895.55 1208.65 L1896.14 1208.65 L1896.72 1208.65 L1897.31 1208.65 L1897.9 1208.65 L1898.48 1208.65 L1899.07 1208.65 L1899.66 1208.65 L1900.24 1208.65 L1900.83 1208.65 L1901.42 1208.65 L1902 1208.65 L1902.59 1208.65 L1903.17 1208.65 L1903.76 1208.65 L1904.35 1208.65 L1904.93 1208.65 L1905.52 1208.65 L1906.11 1208.65 L1906.69 1208.65 L1907.28 1208.65 L1907.87 1208.65 L1908.45 1208.65 L1909.04 1208.65 L1909.63 1208.65 L1910.21 1208.65 L1910.8 1208.65 L1911.38 1208.65 L1911.97 1208.65 L1912.56 1208.65 L1913.14 1208.65 L1913.73 1208.65 L1914.32 1208.65 L1914.9 1208.65 L1915.49 1208.65 L1916.08 1208.65 L1916.66 1208.65 L1917.25 1208.65 L1917.83 1208.65 L1918.42 1208.65 L1919.01 1208.65 L1919.59 1208.65 L1920.18 1208.65 L1920.77 1208.65 L1921.35 1208.65 L1921.94 1208.65 L1922.53 1208.65 L1923.11 1208.65 L1923.7 1208.65 L1924.29 1208.65 L1924.87 1208.65 L1925.46 1208.65 L1926.04 1208.65 L1926.63 1208.65 L1927.22 1208.65 L1927.8 1208.65 L1928.39 1208.65 L1928.98 1208.65 L1929.56 1208.65 L1930.15 1208.65 L1930.74 1208.65 L1931.32 1208.65 L1931.91 1208.65 L1932.5 1208.65 L1933.08 1208.65 L1933.67 1208.65 L1934.25 1208.65 L1934.84 1208.65 L1935.43 1208.65 L1936.01 1208.65 L1936.6 1208.65 L1937.19 1208.65 L1937.77 1208.65 L1938.36 1208.65 L1938.95 1208.65 L1939.53 1208.65 L1940.12 1208.65 L1940.71 1208.65 L1941.29 1208.65 L1941.88 1208.65 L1942.46 1208.65 L1943.05 1208.65 L1943.64 1208.65 L1944.22 1208.65 L1944.81 1208.65 L1945.4 1208.65 L1945.98 1208.65 L1946.57 1208.65 L1947.16 1208.65 L1947.74 1208.65 L1948.33 1208.65 L1948.91 1208.65 L1949.5 1208.65 L1950.09 1208.65 L1950.67 1208.65 L1951.26 1208.65 L1951.85 1208.65 L1952.43 1208.65 L1953.02 1208.65 L1953.61 1208.65 L1954.19 1208.65 L1954.78 1208.65 L1955.37 1208.65 L1955.95 1208.65 L1956.54 1208.65 L1957.12 1208.65 L1957.71 1208.65 L1958.3 1208.65 L1958.88 1208.65 L1959.47 1208.65 L1960.06 1208.65 L1960.64 1208.65 L1961.23 1208.65 L1961.82 1208.65 L1962.4 1208.65 L1962.99 1208.65 L1963.58 1208.65 L1964.16 1208.65 L1964.75 1208.65 L1965.33 1208.65 L1965.92 1208.65 L1966.51 1208.65 L1967.09 1208.65 L1967.68 1208.65 L1968.27 1208.65 L1968.85 1208.65 L1969.44 1208.65 L1970.03 1208.65 L1970.61 1208.65 L1971.2 1208.65 L1971.78 1208.65 L1972.37 1208.65 L1972.96 1208.65 L1973.54 1208.65 L1974.13 1208.65 L1974.72 1208.65 L1975.3 1208.65 L1975.89 1208.65 L1976.48 1208.65 L1977.06 1208.65 L1977.65 1208.65 L1978.24 1208.65 L1978.82 1208.65 L1979.41 1208.65 L1979.99 1208.65 L1980.58 1208.65 L1981.17 1208.65 L1981.75 1208.65 L1982.34 1208.65 L1982.93 1208.65 L1983.51 1208.65 L1984.1 1208.65 L1984.69 1208.65 L1985.27 1208.65 L1985.86 1208.65 L1986.45 1208.65 L1987.03 1208.65 L1987.62 1208.65 L1988.2 1208.65 L1988.79 1208.65 L1989.38 1208.65 L1989.96 1208.65 L1990.55 1208.65 L1991.14 1208.65 L1991.72 1208.65 L1992.31 1208.65 L1992.9 1208.65 L1993.48 1208.65 L1994.07 1208.65 L1994.65 1208.65 L1995.24 1208.65 L1995.83 1208.65 L1996.41 1208.65 L1997 1208.65 L1997.59 1208.65 L1998.17 1208.65 L1998.76 1208.65 L1999.35 1208.65 L1999.93 1208.65 L2000.52 1208.65 L2001.11 1208.65 L2001.69 1208.65 L2002.28 1208.65 L2002.86 1208.65 L2003.45 1208.65 L2004.04 1208.65 L2004.62 1208.65 L2005.21 1208.65 L2005.8 1208.65 L2006.38 1208.65 L2006.97 1208.65 L2007.56 1208.65 L2008.14 1208.65 L2008.73 1208.65 L2009.32 1208.65 L2009.9 1208.65 L2010.49 1208.65 L2011.07 1208.65 L2011.66 1208.65 L2012.25 1208.65 L2012.83 1208.65 L2013.42 1208.65 L2014.01 1208.65 L2014.59 1208.65 L2015.18 1208.65 L2015.77 1208.65 L2016.35 1208.65 L2016.94 1208.65 L2017.53 1208.65 L2018.11 1208.65 L2018.7 1208.65 L2019.28 1208.65 L2019.87 1208.65 L2020.46 1208.65 L2021.04 1208.65 L2021.63 1208.65 L2022.22 1208.65 L2022.8 1208.65 L2023.39 1208.65 L2023.98 1208.65 L2024.56 1208.65 L2025.15 1208.65 L2025.73 1208.65 L2026.32 1208.65 L2026.91 1208.65 L2027.49 1208.65 L2028.08 1208.65 L2028.67 1208.65 L2029.25 1208.65 L2029.84 1208.65 L2030.43 1208.65 L2031.01 1208.65 L2031.6 1208.65 L2032.19 1208.65 L2032.77 1208.65 L2033.36 1208.65 L2033.94 1208.65 L2034.53 1208.65 L2035.12 1208.65 L2035.7 1208.65 L2036.29 1208.65 L2036.88 1208.65 L2037.46 1208.65 L2038.05 1208.65 L2038.64 1208.65 L2039.22 1208.65 L2039.81 1208.65 L2040.4 1208.65 L2040.98 1208.65 L2041.57 1208.65 L2042.15 1208.65 L2042.74 1208.65 L2043.33 1208.65 L2043.91 1208.65 L2044.5 1208.65 L2045.09 1208.65 L2045.67 1208.65 L2046.26 1208.65 L2046.85 1208.65 L2047.43 1208.65 L2048.02 1208.65 L2048.6 1208.65 L2049.19 1208.65 L2049.78 1208.65 L2050.36 1208.65 L2050.95 1208.65 L2051.54 1208.65 L2052.12 1208.65 L2052.71 1208.65 L2053.3 1208.65 L2053.88 1208.65 L2054.47 1208.65 L2055.06 1208.65 L2055.64 1208.65 L2056.23 1208.65 L2056.81 1208.65 L2057.4 1208.65 L2057.99 1208.65 L2058.57 1208.65 L2059.16 1208.65 L2059.75 1208.65 L2060.33 1208.65 L2060.92 1208.65 L2061.51 1208.65 L2062.09 1208.65 L2062.68 1208.65 L2063.27 1208.65 L2063.85 1208.65 L2064.44 1208.65 L2065.02 1208.65 L2065.61 1208.65 L2066.2 1208.65 L2066.78 1208.65 L2067.37 1208.65 L2067.96 1208.65 L2068.54 1208.65 L2069.13 1208.65 L2069.72 1208.65 L2070.3 1208.65 L2070.89 1208.65 L2071.48 1208.65 L2072.06 1208.65 L2072.65 1208.65 L2073.23 1208.65 L2073.82 1208.65 L2074.41 1208.65 L2074.99 1208.65 L2075.58 1208.65 L2076.17 1208.65 L2076.75 1208.65 L2077.34 1208.65 L2077.93 1208.65 L2078.51 1208.65 L2079.1 1208.65 L2079.68 1208.65 L2080.27 1208.65 L2080.86 1208.65 L2081.44 1208.65 L2082.03 1208.65 L2082.62 1208.65 L2083.2 1208.65 L2083.79 1208.65 L2084.38 1208.65 L2084.96 1208.65 L2085.55 1208.65 L2086.14 1208.65 L2086.72 1208.65 L2087.31 1208.65 L2087.89 1208.65 L2088.48 1208.65 L2089.07 1208.65 L2089.65 1208.65 L2090.24 1208.65 L2090.83 1208.65 L2091.41 1208.65 L2092 1208.65 L2092.59 1208.65 L2093.17 1208.65 L2093.76 1208.65 L2094.35 1208.65 L2094.93 1208.65 L2095.52 1208.65 L2096.1 1208.65 L2096.69 1208.65 L2097.28 1208.65 L2097.86 1208.65 L2098.45 1208.65 L2099.04 1208.65 L2099.62 1208.65 L2100.21 1208.65 L2100.8 1208.65 L2101.38 1208.65 L2101.97 1208.65 L2102.55 1208.65 L2103.14 1208.65 L2103.73 1208.65 L2104.31 1208.65 L2104.9 1208.65 L2105.49 1208.65 L2106.07 1208.65 L2106.66 1208.65 L2107.25 1208.65 L2107.83 1208.65 L2108.42 1208.65 L2109.01 1208.65 L2109.59 1208.65 L2110.18 1208.65 L2110.76 1208.65 L2111.35 1208.65 L2111.94 1208.65 L2112.52 1208.65 L2113.11 1208.65 L2113.7 1208.65 L2114.28 1208.65 L2114.87 1208.65 L2115.46 1208.65 L2116.04 1208.65 L2116.63 1208.65 L2117.22 1208.65 L2117.8 1208.65 L2118.39 1208.65 L2118.97 1208.65 L2119.56 1208.65 L2120.15 1208.65 L2120.73 1208.65 L2121.32 1208.65 L2121.91 1208.65 L2122.49 1208.65 L2123.08 1208.65 L2123.67 1208.65 L2124.25 1208.65 L2124.84 1208.65 L2125.42 1208.65 L2126.01 1208.65 L2126.6 1208.65 L2127.18 1208.65 L2127.77 1208.65 L2128.36 1208.65 L2128.94 1208.65 L2129.53 1208.65 L2130.12 1208.65 L2130.7 1208.65 L2131.29 1208.65 L2131.88 1208.65 L2132.46 1208.65 L2133.05 1208.65 L2133.63 1208.65 L2134.22 1208.65 L2134.81 1208.65 L2135.39 1208.65 L2135.98 1208.65 L2136.57 1208.65 L2137.15 1208.65 L2137.74 1208.65 L2138.33 1208.65 L2138.91 1208.65 L2139.5 1208.65 L2140.09 1208.65 L2140.67 1208.65 L2141.26 1208.65 L2141.84 1208.65 L2142.43 1208.65 L2143.02 1208.65 L2143.6 1208.65 L2144.19 1208.65 L2144.78 1208.65 L2145.36 1208.65 L2145.95 1208.65 L2146.54 1208.65 L2147.12 1208.65 L2147.71 1208.65 L2148.3 1208.65 L2148.88 1208.65 L2149.47 1208.65 L2150.05 1208.65 L2150.64 1208.65 L2151.23 1208.65 L2151.81 1208.65 L2152.4 1208.65 L2152.99 1208.65 L2153.57 1208.65 L2154.16 1208.65 L2154.75 1208.65 L2155.33 1208.65 L2155.92 1208.65 L2156.5 1208.65 L2157.09 1208.65 L2157.68 1208.65 L2158.26 1208.65 L2158.26 1207.97 L2157.68 1207.97 L2157.09 1207.97 L2156.5 1207.97 L2155.92 1207.97 L2155.33 1207.97 L2154.75 1207.97 L2154.16 1207.97 L2153.57 1207.97 L2152.99 1207.97 L2152.4 1207.97 L2151.81 1207.97 L2151.23 1207.97 L2150.64 1207.97 L2150.05 1207.97 L2149.47 1207.97 L2148.88 1207.97 L2148.3 1207.97 L2147.71 1207.97 L2147.12 1207.97 L2146.54 1207.97 L2145.95 1207.97 L2145.36 1207.97 L2144.78 1207.97 L2144.19 1207.97 L2143.6 1207.97 L2143.02 1207.97 L2142.43 1207.97 L2141.84 1207.97 L2141.26 1207.97 L2140.67 1207.97 L2140.09 1207.97 L2139.5 1207.97 L2138.91 1207.97 L2138.33 1207.97 L2137.74 1207.97 L2137.15 1207.97 L2136.57 1207.97 L2135.98 1207.97 L2135.39 1207.97 L2134.81 1207.97 L2134.22 1207.97 L2133.63 1207.97 L2133.05 1207.97 L2132.46 1207.97 L2131.88 1207.97 L2131.29 1207.97 L2130.7 1207.97 L2130.12 1207.97 L2129.53 1207.97 L2128.94 1207.97 L2128.36 1207.97 L2127.77 1207.97 L2127.18 1207.97 L2126.6 1207.97 L2126.01 1207.97 L2125.42 1207.97 L2124.84 1207.97 L2124.25 1207.97 L2123.67 1207.97 L2123.08 1207.97 L2122.49 1207.97 L2121.91 1207.97 L2121.32 1207.97 L2120.73 1207.97 L2120.15 1207.97 L2119.56 1207.97 L2118.97 1207.97 L2118.39 1207.97 L2117.8 1207.97 L2117.22 1207.97 L2116.63 1207.97 L2116.04 1207.97 L2115.46 1207.97 L2114.87 1207.97 L2114.28 1207.97 L2113.7 1207.97 L2113.11 1207.97 L2112.52 1207.97 L2111.94 1207.97 L2111.35 1207.97 L2110.76 1207.97 L2110.18 1207.97 L2109.59 1207.97 L2109.01 1207.97 L2108.42 1207.97 L2107.83 1207.97 L2107.25 1207.97 L2106.66 1207.97 L2106.07 1207.97 L2105.49 1207.97 L2104.9 1207.97 L2104.31 1207.97 L2103.73 1207.97 L2103.14 1207.97 L2102.55 1207.97 L2101.97 1207.97 L2101.38 1207.97 L2100.8 1207.97 L2100.21 1207.97 L2099.62 1207.97 L2099.04 1207.97 L2098.45 1207.97 L2097.86 1207.97 L2097.28 1207.97 L2096.69 1207.97 L2096.1 1207.97 L2095.52 1207.97 L2094.93 1207.97 L2094.35 1207.97 L2093.76 1207.97 L2093.17 1207.97 L2092.59 1207.97 L2092 1207.97 L2091.41 1207.97 L2090.83 1207.97 L2090.24 1207.97 L2089.65 1207.97 L2089.07 1207.97 L2088.48 1207.97 L2087.89 1207.97 L2087.31 1207.97 L2086.72 1207.97 L2086.14 1207.97 L2085.55 1207.97 L2084.96 1207.97 L2084.38 1207.97 L2083.79 1207.97 L2083.2 1207.97 L2082.62 1207.97 L2082.03 1207.97 L2081.44 1207.97 L2080.86 1207.97 L2080.27 1207.97 L2079.68 1207.97 L2079.1 1207.97 L2078.51 1207.97 L2077.93 1207.97 L2077.34 1207.97 L2076.75 1207.97 L2076.17 1207.97 L2075.58 1207.97 L2074.99 1207.97 L2074.41 1207.97 L2073.82 1207.97 L2073.23 1207.97 L2072.65 1207.97 L2072.06 1207.97 L2071.48 1207.97 L2070.89 1207.97 L2070.3 1207.97 L2069.72 1207.97 L2069.13 1207.97 L2068.54 1207.97 L2067.96 1207.97 L2067.37 1207.97 L2066.78 1207.97 L2066.2 1207.97 L2065.61 1207.97 L2065.02 1207.97 L2064.44 1207.97 L2063.85 1207.97 L2063.27 1207.97 L2062.68 1207.97 L2062.09 1207.97 L2061.51 1207.97 L2060.92 1207.97 L2060.33 1207.97 L2059.75 1207.97 L2059.16 1207.97 L2058.57 1207.97 L2057.99 1207.97 L2057.4 1207.97 L2056.81 1207.97 L2056.23 1207.97 L2055.64 1207.97 L2055.06 1207.97 L2054.47 1207.97 L2053.88 1207.97 L2053.3 1207.97 L2052.71 1207.97 L2052.12 1207.97 L2051.54 1207.97 L2050.95 1207.97 L2050.36 1207.97 L2049.78 1207.97 L2049.19 1207.97 L2048.6 1207.97 L2048.02 1207.97 L2047.43 1207.97 L2046.85 1207.97 L2046.26 1207.97 L2045.67 1207.97 L2045.09 1207.97 L2044.5 1207.97 L2043.91 1207.97 L2043.33 1207.97 L2042.74 1207.97 L2042.15 1207.97 L2041.57 1207.97 L2040.98 1207.97 L2040.4 1207.97 L2039.81 1207.97 L2039.22 1207.97 L2038.64 1207.97 L2038.05 1207.97 L2037.46 1207.97 L2036.88 1207.97 L2036.29 1207.97 L2035.7 1207.97 L2035.12 1207.97 L2034.53 1207.97 L2033.94 1207.97 L2033.36 1207.97 L2032.77 1207.97 L2032.19 1207.97 L2031.6 1207.97 L2031.01 1207.97 L2030.43 1207.97 L2029.84 1207.97 L2029.25 1207.97 L2028.67 1207.97 L2028.08 1207.97 L2027.49 1207.97 L2026.91 1207.97 L2026.32 1207.97 L2025.73 1207.97 L2025.15 1207.97 L2024.56 1207.97 L2023.98 1207.97 L2023.39 1207.97 L2022.8 1207.97 L2022.22 1207.97 L2021.63 1207.97 L2021.04 1207.97 L2020.46 1207.97 L2019.87 1207.97 L2019.28 1207.97 L2018.7 1207.97 L2018.11 1207.97 L2017.53 1207.97 L2016.94 1207.97 L2016.35 1207.97 L2015.77 1207.97 L2015.18 1207.97 L2014.59 1207.97 L2014.01 1207.97 L2013.42 1207.97 L2012.83 1207.97 L2012.25 1207.97 L2011.66 1207.97 L2011.07 1207.97 L2010.49 1207.97 L2009.9 1207.97 L2009.32 1207.97 L2008.73 1207.97 L2008.14 1207.97 L2007.56 1207.97 L2006.97 1207.97 L2006.38 1207.97 L2005.8 1207.97 L2005.21 1207.97 L2004.62 1207.97 L2004.04 1207.97 L2003.45 1207.97 L2002.86 1207.97 L2002.28 1207.97 L2001.69 1207.97 L2001.11 1207.97 L2000.52 1207.97 L1999.93 1207.97 L1999.35 1207.97 L1998.76 1207.97 L1998.17 1207.97 L1997.59 1207.97 L1997 1207.97 L1996.41 1207.97 L1995.83 1207.97 L1995.24 1207.97 L1994.65 1207.97 L1994.07 1207.97 L1993.48 1207.97 L1992.9 1207.97 L1992.31 1207.97 L1991.72 1207.97 L1991.14 1207.97 L1990.55 1207.97 L1989.96 1207.97 L1989.38 1207.97 L1988.79 1207.97 L1988.2 1207.97 L1987.62 1207.97 L1987.03 1207.97 L1986.45 1207.97 L1985.86 1207.97 L1985.27 1207.97 L1984.69 1207.97 L1984.1 1207.97 L1983.51 1207.97 L1982.93 1207.97 L1982.34 1207.97 L1981.75 1207.97 L1981.17 1207.97 L1980.58 1207.97 L1979.99 1207.97 L1979.41 1207.97 L1978.82 1207.97 L1978.24 1207.97 L1977.65 1207.97 L1977.06 1207.97 L1976.48 1207.97 L1975.89 1207.97 L1975.3 1207.97 L1974.72 1207.97 L1974.13 1207.97 L1973.54 1207.97 L1972.96 1207.97 L1972.37 1207.97 L1971.78 1207.97 L1971.2 1207.97 L1970.61 1207.97 L1970.03 1207.97 L1969.44 1207.97 L1968.85 1207.97 L1968.27 1207.97 L1967.68 1207.97 L1967.09 1207.97 L1966.51 1207.97 L1965.92 1207.97 L1965.33 1207.97 L1964.75 1207.97 L1964.16 1207.97 L1963.58 1207.97 L1962.99 1207.97 L1962.4 1207.97 L1961.82 1207.97 L1961.23 1207.97 L1960.64 1207.97 L1960.06 1207.97 L1959.47 1207.97 L1958.88 1207.97 L1958.3 1207.97 L1957.71 1207.97 L1957.12 1207.97 L1956.54 1207.97 L1955.95 1207.97 L1955.37 1207.97 L1954.78 1207.97 L1954.19 1207.97 L1953.61 1207.97 L1953.02 1207.97 L1952.43 1207.97 L1951.85 1207.97 L1951.26 1207.97 L1950.67 1207.97 L1950.09 1207.97 L1949.5 1207.97 L1948.91 1207.97 L1948.33 1207.97 L1947.74 1207.97 L1947.16 1207.97 L1946.57 1207.97 L1945.98 1207.97 L1945.4 1207.97 L1944.81 1207.97 L1944.22 1207.97 L1943.64 1207.97 L1943.05 1207.97 L1942.46 1207.97 L1941.88 1207.97 L1941.29 1207.97 L1940.71 1207.97 L1940.12 1207.97 L1939.53 1207.97 L1938.95 1207.97 L1938.36 1207.97 L1937.77 1207.97 L1937.19 1207.97 L1936.6 1207.97 L1936.01 1207.97 L1935.43 1207.97 L1934.84 1207.97 L1934.25 1207.97 L1933.67 1207.97 L1933.08 1207.97 L1932.5 1207.97 L1931.91 1207.97 L1931.32 1207.97 L1930.74 1207.97 L1930.15 1207.97 L1929.56 1207.97 L1928.98 1207.97 L1928.39 1207.97 L1927.8 1207.97 L1927.22 1207.97 L1926.63 1207.97 L1926.04 1207.97 L1925.46 1207.97 L1924.87 1207.97 L1924.29 1207.97 L1923.7 1207.97 L1923.11 1207.97 L1922.53 1207.97 L1921.94 1207.97 L1921.35 1207.97 L1920.77 1207.97 L1920.18 1207.97 L1919.59 1207.97 L1919.01 1207.97 L1918.42 1207.97 L1917.83 1207.97 L1917.25 1207.97 L1916.66 1207.97 L1916.08 1207.97 L1915.49 1207.97 L1914.9 1207.97 L1914.32 1207.97 L1913.73 1207.97 L1913.14 1207.97 L1912.56 1207.97 L1911.97 1207.97 L1911.38 1207.97 L1910.8 1207.97 L1910.21 1207.97 L1909.63 1207.97 L1909.04 1207.97 L1908.45 1207.97 L1907.87 1207.97 L1907.28 1207.97 L1906.69 1207.97 L1906.11 1207.97 L1905.52 1207.97 L1904.93 1207.97 L1904.35 1207.97 L1903.76 1207.97 L1903.17 1207.97 L1902.59 1207.97 L1902 1207.97 L1901.42 1207.97 L1900.83 1207.97 L1900.24 1207.97 L1899.66 1207.97 L1899.07 1207.97 L1898.48 1207.97 L1897.9 1207.97 L1897.31 1207.97 L1896.72 1207.97 L1896.14 1207.97 L1895.55 1207.97 L1894.96 1207.97 L1894.38 1207.97 L1893.79 1207.97 L1893.21 1207.97 L1892.62 1207.97 L1892.03 1207.97 L1891.45 1207.97 L1890.86 1207.97 L1890.27 1207.97 L1889.69 1207.97 L1889.1 1207.97 L1888.51 1207.97 L1887.93 1207.97 L1887.34 1207.97 L1886.76 1207.97 L1886.17 1207.97 L1885.58 1207.97 L1885 1207.97 L1884.41 1207.97 L1883.82 1207.97 L1883.24 1207.97 L1882.65 1207.97 L1882.06 1207.97 L1881.48 1207.97 L1880.89 1207.97 L1880.3 1207.97 L1879.72 1207.97 L1879.13 1207.97 L1878.55 1207.97 L1877.96 1207.97 L1877.37 1207.97 L1876.79 1207.97 L1876.2 1207.97 L1875.61 1207.97 L1875.03 1207.97 L1874.44 1207.97 L1873.85 1207.97 L1873.27 1207.97 L1872.68 1207.97 L1872.09 1207.97 L1871.51 1207.97 L1870.92 1207.97 L1870.34 1207.97 L1869.75 1207.97 L1869.16 1207.97 L1868.58 1207.97 L1867.99 1207.97 L1867.4 1207.97 L1866.82 1207.97 L1866.23 1207.97 L1865.64 1207.97 L1865.06 1207.97 L1864.47 1207.97 L1863.88 1207.97 L1863.3 1207.97 L1862.71 1207.97 L1862.13 1207.97 L1861.54 1207.97 L1860.95 1207.97 L1860.37 1207.97 L1859.78 1207.97 L1859.19 1207.97 L1858.61 1207.97 L1858.02 1207.97 L1857.43 1207.97 L1856.85 1207.97 L1856.26 1207.97 L1855.68 1207.97 L1855.09 1207.97 L1854.5 1207.97 L1853.92 1207.97 L1853.33 1207.97 L1852.74 1207.97 L1852.16 1207.97 L1851.57 1207.97 L1850.98 1207.97 L1850.4 1207.97 L1849.81 1207.97 L1849.22 1207.97 L1848.64 1207.97 L1848.05 1207.97 L1847.47 1207.97 L1846.88 1207.97 L1846.29 1207.97 L1845.71 1207.97 L1845.12 1207.97 L1844.53 1207.97 L1843.95 1207.97 L1843.36 1207.97 L1842.77 1207.97 L1842.19 1207.97 L1841.6 1207.97 L1841.01 1207.97 L1840.43 1207.97 L1839.84 1207.97 L1839.26 1207.97 L1838.67 1207.97 L1838.08 1207.97 L1837.5 1207.97 L1836.91 1207.97 L1836.32 1207.97 L1835.74 1207.97 L1835.15 1207.97 L1834.56 1207.97 L1833.98 1207.97 L1833.39 1207.97 L1832.81 1207.97 L1832.22 1207.97 L1831.63 1207.97 L1831.05 1207.97 L1830.46 1207.97 L1829.87 1207.97 L1829.29 1207.97 L1828.7 1207.97 L1828.11 1207.97 L1827.53 1207.97 L1826.94 1207.97 L1826.35 1207.97 L1825.77 1207.97 L1825.18 1207.97 L1824.6 1207.97 L1824.01 1207.97 L1823.42 1207.97 L1822.84 1207.97 L1822.25 1207.97 L1821.66 1207.97 L1821.08 1207.97 L1820.49 1207.97 L1819.9 1207.97 L1819.32 1207.97 L1818.73 1207.97 L1818.14 1207.97 L1817.56 1207.97 L1816.97 1207.97 L1816.39 1207.97 L1815.8 1207.97 L1815.21 1207.97 L1814.63 1207.97 L1814.04 1207.97 L1813.45 1207.97 L1812.87 1207.97 L1812.28 1207.97 L1811.69 1207.97 L1811.11 1207.97 L1810.52 1207.97 L1809.94 1207.97 L1809.35 1207.97 L1808.76 1207.97 L1808.18 1207.97 L1807.59 1207.97 L1807 1207.97 L1806.42 1207.97 L1805.83 1207.97 L1805.24 1207.97 L1804.66 1207.97 L1804.07 1207.97 L1803.48 1207.97 L1802.9 1207.97 L1802.31 1207.97 L1801.73 1207.97 L1801.14 1207.97 L1800.55 1207.97 L1799.97 1207.97 L1799.38 1207.97 L1798.79 1207.97 L1798.21 1207.97 L1797.62 1207.97 L1797.03 1207.97 L1796.45 1207.97 L1795.86 1207.97 L1795.27 1207.97 L1794.69 1207.97 L1794.1 1207.97 L1793.52 1207.97 L1792.93 1207.97 L1792.34 1207.97 L1791.76 1207.97 L1791.17 1207.97 L1790.58 1207.97 L1790 1207.97 L1789.41 1207.97 L1788.82 1207.97 L1788.24 1207.97 L1787.65 1207.97 L1787.06 1207.97 L1786.48 1207.97 L1785.89 1207.97 L1785.31 1207.97 L1784.72 1207.97 L1784.13 1207.97 L1783.55 1207.97 L1782.96 1207.97 L1782.37 1207.97 L1781.79 1207.97 L1781.2 1207.97 L1780.61 1207.97 L1780.03 1207.97 L1779.44 1207.97 L1778.86 1207.97 L1778.27 1207.97 L1777.68 1207.97 L1777.1 1207.97 L1776.51 1207.97 L1775.92 1207.97 L1775.34 1207.97 L1774.75 1207.97 L1774.16 1207.97 L1773.58 1207.97 L1772.99 1207.97 L1772.4 1207.97 L1771.82 1207.97 L1771.23 1207.97 L1770.65 1207.97 L1770.06 1207.97 L1769.47 1207.97 L1768.89 1207.97 L1768.3 1207.97 L1767.71 1207.97 L1767.13 1207.97 L1766.54 1207.97 L1765.95 1207.97 L1765.37 1207.97 L1764.78 1207.97 L1764.19 1207.97 L1763.61 1207.97 L1763.02 1207.97 L1762.44 1207.97 L1761.85 1207.97 L1761.26 1207.97 L1760.68 1207.97 L1760.09 1207.97 L1759.5 1207.97 L1758.92 1207.97 L1758.33 1207.97 L1757.74 1207.97 L1757.16 1207.97 L1756.57 1207.97 L1755.99 1207.97 L1755.4 1207.97 L1754.81 1207.97 L1754.23 1207.97 L1753.64 1207.97 L1753.05 1207.97 L1752.47 1207.97 L1751.88 1207.97 L1751.29 1207.97 L1750.71 1207.97 L1750.12 1207.97 L1749.53 1207.97 L1748.95 1207.97 L1748.36 1207.97 L1747.78 1207.97 L1747.19 1207.97 L1746.6 1207.97 L1746.02 1207.97 L1745.43 1207.97 L1744.84 1207.97 L1744.26 1207.97 L1743.67 1207.97 L1743.08 1207.97 L1742.5 1207.97 L1741.91 1207.97 L1741.32 1207.97 L1740.74 1207.97 L1740.15 1207.97 L1739.57 1207.97 L1738.98 1207.97 L1738.39 1207.97 L1737.81 1207.97 L1737.22 1207.97 L1736.63 1207.97 L1736.05 1207.97 L1735.46 1207.97 L1734.87 1207.97 L1734.29 1207.97 L1733.7 1207.97 L1733.11 1207.97 L1732.53 1207.97 L1731.94 1207.97 L1731.36 1207.97 L1730.77 1207.97 L1730.18 1207.97 L1729.6 1207.97 L1729.01 1207.97 L1728.42 1207.97 L1727.84 1207.97 L1727.25 1207.97 L1726.66 1207.97 L1726.08 1207.97 L1725.49 1207.97 L1724.91 1207.97 L1724.32 1207.97 L1723.73 1207.97 L1723.15 1207.97 L1722.56 1207.97 L1721.97 1207.97 L1721.39 1207.97 L1720.8 1207.97 L1720.21 1207.97 L1719.63 1207.97 L1719.04 1207.97 L1718.45 1207.97 L1717.87 1207.97 L1717.28 1207.97 L1716.7 1207.97 L1716.11 1207.97 L1715.52 1207.97 L1714.94 1207.97 L1714.35 1207.97 L1713.76 1207.97 L1713.18 1207.97 L1712.59 1207.97 L1712 1207.97 L1711.42 1207.97 L1710.83 1207.97 L1710.24 1207.97 L1709.66 1207.97 L1709.07 1207.97 L1708.49 1207.97 L1707.9 1207.97 L1707.31 1207.97 L1706.73 1207.97 L1706.14 1207.97 L1705.55 1207.97 L1704.97 1207.97 L1704.38 1207.97 L1703.79 1207.97 L1703.21 1207.97 L1702.62 1207.97 L1702.04 1207.97 L1701.45 1207.97 L1700.86 1207.97 L1700.28 1207.97 L1699.69 1207.97 L1699.1 1207.97 L1698.52 1207.97 L1697.93 1207.97 L1697.34 1207.97 L1696.76 1207.97 L1696.17 1207.97 L1695.58 1207.97 L1695 1207.97 L1694.41 1207.97 L1693.83 1207.97 L1693.24 1207.97 L1692.65 1207.97 L1692.07 1207.97 L1691.48 1207.97 L1690.89 1207.97 L1690.31 1207.97 L1689.72 1207.97 L1689.13 1207.97 L1688.55 1207.97 L1687.96 1207.97 L1687.37 1207.97 L1686.79 1207.97 L1686.2 1207.97 L1685.62 1207.97 L1685.03 1207.97 L1684.44 1207.97 L1683.86 1207.97 L1683.27 1207.97 L1682.68 1207.97 L1682.1 1207.97 L1681.51 1207.97 L1680.92 1207.97 L1680.34 1207.97 L1679.75 1207.97 L1679.17 1207.97 L1678.58 1207.97 L1677.99 1207.97 L1677.41 1207.97 L1676.82 1207.97 L1676.23 1207.97 L1675.65 1207.97 L1675.06 1207.97 L1674.47 1207.97 L1673.89 1207.97 L1673.3 1207.97 L1672.71 1207.97 L1672.13 1207.97 L1671.54 1207.97 L1670.96 1207.97 L1670.37 1207.97 L1669.78 1207.97 L1669.2 1207.97 L1668.61 1207.97 L1668.02 1207.97 L1667.44 1207.97 L1666.85 1207.97 L1666.26 1207.97 L1665.68 1207.97 L1665.09 1207.97 L1664.5 1207.97 L1663.92 1207.97 L1663.33 1207.97 L1662.75 1207.97 L1662.16 1207.97 L1661.57 1207.97 L1660.99 1207.97 L1660.4 1207.97 L1659.81 1207.97 L1659.23 1207.97 L1658.64 1207.97 L1658.05 1207.97 L1657.47 1207.97 L1656.88 1207.97 L1656.29 1207.97 L1655.71 1207.97 L1655.12 1207.97 L1654.54 1207.97 L1653.95 1207.97 L1653.36 1207.97 L1652.78 1207.97 L1652.19 1207.97 L1651.6 1207.97 L1651.02 1207.97 L1650.43 1207.97 L1649.84 1207.97 L1649.26 1207.97 L1648.67 1207.97 L1648.09 1207.97 L1647.5 1207.97 L1646.91 1207.97 L1646.33 1207.97 L1645.74 1207.97 L1645.15 1207.97 L1644.57 1207.97 L1643.98 1207.97 L1643.39 1207.97 L1642.81 1207.97 L1642.22 1207.97 L1641.63 1207.97 L1641.05 1207.97 L1640.46 1207.97 L1639.88 1207.97 L1639.29 1207.97 L1638.7 1207.97 L1638.12 1207.97 L1637.53 1207.97 L1636.94 1207.97 L1636.36 1207.97 L1635.77 1207.97 L1635.18 1207.97 L1634.6 1207.97 L1634.01 1207.97 L1633.42 1207.97 L1632.84 1207.97 L1632.25 1207.97 L1631.67 1207.97 L1631.08 1207.97 L1630.49 1207.97 L1629.91 1207.97 L1629.32 1207.97 L1628.73 1207.97 L1628.15 1207.97 L1627.56 1207.97 L1626.97 1207.97 L1626.39 1207.97 L1625.8 1207.97 L1625.22 1207.97 L1624.63 1207.97 L1624.04 1207.97 L1623.46 1207.97 L1622.87 1207.97 L1622.28 1207.97 L1621.7 1207.97 L1621.11 1207.97 L1620.52 1207.97 L1619.94 1207.97 L1619.35 1207.97 L1618.76 1207.97 L1618.18 1207.97 L1617.59 1207.97 L1617.01 1207.97 L1616.42 1207.97 L1615.83 1207.97 L1615.25 1207.97 L1614.66 1207.97 L1614.07 1207.97 L1613.49 1207.97 L1612.9 1207.97 L1612.31 1207.97 L1611.73 1207.97 L1611.14 1207.97 L1610.55 1207.97 L1609.97 1207.97 L1609.38 1207.97 L1608.8 1207.97 L1608.21 1207.97 L1607.62 1207.97 L1607.04 1207.97 L1606.45 1207.97 L1605.86 1207.97 L1605.28 1207.97 L1604.69 1207.97 L1604.1 1207.97 L1603.52 1207.97 L1602.93 1207.97 L1602.34 1207.97 L1601.76 1207.97 L1601.17 1207.97 L1600.59 1207.97 L1600 1207.97 L1599.41 1207.97 L1598.83 1207.97 L1598.24 1207.97 L1597.65 1207.97 L1597.07 1207.97 L1596.48 1207.97 L1595.89 1207.97 L1595.31 1207.97 L1594.72 1207.97 L1594.14 1207.97 L1593.55 1207.97 L1592.96 1207.97 L1592.38 1207.97 L1591.79 1207.97 L1591.2 1207.97 L1590.62 1207.97 L1590.03 1207.97 L1589.44 1207.97 L1588.86 1207.97 L1588.27 1207.97 L1587.68 1207.97 L1587.1 1207.97 L1586.51 1207.97 L1585.93 1207.97 L1585.34 1207.97 L1584.75 1207.97 L1584.17 1207.97 L1583.58 1207.97 L1582.99 1207.97 L1582.41 1207.97 L1581.82 1207.97 L1581.23 1207.97 L1580.65 1207.97 L1580.06 1207.97 L1579.47 1207.97 L1578.89 1207.97 L1578.3 1207.97 L1577.72 1207.97 L1577.13 1207.97 L1576.54 1207.97 L1575.96 1207.97 L1575.37 1207.97 L1574.78 1207.97 L1574.2 1207.97 L1573.61 1207.97 L1573.02 1207.97 L1572.44 1207.97 L1571.85 1207.97 L1571.27 1207.97 L1570.68 1207.97 L1570.09 1207.97 L1569.51 1207.97 L1568.92 1207.97 L1568.33 1207.97 L1567.75 1207.97 L1567.16 1207.97 L1566.57 1207.97 L1565.99 1207.97 L1565.4 1207.97 L1564.81 1207.97 L1564.23 1207.97 L1563.64 1207.97 L1563.06 1207.97 L1562.47 1207.97 L1561.88 1207.97 L1561.3 1207.97 L1560.71 1207.97 L1560.12 1207.97 L1559.54 1207.97 L1558.95 1207.97 L1558.36 1207.97 L1557.78 1207.97 L1557.19 1207.97 L1556.6 1207.97 L1556.02 1207.97 L1555.43 1207.97 L1554.85 1207.97 L1554.26 1207.97 L1553.67 1207.97 L1553.09 1207.97 L1552.5 1207.97 L1551.91 1207.97 L1551.33 1207.97 L1550.74 1207.97 L1550.15 1207.97 L1549.57 1207.97 L1548.98 1207.97 L1548.4 1207.97 L1547.81 1207.97 L1547.22 1207.97 L1546.64 1207.97 L1546.05 1207.97 L1545.46 1207.97 L1544.88 1207.97 L1544.29 1207.97 L1543.7 1207.97 L1543.12 1207.97 L1542.53 1207.97 L1541.94 1207.97 L1541.36 1207.97 L1540.77 1207.97 L1540.19 1207.97 L1539.6 1207.97 L1539.01 1207.97 L1538.43 1207.97 L1537.84 1207.97 L1537.25 1207.97 L1536.67 1207.97 L1536.08 1207.97 L1535.49 1207.97 L1534.91 1207.97 L1534.32 1207.97 L1533.73 1207.97 L1533.15 1207.97 L1532.56 1207.97 L1531.98 1207.97 L1531.39 1207.97 L1530.8 1207.97 L1530.22 1207.97 L1529.63 1207.97 L1529.04 1207.97 L1528.46 1207.97 L1527.87 1207.97 L1527.28 1207.97 L1526.7 1207.97 L1526.11 1207.97 L1525.52 1207.97 L1524.94 1207.97 L1524.35 1207.97 L1523.77 1207.97 L1523.18 1207.97 L1522.59 1207.97 L1522.01 1207.97 L1521.42 1207.97 L1520.83 1207.97 L1520.25 1207.97 L1519.66 1207.97 L1519.07 1207.97 L1518.49 1207.97 L1517.9 1207.97 L1517.32 1207.97 L1516.73 1207.97 L1516.14 1207.97 L1515.56 1207.97 L1514.97 1207.97 L1514.38 1207.97 L1513.8 1207.97 L1513.21 1207.97 L1512.62 1207.97 L1512.04 1207.97 L1511.45 1207.97 L1510.86 1207.97 L1510.28 1207.97 L1509.69 1207.97 L1509.11 1207.97 L1508.52 1207.97 L1507.93 1207.97 L1507.35 1207.97 L1506.76 1207.97 L1506.17 1207.97 L1505.59 1207.97 L1505 1207.97 L1504.41 1207.97 L1503.83 1207.97 L1503.24 1207.97 L1502.65 1207.97 L1502.07 1207.97 L1501.48 1207.97 L1500.9 1207.97 L1500.31 1207.97 L1499.72 1207.97 L1499.14 1207.97 L1498.55 1207.97 L1497.96 1207.97 L1497.38 1207.97 L1496.79 1207.97 L1496.2 1207.97 L1495.62 1207.97 L1495.03 1207.97 L1494.45 1207.97 L1493.86 1207.97 L1493.27 1207.97 L1492.69 1207.97 L1492.1 1207.97 L1491.51 1207.97 L1490.93 1207.97 L1490.34 1207.97 L1489.75 1207.97 L1489.17 1207.97 L1488.58 1207.97 L1487.99 1207.97 L1487.41 1207.97 L1486.82 1207.97 L1486.24 1207.97 L1485.65 1207.97 L1485.06 1207.97 L1484.48 1207.97 L1483.89 1207.97 L1483.3 1207.97 L1482.72 1207.97 L1482.13 1207.97 L1481.54 1207.97 L1480.96 1207.97 L1480.37 1207.97 L1479.78 1207.97 L1479.2 1207.97 L1478.61 1207.97 L1478.03 1207.97 L1477.44 1207.97 L1476.85 1207.97 L1476.27 1207.97 L1475.68 1207.97 L1475.09 1207.97 L1474.51 1207.97 L1473.92 1207.97 L1473.33 1207.97 L1472.75 1207.97 L1472.16 1207.97 L1471.57 1207.97 L1470.99 1207.97 L1470.4 1207.97 L1469.82 1207.97 L1469.23 1207.97 L1468.64 1207.97 L1468.06 1207.97 L1467.47 1207.97 L1466.88 1207.97 L1466.3 1207.97 L1465.71 1207.97 L1465.12 1207.97 L1464.54 1207.97 L1463.95 1207.97 L1463.37 1207.97 L1462.78 1207.97 L1462.19 1207.97 L1461.61 1207.97 L1461.02 1207.97 L1460.43 1207.97 L1459.85 1207.97 L1459.26 1207.97 L1458.67 1207.97 L1458.09 1207.97 L1457.5 1207.97 L1456.91 1207.97 L1456.33 1207.97 L1455.74 1207.97 L1455.16 1207.97 L1454.57 1207.97 L1453.98 1207.97 L1453.4 1207.97 L1452.81 1207.97 L1452.22 1207.97 L1451.64 1207.97 L1451.05 1207.97 L1450.46 1207.97 L1449.88 1207.97 L1449.29 1207.97 L1448.7 1207.97 L1448.12 1207.97 L1447.53 1207.97 L1446.95 1207.97 L1446.36 1207.97 L1445.77 1207.97 L1445.19 1207.97 L1444.6 1207.97 L1444.01 1207.97 L1443.43 1207.97 L1442.84 1207.97 L1442.25 1207.97 L1441.67 1207.97 L1441.08 1207.97 L1440.5 1207.97 L1439.91 1207.97 L1439.32 1207.97 L1438.74 1207.97 L1438.15 1207.97 L1437.56 1207.97 L1436.98 1207.97 L1436.39 1207.97 L1435.8 1207.97 L1435.22 1207.97 L1434.63 1207.97 L1434.04 1207.97 L1433.46 1207.97 L1432.87 1207.97 L1432.29 1207.97 L1431.7 1207.97 L1431.11 1207.97 L1430.53 1207.97 L1429.94 1207.97 L1429.35 1207.97 L1428.77 1207.97 L1428.18 1207.97 L1427.59 1207.97 L1427.01 1207.97 L1426.42 1207.97 L1425.83 1207.97 L1425.25 1207.97 L1424.66 1207.97 L1424.08 1207.97 L1423.49 1207.97 L1422.9 1207.97 L1422.32 1207.97 L1421.73 1207.97 L1421.14 1207.97 L1420.56 1207.97 L1419.97 1207.97 L1419.38 1207.97 L1418.8 1207.97 L1418.21 1207.97 L1417.63 1207.97 L1417.04 1207.97 L1416.45 1207.97 L1415.87 1207.97 L1415.28 1207.97 L1414.69 1207.97 L1414.11 1207.97 L1413.52 1207.97 L1412.93 1207.97 L1412.35 1207.97 L1411.76 1207.97 L1411.17 1207.97 L1410.59 1207.97 L1410 1207.97 L1409.42 1207.97 L1408.83 1207.97 L1408.24 1207.97 L1407.66 1207.97 L1407.07 1207.97 L1406.48 1207.97 L1405.9 1207.97 L1405.31 1207.97 L1404.72 1207.97 L1404.14 1207.97 L1403.55 1207.97 L1402.96 1207.97 L1402.38 1207.97 L1401.79 1207.97 L1401.21 1207.97 L1400.62 1207.97 L1400.03 1207.97 L1399.45 1207.97 L1398.86 1207.97 L1398.27 1207.97 L1397.69 1207.97 L1397.1 1207.97 L1396.51 1207.97 L1395.93 1207.97 L1395.34 1207.97 L1394.75 1207.97 L1394.17 1207.97 L1393.58 1207.97 L1393 1207.97 L1392.41 1207.97 L1391.82 1207.97 L1391.24 1207.97 L1390.65 1207.97 L1390.06 1207.97 L1389.48 1207.97 L1388.89 1207.97 L1388.3 1207.97 L1387.72 1207.97 L1387.13 1207.97 L1386.55 1207.97 L1385.96 1207.97 L1385.37 1207.97 L1384.79 1207.97 L1384.2 1207.97 L1383.61 1207.97 L1383.03 1207.97 L1382.44 1207.97 L1381.85 1207.97 L1381.27 1207.97 L1380.68 1207.97 L1380.09 1207.97 L1379.51 1207.97 L1378.92 1207.97 L1378.34 1207.97 L1377.75 1207.97 L1377.16 1207.97 L1376.58 1207.97 L1375.99 1207.97 L1375.4 1207.97 L1374.82 1207.97 L1374.23 1207.97 L1373.64 1207.97 L1373.06 1207.97 L1372.47 1207.97 L1371.88 1207.97 L1371.3 1207.97 L1370.71 1207.97 L1370.13 1207.97 L1369.54 1207.97 L1368.95 1207.97 L1368.37 1207.97 L1367.78 1207.97 L1367.19 1207.97 L1366.61 1207.97 L1366.02 1207.97 L1365.43 1207.97 L1364.85 1207.97 L1364.26 1207.97 L1363.68 1207.97 L1363.09 1207.97 L1362.5 1207.97 L1361.92 1207.97 L1361.33 1207.97 L1360.74 1207.97 L1360.16 1207.97 L1359.57 1207.97 L1358.98 1207.97 L1358.4 1207.97 L1357.81 1207.97 L1357.22 1207.97 L1356.64 1207.97 L1356.05 1207.97 L1355.47 1207.97 L1354.88 1207.97 L1354.29 1207.97 L1353.71 1207.97 L1353.12 1207.97 L1352.53 1207.97 L1351.95 1207.97 L1351.36 1207.97 L1350.77 1207.97 L1350.19 1207.97 L1349.6 1207.97 L1349.01 1207.97 L1348.43 1207.97 L1347.84 1207.97 L1347.26 1207.97 L1346.67 1207.97 L1346.08 1207.97 L1345.5 1207.97 L1344.91 1207.97 L1344.32 1207.97 L1343.74 1207.97 L1343.15 1207.97 L1342.56 1207.97 L1341.98 1207.97 L1341.39 1207.97 L1340.8 1207.97 L1340.22 1207.97 L1339.63 1207.97 L1339.05 1207.97 L1338.46 1207.97 L1337.87 1207.97 L1337.29 1207.97 L1336.7 1207.97 L1336.11 1207.97 L1335.53 1207.97 L1334.94 1207.97 L1334.35 1207.97 L1333.77 1207.97 L1333.18 1207.97 L1332.6 1207.97 L1332.01 1207.97 L1331.42 1207.97 L1330.84 1207.97 L1330.25 1207.97 L1329.66 1207.97 L1329.08 1207.97 L1328.49 1207.97 L1327.9 1207.97 L1327.32 1207.97 L1326.73 1207.97 L1326.14 1207.97 L1325.56 1207.97 L1324.97 1207.97 L1324.39 1207.97 L1323.8 1207.97 L1323.21 1207.97 L1322.63 1207.97 L1322.04 1207.97 L1321.45 1207.97 L1320.87 1207.97 L1320.28 1207.97 L1319.69 1207.97 L1319.11 1207.97 L1318.52 1207.97 L1317.93 1207.97 L1317.35 1207.97 L1316.76 1207.97 L1316.18 1207.97 L1315.59 1207.97 L1315 1207.97 L1314.42 1207.97 L1313.83 1207.97 L1313.24 1207.97 L1312.66 1207.97 L1312.07 1207.97 L1311.48 1207.97 L1310.9 1207.97 L1310.31 1207.97 L1309.73 1207.97 L1309.14 1207.97 L1308.55 1207.97 L1307.97 1207.97 L1307.38 1207.97 L1306.79 1207.97 L1306.21 1207.97 L1305.62 1207.97 L1305.03 1207.97 L1304.45 1207.97 L1303.86 1207.97 L1303.27 1207.97 L1302.69 1207.97 L1302.1 1207.97 L1301.52 1207.97 L1300.93 1207.97 L1300.34 1207.97 L1299.76 1207.97 L1299.17 1207.97 L1298.58 1207.97 L1298 1207.97 L1297.41 1207.97 L1296.82 1207.97 L1296.24 1207.97 L1295.65 1207.97 L1295.06 1207.97 L1294.48 1207.97 L1293.89 1207.97 L1293.31 1207.97 L1292.72 1207.97 L1292.13 1207.97 L1291.55 1207.97 L1290.96 1207.97 L1290.37 1207.97 L1289.79 1207.97 L1289.2 1207.97 L1288.61 1207.97 L1288.03 1207.97 L1287.44 1207.97 L1286.86 1207.97 L1286.27 1207.97 L1285.68 1207.97 L1285.1 1207.97 L1284.51 1207.97 L1283.92 1207.97 L1283.34 1207.97 L1282.75 1207.97 L1282.16 1207.97 L1281.58 1207.97 L1280.99 1207.97 L1280.4 1207.97 L1279.82 1207.97 L1279.23 1207.97 L1278.65 1207.97 L1278.06 1207.97 L1277.47 1207.97 L1276.89 1207.97 L1276.3 1207.97 L1275.71 1207.97 L1275.13 1207.97 L1274.54 1207.97 L1273.95 1207.97 L1273.37 1207.97 L1272.78 1207.97 L1272.19 1207.97 L1271.61 1207.97 L1271.02 1207.97 L1270.44 1207.97 L1269.85 1207.97 L1269.26 1207.97 L1268.68 1207.97 L1268.09 1207.97 L1267.5 1207.97 L1266.92 1207.97 L1266.33 1207.97 L1265.74 1207.97 L1265.16 1207.97 L1264.57 1207.97 L1263.98 1207.97 L1263.4 1207.97 L1262.81 1207.97 L1262.23 1207.97 L1261.64 1207.97 L1261.05 1207.97 L1260.47 1207.97 L1259.88 1207.97 L1259.29 1207.97 L1258.71 1207.97 L1258.12 1207.97 L1257.53 1207.97 L1256.95 1207.97 L1256.36 1207.97 L1255.78 1207.97 L1255.19 1207.97 L1254.6 1207.97 L1254.02 1207.97 L1253.43 1207.97 L1252.84 1207.97 L1252.26 1207.97 L1251.67 1207.97 L1251.08 1207.97 L1250.5 1207.97 L1249.91 1207.97 L1249.32 1207.97 L1248.74 1207.97 L1248.15 1207.97 L1247.57 1207.97 L1246.98 1207.97 L1246.39 1207.97 L1245.81 1207.97 L1245.22 1207.97 L1244.63 1207.97 L1244.05 1207.97 L1243.46 1207.97 L1242.87 1207.97 L1242.29 1207.97 L1241.7 1207.97 L1241.11 1207.97 L1240.53 1207.97 L1239.94 1207.97 L1239.36 1207.97 L1238.77 1207.97 L1238.18 1207.97 L1237.6 1207.97 L1237.01 1207.97 L1236.42 1207.97 L1235.84 1207.97 L1235.25 1207.97 L1234.66 1207.97 L1234.08 1207.97 L1233.49 1207.97 L1232.91 1207.97 L1232.32 1207.97 L1231.73 1207.97 L1231.15 1207.97 L1230.56 1207.97 L1229.97 1207.97 L1229.39 1207.97 L1228.8 1207.97 L1228.21 1207.97 L1227.63 1207.97 L1227.04 1207.97 L1226.45 1207.97 L1225.87 1207.97 L1225.28 1207.97 L1224.7 1207.97 L1224.11 1207.97 L1223.52 1207.97 L1222.94 1207.97 L1222.35 1207.97 L1221.76 1207.97 L1221.18 1207.97 L1220.59 1207.97 L1220 1207.97 L1219.42 1207.97 L1218.83 1207.97 L1218.24 1207.97 L1217.66 1207.97 L1217.07 1207.97 L1216.49 1207.97 L1215.9 1207.97 L1215.31 1207.97 L1214.73 1207.97 L1214.14 1207.97 L1213.55 1207.97 L1212.97 1207.97 L1212.38 1207.97 L1211.79 1207.97 L1211.21 1207.97 L1210.62 1207.97 L1210.03 1207.97 L1209.45 1207.97 L1208.86 1207.97 L1208.28 1207.97 L1207.69 1207.97 L1207.1 1207.97 L1206.52 1207.97 L1205.93 1207.97 L1205.34 1207.97 L1204.76 1207.97 L1204.17 1207.97 L1203.58 1207.97 L1203 1207.97 L1202.41 1207.97 L1201.83 1207.97 L1201.24 1207.97 L1200.65 1207.97 L1200.07 1207.97 L1199.48 1207.97 L1198.89 1207.97 L1198.31 1207.97 L1197.72 1207.97 L1197.13 1207.97 L1196.55 1207.97 L1195.96 1207.97 L1195.37 1207.97 L1194.79 1207.97 L1194.2 1207.97 L1193.62 1207.97 L1193.03 1207.97 L1192.44 1207.97 L1191.86 1207.97 L1191.27 1207.97 L1190.68 1207.97 L1190.1 1207.97 L1189.51 1207.97 L1188.92 1207.97 L1188.34 1207.97 L1187.75 1207.97 L1187.16 1207.97 L1186.58 1207.97 L1185.99 1207.97 L1185.41 1207.97 L1184.82 1207.97 L1184.23 1207.97 L1183.65 1207.97 L1183.06 1207.97 L1182.47 1207.97 L1181.89 1207.97 L1181.3 1207.97 L1180.71 1207.97 L1180.13 1207.97 L1179.54 1207.97 L1178.96 1207.97 L1178.37 1207.97 L1177.78 1207.97 L1177.2 1207.97 L1176.61 1207.97 L1176.02 1207.97 L1175.44 1207.97 L1174.85 1207.97 L1174.26 1207.97 L1173.68 1207.97 L1173.09 1207.97 L1172.5 1207.97 L1171.92 1207.97 L1171.33 1207.97 L1170.75 1207.97 L1170.16 1207.97 L1169.57 1207.97 L1168.99 1207.97 L1168.4 1207.97 L1167.81 1207.97 L1167.23 1207.97 L1166.64 1207.97 L1166.05 1207.97 L1165.47 1207.97 L1164.88 1207.97 L1164.29 1207.97 L1163.71 1207.97 L1163.12 1207.97 L1162.54 1207.97 L1161.95 1207.97 L1161.36 1207.97 L1160.78 1207.97 L1160.19 1207.97 L1159.6 1207.97 L1159.02 1207.97 L1158.43 1207.97 L1157.84 1207.97 L1157.26 1207.97 L1156.67 1207.97 L1156.09 1207.97 L1155.5 1207.97 L1154.91 1207.97 L1154.33 1207.97 L1153.74 1207.97 L1153.15 1207.97 L1152.57 1207.97 L1151.98 1207.97 L1151.39 1207.97 L1150.81 1207.97 L1150.22 1207.97 L1149.63 1207.97 L1149.05 1207.97 L1148.46 1207.97 L1147.88 1207.97 L1147.29 1207.97 L1146.7 1207.97 L1146.12 1207.97 L1145.53 1207.97 L1144.94 1207.97 L1144.36 1207.97 L1143.77 1207.97 L1143.18 1207.97 L1142.6 1207.97 L1142.01 1207.97 L1141.42 1207.97 L1140.84 1207.97 L1140.25 1207.97 L1139.67 1207.97 L1139.08 1207.97 L1138.49 1207.97 L1137.91 1207.97 L1137.32 1207.97 L1136.73 1207.97 L1136.15 1207.97 L1135.56 1207.97 L1134.97 1207.97 L1134.39 1207.97 L1133.8 1207.97 L1133.21 1207.97 L1132.63 1207.97 L1132.04 1207.97 L1131.46 1207.97 L1130.87 1207.97 L1130.28 1207.97 L1129.7 1207.97 L1129.11 1207.97 L1128.52 1207.97 L1127.94 1207.97 L1127.35 1207.97 L1126.76 1207.97 L1126.18 1207.97 L1125.59 1207.97 L1125.01 1207.97 L1124.42 1207.97 L1123.83 1207.97 L1123.25 1207.97 L1122.66 1207.97 L1122.07 1207.97 L1121.49 1207.97 L1120.9 1207.97 L1120.31 1207.97 L1119.73 1207.97 L1119.14 1207.97 L1118.55 1207.97 L1117.97 1207.97 L1117.38 1207.97 L1116.8 1207.97 L1116.21 1207.97 L1115.62 1207.97 L1115.04 1207.97 L1114.45 1207.97 L1113.86 1207.97 L1113.28 1207.97 L1112.69 1207.97 L1112.1 1207.97 L1111.52 1207.97 L1110.93 1207.97 L1110.34 1207.97 L1109.76 1207.97 L1109.17 1207.97 L1108.59 1207.97 L1108 1207.97 L1107.41 1207.97 L1106.83 1207.97 L1106.24 1207.97 L1105.65 1207.97 L1105.07 1207.97 L1104.48 1207.97 L1103.89 1207.97 L1103.31 1207.97 L1102.72 1207.97 L1102.14 1207.97 L1101.55 1207.97 L1100.96 1207.97 L1100.38 1207.97 L1099.79 1207.97 L1099.2 1207.97 L1098.62 1207.97 L1098.03 1207.97 L1097.44 1207.97 L1096.86 1207.97 L1096.27 1207.97 L1095.68 1207.97 L1095.1 1207.97 L1094.51 1207.97 L1093.93 1207.97 L1093.34 1207.97 L1092.75 1207.97 L1092.17 1207.97 L1091.58 1207.97 L1090.99 1207.97 L1090.41 1207.97 L1089.82 1207.97 L1089.23 1207.97 L1088.65 1207.97 L1088.06 1207.97 L1087.47 1207.97 L1086.89 1207.97 L1086.3 1207.97 L1085.72 1207.97 L1085.13 1207.97 L1084.54 1207.97 L1083.96 1207.97 L1083.37 1207.97 L1082.78 1207.97 L1082.2 1207.97 L1081.61 1207.97 L1081.02 1207.97 L1080.44 1207.97 L1079.85 1207.97 L1079.26 1207.97 L1078.68 1207.97 L1078.09 1207.97 L1077.51 1207.97 L1076.92 1207.97 L1076.33 1207.97 L1075.75 1207.97 L1075.16 1207.97 L1074.57 1207.97 L1073.99 1207.97 L1073.4 1207.97 L1072.81 1207.97 L1072.23 1207.97 L1071.64 1207.97 L1071.06 1207.97 L1070.47 1207.97 L1069.88 1207.97 L1069.3 1207.97 L1068.71 1207.97 L1068.12 1207.97 L1067.54 1207.97 L1066.95 1207.97 L1066.36 1207.97 L1065.78 1207.97 L1065.19 1207.97 L1064.6 1207.97 L1064.02 1207.97 L1063.43 1207.97 L1062.85 1207.97 L1062.26 1207.97 L1061.67 1207.97 L1061.09 1207.97 L1060.5 1207.97 L1059.91 1207.97 L1059.33 1207.97 L1058.74 1207.97 L1058.15 1207.97 L1057.57 1207.97 L1056.98 1207.97 L1056.39 1207.97 L1055.81 1207.97 L1055.22 1207.97 L1054.64 1207.97 L1054.05 1207.97 L1053.46 1207.97 L1052.88 1207.97 L1052.29 1207.97 L1051.7 1207.97 L1051.12 1207.97 L1050.53 1207.97 L1049.94 1207.97 L1049.36 1207.97 L1048.77 1207.97 L1048.19 1207.97 L1047.6 1207.97 L1047.01 1207.97 L1046.43 1207.97 L1045.84 1207.97 L1045.25 1207.97 L1044.67 1207.97 L1044.08 1207.97 L1043.49 1207.97 L1042.91 1207.97 L1042.32 1207.97 L1041.73 1207.97 L1041.15 1207.97 L1040.56 1207.97 L1039.98 1207.97 L1039.39 1207.97 L1038.8 1207.97 L1038.22 1207.97 L1037.63 1207.97 L1037.04 1207.97 L1036.46 1207.97 L1035.87 1207.97 L1035.28 1207.97 L1034.7 1207.97 L1034.11 1207.97 L1033.52 1207.97 L1032.94 1207.97 L1032.35 1207.97 L1031.77 1207.97 L1031.18 1207.97 L1030.59 1207.97 L1030.01 1207.97 L1029.42 1207.97 L1028.83 1207.97 L1028.25 1207.97 L1027.66 1207.97 L1027.07 1207.97 L1026.49 1207.97 L1025.9 1207.97 L1025.32 1207.97 L1024.73 1207.97 L1024.14 1207.97 L1023.56 1207.97 L1022.97 1207.97 L1022.38 1207.97 L1021.8 1207.97 L1021.21 1207.97 L1020.62 1207.97 L1020.04 1207.97 L1019.45 1207.97 L1018.86 1207.97 L1018.28 1207.97 L1017.69 1207.97 L1017.11 1207.97 L1016.52 1207.97 L1015.93 1207.97 L1015.35 1207.97 L1014.76 1207.97 L1014.17 1207.97 L1013.59 1207.97 L1013 1207.97 L1012.41 1207.97 L1011.83 1207.97 L1011.24 1207.97 L1010.65 1207.97 L1010.07 1207.97 L1009.48 1207.97 L1008.9 1207.97 L1008.31 1207.97 L1007.72 1207.97 L1007.14 1207.97 L1006.55 1207.97 L1005.96 1207.97 L1005.38 1207.97 L1004.79 1207.97 L1004.2 1207.97 L1003.62 1207.97 L1003.03 1207.97 L1002.44 1207.97 L1001.86 1207.97 L1001.27 1207.97 L1000.69 1207.97 L1000.1 1207.97 L999.513 1207.97 L998.926 1207.97 L998.34 1207.97 L997.754 1207.97 L997.167 1207.97 L996.581 1207.97 L995.994 1207.97 L995.408 1207.97 L994.822 1207.97 L994.235 1207.97 L993.649 1207.97 L993.062 1207.97 L992.476 1207.97 L991.889 1207.97 L991.303 1207.97 L990.717 1207.97 L990.13 1207.97 L989.544 1207.97 L988.957 1207.97 L988.371 1207.97 L987.785 1207.97 L987.198 1207.97 L986.612 1207.97 L986.025 1207.97  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.31 986.612,1208.31 987.198,1208.31 987.785,1208.31 988.371,1208.31 988.957,1208.31 989.544,1208.31 990.13,1208.31 990.717,1208.31 991.303,1208.31 991.889,1208.31 992.476,1208.31 993.062,1208.31 993.649,1208.31 994.235,1208.31 994.822,1208.31 995.408,1208.31 995.994,1208.31 996.581,1208.31 997.167,1208.31 997.754,1208.31 998.34,1208.31 998.926,1208.31 999.513,1208.31 1000.1,1208.31 1000.69,1208.31 1001.27,1208.31 1001.86,1208.31 1002.44,1208.31 1003.03,1208.31 1003.62,1208.31 1004.2,1208.31 1004.79,1208.31 1005.38,1208.31 1005.96,1208.31 1006.55,1208.31 1007.14,1208.31 1007.72,1208.31 1008.31,1208.31 1008.9,1208.31 1009.48,1208.31 1010.07,1208.31 1010.65,1208.31 1011.24,1208.31 1011.83,1208.31 1012.41,1208.31 1013,1208.31 1013.59,1208.31 1014.17,1208.31 1014.76,1208.31 1015.35,1208.31 1015.93,1208.31 1016.52,1208.31 1017.11,1208.31 1017.69,1208.31 1018.28,1208.31 1018.86,1208.31 1019.45,1208.31 1020.04,1208.31 1020.62,1208.31 1021.21,1208.31 1021.8,1208.31 1022.38,1208.31 1022.97,1208.31 1023.56,1208.31 1024.14,1208.31 1024.73,1208.31 1025.32,1208.31 1025.9,1208.31 1026.49,1208.31 1027.07,1208.31 1027.66,1208.31 1028.25,1208.31 1028.83,1208.31 1029.42,1208.31 1030.01,1208.31 1030.59,1208.31 1031.18,1208.31 1031.77,1208.31 1032.35,1208.31 1032.94,1208.31 1033.52,1208.31 1034.11,1208.31 1034.7,1208.31 1035.28,1208.31 1035.87,1208.31 1036.46,1208.31 1037.04,1208.31 1037.63,1208.31 1038.22,1208.31 1038.8,1208.31 1039.39,1208.31 1039.98,1208.31 1040.56,1208.31 1041.15,1208.31 1041.73,1208.31 1042.32,1208.31 1042.91,1208.31 1043.49,1208.31 1044.08,1208.31 1044.67,1208.31 1045.25,1208.31 1045.84,1208.31 1046.43,1208.31 1047.01,1208.31 1047.6,1208.31 1048.19,1208.31 1048.77,1208.31 1049.36,1208.31 1049.94,1208.31 1050.53,1208.31 1051.12,1208.31 1051.7,1208.31 1052.29,1208.31 1052.88,1208.31 1053.46,1208.31 1054.05,1208.31 1054.64,1208.31 1055.22,1208.31 1055.81,1208.31 1056.39,1208.31 1056.98,1208.31 1057.57,1208.31 1058.15,1208.31 1058.74,1208.31 1059.33,1208.31 1059.91,1208.31 1060.5,1208.31 1061.09,1208.31 1061.67,1208.31 1062.26,1208.31 1062.85,1208.31 1063.43,1208.31 1064.02,1208.31 1064.6,1208.31 1065.19,1208.31 1065.78,1208.31 1066.36,1208.31 1066.95,1208.31 1067.54,1208.31 1068.12,1208.31 1068.71,1208.31 1069.3,1208.31 1069.88,1208.31 1070.47,1208.31 1071.06,1208.31 1071.64,1208.31 1072.23,1208.31 1072.81,1208.31 1073.4,1208.31 1073.99,1208.31 1074.57,1208.31 1075.16,1208.31 1075.75,1208.31 1076.33,1208.31 1076.92,1208.31 1077.51,1208.31 1078.09,1208.31 1078.68,1208.31 1079.26,1208.31 1079.85,1208.31 1080.44,1208.31 1081.02,1208.31 1081.61,1208.31 1082.2,1208.31 1082.78,1208.31 1083.37,1208.31 1083.96,1208.31 1084.54,1208.31 1085.13,1208.31 1085.72,1208.31 1086.3,1208.31 1086.89,1208.31 1087.47,1208.31 1088.06,1208.31 1088.65,1208.31 1089.23,1208.31 1089.82,1208.31 1090.41,1208.31 1090.99,1208.31 1091.58,1208.31 1092.17,1208.31 1092.75,1208.31 1093.34,1208.31 1093.93,1208.31 1094.51,1208.31 1095.1,1208.31 1095.68,1208.31 1096.27,1208.31 1096.86,1208.31 1097.44,1208.31 1098.03,1208.31 1098.62,1208.31 1099.2,1208.31 1099.79,1208.31 1100.38,1208.31 1100.96,1208.31 1101.55,1208.31 1102.14,1208.31 1102.72,1208.31 1103.31,1208.31 1103.89,1208.31 1104.48,1208.31 1105.07,1208.31 1105.65,1208.31 1106.24,1208.31 1106.83,1208.31 1107.41,1208.31 1108,1208.31 1108.59,1208.31 1109.17,1208.31 1109.76,1208.31 1110.34,1208.31 1110.93,1208.31 1111.52,1208.31 1112.1,1208.31 1112.69,1208.31 1113.28,1208.31 1113.86,1208.31 1114.45,1208.31 1115.04,1208.31 1115.62,1208.31 1116.21,1208.31 1116.8,1208.31 1117.38,1208.31 1117.97,1208.31 1118.55,1208.31 1119.14,1208.31 1119.73,1208.31 1120.31,1208.31 1120.9,1208.31 1121.49,1208.31 1122.07,1208.31 1122.66,1208.31 1123.25,1208.31 1123.83,1208.31 1124.42,1208.31 1125.01,1208.31 1125.59,1208.31 1126.18,1208.31 1126.76,1208.31 1127.35,1208.31 1127.94,1208.31 1128.52,1208.31 1129.11,1208.31 1129.7,1208.31 1130.28,1208.31 1130.87,1208.31 1131.46,1208.31 1132.04,1208.31 1132.63,1208.31 1133.21,1208.31 1133.8,1208.31 1134.39,1208.31 1134.97,1208.31 1135.56,1208.31 1136.15,1208.31 1136.73,1208.31 1137.32,1208.31 1137.91,1208.31 1138.49,1208.31 1139.08,1208.31 1139.67,1208.31 1140.25,1208.31 1140.84,1208.31 1141.42,1208.31 1142.01,1208.31 1142.6,1208.31 1143.18,1208.31 1143.77,1208.31 1144.36,1208.31 1144.94,1208.31 1145.53,1208.31 1146.12,1208.31 1146.7,1208.31 1147.29,1208.31 1147.88,1208.31 1148.46,1208.31 1149.05,1208.31 1149.63,1208.31 1150.22,1208.31 1150.81,1208.31 1151.39,1208.31 1151.98,1208.31 1152.57,1208.31 1153.15,1208.31 1153.74,1208.31 1154.33,1208.31 1154.91,1208.31 1155.5,1208.31 1156.09,1208.31 1156.67,1208.31 1157.26,1208.31 1157.84,1208.31 1158.43,1208.31 1159.02,1208.31 1159.6,1208.31 1160.19,1208.31 1160.78,1208.31 1161.36,1208.31 1161.95,1208.31 1162.54,1208.31 1163.12,1208.31 1163.71,1208.31 1164.29,1208.31 1164.88,1208.31 1165.47,1208.31 1166.05,1208.31 1166.64,1208.31 1167.23,1208.31 1167.81,1208.31 1168.4,1208.31 1168.99,1208.31 1169.57,1208.31 1170.16,1208.31 1170.75,1208.31 1171.33,1208.31 1171.92,1208.31 1172.5,1208.31 1173.09,1208.31 1173.68,1208.31 1174.26,1208.31 1174.85,1208.31 1175.44,1208.31 1176.02,1208.31 1176.61,1208.31 1177.2,1208.31 1177.78,1208.31 1178.37,1208.31 1178.96,1208.31 1179.54,1208.31 1180.13,1208.31 1180.71,1208.31 1181.3,1208.31 1181.89,1208.31 1182.47,1208.31 1183.06,1208.31 1183.65,1208.31 1184.23,1208.31 1184.82,1208.31 1185.41,1208.31 1185.99,1208.31 1186.58,1208.31 1187.16,1208.31 1187.75,1208.31 1188.34,1208.31 1188.92,1208.31 1189.51,1208.31 1190.1,1208.31 1190.68,1208.31 1191.27,1208.31 1191.86,1208.31 1192.44,1208.31 1193.03,1208.31 1193.62,1208.31 1194.2,1208.31 1194.79,1208.31 1195.37,1208.31 1195.96,1208.31 1196.55,1208.31 1197.13,1208.31 1197.72,1208.31 1198.31,1208.31 1198.89,1208.31 1199.48,1208.31 1200.07,1208.31 1200.65,1208.31 1201.24,1208.31 1201.83,1208.31 1202.41,1208.31 1203,1208.31 1203.58,1208.31 1204.17,1208.31 1204.76,1208.31 1205.34,1208.31 1205.93,1208.31 1206.52,1208.31 1207.1,1208.31 1207.69,1208.31 1208.28,1208.31 1208.86,1208.31 1209.45,1208.31 1210.03,1208.31 1210.62,1208.31 1211.21,1208.31 1211.79,1208.31 1212.38,1208.31 1212.97,1208.31 1213.55,1208.31 1214.14,1208.31 1214.73,1208.31 1215.31,1208.31 1215.9,1208.31 1216.49,1208.31 1217.07,1208.31 1217.66,1208.31 1218.24,1208.31 1218.83,1208.31 1219.42,1208.31 1220,1208.31 1220.59,1208.31 1221.18,1208.31 1221.76,1208.31 1222.35,1208.31 1222.94,1208.31 1223.52,1208.31 1224.11,1208.31 1224.7,1208.31 1225.28,1208.31 1225.87,1208.31 1226.45,1208.31 1227.04,1208.31 1227.63,1208.31 1228.21,1208.31 1228.8,1208.31 1229.39,1208.31 1229.97,1208.31 1230.56,1208.31 1231.15,1208.31 1231.73,1208.31 1232.32,1208.31 1232.91,1208.31 1233.49,1208.31 1234.08,1208.31 1234.66,1208.31 1235.25,1208.31 1235.84,1208.31 1236.42,1208.31 1237.01,1208.31 1237.6,1208.31 1238.18,1208.31 1238.77,1208.31 1239.36,1208.31 1239.94,1208.31 1240.53,1208.31 1241.11,1208.31 1241.7,1208.31 1242.29,1208.31 1242.87,1208.31 1243.46,1208.31 1244.05,1208.31 1244.63,1208.31 1245.22,1208.31 1245.81,1208.31 1246.39,1208.31 1246.98,1208.31 1247.57,1208.31 1248.15,1208.31 1248.74,1208.31 1249.32,1208.31 1249.91,1208.31 1250.5,1208.31 1251.08,1208.31 1251.67,1208.31 1252.26,1208.31 1252.84,1208.31 1253.43,1208.31 1254.02,1208.31 1254.6,1208.31 1255.19,1208.31 1255.78,1208.31 1256.36,1208.31 1256.95,1208.31 1257.53,1208.31 1258.12,1208.31 1258.71,1208.31 1259.29,1208.31 1259.88,1208.31 1260.47,1208.31 1261.05,1208.31 1261.64,1208.31 1262.23,1208.31 1262.81,1208.31 1263.4,1208.31 1263.98,1208.31 1264.57,1208.31 1265.16,1208.31 1265.74,1208.31 1266.33,1208.31 1266.92,1208.31 1267.5,1208.31 1268.09,1208.31 1268.68,1208.31 1269.26,1208.31 1269.85,1208.31 1270.44,1208.31 1271.02,1208.31 1271.61,1208.31 1272.19,1208.31 1272.78,1208.31 1273.37,1208.31 1273.95,1208.31 1274.54,1208.31 1275.13,1208.31 1275.71,1208.31 1276.3,1208.31 1276.89,1208.31 1277.47,1208.31 1278.06,1208.31 1278.65,1208.31 1279.23,1208.31 1279.82,1208.31 1280.4,1208.31 1280.99,1208.31 1281.58,1208.31 1282.16,1208.31 1282.75,1208.31 1283.34,1208.31 1283.92,1208.31 1284.51,1208.31 1285.1,1208.31 1285.68,1208.31 1286.27,1208.31 1286.86,1208.31 1287.44,1208.31 1288.03,1208.31 1288.61,1208.31 1289.2,1208.31 1289.79,1208.31 1290.37,1208.31 1290.96,1208.31 1291.55,1208.31 1292.13,1208.31 1292.72,1208.31 1293.31,1208.31 1293.89,1208.31 1294.48,1208.31 1295.06,1208.31 1295.65,1208.31 1296.24,1208.31 1296.82,1208.31 1297.41,1208.31 1298,1208.31 1298.58,1208.31 1299.17,1208.31 1299.76,1208.31 1300.34,1208.31 1300.93,1208.31 1301.52,1208.31 1302.1,1208.31 1302.69,1208.31 1303.27,1208.31 1303.86,1208.31 1304.45,1208.31 1305.03,1208.31 1305.62,1208.31 1306.21,1208.31 1306.79,1208.31 1307.38,1208.31 1307.97,1208.31 1308.55,1208.31 1309.14,1208.31 1309.73,1208.31 1310.31,1208.31 1310.9,1208.31 1311.48,1208.31 1312.07,1208.31 1312.66,1208.31 1313.24,1208.31 1313.83,1208.31 1314.42,1208.31 1315,1208.31 1315.59,1208.31 1316.18,1208.31 1316.76,1208.31 1317.35,1208.31 1317.93,1208.31 1318.52,1208.31 1319.11,1208.31 1319.69,1208.31 1320.28,1208.31 1320.87,1208.31 1321.45,1208.31 1322.04,1208.31 1322.63,1208.31 1323.21,1208.31 1323.8,1208.31 1324.39,1208.31 1324.97,1208.31 1325.56,1208.31 1326.14,1208.31 1326.73,1208.31 1327.32,1208.31 1327.9,1208.31 1328.49,1208.31 1329.08,1208.31 1329.66,1208.31 1330.25,1208.31 1330.84,1208.31 1331.42,1208.31 1332.01,1208.31 1332.6,1208.31 1333.18,1208.31 1333.77,1208.31 1334.35,1208.31 1334.94,1208.31 1335.53,1208.31 1336.11,1208.31 1336.7,1208.31 1337.29,1208.31 1337.87,1208.31 1338.46,1208.31 1339.05,1208.31 1339.63,1208.31 1340.22,1208.31 1340.8,1208.31 1341.39,1208.31 1341.98,1208.31 1342.56,1208.31 1343.15,1208.31 1343.74,1208.31 1344.32,1208.31 1344.91,1208.31 1345.5,1208.31 1346.08,1208.31 1346.67,1208.31 1347.26,1208.31 1347.84,1208.31 1348.43,1208.31 1349.01,1208.31 1349.6,1208.31 1350.19,1208.31 1350.77,1208.31 1351.36,1208.31 1351.95,1208.31 1352.53,1208.31 1353.12,1208.31 1353.71,1208.31 1354.29,1208.31 1354.88,1208.31 1355.47,1208.31 1356.05,1208.31 1356.64,1208.31 1357.22,1208.31 1357.81,1208.31 1358.4,1208.31 1358.98,1208.31 1359.57,1208.31 1360.16,1208.31 1360.74,1208.31 1361.33,1208.31 1361.92,1208.31 1362.5,1208.31 1363.09,1208.31 1363.68,1208.31 1364.26,1208.31 1364.85,1208.31 1365.43,1208.31 1366.02,1208.31 1366.61,1208.31 1367.19,1208.31 1367.78,1208.31 1368.37,1208.31 1368.95,1208.31 1369.54,1208.31 1370.13,1208.31 1370.71,1208.31 1371.3,1208.31 1371.88,1208.31 1372.47,1208.31 1373.06,1208.31 1373.64,1208.31 1374.23,1208.31 1374.82,1208.31 1375.4,1208.31 1375.99,1208.31 1376.58,1208.31 1377.16,1208.31 1377.75,1208.31 1378.34,1208.31 1378.92,1208.31 1379.51,1208.31 1380.09,1208.31 1380.68,1208.31 1381.27,1208.31 1381.85,1208.31 1382.44,1208.31 1383.03,1208.31 1383.61,1208.31 1384.2,1208.31 1384.79,1208.31 1385.37,1208.31 1385.96,1208.31 1386.55,1208.31 1387.13,1208.31 1387.72,1208.31 1388.3,1208.31 1388.89,1208.31 1389.48,1208.31 1390.06,1208.31 1390.65,1208.31 1391.24,1208.31 1391.82,1208.31 1392.41,1208.31 1393,1208.31 1393.58,1208.31 1394.17,1208.31 1394.75,1208.31 1395.34,1208.31 1395.93,1208.31 1396.51,1208.31 1397.1,1208.31 1397.69,1208.31 1398.27,1208.31 1398.86,1208.31 1399.45,1208.31 1400.03,1208.31 1400.62,1208.31 1401.21,1208.31 1401.79,1208.31 1402.38,1208.31 1402.96,1208.31 1403.55,1208.31 1404.14,1208.31 1404.72,1208.31 1405.31,1208.31 1405.9,1208.31 1406.48,1208.31 1407.07,1208.31 1407.66,1208.31 1408.24,1208.31 1408.83,1208.31 1409.42,1208.31 1410,1208.31 1410.59,1208.31 1411.17,1208.31 1411.76,1208.31 1412.35,1208.31 1412.93,1208.31 1413.52,1208.31 1414.11,1208.31 1414.69,1208.31 1415.28,1208.31 1415.87,1208.31 1416.45,1208.31 1417.04,1208.31 1417.63,1208.31 1418.21,1208.31 1418.8,1208.31 1419.38,1208.31 1419.97,1208.31 1420.56,1208.31 1421.14,1208.31 1421.73,1208.31 1422.32,1208.31 1422.9,1208.31 1423.49,1208.31 1424.08,1208.31 1424.66,1208.31 1425.25,1208.31 1425.83,1208.31 1426.42,1208.31 1427.01,1208.31 1427.59,1208.31 1428.18,1208.31 1428.77,1208.31 1429.35,1208.31 1429.94,1208.31 1430.53,1208.31 1431.11,1208.31 1431.7,1208.31 1432.29,1208.31 1432.87,1208.31 1433.46,1208.31 1434.04,1208.31 1434.63,1208.31 1435.22,1208.31 1435.8,1208.31 1436.39,1208.31 1436.98,1208.31 1437.56,1208.31 1438.15,1208.31 1438.74,1208.31 1439.32,1208.31 1439.91,1208.31 1440.5,1208.31 1441.08,1208.31 1441.67,1208.31 1442.25,1208.31 1442.84,1208.31 1443.43,1208.31 1444.01,1208.31 1444.6,1208.31 1445.19,1208.31 1445.77,1208.31 1446.36,1208.31 1446.95,1208.31 1447.53,1208.31 1448.12,1208.31 1448.7,1208.31 1449.29,1208.31 1449.88,1208.31 1450.46,1208.31 1451.05,1208.31 1451.64,1208.31 1452.22,1208.31 1452.81,1208.31 1453.4,1208.31 1453.98,1208.31 1454.57,1208.31 1455.16,1208.31 1455.74,1208.31 1456.33,1208.31 1456.91,1208.31 1457.5,1208.31 1458.09,1208.31 1458.67,1208.31 1459.26,1208.31 1459.85,1208.31 1460.43,1208.31 1461.02,1208.31 1461.61,1208.31 1462.19,1208.31 1462.78,1208.31 1463.37,1208.31 1463.95,1208.31 1464.54,1208.31 1465.12,1208.31 1465.71,1208.31 1466.3,1208.31 1466.88,1208.31 1467.47,1208.31 1468.06,1208.31 1468.64,1208.31 1469.23,1208.31 1469.82,1208.31 1470.4,1208.31 1470.99,1208.31 1471.57,1208.31 1472.16,1208.31 1472.75,1208.31 1473.33,1208.31 1473.92,1208.31 1474.51,1208.31 1475.09,1208.31 1475.68,1208.31 1476.27,1208.31 1476.85,1208.31 1477.44,1208.31 1478.03,1208.31 1478.61,1208.31 1479.2,1208.31 1479.78,1208.31 1480.37,1208.31 1480.96,1208.31 1481.54,1208.31 1482.13,1208.31 1482.72,1208.31 1483.3,1208.31 1483.89,1208.31 1484.48,1208.31 1485.06,1208.31 1485.65,1208.31 1486.24,1208.31 1486.82,1208.31 1487.41,1208.31 1487.99,1208.31 1488.58,1208.31 1489.17,1208.31 1489.75,1208.31 1490.34,1208.31 1490.93,1208.31 1491.51,1208.31 1492.1,1208.31 1492.69,1208.31 1493.27,1208.31 1493.86,1208.31 1494.45,1208.31 1495.03,1208.31 1495.62,1208.31 1496.2,1208.31 1496.79,1208.31 1497.38,1208.31 1497.96,1208.31 1498.55,1208.31 1499.14,1208.31 1499.72,1208.31 1500.31,1208.31 1500.9,1208.31 1501.48,1208.31 1502.07,1208.31 1502.65,1208.31 1503.24,1208.31 1503.83,1208.31 1504.41,1208.31 1505,1208.31 1505.59,1208.31 1506.17,1208.31 1506.76,1208.31 1507.35,1208.31 1507.93,1208.31 1508.52,1208.31 1509.11,1208.31 1509.69,1208.31 1510.28,1208.31 1510.86,1208.31 1511.45,1208.31 1512.04,1208.31 1512.62,1208.31 1513.21,1208.31 1513.8,1208.31 1514.38,1208.31 1514.97,1208.31 1515.56,1208.31 1516.14,1208.31 1516.73,1208.31 1517.32,1208.31 1517.9,1208.31 1518.49,1208.31 1519.07,1208.31 1519.66,1208.31 1520.25,1208.31 1520.83,1208.31 1521.42,1208.31 1522.01,1208.31 1522.59,1208.31 1523.18,1208.31 1523.77,1208.31 1524.35,1208.31 1524.94,1208.31 1525.52,1208.31 1526.11,1208.31 1526.7,1208.31 1527.28,1208.31 1527.87,1208.31 1528.46,1208.31 1529.04,1208.31 1529.63,1208.31 1530.22,1208.31 1530.8,1208.31 1531.39,1208.31 1531.98,1208.31 1532.56,1208.31 1533.15,1208.31 1533.73,1208.31 1534.32,1208.31 1534.91,1208.31 1535.49,1208.31 1536.08,1208.31 1536.67,1208.31 1537.25,1208.31 1537.84,1208.31 1538.43,1208.31 1539.01,1208.31 1539.6,1208.31 1540.19,1208.31 1540.77,1208.31 1541.36,1208.31 1541.94,1208.31 1542.53,1208.31 1543.12,1208.31 1543.7,1208.31 1544.29,1208.31 1544.88,1208.31 1545.46,1208.31 1546.05,1208.31 1546.64,1208.31 1547.22,1208.31 1547.81,1208.31 1548.4,1208.31 1548.98,1208.31 1549.57,1208.31 1550.15,1208.31 1550.74,1208.31 1551.33,1208.31 1551.91,1208.31 1552.5,1208.31 1553.09,1208.31 1553.67,1208.31 1554.26,1208.31 1554.85,1208.31 1555.43,1208.31 1556.02,1208.31 1556.6,1208.31 1557.19,1208.31 1557.78,1208.31 1558.36,1208.31 1558.95,1208.31 1559.54,1208.31 1560.12,1208.31 1560.71,1208.31 1561.3,1208.31 1561.88,1208.31 1562.47,1208.31 1563.06,1208.31 1563.64,1208.31 1564.23,1208.31 1564.81,1208.31 1565.4,1208.31 1565.99,1208.31 1566.57,1208.31 1567.16,1208.31 1567.75,1208.31 1568.33,1208.31 1568.92,1208.31 1569.51,1208.31 1570.09,1208.31 1570.68,1208.31 1571.27,1208.31 1571.85,1208.31 1572.44,1208.31 1573.02,1208.31 1573.61,1208.31 1574.2,1208.31 1574.78,1208.31 1575.37,1208.31 1575.96,1208.31 1576.54,1208.31 1577.13,1208.31 1577.72,1208.31 1578.3,1208.31 1578.89,1208.31 1579.47,1208.31 1580.06,1208.31 1580.65,1208.31 1581.23,1208.31 1581.82,1208.31 1582.41,1208.31 1582.99,1208.31 1583.58,1208.31 1584.17,1208.31 1584.75,1208.31 1585.34,1208.31 1585.93,1208.31 1586.51,1208.31 1587.1,1208.31 1587.68,1208.31 1588.27,1208.31 1588.86,1208.31 1589.44,1208.31 1590.03,1208.31 1590.62,1208.31 1591.2,1208.31 1591.79,1208.31 1592.38,1208.31 1592.96,1208.31 1593.55,1208.31 1594.14,1208.31 1594.72,1208.31 1595.31,1208.31 1595.89,1208.31 1596.48,1208.31 1597.07,1208.31 1597.65,1208.31 1598.24,1208.31 1598.83,1208.31 1599.41,1208.31 1600,1208.31 1600.59,1208.31 1601.17,1208.31 1601.76,1208.31 1602.34,1208.31 1602.93,1208.31 1603.52,1208.31 1604.1,1208.31 1604.69,1208.31 1605.28,1208.31 1605.86,1208.31 1606.45,1208.31 1607.04,1208.31 1607.62,1208.31 1608.21,1208.31 1608.8,1208.31 1609.38,1208.31 1609.97,1208.31 1610.55,1208.31 1611.14,1208.31 1611.73,1208.31 1612.31,1208.31 1612.9,1208.31 1613.49,1208.31 1614.07,1208.31 1614.66,1208.31 1615.25,1208.31 1615.83,1208.31 1616.42,1208.31 1617.01,1208.31 1617.59,1208.31 1618.18,1208.31 1618.76,1208.31 1619.35,1208.31 1619.94,1208.31 1620.52,1208.31 1621.11,1208.31 1621.7,1208.31 1622.28,1208.31 1622.87,1208.31 1623.46,1208.31 1624.04,1208.31 1624.63,1208.31 1625.22,1208.31 1625.8,1208.31 1626.39,1208.31 1626.97,1208.31 1627.56,1208.31 1628.15,1208.31 1628.73,1208.31 1629.32,1208.31 1629.91,1208.31 1630.49,1208.31 1631.08,1208.31 1631.67,1208.31 1632.25,1208.31 1632.84,1208.31 1633.42,1208.31 1634.01,1208.31 1634.6,1208.31 1635.18,1208.31 1635.77,1208.31 1636.36,1208.31 1636.94,1208.31 1637.53,1208.31 1638.12,1208.31 1638.7,1208.31 1639.29,1208.31 1639.88,1208.31 1640.46,1208.31 1641.05,1208.31 1641.63,1208.31 1642.22,1208.31 1642.81,1208.31 1643.39,1208.31 1643.98,1208.31 1644.57,1208.31 1645.15,1208.31 1645.74,1208.31 1646.33,1208.31 1646.91,1208.31 1647.5,1208.31 1648.09,1208.31 1648.67,1208.31 1649.26,1208.31 1649.84,1208.31 1650.43,1208.31 1651.02,1208.31 1651.6,1208.31 1652.19,1208.31 1652.78,1208.31 1653.36,1208.31 1653.95,1208.31 1654.54,1208.31 1655.12,1208.31 1655.71,1208.31 1656.29,1208.31 1656.88,1208.31 1657.47,1208.31 1658.05,1208.31 1658.64,1208.31 1659.23,1208.31 1659.81,1208.31 1660.4,1208.31 1660.99,1208.31 1661.57,1208.31 1662.16,1208.31 1662.75,1208.31 1663.33,1208.31 1663.92,1208.31 1664.5,1208.31 1665.09,1208.31 1665.68,1208.31 1666.26,1208.31 1666.85,1208.31 1667.44,1208.31 1668.02,1208.31 1668.61,1208.31 1669.2,1208.31 1669.78,1208.31 1670.37,1208.31 1670.96,1208.31 1671.54,1208.31 1672.13,1208.31 1672.71,1208.31 1673.3,1208.31 1673.89,1208.31 1674.47,1208.31 1675.06,1208.31 1675.65,1208.31 1676.23,1208.31 1676.82,1208.31 1677.41,1208.31 1677.99,1208.31 1678.58,1208.31 1679.17,1208.31 1679.75,1208.31 1680.34,1208.31 1680.92,1208.31 1681.51,1208.31 1682.1,1208.31 1682.68,1208.31 1683.27,1208.31 1683.86,1208.31 1684.44,1208.31 1685.03,1208.31 1685.62,1208.31 1686.2,1208.31 1686.79,1208.31 1687.37,1208.31 1687.96,1208.31 1688.55,1208.31 1689.13,1208.31 1689.72,1208.31 1690.31,1208.31 1690.89,1208.31 1691.48,1208.31 1692.07,1208.31 1692.65,1208.31 1693.24,1208.31 1693.83,1208.31 1694.41,1208.31 1695,1208.31 1695.58,1208.31 1696.17,1208.31 1696.76,1208.31 1697.34,1208.31 1697.93,1208.31 1698.52,1208.31 1699.1,1208.31 1699.69,1208.31 1700.28,1208.31 1700.86,1208.31 1701.45,1208.31 1702.04,1208.31 1702.62,1208.31 1703.21,1208.31 1703.79,1208.31 1704.38,1208.31 1704.97,1208.31 1705.55,1208.31 1706.14,1208.31 1706.73,1208.31 1707.31,1208.31 1707.9,1208.31 1708.49,1208.31 1709.07,1208.31 1709.66,1208.31 1710.24,1208.31 1710.83,1208.31 1711.42,1208.31 1712,1208.31 1712.59,1208.31 1713.18,1208.31 1713.76,1208.31 1714.35,1208.31 1714.94,1208.31 1715.52,1208.31 1716.11,1208.31 1716.7,1208.31 1717.28,1208.31 1717.87,1208.31 1718.45,1208.31 1719.04,1208.31 1719.63,1208.31 1720.21,1208.31 1720.8,1208.31 1721.39,1208.31 1721.97,1208.31 1722.56,1208.31 1723.15,1208.31 1723.73,1208.31 1724.32,1208.31 1724.91,1208.31 1725.49,1208.31 1726.08,1208.31 1726.66,1208.31 1727.25,1208.31 1727.84,1208.31 1728.42,1208.31 1729.01,1208.31 1729.6,1208.31 1730.18,1208.31 1730.77,1208.31 1731.36,1208.31 1731.94,1208.31 1732.53,1208.31 1733.11,1208.31 1733.7,1208.31 1734.29,1208.31 1734.87,1208.31 1735.46,1208.31 1736.05,1208.31 1736.63,1208.31 1737.22,1208.31 1737.81,1208.31 1738.39,1208.31 1738.98,1208.31 1739.57,1208.31 1740.15,1208.31 1740.74,1208.31 1741.32,1208.31 1741.91,1208.31 1742.5,1208.31 1743.08,1208.31 1743.67,1208.31 1744.26,1208.31 1744.84,1208.31 1745.43,1208.31 1746.02,1208.31 1746.6,1208.31 1747.19,1208.31 1747.78,1208.31 1748.36,1208.31 1748.95,1208.31 1749.53,1208.31 1750.12,1208.31 1750.71,1208.31 1751.29,1208.31 1751.88,1208.31 1752.47,1208.31 1753.05,1208.31 1753.64,1208.31 1754.23,1208.31 1754.81,1208.31 1755.4,1208.31 1755.99,1208.31 1756.57,1208.31 1757.16,1208.31 1757.74,1208.31 1758.33,1208.31 1758.92,1208.31 1759.5,1208.31 1760.09,1208.31 1760.68,1208.31 1761.26,1208.31 1761.85,1208.31 1762.44,1208.31 1763.02,1208.31 1763.61,1208.31 1764.19,1208.31 1764.78,1208.31 1765.37,1208.31 1765.95,1208.31 1766.54,1208.31 1767.13,1208.31 1767.71,1208.31 1768.3,1208.31 1768.89,1208.31 1769.47,1208.31 1770.06,1208.31 1770.65,1208.31 1771.23,1208.31 1771.82,1208.31 1772.4,1208.31 1772.99,1208.31 1773.58,1208.31 1774.16,1208.31 1774.75,1208.31 1775.34,1208.31 1775.92,1208.31 1776.51,1208.31 1777.1,1208.31 1777.68,1208.31 1778.27,1208.31 1778.86,1208.31 1779.44,1208.31 1780.03,1208.31 1780.61,1208.31 1781.2,1208.31 1781.79,1208.31 1782.37,1208.31 1782.96,1208.31 1783.55,1208.31 1784.13,1208.31 1784.72,1208.31 1785.31,1208.31 1785.89,1208.31 1786.48,1208.31 1787.06,1208.31 1787.65,1208.31 1788.24,1208.31 1788.82,1208.31 1789.41,1208.31 1790,1208.31 1790.58,1208.31 1791.17,1208.31 1791.76,1208.31 1792.34,1208.31 1792.93,1208.31 1793.52,1208.31 1794.1,1208.31 1794.69,1208.31 1795.27,1208.31 1795.86,1208.31 1796.45,1208.31 1797.03,1208.31 1797.62,1208.31 1798.21,1208.31 1798.79,1208.31 1799.38,1208.31 1799.97,1208.31 1800.55,1208.31 1801.14,1208.31 1801.73,1208.31 1802.31,1208.31 1802.9,1208.31 1803.48,1208.31 1804.07,1208.31 1804.66,1208.31 1805.24,1208.31 1805.83,1208.31 1806.42,1208.31 1807,1208.31 1807.59,1208.31 1808.18,1208.31 1808.76,1208.31 1809.35,1208.31 1809.94,1208.31 1810.52,1208.31 1811.11,1208.31 1811.69,1208.31 1812.28,1208.31 1812.87,1208.31 1813.45,1208.31 1814.04,1208.31 1814.63,1208.31 1815.21,1208.31 1815.8,1208.31 1816.39,1208.31 1816.97,1208.31 1817.56,1208.31 1818.14,1208.31 1818.73,1208.31 1819.32,1208.31 1819.9,1208.31 1820.49,1208.31 1821.08,1208.31 1821.66,1208.31 1822.25,1208.31 1822.84,1208.31 1823.42,1208.31 1824.01,1208.31 1824.6,1208.31 1825.18,1208.31 1825.77,1208.31 1826.35,1208.31 1826.94,1208.31 1827.53,1208.31 1828.11,1208.31 1828.7,1208.31 1829.29,1208.31 1829.87,1208.31 1830.46,1208.31 1831.05,1208.31 1831.63,1208.31 1832.22,1208.31 1832.81,1208.31 1833.39,1208.31 1833.98,1208.31 1834.56,1208.31 1835.15,1208.31 1835.74,1208.31 1836.32,1208.31 1836.91,1208.31 1837.5,1208.31 1838.08,1208.31 1838.67,1208.31 1839.26,1208.31 1839.84,1208.31 1840.43,1208.31 1841.01,1208.31 1841.6,1208.31 1842.19,1208.31 1842.77,1208.31 1843.36,1208.31 1843.95,1208.31 1844.53,1208.31 1845.12,1208.31 1845.71,1208.31 1846.29,1208.31 1846.88,1208.31 1847.47,1208.31 1848.05,1208.31 1848.64,1208.31 1849.22,1208.31 1849.81,1208.31 1850.4,1208.31 1850.98,1208.31 1851.57,1208.31 1852.16,1208.31 1852.74,1208.31 1853.33,1208.31 1853.92,1208.31 1854.5,1208.31 1855.09,1208.31 1855.68,1208.31 1856.26,1208.31 1856.85,1208.31 1857.43,1208.31 1858.02,1208.31 1858.61,1208.31 1859.19,1208.31 1859.78,1208.31 1860.37,1208.31 1860.95,1208.31 1861.54,1208.31 1862.13,1208.31 1862.71,1208.31 1863.3,1208.31 1863.88,1208.31 1864.47,1208.31 1865.06,1208.31 1865.64,1208.31 1866.23,1208.31 1866.82,1208.31 1867.4,1208.31 1867.99,1208.31 1868.58,1208.31 1869.16,1208.31 1869.75,1208.31 1870.34,1208.31 1870.92,1208.31 1871.51,1208.31 1872.09,1208.31 1872.68,1208.31 1873.27,1208.31 1873.85,1208.31 1874.44,1208.31 1875.03,1208.31 1875.61,1208.31 1876.2,1208.31 1876.79,1208.31 1877.37,1208.31 1877.96,1208.31 1878.55,1208.31 1879.13,1208.31 1879.72,1208.31 1880.3,1208.31 1880.89,1208.31 1881.48,1208.31 1882.06,1208.31 1882.65,1208.31 1883.24,1208.31 1883.82,1208.31 1884.41,1208.31 1885,1208.31 1885.58,1208.31 1886.17,1208.31 1886.76,1208.31 1887.34,1208.31 1887.93,1208.31 1888.51,1208.31 1889.1,1208.31 1889.69,1208.31 1890.27,1208.31 1890.86,1208.31 1891.45,1208.31 1892.03,1208.31 1892.62,1208.31 1893.21,1208.31 1893.79,1208.31 1894.38,1208.31 1894.96,1208.31 1895.55,1208.31 1896.14,1208.31 1896.72,1208.31 1897.31,1208.31 1897.9,1208.31 1898.48,1208.31 1899.07,1208.31 1899.66,1208.31 1900.24,1208.31 1900.83,1208.31 1901.42,1208.31 1902,1208.31 1902.59,1208.31 1903.17,1208.31 1903.76,1208.31 1904.35,1208.31 1904.93,1208.31 1905.52,1208.31 1906.11,1208.31 1906.69,1208.31 1907.28,1208.31 1907.87,1208.31 1908.45,1208.31 1909.04,1208.31 1909.63,1208.31 1910.21,1208.31 1910.8,1208.31 1911.38,1208.31 1911.97,1208.31 1912.56,1208.31 1913.14,1208.31 1913.73,1208.31 1914.32,1208.31 1914.9,1208.31 1915.49,1208.31 1916.08,1208.31 1916.66,1208.31 1917.25,1208.31 1917.83,1208.31 1918.42,1208.31 1919.01,1208.31 1919.59,1208.31 1920.18,1208.31 1920.77,1208.31 1921.35,1208.31 1921.94,1208.31 1922.53,1208.31 1923.11,1208.31 1923.7,1208.31 1924.29,1208.31 1924.87,1208.31 1925.46,1208.31 1926.04,1208.31 1926.63,1208.31 1927.22,1208.31 1927.8,1208.31 1928.39,1208.31 1928.98,1208.31 1929.56,1208.31 1930.15,1208.31 1930.74,1208.31 1931.32,1208.31 1931.91,1208.31 1932.5,1208.31 1933.08,1208.31 1933.67,1208.31 1934.25,1208.31 1934.84,1208.31 1935.43,1208.31 1936.01,1208.31 1936.6,1208.31 1937.19,1208.31 1937.77,1208.31 1938.36,1208.31 1938.95,1208.31 1939.53,1208.31 1940.12,1208.31 1940.71,1208.31 1941.29,1208.31 1941.88,1208.31 1942.46,1208.31 1943.05,1208.31 1943.64,1208.31 1944.22,1208.31 1944.81,1208.31 1945.4,1208.31 1945.98,1208.31 1946.57,1208.31 1947.16,1208.31 1947.74,1208.31 1948.33,1208.31 1948.91,1208.31 1949.5,1208.31 1950.09,1208.31 1950.67,1208.31 1951.26,1208.31 1951.85,1208.31 1952.43,1208.31 1953.02,1208.31 1953.61,1208.31 1954.19,1208.31 1954.78,1208.31 1955.37,1208.31 1955.95,1208.31 1956.54,1208.31 1957.12,1208.31 1957.71,1208.31 1958.3,1208.31 1958.88,1208.31 1959.47,1208.31 1960.06,1208.31 1960.64,1208.31 1961.23,1208.31 1961.82,1208.31 1962.4,1208.31 1962.99,1208.31 1963.58,1208.31 1964.16,1208.31 1964.75,1208.31 1965.33,1208.31 1965.92,1208.31 1966.51,1208.31 1967.09,1208.31 1967.68,1208.31 1968.27,1208.31 1968.85,1208.31 1969.44,1208.31 1970.03,1208.31 1970.61,1208.31 1971.2,1208.31 1971.78,1208.31 1972.37,1208.31 1972.96,1208.31 1973.54,1208.31 1974.13,1208.31 1974.72,1208.31 1975.3,1208.31 1975.89,1208.31 1976.48,1208.31 1977.06,1208.31 1977.65,1208.31 1978.24,1208.31 1978.82,1208.31 1979.41,1208.31 1979.99,1208.31 1980.58,1208.31 1981.17,1208.31 1981.75,1208.31 1982.34,1208.31 1982.93,1208.31 1983.51,1208.31 1984.1,1208.31 1984.69,1208.31 1985.27,1208.31 1985.86,1208.31 1986.45,1208.31 1987.03,1208.31 1987.62,1208.31 1988.2,1208.31 1988.79,1208.31 1989.38,1208.31 1989.96,1208.31 1990.55,1208.31 1991.14,1208.31 1991.72,1208.31 1992.31,1208.31 1992.9,1208.31 1993.48,1208.31 1994.07,1208.31 1994.65,1208.31 1995.24,1208.31 1995.83,1208.31 1996.41,1208.31 1997,1208.31 1997.59,1208.31 1998.17,1208.31 1998.76,1208.31 1999.35,1208.31 1999.93,1208.31 2000.52,1208.31 2001.11,1208.31 2001.69,1208.31 2002.28,1208.31 2002.86,1208.31 2003.45,1208.31 2004.04,1208.31 2004.62,1208.31 2005.21,1208.31 2005.8,1208.31 2006.38,1208.31 2006.97,1208.31 2007.56,1208.31 2008.14,1208.31 2008.73,1208.31 2009.32,1208.31 2009.9,1208.31 2010.49,1208.31 2011.07,1208.31 2011.66,1208.31 2012.25,1208.31 2012.83,1208.31 2013.42,1208.31 2014.01,1208.31 2014.59,1208.31 2015.18,1208.31 2015.77,1208.31 2016.35,1208.31 2016.94,1208.31 2017.53,1208.31 2018.11,1208.31 2018.7,1208.31 2019.28,1208.31 2019.87,1208.31 2020.46,1208.31 2021.04,1208.31 2021.63,1208.31 2022.22,1208.31 2022.8,1208.31 2023.39,1208.31 2023.98,1208.31 2024.56,1208.31 2025.15,1208.31 2025.73,1208.31 2026.32,1208.31 2026.91,1208.31 2027.49,1208.31 2028.08,1208.31 2028.67,1208.31 2029.25,1208.31 2029.84,1208.31 2030.43,1208.31 2031.01,1208.31 2031.6,1208.31 2032.19,1208.31 2032.77,1208.31 2033.36,1208.31 2033.94,1208.31 2034.53,1208.31 2035.12,1208.31 2035.7,1208.31 2036.29,1208.31 2036.88,1208.31 2037.46,1208.31 2038.05,1208.31 2038.64,1208.31 2039.22,1208.31 2039.81,1208.31 2040.4,1208.31 2040.98,1208.31 2041.57,1208.31 2042.15,1208.31 2042.74,1208.31 2043.33,1208.31 2043.91,1208.31 2044.5,1208.31 2045.09,1208.31 2045.67,1208.31 2046.26,1208.31 2046.85,1208.31 2047.43,1208.31 2048.02,1208.31 2048.6,1208.31 2049.19,1208.31 2049.78,1208.31 2050.36,1208.31 2050.95,1208.31 2051.54,1208.31 2052.12,1208.31 2052.71,1208.31 2053.3,1208.31 2053.88,1208.31 2054.47,1208.31 2055.06,1208.31 2055.64,1208.31 2056.23,1208.31 2056.81,1208.31 2057.4,1208.31 2057.99,1208.31 2058.57,1208.31 2059.16,1208.31 2059.75,1208.31 2060.33,1208.31 2060.92,1208.31 2061.51,1208.31 2062.09,1208.31 2062.68,1208.31 2063.27,1208.31 2063.85,1208.31 2064.44,1208.31 2065.02,1208.31 2065.61,1208.31 2066.2,1208.31 2066.78,1208.31 2067.37,1208.31 2067.96,1208.31 2068.54,1208.31 2069.13,1208.31 2069.72,1208.31 2070.3,1208.31 2070.89,1208.31 2071.48,1208.31 2072.06,1208.31 2072.65,1208.31 2073.23,1208.31 2073.82,1208.31 2074.41,1208.31 2074.99,1208.31 2075.58,1208.31 2076.17,1208.31 2076.75,1208.31 2077.34,1208.31 2077.93,1208.31 2078.51,1208.31 2079.1,1208.31 2079.68,1208.31 2080.27,1208.31 2080.86,1208.31 2081.44,1208.31 2082.03,1208.31 2082.62,1208.31 2083.2,1208.31 2083.79,1208.31 2084.38,1208.31 2084.96,1208.31 2085.55,1208.31 2086.14,1208.31 2086.72,1208.31 2087.31,1208.31 2087.89,1208.31 2088.48,1208.31 2089.07,1208.31 2089.65,1208.31 2090.24,1208.31 2090.83,1208.31 2091.41,1208.31 2092,1208.31 2092.59,1208.31 2093.17,1208.31 2093.76,1208.31 2094.35,1208.31 2094.93,1208.31 2095.52,1208.31 2096.1,1208.31 2096.69,1208.31 2097.28,1208.31 2097.86,1208.31 2098.45,1208.31 2099.04,1208.31 2099.62,1208.31 2100.21,1208.31 2100.8,1208.31 2101.38,1208.31 2101.97,1208.31 2102.55,1208.31 2103.14,1208.31 2103.73,1208.31 2104.31,1208.31 2104.9,1208.31 2105.49,1208.31 2106.07,1208.31 2106.66,1208.31 2107.25,1208.31 2107.83,1208.31 2108.42,1208.31 2109.01,1208.31 2109.59,1208.31 2110.18,1208.31 2110.76,1208.31 2111.35,1208.31 2111.94,1208.31 2112.52,1208.31 2113.11,1208.31 2113.7,1208.31 2114.28,1208.31 2114.87,1208.31 2115.46,1208.31 2116.04,1208.31 2116.63,1208.31 2117.22,1208.31 2117.8,1208.31 2118.39,1208.31 2118.97,1208.31 2119.56,1208.31 2120.15,1208.31 2120.73,1208.31 2121.32,1208.31 2121.91,1208.31 2122.49,1208.31 2123.08,1208.31 2123.67,1208.31 2124.25,1208.31 2124.84,1208.31 2125.42,1208.31 2126.01,1208.31 2126.6,1208.31 2127.18,1208.31 2127.77,1208.31 2128.36,1208.31 2128.94,1208.31 2129.53,1208.31 2130.12,1208.31 2130.7,1208.31 2131.29,1208.31 2131.88,1208.31 2132.46,1208.31 2133.05,1208.31 2133.63,1208.31 2134.22,1208.31 2134.81,1208.31 2135.39,1208.31 2135.98,1208.31 2136.57,1208.31 2137.15,1208.31 2137.74,1208.31 2138.33,1208.31 2138.91,1208.31 2139.5,1208.31 2140.09,1208.31 2140.67,1208.31 2141.26,1208.31 2141.84,1208.31 2142.43,1208.31 2143.02,1208.31 2143.6,1208.31 2144.19,1208.31 2144.78,1208.31 2145.36,1208.31 2145.95,1208.31 2146.54,1208.31 2147.12,1208.31 2147.71,1208.31 2148.3,1208.31 2148.88,1208.31 2149.47,1208.31 2150.05,1208.31 2150.64,1208.31 2151.23,1208.31 2151.81,1208.31 2152.4,1208.31 2152.99,1208.31 2153.57,1208.31 2154.16,1208.31 2154.75,1208.31 2155.33,1208.31 2155.92,1208.31 2156.5,1208.31 2157.09,1208.31 2157.68,1208.31 2158.26,1208.31 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1208.18 L986.612 1208.18 L987.198 1208.18 L987.785 1208.18 L988.371 1208.18 L988.957 1208.18 L989.544 1208.18 L990.13 1208.18 L990.717 1208.18 L991.303 1208.18 L991.889 1208.18 L992.476 1208.18 L993.062 1208.18 L993.649 1208.18 L994.235 1208.18 L994.822 1208.18 L995.408 1208.18 L995.994 1208.18 L996.581 1208.18 L997.167 1208.18 L997.754 1208.18 L998.34 1208.18 L998.926 1208.18 L999.513 1208.18 L1000.1 1208.18 L1000.69 1208.18 L1001.27 1208.18 L1001.86 1208.18 L1002.44 1208.18 L1003.03 1208.18 L1003.62 1208.18 L1004.2 1208.18 L1004.79 1208.18 L1005.38 1208.18 L1005.96 1208.18 L1006.55 1208.18 L1007.14 1208.18 L1007.72 1208.18 L1008.31 1208.18 L1008.9 1208.18 L1009.48 1208.18 L1010.07 1208.18 L1010.65 1208.18 L1011.24 1208.18 L1011.83 1208.18 L1012.41 1208.18 L1013 1208.18 L1013.59 1208.18 L1014.17 1208.18 L1014.76 1208.18 L1015.35 1208.18 L1015.93 1208.18 L1016.52 1208.18 L1017.11 1208.18 L1017.69 1208.18 L1018.28 1208.18 L1018.86 1208.18 L1019.45 1208.18 L1020.04 1208.18 L1020.62 1208.18 L1021.21 1208.18 L1021.8 1208.18 L1022.38 1208.18 L1022.97 1208.18 L1023.56 1208.18 L1024.14 1208.18 L1024.73 1208.18 L1025.32 1208.18 L1025.9 1208.18 L1026.49 1208.18 L1027.07 1208.18 L1027.66 1208.18 L1028.25 1208.18 L1028.83 1208.18 L1029.42 1208.18 L1030.01 1208.18 L1030.59 1208.18 L1031.18 1208.18 L1031.77 1208.18 L1032.35 1208.18 L1032.94 1208.18 L1033.52 1208.18 L1034.11 1208.18 L1034.7 1208.18 L1035.28 1208.18 L1035.87 1208.18 L1036.46 1208.18 L1037.04 1208.18 L1037.63 1208.18 L1038.22 1208.18 L1038.8 1208.18 L1039.39 1208.18 L1039.98 1208.18 L1040.56 1208.18 L1041.15 1208.18 L1041.73 1208.18 L1042.32 1208.18 L1042.91 1208.18 L1043.49 1208.18 L1044.08 1208.18 L1044.67 1208.18 L1045.25 1208.18 L1045.84 1208.18 L1046.43 1208.18 L1047.01 1208.18 L1047.6 1208.18 L1048.19 1208.18 L1048.77 1208.18 L1049.36 1208.18 L1049.94 1208.18 L1050.53 1208.18 L1051.12 1208.18 L1051.7 1208.18 L1052.29 1208.18 L1052.88 1208.18 L1053.46 1208.18 L1054.05 1208.18 L1054.64 1208.18 L1055.22 1208.18 L1055.81 1208.18 L1056.39 1208.18 L1056.98 1208.18 L1057.57 1208.18 L1058.15 1208.18 L1058.74 1208.18 L1059.33 1208.18 L1059.91 1208.18 L1060.5 1208.18 L1061.09 1208.18 L1061.67 1208.18 L1062.26 1208.18 L1062.85 1208.18 L1063.43 1208.18 L1064.02 1208.18 L1064.6 1208.18 L1065.19 1208.18 L1065.78 1208.18 L1066.36 1208.18 L1066.95 1208.18 L1067.54 1208.18 L1068.12 1208.18 L1068.71 1208.18 L1069.3 1208.18 L1069.88 1208.18 L1070.47 1208.18 L1071.06 1208.18 L1071.64 1208.18 L1072.23 1208.18 L1072.81 1208.18 L1073.4 1208.18 L1073.99 1208.18 L1074.57 1208.18 L1075.16 1208.18 L1075.75 1208.18 L1076.33 1208.18 L1076.92 1208.18 L1077.51 1208.18 L1078.09 1208.18 L1078.68 1208.18 L1079.26 1208.18 L1079.85 1208.18 L1080.44 1208.18 L1081.02 1208.18 L1081.61 1208.18 L1082.2 1208.18 L1082.78 1208.18 L1083.37 1208.18 L1083.96 1208.18 L1084.54 1208.18 L1085.13 1208.18 L1085.72 1208.18 L1086.3 1208.18 L1086.89 1208.18 L1087.47 1208.18 L1088.06 1208.18 L1088.65 1208.18 L1089.23 1208.18 L1089.82 1208.18 L1090.41 1208.18 L1090.99 1208.18 L1091.58 1208.18 L1092.17 1208.18 L1092.75 1208.18 L1093.34 1208.18 L1093.93 1208.18 L1094.51 1208.18 L1095.1 1208.18 L1095.68 1208.18 L1096.27 1208.18 L1096.86 1208.18 L1097.44 1208.18 L1098.03 1208.18 L1098.62 1208.18 L1099.2 1208.18 L1099.79 1208.18 L1100.38 1208.18 L1100.96 1208.18 L1101.55 1208.18 L1102.14 1208.18 L1102.72 1208.18 L1103.31 1208.18 L1103.89 1208.18 L1104.48 1208.18 L1105.07 1208.18 L1105.65 1208.18 L1106.24 1208.18 L1106.83 1208.18 L1107.41 1208.18 L1108 1208.18 L1108.59 1208.18 L1109.17 1208.18 L1109.76 1208.18 L1110.34 1208.18 L1110.93 1208.18 L1111.52 1208.18 L1112.1 1208.18 L1112.69 1208.18 L1113.28 1208.18 L1113.86 1208.18 L1114.45 1208.18 L1115.04 1208.18 L1115.62 1208.18 L1116.21 1208.18 L1116.8 1208.18 L1117.38 1208.18 L1117.97 1208.18 L1118.55 1208.18 L1119.14 1208.18 L1119.73 1208.18 L1120.31 1208.18 L1120.9 1208.18 L1121.49 1208.18 L1122.07 1208.18 L1122.66 1208.18 L1123.25 1208.18 L1123.83 1208.18 L1124.42 1208.18 L1125.01 1208.18 L1125.59 1208.18 L1126.18 1208.18 L1126.76 1208.18 L1127.35 1208.18 L1127.94 1208.18 L1128.52 1208.18 L1129.11 1208.18 L1129.7 1208.18 L1130.28 1208.18 L1130.87 1208.18 L1131.46 1208.18 L1132.04 1208.18 L1132.63 1208.18 L1133.21 1208.18 L1133.8 1208.18 L1134.39 1208.18 L1134.97 1208.18 L1135.56 1208.18 L1136.15 1208.18 L1136.73 1208.18 L1137.32 1208.18 L1137.91 1208.18 L1138.49 1208.18 L1139.08 1208.18 L1139.67 1208.18 L1140.25 1208.18 L1140.84 1208.18 L1141.42 1208.18 L1142.01 1208.18 L1142.6 1208.18 L1143.18 1208.18 L1143.77 1208.18 L1144.36 1208.18 L1144.94 1208.18 L1145.53 1208.18 L1146.12 1208.18 L1146.7 1208.18 L1147.29 1208.18 L1147.88 1208.18 L1148.46 1208.18 L1149.05 1208.18 L1149.63 1208.18 L1150.22 1208.18 L1150.81 1208.18 L1151.39 1208.18 L1151.98 1208.18 L1152.57 1208.18 L1153.15 1208.18 L1153.74 1208.18 L1154.33 1208.18 L1154.91 1208.18 L1155.5 1208.18 L1156.09 1208.18 L1156.67 1208.18 L1157.26 1208.18 L1157.84 1208.18 L1158.43 1208.18 L1159.02 1208.18 L1159.6 1208.18 L1160.19 1208.18 L1160.78 1208.18 L1161.36 1208.18 L1161.95 1208.18 L1162.54 1208.18 L1163.12 1208.18 L1163.71 1208.18 L1164.29 1208.18 L1164.88 1208.18 L1165.47 1208.18 L1166.05 1208.18 L1166.64 1208.18 L1167.23 1208.18 L1167.81 1208.18 L1168.4 1208.18 L1168.99 1208.18 L1169.57 1208.18 L1170.16 1208.18 L1170.75 1208.18 L1171.33 1208.18 L1171.92 1208.18 L1172.5 1208.18 L1173.09 1208.18 L1173.68 1208.18 L1174.26 1208.18 L1174.85 1208.18 L1175.44 1208.18 L1176.02 1208.18 L1176.61 1208.18 L1177.2 1208.18 L1177.78 1208.18 L1178.37 1208.18 L1178.96 1208.18 L1179.54 1208.18 L1180.13 1208.18 L1180.71 1208.18 L1181.3 1208.18 L1181.89 1208.18 L1182.47 1208.18 L1183.06 1208.18 L1183.65 1208.18 L1184.23 1208.18 L1184.82 1208.18 L1185.41 1208.18 L1185.99 1208.18 L1186.58 1208.18 L1187.16 1208.18 L1187.75 1208.18 L1188.34 1208.18 L1188.92 1208.18 L1189.51 1208.18 L1190.1 1208.18 L1190.68 1208.18 L1191.27 1208.18 L1191.86 1208.18 L1192.44 1208.18 L1193.03 1208.18 L1193.62 1208.18 L1194.2 1208.18 L1194.79 1208.18 L1195.37 1208.18 L1195.96 1208.18 L1196.55 1208.18 L1197.13 1208.18 L1197.72 1208.18 L1198.31 1208.18 L1198.89 1208.18 L1199.48 1208.18 L1200.07 1208.18 L1200.65 1208.18 L1201.24 1208.18 L1201.83 1208.18 L1202.41 1208.18 L1203 1208.18 L1203.58 1208.18 L1204.17 1208.18 L1204.76 1208.18 L1205.34 1208.18 L1205.93 1208.18 L1206.52 1208.18 L1207.1 1208.18 L1207.69 1208.18 L1208.28 1208.18 L1208.86 1208.18 L1209.45 1208.18 L1210.03 1208.18 L1210.62 1208.18 L1211.21 1208.18 L1211.79 1208.18 L1212.38 1208.18 L1212.97 1208.18 L1213.55 1208.18 L1214.14 1208.18 L1214.73 1208.18 L1215.31 1208.18 L1215.9 1208.18 L1216.49 1208.18 L1217.07 1208.18 L1217.66 1208.18 L1218.24 1208.18 L1218.83 1208.18 L1219.42 1208.18 L1220 1208.18 L1220.59 1208.18 L1221.18 1208.18 L1221.76 1208.18 L1222.35 1208.18 L1222.94 1208.18 L1223.52 1208.18 L1224.11 1208.18 L1224.7 1208.18 L1225.28 1208.18 L1225.87 1208.18 L1226.45 1208.18 L1227.04 1208.18 L1227.63 1208.18 L1228.21 1208.18 L1228.8 1208.18 L1229.39 1208.18 L1229.97 1208.18 L1230.56 1208.18 L1231.15 1208.18 L1231.73 1208.18 L1232.32 1208.18 L1232.91 1208.18 L1233.49 1208.18 L1234.08 1208.18 L1234.66 1208.18 L1235.25 1208.18 L1235.84 1208.18 L1236.42 1208.18 L1237.01 1208.18 L1237.6 1208.18 L1238.18 1208.18 L1238.77 1208.18 L1239.36 1208.18 L1239.94 1208.18 L1240.53 1208.18 L1241.11 1208.18 L1241.7 1208.18 L1242.29 1208.18 L1242.87 1208.18 L1243.46 1208.18 L1244.05 1208.18 L1244.63 1208.18 L1245.22 1208.18 L1245.81 1208.18 L1246.39 1208.18 L1246.98 1208.18 L1247.57 1208.18 L1248.15 1208.18 L1248.74 1208.18 L1249.32 1208.18 L1249.91 1208.18 L1250.5 1208.18 L1251.08 1208.18 L1251.67 1208.18 L1252.26 1208.18 L1252.84 1208.18 L1253.43 1208.18 L1254.02 1208.18 L1254.6 1208.18 L1255.19 1208.18 L1255.78 1208.18 L1256.36 1208.18 L1256.95 1208.18 L1257.53 1208.18 L1258.12 1208.18 L1258.71 1208.18 L1259.29 1208.18 L1259.88 1208.18 L1260.47 1208.18 L1261.05 1208.18 L1261.64 1208.18 L1262.23 1208.18 L1262.81 1208.18 L1263.4 1208.18 L1263.98 1208.18 L1264.57 1208.18 L1265.16 1208.18 L1265.74 1208.18 L1266.33 1208.18 L1266.92 1208.18 L1267.5 1208.18 L1268.09 1208.18 L1268.68 1208.18 L1269.26 1208.18 L1269.85 1208.18 L1270.44 1208.18 L1271.02 1208.18 L1271.61 1208.18 L1272.19 1208.18 L1272.78 1208.18 L1273.37 1208.18 L1273.95 1208.18 L1274.54 1208.18 L1275.13 1208.18 L1275.71 1208.18 L1276.3 1208.18 L1276.89 1208.18 L1277.47 1208.18 L1278.06 1208.18 L1278.65 1208.18 L1279.23 1208.18 L1279.82 1208.18 L1280.4 1208.18 L1280.99 1208.18 L1281.58 1208.18 L1282.16 1208.18 L1282.75 1208.18 L1283.34 1208.18 L1283.92 1208.18 L1284.51 1208.18 L1285.1 1208.18 L1285.68 1208.18 L1286.27 1208.18 L1286.86 1208.18 L1287.44 1208.18 L1288.03 1208.18 L1288.61 1208.18 L1289.2 1208.18 L1289.79 1208.18 L1290.37 1208.18 L1290.96 1208.18 L1291.55 1208.18 L1292.13 1208.18 L1292.72 1208.18 L1293.31 1208.18 L1293.89 1208.18 L1294.48 1208.18 L1295.06 1208.18 L1295.65 1208.18 L1296.24 1208.18 L1296.82 1208.18 L1297.41 1208.18 L1298 1208.18 L1298.58 1208.18 L1299.17 1208.18 L1299.76 1208.18 L1300.34 1208.18 L1300.93 1208.18 L1301.52 1208.18 L1302.1 1208.18 L1302.69 1208.18 L1303.27 1208.18 L1303.86 1208.18 L1304.45 1208.18 L1305.03 1208.18 L1305.62 1208.18 L1306.21 1208.18 L1306.79 1208.18 L1307.38 1208.18 L1307.97 1208.18 L1308.55 1208.18 L1309.14 1208.18 L1309.73 1208.18 L1310.31 1208.18 L1310.9 1208.18 L1311.48 1208.18 L1312.07 1208.18 L1312.66 1208.18 L1313.24 1208.18 L1313.83 1208.18 L1314.42 1208.18 L1315 1208.18 L1315.59 1208.18 L1316.18 1208.18 L1316.76 1208.18 L1317.35 1208.18 L1317.93 1208.18 L1318.52 1208.18 L1319.11 1208.18 L1319.69 1208.18 L1320.28 1208.18 L1320.87 1208.18 L1321.45 1208.18 L1322.04 1208.18 L1322.63 1208.18 L1323.21 1208.18 L1323.8 1208.18 L1324.39 1208.18 L1324.97 1208.18 L1325.56 1208.18 L1326.14 1208.18 L1326.73 1208.18 L1327.32 1208.18 L1327.9 1208.18 L1328.49 1208.18 L1329.08 1208.18 L1329.66 1208.18 L1330.25 1208.18 L1330.84 1208.18 L1331.42 1208.18 L1332.01 1208.18 L1332.6 1208.18 L1333.18 1208.18 L1333.77 1208.18 L1334.35 1208.18 L1334.94 1208.18 L1335.53 1208.18 L1336.11 1208.18 L1336.7 1208.18 L1337.29 1208.18 L1337.87 1208.18 L1338.46 1208.18 L1339.05 1208.18 L1339.63 1208.18 L1340.22 1208.18 L1340.8 1208.18 L1341.39 1208.18 L1341.98 1208.18 L1342.56 1208.18 L1343.15 1208.18 L1343.74 1208.18 L1344.32 1208.18 L1344.91 1208.18 L1345.5 1208.18 L1346.08 1208.18 L1346.67 1208.18 L1347.26 1208.18 L1347.84 1208.18 L1348.43 1208.18 L1349.01 1208.18 L1349.6 1208.18 L1350.19 1208.18 L1350.77 1208.18 L1351.36 1208.18 L1351.95 1208.18 L1352.53 1208.18 L1353.12 1208.18 L1353.71 1208.18 L1354.29 1208.18 L1354.88 1208.18 L1355.47 1208.18 L1356.05 1208.18 L1356.64 1208.18 L1357.22 1208.18 L1357.81 1208.18 L1358.4 1208.18 L1358.98 1208.18 L1359.57 1208.18 L1360.16 1208.18 L1360.74 1208.18 L1361.33 1208.18 L1361.92 1208.18 L1362.5 1208.18 L1363.09 1208.18 L1363.68 1208.18 L1364.26 1208.18 L1364.85 1208.18 L1365.43 1208.18 L1366.02 1208.18 L1366.61 1208.18 L1367.19 1208.18 L1367.78 1208.18 L1368.37 1208.18 L1368.95 1208.18 L1369.54 1208.18 L1370.13 1208.18 L1370.71 1208.18 L1371.3 1208.18 L1371.88 1208.18 L1372.47 1208.18 L1373.06 1208.18 L1373.64 1208.18 L1374.23 1208.18 L1374.82 1208.18 L1375.4 1208.18 L1375.99 1208.18 L1376.58 1208.18 L1377.16 1208.18 L1377.75 1208.18 L1378.34 1208.18 L1378.92 1208.18 L1379.51 1208.18 L1380.09 1208.18 L1380.68 1208.18 L1381.27 1208.18 L1381.85 1208.18 L1382.44 1208.18 L1383.03 1208.18 L1383.61 1208.18 L1384.2 1208.18 L1384.79 1208.18 L1385.37 1208.18 L1385.96 1208.18 L1386.55 1208.18 L1387.13 1208.18 L1387.72 1208.18 L1388.3 1208.18 L1388.89 1208.18 L1389.48 1208.18 L1390.06 1208.18 L1390.65 1208.18 L1391.24 1208.18 L1391.82 1208.18 L1392.41 1208.18 L1393 1208.18 L1393.58 1208.18 L1394.17 1208.18 L1394.75 1208.18 L1395.34 1208.18 L1395.93 1208.18 L1396.51 1208.18 L1397.1 1208.18 L1397.69 1208.18 L1398.27 1208.18 L1398.86 1208.18 L1399.45 1208.18 L1400.03 1208.18 L1400.62 1208.18 L1401.21 1208.18 L1401.79 1208.18 L1402.38 1208.18 L1402.96 1208.18 L1403.55 1208.18 L1404.14 1208.18 L1404.72 1208.18 L1405.31 1208.18 L1405.9 1208.18 L1406.48 1208.18 L1407.07 1208.18 L1407.66 1208.18 L1408.24 1208.18 L1408.83 1208.18 L1409.42 1208.18 L1410 1208.18 L1410.59 1208.18 L1411.17 1208.18 L1411.76 1208.18 L1412.35 1208.18 L1412.93 1208.18 L1413.52 1208.18 L1414.11 1208.18 L1414.69 1208.18 L1415.28 1208.18 L1415.87 1208.18 L1416.45 1208.18 L1417.04 1208.18 L1417.63 1208.18 L1418.21 1208.18 L1418.8 1208.18 L1419.38 1208.18 L1419.97 1208.18 L1420.56 1208.18 L1421.14 1208.18 L1421.73 1208.18 L1422.32 1208.18 L1422.9 1208.18 L1423.49 1208.18 L1424.08 1208.18 L1424.66 1208.18 L1425.25 1208.18 L1425.83 1208.18 L1426.42 1208.18 L1427.01 1208.18 L1427.59 1208.18 L1428.18 1208.18 L1428.77 1208.18 L1429.35 1208.18 L1429.94 1208.18 L1430.53 1208.18 L1431.11 1208.18 L1431.7 1208.18 L1432.29 1208.18 L1432.87 1208.18 L1433.46 1208.18 L1434.04 1208.18 L1434.63 1208.18 L1435.22 1208.18 L1435.8 1208.18 L1436.39 1208.18 L1436.98 1208.18 L1437.56 1208.18 L1438.15 1208.18 L1438.74 1208.18 L1439.32 1208.18 L1439.91 1208.18 L1440.5 1208.18 L1441.08 1208.18 L1441.67 1208.18 L1442.25 1208.18 L1442.84 1208.18 L1443.43 1208.18 L1444.01 1208.18 L1444.6 1208.18 L1445.19 1208.18 L1445.77 1208.18 L1446.36 1208.18 L1446.95 1208.18 L1447.53 1208.18 L1448.12 1208.18 L1448.7 1208.18 L1449.29 1208.18 L1449.88 1208.18 L1450.46 1208.18 L1451.05 1208.18 L1451.64 1208.18 L1452.22 1208.18 L1452.81 1208.18 L1453.4 1208.18 L1453.98 1208.18 L1454.57 1208.18 L1455.16 1208.18 L1455.74 1208.18 L1456.33 1208.18 L1456.91 1208.18 L1457.5 1208.18 L1458.09 1208.18 L1458.67 1208.18 L1459.26 1208.18 L1459.85 1208.18 L1460.43 1208.18 L1461.02 1208.18 L1461.61 1208.18 L1462.19 1208.18 L1462.78 1208.18 L1463.37 1208.18 L1463.95 1208.18 L1464.54 1208.18 L1465.12 1208.18 L1465.71 1208.18 L1466.3 1208.18 L1466.88 1208.18 L1467.47 1208.18 L1468.06 1208.18 L1468.64 1208.18 L1469.23 1208.18 L1469.82 1208.18 L1470.4 1208.18 L1470.99 1208.18 L1471.57 1208.18 L1472.16 1208.18 L1472.75 1208.18 L1473.33 1208.18 L1473.92 1208.18 L1474.51 1208.18 L1475.09 1208.18 L1475.68 1208.18 L1476.27 1208.18 L1476.85 1208.18 L1477.44 1208.18 L1478.03 1208.18 L1478.61 1208.18 L1479.2 1208.18 L1479.78 1208.18 L1480.37 1208.18 L1480.96 1208.18 L1481.54 1208.18 L1482.13 1208.18 L1482.72 1208.18 L1483.3 1208.18 L1483.89 1208.18 L1484.48 1208.18 L1485.06 1208.18 L1485.65 1208.18 L1486.24 1208.18 L1486.82 1208.18 L1487.41 1208.18 L1487.99 1208.18 L1488.58 1208.18 L1489.17 1208.18 L1489.75 1208.18 L1490.34 1208.18 L1490.93 1208.18 L1491.51 1208.18 L1492.1 1208.18 L1492.69 1208.18 L1493.27 1208.18 L1493.86 1208.18 L1494.45 1208.18 L1495.03 1208.18 L1495.62 1208.18 L1496.2 1208.18 L1496.79 1208.18 L1497.38 1208.18 L1497.96 1208.18 L1498.55 1208.18 L1499.14 1208.18 L1499.72 1208.18 L1500.31 1208.18 L1500.9 1208.18 L1501.48 1208.18 L1502.07 1208.18 L1502.65 1208.18 L1503.24 1208.18 L1503.83 1208.18 L1504.41 1208.18 L1505 1208.18 L1505.59 1208.18 L1506.17 1208.18 L1506.76 1208.18 L1507.35 1208.18 L1507.93 1208.18 L1508.52 1208.18 L1509.11 1208.18 L1509.69 1208.18 L1510.28 1208.18 L1510.86 1208.18 L1511.45 1208.18 L1512.04 1208.18 L1512.62 1208.18 L1513.21 1208.18 L1513.8 1208.18 L1514.38 1208.18 L1514.97 1208.18 L1515.56 1208.18 L1516.14 1208.18 L1516.73 1208.18 L1517.32 1208.18 L1517.9 1208.18 L1518.49 1208.18 L1519.07 1208.18 L1519.66 1208.18 L1520.25 1208.18 L1520.83 1208.18 L1521.42 1208.18 L1522.01 1208.18 L1522.59 1208.18 L1523.18 1208.18 L1523.77 1208.18 L1524.35 1208.18 L1524.94 1208.18 L1525.52 1208.18 L1526.11 1208.18 L1526.7 1208.18 L1527.28 1208.18 L1527.87 1208.18 L1528.46 1208.18 L1529.04 1208.18 L1529.63 1208.18 L1530.22 1208.18 L1530.8 1208.18 L1531.39 1208.18 L1531.98 1208.18 L1532.56 1208.18 L1533.15 1208.18 L1533.73 1208.18 L1534.32 1208.18 L1534.91 1208.18 L1535.49 1208.18 L1536.08 1208.18 L1536.67 1208.18 L1537.25 1208.18 L1537.84 1208.18 L1538.43 1208.18 L1539.01 1208.18 L1539.6 1208.18 L1540.19 1208.18 L1540.77 1208.18 L1541.36 1208.18 L1541.94 1208.18 L1542.53 1208.18 L1543.12 1208.18 L1543.7 1208.18 L1544.29 1208.18 L1544.88 1208.18 L1545.46 1208.18 L1546.05 1208.18 L1546.64 1208.18 L1547.22 1208.18 L1547.81 1208.18 L1548.4 1208.18 L1548.98 1208.18 L1549.57 1208.18 L1550.15 1208.18 L1550.74 1208.18 L1551.33 1208.18 L1551.91 1208.18 L1552.5 1208.18 L1553.09 1208.18 L1553.67 1208.18 L1554.26 1208.18 L1554.85 1208.18 L1555.43 1208.18 L1556.02 1208.18 L1556.6 1208.18 L1557.19 1208.18 L1557.78 1208.18 L1558.36 1208.18 L1558.95 1208.18 L1559.54 1208.18 L1560.12 1208.18 L1560.71 1208.18 L1561.3 1208.18 L1561.88 1208.18 L1562.47 1208.18 L1563.06 1208.18 L1563.64 1208.18 L1564.23 1208.18 L1564.81 1208.18 L1565.4 1208.18 L1565.99 1208.18 L1566.57 1208.18 L1567.16 1208.18 L1567.75 1208.18 L1568.33 1208.18 L1568.92 1208.18 L1569.51 1208.18 L1570.09 1208.18 L1570.68 1208.18 L1571.27 1208.18 L1571.85 1208.18 L1572.44 1208.18 L1573.02 1208.18 L1573.61 1208.18 L1574.2 1208.18 L1574.78 1208.18 L1575.37 1208.18 L1575.96 1208.18 L1576.54 1208.18 L1577.13 1208.18 L1577.72 1208.18 L1578.3 1208.18 L1578.89 1208.18 L1579.47 1208.18 L1580.06 1208.18 L1580.65 1208.18 L1581.23 1208.18 L1581.82 1208.18 L1582.41 1208.18 L1582.99 1208.18 L1583.58 1208.18 L1584.17 1208.18 L1584.75 1208.18 L1585.34 1208.18 L1585.93 1208.18 L1586.51 1208.18 L1587.1 1208.18 L1587.68 1208.18 L1588.27 1208.18 L1588.86 1208.18 L1589.44 1208.18 L1590.03 1208.18 L1590.62 1208.18 L1591.2 1208.18 L1591.79 1208.18 L1592.38 1208.18 L1592.96 1208.18 L1593.55 1208.18 L1594.14 1208.18 L1594.72 1208.18 L1595.31 1208.18 L1595.89 1208.18 L1596.48 1208.18 L1597.07 1208.18 L1597.65 1208.18 L1598.24 1208.18 L1598.83 1208.18 L1599.41 1208.18 L1600 1208.18 L1600.59 1208.18 L1601.17 1208.18 L1601.76 1208.18 L1602.34 1208.18 L1602.93 1208.18 L1603.52 1208.18 L1604.1 1208.18 L1604.69 1208.18 L1605.28 1208.18 L1605.86 1208.18 L1606.45 1208.18 L1607.04 1208.18 L1607.62 1208.18 L1608.21 1208.18 L1608.8 1208.18 L1609.38 1208.18 L1609.97 1208.18 L1610.55 1208.18 L1611.14 1208.18 L1611.73 1208.18 L1612.31 1208.18 L1612.9 1208.18 L1613.49 1208.18 L1614.07 1208.18 L1614.66 1208.18 L1615.25 1208.18 L1615.83 1208.18 L1616.42 1208.18 L1617.01 1208.18 L1617.59 1208.18 L1618.18 1208.18 L1618.76 1208.18 L1619.35 1208.18 L1619.94 1208.18 L1620.52 1208.18 L1621.11 1208.18 L1621.7 1208.18 L1622.28 1208.18 L1622.87 1208.18 L1623.46 1208.18 L1624.04 1208.18 L1624.63 1208.18 L1625.22 1208.18 L1625.8 1208.18 L1626.39 1208.18 L1626.97 1208.18 L1627.56 1208.18 L1628.15 1208.18 L1628.73 1208.18 L1629.32 1208.18 L1629.91 1208.18 L1630.49 1208.18 L1631.08 1208.18 L1631.67 1208.18 L1632.25 1208.18 L1632.84 1208.18 L1633.42 1208.18 L1634.01 1208.18 L1634.6 1208.18 L1635.18 1208.18 L1635.77 1208.18 L1636.36 1208.18 L1636.94 1208.18 L1637.53 1208.18 L1638.12 1208.18 L1638.7 1208.18 L1639.29 1208.18 L1639.88 1208.18 L1640.46 1208.18 L1641.05 1208.18 L1641.63 1208.18 L1642.22 1208.18 L1642.81 1208.18 L1643.39 1208.18 L1643.98 1208.18 L1644.57 1208.18 L1645.15 1208.18 L1645.74 1208.18 L1646.33 1208.18 L1646.91 1208.18 L1647.5 1208.18 L1648.09 1208.18 L1648.67 1208.18 L1649.26 1208.18 L1649.84 1208.18 L1650.43 1208.18 L1651.02 1208.18 L1651.6 1208.18 L1652.19 1208.18 L1652.78 1208.18 L1653.36 1208.18 L1653.95 1208.18 L1654.54 1208.18 L1655.12 1208.18 L1655.71 1208.18 L1656.29 1208.18 L1656.88 1208.18 L1657.47 1208.18 L1658.05 1208.18 L1658.64 1208.18 L1659.23 1208.18 L1659.81 1208.18 L1660.4 1208.18 L1660.99 1208.18 L1661.57 1208.18 L1662.16 1208.18 L1662.75 1208.18 L1663.33 1208.18 L1663.92 1208.18 L1664.5 1208.18 L1665.09 1208.18 L1665.68 1208.18 L1666.26 1208.18 L1666.85 1208.18 L1667.44 1208.18 L1668.02 1208.18 L1668.61 1208.18 L1669.2 1208.18 L1669.78 1208.18 L1670.37 1208.18 L1670.96 1208.18 L1671.54 1208.18 L1672.13 1208.18 L1672.71 1208.18 L1673.3 1208.18 L1673.89 1208.18 L1674.47 1208.18 L1675.06 1208.18 L1675.65 1208.18 L1676.23 1208.18 L1676.82 1208.18 L1677.41 1208.18 L1677.99 1208.18 L1678.58 1208.18 L1679.17 1208.18 L1679.75 1208.18 L1680.34 1208.18 L1680.92 1208.18 L1681.51 1208.18 L1682.1 1208.18 L1682.68 1208.18 L1683.27 1208.18 L1683.86 1208.18 L1684.44 1208.18 L1685.03 1208.18 L1685.62 1208.18 L1686.2 1208.18 L1686.79 1208.18 L1687.37 1208.18 L1687.96 1208.18 L1688.55 1208.18 L1689.13 1208.18 L1689.72 1208.18 L1690.31 1208.18 L1690.89 1208.18 L1691.48 1208.18 L1692.07 1208.18 L1692.65 1208.18 L1693.24 1208.18 L1693.83 1208.18 L1694.41 1208.18 L1695 1208.18 L1695.58 1208.18 L1696.17 1208.18 L1696.76 1208.18 L1697.34 1208.18 L1697.93 1208.18 L1698.52 1208.18 L1699.1 1208.18 L1699.69 1208.18 L1700.28 1208.18 L1700.86 1208.18 L1701.45 1208.18 L1702.04 1208.18 L1702.62 1208.18 L1703.21 1208.18 L1703.79 1208.18 L1704.38 1208.18 L1704.97 1208.18 L1705.55 1208.18 L1706.14 1208.18 L1706.73 1208.18 L1707.31 1208.18 L1707.9 1208.18 L1708.49 1208.18 L1709.07 1208.18 L1709.66 1208.18 L1710.24 1208.18 L1710.83 1208.18 L1711.42 1208.18 L1712 1208.18 L1712.59 1208.18 L1713.18 1208.18 L1713.76 1208.18 L1714.35 1208.18 L1714.94 1208.18 L1715.52 1208.18 L1716.11 1208.18 L1716.7 1208.18 L1717.28 1208.18 L1717.87 1208.18 L1718.45 1208.18 L1719.04 1208.18 L1719.63 1208.18 L1720.21 1208.18 L1720.8 1208.18 L1721.39 1208.18 L1721.97 1208.18 L1722.56 1208.18 L1723.15 1208.18 L1723.73 1208.18 L1724.32 1208.18 L1724.91 1208.18 L1725.49 1208.18 L1726.08 1208.18 L1726.66 1208.18 L1727.25 1208.18 L1727.84 1208.18 L1728.42 1208.18 L1729.01 1208.18 L1729.6 1208.18 L1730.18 1208.18 L1730.77 1208.18 L1731.36 1208.18 L1731.94 1208.18 L1732.53 1208.18 L1733.11 1208.18 L1733.7 1208.18 L1734.29 1208.18 L1734.87 1208.18 L1735.46 1208.18 L1736.05 1208.18 L1736.63 1208.18 L1737.22 1208.18 L1737.81 1208.18 L1738.39 1208.18 L1738.98 1208.18 L1739.57 1208.18 L1740.15 1208.18 L1740.74 1208.18 L1741.32 1208.18 L1741.91 1208.18 L1742.5 1208.18 L1743.08 1208.18 L1743.67 1208.18 L1744.26 1208.18 L1744.84 1208.18 L1745.43 1208.18 L1746.02 1208.18 L1746.6 1208.18 L1747.19 1208.18 L1747.78 1208.18 L1748.36 1208.18 L1748.95 1208.18 L1749.53 1208.18 L1750.12 1208.18 L1750.71 1208.18 L1751.29 1208.18 L1751.88 1208.18 L1752.47 1208.18 L1753.05 1208.18 L1753.64 1208.18 L1754.23 1208.18 L1754.81 1208.18 L1755.4 1208.18 L1755.99 1208.18 L1756.57 1208.18 L1757.16 1208.18 L1757.74 1208.18 L1758.33 1208.18 L1758.92 1208.18 L1759.5 1208.18 L1760.09 1208.18 L1760.68 1208.18 L1761.26 1208.18 L1761.85 1208.18 L1762.44 1208.18 L1763.02 1208.18 L1763.61 1208.18 L1764.19 1208.18 L1764.78 1208.18 L1765.37 1208.18 L1765.95 1208.18 L1766.54 1208.18 L1767.13 1208.18 L1767.71 1208.18 L1768.3 1208.18 L1768.89 1208.18 L1769.47 1208.18 L1770.06 1208.18 L1770.65 1208.18 L1771.23 1208.18 L1771.82 1208.18 L1772.4 1208.18 L1772.99 1208.18 L1773.58 1208.18 L1774.16 1208.18 L1774.75 1208.18 L1775.34 1208.18 L1775.92 1208.18 L1776.51 1208.18 L1777.1 1208.18 L1777.68 1208.18 L1778.27 1208.18 L1778.86 1208.18 L1779.44 1208.18 L1780.03 1208.18 L1780.61 1208.18 L1781.2 1208.18 L1781.79 1208.18 L1782.37 1208.18 L1782.96 1208.18 L1783.55 1208.18 L1784.13 1208.18 L1784.72 1208.18 L1785.31 1208.18 L1785.89 1208.18 L1786.48 1208.18 L1787.06 1208.18 L1787.65 1208.18 L1788.24 1208.18 L1788.82 1208.18 L1789.41 1208.18 L1790 1208.18 L1790.58 1208.18 L1791.17 1208.18 L1791.76 1208.18 L1792.34 1208.18 L1792.93 1208.18 L1793.52 1208.18 L1794.1 1208.18 L1794.69 1208.18 L1795.27 1208.18 L1795.86 1208.18 L1796.45 1208.18 L1797.03 1208.18 L1797.62 1208.18 L1798.21 1208.18 L1798.79 1208.18 L1799.38 1208.18 L1799.97 1208.18 L1800.55 1208.18 L1801.14 1208.18 L1801.73 1208.18 L1802.31 1208.18 L1802.9 1208.18 L1803.48 1208.18 L1804.07 1208.18 L1804.66 1208.18 L1805.24 1208.18 L1805.83 1208.18 L1806.42 1208.18 L1807 1208.18 L1807.59 1208.18 L1808.18 1208.18 L1808.76 1208.18 L1809.35 1208.18 L1809.94 1208.18 L1810.52 1208.18 L1811.11 1208.18 L1811.69 1208.18 L1812.28 1208.18 L1812.87 1208.18 L1813.45 1208.18 L1814.04 1208.18 L1814.63 1208.18 L1815.21 1208.18 L1815.8 1208.18 L1816.39 1208.18 L1816.97 1208.18 L1817.56 1208.18 L1818.14 1208.18 L1818.73 1208.18 L1819.32 1208.18 L1819.9 1208.18 L1820.49 1208.18 L1821.08 1208.18 L1821.66 1208.18 L1822.25 1208.18 L1822.84 1208.18 L1823.42 1208.18 L1824.01 1208.18 L1824.6 1208.18 L1825.18 1208.18 L1825.77 1208.18 L1826.35 1208.18 L1826.94 1208.18 L1827.53 1208.18 L1828.11 1208.18 L1828.7 1208.18 L1829.29 1208.18 L1829.87 1208.18 L1830.46 1208.18 L1831.05 1208.18 L1831.63 1208.18 L1832.22 1208.18 L1832.81 1208.18 L1833.39 1208.18 L1833.98 1208.18 L1834.56 1208.18 L1835.15 1208.18 L1835.74 1208.18 L1836.32 1208.18 L1836.91 1208.18 L1837.5 1208.18 L1838.08 1208.18 L1838.67 1208.18 L1839.26 1208.18 L1839.84 1208.18 L1840.43 1208.18 L1841.01 1208.18 L1841.6 1208.18 L1842.19 1208.18 L1842.77 1208.18 L1843.36 1208.18 L1843.95 1208.18 L1844.53 1208.18 L1845.12 1208.18 L1845.71 1208.18 L1846.29 1208.18 L1846.88 1208.18 L1847.47 1208.18 L1848.05 1208.18 L1848.64 1208.18 L1849.22 1208.18 L1849.81 1208.18 L1850.4 1208.18 L1850.98 1208.18 L1851.57 1208.18 L1852.16 1208.18 L1852.74 1208.18 L1853.33 1208.18 L1853.92 1208.18 L1854.5 1208.18 L1855.09 1208.18 L1855.68 1208.18 L1856.26 1208.18 L1856.85 1208.18 L1857.43 1208.18 L1858.02 1208.18 L1858.61 1208.18 L1859.19 1208.18 L1859.78 1208.18 L1860.37 1208.18 L1860.95 1208.18 L1861.54 1208.18 L1862.13 1208.18 L1862.71 1208.18 L1863.3 1208.18 L1863.88 1208.18 L1864.47 1208.18 L1865.06 1208.18 L1865.64 1208.18 L1866.23 1208.18 L1866.82 1208.18 L1867.4 1208.18 L1867.99 1208.18 L1868.58 1208.18 L1869.16 1208.18 L1869.75 1208.18 L1870.34 1208.18 L1870.92 1208.18 L1871.51 1208.18 L1872.09 1208.18 L1872.68 1208.18 L1873.27 1208.18 L1873.85 1208.18 L1874.44 1208.18 L1875.03 1208.18 L1875.61 1208.18 L1876.2 1208.18 L1876.79 1208.18 L1877.37 1208.18 L1877.96 1208.18 L1878.55 1208.18 L1879.13 1208.18 L1879.72 1208.18 L1880.3 1208.18 L1880.89 1208.18 L1881.48 1208.18 L1882.06 1208.18 L1882.65 1208.18 L1883.24 1208.18 L1883.82 1208.18 L1884.41 1208.18 L1885 1208.18 L1885.58 1208.18 L1886.17 1208.18 L1886.76 1208.18 L1887.34 1208.18 L1887.93 1208.18 L1888.51 1208.18 L1889.1 1208.18 L1889.69 1208.18 L1890.27 1208.18 L1890.86 1208.18 L1891.45 1208.18 L1892.03 1208.18 L1892.62 1208.18 L1893.21 1208.18 L1893.79 1208.18 L1894.38 1208.18 L1894.96 1208.18 L1895.55 1208.18 L1896.14 1208.18 L1896.72 1208.18 L1897.31 1208.18 L1897.9 1208.18 L1898.48 1208.18 L1899.07 1208.18 L1899.66 1208.18 L1900.24 1208.18 L1900.83 1208.18 L1901.42 1208.18 L1902 1208.18 L1902.59 1208.18 L1903.17 1208.18 L1903.76 1208.18 L1904.35 1208.18 L1904.93 1208.18 L1905.52 1208.18 L1906.11 1208.18 L1906.69 1208.18 L1907.28 1208.18 L1907.87 1208.18 L1908.45 1208.18 L1909.04 1208.18 L1909.63 1208.18 L1910.21 1208.18 L1910.8 1208.18 L1911.38 1208.18 L1911.97 1208.18 L1912.56 1208.18 L1913.14 1208.18 L1913.73 1208.18 L1914.32 1208.18 L1914.9 1208.18 L1915.49 1208.18 L1916.08 1208.18 L1916.66 1208.18 L1917.25 1208.18 L1917.83 1208.18 L1918.42 1208.18 L1919.01 1208.18 L1919.59 1208.18 L1920.18 1208.18 L1920.77 1208.18 L1921.35 1208.18 L1921.94 1208.18 L1922.53 1208.18 L1923.11 1208.18 L1923.7 1208.18 L1924.29 1208.18 L1924.87 1208.18 L1925.46 1208.18 L1926.04 1208.18 L1926.63 1208.18 L1927.22 1208.18 L1927.8 1208.18 L1928.39 1208.18 L1928.98 1208.18 L1929.56 1208.18 L1930.15 1208.18 L1930.74 1208.18 L1931.32 1208.18 L1931.91 1208.18 L1932.5 1208.18 L1933.08 1208.18 L1933.67 1208.18 L1934.25 1208.18 L1934.84 1208.18 L1935.43 1208.18 L1936.01 1208.18 L1936.6 1208.18 L1937.19 1208.18 L1937.77 1208.18 L1938.36 1208.18 L1938.95 1208.18 L1939.53 1208.18 L1940.12 1208.18 L1940.71 1208.18 L1941.29 1208.18 L1941.88 1208.18 L1942.46 1208.18 L1943.05 1208.18 L1943.64 1208.18 L1944.22 1208.18 L1944.81 1208.18 L1945.4 1208.18 L1945.98 1208.18 L1946.57 1208.18 L1947.16 1208.18 L1947.74 1208.18 L1948.33 1208.18 L1948.91 1208.18 L1949.5 1208.18 L1950.09 1208.18 L1950.67 1208.18 L1951.26 1208.18 L1951.85 1208.18 L1952.43 1208.18 L1953.02 1208.18 L1953.61 1208.18 L1954.19 1208.18 L1954.78 1208.18 L1955.37 1208.18 L1955.95 1208.18 L1956.54 1208.18 L1957.12 1208.18 L1957.71 1208.18 L1958.3 1208.18 L1958.88 1208.18 L1959.47 1208.18 L1960.06 1208.18 L1960.64 1208.18 L1961.23 1208.18 L1961.82 1208.18 L1962.4 1208.18 L1962.99 1208.18 L1963.58 1208.18 L1964.16 1208.18 L1964.75 1208.18 L1965.33 1208.18 L1965.92 1208.18 L1966.51 1208.18 L1967.09 1208.18 L1967.68 1208.18 L1968.27 1208.18 L1968.85 1208.18 L1969.44 1208.18 L1970.03 1208.18 L1970.61 1208.18 L1971.2 1208.18 L1971.78 1208.18 L1972.37 1208.18 L1972.96 1208.18 L1973.54 1208.18 L1974.13 1208.18 L1974.72 1208.18 L1975.3 1208.18 L1975.89 1208.18 L1976.48 1208.18 L1977.06 1208.18 L1977.65 1208.18 L1978.24 1208.18 L1978.82 1208.18 L1979.41 1208.18 L1979.99 1208.18 L1980.58 1208.18 L1981.17 1208.18 L1981.75 1208.18 L1982.34 1208.18 L1982.93 1208.18 L1983.51 1208.18 L1984.1 1208.18 L1984.69 1208.18 L1985.27 1208.18 L1985.86 1208.18 L1986.45 1208.18 L1987.03 1208.18 L1987.62 1208.18 L1988.2 1208.18 L1988.79 1208.18 L1989.38 1208.18 L1989.96 1208.18 L1990.55 1208.18 L1991.14 1208.18 L1991.72 1208.18 L1992.31 1208.18 L1992.9 1208.18 L1993.48 1208.18 L1994.07 1208.18 L1994.65 1208.18 L1995.24 1208.18 L1995.83 1208.18 L1996.41 1208.18 L1997 1208.18 L1997.59 1208.18 L1998.17 1208.18 L1998.76 1208.18 L1999.35 1208.18 L1999.93 1208.18 L2000.52 1208.18 L2001.11 1208.18 L2001.69 1208.18 L2002.28 1208.18 L2002.86 1208.18 L2003.45 1208.18 L2004.04 1208.18 L2004.62 1208.18 L2005.21 1208.18 L2005.8 1208.18 L2006.38 1208.18 L2006.97 1208.18 L2007.56 1208.18 L2008.14 1208.18 L2008.73 1208.18 L2009.32 1208.18 L2009.9 1208.18 L2010.49 1208.18 L2011.07 1208.18 L2011.66 1208.18 L2012.25 1208.18 L2012.83 1208.18 L2013.42 1208.18 L2014.01 1208.18 L2014.59 1208.18 L2015.18 1208.18 L2015.77 1208.18 L2016.35 1208.18 L2016.94 1208.18 L2017.53 1208.18 L2018.11 1208.18 L2018.7 1208.18 L2019.28 1208.18 L2019.87 1208.18 L2020.46 1208.18 L2021.04 1208.18 L2021.63 1208.18 L2022.22 1208.18 L2022.8 1208.18 L2023.39 1208.18 L2023.98 1208.18 L2024.56 1208.18 L2025.15 1208.18 L2025.73 1208.18 L2026.32 1208.18 L2026.91 1208.18 L2027.49 1208.18 L2028.08 1208.18 L2028.67 1208.18 L2029.25 1208.18 L2029.84 1208.18 L2030.43 1208.18 L2031.01 1208.18 L2031.6 1208.18 L2032.19 1208.18 L2032.77 1208.18 L2033.36 1208.18 L2033.94 1208.18 L2034.53 1208.18 L2035.12 1208.18 L2035.7 1208.18 L2036.29 1208.18 L2036.88 1208.18 L2037.46 1208.18 L2038.05 1208.18 L2038.64 1208.18 L2039.22 1208.18 L2039.81 1208.18 L2040.4 1208.18 L2040.98 1208.18 L2041.57 1208.18 L2042.15 1208.18 L2042.74 1208.18 L2043.33 1208.18 L2043.91 1208.18 L2044.5 1208.18 L2045.09 1208.18 L2045.67 1208.18 L2046.26 1208.18 L2046.85 1208.18 L2047.43 1208.18 L2048.02 1208.18 L2048.6 1208.18 L2049.19 1208.18 L2049.78 1208.18 L2050.36 1208.18 L2050.95 1208.18 L2051.54 1208.18 L2052.12 1208.18 L2052.71 1208.18 L2053.3 1208.18 L2053.88 1208.18 L2054.47 1208.18 L2055.06 1208.18 L2055.64 1208.18 L2056.23 1208.18 L2056.81 1208.18 L2057.4 1208.18 L2057.99 1208.18 L2058.57 1208.18 L2059.16 1208.18 L2059.75 1208.18 L2060.33 1208.18 L2060.92 1208.18 L2061.51 1208.18 L2062.09 1208.18 L2062.68 1208.18 L2063.27 1208.18 L2063.85 1208.18 L2064.44 1208.18 L2065.02 1208.18 L2065.61 1208.18 L2066.2 1208.18 L2066.78 1208.18 L2067.37 1208.18 L2067.96 1208.18 L2068.54 1208.18 L2069.13 1208.18 L2069.72 1208.18 L2070.3 1208.18 L2070.89 1208.18 L2071.48 1208.18 L2072.06 1208.18 L2072.65 1208.18 L2073.23 1208.18 L2073.82 1208.18 L2074.41 1208.18 L2074.99 1208.18 L2075.58 1208.18 L2076.17 1208.18 L2076.75 1208.18 L2077.34 1208.18 L2077.93 1208.18 L2078.51 1208.18 L2079.1 1208.18 L2079.68 1208.18 L2080.27 1208.18 L2080.86 1208.18 L2081.44 1208.18 L2082.03 1208.18 L2082.62 1208.18 L2083.2 1208.18 L2083.79 1208.18 L2084.38 1208.18 L2084.96 1208.18 L2085.55 1208.18 L2086.14 1208.18 L2086.72 1208.18 L2087.31 1208.18 L2087.89 1208.18 L2088.48 1208.18 L2089.07 1208.18 L2089.65 1208.18 L2090.24 1208.18 L2090.83 1208.18 L2091.41 1208.18 L2092 1208.18 L2092.59 1208.18 L2093.17 1208.18 L2093.76 1208.18 L2094.35 1208.18 L2094.93 1208.18 L2095.52 1208.18 L2096.1 1208.18 L2096.69 1208.18 L2097.28 1208.18 L2097.86 1208.18 L2098.45 1208.18 L2099.04 1208.18 L2099.62 1208.18 L2100.21 1208.18 L2100.8 1208.18 L2101.38 1208.18 L2101.97 1208.18 L2102.55 1208.18 L2103.14 1208.18 L2103.73 1208.18 L2104.31 1208.18 L2104.9 1208.18 L2105.49 1208.18 L2106.07 1208.18 L2106.66 1208.18 L2107.25 1208.18 L2107.83 1208.18 L2108.42 1208.18 L2109.01 1208.18 L2109.59 1208.18 L2110.18 1208.18 L2110.76 1208.18 L2111.35 1208.18 L2111.94 1208.18 L2112.52 1208.18 L2113.11 1208.18 L2113.7 1208.18 L2114.28 1208.18 L2114.87 1208.18 L2115.46 1208.18 L2116.04 1208.18 L2116.63 1208.18 L2117.22 1208.18 L2117.8 1208.18 L2118.39 1208.18 L2118.97 1208.18 L2119.56 1208.18 L2120.15 1208.18 L2120.73 1208.18 L2121.32 1208.18 L2121.91 1208.18 L2122.49 1208.18 L2123.08 1208.18 L2123.67 1208.18 L2124.25 1208.18 L2124.84 1208.18 L2125.42 1208.18 L2126.01 1208.18 L2126.6 1208.18 L2127.18 1208.18 L2127.77 1208.18 L2128.36 1208.18 L2128.94 1208.18 L2129.53 1208.18 L2130.12 1208.18 L2130.7 1208.18 L2131.29 1208.18 L2131.88 1208.18 L2132.46 1208.18 L2133.05 1208.18 L2133.63 1208.18 L2134.22 1208.18 L2134.81 1208.18 L2135.39 1208.18 L2135.98 1208.18 L2136.57 1208.18 L2137.15 1208.18 L2137.74 1208.18 L2138.33 1208.18 L2138.91 1208.18 L2139.5 1208.18 L2140.09 1208.18 L2140.67 1208.18 L2141.26 1208.18 L2141.84 1208.18 L2142.43 1208.18 L2143.02 1208.18 L2143.6 1208.18 L2144.19 1208.18 L2144.78 1208.18 L2145.36 1208.18 L2145.95 1208.18 L2146.54 1208.18 L2147.12 1208.18 L2147.71 1208.18 L2148.3 1208.18 L2148.88 1208.18 L2149.47 1208.18 L2150.05 1208.18 L2150.64 1208.18 L2151.23 1208.18 L2151.81 1208.18 L2152.4 1208.18 L2152.99 1208.18 L2153.57 1208.18 L2154.16 1208.18 L2154.75 1208.18 L2155.33 1208.18 L2155.92 1208.18 L2156.5 1208.18 L2157.09 1208.18 L2157.68 1208.18 L2158.26 1208.18 L2158.26 1208.05 L2157.68 1208.05 L2157.09 1208.05 L2156.5 1208.05 L2155.92 1208.05 L2155.33 1208.05 L2154.75 1208.05 L2154.16 1208.05 L2153.57 1208.05 L2152.99 1208.05 L2152.4 1208.05 L2151.81 1208.05 L2151.23 1208.05 L2150.64 1208.05 L2150.05 1208.05 L2149.47 1208.05 L2148.88 1208.05 L2148.3 1208.05 L2147.71 1208.05 L2147.12 1208.05 L2146.54 1208.05 L2145.95 1208.05 L2145.36 1208.05 L2144.78 1208.05 L2144.19 1208.05 L2143.6 1208.05 L2143.02 1208.05 L2142.43 1208.05 L2141.84 1208.05 L2141.26 1208.05 L2140.67 1208.05 L2140.09 1208.05 L2139.5 1208.05 L2138.91 1208.05 L2138.33 1208.05 L2137.74 1208.05 L2137.15 1208.05 L2136.57 1208.05 L2135.98 1208.05 L2135.39 1208.05 L2134.81 1208.05 L2134.22 1208.05 L2133.63 1208.05 L2133.05 1208.05 L2132.46 1208.05 L2131.88 1208.05 L2131.29 1208.05 L2130.7 1208.05 L2130.12 1208.05 L2129.53 1208.05 L2128.94 1208.05 L2128.36 1208.05 L2127.77 1208.05 L2127.18 1208.05 L2126.6 1208.05 L2126.01 1208.05 L2125.42 1208.05 L2124.84 1208.05 L2124.25 1208.05 L2123.67 1208.05 L2123.08 1208.05 L2122.49 1208.05 L2121.91 1208.05 L2121.32 1208.05 L2120.73 1208.05 L2120.15 1208.05 L2119.56 1208.05 L2118.97 1208.05 L2118.39 1208.05 L2117.8 1208.05 L2117.22 1208.05 L2116.63 1208.05 L2116.04 1208.05 L2115.46 1208.05 L2114.87 1208.05 L2114.28 1208.05 L2113.7 1208.05 L2113.11 1208.05 L2112.52 1208.05 L2111.94 1208.05 L2111.35 1208.05 L2110.76 1208.05 L2110.18 1208.05 L2109.59 1208.05 L2109.01 1208.05 L2108.42 1208.05 L2107.83 1208.05 L2107.25 1208.05 L2106.66 1208.05 L2106.07 1208.05 L2105.49 1208.05 L2104.9 1208.05 L2104.31 1208.05 L2103.73 1208.05 L2103.14 1208.05 L2102.55 1208.05 L2101.97 1208.05 L2101.38 1208.05 L2100.8 1208.05 L2100.21 1208.05 L2099.62 1208.05 L2099.04 1208.05 L2098.45 1208.05 L2097.86 1208.05 L2097.28 1208.05 L2096.69 1208.05 L2096.1 1208.05 L2095.52 1208.05 L2094.93 1208.05 L2094.35 1208.05 L2093.76 1208.05 L2093.17 1208.05 L2092.59 1208.05 L2092 1208.05 L2091.41 1208.05 L2090.83 1208.05 L2090.24 1208.05 L2089.65 1208.05 L2089.07 1208.05 L2088.48 1208.05 L2087.89 1208.05 L2087.31 1208.05 L2086.72 1208.05 L2086.14 1208.05 L2085.55 1208.05 L2084.96 1208.05 L2084.38 1208.05 L2083.79 1208.05 L2083.2 1208.05 L2082.62 1208.05 L2082.03 1208.05 L2081.44 1208.05 L2080.86 1208.05 L2080.27 1208.05 L2079.68 1208.05 L2079.1 1208.05 L2078.51 1208.05 L2077.93 1208.05 L2077.34 1208.05 L2076.75 1208.05 L2076.17 1208.05 L2075.58 1208.05 L2074.99 1208.05 L2074.41 1208.05 L2073.82 1208.05 L2073.23 1208.05 L2072.65 1208.05 L2072.06 1208.05 L2071.48 1208.05 L2070.89 1208.05 L2070.3 1208.05 L2069.72 1208.05 L2069.13 1208.05 L2068.54 1208.05 L2067.96 1208.05 L2067.37 1208.05 L2066.78 1208.05 L2066.2 1208.05 L2065.61 1208.05 L2065.02 1208.05 L2064.44 1208.05 L2063.85 1208.05 L2063.27 1208.05 L2062.68 1208.05 L2062.09 1208.05 L2061.51 1208.05 L2060.92 1208.05 L2060.33 1208.05 L2059.75 1208.05 L2059.16 1208.05 L2058.57 1208.05 L2057.99 1208.05 L2057.4 1208.05 L2056.81 1208.05 L2056.23 1208.05 L2055.64 1208.05 L2055.06 1208.05 L2054.47 1208.05 L2053.88 1208.05 L2053.3 1208.05 L2052.71 1208.05 L2052.12 1208.05 L2051.54 1208.05 L2050.95 1208.05 L2050.36 1208.05 L2049.78 1208.05 L2049.19 1208.05 L2048.6 1208.05 L2048.02 1208.05 L2047.43 1208.05 L2046.85 1208.05 L2046.26 1208.05 L2045.67 1208.05 L2045.09 1208.05 L2044.5 1208.05 L2043.91 1208.05 L2043.33 1208.05 L2042.74 1208.05 L2042.15 1208.05 L2041.57 1208.05 L2040.98 1208.05 L2040.4 1208.05 L2039.81 1208.05 L2039.22 1208.05 L2038.64 1208.05 L2038.05 1208.05 L2037.46 1208.05 L2036.88 1208.05 L2036.29 1208.05 L2035.7 1208.05 L2035.12 1208.05 L2034.53 1208.05 L2033.94 1208.05 L2033.36 1208.05 L2032.77 1208.05 L2032.19 1208.05 L2031.6 1208.05 L2031.01 1208.05 L2030.43 1208.05 L2029.84 1208.05 L2029.25 1208.05 L2028.67 1208.05 L2028.08 1208.05 L2027.49 1208.05 L2026.91 1208.05 L2026.32 1208.05 L2025.73 1208.05 L2025.15 1208.05 L2024.56 1208.05 L2023.98 1208.05 L2023.39 1208.05 L2022.8 1208.05 L2022.22 1208.05 L2021.63 1208.05 L2021.04 1208.05 L2020.46 1208.05 L2019.87 1208.05 L2019.28 1208.05 L2018.7 1208.05 L2018.11 1208.05 L2017.53 1208.05 L2016.94 1208.05 L2016.35 1208.05 L2015.77 1208.05 L2015.18 1208.05 L2014.59 1208.05 L2014.01 1208.05 L2013.42 1208.05 L2012.83 1208.05 L2012.25 1208.05 L2011.66 1208.05 L2011.07 1208.05 L2010.49 1208.05 L2009.9 1208.05 L2009.32 1208.05 L2008.73 1208.05 L2008.14 1208.05 L2007.56 1208.05 L2006.97 1208.05 L2006.38 1208.05 L2005.8 1208.05 L2005.21 1208.05 L2004.62 1208.05 L2004.04 1208.05 L2003.45 1208.05 L2002.86 1208.05 L2002.28 1208.05 L2001.69 1208.05 L2001.11 1208.05 L2000.52 1208.05 L1999.93 1208.05 L1999.35 1208.05 L1998.76 1208.05 L1998.17 1208.05 L1997.59 1208.05 L1997 1208.05 L1996.41 1208.05 L1995.83 1208.05 L1995.24 1208.05 L1994.65 1208.05 L1994.07 1208.05 L1993.48 1208.05 L1992.9 1208.05 L1992.31 1208.05 L1991.72 1208.05 L1991.14 1208.05 L1990.55 1208.05 L1989.96 1208.05 L1989.38 1208.05 L1988.79 1208.05 L1988.2 1208.05 L1987.62 1208.05 L1987.03 1208.05 L1986.45 1208.05 L1985.86 1208.05 L1985.27 1208.05 L1984.69 1208.05 L1984.1 1208.05 L1983.51 1208.05 L1982.93 1208.05 L1982.34 1208.05 L1981.75 1208.05 L1981.17 1208.05 L1980.58 1208.05 L1979.99 1208.05 L1979.41 1208.05 L1978.82 1208.05 L1978.24 1208.05 L1977.65 1208.05 L1977.06 1208.05 L1976.48 1208.05 L1975.89 1208.05 L1975.3 1208.05 L1974.72 1208.05 L1974.13 1208.05 L1973.54 1208.05 L1972.96 1208.05 L1972.37 1208.05 L1971.78 1208.05 L1971.2 1208.05 L1970.61 1208.05 L1970.03 1208.05 L1969.44 1208.05 L1968.85 1208.05 L1968.27 1208.05 L1967.68 1208.05 L1967.09 1208.05 L1966.51 1208.05 L1965.92 1208.05 L1965.33 1208.05 L1964.75 1208.05 L1964.16 1208.05 L1963.58 1208.05 L1962.99 1208.05 L1962.4 1208.05 L1961.82 1208.05 L1961.23 1208.05 L1960.64 1208.05 L1960.06 1208.05 L1959.47 1208.05 L1958.88 1208.05 L1958.3 1208.05 L1957.71 1208.05 L1957.12 1208.05 L1956.54 1208.05 L1955.95 1208.05 L1955.37 1208.05 L1954.78 1208.05 L1954.19 1208.05 L1953.61 1208.05 L1953.02 1208.05 L1952.43 1208.05 L1951.85 1208.05 L1951.26 1208.05 L1950.67 1208.05 L1950.09 1208.05 L1949.5 1208.05 L1948.91 1208.05 L1948.33 1208.05 L1947.74 1208.05 L1947.16 1208.05 L1946.57 1208.05 L1945.98 1208.05 L1945.4 1208.05 L1944.81 1208.05 L1944.22 1208.05 L1943.64 1208.05 L1943.05 1208.05 L1942.46 1208.05 L1941.88 1208.05 L1941.29 1208.05 L1940.71 1208.05 L1940.12 1208.05 L1939.53 1208.05 L1938.95 1208.05 L1938.36 1208.05 L1937.77 1208.05 L1937.19 1208.05 L1936.6 1208.05 L1936.01 1208.05 L1935.43 1208.05 L1934.84 1208.05 L1934.25 1208.05 L1933.67 1208.05 L1933.08 1208.05 L1932.5 1208.05 L1931.91 1208.05 L1931.32 1208.05 L1930.74 1208.05 L1930.15 1208.05 L1929.56 1208.05 L1928.98 1208.05 L1928.39 1208.05 L1927.8 1208.05 L1927.22 1208.05 L1926.63 1208.05 L1926.04 1208.05 L1925.46 1208.05 L1924.87 1208.05 L1924.29 1208.05 L1923.7 1208.05 L1923.11 1208.05 L1922.53 1208.05 L1921.94 1208.05 L1921.35 1208.05 L1920.77 1208.05 L1920.18 1208.05 L1919.59 1208.05 L1919.01 1208.05 L1918.42 1208.05 L1917.83 1208.05 L1917.25 1208.05 L1916.66 1208.05 L1916.08 1208.05 L1915.49 1208.05 L1914.9 1208.05 L1914.32 1208.05 L1913.73 1208.05 L1913.14 1208.05 L1912.56 1208.05 L1911.97 1208.05 L1911.38 1208.05 L1910.8 1208.05 L1910.21 1208.05 L1909.63 1208.05 L1909.04 1208.05 L1908.45 1208.05 L1907.87 1208.05 L1907.28 1208.05 L1906.69 1208.05 L1906.11 1208.05 L1905.52 1208.05 L1904.93 1208.05 L1904.35 1208.05 L1903.76 1208.05 L1903.17 1208.05 L1902.59 1208.05 L1902 1208.05 L1901.42 1208.05 L1900.83 1208.05 L1900.24 1208.05 L1899.66 1208.05 L1899.07 1208.05 L1898.48 1208.05 L1897.9 1208.05 L1897.31 1208.05 L1896.72 1208.05 L1896.14 1208.05 L1895.55 1208.05 L1894.96 1208.05 L1894.38 1208.05 L1893.79 1208.05 L1893.21 1208.05 L1892.62 1208.05 L1892.03 1208.05 L1891.45 1208.05 L1890.86 1208.05 L1890.27 1208.05 L1889.69 1208.05 L1889.1 1208.05 L1888.51 1208.05 L1887.93 1208.05 L1887.34 1208.05 L1886.76 1208.05 L1886.17 1208.05 L1885.58 1208.05 L1885 1208.05 L1884.41 1208.05 L1883.82 1208.05 L1883.24 1208.05 L1882.65 1208.05 L1882.06 1208.05 L1881.48 1208.05 L1880.89 1208.05 L1880.3 1208.05 L1879.72 1208.05 L1879.13 1208.05 L1878.55 1208.05 L1877.96 1208.05 L1877.37 1208.05 L1876.79 1208.05 L1876.2 1208.05 L1875.61 1208.05 L1875.03 1208.05 L1874.44 1208.05 L1873.85 1208.05 L1873.27 1208.05 L1872.68 1208.05 L1872.09 1208.05 L1871.51 1208.05 L1870.92 1208.05 L1870.34 1208.05 L1869.75 1208.05 L1869.16 1208.05 L1868.58 1208.05 L1867.99 1208.05 L1867.4 1208.05 L1866.82 1208.05 L1866.23 1208.05 L1865.64 1208.05 L1865.06 1208.05 L1864.47 1208.05 L1863.88 1208.05 L1863.3 1208.05 L1862.71 1208.05 L1862.13 1208.05 L1861.54 1208.05 L1860.95 1208.05 L1860.37 1208.05 L1859.78 1208.05 L1859.19 1208.05 L1858.61 1208.05 L1858.02 1208.05 L1857.43 1208.05 L1856.85 1208.05 L1856.26 1208.05 L1855.68 1208.05 L1855.09 1208.05 L1854.5 1208.05 L1853.92 1208.05 L1853.33 1208.05 L1852.74 1208.05 L1852.16 1208.05 L1851.57 1208.05 L1850.98 1208.05 L1850.4 1208.05 L1849.81 1208.05 L1849.22 1208.05 L1848.64 1208.05 L1848.05 1208.05 L1847.47 1208.05 L1846.88 1208.05 L1846.29 1208.05 L1845.71 1208.05 L1845.12 1208.05 L1844.53 1208.05 L1843.95 1208.05 L1843.36 1208.05 L1842.77 1208.05 L1842.19 1208.05 L1841.6 1208.05 L1841.01 1208.05 L1840.43 1208.05 L1839.84 1208.05 L1839.26 1208.05 L1838.67 1208.05 L1838.08 1208.05 L1837.5 1208.05 L1836.91 1208.05 L1836.32 1208.05 L1835.74 1208.05 L1835.15 1208.05 L1834.56 1208.05 L1833.98 1208.05 L1833.39 1208.05 L1832.81 1208.05 L1832.22 1208.05 L1831.63 1208.05 L1831.05 1208.05 L1830.46 1208.05 L1829.87 1208.05 L1829.29 1208.05 L1828.7 1208.05 L1828.11 1208.05 L1827.53 1208.05 L1826.94 1208.05 L1826.35 1208.05 L1825.77 1208.05 L1825.18 1208.05 L1824.6 1208.05 L1824.01 1208.05 L1823.42 1208.05 L1822.84 1208.05 L1822.25 1208.05 L1821.66 1208.05 L1821.08 1208.05 L1820.49 1208.05 L1819.9 1208.05 L1819.32 1208.05 L1818.73 1208.05 L1818.14 1208.05 L1817.56 1208.05 L1816.97 1208.05 L1816.39 1208.05 L1815.8 1208.05 L1815.21 1208.05 L1814.63 1208.05 L1814.04 1208.05 L1813.45 1208.05 L1812.87 1208.05 L1812.28 1208.05 L1811.69 1208.05 L1811.11 1208.05 L1810.52 1208.05 L1809.94 1208.05 L1809.35 1208.05 L1808.76 1208.05 L1808.18 1208.05 L1807.59 1208.05 L1807 1208.05 L1806.42 1208.05 L1805.83 1208.05 L1805.24 1208.05 L1804.66 1208.05 L1804.07 1208.05 L1803.48 1208.05 L1802.9 1208.05 L1802.31 1208.05 L1801.73 1208.05 L1801.14 1208.05 L1800.55 1208.05 L1799.97 1208.05 L1799.38 1208.05 L1798.79 1208.05 L1798.21 1208.05 L1797.62 1208.05 L1797.03 1208.05 L1796.45 1208.05 L1795.86 1208.05 L1795.27 1208.05 L1794.69 1208.05 L1794.1 1208.05 L1793.52 1208.05 L1792.93 1208.05 L1792.34 1208.05 L1791.76 1208.05 L1791.17 1208.05 L1790.58 1208.05 L1790 1208.05 L1789.41 1208.05 L1788.82 1208.05 L1788.24 1208.05 L1787.65 1208.05 L1787.06 1208.05 L1786.48 1208.05 L1785.89 1208.05 L1785.31 1208.05 L1784.72 1208.05 L1784.13 1208.05 L1783.55 1208.05 L1782.96 1208.05 L1782.37 1208.05 L1781.79 1208.05 L1781.2 1208.05 L1780.61 1208.05 L1780.03 1208.05 L1779.44 1208.05 L1778.86 1208.05 L1778.27 1208.05 L1777.68 1208.05 L1777.1 1208.05 L1776.51 1208.05 L1775.92 1208.05 L1775.34 1208.05 L1774.75 1208.05 L1774.16 1208.05 L1773.58 1208.05 L1772.99 1208.05 L1772.4 1208.05 L1771.82 1208.05 L1771.23 1208.05 L1770.65 1208.05 L1770.06 1208.05 L1769.47 1208.05 L1768.89 1208.05 L1768.3 1208.05 L1767.71 1208.05 L1767.13 1208.05 L1766.54 1208.05 L1765.95 1208.05 L1765.37 1208.05 L1764.78 1208.05 L1764.19 1208.05 L1763.61 1208.05 L1763.02 1208.05 L1762.44 1208.05 L1761.85 1208.05 L1761.26 1208.05 L1760.68 1208.05 L1760.09 1208.05 L1759.5 1208.05 L1758.92 1208.05 L1758.33 1208.05 L1757.74 1208.05 L1757.16 1208.05 L1756.57 1208.05 L1755.99 1208.05 L1755.4 1208.05 L1754.81 1208.05 L1754.23 1208.05 L1753.64 1208.05 L1753.05 1208.05 L1752.47 1208.05 L1751.88 1208.05 L1751.29 1208.05 L1750.71 1208.05 L1750.12 1208.05 L1749.53 1208.05 L1748.95 1208.05 L1748.36 1208.05 L1747.78 1208.05 L1747.19 1208.05 L1746.6 1208.05 L1746.02 1208.05 L1745.43 1208.05 L1744.84 1208.05 L1744.26 1208.05 L1743.67 1208.05 L1743.08 1208.05 L1742.5 1208.05 L1741.91 1208.05 L1741.32 1208.05 L1740.74 1208.05 L1740.15 1208.05 L1739.57 1208.05 L1738.98 1208.05 L1738.39 1208.05 L1737.81 1208.05 L1737.22 1208.05 L1736.63 1208.05 L1736.05 1208.05 L1735.46 1208.05 L1734.87 1208.05 L1734.29 1208.05 L1733.7 1208.05 L1733.11 1208.05 L1732.53 1208.05 L1731.94 1208.05 L1731.36 1208.05 L1730.77 1208.05 L1730.18 1208.05 L1729.6 1208.05 L1729.01 1208.05 L1728.42 1208.05 L1727.84 1208.05 L1727.25 1208.05 L1726.66 1208.05 L1726.08 1208.05 L1725.49 1208.05 L1724.91 1208.05 L1724.32 1208.05 L1723.73 1208.05 L1723.15 1208.05 L1722.56 1208.05 L1721.97 1208.05 L1721.39 1208.05 L1720.8 1208.05 L1720.21 1208.05 L1719.63 1208.05 L1719.04 1208.05 L1718.45 1208.05 L1717.87 1208.05 L1717.28 1208.05 L1716.7 1208.05 L1716.11 1208.05 L1715.52 1208.05 L1714.94 1208.05 L1714.35 1208.05 L1713.76 1208.05 L1713.18 1208.05 L1712.59 1208.05 L1712 1208.05 L1711.42 1208.05 L1710.83 1208.05 L1710.24 1208.05 L1709.66 1208.05 L1709.07 1208.05 L1708.49 1208.05 L1707.9 1208.05 L1707.31 1208.05 L1706.73 1208.05 L1706.14 1208.05 L1705.55 1208.05 L1704.97 1208.05 L1704.38 1208.05 L1703.79 1208.05 L1703.21 1208.05 L1702.62 1208.05 L1702.04 1208.05 L1701.45 1208.05 L1700.86 1208.05 L1700.28 1208.05 L1699.69 1208.05 L1699.1 1208.05 L1698.52 1208.05 L1697.93 1208.05 L1697.34 1208.05 L1696.76 1208.05 L1696.17 1208.05 L1695.58 1208.05 L1695 1208.05 L1694.41 1208.05 L1693.83 1208.05 L1693.24 1208.05 L1692.65 1208.05 L1692.07 1208.05 L1691.48 1208.05 L1690.89 1208.05 L1690.31 1208.05 L1689.72 1208.05 L1689.13 1208.05 L1688.55 1208.05 L1687.96 1208.05 L1687.37 1208.05 L1686.79 1208.05 L1686.2 1208.05 L1685.62 1208.05 L1685.03 1208.05 L1684.44 1208.05 L1683.86 1208.05 L1683.27 1208.05 L1682.68 1208.05 L1682.1 1208.05 L1681.51 1208.05 L1680.92 1208.05 L1680.34 1208.05 L1679.75 1208.05 L1679.17 1208.05 L1678.58 1208.05 L1677.99 1208.05 L1677.41 1208.05 L1676.82 1208.05 L1676.23 1208.05 L1675.65 1208.05 L1675.06 1208.05 L1674.47 1208.05 L1673.89 1208.05 L1673.3 1208.05 L1672.71 1208.05 L1672.13 1208.05 L1671.54 1208.05 L1670.96 1208.05 L1670.37 1208.05 L1669.78 1208.05 L1669.2 1208.05 L1668.61 1208.05 L1668.02 1208.05 L1667.44 1208.05 L1666.85 1208.05 L1666.26 1208.05 L1665.68 1208.05 L1665.09 1208.05 L1664.5 1208.05 L1663.92 1208.05 L1663.33 1208.05 L1662.75 1208.05 L1662.16 1208.05 L1661.57 1208.05 L1660.99 1208.05 L1660.4 1208.05 L1659.81 1208.05 L1659.23 1208.05 L1658.64 1208.05 L1658.05 1208.05 L1657.47 1208.05 L1656.88 1208.05 L1656.29 1208.05 L1655.71 1208.05 L1655.12 1208.05 L1654.54 1208.05 L1653.95 1208.05 L1653.36 1208.05 L1652.78 1208.05 L1652.19 1208.05 L1651.6 1208.05 L1651.02 1208.05 L1650.43 1208.05 L1649.84 1208.05 L1649.26 1208.05 L1648.67 1208.05 L1648.09 1208.05 L1647.5 1208.05 L1646.91 1208.05 L1646.33 1208.05 L1645.74 1208.05 L1645.15 1208.05 L1644.57 1208.05 L1643.98 1208.05 L1643.39 1208.05 L1642.81 1208.05 L1642.22 1208.05 L1641.63 1208.05 L1641.05 1208.05 L1640.46 1208.05 L1639.88 1208.05 L1639.29 1208.05 L1638.7 1208.05 L1638.12 1208.05 L1637.53 1208.05 L1636.94 1208.05 L1636.36 1208.05 L1635.77 1208.05 L1635.18 1208.05 L1634.6 1208.05 L1634.01 1208.05 L1633.42 1208.05 L1632.84 1208.05 L1632.25 1208.05 L1631.67 1208.05 L1631.08 1208.05 L1630.49 1208.05 L1629.91 1208.05 L1629.32 1208.05 L1628.73 1208.05 L1628.15 1208.05 L1627.56 1208.05 L1626.97 1208.05 L1626.39 1208.05 L1625.8 1208.05 L1625.22 1208.05 L1624.63 1208.05 L1624.04 1208.05 L1623.46 1208.05 L1622.87 1208.05 L1622.28 1208.05 L1621.7 1208.05 L1621.11 1208.05 L1620.52 1208.05 L1619.94 1208.05 L1619.35 1208.05 L1618.76 1208.05 L1618.18 1208.05 L1617.59 1208.05 L1617.01 1208.05 L1616.42 1208.05 L1615.83 1208.05 L1615.25 1208.05 L1614.66 1208.05 L1614.07 1208.05 L1613.49 1208.05 L1612.9 1208.05 L1612.31 1208.05 L1611.73 1208.05 L1611.14 1208.05 L1610.55 1208.05 L1609.97 1208.05 L1609.38 1208.05 L1608.8 1208.05 L1608.21 1208.05 L1607.62 1208.05 L1607.04 1208.05 L1606.45 1208.05 L1605.86 1208.05 L1605.28 1208.05 L1604.69 1208.05 L1604.1 1208.05 L1603.52 1208.05 L1602.93 1208.05 L1602.34 1208.05 L1601.76 1208.05 L1601.17 1208.05 L1600.59 1208.05 L1600 1208.05 L1599.41 1208.05 L1598.83 1208.05 L1598.24 1208.05 L1597.65 1208.05 L1597.07 1208.05 L1596.48 1208.05 L1595.89 1208.05 L1595.31 1208.05 L1594.72 1208.05 L1594.14 1208.05 L1593.55 1208.05 L1592.96 1208.05 L1592.38 1208.05 L1591.79 1208.05 L1591.2 1208.05 L1590.62 1208.05 L1590.03 1208.05 L1589.44 1208.05 L1588.86 1208.05 L1588.27 1208.05 L1587.68 1208.05 L1587.1 1208.05 L1586.51 1208.05 L1585.93 1208.05 L1585.34 1208.05 L1584.75 1208.05 L1584.17 1208.05 L1583.58 1208.05 L1582.99 1208.05 L1582.41 1208.05 L1581.82 1208.05 L1581.23 1208.05 L1580.65 1208.05 L1580.06 1208.05 L1579.47 1208.05 L1578.89 1208.05 L1578.3 1208.05 L1577.72 1208.05 L1577.13 1208.05 L1576.54 1208.05 L1575.96 1208.05 L1575.37 1208.05 L1574.78 1208.05 L1574.2 1208.05 L1573.61 1208.05 L1573.02 1208.05 L1572.44 1208.05 L1571.85 1208.05 L1571.27 1208.05 L1570.68 1208.05 L1570.09 1208.05 L1569.51 1208.05 L1568.92 1208.05 L1568.33 1208.05 L1567.75 1208.05 L1567.16 1208.05 L1566.57 1208.05 L1565.99 1208.05 L1565.4 1208.05 L1564.81 1208.05 L1564.23 1208.05 L1563.64 1208.05 L1563.06 1208.05 L1562.47 1208.05 L1561.88 1208.05 L1561.3 1208.05 L1560.71 1208.05 L1560.12 1208.05 L1559.54 1208.05 L1558.95 1208.05 L1558.36 1208.05 L1557.78 1208.05 L1557.19 1208.05 L1556.6 1208.05 L1556.02 1208.05 L1555.43 1208.05 L1554.85 1208.05 L1554.26 1208.05 L1553.67 1208.05 L1553.09 1208.05 L1552.5 1208.05 L1551.91 1208.05 L1551.33 1208.05 L1550.74 1208.05 L1550.15 1208.05 L1549.57 1208.05 L1548.98 1208.05 L1548.4 1208.05 L1547.81 1208.05 L1547.22 1208.05 L1546.64 1208.05 L1546.05 1208.05 L1545.46 1208.05 L1544.88 1208.05 L1544.29 1208.05 L1543.7 1208.05 L1543.12 1208.05 L1542.53 1208.05 L1541.94 1208.05 L1541.36 1208.05 L1540.77 1208.05 L1540.19 1208.05 L1539.6 1208.05 L1539.01 1208.05 L1538.43 1208.05 L1537.84 1208.05 L1537.25 1208.05 L1536.67 1208.05 L1536.08 1208.05 L1535.49 1208.05 L1534.91 1208.05 L1534.32 1208.05 L1533.73 1208.05 L1533.15 1208.05 L1532.56 1208.05 L1531.98 1208.05 L1531.39 1208.05 L1530.8 1208.05 L1530.22 1208.05 L1529.63 1208.05 L1529.04 1208.05 L1528.46 1208.05 L1527.87 1208.05 L1527.28 1208.05 L1526.7 1208.05 L1526.11 1208.05 L1525.52 1208.05 L1524.94 1208.05 L1524.35 1208.05 L1523.77 1208.05 L1523.18 1208.05 L1522.59 1208.05 L1522.01 1208.05 L1521.42 1208.05 L1520.83 1208.05 L1520.25 1208.05 L1519.66 1208.05 L1519.07 1208.05 L1518.49 1208.05 L1517.9 1208.05 L1517.32 1208.05 L1516.73 1208.05 L1516.14 1208.05 L1515.56 1208.05 L1514.97 1208.05 L1514.38 1208.05 L1513.8 1208.05 L1513.21 1208.05 L1512.62 1208.05 L1512.04 1208.05 L1511.45 1208.05 L1510.86 1208.05 L1510.28 1208.05 L1509.69 1208.05 L1509.11 1208.05 L1508.52 1208.05 L1507.93 1208.05 L1507.35 1208.05 L1506.76 1208.05 L1506.17 1208.05 L1505.59 1208.05 L1505 1208.05 L1504.41 1208.05 L1503.83 1208.05 L1503.24 1208.05 L1502.65 1208.05 L1502.07 1208.05 L1501.48 1208.05 L1500.9 1208.05 L1500.31 1208.05 L1499.72 1208.05 L1499.14 1208.05 L1498.55 1208.05 L1497.96 1208.05 L1497.38 1208.05 L1496.79 1208.05 L1496.2 1208.05 L1495.62 1208.05 L1495.03 1208.05 L1494.45 1208.05 L1493.86 1208.05 L1493.27 1208.05 L1492.69 1208.05 L1492.1 1208.05 L1491.51 1208.05 L1490.93 1208.05 L1490.34 1208.05 L1489.75 1208.05 L1489.17 1208.05 L1488.58 1208.05 L1487.99 1208.05 L1487.41 1208.05 L1486.82 1208.05 L1486.24 1208.05 L1485.65 1208.05 L1485.06 1208.05 L1484.48 1208.05 L1483.89 1208.05 L1483.3 1208.05 L1482.72 1208.05 L1482.13 1208.05 L1481.54 1208.05 L1480.96 1208.05 L1480.37 1208.05 L1479.78 1208.05 L1479.2 1208.05 L1478.61 1208.05 L1478.03 1208.05 L1477.44 1208.05 L1476.85 1208.05 L1476.27 1208.05 L1475.68 1208.05 L1475.09 1208.05 L1474.51 1208.05 L1473.92 1208.05 L1473.33 1208.05 L1472.75 1208.05 L1472.16 1208.05 L1471.57 1208.05 L1470.99 1208.05 L1470.4 1208.05 L1469.82 1208.05 L1469.23 1208.05 L1468.64 1208.05 L1468.06 1208.05 L1467.47 1208.05 L1466.88 1208.05 L1466.3 1208.05 L1465.71 1208.05 L1465.12 1208.05 L1464.54 1208.05 L1463.95 1208.05 L1463.37 1208.05 L1462.78 1208.05 L1462.19 1208.05 L1461.61 1208.05 L1461.02 1208.05 L1460.43 1208.05 L1459.85 1208.05 L1459.26 1208.05 L1458.67 1208.05 L1458.09 1208.05 L1457.5 1208.05 L1456.91 1208.05 L1456.33 1208.05 L1455.74 1208.05 L1455.16 1208.05 L1454.57 1208.05 L1453.98 1208.05 L1453.4 1208.05 L1452.81 1208.05 L1452.22 1208.05 L1451.64 1208.05 L1451.05 1208.05 L1450.46 1208.05 L1449.88 1208.05 L1449.29 1208.05 L1448.7 1208.05 L1448.12 1208.05 L1447.53 1208.05 L1446.95 1208.05 L1446.36 1208.05 L1445.77 1208.05 L1445.19 1208.05 L1444.6 1208.05 L1444.01 1208.05 L1443.43 1208.05 L1442.84 1208.05 L1442.25 1208.05 L1441.67 1208.05 L1441.08 1208.05 L1440.5 1208.05 L1439.91 1208.05 L1439.32 1208.05 L1438.74 1208.05 L1438.15 1208.05 L1437.56 1208.05 L1436.98 1208.05 L1436.39 1208.05 L1435.8 1208.05 L1435.22 1208.05 L1434.63 1208.05 L1434.04 1208.05 L1433.46 1208.05 L1432.87 1208.05 L1432.29 1208.05 L1431.7 1208.05 L1431.11 1208.05 L1430.53 1208.05 L1429.94 1208.05 L1429.35 1208.05 L1428.77 1208.05 L1428.18 1208.05 L1427.59 1208.05 L1427.01 1208.05 L1426.42 1208.05 L1425.83 1208.05 L1425.25 1208.05 L1424.66 1208.05 L1424.08 1208.05 L1423.49 1208.05 L1422.9 1208.05 L1422.32 1208.05 L1421.73 1208.05 L1421.14 1208.05 L1420.56 1208.05 L1419.97 1208.05 L1419.38 1208.05 L1418.8 1208.05 L1418.21 1208.05 L1417.63 1208.05 L1417.04 1208.05 L1416.45 1208.05 L1415.87 1208.05 L1415.28 1208.05 L1414.69 1208.05 L1414.11 1208.05 L1413.52 1208.05 L1412.93 1208.05 L1412.35 1208.05 L1411.76 1208.05 L1411.17 1208.05 L1410.59 1208.05 L1410 1208.05 L1409.42 1208.05 L1408.83 1208.05 L1408.24 1208.05 L1407.66 1208.05 L1407.07 1208.05 L1406.48 1208.05 L1405.9 1208.05 L1405.31 1208.05 L1404.72 1208.05 L1404.14 1208.05 L1403.55 1208.05 L1402.96 1208.05 L1402.38 1208.05 L1401.79 1208.05 L1401.21 1208.05 L1400.62 1208.05 L1400.03 1208.05 L1399.45 1208.05 L1398.86 1208.05 L1398.27 1208.05 L1397.69 1208.05 L1397.1 1208.05 L1396.51 1208.05 L1395.93 1208.05 L1395.34 1208.05 L1394.75 1208.05 L1394.17 1208.05 L1393.58 1208.05 L1393 1208.05 L1392.41 1208.05 L1391.82 1208.05 L1391.24 1208.05 L1390.65 1208.05 L1390.06 1208.05 L1389.48 1208.05 L1388.89 1208.05 L1388.3 1208.05 L1387.72 1208.05 L1387.13 1208.05 L1386.55 1208.05 L1385.96 1208.05 L1385.37 1208.05 L1384.79 1208.05 L1384.2 1208.05 L1383.61 1208.05 L1383.03 1208.05 L1382.44 1208.05 L1381.85 1208.05 L1381.27 1208.05 L1380.68 1208.05 L1380.09 1208.05 L1379.51 1208.05 L1378.92 1208.05 L1378.34 1208.05 L1377.75 1208.05 L1377.16 1208.05 L1376.58 1208.05 L1375.99 1208.05 L1375.4 1208.05 L1374.82 1208.05 L1374.23 1208.05 L1373.64 1208.05 L1373.06 1208.05 L1372.47 1208.05 L1371.88 1208.05 L1371.3 1208.05 L1370.71 1208.05 L1370.13 1208.05 L1369.54 1208.05 L1368.95 1208.05 L1368.37 1208.05 L1367.78 1208.05 L1367.19 1208.05 L1366.61 1208.05 L1366.02 1208.05 L1365.43 1208.05 L1364.85 1208.05 L1364.26 1208.05 L1363.68 1208.05 L1363.09 1208.05 L1362.5 1208.05 L1361.92 1208.05 L1361.33 1208.05 L1360.74 1208.05 L1360.16 1208.05 L1359.57 1208.05 L1358.98 1208.05 L1358.4 1208.05 L1357.81 1208.05 L1357.22 1208.05 L1356.64 1208.05 L1356.05 1208.05 L1355.47 1208.05 L1354.88 1208.05 L1354.29 1208.05 L1353.71 1208.05 L1353.12 1208.05 L1352.53 1208.05 L1351.95 1208.05 L1351.36 1208.05 L1350.77 1208.05 L1350.19 1208.05 L1349.6 1208.05 L1349.01 1208.05 L1348.43 1208.05 L1347.84 1208.05 L1347.26 1208.05 L1346.67 1208.05 L1346.08 1208.05 L1345.5 1208.05 L1344.91 1208.05 L1344.32 1208.05 L1343.74 1208.05 L1343.15 1208.05 L1342.56 1208.05 L1341.98 1208.05 L1341.39 1208.05 L1340.8 1208.05 L1340.22 1208.05 L1339.63 1208.05 L1339.05 1208.05 L1338.46 1208.05 L1337.87 1208.05 L1337.29 1208.05 L1336.7 1208.05 L1336.11 1208.05 L1335.53 1208.05 L1334.94 1208.05 L1334.35 1208.05 L1333.77 1208.05 L1333.18 1208.05 L1332.6 1208.05 L1332.01 1208.05 L1331.42 1208.05 L1330.84 1208.05 L1330.25 1208.05 L1329.66 1208.05 L1329.08 1208.05 L1328.49 1208.05 L1327.9 1208.05 L1327.32 1208.05 L1326.73 1208.05 L1326.14 1208.05 L1325.56 1208.05 L1324.97 1208.05 L1324.39 1208.05 L1323.8 1208.05 L1323.21 1208.05 L1322.63 1208.05 L1322.04 1208.05 L1321.45 1208.05 L1320.87 1208.05 L1320.28 1208.05 L1319.69 1208.05 L1319.11 1208.05 L1318.52 1208.05 L1317.93 1208.05 L1317.35 1208.05 L1316.76 1208.05 L1316.18 1208.05 L1315.59 1208.05 L1315 1208.05 L1314.42 1208.05 L1313.83 1208.05 L1313.24 1208.05 L1312.66 1208.05 L1312.07 1208.05 L1311.48 1208.05 L1310.9 1208.05 L1310.31 1208.05 L1309.73 1208.05 L1309.14 1208.05 L1308.55 1208.05 L1307.97 1208.05 L1307.38 1208.05 L1306.79 1208.05 L1306.21 1208.05 L1305.62 1208.05 L1305.03 1208.05 L1304.45 1208.05 L1303.86 1208.05 L1303.27 1208.05 L1302.69 1208.05 L1302.1 1208.05 L1301.52 1208.05 L1300.93 1208.05 L1300.34 1208.05 L1299.76 1208.05 L1299.17 1208.05 L1298.58 1208.05 L1298 1208.05 L1297.41 1208.05 L1296.82 1208.05 L1296.24 1208.05 L1295.65 1208.05 L1295.06 1208.05 L1294.48 1208.05 L1293.89 1208.05 L1293.31 1208.05 L1292.72 1208.05 L1292.13 1208.05 L1291.55 1208.05 L1290.96 1208.05 L1290.37 1208.05 L1289.79 1208.05 L1289.2 1208.05 L1288.61 1208.05 L1288.03 1208.05 L1287.44 1208.05 L1286.86 1208.05 L1286.27 1208.05 L1285.68 1208.05 L1285.1 1208.05 L1284.51 1208.05 L1283.92 1208.05 L1283.34 1208.05 L1282.75 1208.05 L1282.16 1208.05 L1281.58 1208.05 L1280.99 1208.05 L1280.4 1208.05 L1279.82 1208.05 L1279.23 1208.05 L1278.65 1208.05 L1278.06 1208.05 L1277.47 1208.05 L1276.89 1208.05 L1276.3 1208.05 L1275.71 1208.05 L1275.13 1208.05 L1274.54 1208.05 L1273.95 1208.05 L1273.37 1208.05 L1272.78 1208.05 L1272.19 1208.05 L1271.61 1208.05 L1271.02 1208.05 L1270.44 1208.05 L1269.85 1208.05 L1269.26 1208.05 L1268.68 1208.05 L1268.09 1208.05 L1267.5 1208.05 L1266.92 1208.05 L1266.33 1208.05 L1265.74 1208.05 L1265.16 1208.05 L1264.57 1208.05 L1263.98 1208.05 L1263.4 1208.05 L1262.81 1208.05 L1262.23 1208.05 L1261.64 1208.05 L1261.05 1208.05 L1260.47 1208.05 L1259.88 1208.05 L1259.29 1208.05 L1258.71 1208.05 L1258.12 1208.05 L1257.53 1208.05 L1256.95 1208.05 L1256.36 1208.05 L1255.78 1208.05 L1255.19 1208.05 L1254.6 1208.05 L1254.02 1208.05 L1253.43 1208.05 L1252.84 1208.05 L1252.26 1208.05 L1251.67 1208.05 L1251.08 1208.05 L1250.5 1208.05 L1249.91 1208.05 L1249.32 1208.05 L1248.74 1208.05 L1248.15 1208.05 L1247.57 1208.05 L1246.98 1208.05 L1246.39 1208.05 L1245.81 1208.05 L1245.22 1208.05 L1244.63 1208.05 L1244.05 1208.05 L1243.46 1208.05 L1242.87 1208.05 L1242.29 1208.05 L1241.7 1208.05 L1241.11 1208.05 L1240.53 1208.05 L1239.94 1208.05 L1239.36 1208.05 L1238.77 1208.05 L1238.18 1208.05 L1237.6 1208.05 L1237.01 1208.05 L1236.42 1208.05 L1235.84 1208.05 L1235.25 1208.05 L1234.66 1208.05 L1234.08 1208.05 L1233.49 1208.05 L1232.91 1208.05 L1232.32 1208.05 L1231.73 1208.05 L1231.15 1208.05 L1230.56 1208.05 L1229.97 1208.05 L1229.39 1208.05 L1228.8 1208.05 L1228.21 1208.05 L1227.63 1208.05 L1227.04 1208.05 L1226.45 1208.05 L1225.87 1208.05 L1225.28 1208.05 L1224.7 1208.05 L1224.11 1208.05 L1223.52 1208.05 L1222.94 1208.05 L1222.35 1208.05 L1221.76 1208.05 L1221.18 1208.05 L1220.59 1208.05 L1220 1208.05 L1219.42 1208.05 L1218.83 1208.05 L1218.24 1208.05 L1217.66 1208.05 L1217.07 1208.05 L1216.49 1208.05 L1215.9 1208.05 L1215.31 1208.05 L1214.73 1208.05 L1214.14 1208.05 L1213.55 1208.05 L1212.97 1208.05 L1212.38 1208.05 L1211.79 1208.05 L1211.21 1208.05 L1210.62 1208.05 L1210.03 1208.05 L1209.45 1208.05 L1208.86 1208.05 L1208.28 1208.05 L1207.69 1208.05 L1207.1 1208.05 L1206.52 1208.05 L1205.93 1208.05 L1205.34 1208.05 L1204.76 1208.05 L1204.17 1208.05 L1203.58 1208.05 L1203 1208.05 L1202.41 1208.05 L1201.83 1208.05 L1201.24 1208.05 L1200.65 1208.05 L1200.07 1208.05 L1199.48 1208.05 L1198.89 1208.05 L1198.31 1208.05 L1197.72 1208.05 L1197.13 1208.05 L1196.55 1208.05 L1195.96 1208.05 L1195.37 1208.05 L1194.79 1208.05 L1194.2 1208.05 L1193.62 1208.05 L1193.03 1208.05 L1192.44 1208.05 L1191.86 1208.05 L1191.27 1208.05 L1190.68 1208.05 L1190.1 1208.05 L1189.51 1208.05 L1188.92 1208.05 L1188.34 1208.05 L1187.75 1208.05 L1187.16 1208.05 L1186.58 1208.05 L1185.99 1208.05 L1185.41 1208.05 L1184.82 1208.05 L1184.23 1208.05 L1183.65 1208.05 L1183.06 1208.05 L1182.47 1208.05 L1181.89 1208.05 L1181.3 1208.05 L1180.71 1208.05 L1180.13 1208.05 L1179.54 1208.05 L1178.96 1208.05 L1178.37 1208.05 L1177.78 1208.05 L1177.2 1208.05 L1176.61 1208.05 L1176.02 1208.05 L1175.44 1208.05 L1174.85 1208.05 L1174.26 1208.05 L1173.68 1208.05 L1173.09 1208.05 L1172.5 1208.05 L1171.92 1208.05 L1171.33 1208.05 L1170.75 1208.05 L1170.16 1208.05 L1169.57 1208.05 L1168.99 1208.05 L1168.4 1208.05 L1167.81 1208.05 L1167.23 1208.05 L1166.64 1208.05 L1166.05 1208.05 L1165.47 1208.05 L1164.88 1208.05 L1164.29 1208.05 L1163.71 1208.05 L1163.12 1208.05 L1162.54 1208.05 L1161.95 1208.05 L1161.36 1208.05 L1160.78 1208.05 L1160.19 1208.05 L1159.6 1208.05 L1159.02 1208.05 L1158.43 1208.05 L1157.84 1208.05 L1157.26 1208.05 L1156.67 1208.05 L1156.09 1208.05 L1155.5 1208.05 L1154.91 1208.05 L1154.33 1208.05 L1153.74 1208.05 L1153.15 1208.05 L1152.57 1208.05 L1151.98 1208.05 L1151.39 1208.05 L1150.81 1208.05 L1150.22 1208.05 L1149.63 1208.05 L1149.05 1208.05 L1148.46 1208.05 L1147.88 1208.05 L1147.29 1208.05 L1146.7 1208.05 L1146.12 1208.05 L1145.53 1208.05 L1144.94 1208.05 L1144.36 1208.05 L1143.77 1208.05 L1143.18 1208.05 L1142.6 1208.05 L1142.01 1208.05 L1141.42 1208.05 L1140.84 1208.05 L1140.25 1208.05 L1139.67 1208.05 L1139.08 1208.05 L1138.49 1208.05 L1137.91 1208.05 L1137.32 1208.05 L1136.73 1208.05 L1136.15 1208.05 L1135.56 1208.05 L1134.97 1208.05 L1134.39 1208.05 L1133.8 1208.05 L1133.21 1208.05 L1132.63 1208.05 L1132.04 1208.05 L1131.46 1208.05 L1130.87 1208.05 L1130.28 1208.05 L1129.7 1208.05 L1129.11 1208.05 L1128.52 1208.05 L1127.94 1208.05 L1127.35 1208.05 L1126.76 1208.05 L1126.18 1208.05 L1125.59 1208.05 L1125.01 1208.05 L1124.42 1208.05 L1123.83 1208.05 L1123.25 1208.05 L1122.66 1208.05 L1122.07 1208.05 L1121.49 1208.05 L1120.9 1208.05 L1120.31 1208.05 L1119.73 1208.05 L1119.14 1208.05 L1118.55 1208.05 L1117.97 1208.05 L1117.38 1208.05 L1116.8 1208.05 L1116.21 1208.05 L1115.62 1208.05 L1115.04 1208.05 L1114.45 1208.05 L1113.86 1208.05 L1113.28 1208.05 L1112.69 1208.05 L1112.1 1208.05 L1111.52 1208.05 L1110.93 1208.05 L1110.34 1208.05 L1109.76 1208.05 L1109.17 1208.05 L1108.59 1208.05 L1108 1208.05 L1107.41 1208.05 L1106.83 1208.05 L1106.24 1208.05 L1105.65 1208.05 L1105.07 1208.05 L1104.48 1208.05 L1103.89 1208.05 L1103.31 1208.05 L1102.72 1208.05 L1102.14 1208.05 L1101.55 1208.05 L1100.96 1208.05 L1100.38 1208.05 L1099.79 1208.05 L1099.2 1208.05 L1098.62 1208.05 L1098.03 1208.05 L1097.44 1208.05 L1096.86 1208.05 L1096.27 1208.05 L1095.68 1208.05 L1095.1 1208.05 L1094.51 1208.05 L1093.93 1208.05 L1093.34 1208.05 L1092.75 1208.05 L1092.17 1208.05 L1091.58 1208.05 L1090.99 1208.05 L1090.41 1208.05 L1089.82 1208.05 L1089.23 1208.05 L1088.65 1208.05 L1088.06 1208.05 L1087.47 1208.05 L1086.89 1208.05 L1086.3 1208.05 L1085.72 1208.05 L1085.13 1208.05 L1084.54 1208.05 L1083.96 1208.05 L1083.37 1208.05 L1082.78 1208.05 L1082.2 1208.05 L1081.61 1208.05 L1081.02 1208.05 L1080.44 1208.05 L1079.85 1208.05 L1079.26 1208.05 L1078.68 1208.05 L1078.09 1208.05 L1077.51 1208.05 L1076.92 1208.05 L1076.33 1208.05 L1075.75 1208.05 L1075.16 1208.05 L1074.57 1208.05 L1073.99 1208.05 L1073.4 1208.05 L1072.81 1208.05 L1072.23 1208.05 L1071.64 1208.05 L1071.06 1208.05 L1070.47 1208.05 L1069.88 1208.05 L1069.3 1208.05 L1068.71 1208.05 L1068.12 1208.05 L1067.54 1208.05 L1066.95 1208.05 L1066.36 1208.05 L1065.78 1208.05 L1065.19 1208.05 L1064.6 1208.05 L1064.02 1208.05 L1063.43 1208.05 L1062.85 1208.05 L1062.26 1208.05 L1061.67 1208.05 L1061.09 1208.05 L1060.5 1208.05 L1059.91 1208.05 L1059.33 1208.05 L1058.74 1208.05 L1058.15 1208.05 L1057.57 1208.05 L1056.98 1208.05 L1056.39 1208.05 L1055.81 1208.05 L1055.22 1208.05 L1054.64 1208.05 L1054.05 1208.05 L1053.46 1208.05 L1052.88 1208.05 L1052.29 1208.05 L1051.7 1208.05 L1051.12 1208.05 L1050.53 1208.05 L1049.94 1208.05 L1049.36 1208.05 L1048.77 1208.05 L1048.19 1208.05 L1047.6 1208.05 L1047.01 1208.05 L1046.43 1208.05 L1045.84 1208.05 L1045.25 1208.05 L1044.67 1208.05 L1044.08 1208.05 L1043.49 1208.05 L1042.91 1208.05 L1042.32 1208.05 L1041.73 1208.05 L1041.15 1208.05 L1040.56 1208.05 L1039.98 1208.05 L1039.39 1208.05 L1038.8 1208.05 L1038.22 1208.05 L1037.63 1208.05 L1037.04 1208.05 L1036.46 1208.05 L1035.87 1208.05 L1035.28 1208.05 L1034.7 1208.05 L1034.11 1208.05 L1033.52 1208.05 L1032.94 1208.05 L1032.35 1208.05 L1031.77 1208.05 L1031.18 1208.05 L1030.59 1208.05 L1030.01 1208.05 L1029.42 1208.05 L1028.83 1208.05 L1028.25 1208.05 L1027.66 1208.05 L1027.07 1208.05 L1026.49 1208.05 L1025.9 1208.05 L1025.32 1208.05 L1024.73 1208.05 L1024.14 1208.05 L1023.56 1208.05 L1022.97 1208.05 L1022.38 1208.05 L1021.8 1208.05 L1021.21 1208.05 L1020.62 1208.05 L1020.04 1208.05 L1019.45 1208.05 L1018.86 1208.05 L1018.28 1208.05 L1017.69 1208.05 L1017.11 1208.05 L1016.52 1208.05 L1015.93 1208.05 L1015.35 1208.05 L1014.76 1208.05 L1014.17 1208.05 L1013.59 1208.05 L1013 1208.05 L1012.41 1208.05 L1011.83 1208.05 L1011.24 1208.05 L1010.65 1208.05 L1010.07 1208.05 L1009.48 1208.05 L1008.9 1208.05 L1008.31 1208.05 L1007.72 1208.05 L1007.14 1208.05 L1006.55 1208.05 L1005.96 1208.05 L1005.38 1208.05 L1004.79 1208.05 L1004.2 1208.05 L1003.62 1208.05 L1003.03 1208.05 L1002.44 1208.05 L1001.86 1208.05 L1001.27 1208.05 L1000.69 1208.05 L1000.1 1208.05 L999.513 1208.05 L998.926 1208.05 L998.34 1208.05 L997.754 1208.05 L997.167 1208.05 L996.581 1208.05 L995.994 1208.05 L995.408 1208.05 L994.822 1208.05 L994.235 1208.05 L993.649 1208.05 L993.062 1208.05 L992.476 1208.05 L991.889 1208.05 L991.303 1208.05 L990.717 1208.05 L990.13 1208.05 L989.544 1208.05 L988.957 1208.05 L988.371 1208.05 L987.785 1208.05 L987.198 1208.05 L986.612 1208.05 L986.025 1208.05  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.11 986.612,1208.11 987.198,1208.11 987.785,1208.11 988.371,1208.11 988.957,1208.11 989.544,1208.11 990.13,1208.11 990.717,1208.11 991.303,1208.11 991.889,1208.11 992.476,1208.11 993.062,1208.11 993.649,1208.11 994.235,1208.11 994.822,1208.11 995.408,1208.11 995.994,1208.11 996.581,1208.11 997.167,1208.11 997.754,1208.11 998.34,1208.11 998.926,1208.11 999.513,1208.11 1000.1,1208.11 1000.69,1208.11 1001.27,1208.11 1001.86,1208.11 1002.44,1208.11 1003.03,1208.11 1003.62,1208.11 1004.2,1208.11 1004.79,1208.11 1005.38,1208.11 1005.96,1208.11 1006.55,1208.11 1007.14,1208.11 1007.72,1208.11 1008.31,1208.11 1008.9,1208.11 1009.48,1208.11 1010.07,1208.11 1010.65,1208.11 1011.24,1208.11 1011.83,1208.11 1012.41,1208.11 1013,1208.11 1013.59,1208.11 1014.17,1208.11 1014.76,1208.11 1015.35,1208.11 1015.93,1208.11 1016.52,1208.11 1017.11,1208.11 1017.69,1208.11 1018.28,1208.11 1018.86,1208.11 1019.45,1208.11 1020.04,1208.11 1020.62,1208.11 1021.21,1208.11 1021.8,1208.11 1022.38,1208.11 1022.97,1208.11 1023.56,1208.11 1024.14,1208.11 1024.73,1208.11 1025.32,1208.11 1025.9,1208.11 1026.49,1208.11 1027.07,1208.11 1027.66,1208.11 1028.25,1208.11 1028.83,1208.11 1029.42,1208.11 1030.01,1208.11 1030.59,1208.11 1031.18,1208.11 1031.77,1208.11 1032.35,1208.11 1032.94,1208.11 1033.52,1208.11 1034.11,1208.11 1034.7,1208.11 1035.28,1208.11 1035.87,1208.11 1036.46,1208.11 1037.04,1208.11 1037.63,1208.11 1038.22,1208.11 1038.8,1208.11 1039.39,1208.11 1039.98,1208.11 1040.56,1208.11 1041.15,1208.11 1041.73,1208.11 1042.32,1208.11 1042.91,1208.11 1043.49,1208.11 1044.08,1208.11 1044.67,1208.11 1045.25,1208.11 1045.84,1208.11 1046.43,1208.11 1047.01,1208.11 1047.6,1208.11 1048.19,1208.11 1048.77,1208.11 1049.36,1208.11 1049.94,1208.11 1050.53,1208.11 1051.12,1208.11 1051.7,1208.11 1052.29,1208.11 1052.88,1208.11 1053.46,1208.11 1054.05,1208.11 1054.64,1208.11 1055.22,1208.11 1055.81,1208.11 1056.39,1208.11 1056.98,1208.11 1057.57,1208.11 1058.15,1208.11 1058.74,1208.11 1059.33,1208.11 1059.91,1208.11 1060.5,1208.11 1061.09,1208.11 1061.67,1208.11 1062.26,1208.11 1062.85,1208.11 1063.43,1208.11 1064.02,1208.11 1064.6,1208.11 1065.19,1208.11 1065.78,1208.11 1066.36,1208.11 1066.95,1208.11 1067.54,1208.11 1068.12,1208.11 1068.71,1208.11 1069.3,1208.11 1069.88,1208.11 1070.47,1208.11 1071.06,1208.11 1071.64,1208.11 1072.23,1208.11 1072.81,1208.11 1073.4,1208.11 1073.99,1208.11 1074.57,1208.11 1075.16,1208.11 1075.75,1208.11 1076.33,1208.11 1076.92,1208.11 1077.51,1208.11 1078.09,1208.11 1078.68,1208.11 1079.26,1208.11 1079.85,1208.11 1080.44,1208.11 1081.02,1208.11 1081.61,1208.11 1082.2,1208.11 1082.78,1208.11 1083.37,1208.11 1083.96,1208.11 1084.54,1208.11 1085.13,1208.11 1085.72,1208.11 1086.3,1208.11 1086.89,1208.11 1087.47,1208.11 1088.06,1208.11 1088.65,1208.11 1089.23,1208.11 1089.82,1208.11 1090.41,1208.11 1090.99,1208.11 1091.58,1208.11 1092.17,1208.11 1092.75,1208.11 1093.34,1208.11 1093.93,1208.11 1094.51,1208.11 1095.1,1208.11 1095.68,1208.11 1096.27,1208.11 1096.86,1208.11 1097.44,1208.11 1098.03,1208.11 1098.62,1208.11 1099.2,1208.11 1099.79,1208.11 1100.38,1208.11 1100.96,1208.11 1101.55,1208.11 1102.14,1208.11 1102.72,1208.11 1103.31,1208.11 1103.89,1208.11 1104.48,1208.11 1105.07,1208.11 1105.65,1208.11 1106.24,1208.11 1106.83,1208.11 1107.41,1208.11 1108,1208.11 1108.59,1208.11 1109.17,1208.11 1109.76,1208.11 1110.34,1208.11 1110.93,1208.11 1111.52,1208.11 1112.1,1208.11 1112.69,1208.11 1113.28,1208.11 1113.86,1208.11 1114.45,1208.11 1115.04,1208.11 1115.62,1208.11 1116.21,1208.11 1116.8,1208.11 1117.38,1208.11 1117.97,1208.11 1118.55,1208.11 1119.14,1208.11 1119.73,1208.11 1120.31,1208.11 1120.9,1208.11 1121.49,1208.11 1122.07,1208.11 1122.66,1208.11 1123.25,1208.11 1123.83,1208.11 1124.42,1208.11 1125.01,1208.11 1125.59,1208.11 1126.18,1208.11 1126.76,1208.11 1127.35,1208.11 1127.94,1208.11 1128.52,1208.11 1129.11,1208.11 1129.7,1208.11 1130.28,1208.11 1130.87,1208.11 1131.46,1208.11 1132.04,1208.11 1132.63,1208.11 1133.21,1208.11 1133.8,1208.11 1134.39,1208.11 1134.97,1208.11 1135.56,1208.11 1136.15,1208.11 1136.73,1208.11 1137.32,1208.11 1137.91,1208.11 1138.49,1208.11 1139.08,1208.11 1139.67,1208.11 1140.25,1208.11 1140.84,1208.11 1141.42,1208.11 1142.01,1208.11 1142.6,1208.11 1143.18,1208.11 1143.77,1208.11 1144.36,1208.11 1144.94,1208.11 1145.53,1208.11 1146.12,1208.11 1146.7,1208.11 1147.29,1208.11 1147.88,1208.11 1148.46,1208.11 1149.05,1208.11 1149.63,1208.11 1150.22,1208.11 1150.81,1208.11 1151.39,1208.11 1151.98,1208.11 1152.57,1208.11 1153.15,1208.11 1153.74,1208.11 1154.33,1208.11 1154.91,1208.11 1155.5,1208.11 1156.09,1208.11 1156.67,1208.11 1157.26,1208.11 1157.84,1208.11 1158.43,1208.11 1159.02,1208.11 1159.6,1208.11 1160.19,1208.11 1160.78,1208.11 1161.36,1208.11 1161.95,1208.11 1162.54,1208.11 1163.12,1208.11 1163.71,1208.11 1164.29,1208.11 1164.88,1208.11 1165.47,1208.11 1166.05,1208.11 1166.64,1208.11 1167.23,1208.11 1167.81,1208.11 1168.4,1208.11 1168.99,1208.11 1169.57,1208.11 1170.16,1208.11 1170.75,1208.11 1171.33,1208.11 1171.92,1208.11 1172.5,1208.11 1173.09,1208.11 1173.68,1208.11 1174.26,1208.11 1174.85,1208.11 1175.44,1208.11 1176.02,1208.11 1176.61,1208.11 1177.2,1208.11 1177.78,1208.11 1178.37,1208.11 1178.96,1208.11 1179.54,1208.11 1180.13,1208.11 1180.71,1208.11 1181.3,1208.11 1181.89,1208.11 1182.47,1208.11 1183.06,1208.11 1183.65,1208.11 1184.23,1208.11 1184.82,1208.11 1185.41,1208.11 1185.99,1208.11 1186.58,1208.11 1187.16,1208.11 1187.75,1208.11 1188.34,1208.11 1188.92,1208.11 1189.51,1208.11 1190.1,1208.11 1190.68,1208.11 1191.27,1208.11 1191.86,1208.11 1192.44,1208.11 1193.03,1208.11 1193.62,1208.11 1194.2,1208.11 1194.79,1208.11 1195.37,1208.11 1195.96,1208.11 1196.55,1208.11 1197.13,1208.11 1197.72,1208.11 1198.31,1208.11 1198.89,1208.11 1199.48,1208.11 1200.07,1208.11 1200.65,1208.11 1201.24,1208.11 1201.83,1208.11 1202.41,1208.11 1203,1208.11 1203.58,1208.11 1204.17,1208.11 1204.76,1208.11 1205.34,1208.11 1205.93,1208.11 1206.52,1208.11 1207.1,1208.11 1207.69,1208.11 1208.28,1208.11 1208.86,1208.11 1209.45,1208.11 1210.03,1208.11 1210.62,1208.11 1211.21,1208.11 1211.79,1208.11 1212.38,1208.11 1212.97,1208.11 1213.55,1208.11 1214.14,1208.11 1214.73,1208.11 1215.31,1208.11 1215.9,1208.11 1216.49,1208.11 1217.07,1208.11 1217.66,1208.11 1218.24,1208.11 1218.83,1208.11 1219.42,1208.11 1220,1208.11 1220.59,1208.11 1221.18,1208.11 1221.76,1208.11 1222.35,1208.11 1222.94,1208.11 1223.52,1208.11 1224.11,1208.11 1224.7,1208.11 1225.28,1208.11 1225.87,1208.11 1226.45,1208.11 1227.04,1208.11 1227.63,1208.11 1228.21,1208.11 1228.8,1208.11 1229.39,1208.11 1229.97,1208.11 1230.56,1208.11 1231.15,1208.11 1231.73,1208.11 1232.32,1208.11 1232.91,1208.11 1233.49,1208.11 1234.08,1208.11 1234.66,1208.11 1235.25,1208.11 1235.84,1208.11 1236.42,1208.11 1237.01,1208.11 1237.6,1208.11 1238.18,1208.11 1238.77,1208.11 1239.36,1208.11 1239.94,1208.11 1240.53,1208.11 1241.11,1208.11 1241.7,1208.11 1242.29,1208.11 1242.87,1208.11 1243.46,1208.11 1244.05,1208.11 1244.63,1208.11 1245.22,1208.11 1245.81,1208.11 1246.39,1208.11 1246.98,1208.11 1247.57,1208.11 1248.15,1208.11 1248.74,1208.11 1249.32,1208.11 1249.91,1208.11 1250.5,1208.11 1251.08,1208.11 1251.67,1208.11 1252.26,1208.11 1252.84,1208.11 1253.43,1208.11 1254.02,1208.11 1254.6,1208.11 1255.19,1208.11 1255.78,1208.11 1256.36,1208.11 1256.95,1208.11 1257.53,1208.11 1258.12,1208.11 1258.71,1208.11 1259.29,1208.11 1259.88,1208.11 1260.47,1208.11 1261.05,1208.11 1261.64,1208.11 1262.23,1208.11 1262.81,1208.11 1263.4,1208.11 1263.98,1208.11 1264.57,1208.11 1265.16,1208.11 1265.74,1208.11 1266.33,1208.11 1266.92,1208.11 1267.5,1208.11 1268.09,1208.11 1268.68,1208.11 1269.26,1208.11 1269.85,1208.11 1270.44,1208.11 1271.02,1208.11 1271.61,1208.11 1272.19,1208.11 1272.78,1208.11 1273.37,1208.11 1273.95,1208.11 1274.54,1208.11 1275.13,1208.11 1275.71,1208.11 1276.3,1208.11 1276.89,1208.11 1277.47,1208.11 1278.06,1208.11 1278.65,1208.11 1279.23,1208.11 1279.82,1208.11 1280.4,1208.11 1280.99,1208.11 1281.58,1208.11 1282.16,1208.11 1282.75,1208.11 1283.34,1208.11 1283.92,1208.11 1284.51,1208.11 1285.1,1208.11 1285.68,1208.11 1286.27,1208.11 1286.86,1208.11 1287.44,1208.11 1288.03,1208.11 1288.61,1208.11 1289.2,1208.11 1289.79,1208.11 1290.37,1208.11 1290.96,1208.11 1291.55,1208.11 1292.13,1208.11 1292.72,1208.11 1293.31,1208.11 1293.89,1208.11 1294.48,1208.11 1295.06,1208.11 1295.65,1208.11 1296.24,1208.11 1296.82,1208.11 1297.41,1208.11 1298,1208.11 1298.58,1208.11 1299.17,1208.11 1299.76,1208.11 1300.34,1208.11 1300.93,1208.11 1301.52,1208.11 1302.1,1208.11 1302.69,1208.11 1303.27,1208.11 1303.86,1208.11 1304.45,1208.11 1305.03,1208.11 1305.62,1208.11 1306.21,1208.11 1306.79,1208.11 1307.38,1208.11 1307.97,1208.11 1308.55,1208.11 1309.14,1208.11 1309.73,1208.11 1310.31,1208.11 1310.9,1208.11 1311.48,1208.11 1312.07,1208.11 1312.66,1208.11 1313.24,1208.11 1313.83,1208.11 1314.42,1208.11 1315,1208.11 1315.59,1208.11 1316.18,1208.11 1316.76,1208.11 1317.35,1208.11 1317.93,1208.11 1318.52,1208.11 1319.11,1208.11 1319.69,1208.11 1320.28,1208.11 1320.87,1208.11 1321.45,1208.11 1322.04,1208.11 1322.63,1208.11 1323.21,1208.11 1323.8,1208.11 1324.39,1208.11 1324.97,1208.11 1325.56,1208.11 1326.14,1208.11 1326.73,1208.11 1327.32,1208.11 1327.9,1208.11 1328.49,1208.11 1329.08,1208.11 1329.66,1208.11 1330.25,1208.11 1330.84,1208.11 1331.42,1208.11 1332.01,1208.11 1332.6,1208.11 1333.18,1208.11 1333.77,1208.11 1334.35,1208.11 1334.94,1208.11 1335.53,1208.11 1336.11,1208.11 1336.7,1208.11 1337.29,1208.11 1337.87,1208.11 1338.46,1208.11 1339.05,1208.11 1339.63,1208.11 1340.22,1208.11 1340.8,1208.11 1341.39,1208.11 1341.98,1208.11 1342.56,1208.11 1343.15,1208.11 1343.74,1208.11 1344.32,1208.11 1344.91,1208.11 1345.5,1208.11 1346.08,1208.11 1346.67,1208.11 1347.26,1208.11 1347.84,1208.11 1348.43,1208.11 1349.01,1208.11 1349.6,1208.11 1350.19,1208.11 1350.77,1208.11 1351.36,1208.11 1351.95,1208.11 1352.53,1208.11 1353.12,1208.11 1353.71,1208.11 1354.29,1208.11 1354.88,1208.11 1355.47,1208.11 1356.05,1208.11 1356.64,1208.11 1357.22,1208.11 1357.81,1208.11 1358.4,1208.11 1358.98,1208.11 1359.57,1208.11 1360.16,1208.11 1360.74,1208.11 1361.33,1208.11 1361.92,1208.11 1362.5,1208.11 1363.09,1208.11 1363.68,1208.11 1364.26,1208.11 1364.85,1208.11 1365.43,1208.11 1366.02,1208.11 1366.61,1208.11 1367.19,1208.11 1367.78,1208.11 1368.37,1208.11 1368.95,1208.11 1369.54,1208.11 1370.13,1208.11 1370.71,1208.11 1371.3,1208.11 1371.88,1208.11 1372.47,1208.11 1373.06,1208.11 1373.64,1208.11 1374.23,1208.11 1374.82,1208.11 1375.4,1208.11 1375.99,1208.11 1376.58,1208.11 1377.16,1208.11 1377.75,1208.11 1378.34,1208.11 1378.92,1208.11 1379.51,1208.11 1380.09,1208.11 1380.68,1208.11 1381.27,1208.11 1381.85,1208.11 1382.44,1208.11 1383.03,1208.11 1383.61,1208.11 1384.2,1208.11 1384.79,1208.11 1385.37,1208.11 1385.96,1208.11 1386.55,1208.11 1387.13,1208.11 1387.72,1208.11 1388.3,1208.11 1388.89,1208.11 1389.48,1208.11 1390.06,1208.11 1390.65,1208.11 1391.24,1208.11 1391.82,1208.11 1392.41,1208.11 1393,1208.11 1393.58,1208.11 1394.17,1208.11 1394.75,1208.11 1395.34,1208.11 1395.93,1208.11 1396.51,1208.11 1397.1,1208.11 1397.69,1208.11 1398.27,1208.11 1398.86,1208.11 1399.45,1208.11 1400.03,1208.11 1400.62,1208.11 1401.21,1208.11 1401.79,1208.11 1402.38,1208.11 1402.96,1208.11 1403.55,1208.11 1404.14,1208.11 1404.72,1208.11 1405.31,1208.11 1405.9,1208.11 1406.48,1208.11 1407.07,1208.11 1407.66,1208.11 1408.24,1208.11 1408.83,1208.11 1409.42,1208.11 1410,1208.11 1410.59,1208.11 1411.17,1208.11 1411.76,1208.11 1412.35,1208.11 1412.93,1208.11 1413.52,1208.11 1414.11,1208.11 1414.69,1208.11 1415.28,1208.11 1415.87,1208.11 1416.45,1208.11 1417.04,1208.11 1417.63,1208.11 1418.21,1208.11 1418.8,1208.11 1419.38,1208.11 1419.97,1208.11 1420.56,1208.11 1421.14,1208.11 1421.73,1208.11 1422.32,1208.11 1422.9,1208.11 1423.49,1208.11 1424.08,1208.11 1424.66,1208.11 1425.25,1208.11 1425.83,1208.11 1426.42,1208.11 1427.01,1208.11 1427.59,1208.11 1428.18,1208.11 1428.77,1208.11 1429.35,1208.11 1429.94,1208.11 1430.53,1208.11 1431.11,1208.11 1431.7,1208.11 1432.29,1208.11 1432.87,1208.11 1433.46,1208.11 1434.04,1208.11 1434.63,1208.11 1435.22,1208.11 1435.8,1208.11 1436.39,1208.11 1436.98,1208.11 1437.56,1208.11 1438.15,1208.11 1438.74,1208.11 1439.32,1208.11 1439.91,1208.11 1440.5,1208.11 1441.08,1208.11 1441.67,1208.11 1442.25,1208.11 1442.84,1208.11 1443.43,1208.11 1444.01,1208.11 1444.6,1208.11 1445.19,1208.11 1445.77,1208.11 1446.36,1208.11 1446.95,1208.11 1447.53,1208.11 1448.12,1208.11 1448.7,1208.11 1449.29,1208.11 1449.88,1208.11 1450.46,1208.11 1451.05,1208.11 1451.64,1208.11 1452.22,1208.11 1452.81,1208.11 1453.4,1208.11 1453.98,1208.11 1454.57,1208.11 1455.16,1208.11 1455.74,1208.11 1456.33,1208.11 1456.91,1208.11 1457.5,1208.11 1458.09,1208.11 1458.67,1208.11 1459.26,1208.11 1459.85,1208.11 1460.43,1208.11 1461.02,1208.11 1461.61,1208.11 1462.19,1208.11 1462.78,1208.11 1463.37,1208.11 1463.95,1208.11 1464.54,1208.11 1465.12,1208.11 1465.71,1208.11 1466.3,1208.11 1466.88,1208.11 1467.47,1208.11 1468.06,1208.11 1468.64,1208.11 1469.23,1208.11 1469.82,1208.11 1470.4,1208.11 1470.99,1208.11 1471.57,1208.11 1472.16,1208.11 1472.75,1208.11 1473.33,1208.11 1473.92,1208.11 1474.51,1208.11 1475.09,1208.11 1475.68,1208.11 1476.27,1208.11 1476.85,1208.11 1477.44,1208.11 1478.03,1208.11 1478.61,1208.11 1479.2,1208.11 1479.78,1208.11 1480.37,1208.11 1480.96,1208.11 1481.54,1208.11 1482.13,1208.11 1482.72,1208.11 1483.3,1208.11 1483.89,1208.11 1484.48,1208.11 1485.06,1208.11 1485.65,1208.11 1486.24,1208.11 1486.82,1208.11 1487.41,1208.11 1487.99,1208.11 1488.58,1208.11 1489.17,1208.11 1489.75,1208.11 1490.34,1208.11 1490.93,1208.11 1491.51,1208.11 1492.1,1208.11 1492.69,1208.11 1493.27,1208.11 1493.86,1208.11 1494.45,1208.11 1495.03,1208.11 1495.62,1208.11 1496.2,1208.11 1496.79,1208.11 1497.38,1208.11 1497.96,1208.11 1498.55,1208.11 1499.14,1208.11 1499.72,1208.11 1500.31,1208.11 1500.9,1208.11 1501.48,1208.11 1502.07,1208.11 1502.65,1208.11 1503.24,1208.11 1503.83,1208.11 1504.41,1208.11 1505,1208.11 1505.59,1208.11 1506.17,1208.11 1506.76,1208.11 1507.35,1208.11 1507.93,1208.11 1508.52,1208.11 1509.11,1208.11 1509.69,1208.11 1510.28,1208.11 1510.86,1208.11 1511.45,1208.11 1512.04,1208.11 1512.62,1208.11 1513.21,1208.11 1513.8,1208.11 1514.38,1208.11 1514.97,1208.11 1515.56,1208.11 1516.14,1208.11 1516.73,1208.11 1517.32,1208.11 1517.9,1208.11 1518.49,1208.11 1519.07,1208.11 1519.66,1208.11 1520.25,1208.11 1520.83,1208.11 1521.42,1208.11 1522.01,1208.11 1522.59,1208.11 1523.18,1208.11 1523.77,1208.11 1524.35,1208.11 1524.94,1208.11 1525.52,1208.11 1526.11,1208.11 1526.7,1208.11 1527.28,1208.11 1527.87,1208.11 1528.46,1208.11 1529.04,1208.11 1529.63,1208.11 1530.22,1208.11 1530.8,1208.11 1531.39,1208.11 1531.98,1208.11 1532.56,1208.11 1533.15,1208.11 1533.73,1208.11 1534.32,1208.11 1534.91,1208.11 1535.49,1208.11 1536.08,1208.11 1536.67,1208.11 1537.25,1208.11 1537.84,1208.11 1538.43,1208.11 1539.01,1208.11 1539.6,1208.11 1540.19,1208.11 1540.77,1208.11 1541.36,1208.11 1541.94,1208.11 1542.53,1208.11 1543.12,1208.11 1543.7,1208.11 1544.29,1208.11 1544.88,1208.11 1545.46,1208.11 1546.05,1208.11 1546.64,1208.11 1547.22,1208.11 1547.81,1208.11 1548.4,1208.11 1548.98,1208.11 1549.57,1208.11 1550.15,1208.11 1550.74,1208.11 1551.33,1208.11 1551.91,1208.11 1552.5,1208.11 1553.09,1208.11 1553.67,1208.11 1554.26,1208.11 1554.85,1208.11 1555.43,1208.11 1556.02,1208.11 1556.6,1208.11 1557.19,1208.11 1557.78,1208.11 1558.36,1208.11 1558.95,1208.11 1559.54,1208.11 1560.12,1208.11 1560.71,1208.11 1561.3,1208.11 1561.88,1208.11 1562.47,1208.11 1563.06,1208.11 1563.64,1208.11 1564.23,1208.11 1564.81,1208.11 1565.4,1208.11 1565.99,1208.11 1566.57,1208.11 1567.16,1208.11 1567.75,1208.11 1568.33,1208.11 1568.92,1208.11 1569.51,1208.11 1570.09,1208.11 1570.68,1208.11 1571.27,1208.11 1571.85,1208.11 1572.44,1208.11 1573.02,1208.11 1573.61,1208.11 1574.2,1208.11 1574.78,1208.11 1575.37,1208.11 1575.96,1208.11 1576.54,1208.11 1577.13,1208.11 1577.72,1208.11 1578.3,1208.11 1578.89,1208.11 1579.47,1208.11 1580.06,1208.11 1580.65,1208.11 1581.23,1208.11 1581.82,1208.11 1582.41,1208.11 1582.99,1208.11 1583.58,1208.11 1584.17,1208.11 1584.75,1208.11 1585.34,1208.11 1585.93,1208.11 1586.51,1208.11 1587.1,1208.11 1587.68,1208.11 1588.27,1208.11 1588.86,1208.11 1589.44,1208.11 1590.03,1208.11 1590.62,1208.11 1591.2,1208.11 1591.79,1208.11 1592.38,1208.11 1592.96,1208.11 1593.55,1208.11 1594.14,1208.11 1594.72,1208.11 1595.31,1208.11 1595.89,1208.11 1596.48,1208.11 1597.07,1208.11 1597.65,1208.11 1598.24,1208.11 1598.83,1208.11 1599.41,1208.11 1600,1208.11 1600.59,1208.11 1601.17,1208.11 1601.76,1208.11 1602.34,1208.11 1602.93,1208.11 1603.52,1208.11 1604.1,1208.11 1604.69,1208.11 1605.28,1208.11 1605.86,1208.11 1606.45,1208.11 1607.04,1208.11 1607.62,1208.11 1608.21,1208.11 1608.8,1208.11 1609.38,1208.11 1609.97,1208.11 1610.55,1208.11 1611.14,1208.11 1611.73,1208.11 1612.31,1208.11 1612.9,1208.11 1613.49,1208.11 1614.07,1208.11 1614.66,1208.11 1615.25,1208.11 1615.83,1208.11 1616.42,1208.11 1617.01,1208.11 1617.59,1208.11 1618.18,1208.11 1618.76,1208.11 1619.35,1208.11 1619.94,1208.11 1620.52,1208.11 1621.11,1208.11 1621.7,1208.11 1622.28,1208.11 1622.87,1208.11 1623.46,1208.11 1624.04,1208.11 1624.63,1208.11 1625.22,1208.11 1625.8,1208.11 1626.39,1208.11 1626.97,1208.11 1627.56,1208.11 1628.15,1208.11 1628.73,1208.11 1629.32,1208.11 1629.91,1208.11 1630.49,1208.11 1631.08,1208.11 1631.67,1208.11 1632.25,1208.11 1632.84,1208.11 1633.42,1208.11 1634.01,1208.11 1634.6,1208.11 1635.18,1208.11 1635.77,1208.11 1636.36,1208.11 1636.94,1208.11 1637.53,1208.11 1638.12,1208.11 1638.7,1208.11 1639.29,1208.11 1639.88,1208.11 1640.46,1208.11 1641.05,1208.11 1641.63,1208.11 1642.22,1208.11 1642.81,1208.11 1643.39,1208.11 1643.98,1208.11 1644.57,1208.11 1645.15,1208.11 1645.74,1208.11 1646.33,1208.11 1646.91,1208.11 1647.5,1208.11 1648.09,1208.11 1648.67,1208.11 1649.26,1208.11 1649.84,1208.11 1650.43,1208.11 1651.02,1208.11 1651.6,1208.11 1652.19,1208.11 1652.78,1208.11 1653.36,1208.11 1653.95,1208.11 1654.54,1208.11 1655.12,1208.11 1655.71,1208.11 1656.29,1208.11 1656.88,1208.11 1657.47,1208.11 1658.05,1208.11 1658.64,1208.11 1659.23,1208.11 1659.81,1208.11 1660.4,1208.11 1660.99,1208.11 1661.57,1208.11 1662.16,1208.11 1662.75,1208.11 1663.33,1208.11 1663.92,1208.11 1664.5,1208.11 1665.09,1208.11 1665.68,1208.11 1666.26,1208.11 1666.85,1208.11 1667.44,1208.11 1668.02,1208.11 1668.61,1208.11 1669.2,1208.11 1669.78,1208.11 1670.37,1208.11 1670.96,1208.11 1671.54,1208.11 1672.13,1208.11 1672.71,1208.11 1673.3,1208.11 1673.89,1208.11 1674.47,1208.11 1675.06,1208.11 1675.65,1208.11 1676.23,1208.11 1676.82,1208.11 1677.41,1208.11 1677.99,1208.11 1678.58,1208.11 1679.17,1208.11 1679.75,1208.11 1680.34,1208.11 1680.92,1208.11 1681.51,1208.11 1682.1,1208.11 1682.68,1208.11 1683.27,1208.11 1683.86,1208.11 1684.44,1208.11 1685.03,1208.11 1685.62,1208.11 1686.2,1208.11 1686.79,1208.11 1687.37,1208.11 1687.96,1208.11 1688.55,1208.11 1689.13,1208.11 1689.72,1208.11 1690.31,1208.11 1690.89,1208.11 1691.48,1208.11 1692.07,1208.11 1692.65,1208.11 1693.24,1208.11 1693.83,1208.11 1694.41,1208.11 1695,1208.11 1695.58,1208.11 1696.17,1208.11 1696.76,1208.11 1697.34,1208.11 1697.93,1208.11 1698.52,1208.11 1699.1,1208.11 1699.69,1208.11 1700.28,1208.11 1700.86,1208.11 1701.45,1208.11 1702.04,1208.11 1702.62,1208.11 1703.21,1208.11 1703.79,1208.11 1704.38,1208.11 1704.97,1208.11 1705.55,1208.11 1706.14,1208.11 1706.73,1208.11 1707.31,1208.11 1707.9,1208.11 1708.49,1208.11 1709.07,1208.11 1709.66,1208.11 1710.24,1208.11 1710.83,1208.11 1711.42,1208.11 1712,1208.11 1712.59,1208.11 1713.18,1208.11 1713.76,1208.11 1714.35,1208.11 1714.94,1208.11 1715.52,1208.11 1716.11,1208.11 1716.7,1208.11 1717.28,1208.11 1717.87,1208.11 1718.45,1208.11 1719.04,1208.11 1719.63,1208.11 1720.21,1208.11 1720.8,1208.11 1721.39,1208.11 1721.97,1208.11 1722.56,1208.11 1723.15,1208.11 1723.73,1208.11 1724.32,1208.11 1724.91,1208.11 1725.49,1208.11 1726.08,1208.11 1726.66,1208.11 1727.25,1208.11 1727.84,1208.11 1728.42,1208.11 1729.01,1208.11 1729.6,1208.11 1730.18,1208.11 1730.77,1208.11 1731.36,1208.11 1731.94,1208.11 1732.53,1208.11 1733.11,1208.11 1733.7,1208.11 1734.29,1208.11 1734.87,1208.11 1735.46,1208.11 1736.05,1208.11 1736.63,1208.11 1737.22,1208.11 1737.81,1208.11 1738.39,1208.11 1738.98,1208.11 1739.57,1208.11 1740.15,1208.11 1740.74,1208.11 1741.32,1208.11 1741.91,1208.11 1742.5,1208.11 1743.08,1208.11 1743.67,1208.11 1744.26,1208.11 1744.84,1208.11 1745.43,1208.11 1746.02,1208.11 1746.6,1208.11 1747.19,1208.11 1747.78,1208.11 1748.36,1208.11 1748.95,1208.11 1749.53,1208.11 1750.12,1208.11 1750.71,1208.11 1751.29,1208.11 1751.88,1208.11 1752.47,1208.11 1753.05,1208.11 1753.64,1208.11 1754.23,1208.11 1754.81,1208.11 1755.4,1208.11 1755.99,1208.11 1756.57,1208.11 1757.16,1208.11 1757.74,1208.11 1758.33,1208.11 1758.92,1208.11 1759.5,1208.11 1760.09,1208.11 1760.68,1208.11 1761.26,1208.11 1761.85,1208.11 1762.44,1208.11 1763.02,1208.11 1763.61,1208.11 1764.19,1208.11 1764.78,1208.11 1765.37,1208.11 1765.95,1208.11 1766.54,1208.11 1767.13,1208.11 1767.71,1208.11 1768.3,1208.11 1768.89,1208.11 1769.47,1208.11 1770.06,1208.11 1770.65,1208.11 1771.23,1208.11 1771.82,1208.11 1772.4,1208.11 1772.99,1208.11 1773.58,1208.11 1774.16,1208.11 1774.75,1208.11 1775.34,1208.11 1775.92,1208.11 1776.51,1208.11 1777.1,1208.11 1777.68,1208.11 1778.27,1208.11 1778.86,1208.11 1779.44,1208.11 1780.03,1208.11 1780.61,1208.11 1781.2,1208.11 1781.79,1208.11 1782.37,1208.11 1782.96,1208.11 1783.55,1208.11 1784.13,1208.11 1784.72,1208.11 1785.31,1208.11 1785.89,1208.11 1786.48,1208.11 1787.06,1208.11 1787.65,1208.11 1788.24,1208.11 1788.82,1208.11 1789.41,1208.11 1790,1208.11 1790.58,1208.11 1791.17,1208.11 1791.76,1208.11 1792.34,1208.11 1792.93,1208.11 1793.52,1208.11 1794.1,1208.11 1794.69,1208.11 1795.27,1208.11 1795.86,1208.11 1796.45,1208.11 1797.03,1208.11 1797.62,1208.11 1798.21,1208.11 1798.79,1208.11 1799.38,1208.11 1799.97,1208.11 1800.55,1208.11 1801.14,1208.11 1801.73,1208.11 1802.31,1208.11 1802.9,1208.11 1803.48,1208.11 1804.07,1208.11 1804.66,1208.11 1805.24,1208.11 1805.83,1208.11 1806.42,1208.11 1807,1208.11 1807.59,1208.11 1808.18,1208.11 1808.76,1208.11 1809.35,1208.11 1809.94,1208.11 1810.52,1208.11 1811.11,1208.11 1811.69,1208.11 1812.28,1208.11 1812.87,1208.11 1813.45,1208.11 1814.04,1208.11 1814.63,1208.11 1815.21,1208.11 1815.8,1208.11 1816.39,1208.11 1816.97,1208.11 1817.56,1208.11 1818.14,1208.11 1818.73,1208.11 1819.32,1208.11 1819.9,1208.11 1820.49,1208.11 1821.08,1208.11 1821.66,1208.11 1822.25,1208.11 1822.84,1208.11 1823.42,1208.11 1824.01,1208.11 1824.6,1208.11 1825.18,1208.11 1825.77,1208.11 1826.35,1208.11 1826.94,1208.11 1827.53,1208.11 1828.11,1208.11 1828.7,1208.11 1829.29,1208.11 1829.87,1208.11 1830.46,1208.11 1831.05,1208.11 1831.63,1208.11 1832.22,1208.11 1832.81,1208.11 1833.39,1208.11 1833.98,1208.11 1834.56,1208.11 1835.15,1208.11 1835.74,1208.11 1836.32,1208.11 1836.91,1208.11 1837.5,1208.11 1838.08,1208.11 1838.67,1208.11 1839.26,1208.11 1839.84,1208.11 1840.43,1208.11 1841.01,1208.11 1841.6,1208.11 1842.19,1208.11 1842.77,1208.11 1843.36,1208.11 1843.95,1208.11 1844.53,1208.11 1845.12,1208.11 1845.71,1208.11 1846.29,1208.11 1846.88,1208.11 1847.47,1208.11 1848.05,1208.11 1848.64,1208.11 1849.22,1208.11 1849.81,1208.11 1850.4,1208.11 1850.98,1208.11 1851.57,1208.11 1852.16,1208.11 1852.74,1208.11 1853.33,1208.11 1853.92,1208.11 1854.5,1208.11 1855.09,1208.11 1855.68,1208.11 1856.26,1208.11 1856.85,1208.11 1857.43,1208.11 1858.02,1208.11 1858.61,1208.11 1859.19,1208.11 1859.78,1208.11 1860.37,1208.11 1860.95,1208.11 1861.54,1208.11 1862.13,1208.11 1862.71,1208.11 1863.3,1208.11 1863.88,1208.11 1864.47,1208.11 1865.06,1208.11 1865.64,1208.11 1866.23,1208.11 1866.82,1208.11 1867.4,1208.11 1867.99,1208.11 1868.58,1208.11 1869.16,1208.11 1869.75,1208.11 1870.34,1208.11 1870.92,1208.11 1871.51,1208.11 1872.09,1208.11 1872.68,1208.11 1873.27,1208.11 1873.85,1208.11 1874.44,1208.11 1875.03,1208.11 1875.61,1208.11 1876.2,1208.11 1876.79,1208.11 1877.37,1208.11 1877.96,1208.11 1878.55,1208.11 1879.13,1208.11 1879.72,1208.11 1880.3,1208.11 1880.89,1208.11 1881.48,1208.11 1882.06,1208.11 1882.65,1208.11 1883.24,1208.11 1883.82,1208.11 1884.41,1208.11 1885,1208.11 1885.58,1208.11 1886.17,1208.11 1886.76,1208.11 1887.34,1208.11 1887.93,1208.11 1888.51,1208.11 1889.1,1208.11 1889.69,1208.11 1890.27,1208.11 1890.86,1208.11 1891.45,1208.11 1892.03,1208.11 1892.62,1208.11 1893.21,1208.11 1893.79,1208.11 1894.38,1208.11 1894.96,1208.11 1895.55,1208.11 1896.14,1208.11 1896.72,1208.11 1897.31,1208.11 1897.9,1208.11 1898.48,1208.11 1899.07,1208.11 1899.66,1208.11 1900.24,1208.11 1900.83,1208.11 1901.42,1208.11 1902,1208.11 1902.59,1208.11 1903.17,1208.11 1903.76,1208.11 1904.35,1208.11 1904.93,1208.11 1905.52,1208.11 1906.11,1208.11 1906.69,1208.11 1907.28,1208.11 1907.87,1208.11 1908.45,1208.11 1909.04,1208.11 1909.63,1208.11 1910.21,1208.11 1910.8,1208.11 1911.38,1208.11 1911.97,1208.11 1912.56,1208.11 1913.14,1208.11 1913.73,1208.11 1914.32,1208.11 1914.9,1208.11 1915.49,1208.11 1916.08,1208.11 1916.66,1208.11 1917.25,1208.11 1917.83,1208.11 1918.42,1208.11 1919.01,1208.11 1919.59,1208.11 1920.18,1208.11 1920.77,1208.11 1921.35,1208.11 1921.94,1208.11 1922.53,1208.11 1923.11,1208.11 1923.7,1208.11 1924.29,1208.11 1924.87,1208.11 1925.46,1208.11 1926.04,1208.11 1926.63,1208.11 1927.22,1208.11 1927.8,1208.11 1928.39,1208.11 1928.98,1208.11 1929.56,1208.11 1930.15,1208.11 1930.74,1208.11 1931.32,1208.11 1931.91,1208.11 1932.5,1208.11 1933.08,1208.11 1933.67,1208.11 1934.25,1208.11 1934.84,1208.11 1935.43,1208.11 1936.01,1208.11 1936.6,1208.11 1937.19,1208.11 1937.77,1208.11 1938.36,1208.11 1938.95,1208.11 1939.53,1208.11 1940.12,1208.11 1940.71,1208.11 1941.29,1208.11 1941.88,1208.11 1942.46,1208.11 1943.05,1208.11 1943.64,1208.11 1944.22,1208.11 1944.81,1208.11 1945.4,1208.11 1945.98,1208.11 1946.57,1208.11 1947.16,1208.11 1947.74,1208.11 1948.33,1208.11 1948.91,1208.11 1949.5,1208.11 1950.09,1208.11 1950.67,1208.11 1951.26,1208.11 1951.85,1208.11 1952.43,1208.11 1953.02,1208.11 1953.61,1208.11 1954.19,1208.11 1954.78,1208.11 1955.37,1208.11 1955.95,1208.11 1956.54,1208.11 1957.12,1208.11 1957.71,1208.11 1958.3,1208.11 1958.88,1208.11 1959.47,1208.11 1960.06,1208.11 1960.64,1208.11 1961.23,1208.11 1961.82,1208.11 1962.4,1208.11 1962.99,1208.11 1963.58,1208.11 1964.16,1208.11 1964.75,1208.11 1965.33,1208.11 1965.92,1208.11 1966.51,1208.11 1967.09,1208.11 1967.68,1208.11 1968.27,1208.11 1968.85,1208.11 1969.44,1208.11 1970.03,1208.11 1970.61,1208.11 1971.2,1208.11 1971.78,1208.11 1972.37,1208.11 1972.96,1208.11 1973.54,1208.11 1974.13,1208.11 1974.72,1208.11 1975.3,1208.11 1975.89,1208.11 1976.48,1208.11 1977.06,1208.11 1977.65,1208.11 1978.24,1208.11 1978.82,1208.11 1979.41,1208.11 1979.99,1208.11 1980.58,1208.11 1981.17,1208.11 1981.75,1208.11 1982.34,1208.11 1982.93,1208.11 1983.51,1208.11 1984.1,1208.11 1984.69,1208.11 1985.27,1208.11 1985.86,1208.11 1986.45,1208.11 1987.03,1208.11 1987.62,1208.11 1988.2,1208.11 1988.79,1208.11 1989.38,1208.11 1989.96,1208.11 1990.55,1208.11 1991.14,1208.11 1991.72,1208.11 1992.31,1208.11 1992.9,1208.11 1993.48,1208.11 1994.07,1208.11 1994.65,1208.11 1995.24,1208.11 1995.83,1208.11 1996.41,1208.11 1997,1208.11 1997.59,1208.11 1998.17,1208.11 1998.76,1208.11 1999.35,1208.11 1999.93,1208.11 2000.52,1208.11 2001.11,1208.11 2001.69,1208.11 2002.28,1208.11 2002.86,1208.11 2003.45,1208.11 2004.04,1208.11 2004.62,1208.11 2005.21,1208.11 2005.8,1208.11 2006.38,1208.11 2006.97,1208.11 2007.56,1208.11 2008.14,1208.11 2008.73,1208.11 2009.32,1208.11 2009.9,1208.11 2010.49,1208.11 2011.07,1208.11 2011.66,1208.11 2012.25,1208.11 2012.83,1208.11 2013.42,1208.11 2014.01,1208.11 2014.59,1208.11 2015.18,1208.11 2015.77,1208.11 2016.35,1208.11 2016.94,1208.11 2017.53,1208.11 2018.11,1208.11 2018.7,1208.11 2019.28,1208.11 2019.87,1208.11 2020.46,1208.11 2021.04,1208.11 2021.63,1208.11 2022.22,1208.11 2022.8,1208.11 2023.39,1208.11 2023.98,1208.11 2024.56,1208.11 2025.15,1208.11 2025.73,1208.11 2026.32,1208.11 2026.91,1208.11 2027.49,1208.11 2028.08,1208.11 2028.67,1208.11 2029.25,1208.11 2029.84,1208.11 2030.43,1208.11 2031.01,1208.11 2031.6,1208.11 2032.19,1208.11 2032.77,1208.11 2033.36,1208.11 2033.94,1208.11 2034.53,1208.11 2035.12,1208.11 2035.7,1208.11 2036.29,1208.11 2036.88,1208.11 2037.46,1208.11 2038.05,1208.11 2038.64,1208.11 2039.22,1208.11 2039.81,1208.11 2040.4,1208.11 2040.98,1208.11 2041.57,1208.11 2042.15,1208.11 2042.74,1208.11 2043.33,1208.11 2043.91,1208.11 2044.5,1208.11 2045.09,1208.11 2045.67,1208.11 2046.26,1208.11 2046.85,1208.11 2047.43,1208.11 2048.02,1208.11 2048.6,1208.11 2049.19,1208.11 2049.78,1208.11 2050.36,1208.11 2050.95,1208.11 2051.54,1208.11 2052.12,1208.11 2052.71,1208.11 2053.3,1208.11 2053.88,1208.11 2054.47,1208.11 2055.06,1208.11 2055.64,1208.11 2056.23,1208.11 2056.81,1208.11 2057.4,1208.11 2057.99,1208.11 2058.57,1208.11 2059.16,1208.11 2059.75,1208.11 2060.33,1208.11 2060.92,1208.11 2061.51,1208.11 2062.09,1208.11 2062.68,1208.11 2063.27,1208.11 2063.85,1208.11 2064.44,1208.11 2065.02,1208.11 2065.61,1208.11 2066.2,1208.11 2066.78,1208.11 2067.37,1208.11 2067.96,1208.11 2068.54,1208.11 2069.13,1208.11 2069.72,1208.11 2070.3,1208.11 2070.89,1208.11 2071.48,1208.11 2072.06,1208.11 2072.65,1208.11 2073.23,1208.11 2073.82,1208.11 2074.41,1208.11 2074.99,1208.11 2075.58,1208.11 2076.17,1208.11 2076.75,1208.11 2077.34,1208.11 2077.93,1208.11 2078.51,1208.11 2079.1,1208.11 2079.68,1208.11 2080.27,1208.11 2080.86,1208.11 2081.44,1208.11 2082.03,1208.11 2082.62,1208.11 2083.2,1208.11 2083.79,1208.11 2084.38,1208.11 2084.96,1208.11 2085.55,1208.11 2086.14,1208.11 2086.72,1208.11 2087.31,1208.11 2087.89,1208.11 2088.48,1208.11 2089.07,1208.11 2089.65,1208.11 2090.24,1208.11 2090.83,1208.11 2091.41,1208.11 2092,1208.11 2092.59,1208.11 2093.17,1208.11 2093.76,1208.11 2094.35,1208.11 2094.93,1208.11 2095.52,1208.11 2096.1,1208.11 2096.69,1208.11 2097.28,1208.11 2097.86,1208.11 2098.45,1208.11 2099.04,1208.11 2099.62,1208.11 2100.21,1208.11 2100.8,1208.11 2101.38,1208.11 2101.97,1208.11 2102.55,1208.11 2103.14,1208.11 2103.73,1208.11 2104.31,1208.11 2104.9,1208.11 2105.49,1208.11 2106.07,1208.11 2106.66,1208.11 2107.25,1208.11 2107.83,1208.11 2108.42,1208.11 2109.01,1208.11 2109.59,1208.11 2110.18,1208.11 2110.76,1208.11 2111.35,1208.11 2111.94,1208.11 2112.52,1208.11 2113.11,1208.11 2113.7,1208.11 2114.28,1208.11 2114.87,1208.11 2115.46,1208.11 2116.04,1208.11 2116.63,1208.11 2117.22,1208.11 2117.8,1208.11 2118.39,1208.11 2118.97,1208.11 2119.56,1208.11 2120.15,1208.11 2120.73,1208.11 2121.32,1208.11 2121.91,1208.11 2122.49,1208.11 2123.08,1208.11 2123.67,1208.11 2124.25,1208.11 2124.84,1208.11 2125.42,1208.11 2126.01,1208.11 2126.6,1208.11 2127.18,1208.11 2127.77,1208.11 2128.36,1208.11 2128.94,1208.11 2129.53,1208.11 2130.12,1208.11 2130.7,1208.11 2131.29,1208.11 2131.88,1208.11 2132.46,1208.11 2133.05,1208.11 2133.63,1208.11 2134.22,1208.11 2134.81,1208.11 2135.39,1208.11 2135.98,1208.11 2136.57,1208.11 2137.15,1208.11 2137.74,1208.11 2138.33,1208.11 2138.91,1208.11 2139.5,1208.11 2140.09,1208.11 2140.67,1208.11 2141.26,1208.11 2141.84,1208.11 2142.43,1208.11 2143.02,1208.11 2143.6,1208.11 2144.19,1208.11 2144.78,1208.11 2145.36,1208.11 2145.95,1208.11 2146.54,1208.11 2147.12,1208.11 2147.71,1208.11 2148.3,1208.11 2148.88,1208.11 2149.47,1208.11 2150.05,1208.11 2150.64,1208.11 2151.23,1208.11 2151.81,1208.11 2152.4,1208.11 2152.99,1208.11 2153.57,1208.11 2154.16,1208.11 2154.75,1208.11 2155.33,1208.11 2155.92,1208.11 2156.5,1208.11 2157.09,1208.11 2157.68,1208.11 2158.26,1208.11 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.79,1191.54 1400.32,899.083 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.18 985.439,1191.54 2158.26,1191.54 2158.26,1224.18 985.439,1224.18 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip173\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip173)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-10243.6 167.706,-9777.99 168.266,-10273.6 168.825,-10702.5 169.384,-11094.5 169.943,-11439.5 170.503,-11724.8 171.062,-11985.5 171.621,-12207.8 172.18,-12394.2 172.74,-12547.2 173.299,-11635.4 173.858,-11289.7 174.417,-11409.5 174.977,-11509.5 175.536,-11583.7 176.095,-11275.3 176.655,-11316.7 177.214,-11339.5 177.773,-11343.4 178.332,-11331.1 178.892,-11040.1 179.451,-10744.1 180.01,-10696.1 180.569,-10430.3 181.129,-10348.8 181.688,-10071.9 182.247,-9820.61 182.806,-9741 183.366,-9488.39 183.925,-9095.34 184.484,-8838.63 185.043,-8726.32 185.603,-8466.85 186.162,-8227.22 186.721,-8095.06 187.28,-7965.03 187.84,-7826.76 188.399,-7700.64 188.958,-7474.16 189.517,-7251.39 190.077,-6934.98 190.636,-6619.94 191.195,-6405.44 191.754,-6129.24 192.314,-6008.79 192.873,-5886.93 193.432,-5766.65 193.991,-5634.78 194.551,-5384.62 195.11,-5250.69 195.669,-5121.16 196.228,-4931.8 196.788,-4803.27 197.347,-4671.76 197.906,-4498.88 198.465,-4232.46 199.025,-4075.78 199.584,-3963.61 200.143,-3812.39 200.702,-3664.5 201.262,-3521.29 201.821,-3424.62 202.38,-3248.24 202.939,-3114.53 203.499,-2951.99 204.058,-2874.44 204.617,-2682.79 205.176,-2604.42 205.736,-2425.95 206.295,-2321.21 206.854,-2182.89 207.413,-2051.44 207.973,-1892.56 208.532,-1804.32 209.091,-1716.67 209.65,-1636.06 210.21,-1523.89 210.769,-1473.26 211.328,-1363.27 211.887,-1258.5 212.447,-1208.19 213.006,-1077.14 213.565,-981.979 214.124,-913.297 214.684,-792.423 215.243,-725.972 215.802,-665.787 216.361,-633.661 216.921,-523.86 217.48,-420.893 218.039,-296.423 218.598,-249.511 219.158,-180.207 219.717,-159.314 220.276,-136.16 220.835,-70.5111 221.395,-5.7892 221.954,13.4998 222.513,33.4254 223.072,51.8608 223.632,70.5064 224.191,112 224.75,175.399 225.309,254.637 225.869,268.574 226.428,324.815 226.987,334.863 227.546,346.99 228.106,382.496 228.665,435.408 229.224,466.647 229.783,494.998 230.343,540.079 230.902,549.3 231.461,556.114 232.02,582.435 232.58,608.102 233.139,671.594 233.698,693.213 234.257,713.051 234.817,793.197 235.376,790.473 235.935,787.922 236.494,879.02 237.054,890.284 237.613,902.353 238.172,914.358 238.731,929.505 239.291,942.692 239.85,940.727 240.409,991.032 240.968,1019.59 241.528,1006.17 242.087,1053.3 242.646,1063.01 243.205,1070.42 243.765,1061.2 244.324,1070.74 244.883,1058.61 245.442,1052.37 246.002,1060.13 246.561,1074.29 247.12,1099.38 247.679,1138.56 248.239,1126.71 248.798,1115.95 249.357,1086.01 249.916,1057.44 250.476,1069.58 251.035,1080.88 251.594,1126.3 252.153,1120.31 252.713,1092.22 253.272,1086.19 253.831,1095.93 254.39,1102.75 254.95,1094.76 255.509,1106.63 256.068,1120.27 256.627,1127.34 257.187,1152.49 257.746,1213.31 258.305,1251.84 258.864,1236.63 259.424,1204.54 259.983,1208.67 260.542,1194.28 261.101,1218.91 261.661,1188.38 262.22,1177.58 262.779,1161.38 263.338,1166.03 263.898,1175.42 264.457,1180.05 265.016,1167.95 265.575,1171.08 266.135,1141.82 266.694,1163.76 267.253,1187.08 267.812,1194.35 268.372,1185.03 268.931,1138 269.49,1144.81 270.049,1118.43 270.609,1057.42 271.168,1054.18 271.727,1031.55 272.286,1011.83 272.846,1009.52 273.405,992.207 273.964,991.9 274.523,969.678 275.083,999.493 275.642,1014.17 276.201,1030.45 276.76,1007.01 277.32,1005.58 277.879,1035.43 278.438,1028.71 278.997,1025.94 279.557,1037.1 280.116,1050.22 280.675,1081.03 281.234,1061.14 281.794,1053.72 282.353,983.902 282.912,964.812 283.471,961.11 284.031,1010.5 284.59,1022.42 285.149,1049.67 285.708,1044.76 286.268,1036.03 286.827,1034.17 287.386,1048.39 287.945,1027.22 288.505,1025.99 289.064,1038.63 289.623,1020.92 290.182,1031.11 290.742,1011.06 291.301,1040.72 291.86,1066.7 292.419,1058.48 292.979,1020.92 293.538,1033.32 294.097,1095.33 294.656,1101.74 295.216,1080.66 295.775,1106.88 296.334,1112.85 296.893,1084.75 297.453,1078.4 298.012,1070.93 298.571,1096.09 299.13,1101.38 299.69,1088.36 300.249,1128.8 300.808,1117.97 301.368,1107.71 301.927,1082.9 302.486,1106.04 303.045,1094.24 303.605,1103.18 304.164,1096.24 304.723,1083.35 305.282,1076.33 305.842,1054.29 306.401,1030.72 306.96,992.641 307.519,1005.04 308.079,998.559 308.638,994.19 309.197,973.97 309.756,969.686 310.316,951.537 310.875,966.423 311.434,962.869 311.993,944.885 312.553,927.381 313.112,925.525 313.671,941.974 314.23,940.542 314.79,955.795 315.349,938.526 315.908,901.896 316.467,921.59 317.027,922.553 317.586,920.259 318.145,920.58 318.704,922.971 319.264,941.412 319.823,954.774 320.382,952.298 320.941,951.256 321.501,967.102 322.06,962.193 322.619,976.785 323.178,1022.22 323.738,1029.39 324.297,1036.54 324.856,1077.17 325.415,1082.32 325.975,1055.28 326.534,1094.2 327.093,1081.97 327.652,1052.76 328.212,1060.33 328.771,1080.53 329.33,1070.07 329.889,1046.11 330.449,1034.83 331.008,1042.58 331.567,998.448 332.126,976.915 332.686,954.845 333.245,951.648 333.804,963.055 334.363,975.707 334.923,985.969 335.482,963.38 336.041,976.956 336.6,954.332 337.16,949.346 337.719,974.86 338.278,1002.26 338.837,1028.48 339.397,1036.46 339.956,1031.35 340.515,1035.84 341.074,1007.75 341.634,965.842 342.193,942.933 342.752,936.156 343.311,932.68 343.871,931.911 344.43,878.836 344.989,883.414 345.548,883.078 346.108,882.19 346.667,880.118 347.226,931.415 347.785,910.639 348.345,939.751 348.904,950.411 349.463,974.363 350.022,969.451 350.582,964.66 351.141,940.043 351.7,936.851 352.259,950.669 352.819,947.703 353.378,969.975 353.937,995.367 354.496,1000.79 355.056,993.788 355.615,956.279 356.174,949.573 356.733,945.354 357.293,952.232 357.852,979.917 358.411,990.597 358.97,983.242 359.53,960.654 360.089,940.769 360.648,935.47 361.207,944.122 361.767,969.245 362.326,962.095 362.885,954.377 363.444,946.314 364.004,919.687 364.563,930.796 365.122,910.826 365.681,921.918 366.241,901.986 366.8,913.051 367.359,922.262 367.918,901.366 368.478,884.347 369.037,847.94 369.596,861.464 370.155,847.203 370.715,847.394 371.274,845.509 371.833,858.987 372.392,903.691 372.952,915.265 373.511,910.768 374.07,887.588 374.629,915.001 375.189,894.525 375.748,906.461 376.307,919.393 376.866,899.364 377.426,893.67 377.985,919.281 378.544,912.073 379.103,905.136 379.663,913.85 380.222,919.992 380.781,912.757 381.34,901.654 381.9,913.625 382.459,905.68 383.018,896.4 383.577,906.738 384.137,913.528 384.696,909.408 385.255,890.129 385.814,850.003 386.374,831.732 386.933,875.936 387.492,889.145 388.051,914.654 388.611,954.607 389.17,931.334 389.729,923.257 390.288,881.996 390.848,861.905 391.407,844.69 391.966,846.419 392.525,794.243 393.085,810.667 393.644,824.11 394.203,805.332 394.762,835.831 395.322,849.511 395.881,847.274 396.44,859.17 396.999,870.586 397.559,895.561 398.118,923.36 398.677,901.342 399.236,911.995 399.796,886.553 400.355,879.281 400.914,890.267 401.473,886.517 402.033,845.445 402.592,841.159 403.151,839.637 403.71,836.801 404.27,835.262 404.829,817.916 405.388,780.489 405.947,782.865 406.507,766.375 407.066,766.955 407.625,769.429 408.184,801.833 408.744,783.96 409.303,796.182 409.862,790.796 410.421,773.151 410.981,787.75 411.54,757.919 412.099,759.734 412.658,744.753 413.218,776.601 413.777,806.994 414.336,808.182 414.895,789.827 415.455,775.084 416.014,779.783 416.573,796.981 417.132,778.431 417.692,776.165 418.251,773.818 418.81,744.701 419.369,746.596 419.929,730.978 420.488,733.124 421.047,767.974 421.606,782.365 422.166,779.421 422.725,813.168 423.284,812.57 423.843,740.195 424.403,775.533 424.962,772.397 425.521,805.239 426.08,820.037 426.64,867.527 427.199,880.405 427.758,875.755 428.318,923.725 428.877,902.516 429.436,896.86 429.995,939.402 430.555,916.244 431.114,861.734 431.673,858.381 432.232,886.407 432.792,847.162 433.351,857.039 433.91,851.045 434.469,849.171 435.029,862.642 435.588,843.709 436.147,838.828 436.706,820.152 437.266,784.092 437.825,797.27 438.384,797.707 438.943,793.172 439.503,822.092 440.062,847.809 440.621,875.183 441.18,873.103 441.74,869.862 442.299,847.396 442.858,827.631 443.417,840.726 443.977,856.378 444.536,834.313 445.095,812.302 445.654,796.406 446.214,747.657 446.773,765.228 447.332,794.28 447.891,807.75 448.451,791.252 449.01,788.537 449.569,774.488 450.128,774.919 450.688,785.183 451.247,783.578 451.806,781.412 452.365,812.017 452.925,809.466 453.484,810.168 454.043,853.443 454.602,859.829 455.162,836.991 455.721,850.894 456.28,842.448 456.839,823.135 457.399,816.829 457.958,747.444 458.517,731.715 459.076,746.897 459.636,714.67 460.195,697.519 460.754,681.859 461.313,652.418 461.873,660.808 462.432,694.956 462.991,716.273 463.55,732.516 464.11,700.904 464.669,722.795 465.228,706.825 465.787,722.727 466.347,739.133 466.906,707.564 467.465,708.072 468.024,695.646 468.584,698.516 469.143,703.765 469.702,691.664 470.261,693.331 470.821,708.294 471.38,713.413 471.939,716.172 472.498,685.945 473.058,706.408 473.617,709.835 474.176,694.463 474.735,713.93 475.295,701.257 475.854,703.019 476.413,721.961 476.972,707.753 477.532,709.438 478.091,695.519 478.65,715.164 479.209,718.774 479.769,766.981 480.328,762.801 480.887,747.209 481.446,742.733 482.006,779.507 482.565,792.359 483.124,791.755 483.683,805.93 484.243,802.278 484.802,751.171 485.361,750.559 485.92,752.57 486.48,753.716 487.039,752.341 487.598,754.144 488.157,767.77 488.717,780.62 489.276,791.075 489.835,788.968 490.394,770.271 490.954,735.38 491.513,655.285 492.072,659.71 492.631,683.977 493.191,749.552 493.75,782.711 494.309,796.239 494.868,827.063 495.428,840.514 495.987,834.832 496.546,845.054 497.105,808.186 497.665,849.915 498.224,829.952 498.783,808.829 499.342,789.186 499.902,787.749 500.461,818.819 501.02,781.934 501.579,763.242 502.139,727.994 502.698,711.824 503.257,713.028 503.816,700.204 504.376,673.688 504.935,693.81 505.494,691.023 506.053,674.623 506.613,678.288 507.172,712.644 507.731,712.215 508.29,744.642 508.85,742.186 509.409,740.89 509.968,756.409 510.527,755.786 511.087,754.972 511.646,767.452 512.205,749.62 512.764,732.483 513.324,701.257 513.883,671.269 514.442,692.327 515.001,695.258 515.561,680.646 516.12,631.275 516.679,617.978 517.238,622.107 517.798,643.871 518.357,664.397 518.916,648.834 519.475,670.519 520.035,690.09 520.594,691.566 521.153,693.292 521.712,682.504 522.272,669.546 522.831,658.143 523.39,662.143 523.949,662.063 524.509,685.313 525.068,657.722 525.627,680.015 526.186,702.546 526.746,703.902 527.305,673.946 527.864,659.515 528.423,665.712 528.983,672.555 529.542,678.402 530.101,713.085 530.66,712.234 531.22,742.961 531.779,709.053 532.338,694.813 532.897,748.121 533.457,764.114 534.016,796.471 534.575,808.658 535.134,803.962 535.694,847.316 536.253,840.718 536.812,849.153 537.371,841.643 537.931,852.2 538.49,813.204 539.049,808.923 539.608,773.623 540.168,772.964 540.727,754.392 541.286,803.439 541.845,814.962 542.405,809.154 542.964,806.441 543.523,770.315 544.082,800.436 544.642,778.694 545.201,791.344 545.76,803.837 546.319,801.048 546.879,781.496 547.438,747.723 547.997,728.955 548.556,741.694 549.116,757.823 549.675,738.32 550.234,739.509 550.793,736.913 551.353,721.98 551.912,720.748 552.471,718.708 553.031,717.854 553.59,718.387 554.149,704.764 554.708,688.41 555.268,705.06 555.827,672.303 556.386,672.617 556.945,643.578 557.505,613.948 558.064,620.523 558.623,641.682 559.182,662.842 559.742,651.494 560.301,669.615 560.86,675.133 561.419,675.862 561.979,707.644 562.538,707.799 563.097,709.486 563.656,662.891 564.216,664.907 564.775,703.169 565.334,708.831 565.893,677.349 566.453,649.342 567.012,716.71 567.571,703.757 568.13,702.991 568.69,689.357 569.249,693.227 569.808,696.276 570.367,696.266 570.927,696.432 571.486,712.921 572.045,711.609 572.604,713.691 573.164,732.257 573.723,731.567 574.282,744.247 574.841,728.505 575.401,744.102 575.96,759.189 576.519,771.089 577.078,752.115 577.638,749.599 578.197,750.879 578.756,829.759 579.315,824.738 579.875,818.083 580.434,811.013 580.993,837.916 581.552,849.573 582.112,858.555 582.671,818.183 583.23,812.926 583.789,822.9 584.349,818.536 584.908,798.583 585.467,809.689 586.026,803.365 586.586,783.031 587.145,760.326 587.704,804.231 588.263,764.331 588.823,743.275 589.382,753.996 589.941,747.885 590.5,731.179 591.06,748.438 591.619,748.494 592.178,713.319 592.737,743.594 593.297,725.282 593.856,724.171 594.415,756.62 594.974,759.584 595.534,786.294 596.093,813.234 596.652,804.788 597.211,786.599 597.771,800.178 598.33,781.505 598.889,775.819 599.448,756.674 600.008,754.362 600.567,750.816 601.126,780.628 601.685,773.13 602.245,784.86 602.804,762.601 603.363,764.733 603.922,778.239 604.482,775.519 605.041,770.164 605.6,734.655 606.159,716.793 606.719,732.281 607.278,764.291 607.837,773.962 608.396,804.016 608.956,800.698 609.515,827.069 610.074,821.727 610.633,797.375 611.193,761.387 611.752,694.812 612.311,662.681 612.87,679.511 613.43,700.87 613.989,702.103 614.548,704.425 615.107,689.06 615.667,706.419 616.226,705.746 616.785,706.729 617.344,703.709 617.904,689.144 618.463,693.284 619.022,690.755 619.581,704.516 620.141,687.044 620.7,703.515 621.259,673.456 621.818,640.572 622.378,631.327 622.937,617.799 623.496,620.939 624.055,625.6 624.615,629.335 625.174,636.324 625.733,644.436 626.292,645.084 626.852,664.511 627.411,649.12 627.97,651.018 628.529,654.435 629.089,642.645 629.648,647.558 630.207,650.151 630.766,650.161 631.326,688.344 631.885,709.228 632.444,759.603 633.003,755.625 633.563,720.255 634.122,688.874 634.681,673.083 635.24,641.092 635.8,642.37 636.359,642.99 636.918,675.933 637.477,696.419 638.037,660.898 638.596,663.69 639.155,681.546 639.714,666.282 640.274,667.911 640.833,686.205 641.392,653.907 641.951,652.787 642.511,624.09 643.07,646.483 643.629,632.52 644.188,624.651 644.748,628.94 645.307,682.681 645.866,683.854 646.425,701.377 646.985,704.651 647.544,707.456 648.103,722.969 648.662,737.454 649.222,733.147 649.781,730.729 650.34,760.011 650.899,756.794 651.459,751.543 652.018,752.134 652.577,761.901 653.136,821.491 653.696,797.343 654.255,809.69 654.814,772.569 655.373,784.219 655.933,763.099 656.492,744.794 657.051,743.066 657.61,721.738 658.17,750.371 658.729,731.614 659.288,727.492 659.847,727.374 660.407,709.628 660.966,711.929 661.525,696.635 662.084,698.779 662.644,716.501 663.203,681.162 663.762,647.158 664.321,652.675 664.881,622.779 665.44,610.762 665.999,615.147 666.558,618.885 667.118,655.609 667.677,660.175 668.236,676.674 668.795,646.306 669.355,631.716 669.914,635.902 670.473,642.633 671.032,663.083 671.592,632.947 672.151,636.267 672.71,638.833 673.269,626.125 673.829,645.676 674.388,648.899 674.947,652.425 675.506,654.371 676.066,658.314 676.625,626.032 677.184,632.561 677.743,617.334 678.303,622.368 678.862,611.433 679.421,610.346 679.981,612.677 680.54,633.721 681.099,637.554 681.658,641.943 682.218,663.26 682.777,618.929 683.336,640.533 683.895,647.484 684.455,682.078 685.014,634.735 685.573,650.06 686.132,685.176 686.692,667.327 687.251,654.26 687.81,656.157 688.369,689.471 688.929,689.164 689.488,693.614 690.047,708.778 690.606,707.056 691.166,707.889 691.725,742.783 692.284,770.509 692.843,800.792 693.403,750.115 693.962,767.467 694.521,761.362 695.08,776.622 695.64,753.144 696.199,752.911 696.758,731.732 697.317,732.139 697.877,761.835 698.436,759.061 698.995,773.498 699.554,770.396 700.114,782.093 700.673,758.387 701.232,722.867 701.791,738.718 702.351,720.776 702.91,750.549 703.469,747.13 704.028,746.083 704.588,745.197 705.147,727.427 705.706,722.643 706.265,737.201 706.825,749.666 707.384,749.673 707.943,745.087 708.502,743.685 709.062,774.453 709.621,741.415 710.18,734.309 710.739,747.167 711.299,760.046 711.858,756.243 712.417,783.421 712.976,794.494 713.536,789.126 714.095,769.44 714.654,764.699 715.213,762.206 715.773,776.209 716.332,788.899 716.891,784.727 717.45,764.275 718.01,790.706 718.569,805.761 719.128,803.2 719.687,798.514 720.247,792.395 720.806,755.272 721.365,736.792 721.924,716.462 722.484,684.136 723.043,666.644 723.602,682.006 724.161,685.133 724.721,669.77 725.28,668.305 725.839,651.824 726.398,636.53 726.958,655.976 727.517,641.617 728.076,677.851 728.635,682.207 729.195,701.758 729.754,670.238 730.313,658.82 730.872,678.106 731.432,680.827 731.991,682.344 732.55,650.846 733.109,653.907 733.669,671.514 734.228,652.372 734.787,670.635 735.346,673.995 735.906,642.878 736.465,645.431 737.024,664.421 737.583,683.759 738.143,683.245 738.702,731.803 739.261,730.654 739.82,747.232 740.38,729.134 740.939,725.386 741.498,723.716 742.057,721.747 742.617,717.636 743.176,703.228 743.735,667.973 744.294,633.795 744.854,618.73 745.413,592.305 745.972,599.1 746.531,609.025 747.091,615.437 747.65,553.497 748.209,563.512 748.768,605.23 749.328,609.98 749.887,577.522 750.446,631.822 751.005,619.71 751.565,620.467 752.124,620.512 752.683,607.97 753.242,597.006 753.802,600.67 754.361,603.229 754.92,627.511 755.479,611.785 756.039,599.404 756.598,569.774 757.157,557.756 757.716,597.253 758.276,601.398 758.835,604.354 759.394,594.442 759.953,615.613 760.513,604.181 761.072,606.082 761.631,609.293 762.19,613.936 762.75,666.881 763.309,650.056 763.868,667.105 764.427,668.644 764.987,670.063 765.546,701.926 766.105,720.448 766.664,717.198 767.224,732.704 767.783,749.603 768.342,775.268 768.901,770.43 769.461,746.56 770.02,746.763 770.579,778.975 771.138,759.522 771.698,757.896 772.257,739.085 772.816,717.272 773.375,698.847 773.935,695.411 774.494,712.08 775.053,713.246 775.612,696.262 776.172,698.152 776.731,684.331 777.29,683.016 777.849,669.328 778.409,671.303 778.968,659.989 779.527,696.055 780.086,699.436 780.646,685.263 781.205,667.523 781.764,698.985 782.323,749.261 782.883,745.429 783.442,759.875 784.001,757.981 784.56,756.176 785.12,767.272 785.679,748.723 786.238,763.139 786.797,774.441 787.357,753.001 787.916,782.125 788.475,780.113 789.034,794.792 789.594,790.324 790.153,788.385 790.712,735.299 791.271,732.694 791.831,762.508 792.39,761.304 792.949,769.636 793.508,750.828 794.068,795.095 794.627,820.423 795.186,799.115 795.745,810.863 796.305,839.006 796.864,846.156 797.423,855.705 797.982,832.72 798.542,823.801 799.101,845.767 799.66,820.324 800.219,793.931 800.779,820.527 801.338,782.91 801.897,761.252 802.456,758.539 803.016,753.968 803.575,733.859 804.134,734.027 804.693,729.053 805.253,728.506 805.812,711.038 806.371,726.19 806.931,737.428 807.49,721.155 808.049,703.434 808.608,715.947 809.168,728.753 809.727,705.457 810.286,701.57 810.845,699.803 811.405,696.285 811.964,708.709 812.523,720.92 813.082,736.273 813.642,698.754 814.201,698.86 814.76,679.127 815.319,648.419 815.879,684.285 816.438,679.549 816.997,679.536 817.556,663.76 818.116,613.727 818.675,617.476 819.234,607.04 819.793,592.837 820.353,585.679 820.912,605.397 821.471,610.405 822.03,599.954 822.59,605.526 823.149,625.279 823.708,678.276 824.267,663.307 824.827,615.449 825.386,623.926 825.945,662.041 826.504,682.022 827.064,700.686 827.623,702.577 828.182,719.277 828.741,700.906 829.301,698.739 829.86,712.516 830.419,695.656 830.978,715.198 831.538,747.824 832.097,748.206 832.656,711.269 833.215,742.794 833.775,708.043 834.334,692.041 834.893,687.669 835.452,652.453 836.012,653.324 836.571,670.632 837.13,684.431 837.689,682.228 838.249,649.602 838.808,666.633 839.367,667.606 839.926,664.879 840.486,645.63 841.045,600.83 841.604,607.425 842.163,612.225 842.723,603.871 843.282,608.363 843.841,613.782 844.4,600.592 844.96,604.589 845.519,609.209 846.078,615.712 846.637,623.929 847.197,627.619 847.756,646.536 848.315,666.074 848.874,584.388 849.434,608.776 849.993,630.466 850.552,666.565 851.111,684.895 851.671,700.929 852.23,666.19 852.789,651.358 853.348,673.743 853.908,660.19 854.467,659.973 855.026,676.076 855.585,676.23 856.145,675.935 856.704,645.915 857.263,632.903 857.822,667.318 858.382,683.532 858.941,701.662 859.5,730.855 860.059,747.377 860.619,775.716 861.178,754.611 861.737,765.624 862.296,746.224 862.856,759.094 863.415,755.65 863.974,747.7 864.533,777.513 865.093,756.338 865.652,703.748 866.211,725.158 866.77,724.781 867.33,702.341 867.889,673.866 868.448,690.188 869.007,692.996 869.567,722.082 870.126,736.437 870.685,749.328 871.244,744.623 871.804,711.729 872.363,725.999 872.922,722.532 873.481,734.635 874.041,747.603 874.6,728.991 875.159,710.333 875.718,773.251 876.278,754.478 876.837,750.59 877.396,744.312 877.955,726.198 878.515,721.395 879.074,718.836 879.633,699.419 880.192,711.961 880.752,745.487 881.311,724.697 881.87,737.342 882.429,764.117 882.989,758.754 883.548,753.162 884.107,797.335 884.666,807.027 885.226,764.49 885.785,746.358 886.344,725.169 886.903,673.885 887.463,690.672 888.022,704.799 888.581,672.513 889.14,669.218 889.7,668.308 890.259,670.759 890.818,635.34 891.377,656.163 891.937,672.549 892.496,691.769 893.055,693.147 893.614,692.671 894.174,736.979 894.733,716.295 895.292,717.811 895.851,732.327 896.411,711.863 896.97,677.62 897.529,681.068 898.088,682.116 898.648,662.045 899.207,679.54 899.766,694.251 900.325,693.037 900.885,705.192 901.444,705.426 902.003,720.05 902.562,686.105 903.122,700.364 903.681,697.943 904.24,683.283 904.799,696.339 905.359,713.693 905.918,698.526 906.477,713.37 907.036,727.967 907.596,676.585 908.155,705.314 908.714,769.645 909.273,765.929 909.833,746.496 910.392,694.556 910.951,678.236 911.51,661.56 912.07,613.661 912.629,632.184 913.188,619.242 913.747,671.324 914.307,627.528 914.866,648.987 915.425,620.686 915.984,596.387 916.544,618.659 917.103,591.569 917.662,610.799 918.221,614.966 918.781,602.47 919.34,608.422 919.899,596.959 920.458,585.676 921.018,607.624 921.577,578.594 922.136,599.385 922.695,604.729 923.255,625.056 923.814,642.145 924.373,627.576 924.932,600.783 925.492,591.714 926.051,583.026 926.61,589.268 927.169,595.351 927.729,629.323 928.288,631.532 928.847,603.89 929.406,607.147 929.966,625.797 930.525,627.225 931.084,631.863 931.644,634.836 932.203,619.142 932.762,602.3 933.321,621.5 933.881,625.701 934.44,642.468 934.999,645.842 935.558,679.216 936.118,680.054 936.677,685.567 937.236,687.9 937.795,671.316 938.355,672.97 938.914,675.884 939.473,689.431 940.032,702.47 940.592,701.297 941.151,747.485 941.71,714.218 942.269,698.192 942.829,745.146 943.388,741.261 943.947,739.429 944.506,722.46 945.066,732.994 945.625,748.388 946.184,759.296 946.743,741.439 947.303,769.61 947.862,765.091 948.421,744.11 948.98,741.979 949.54,738.773 950.099,754.332 950.658,783.313 951.217,760.644 951.777,725.219 952.336,741.089 952.895,706.871 953.454,723.566 954.014,704.321 954.573,700.852 955.132,701.525 955.691,669.499 956.251,669.428 956.81,668.397 957.369,702.352 957.928,719.382 958.488,718.629 959.047,686.423 959.606,652.661 960.165,636.451 960.725,615.109 961.284,637.38 961.843,642.942 962.402,661.793 962.962,680.268 963.521,664.741 964.08,666.592 964.639,681.417 965.199,746.119 965.758,758.636 966.317,786.668 966.876,782.767 967.436,805.523 967.995,798.563 968.554,757.614 969.113,767.03 969.673,713.511 970.232,695.496 970.791,728.251 971.35,690.984 971.91,691.278 972.469,708.495 973.028,691.055 973.587,673.119 974.147,657.973 974.706,658.919 975.265,657.626 975.824,693.105 976.384,740.046 976.943,771.308 977.502,784.063 978.061,783.354 978.621,776.642 979.18,772.281 979.739,768.686 980.298,745.693 980.858,724.748 981.417,739.029 981.976,738.275 982.535,720.499 983.095,716.082 983.654,732.868 984.213,731.608 984.772,729.199 985.332,678.183 985.891,645.243 986.45,647.444 987.009,685.47 987.569,704.061 988.128,654.276 988.687,658.414 989.246,707.329 989.806,705.166 990.365,704.55 990.924,720.436 991.483,697.662 992.043,712.33 992.602,711.54 993.161,726.721 993.72,741.121 994.28,736.902 994.839,734.956 995.398,716.246 995.957,713.906 996.517,696.505 997.076,700.544 997.635,716.018 998.194,728.904 998.754,709.232 999.313,692.053 999.872,673.787 1000.43,671.044 1000.99,672.395 1001.55,668.574 1002.11,668.653 1002.67,654.199 1003.23,636.299 1003.79,639.56 1004.35,657.034 1004.91,642.836 1005.46,660.825 1006.02,631.388 1006.58,637.368 1007.14,658.121 1007.7,660.943 1008.26,663.522 1008.82,681.118 1009.38,680.526 1009.94,679.108 1010.5,680.216 1011.06,698.223 1011.62,695.801 1012.18,663.967 1012.73,631.609 1013.29,620.031 1013.85,641.589 1014.41,647.616 1014.97,695.899 1015.53,665.343 1016.09,636.293 1016.65,625.23 1017.21,644.059 1017.77,661.652 1018.33,630.435 1018.89,635.633 1019.45,670.431 1020.01,669.669 1020.56,653.272 1021.12,640.484 1021.68,643.372 1022.24,627.556 1022.8,632.9 1023.36,621.115 1023.92,640.878 1024.48,676.695 1025.04,630.019 1025.6,630.227 1026.16,681.22 1026.72,700.561 1027.28,683.369 1027.83,621.709 1028.39,641.912 1028.95,594.392 1029.51,597.921 1030.07,569.828 1030.63,559.496 1031.19,581.152 1031.75,605.031 1032.31,610.48 1032.87,630.345 1033.43,636.679 1033.99,669.549 1034.55,688.823 1035.1,690.798 1035.66,711.186 1036.22,709.469 1036.78,709.246 1037.34,692.437 1037.9,709.602 1038.46,707.572 1039.02,676.882 1039.58,615.442 1040.14,638.803 1040.7,638.568 1041.26,641.94 1041.82,660.251 1042.38,647.045 1042.93,664.708 1043.49,684.064 1044.05,697.079 1044.61,712.122 1045.17,659.701 1045.73,642.09 1046.29,658.727 1046.85,626.268 1047.41,629.432 1047.97,652.591 1048.53,669.075 1049.09,666.551 1049.65,651.906 1050.2,652.039 1050.76,638.841 1051.32,672.14 1051.88,688.009 1052.44,688.686 1053,686.374 1053.56,685.051 1054.12,684.204 1054.68,702.957 1055.24,667.677 1055.8,673.186 1056.36,687.75 1056.92,708.421 1057.48,693.119 1058.03,674.157 1058.59,705.876 1059.15,725.024 1059.71,739.865 1060.27,706.013 1060.83,689.521 1061.39,706.294 1061.95,706.593 1062.51,736.101 1063.07,730.877 1063.63,716.54 1064.19,699.686 1064.75,683.351 1065.3,699.697 1065.86,700.097 1066.42,702.168 1066.98,702.228 1067.54,685.877 1068.1,703.168 1068.66,735.126 1069.22,700.115 1069.78,729.907 1070.34,713.209 1070.9,743.865 1071.46,723.729 1072.02,720.782 1072.57,668.526 1073.13,675.021 1073.69,691.185 1074.25,712.586 1074.81,712.974 1075.37,696.836 1075.93,683.938 1076.49,701.377 1077.05,668.381 1077.61,686.942 1078.17,704.044 1078.73,703.985 1079.29,702.406 1079.85,715.764 1080.4,746.048 1080.96,744.125 1081.52,726.099 1082.08,705.14 1082.64,702.47 1083.2,699.908 1083.76,683.246 1084.32,718.683 1084.88,731.743 1085.44,729.71 1086,727.648 1086.56,725.619 1087.12,690.662 1087.67,674.833 1088.23,691.535 1088.79,689.869 1089.35,675.557 1089.91,673.689 1090.47,659.859 1091.03,708.154 1091.59,706.571 1092.15,703.917 1092.71,704.226 1093.27,752.583 1093.83,781.807 1094.39,728.327 1094.94,722.854 1095.5,669.534 1096.06,701.805 1096.62,684.245 1097.18,685.461 1097.74,667.147 1098.3,635.29 1098.86,638.882 1099.42,659.414 1099.98,645.267 1100.54,679.876 1101.1,664.151 1101.66,700.078 1102.22,665.265 1102.77,684.111 1103.33,635.463 1103.89,604.684 1104.45,623.906 1105.01,690.165 1105.57,706.81 1106.13,705.594 1106.69,687.68 1107.25,705.183 1107.81,707.003 1108.37,704.888 1108.93,734.742 1109.49,716.645 1110.04,684.773 1110.6,685.695 1111.16,689.831 1111.72,704.975 1112.28,692.583 1112.84,702.051 1113.4,730.127 1113.96,760.2 1114.52,756.07 1115.08,735.84 1115.64,684.757 1116.2,746.869 1116.76,758.912 1117.31,739.277 1117.87,719.18 1118.43,718.826 1118.99,716.172 1119.55,745.873 1120.11,744.006 1120.67,743.018 1121.23,757.496 1121.79,770.385 1122.35,799.325 1122.91,778.179 1123.47,772.726 1124.03,753.894 1124.59,734.132 1125.14,716.019 1125.7,764.268 1126.26,744.412 1126.82,774.654 1127.38,773.519 1127.94,754.401 1128.5,783.884 1129.06,778.574 1129.62,788.742 1130.18,768.881 1130.74,747.861 1131.3,756.594 1131.86,769.092 1132.41,761.944 1132.97,772.419 1133.53,782.768 1134.09,790.279 1134.65,814.854 1135.21,822.187 1135.77,814.338 1136.33,806.259 1136.89,785.081 1137.45,792.752 1138.01,769.846 1138.57,750.388 1139.13,731.012 1139.68,729.325 1140.24,709.203 1140.8,707.557 1141.36,690.846 1141.92,656.999 1142.48,656.388 1143.04,674.19 1143.6,658.49 1144.16,675.963 1144.72,674.245 1145.28,689.953 1145.84,685.668 1146.4,668.585 1146.96,651.384 1147.51,654.093 1148.07,655.581 1148.63,673.45 1149.19,623.47 1149.75,609.172 1150.31,546.909 1150.87,537.266 1151.43,559.943 1151.99,569.818 1152.55,655.588 1153.11,672.214 1153.67,654.861 1154.23,654.513 1154.78,656.519 1155.34,639.3 1155.9,642.348 1156.46,630.455 1157.02,602.076 1157.58,607.709 1158.14,592.321 1158.7,595.178 1159.26,547.999 1159.82,572.481 1160.38,612.226 1160.94,571.367 1161.5,544.358 1162.05,556.103 1162.61,616.147 1163.17,601.148 1163.73,584.562 1164.29,570.793 1164.85,579.91 1165.41,551.716 1165.97,579.946 1166.53,568.826 1167.09,578.92 1167.65,599.16 1168.21,605.379 1168.77,607.094 1169.33,612.906 1169.88,588.206 1170.44,598.309 1171,591.382 1171.56,597.474 1172.12,554.309 1172.68,610.285 1173.24,613.363 1173.8,617.534 1174.36,589.466 1174.92,596.825 1175.48,634.423 1176.04,655.754 1176.6,641.059 1177.15,612.998 1177.71,581.747 1178.27,586.408 1178.83,574.621 1179.39,579.932 1179.95,569.237 1180.51,579.219 1181.07,587.133 1181.63,594.632 1182.19,647.343 1182.75,681.721 1183.31,670.219 1183.87,689.492 1184.43,702.469 1184.98,714.456 1185.54,680.96 1186.1,689.784 1186.66,704.278 1187.22,705.303 1187.78,738.748 1188.34,753.244 1188.9,766.396 1189.46,760.769 1190.02,753.986 1190.58,735.48 1191.14,746.758 1191.7,776.135 1192.25,766.046 1192.81,764.355 1193.37,778.516 1193.93,803.907 1194.49,829.109 1195.05,834.004 1195.61,810.193 1196.17,801.552 1196.73,797.137 1197.29,793.761 1197.85,801.487 1198.41,796.443 1198.97,790.904 1199.52,784.745 1200.08,764.194 1200.64,761.529 1201.2,756.617 1201.76,754.209 1202.32,732.601 1202.88,749.076 1203.44,743.333 1204,739.975 1204.56,704.524 1205.12,736.252 1205.68,719.084 1206.24,733.19 1206.8,710.512 1207.35,690.438 1207.91,721.24 1208.47,699.571 1209.03,715.407 1209.59,698.024 1210.15,709.591 1210.71,676.155 1211.27,641.652 1211.83,628.673 1212.39,631.135 1212.95,617.802 1213.51,639.145 1214.07,640.22 1214.62,627.025 1215.18,662.295 1215.74,643.206 1216.3,640.949 1216.86,643.152 1217.42,641.835 1217.98,660.492 1218.54,674.88 1219.1,676.371 1219.66,677.052 1220.22,664.591 1220.78,651.985 1221.34,669.567 1221.89,687.055 1222.45,669.508 1223.01,703.492 1223.57,670.336 1224.13,703.039 1224.69,701.119 1225.25,732.563 1225.81,746.844 1226.37,726.038 1226.93,721.83 1227.49,735.596 1228.05,764.891 1228.61,744.953 1229.17,741.884 1229.72,784.331 1230.28,775.508 1230.84,721.55 1231.4,706.534 1231.96,723.935 1232.52,690.098 1233.08,705.733 1233.64,704.678 1234.2,687.964 1234.76,703.683 1235.32,719.86 1235.88,704.922 1236.44,689.698 1236.99,703.418 1237.55,702.058 1238.11,763.527 1238.67,761.309 1239.23,757.403 1239.79,737.728 1240.35,705.578 1240.91,736.5 1241.47,720.965 1242.03,687.646 1242.59,669.455 1243.15,601.875 1243.71,600.914 1244.26,606.165 1244.82,596.134 1245.38,582.174 1245.94,586.03 1246.5,590.064 1247.06,547.336 1247.62,539.189 1248.18,511.868 1248.74,492.199 1249.3,502.624 1249.86,499.33 1250.42,542.373 1250.98,565.693 1251.54,607.039 1252.09,592.902 1252.65,614.647 1253.21,618.472 1253.77,621.433 1254.33,642.962 1254.89,644.367 1255.45,692.14 1256.01,690.403 1256.57,701.779 1257.13,687.051 1257.69,718.844 1258.25,700.601 1258.81,701.792 1259.36,686.828 1259.92,702.941 1260.48,686.677 1261.04,685.89 1261.6,737.867 1262.16,721.174 1262.72,703.713 1263.28,706.913 1263.84,703.36 1264.4,687.322 1264.96,669.41 1265.52,722.317 1266.08,735.556 1266.63,748.722 1267.19,733.346 1267.75,716.541 1268.31,731.77 1268.87,699.055 1269.43,747.297 1269.99,726.312 1270.55,740.704 1271.11,722.493 1271.67,720.282 1272.23,701.455 1272.79,699.173 1273.35,684.021 1273.91,687.13 1274.46,706.079 1275.02,705.583 1275.58,735.77 1276.14,738.307 1276.7,719.577 1277.26,736.524 1277.82,747.552 1278.38,679.18 1278.94,694.484 1279.5,677.105 1280.06,694.647 1280.62,680.178 1281.18,695.199 1281.73,697.298 1282.29,709.18 1282.85,710.956 1283.41,711.469 1283.97,711.703 1284.53,724.105 1285.09,704.938 1285.65,703.274 1286.21,702.127 1286.77,685.989 1287.33,669.519 1287.89,634.437 1288.45,651.807 1289,641.183 1289.56,609.269 1290.12,598.118 1290.68,604.265 1291.24,610.244 1291.8,644.677 1292.36,647.605 1292.92,650.878 1293.48,654.32 1294.04,639.983 1294.6,628.226 1295.16,665.59 1295.72,671.915 1296.28,686.21 1296.83,699.997 1297.39,716.878 1297.95,732.205 1298.51,743.702 1299.07,758.007 1299.63,721.7 1300.19,717.494 1300.75,735.534 1301.31,701.319 1301.87,751.623 1302.43,731.884 1302.99,729.065 1303.55,740.214 1304.1,722.953 1304.66,720.603 1305.22,704.03 1305.78,703.498 1306.34,718.711 1306.9,733.308 1307.46,715.257 1308.02,729.396 1308.58,692.563 1309.14,689.457 1309.7,704.708 1310.26,704.854 1310.82,705.364 1311.38,719.493 1311.93,713.071 1312.49,730.094 1313.05,713.797 1313.61,701.727 1314.17,671.143 1314.73,672.503 1315.29,672.891 1315.85,694.264 1316.41,678.969 1316.97,678.45 1317.53,664.036 1318.09,651.302 1318.65,623.565 1319.2,639.698 1319.76,639.701 1320.32,642.192 1320.88,646.467 1321.44,648.198 1322,697.579 1322.56,687.3 1323.12,704.383 1323.68,717.043 1324.24,701.547 1324.8,682.694 1325.36,682.052 1325.92,665.819 1326.47,667.996 1327.03,666.368 1327.59,664.469 1328.15,632.43 1328.71,618.176 1329.27,670.118 1329.83,670.722 1330.39,685.338 1330.95,669.716 1331.51,652.413 1332.07,653.396 1332.63,655.638 1333.19,639.272 1333.75,642.248 1334.3,644.58 1334.86,658.257 1335.42,658.75 1335.98,657.42 1336.54,658.738 1337.1,691.691 1337.66,710.169 1338.22,692.607 1338.78,661.955 1339.34,694.395 1339.9,695.964 1340.46,678.585 1341.02,680.899 1341.57,679.29 1342.13,681.785 1342.69,635.001 1343.25,639.278 1343.81,639.665 1344.37,658.146 1344.93,675.837 1345.49,689.672 1346.05,708.818 1346.61,674.123 1347.17,692.268 1347.73,711.246 1348.29,726.071 1348.84,722.126 1349.4,736.081 1349.96,734.046 1350.52,714.682 1351.08,714.77 1351.64,678.967 1352.2,679.68 1352.76,696.038 1353.32,660.341 1353.88,675.926 1354.44,694.185 1355,708.533 1355.56,674.617 1356.12,707.845 1356.67,708.66 1357.23,689.266 1357.79,689.446 1358.35,718.444 1358.91,717.701 1359.47,728.638 1360.03,743.547 1360.59,739.85 1361.15,752.995 1361.71,760.002 1362.27,799.127 1362.83,791.195 1363.39,754.58 1363.94,749.658 1364.5,713.039 1365.06,692.229 1365.62,673.776 1366.18,671.018 1366.74,650.637 1367.3,636.375 1367.86,624.337 1368.42,645.1 1368.98,661.346 1369.54,667.134 1370.1,633.136 1370.66,619.415 1371.21,608.052 1371.77,629.028 1372.33,630.169 1372.89,632.868 1373.45,616.924 1374.01,603.575 1374.57,612.462 1375.13,617.026 1375.69,603.38 1376.25,606.212 1376.81,578.444 1377.37,564.066 1377.93,601.37 1378.49,604.941 1379.04,576.963 1379.6,599.278 1380.16,623.19 1380.72,631.001 1381.28,634.912 1381.84,635.844 1382.4,619.892 1382.96,656.043 1383.52,675.418 1384.08,672.812 1384.64,657.961 1385.2,691.527 1385.76,705.31 1386.31,708.368 1386.87,642.193 1387.43,629.192 1387.99,615.62 1388.55,633.322 1389.11,639.649 1389.67,641.484 1390.23,612.087 1390.79,666.397 1391.35,699.127 1391.91,699.01 1392.47,697.128 1393.03,714.215 1393.58,698.135 1394.14,713.861 1394.7,717.501 1395.26,728.277 1395.82,728.579 1396.38,693.16 1396.94,675.945 1397.5,676.437 1398.06,706.026 1398.62,689.138 1399.18,690.217 1399.74,686.998 1400.3,671.747 1400.86,689.237 1401.41,695.127 1401.97,694.081 1402.53,693.721 1403.09,697.361 1403.65,712.692 1404.21,728.387 1404.77,725.643 1405.33,721.345 1405.89,702.858 1406.45,705.89 1407.01,755.608 1407.57,733.745 1408.13,762.536 1408.68,743.679 1409.24,710.563 1409.8,725.404 1410.36,724.531 1410.92,723.288 1411.48,725.76 1412.04,740.836 1412.6,752.39 1413.16,734.013 1413.72,695.512 1414.28,692.142 1414.84,692.381 1415.4,711.005 1415.95,729.067 1416.51,740.948 1417.07,704.758 1417.63,670.382 1418.19,673.671 1418.75,626.674 1419.31,625.674 1419.87,627.547 1420.43,613.309 1420.99,634.042 1421.55,651.536 1422.11,654.18 1422.67,656.047 1423.23,627.198 1423.78,614.79 1424.34,602.207 1424.9,623.397 1425.46,609.171 1426.02,613.462 1426.58,600.656 1427.14,605.107 1427.7,626.852 1428.26,647.796 1428.82,652.525 1429.38,637.824 1429.94,658.565 1430.5,658.957 1431.05,661.986 1431.61,663.652 1432.17,696.457 1432.73,697.769 1433.29,667.158 1433.85,667.601 1434.41,701.397 1434.97,699.86 1435.53,718.149 1436.09,702.588 1436.65,716 1437.21,699.842 1437.77,685.116 1438.33,701.897 1438.88,683.73 1439.44,683.619 1440,698.601 1440.56,713.79 1441.12,728.411 1441.68,739.918 1442.24,739.723 1442.8,720.687 1443.36,702.701 1443.92,701.3 1444.48,713.796 1445.04,683.095 1445.6,734.036 1446.15,744.282 1446.71,728.113 1447.27,725.442 1447.83,723.446 1448.39,705.957 1448.95,671.684 1449.51,656.442 1450.07,672.764 1450.63,706.07 1451.19,688.455 1451.75,704.096 1452.31,688.959 1452.87,669.541 1453.42,687.935 1453.98,687.93 1454.54,671.135 1455.1,674.681 1455.66,675.826 1456.22,674.89 1456.78,692.977 1457.34,689.575 1457.9,693.329 1458.46,689.152 1459.02,626.214 1459.58,660.393 1460.14,646.166 1460.7,648.734 1461.25,650.151 1461.81,635.253 1462.37,637.067 1462.93,653.536 1463.49,639.742 1464.05,639.117 1464.61,657.209 1465.17,664.081 1465.73,662.843 1466.29,666.193 1466.85,649.174 1467.41,652.323 1467.97,700.025 1468.52,698.935 1469.08,651.408 1469.64,655.132 1470.2,654.974 1470.76,671.602 1471.32,670.085 1471.88,655.536 1472.44,654.511 1473,640.861 1473.56,625.801 1474.12,645.547 1474.68,649.166 1475.24,700.805 1475.79,668.206 1476.35,637.32 1476.91,640.312 1477.47,624.927 1478.03,598.944 1478.59,620.127 1479.15,623.682 1479.71,659.081 1480.27,661.66 1480.83,693.572 1481.39,660.408 1481.95,695.672 1482.51,693.772 1483.07,693.659 1483.62,710.855 1484.18,741.778 1484.74,721.728 1485.3,703.991 1485.86,688.07 1486.42,672.25 1486.98,671.511 1487.54,640.334 1488.1,638.169 1488.66,657.661 1489.22,656.79 1489.78,687.946 1490.34,675.377 1490.89,678.977 1491.45,711.444 1492.01,690.871 1492.57,688.027 1493.13,704.85 1493.69,687.35 1494.25,673.963 1494.81,658.605 1495.37,674.851 1495.93,674.936 1496.49,672.811 1497.05,670.255 1497.61,653.334 1498.16,672.554 1498.72,639.851 1499.28,639.64 1499.84,661.073 1500.4,663.548 1500.96,682.017 1501.52,680.188 1502.08,663.615 1502.64,659.968 1503.2,691.439 1503.76,721.696 1504.32,736.103 1504.88,734.938 1505.44,683.17 1505.99,682.184 1506.55,681.637 1507.11,682.575 1507.67,700.665 1508.23,685.112 1508.79,668.543 1509.35,671.059 1509.91,689.059 1510.47,669.354 1511.03,682.654 1511.59,667.05 1512.15,635.293 1512.71,637.315 1513.26,653.676 1513.82,687.973 1514.38,621.537 1514.94,610.791 1515.5,583.714 1516.06,606.294 1516.62,624.23 1517.18,654.921 1517.74,674.059 1518.3,690.567 1518.86,736.559 1519.42,733.356 1519.98,715.24 1520.53,745.835 1521.09,758.026 1521.65,785.616 1522.21,796.392 1522.77,806.656 1523.33,782.933 1523.89,761.769 1524.45,777.205 1525.01,773.953 1525.57,782.573 1526.13,775.79 1526.69,755.264 1527.25,772.091 1527.81,770.015 1528.36,767.4 1528.92,765.32 1529.48,727.364 1530.04,725.837 1530.6,738.616 1531.16,716.527 1531.72,697.606 1532.28,662.358 1532.84,678.184 1533.4,658.906 1533.96,658.988 1534.52,659.371 1535.08,661.974 1535.63,664.758 1536.19,669.553 1536.75,639.337 1537.31,641.235 1537.87,705.322 1538.43,701.42 1538.99,715.216 1539.55,695.908 1540.11,747.174 1540.67,742.336 1541.23,755.777 1541.79,753.573 1542.35,767.825 1542.9,763.332 1543.46,774.675 1544.02,785.334 1544.58,782.298 1545.14,777.995 1545.7,773.242 1546.26,770.972 1546.82,732.828 1547.38,729.78 1547.94,710.15 1548.5,709.535 1549.06,695.481 1549.62,724.629 1550.18,710.12 1550.73,719.564 1551.29,700.303 1551.85,700.818 1552.41,716.356 1552.97,729.602 1553.53,712.256 1554.09,726.896 1554.65,742.783 1555.21,757.586 1555.77,755.257 1556.33,732.679 1556.89,762.009 1557.45,757.324 1558,770.878 1558.56,763.577 1559.12,773.803 1559.68,786.257 1560.24,796.503 1560.8,791.34 1561.36,785.338 1561.92,742.388 1562.48,755.605 1563.04,736.842 1563.6,717.493 1564.16,751.112 1564.72,716.513 1565.28,729.429 1565.83,714.478 1566.39,713.528 1566.95,710.109 1567.51,723.121 1568.07,723.673 1568.63,708.807 1569.19,689.898 1569.75,687.824 1570.31,673.634 1570.87,672.608 1571.43,691.367 1571.99,674.693 1572.55,657.323 1573.1,625.729 1573.66,644.436 1574.22,662.515 1574.78,645.46 1575.34,649.456 1575.9,650.307 1576.46,657.642 1577.02,673.887 1577.58,655.371 1578.14,640.342 1578.7,660.954 1579.26,650.152 1579.82,699.898 1580.37,681.839 1580.93,701.112 1581.49,651.54 1582.05,700.833 1582.61,682.856 1583.17,666.105 1583.73,650.034 1584.29,638.115 1584.85,656.821 1585.41,610.763 1585.97,599.822 1586.53,617.716 1587.09,652.761 1587.65,654.422 1588.2,641.906 1588.76,662.283 1589.32,663.417 1589.88,667.036 1590.44,653.467 1591,651.049 1591.56,649.719 1592.12,667.942 1592.68,689.898 1593.24,674.001 1593.8,670.909 1594.36,686.214 1594.92,670.34 1595.47,685.425 1596.03,666.616 1596.59,685.089 1597.15,673.714 1597.71,657.956 1598.27,660.958 1598.83,628.995 1599.39,630.179 1599.95,646.845 1600.51,643.33 1601.07,663.311 1601.63,650.03 1602.19,640.254 1602.74,608.725 1603.3,592.969 1603.86,615.292 1604.42,616.584 1604.98,631.977 1605.54,636.003 1606.1,654.341 1606.66,640.947 1607.22,640.802 1607.78,640.41 1608.34,643.263 1608.9,645.431 1609.46,648.056 1610.02,629.9 1610.57,630.132 1611.13,636.68 1611.69,622.587 1612.25,643.882 1612.81,630.877 1613.37,617.273 1613.93,653.14 1614.49,641.311 1615.05,642.091 1615.61,649.986 1616.17,635.654 1616.73,634.931 1617.29,623.311 1617.84,608.859 1618.4,616.51 1618.96,637.03 1619.52,642.264 1620.08,644.384 1620.64,631.572 1621.2,635.278 1621.76,653.963 1622.32,654.246 1622.88,656.417 1623.44,657.621 1624,644.244 1624.56,611.332 1625.11,632.841 1625.67,649.658 1626.23,687.101 1626.79,682.855 1627.35,683.287 1627.91,680.893 1628.47,696.961 1629.03,678.759 1629.59,679.046 1630.15,697.534 1630.71,679.949 1631.27,696.74 1631.83,681.972 1632.39,665.676 1632.94,669.124 1633.5,633.852 1634.06,652.323 1634.62,702.993 1635.18,682.568 1635.74,683.481 1636.3,697.995 1636.86,744.923 1637.42,724.817 1637.98,675.125 1638.54,692.22 1639.1,693.035 1639.66,689.968 1640.21,705.192 1640.77,719.415 1641.33,687.279 1641.89,673.962 1642.45,658.436 1643.01,659.09 1643.57,704.817 1644.13,737.855 1644.69,703.846 1645.25,719.125 1645.81,686.601 1646.37,666.777 1646.93,662.773 1647.48,697.421 1648.04,696.027 1648.6,694.441 1649.16,693.271 1649.72,661.837 1650.28,661.428 1650.84,647.676 1651.4,665.121 1651.96,651.186 1652.52,670.036 1653.08,689.748 1653.64,653.748 1654.2,635.062 1654.76,603.338 1655.31,622.472 1655.87,625.979 1656.43,628.745 1656.99,645.875 1657.55,652.576 1658.11,653.55 1658.67,653.571 1659.23,703.556 1659.79,703.261 1660.35,684.013 1660.91,685.22 1661.47,686.09 1662.03,670.074 1662.58,636.83 1663.14,640.377 1663.7,645.189 1664.26,647.163 1664.82,633.386 1665.38,708.273 1665.94,739.389 1666.5,737.106 1667.06,720.142 1667.62,716.873 1668.18,685.948 1668.74,685.638 1669.3,653.354 1669.85,640.139 1670.41,646.849 1670.97,628.631 1671.53,632.376 1672.09,634.528 1672.65,655.328 1673.21,673.705 1673.77,688.669 1674.33,687.171 1674.89,717.47 1675.45,670.885 1676.01,704.265 1676.57,684.367 1677.13,704.446 1677.68,718.838 1678.24,702.16 1678.8,699.408 1679.36,717.083 1679.92,696.788 1680.48,694.854 1681.04,691.655 1681.6,706.675 1682.16,705.065 1682.72,688.255 1683.28,688.81 1683.84,673.019 1684.4,706.99 1684.95,691.091 1685.51,692.265 1686.07,726.276 1686.63,709.014 1687.19,726.22 1687.75,727.171 1688.31,757.253 1688.87,774.052 1689.43,722.263 1689.99,705.501 1690.55,739.963 1691.11,734.202 1691.67,746.783 1692.23,709.472 1692.78,742.257 1693.34,740.076 1693.9,752.52 1694.46,730.098 1695.02,727.954 1695.58,724.955 1696.14,690.512 1696.7,691.92 1697.26,690.989 1697.82,686.225 1698.38,685.47 1698.94,698.434 1699.5,698.611 1700.05,716.145 1700.61,733.879 1701.17,798.005 1701.73,727.159 1702.29,739.808 1702.85,721.298 1703.41,704.166 1703.97,699.35 1704.53,727.373 1705.09,724.714 1705.65,706.589 1706.21,669.518 1706.77,655.415 1707.32,675.466 1707.88,642.425 1708.44,629.917 1709,634.297 1709.56,650.255 1710.12,648.364 1710.68,644.877 1711.24,695.328 1711.8,681.527 1712.36,698.812 1712.92,666.753 1713.48,683.952 1714.04,683.884 1714.6,670.72 1715.15,655.645 1715.71,656.652 1716.27,655.853 1716.83,670.815 1717.39,685.193 1717.95,700.912 1718.51,682.505 1719.07,699.089 1719.63,685.515 1720.19,703.919 1720.75,718.676 1721.31,719.795 1721.87,749.736 1722.42,729.231 1722.98,759.981 1723.54,676.605 1724.1,676.972 1724.66,683.05 1725.22,714.291 1725.78,728.352 1726.34,741.067 1726.9,705.037 1727.46,705.445 1728.02,687.978 1728.58,717.014 1729.14,717.731 1729.69,717.925 1730.25,716.755 1730.81,696.173 1731.37,696.378 1731.93,691.697 1732.49,689.884 1733.05,689.835 1733.61,699.89 1734.17,699.887 1734.73,683.297 1735.29,681.093 1735.85,713.052 1736.41,710.221 1736.97,691.431 1737.52,674.451 1738.08,658.542 1738.64,679.23 1739.2,710.926 1739.76,709.616 1740.32,692.65 1740.88,722.861 1741.44,720.6 1742,719.316 1742.56,733.332 1743.12,743.319 1743.68,725.851 1744.24,723.356 1744.79,750.708 1745.35,713.046 1745.91,678.805 1746.47,681.315 1747.03,698.108 1747.59,712.429 1748.15,710.028 1748.71,725.394 1749.27,718.646 1749.83,728.631 1750.39,725.54 1750.95,735.039 1751.51,733.674 1752.06,744.248 1752.62,758.986 1753.18,769.779 1753.74,795.169 1754.3,805.392 1754.86,783.618 1755.42,794.984 1755.98,760.846 1756.54,772.99 1757.1,717.473 1757.66,718.775 1758.22,764.677 1758.78,774.854 1759.34,752.166 1759.89,712.402 1760.45,693.791 1761.01,660.386 1761.57,690.267 1762.13,672.076 1762.69,655.168 1763.25,671.272 1763.81,692.037 1764.37,710.305 1764.93,725.152 1765.49,720.514 1766.05,731.946 1766.61,715.753 1767.16,698.374 1767.72,702.442 1768.28,654.926 1768.84,657.148 1769.4,673.182 1769.96,737.841 1770.52,734.908 1771.08,716.005 1771.64,700.697 1772.2,683.891 1772.76,620.573 1773.32,604.03 1773.88,672.041 1774.43,674.979 1774.99,674.91 1775.55,689.351 1776.11,693.231 1776.67,644.182 1777.23,618.521 1777.79,622.652 1778.35,625.125 1778.91,629.602 1779.47,635.296 1780.03,653.534 1780.59,654.385 1781.15,676.562 1781.71,693.702 1782.26,726.74 1782.82,728.583 1783.38,721.826 1783.94,687.365 1784.5,689.132 1785.06,686.802 1785.62,686.147 1786.18,670.281 1786.74,672.858 1787.3,659.326 1787.86,677.012 1788.42,697.593 1788.98,697.88 1789.53,709.592 1790.09,675.716 1790.65,709.5 1791.21,692.202 1791.77,706.631 1792.33,705.788 1792.89,751.724 1793.45,761.07 1794.01,739.911 1794.57,707.01 1795.13,723.255 1795.69,721.123 1796.25,703.502 1796.8,716.592 1797.36,699.618 1797.92,699.366 1798.48,681.933 1799.04,701.634 1799.6,699.185 1800.16,698.547 1800.72,648.408 1801.28,650.857 1801.84,655.118 1802.4,639.579 1802.96,656.498 1803.52,660.058 1804.08,657.312 1804.63,644.158 1805.19,642.838 1805.75,628.121 1806.31,629.727 1806.87,602.84 1807.43,603.905 1807.99,608.185 1808.55,645.403 1809.11,696.518 1809.67,710.185 1810.23,726.07 1810.79,689.983 1811.35,685.888 1811.9,671.491 1812.46,705.413 1813.02,673.976 1813.58,657.759 1814.14,658.339 1814.7,691.57 1815.26,660.425 1815.82,643.415 1816.38,645.698 1816.94,647.954 1817.5,647.923 1818.06,682.004 1818.62,683.356 1819.18,668.553 1819.73,674.783 1820.29,689.872 1820.85,691.594 1821.41,692.285 1821.97,656.21 1822.53,690.448 1823.09,674.861 1823.65,672.873 1824.21,655.81 1824.77,656.841 1825.33,673.211 1825.89,658.373 1826.45,661.828 1827,616.205 1827.56,588.203 1828.12,608.057 1828.68,629.953 1829.24,651.237 1829.8,652.655 1830.36,672.086 1830.92,709.265 1831.48,725.829 1832.04,752.972 1832.6,761.467 1833.16,743.145 1833.72,727.294 1834.27,742.316 1834.83,781.974 1835.39,759.409 1835.95,709.622 1836.51,694.865 1837.07,696.296 1837.63,676.386 1838.19,675.942 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 691.191 L720.806 691.191 L721.365 691.191 L721.924 691.191 L722.484 691.191 L723.043 691.191 L723.602 691.191 L724.161 691.191 L724.721 691.191 L725.28 691.191 L725.839 691.191 L726.398 691.191 L726.958 691.191 L727.517 691.191 L728.076 691.191 L728.635 691.191 L729.195 691.191 L729.754 691.191 L730.313 691.191 L730.872 691.191 L731.432 691.191 L731.991 691.191 L732.55 691.191 L733.109 691.191 L733.669 691.191 L734.228 691.191 L734.787 691.191 L735.346 691.191 L735.906 691.191 L736.465 691.191 L737.024 691.191 L737.583 691.191 L738.143 691.191 L738.702 691.191 L739.261 691.191 L739.82 691.191 L740.38 691.191 L740.939 691.191 L741.498 691.191 L742.057 691.191 L742.617 691.191 L743.176 691.191 L743.735 691.191 L744.294 691.191 L744.854 691.191 L745.413 691.191 L745.972 691.191 L746.531 691.191 L747.091 691.191 L747.65 691.191 L748.209 691.191 L748.768 691.191 L749.328 691.191 L749.887 691.191 L750.446 691.191 L751.005 691.191 L751.565 691.191 L752.124 691.191 L752.683 691.191 L753.242 691.191 L753.802 691.191 L754.361 691.191 L754.92 691.191 L755.479 691.191 L756.039 691.191 L756.598 691.191 L757.157 691.191 L757.716 691.191 L758.276 691.191 L758.835 691.191 L759.394 691.191 L759.953 691.191 L760.513 691.191 L761.072 691.191 L761.631 691.191 L762.19 691.191 L762.75 691.191 L763.309 691.191 L763.868 691.191 L764.427 691.191 L764.987 691.191 L765.546 691.191 L766.105 691.191 L766.664 691.191 L767.224 691.191 L767.783 691.191 L768.342 691.191 L768.901 691.191 L769.461 691.191 L770.02 691.191 L770.579 691.191 L771.138 691.191 L771.698 691.191 L772.257 691.191 L772.816 691.191 L773.375 691.191 L773.935 691.191 L774.494 691.191 L775.053 691.191 L775.612 691.191 L776.172 691.191 L776.731 691.191 L777.29 691.191 L777.849 691.191 L778.409 691.191 L778.968 691.191 L779.527 691.191 L780.086 691.191 L780.646 691.191 L781.205 691.191 L781.764 691.191 L782.323 691.191 L782.883 691.191 L783.442 691.191 L784.001 691.191 L784.56 691.191 L785.12 691.191 L785.679 691.191 L786.238 691.191 L786.797 691.191 L787.357 691.191 L787.916 691.191 L788.475 691.191 L789.034 691.191 L789.594 691.191 L790.153 691.191 L790.712 691.191 L791.271 691.191 L791.831 691.191 L792.39 691.191 L792.949 691.191 L793.508 691.191 L794.068 691.191 L794.627 691.191 L795.186 691.191 L795.745 691.191 L796.305 691.191 L796.864 691.191 L797.423 691.191 L797.982 691.191 L798.542 691.191 L799.101 691.191 L799.66 691.191 L800.219 691.191 L800.779 691.191 L801.338 691.191 L801.897 691.191 L802.456 691.191 L803.016 691.191 L803.575 691.191 L804.134 691.191 L804.693 691.191 L805.253 691.191 L805.812 691.191 L806.371 691.191 L806.931 691.191 L807.49 691.191 L808.049 691.191 L808.608 691.191 L809.168 691.191 L809.727 691.191 L810.286 691.191 L810.845 691.191 L811.405 691.191 L811.964 691.191 L812.523 691.191 L813.082 691.191 L813.642 691.191 L814.201 691.191 L814.76 691.191 L815.319 691.191 L815.879 691.191 L816.438 691.191 L816.997 691.191 L817.556 691.191 L818.116 691.191 L818.675 691.191 L819.234 691.191 L819.793 691.191 L820.353 691.191 L820.912 691.191 L821.471 691.191 L822.03 691.191 L822.59 691.191 L823.149 691.191 L823.708 691.191 L824.267 691.191 L824.827 691.191 L825.386 691.191 L825.945 691.191 L826.504 691.191 L827.064 691.191 L827.623 691.191 L828.182 691.191 L828.741 691.191 L829.301 691.191 L829.86 691.191 L830.419 691.191 L830.978 691.191 L831.538 691.191 L832.097 691.191 L832.656 691.191 L833.215 691.191 L833.775 691.191 L834.334 691.191 L834.893 691.191 L835.452 691.191 L836.012 691.191 L836.571 691.191 L837.13 691.191 L837.689 691.191 L838.249 691.191 L838.808 691.191 L839.367 691.191 L839.926 691.191 L840.486 691.191 L841.045 691.191 L841.604 691.191 L842.163 691.191 L842.723 691.191 L843.282 691.191 L843.841 691.191 L844.4 691.191 L844.96 691.191 L845.519 691.191 L846.078 691.191 L846.637 691.191 L847.197 691.191 L847.756 691.191 L848.315 691.191 L848.874 691.191 L849.434 691.191 L849.993 691.191 L850.552 691.191 L851.111 691.191 L851.671 691.191 L852.23 691.191 L852.789 691.191 L853.348 691.191 L853.908 691.191 L854.467 691.191 L855.026 691.191 L855.585 691.191 L856.145 691.191 L856.704 691.191 L857.263 691.191 L857.822 691.191 L858.382 691.191 L858.941 691.191 L859.5 691.191 L860.059 691.191 L860.619 691.191 L861.178 691.191 L861.737 691.191 L862.296 691.191 L862.856 691.191 L863.415 691.191 L863.974 691.191 L864.533 691.191 L865.093 691.191 L865.652 691.191 L866.211 691.191 L866.77 691.191 L867.33 691.191 L867.889 691.191 L868.448 691.191 L869.007 691.191 L869.567 691.191 L870.126 691.191 L870.685 691.191 L871.244 691.191 L871.804 691.191 L872.363 691.191 L872.922 691.191 L873.481 691.191 L874.041 691.191 L874.6 691.191 L875.159 691.191 L875.718 691.191 L876.278 691.191 L876.837 691.191 L877.396 691.191 L877.955 691.191 L878.515 691.191 L879.074 691.191 L879.633 691.191 L880.192 691.191 L880.752 691.191 L881.311 691.191 L881.87 691.191 L882.429 691.191 L882.989 691.191 L883.548 691.191 L884.107 691.191 L884.666 691.191 L885.226 691.191 L885.785 691.191 L886.344 691.191 L886.903 691.191 L887.463 691.191 L888.022 691.191 L888.581 691.191 L889.14 691.191 L889.7 691.191 L890.259 691.191 L890.818 691.191 L891.377 691.191 L891.937 691.191 L892.496 691.191 L893.055 691.191 L893.614 691.191 L894.174 691.191 L894.733 691.191 L895.292 691.191 L895.851 691.191 L896.411 691.191 L896.97 691.191 L897.529 691.191 L898.088 691.191 L898.648 691.191 L899.207 691.191 L899.766 691.191 L900.325 691.191 L900.885 691.191 L901.444 691.191 L902.003 691.191 L902.562 691.191 L903.122 691.191 L903.681 691.191 L904.24 691.191 L904.799 691.191 L905.359 691.191 L905.918 691.191 L906.477 691.191 L907.036 691.191 L907.596 691.191 L908.155 691.191 L908.714 691.191 L909.273 691.191 L909.833 691.191 L910.392 691.191 L910.951 691.191 L911.51 691.191 L912.07 691.191 L912.629 691.191 L913.188 691.191 L913.747 691.191 L914.307 691.191 L914.866 691.191 L915.425 691.191 L915.984 691.191 L916.544 691.191 L917.103 691.191 L917.662 691.191 L918.221 691.191 L918.781 691.191 L919.34 691.191 L919.899 691.191 L920.458 691.191 L921.018 691.191 L921.577 691.191 L922.136 691.191 L922.695 691.191 L923.255 691.191 L923.814 691.191 L924.373 691.191 L924.932 691.191 L925.492 691.191 L926.051 691.191 L926.61 691.191 L927.169 691.191 L927.729 691.191 L928.288 691.191 L928.847 691.191 L929.406 691.191 L929.966 691.191 L930.525 691.191 L931.084 691.191 L931.644 691.191 L932.203 691.191 L932.762 691.191 L933.321 691.191 L933.881 691.191 L934.44 691.191 L934.999 691.191 L935.558 691.191 L936.118 691.191 L936.677 691.191 L937.236 691.191 L937.795 691.191 L938.355 691.191 L938.914 691.191 L939.473 691.191 L940.032 691.191 L940.592 691.191 L941.151 691.191 L941.71 691.191 L942.269 691.191 L942.829 691.191 L943.388 691.191 L943.947 691.191 L944.506 691.191 L945.066 691.191 L945.625 691.191 L946.184 691.191 L946.743 691.191 L947.303 691.191 L947.862 691.191 L948.421 691.191 L948.98 691.191 L949.54 691.191 L950.099 691.191 L950.658 691.191 L951.217 691.191 L951.777 691.191 L952.336 691.191 L952.895 691.191 L953.454 691.191 L954.014 691.191 L954.573 691.191 L955.132 691.191 L955.691 691.191 L956.251 691.191 L956.81 691.191 L957.369 691.191 L957.928 691.191 L958.488 691.191 L959.047 691.191 L959.606 691.191 L960.165 691.191 L960.725 691.191 L961.284 691.191 L961.843 691.191 L962.402 691.191 L962.962 691.191 L963.521 691.191 L964.08 691.191 L964.639 691.191 L965.199 691.191 L965.758 691.191 L966.317 691.191 L966.876 691.191 L967.436 691.191 L967.995 691.191 L968.554 691.191 L969.113 691.191 L969.673 691.191 L970.232 691.191 L970.791 691.191 L971.35 691.191 L971.91 691.191 L972.469 691.191 L973.028 691.191 L973.587 691.191 L974.147 691.191 L974.706 691.191 L975.265 691.191 L975.824 691.191 L976.384 691.191 L976.943 691.191 L977.502 691.191 L978.061 691.191 L978.621 691.191 L979.18 691.191 L979.739 691.191 L980.298 691.191 L980.858 691.191 L981.417 691.191 L981.976 691.191 L982.535 691.191 L983.095 691.191 L983.654 691.191 L984.213 691.191 L984.772 691.191 L985.332 691.191 L985.891 691.191 L986.45 691.191 L987.009 691.191 L987.569 691.191 L988.128 691.191 L988.687 691.191 L989.246 691.191 L989.806 691.191 L990.365 691.191 L990.924 691.191 L991.483 691.191 L992.043 691.191 L992.602 691.191 L993.161 691.191 L993.72 691.191 L994.28 691.191 L994.839 691.191 L995.398 691.191 L995.957 691.191 L996.517 691.191 L997.076 691.191 L997.635 691.191 L998.194 691.191 L998.754 691.191 L999.313 691.191 L999.872 691.191 L1000.43 691.191 L1000.99 691.191 L1001.55 691.191 L1002.11 691.191 L1002.67 691.191 L1003.23 691.191 L1003.79 691.191 L1004.35 691.191 L1004.91 691.191 L1005.46 691.191 L1006.02 691.191 L1006.58 691.191 L1007.14 691.191 L1007.7 691.191 L1008.26 691.191 L1008.82 691.191 L1009.38 691.191 L1009.94 691.191 L1010.5 691.191 L1011.06 691.191 L1011.62 691.191 L1012.18 691.191 L1012.73 691.191 L1013.29 691.191 L1013.85 691.191 L1014.41 691.191 L1014.97 691.191 L1015.53 691.191 L1016.09 691.191 L1016.65 691.191 L1017.21 691.191 L1017.77 691.191 L1018.33 691.191 L1018.89 691.191 L1019.45 691.191 L1020.01 691.191 L1020.56 691.191 L1021.12 691.191 L1021.68 691.191 L1022.24 691.191 L1022.8 691.191 L1023.36 691.191 L1023.92 691.191 L1024.48 691.191 L1025.04 691.191 L1025.6 691.191 L1026.16 691.191 L1026.72 691.191 L1027.28 691.191 L1027.83 691.191 L1028.39 691.191 L1028.95 691.191 L1029.51 691.191 L1030.07 691.191 L1030.63 691.191 L1031.19 691.191 L1031.75 691.191 L1032.31 691.191 L1032.87 691.191 L1033.43 691.191 L1033.99 691.191 L1034.55 691.191 L1035.1 691.191 L1035.66 691.191 L1036.22 691.191 L1036.78 691.191 L1037.34 691.191 L1037.9 691.191 L1038.46 691.191 L1039.02 691.191 L1039.58 691.191 L1040.14 691.191 L1040.7 691.191 L1041.26 691.191 L1041.82 691.191 L1042.38 691.191 L1042.93 691.191 L1043.49 691.191 L1044.05 691.191 L1044.61 691.191 L1045.17 691.191 L1045.73 691.191 L1046.29 691.191 L1046.85 691.191 L1047.41 691.191 L1047.97 691.191 L1048.53 691.191 L1049.09 691.191 L1049.65 691.191 L1050.2 691.191 L1050.76 691.191 L1051.32 691.191 L1051.88 691.191 L1052.44 691.191 L1053 691.191 L1053.56 691.191 L1054.12 691.191 L1054.68 691.191 L1055.24 691.191 L1055.8 691.191 L1056.36 691.191 L1056.92 691.191 L1057.48 691.191 L1058.03 691.191 L1058.59 691.191 L1059.15 691.191 L1059.71 691.191 L1060.27 691.191 L1060.83 691.191 L1061.39 691.191 L1061.95 691.191 L1062.51 691.191 L1063.07 691.191 L1063.63 691.191 L1064.19 691.191 L1064.75 691.191 L1065.3 691.191 L1065.86 691.191 L1066.42 691.191 L1066.98 691.191 L1067.54 691.191 L1068.1 691.191 L1068.66 691.191 L1069.22 691.191 L1069.78 691.191 L1070.34 691.191 L1070.9 691.191 L1071.46 691.191 L1072.02 691.191 L1072.57 691.191 L1073.13 691.191 L1073.69 691.191 L1074.25 691.191 L1074.81 691.191 L1075.37 691.191 L1075.93 691.191 L1076.49 691.191 L1077.05 691.191 L1077.61 691.191 L1078.17 691.191 L1078.73 691.191 L1079.29 691.191 L1079.85 691.191 L1080.4 691.191 L1080.96 691.191 L1081.52 691.191 L1082.08 691.191 L1082.64 691.191 L1083.2 691.191 L1083.76 691.191 L1084.32 691.191 L1084.88 691.191 L1085.44 691.191 L1086 691.191 L1086.56 691.191 L1087.12 691.191 L1087.67 691.191 L1088.23 691.191 L1088.79 691.191 L1089.35 691.191 L1089.91 691.191 L1090.47 691.191 L1091.03 691.191 L1091.59 691.191 L1092.15 691.191 L1092.71 691.191 L1093.27 691.191 L1093.83 691.191 L1094.39 691.191 L1094.94 691.191 L1095.5 691.191 L1096.06 691.191 L1096.62 691.191 L1097.18 691.191 L1097.74 691.191 L1098.3 691.191 L1098.86 691.191 L1099.42 691.191 L1099.98 691.191 L1100.54 691.191 L1101.1 691.191 L1101.66 691.191 L1102.22 691.191 L1102.77 691.191 L1103.33 691.191 L1103.89 691.191 L1104.45 691.191 L1105.01 691.191 L1105.57 691.191 L1106.13 691.191 L1106.69 691.191 L1107.25 691.191 L1107.81 691.191 L1108.37 691.191 L1108.93 691.191 L1109.49 691.191 L1110.04 691.191 L1110.6 691.191 L1111.16 691.191 L1111.72 691.191 L1112.28 691.191 L1112.84 691.191 L1113.4 691.191 L1113.96 691.191 L1114.52 691.191 L1115.08 691.191 L1115.64 691.191 L1116.2 691.191 L1116.76 691.191 L1117.31 691.191 L1117.87 691.191 L1118.43 691.191 L1118.99 691.191 L1119.55 691.191 L1120.11 691.191 L1120.67 691.191 L1121.23 691.191 L1121.79 691.191 L1122.35 691.191 L1122.91 691.191 L1123.47 691.191 L1124.03 691.191 L1124.59 691.191 L1125.14 691.191 L1125.7 691.191 L1126.26 691.191 L1126.82 691.191 L1127.38 691.191 L1127.94 691.191 L1128.5 691.191 L1129.06 691.191 L1129.62 691.191 L1130.18 691.191 L1130.74 691.191 L1131.3 691.191 L1131.86 691.191 L1132.41 691.191 L1132.97 691.191 L1133.53 691.191 L1134.09 691.191 L1134.65 691.191 L1135.21 691.191 L1135.77 691.191 L1136.33 691.191 L1136.89 691.191 L1137.45 691.191 L1138.01 691.191 L1138.57 691.191 L1139.13 691.191 L1139.68 691.191 L1140.24 691.191 L1140.8 691.191 L1141.36 691.191 L1141.92 691.191 L1142.48 691.191 L1143.04 691.191 L1143.6 691.191 L1144.16 691.191 L1144.72 691.191 L1145.28 691.191 L1145.84 691.191 L1146.4 691.191 L1146.96 691.191 L1147.51 691.191 L1148.07 691.191 L1148.63 691.191 L1149.19 691.191 L1149.75 691.191 L1150.31 691.191 L1150.87 691.191 L1151.43 691.191 L1151.99 691.191 L1152.55 691.191 L1153.11 691.191 L1153.67 691.191 L1154.23 691.191 L1154.78 691.191 L1155.34 691.191 L1155.9 691.191 L1156.46 691.191 L1157.02 691.191 L1157.58 691.191 L1158.14 691.191 L1158.7 691.191 L1159.26 691.191 L1159.82 691.191 L1160.38 691.191 L1160.94 691.191 L1161.5 691.191 L1162.05 691.191 L1162.61 691.191 L1163.17 691.191 L1163.73 691.191 L1164.29 691.191 L1164.85 691.191 L1165.41 691.191 L1165.97 691.191 L1166.53 691.191 L1167.09 691.191 L1167.65 691.191 L1168.21 691.191 L1168.77 691.191 L1169.33 691.191 L1169.88 691.191 L1170.44 691.191 L1171 691.191 L1171.56 691.191 L1172.12 691.191 L1172.68 691.191 L1173.24 691.191 L1173.8 691.191 L1174.36 691.191 L1174.92 691.191 L1175.48 691.191 L1176.04 691.191 L1176.6 691.191 L1177.15 691.191 L1177.71 691.191 L1178.27 691.191 L1178.83 691.191 L1179.39 691.191 L1179.95 691.191 L1180.51 691.191 L1181.07 691.191 L1181.63 691.191 L1182.19 691.191 L1182.75 691.191 L1183.31 691.191 L1183.87 691.191 L1184.43 691.191 L1184.98 691.191 L1185.54 691.191 L1186.1 691.191 L1186.66 691.191 L1187.22 691.191 L1187.78 691.191 L1188.34 691.191 L1188.9 691.191 L1189.46 691.191 L1190.02 691.191 L1190.58 691.191 L1191.14 691.191 L1191.7 691.191 L1192.25 691.191 L1192.81 691.191 L1193.37 691.191 L1193.93 691.191 L1194.49 691.191 L1195.05 691.191 L1195.61 691.191 L1196.17 691.191 L1196.73 691.191 L1197.29 691.191 L1197.85 691.191 L1198.41 691.191 L1198.97 691.191 L1199.52 691.191 L1200.08 691.191 L1200.64 691.191 L1201.2 691.191 L1201.76 691.191 L1202.32 691.191 L1202.88 691.191 L1203.44 691.191 L1204 691.191 L1204.56 691.191 L1205.12 691.191 L1205.68 691.191 L1206.24 691.191 L1206.8 691.191 L1207.35 691.191 L1207.91 691.191 L1208.47 691.191 L1209.03 691.191 L1209.59 691.191 L1210.15 691.191 L1210.71 691.191 L1211.27 691.191 L1211.83 691.191 L1212.39 691.191 L1212.95 691.191 L1213.51 691.191 L1214.07 691.191 L1214.62 691.191 L1215.18 691.191 L1215.74 691.191 L1216.3 691.191 L1216.86 691.191 L1217.42 691.191 L1217.98 691.191 L1218.54 691.191 L1219.1 691.191 L1219.66 691.191 L1220.22 691.191 L1220.78 691.191 L1221.34 691.191 L1221.89 691.191 L1222.45 691.191 L1223.01 691.191 L1223.57 691.191 L1224.13 691.191 L1224.69 691.191 L1225.25 691.191 L1225.81 691.191 L1226.37 691.191 L1226.93 691.191 L1227.49 691.191 L1228.05 691.191 L1228.61 691.191 L1229.17 691.191 L1229.72 691.191 L1230.28 691.191 L1230.84 691.191 L1231.4 691.191 L1231.96 691.191 L1232.52 691.191 L1233.08 691.191 L1233.64 691.191 L1234.2 691.191 L1234.76 691.191 L1235.32 691.191 L1235.88 691.191 L1236.44 691.191 L1236.99 691.191 L1237.55 691.191 L1238.11 691.191 L1238.67 691.191 L1239.23 691.191 L1239.79 691.191 L1240.35 691.191 L1240.91 691.191 L1241.47 691.191 L1242.03 691.191 L1242.59 691.191 L1243.15 691.191 L1243.71 691.191 L1244.26 691.191 L1244.82 691.191 L1245.38 691.191 L1245.94 691.191 L1246.5 691.191 L1247.06 691.191 L1247.62 691.191 L1248.18 691.191 L1248.74 691.191 L1249.3 691.191 L1249.86 691.191 L1250.42 691.191 L1250.98 691.191 L1251.54 691.191 L1252.09 691.191 L1252.65 691.191 L1253.21 691.191 L1253.77 691.191 L1254.33 691.191 L1254.89 691.191 L1255.45 691.191 L1256.01 691.191 L1256.57 691.191 L1257.13 691.191 L1257.69 691.191 L1258.25 691.191 L1258.81 691.191 L1259.36 691.191 L1259.92 691.191 L1260.48 691.191 L1261.04 691.191 L1261.6 691.191 L1262.16 691.191 L1262.72 691.191 L1263.28 691.191 L1263.84 691.191 L1264.4 691.191 L1264.96 691.191 L1265.52 691.191 L1266.08 691.191 L1266.63 691.191 L1267.19 691.191 L1267.75 691.191 L1268.31 691.191 L1268.87 691.191 L1269.43 691.191 L1269.99 691.191 L1270.55 691.191 L1271.11 691.191 L1271.67 691.191 L1272.23 691.191 L1272.79 691.191 L1273.35 691.191 L1273.91 691.191 L1274.46 691.191 L1275.02 691.191 L1275.58 691.191 L1276.14 691.191 L1276.7 691.191 L1277.26 691.191 L1277.82 691.191 L1278.38 691.191 L1278.94 691.191 L1279.5 691.191 L1280.06 691.191 L1280.62 691.191 L1281.18 691.191 L1281.73 691.191 L1282.29 691.191 L1282.85 691.191 L1283.41 691.191 L1283.97 691.191 L1284.53 691.191 L1285.09 691.191 L1285.65 691.191 L1286.21 691.191 L1286.77 691.191 L1287.33 691.191 L1287.89 691.191 L1288.45 691.191 L1289 691.191 L1289.56 691.191 L1290.12 691.191 L1290.68 691.191 L1291.24 691.191 L1291.8 691.191 L1292.36 691.191 L1292.92 691.191 L1293.48 691.191 L1294.04 691.191 L1294.6 691.191 L1295.16 691.191 L1295.72 691.191 L1296.28 691.191 L1296.83 691.191 L1297.39 691.191 L1297.95 691.191 L1298.51 691.191 L1299.07 691.191 L1299.63 691.191 L1300.19 691.191 L1300.75 691.191 L1301.31 691.191 L1301.87 691.191 L1302.43 691.191 L1302.99 691.191 L1303.55 691.191 L1304.1 691.191 L1304.66 691.191 L1305.22 691.191 L1305.78 691.191 L1306.34 691.191 L1306.9 691.191 L1307.46 691.191 L1308.02 691.191 L1308.58 691.191 L1309.14 691.191 L1309.7 691.191 L1310.26 691.191 L1310.82 691.191 L1311.38 691.191 L1311.93 691.191 L1312.49 691.191 L1313.05 691.191 L1313.61 691.191 L1314.17 691.191 L1314.73 691.191 L1315.29 691.191 L1315.85 691.191 L1316.41 691.191 L1316.97 691.191 L1317.53 691.191 L1318.09 691.191 L1318.65 691.191 L1319.2 691.191 L1319.76 691.191 L1320.32 691.191 L1320.88 691.191 L1321.44 691.191 L1322 691.191 L1322.56 691.191 L1323.12 691.191 L1323.68 691.191 L1324.24 691.191 L1324.8 691.191 L1325.36 691.191 L1325.92 691.191 L1326.47 691.191 L1327.03 691.191 L1327.59 691.191 L1328.15 691.191 L1328.71 691.191 L1329.27 691.191 L1329.83 691.191 L1330.39 691.191 L1330.95 691.191 L1331.51 691.191 L1332.07 691.191 L1332.63 691.191 L1333.19 691.191 L1333.75 691.191 L1334.3 691.191 L1334.86 691.191 L1335.42 691.191 L1335.98 691.191 L1336.54 691.191 L1337.1 691.191 L1337.66 691.191 L1338.22 691.191 L1338.78 691.191 L1339.34 691.191 L1339.9 691.191 L1340.46 691.191 L1341.02 691.191 L1341.57 691.191 L1342.13 691.191 L1342.69 691.191 L1343.25 691.191 L1343.81 691.191 L1344.37 691.191 L1344.93 691.191 L1345.49 691.191 L1346.05 691.191 L1346.61 691.191 L1347.17 691.191 L1347.73 691.191 L1348.29 691.191 L1348.84 691.191 L1349.4 691.191 L1349.96 691.191 L1350.52 691.191 L1351.08 691.191 L1351.64 691.191 L1352.2 691.191 L1352.76 691.191 L1353.32 691.191 L1353.88 691.191 L1354.44 691.191 L1355 691.191 L1355.56 691.191 L1356.12 691.191 L1356.67 691.191 L1357.23 691.191 L1357.79 691.191 L1358.35 691.191 L1358.91 691.191 L1359.47 691.191 L1360.03 691.191 L1360.59 691.191 L1361.15 691.191 L1361.71 691.191 L1362.27 691.191 L1362.83 691.191 L1363.39 691.191 L1363.94 691.191 L1364.5 691.191 L1365.06 691.191 L1365.62 691.191 L1366.18 691.191 L1366.74 691.191 L1367.3 691.191 L1367.86 691.191 L1368.42 691.191 L1368.98 691.191 L1369.54 691.191 L1370.1 691.191 L1370.66 691.191 L1371.21 691.191 L1371.77 691.191 L1372.33 691.191 L1372.89 691.191 L1373.45 691.191 L1374.01 691.191 L1374.57 691.191 L1375.13 691.191 L1375.69 691.191 L1376.25 691.191 L1376.81 691.191 L1377.37 691.191 L1377.93 691.191 L1378.49 691.191 L1379.04 691.191 L1379.6 691.191 L1380.16 691.191 L1380.72 691.191 L1381.28 691.191 L1381.84 691.191 L1382.4 691.191 L1382.96 691.191 L1383.52 691.191 L1384.08 691.191 L1384.64 691.191 L1385.2 691.191 L1385.76 691.191 L1386.31 691.191 L1386.87 691.191 L1387.43 691.191 L1387.99 691.191 L1388.55 691.191 L1389.11 691.191 L1389.67 691.191 L1390.23 691.191 L1390.79 691.191 L1391.35 691.191 L1391.91 691.191 L1392.47 691.191 L1393.03 691.191 L1393.58 691.191 L1394.14 691.191 L1394.7 691.191 L1395.26 691.191 L1395.82 691.191 L1396.38 691.191 L1396.94 691.191 L1397.5 691.191 L1398.06 691.191 L1398.62 691.191 L1399.18 691.191 L1399.74 691.191 L1400.3 691.191 L1400.86 691.191 L1401.41 691.191 L1401.97 691.191 L1402.53 691.191 L1403.09 691.191 L1403.65 691.191 L1404.21 691.191 L1404.77 691.191 L1405.33 691.191 L1405.89 691.191 L1406.45 691.191 L1407.01 691.191 L1407.57 691.191 L1408.13 691.191 L1408.68 691.191 L1409.24 691.191 L1409.8 691.191 L1410.36 691.191 L1410.92 691.191 L1411.48 691.191 L1412.04 691.191 L1412.6 691.191 L1413.16 691.191 L1413.72 691.191 L1414.28 691.191 L1414.84 691.191 L1415.4 691.191 L1415.95 691.191 L1416.51 691.191 L1417.07 691.191 L1417.63 691.191 L1418.19 691.191 L1418.75 691.191 L1419.31 691.191 L1419.87 691.191 L1420.43 691.191 L1420.99 691.191 L1421.55 691.191 L1422.11 691.191 L1422.67 691.191 L1423.23 691.191 L1423.78 691.191 L1424.34 691.191 L1424.9 691.191 L1425.46 691.191 L1426.02 691.191 L1426.58 691.191 L1427.14 691.191 L1427.7 691.191 L1428.26 691.191 L1428.82 691.191 L1429.38 691.191 L1429.94 691.191 L1430.5 691.191 L1431.05 691.191 L1431.61 691.191 L1432.17 691.191 L1432.73 691.191 L1433.29 691.191 L1433.85 691.191 L1434.41 691.191 L1434.97 691.191 L1435.53 691.191 L1436.09 691.191 L1436.65 691.191 L1437.21 691.191 L1437.77 691.191 L1438.33 691.191 L1438.88 691.191 L1439.44 691.191 L1440 691.191 L1440.56 691.191 L1441.12 691.191 L1441.68 691.191 L1442.24 691.191 L1442.8 691.191 L1443.36 691.191 L1443.92 691.191 L1444.48 691.191 L1445.04 691.191 L1445.6 691.191 L1446.15 691.191 L1446.71 691.191 L1447.27 691.191 L1447.83 691.191 L1448.39 691.191 L1448.95 691.191 L1449.51 691.191 L1450.07 691.191 L1450.63 691.191 L1451.19 691.191 L1451.75 691.191 L1452.31 691.191 L1452.87 691.191 L1453.42 691.191 L1453.98 691.191 L1454.54 691.191 L1455.1 691.191 L1455.66 691.191 L1456.22 691.191 L1456.78 691.191 L1457.34 691.191 L1457.9 691.191 L1458.46 691.191 L1459.02 691.191 L1459.58 691.191 L1460.14 691.191 L1460.7 691.191 L1461.25 691.191 L1461.81 691.191 L1462.37 691.191 L1462.93 691.191 L1463.49 691.191 L1464.05 691.191 L1464.61 691.191 L1465.17 691.191 L1465.73 691.191 L1466.29 691.191 L1466.85 691.191 L1467.41 691.191 L1467.97 691.191 L1468.52 691.191 L1469.08 691.191 L1469.64 691.191 L1470.2 691.191 L1470.76 691.191 L1471.32 691.191 L1471.88 691.191 L1472.44 691.191 L1473 691.191 L1473.56 691.191 L1474.12 691.191 L1474.68 691.191 L1475.24 691.191 L1475.79 691.191 L1476.35 691.191 L1476.91 691.191 L1477.47 691.191 L1478.03 691.191 L1478.59 691.191 L1479.15 691.191 L1479.71 691.191 L1480.27 691.191 L1480.83 691.191 L1481.39 691.191 L1481.95 691.191 L1482.51 691.191 L1483.07 691.191 L1483.62 691.191 L1484.18 691.191 L1484.74 691.191 L1485.3 691.191 L1485.86 691.191 L1486.42 691.191 L1486.98 691.191 L1487.54 691.191 L1488.1 691.191 L1488.66 691.191 L1489.22 691.191 L1489.78 691.191 L1490.34 691.191 L1490.89 691.191 L1491.45 691.191 L1492.01 691.191 L1492.57 691.191 L1493.13 691.191 L1493.69 691.191 L1494.25 691.191 L1494.81 691.191 L1495.37 691.191 L1495.93 691.191 L1496.49 691.191 L1497.05 691.191 L1497.61 691.191 L1498.16 691.191 L1498.72 691.191 L1499.28 691.191 L1499.84 691.191 L1500.4 691.191 L1500.96 691.191 L1501.52 691.191 L1502.08 691.191 L1502.64 691.191 L1503.2 691.191 L1503.76 691.191 L1504.32 691.191 L1504.88 691.191 L1505.44 691.191 L1505.99 691.191 L1506.55 691.191 L1507.11 691.191 L1507.67 691.191 L1508.23 691.191 L1508.79 691.191 L1509.35 691.191 L1509.91 691.191 L1510.47 691.191 L1511.03 691.191 L1511.59 691.191 L1512.15 691.191 L1512.71 691.191 L1513.26 691.191 L1513.82 691.191 L1514.38 691.191 L1514.94 691.191 L1515.5 691.191 L1516.06 691.191 L1516.62 691.191 L1517.18 691.191 L1517.74 691.191 L1518.3 691.191 L1518.86 691.191 L1519.42 691.191 L1519.98 691.191 L1520.53 691.191 L1521.09 691.191 L1521.65 691.191 L1522.21 691.191 L1522.77 691.191 L1523.33 691.191 L1523.89 691.191 L1524.45 691.191 L1525.01 691.191 L1525.57 691.191 L1526.13 691.191 L1526.69 691.191 L1527.25 691.191 L1527.81 691.191 L1528.36 691.191 L1528.92 691.191 L1529.48 691.191 L1530.04 691.191 L1530.6 691.191 L1531.16 691.191 L1531.72 691.191 L1532.28 691.191 L1532.84 691.191 L1533.4 691.191 L1533.96 691.191 L1534.52 691.191 L1535.08 691.191 L1535.63 691.191 L1536.19 691.191 L1536.75 691.191 L1537.31 691.191 L1537.87 691.191 L1538.43 691.191 L1538.99 691.191 L1539.55 691.191 L1540.11 691.191 L1540.67 691.191 L1541.23 691.191 L1541.79 691.191 L1542.35 691.191 L1542.9 691.191 L1543.46 691.191 L1544.02 691.191 L1544.58 691.191 L1545.14 691.191 L1545.7 691.191 L1546.26 691.191 L1546.82 691.191 L1547.38 691.191 L1547.94 691.191 L1548.5 691.191 L1549.06 691.191 L1549.62 691.191 L1550.18 691.191 L1550.73 691.191 L1551.29 691.191 L1551.85 691.191 L1552.41 691.191 L1552.97 691.191 L1553.53 691.191 L1554.09 691.191 L1554.65 691.191 L1555.21 691.191 L1555.77 691.191 L1556.33 691.191 L1556.89 691.191 L1557.45 691.191 L1558 691.191 L1558.56 691.191 L1559.12 691.191 L1559.68 691.191 L1560.24 691.191 L1560.8 691.191 L1561.36 691.191 L1561.92 691.191 L1562.48 691.191 L1563.04 691.191 L1563.6 691.191 L1564.16 691.191 L1564.72 691.191 L1565.28 691.191 L1565.83 691.191 L1566.39 691.191 L1566.95 691.191 L1567.51 691.191 L1568.07 691.191 L1568.63 691.191 L1569.19 691.191 L1569.75 691.191 L1570.31 691.191 L1570.87 691.191 L1571.43 691.191 L1571.99 691.191 L1572.55 691.191 L1573.1 691.191 L1573.66 691.191 L1574.22 691.191 L1574.78 691.191 L1575.34 691.191 L1575.9 691.191 L1576.46 691.191 L1577.02 691.191 L1577.58 691.191 L1578.14 691.191 L1578.7 691.191 L1579.26 691.191 L1579.82 691.191 L1580.37 691.191 L1580.93 691.191 L1581.49 691.191 L1582.05 691.191 L1582.61 691.191 L1583.17 691.191 L1583.73 691.191 L1584.29 691.191 L1584.85 691.191 L1585.41 691.191 L1585.97 691.191 L1586.53 691.191 L1587.09 691.191 L1587.65 691.191 L1588.2 691.191 L1588.76 691.191 L1589.32 691.191 L1589.88 691.191 L1590.44 691.191 L1591 691.191 L1591.56 691.191 L1592.12 691.191 L1592.68 691.191 L1593.24 691.191 L1593.8 691.191 L1594.36 691.191 L1594.92 691.191 L1595.47 691.191 L1596.03 691.191 L1596.59 691.191 L1597.15 691.191 L1597.71 691.191 L1598.27 691.191 L1598.83 691.191 L1599.39 691.191 L1599.95 691.191 L1600.51 691.191 L1601.07 691.191 L1601.63 691.191 L1602.19 691.191 L1602.74 691.191 L1603.3 691.191 L1603.86 691.191 L1604.42 691.191 L1604.98 691.191 L1605.54 691.191 L1606.1 691.191 L1606.66 691.191 L1607.22 691.191 L1607.78 691.191 L1608.34 691.191 L1608.9 691.191 L1609.46 691.191 L1610.02 691.191 L1610.57 691.191 L1611.13 691.191 L1611.69 691.191 L1612.25 691.191 L1612.81 691.191 L1613.37 691.191 L1613.93 691.191 L1614.49 691.191 L1615.05 691.191 L1615.61 691.191 L1616.17 691.191 L1616.73 691.191 L1617.29 691.191 L1617.84 691.191 L1618.4 691.191 L1618.96 691.191 L1619.52 691.191 L1620.08 691.191 L1620.64 691.191 L1621.2 691.191 L1621.76 691.191 L1622.32 691.191 L1622.88 691.191 L1623.44 691.191 L1624 691.191 L1624.56 691.191 L1625.11 691.191 L1625.67 691.191 L1626.23 691.191 L1626.79 691.191 L1627.35 691.191 L1627.91 691.191 L1628.47 691.191 L1629.03 691.191 L1629.59 691.191 L1630.15 691.191 L1630.71 691.191 L1631.27 691.191 L1631.83 691.191 L1632.39 691.191 L1632.94 691.191 L1633.5 691.191 L1634.06 691.191 L1634.62 691.191 L1635.18 691.191 L1635.74 691.191 L1636.3 691.191 L1636.86 691.191 L1637.42 691.191 L1637.98 691.191 L1638.54 691.191 L1639.1 691.191 L1639.66 691.191 L1640.21 691.191 L1640.77 691.191 L1641.33 691.191 L1641.89 691.191 L1642.45 691.191 L1643.01 691.191 L1643.57 691.191 L1644.13 691.191 L1644.69 691.191 L1645.25 691.191 L1645.81 691.191 L1646.37 691.191 L1646.93 691.191 L1647.48 691.191 L1648.04 691.191 L1648.6 691.191 L1649.16 691.191 L1649.72 691.191 L1650.28 691.191 L1650.84 691.191 L1651.4 691.191 L1651.96 691.191 L1652.52 691.191 L1653.08 691.191 L1653.64 691.191 L1654.2 691.191 L1654.76 691.191 L1655.31 691.191 L1655.87 691.191 L1656.43 691.191 L1656.99 691.191 L1657.55 691.191 L1658.11 691.191 L1658.67 691.191 L1659.23 691.191 L1659.79 691.191 L1660.35 691.191 L1660.91 691.191 L1661.47 691.191 L1662.03 691.191 L1662.58 691.191 L1663.14 691.191 L1663.7 691.191 L1664.26 691.191 L1664.82 691.191 L1665.38 691.191 L1665.94 691.191 L1666.5 691.191 L1667.06 691.191 L1667.62 691.191 L1668.18 691.191 L1668.74 691.191 L1669.3 691.191 L1669.85 691.191 L1670.41 691.191 L1670.97 691.191 L1671.53 691.191 L1672.09 691.191 L1672.65 691.191 L1673.21 691.191 L1673.77 691.191 L1674.33 691.191 L1674.89 691.191 L1675.45 691.191 L1676.01 691.191 L1676.57 691.191 L1677.13 691.191 L1677.68 691.191 L1678.24 691.191 L1678.8 691.191 L1679.36 691.191 L1679.92 691.191 L1680.48 691.191 L1681.04 691.191 L1681.6 691.191 L1682.16 691.191 L1682.72 691.191 L1683.28 691.191 L1683.84 691.191 L1684.4 691.191 L1684.95 691.191 L1685.51 691.191 L1686.07 691.191 L1686.63 691.191 L1687.19 691.191 L1687.75 691.191 L1688.31 691.191 L1688.87 691.191 L1689.43 691.191 L1689.99 691.191 L1690.55 691.191 L1691.11 691.191 L1691.67 691.191 L1692.23 691.191 L1692.78 691.191 L1693.34 691.191 L1693.9 691.191 L1694.46 691.191 L1695.02 691.191 L1695.58 691.191 L1696.14 691.191 L1696.7 691.191 L1697.26 691.191 L1697.82 691.191 L1698.38 691.191 L1698.94 691.191 L1699.5 691.191 L1700.05 691.191 L1700.61 691.191 L1701.17 691.191 L1701.73 691.191 L1702.29 691.191 L1702.85 691.191 L1703.41 691.191 L1703.97 691.191 L1704.53 691.191 L1705.09 691.191 L1705.65 691.191 L1706.21 691.191 L1706.77 691.191 L1707.32 691.191 L1707.88 691.191 L1708.44 691.191 L1709 691.191 L1709.56 691.191 L1710.12 691.191 L1710.68 691.191 L1711.24 691.191 L1711.8 691.191 L1712.36 691.191 L1712.92 691.191 L1713.48 691.191 L1714.04 691.191 L1714.6 691.191 L1715.15 691.191 L1715.71 691.191 L1716.27 691.191 L1716.83 691.191 L1717.39 691.191 L1717.95 691.191 L1718.51 691.191 L1719.07 691.191 L1719.63 691.191 L1720.19 691.191 L1720.75 691.191 L1721.31 691.191 L1721.87 691.191 L1722.42 691.191 L1722.98 691.191 L1723.54 691.191 L1724.1 691.191 L1724.66 691.191 L1725.22 691.191 L1725.78 691.191 L1726.34 691.191 L1726.9 691.191 L1727.46 691.191 L1728.02 691.191 L1728.58 691.191 L1729.14 691.191 L1729.69 691.191 L1730.25 691.191 L1730.81 691.191 L1731.37 691.191 L1731.93 691.191 L1732.49 691.191 L1733.05 691.191 L1733.61 691.191 L1734.17 691.191 L1734.73 691.191 L1735.29 691.191 L1735.85 691.191 L1736.41 691.191 L1736.97 691.191 L1737.52 691.191 L1738.08 691.191 L1738.64 691.191 L1739.2 691.191 L1739.76 691.191 L1740.32 691.191 L1740.88 691.191 L1741.44 691.191 L1742 691.191 L1742.56 691.191 L1743.12 691.191 L1743.68 691.191 L1744.24 691.191 L1744.79 691.191 L1745.35 691.191 L1745.91 691.191 L1746.47 691.191 L1747.03 691.191 L1747.59 691.191 L1748.15 691.191 L1748.71 691.191 L1749.27 691.191 L1749.83 691.191 L1750.39 691.191 L1750.95 691.191 L1751.51 691.191 L1752.06 691.191 L1752.62 691.191 L1753.18 691.191 L1753.74 691.191 L1754.3 691.191 L1754.86 691.191 L1755.42 691.191 L1755.98 691.191 L1756.54 691.191 L1757.1 691.191 L1757.66 691.191 L1758.22 691.191 L1758.78 691.191 L1759.34 691.191 L1759.89 691.191 L1760.45 691.191 L1761.01 691.191 L1761.57 691.191 L1762.13 691.191 L1762.69 691.191 L1763.25 691.191 L1763.81 691.191 L1764.37 691.191 L1764.93 691.191 L1765.49 691.191 L1766.05 691.191 L1766.61 691.191 L1767.16 691.191 L1767.72 691.191 L1768.28 691.191 L1768.84 691.191 L1769.4 691.191 L1769.96 691.191 L1770.52 691.191 L1771.08 691.191 L1771.64 691.191 L1772.2 691.191 L1772.76 691.191 L1773.32 691.191 L1773.88 691.191 L1774.43 691.191 L1774.99 691.191 L1775.55 691.191 L1776.11 691.191 L1776.67 691.191 L1777.23 691.191 L1777.79 691.191 L1778.35 691.191 L1778.91 691.191 L1779.47 691.191 L1780.03 691.191 L1780.59 691.191 L1781.15 691.191 L1781.71 691.191 L1782.26 691.191 L1782.82 691.191 L1783.38 691.191 L1783.94 691.191 L1784.5 691.191 L1785.06 691.191 L1785.62 691.191 L1786.18 691.191 L1786.74 691.191 L1787.3 691.191 L1787.86 691.191 L1788.42 691.191 L1788.98 691.191 L1789.53 691.191 L1790.09 691.191 L1790.65 691.191 L1791.21 691.191 L1791.77 691.191 L1792.33 691.191 L1792.89 691.191 L1793.45 691.191 L1794.01 691.191 L1794.57 691.191 L1795.13 691.191 L1795.69 691.191 L1796.25 691.191 L1796.8 691.191 L1797.36 691.191 L1797.92 691.191 L1798.48 691.191 L1799.04 691.191 L1799.6 691.191 L1800.16 691.191 L1800.72 691.191 L1801.28 691.191 L1801.84 691.191 L1802.4 691.191 L1802.96 691.191 L1803.52 691.191 L1804.08 691.191 L1804.63 691.191 L1805.19 691.191 L1805.75 691.191 L1806.31 691.191 L1806.87 691.191 L1807.43 691.191 L1807.99 691.191 L1808.55 691.191 L1809.11 691.191 L1809.67 691.191 L1810.23 691.191 L1810.79 691.191 L1811.35 691.191 L1811.9 691.191 L1812.46 691.191 L1813.02 691.191 L1813.58 691.191 L1814.14 691.191 L1814.7 691.191 L1815.26 691.191 L1815.82 691.191 L1816.38 691.191 L1816.94 691.191 L1817.5 691.191 L1818.06 691.191 L1818.62 691.191 L1819.18 691.191 L1819.73 691.191 L1820.29 691.191 L1820.85 691.191 L1821.41 691.191 L1821.97 691.191 L1822.53 691.191 L1823.09 691.191 L1823.65 691.191 L1824.21 691.191 L1824.77 691.191 L1825.33 691.191 L1825.89 691.191 L1826.45 691.191 L1827 691.191 L1827.56 691.191 L1828.12 691.191 L1828.68 691.191 L1829.24 691.191 L1829.8 691.191 L1830.36 691.191 L1830.92 691.191 L1831.48 691.191 L1832.04 691.191 L1832.6 691.191 L1833.16 691.191 L1833.72 691.191 L1834.27 691.191 L1834.83 691.191 L1835.39 691.191 L1835.95 691.191 L1836.51 691.191 L1837.07 691.191 L1837.63 691.191 L1838.19 691.191 L1838.19 681.975 L1837.63 681.975 L1837.07 681.975 L1836.51 681.975 L1835.95 681.975 L1835.39 681.975 L1834.83 681.975 L1834.27 681.975 L1833.72 681.975 L1833.16 681.975 L1832.6 681.975 L1832.04 681.975 L1831.48 681.975 L1830.92 681.975 L1830.36 681.975 L1829.8 681.975 L1829.24 681.975 L1828.68 681.975 L1828.12 681.975 L1827.56 681.975 L1827 681.975 L1826.45 681.975 L1825.89 681.975 L1825.33 681.975 L1824.77 681.975 L1824.21 681.975 L1823.65 681.975 L1823.09 681.975 L1822.53 681.975 L1821.97 681.975 L1821.41 681.975 L1820.85 681.975 L1820.29 681.975 L1819.73 681.975 L1819.18 681.975 L1818.62 681.975 L1818.06 681.975 L1817.5 681.975 L1816.94 681.975 L1816.38 681.975 L1815.82 681.975 L1815.26 681.975 L1814.7 681.975 L1814.14 681.975 L1813.58 681.975 L1813.02 681.975 L1812.46 681.975 L1811.9 681.975 L1811.35 681.975 L1810.79 681.975 L1810.23 681.975 L1809.67 681.975 L1809.11 681.975 L1808.55 681.975 L1807.99 681.975 L1807.43 681.975 L1806.87 681.975 L1806.31 681.975 L1805.75 681.975 L1805.19 681.975 L1804.63 681.975 L1804.08 681.975 L1803.52 681.975 L1802.96 681.975 L1802.4 681.975 L1801.84 681.975 L1801.28 681.975 L1800.72 681.975 L1800.16 681.975 L1799.6 681.975 L1799.04 681.975 L1798.48 681.975 L1797.92 681.975 L1797.36 681.975 L1796.8 681.975 L1796.25 681.975 L1795.69 681.975 L1795.13 681.975 L1794.57 681.975 L1794.01 681.975 L1793.45 681.975 L1792.89 681.975 L1792.33 681.975 L1791.77 681.975 L1791.21 681.975 L1790.65 681.975 L1790.09 681.975 L1789.53 681.975 L1788.98 681.975 L1788.42 681.975 L1787.86 681.975 L1787.3 681.975 L1786.74 681.975 L1786.18 681.975 L1785.62 681.975 L1785.06 681.975 L1784.5 681.975 L1783.94 681.975 L1783.38 681.975 L1782.82 681.975 L1782.26 681.975 L1781.71 681.975 L1781.15 681.975 L1780.59 681.975 L1780.03 681.975 L1779.47 681.975 L1778.91 681.975 L1778.35 681.975 L1777.79 681.975 L1777.23 681.975 L1776.67 681.975 L1776.11 681.975 L1775.55 681.975 L1774.99 681.975 L1774.43 681.975 L1773.88 681.975 L1773.32 681.975 L1772.76 681.975 L1772.2 681.975 L1771.64 681.975 L1771.08 681.975 L1770.52 681.975 L1769.96 681.975 L1769.4 681.975 L1768.84 681.975 L1768.28 681.975 L1767.72 681.975 L1767.16 681.975 L1766.61 681.975 L1766.05 681.975 L1765.49 681.975 L1764.93 681.975 L1764.37 681.975 L1763.81 681.975 L1763.25 681.975 L1762.69 681.975 L1762.13 681.975 L1761.57 681.975 L1761.01 681.975 L1760.45 681.975 L1759.89 681.975 L1759.34 681.975 L1758.78 681.975 L1758.22 681.975 L1757.66 681.975 L1757.1 681.975 L1756.54 681.975 L1755.98 681.975 L1755.42 681.975 L1754.86 681.975 L1754.3 681.975 L1753.74 681.975 L1753.18 681.975 L1752.62 681.975 L1752.06 681.975 L1751.51 681.975 L1750.95 681.975 L1750.39 681.975 L1749.83 681.975 L1749.27 681.975 L1748.71 681.975 L1748.15 681.975 L1747.59 681.975 L1747.03 681.975 L1746.47 681.975 L1745.91 681.975 L1745.35 681.975 L1744.79 681.975 L1744.24 681.975 L1743.68 681.975 L1743.12 681.975 L1742.56 681.975 L1742 681.975 L1741.44 681.975 L1740.88 681.975 L1740.32 681.975 L1739.76 681.975 L1739.2 681.975 L1738.64 681.975 L1738.08 681.975 L1737.52 681.975 L1736.97 681.975 L1736.41 681.975 L1735.85 681.975 L1735.29 681.975 L1734.73 681.975 L1734.17 681.975 L1733.61 681.975 L1733.05 681.975 L1732.49 681.975 L1731.93 681.975 L1731.37 681.975 L1730.81 681.975 L1730.25 681.975 L1729.69 681.975 L1729.14 681.975 L1728.58 681.975 L1728.02 681.975 L1727.46 681.975 L1726.9 681.975 L1726.34 681.975 L1725.78 681.975 L1725.22 681.975 L1724.66 681.975 L1724.1 681.975 L1723.54 681.975 L1722.98 681.975 L1722.42 681.975 L1721.87 681.975 L1721.31 681.975 L1720.75 681.975 L1720.19 681.975 L1719.63 681.975 L1719.07 681.975 L1718.51 681.975 L1717.95 681.975 L1717.39 681.975 L1716.83 681.975 L1716.27 681.975 L1715.71 681.975 L1715.15 681.975 L1714.6 681.975 L1714.04 681.975 L1713.48 681.975 L1712.92 681.975 L1712.36 681.975 L1711.8 681.975 L1711.24 681.975 L1710.68 681.975 L1710.12 681.975 L1709.56 681.975 L1709 681.975 L1708.44 681.975 L1707.88 681.975 L1707.32 681.975 L1706.77 681.975 L1706.21 681.975 L1705.65 681.975 L1705.09 681.975 L1704.53 681.975 L1703.97 681.975 L1703.41 681.975 L1702.85 681.975 L1702.29 681.975 L1701.73 681.975 L1701.17 681.975 L1700.61 681.975 L1700.05 681.975 L1699.5 681.975 L1698.94 681.975 L1698.38 681.975 L1697.82 681.975 L1697.26 681.975 L1696.7 681.975 L1696.14 681.975 L1695.58 681.975 L1695.02 681.975 L1694.46 681.975 L1693.9 681.975 L1693.34 681.975 L1692.78 681.975 L1692.23 681.975 L1691.67 681.975 L1691.11 681.975 L1690.55 681.975 L1689.99 681.975 L1689.43 681.975 L1688.87 681.975 L1688.31 681.975 L1687.75 681.975 L1687.19 681.975 L1686.63 681.975 L1686.07 681.975 L1685.51 681.975 L1684.95 681.975 L1684.4 681.975 L1683.84 681.975 L1683.28 681.975 L1682.72 681.975 L1682.16 681.975 L1681.6 681.975 L1681.04 681.975 L1680.48 681.975 L1679.92 681.975 L1679.36 681.975 L1678.8 681.975 L1678.24 681.975 L1677.68 681.975 L1677.13 681.975 L1676.57 681.975 L1676.01 681.975 L1675.45 681.975 L1674.89 681.975 L1674.33 681.975 L1673.77 681.975 L1673.21 681.975 L1672.65 681.975 L1672.09 681.975 L1671.53 681.975 L1670.97 681.975 L1670.41 681.975 L1669.85 681.975 L1669.3 681.975 L1668.74 681.975 L1668.18 681.975 L1667.62 681.975 L1667.06 681.975 L1666.5 681.975 L1665.94 681.975 L1665.38 681.975 L1664.82 681.975 L1664.26 681.975 L1663.7 681.975 L1663.14 681.975 L1662.58 681.975 L1662.03 681.975 L1661.47 681.975 L1660.91 681.975 L1660.35 681.975 L1659.79 681.975 L1659.23 681.975 L1658.67 681.975 L1658.11 681.975 L1657.55 681.975 L1656.99 681.975 L1656.43 681.975 L1655.87 681.975 L1655.31 681.975 L1654.76 681.975 L1654.2 681.975 L1653.64 681.975 L1653.08 681.975 L1652.52 681.975 L1651.96 681.975 L1651.4 681.975 L1650.84 681.975 L1650.28 681.975 L1649.72 681.975 L1649.16 681.975 L1648.6 681.975 L1648.04 681.975 L1647.48 681.975 L1646.93 681.975 L1646.37 681.975 L1645.81 681.975 L1645.25 681.975 L1644.69 681.975 L1644.13 681.975 L1643.57 681.975 L1643.01 681.975 L1642.45 681.975 L1641.89 681.975 L1641.33 681.975 L1640.77 681.975 L1640.21 681.975 L1639.66 681.975 L1639.1 681.975 L1638.54 681.975 L1637.98 681.975 L1637.42 681.975 L1636.86 681.975 L1636.3 681.975 L1635.74 681.975 L1635.18 681.975 L1634.62 681.975 L1634.06 681.975 L1633.5 681.975 L1632.94 681.975 L1632.39 681.975 L1631.83 681.975 L1631.27 681.975 L1630.71 681.975 L1630.15 681.975 L1629.59 681.975 L1629.03 681.975 L1628.47 681.975 L1627.91 681.975 L1627.35 681.975 L1626.79 681.975 L1626.23 681.975 L1625.67 681.975 L1625.11 681.975 L1624.56 681.975 L1624 681.975 L1623.44 681.975 L1622.88 681.975 L1622.32 681.975 L1621.76 681.975 L1621.2 681.975 L1620.64 681.975 L1620.08 681.975 L1619.52 681.975 L1618.96 681.975 L1618.4 681.975 L1617.84 681.975 L1617.29 681.975 L1616.73 681.975 L1616.17 681.975 L1615.61 681.975 L1615.05 681.975 L1614.49 681.975 L1613.93 681.975 L1613.37 681.975 L1612.81 681.975 L1612.25 681.975 L1611.69 681.975 L1611.13 681.975 L1610.57 681.975 L1610.02 681.975 L1609.46 681.975 L1608.9 681.975 L1608.34 681.975 L1607.78 681.975 L1607.22 681.975 L1606.66 681.975 L1606.1 681.975 L1605.54 681.975 L1604.98 681.975 L1604.42 681.975 L1603.86 681.975 L1603.3 681.975 L1602.74 681.975 L1602.19 681.975 L1601.63 681.975 L1601.07 681.975 L1600.51 681.975 L1599.95 681.975 L1599.39 681.975 L1598.83 681.975 L1598.27 681.975 L1597.71 681.975 L1597.15 681.975 L1596.59 681.975 L1596.03 681.975 L1595.47 681.975 L1594.92 681.975 L1594.36 681.975 L1593.8 681.975 L1593.24 681.975 L1592.68 681.975 L1592.12 681.975 L1591.56 681.975 L1591 681.975 L1590.44 681.975 L1589.88 681.975 L1589.32 681.975 L1588.76 681.975 L1588.2 681.975 L1587.65 681.975 L1587.09 681.975 L1586.53 681.975 L1585.97 681.975 L1585.41 681.975 L1584.85 681.975 L1584.29 681.975 L1583.73 681.975 L1583.17 681.975 L1582.61 681.975 L1582.05 681.975 L1581.49 681.975 L1580.93 681.975 L1580.37 681.975 L1579.82 681.975 L1579.26 681.975 L1578.7 681.975 L1578.14 681.975 L1577.58 681.975 L1577.02 681.975 L1576.46 681.975 L1575.9 681.975 L1575.34 681.975 L1574.78 681.975 L1574.22 681.975 L1573.66 681.975 L1573.1 681.975 L1572.55 681.975 L1571.99 681.975 L1571.43 681.975 L1570.87 681.975 L1570.31 681.975 L1569.75 681.975 L1569.19 681.975 L1568.63 681.975 L1568.07 681.975 L1567.51 681.975 L1566.95 681.975 L1566.39 681.975 L1565.83 681.975 L1565.28 681.975 L1564.72 681.975 L1564.16 681.975 L1563.6 681.975 L1563.04 681.975 L1562.48 681.975 L1561.92 681.975 L1561.36 681.975 L1560.8 681.975 L1560.24 681.975 L1559.68 681.975 L1559.12 681.975 L1558.56 681.975 L1558 681.975 L1557.45 681.975 L1556.89 681.975 L1556.33 681.975 L1555.77 681.975 L1555.21 681.975 L1554.65 681.975 L1554.09 681.975 L1553.53 681.975 L1552.97 681.975 L1552.41 681.975 L1551.85 681.975 L1551.29 681.975 L1550.73 681.975 L1550.18 681.975 L1549.62 681.975 L1549.06 681.975 L1548.5 681.975 L1547.94 681.975 L1547.38 681.975 L1546.82 681.975 L1546.26 681.975 L1545.7 681.975 L1545.14 681.975 L1544.58 681.975 L1544.02 681.975 L1543.46 681.975 L1542.9 681.975 L1542.35 681.975 L1541.79 681.975 L1541.23 681.975 L1540.67 681.975 L1540.11 681.975 L1539.55 681.975 L1538.99 681.975 L1538.43 681.975 L1537.87 681.975 L1537.31 681.975 L1536.75 681.975 L1536.19 681.975 L1535.63 681.975 L1535.08 681.975 L1534.52 681.975 L1533.96 681.975 L1533.4 681.975 L1532.84 681.975 L1532.28 681.975 L1531.72 681.975 L1531.16 681.975 L1530.6 681.975 L1530.04 681.975 L1529.48 681.975 L1528.92 681.975 L1528.36 681.975 L1527.81 681.975 L1527.25 681.975 L1526.69 681.975 L1526.13 681.975 L1525.57 681.975 L1525.01 681.975 L1524.45 681.975 L1523.89 681.975 L1523.33 681.975 L1522.77 681.975 L1522.21 681.975 L1521.65 681.975 L1521.09 681.975 L1520.53 681.975 L1519.98 681.975 L1519.42 681.975 L1518.86 681.975 L1518.3 681.975 L1517.74 681.975 L1517.18 681.975 L1516.62 681.975 L1516.06 681.975 L1515.5 681.975 L1514.94 681.975 L1514.38 681.975 L1513.82 681.975 L1513.26 681.975 L1512.71 681.975 L1512.15 681.975 L1511.59 681.975 L1511.03 681.975 L1510.47 681.975 L1509.91 681.975 L1509.35 681.975 L1508.79 681.975 L1508.23 681.975 L1507.67 681.975 L1507.11 681.975 L1506.55 681.975 L1505.99 681.975 L1505.44 681.975 L1504.88 681.975 L1504.32 681.975 L1503.76 681.975 L1503.2 681.975 L1502.64 681.975 L1502.08 681.975 L1501.52 681.975 L1500.96 681.975 L1500.4 681.975 L1499.84 681.975 L1499.28 681.975 L1498.72 681.975 L1498.16 681.975 L1497.61 681.975 L1497.05 681.975 L1496.49 681.975 L1495.93 681.975 L1495.37 681.975 L1494.81 681.975 L1494.25 681.975 L1493.69 681.975 L1493.13 681.975 L1492.57 681.975 L1492.01 681.975 L1491.45 681.975 L1490.89 681.975 L1490.34 681.975 L1489.78 681.975 L1489.22 681.975 L1488.66 681.975 L1488.1 681.975 L1487.54 681.975 L1486.98 681.975 L1486.42 681.975 L1485.86 681.975 L1485.3 681.975 L1484.74 681.975 L1484.18 681.975 L1483.62 681.975 L1483.07 681.975 L1482.51 681.975 L1481.95 681.975 L1481.39 681.975 L1480.83 681.975 L1480.27 681.975 L1479.71 681.975 L1479.15 681.975 L1478.59 681.975 L1478.03 681.975 L1477.47 681.975 L1476.91 681.975 L1476.35 681.975 L1475.79 681.975 L1475.24 681.975 L1474.68 681.975 L1474.12 681.975 L1473.56 681.975 L1473 681.975 L1472.44 681.975 L1471.88 681.975 L1471.32 681.975 L1470.76 681.975 L1470.2 681.975 L1469.64 681.975 L1469.08 681.975 L1468.52 681.975 L1467.97 681.975 L1467.41 681.975 L1466.85 681.975 L1466.29 681.975 L1465.73 681.975 L1465.17 681.975 L1464.61 681.975 L1464.05 681.975 L1463.49 681.975 L1462.93 681.975 L1462.37 681.975 L1461.81 681.975 L1461.25 681.975 L1460.7 681.975 L1460.14 681.975 L1459.58 681.975 L1459.02 681.975 L1458.46 681.975 L1457.9 681.975 L1457.34 681.975 L1456.78 681.975 L1456.22 681.975 L1455.66 681.975 L1455.1 681.975 L1454.54 681.975 L1453.98 681.975 L1453.42 681.975 L1452.87 681.975 L1452.31 681.975 L1451.75 681.975 L1451.19 681.975 L1450.63 681.975 L1450.07 681.975 L1449.51 681.975 L1448.95 681.975 L1448.39 681.975 L1447.83 681.975 L1447.27 681.975 L1446.71 681.975 L1446.15 681.975 L1445.6 681.975 L1445.04 681.975 L1444.48 681.975 L1443.92 681.975 L1443.36 681.975 L1442.8 681.975 L1442.24 681.975 L1441.68 681.975 L1441.12 681.975 L1440.56 681.975 L1440 681.975 L1439.44 681.975 L1438.88 681.975 L1438.33 681.975 L1437.77 681.975 L1437.21 681.975 L1436.65 681.975 L1436.09 681.975 L1435.53 681.975 L1434.97 681.975 L1434.41 681.975 L1433.85 681.975 L1433.29 681.975 L1432.73 681.975 L1432.17 681.975 L1431.61 681.975 L1431.05 681.975 L1430.5 681.975 L1429.94 681.975 L1429.38 681.975 L1428.82 681.975 L1428.26 681.975 L1427.7 681.975 L1427.14 681.975 L1426.58 681.975 L1426.02 681.975 L1425.46 681.975 L1424.9 681.975 L1424.34 681.975 L1423.78 681.975 L1423.23 681.975 L1422.67 681.975 L1422.11 681.975 L1421.55 681.975 L1420.99 681.975 L1420.43 681.975 L1419.87 681.975 L1419.31 681.975 L1418.75 681.975 L1418.19 681.975 L1417.63 681.975 L1417.07 681.975 L1416.51 681.975 L1415.95 681.975 L1415.4 681.975 L1414.84 681.975 L1414.28 681.975 L1413.72 681.975 L1413.16 681.975 L1412.6 681.975 L1412.04 681.975 L1411.48 681.975 L1410.92 681.975 L1410.36 681.975 L1409.8 681.975 L1409.24 681.975 L1408.68 681.975 L1408.13 681.975 L1407.57 681.975 L1407.01 681.975 L1406.45 681.975 L1405.89 681.975 L1405.33 681.975 L1404.77 681.975 L1404.21 681.975 L1403.65 681.975 L1403.09 681.975 L1402.53 681.975 L1401.97 681.975 L1401.41 681.975 L1400.86 681.975 L1400.3 681.975 L1399.74 681.975 L1399.18 681.975 L1398.62 681.975 L1398.06 681.975 L1397.5 681.975 L1396.94 681.975 L1396.38 681.975 L1395.82 681.975 L1395.26 681.975 L1394.7 681.975 L1394.14 681.975 L1393.58 681.975 L1393.03 681.975 L1392.47 681.975 L1391.91 681.975 L1391.35 681.975 L1390.79 681.975 L1390.23 681.975 L1389.67 681.975 L1389.11 681.975 L1388.55 681.975 L1387.99 681.975 L1387.43 681.975 L1386.87 681.975 L1386.31 681.975 L1385.76 681.975 L1385.2 681.975 L1384.64 681.975 L1384.08 681.975 L1383.52 681.975 L1382.96 681.975 L1382.4 681.975 L1381.84 681.975 L1381.28 681.975 L1380.72 681.975 L1380.16 681.975 L1379.6 681.975 L1379.04 681.975 L1378.49 681.975 L1377.93 681.975 L1377.37 681.975 L1376.81 681.975 L1376.25 681.975 L1375.69 681.975 L1375.13 681.975 L1374.57 681.975 L1374.01 681.975 L1373.45 681.975 L1372.89 681.975 L1372.33 681.975 L1371.77 681.975 L1371.21 681.975 L1370.66 681.975 L1370.1 681.975 L1369.54 681.975 L1368.98 681.975 L1368.42 681.975 L1367.86 681.975 L1367.3 681.975 L1366.74 681.975 L1366.18 681.975 L1365.62 681.975 L1365.06 681.975 L1364.5 681.975 L1363.94 681.975 L1363.39 681.975 L1362.83 681.975 L1362.27 681.975 L1361.71 681.975 L1361.15 681.975 L1360.59 681.975 L1360.03 681.975 L1359.47 681.975 L1358.91 681.975 L1358.35 681.975 L1357.79 681.975 L1357.23 681.975 L1356.67 681.975 L1356.12 681.975 L1355.56 681.975 L1355 681.975 L1354.44 681.975 L1353.88 681.975 L1353.32 681.975 L1352.76 681.975 L1352.2 681.975 L1351.64 681.975 L1351.08 681.975 L1350.52 681.975 L1349.96 681.975 L1349.4 681.975 L1348.84 681.975 L1348.29 681.975 L1347.73 681.975 L1347.17 681.975 L1346.61 681.975 L1346.05 681.975 L1345.49 681.975 L1344.93 681.975 L1344.37 681.975 L1343.81 681.975 L1343.25 681.975 L1342.69 681.975 L1342.13 681.975 L1341.57 681.975 L1341.02 681.975 L1340.46 681.975 L1339.9 681.975 L1339.34 681.975 L1338.78 681.975 L1338.22 681.975 L1337.66 681.975 L1337.1 681.975 L1336.54 681.975 L1335.98 681.975 L1335.42 681.975 L1334.86 681.975 L1334.3 681.975 L1333.75 681.975 L1333.19 681.975 L1332.63 681.975 L1332.07 681.975 L1331.51 681.975 L1330.95 681.975 L1330.39 681.975 L1329.83 681.975 L1329.27 681.975 L1328.71 681.975 L1328.15 681.975 L1327.59 681.975 L1327.03 681.975 L1326.47 681.975 L1325.92 681.975 L1325.36 681.975 L1324.8 681.975 L1324.24 681.975 L1323.68 681.975 L1323.12 681.975 L1322.56 681.975 L1322 681.975 L1321.44 681.975 L1320.88 681.975 L1320.32 681.975 L1319.76 681.975 L1319.2 681.975 L1318.65 681.975 L1318.09 681.975 L1317.53 681.975 L1316.97 681.975 L1316.41 681.975 L1315.85 681.975 L1315.29 681.975 L1314.73 681.975 L1314.17 681.975 L1313.61 681.975 L1313.05 681.975 L1312.49 681.975 L1311.93 681.975 L1311.38 681.975 L1310.82 681.975 L1310.26 681.975 L1309.7 681.975 L1309.14 681.975 L1308.58 681.975 L1308.02 681.975 L1307.46 681.975 L1306.9 681.975 L1306.34 681.975 L1305.78 681.975 L1305.22 681.975 L1304.66 681.975 L1304.1 681.975 L1303.55 681.975 L1302.99 681.975 L1302.43 681.975 L1301.87 681.975 L1301.31 681.975 L1300.75 681.975 L1300.19 681.975 L1299.63 681.975 L1299.07 681.975 L1298.51 681.975 L1297.95 681.975 L1297.39 681.975 L1296.83 681.975 L1296.28 681.975 L1295.72 681.975 L1295.16 681.975 L1294.6 681.975 L1294.04 681.975 L1293.48 681.975 L1292.92 681.975 L1292.36 681.975 L1291.8 681.975 L1291.24 681.975 L1290.68 681.975 L1290.12 681.975 L1289.56 681.975 L1289 681.975 L1288.45 681.975 L1287.89 681.975 L1287.33 681.975 L1286.77 681.975 L1286.21 681.975 L1285.65 681.975 L1285.09 681.975 L1284.53 681.975 L1283.97 681.975 L1283.41 681.975 L1282.85 681.975 L1282.29 681.975 L1281.73 681.975 L1281.18 681.975 L1280.62 681.975 L1280.06 681.975 L1279.5 681.975 L1278.94 681.975 L1278.38 681.975 L1277.82 681.975 L1277.26 681.975 L1276.7 681.975 L1276.14 681.975 L1275.58 681.975 L1275.02 681.975 L1274.46 681.975 L1273.91 681.975 L1273.35 681.975 L1272.79 681.975 L1272.23 681.975 L1271.67 681.975 L1271.11 681.975 L1270.55 681.975 L1269.99 681.975 L1269.43 681.975 L1268.87 681.975 L1268.31 681.975 L1267.75 681.975 L1267.19 681.975 L1266.63 681.975 L1266.08 681.975 L1265.52 681.975 L1264.96 681.975 L1264.4 681.975 L1263.84 681.975 L1263.28 681.975 L1262.72 681.975 L1262.16 681.975 L1261.6 681.975 L1261.04 681.975 L1260.48 681.975 L1259.92 681.975 L1259.36 681.975 L1258.81 681.975 L1258.25 681.975 L1257.69 681.975 L1257.13 681.975 L1256.57 681.975 L1256.01 681.975 L1255.45 681.975 L1254.89 681.975 L1254.33 681.975 L1253.77 681.975 L1253.21 681.975 L1252.65 681.975 L1252.09 681.975 L1251.54 681.975 L1250.98 681.975 L1250.42 681.975 L1249.86 681.975 L1249.3 681.975 L1248.74 681.975 L1248.18 681.975 L1247.62 681.975 L1247.06 681.975 L1246.5 681.975 L1245.94 681.975 L1245.38 681.975 L1244.82 681.975 L1244.26 681.975 L1243.71 681.975 L1243.15 681.975 L1242.59 681.975 L1242.03 681.975 L1241.47 681.975 L1240.91 681.975 L1240.35 681.975 L1239.79 681.975 L1239.23 681.975 L1238.67 681.975 L1238.11 681.975 L1237.55 681.975 L1236.99 681.975 L1236.44 681.975 L1235.88 681.975 L1235.32 681.975 L1234.76 681.975 L1234.2 681.975 L1233.64 681.975 L1233.08 681.975 L1232.52 681.975 L1231.96 681.975 L1231.4 681.975 L1230.84 681.975 L1230.28 681.975 L1229.72 681.975 L1229.17 681.975 L1228.61 681.975 L1228.05 681.975 L1227.49 681.975 L1226.93 681.975 L1226.37 681.975 L1225.81 681.975 L1225.25 681.975 L1224.69 681.975 L1224.13 681.975 L1223.57 681.975 L1223.01 681.975 L1222.45 681.975 L1221.89 681.975 L1221.34 681.975 L1220.78 681.975 L1220.22 681.975 L1219.66 681.975 L1219.1 681.975 L1218.54 681.975 L1217.98 681.975 L1217.42 681.975 L1216.86 681.975 L1216.3 681.975 L1215.74 681.975 L1215.18 681.975 L1214.62 681.975 L1214.07 681.975 L1213.51 681.975 L1212.95 681.975 L1212.39 681.975 L1211.83 681.975 L1211.27 681.975 L1210.71 681.975 L1210.15 681.975 L1209.59 681.975 L1209.03 681.975 L1208.47 681.975 L1207.91 681.975 L1207.35 681.975 L1206.8 681.975 L1206.24 681.975 L1205.68 681.975 L1205.12 681.975 L1204.56 681.975 L1204 681.975 L1203.44 681.975 L1202.88 681.975 L1202.32 681.975 L1201.76 681.975 L1201.2 681.975 L1200.64 681.975 L1200.08 681.975 L1199.52 681.975 L1198.97 681.975 L1198.41 681.975 L1197.85 681.975 L1197.29 681.975 L1196.73 681.975 L1196.17 681.975 L1195.61 681.975 L1195.05 681.975 L1194.49 681.975 L1193.93 681.975 L1193.37 681.975 L1192.81 681.975 L1192.25 681.975 L1191.7 681.975 L1191.14 681.975 L1190.58 681.975 L1190.02 681.975 L1189.46 681.975 L1188.9 681.975 L1188.34 681.975 L1187.78 681.975 L1187.22 681.975 L1186.66 681.975 L1186.1 681.975 L1185.54 681.975 L1184.98 681.975 L1184.43 681.975 L1183.87 681.975 L1183.31 681.975 L1182.75 681.975 L1182.19 681.975 L1181.63 681.975 L1181.07 681.975 L1180.51 681.975 L1179.95 681.975 L1179.39 681.975 L1178.83 681.975 L1178.27 681.975 L1177.71 681.975 L1177.15 681.975 L1176.6 681.975 L1176.04 681.975 L1175.48 681.975 L1174.92 681.975 L1174.36 681.975 L1173.8 681.975 L1173.24 681.975 L1172.68 681.975 L1172.12 681.975 L1171.56 681.975 L1171 681.975 L1170.44 681.975 L1169.88 681.975 L1169.33 681.975 L1168.77 681.975 L1168.21 681.975 L1167.65 681.975 L1167.09 681.975 L1166.53 681.975 L1165.97 681.975 L1165.41 681.975 L1164.85 681.975 L1164.29 681.975 L1163.73 681.975 L1163.17 681.975 L1162.61 681.975 L1162.05 681.975 L1161.5 681.975 L1160.94 681.975 L1160.38 681.975 L1159.82 681.975 L1159.26 681.975 L1158.7 681.975 L1158.14 681.975 L1157.58 681.975 L1157.02 681.975 L1156.46 681.975 L1155.9 681.975 L1155.34 681.975 L1154.78 681.975 L1154.23 681.975 L1153.67 681.975 L1153.11 681.975 L1152.55 681.975 L1151.99 681.975 L1151.43 681.975 L1150.87 681.975 L1150.31 681.975 L1149.75 681.975 L1149.19 681.975 L1148.63 681.975 L1148.07 681.975 L1147.51 681.975 L1146.96 681.975 L1146.4 681.975 L1145.84 681.975 L1145.28 681.975 L1144.72 681.975 L1144.16 681.975 L1143.6 681.975 L1143.04 681.975 L1142.48 681.975 L1141.92 681.975 L1141.36 681.975 L1140.8 681.975 L1140.24 681.975 L1139.68 681.975 L1139.13 681.975 L1138.57 681.975 L1138.01 681.975 L1137.45 681.975 L1136.89 681.975 L1136.33 681.975 L1135.77 681.975 L1135.21 681.975 L1134.65 681.975 L1134.09 681.975 L1133.53 681.975 L1132.97 681.975 L1132.41 681.975 L1131.86 681.975 L1131.3 681.975 L1130.74 681.975 L1130.18 681.975 L1129.62 681.975 L1129.06 681.975 L1128.5 681.975 L1127.94 681.975 L1127.38 681.975 L1126.82 681.975 L1126.26 681.975 L1125.7 681.975 L1125.14 681.975 L1124.59 681.975 L1124.03 681.975 L1123.47 681.975 L1122.91 681.975 L1122.35 681.975 L1121.79 681.975 L1121.23 681.975 L1120.67 681.975 L1120.11 681.975 L1119.55 681.975 L1118.99 681.975 L1118.43 681.975 L1117.87 681.975 L1117.31 681.975 L1116.76 681.975 L1116.2 681.975 L1115.64 681.975 L1115.08 681.975 L1114.52 681.975 L1113.96 681.975 L1113.4 681.975 L1112.84 681.975 L1112.28 681.975 L1111.72 681.975 L1111.16 681.975 L1110.6 681.975 L1110.04 681.975 L1109.49 681.975 L1108.93 681.975 L1108.37 681.975 L1107.81 681.975 L1107.25 681.975 L1106.69 681.975 L1106.13 681.975 L1105.57 681.975 L1105.01 681.975 L1104.45 681.975 L1103.89 681.975 L1103.33 681.975 L1102.77 681.975 L1102.22 681.975 L1101.66 681.975 L1101.1 681.975 L1100.54 681.975 L1099.98 681.975 L1099.42 681.975 L1098.86 681.975 L1098.3 681.975 L1097.74 681.975 L1097.18 681.975 L1096.62 681.975 L1096.06 681.975 L1095.5 681.975 L1094.94 681.975 L1094.39 681.975 L1093.83 681.975 L1093.27 681.975 L1092.71 681.975 L1092.15 681.975 L1091.59 681.975 L1091.03 681.975 L1090.47 681.975 L1089.91 681.975 L1089.35 681.975 L1088.79 681.975 L1088.23 681.975 L1087.67 681.975 L1087.12 681.975 L1086.56 681.975 L1086 681.975 L1085.44 681.975 L1084.88 681.975 L1084.32 681.975 L1083.76 681.975 L1083.2 681.975 L1082.64 681.975 L1082.08 681.975 L1081.52 681.975 L1080.96 681.975 L1080.4 681.975 L1079.85 681.975 L1079.29 681.975 L1078.73 681.975 L1078.17 681.975 L1077.61 681.975 L1077.05 681.975 L1076.49 681.975 L1075.93 681.975 L1075.37 681.975 L1074.81 681.975 L1074.25 681.975 L1073.69 681.975 L1073.13 681.975 L1072.57 681.975 L1072.02 681.975 L1071.46 681.975 L1070.9 681.975 L1070.34 681.975 L1069.78 681.975 L1069.22 681.975 L1068.66 681.975 L1068.1 681.975 L1067.54 681.975 L1066.98 681.975 L1066.42 681.975 L1065.86 681.975 L1065.3 681.975 L1064.75 681.975 L1064.19 681.975 L1063.63 681.975 L1063.07 681.975 L1062.51 681.975 L1061.95 681.975 L1061.39 681.975 L1060.83 681.975 L1060.27 681.975 L1059.71 681.975 L1059.15 681.975 L1058.59 681.975 L1058.03 681.975 L1057.48 681.975 L1056.92 681.975 L1056.36 681.975 L1055.8 681.975 L1055.24 681.975 L1054.68 681.975 L1054.12 681.975 L1053.56 681.975 L1053 681.975 L1052.44 681.975 L1051.88 681.975 L1051.32 681.975 L1050.76 681.975 L1050.2 681.975 L1049.65 681.975 L1049.09 681.975 L1048.53 681.975 L1047.97 681.975 L1047.41 681.975 L1046.85 681.975 L1046.29 681.975 L1045.73 681.975 L1045.17 681.975 L1044.61 681.975 L1044.05 681.975 L1043.49 681.975 L1042.93 681.975 L1042.38 681.975 L1041.82 681.975 L1041.26 681.975 L1040.7 681.975 L1040.14 681.975 L1039.58 681.975 L1039.02 681.975 L1038.46 681.975 L1037.9 681.975 L1037.34 681.975 L1036.78 681.975 L1036.22 681.975 L1035.66 681.975 L1035.1 681.975 L1034.55 681.975 L1033.99 681.975 L1033.43 681.975 L1032.87 681.975 L1032.31 681.975 L1031.75 681.975 L1031.19 681.975 L1030.63 681.975 L1030.07 681.975 L1029.51 681.975 L1028.95 681.975 L1028.39 681.975 L1027.83 681.975 L1027.28 681.975 L1026.72 681.975 L1026.16 681.975 L1025.6 681.975 L1025.04 681.975 L1024.48 681.975 L1023.92 681.975 L1023.36 681.975 L1022.8 681.975 L1022.24 681.975 L1021.68 681.975 L1021.12 681.975 L1020.56 681.975 L1020.01 681.975 L1019.45 681.975 L1018.89 681.975 L1018.33 681.975 L1017.77 681.975 L1017.21 681.975 L1016.65 681.975 L1016.09 681.975 L1015.53 681.975 L1014.97 681.975 L1014.41 681.975 L1013.85 681.975 L1013.29 681.975 L1012.73 681.975 L1012.18 681.975 L1011.62 681.975 L1011.06 681.975 L1010.5 681.975 L1009.94 681.975 L1009.38 681.975 L1008.82 681.975 L1008.26 681.975 L1007.7 681.975 L1007.14 681.975 L1006.58 681.975 L1006.02 681.975 L1005.46 681.975 L1004.91 681.975 L1004.35 681.975 L1003.79 681.975 L1003.23 681.975 L1002.67 681.975 L1002.11 681.975 L1001.55 681.975 L1000.99 681.975 L1000.43 681.975 L999.872 681.975 L999.313 681.975 L998.754 681.975 L998.194 681.975 L997.635 681.975 L997.076 681.975 L996.517 681.975 L995.957 681.975 L995.398 681.975 L994.839 681.975 L994.28 681.975 L993.72 681.975 L993.161 681.975 L992.602 681.975 L992.043 681.975 L991.483 681.975 L990.924 681.975 L990.365 681.975 L989.806 681.975 L989.246 681.975 L988.687 681.975 L988.128 681.975 L987.569 681.975 L987.009 681.975 L986.45 681.975 L985.891 681.975 L985.332 681.975 L984.772 681.975 L984.213 681.975 L983.654 681.975 L983.095 681.975 L982.535 681.975 L981.976 681.975 L981.417 681.975 L980.858 681.975 L980.298 681.975 L979.739 681.975 L979.18 681.975 L978.621 681.975 L978.061 681.975 L977.502 681.975 L976.943 681.975 L976.384 681.975 L975.824 681.975 L975.265 681.975 L974.706 681.975 L974.147 681.975 L973.587 681.975 L973.028 681.975 L972.469 681.975 L971.91 681.975 L971.35 681.975 L970.791 681.975 L970.232 681.975 L969.673 681.975 L969.113 681.975 L968.554 681.975 L967.995 681.975 L967.436 681.975 L966.876 681.975 L966.317 681.975 L965.758 681.975 L965.199 681.975 L964.639 681.975 L964.08 681.975 L963.521 681.975 L962.962 681.975 L962.402 681.975 L961.843 681.975 L961.284 681.975 L960.725 681.975 L960.165 681.975 L959.606 681.975 L959.047 681.975 L958.488 681.975 L957.928 681.975 L957.369 681.975 L956.81 681.975 L956.251 681.975 L955.691 681.975 L955.132 681.975 L954.573 681.975 L954.014 681.975 L953.454 681.975 L952.895 681.975 L952.336 681.975 L951.777 681.975 L951.217 681.975 L950.658 681.975 L950.099 681.975 L949.54 681.975 L948.98 681.975 L948.421 681.975 L947.862 681.975 L947.303 681.975 L946.743 681.975 L946.184 681.975 L945.625 681.975 L945.066 681.975 L944.506 681.975 L943.947 681.975 L943.388 681.975 L942.829 681.975 L942.269 681.975 L941.71 681.975 L941.151 681.975 L940.592 681.975 L940.032 681.975 L939.473 681.975 L938.914 681.975 L938.355 681.975 L937.795 681.975 L937.236 681.975 L936.677 681.975 L936.118 681.975 L935.558 681.975 L934.999 681.975 L934.44 681.975 L933.881 681.975 L933.321 681.975 L932.762 681.975 L932.203 681.975 L931.644 681.975 L931.084 681.975 L930.525 681.975 L929.966 681.975 L929.406 681.975 L928.847 681.975 L928.288 681.975 L927.729 681.975 L927.169 681.975 L926.61 681.975 L926.051 681.975 L925.492 681.975 L924.932 681.975 L924.373 681.975 L923.814 681.975 L923.255 681.975 L922.695 681.975 L922.136 681.975 L921.577 681.975 L921.018 681.975 L920.458 681.975 L919.899 681.975 L919.34 681.975 L918.781 681.975 L918.221 681.975 L917.662 681.975 L917.103 681.975 L916.544 681.975 L915.984 681.975 L915.425 681.975 L914.866 681.975 L914.307 681.975 L913.747 681.975 L913.188 681.975 L912.629 681.975 L912.07 681.975 L911.51 681.975 L910.951 681.975 L910.392 681.975 L909.833 681.975 L909.273 681.975 L908.714 681.975 L908.155 681.975 L907.596 681.975 L907.036 681.975 L906.477 681.975 L905.918 681.975 L905.359 681.975 L904.799 681.975 L904.24 681.975 L903.681 681.975 L903.122 681.975 L902.562 681.975 L902.003 681.975 L901.444 681.975 L900.885 681.975 L900.325 681.975 L899.766 681.975 L899.207 681.975 L898.648 681.975 L898.088 681.975 L897.529 681.975 L896.97 681.975 L896.411 681.975 L895.851 681.975 L895.292 681.975 L894.733 681.975 L894.174 681.975 L893.614 681.975 L893.055 681.975 L892.496 681.975 L891.937 681.975 L891.377 681.975 L890.818 681.975 L890.259 681.975 L889.7 681.975 L889.14 681.975 L888.581 681.975 L888.022 681.975 L887.463 681.975 L886.903 681.975 L886.344 681.975 L885.785 681.975 L885.226 681.975 L884.666 681.975 L884.107 681.975 L883.548 681.975 L882.989 681.975 L882.429 681.975 L881.87 681.975 L881.311 681.975 L880.752 681.975 L880.192 681.975 L879.633 681.975 L879.074 681.975 L878.515 681.975 L877.955 681.975 L877.396 681.975 L876.837 681.975 L876.278 681.975 L875.718 681.975 L875.159 681.975 L874.6 681.975 L874.041 681.975 L873.481 681.975 L872.922 681.975 L872.363 681.975 L871.804 681.975 L871.244 681.975 L870.685 681.975 L870.126 681.975 L869.567 681.975 L869.007 681.975 L868.448 681.975 L867.889 681.975 L867.33 681.975 L866.77 681.975 L866.211 681.975 L865.652 681.975 L865.093 681.975 L864.533 681.975 L863.974 681.975 L863.415 681.975 L862.856 681.975 L862.296 681.975 L861.737 681.975 L861.178 681.975 L860.619 681.975 L860.059 681.975 L859.5 681.975 L858.941 681.975 L858.382 681.975 L857.822 681.975 L857.263 681.975 L856.704 681.975 L856.145 681.975 L855.585 681.975 L855.026 681.975 L854.467 681.975 L853.908 681.975 L853.348 681.975 L852.789 681.975 L852.23 681.975 L851.671 681.975 L851.111 681.975 L850.552 681.975 L849.993 681.975 L849.434 681.975 L848.874 681.975 L848.315 681.975 L847.756 681.975 L847.197 681.975 L846.637 681.975 L846.078 681.975 L845.519 681.975 L844.96 681.975 L844.4 681.975 L843.841 681.975 L843.282 681.975 L842.723 681.975 L842.163 681.975 L841.604 681.975 L841.045 681.975 L840.486 681.975 L839.926 681.975 L839.367 681.975 L838.808 681.975 L838.249 681.975 L837.689 681.975 L837.13 681.975 L836.571 681.975 L836.012 681.975 L835.452 681.975 L834.893 681.975 L834.334 681.975 L833.775 681.975 L833.215 681.975 L832.656 681.975 L832.097 681.975 L831.538 681.975 L830.978 681.975 L830.419 681.975 L829.86 681.975 L829.301 681.975 L828.741 681.975 L828.182 681.975 L827.623 681.975 L827.064 681.975 L826.504 681.975 L825.945 681.975 L825.386 681.975 L824.827 681.975 L824.267 681.975 L823.708 681.975 L823.149 681.975 L822.59 681.975 L822.03 681.975 L821.471 681.975 L820.912 681.975 L820.353 681.975 L819.793 681.975 L819.234 681.975 L818.675 681.975 L818.116 681.975 L817.556 681.975 L816.997 681.975 L816.438 681.975 L815.879 681.975 L815.319 681.975 L814.76 681.975 L814.201 681.975 L813.642 681.975 L813.082 681.975 L812.523 681.975 L811.964 681.975 L811.405 681.975 L810.845 681.975 L810.286 681.975 L809.727 681.975 L809.168 681.975 L808.608 681.975 L808.049 681.975 L807.49 681.975 L806.931 681.975 L806.371 681.975 L805.812 681.975 L805.253 681.975 L804.693 681.975 L804.134 681.975 L803.575 681.975 L803.016 681.975 L802.456 681.975 L801.897 681.975 L801.338 681.975 L800.779 681.975 L800.219 681.975 L799.66 681.975 L799.101 681.975 L798.542 681.975 L797.982 681.975 L797.423 681.975 L796.864 681.975 L796.305 681.975 L795.745 681.975 L795.186 681.975 L794.627 681.975 L794.068 681.975 L793.508 681.975 L792.949 681.975 L792.39 681.975 L791.831 681.975 L791.271 681.975 L790.712 681.975 L790.153 681.975 L789.594 681.975 L789.034 681.975 L788.475 681.975 L787.916 681.975 L787.357 681.975 L786.797 681.975 L786.238 681.975 L785.679 681.975 L785.12 681.975 L784.56 681.975 L784.001 681.975 L783.442 681.975 L782.883 681.975 L782.323 681.975 L781.764 681.975 L781.205 681.975 L780.646 681.975 L780.086 681.975 L779.527 681.975 L778.968 681.975 L778.409 681.975 L777.849 681.975 L777.29 681.975 L776.731 681.975 L776.172 681.975 L775.612 681.975 L775.053 681.975 L774.494 681.975 L773.935 681.975 L773.375 681.975 L772.816 681.975 L772.257 681.975 L771.698 681.975 L771.138 681.975 L770.579 681.975 L770.02 681.975 L769.461 681.975 L768.901 681.975 L768.342 681.975 L767.783 681.975 L767.224 681.975 L766.664 681.975 L766.105 681.975 L765.546 681.975 L764.987 681.975 L764.427 681.975 L763.868 681.975 L763.309 681.975 L762.75 681.975 L762.19 681.975 L761.631 681.975 L761.072 681.975 L760.513 681.975 L759.953 681.975 L759.394 681.975 L758.835 681.975 L758.276 681.975 L757.716 681.975 L757.157 681.975 L756.598 681.975 L756.039 681.975 L755.479 681.975 L754.92 681.975 L754.361 681.975 L753.802 681.975 L753.242 681.975 L752.683 681.975 L752.124 681.975 L751.565 681.975 L751.005 681.975 L750.446 681.975 L749.887 681.975 L749.328 681.975 L748.768 681.975 L748.209 681.975 L747.65 681.975 L747.091 681.975 L746.531 681.975 L745.972 681.975 L745.413 681.975 L744.854 681.975 L744.294 681.975 L743.735 681.975 L743.176 681.975 L742.617 681.975 L742.057 681.975 L741.498 681.975 L740.939 681.975 L740.38 681.975 L739.82 681.975 L739.261 681.975 L738.702 681.975 L738.143 681.975 L737.583 681.975 L737.024 681.975 L736.465 681.975 L735.906 681.975 L735.346 681.975 L734.787 681.975 L734.228 681.975 L733.669 681.975 L733.109 681.975 L732.55 681.975 L731.991 681.975 L731.432 681.975 L730.872 681.975 L730.313 681.975 L729.754 681.975 L729.195 681.975 L728.635 681.975 L728.076 681.975 L727.517 681.975 L726.958 681.975 L726.398 681.975 L725.839 681.975 L725.28 681.975 L724.721 681.975 L724.161 681.975 L723.602 681.975 L723.043 681.975 L722.484 681.975 L721.924 681.975 L721.365 681.975 L720.806 681.975 L720.247 681.975  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.583 720.806,686.583 721.365,686.583 721.924,686.583 722.484,686.583 723.043,686.583 723.602,686.583 724.161,686.583 724.721,686.583 725.28,686.583 725.839,686.583 726.398,686.583 726.958,686.583 727.517,686.583 728.076,686.583 728.635,686.583 729.195,686.583 729.754,686.583 730.313,686.583 730.872,686.583 731.432,686.583 731.991,686.583 732.55,686.583 733.109,686.583 733.669,686.583 734.228,686.583 734.787,686.583 735.346,686.583 735.906,686.583 736.465,686.583 737.024,686.583 737.583,686.583 738.143,686.583 738.702,686.583 739.261,686.583 739.82,686.583 740.38,686.583 740.939,686.583 741.498,686.583 742.057,686.583 742.617,686.583 743.176,686.583 743.735,686.583 744.294,686.583 744.854,686.583 745.413,686.583 745.972,686.583 746.531,686.583 747.091,686.583 747.65,686.583 748.209,686.583 748.768,686.583 749.328,686.583 749.887,686.583 750.446,686.583 751.005,686.583 751.565,686.583 752.124,686.583 752.683,686.583 753.242,686.583 753.802,686.583 754.361,686.583 754.92,686.583 755.479,686.583 756.039,686.583 756.598,686.583 757.157,686.583 757.716,686.583 758.276,686.583 758.835,686.583 759.394,686.583 759.953,686.583 760.513,686.583 761.072,686.583 761.631,686.583 762.19,686.583 762.75,686.583 763.309,686.583 763.868,686.583 764.427,686.583 764.987,686.583 765.546,686.583 766.105,686.583 766.664,686.583 767.224,686.583 767.783,686.583 768.342,686.583 768.901,686.583 769.461,686.583 770.02,686.583 770.579,686.583 771.138,686.583 771.698,686.583 772.257,686.583 772.816,686.583 773.375,686.583 773.935,686.583 774.494,686.583 775.053,686.583 775.612,686.583 776.172,686.583 776.731,686.583 777.29,686.583 777.849,686.583 778.409,686.583 778.968,686.583 779.527,686.583 780.086,686.583 780.646,686.583 781.205,686.583 781.764,686.583 782.323,686.583 782.883,686.583 783.442,686.583 784.001,686.583 784.56,686.583 785.12,686.583 785.679,686.583 786.238,686.583 786.797,686.583 787.357,686.583 787.916,686.583 788.475,686.583 789.034,686.583 789.594,686.583 790.153,686.583 790.712,686.583 791.271,686.583 791.831,686.583 792.39,686.583 792.949,686.583 793.508,686.583 794.068,686.583 794.627,686.583 795.186,686.583 795.745,686.583 796.305,686.583 796.864,686.583 797.423,686.583 797.982,686.583 798.542,686.583 799.101,686.583 799.66,686.583 800.219,686.583 800.779,686.583 801.338,686.583 801.897,686.583 802.456,686.583 803.016,686.583 803.575,686.583 804.134,686.583 804.693,686.583 805.253,686.583 805.812,686.583 806.371,686.583 806.931,686.583 807.49,686.583 808.049,686.583 808.608,686.583 809.168,686.583 809.727,686.583 810.286,686.583 810.845,686.583 811.405,686.583 811.964,686.583 812.523,686.583 813.082,686.583 813.642,686.583 814.201,686.583 814.76,686.583 815.319,686.583 815.879,686.583 816.438,686.583 816.997,686.583 817.556,686.583 818.116,686.583 818.675,686.583 819.234,686.583 819.793,686.583 820.353,686.583 820.912,686.583 821.471,686.583 822.03,686.583 822.59,686.583 823.149,686.583 823.708,686.583 824.267,686.583 824.827,686.583 825.386,686.583 825.945,686.583 826.504,686.583 827.064,686.583 827.623,686.583 828.182,686.583 828.741,686.583 829.301,686.583 829.86,686.583 830.419,686.583 830.978,686.583 831.538,686.583 832.097,686.583 832.656,686.583 833.215,686.583 833.775,686.583 834.334,686.583 834.893,686.583 835.452,686.583 836.012,686.583 836.571,686.583 837.13,686.583 837.689,686.583 838.249,686.583 838.808,686.583 839.367,686.583 839.926,686.583 840.486,686.583 841.045,686.583 841.604,686.583 842.163,686.583 842.723,686.583 843.282,686.583 843.841,686.583 844.4,686.583 844.96,686.583 845.519,686.583 846.078,686.583 846.637,686.583 847.197,686.583 847.756,686.583 848.315,686.583 848.874,686.583 849.434,686.583 849.993,686.583 850.552,686.583 851.111,686.583 851.671,686.583 852.23,686.583 852.789,686.583 853.348,686.583 853.908,686.583 854.467,686.583 855.026,686.583 855.585,686.583 856.145,686.583 856.704,686.583 857.263,686.583 857.822,686.583 858.382,686.583 858.941,686.583 859.5,686.583 860.059,686.583 860.619,686.583 861.178,686.583 861.737,686.583 862.296,686.583 862.856,686.583 863.415,686.583 863.974,686.583 864.533,686.583 865.093,686.583 865.652,686.583 866.211,686.583 866.77,686.583 867.33,686.583 867.889,686.583 868.448,686.583 869.007,686.583 869.567,686.583 870.126,686.583 870.685,686.583 871.244,686.583 871.804,686.583 872.363,686.583 872.922,686.583 873.481,686.583 874.041,686.583 874.6,686.583 875.159,686.583 875.718,686.583 876.278,686.583 876.837,686.583 877.396,686.583 877.955,686.583 878.515,686.583 879.074,686.583 879.633,686.583 880.192,686.583 880.752,686.583 881.311,686.583 881.87,686.583 882.429,686.583 882.989,686.583 883.548,686.583 884.107,686.583 884.666,686.583 885.226,686.583 885.785,686.583 886.344,686.583 886.903,686.583 887.463,686.583 888.022,686.583 888.581,686.583 889.14,686.583 889.7,686.583 890.259,686.583 890.818,686.583 891.377,686.583 891.937,686.583 892.496,686.583 893.055,686.583 893.614,686.583 894.174,686.583 894.733,686.583 895.292,686.583 895.851,686.583 896.411,686.583 896.97,686.583 897.529,686.583 898.088,686.583 898.648,686.583 899.207,686.583 899.766,686.583 900.325,686.583 900.885,686.583 901.444,686.583 902.003,686.583 902.562,686.583 903.122,686.583 903.681,686.583 904.24,686.583 904.799,686.583 905.359,686.583 905.918,686.583 906.477,686.583 907.036,686.583 907.596,686.583 908.155,686.583 908.714,686.583 909.273,686.583 909.833,686.583 910.392,686.583 910.951,686.583 911.51,686.583 912.07,686.583 912.629,686.583 913.188,686.583 913.747,686.583 914.307,686.583 914.866,686.583 915.425,686.583 915.984,686.583 916.544,686.583 917.103,686.583 917.662,686.583 918.221,686.583 918.781,686.583 919.34,686.583 919.899,686.583 920.458,686.583 921.018,686.583 921.577,686.583 922.136,686.583 922.695,686.583 923.255,686.583 923.814,686.583 924.373,686.583 924.932,686.583 925.492,686.583 926.051,686.583 926.61,686.583 927.169,686.583 927.729,686.583 928.288,686.583 928.847,686.583 929.406,686.583 929.966,686.583 930.525,686.583 931.084,686.583 931.644,686.583 932.203,686.583 932.762,686.583 933.321,686.583 933.881,686.583 934.44,686.583 934.999,686.583 935.558,686.583 936.118,686.583 936.677,686.583 937.236,686.583 937.795,686.583 938.355,686.583 938.914,686.583 939.473,686.583 940.032,686.583 940.592,686.583 941.151,686.583 941.71,686.583 942.269,686.583 942.829,686.583 943.388,686.583 943.947,686.583 944.506,686.583 945.066,686.583 945.625,686.583 946.184,686.583 946.743,686.583 947.303,686.583 947.862,686.583 948.421,686.583 948.98,686.583 949.54,686.583 950.099,686.583 950.658,686.583 951.217,686.583 951.777,686.583 952.336,686.583 952.895,686.583 953.454,686.583 954.014,686.583 954.573,686.583 955.132,686.583 955.691,686.583 956.251,686.583 956.81,686.583 957.369,686.583 957.928,686.583 958.488,686.583 959.047,686.583 959.606,686.583 960.165,686.583 960.725,686.583 961.284,686.583 961.843,686.583 962.402,686.583 962.962,686.583 963.521,686.583 964.08,686.583 964.639,686.583 965.199,686.583 965.758,686.583 966.317,686.583 966.876,686.583 967.436,686.583 967.995,686.583 968.554,686.583 969.113,686.583 969.673,686.583 970.232,686.583 970.791,686.583 971.35,686.583 971.91,686.583 972.469,686.583 973.028,686.583 973.587,686.583 974.147,686.583 974.706,686.583 975.265,686.583 975.824,686.583 976.384,686.583 976.943,686.583 977.502,686.583 978.061,686.583 978.621,686.583 979.18,686.583 979.739,686.583 980.298,686.583 980.858,686.583 981.417,686.583 981.976,686.583 982.535,686.583 983.095,686.583 983.654,686.583 984.213,686.583 984.772,686.583 985.332,686.583 985.891,686.583 986.45,686.583 987.009,686.583 987.569,686.583 988.128,686.583 988.687,686.583 989.246,686.583 989.806,686.583 990.365,686.583 990.924,686.583 991.483,686.583 992.043,686.583 992.602,686.583 993.161,686.583 993.72,686.583 994.28,686.583 994.839,686.583 995.398,686.583 995.957,686.583 996.517,686.583 997.076,686.583 997.635,686.583 998.194,686.583 998.754,686.583 999.313,686.583 999.872,686.583 1000.43,686.583 1000.99,686.583 1001.55,686.583 1002.11,686.583 1002.67,686.583 1003.23,686.583 1003.79,686.583 1004.35,686.583 1004.91,686.583 1005.46,686.583 1006.02,686.583 1006.58,686.583 1007.14,686.583 1007.7,686.583 1008.26,686.583 1008.82,686.583 1009.38,686.583 1009.94,686.583 1010.5,686.583 1011.06,686.583 1011.62,686.583 1012.18,686.583 1012.73,686.583 1013.29,686.583 1013.85,686.583 1014.41,686.583 1014.97,686.583 1015.53,686.583 1016.09,686.583 1016.65,686.583 1017.21,686.583 1017.77,686.583 1018.33,686.583 1018.89,686.583 1019.45,686.583 1020.01,686.583 1020.56,686.583 1021.12,686.583 1021.68,686.583 1022.24,686.583 1022.8,686.583 1023.36,686.583 1023.92,686.583 1024.48,686.583 1025.04,686.583 1025.6,686.583 1026.16,686.583 1026.72,686.583 1027.28,686.583 1027.83,686.583 1028.39,686.583 1028.95,686.583 1029.51,686.583 1030.07,686.583 1030.63,686.583 1031.19,686.583 1031.75,686.583 1032.31,686.583 1032.87,686.583 1033.43,686.583 1033.99,686.583 1034.55,686.583 1035.1,686.583 1035.66,686.583 1036.22,686.583 1036.78,686.583 1037.34,686.583 1037.9,686.583 1038.46,686.583 1039.02,686.583 1039.58,686.583 1040.14,686.583 1040.7,686.583 1041.26,686.583 1041.82,686.583 1042.38,686.583 1042.93,686.583 1043.49,686.583 1044.05,686.583 1044.61,686.583 1045.17,686.583 1045.73,686.583 1046.29,686.583 1046.85,686.583 1047.41,686.583 1047.97,686.583 1048.53,686.583 1049.09,686.583 1049.65,686.583 1050.2,686.583 1050.76,686.583 1051.32,686.583 1051.88,686.583 1052.44,686.583 1053,686.583 1053.56,686.583 1054.12,686.583 1054.68,686.583 1055.24,686.583 1055.8,686.583 1056.36,686.583 1056.92,686.583 1057.48,686.583 1058.03,686.583 1058.59,686.583 1059.15,686.583 1059.71,686.583 1060.27,686.583 1060.83,686.583 1061.39,686.583 1061.95,686.583 1062.51,686.583 1063.07,686.583 1063.63,686.583 1064.19,686.583 1064.75,686.583 1065.3,686.583 1065.86,686.583 1066.42,686.583 1066.98,686.583 1067.54,686.583 1068.1,686.583 1068.66,686.583 1069.22,686.583 1069.78,686.583 1070.34,686.583 1070.9,686.583 1071.46,686.583 1072.02,686.583 1072.57,686.583 1073.13,686.583 1073.69,686.583 1074.25,686.583 1074.81,686.583 1075.37,686.583 1075.93,686.583 1076.49,686.583 1077.05,686.583 1077.61,686.583 1078.17,686.583 1078.73,686.583 1079.29,686.583 1079.85,686.583 1080.4,686.583 1080.96,686.583 1081.52,686.583 1082.08,686.583 1082.64,686.583 1083.2,686.583 1083.76,686.583 1084.32,686.583 1084.88,686.583 1085.44,686.583 1086,686.583 1086.56,686.583 1087.12,686.583 1087.67,686.583 1088.23,686.583 1088.79,686.583 1089.35,686.583 1089.91,686.583 1090.47,686.583 1091.03,686.583 1091.59,686.583 1092.15,686.583 1092.71,686.583 1093.27,686.583 1093.83,686.583 1094.39,686.583 1094.94,686.583 1095.5,686.583 1096.06,686.583 1096.62,686.583 1097.18,686.583 1097.74,686.583 1098.3,686.583 1098.86,686.583 1099.42,686.583 1099.98,686.583 1100.54,686.583 1101.1,686.583 1101.66,686.583 1102.22,686.583 1102.77,686.583 1103.33,686.583 1103.89,686.583 1104.45,686.583 1105.01,686.583 1105.57,686.583 1106.13,686.583 1106.69,686.583 1107.25,686.583 1107.81,686.583 1108.37,686.583 1108.93,686.583 1109.49,686.583 1110.04,686.583 1110.6,686.583 1111.16,686.583 1111.72,686.583 1112.28,686.583 1112.84,686.583 1113.4,686.583 1113.96,686.583 1114.52,686.583 1115.08,686.583 1115.64,686.583 1116.2,686.583 1116.76,686.583 1117.31,686.583 1117.87,686.583 1118.43,686.583 1118.99,686.583 1119.55,686.583 1120.11,686.583 1120.67,686.583 1121.23,686.583 1121.79,686.583 1122.35,686.583 1122.91,686.583 1123.47,686.583 1124.03,686.583 1124.59,686.583 1125.14,686.583 1125.7,686.583 1126.26,686.583 1126.82,686.583 1127.38,686.583 1127.94,686.583 1128.5,686.583 1129.06,686.583 1129.62,686.583 1130.18,686.583 1130.74,686.583 1131.3,686.583 1131.86,686.583 1132.41,686.583 1132.97,686.583 1133.53,686.583 1134.09,686.583 1134.65,686.583 1135.21,686.583 1135.77,686.583 1136.33,686.583 1136.89,686.583 1137.45,686.583 1138.01,686.583 1138.57,686.583 1139.13,686.583 1139.68,686.583 1140.24,686.583 1140.8,686.583 1141.36,686.583 1141.92,686.583 1142.48,686.583 1143.04,686.583 1143.6,686.583 1144.16,686.583 1144.72,686.583 1145.28,686.583 1145.84,686.583 1146.4,686.583 1146.96,686.583 1147.51,686.583 1148.07,686.583 1148.63,686.583 1149.19,686.583 1149.75,686.583 1150.31,686.583 1150.87,686.583 1151.43,686.583 1151.99,686.583 1152.55,686.583 1153.11,686.583 1153.67,686.583 1154.23,686.583 1154.78,686.583 1155.34,686.583 1155.9,686.583 1156.46,686.583 1157.02,686.583 1157.58,686.583 1158.14,686.583 1158.7,686.583 1159.26,686.583 1159.82,686.583 1160.38,686.583 1160.94,686.583 1161.5,686.583 1162.05,686.583 1162.61,686.583 1163.17,686.583 1163.73,686.583 1164.29,686.583 1164.85,686.583 1165.41,686.583 1165.97,686.583 1166.53,686.583 1167.09,686.583 1167.65,686.583 1168.21,686.583 1168.77,686.583 1169.33,686.583 1169.88,686.583 1170.44,686.583 1171,686.583 1171.56,686.583 1172.12,686.583 1172.68,686.583 1173.24,686.583 1173.8,686.583 1174.36,686.583 1174.92,686.583 1175.48,686.583 1176.04,686.583 1176.6,686.583 1177.15,686.583 1177.71,686.583 1178.27,686.583 1178.83,686.583 1179.39,686.583 1179.95,686.583 1180.51,686.583 1181.07,686.583 1181.63,686.583 1182.19,686.583 1182.75,686.583 1183.31,686.583 1183.87,686.583 1184.43,686.583 1184.98,686.583 1185.54,686.583 1186.1,686.583 1186.66,686.583 1187.22,686.583 1187.78,686.583 1188.34,686.583 1188.9,686.583 1189.46,686.583 1190.02,686.583 1190.58,686.583 1191.14,686.583 1191.7,686.583 1192.25,686.583 1192.81,686.583 1193.37,686.583 1193.93,686.583 1194.49,686.583 1195.05,686.583 1195.61,686.583 1196.17,686.583 1196.73,686.583 1197.29,686.583 1197.85,686.583 1198.41,686.583 1198.97,686.583 1199.52,686.583 1200.08,686.583 1200.64,686.583 1201.2,686.583 1201.76,686.583 1202.32,686.583 1202.88,686.583 1203.44,686.583 1204,686.583 1204.56,686.583 1205.12,686.583 1205.68,686.583 1206.24,686.583 1206.8,686.583 1207.35,686.583 1207.91,686.583 1208.47,686.583 1209.03,686.583 1209.59,686.583 1210.15,686.583 1210.71,686.583 1211.27,686.583 1211.83,686.583 1212.39,686.583 1212.95,686.583 1213.51,686.583 1214.07,686.583 1214.62,686.583 1215.18,686.583 1215.74,686.583 1216.3,686.583 1216.86,686.583 1217.42,686.583 1217.98,686.583 1218.54,686.583 1219.1,686.583 1219.66,686.583 1220.22,686.583 1220.78,686.583 1221.34,686.583 1221.89,686.583 1222.45,686.583 1223.01,686.583 1223.57,686.583 1224.13,686.583 1224.69,686.583 1225.25,686.583 1225.81,686.583 1226.37,686.583 1226.93,686.583 1227.49,686.583 1228.05,686.583 1228.61,686.583 1229.17,686.583 1229.72,686.583 1230.28,686.583 1230.84,686.583 1231.4,686.583 1231.96,686.583 1232.52,686.583 1233.08,686.583 1233.64,686.583 1234.2,686.583 1234.76,686.583 1235.32,686.583 1235.88,686.583 1236.44,686.583 1236.99,686.583 1237.55,686.583 1238.11,686.583 1238.67,686.583 1239.23,686.583 1239.79,686.583 1240.35,686.583 1240.91,686.583 1241.47,686.583 1242.03,686.583 1242.59,686.583 1243.15,686.583 1243.71,686.583 1244.26,686.583 1244.82,686.583 1245.38,686.583 1245.94,686.583 1246.5,686.583 1247.06,686.583 1247.62,686.583 1248.18,686.583 1248.74,686.583 1249.3,686.583 1249.86,686.583 1250.42,686.583 1250.98,686.583 1251.54,686.583 1252.09,686.583 1252.65,686.583 1253.21,686.583 1253.77,686.583 1254.33,686.583 1254.89,686.583 1255.45,686.583 1256.01,686.583 1256.57,686.583 1257.13,686.583 1257.69,686.583 1258.25,686.583 1258.81,686.583 1259.36,686.583 1259.92,686.583 1260.48,686.583 1261.04,686.583 1261.6,686.583 1262.16,686.583 1262.72,686.583 1263.28,686.583 1263.84,686.583 1264.4,686.583 1264.96,686.583 1265.52,686.583 1266.08,686.583 1266.63,686.583 1267.19,686.583 1267.75,686.583 1268.31,686.583 1268.87,686.583 1269.43,686.583 1269.99,686.583 1270.55,686.583 1271.11,686.583 1271.67,686.583 1272.23,686.583 1272.79,686.583 1273.35,686.583 1273.91,686.583 1274.46,686.583 1275.02,686.583 1275.58,686.583 1276.14,686.583 1276.7,686.583 1277.26,686.583 1277.82,686.583 1278.38,686.583 1278.94,686.583 1279.5,686.583 1280.06,686.583 1280.62,686.583 1281.18,686.583 1281.73,686.583 1282.29,686.583 1282.85,686.583 1283.41,686.583 1283.97,686.583 1284.53,686.583 1285.09,686.583 1285.65,686.583 1286.21,686.583 1286.77,686.583 1287.33,686.583 1287.89,686.583 1288.45,686.583 1289,686.583 1289.56,686.583 1290.12,686.583 1290.68,686.583 1291.24,686.583 1291.8,686.583 1292.36,686.583 1292.92,686.583 1293.48,686.583 1294.04,686.583 1294.6,686.583 1295.16,686.583 1295.72,686.583 1296.28,686.583 1296.83,686.583 1297.39,686.583 1297.95,686.583 1298.51,686.583 1299.07,686.583 1299.63,686.583 1300.19,686.583 1300.75,686.583 1301.31,686.583 1301.87,686.583 1302.43,686.583 1302.99,686.583 1303.55,686.583 1304.1,686.583 1304.66,686.583 1305.22,686.583 1305.78,686.583 1306.34,686.583 1306.9,686.583 1307.46,686.583 1308.02,686.583 1308.58,686.583 1309.14,686.583 1309.7,686.583 1310.26,686.583 1310.82,686.583 1311.38,686.583 1311.93,686.583 1312.49,686.583 1313.05,686.583 1313.61,686.583 1314.17,686.583 1314.73,686.583 1315.29,686.583 1315.85,686.583 1316.41,686.583 1316.97,686.583 1317.53,686.583 1318.09,686.583 1318.65,686.583 1319.2,686.583 1319.76,686.583 1320.32,686.583 1320.88,686.583 1321.44,686.583 1322,686.583 1322.56,686.583 1323.12,686.583 1323.68,686.583 1324.24,686.583 1324.8,686.583 1325.36,686.583 1325.92,686.583 1326.47,686.583 1327.03,686.583 1327.59,686.583 1328.15,686.583 1328.71,686.583 1329.27,686.583 1329.83,686.583 1330.39,686.583 1330.95,686.583 1331.51,686.583 1332.07,686.583 1332.63,686.583 1333.19,686.583 1333.75,686.583 1334.3,686.583 1334.86,686.583 1335.42,686.583 1335.98,686.583 1336.54,686.583 1337.1,686.583 1337.66,686.583 1338.22,686.583 1338.78,686.583 1339.34,686.583 1339.9,686.583 1340.46,686.583 1341.02,686.583 1341.57,686.583 1342.13,686.583 1342.69,686.583 1343.25,686.583 1343.81,686.583 1344.37,686.583 1344.93,686.583 1345.49,686.583 1346.05,686.583 1346.61,686.583 1347.17,686.583 1347.73,686.583 1348.29,686.583 1348.84,686.583 1349.4,686.583 1349.96,686.583 1350.52,686.583 1351.08,686.583 1351.64,686.583 1352.2,686.583 1352.76,686.583 1353.32,686.583 1353.88,686.583 1354.44,686.583 1355,686.583 1355.56,686.583 1356.12,686.583 1356.67,686.583 1357.23,686.583 1357.79,686.583 1358.35,686.583 1358.91,686.583 1359.47,686.583 1360.03,686.583 1360.59,686.583 1361.15,686.583 1361.71,686.583 1362.27,686.583 1362.83,686.583 1363.39,686.583 1363.94,686.583 1364.5,686.583 1365.06,686.583 1365.62,686.583 1366.18,686.583 1366.74,686.583 1367.3,686.583 1367.86,686.583 1368.42,686.583 1368.98,686.583 1369.54,686.583 1370.1,686.583 1370.66,686.583 1371.21,686.583 1371.77,686.583 1372.33,686.583 1372.89,686.583 1373.45,686.583 1374.01,686.583 1374.57,686.583 1375.13,686.583 1375.69,686.583 1376.25,686.583 1376.81,686.583 1377.37,686.583 1377.93,686.583 1378.49,686.583 1379.04,686.583 1379.6,686.583 1380.16,686.583 1380.72,686.583 1381.28,686.583 1381.84,686.583 1382.4,686.583 1382.96,686.583 1383.52,686.583 1384.08,686.583 1384.64,686.583 1385.2,686.583 1385.76,686.583 1386.31,686.583 1386.87,686.583 1387.43,686.583 1387.99,686.583 1388.55,686.583 1389.11,686.583 1389.67,686.583 1390.23,686.583 1390.79,686.583 1391.35,686.583 1391.91,686.583 1392.47,686.583 1393.03,686.583 1393.58,686.583 1394.14,686.583 1394.7,686.583 1395.26,686.583 1395.82,686.583 1396.38,686.583 1396.94,686.583 1397.5,686.583 1398.06,686.583 1398.62,686.583 1399.18,686.583 1399.74,686.583 1400.3,686.583 1400.86,686.583 1401.41,686.583 1401.97,686.583 1402.53,686.583 1403.09,686.583 1403.65,686.583 1404.21,686.583 1404.77,686.583 1405.33,686.583 1405.89,686.583 1406.45,686.583 1407.01,686.583 1407.57,686.583 1408.13,686.583 1408.68,686.583 1409.24,686.583 1409.8,686.583 1410.36,686.583 1410.92,686.583 1411.48,686.583 1412.04,686.583 1412.6,686.583 1413.16,686.583 1413.72,686.583 1414.28,686.583 1414.84,686.583 1415.4,686.583 1415.95,686.583 1416.51,686.583 1417.07,686.583 1417.63,686.583 1418.19,686.583 1418.75,686.583 1419.31,686.583 1419.87,686.583 1420.43,686.583 1420.99,686.583 1421.55,686.583 1422.11,686.583 1422.67,686.583 1423.23,686.583 1423.78,686.583 1424.34,686.583 1424.9,686.583 1425.46,686.583 1426.02,686.583 1426.58,686.583 1427.14,686.583 1427.7,686.583 1428.26,686.583 1428.82,686.583 1429.38,686.583 1429.94,686.583 1430.5,686.583 1431.05,686.583 1431.61,686.583 1432.17,686.583 1432.73,686.583 1433.29,686.583 1433.85,686.583 1434.41,686.583 1434.97,686.583 1435.53,686.583 1436.09,686.583 1436.65,686.583 1437.21,686.583 1437.77,686.583 1438.33,686.583 1438.88,686.583 1439.44,686.583 1440,686.583 1440.56,686.583 1441.12,686.583 1441.68,686.583 1442.24,686.583 1442.8,686.583 1443.36,686.583 1443.92,686.583 1444.48,686.583 1445.04,686.583 1445.6,686.583 1446.15,686.583 1446.71,686.583 1447.27,686.583 1447.83,686.583 1448.39,686.583 1448.95,686.583 1449.51,686.583 1450.07,686.583 1450.63,686.583 1451.19,686.583 1451.75,686.583 1452.31,686.583 1452.87,686.583 1453.42,686.583 1453.98,686.583 1454.54,686.583 1455.1,686.583 1455.66,686.583 1456.22,686.583 1456.78,686.583 1457.34,686.583 1457.9,686.583 1458.46,686.583 1459.02,686.583 1459.58,686.583 1460.14,686.583 1460.7,686.583 1461.25,686.583 1461.81,686.583 1462.37,686.583 1462.93,686.583 1463.49,686.583 1464.05,686.583 1464.61,686.583 1465.17,686.583 1465.73,686.583 1466.29,686.583 1466.85,686.583 1467.41,686.583 1467.97,686.583 1468.52,686.583 1469.08,686.583 1469.64,686.583 1470.2,686.583 1470.76,686.583 1471.32,686.583 1471.88,686.583 1472.44,686.583 1473,686.583 1473.56,686.583 1474.12,686.583 1474.68,686.583 1475.24,686.583 1475.79,686.583 1476.35,686.583 1476.91,686.583 1477.47,686.583 1478.03,686.583 1478.59,686.583 1479.15,686.583 1479.71,686.583 1480.27,686.583 1480.83,686.583 1481.39,686.583 1481.95,686.583 1482.51,686.583 1483.07,686.583 1483.62,686.583 1484.18,686.583 1484.74,686.583 1485.3,686.583 1485.86,686.583 1486.42,686.583 1486.98,686.583 1487.54,686.583 1488.1,686.583 1488.66,686.583 1489.22,686.583 1489.78,686.583 1490.34,686.583 1490.89,686.583 1491.45,686.583 1492.01,686.583 1492.57,686.583 1493.13,686.583 1493.69,686.583 1494.25,686.583 1494.81,686.583 1495.37,686.583 1495.93,686.583 1496.49,686.583 1497.05,686.583 1497.61,686.583 1498.16,686.583 1498.72,686.583 1499.28,686.583 1499.84,686.583 1500.4,686.583 1500.96,686.583 1501.52,686.583 1502.08,686.583 1502.64,686.583 1503.2,686.583 1503.76,686.583 1504.32,686.583 1504.88,686.583 1505.44,686.583 1505.99,686.583 1506.55,686.583 1507.11,686.583 1507.67,686.583 1508.23,686.583 1508.79,686.583 1509.35,686.583 1509.91,686.583 1510.47,686.583 1511.03,686.583 1511.59,686.583 1512.15,686.583 1512.71,686.583 1513.26,686.583 1513.82,686.583 1514.38,686.583 1514.94,686.583 1515.5,686.583 1516.06,686.583 1516.62,686.583 1517.18,686.583 1517.74,686.583 1518.3,686.583 1518.86,686.583 1519.42,686.583 1519.98,686.583 1520.53,686.583 1521.09,686.583 1521.65,686.583 1522.21,686.583 1522.77,686.583 1523.33,686.583 1523.89,686.583 1524.45,686.583 1525.01,686.583 1525.57,686.583 1526.13,686.583 1526.69,686.583 1527.25,686.583 1527.81,686.583 1528.36,686.583 1528.92,686.583 1529.48,686.583 1530.04,686.583 1530.6,686.583 1531.16,686.583 1531.72,686.583 1532.28,686.583 1532.84,686.583 1533.4,686.583 1533.96,686.583 1534.52,686.583 1535.08,686.583 1535.63,686.583 1536.19,686.583 1536.75,686.583 1537.31,686.583 1537.87,686.583 1538.43,686.583 1538.99,686.583 1539.55,686.583 1540.11,686.583 1540.67,686.583 1541.23,686.583 1541.79,686.583 1542.35,686.583 1542.9,686.583 1543.46,686.583 1544.02,686.583 1544.58,686.583 1545.14,686.583 1545.7,686.583 1546.26,686.583 1546.82,686.583 1547.38,686.583 1547.94,686.583 1548.5,686.583 1549.06,686.583 1549.62,686.583 1550.18,686.583 1550.73,686.583 1551.29,686.583 1551.85,686.583 1552.41,686.583 1552.97,686.583 1553.53,686.583 1554.09,686.583 1554.65,686.583 1555.21,686.583 1555.77,686.583 1556.33,686.583 1556.89,686.583 1557.45,686.583 1558,686.583 1558.56,686.583 1559.12,686.583 1559.68,686.583 1560.24,686.583 1560.8,686.583 1561.36,686.583 1561.92,686.583 1562.48,686.583 1563.04,686.583 1563.6,686.583 1564.16,686.583 1564.72,686.583 1565.28,686.583 1565.83,686.583 1566.39,686.583 1566.95,686.583 1567.51,686.583 1568.07,686.583 1568.63,686.583 1569.19,686.583 1569.75,686.583 1570.31,686.583 1570.87,686.583 1571.43,686.583 1571.99,686.583 1572.55,686.583 1573.1,686.583 1573.66,686.583 1574.22,686.583 1574.78,686.583 1575.34,686.583 1575.9,686.583 1576.46,686.583 1577.02,686.583 1577.58,686.583 1578.14,686.583 1578.7,686.583 1579.26,686.583 1579.82,686.583 1580.37,686.583 1580.93,686.583 1581.49,686.583 1582.05,686.583 1582.61,686.583 1583.17,686.583 1583.73,686.583 1584.29,686.583 1584.85,686.583 1585.41,686.583 1585.97,686.583 1586.53,686.583 1587.09,686.583 1587.65,686.583 1588.2,686.583 1588.76,686.583 1589.32,686.583 1589.88,686.583 1590.44,686.583 1591,686.583 1591.56,686.583 1592.12,686.583 1592.68,686.583 1593.24,686.583 1593.8,686.583 1594.36,686.583 1594.92,686.583 1595.47,686.583 1596.03,686.583 1596.59,686.583 1597.15,686.583 1597.71,686.583 1598.27,686.583 1598.83,686.583 1599.39,686.583 1599.95,686.583 1600.51,686.583 1601.07,686.583 1601.63,686.583 1602.19,686.583 1602.74,686.583 1603.3,686.583 1603.86,686.583 1604.42,686.583 1604.98,686.583 1605.54,686.583 1606.1,686.583 1606.66,686.583 1607.22,686.583 1607.78,686.583 1608.34,686.583 1608.9,686.583 1609.46,686.583 1610.02,686.583 1610.57,686.583 1611.13,686.583 1611.69,686.583 1612.25,686.583 1612.81,686.583 1613.37,686.583 1613.93,686.583 1614.49,686.583 1615.05,686.583 1615.61,686.583 1616.17,686.583 1616.73,686.583 1617.29,686.583 1617.84,686.583 1618.4,686.583 1618.96,686.583 1619.52,686.583 1620.08,686.583 1620.64,686.583 1621.2,686.583 1621.76,686.583 1622.32,686.583 1622.88,686.583 1623.44,686.583 1624,686.583 1624.56,686.583 1625.11,686.583 1625.67,686.583 1626.23,686.583 1626.79,686.583 1627.35,686.583 1627.91,686.583 1628.47,686.583 1629.03,686.583 1629.59,686.583 1630.15,686.583 1630.71,686.583 1631.27,686.583 1631.83,686.583 1632.39,686.583 1632.94,686.583 1633.5,686.583 1634.06,686.583 1634.62,686.583 1635.18,686.583 1635.74,686.583 1636.3,686.583 1636.86,686.583 1637.42,686.583 1637.98,686.583 1638.54,686.583 1639.1,686.583 1639.66,686.583 1640.21,686.583 1640.77,686.583 1641.33,686.583 1641.89,686.583 1642.45,686.583 1643.01,686.583 1643.57,686.583 1644.13,686.583 1644.69,686.583 1645.25,686.583 1645.81,686.583 1646.37,686.583 1646.93,686.583 1647.48,686.583 1648.04,686.583 1648.6,686.583 1649.16,686.583 1649.72,686.583 1650.28,686.583 1650.84,686.583 1651.4,686.583 1651.96,686.583 1652.52,686.583 1653.08,686.583 1653.64,686.583 1654.2,686.583 1654.76,686.583 1655.31,686.583 1655.87,686.583 1656.43,686.583 1656.99,686.583 1657.55,686.583 1658.11,686.583 1658.67,686.583 1659.23,686.583 1659.79,686.583 1660.35,686.583 1660.91,686.583 1661.47,686.583 1662.03,686.583 1662.58,686.583 1663.14,686.583 1663.7,686.583 1664.26,686.583 1664.82,686.583 1665.38,686.583 1665.94,686.583 1666.5,686.583 1667.06,686.583 1667.62,686.583 1668.18,686.583 1668.74,686.583 1669.3,686.583 1669.85,686.583 1670.41,686.583 1670.97,686.583 1671.53,686.583 1672.09,686.583 1672.65,686.583 1673.21,686.583 1673.77,686.583 1674.33,686.583 1674.89,686.583 1675.45,686.583 1676.01,686.583 1676.57,686.583 1677.13,686.583 1677.68,686.583 1678.24,686.583 1678.8,686.583 1679.36,686.583 1679.92,686.583 1680.48,686.583 1681.04,686.583 1681.6,686.583 1682.16,686.583 1682.72,686.583 1683.28,686.583 1683.84,686.583 1684.4,686.583 1684.95,686.583 1685.51,686.583 1686.07,686.583 1686.63,686.583 1687.19,686.583 1687.75,686.583 1688.31,686.583 1688.87,686.583 1689.43,686.583 1689.99,686.583 1690.55,686.583 1691.11,686.583 1691.67,686.583 1692.23,686.583 1692.78,686.583 1693.34,686.583 1693.9,686.583 1694.46,686.583 1695.02,686.583 1695.58,686.583 1696.14,686.583 1696.7,686.583 1697.26,686.583 1697.82,686.583 1698.38,686.583 1698.94,686.583 1699.5,686.583 1700.05,686.583 1700.61,686.583 1701.17,686.583 1701.73,686.583 1702.29,686.583 1702.85,686.583 1703.41,686.583 1703.97,686.583 1704.53,686.583 1705.09,686.583 1705.65,686.583 1706.21,686.583 1706.77,686.583 1707.32,686.583 1707.88,686.583 1708.44,686.583 1709,686.583 1709.56,686.583 1710.12,686.583 1710.68,686.583 1711.24,686.583 1711.8,686.583 1712.36,686.583 1712.92,686.583 1713.48,686.583 1714.04,686.583 1714.6,686.583 1715.15,686.583 1715.71,686.583 1716.27,686.583 1716.83,686.583 1717.39,686.583 1717.95,686.583 1718.51,686.583 1719.07,686.583 1719.63,686.583 1720.19,686.583 1720.75,686.583 1721.31,686.583 1721.87,686.583 1722.42,686.583 1722.98,686.583 1723.54,686.583 1724.1,686.583 1724.66,686.583 1725.22,686.583 1725.78,686.583 1726.34,686.583 1726.9,686.583 1727.46,686.583 1728.02,686.583 1728.58,686.583 1729.14,686.583 1729.69,686.583 1730.25,686.583 1730.81,686.583 1731.37,686.583 1731.93,686.583 1732.49,686.583 1733.05,686.583 1733.61,686.583 1734.17,686.583 1734.73,686.583 1735.29,686.583 1735.85,686.583 1736.41,686.583 1736.97,686.583 1737.52,686.583 1738.08,686.583 1738.64,686.583 1739.2,686.583 1739.76,686.583 1740.32,686.583 1740.88,686.583 1741.44,686.583 1742,686.583 1742.56,686.583 1743.12,686.583 1743.68,686.583 1744.24,686.583 1744.79,686.583 1745.35,686.583 1745.91,686.583 1746.47,686.583 1747.03,686.583 1747.59,686.583 1748.15,686.583 1748.71,686.583 1749.27,686.583 1749.83,686.583 1750.39,686.583 1750.95,686.583 1751.51,686.583 1752.06,686.583 1752.62,686.583 1753.18,686.583 1753.74,686.583 1754.3,686.583 1754.86,686.583 1755.42,686.583 1755.98,686.583 1756.54,686.583 1757.1,686.583 1757.66,686.583 1758.22,686.583 1758.78,686.583 1759.34,686.583 1759.89,686.583 1760.45,686.583 1761.01,686.583 1761.57,686.583 1762.13,686.583 1762.69,686.583 1763.25,686.583 1763.81,686.583 1764.37,686.583 1764.93,686.583 1765.49,686.583 1766.05,686.583 1766.61,686.583 1767.16,686.583 1767.72,686.583 1768.28,686.583 1768.84,686.583 1769.4,686.583 1769.96,686.583 1770.52,686.583 1771.08,686.583 1771.64,686.583 1772.2,686.583 1772.76,686.583 1773.32,686.583 1773.88,686.583 1774.43,686.583 1774.99,686.583 1775.55,686.583 1776.11,686.583 1776.67,686.583 1777.23,686.583 1777.79,686.583 1778.35,686.583 1778.91,686.583 1779.47,686.583 1780.03,686.583 1780.59,686.583 1781.15,686.583 1781.71,686.583 1782.26,686.583 1782.82,686.583 1783.38,686.583 1783.94,686.583 1784.5,686.583 1785.06,686.583 1785.62,686.583 1786.18,686.583 1786.74,686.583 1787.3,686.583 1787.86,686.583 1788.42,686.583 1788.98,686.583 1789.53,686.583 1790.09,686.583 1790.65,686.583 1791.21,686.583 1791.77,686.583 1792.33,686.583 1792.89,686.583 1793.45,686.583 1794.01,686.583 1794.57,686.583 1795.13,686.583 1795.69,686.583 1796.25,686.583 1796.8,686.583 1797.36,686.583 1797.92,686.583 1798.48,686.583 1799.04,686.583 1799.6,686.583 1800.16,686.583 1800.72,686.583 1801.28,686.583 1801.84,686.583 1802.4,686.583 1802.96,686.583 1803.52,686.583 1804.08,686.583 1804.63,686.583 1805.19,686.583 1805.75,686.583 1806.31,686.583 1806.87,686.583 1807.43,686.583 1807.99,686.583 1808.55,686.583 1809.11,686.583 1809.67,686.583 1810.23,686.583 1810.79,686.583 1811.35,686.583 1811.9,686.583 1812.46,686.583 1813.02,686.583 1813.58,686.583 1814.14,686.583 1814.7,686.583 1815.26,686.583 1815.82,686.583 1816.38,686.583 1816.94,686.583 1817.5,686.583 1818.06,686.583 1818.62,686.583 1819.18,686.583 1819.73,686.583 1820.29,686.583 1820.85,686.583 1821.41,686.583 1821.97,686.583 1822.53,686.583 1823.09,686.583 1823.65,686.583 1824.21,686.583 1824.77,686.583 1825.33,686.583 1825.89,686.583 1826.45,686.583 1827,686.583 1827.56,686.583 1828.12,686.583 1828.68,686.583 1829.24,686.583 1829.8,686.583 1830.36,686.583 1830.92,686.583 1831.48,686.583 1832.04,686.583 1832.6,686.583 1833.16,686.583 1833.72,686.583 1834.27,686.583 1834.83,686.583 1835.39,686.583 1835.95,686.583 1836.51,686.583 1837.07,686.583 1837.63,686.583 1838.19,686.583 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 684.788 L720.806 684.788 L721.365 684.788 L721.924 684.788 L722.484 684.788 L723.043 684.788 L723.602 684.788 L724.161 684.788 L724.721 684.788 L725.28 684.788 L725.839 684.788 L726.398 684.788 L726.958 684.788 L727.517 684.788 L728.076 684.788 L728.635 684.788 L729.195 684.788 L729.754 684.788 L730.313 684.788 L730.872 684.788 L731.432 684.788 L731.991 684.788 L732.55 684.788 L733.109 684.788 L733.669 684.788 L734.228 684.788 L734.787 684.788 L735.346 684.788 L735.906 684.788 L736.465 684.788 L737.024 684.788 L737.583 684.788 L738.143 684.788 L738.702 684.788 L739.261 684.788 L739.82 684.788 L740.38 684.788 L740.939 684.788 L741.498 684.788 L742.057 684.788 L742.617 684.788 L743.176 684.788 L743.735 684.788 L744.294 684.788 L744.854 684.788 L745.413 684.788 L745.972 684.788 L746.531 684.788 L747.091 684.788 L747.65 684.788 L748.209 684.788 L748.768 684.788 L749.328 684.788 L749.887 684.788 L750.446 684.788 L751.005 684.788 L751.565 684.788 L752.124 684.788 L752.683 684.788 L753.242 684.788 L753.802 684.788 L754.361 684.788 L754.92 684.788 L755.479 684.788 L756.039 684.788 L756.598 684.788 L757.157 684.788 L757.716 684.788 L758.276 684.788 L758.835 684.788 L759.394 684.788 L759.953 684.788 L760.513 684.788 L761.072 684.788 L761.631 684.788 L762.19 684.788 L762.75 684.788 L763.309 684.788 L763.868 684.788 L764.427 684.788 L764.987 684.788 L765.546 684.788 L766.105 684.788 L766.664 684.788 L767.224 684.788 L767.783 684.788 L768.342 684.788 L768.901 684.788 L769.461 684.788 L770.02 684.788 L770.579 684.788 L771.138 684.788 L771.698 684.788 L772.257 684.788 L772.816 684.788 L773.375 684.788 L773.935 684.788 L774.494 684.788 L775.053 684.788 L775.612 684.788 L776.172 684.788 L776.731 684.788 L777.29 684.788 L777.849 684.788 L778.409 684.788 L778.968 684.788 L779.527 684.788 L780.086 684.788 L780.646 684.788 L781.205 684.788 L781.764 684.788 L782.323 684.788 L782.883 684.788 L783.442 684.788 L784.001 684.788 L784.56 684.788 L785.12 684.788 L785.679 684.788 L786.238 684.788 L786.797 684.788 L787.357 684.788 L787.916 684.788 L788.475 684.788 L789.034 684.788 L789.594 684.788 L790.153 684.788 L790.712 684.788 L791.271 684.788 L791.831 684.788 L792.39 684.788 L792.949 684.788 L793.508 684.788 L794.068 684.788 L794.627 684.788 L795.186 684.788 L795.745 684.788 L796.305 684.788 L796.864 684.788 L797.423 684.788 L797.982 684.788 L798.542 684.788 L799.101 684.788 L799.66 684.788 L800.219 684.788 L800.779 684.788 L801.338 684.788 L801.897 684.788 L802.456 684.788 L803.016 684.788 L803.575 684.788 L804.134 684.788 L804.693 684.788 L805.253 684.788 L805.812 684.788 L806.371 684.788 L806.931 684.788 L807.49 684.788 L808.049 684.788 L808.608 684.788 L809.168 684.788 L809.727 684.788 L810.286 684.788 L810.845 684.788 L811.405 684.788 L811.964 684.788 L812.523 684.788 L813.082 684.788 L813.642 684.788 L814.201 684.788 L814.76 684.788 L815.319 684.788 L815.879 684.788 L816.438 684.788 L816.997 684.788 L817.556 684.788 L818.116 684.788 L818.675 684.788 L819.234 684.788 L819.793 684.788 L820.353 684.788 L820.912 684.788 L821.471 684.788 L822.03 684.788 L822.59 684.788 L823.149 684.788 L823.708 684.788 L824.267 684.788 L824.827 684.788 L825.386 684.788 L825.945 684.788 L826.504 684.788 L827.064 684.788 L827.623 684.788 L828.182 684.788 L828.741 684.788 L829.301 684.788 L829.86 684.788 L830.419 684.788 L830.978 684.788 L831.538 684.788 L832.097 684.788 L832.656 684.788 L833.215 684.788 L833.775 684.788 L834.334 684.788 L834.893 684.788 L835.452 684.788 L836.012 684.788 L836.571 684.788 L837.13 684.788 L837.689 684.788 L838.249 684.788 L838.808 684.788 L839.367 684.788 L839.926 684.788 L840.486 684.788 L841.045 684.788 L841.604 684.788 L842.163 684.788 L842.723 684.788 L843.282 684.788 L843.841 684.788 L844.4 684.788 L844.96 684.788 L845.519 684.788 L846.078 684.788 L846.637 684.788 L847.197 684.788 L847.756 684.788 L848.315 684.788 L848.874 684.788 L849.434 684.788 L849.993 684.788 L850.552 684.788 L851.111 684.788 L851.671 684.788 L852.23 684.788 L852.789 684.788 L853.348 684.788 L853.908 684.788 L854.467 684.788 L855.026 684.788 L855.585 684.788 L856.145 684.788 L856.704 684.788 L857.263 684.788 L857.822 684.788 L858.382 684.788 L858.941 684.788 L859.5 684.788 L860.059 684.788 L860.619 684.788 L861.178 684.788 L861.737 684.788 L862.296 684.788 L862.856 684.788 L863.415 684.788 L863.974 684.788 L864.533 684.788 L865.093 684.788 L865.652 684.788 L866.211 684.788 L866.77 684.788 L867.33 684.788 L867.889 684.788 L868.448 684.788 L869.007 684.788 L869.567 684.788 L870.126 684.788 L870.685 684.788 L871.244 684.788 L871.804 684.788 L872.363 684.788 L872.922 684.788 L873.481 684.788 L874.041 684.788 L874.6 684.788 L875.159 684.788 L875.718 684.788 L876.278 684.788 L876.837 684.788 L877.396 684.788 L877.955 684.788 L878.515 684.788 L879.074 684.788 L879.633 684.788 L880.192 684.788 L880.752 684.788 L881.311 684.788 L881.87 684.788 L882.429 684.788 L882.989 684.788 L883.548 684.788 L884.107 684.788 L884.666 684.788 L885.226 684.788 L885.785 684.788 L886.344 684.788 L886.903 684.788 L887.463 684.788 L888.022 684.788 L888.581 684.788 L889.14 684.788 L889.7 684.788 L890.259 684.788 L890.818 684.788 L891.377 684.788 L891.937 684.788 L892.496 684.788 L893.055 684.788 L893.614 684.788 L894.174 684.788 L894.733 684.788 L895.292 684.788 L895.851 684.788 L896.411 684.788 L896.97 684.788 L897.529 684.788 L898.088 684.788 L898.648 684.788 L899.207 684.788 L899.766 684.788 L900.325 684.788 L900.885 684.788 L901.444 684.788 L902.003 684.788 L902.562 684.788 L903.122 684.788 L903.681 684.788 L904.24 684.788 L904.799 684.788 L905.359 684.788 L905.918 684.788 L906.477 684.788 L907.036 684.788 L907.596 684.788 L908.155 684.788 L908.714 684.788 L909.273 684.788 L909.833 684.788 L910.392 684.788 L910.951 684.788 L911.51 684.788 L912.07 684.788 L912.629 684.788 L913.188 684.788 L913.747 684.788 L914.307 684.788 L914.866 684.788 L915.425 684.788 L915.984 684.788 L916.544 684.788 L917.103 684.788 L917.662 684.788 L918.221 684.788 L918.781 684.788 L919.34 684.788 L919.899 684.788 L920.458 684.788 L921.018 684.788 L921.577 684.788 L922.136 684.788 L922.695 684.788 L923.255 684.788 L923.814 684.788 L924.373 684.788 L924.932 684.788 L925.492 684.788 L926.051 684.788 L926.61 684.788 L927.169 684.788 L927.729 684.788 L928.288 684.788 L928.847 684.788 L929.406 684.788 L929.966 684.788 L930.525 684.788 L931.084 684.788 L931.644 684.788 L932.203 684.788 L932.762 684.788 L933.321 684.788 L933.881 684.788 L934.44 684.788 L934.999 684.788 L935.558 684.788 L936.118 684.788 L936.677 684.788 L937.236 684.788 L937.795 684.788 L938.355 684.788 L938.914 684.788 L939.473 684.788 L940.032 684.788 L940.592 684.788 L941.151 684.788 L941.71 684.788 L942.269 684.788 L942.829 684.788 L943.388 684.788 L943.947 684.788 L944.506 684.788 L945.066 684.788 L945.625 684.788 L946.184 684.788 L946.743 684.788 L947.303 684.788 L947.862 684.788 L948.421 684.788 L948.98 684.788 L949.54 684.788 L950.099 684.788 L950.658 684.788 L951.217 684.788 L951.777 684.788 L952.336 684.788 L952.895 684.788 L953.454 684.788 L954.014 684.788 L954.573 684.788 L955.132 684.788 L955.691 684.788 L956.251 684.788 L956.81 684.788 L957.369 684.788 L957.928 684.788 L958.488 684.788 L959.047 684.788 L959.606 684.788 L960.165 684.788 L960.725 684.788 L961.284 684.788 L961.843 684.788 L962.402 684.788 L962.962 684.788 L963.521 684.788 L964.08 684.788 L964.639 684.788 L965.199 684.788 L965.758 684.788 L966.317 684.788 L966.876 684.788 L967.436 684.788 L967.995 684.788 L968.554 684.788 L969.113 684.788 L969.673 684.788 L970.232 684.788 L970.791 684.788 L971.35 684.788 L971.91 684.788 L972.469 684.788 L973.028 684.788 L973.587 684.788 L974.147 684.788 L974.706 684.788 L975.265 684.788 L975.824 684.788 L976.384 684.788 L976.943 684.788 L977.502 684.788 L978.061 684.788 L978.621 684.788 L979.18 684.788 L979.739 684.788 L980.298 684.788 L980.858 684.788 L981.417 684.788 L981.976 684.788 L982.535 684.788 L983.095 684.788 L983.654 684.788 L984.213 684.788 L984.772 684.788 L985.332 684.788 L985.891 684.788 L986.45 684.788 L987.009 684.788 L987.569 684.788 L988.128 684.788 L988.687 684.788 L989.246 684.788 L989.806 684.788 L990.365 684.788 L990.924 684.788 L991.483 684.788 L992.043 684.788 L992.602 684.788 L993.161 684.788 L993.72 684.788 L994.28 684.788 L994.839 684.788 L995.398 684.788 L995.957 684.788 L996.517 684.788 L997.076 684.788 L997.635 684.788 L998.194 684.788 L998.754 684.788 L999.313 684.788 L999.872 684.788 L1000.43 684.788 L1000.99 684.788 L1001.55 684.788 L1002.11 684.788 L1002.67 684.788 L1003.23 684.788 L1003.79 684.788 L1004.35 684.788 L1004.91 684.788 L1005.46 684.788 L1006.02 684.788 L1006.58 684.788 L1007.14 684.788 L1007.7 684.788 L1008.26 684.788 L1008.82 684.788 L1009.38 684.788 L1009.94 684.788 L1010.5 684.788 L1011.06 684.788 L1011.62 684.788 L1012.18 684.788 L1012.73 684.788 L1013.29 684.788 L1013.85 684.788 L1014.41 684.788 L1014.97 684.788 L1015.53 684.788 L1016.09 684.788 L1016.65 684.788 L1017.21 684.788 L1017.77 684.788 L1018.33 684.788 L1018.89 684.788 L1019.45 684.788 L1020.01 684.788 L1020.56 684.788 L1021.12 684.788 L1021.68 684.788 L1022.24 684.788 L1022.8 684.788 L1023.36 684.788 L1023.92 684.788 L1024.48 684.788 L1025.04 684.788 L1025.6 684.788 L1026.16 684.788 L1026.72 684.788 L1027.28 684.788 L1027.83 684.788 L1028.39 684.788 L1028.95 684.788 L1029.51 684.788 L1030.07 684.788 L1030.63 684.788 L1031.19 684.788 L1031.75 684.788 L1032.31 684.788 L1032.87 684.788 L1033.43 684.788 L1033.99 684.788 L1034.55 684.788 L1035.1 684.788 L1035.66 684.788 L1036.22 684.788 L1036.78 684.788 L1037.34 684.788 L1037.9 684.788 L1038.46 684.788 L1039.02 684.788 L1039.58 684.788 L1040.14 684.788 L1040.7 684.788 L1041.26 684.788 L1041.82 684.788 L1042.38 684.788 L1042.93 684.788 L1043.49 684.788 L1044.05 684.788 L1044.61 684.788 L1045.17 684.788 L1045.73 684.788 L1046.29 684.788 L1046.85 684.788 L1047.41 684.788 L1047.97 684.788 L1048.53 684.788 L1049.09 684.788 L1049.65 684.788 L1050.2 684.788 L1050.76 684.788 L1051.32 684.788 L1051.88 684.788 L1052.44 684.788 L1053 684.788 L1053.56 684.788 L1054.12 684.788 L1054.68 684.788 L1055.24 684.788 L1055.8 684.788 L1056.36 684.788 L1056.92 684.788 L1057.48 684.788 L1058.03 684.788 L1058.59 684.788 L1059.15 684.788 L1059.71 684.788 L1060.27 684.788 L1060.83 684.788 L1061.39 684.788 L1061.95 684.788 L1062.51 684.788 L1063.07 684.788 L1063.63 684.788 L1064.19 684.788 L1064.75 684.788 L1065.3 684.788 L1065.86 684.788 L1066.42 684.788 L1066.98 684.788 L1067.54 684.788 L1068.1 684.788 L1068.66 684.788 L1069.22 684.788 L1069.78 684.788 L1070.34 684.788 L1070.9 684.788 L1071.46 684.788 L1072.02 684.788 L1072.57 684.788 L1073.13 684.788 L1073.69 684.788 L1074.25 684.788 L1074.81 684.788 L1075.37 684.788 L1075.93 684.788 L1076.49 684.788 L1077.05 684.788 L1077.61 684.788 L1078.17 684.788 L1078.73 684.788 L1079.29 684.788 L1079.85 684.788 L1080.4 684.788 L1080.96 684.788 L1081.52 684.788 L1082.08 684.788 L1082.64 684.788 L1083.2 684.788 L1083.76 684.788 L1084.32 684.788 L1084.88 684.788 L1085.44 684.788 L1086 684.788 L1086.56 684.788 L1087.12 684.788 L1087.67 684.788 L1088.23 684.788 L1088.79 684.788 L1089.35 684.788 L1089.91 684.788 L1090.47 684.788 L1091.03 684.788 L1091.59 684.788 L1092.15 684.788 L1092.71 684.788 L1093.27 684.788 L1093.83 684.788 L1094.39 684.788 L1094.94 684.788 L1095.5 684.788 L1096.06 684.788 L1096.62 684.788 L1097.18 684.788 L1097.74 684.788 L1098.3 684.788 L1098.86 684.788 L1099.42 684.788 L1099.98 684.788 L1100.54 684.788 L1101.1 684.788 L1101.66 684.788 L1102.22 684.788 L1102.77 684.788 L1103.33 684.788 L1103.89 684.788 L1104.45 684.788 L1105.01 684.788 L1105.57 684.788 L1106.13 684.788 L1106.69 684.788 L1107.25 684.788 L1107.81 684.788 L1108.37 684.788 L1108.93 684.788 L1109.49 684.788 L1110.04 684.788 L1110.6 684.788 L1111.16 684.788 L1111.72 684.788 L1112.28 684.788 L1112.84 684.788 L1113.4 684.788 L1113.96 684.788 L1114.52 684.788 L1115.08 684.788 L1115.64 684.788 L1116.2 684.788 L1116.76 684.788 L1117.31 684.788 L1117.87 684.788 L1118.43 684.788 L1118.99 684.788 L1119.55 684.788 L1120.11 684.788 L1120.67 684.788 L1121.23 684.788 L1121.79 684.788 L1122.35 684.788 L1122.91 684.788 L1123.47 684.788 L1124.03 684.788 L1124.59 684.788 L1125.14 684.788 L1125.7 684.788 L1126.26 684.788 L1126.82 684.788 L1127.38 684.788 L1127.94 684.788 L1128.5 684.788 L1129.06 684.788 L1129.62 684.788 L1130.18 684.788 L1130.74 684.788 L1131.3 684.788 L1131.86 684.788 L1132.41 684.788 L1132.97 684.788 L1133.53 684.788 L1134.09 684.788 L1134.65 684.788 L1135.21 684.788 L1135.77 684.788 L1136.33 684.788 L1136.89 684.788 L1137.45 684.788 L1138.01 684.788 L1138.57 684.788 L1139.13 684.788 L1139.68 684.788 L1140.24 684.788 L1140.8 684.788 L1141.36 684.788 L1141.92 684.788 L1142.48 684.788 L1143.04 684.788 L1143.6 684.788 L1144.16 684.788 L1144.72 684.788 L1145.28 684.788 L1145.84 684.788 L1146.4 684.788 L1146.96 684.788 L1147.51 684.788 L1148.07 684.788 L1148.63 684.788 L1149.19 684.788 L1149.75 684.788 L1150.31 684.788 L1150.87 684.788 L1151.43 684.788 L1151.99 684.788 L1152.55 684.788 L1153.11 684.788 L1153.67 684.788 L1154.23 684.788 L1154.78 684.788 L1155.34 684.788 L1155.9 684.788 L1156.46 684.788 L1157.02 684.788 L1157.58 684.788 L1158.14 684.788 L1158.7 684.788 L1159.26 684.788 L1159.82 684.788 L1160.38 684.788 L1160.94 684.788 L1161.5 684.788 L1162.05 684.788 L1162.61 684.788 L1163.17 684.788 L1163.73 684.788 L1164.29 684.788 L1164.85 684.788 L1165.41 684.788 L1165.97 684.788 L1166.53 684.788 L1167.09 684.788 L1167.65 684.788 L1168.21 684.788 L1168.77 684.788 L1169.33 684.788 L1169.88 684.788 L1170.44 684.788 L1171 684.788 L1171.56 684.788 L1172.12 684.788 L1172.68 684.788 L1173.24 684.788 L1173.8 684.788 L1174.36 684.788 L1174.92 684.788 L1175.48 684.788 L1176.04 684.788 L1176.6 684.788 L1177.15 684.788 L1177.71 684.788 L1178.27 684.788 L1178.83 684.788 L1179.39 684.788 L1179.95 684.788 L1180.51 684.788 L1181.07 684.788 L1181.63 684.788 L1182.19 684.788 L1182.75 684.788 L1183.31 684.788 L1183.87 684.788 L1184.43 684.788 L1184.98 684.788 L1185.54 684.788 L1186.1 684.788 L1186.66 684.788 L1187.22 684.788 L1187.78 684.788 L1188.34 684.788 L1188.9 684.788 L1189.46 684.788 L1190.02 684.788 L1190.58 684.788 L1191.14 684.788 L1191.7 684.788 L1192.25 684.788 L1192.81 684.788 L1193.37 684.788 L1193.93 684.788 L1194.49 684.788 L1195.05 684.788 L1195.61 684.788 L1196.17 684.788 L1196.73 684.788 L1197.29 684.788 L1197.85 684.788 L1198.41 684.788 L1198.97 684.788 L1199.52 684.788 L1200.08 684.788 L1200.64 684.788 L1201.2 684.788 L1201.76 684.788 L1202.32 684.788 L1202.88 684.788 L1203.44 684.788 L1204 684.788 L1204.56 684.788 L1205.12 684.788 L1205.68 684.788 L1206.24 684.788 L1206.8 684.788 L1207.35 684.788 L1207.91 684.788 L1208.47 684.788 L1209.03 684.788 L1209.59 684.788 L1210.15 684.788 L1210.71 684.788 L1211.27 684.788 L1211.83 684.788 L1212.39 684.788 L1212.95 684.788 L1213.51 684.788 L1214.07 684.788 L1214.62 684.788 L1215.18 684.788 L1215.74 684.788 L1216.3 684.788 L1216.86 684.788 L1217.42 684.788 L1217.98 684.788 L1218.54 684.788 L1219.1 684.788 L1219.66 684.788 L1220.22 684.788 L1220.78 684.788 L1221.34 684.788 L1221.89 684.788 L1222.45 684.788 L1223.01 684.788 L1223.57 684.788 L1224.13 684.788 L1224.69 684.788 L1225.25 684.788 L1225.81 684.788 L1226.37 684.788 L1226.93 684.788 L1227.49 684.788 L1228.05 684.788 L1228.61 684.788 L1229.17 684.788 L1229.72 684.788 L1230.28 684.788 L1230.84 684.788 L1231.4 684.788 L1231.96 684.788 L1232.52 684.788 L1233.08 684.788 L1233.64 684.788 L1234.2 684.788 L1234.76 684.788 L1235.32 684.788 L1235.88 684.788 L1236.44 684.788 L1236.99 684.788 L1237.55 684.788 L1238.11 684.788 L1238.67 684.788 L1239.23 684.788 L1239.79 684.788 L1240.35 684.788 L1240.91 684.788 L1241.47 684.788 L1242.03 684.788 L1242.59 684.788 L1243.15 684.788 L1243.71 684.788 L1244.26 684.788 L1244.82 684.788 L1245.38 684.788 L1245.94 684.788 L1246.5 684.788 L1247.06 684.788 L1247.62 684.788 L1248.18 684.788 L1248.74 684.788 L1249.3 684.788 L1249.86 684.788 L1250.42 684.788 L1250.98 684.788 L1251.54 684.788 L1252.09 684.788 L1252.65 684.788 L1253.21 684.788 L1253.77 684.788 L1254.33 684.788 L1254.89 684.788 L1255.45 684.788 L1256.01 684.788 L1256.57 684.788 L1257.13 684.788 L1257.69 684.788 L1258.25 684.788 L1258.81 684.788 L1259.36 684.788 L1259.92 684.788 L1260.48 684.788 L1261.04 684.788 L1261.6 684.788 L1262.16 684.788 L1262.72 684.788 L1263.28 684.788 L1263.84 684.788 L1264.4 684.788 L1264.96 684.788 L1265.52 684.788 L1266.08 684.788 L1266.63 684.788 L1267.19 684.788 L1267.75 684.788 L1268.31 684.788 L1268.87 684.788 L1269.43 684.788 L1269.99 684.788 L1270.55 684.788 L1271.11 684.788 L1271.67 684.788 L1272.23 684.788 L1272.79 684.788 L1273.35 684.788 L1273.91 684.788 L1274.46 684.788 L1275.02 684.788 L1275.58 684.788 L1276.14 684.788 L1276.7 684.788 L1277.26 684.788 L1277.82 684.788 L1278.38 684.788 L1278.94 684.788 L1279.5 684.788 L1280.06 684.788 L1280.62 684.788 L1281.18 684.788 L1281.73 684.788 L1282.29 684.788 L1282.85 684.788 L1283.41 684.788 L1283.97 684.788 L1284.53 684.788 L1285.09 684.788 L1285.65 684.788 L1286.21 684.788 L1286.77 684.788 L1287.33 684.788 L1287.89 684.788 L1288.45 684.788 L1289 684.788 L1289.56 684.788 L1290.12 684.788 L1290.68 684.788 L1291.24 684.788 L1291.8 684.788 L1292.36 684.788 L1292.92 684.788 L1293.48 684.788 L1294.04 684.788 L1294.6 684.788 L1295.16 684.788 L1295.72 684.788 L1296.28 684.788 L1296.83 684.788 L1297.39 684.788 L1297.95 684.788 L1298.51 684.788 L1299.07 684.788 L1299.63 684.788 L1300.19 684.788 L1300.75 684.788 L1301.31 684.788 L1301.87 684.788 L1302.43 684.788 L1302.99 684.788 L1303.55 684.788 L1304.1 684.788 L1304.66 684.788 L1305.22 684.788 L1305.78 684.788 L1306.34 684.788 L1306.9 684.788 L1307.46 684.788 L1308.02 684.788 L1308.58 684.788 L1309.14 684.788 L1309.7 684.788 L1310.26 684.788 L1310.82 684.788 L1311.38 684.788 L1311.93 684.788 L1312.49 684.788 L1313.05 684.788 L1313.61 684.788 L1314.17 684.788 L1314.73 684.788 L1315.29 684.788 L1315.85 684.788 L1316.41 684.788 L1316.97 684.788 L1317.53 684.788 L1318.09 684.788 L1318.65 684.788 L1319.2 684.788 L1319.76 684.788 L1320.32 684.788 L1320.88 684.788 L1321.44 684.788 L1322 684.788 L1322.56 684.788 L1323.12 684.788 L1323.68 684.788 L1324.24 684.788 L1324.8 684.788 L1325.36 684.788 L1325.92 684.788 L1326.47 684.788 L1327.03 684.788 L1327.59 684.788 L1328.15 684.788 L1328.71 684.788 L1329.27 684.788 L1329.83 684.788 L1330.39 684.788 L1330.95 684.788 L1331.51 684.788 L1332.07 684.788 L1332.63 684.788 L1333.19 684.788 L1333.75 684.788 L1334.3 684.788 L1334.86 684.788 L1335.42 684.788 L1335.98 684.788 L1336.54 684.788 L1337.1 684.788 L1337.66 684.788 L1338.22 684.788 L1338.78 684.788 L1339.34 684.788 L1339.9 684.788 L1340.46 684.788 L1341.02 684.788 L1341.57 684.788 L1342.13 684.788 L1342.69 684.788 L1343.25 684.788 L1343.81 684.788 L1344.37 684.788 L1344.93 684.788 L1345.49 684.788 L1346.05 684.788 L1346.61 684.788 L1347.17 684.788 L1347.73 684.788 L1348.29 684.788 L1348.84 684.788 L1349.4 684.788 L1349.96 684.788 L1350.52 684.788 L1351.08 684.788 L1351.64 684.788 L1352.2 684.788 L1352.76 684.788 L1353.32 684.788 L1353.88 684.788 L1354.44 684.788 L1355 684.788 L1355.56 684.788 L1356.12 684.788 L1356.67 684.788 L1357.23 684.788 L1357.79 684.788 L1358.35 684.788 L1358.91 684.788 L1359.47 684.788 L1360.03 684.788 L1360.59 684.788 L1361.15 684.788 L1361.71 684.788 L1362.27 684.788 L1362.83 684.788 L1363.39 684.788 L1363.94 684.788 L1364.5 684.788 L1365.06 684.788 L1365.62 684.788 L1366.18 684.788 L1366.74 684.788 L1367.3 684.788 L1367.86 684.788 L1368.42 684.788 L1368.98 684.788 L1369.54 684.788 L1370.1 684.788 L1370.66 684.788 L1371.21 684.788 L1371.77 684.788 L1372.33 684.788 L1372.89 684.788 L1373.45 684.788 L1374.01 684.788 L1374.57 684.788 L1375.13 684.788 L1375.69 684.788 L1376.25 684.788 L1376.81 684.788 L1377.37 684.788 L1377.93 684.788 L1378.49 684.788 L1379.04 684.788 L1379.6 684.788 L1380.16 684.788 L1380.72 684.788 L1381.28 684.788 L1381.84 684.788 L1382.4 684.788 L1382.96 684.788 L1383.52 684.788 L1384.08 684.788 L1384.64 684.788 L1385.2 684.788 L1385.76 684.788 L1386.31 684.788 L1386.87 684.788 L1387.43 684.788 L1387.99 684.788 L1388.55 684.788 L1389.11 684.788 L1389.67 684.788 L1390.23 684.788 L1390.79 684.788 L1391.35 684.788 L1391.91 684.788 L1392.47 684.788 L1393.03 684.788 L1393.58 684.788 L1394.14 684.788 L1394.7 684.788 L1395.26 684.788 L1395.82 684.788 L1396.38 684.788 L1396.94 684.788 L1397.5 684.788 L1398.06 684.788 L1398.62 684.788 L1399.18 684.788 L1399.74 684.788 L1400.3 684.788 L1400.86 684.788 L1401.41 684.788 L1401.97 684.788 L1402.53 684.788 L1403.09 684.788 L1403.65 684.788 L1404.21 684.788 L1404.77 684.788 L1405.33 684.788 L1405.89 684.788 L1406.45 684.788 L1407.01 684.788 L1407.57 684.788 L1408.13 684.788 L1408.68 684.788 L1409.24 684.788 L1409.8 684.788 L1410.36 684.788 L1410.92 684.788 L1411.48 684.788 L1412.04 684.788 L1412.6 684.788 L1413.16 684.788 L1413.72 684.788 L1414.28 684.788 L1414.84 684.788 L1415.4 684.788 L1415.95 684.788 L1416.51 684.788 L1417.07 684.788 L1417.63 684.788 L1418.19 684.788 L1418.75 684.788 L1419.31 684.788 L1419.87 684.788 L1420.43 684.788 L1420.99 684.788 L1421.55 684.788 L1422.11 684.788 L1422.67 684.788 L1423.23 684.788 L1423.78 684.788 L1424.34 684.788 L1424.9 684.788 L1425.46 684.788 L1426.02 684.788 L1426.58 684.788 L1427.14 684.788 L1427.7 684.788 L1428.26 684.788 L1428.82 684.788 L1429.38 684.788 L1429.94 684.788 L1430.5 684.788 L1431.05 684.788 L1431.61 684.788 L1432.17 684.788 L1432.73 684.788 L1433.29 684.788 L1433.85 684.788 L1434.41 684.788 L1434.97 684.788 L1435.53 684.788 L1436.09 684.788 L1436.65 684.788 L1437.21 684.788 L1437.77 684.788 L1438.33 684.788 L1438.88 684.788 L1439.44 684.788 L1440 684.788 L1440.56 684.788 L1441.12 684.788 L1441.68 684.788 L1442.24 684.788 L1442.8 684.788 L1443.36 684.788 L1443.92 684.788 L1444.48 684.788 L1445.04 684.788 L1445.6 684.788 L1446.15 684.788 L1446.71 684.788 L1447.27 684.788 L1447.83 684.788 L1448.39 684.788 L1448.95 684.788 L1449.51 684.788 L1450.07 684.788 L1450.63 684.788 L1451.19 684.788 L1451.75 684.788 L1452.31 684.788 L1452.87 684.788 L1453.42 684.788 L1453.98 684.788 L1454.54 684.788 L1455.1 684.788 L1455.66 684.788 L1456.22 684.788 L1456.78 684.788 L1457.34 684.788 L1457.9 684.788 L1458.46 684.788 L1459.02 684.788 L1459.58 684.788 L1460.14 684.788 L1460.7 684.788 L1461.25 684.788 L1461.81 684.788 L1462.37 684.788 L1462.93 684.788 L1463.49 684.788 L1464.05 684.788 L1464.61 684.788 L1465.17 684.788 L1465.73 684.788 L1466.29 684.788 L1466.85 684.788 L1467.41 684.788 L1467.97 684.788 L1468.52 684.788 L1469.08 684.788 L1469.64 684.788 L1470.2 684.788 L1470.76 684.788 L1471.32 684.788 L1471.88 684.788 L1472.44 684.788 L1473 684.788 L1473.56 684.788 L1474.12 684.788 L1474.68 684.788 L1475.24 684.788 L1475.79 684.788 L1476.35 684.788 L1476.91 684.788 L1477.47 684.788 L1478.03 684.788 L1478.59 684.788 L1479.15 684.788 L1479.71 684.788 L1480.27 684.788 L1480.83 684.788 L1481.39 684.788 L1481.95 684.788 L1482.51 684.788 L1483.07 684.788 L1483.62 684.788 L1484.18 684.788 L1484.74 684.788 L1485.3 684.788 L1485.86 684.788 L1486.42 684.788 L1486.98 684.788 L1487.54 684.788 L1488.1 684.788 L1488.66 684.788 L1489.22 684.788 L1489.78 684.788 L1490.34 684.788 L1490.89 684.788 L1491.45 684.788 L1492.01 684.788 L1492.57 684.788 L1493.13 684.788 L1493.69 684.788 L1494.25 684.788 L1494.81 684.788 L1495.37 684.788 L1495.93 684.788 L1496.49 684.788 L1497.05 684.788 L1497.61 684.788 L1498.16 684.788 L1498.72 684.788 L1499.28 684.788 L1499.84 684.788 L1500.4 684.788 L1500.96 684.788 L1501.52 684.788 L1502.08 684.788 L1502.64 684.788 L1503.2 684.788 L1503.76 684.788 L1504.32 684.788 L1504.88 684.788 L1505.44 684.788 L1505.99 684.788 L1506.55 684.788 L1507.11 684.788 L1507.67 684.788 L1508.23 684.788 L1508.79 684.788 L1509.35 684.788 L1509.91 684.788 L1510.47 684.788 L1511.03 684.788 L1511.59 684.788 L1512.15 684.788 L1512.71 684.788 L1513.26 684.788 L1513.82 684.788 L1514.38 684.788 L1514.94 684.788 L1515.5 684.788 L1516.06 684.788 L1516.62 684.788 L1517.18 684.788 L1517.74 684.788 L1518.3 684.788 L1518.86 684.788 L1519.42 684.788 L1519.98 684.788 L1520.53 684.788 L1521.09 684.788 L1521.65 684.788 L1522.21 684.788 L1522.77 684.788 L1523.33 684.788 L1523.89 684.788 L1524.45 684.788 L1525.01 684.788 L1525.57 684.788 L1526.13 684.788 L1526.69 684.788 L1527.25 684.788 L1527.81 684.788 L1528.36 684.788 L1528.92 684.788 L1529.48 684.788 L1530.04 684.788 L1530.6 684.788 L1531.16 684.788 L1531.72 684.788 L1532.28 684.788 L1532.84 684.788 L1533.4 684.788 L1533.96 684.788 L1534.52 684.788 L1535.08 684.788 L1535.63 684.788 L1536.19 684.788 L1536.75 684.788 L1537.31 684.788 L1537.87 684.788 L1538.43 684.788 L1538.99 684.788 L1539.55 684.788 L1540.11 684.788 L1540.67 684.788 L1541.23 684.788 L1541.79 684.788 L1542.35 684.788 L1542.9 684.788 L1543.46 684.788 L1544.02 684.788 L1544.58 684.788 L1545.14 684.788 L1545.7 684.788 L1546.26 684.788 L1546.82 684.788 L1547.38 684.788 L1547.94 684.788 L1548.5 684.788 L1549.06 684.788 L1549.62 684.788 L1550.18 684.788 L1550.73 684.788 L1551.29 684.788 L1551.85 684.788 L1552.41 684.788 L1552.97 684.788 L1553.53 684.788 L1554.09 684.788 L1554.65 684.788 L1555.21 684.788 L1555.77 684.788 L1556.33 684.788 L1556.89 684.788 L1557.45 684.788 L1558 684.788 L1558.56 684.788 L1559.12 684.788 L1559.68 684.788 L1560.24 684.788 L1560.8 684.788 L1561.36 684.788 L1561.92 684.788 L1562.48 684.788 L1563.04 684.788 L1563.6 684.788 L1564.16 684.788 L1564.72 684.788 L1565.28 684.788 L1565.83 684.788 L1566.39 684.788 L1566.95 684.788 L1567.51 684.788 L1568.07 684.788 L1568.63 684.788 L1569.19 684.788 L1569.75 684.788 L1570.31 684.788 L1570.87 684.788 L1571.43 684.788 L1571.99 684.788 L1572.55 684.788 L1573.1 684.788 L1573.66 684.788 L1574.22 684.788 L1574.78 684.788 L1575.34 684.788 L1575.9 684.788 L1576.46 684.788 L1577.02 684.788 L1577.58 684.788 L1578.14 684.788 L1578.7 684.788 L1579.26 684.788 L1579.82 684.788 L1580.37 684.788 L1580.93 684.788 L1581.49 684.788 L1582.05 684.788 L1582.61 684.788 L1583.17 684.788 L1583.73 684.788 L1584.29 684.788 L1584.85 684.788 L1585.41 684.788 L1585.97 684.788 L1586.53 684.788 L1587.09 684.788 L1587.65 684.788 L1588.2 684.788 L1588.76 684.788 L1589.32 684.788 L1589.88 684.788 L1590.44 684.788 L1591 684.788 L1591.56 684.788 L1592.12 684.788 L1592.68 684.788 L1593.24 684.788 L1593.8 684.788 L1594.36 684.788 L1594.92 684.788 L1595.47 684.788 L1596.03 684.788 L1596.59 684.788 L1597.15 684.788 L1597.71 684.788 L1598.27 684.788 L1598.83 684.788 L1599.39 684.788 L1599.95 684.788 L1600.51 684.788 L1601.07 684.788 L1601.63 684.788 L1602.19 684.788 L1602.74 684.788 L1603.3 684.788 L1603.86 684.788 L1604.42 684.788 L1604.98 684.788 L1605.54 684.788 L1606.1 684.788 L1606.66 684.788 L1607.22 684.788 L1607.78 684.788 L1608.34 684.788 L1608.9 684.788 L1609.46 684.788 L1610.02 684.788 L1610.57 684.788 L1611.13 684.788 L1611.69 684.788 L1612.25 684.788 L1612.81 684.788 L1613.37 684.788 L1613.93 684.788 L1614.49 684.788 L1615.05 684.788 L1615.61 684.788 L1616.17 684.788 L1616.73 684.788 L1617.29 684.788 L1617.84 684.788 L1618.4 684.788 L1618.96 684.788 L1619.52 684.788 L1620.08 684.788 L1620.64 684.788 L1621.2 684.788 L1621.76 684.788 L1622.32 684.788 L1622.88 684.788 L1623.44 684.788 L1624 684.788 L1624.56 684.788 L1625.11 684.788 L1625.67 684.788 L1626.23 684.788 L1626.79 684.788 L1627.35 684.788 L1627.91 684.788 L1628.47 684.788 L1629.03 684.788 L1629.59 684.788 L1630.15 684.788 L1630.71 684.788 L1631.27 684.788 L1631.83 684.788 L1632.39 684.788 L1632.94 684.788 L1633.5 684.788 L1634.06 684.788 L1634.62 684.788 L1635.18 684.788 L1635.74 684.788 L1636.3 684.788 L1636.86 684.788 L1637.42 684.788 L1637.98 684.788 L1638.54 684.788 L1639.1 684.788 L1639.66 684.788 L1640.21 684.788 L1640.77 684.788 L1641.33 684.788 L1641.89 684.788 L1642.45 684.788 L1643.01 684.788 L1643.57 684.788 L1644.13 684.788 L1644.69 684.788 L1645.25 684.788 L1645.81 684.788 L1646.37 684.788 L1646.93 684.788 L1647.48 684.788 L1648.04 684.788 L1648.6 684.788 L1649.16 684.788 L1649.72 684.788 L1650.28 684.788 L1650.84 684.788 L1651.4 684.788 L1651.96 684.788 L1652.52 684.788 L1653.08 684.788 L1653.64 684.788 L1654.2 684.788 L1654.76 684.788 L1655.31 684.788 L1655.87 684.788 L1656.43 684.788 L1656.99 684.788 L1657.55 684.788 L1658.11 684.788 L1658.67 684.788 L1659.23 684.788 L1659.79 684.788 L1660.35 684.788 L1660.91 684.788 L1661.47 684.788 L1662.03 684.788 L1662.58 684.788 L1663.14 684.788 L1663.7 684.788 L1664.26 684.788 L1664.82 684.788 L1665.38 684.788 L1665.94 684.788 L1666.5 684.788 L1667.06 684.788 L1667.62 684.788 L1668.18 684.788 L1668.74 684.788 L1669.3 684.788 L1669.85 684.788 L1670.41 684.788 L1670.97 684.788 L1671.53 684.788 L1672.09 684.788 L1672.65 684.788 L1673.21 684.788 L1673.77 684.788 L1674.33 684.788 L1674.89 684.788 L1675.45 684.788 L1676.01 684.788 L1676.57 684.788 L1677.13 684.788 L1677.68 684.788 L1678.24 684.788 L1678.8 684.788 L1679.36 684.788 L1679.92 684.788 L1680.48 684.788 L1681.04 684.788 L1681.6 684.788 L1682.16 684.788 L1682.72 684.788 L1683.28 684.788 L1683.84 684.788 L1684.4 684.788 L1684.95 684.788 L1685.51 684.788 L1686.07 684.788 L1686.63 684.788 L1687.19 684.788 L1687.75 684.788 L1688.31 684.788 L1688.87 684.788 L1689.43 684.788 L1689.99 684.788 L1690.55 684.788 L1691.11 684.788 L1691.67 684.788 L1692.23 684.788 L1692.78 684.788 L1693.34 684.788 L1693.9 684.788 L1694.46 684.788 L1695.02 684.788 L1695.58 684.788 L1696.14 684.788 L1696.7 684.788 L1697.26 684.788 L1697.82 684.788 L1698.38 684.788 L1698.94 684.788 L1699.5 684.788 L1700.05 684.788 L1700.61 684.788 L1701.17 684.788 L1701.73 684.788 L1702.29 684.788 L1702.85 684.788 L1703.41 684.788 L1703.97 684.788 L1704.53 684.788 L1705.09 684.788 L1705.65 684.788 L1706.21 684.788 L1706.77 684.788 L1707.32 684.788 L1707.88 684.788 L1708.44 684.788 L1709 684.788 L1709.56 684.788 L1710.12 684.788 L1710.68 684.788 L1711.24 684.788 L1711.8 684.788 L1712.36 684.788 L1712.92 684.788 L1713.48 684.788 L1714.04 684.788 L1714.6 684.788 L1715.15 684.788 L1715.71 684.788 L1716.27 684.788 L1716.83 684.788 L1717.39 684.788 L1717.95 684.788 L1718.51 684.788 L1719.07 684.788 L1719.63 684.788 L1720.19 684.788 L1720.75 684.788 L1721.31 684.788 L1721.87 684.788 L1722.42 684.788 L1722.98 684.788 L1723.54 684.788 L1724.1 684.788 L1724.66 684.788 L1725.22 684.788 L1725.78 684.788 L1726.34 684.788 L1726.9 684.788 L1727.46 684.788 L1728.02 684.788 L1728.58 684.788 L1729.14 684.788 L1729.69 684.788 L1730.25 684.788 L1730.81 684.788 L1731.37 684.788 L1731.93 684.788 L1732.49 684.788 L1733.05 684.788 L1733.61 684.788 L1734.17 684.788 L1734.73 684.788 L1735.29 684.788 L1735.85 684.788 L1736.41 684.788 L1736.97 684.788 L1737.52 684.788 L1738.08 684.788 L1738.64 684.788 L1739.2 684.788 L1739.76 684.788 L1740.32 684.788 L1740.88 684.788 L1741.44 684.788 L1742 684.788 L1742.56 684.788 L1743.12 684.788 L1743.68 684.788 L1744.24 684.788 L1744.79 684.788 L1745.35 684.788 L1745.91 684.788 L1746.47 684.788 L1747.03 684.788 L1747.59 684.788 L1748.15 684.788 L1748.71 684.788 L1749.27 684.788 L1749.83 684.788 L1750.39 684.788 L1750.95 684.788 L1751.51 684.788 L1752.06 684.788 L1752.62 684.788 L1753.18 684.788 L1753.74 684.788 L1754.3 684.788 L1754.86 684.788 L1755.42 684.788 L1755.98 684.788 L1756.54 684.788 L1757.1 684.788 L1757.66 684.788 L1758.22 684.788 L1758.78 684.788 L1759.34 684.788 L1759.89 684.788 L1760.45 684.788 L1761.01 684.788 L1761.57 684.788 L1762.13 684.788 L1762.69 684.788 L1763.25 684.788 L1763.81 684.788 L1764.37 684.788 L1764.93 684.788 L1765.49 684.788 L1766.05 684.788 L1766.61 684.788 L1767.16 684.788 L1767.72 684.788 L1768.28 684.788 L1768.84 684.788 L1769.4 684.788 L1769.96 684.788 L1770.52 684.788 L1771.08 684.788 L1771.64 684.788 L1772.2 684.788 L1772.76 684.788 L1773.32 684.788 L1773.88 684.788 L1774.43 684.788 L1774.99 684.788 L1775.55 684.788 L1776.11 684.788 L1776.67 684.788 L1777.23 684.788 L1777.79 684.788 L1778.35 684.788 L1778.91 684.788 L1779.47 684.788 L1780.03 684.788 L1780.59 684.788 L1781.15 684.788 L1781.71 684.788 L1782.26 684.788 L1782.82 684.788 L1783.38 684.788 L1783.94 684.788 L1784.5 684.788 L1785.06 684.788 L1785.62 684.788 L1786.18 684.788 L1786.74 684.788 L1787.3 684.788 L1787.86 684.788 L1788.42 684.788 L1788.98 684.788 L1789.53 684.788 L1790.09 684.788 L1790.65 684.788 L1791.21 684.788 L1791.77 684.788 L1792.33 684.788 L1792.89 684.788 L1793.45 684.788 L1794.01 684.788 L1794.57 684.788 L1795.13 684.788 L1795.69 684.788 L1796.25 684.788 L1796.8 684.788 L1797.36 684.788 L1797.92 684.788 L1798.48 684.788 L1799.04 684.788 L1799.6 684.788 L1800.16 684.788 L1800.72 684.788 L1801.28 684.788 L1801.84 684.788 L1802.4 684.788 L1802.96 684.788 L1803.52 684.788 L1804.08 684.788 L1804.63 684.788 L1805.19 684.788 L1805.75 684.788 L1806.31 684.788 L1806.87 684.788 L1807.43 684.788 L1807.99 684.788 L1808.55 684.788 L1809.11 684.788 L1809.67 684.788 L1810.23 684.788 L1810.79 684.788 L1811.35 684.788 L1811.9 684.788 L1812.46 684.788 L1813.02 684.788 L1813.58 684.788 L1814.14 684.788 L1814.7 684.788 L1815.26 684.788 L1815.82 684.788 L1816.38 684.788 L1816.94 684.788 L1817.5 684.788 L1818.06 684.788 L1818.62 684.788 L1819.18 684.788 L1819.73 684.788 L1820.29 684.788 L1820.85 684.788 L1821.41 684.788 L1821.97 684.788 L1822.53 684.788 L1823.09 684.788 L1823.65 684.788 L1824.21 684.788 L1824.77 684.788 L1825.33 684.788 L1825.89 684.788 L1826.45 684.788 L1827 684.788 L1827.56 684.788 L1828.12 684.788 L1828.68 684.788 L1829.24 684.788 L1829.8 684.788 L1830.36 684.788 L1830.92 684.788 L1831.48 684.788 L1832.04 684.788 L1832.6 684.788 L1833.16 684.788 L1833.72 684.788 L1834.27 684.788 L1834.83 684.788 L1835.39 684.788 L1835.95 684.788 L1836.51 684.788 L1837.07 684.788 L1837.63 684.788 L1838.19 684.788 L1838.19 683.095 L1837.63 683.095 L1837.07 683.095 L1836.51 683.095 L1835.95 683.095 L1835.39 683.095 L1834.83 683.095 L1834.27 683.095 L1833.72 683.095 L1833.16 683.095 L1832.6 683.095 L1832.04 683.095 L1831.48 683.095 L1830.92 683.095 L1830.36 683.095 L1829.8 683.095 L1829.24 683.095 L1828.68 683.095 L1828.12 683.095 L1827.56 683.095 L1827 683.095 L1826.45 683.095 L1825.89 683.095 L1825.33 683.095 L1824.77 683.095 L1824.21 683.095 L1823.65 683.095 L1823.09 683.095 L1822.53 683.095 L1821.97 683.095 L1821.41 683.095 L1820.85 683.095 L1820.29 683.095 L1819.73 683.095 L1819.18 683.095 L1818.62 683.095 L1818.06 683.095 L1817.5 683.095 L1816.94 683.095 L1816.38 683.095 L1815.82 683.095 L1815.26 683.095 L1814.7 683.095 L1814.14 683.095 L1813.58 683.095 L1813.02 683.095 L1812.46 683.095 L1811.9 683.095 L1811.35 683.095 L1810.79 683.095 L1810.23 683.095 L1809.67 683.095 L1809.11 683.095 L1808.55 683.095 L1807.99 683.095 L1807.43 683.095 L1806.87 683.095 L1806.31 683.095 L1805.75 683.095 L1805.19 683.095 L1804.63 683.095 L1804.08 683.095 L1803.52 683.095 L1802.96 683.095 L1802.4 683.095 L1801.84 683.095 L1801.28 683.095 L1800.72 683.095 L1800.16 683.095 L1799.6 683.095 L1799.04 683.095 L1798.48 683.095 L1797.92 683.095 L1797.36 683.095 L1796.8 683.095 L1796.25 683.095 L1795.69 683.095 L1795.13 683.095 L1794.57 683.095 L1794.01 683.095 L1793.45 683.095 L1792.89 683.095 L1792.33 683.095 L1791.77 683.095 L1791.21 683.095 L1790.65 683.095 L1790.09 683.095 L1789.53 683.095 L1788.98 683.095 L1788.42 683.095 L1787.86 683.095 L1787.3 683.095 L1786.74 683.095 L1786.18 683.095 L1785.62 683.095 L1785.06 683.095 L1784.5 683.095 L1783.94 683.095 L1783.38 683.095 L1782.82 683.095 L1782.26 683.095 L1781.71 683.095 L1781.15 683.095 L1780.59 683.095 L1780.03 683.095 L1779.47 683.095 L1778.91 683.095 L1778.35 683.095 L1777.79 683.095 L1777.23 683.095 L1776.67 683.095 L1776.11 683.095 L1775.55 683.095 L1774.99 683.095 L1774.43 683.095 L1773.88 683.095 L1773.32 683.095 L1772.76 683.095 L1772.2 683.095 L1771.64 683.095 L1771.08 683.095 L1770.52 683.095 L1769.96 683.095 L1769.4 683.095 L1768.84 683.095 L1768.28 683.095 L1767.72 683.095 L1767.16 683.095 L1766.61 683.095 L1766.05 683.095 L1765.49 683.095 L1764.93 683.095 L1764.37 683.095 L1763.81 683.095 L1763.25 683.095 L1762.69 683.095 L1762.13 683.095 L1761.57 683.095 L1761.01 683.095 L1760.45 683.095 L1759.89 683.095 L1759.34 683.095 L1758.78 683.095 L1758.22 683.095 L1757.66 683.095 L1757.1 683.095 L1756.54 683.095 L1755.98 683.095 L1755.42 683.095 L1754.86 683.095 L1754.3 683.095 L1753.74 683.095 L1753.18 683.095 L1752.62 683.095 L1752.06 683.095 L1751.51 683.095 L1750.95 683.095 L1750.39 683.095 L1749.83 683.095 L1749.27 683.095 L1748.71 683.095 L1748.15 683.095 L1747.59 683.095 L1747.03 683.095 L1746.47 683.095 L1745.91 683.095 L1745.35 683.095 L1744.79 683.095 L1744.24 683.095 L1743.68 683.095 L1743.12 683.095 L1742.56 683.095 L1742 683.095 L1741.44 683.095 L1740.88 683.095 L1740.32 683.095 L1739.76 683.095 L1739.2 683.095 L1738.64 683.095 L1738.08 683.095 L1737.52 683.095 L1736.97 683.095 L1736.41 683.095 L1735.85 683.095 L1735.29 683.095 L1734.73 683.095 L1734.17 683.095 L1733.61 683.095 L1733.05 683.095 L1732.49 683.095 L1731.93 683.095 L1731.37 683.095 L1730.81 683.095 L1730.25 683.095 L1729.69 683.095 L1729.14 683.095 L1728.58 683.095 L1728.02 683.095 L1727.46 683.095 L1726.9 683.095 L1726.34 683.095 L1725.78 683.095 L1725.22 683.095 L1724.66 683.095 L1724.1 683.095 L1723.54 683.095 L1722.98 683.095 L1722.42 683.095 L1721.87 683.095 L1721.31 683.095 L1720.75 683.095 L1720.19 683.095 L1719.63 683.095 L1719.07 683.095 L1718.51 683.095 L1717.95 683.095 L1717.39 683.095 L1716.83 683.095 L1716.27 683.095 L1715.71 683.095 L1715.15 683.095 L1714.6 683.095 L1714.04 683.095 L1713.48 683.095 L1712.92 683.095 L1712.36 683.095 L1711.8 683.095 L1711.24 683.095 L1710.68 683.095 L1710.12 683.095 L1709.56 683.095 L1709 683.095 L1708.44 683.095 L1707.88 683.095 L1707.32 683.095 L1706.77 683.095 L1706.21 683.095 L1705.65 683.095 L1705.09 683.095 L1704.53 683.095 L1703.97 683.095 L1703.41 683.095 L1702.85 683.095 L1702.29 683.095 L1701.73 683.095 L1701.17 683.095 L1700.61 683.095 L1700.05 683.095 L1699.5 683.095 L1698.94 683.095 L1698.38 683.095 L1697.82 683.095 L1697.26 683.095 L1696.7 683.095 L1696.14 683.095 L1695.58 683.095 L1695.02 683.095 L1694.46 683.095 L1693.9 683.095 L1693.34 683.095 L1692.78 683.095 L1692.23 683.095 L1691.67 683.095 L1691.11 683.095 L1690.55 683.095 L1689.99 683.095 L1689.43 683.095 L1688.87 683.095 L1688.31 683.095 L1687.75 683.095 L1687.19 683.095 L1686.63 683.095 L1686.07 683.095 L1685.51 683.095 L1684.95 683.095 L1684.4 683.095 L1683.84 683.095 L1683.28 683.095 L1682.72 683.095 L1682.16 683.095 L1681.6 683.095 L1681.04 683.095 L1680.48 683.095 L1679.92 683.095 L1679.36 683.095 L1678.8 683.095 L1678.24 683.095 L1677.68 683.095 L1677.13 683.095 L1676.57 683.095 L1676.01 683.095 L1675.45 683.095 L1674.89 683.095 L1674.33 683.095 L1673.77 683.095 L1673.21 683.095 L1672.65 683.095 L1672.09 683.095 L1671.53 683.095 L1670.97 683.095 L1670.41 683.095 L1669.85 683.095 L1669.3 683.095 L1668.74 683.095 L1668.18 683.095 L1667.62 683.095 L1667.06 683.095 L1666.5 683.095 L1665.94 683.095 L1665.38 683.095 L1664.82 683.095 L1664.26 683.095 L1663.7 683.095 L1663.14 683.095 L1662.58 683.095 L1662.03 683.095 L1661.47 683.095 L1660.91 683.095 L1660.35 683.095 L1659.79 683.095 L1659.23 683.095 L1658.67 683.095 L1658.11 683.095 L1657.55 683.095 L1656.99 683.095 L1656.43 683.095 L1655.87 683.095 L1655.31 683.095 L1654.76 683.095 L1654.2 683.095 L1653.64 683.095 L1653.08 683.095 L1652.52 683.095 L1651.96 683.095 L1651.4 683.095 L1650.84 683.095 L1650.28 683.095 L1649.72 683.095 L1649.16 683.095 L1648.6 683.095 L1648.04 683.095 L1647.48 683.095 L1646.93 683.095 L1646.37 683.095 L1645.81 683.095 L1645.25 683.095 L1644.69 683.095 L1644.13 683.095 L1643.57 683.095 L1643.01 683.095 L1642.45 683.095 L1641.89 683.095 L1641.33 683.095 L1640.77 683.095 L1640.21 683.095 L1639.66 683.095 L1639.1 683.095 L1638.54 683.095 L1637.98 683.095 L1637.42 683.095 L1636.86 683.095 L1636.3 683.095 L1635.74 683.095 L1635.18 683.095 L1634.62 683.095 L1634.06 683.095 L1633.5 683.095 L1632.94 683.095 L1632.39 683.095 L1631.83 683.095 L1631.27 683.095 L1630.71 683.095 L1630.15 683.095 L1629.59 683.095 L1629.03 683.095 L1628.47 683.095 L1627.91 683.095 L1627.35 683.095 L1626.79 683.095 L1626.23 683.095 L1625.67 683.095 L1625.11 683.095 L1624.56 683.095 L1624 683.095 L1623.44 683.095 L1622.88 683.095 L1622.32 683.095 L1621.76 683.095 L1621.2 683.095 L1620.64 683.095 L1620.08 683.095 L1619.52 683.095 L1618.96 683.095 L1618.4 683.095 L1617.84 683.095 L1617.29 683.095 L1616.73 683.095 L1616.17 683.095 L1615.61 683.095 L1615.05 683.095 L1614.49 683.095 L1613.93 683.095 L1613.37 683.095 L1612.81 683.095 L1612.25 683.095 L1611.69 683.095 L1611.13 683.095 L1610.57 683.095 L1610.02 683.095 L1609.46 683.095 L1608.9 683.095 L1608.34 683.095 L1607.78 683.095 L1607.22 683.095 L1606.66 683.095 L1606.1 683.095 L1605.54 683.095 L1604.98 683.095 L1604.42 683.095 L1603.86 683.095 L1603.3 683.095 L1602.74 683.095 L1602.19 683.095 L1601.63 683.095 L1601.07 683.095 L1600.51 683.095 L1599.95 683.095 L1599.39 683.095 L1598.83 683.095 L1598.27 683.095 L1597.71 683.095 L1597.15 683.095 L1596.59 683.095 L1596.03 683.095 L1595.47 683.095 L1594.92 683.095 L1594.36 683.095 L1593.8 683.095 L1593.24 683.095 L1592.68 683.095 L1592.12 683.095 L1591.56 683.095 L1591 683.095 L1590.44 683.095 L1589.88 683.095 L1589.32 683.095 L1588.76 683.095 L1588.2 683.095 L1587.65 683.095 L1587.09 683.095 L1586.53 683.095 L1585.97 683.095 L1585.41 683.095 L1584.85 683.095 L1584.29 683.095 L1583.73 683.095 L1583.17 683.095 L1582.61 683.095 L1582.05 683.095 L1581.49 683.095 L1580.93 683.095 L1580.37 683.095 L1579.82 683.095 L1579.26 683.095 L1578.7 683.095 L1578.14 683.095 L1577.58 683.095 L1577.02 683.095 L1576.46 683.095 L1575.9 683.095 L1575.34 683.095 L1574.78 683.095 L1574.22 683.095 L1573.66 683.095 L1573.1 683.095 L1572.55 683.095 L1571.99 683.095 L1571.43 683.095 L1570.87 683.095 L1570.31 683.095 L1569.75 683.095 L1569.19 683.095 L1568.63 683.095 L1568.07 683.095 L1567.51 683.095 L1566.95 683.095 L1566.39 683.095 L1565.83 683.095 L1565.28 683.095 L1564.72 683.095 L1564.16 683.095 L1563.6 683.095 L1563.04 683.095 L1562.48 683.095 L1561.92 683.095 L1561.36 683.095 L1560.8 683.095 L1560.24 683.095 L1559.68 683.095 L1559.12 683.095 L1558.56 683.095 L1558 683.095 L1557.45 683.095 L1556.89 683.095 L1556.33 683.095 L1555.77 683.095 L1555.21 683.095 L1554.65 683.095 L1554.09 683.095 L1553.53 683.095 L1552.97 683.095 L1552.41 683.095 L1551.85 683.095 L1551.29 683.095 L1550.73 683.095 L1550.18 683.095 L1549.62 683.095 L1549.06 683.095 L1548.5 683.095 L1547.94 683.095 L1547.38 683.095 L1546.82 683.095 L1546.26 683.095 L1545.7 683.095 L1545.14 683.095 L1544.58 683.095 L1544.02 683.095 L1543.46 683.095 L1542.9 683.095 L1542.35 683.095 L1541.79 683.095 L1541.23 683.095 L1540.67 683.095 L1540.11 683.095 L1539.55 683.095 L1538.99 683.095 L1538.43 683.095 L1537.87 683.095 L1537.31 683.095 L1536.75 683.095 L1536.19 683.095 L1535.63 683.095 L1535.08 683.095 L1534.52 683.095 L1533.96 683.095 L1533.4 683.095 L1532.84 683.095 L1532.28 683.095 L1531.72 683.095 L1531.16 683.095 L1530.6 683.095 L1530.04 683.095 L1529.48 683.095 L1528.92 683.095 L1528.36 683.095 L1527.81 683.095 L1527.25 683.095 L1526.69 683.095 L1526.13 683.095 L1525.57 683.095 L1525.01 683.095 L1524.45 683.095 L1523.89 683.095 L1523.33 683.095 L1522.77 683.095 L1522.21 683.095 L1521.65 683.095 L1521.09 683.095 L1520.53 683.095 L1519.98 683.095 L1519.42 683.095 L1518.86 683.095 L1518.3 683.095 L1517.74 683.095 L1517.18 683.095 L1516.62 683.095 L1516.06 683.095 L1515.5 683.095 L1514.94 683.095 L1514.38 683.095 L1513.82 683.095 L1513.26 683.095 L1512.71 683.095 L1512.15 683.095 L1511.59 683.095 L1511.03 683.095 L1510.47 683.095 L1509.91 683.095 L1509.35 683.095 L1508.79 683.095 L1508.23 683.095 L1507.67 683.095 L1507.11 683.095 L1506.55 683.095 L1505.99 683.095 L1505.44 683.095 L1504.88 683.095 L1504.32 683.095 L1503.76 683.095 L1503.2 683.095 L1502.64 683.095 L1502.08 683.095 L1501.52 683.095 L1500.96 683.095 L1500.4 683.095 L1499.84 683.095 L1499.28 683.095 L1498.72 683.095 L1498.16 683.095 L1497.61 683.095 L1497.05 683.095 L1496.49 683.095 L1495.93 683.095 L1495.37 683.095 L1494.81 683.095 L1494.25 683.095 L1493.69 683.095 L1493.13 683.095 L1492.57 683.095 L1492.01 683.095 L1491.45 683.095 L1490.89 683.095 L1490.34 683.095 L1489.78 683.095 L1489.22 683.095 L1488.66 683.095 L1488.1 683.095 L1487.54 683.095 L1486.98 683.095 L1486.42 683.095 L1485.86 683.095 L1485.3 683.095 L1484.74 683.095 L1484.18 683.095 L1483.62 683.095 L1483.07 683.095 L1482.51 683.095 L1481.95 683.095 L1481.39 683.095 L1480.83 683.095 L1480.27 683.095 L1479.71 683.095 L1479.15 683.095 L1478.59 683.095 L1478.03 683.095 L1477.47 683.095 L1476.91 683.095 L1476.35 683.095 L1475.79 683.095 L1475.24 683.095 L1474.68 683.095 L1474.12 683.095 L1473.56 683.095 L1473 683.095 L1472.44 683.095 L1471.88 683.095 L1471.32 683.095 L1470.76 683.095 L1470.2 683.095 L1469.64 683.095 L1469.08 683.095 L1468.52 683.095 L1467.97 683.095 L1467.41 683.095 L1466.85 683.095 L1466.29 683.095 L1465.73 683.095 L1465.17 683.095 L1464.61 683.095 L1464.05 683.095 L1463.49 683.095 L1462.93 683.095 L1462.37 683.095 L1461.81 683.095 L1461.25 683.095 L1460.7 683.095 L1460.14 683.095 L1459.58 683.095 L1459.02 683.095 L1458.46 683.095 L1457.9 683.095 L1457.34 683.095 L1456.78 683.095 L1456.22 683.095 L1455.66 683.095 L1455.1 683.095 L1454.54 683.095 L1453.98 683.095 L1453.42 683.095 L1452.87 683.095 L1452.31 683.095 L1451.75 683.095 L1451.19 683.095 L1450.63 683.095 L1450.07 683.095 L1449.51 683.095 L1448.95 683.095 L1448.39 683.095 L1447.83 683.095 L1447.27 683.095 L1446.71 683.095 L1446.15 683.095 L1445.6 683.095 L1445.04 683.095 L1444.48 683.095 L1443.92 683.095 L1443.36 683.095 L1442.8 683.095 L1442.24 683.095 L1441.68 683.095 L1441.12 683.095 L1440.56 683.095 L1440 683.095 L1439.44 683.095 L1438.88 683.095 L1438.33 683.095 L1437.77 683.095 L1437.21 683.095 L1436.65 683.095 L1436.09 683.095 L1435.53 683.095 L1434.97 683.095 L1434.41 683.095 L1433.85 683.095 L1433.29 683.095 L1432.73 683.095 L1432.17 683.095 L1431.61 683.095 L1431.05 683.095 L1430.5 683.095 L1429.94 683.095 L1429.38 683.095 L1428.82 683.095 L1428.26 683.095 L1427.7 683.095 L1427.14 683.095 L1426.58 683.095 L1426.02 683.095 L1425.46 683.095 L1424.9 683.095 L1424.34 683.095 L1423.78 683.095 L1423.23 683.095 L1422.67 683.095 L1422.11 683.095 L1421.55 683.095 L1420.99 683.095 L1420.43 683.095 L1419.87 683.095 L1419.31 683.095 L1418.75 683.095 L1418.19 683.095 L1417.63 683.095 L1417.07 683.095 L1416.51 683.095 L1415.95 683.095 L1415.4 683.095 L1414.84 683.095 L1414.28 683.095 L1413.72 683.095 L1413.16 683.095 L1412.6 683.095 L1412.04 683.095 L1411.48 683.095 L1410.92 683.095 L1410.36 683.095 L1409.8 683.095 L1409.24 683.095 L1408.68 683.095 L1408.13 683.095 L1407.57 683.095 L1407.01 683.095 L1406.45 683.095 L1405.89 683.095 L1405.33 683.095 L1404.77 683.095 L1404.21 683.095 L1403.65 683.095 L1403.09 683.095 L1402.53 683.095 L1401.97 683.095 L1401.41 683.095 L1400.86 683.095 L1400.3 683.095 L1399.74 683.095 L1399.18 683.095 L1398.62 683.095 L1398.06 683.095 L1397.5 683.095 L1396.94 683.095 L1396.38 683.095 L1395.82 683.095 L1395.26 683.095 L1394.7 683.095 L1394.14 683.095 L1393.58 683.095 L1393.03 683.095 L1392.47 683.095 L1391.91 683.095 L1391.35 683.095 L1390.79 683.095 L1390.23 683.095 L1389.67 683.095 L1389.11 683.095 L1388.55 683.095 L1387.99 683.095 L1387.43 683.095 L1386.87 683.095 L1386.31 683.095 L1385.76 683.095 L1385.2 683.095 L1384.64 683.095 L1384.08 683.095 L1383.52 683.095 L1382.96 683.095 L1382.4 683.095 L1381.84 683.095 L1381.28 683.095 L1380.72 683.095 L1380.16 683.095 L1379.6 683.095 L1379.04 683.095 L1378.49 683.095 L1377.93 683.095 L1377.37 683.095 L1376.81 683.095 L1376.25 683.095 L1375.69 683.095 L1375.13 683.095 L1374.57 683.095 L1374.01 683.095 L1373.45 683.095 L1372.89 683.095 L1372.33 683.095 L1371.77 683.095 L1371.21 683.095 L1370.66 683.095 L1370.1 683.095 L1369.54 683.095 L1368.98 683.095 L1368.42 683.095 L1367.86 683.095 L1367.3 683.095 L1366.74 683.095 L1366.18 683.095 L1365.62 683.095 L1365.06 683.095 L1364.5 683.095 L1363.94 683.095 L1363.39 683.095 L1362.83 683.095 L1362.27 683.095 L1361.71 683.095 L1361.15 683.095 L1360.59 683.095 L1360.03 683.095 L1359.47 683.095 L1358.91 683.095 L1358.35 683.095 L1357.79 683.095 L1357.23 683.095 L1356.67 683.095 L1356.12 683.095 L1355.56 683.095 L1355 683.095 L1354.44 683.095 L1353.88 683.095 L1353.32 683.095 L1352.76 683.095 L1352.2 683.095 L1351.64 683.095 L1351.08 683.095 L1350.52 683.095 L1349.96 683.095 L1349.4 683.095 L1348.84 683.095 L1348.29 683.095 L1347.73 683.095 L1347.17 683.095 L1346.61 683.095 L1346.05 683.095 L1345.49 683.095 L1344.93 683.095 L1344.37 683.095 L1343.81 683.095 L1343.25 683.095 L1342.69 683.095 L1342.13 683.095 L1341.57 683.095 L1341.02 683.095 L1340.46 683.095 L1339.9 683.095 L1339.34 683.095 L1338.78 683.095 L1338.22 683.095 L1337.66 683.095 L1337.1 683.095 L1336.54 683.095 L1335.98 683.095 L1335.42 683.095 L1334.86 683.095 L1334.3 683.095 L1333.75 683.095 L1333.19 683.095 L1332.63 683.095 L1332.07 683.095 L1331.51 683.095 L1330.95 683.095 L1330.39 683.095 L1329.83 683.095 L1329.27 683.095 L1328.71 683.095 L1328.15 683.095 L1327.59 683.095 L1327.03 683.095 L1326.47 683.095 L1325.92 683.095 L1325.36 683.095 L1324.8 683.095 L1324.24 683.095 L1323.68 683.095 L1323.12 683.095 L1322.56 683.095 L1322 683.095 L1321.44 683.095 L1320.88 683.095 L1320.32 683.095 L1319.76 683.095 L1319.2 683.095 L1318.65 683.095 L1318.09 683.095 L1317.53 683.095 L1316.97 683.095 L1316.41 683.095 L1315.85 683.095 L1315.29 683.095 L1314.73 683.095 L1314.17 683.095 L1313.61 683.095 L1313.05 683.095 L1312.49 683.095 L1311.93 683.095 L1311.38 683.095 L1310.82 683.095 L1310.26 683.095 L1309.7 683.095 L1309.14 683.095 L1308.58 683.095 L1308.02 683.095 L1307.46 683.095 L1306.9 683.095 L1306.34 683.095 L1305.78 683.095 L1305.22 683.095 L1304.66 683.095 L1304.1 683.095 L1303.55 683.095 L1302.99 683.095 L1302.43 683.095 L1301.87 683.095 L1301.31 683.095 L1300.75 683.095 L1300.19 683.095 L1299.63 683.095 L1299.07 683.095 L1298.51 683.095 L1297.95 683.095 L1297.39 683.095 L1296.83 683.095 L1296.28 683.095 L1295.72 683.095 L1295.16 683.095 L1294.6 683.095 L1294.04 683.095 L1293.48 683.095 L1292.92 683.095 L1292.36 683.095 L1291.8 683.095 L1291.24 683.095 L1290.68 683.095 L1290.12 683.095 L1289.56 683.095 L1289 683.095 L1288.45 683.095 L1287.89 683.095 L1287.33 683.095 L1286.77 683.095 L1286.21 683.095 L1285.65 683.095 L1285.09 683.095 L1284.53 683.095 L1283.97 683.095 L1283.41 683.095 L1282.85 683.095 L1282.29 683.095 L1281.73 683.095 L1281.18 683.095 L1280.62 683.095 L1280.06 683.095 L1279.5 683.095 L1278.94 683.095 L1278.38 683.095 L1277.82 683.095 L1277.26 683.095 L1276.7 683.095 L1276.14 683.095 L1275.58 683.095 L1275.02 683.095 L1274.46 683.095 L1273.91 683.095 L1273.35 683.095 L1272.79 683.095 L1272.23 683.095 L1271.67 683.095 L1271.11 683.095 L1270.55 683.095 L1269.99 683.095 L1269.43 683.095 L1268.87 683.095 L1268.31 683.095 L1267.75 683.095 L1267.19 683.095 L1266.63 683.095 L1266.08 683.095 L1265.52 683.095 L1264.96 683.095 L1264.4 683.095 L1263.84 683.095 L1263.28 683.095 L1262.72 683.095 L1262.16 683.095 L1261.6 683.095 L1261.04 683.095 L1260.48 683.095 L1259.92 683.095 L1259.36 683.095 L1258.81 683.095 L1258.25 683.095 L1257.69 683.095 L1257.13 683.095 L1256.57 683.095 L1256.01 683.095 L1255.45 683.095 L1254.89 683.095 L1254.33 683.095 L1253.77 683.095 L1253.21 683.095 L1252.65 683.095 L1252.09 683.095 L1251.54 683.095 L1250.98 683.095 L1250.42 683.095 L1249.86 683.095 L1249.3 683.095 L1248.74 683.095 L1248.18 683.095 L1247.62 683.095 L1247.06 683.095 L1246.5 683.095 L1245.94 683.095 L1245.38 683.095 L1244.82 683.095 L1244.26 683.095 L1243.71 683.095 L1243.15 683.095 L1242.59 683.095 L1242.03 683.095 L1241.47 683.095 L1240.91 683.095 L1240.35 683.095 L1239.79 683.095 L1239.23 683.095 L1238.67 683.095 L1238.11 683.095 L1237.55 683.095 L1236.99 683.095 L1236.44 683.095 L1235.88 683.095 L1235.32 683.095 L1234.76 683.095 L1234.2 683.095 L1233.64 683.095 L1233.08 683.095 L1232.52 683.095 L1231.96 683.095 L1231.4 683.095 L1230.84 683.095 L1230.28 683.095 L1229.72 683.095 L1229.17 683.095 L1228.61 683.095 L1228.05 683.095 L1227.49 683.095 L1226.93 683.095 L1226.37 683.095 L1225.81 683.095 L1225.25 683.095 L1224.69 683.095 L1224.13 683.095 L1223.57 683.095 L1223.01 683.095 L1222.45 683.095 L1221.89 683.095 L1221.34 683.095 L1220.78 683.095 L1220.22 683.095 L1219.66 683.095 L1219.1 683.095 L1218.54 683.095 L1217.98 683.095 L1217.42 683.095 L1216.86 683.095 L1216.3 683.095 L1215.74 683.095 L1215.18 683.095 L1214.62 683.095 L1214.07 683.095 L1213.51 683.095 L1212.95 683.095 L1212.39 683.095 L1211.83 683.095 L1211.27 683.095 L1210.71 683.095 L1210.15 683.095 L1209.59 683.095 L1209.03 683.095 L1208.47 683.095 L1207.91 683.095 L1207.35 683.095 L1206.8 683.095 L1206.24 683.095 L1205.68 683.095 L1205.12 683.095 L1204.56 683.095 L1204 683.095 L1203.44 683.095 L1202.88 683.095 L1202.32 683.095 L1201.76 683.095 L1201.2 683.095 L1200.64 683.095 L1200.08 683.095 L1199.52 683.095 L1198.97 683.095 L1198.41 683.095 L1197.85 683.095 L1197.29 683.095 L1196.73 683.095 L1196.17 683.095 L1195.61 683.095 L1195.05 683.095 L1194.49 683.095 L1193.93 683.095 L1193.37 683.095 L1192.81 683.095 L1192.25 683.095 L1191.7 683.095 L1191.14 683.095 L1190.58 683.095 L1190.02 683.095 L1189.46 683.095 L1188.9 683.095 L1188.34 683.095 L1187.78 683.095 L1187.22 683.095 L1186.66 683.095 L1186.1 683.095 L1185.54 683.095 L1184.98 683.095 L1184.43 683.095 L1183.87 683.095 L1183.31 683.095 L1182.75 683.095 L1182.19 683.095 L1181.63 683.095 L1181.07 683.095 L1180.51 683.095 L1179.95 683.095 L1179.39 683.095 L1178.83 683.095 L1178.27 683.095 L1177.71 683.095 L1177.15 683.095 L1176.6 683.095 L1176.04 683.095 L1175.48 683.095 L1174.92 683.095 L1174.36 683.095 L1173.8 683.095 L1173.24 683.095 L1172.68 683.095 L1172.12 683.095 L1171.56 683.095 L1171 683.095 L1170.44 683.095 L1169.88 683.095 L1169.33 683.095 L1168.77 683.095 L1168.21 683.095 L1167.65 683.095 L1167.09 683.095 L1166.53 683.095 L1165.97 683.095 L1165.41 683.095 L1164.85 683.095 L1164.29 683.095 L1163.73 683.095 L1163.17 683.095 L1162.61 683.095 L1162.05 683.095 L1161.5 683.095 L1160.94 683.095 L1160.38 683.095 L1159.82 683.095 L1159.26 683.095 L1158.7 683.095 L1158.14 683.095 L1157.58 683.095 L1157.02 683.095 L1156.46 683.095 L1155.9 683.095 L1155.34 683.095 L1154.78 683.095 L1154.23 683.095 L1153.67 683.095 L1153.11 683.095 L1152.55 683.095 L1151.99 683.095 L1151.43 683.095 L1150.87 683.095 L1150.31 683.095 L1149.75 683.095 L1149.19 683.095 L1148.63 683.095 L1148.07 683.095 L1147.51 683.095 L1146.96 683.095 L1146.4 683.095 L1145.84 683.095 L1145.28 683.095 L1144.72 683.095 L1144.16 683.095 L1143.6 683.095 L1143.04 683.095 L1142.48 683.095 L1141.92 683.095 L1141.36 683.095 L1140.8 683.095 L1140.24 683.095 L1139.68 683.095 L1139.13 683.095 L1138.57 683.095 L1138.01 683.095 L1137.45 683.095 L1136.89 683.095 L1136.33 683.095 L1135.77 683.095 L1135.21 683.095 L1134.65 683.095 L1134.09 683.095 L1133.53 683.095 L1132.97 683.095 L1132.41 683.095 L1131.86 683.095 L1131.3 683.095 L1130.74 683.095 L1130.18 683.095 L1129.62 683.095 L1129.06 683.095 L1128.5 683.095 L1127.94 683.095 L1127.38 683.095 L1126.82 683.095 L1126.26 683.095 L1125.7 683.095 L1125.14 683.095 L1124.59 683.095 L1124.03 683.095 L1123.47 683.095 L1122.91 683.095 L1122.35 683.095 L1121.79 683.095 L1121.23 683.095 L1120.67 683.095 L1120.11 683.095 L1119.55 683.095 L1118.99 683.095 L1118.43 683.095 L1117.87 683.095 L1117.31 683.095 L1116.76 683.095 L1116.2 683.095 L1115.64 683.095 L1115.08 683.095 L1114.52 683.095 L1113.96 683.095 L1113.4 683.095 L1112.84 683.095 L1112.28 683.095 L1111.72 683.095 L1111.16 683.095 L1110.6 683.095 L1110.04 683.095 L1109.49 683.095 L1108.93 683.095 L1108.37 683.095 L1107.81 683.095 L1107.25 683.095 L1106.69 683.095 L1106.13 683.095 L1105.57 683.095 L1105.01 683.095 L1104.45 683.095 L1103.89 683.095 L1103.33 683.095 L1102.77 683.095 L1102.22 683.095 L1101.66 683.095 L1101.1 683.095 L1100.54 683.095 L1099.98 683.095 L1099.42 683.095 L1098.86 683.095 L1098.3 683.095 L1097.74 683.095 L1097.18 683.095 L1096.62 683.095 L1096.06 683.095 L1095.5 683.095 L1094.94 683.095 L1094.39 683.095 L1093.83 683.095 L1093.27 683.095 L1092.71 683.095 L1092.15 683.095 L1091.59 683.095 L1091.03 683.095 L1090.47 683.095 L1089.91 683.095 L1089.35 683.095 L1088.79 683.095 L1088.23 683.095 L1087.67 683.095 L1087.12 683.095 L1086.56 683.095 L1086 683.095 L1085.44 683.095 L1084.88 683.095 L1084.32 683.095 L1083.76 683.095 L1083.2 683.095 L1082.64 683.095 L1082.08 683.095 L1081.52 683.095 L1080.96 683.095 L1080.4 683.095 L1079.85 683.095 L1079.29 683.095 L1078.73 683.095 L1078.17 683.095 L1077.61 683.095 L1077.05 683.095 L1076.49 683.095 L1075.93 683.095 L1075.37 683.095 L1074.81 683.095 L1074.25 683.095 L1073.69 683.095 L1073.13 683.095 L1072.57 683.095 L1072.02 683.095 L1071.46 683.095 L1070.9 683.095 L1070.34 683.095 L1069.78 683.095 L1069.22 683.095 L1068.66 683.095 L1068.1 683.095 L1067.54 683.095 L1066.98 683.095 L1066.42 683.095 L1065.86 683.095 L1065.3 683.095 L1064.75 683.095 L1064.19 683.095 L1063.63 683.095 L1063.07 683.095 L1062.51 683.095 L1061.95 683.095 L1061.39 683.095 L1060.83 683.095 L1060.27 683.095 L1059.71 683.095 L1059.15 683.095 L1058.59 683.095 L1058.03 683.095 L1057.48 683.095 L1056.92 683.095 L1056.36 683.095 L1055.8 683.095 L1055.24 683.095 L1054.68 683.095 L1054.12 683.095 L1053.56 683.095 L1053 683.095 L1052.44 683.095 L1051.88 683.095 L1051.32 683.095 L1050.76 683.095 L1050.2 683.095 L1049.65 683.095 L1049.09 683.095 L1048.53 683.095 L1047.97 683.095 L1047.41 683.095 L1046.85 683.095 L1046.29 683.095 L1045.73 683.095 L1045.17 683.095 L1044.61 683.095 L1044.05 683.095 L1043.49 683.095 L1042.93 683.095 L1042.38 683.095 L1041.82 683.095 L1041.26 683.095 L1040.7 683.095 L1040.14 683.095 L1039.58 683.095 L1039.02 683.095 L1038.46 683.095 L1037.9 683.095 L1037.34 683.095 L1036.78 683.095 L1036.22 683.095 L1035.66 683.095 L1035.1 683.095 L1034.55 683.095 L1033.99 683.095 L1033.43 683.095 L1032.87 683.095 L1032.31 683.095 L1031.75 683.095 L1031.19 683.095 L1030.63 683.095 L1030.07 683.095 L1029.51 683.095 L1028.95 683.095 L1028.39 683.095 L1027.83 683.095 L1027.28 683.095 L1026.72 683.095 L1026.16 683.095 L1025.6 683.095 L1025.04 683.095 L1024.48 683.095 L1023.92 683.095 L1023.36 683.095 L1022.8 683.095 L1022.24 683.095 L1021.68 683.095 L1021.12 683.095 L1020.56 683.095 L1020.01 683.095 L1019.45 683.095 L1018.89 683.095 L1018.33 683.095 L1017.77 683.095 L1017.21 683.095 L1016.65 683.095 L1016.09 683.095 L1015.53 683.095 L1014.97 683.095 L1014.41 683.095 L1013.85 683.095 L1013.29 683.095 L1012.73 683.095 L1012.18 683.095 L1011.62 683.095 L1011.06 683.095 L1010.5 683.095 L1009.94 683.095 L1009.38 683.095 L1008.82 683.095 L1008.26 683.095 L1007.7 683.095 L1007.14 683.095 L1006.58 683.095 L1006.02 683.095 L1005.46 683.095 L1004.91 683.095 L1004.35 683.095 L1003.79 683.095 L1003.23 683.095 L1002.67 683.095 L1002.11 683.095 L1001.55 683.095 L1000.99 683.095 L1000.43 683.095 L999.872 683.095 L999.313 683.095 L998.754 683.095 L998.194 683.095 L997.635 683.095 L997.076 683.095 L996.517 683.095 L995.957 683.095 L995.398 683.095 L994.839 683.095 L994.28 683.095 L993.72 683.095 L993.161 683.095 L992.602 683.095 L992.043 683.095 L991.483 683.095 L990.924 683.095 L990.365 683.095 L989.806 683.095 L989.246 683.095 L988.687 683.095 L988.128 683.095 L987.569 683.095 L987.009 683.095 L986.45 683.095 L985.891 683.095 L985.332 683.095 L984.772 683.095 L984.213 683.095 L983.654 683.095 L983.095 683.095 L982.535 683.095 L981.976 683.095 L981.417 683.095 L980.858 683.095 L980.298 683.095 L979.739 683.095 L979.18 683.095 L978.621 683.095 L978.061 683.095 L977.502 683.095 L976.943 683.095 L976.384 683.095 L975.824 683.095 L975.265 683.095 L974.706 683.095 L974.147 683.095 L973.587 683.095 L973.028 683.095 L972.469 683.095 L971.91 683.095 L971.35 683.095 L970.791 683.095 L970.232 683.095 L969.673 683.095 L969.113 683.095 L968.554 683.095 L967.995 683.095 L967.436 683.095 L966.876 683.095 L966.317 683.095 L965.758 683.095 L965.199 683.095 L964.639 683.095 L964.08 683.095 L963.521 683.095 L962.962 683.095 L962.402 683.095 L961.843 683.095 L961.284 683.095 L960.725 683.095 L960.165 683.095 L959.606 683.095 L959.047 683.095 L958.488 683.095 L957.928 683.095 L957.369 683.095 L956.81 683.095 L956.251 683.095 L955.691 683.095 L955.132 683.095 L954.573 683.095 L954.014 683.095 L953.454 683.095 L952.895 683.095 L952.336 683.095 L951.777 683.095 L951.217 683.095 L950.658 683.095 L950.099 683.095 L949.54 683.095 L948.98 683.095 L948.421 683.095 L947.862 683.095 L947.303 683.095 L946.743 683.095 L946.184 683.095 L945.625 683.095 L945.066 683.095 L944.506 683.095 L943.947 683.095 L943.388 683.095 L942.829 683.095 L942.269 683.095 L941.71 683.095 L941.151 683.095 L940.592 683.095 L940.032 683.095 L939.473 683.095 L938.914 683.095 L938.355 683.095 L937.795 683.095 L937.236 683.095 L936.677 683.095 L936.118 683.095 L935.558 683.095 L934.999 683.095 L934.44 683.095 L933.881 683.095 L933.321 683.095 L932.762 683.095 L932.203 683.095 L931.644 683.095 L931.084 683.095 L930.525 683.095 L929.966 683.095 L929.406 683.095 L928.847 683.095 L928.288 683.095 L927.729 683.095 L927.169 683.095 L926.61 683.095 L926.051 683.095 L925.492 683.095 L924.932 683.095 L924.373 683.095 L923.814 683.095 L923.255 683.095 L922.695 683.095 L922.136 683.095 L921.577 683.095 L921.018 683.095 L920.458 683.095 L919.899 683.095 L919.34 683.095 L918.781 683.095 L918.221 683.095 L917.662 683.095 L917.103 683.095 L916.544 683.095 L915.984 683.095 L915.425 683.095 L914.866 683.095 L914.307 683.095 L913.747 683.095 L913.188 683.095 L912.629 683.095 L912.07 683.095 L911.51 683.095 L910.951 683.095 L910.392 683.095 L909.833 683.095 L909.273 683.095 L908.714 683.095 L908.155 683.095 L907.596 683.095 L907.036 683.095 L906.477 683.095 L905.918 683.095 L905.359 683.095 L904.799 683.095 L904.24 683.095 L903.681 683.095 L903.122 683.095 L902.562 683.095 L902.003 683.095 L901.444 683.095 L900.885 683.095 L900.325 683.095 L899.766 683.095 L899.207 683.095 L898.648 683.095 L898.088 683.095 L897.529 683.095 L896.97 683.095 L896.411 683.095 L895.851 683.095 L895.292 683.095 L894.733 683.095 L894.174 683.095 L893.614 683.095 L893.055 683.095 L892.496 683.095 L891.937 683.095 L891.377 683.095 L890.818 683.095 L890.259 683.095 L889.7 683.095 L889.14 683.095 L888.581 683.095 L888.022 683.095 L887.463 683.095 L886.903 683.095 L886.344 683.095 L885.785 683.095 L885.226 683.095 L884.666 683.095 L884.107 683.095 L883.548 683.095 L882.989 683.095 L882.429 683.095 L881.87 683.095 L881.311 683.095 L880.752 683.095 L880.192 683.095 L879.633 683.095 L879.074 683.095 L878.515 683.095 L877.955 683.095 L877.396 683.095 L876.837 683.095 L876.278 683.095 L875.718 683.095 L875.159 683.095 L874.6 683.095 L874.041 683.095 L873.481 683.095 L872.922 683.095 L872.363 683.095 L871.804 683.095 L871.244 683.095 L870.685 683.095 L870.126 683.095 L869.567 683.095 L869.007 683.095 L868.448 683.095 L867.889 683.095 L867.33 683.095 L866.77 683.095 L866.211 683.095 L865.652 683.095 L865.093 683.095 L864.533 683.095 L863.974 683.095 L863.415 683.095 L862.856 683.095 L862.296 683.095 L861.737 683.095 L861.178 683.095 L860.619 683.095 L860.059 683.095 L859.5 683.095 L858.941 683.095 L858.382 683.095 L857.822 683.095 L857.263 683.095 L856.704 683.095 L856.145 683.095 L855.585 683.095 L855.026 683.095 L854.467 683.095 L853.908 683.095 L853.348 683.095 L852.789 683.095 L852.23 683.095 L851.671 683.095 L851.111 683.095 L850.552 683.095 L849.993 683.095 L849.434 683.095 L848.874 683.095 L848.315 683.095 L847.756 683.095 L847.197 683.095 L846.637 683.095 L846.078 683.095 L845.519 683.095 L844.96 683.095 L844.4 683.095 L843.841 683.095 L843.282 683.095 L842.723 683.095 L842.163 683.095 L841.604 683.095 L841.045 683.095 L840.486 683.095 L839.926 683.095 L839.367 683.095 L838.808 683.095 L838.249 683.095 L837.689 683.095 L837.13 683.095 L836.571 683.095 L836.012 683.095 L835.452 683.095 L834.893 683.095 L834.334 683.095 L833.775 683.095 L833.215 683.095 L832.656 683.095 L832.097 683.095 L831.538 683.095 L830.978 683.095 L830.419 683.095 L829.86 683.095 L829.301 683.095 L828.741 683.095 L828.182 683.095 L827.623 683.095 L827.064 683.095 L826.504 683.095 L825.945 683.095 L825.386 683.095 L824.827 683.095 L824.267 683.095 L823.708 683.095 L823.149 683.095 L822.59 683.095 L822.03 683.095 L821.471 683.095 L820.912 683.095 L820.353 683.095 L819.793 683.095 L819.234 683.095 L818.675 683.095 L818.116 683.095 L817.556 683.095 L816.997 683.095 L816.438 683.095 L815.879 683.095 L815.319 683.095 L814.76 683.095 L814.201 683.095 L813.642 683.095 L813.082 683.095 L812.523 683.095 L811.964 683.095 L811.405 683.095 L810.845 683.095 L810.286 683.095 L809.727 683.095 L809.168 683.095 L808.608 683.095 L808.049 683.095 L807.49 683.095 L806.931 683.095 L806.371 683.095 L805.812 683.095 L805.253 683.095 L804.693 683.095 L804.134 683.095 L803.575 683.095 L803.016 683.095 L802.456 683.095 L801.897 683.095 L801.338 683.095 L800.779 683.095 L800.219 683.095 L799.66 683.095 L799.101 683.095 L798.542 683.095 L797.982 683.095 L797.423 683.095 L796.864 683.095 L796.305 683.095 L795.745 683.095 L795.186 683.095 L794.627 683.095 L794.068 683.095 L793.508 683.095 L792.949 683.095 L792.39 683.095 L791.831 683.095 L791.271 683.095 L790.712 683.095 L790.153 683.095 L789.594 683.095 L789.034 683.095 L788.475 683.095 L787.916 683.095 L787.357 683.095 L786.797 683.095 L786.238 683.095 L785.679 683.095 L785.12 683.095 L784.56 683.095 L784.001 683.095 L783.442 683.095 L782.883 683.095 L782.323 683.095 L781.764 683.095 L781.205 683.095 L780.646 683.095 L780.086 683.095 L779.527 683.095 L778.968 683.095 L778.409 683.095 L777.849 683.095 L777.29 683.095 L776.731 683.095 L776.172 683.095 L775.612 683.095 L775.053 683.095 L774.494 683.095 L773.935 683.095 L773.375 683.095 L772.816 683.095 L772.257 683.095 L771.698 683.095 L771.138 683.095 L770.579 683.095 L770.02 683.095 L769.461 683.095 L768.901 683.095 L768.342 683.095 L767.783 683.095 L767.224 683.095 L766.664 683.095 L766.105 683.095 L765.546 683.095 L764.987 683.095 L764.427 683.095 L763.868 683.095 L763.309 683.095 L762.75 683.095 L762.19 683.095 L761.631 683.095 L761.072 683.095 L760.513 683.095 L759.953 683.095 L759.394 683.095 L758.835 683.095 L758.276 683.095 L757.716 683.095 L757.157 683.095 L756.598 683.095 L756.039 683.095 L755.479 683.095 L754.92 683.095 L754.361 683.095 L753.802 683.095 L753.242 683.095 L752.683 683.095 L752.124 683.095 L751.565 683.095 L751.005 683.095 L750.446 683.095 L749.887 683.095 L749.328 683.095 L748.768 683.095 L748.209 683.095 L747.65 683.095 L747.091 683.095 L746.531 683.095 L745.972 683.095 L745.413 683.095 L744.854 683.095 L744.294 683.095 L743.735 683.095 L743.176 683.095 L742.617 683.095 L742.057 683.095 L741.498 683.095 L740.939 683.095 L740.38 683.095 L739.82 683.095 L739.261 683.095 L738.702 683.095 L738.143 683.095 L737.583 683.095 L737.024 683.095 L736.465 683.095 L735.906 683.095 L735.346 683.095 L734.787 683.095 L734.228 683.095 L733.669 683.095 L733.109 683.095 L732.55 683.095 L731.991 683.095 L731.432 683.095 L730.872 683.095 L730.313 683.095 L729.754 683.095 L729.195 683.095 L728.635 683.095 L728.076 683.095 L727.517 683.095 L726.958 683.095 L726.398 683.095 L725.839 683.095 L725.28 683.095 L724.721 683.095 L724.161 683.095 L723.602 683.095 L723.043 683.095 L722.484 683.095 L721.924 683.095 L721.365 683.095 L720.806 683.095 L720.247 683.095  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.922 720.806,683.922 721.365,683.922 721.924,683.922 722.484,683.922 723.043,683.922 723.602,683.922 724.161,683.922 724.721,683.922 725.28,683.922 725.839,683.922 726.398,683.922 726.958,683.922 727.517,683.922 728.076,683.922 728.635,683.922 729.195,683.922 729.754,683.922 730.313,683.922 730.872,683.922 731.432,683.922 731.991,683.922 732.55,683.922 733.109,683.922 733.669,683.922 734.228,683.922 734.787,683.922 735.346,683.922 735.906,683.922 736.465,683.922 737.024,683.922 737.583,683.922 738.143,683.922 738.702,683.922 739.261,683.922 739.82,683.922 740.38,683.922 740.939,683.922 741.498,683.922 742.057,683.922 742.617,683.922 743.176,683.922 743.735,683.922 744.294,683.922 744.854,683.922 745.413,683.922 745.972,683.922 746.531,683.922 747.091,683.922 747.65,683.922 748.209,683.922 748.768,683.922 749.328,683.922 749.887,683.922 750.446,683.922 751.005,683.922 751.565,683.922 752.124,683.922 752.683,683.922 753.242,683.922 753.802,683.922 754.361,683.922 754.92,683.922 755.479,683.922 756.039,683.922 756.598,683.922 757.157,683.922 757.716,683.922 758.276,683.922 758.835,683.922 759.394,683.922 759.953,683.922 760.513,683.922 761.072,683.922 761.631,683.922 762.19,683.922 762.75,683.922 763.309,683.922 763.868,683.922 764.427,683.922 764.987,683.922 765.546,683.922 766.105,683.922 766.664,683.922 767.224,683.922 767.783,683.922 768.342,683.922 768.901,683.922 769.461,683.922 770.02,683.922 770.579,683.922 771.138,683.922 771.698,683.922 772.257,683.922 772.816,683.922 773.375,683.922 773.935,683.922 774.494,683.922 775.053,683.922 775.612,683.922 776.172,683.922 776.731,683.922 777.29,683.922 777.849,683.922 778.409,683.922 778.968,683.922 779.527,683.922 780.086,683.922 780.646,683.922 781.205,683.922 781.764,683.922 782.323,683.922 782.883,683.922 783.442,683.922 784.001,683.922 784.56,683.922 785.12,683.922 785.679,683.922 786.238,683.922 786.797,683.922 787.357,683.922 787.916,683.922 788.475,683.922 789.034,683.922 789.594,683.922 790.153,683.922 790.712,683.922 791.271,683.922 791.831,683.922 792.39,683.922 792.949,683.922 793.508,683.922 794.068,683.922 794.627,683.922 795.186,683.922 795.745,683.922 796.305,683.922 796.864,683.922 797.423,683.922 797.982,683.922 798.542,683.922 799.101,683.922 799.66,683.922 800.219,683.922 800.779,683.922 801.338,683.922 801.897,683.922 802.456,683.922 803.016,683.922 803.575,683.922 804.134,683.922 804.693,683.922 805.253,683.922 805.812,683.922 806.371,683.922 806.931,683.922 807.49,683.922 808.049,683.922 808.608,683.922 809.168,683.922 809.727,683.922 810.286,683.922 810.845,683.922 811.405,683.922 811.964,683.922 812.523,683.922 813.082,683.922 813.642,683.922 814.201,683.922 814.76,683.922 815.319,683.922 815.879,683.922 816.438,683.922 816.997,683.922 817.556,683.922 818.116,683.922 818.675,683.922 819.234,683.922 819.793,683.922 820.353,683.922 820.912,683.922 821.471,683.922 822.03,683.922 822.59,683.922 823.149,683.922 823.708,683.922 824.267,683.922 824.827,683.922 825.386,683.922 825.945,683.922 826.504,683.922 827.064,683.922 827.623,683.922 828.182,683.922 828.741,683.922 829.301,683.922 829.86,683.922 830.419,683.922 830.978,683.922 831.538,683.922 832.097,683.922 832.656,683.922 833.215,683.922 833.775,683.922 834.334,683.922 834.893,683.922 835.452,683.922 836.012,683.922 836.571,683.922 837.13,683.922 837.689,683.922 838.249,683.922 838.808,683.922 839.367,683.922 839.926,683.922 840.486,683.922 841.045,683.922 841.604,683.922 842.163,683.922 842.723,683.922 843.282,683.922 843.841,683.922 844.4,683.922 844.96,683.922 845.519,683.922 846.078,683.922 846.637,683.922 847.197,683.922 847.756,683.922 848.315,683.922 848.874,683.922 849.434,683.922 849.993,683.922 850.552,683.922 851.111,683.922 851.671,683.922 852.23,683.922 852.789,683.922 853.348,683.922 853.908,683.922 854.467,683.922 855.026,683.922 855.585,683.922 856.145,683.922 856.704,683.922 857.263,683.922 857.822,683.922 858.382,683.922 858.941,683.922 859.5,683.922 860.059,683.922 860.619,683.922 861.178,683.922 861.737,683.922 862.296,683.922 862.856,683.922 863.415,683.922 863.974,683.922 864.533,683.922 865.093,683.922 865.652,683.922 866.211,683.922 866.77,683.922 867.33,683.922 867.889,683.922 868.448,683.922 869.007,683.922 869.567,683.922 870.126,683.922 870.685,683.922 871.244,683.922 871.804,683.922 872.363,683.922 872.922,683.922 873.481,683.922 874.041,683.922 874.6,683.922 875.159,683.922 875.718,683.922 876.278,683.922 876.837,683.922 877.396,683.922 877.955,683.922 878.515,683.922 879.074,683.922 879.633,683.922 880.192,683.922 880.752,683.922 881.311,683.922 881.87,683.922 882.429,683.922 882.989,683.922 883.548,683.922 884.107,683.922 884.666,683.922 885.226,683.922 885.785,683.922 886.344,683.922 886.903,683.922 887.463,683.922 888.022,683.922 888.581,683.922 889.14,683.922 889.7,683.922 890.259,683.922 890.818,683.922 891.377,683.922 891.937,683.922 892.496,683.922 893.055,683.922 893.614,683.922 894.174,683.922 894.733,683.922 895.292,683.922 895.851,683.922 896.411,683.922 896.97,683.922 897.529,683.922 898.088,683.922 898.648,683.922 899.207,683.922 899.766,683.922 900.325,683.922 900.885,683.922 901.444,683.922 902.003,683.922 902.562,683.922 903.122,683.922 903.681,683.922 904.24,683.922 904.799,683.922 905.359,683.922 905.918,683.922 906.477,683.922 907.036,683.922 907.596,683.922 908.155,683.922 908.714,683.922 909.273,683.922 909.833,683.922 910.392,683.922 910.951,683.922 911.51,683.922 912.07,683.922 912.629,683.922 913.188,683.922 913.747,683.922 914.307,683.922 914.866,683.922 915.425,683.922 915.984,683.922 916.544,683.922 917.103,683.922 917.662,683.922 918.221,683.922 918.781,683.922 919.34,683.922 919.899,683.922 920.458,683.922 921.018,683.922 921.577,683.922 922.136,683.922 922.695,683.922 923.255,683.922 923.814,683.922 924.373,683.922 924.932,683.922 925.492,683.922 926.051,683.922 926.61,683.922 927.169,683.922 927.729,683.922 928.288,683.922 928.847,683.922 929.406,683.922 929.966,683.922 930.525,683.922 931.084,683.922 931.644,683.922 932.203,683.922 932.762,683.922 933.321,683.922 933.881,683.922 934.44,683.922 934.999,683.922 935.558,683.922 936.118,683.922 936.677,683.922 937.236,683.922 937.795,683.922 938.355,683.922 938.914,683.922 939.473,683.922 940.032,683.922 940.592,683.922 941.151,683.922 941.71,683.922 942.269,683.922 942.829,683.922 943.388,683.922 943.947,683.922 944.506,683.922 945.066,683.922 945.625,683.922 946.184,683.922 946.743,683.922 947.303,683.922 947.862,683.922 948.421,683.922 948.98,683.922 949.54,683.922 950.099,683.922 950.658,683.922 951.217,683.922 951.777,683.922 952.336,683.922 952.895,683.922 953.454,683.922 954.014,683.922 954.573,683.922 955.132,683.922 955.691,683.922 956.251,683.922 956.81,683.922 957.369,683.922 957.928,683.922 958.488,683.922 959.047,683.922 959.606,683.922 960.165,683.922 960.725,683.922 961.284,683.922 961.843,683.922 962.402,683.922 962.962,683.922 963.521,683.922 964.08,683.922 964.639,683.922 965.199,683.922 965.758,683.922 966.317,683.922 966.876,683.922 967.436,683.922 967.995,683.922 968.554,683.922 969.113,683.922 969.673,683.922 970.232,683.922 970.791,683.922 971.35,683.922 971.91,683.922 972.469,683.922 973.028,683.922 973.587,683.922 974.147,683.922 974.706,683.922 975.265,683.922 975.824,683.922 976.384,683.922 976.943,683.922 977.502,683.922 978.061,683.922 978.621,683.922 979.18,683.922 979.739,683.922 980.298,683.922 980.858,683.922 981.417,683.922 981.976,683.922 982.535,683.922 983.095,683.922 983.654,683.922 984.213,683.922 984.772,683.922 985.332,683.922 985.891,683.922 986.45,683.922 987.009,683.922 987.569,683.922 988.128,683.922 988.687,683.922 989.246,683.922 989.806,683.922 990.365,683.922 990.924,683.922 991.483,683.922 992.043,683.922 992.602,683.922 993.161,683.922 993.72,683.922 994.28,683.922 994.839,683.922 995.398,683.922 995.957,683.922 996.517,683.922 997.076,683.922 997.635,683.922 998.194,683.922 998.754,683.922 999.313,683.922 999.872,683.922 1000.43,683.922 1000.99,683.922 1001.55,683.922 1002.11,683.922 1002.67,683.922 1003.23,683.922 1003.79,683.922 1004.35,683.922 1004.91,683.922 1005.46,683.922 1006.02,683.922 1006.58,683.922 1007.14,683.922 1007.7,683.922 1008.26,683.922 1008.82,683.922 1009.38,683.922 1009.94,683.922 1010.5,683.922 1011.06,683.922 1011.62,683.922 1012.18,683.922 1012.73,683.922 1013.29,683.922 1013.85,683.922 1014.41,683.922 1014.97,683.922 1015.53,683.922 1016.09,683.922 1016.65,683.922 1017.21,683.922 1017.77,683.922 1018.33,683.922 1018.89,683.922 1019.45,683.922 1020.01,683.922 1020.56,683.922 1021.12,683.922 1021.68,683.922 1022.24,683.922 1022.8,683.922 1023.36,683.922 1023.92,683.922 1024.48,683.922 1025.04,683.922 1025.6,683.922 1026.16,683.922 1026.72,683.922 1027.28,683.922 1027.83,683.922 1028.39,683.922 1028.95,683.922 1029.51,683.922 1030.07,683.922 1030.63,683.922 1031.19,683.922 1031.75,683.922 1032.31,683.922 1032.87,683.922 1033.43,683.922 1033.99,683.922 1034.55,683.922 1035.1,683.922 1035.66,683.922 1036.22,683.922 1036.78,683.922 1037.34,683.922 1037.9,683.922 1038.46,683.922 1039.02,683.922 1039.58,683.922 1040.14,683.922 1040.7,683.922 1041.26,683.922 1041.82,683.922 1042.38,683.922 1042.93,683.922 1043.49,683.922 1044.05,683.922 1044.61,683.922 1045.17,683.922 1045.73,683.922 1046.29,683.922 1046.85,683.922 1047.41,683.922 1047.97,683.922 1048.53,683.922 1049.09,683.922 1049.65,683.922 1050.2,683.922 1050.76,683.922 1051.32,683.922 1051.88,683.922 1052.44,683.922 1053,683.922 1053.56,683.922 1054.12,683.922 1054.68,683.922 1055.24,683.922 1055.8,683.922 1056.36,683.922 1056.92,683.922 1057.48,683.922 1058.03,683.922 1058.59,683.922 1059.15,683.922 1059.71,683.922 1060.27,683.922 1060.83,683.922 1061.39,683.922 1061.95,683.922 1062.51,683.922 1063.07,683.922 1063.63,683.922 1064.19,683.922 1064.75,683.922 1065.3,683.922 1065.86,683.922 1066.42,683.922 1066.98,683.922 1067.54,683.922 1068.1,683.922 1068.66,683.922 1069.22,683.922 1069.78,683.922 1070.34,683.922 1070.9,683.922 1071.46,683.922 1072.02,683.922 1072.57,683.922 1073.13,683.922 1073.69,683.922 1074.25,683.922 1074.81,683.922 1075.37,683.922 1075.93,683.922 1076.49,683.922 1077.05,683.922 1077.61,683.922 1078.17,683.922 1078.73,683.922 1079.29,683.922 1079.85,683.922 1080.4,683.922 1080.96,683.922 1081.52,683.922 1082.08,683.922 1082.64,683.922 1083.2,683.922 1083.76,683.922 1084.32,683.922 1084.88,683.922 1085.44,683.922 1086,683.922 1086.56,683.922 1087.12,683.922 1087.67,683.922 1088.23,683.922 1088.79,683.922 1089.35,683.922 1089.91,683.922 1090.47,683.922 1091.03,683.922 1091.59,683.922 1092.15,683.922 1092.71,683.922 1093.27,683.922 1093.83,683.922 1094.39,683.922 1094.94,683.922 1095.5,683.922 1096.06,683.922 1096.62,683.922 1097.18,683.922 1097.74,683.922 1098.3,683.922 1098.86,683.922 1099.42,683.922 1099.98,683.922 1100.54,683.922 1101.1,683.922 1101.66,683.922 1102.22,683.922 1102.77,683.922 1103.33,683.922 1103.89,683.922 1104.45,683.922 1105.01,683.922 1105.57,683.922 1106.13,683.922 1106.69,683.922 1107.25,683.922 1107.81,683.922 1108.37,683.922 1108.93,683.922 1109.49,683.922 1110.04,683.922 1110.6,683.922 1111.16,683.922 1111.72,683.922 1112.28,683.922 1112.84,683.922 1113.4,683.922 1113.96,683.922 1114.52,683.922 1115.08,683.922 1115.64,683.922 1116.2,683.922 1116.76,683.922 1117.31,683.922 1117.87,683.922 1118.43,683.922 1118.99,683.922 1119.55,683.922 1120.11,683.922 1120.67,683.922 1121.23,683.922 1121.79,683.922 1122.35,683.922 1122.91,683.922 1123.47,683.922 1124.03,683.922 1124.59,683.922 1125.14,683.922 1125.7,683.922 1126.26,683.922 1126.82,683.922 1127.38,683.922 1127.94,683.922 1128.5,683.922 1129.06,683.922 1129.62,683.922 1130.18,683.922 1130.74,683.922 1131.3,683.922 1131.86,683.922 1132.41,683.922 1132.97,683.922 1133.53,683.922 1134.09,683.922 1134.65,683.922 1135.21,683.922 1135.77,683.922 1136.33,683.922 1136.89,683.922 1137.45,683.922 1138.01,683.922 1138.57,683.922 1139.13,683.922 1139.68,683.922 1140.24,683.922 1140.8,683.922 1141.36,683.922 1141.92,683.922 1142.48,683.922 1143.04,683.922 1143.6,683.922 1144.16,683.922 1144.72,683.922 1145.28,683.922 1145.84,683.922 1146.4,683.922 1146.96,683.922 1147.51,683.922 1148.07,683.922 1148.63,683.922 1149.19,683.922 1149.75,683.922 1150.31,683.922 1150.87,683.922 1151.43,683.922 1151.99,683.922 1152.55,683.922 1153.11,683.922 1153.67,683.922 1154.23,683.922 1154.78,683.922 1155.34,683.922 1155.9,683.922 1156.46,683.922 1157.02,683.922 1157.58,683.922 1158.14,683.922 1158.7,683.922 1159.26,683.922 1159.82,683.922 1160.38,683.922 1160.94,683.922 1161.5,683.922 1162.05,683.922 1162.61,683.922 1163.17,683.922 1163.73,683.922 1164.29,683.922 1164.85,683.922 1165.41,683.922 1165.97,683.922 1166.53,683.922 1167.09,683.922 1167.65,683.922 1168.21,683.922 1168.77,683.922 1169.33,683.922 1169.88,683.922 1170.44,683.922 1171,683.922 1171.56,683.922 1172.12,683.922 1172.68,683.922 1173.24,683.922 1173.8,683.922 1174.36,683.922 1174.92,683.922 1175.48,683.922 1176.04,683.922 1176.6,683.922 1177.15,683.922 1177.71,683.922 1178.27,683.922 1178.83,683.922 1179.39,683.922 1179.95,683.922 1180.51,683.922 1181.07,683.922 1181.63,683.922 1182.19,683.922 1182.75,683.922 1183.31,683.922 1183.87,683.922 1184.43,683.922 1184.98,683.922 1185.54,683.922 1186.1,683.922 1186.66,683.922 1187.22,683.922 1187.78,683.922 1188.34,683.922 1188.9,683.922 1189.46,683.922 1190.02,683.922 1190.58,683.922 1191.14,683.922 1191.7,683.922 1192.25,683.922 1192.81,683.922 1193.37,683.922 1193.93,683.922 1194.49,683.922 1195.05,683.922 1195.61,683.922 1196.17,683.922 1196.73,683.922 1197.29,683.922 1197.85,683.922 1198.41,683.922 1198.97,683.922 1199.52,683.922 1200.08,683.922 1200.64,683.922 1201.2,683.922 1201.76,683.922 1202.32,683.922 1202.88,683.922 1203.44,683.922 1204,683.922 1204.56,683.922 1205.12,683.922 1205.68,683.922 1206.24,683.922 1206.8,683.922 1207.35,683.922 1207.91,683.922 1208.47,683.922 1209.03,683.922 1209.59,683.922 1210.15,683.922 1210.71,683.922 1211.27,683.922 1211.83,683.922 1212.39,683.922 1212.95,683.922 1213.51,683.922 1214.07,683.922 1214.62,683.922 1215.18,683.922 1215.74,683.922 1216.3,683.922 1216.86,683.922 1217.42,683.922 1217.98,683.922 1218.54,683.922 1219.1,683.922 1219.66,683.922 1220.22,683.922 1220.78,683.922 1221.34,683.922 1221.89,683.922 1222.45,683.922 1223.01,683.922 1223.57,683.922 1224.13,683.922 1224.69,683.922 1225.25,683.922 1225.81,683.922 1226.37,683.922 1226.93,683.922 1227.49,683.922 1228.05,683.922 1228.61,683.922 1229.17,683.922 1229.72,683.922 1230.28,683.922 1230.84,683.922 1231.4,683.922 1231.96,683.922 1232.52,683.922 1233.08,683.922 1233.64,683.922 1234.2,683.922 1234.76,683.922 1235.32,683.922 1235.88,683.922 1236.44,683.922 1236.99,683.922 1237.55,683.922 1238.11,683.922 1238.67,683.922 1239.23,683.922 1239.79,683.922 1240.35,683.922 1240.91,683.922 1241.47,683.922 1242.03,683.922 1242.59,683.922 1243.15,683.922 1243.71,683.922 1244.26,683.922 1244.82,683.922 1245.38,683.922 1245.94,683.922 1246.5,683.922 1247.06,683.922 1247.62,683.922 1248.18,683.922 1248.74,683.922 1249.3,683.922 1249.86,683.922 1250.42,683.922 1250.98,683.922 1251.54,683.922 1252.09,683.922 1252.65,683.922 1253.21,683.922 1253.77,683.922 1254.33,683.922 1254.89,683.922 1255.45,683.922 1256.01,683.922 1256.57,683.922 1257.13,683.922 1257.69,683.922 1258.25,683.922 1258.81,683.922 1259.36,683.922 1259.92,683.922 1260.48,683.922 1261.04,683.922 1261.6,683.922 1262.16,683.922 1262.72,683.922 1263.28,683.922 1263.84,683.922 1264.4,683.922 1264.96,683.922 1265.52,683.922 1266.08,683.922 1266.63,683.922 1267.19,683.922 1267.75,683.922 1268.31,683.922 1268.87,683.922 1269.43,683.922 1269.99,683.922 1270.55,683.922 1271.11,683.922 1271.67,683.922 1272.23,683.922 1272.79,683.922 1273.35,683.922 1273.91,683.922 1274.46,683.922 1275.02,683.922 1275.58,683.922 1276.14,683.922 1276.7,683.922 1277.26,683.922 1277.82,683.922 1278.38,683.922 1278.94,683.922 1279.5,683.922 1280.06,683.922 1280.62,683.922 1281.18,683.922 1281.73,683.922 1282.29,683.922 1282.85,683.922 1283.41,683.922 1283.97,683.922 1284.53,683.922 1285.09,683.922 1285.65,683.922 1286.21,683.922 1286.77,683.922 1287.33,683.922 1287.89,683.922 1288.45,683.922 1289,683.922 1289.56,683.922 1290.12,683.922 1290.68,683.922 1291.24,683.922 1291.8,683.922 1292.36,683.922 1292.92,683.922 1293.48,683.922 1294.04,683.922 1294.6,683.922 1295.16,683.922 1295.72,683.922 1296.28,683.922 1296.83,683.922 1297.39,683.922 1297.95,683.922 1298.51,683.922 1299.07,683.922 1299.63,683.922 1300.19,683.922 1300.75,683.922 1301.31,683.922 1301.87,683.922 1302.43,683.922 1302.99,683.922 1303.55,683.922 1304.1,683.922 1304.66,683.922 1305.22,683.922 1305.78,683.922 1306.34,683.922 1306.9,683.922 1307.46,683.922 1308.02,683.922 1308.58,683.922 1309.14,683.922 1309.7,683.922 1310.26,683.922 1310.82,683.922 1311.38,683.922 1311.93,683.922 1312.49,683.922 1313.05,683.922 1313.61,683.922 1314.17,683.922 1314.73,683.922 1315.29,683.922 1315.85,683.922 1316.41,683.922 1316.97,683.922 1317.53,683.922 1318.09,683.922 1318.65,683.922 1319.2,683.922 1319.76,683.922 1320.32,683.922 1320.88,683.922 1321.44,683.922 1322,683.922 1322.56,683.922 1323.12,683.922 1323.68,683.922 1324.24,683.922 1324.8,683.922 1325.36,683.922 1325.92,683.922 1326.47,683.922 1327.03,683.922 1327.59,683.922 1328.15,683.922 1328.71,683.922 1329.27,683.922 1329.83,683.922 1330.39,683.922 1330.95,683.922 1331.51,683.922 1332.07,683.922 1332.63,683.922 1333.19,683.922 1333.75,683.922 1334.3,683.922 1334.86,683.922 1335.42,683.922 1335.98,683.922 1336.54,683.922 1337.1,683.922 1337.66,683.922 1338.22,683.922 1338.78,683.922 1339.34,683.922 1339.9,683.922 1340.46,683.922 1341.02,683.922 1341.57,683.922 1342.13,683.922 1342.69,683.922 1343.25,683.922 1343.81,683.922 1344.37,683.922 1344.93,683.922 1345.49,683.922 1346.05,683.922 1346.61,683.922 1347.17,683.922 1347.73,683.922 1348.29,683.922 1348.84,683.922 1349.4,683.922 1349.96,683.922 1350.52,683.922 1351.08,683.922 1351.64,683.922 1352.2,683.922 1352.76,683.922 1353.32,683.922 1353.88,683.922 1354.44,683.922 1355,683.922 1355.56,683.922 1356.12,683.922 1356.67,683.922 1357.23,683.922 1357.79,683.922 1358.35,683.922 1358.91,683.922 1359.47,683.922 1360.03,683.922 1360.59,683.922 1361.15,683.922 1361.71,683.922 1362.27,683.922 1362.83,683.922 1363.39,683.922 1363.94,683.922 1364.5,683.922 1365.06,683.922 1365.62,683.922 1366.18,683.922 1366.74,683.922 1367.3,683.922 1367.86,683.922 1368.42,683.922 1368.98,683.922 1369.54,683.922 1370.1,683.922 1370.66,683.922 1371.21,683.922 1371.77,683.922 1372.33,683.922 1372.89,683.922 1373.45,683.922 1374.01,683.922 1374.57,683.922 1375.13,683.922 1375.69,683.922 1376.25,683.922 1376.81,683.922 1377.37,683.922 1377.93,683.922 1378.49,683.922 1379.04,683.922 1379.6,683.922 1380.16,683.922 1380.72,683.922 1381.28,683.922 1381.84,683.922 1382.4,683.922 1382.96,683.922 1383.52,683.922 1384.08,683.922 1384.64,683.922 1385.2,683.922 1385.76,683.922 1386.31,683.922 1386.87,683.922 1387.43,683.922 1387.99,683.922 1388.55,683.922 1389.11,683.922 1389.67,683.922 1390.23,683.922 1390.79,683.922 1391.35,683.922 1391.91,683.922 1392.47,683.922 1393.03,683.922 1393.58,683.922 1394.14,683.922 1394.7,683.922 1395.26,683.922 1395.82,683.922 1396.38,683.922 1396.94,683.922 1397.5,683.922 1398.06,683.922 1398.62,683.922 1399.18,683.922 1399.74,683.922 1400.3,683.922 1400.86,683.922 1401.41,683.922 1401.97,683.922 1402.53,683.922 1403.09,683.922 1403.65,683.922 1404.21,683.922 1404.77,683.922 1405.33,683.922 1405.89,683.922 1406.45,683.922 1407.01,683.922 1407.57,683.922 1408.13,683.922 1408.68,683.922 1409.24,683.922 1409.8,683.922 1410.36,683.922 1410.92,683.922 1411.48,683.922 1412.04,683.922 1412.6,683.922 1413.16,683.922 1413.72,683.922 1414.28,683.922 1414.84,683.922 1415.4,683.922 1415.95,683.922 1416.51,683.922 1417.07,683.922 1417.63,683.922 1418.19,683.922 1418.75,683.922 1419.31,683.922 1419.87,683.922 1420.43,683.922 1420.99,683.922 1421.55,683.922 1422.11,683.922 1422.67,683.922 1423.23,683.922 1423.78,683.922 1424.34,683.922 1424.9,683.922 1425.46,683.922 1426.02,683.922 1426.58,683.922 1427.14,683.922 1427.7,683.922 1428.26,683.922 1428.82,683.922 1429.38,683.922 1429.94,683.922 1430.5,683.922 1431.05,683.922 1431.61,683.922 1432.17,683.922 1432.73,683.922 1433.29,683.922 1433.85,683.922 1434.41,683.922 1434.97,683.922 1435.53,683.922 1436.09,683.922 1436.65,683.922 1437.21,683.922 1437.77,683.922 1438.33,683.922 1438.88,683.922 1439.44,683.922 1440,683.922 1440.56,683.922 1441.12,683.922 1441.68,683.922 1442.24,683.922 1442.8,683.922 1443.36,683.922 1443.92,683.922 1444.48,683.922 1445.04,683.922 1445.6,683.922 1446.15,683.922 1446.71,683.922 1447.27,683.922 1447.83,683.922 1448.39,683.922 1448.95,683.922 1449.51,683.922 1450.07,683.922 1450.63,683.922 1451.19,683.922 1451.75,683.922 1452.31,683.922 1452.87,683.922 1453.42,683.922 1453.98,683.922 1454.54,683.922 1455.1,683.922 1455.66,683.922 1456.22,683.922 1456.78,683.922 1457.34,683.922 1457.9,683.922 1458.46,683.922 1459.02,683.922 1459.58,683.922 1460.14,683.922 1460.7,683.922 1461.25,683.922 1461.81,683.922 1462.37,683.922 1462.93,683.922 1463.49,683.922 1464.05,683.922 1464.61,683.922 1465.17,683.922 1465.73,683.922 1466.29,683.922 1466.85,683.922 1467.41,683.922 1467.97,683.922 1468.52,683.922 1469.08,683.922 1469.64,683.922 1470.2,683.922 1470.76,683.922 1471.32,683.922 1471.88,683.922 1472.44,683.922 1473,683.922 1473.56,683.922 1474.12,683.922 1474.68,683.922 1475.24,683.922 1475.79,683.922 1476.35,683.922 1476.91,683.922 1477.47,683.922 1478.03,683.922 1478.59,683.922 1479.15,683.922 1479.71,683.922 1480.27,683.922 1480.83,683.922 1481.39,683.922 1481.95,683.922 1482.51,683.922 1483.07,683.922 1483.62,683.922 1484.18,683.922 1484.74,683.922 1485.3,683.922 1485.86,683.922 1486.42,683.922 1486.98,683.922 1487.54,683.922 1488.1,683.922 1488.66,683.922 1489.22,683.922 1489.78,683.922 1490.34,683.922 1490.89,683.922 1491.45,683.922 1492.01,683.922 1492.57,683.922 1493.13,683.922 1493.69,683.922 1494.25,683.922 1494.81,683.922 1495.37,683.922 1495.93,683.922 1496.49,683.922 1497.05,683.922 1497.61,683.922 1498.16,683.922 1498.72,683.922 1499.28,683.922 1499.84,683.922 1500.4,683.922 1500.96,683.922 1501.52,683.922 1502.08,683.922 1502.64,683.922 1503.2,683.922 1503.76,683.922 1504.32,683.922 1504.88,683.922 1505.44,683.922 1505.99,683.922 1506.55,683.922 1507.11,683.922 1507.67,683.922 1508.23,683.922 1508.79,683.922 1509.35,683.922 1509.91,683.922 1510.47,683.922 1511.03,683.922 1511.59,683.922 1512.15,683.922 1512.71,683.922 1513.26,683.922 1513.82,683.922 1514.38,683.922 1514.94,683.922 1515.5,683.922 1516.06,683.922 1516.62,683.922 1517.18,683.922 1517.74,683.922 1518.3,683.922 1518.86,683.922 1519.42,683.922 1519.98,683.922 1520.53,683.922 1521.09,683.922 1521.65,683.922 1522.21,683.922 1522.77,683.922 1523.33,683.922 1523.89,683.922 1524.45,683.922 1525.01,683.922 1525.57,683.922 1526.13,683.922 1526.69,683.922 1527.25,683.922 1527.81,683.922 1528.36,683.922 1528.92,683.922 1529.48,683.922 1530.04,683.922 1530.6,683.922 1531.16,683.922 1531.72,683.922 1532.28,683.922 1532.84,683.922 1533.4,683.922 1533.96,683.922 1534.52,683.922 1535.08,683.922 1535.63,683.922 1536.19,683.922 1536.75,683.922 1537.31,683.922 1537.87,683.922 1538.43,683.922 1538.99,683.922 1539.55,683.922 1540.11,683.922 1540.67,683.922 1541.23,683.922 1541.79,683.922 1542.35,683.922 1542.9,683.922 1543.46,683.922 1544.02,683.922 1544.58,683.922 1545.14,683.922 1545.7,683.922 1546.26,683.922 1546.82,683.922 1547.38,683.922 1547.94,683.922 1548.5,683.922 1549.06,683.922 1549.62,683.922 1550.18,683.922 1550.73,683.922 1551.29,683.922 1551.85,683.922 1552.41,683.922 1552.97,683.922 1553.53,683.922 1554.09,683.922 1554.65,683.922 1555.21,683.922 1555.77,683.922 1556.33,683.922 1556.89,683.922 1557.45,683.922 1558,683.922 1558.56,683.922 1559.12,683.922 1559.68,683.922 1560.24,683.922 1560.8,683.922 1561.36,683.922 1561.92,683.922 1562.48,683.922 1563.04,683.922 1563.6,683.922 1564.16,683.922 1564.72,683.922 1565.28,683.922 1565.83,683.922 1566.39,683.922 1566.95,683.922 1567.51,683.922 1568.07,683.922 1568.63,683.922 1569.19,683.922 1569.75,683.922 1570.31,683.922 1570.87,683.922 1571.43,683.922 1571.99,683.922 1572.55,683.922 1573.1,683.922 1573.66,683.922 1574.22,683.922 1574.78,683.922 1575.34,683.922 1575.9,683.922 1576.46,683.922 1577.02,683.922 1577.58,683.922 1578.14,683.922 1578.7,683.922 1579.26,683.922 1579.82,683.922 1580.37,683.922 1580.93,683.922 1581.49,683.922 1582.05,683.922 1582.61,683.922 1583.17,683.922 1583.73,683.922 1584.29,683.922 1584.85,683.922 1585.41,683.922 1585.97,683.922 1586.53,683.922 1587.09,683.922 1587.65,683.922 1588.2,683.922 1588.76,683.922 1589.32,683.922 1589.88,683.922 1590.44,683.922 1591,683.922 1591.56,683.922 1592.12,683.922 1592.68,683.922 1593.24,683.922 1593.8,683.922 1594.36,683.922 1594.92,683.922 1595.47,683.922 1596.03,683.922 1596.59,683.922 1597.15,683.922 1597.71,683.922 1598.27,683.922 1598.83,683.922 1599.39,683.922 1599.95,683.922 1600.51,683.922 1601.07,683.922 1601.63,683.922 1602.19,683.922 1602.74,683.922 1603.3,683.922 1603.86,683.922 1604.42,683.922 1604.98,683.922 1605.54,683.922 1606.1,683.922 1606.66,683.922 1607.22,683.922 1607.78,683.922 1608.34,683.922 1608.9,683.922 1609.46,683.922 1610.02,683.922 1610.57,683.922 1611.13,683.922 1611.69,683.922 1612.25,683.922 1612.81,683.922 1613.37,683.922 1613.93,683.922 1614.49,683.922 1615.05,683.922 1615.61,683.922 1616.17,683.922 1616.73,683.922 1617.29,683.922 1617.84,683.922 1618.4,683.922 1618.96,683.922 1619.52,683.922 1620.08,683.922 1620.64,683.922 1621.2,683.922 1621.76,683.922 1622.32,683.922 1622.88,683.922 1623.44,683.922 1624,683.922 1624.56,683.922 1625.11,683.922 1625.67,683.922 1626.23,683.922 1626.79,683.922 1627.35,683.922 1627.91,683.922 1628.47,683.922 1629.03,683.922 1629.59,683.922 1630.15,683.922 1630.71,683.922 1631.27,683.922 1631.83,683.922 1632.39,683.922 1632.94,683.922 1633.5,683.922 1634.06,683.922 1634.62,683.922 1635.18,683.922 1635.74,683.922 1636.3,683.922 1636.86,683.922 1637.42,683.922 1637.98,683.922 1638.54,683.922 1639.1,683.922 1639.66,683.922 1640.21,683.922 1640.77,683.922 1641.33,683.922 1641.89,683.922 1642.45,683.922 1643.01,683.922 1643.57,683.922 1644.13,683.922 1644.69,683.922 1645.25,683.922 1645.81,683.922 1646.37,683.922 1646.93,683.922 1647.48,683.922 1648.04,683.922 1648.6,683.922 1649.16,683.922 1649.72,683.922 1650.28,683.922 1650.84,683.922 1651.4,683.922 1651.96,683.922 1652.52,683.922 1653.08,683.922 1653.64,683.922 1654.2,683.922 1654.76,683.922 1655.31,683.922 1655.87,683.922 1656.43,683.922 1656.99,683.922 1657.55,683.922 1658.11,683.922 1658.67,683.922 1659.23,683.922 1659.79,683.922 1660.35,683.922 1660.91,683.922 1661.47,683.922 1662.03,683.922 1662.58,683.922 1663.14,683.922 1663.7,683.922 1664.26,683.922 1664.82,683.922 1665.38,683.922 1665.94,683.922 1666.5,683.922 1667.06,683.922 1667.62,683.922 1668.18,683.922 1668.74,683.922 1669.3,683.922 1669.85,683.922 1670.41,683.922 1670.97,683.922 1671.53,683.922 1672.09,683.922 1672.65,683.922 1673.21,683.922 1673.77,683.922 1674.33,683.922 1674.89,683.922 1675.45,683.922 1676.01,683.922 1676.57,683.922 1677.13,683.922 1677.68,683.922 1678.24,683.922 1678.8,683.922 1679.36,683.922 1679.92,683.922 1680.48,683.922 1681.04,683.922 1681.6,683.922 1682.16,683.922 1682.72,683.922 1683.28,683.922 1683.84,683.922 1684.4,683.922 1684.95,683.922 1685.51,683.922 1686.07,683.922 1686.63,683.922 1687.19,683.922 1687.75,683.922 1688.31,683.922 1688.87,683.922 1689.43,683.922 1689.99,683.922 1690.55,683.922 1691.11,683.922 1691.67,683.922 1692.23,683.922 1692.78,683.922 1693.34,683.922 1693.9,683.922 1694.46,683.922 1695.02,683.922 1695.58,683.922 1696.14,683.922 1696.7,683.922 1697.26,683.922 1697.82,683.922 1698.38,683.922 1698.94,683.922 1699.5,683.922 1700.05,683.922 1700.61,683.922 1701.17,683.922 1701.73,683.922 1702.29,683.922 1702.85,683.922 1703.41,683.922 1703.97,683.922 1704.53,683.922 1705.09,683.922 1705.65,683.922 1706.21,683.922 1706.77,683.922 1707.32,683.922 1707.88,683.922 1708.44,683.922 1709,683.922 1709.56,683.922 1710.12,683.922 1710.68,683.922 1711.24,683.922 1711.8,683.922 1712.36,683.922 1712.92,683.922 1713.48,683.922 1714.04,683.922 1714.6,683.922 1715.15,683.922 1715.71,683.922 1716.27,683.922 1716.83,683.922 1717.39,683.922 1717.95,683.922 1718.51,683.922 1719.07,683.922 1719.63,683.922 1720.19,683.922 1720.75,683.922 1721.31,683.922 1721.87,683.922 1722.42,683.922 1722.98,683.922 1723.54,683.922 1724.1,683.922 1724.66,683.922 1725.22,683.922 1725.78,683.922 1726.34,683.922 1726.9,683.922 1727.46,683.922 1728.02,683.922 1728.58,683.922 1729.14,683.922 1729.69,683.922 1730.25,683.922 1730.81,683.922 1731.37,683.922 1731.93,683.922 1732.49,683.922 1733.05,683.922 1733.61,683.922 1734.17,683.922 1734.73,683.922 1735.29,683.922 1735.85,683.922 1736.41,683.922 1736.97,683.922 1737.52,683.922 1738.08,683.922 1738.64,683.922 1739.2,683.922 1739.76,683.922 1740.32,683.922 1740.88,683.922 1741.44,683.922 1742,683.922 1742.56,683.922 1743.12,683.922 1743.68,683.922 1744.24,683.922 1744.79,683.922 1745.35,683.922 1745.91,683.922 1746.47,683.922 1747.03,683.922 1747.59,683.922 1748.15,683.922 1748.71,683.922 1749.27,683.922 1749.83,683.922 1750.39,683.922 1750.95,683.922 1751.51,683.922 1752.06,683.922 1752.62,683.922 1753.18,683.922 1753.74,683.922 1754.3,683.922 1754.86,683.922 1755.42,683.922 1755.98,683.922 1756.54,683.922 1757.1,683.922 1757.66,683.922 1758.22,683.922 1758.78,683.922 1759.34,683.922 1759.89,683.922 1760.45,683.922 1761.01,683.922 1761.57,683.922 1762.13,683.922 1762.69,683.922 1763.25,683.922 1763.81,683.922 1764.37,683.922 1764.93,683.922 1765.49,683.922 1766.05,683.922 1766.61,683.922 1767.16,683.922 1767.72,683.922 1768.28,683.922 1768.84,683.922 1769.4,683.922 1769.96,683.922 1770.52,683.922 1771.08,683.922 1771.64,683.922 1772.2,683.922 1772.76,683.922 1773.32,683.922 1773.88,683.922 1774.43,683.922 1774.99,683.922 1775.55,683.922 1776.11,683.922 1776.67,683.922 1777.23,683.922 1777.79,683.922 1778.35,683.922 1778.91,683.922 1779.47,683.922 1780.03,683.922 1780.59,683.922 1781.15,683.922 1781.71,683.922 1782.26,683.922 1782.82,683.922 1783.38,683.922 1783.94,683.922 1784.5,683.922 1785.06,683.922 1785.62,683.922 1786.18,683.922 1786.74,683.922 1787.3,683.922 1787.86,683.922 1788.42,683.922 1788.98,683.922 1789.53,683.922 1790.09,683.922 1790.65,683.922 1791.21,683.922 1791.77,683.922 1792.33,683.922 1792.89,683.922 1793.45,683.922 1794.01,683.922 1794.57,683.922 1795.13,683.922 1795.69,683.922 1796.25,683.922 1796.8,683.922 1797.36,683.922 1797.92,683.922 1798.48,683.922 1799.04,683.922 1799.6,683.922 1800.16,683.922 1800.72,683.922 1801.28,683.922 1801.84,683.922 1802.4,683.922 1802.96,683.922 1803.52,683.922 1804.08,683.922 1804.63,683.922 1805.19,683.922 1805.75,683.922 1806.31,683.922 1806.87,683.922 1807.43,683.922 1807.99,683.922 1808.55,683.922 1809.11,683.922 1809.67,683.922 1810.23,683.922 1810.79,683.922 1811.35,683.922 1811.9,683.922 1812.46,683.922 1813.02,683.922 1813.58,683.922 1814.14,683.922 1814.7,683.922 1815.26,683.922 1815.82,683.922 1816.38,683.922 1816.94,683.922 1817.5,683.922 1818.06,683.922 1818.62,683.922 1819.18,683.922 1819.73,683.922 1820.29,683.922 1820.85,683.922 1821.41,683.922 1821.97,683.922 1822.53,683.922 1823.09,683.922 1823.65,683.922 1824.21,683.922 1824.77,683.922 1825.33,683.922 1825.89,683.922 1826.45,683.922 1827,683.922 1827.56,683.922 1828.12,683.922 1828.68,683.922 1829.24,683.922 1829.8,683.922 1830.36,683.922 1830.92,683.922 1831.48,683.922 1832.04,683.922 1832.6,683.922 1833.16,683.922 1833.72,683.922 1834.27,683.922 1834.83,683.922 1835.39,683.922 1835.95,683.922 1836.51,683.922 1837.07,683.922 1837.63,683.922 1838.19,683.922 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030180038604509 ± 0.023198843822621985\nProjected Energy: -4.016785020703425 ± (0.004358047327035486, 0.004165649033827101)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.09842</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.3833e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.174e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5489e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.526e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.053e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3205e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321594\n -3.363124291613371\n -0.759019192277087\n  0.1358418221962232\n  0.15789998694608443\n  0.8767114411781343\n  1.5305929970973287\n  1.5835732611867481\n  3.072870330325853\n  3.1256726539518365\n  4.862107221562176\n  6.260694850380595\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
