var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21337402916797582 ± 0.0017504919573437196\n   G2(1) = 0.9176937953514712 ± 0.0007784736836045175\n   G2(2) = 0.9824372279972522 ± 0.0007261043254661295\n   G2(3) = 0.9863639241345785 ± 0.0008227101077051275\n   G2(4) = 0.9824372279972522 ± 0.0007261043254661295\n   G2(5) = 0.9176937953514712 ± 0.0007784736836045175\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9687433635290166 ± 0.14463715086082776\n   Replica 2: -4.073535798699478 ± 0.13145003192555405\n   Replica 3: -4.073331842204112 ± 0.1361495161389489\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip540\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip541\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip542\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.98 2211.02,1002.98 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.126 2211.02,745.126 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.267 2211.02,487.267 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.409 2211.02,229.409 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.98 423.181,1002.98 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.126 423.181,745.126 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.267 423.181,487.267 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.409 423.181,229.409 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M290.043 1016.33 L306.363 1016.33 L306.363 1020.26 L284.418 1020.26 L284.418 1016.33 Q287.08 1013.57 291.664 1008.95 Q296.27 1004.29 297.451 1002.95 Q299.696 1000.43 300.576 998.69 Q301.478 996.931 301.478 995.241 Q301.478 992.487 299.534 990.751 Q297.613 989.015 294.511 989.015 Q292.312 989.015 289.858 989.778 Q287.427 990.542 284.65 992.093 L284.65 987.371 Q287.474 986.237 289.927 985.658 Q292.381 985.079 294.418 985.079 Q299.789 985.079 302.983 987.765 Q306.177 990.45 306.177 994.94 Q306.177 997.07 305.367 998.991 Q304.58 1000.89 302.474 1003.48 Q301.895 1004.15 298.793 1007.37 Q295.691 1010.57 290.043 1016.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M316.224 985.704 L334.58 985.704 L334.58 989.64 L320.506 989.64 L320.506 998.112 Q321.524 997.765 322.543 997.602 Q323.562 997.417 324.58 997.417 Q330.367 997.417 333.747 1000.59 Q337.126 1003.76 337.126 1009.18 Q337.126 1014.76 333.654 1017.86 Q330.182 1020.94 323.862 1020.94 Q321.687 1020.94 319.418 1020.57 Q317.173 1020.19 314.765 1019.45 L314.765 1014.76 Q316.849 1015.89 319.071 1016.44 Q321.293 1017 323.77 1017 Q327.774 1017 330.112 1014.89 Q332.45 1012.79 332.45 1009.18 Q332.45 1005.57 330.112 1003.46 Q327.774 1001.35 323.77 1001.35 Q321.895 1001.35 320.02 1001.77 Q318.168 1002.19 316.224 1003.07 L316.224 985.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M356.339 988.783 Q352.728 988.783 350.899 992.348 Q349.094 995.89 349.094 1003.02 Q349.094 1010.13 350.899 1013.69 Q352.728 1017.23 356.339 1017.23 Q359.973 1017.23 361.779 1013.69 Q363.608 1010.13 363.608 1003.02 Q363.608 995.89 361.779 992.348 Q359.973 988.783 356.339 988.783 M356.339 985.079 Q362.149 985.079 365.205 989.686 Q368.284 994.269 368.284 1003.02 Q368.284 1011.75 365.205 1016.35 Q362.149 1020.94 356.339 1020.94 Q350.529 1020.94 347.45 1016.35 Q344.395 1011.75 344.395 1003.02 Q344.395 994.269 347.45 989.686 Q350.529 985.079 356.339 985.079 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M286.062 727.846 L304.418 727.846 L304.418 731.781 L290.344 731.781 L290.344 740.253 Q291.363 739.906 292.381 739.744 Q293.4 739.559 294.418 739.559 Q300.205 739.559 303.585 742.73 Q306.964 745.901 306.964 751.318 Q306.964 756.897 303.492 759.998 Q300.02 763.077 293.701 763.077 Q291.525 763.077 289.256 762.707 Q287.011 762.336 284.603 761.596 L284.603 756.897 Q286.687 758.031 288.909 758.586 Q291.131 759.142 293.608 759.142 Q297.613 759.142 299.951 757.036 Q302.288 754.929 302.288 751.318 Q302.288 747.707 299.951 745.6 Q297.613 743.494 293.608 743.494 Q291.733 743.494 289.858 743.911 Q288.006 744.327 286.062 745.207 L286.062 727.846 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M326.177 730.925 Q322.566 730.925 320.737 734.489 Q318.932 738.031 318.932 745.161 Q318.932 752.267 320.737 755.832 Q322.566 759.373 326.177 759.373 Q329.811 759.373 331.617 755.832 Q333.446 752.267 333.446 745.161 Q333.446 738.031 331.617 734.489 Q329.811 730.925 326.177 730.925 M326.177 727.221 Q331.987 727.221 335.043 731.827 Q338.122 736.411 338.122 745.161 Q338.122 753.887 335.043 758.494 Q331.987 763.077 326.177 763.077 Q320.367 763.077 317.288 758.494 Q314.233 753.887 314.233 745.161 Q314.233 736.411 317.288 731.827 Q320.367 727.221 326.177 727.221 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M356.339 730.925 Q352.728 730.925 350.899 734.489 Q349.094 738.031 349.094 745.161 Q349.094 752.267 350.899 755.832 Q352.728 759.373 356.339 759.373 Q359.973 759.373 361.779 755.832 Q363.608 752.267 363.608 745.161 Q363.608 738.031 361.779 734.489 Q359.973 730.925 356.339 730.925 M356.339 727.221 Q362.149 727.221 365.205 731.827 Q368.284 736.411 368.284 745.161 Q368.284 753.887 365.205 758.494 Q362.149 763.077 356.339 763.077 Q350.529 763.077 347.45 758.494 Q344.395 753.887 344.395 745.161 Q344.395 736.411 347.45 731.827 Q350.529 727.221 356.339 727.221 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M284.835 469.987 L307.057 469.987 L307.057 471.978 L294.511 504.547 L289.627 504.547 L301.432 473.923 L284.835 473.923 L284.835 469.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M316.224 469.987 L334.58 469.987 L334.58 473.923 L320.506 473.923 L320.506 482.395 Q321.524 482.047 322.543 481.885 Q323.562 481.7 324.58 481.7 Q330.367 481.7 333.747 484.872 Q337.126 488.043 337.126 493.459 Q337.126 499.038 333.654 502.14 Q330.182 505.219 323.862 505.219 Q321.687 505.219 319.418 504.848 Q317.173 504.478 314.765 503.737 L314.765 499.038 Q316.849 500.172 319.071 500.728 Q321.293 501.283 323.77 501.283 Q327.774 501.283 330.112 499.177 Q332.45 497.071 332.45 493.459 Q332.45 489.848 330.112 487.742 Q327.774 485.635 323.77 485.635 Q321.895 485.635 320.02 486.052 Q318.168 486.469 316.224 487.348 L316.224 469.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M356.339 473.066 Q352.728 473.066 350.899 476.631 Q349.094 480.172 349.094 487.302 Q349.094 494.409 350.899 497.973 Q352.728 501.515 356.339 501.515 Q359.973 501.515 361.779 497.973 Q363.608 494.409 363.608 487.302 Q363.608 480.172 361.779 476.631 Q359.973 473.066 356.339 473.066 M356.339 469.362 Q362.149 469.362 365.205 473.969 Q368.284 478.552 368.284 487.302 Q368.284 496.029 365.205 500.635 Q362.149 505.219 356.339 505.219 Q350.529 505.219 347.45 500.635 Q344.395 496.029 344.395 487.302 Q344.395 478.552 347.45 473.969 Q350.529 469.362 356.339 469.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M256.664 242.754 L264.303 242.754 L264.303 216.388 L255.992 218.055 L255.992 213.795 L264.256 212.129 L268.932 212.129 L268.932 242.754 L276.571 242.754 L276.571 246.689 L256.664 246.689 L256.664 242.754 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M296.015 215.208 Q292.404 215.208 290.576 218.772 Q288.77 222.314 288.77 229.444 Q288.77 236.55 290.576 240.115 Q292.404 243.656 296.015 243.656 Q299.65 243.656 301.455 240.115 Q303.284 236.55 303.284 229.444 Q303.284 222.314 301.455 218.772 Q299.65 215.208 296.015 215.208 M296.015 211.504 Q301.826 211.504 304.881 216.11 Q307.96 220.694 307.96 229.444 Q307.96 238.17 304.881 242.777 Q301.826 247.36 296.015 247.36 Q290.205 247.36 287.127 242.777 Q284.071 238.17 284.071 229.444 Q284.071 220.694 287.127 216.11 Q290.205 211.504 296.015 211.504 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M326.177 215.208 Q322.566 215.208 320.737 218.772 Q318.932 222.314 318.932 229.444 Q318.932 236.55 320.737 240.115 Q322.566 243.656 326.177 243.656 Q329.811 243.656 331.617 240.115 Q333.446 236.55 333.446 229.444 Q333.446 222.314 331.617 218.772 Q329.811 215.208 326.177 215.208 M326.177 211.504 Q331.987 211.504 335.043 216.11 Q338.122 220.694 338.122 229.444 Q338.122 238.17 335.043 242.777 Q331.987 247.36 326.177 247.36 Q320.367 247.36 317.288 242.777 Q314.233 238.17 314.233 229.444 Q314.233 220.694 317.288 216.11 Q320.367 211.504 326.177 211.504 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M356.339 215.208 Q352.728 215.208 350.899 218.772 Q349.094 222.314 349.094 229.444 Q349.094 236.55 350.899 240.115 Q352.728 243.656 356.339 243.656 Q359.973 243.656 361.779 240.115 Q363.608 236.55 363.608 229.444 Q363.608 222.314 361.779 218.772 Q359.973 215.208 356.339 215.208 M356.339 211.504 Q362.149 211.504 365.205 216.11 Q368.284 220.694 368.284 229.444 Q368.284 238.17 365.205 242.777 Q362.149 247.36 356.339 247.36 Q350.529 247.36 347.45 242.777 Q344.395 238.17 344.395 229.444 Q344.395 220.694 347.45 216.11 Q350.529 211.504 356.339 211.504 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip542)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.409 4017.76,229.409 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.74 461.669,1245.98 462.238,1245.14 462.806,1243.19 463.375,1241.15 463.943,1240.05 464.511,1238.86 465.08,1237.56 465.648,1236.16 466.216,1233.58 466.785,1230.94 467.353,1229.21 467.921,1225.3 468.49,1223.28 469.058,1221.15 469.626,1216.78 470.195,1214.33 470.763,1211.68 471.331,1207.83 471.9,1203.82 472.468,1200.62 473.036,1197.22 473.605,1193.67 474.173,1189.89 474.741,1184.87 475.31,1180.64 475.878,1176.22 476.446,1170.54 477.015,1165.68 477.583,1160.64 478.152,1155.35 478.72,1149.83 479.288,1144.01 479.857,1137.04 480.425,1128.85 480.993,1121.44 481.562,1111.76 482.13,1103.92 482.698,1096.96 483.267,1088.84 483.835,1081.47 484.403,1072.86 484.972,1065.03 485.54,1056.1 486.108,1047.02 486.677,1037.79 487.245,1029.43 487.813,1019.91 488.382,1010.22 488.95,996.436 489.518,986.731 490.087,974.918 490.655,963.687 491.224,952.582 491.792,942.57 492.36,930.278 492.929,920.084 493.497,909.81 494.065,900.42 494.634,890.115 495.202,878.699 495.77,868.303 496.339,855.828 496.907,845.642 497.475,835.301 498.044,822.905 498.612,812.737 499.18,802.523 499.749,792.501 500.317,783.421 500.885,773.214 501.454,762.149 502.022,752.295 502.59,741.299 503.159,731.554 503.727,721.706 504.295,712.996 504.864,703.323 505.432,693.76 506.001,685.372 506.569,676.983 507.137,664.485 507.706,651.291 508.274,642.532 508.842,633.95 509.411,624.152 509.979,616.691 510.547,607.234 511.116,597.047 511.684,587.963 512.252,578.129 512.821,570.591 513.389,564.07 513.957,552.603 514.526,546.349 515.094,539.315 515.662,533.264 516.231,527.394 516.799,519.535 517.367,512.774 517.936,508.294 518.504,500.413 519.072,493.969 519.641,486.48 520.209,479.106 520.778,473.236 521.346,469.492 521.914,462.466 522.483,456.895 523.051,449.386 523.619,443.105 524.188,437.049 524.756,433.021 525.324,428.191 525.893,421.181 526.461,416.545 527.029,409.954 527.598,405.829 528.166,401.682 528.734,398.642 529.303,394.82 529.871,393.017 530.439,390.134 531.008,385.976 531.576,383.159 532.144,379.175 532.713,376.156 533.281,372.151 533.85,369.653 534.418,367.071 534.986,364.653 535.555,362.957 536.123,359.371 536.691,353.668 537.26,352.163 537.828,349.746 538.396,346.266 538.965,342.911 539.533,340.681 540.101,337.832 540.67,336.796 541.238,335.731 541.806,333.884 542.375,333.848 542.943,332.501 543.511,329.138 544.08,327.896 544.648,325.679 545.216,323.656 545.785,319.537 546.353,313.581 546.921,312.952 547.49,311.399 548.058,309.836 548.627,308.192 549.195,303.506 549.763,302.247 550.332,300.946 550.9,299.435 551.468,298.265 552.037,295.891 552.605,295.492 553.173,291.111 553.742,290.17 554.31,285.983 554.878,285.394 555.447,282.462 556.015,280.762 556.583,278.277 557.152,277.831 557.72,272.261 558.288,271.148 558.857,269.175 559.425,268.977 559.993,270.968 560.562,272.862 561.13,271.45 561.698,268.073 562.267,267.835 562.835,267.939 563.404,265.952 563.972,263.864 564.54,264.168 565.109,265.287 565.677,264.019 566.245,265.057 566.814,263.9 567.382,260.591 567.95,262.567 568.519,261.545 569.087,261.437 569.655,261.429 570.224,261.082 570.792,261.706 571.36,259.304 571.929,259.068 572.497,259.992 573.065,258.902 573.634,258.463 574.202,258.218 574.77,254.952 575.339,253.854 575.907,254.031 576.476,251.973 577.044,252.013 577.612,251.259 578.181,252.331 578.749,251.256 579.317,252.415 579.886,251.384 580.454,250.279 581.022,248.097 581.591,248.278 582.159,249.447 582.727,249.521 583.296,249.746 583.864,248.801 584.432,247.824 585.001,247.947 585.569,248.331 586.137,247.197 586.706,246.655 587.274,246.728 587.842,246.924 588.411,245.964 588.979,244.079 589.547,245.302 590.116,242.521 590.684,242.89 591.253,245.297 591.821,243.29 592.389,242.527 592.958,242.001 593.526,242.341 594.094,241.574 594.663,241.182 595.231,242.723 595.799,242.056 596.368,242.656 596.936,242.958 597.504,241.222 598.073,241.715 598.641,238.899 599.209,238.363 599.778,237.792 600.346,239.512 600.914,239.986 601.483,241.433 602.051,242.674 602.619,241.881 603.188,243.451 603.756,242.624 604.325,241.735 604.893,240.035 605.461,241.305 606.03,241.546 606.598,241.911 607.166,241.163 607.735,241.546 608.303,242.771 608.871,241.965 609.44,242.182 610.008,240.425 610.576,240.875 611.145,240.116 611.713,240.418 612.281,242.744 612.85,240.749 613.418,237.926 613.986,236.365 614.555,236.837 615.123,238.513 615.691,238.723 616.26,238.252 616.828,237.544 617.396,236.885 617.965,237.162 618.533,237.538 619.102,237.637 619.67,238.819 620.238,238.053 620.807,240.574 621.375,241.454 621.943,240.292 622.512,239.399 623.08,239.645 623.648,238.936 624.217,240.115 624.785,238.182 625.353,239.428 625.922,241.683 626.49,242.734 627.058,242.51 627.627,241.247 628.195,239.13 628.763,238.177 629.332,236.366 629.9,235.606 630.468,235.028 631.037,235.492 631.605,237.878 632.173,237.364 632.742,241.484 633.31,243.584 633.879,242.381 634.447,242.906 635.015,242.67 635.584,242.523 636.152,243.361 636.72,243.831 637.289,242.564 637.857,241.214 638.425,236.99 638.994,236.944 639.562,236.365 640.13,236.481 640.699,237.729 641.267,236.688 641.835,235.843 642.404,238.274 642.972,236.226 643.54,237.311 644.109,237.113 644.677,236.019 645.245,236.199 645.814,236.26 646.382,238.212 646.951,240.22 647.519,240.304 648.087,241.206 648.656,240.127 649.224,239.904 649.792,239.728 650.361,239.472 650.929,238.311 651.497,239.152 652.066,239.057 652.634,237.796 653.202,237.619 653.771,236.385 654.339,234.269 654.907,234.355 655.476,233.274 656.044,234.297 656.612,234.348 657.181,231.12 657.749,230.295 658.317,229.643 658.886,232.308 659.454,234.762 660.022,233.877 660.591,233.984 661.159,234.169 661.728,234.181 662.296,234.215 662.864,233.217 663.433,230.178 664.001,232.813 664.569,231.993 665.138,233.19 665.706,234.338 666.274,233.248 666.843,232.289 667.411,233.613 667.979,234.734 668.548,234.589 669.116,234.619 669.684,235.828 670.253,236.879 670.821,237.778 671.389,236.324 671.958,238.33 672.526,236.204 673.094,238.227 673.663,236.967 674.231,235.848 674.799,236.856 675.368,236.615 675.936,236.443 676.505,236.504 677.073,234.145 677.641,232.074 678.21,232.412 678.778,233.593 679.346,233.819 679.915,234.026 680.483,230.944 681.051,229.001 681.62,230.577 682.188,230.729 682.756,228.87 683.325,228.138 683.893,228.526 684.461,229.081 685.03,230.442 685.598,231.793 686.166,234.924 686.735,234.652 687.303,233.733 687.871,231.769 688.44,231.026 689.008,231.173 689.577,230.23 690.145,227.166 690.713,227.595 691.282,227.19 691.85,224.751 692.418,225.367 692.987,227.143 693.555,227.813 694.123,228.362 694.692,232.866 695.26,232.033 695.828,232.258 696.397,233.387 696.965,233.396 697.533,232.414 698.102,232.465 698.67,231.882 699.238,231.918 699.807,231.244 700.375,230.594 700.943,228.855 701.512,230.237 702.08,232.733 702.648,231.926 703.217,234.136 703.785,234.186 704.354,233.118 704.922,234.178 705.49,236.209 706.059,236.059 706.627,236.037 707.195,234.944 707.764,235.05 708.332,233.975 708.9,233.016 709.469,233.203 710.037,233.45 710.605,234.577 711.174,233.421 711.742,234.475 712.31,233.576 712.879,233.64 713.447,234.888 714.015,232.829 714.584,235.046 715.152,235.763 715.72,235.668 716.289,234.552 716.857,234.519 717.425,235.317 717.994,236.264 718.562,235.927 719.131,232.79 719.699,230.717 720.267,230.834 720.836,227.852 721.404,226.36 721.972,227.991 722.541,229.32 723.109,228.766 723.677,228.871 724.246,230.153 724.814,230.293 725.382,229.804 725.951,229.832 726.519,230.199 727.087,231.608 727.656,232.723 728.224,232.941 728.792,232.936 729.361,233.972 729.929,231.993 730.497,232.134 731.066,232.275 731.634,232.214 732.203,232.404 732.771,233.385 733.339,232.374 733.908,233.49 734.476,230.193 735.044,228.324 735.613,227.444 736.181,227.68 736.749,229.159 737.318,228.317 737.886,227.497 738.454,226.772 739.023,226.173 739.591,226.927 740.159,226.414 740.728,226.927 741.296,226.332 741.864,229.099 742.433,226.217 743.001,226.588 743.569,227.254 744.138,225.732 744.706,226.296 745.274,225.811 745.843,224.442 746.411,225.453 746.98,227.017 747.548,230.49 748.116,229.654 748.685,229.064 749.253,229.439 749.821,230.968 750.39,233.334 750.958,232.458 751.526,232.542 752.095,229.476 752.663,229.773 753.231,229.092 753.8,232.633 754.368,232.684 754.936,231.83 755.505,232.007 756.073,231.206 756.641,231.248 757.21,232.384 757.778,232.429 758.346,233.396 758.915,234.618 759.483,232.521 760.052,234 760.62,234.992 761.188,238.128 761.757,238.943 762.325,238.59 762.893,238.428 763.462,236.018 764.03,236.846 764.598,234.599 765.167,236.541 765.735,237.39 766.303,234.644 766.872,235.67 767.44,235.628 768.008,235.208 768.577,235.83 769.145,235.643 769.713,235.312 770.282,235.077 770.85,234.002 771.418,233.86 771.987,233.581 772.555,233.479 773.123,233.139 773.692,232.895 774.26,232.647 774.829,232.394 775.397,230.449 775.965,228.528 776.534,229.818 777.102,230.885 777.67,230.77 778.239,230.799 778.807,231.947 779.375,230.965 779.944,229.096 780.512,229.455 781.08,229.443 781.649,227.365 782.217,229.688 782.785,228.626 783.354,229.741 783.922,229.98 784.49,227.762 785.059,228.162 785.627,227.389 786.195,225.522 786.764,224.96 787.332,228.48 787.9,225.555 788.469,225.953 789.037,226.584 789.606,227.92 790.174,230.348 790.742,229.684 791.311,230.905 791.879,229.966 792.447,230.182 793.016,230.322 793.584,232.43 794.152,231.461 794.721,231.642 795.289,229.567 795.857,227.807 796.426,228.203 796.994,230.345 797.562,233.632 798.131,236.614 798.699,236.219 799.267,235.994 799.836,238.647 800.404,240.157 800.972,239.615 801.541,239.082 802.109,238.569 802.678,238.087 803.246,236.59 803.814,235.237 804.383,235.98 804.951,236.641 805.519,237.089 806.088,234.553 806.656,233.14 807.224,230.953 807.793,230.807 808.361,231.836 808.929,231.722 809.498,229.722 810.066,228.714 810.634,225.523 811.203,225.806 811.771,226.084 812.339,226.383 812.908,228.873 813.476,229.757 814.044,232.811 814.613,233.483 815.181,232.263 815.749,234.045 816.318,233.56 816.886,232.258 817.455,231.199 818.023,231.039 818.591,230.875 819.16,230.805 819.728,228.773 820.296,231.148 820.865,229.892 821.433,230.065 822.001,231.974 822.57,230.757 823.138,230.815 823.706,232.693 824.275,231.378 824.843,232.304 825.411,233.121 825.98,231.777 826.548,231.544 827.116,231.39 827.685,232.353 828.253,230.09 828.821,230.212 829.39,231.072 829.958,231.893 830.526,234.91 831.095,234.439 831.663,236.012 832.232,235.68 832.8,233.246 833.368,229.717 833.937,229.571 834.505,228.633 835.073,229.553 835.642,230.543 836.21,230.45 836.778,230.419 837.347,231.326 837.915,229.132 838.483,229.09 839.052,230.019 839.62,229.865 840.188,229.111 840.757,228.323 841.325,227.557 841.893,227.908 842.462,227.142 843.03,227.505 843.598,227.703 844.167,227.919 844.735,228.058 845.304,230.389 845.872,231.432 846.44,231.169 847.009,230.038 847.577,228.99 848.145,227.004 848.714,228.28 849.282,229.334 849.85,231.495 850.419,231.21 850.987,232.137 851.555,232.031 852.124,231.767 852.692,234.57 853.26,235.267 853.829,234.877 854.397,231.495 854.965,230.317 855.534,230.381 856.102,229.196 856.67,229.277 857.239,228.418 857.807,228.459 858.375,226.57 858.944,228.771 859.512,227.818 860.081,226.908 860.649,229.175 861.217,231.179 861.786,229.917 862.354,231.863 862.922,231.786 863.491,233.626 864.059,233.15 864.627,232.748 865.196,232.512 865.764,233.362 866.332,232.956 866.901,232.569 867.469,233.267 868.037,231.889 868.606,231.873 869.174,230.821 869.742,229.73 870.311,227.363 870.879,224.483 871.447,225.012 872.016,225.46 872.584,225.621 873.152,225.766 873.721,227.953 874.289,224.748 874.858,225.258 875.426,225.604 875.994,226.792 876.563,226.174 877.131,226.278 877.699,228.486 878.268,229.42 878.836,226.315 879.404,224.631 879.973,223.743 880.541,223.141 881.109,224.642 881.678,225.86 882.246,227.05 882.814,230.337 883.383,230.494 883.951,228.251 884.519,229.409 885.088,228.372 885.656,227.439 886.224,228.572 886.793,226.682 887.361,226.749 887.93,224.875 888.498,224.093 889.066,225.623 889.635,223.914 890.203,224.382 890.771,226.974 891.34,227.221 891.908,227.483 892.476,228.446 893.045,229.59 893.613,228.542 894.181,228.681 894.75,229.89 895.318,229.984 895.886,230.312 896.455,230.493 897.023,231.673 897.591,228.715 898.16,227.6 898.728,227.796 899.296,228.999 899.865,232.472 900.433,232.376 901.001,231.467 901.57,231.295 902.138,230.259 902.707,231.369 903.275,233.316 903.843,230.977 904.412,223.753 904.98,223.224 905.548,226.041 906.117,226.347 906.685,227.539 907.253,226.585 907.822,228.083 908.39,226.485 908.958,226.58 909.527,226.948 910.095,224.143 910.663,224.487 911.232,223.6 911.8,221.336 912.368,223.134 912.937,223.748 913.505,223.392 914.073,227.183 914.642,228.652 915.21,230.026 915.779,229.03 916.347,231.251 916.915,231.631 917.484,232.7 918.052,231.651 918.62,229.54 919.189,228.763 919.757,227.832 920.325,225.996 920.894,228.456 921.462,230.915 922.03,232.035 922.599,231.08 923.167,231.895 923.735,231.792 924.304,232.579 924.872,234.711 925.44,233.521 926.009,231.07 926.577,234.038 927.145,234.843 927.714,234.603 928.282,234.345 928.85,234.188 929.419,235.897 929.987,234.498 930.556,232.293 931.124,232.327 931.692,236.373 932.261,232.892 932.829,230.645 933.397,229.767 933.966,229.842 934.534,229.958 935.102,226.904 935.671,229.177 936.239,229.32 936.807,229.452 937.376,229.578 937.944,230.716 938.512,231.807 939.081,234.085 939.649,233.07 940.217,233.989 940.786,235.939 941.354,235.633 941.922,236.388 942.491,235.893 943.059,237.474 943.627,237.094 944.196,236.524 944.764,236.007 945.333,238.69 945.901,239.978 946.469,239.078 947.038,238.396 947.606,238.876 948.174,238.105 948.743,236.574 949.311,235.906 949.879,236.553 950.448,237.074 951.016,238.344 951.584,237.025 952.153,236.423 952.721,233.703 953.289,233.411 953.858,233.086 954.426,232.868 954.994,231.558 955.563,229.135 956.131,231.148 956.699,229.824 957.268,232.521 957.836,233.446 958.405,234.908 958.973,233.405 959.541,235.218 960.11,235.637 960.678,233.978 961.246,231.499 961.815,234.496 962.383,234.985 962.951,234.297 963.52,232.783 964.088,232.129 964.656,232.714 965.225,233.556 965.793,232.132 966.361,229.518 966.93,230.16 967.498,229.979 968.066,229.816 968.635,231.799 969.203,231.454 969.771,231.099 970.34,228.711 970.908,225.672 971.476,226.706 972.045,224.621 972.613,223.72 973.182,225.009 973.75,224.271 974.318,222.59 974.887,222.861 975.455,223.149 976.023,222.436 976.592,222.814 977.16,223.078 977.728,223.532 978.297,222.664 978.865,222.215 979.433,223.688 980.002,225.052 980.57,225.31 981.138,224.563 981.707,222.735 982.275,222.994 982.843,223.136 983.412,222.463 983.98,221.774 984.548,223.234 985.117,224.554 985.685,222.839 986.253,224.414 986.822,225.625 987.39,225.976 987.959,225.155 988.527,226.558 989.095,224.612 989.664,224.987 990.232,225.515 990.8,226.647 991.369,225.997 991.937,226.361 992.505,227.675 993.074,227.899 993.642,228.066 994.21,226.121 994.779,225.185 995.347,224.582 995.915,224.327 996.484,222.804 997.052,223.273 997.62,222.465 998.189,223.014 998.757,224.406 999.325,223.636 999.894,226.201 1000.46,224.4 1001.03,223.788 1001.6,223.337 1002.17,224.034 1002.74,224.5 1003.3,225.997 1003.87,225.5 1004.44,226.065 1005.01,225.385 1005.58,227.913 1006.15,225.955 1006.71,227.401 1007.28,227.789 1007.85,227.185 1008.42,227.423 1008.99,228.874 1009.56,228.97 1010.12,229.073 1010.69,228.257 1011.26,230.819 1011.83,228.996 1012.4,227.238 1012.97,228.517 1013.53,227.729 1014.1,228.771 1014.67,231.308 1015.24,230.308 1015.81,230.248 1016.38,230.469 1016.94,230.649 1017.51,232.131 1018.08,235.155 1018.65,233.93 1019.22,231.595 1019.79,234.847 1020.35,235.769 1020.92,234.802 1021.49,234.346 1022.06,233.164 1022.63,233.248 1023.2,234.131 1023.76,234.063 1024.33,231.781 1024.9,231.888 1025.47,230.917 1026.04,228.957 1026.61,228.89 1027.17,231.115 1027.74,231.061 1028.31,233.077 1028.88,237.03 1029.45,237.56 1030.02,235.088 1030.58,234.738 1031.15,233.307 1031.72,234.147 1032.29,228.758 1032.86,226.742 1033.43,225.973 1033.99,228.361 1034.56,228.405 1035.13,228.526 1035.7,229.785 1036.27,228.805 1036.84,231.013 1037.4,231.092 1037.97,230.075 1038.54,230.348 1039.11,232.309 1039.68,233.444 1040.25,231.218 1040.81,229.109 1041.38,230.396 1041.95,229.459 1042.52,231.723 1043.09,231.689 1043.66,232.551 1044.22,231.449 1044.79,233.191 1045.36,230.723 1045.93,233.718 1046.5,231.233 1047.07,230.165 1047.63,234.319 1048.2,234.233 1048.77,236.106 1049.34,233.511 1049.91,235.195 1050.48,236.868 1051.05,239.523 1051.61,237.693 1052.18,236.05 1052.75,236.629 1053.32,237.075 1053.89,234.496 1054.46,233.87 1055.02,233.469 1055.59,235.232 1056.16,233.766 1056.73,233.391 1057.3,234.111 1057.87,234.482 1058.43,231.654 1059,230.033 1059.57,231.087 1060.14,230.985 1060.71,230.599 1061.28,228.264 1061.84,229.475 1062.41,230.533 1062.98,231.346 1063.55,231.123 1064.12,231.033 1064.69,232.748 1065.25,231.538 1065.82,229.39 1066.39,229.377 1066.96,231.284 1067.53,230.079 1068.1,230.001 1068.66,230.074 1069.23,227.878 1069.8,225.839 1070.37,227.049 1070.94,226.161 1071.51,227.274 1072.07,227.256 1072.64,228.166 1073.21,228.176 1073.78,229.187 1074.35,231.018 1074.92,229.671 1075.48,229.66 1076.05,231.497 1076.62,232.37 1077.19,231.098 1077.76,229.835 1078.33,230.793 1078.89,231.398 1079.46,230.316 1080.03,230.029 1080.6,231.974 1081.17,233.822 1081.74,234.385 1082.3,232.695 1082.87,231.435 1083.44,231.417 1084.01,231.065 1084.58,231.771 1085.15,229.409 1085.71,231.279 1086.28,228.909 1086.85,229.781 1087.42,227.629 1087.99,227.409 1088.56,227.649 1089.12,225.558 1089.69,223.68 1090.26,225.058 1090.83,224.312 1091.4,224.668 1091.97,224.931 1092.53,226.19 1093.1,225.373 1093.67,224.609 1094.24,224.993 1094.81,225.427 1095.38,224.709 1095.94,224.721 1096.51,224.119 1097.08,228.579 1097.65,227.468 1098.22,228.491 1098.79,229.679 1099.35,229.703 1099.92,230.804 1100.49,231.713 1101.06,230.539 1101.63,231.226 1102.2,228.187 1102.76,226.063 1103.33,226.299 1103.9,227.365 1104.47,228.607 1105.04,229.663 1105.61,230.709 1106.17,230.71 1106.74,229.41 1107.31,229.215 1107.88,230.036 1108.45,229.809 1109.02,230.768 1109.58,230.486 1110.15,231.426 1110.72,229.229 1111.29,229.177 1111.86,229.212 1112.43,229.403 1112.99,231.482 1113.56,231.201 1114.13,229.067 1114.7,227.3 1115.27,228.49 1115.84,227.33 1116.4,223.198 1116.97,221.479 1117.54,219.895 1118.11,221.646 1118.68,224.247 1119.25,223.552 1119.81,221.865 1120.38,222.357 1120.95,221.84 1121.52,225.491 1122.09,226.841 1122.66,226.242 1123.23,226.394 1123.79,225.557 1124.36,227.931 1124.93,226.148 1125.5,228.695 1126.07,226.879 1126.64,228.256 1127.2,227.318 1127.77,226.349 1128.34,226.612 1128.91,226.918 1129.48,227.177 1130.05,227.425 1130.61,225.579 1131.18,224.849 1131.75,223.22 1132.32,222.808 1132.89,225.691 1133.46,228.259 1134.02,227.301 1134.59,227.644 1135.16,225.779 1135.73,225.832 1136.3,228.456 1136.87,226.643 1137.43,224.907 1138,225.313 1138.57,224.539 1139.14,224.86 1139.71,226.371 1140.28,227.609 1140.84,229.052 1141.41,230.264 1141.98,232.467 1142.55,232.436 1143.12,231.416 1143.69,233.47 1144.25,235.302 1144.82,233.684 1145.39,234.627 1145.96,233.28 1146.53,238.275 1147.1,235.772 1147.66,235.588 1148.23,236.28 1148.8,235.981 1149.37,236.44 1149.94,233 1150.51,228.877 1151.07,232.106 1151.64,232.157 1152.21,231.021 1152.78,231.986 1153.35,233.164 1153.92,232.973 1154.48,232.592 1155.05,232.226 1155.62,235.089 1156.19,235.624 1156.76,235.17 1157.33,234.825 1157.89,234.527 1158.46,236.289 1159.03,237.963 1159.6,237.49 1160.17,236.88 1160.74,236.265 1161.3,236.734 1161.87,237.271 1162.44,233.369 1163.01,233.072 1163.58,232.814 1164.15,231.662 1164.71,230.259 1165.28,232.206 1165.85,231.898 1166.42,232.623 1166.99,233.465 1167.56,233.131 1168.12,234.036 1168.69,233.531 1169.26,231.112 1169.83,231.017 1170.4,231.942 1170.97,231.752 1171.53,233.745 1172.1,234.249 1172.67,231.788 1173.24,231.508 1173.81,233.625 1174.38,232.135 1174.94,232.643 1175.51,234.361 1176.08,233.045 1176.65,230.71 1177.22,230.386 1177.79,229.27 1178.35,229.122 1178.92,228.68 1179.49,229.268 1180.06,231.216 1180.63,231.944 1181.2,232.628 1181.76,230.06 1182.33,231.897 1182.9,230.458 1183.47,228.045 1184.04,228.142 1184.61,228.04 1185.17,227.872 1185.74,226.69 1186.31,227.779 1186.88,228.604 1187.45,227.635 1188.02,227.596 1188.58,227.453 1189.15,227.502 1189.72,226.751 1190.29,225.661 1190.86,225.731 1191.43,224.025 1192,224.353 1192.56,224.718 1193.13,224.802 1193.7,227.051 1194.27,224.93 1194.84,227.2 1195.41,225.341 1195.97,222.299 1196.54,222.753 1197.11,224.034 1197.68,225.231 1198.25,225.319 1198.82,224.528 1199.38,224.568 1199.95,226.874 1200.52,227.092 1201.09,226.128 1201.66,224.091 1202.23,222.337 1202.79,222.744 1203.36,223.232 1203.93,222.776 1204.5,222.436 1205.07,226.131 1205.64,226.348 1206.2,228.529 1206.77,229.636 1207.34,228.599 1207.91,230.871 1208.48,229.754 1209.05,232.867 1209.61,234.53 1210.18,233.119 1210.75,232.974 1211.32,232.924 1211.89,230.738 1212.46,228.783 1213.02,230.699 1213.59,231.526 1214.16,232.238 1214.73,231.944 1215.3,229.569 1215.87,229.28 1216.43,229.387 1217,230.251 1217.57,230.228 1218.14,229.236 1218.71,228.134 1219.28,229.416 1219.84,230.667 1220.41,228.667 1220.98,226.764 1221.55,225.892 1222.12,226.367 1222.69,226.496 1223.25,226.555 1223.82,227.616 1224.39,226.677 1224.96,228.897 1225.53,228.778 1226.1,229.07 1226.66,229.147 1227.23,227.025 1227.8,228.017 1228.37,228.353 1228.94,228.345 1229.51,222.063 1230.07,221.716 1230.64,221.507 1231.21,222.053 1231.78,221.689 1232.35,223.501 1232.92,224.047 1233.48,222.404 1234.05,224.989 1234.62,226.406 1235.19,226.605 1235.76,227.082 1236.33,227.328 1236.89,230.589 1237.46,229.563 1238.03,228.657 1238.6,228.876 1239.17,228.139 1239.74,227.449 1240.3,227.812 1240.87,226.826 1241.44,224.969 1242.01,224.31 1242.58,226.758 1243.15,226.788 1243.71,230.18 1244.28,231.284 1244.85,231.439 1245.42,229.437 1245.99,228.483 1246.56,230.561 1247.12,231.43 1247.69,231.474 1248.26,229.559 1248.83,229.427 1249.4,232.41 1249.97,232.309 1250.53,233.218 1251.1,234.082 1251.67,233.886 1252.24,235.449 1252.81,232.061 1253.38,234.068 1253.94,234.841 1254.51,234.445 1255.08,236.042 1255.65,235.735 1256.22,236.169 1256.79,235.923 1257.35,235.641 1257.92,235.191 1258.49,234.835 1259.06,232.408 1259.63,232.105 1260.2,231.075 1260.76,230.838 1261.33,230.598 1261.9,228.596 1262.47,229.485 1263.04,232.641 1263.61,231.422 1264.18,232.399 1264.74,228.966 1265.31,227.882 1265.88,227.128 1266.45,227.425 1267.02,227.675 1267.59,229.825 1268.15,229.806 1268.72,230.851 1269.29,230.824 1269.86,233.646 1270.43,233.46 1271,231.307 1271.56,232.246 1272.13,231.858 1272.7,231.674 1273.27,232.674 1273.84,232.379 1274.41,231.054 1274.97,231.948 1275.54,229.831 1276.11,228.78 1276.68,229.909 1277.25,230.941 1277.82,231.885 1278.38,229.336 1278.95,229.23 1279.52,230.302 1280.09,230.181 1280.66,230.937 1281.23,229.864 1281.79,230.769 1282.36,230.498 1282.93,230.457 1283.5,231.476 1284.07,232.143 1284.64,228.929 1285.2,225.789 1285.77,224.861 1286.34,226.34 1286.91,226.547 1287.48,224.734 1288.05,224.106 1288.61,224.489 1289.18,225.696 1289.75,223.969 1290.32,223.491 1290.89,223.912 1291.46,225.299 1292.02,224.285 1292.59,220.606 1293.16,221.246 1293.73,220.865 1294.3,223.554 1294.87,226.016 1295.43,228.279 1296,228.21 1296.57,227.233 1297.14,227.495 1297.71,225.824 1298.28,228.424 1298.84,228.362 1299.41,229.339 1299.98,228.521 1300.55,229.911 1301.12,226.782 1301.69,227.115 1302.25,228.464 1302.82,227.608 1303.39,226.574 1303.96,225.992 1304.53,225.216 1305.1,228.85 1305.66,226.795 1306.23,227.117 1306.8,229.432 1307.37,227.556 1307.94,226.667 1308.51,226.035 1309.07,228.614 1309.64,230.764 1310.21,230.892 1310.78,233.021 1311.35,235.082 1311.92,235.629 1312.48,236.565 1313.05,237.035 1313.62,240.795 1314.19,241.14 1314.76,239.294 1315.33,240.669 1315.89,241.063 1316.46,238.177 1317.03,237.402 1317.6,237.677 1318.17,236.077 1318.74,235.479 1319.3,232.862 1319.87,233.405 1320.44,235.335 1321.01,234.745 1321.58,232.252 1322.15,233.009 1322.71,233.791 1323.28,232.39 1323.85,232.044 1324.42,234.759 1324.99,231.251 1325.56,233.165 1326.12,232.89 1326.69,232.536 1327.26,229.054 1327.83,229.2 1328.4,227.954 1328.97,228.003 1329.53,226.976 1330.1,226.925 1330.67,227.998 1331.24,227.003 1331.81,225.979 1332.38,226.084 1332.94,226.234 1333.51,225.254 1334.08,225.772 1334.65,225.986 1335.22,224.016 1335.79,225.269 1336.36,224.482 1336.92,222.902 1337.49,223.118 1338.06,225.617 1338.63,225.024 1339.2,225.467 1339.77,224.518 1340.33,224.699 1340.9,225.939 1341.47,227.384 1342.04,225.495 1342.61,226.818 1343.18,225.799 1343.74,226.946 1344.31,226.976 1344.88,227.006 1345.45,227.237 1346.02,227.47 1346.59,226.767 1347.15,228.003 1347.72,227.257 1348.29,227.615 1348.86,226.753 1349.43,227.97 1350,227.093 1350.56,227.388 1351.13,227.162 1351.7,225.413 1352.27,224.996 1352.84,225.524 1353.41,227.961 1353.97,228.191 1354.54,226.352 1355.11,226.877 1355.68,230.174 1356.25,229.028 1356.82,230.153 1357.38,230.98 1357.95,230.807 1358.52,231.853 1359.09,232.981 1359.66,230.779 1360.23,230.692 1360.79,228.572 1361.36,230.826 1361.93,230.659 1362.5,233.818 1363.07,232.465 1363.64,231.404 1364.2,231.207 1364.77,232.304 1365.34,233.151 1365.91,234.986 1366.48,234.822 1367.05,233.266 1367.61,233.077 1368.18,231.808 1368.75,231.797 1369.32,232.642 1369.89,233.479 1370.46,231.071 1371.02,229.982 1371.59,228.066 1372.16,231.246 1372.73,230.072 1373.3,230.062 1373.87,229.003 1374.43,228.133 1375,229.331 1375.57,227.247 1376.14,228.377 1376.71,230.586 1377.28,232.678 1377.84,231.495 1378.41,231.219 1378.98,230.962 1379.55,231.866 1380.12,232.721 1380.69,232.208 1381.25,232.084 1381.82,234.954 1382.39,234.61 1382.96,232.26 1383.53,233.082 1384.1,232.702 1384.66,231.469 1385.23,231.168 1385.8,231.071 1386.37,232.071 1386.94,230.841 1387.51,230.659 1388.07,230.381 1388.64,229.204 1389.21,229.976 1389.78,227.851 1390.35,228.692 1390.92,226.723 1391.48,227.082 1392.05,226.176 1392.62,226.344 1393.19,225.554 1393.76,225.911 1394.33,226.032 1394.89,226.013 1395.46,226.081 1396.03,226.074 1396.6,225.497 1397.17,225.683 1397.74,228.073 1398.3,228.193 1398.87,228.268 1399.44,228.455 1400.01,229.561 1400.58,228.531 1401.15,227.458 1401.71,229.649 1402.28,229.68 1402.85,230.711 1403.42,230.664 1403.99,230.561 1404.56,231.601 1405.13,231.442 1405.69,231.261 1406.26,229.951 1406.83,230.002 1407.4,230.927 1407.97,230.73 1408.54,230.675 1409.1,229.469 1409.67,228.434 1410.24,231.455 1410.81,231.303 1411.38,231.177 1411.95,228.787 1412.51,227.592 1413.08,225.566 1413.65,226.89 1414.22,228.01 1414.79,227.041 1415.36,224.13 1415.92,224.553 1416.49,225.857 1417.06,225.261 1417.63,225.377 1418.2,225.78 1418.77,224.735 1419.33,226.946 1419.9,226.257 1420.47,227.675 1421.04,227.742 1421.61,227.808 1422.18,228.076 1422.74,225.206 1423.31,226.289 1423.88,228.77 1424.45,228.929 1425.02,229.196 1425.59,228.235 1426.15,228.173 1426.72,227.096 1427.29,227.229 1427.86,226.529 1428.43,226.634 1429,231.225 1429.56,230.169 1430.13,233.445 1430.7,234.352 1431.27,233.921 1431.84,234.628 1432.41,233.28 1432.97,232.99 1433.54,233.817 1434.11,233.61 1434.68,231.084 1435.25,230.966 1435.82,229.853 1436.38,228.912 1436.95,230.122 1437.52,232.192 1438.09,234.114 1438.66,236.902 1439.23,235.563 1439.79,235.25 1440.36,234.649 1440.93,234.318 1441.5,234.095 1442.07,232.843 1442.64,232.345 1443.2,231.078 1443.77,230.951 1444.34,232.859 1444.91,234.745 1445.48,234.339 1446.05,234.942 1446.61,234.706 1447.18,234.367 1447.75,233.957 1448.32,233.793 1448.89,233.351 1449.46,230.938 1450.02,228.438 1450.59,228.512 1451.16,227.394 1451.73,227.471 1452.3,230.514 1452.87,229.399 1453.43,231.439 1454,230.278 1454.57,229.907 1455.14,228.784 1455.71,228.82 1456.28,227.669 1456.84,228.701 1457.41,228.63 1457.98,228.517 1458.55,229.397 1459.12,230.144 1459.69,230.988 1460.25,228.812 1460.82,229.974 1461.39,227.694 1461.96,226.588 1462.53,226.792 1463.1,226.034 1463.66,226.939 1464.23,226.864 1464.8,226.945 1465.37,226 1465.94,227.097 1466.51,227.242 1467.07,228.249 1467.64,227.176 1468.21,228.277 1468.78,228.14 1469.35,230.295 1469.92,231.301 1470.48,231.186 1471.05,228.889 1471.62,226.757 1472.19,227.654 1472.76,230.841 1473.33,229.592 1473.89,229.534 1474.46,229.566 1475.03,227.199 1475.6,227.514 1476.17,226.847 1476.74,225.905 1477.31,226.997 1477.87,226.35 1478.44,227.568 1479.01,227.704 1479.58,228.866 1480.15,226.704 1480.72,225.763 1481.28,227.075 1481.85,226.22 1482.42,226.516 1482.99,225.522 1483.56,224.89 1484.13,227.208 1484.69,226.322 1485.26,226.701 1485.83,227.817 1486.4,227.847 1486.97,226.997 1487.54,229.1 1488.1,227.151 1488.67,229.191 1489.24,228.254 1489.81,228.407 1490.38,228.298 1490.95,227.414 1491.51,227.431 1492.08,229.721 1492.65,227.583 1493.22,227.043 1493.79,225.03 1494.36,225.356 1494.92,227.174 1495.49,228.495 1496.06,229.524 1496.63,229.669 1497.2,227.688 1497.77,226.709 1498.33,226.639 1498.9,225.727 1499.47,226.228 1500.04,226.647 1500.61,227.95 1501.18,228.274 1501.74,227.465 1502.31,231.852 1502.88,230.644 1503.45,231.788 1504.02,232.79 1504.59,232.479 1505.15,230.206 1505.72,229.156 1506.29,230.29 1506.86,231.37 1507.43,230.374 1508,231.45 1508.56,230.319 1509.13,230.402 1509.7,228.263 1510.27,227.547 1510.84,228.643 1511.41,229.706 1511.97,231.898 1512.54,229.782 1513.11,227.757 1513.68,226.989 1514.25,228.218 1514.82,228.052 1515.38,231.573 1515.95,232.389 1516.52,230.08 1517.09,231.068 1517.66,232.148 1518.23,232.332 1518.79,230.163 1519.36,230.046 1519.93,231.099 1520.5,231.999 1521.07,231.78 1521.64,231.787 1522.2,230.575 1522.77,229.424 1523.34,230.604 1523.91,229.617 1524.48,229.789 1525.05,228.822 1525.61,228.86 1526.18,229.998 1526.75,228.033 1527.32,228.284 1527.89,229.352 1528.46,228.402 1529.02,227.451 1529.59,228.572 1530.16,229.822 1530.73,229.988 1531.3,230.96 1531.87,229.957 1532.43,231.101 1533,232.159 1533.57,231.861 1534.14,234.632 1534.71,234.409 1535.28,232.973 1535.84,233.965 1536.41,234.418 1536.98,234.084 1537.55,232.699 1538.12,231.277 1538.69,231.327 1539.25,233.002 1539.82,232.656 1540.39,234.497 1540.96,234.339 1541.53,233.859 1542.1,234.367 1542.66,231.78 1543.23,232.683 1543.8,229.357 1544.37,230.385 1544.94,229.136 1545.51,228.994 1546.08,229.056 1546.64,227.188 1547.21,228.358 1547.78,226.407 1548.35,227.266 1548.92,228.6 1549.49,228.699 1550.05,228.685 1550.62,228.597 1551.19,230.633 1551.76,230.503 1552.33,231.54 1552.9,234.649 1553.46,234.39 1554.03,233.949 1554.6,232.474 1555.17,229.996 1555.74,230.782 1556.31,232.564 1556.87,233.409 1557.44,233.933 1558.01,235.464 1558.58,235.959 1559.15,233.536 1559.72,233.008 1560.28,230.397 1560.85,230.386 1561.42,230.065 1561.99,232.763 1562.56,232.513 1563.13,229.968 1563.69,229.043 1564.26,228.903 1564.83,229.153 1565.4,230.052 1565.97,228.979 1566.54,228.83 1567.1,227.931 1567.67,229.124 1568.24,230.103 1568.81,232.021 1569.38,231.783 1569.95,232.7 1570.51,235.51 1571.08,235.044 1571.65,234.441 1572.22,233.825 1572.79,233.44 1573.36,232.986 1573.92,230.56 1574.49,229.354 1575.06,231.081 1575.63,230.637 1576.2,231.519 1576.77,229.296 1577.33,229.445 1577.9,229.361 1578.47,227.984 1579.04,225.85 1579.61,225.061 1580.18,223.269 1580.74,222.4 1581.31,222.783 1581.88,223.905 1582.45,223.987 1583.02,223.121 1583.59,223.327 1584.15,223.799 1584.72,223.979 1585.29,227.426 1585.86,227.387 1586.43,226.631 1587,227.93 1587.56,227.931 1588.13,228.027 1588.7,228.094 1589.27,228.173 1589.84,227.263 1590.41,228.447 1590.97,229.456 1591.54,227.536 1592.11,227.698 1592.68,225.751 1593.25,224.83 1593.82,225.212 1594.38,226.392 1594.95,227.652 1595.52,227.591 1596.09,227.364 1596.66,227.484 1597.23,226.608 1597.79,224.522 1598.36,224.711 1598.93,224.734 1599.5,224.023 1600.07,225.157 1600.64,225.363 1601.2,224.691 1601.77,225.006 1602.34,226.505 1602.91,225.55 1603.48,225.71 1604.05,225.918 1604.61,227.29 1605.18,225.45 1605.75,226.704 1606.32,230.256 1606.89,229.249 1607.46,229.325 1608.02,229.454 1608.59,231.498 1609.16,229.357 1609.73,231.534 1610.3,231.529 1610.87,231.286 1611.43,226.885 1612,228.311 1612.57,227.462 1613.14,229.556 1613.71,230.714 1614.28,229.474 1614.84,230.452 1615.41,230.516 1615.98,230.602 1616.55,230.908 1617.12,230.95 1617.69,231.911 1618.26,230.824 1618.82,230.876 1619.39,229.753 1619.96,228.427 1620.53,228.582 1621.1,228.62 1621.67,228.537 1622.23,228.397 1622.8,226.136 1623.37,225.535 1623.94,227.821 1624.51,226.789 1625.08,226.758 1625.64,225.88 1626.21,227.115 1626.78,227.178 1627.35,228.518 1627.92,230.564 1628.49,230.653 1629.05,230.696 1629.62,230.655 1630.19,231.746 1630.76,230.503 1631.33,231.461 1631.9,231.317 1632.46,231.194 1633.03,228.977 1633.6,230.113 1634.17,228.883 1634.74,232.957 1635.31,229.604 1635.87,228.479 1636.44,226.405 1637.01,226.728 1637.58,227.899 1638.15,227.903 1638.72,228.091 1639.28,227.393 1639.85,227.511 1640.42,227.444 1640.99,228.383 1641.56,228.638 1642.13,230.986 1642.69,230.139 1643.26,230.389 1643.83,229.384 1644.4,228.404 1644.97,228.561 1645.54,228.776 1646.1,229.895 1646.67,228.985 1647.24,229.192 1647.81,227.225 1648.38,225.186 1648.95,225.45 1649.51,223.707 1650.08,225.649 1650.65,226.09 1651.22,224.452 1651.79,227.885 1652.36,227.077 1652.92,227.293 1653.49,226.37 1654.06,227.801 1654.63,227.937 1655.2,228.223 1655.77,228.367 1656.33,229.719 1656.9,228.74 1657.47,229.791 1658.04,229.765 1658.61,229.855 1659.18,228.01 1659.74,227.429 1660.31,226.515 1660.88,227.754 1661.45,230.137 1662.02,232.019 1662.59,231.956 1663.15,231.906 1663.72,233.833 1664.29,233.795 1664.86,232.628 1665.43,231.58 1666,229.541 1666.56,232.475 1667.13,230.241 1667.7,233.153 1668.27,232.966 1668.84,231.674 1669.41,229.512 1669.97,230.507 1670.54,232.618 1671.11,232.561 1671.68,233.246 1672.25,233.041 1672.82,230.843 1673.38,231.752 1673.95,233.796 1674.52,234.513 1675.09,233.196 1675.66,236.075 1676.23,235.612 1676.79,237.048 1677.36,235.47 1677.93,235.173 1678.5,231.616 1679.07,232.41 1679.64,233.037 1680.2,231.796 1680.77,231.669 1681.34,232.606 1681.91,233.111 1682.48,232.999 1683.05,232.702 1683.61,233.538 1684.18,234.347 1684.75,233.68 1685.32,233.407 1685.89,232.072 1686.46,233.026 1687.02,231.49 1687.59,229.096 1688.16,230.012 1688.73,229.86 1689.3,230.642 1689.87,229.717 1690.44,227.577 1691,226.56 1691.57,224.801 1692.14,226.185 1692.71,225.195 1693.28,225.636 1693.85,224.655 1694.41,225.092 1694.98,224.221 1695.55,224.734 1696.12,224.931 1696.69,224.145 1697.26,225.455 1697.82,227.811 1698.39,227.682 1698.96,227.931 1699.53,229.93 1700.1,228.893 1700.67,228.746 1701.23,226.913 1701.8,226.008 1702.37,225.133 1702.94,226.528 1703.51,225.724 1704.08,228.21 1704.64,227.44 1705.21,228.496 1705.78,228.761 1706.35,229.809 1706.92,228.802 1707.49,232.089 1708.05,230.852 1708.62,229.586 1709.19,229.442 1709.76,230.396 1710.33,228.123 1710.9,228.151 1711.46,227.208 1712.03,227.242 1712.6,229.261 1713.17,229.239 1713.74,230.48 1714.31,230.504 1714.87,229.563 1715.44,232.688 1716.01,232.376 1716.58,234.117 1717.15,234.74 1717.72,234.256 1718.28,230.703 1718.85,229.683 1719.42,228.512 1719.99,227.649 1720.56,229.005 1721.13,230.097 1721.69,229.872 1722.26,227.747 1722.83,227.827 1723.4,226.761 1723.97,227.898 1724.54,227.834 1725.1,228.813 1725.67,225.792 1726.24,225.17 1726.81,227.222 1727.38,227.18 1727.95,228.164 1728.51,227.037 1729.08,225.162 1729.65,225.578 1730.22,226.83 1730.79,229.973 1731.36,230.014 1731.92,229.813 1732.49,228.77 1733.06,227.975 1733.63,228.887 1734.2,229.133 1734.77,228.902 1735.33,230.085 1735.9,228.886 1736.47,230.883 1737.04,230.711 1737.61,230.484 1738.18,230.558 1738.74,231.635 1739.31,231.353 1739.88,228.146 1740.45,231.337 1741.02,229.271 1741.59,226.308 1742.15,225.515 1742.72,225.948 1743.29,226.199 1743.86,226.717 1744.43,222.569 1745,223.131 1745.56,222.503 1746.13,221.822 1746.7,221.535 1747.27,220.271 1747.84,220.977 1748.41,221.366 1748.97,221.914 1749.54,224.562 1750.11,228.188 1750.68,227.499 1751.25,226.657 1751.82,227.063 1752.38,224.46 1752.95,228.23 1753.52,229.421 1754.09,229.491 1754.66,227.61 1755.23,227.832 1755.79,229.022 1756.36,229.174 1756.93,229.123 1757.5,228.269 1758.07,227.576 1758.64,227.922 1759.21,227.287 1759.77,228.723 1760.34,229.784 1760.91,229.051 1761.48,231.345 1762.05,231.283 1762.62,231.309 1763.18,231.522 1763.75,231.555 1764.32,231.471 1764.89,230.54 1765.46,230.685 1766.03,231.956 1766.59,232.084 1767.16,228.678 1767.73,228.818 1768.3,230.005 1768.87,228.171 1769.44,228.536 1770,227.906 1770.57,224.994 1771.14,226.533 1771.71,229.85 1772.28,228.862 1772.85,230.256 1773.41,229.136 1773.98,227.366 1774.55,228.542 1775.12,228.762 1775.69,229.183 1776.26,228.068 1776.82,228.378 1777.39,226.658 1777.96,226.863 1778.53,229.092 1779.1,227.332 1779.67,225.638 1780.23,229.017 1780.8,229.037 1781.37,226.978 1781.94,229.363 1782.51,230.582 1783.08,232.91 1783.64,234.034 1784.21,233.975 1784.78,234.74 1785.35,236.494 1785.92,234.019 1786.49,234.762 1787.05,233.439 1787.62,232.384 1788.19,232.418 1788.76,231.492 1789.33,232.555 1789.9,230.614 1790.46,230.819 1791.03,233.936 1791.6,233.753 1792.17,235.691 1792.74,234.472 1793.31,235.273 1793.87,234.925 1794.44,234.642 1795.01,234.37 1795.58,235.226 1796.15,235.94 1796.72,234.578 1797.28,235.21 1797.85,233.751 1798.42,234.496 1798.99,236.177 1799.56,236.765 1800.13,236.177 1800.69,232.764 1801.26,233.596 1801.83,233.209 1802.4,231.824 1802.97,229.584 1803.54,229.614 1804.1,229.508 1804.67,232.535 1805.24,232.203 1805.81,231.939 1806.38,234.089 1806.95,232.656 1807.51,233.242 1808.08,233.82 1808.65,232.39 1809.22,233.189 1809.79,232.942 1810.36,233.66 1810.92,235.354 1811.49,235.806 1812.06,232.21 1812.63,233.884 1813.2,232.322 1813.77,232.92 1814.33,231.566 1814.9,231.401 1815.47,232.267 1816.04,232.935 1816.61,234.639 1817.18,233.979 1817.74,233.591 1818.31,230.856 1818.88,230.501 1819.45,230.155 1820.02,229.877 1820.59,228.651 1821.15,229.667 1821.72,231.546 1822.29,231.112 1822.86,229.799 1823.43,229.571 1824,229.465 1824.56,230.06 1825.13,230.013 1825.7,227.917 1826.27,226.885 1826.84,224.819 1827.41,221.104 1827.97,221.703 1828.54,222.254 1829.11,222.693 1829.68,223.034 1830.25,221.305 1830.82,221.724 1831.39,221.278 1831.95,225.984 1832.52,227.222 1833.09,226.389 1833.66,228.466 1834.23,229.353 1834.8,229.257 1835.36,228.18 1835.93,229.16 1836.5,229.337 1837.07,232.199 1837.64,231.054 1838.21,230.878 1838.77,228.773 1839.34,231.925 1839.91,232.648 1840.48,231.438 1841.05,229.003 1841.62,225.989 1842.18,223.752 1842.75,225.041 1843.32,226.184 1843.89,228.638 1844.46,228.489 1845.03,229.482 1845.59,229.254 1846.16,228.142 1846.73,228.169 1847.3,228.203 1847.87,226.966 1848.44,227.132 1849,229.349 1849.57,229.316 1850.14,230.361 1850.71,229.246 1851.28,228.304 1851.85,229.32 1852.41,227.201 1852.98,227.378 1853.55,226.47 1854.12,225.664 1854.69,225.999 1855.26,226.064 1855.82,227.238 1856.39,228.434 1856.96,229.69 1857.53,229.576 1858.1,229.502 1858.67,229.474 1859.23,229.162 1859.8,229.095 1860.37,226.976 1860.94,227.286 1861.51,227.451 1862.08,228.492 1862.64,226.655 1863.21,227.932 1863.78,230.147 1864.35,228.308 1864.92,229.522 1865.49,229.52 1866.05,227.367 1866.62,228.497 1867.19,230.329 1867.76,230.152 1868.33,230.98 1868.9,230.939 1869.46,229.764 1870.03,229.786 1870.6,228.842 1871.17,228.867 1871.74,227.847 1872.31,230.061 1872.87,231.081 1873.44,230.166 1874.01,231.868 1874.58,230.642 1875.15,230.885 1875.72,229.904 1876.28,230.784 1876.85,231.563 1877.42,232.234 1877.99,230.683 1878.56,230.448 1879.13,230.381 1879.69,228.366 1880.26,227.626 1880.83,225.612 1881.4,223.805 1881.97,225.134 1882.54,225.611 1883.1,227.802 1883.67,227.788 1884.24,228.864 1884.81,228.056 1885.38,228.25 1885.95,230.373 1886.51,227.22 1887.08,227.422 1887.65,227.581 1888.22,229.582 1888.79,229.511 1889.36,228.324 1889.92,228.47 1890.49,226.571 1891.06,227.936 1891.63,229.124 1892.2,228.086 1892.77,227.242 1893.33,228.371 1893.9,228.607 1894.47,229.523 1895.04,229.461 1895.61,228.741 1896.18,229.079 1896.74,229.223 1897.31,225.153 1897.88,225.651 1898.45,225.935 1899.02,226.265 1899.59,223.581 1900.16,223.128 1900.72,225.739 1901.29,226.198 1901.86,227.666 1902.43,229.998 1903,231.939 1903.57,230.722 1904.13,230.754 1904.7,228.775 1905.27,230.712 1905.84,228.363 1906.41,229.35 1906.98,229.429 1907.54,230.606 1908.11,229.586 1908.68,229.512 1909.25,230.664 1909.82,230.584 1910.39,231.686 1910.95,233.661 1911.52,232.344 1912.09,230.085 1912.66,229.181 1913.23,228.973 1913.8,231.195 1914.36,231.08 1914.93,232.857 1915.5,231.638 1916.07,231.657 1916.64,231.644 1917.21,233.691 1917.77,233.418 1918.34,232.855 1918.91,230.549 1919.48,231.511 1920.05,233.421 1920.62,231.901 1921.18,230.742 1921.75,231.568 1922.32,233.539 1922.89,233.131 1923.46,231.832 1924.03,231.58 1924.59,230.26 1925.16,230.081 1925.73,231.047 1926.3,232.927 1926.87,230.446 1927.44,232.5 1928,234.555 1928.57,233.881 1929.14,233.458 1929.71,234.328 1930.28,233.055 1930.85,231.649 1931.41,231.467 1931.98,230.338 1932.55,230.302 1933.12,229.046 1933.69,229.137 1934.26,230.912 1934.82,230.785 1935.39,229.487 1935.96,230.28 1936.53,229.149 1937.1,228.939 1937.67,228.801 1938.23,229.973 1938.8,230.765 1939.37,231.744 1939.94,231.39 1940.51,232.424 1941.08,232.051 1941.64,231.608 1942.21,232.722 1942.78,231.738 1943.35,232.498 1943.92,232.386 1944.49,231.924 1945.05,231.619 1945.62,229.384 1946.19,229.334 1946.76,229.322 1947.33,231.291 1947.9,232.109 1948.46,231.861 1949.03,230.529 1949.6,231.681 1950.17,231.412 1950.74,227.167 1951.31,228.167 1951.87,228.212 1952.44,230.242 1953.01,229.138 1953.58,229.111 1954.15,228.969 1954.72,227.689 1955.28,227.535 1955.85,227.024 1956.42,226.99 1956.99,228.438 1957.56,227.133 1958.13,228.2 1958.69,229.212 1959.26,229.049 1959.83,232.158 1960.4,233.002 1960.97,232.789 1961.54,232.319 1962.1,228.103 1962.67,226.075 1963.24,225.059 1963.81,224.2 1964.38,227.622 1964.95,227.678 1965.51,227.666 1966.08,227.674 1966.65,226.899 1967.22,228.232 1967.79,227.445 1968.36,227.64 1968.92,227.732 1969.49,228.625 1970.06,231.594 1970.63,230.43 1971.2,229.438 1971.77,229.276 1972.34,232.406 1972.9,232.972 1973.47,231.818 1974.04,232.351 1974.61,231.937 1975.18,229.655 1975.75,229.663 1976.31,229.524 1976.88,228.702 1977.45,227.72 1978.02,227.705 1978.59,227.614 1979.16,227.827 1979.72,227.703 1980.29,228.924 1980.86,227.743 1981.43,229.696 1982,228.688 1982.57,227.667 1983.13,225.568 1983.7,225.782 1984.27,226.879 1984.84,226.028 1985.41,229.265 1985.98,230.174 1986.54,230.193 1987.11,232.115 1987.68,231.929 1988.25,231.759 1988.82,231.431 1989.39,231.202 1989.95,231.06 1990.52,231.059 1991.09,229.772 1991.66,229.571 1992.23,229.129 1992.8,229.992 1993.36,229.794 1993.93,227.447 1994.5,228.485 1995.07,227.396 1995.64,225.569 1996.21,226.748 1996.77,228.751 1997.34,228.968 1997.91,227.067 1998.48,228.162 1999.05,228.23 1999.62,228.16 2000.18,227.064 2000.75,227.245 2001.32,226.261 2001.89,227.397 2002.46,225.538 2003.03,225.003 2003.59,222.327 2004.16,222.87 2004.73,224.348 2005.3,223.75 2005.87,223.166 2006.44,223.634 2007,222.921 2007.57,221.365 2008.14,222.012 2008.71,225.533 2009.28,227.833 2009.85,232.003 2010.41,233.746 2010.98,232.662 2011.55,231.417 2012.12,232.476 2012.69,232.187 2013.26,234.133 2013.82,235.857 2014.39,235.49 2014.96,236.042 2015.53,236.791 2016.1,236.084 2016.67,236.669 2017.23,236.282 2017.8,236.893 2018.37,236.343 2018.94,234.857 2019.51,235.463 2020.08,235.007 2020.64,231.536 2021.21,230.376 2021.78,230.306 2022.35,230.115 2022.92,228.821 2023.49,230.014 2024.05,229.932 2024.62,227.781 2025.19,227.895 2025.76,229.188 2026.33,228.043 2026.9,229.02 2027.46,227.942 2028.03,227.916 2028.6,228.17 2029.17,228.148 2029.74,226.239 2030.31,227.388 2030.87,227.335 2031.44,226.446 2032.01,226.711 2032.58,225.695 2033.15,226.844 2033.72,224.885 2034.28,225.129 2034.85,226.213 2035.42,227.293 2035.99,226.552 2036.56,225.82 2037.13,225.078 2037.69,224.47 2038.26,226.909 2038.83,227.202 2039.4,227.268 2039.97,224.398 2040.54,224.839 2041.11,223.207 2041.67,222.735 2042.24,224.215 2042.81,224.807 2043.38,225.324 2043.95,226.744 2044.52,227.142 2045.08,228.518 2045.65,225.37 2046.22,225.639 2046.79,226.959 2047.36,228.358 2047.93,229.525 2048.49,229.679 2049.06,229.534 2049.63,228.707 2050.2,227.959 2050.77,229.237 2051.34,229.425 2051.9,228.557 2052.47,227.625 2053.04,227.72 2053.61,224.723 2054.18,227.283 2054.75,228.61 2055.31,227.93 2055.88,228.219 2056.45,229.355 2057.02,229.488 2057.59,231.592 2058.16,230.479 2058.72,233.63 2059.29,230.369 2059.86,230.228 2060.43,233.476 2061,233.407 2061.57,232.911 2062.13,232.64 2062.7,234.566 2063.27,234.341 2063.84,232.023 2064.41,231.786 2064.98,229.662 2065.54,228.598 2066.11,227.913 2066.68,226.893 2067.25,228.307 2067.82,230.427 2068.39,232.372 2068.95,231.274 2069.52,231.352 2070.09,231.346 2070.66,232.245 2071.23,232.2 2071.8,229.711 2072.36,227.913 2072.93,228.166 2073.5,228.142 2074.07,226.417 2074.64,226.705 2075.21,226.818 2075.77,224.055 2076.34,224.525 2076.91,221.7 2077.48,224.552 2078.05,224.105 2078.62,222.541 2079.18,227.243 2079.75,226.638 2080.32,226.95 2080.89,227.255 2081.46,225.466 2082.03,226.852 2082.59,227.895 2083.16,228.992 2083.73,229.956 2084.3,231.053 2084.87,232.23 2085.44,232.137 2086,232.308 2086.57,233.255 2087.14,232.188 2087.71,234.159 2088.28,236.06 2088.85,235.732 2089.41,235.625 2089.98,236.291 2090.55,235.746 2091.12,236.543 2091.69,236.91 2092.26,238.525 2092.82,234.765 2093.39,233.321 2093.96,230.916 2094.53,229.819 2095.1,229.738 2095.67,228.859 2096.23,228.89 2096.8,229.89 2097.37,229.99 2097.94,227.862 2098.51,229.933 2099.08,229.953 2099.64,229.007 2100.21,227.25 2100.78,227.464 2101.35,227.701 2101.92,226.94 2102.49,226.11 2103.05,227.45 2103.62,227.558 2104.19,226.614 2104.76,225.687 2105.33,225.923 2105.9,223.803 2106.46,223.273 2107.03,222.774 2107.6,223.281 2108.17,222.744 2108.74,222.308 2109.31,224.08 2109.87,225.415 2110.44,225.868 2111.01,226.171 2111.58,228.649 2112.15,229.931 2112.72,228.885 2113.29,231.212 2113.85,231.299 2114.42,229.146 2114.99,228.104 2115.56,230.316 2116.13,228.962 2116.7,228.097 2117.26,226.076 2117.83,226.203 2118.4,226.252 2118.97,226.729 2119.54,226.889 2120.11,226.292 2120.67,225.582 2121.24,224.94 2121.81,228.446 2122.38,229.035 2122.95,231.323 2123.52,232.248 2124.08,232.002 2124.65,229.729 2125.22,230.752 2125.79,231.788 2126.36,231.774 2126.93,230.73 2127.49,232.033 2128.06,234.994 2128.63,234.87 2129.2,234.415 2129.77,233.08 2130.34,231.998 2130.9,231.842 2131.47,232.83 2132.04,234.728 2132.61,234.541 2133.18,235.042 2133.75,234.763 2134.31,236.478 2134.88,238.17 2135.45,236.767 2136.02,237.567 2136.59,236.941 2137.16,236.294 2137.72,235.795 2138.29,235.226 2138.86,233.69 2139.43,233.22 2140,233.849 2140.57,231.277 2141.13,233.073 2141.7,231.787 2142.27,233.789 2142.84,234.487 2143.41,231.986 2143.98,231.729 2144.54,231.361 2145.11,230.919 2145.68,230.678 2146.25,232.367 2146.82,233.101 2147.39,233.966 2147.95,232.354 2148.52,231.096 2149.09,231.604 2149.66,228.174 2150.23,229.276 2150.8,227.903 2151.36,226.943 2151.93,229.096 2152.5,227.993 2153.07,227.007 2153.64,227.341 2154.21,227.6 2154.77,228.553 2155.34,228.491 2155.91,229.465 2156.48,228.194 2157.05,229.203 2157.62,231.372 2158.18,228.003 2158.75,226.965 2159.32,228.259 2159.89,227.186 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip540)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.023\n  with uncertainty of ± 0.002102251806302091\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.02002 ± (0.00194856, 0.00194495) (MC)\n  95% confidence interval: [-4.02369, -4.01621] (MC)\n  linear error propagation: -4.02003 ± 0.00193965\n  |δ_y| = |0.00142608| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.020024760608743, val_l = 0.003667279307234317, val_u = 0.0038196816121720545)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip570\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip571\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip572\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1149.72 2211.02,1149.72 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,994.389 2211.02,994.389 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,839.055 2211.02,839.055 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,683.721 2211.02,683.721 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,528.388 2211.02,528.388 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,373.054 2211.02,373.054 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,217.72 2211.02,217.72 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1149.72 365.751,1149.72 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,994.389 365.751,994.389 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,839.055 365.751,839.055 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,683.721 365.751,683.721 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,528.388 365.751,528.388 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,373.054 365.751,373.054 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,217.72 365.751,217.72 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M298.909 1135.52 Q295.298 1135.52 293.469 1139.09 Q291.664 1142.63 291.664 1149.76 Q291.664 1156.86 293.469 1160.43 Q295.298 1163.97 298.909 1163.97 Q302.543 1163.97 304.349 1160.43 Q306.177 1156.86 306.177 1149.76 Q306.177 1142.63 304.349 1139.09 Q302.543 1135.52 298.909 1135.52 M298.909 1131.82 Q304.719 1131.82 307.775 1136.42 Q310.853 1141.01 310.853 1149.76 Q310.853 1158.48 307.775 1163.09 Q304.719 1167.67 298.909 1167.67 Q293.099 1167.67 290.02 1163.09 Q286.964 1158.48 286.964 1149.76 Q286.964 1141.01 290.02 1136.42 Q293.099 1131.82 298.909 1131.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M259.557 1007.73 L267.196 1007.73 L267.196 981.368 L258.886 983.034 L258.886 978.775 L267.15 977.109 L271.826 977.109 L271.826 1007.73 L279.465 1007.73 L279.465 1011.67 L259.557 1011.67 L259.557 1007.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 980.187 Q295.298 980.187 293.469 983.752 Q291.664 987.294 291.664 994.423 Q291.664 1001.53 293.469 1005.09 Q295.298 1008.64 298.909 1008.64 Q302.543 1008.64 304.349 1005.09 Q306.177 1001.53 306.177 994.423 Q306.177 987.294 304.349 983.752 Q302.543 980.187 298.909 980.187 M298.909 976.484 Q304.719 976.484 307.775 981.09 Q310.853 985.673 310.853 994.423 Q310.853 1003.15 307.775 1007.76 Q304.719 1012.34 298.909 1012.34 Q293.099 1012.34 290.02 1007.76 Q286.964 1003.15 286.964 994.423 Q286.964 985.673 290.02 981.09 Q293.099 976.484 298.909 976.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M262.775 852.4 L279.094 852.4 L279.094 856.335 L257.15 856.335 L257.15 852.4 Q259.812 849.645 264.395 845.015 Q269.002 840.363 270.182 839.02 Q272.428 836.497 273.307 834.761 Q274.21 833.002 274.21 831.312 Q274.21 828.557 272.266 826.821 Q270.344 825.085 267.242 825.085 Q265.043 825.085 262.59 825.849 Q260.159 826.613 257.381 828.164 L257.381 823.442 Q260.205 822.307 262.659 821.729 Q265.113 821.15 267.15 821.15 Q272.52 821.15 275.715 823.835 Q278.909 826.52 278.909 831.011 Q278.909 833.141 278.099 835.062 Q277.312 836.96 275.205 839.553 Q274.627 840.224 271.525 843.441 Q268.423 846.636 262.775 852.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 824.854 Q295.298 824.854 293.469 828.418 Q291.664 831.96 291.664 839.09 Q291.664 846.196 293.469 849.761 Q295.298 853.302 298.909 853.302 Q302.543 853.302 304.349 849.761 Q306.177 846.196 306.177 839.09 Q306.177 831.96 304.349 828.418 Q302.543 824.854 298.909 824.854 M298.909 821.15 Q304.719 821.15 307.775 825.756 Q310.853 830.34 310.853 839.09 Q310.853 847.816 307.775 852.423 Q304.719 857.006 298.909 857.006 Q293.099 857.006 290.02 852.423 Q286.964 847.816 286.964 839.09 Q286.964 830.34 290.02 825.756 Q293.099 821.15 298.909 821.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M272.914 682.367 Q276.27 683.085 278.145 685.353 Q280.043 687.622 280.043 690.955 Q280.043 696.071 276.525 698.872 Q273.006 701.673 266.525 701.673 Q264.349 701.673 262.034 701.233 Q259.742 700.816 257.289 699.96 L257.289 695.446 Q259.233 696.58 261.548 697.159 Q263.863 697.737 266.386 697.737 Q270.784 697.737 273.076 696.001 Q275.39 694.265 275.39 690.955 Q275.39 687.899 273.238 686.186 Q271.108 684.45 267.289 684.45 L263.261 684.45 L263.261 680.608 L267.474 680.608 Q270.923 680.608 272.752 679.242 Q274.58 677.853 274.58 675.261 Q274.58 672.599 272.682 671.187 Q270.807 669.751 267.289 669.751 Q265.367 669.751 263.168 670.168 Q260.969 670.585 258.33 671.464 L258.33 667.298 Q260.992 666.557 263.307 666.187 Q265.645 665.816 267.705 665.816 Q273.029 665.816 276.131 668.247 Q279.233 670.654 279.233 674.775 Q279.233 677.645 277.59 679.636 Q275.946 681.603 272.914 682.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 669.52 Q295.298 669.52 293.469 673.085 Q291.664 676.626 291.664 683.756 Q291.664 690.862 293.469 694.427 Q295.298 697.969 298.909 697.969 Q302.543 697.969 304.349 694.427 Q306.177 690.862 306.177 683.756 Q306.177 676.626 304.349 673.085 Q302.543 669.52 298.909 669.52 M298.909 665.816 Q304.719 665.816 307.775 670.423 Q310.853 675.006 310.853 683.756 Q310.853 692.483 307.775 697.089 Q304.719 701.673 298.909 701.673 Q293.099 701.673 290.02 697.089 Q286.964 692.483 286.964 683.756 Q286.964 675.006 290.02 670.423 Q293.099 665.816 298.909 665.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M271.594 515.182 L259.789 533.631 L271.594 533.631 L271.594 515.182 M270.367 511.108 L276.247 511.108 L276.247 533.631 L281.177 533.631 L281.177 537.519 L276.247 537.519 L276.247 545.668 L271.594 545.668 L271.594 537.519 L255.992 537.519 L255.992 533.006 L270.367 511.108 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 514.186 Q295.298 514.186 293.469 517.751 Q291.664 521.293 291.664 528.422 Q291.664 535.529 293.469 539.094 Q295.298 542.635 298.909 542.635 Q302.543 542.635 304.349 539.094 Q306.177 535.529 306.177 528.422 Q306.177 521.293 304.349 517.751 Q302.543 514.186 298.909 514.186 M298.909 510.483 Q304.719 510.483 307.775 515.089 Q310.853 519.672 310.853 528.422 Q310.853 537.149 307.775 541.756 Q304.719 546.339 298.909 546.339 Q293.099 546.339 290.02 541.756 Q286.964 537.149 286.964 528.422 Q286.964 519.672 290.02 515.089 Q293.099 510.483 298.909 510.483 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M258.793 355.774 L277.15 355.774 L277.15 359.709 L263.076 359.709 L263.076 368.181 Q264.094 367.834 265.113 367.672 Q266.131 367.487 267.15 367.487 Q272.937 367.487 276.316 370.658 Q279.696 373.829 279.696 379.246 Q279.696 384.825 276.224 387.927 Q272.752 391.005 266.432 391.005 Q264.256 391.005 261.988 390.635 Q259.742 390.264 257.335 389.524 L257.335 384.825 Q259.418 385.959 261.641 386.515 Q263.863 387.07 266.34 387.07 Q270.344 387.07 272.682 384.964 Q275.02 382.857 275.02 379.246 Q275.02 375.635 272.682 373.528 Q270.344 371.422 266.34 371.422 Q264.465 371.422 262.59 371.839 Q260.738 372.255 258.793 373.135 L258.793 355.774 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 358.853 Q295.298 358.853 293.469 362.417 Q291.664 365.959 291.664 373.089 Q291.664 380.195 293.469 383.76 Q295.298 387.302 298.909 387.302 Q302.543 387.302 304.349 383.76 Q306.177 380.195 306.177 373.089 Q306.177 365.959 304.349 362.417 Q302.543 358.853 298.909 358.853 M298.909 355.149 Q304.719 355.149 307.775 359.755 Q310.853 364.339 310.853 373.089 Q310.853 381.815 307.775 386.422 Q304.719 391.005 298.909 391.005 Q293.099 391.005 290.02 386.422 Q286.964 381.815 286.964 373.089 Q286.964 364.339 290.02 359.755 Q293.099 355.149 298.909 355.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M269.326 215.857 Q266.178 215.857 264.326 218.01 Q262.497 220.162 262.497 223.912 Q262.497 227.639 264.326 229.815 Q266.178 231.968 269.326 231.968 Q272.474 231.968 274.303 229.815 Q276.154 227.639 276.154 223.912 Q276.154 220.162 274.303 218.01 Q272.474 215.857 269.326 215.857 M278.608 201.204 L278.608 205.463 Q276.849 204.63 275.043 204.19 Q273.261 203.75 271.502 203.75 Q266.872 203.75 264.418 206.875 Q261.988 210 261.641 216.32 Q263.006 214.306 265.066 213.241 Q267.127 212.153 269.603 212.153 Q274.812 212.153 277.821 215.324 Q280.853 218.473 280.853 223.912 Q280.853 229.236 277.705 232.454 Q274.557 235.672 269.326 235.672 Q263.33 235.672 260.159 231.088 Q256.988 226.482 256.988 217.755 Q256.988 209.561 260.877 204.7 Q264.766 199.815 271.316 199.815 Q273.076 199.815 274.858 200.163 Q276.664 200.51 278.608 201.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M298.909 203.519 Q295.298 203.519 293.469 207.084 Q291.664 210.625 291.664 217.755 Q291.664 224.861 293.469 228.426 Q295.298 231.968 298.909 231.968 Q302.543 231.968 304.349 228.426 Q306.177 224.861 306.177 217.755 Q306.177 210.625 304.349 207.084 Q302.543 203.519 298.909 203.519 M298.909 199.815 Q304.719 199.815 307.775 204.422 Q310.853 209.005 310.853 217.755 Q310.853 226.482 307.775 231.088 Q304.719 235.672 298.909 235.672 Q293.099 235.672 290.02 231.088 Q286.964 226.482 286.964 217.755 Q286.964 209.005 290.02 204.422 Q293.099 199.815 298.909 199.815 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip572)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1035.27 400.199,930.119 400.786,833.642 401.372,745.252 401.958,664.413 402.545,590.625 403.131,523.427 403.718,462.389 404.304,407.113 404.891,357.225 405.477,312.376 406.063,272.242 406.65,236.516 407.236,281.219 407.823,318.459 408.409,289.289 408.995,262.825 409.582,239.769 410.168,219.895 410.755,252.817 411.341,279.699 411.927,263.142 412.514,324.146 413.1,310.518 413.687,297.963 414.273,349.43 414.86,339.776 415.446,332.996 416.032,353 416.619,371.617 417.205,368.778 417.792,367.771 418.378,367.383 418.964,368.939 419.551,388.964 420.137,392.886 420.724,397.405 421.31,417.563 421.896,423.551 422.483,429.75 423.069,437.012 423.656,444.933 424.242,454.308 424.829,473.611 425.415,502.124 426.001,520.24 426.588,555.588 427.174,572.485 427.761,580.721 428.347,596.33 428.933,604.991 429.52,620.895 430.106,630.336 430.693,645.537 431.279,660.352 431.865,674.807 432.452,683.392 433.038,697.368 433.625,711.226 434.211,743.908 434.798,755.767 435.384,776.31 435.97,793.26 436.557,808.839 437.143,819.335 437.73,838.141 438.316,848.358 438.902,858.483 439.489,865.156 440.075,874.757 440.662,887.768 441.248,897.114 441.835,912.76 442.421,921.008 443.007,929.577 443.594,943.969 444.18,951.772 444.767,959.618 445.353,966.877 445.939,971.593 446.526,979.263 447.112,989.085 447.699,995.825 448.285,1005.36 448.871,1011.87 449.458,1018.66 450.044,1022.85 450.631,1029.31 451.217,1035.58 451.804,1039.32 452.39,1043.16 452.976,1055.87 453.563,1069.99 454.149,1075 454.736,1079.75 455.322,1087.04 455.908,1089.81 456.495,1096.59 457.081,1104.85 457.668,1111.13 458.254,1118.9 458.84,1122.56 459.427,1124.5 460.013,1135.44 460.6,1137.24 461.186,1140.54 461.773,1142.24 462.359,1143.75 462.945,1148.79 463.532,1152.09 464.118,1151.67 464.705,1157.04 465.291,1160.16 465.877,1165.11 466.464,1170 467.05,1172.6 467.637,1171.9 468.223,1176.52 468.809,1178.97 469.396,1184.56 469.982,1188.37 470.569,1191.96 471.155,1192.55 471.742,1194.46 472.328,1199.77 472.914,1201.63 473.501,1206.51 474.087,1207.86 474.674,1209.33 475.26,1209.27 475.846,1210.42 476.433,1208.71 477.019,1208.62 477.606,1210.45 478.192,1210.43 478.778,1212.16 479.365,1212.6 479.951,1214.51 480.538,1214.36 481.124,1214.4 481.711,1214.26 482.297,1213.16 482.883,1214.77 483.47,1219.42 484.056,1218.33 484.643,1218.54 485.229,1220.29 485.815,1221.95 486.402,1222.12 486.988,1223.21 487.575,1221.87 488.161,1220.6 488.748,1220.42 489.334,1217.81 489.92,1217 490.507,1218.97 491.093,1218.13 491.68,1218.64 492.266,1218.95 492.852,1222.12 493.439,1227.85 494.025,1226.57 494.612,1226.55 495.198,1226.57 495.784,1226.75 496.371,1230.99 496.957,1230.8 497.544,1230.7 498.13,1230.91 498.717,1230.7 499.303,1232.11 499.889,1230.98 500.476,1235.07 501.062,1234.77 501.649,1238.71 502.235,1238.08 502.821,1240.5 503.408,1241.38 503.994,1243.32 504.581,1242.69 505.167,1248.66 505.753,1249.03 506.34,1250.53 506.926,1249.8 507.513,1246.29 508.099,1242.84 508.686,1243.58 509.272,1246.86 509.858,1246.21 510.445,1245.14 511.031,1246.73 511.618,1248.49 512.204,1247.26 512.79,1244.98 513.377,1245.71 513.963,1243.54 514.55,1244.14 515.136,1247.5 515.722,1244.23 516.309,1244.71 516.895,1244.06 517.482,1243.29 518.068,1242.95 518.655,1241.38 519.241,1243.63 519.827,1243.2 520.414,1241.31 521,1241.94 521.587,1241.77 522.173,1241.37 522.759,1244.79 523.346,1245.55 523.932,1244.73 524.519,1246.72 525.105,1246.12 525.691,1246.51 526.278,1244.63 526.864,1245.43 527.451,1243.44 528.037,1244.17 528.624,1245.02 529.21,1247.25 529.796,1246.57 530.383,1244.65 530.969,1244.07 531.556,1243.29 532.142,1243.98 532.728,1244.74 533.315,1244.13 533.901,1243.2 534.488,1244.16 535.074,1244.41 535.661,1243.9 536.247,1243.23 536.833,1244 537.42,1245.95 538.006,1244.07 538.593,1247.15 539.179,1246.37 539.765,1243.05 540.352,1245.16 540.938,1245.78 541.525,1246.11 542.111,1245.38 542.697,1246.03 543.284,1246.22 543.87,1244.02 544.457,1244.52 545.043,1243.47 545.63,1242.77 546.216,1244.6 546.802,1243.7 547.389,1246.9 547.975,1247.34 548.562,1247.83 549.148,1245.49 549.734,1244.66 550.321,1242.61 550.907,1240.77 551.494,1241.44 552.08,1239.18 552.666,1239.87 553.253,1240.65 553.839,1242.47 554.426,1240.63 555.012,1240.04 555.599,1239.3 556.185,1239.92 556.771,1239.16 557.358,1237.34 557.944,1238.02 558.531,1237.45 559.117,1239.32 559.703,1238.5 560.29,1239.16 560.876,1238.53 561.463,1235.37 562.049,1237.53 562.635,1240.76 563.222,1242.48 563.808,1241.73 564.395,1239.47 564.981,1238.99 565.568,1239.35 566.154,1240.01 566.74,1240.63 567.327,1240.11 567.913,1239.46 568.5,1239.14 569.086,1237.47 569.672,1238.19 570.259,1234.86 570.845,1233.49 571.432,1234.65 572.018,1235.49 572.605,1234.94 573.191,1235.58 573.777,1233.88 574.364,1236.02 574.95,1234.26 575.537,1231.22 576.123,1229.61 576.709,1229.57 577.296,1230.82 577.882,1233.17 578.469,1234.11 579.055,1236.14 579.641,1236.91 580.228,1237.48 580.814,1236.77 581.401,1233.67 581.987,1234.1 582.574,1228.79 583.16,1225.89 583.746,1227.04 584.333,1226.08 584.919,1226.04 585.506,1225.9 586.092,1224.54 586.678,1223.62 587.265,1224.84 587.851,1226.21 588.438,1231.16 589.024,1231.03 589.61,1231.57 590.197,1231.26 590.783,1229.54 591.37,1230.63 591.956,1231.5 592.543,1228.33 593.129,1230.65 593.715,1229.15 594.302,1229.2 594.888,1230.37 595.475,1229.98 596.061,1229.74 596.647,1227.16 597.234,1224.46 597.82,1224.09 598.407,1222.71 598.993,1223.76 599.579,1223.78 600.166,1223.74 600.752,1223.81 601.339,1225.01 601.925,1223.75 602.512,1223.63 603.098,1224.96 603.684,1224.98 604.271,1226.31 604.857,1228.75 605.444,1228.53 606.03,1229.74 606.616,1228.39 607.203,1228.21 607.789,1232.07 608.376,1233.04 608.962,1233.82 609.548,1230.54 610.135,1227.44 610.721,1228.4 611.308,1228.16 611.894,1227.82 612.481,1227.69 613.067,1227.54 613.653,1228.65 614.24,1232.3 614.826,1229.04 615.413,1229.97 615.999,1228.43 616.585,1226.92 617.172,1228.15 617.758,1229.24 618.345,1227.54 618.931,1226.05 619.518,1226.1 620.104,1225.94 620.69,1224.32 621.277,1222.86 621.863,1221.57 622.45,1223.17 623.036,1220.51 623.622,1222.93 624.209,1220.26 624.795,1221.61 625.382,1222.81 625.968,1221.41 626.554,1221.53 627.141,1221.56 627.727,1221.32 628.314,1224.06 628.9,1226.5 629.487,1226.02 630.073,1224.49 630.659,1224.11 631.246,1223.75 631.832,1227.44 632.419,1229.79 633.005,1227.86 633.591,1227.65 634.178,1229.9 634.764,1230.81 635.351,1230.37 635.937,1229.71 636.523,1228.04 637.11,1226.35 637.696,1222.43 638.283,1222.64 638.869,1223.64 639.456,1225.96 640.042,1226.82 640.628,1226.6 641.215,1227.72 641.801,1231.46 642.388,1230.99 642.974,1231.53 643.56,1234.57 644.147,1233.93 644.733,1231.85 645.32,1231.08 645.906,1230.45 646.492,1224.93 647.079,1225.87 647.665,1225.53 648.252,1224.07 648.838,1223.96 649.425,1225.08 650.011,1224.94 650.597,1225.59 651.184,1225.49 651.77,1226.25 652.357,1227.01 652.943,1229.12 653.529,1227.43 654.116,1224.34 654.702,1225.25 655.289,1222.47 655.875,1222.29 656.462,1223.5 657.048,1222.1 657.634,1219.47 658.221,1219.49 658.807,1219.36 659.394,1220.55 659.98,1220.29 660.566,1221.48 661.153,1222.55 661.739,1222.23 662.326,1221.84 662.912,1220.35 663.498,1221.65 664.085,1220.25 664.671,1221.24 665.258,1221.06 665.844,1219.42 666.431,1221.83 667.017,1219.01 667.603,1217.98 668.19,1217.95 668.776,1219.18 669.363,1219.09 669.949,1217.98 670.535,1216.67 671.122,1216.92 671.708,1220.64 672.295,1223.11 672.881,1222.93 673.467,1226.56 674.054,1228.43 674.64,1226.5 675.227,1224.91 675.813,1225.59 676.4,1225.47 676.986,1223.91 677.572,1223.72 678.159,1224.3 678.745,1224.26 679.332,1223.8 679.918,1222.04 680.504,1220.62 681.091,1220.27 681.677,1220.19 682.264,1218.83 682.85,1221.16 683.436,1220.92 684.023,1220.68 684.609,1220.69 685.196,1220.38 685.782,1219.1 686.369,1220.25 686.955,1218.81 687.541,1222.77 688.128,1225.05 688.714,1226.15 689.301,1225.91 689.887,1224.13 690.473,1225.17 691.06,1226.21 691.646,1227.14 692.233,1227.94 692.819,1227.09 693.405,1227.78 693.992,1227.22 694.578,1228.01 695.165,1224.69 695.751,1228.24 696.338,1227.86 696.924,1227.11 697.51,1229.03 698.097,1228.42 698.683,1229.09 699.27,1230.86 699.856,1229.74 700.442,1227.92 701.029,1223.71 701.615,1224.71 702.202,1225.43 702.788,1224.98 703.375,1223.1 703.961,1220.14 704.547,1221.13 705.134,1220.95 705.72,1224.65 706.307,1224.28 706.893,1225.11 707.479,1220.76 708.066,1220.62 708.652,1221.59 709.239,1221.32 709.825,1222.24 710.411,1222.15 710.998,1220.7 711.584,1220.58 712.171,1219.31 712.757,1217.71 713.344,1220.17 713.93,1218.27 714.516,1216.93 715.103,1212.92 715.689,1211.7 716.276,1211.9 716.862,1211.88 717.448,1214.65 718.035,1213.46 718.621,1216.06 719.208,1213.53 719.794,1212.31 720.38,1215.51 720.967,1214.12 721.553,1214.02 722.14,1214.39 722.726,1213.48 723.313,1213.56 723.899,1213.82 724.485,1213.96 725.072,1215.15 725.658,1215.22 726.245,1215.45 726.831,1215.48 727.417,1215.8 728.004,1216.01 728.59,1216.23 729.177,1216.47 729.763,1218.79 730.349,1221.12 730.936,1219.56 731.522,1218.24 732.109,1218.35 732.695,1218.28 733.282,1216.83 733.868,1217.98 734.454,1220.24 735.041,1219.8 735.627,1219.82 736.214,1222.37 736.8,1219.57 737.386,1220.86 737.973,1219.51 738.559,1219.21 739.146,1221.92 739.732,1221.47 740.318,1222.45 740.905,1224.79 741.491,1225.57 742.078,1221.36 742.664,1224.97 743.251,1224.57 743.837,1223.88 744.423,1222.31 745.01,1219.37 745.596,1220.16 746.183,1218.65 746.769,1219.77 747.355,1219.49 747.942,1219.3 748.528,1216.68 749.115,1217.8 749.701,1217.53 750.288,1220.03 750.874,1222.19 751.46,1221.74 752.047,1219.14 752.633,1215.06 753.22,1211.28 753.806,1211.59 754.392,1211.71 754.979,1208.26 755.565,1206.16 756.152,1206.58 756.738,1206.99 757.324,1207.39 757.911,1207.77 758.497,1209.41 759.084,1210.91 759.67,1209.85 760.257,1208.88 760.843,1208.15 761.429,1211.1 762.016,1212.72 762.602,1215.32 763.189,1215.46 763.775,1214.16 764.361,1214.24 764.948,1216.65 765.534,1217.88 766.121,1221.81 766.707,1221.56 767.293,1221.3 767.88,1221.02 768.466,1218.04 769.053,1216.96 769.639,1213.19 770.226,1212.28 770.812,1213.69 771.398,1211.42 771.985,1211.91 772.571,1213.41 773.158,1214.65 773.744,1214.8 774.33,1214.97 774.917,1215.02 775.503,1217.48 776.09,1214.58 776.676,1216.08 777.262,1215.85 777.849,1213.49 778.435,1214.93 779.022,1214.82 779.608,1212.47 780.195,1214.02 780.781,1212.83 781.367,1211.75 781.954,1213.32 782.54,1213.55 783.127,1213.69 783.713,1212.45 784.299,1215.17 784.886,1215 785.472,1213.92 786.059,1212.87 786.645,1209.09 787.232,1209.54 787.818,1207.47 788.404,1207.72 788.991,1210.58 789.577,1214.83 790.164,1215 790.75,1216.15 791.336,1215.04 791.923,1213.82 792.509,1213.91 793.096,1213.92 793.682,1212.78 794.268,1215.43 794.855,1215.49 795.441,1214.35 796.028,1214.53 796.614,1215.44 797.201,1216.42 797.787,1217.39 798.373,1217 798.96,1217.98 799.546,1217.59 800.133,1217.39 800.719,1217.16 801.305,1217.03 801.892,1214.2 802.478,1212.89 803.065,1213.17 803.651,1214.51 804.237,1215.79 804.824,1218.23 805.41,1216.73 805.997,1215.46 806.583,1212.8 807.17,1213.1 807.756,1211.92 808.342,1211.98 808.929,1212.25 809.515,1208.73 810.102,1207.75 810.688,1208.09 811.274,1212.13 811.861,1213.52 812.447,1213.42 813.034,1214.86 813.62,1214.76 814.206,1215.82 814.793,1215.8 815.379,1218.14 815.966,1215.5 816.552,1216.69 817.139,1217.84 817.725,1215.12 818.311,1212.66 818.898,1214.17 819.484,1211.76 820.071,1211.8 820.657,1209.47 821.243,1209.96 821.83,1210.37 822.416,1210.58 823.003,1209.45 823.589,1209.86 824.175,1210.25 824.762,1209.31 825.348,1210.92 825.935,1210.88 826.521,1212.11 827.108,1213.42 827.694,1216.32 828.28,1219.9 828.867,1219.37 829.453,1218.92 830.04,1218.82 830.626,1218.74 831.212,1216.14 831.799,1220.11 832.385,1219.59 832.972,1219.27 833.558,1217.91 834.145,1218.73 834.731,1218.68 835.317,1216.04 835.904,1214.92 836.49,1218.73 837.077,1220.86 837.663,1222.06 838.249,1222.94 838.836,1221.25 839.422,1219.88 840.009,1218.5 840.595,1214.52 841.181,1214.31 841.768,1217.04 842.354,1215.64 842.941,1216.92 843.527,1218.09 844.114,1216.74 844.7,1219.08 845.286,1219.07 845.873,1221.43 846.459,1222.49 847.046,1220.75 847.632,1222.93 848.218,1222.49 848.805,1219.44 849.391,1219.19 849.978,1218.92 850.564,1217.79 851.15,1216.41 851.737,1217.69 852.323,1217.54 852.91,1216.07 853.496,1215.94 854.083,1215.53 854.669,1215.28 855.255,1213.8 855.842,1217.39 856.428,1218.77 857.015,1218.58 857.601,1217.14 858.187,1212.87 858.774,1212.92 859.36,1213.97 859.947,1214.13 860.533,1215.36 861.119,1213.97 861.706,1211.52 862.292,1214.31 862.879,1223.13 863.465,1223.92 864.052,1220.62 864.638,1220.33 865.224,1218.94 865.811,1220.15 866.397,1218.38 866.984,1220.37 867.57,1220.33 868.156,1219.95 868.743,1223.44 869.329,1223.14 869.916,1224.35 870.502,1227.25 871.089,1225.25 871.675,1224.65 872.261,1225.22 872.848,1220.73 873.434,1218.98 874.021,1217.31 874.607,1218.52 875.193,1215.79 875.78,1215.28 876.366,1213.91 876.953,1215.12 877.539,1217.67 878.125,1218.62 878.712,1219.78 879.298,1222.07 879.885,1219.13 880.471,1216.13 881.058,1214.72 881.644,1215.83 882.23,1214.78 882.817,1214.85 883.403,1213.82 883.99,1211.12 884.576,1212.46 885.162,1215.38 885.749,1211.68 886.335,1210.57 886.922,1210.74 887.508,1210.93 888.094,1211.01 888.681,1208.78 889.267,1210.35 889.854,1212.95 890.44,1212.84 891.027,1207.77 891.613,1211.9 892.199,1214.59 892.786,1215.64 893.372,1215.54 893.959,1215.38 894.545,1219.12 895.131,1216.39 895.718,1216.22 896.304,1216.06 896.891,1215.9 897.477,1214.5 898.063,1213.13 898.65,1210.26 899.236,1211.4 899.823,1210.18 900.409,1207.66 900.996,1207.88 901.582,1206.79 902.168,1207.24 902.755,1205.12 903.341,1205.4 903.928,1205.92 904.514,1206.38 905.1,1202.9 905.687,1201.08 906.273,1201.94 906.86,1202.55 907.446,1201.74 908.032,1202.47 908.619,1204.15 909.205,1204.81 909.792,1203.85 910.378,1203.03 910.965,1201.27 911.551,1202.69 912.137,1203.25 912.724,1206.44 913.31,1206.7 913.897,1207 914.483,1207.18 915.069,1208.71 915.656,1211.64 916.242,1209.17 916.829,1210.76 917.415,1207.43 918.002,1206.21 918.588,1204.31 919.174,1206.03 919.761,1203.7 920.347,1203.04 920.934,1204.94 921.52,1207.89 922.106,1204.14 922.693,1203.41 923.279,1204.13 923.866,1205.88 924.452,1206.6 925.038,1205.82 925.625,1204.7 926.211,1206.35 926.798,1209.5 927.384,1208.71 927.971,1208.92 928.557,1209.1 929.143,1206.65 929.73,1207.02 930.316,1207.41 930.903,1210.3 931.489,1214.05 932.075,1212.87 932.662,1215.49 933.248,1216.7 933.835,1215.26 934.421,1216.27 935.007,1218.45 935.594,1218.28 936.18,1218.09 936.767,1219.11 937.353,1218.82 937.94,1218.65 938.526,1218.25 939.112,1219.45 939.699,1220.16 940.285,1218.54 940.872,1217 941.458,1216.79 942.044,1217.81 942.631,1220.16 943.217,1220 943.804,1219.98 944.39,1220.95 944.976,1221.96 945.563,1220.36 946.149,1218.9 946.736,1221.11 947.322,1219.34 947.909,1217.98 948.495,1217.64 949.081,1218.73 949.668,1217.11 950.254,1219.56 950.841,1219.22 951.427,1218.68 952.013,1217.39 952.6,1218.25 953.186,1217.89 953.773,1216.35 954.359,1216.12 954.945,1215.95 955.532,1218.37 956.118,1219.59 956.705,1220.43 957.291,1220.86 957.878,1222.84 958.464,1222.43 959.05,1223.56 959.637,1223.06 960.223,1221.51 960.81,1222.57 961.396,1219.57 961.982,1221.85 962.569,1222.72 963.155,1223.41 963.742,1222.7 964.328,1222.26 964.915,1220.55 965.501,1221.24 966.087,1220.64 966.674,1221.55 967.26,1218.55 967.847,1220.99 968.433,1219.3 969.019,1218.87 969.606,1219.65 970.192,1219.41 970.779,1217.68 971.365,1217.57 971.951,1217.46 972.538,1218.47 973.124,1215.35 973.711,1217.56 974.297,1219.72 974.884,1218.21 975.47,1219.19 976.056,1217.96 976.643,1214.85 977.229,1216.04 977.816,1216.09 978.402,1215.8 978.988,1215.55 979.575,1213.69 980.161,1209.9 980.748,1211.27 981.334,1214.04 981.92,1209.98 982.507,1208.71 983.093,1209.75 983.68,1210.18 984.266,1211.52 984.853,1211.33 985.439,1210.14 986.025,1210.11 986.612,1212.81 987.198,1212.63 987.785,1213.76 988.371,1216.14 988.957,1216.23 989.544,1213.51 990.13,1213.53 990.717,1211.01 991.303,1206.03 991.889,1205.19 992.476,1208.05 993.062,1208.35 993.649,1209.99 994.235,1208.86 994.822,1215.38 995.408,1217.87 995.994,1218.87 996.581,1216.03 997.167,1216 997.754,1215.87 998.34,1214.35 998.926,1215.54 999.513,1212.84 1000.1,1212.71 1000.69,1213.92 1001.27,1213.57 1001.86,1211.13 1002.44,1209.66 1003.03,1212.31 1003.62,1214.86 1004.2,1213.28 1004.79,1214.41 1005.38,1211.62 1005.96,1211.61 1006.55,1210.49 1007.14,1211.77 1007.72,1209.58 1008.31,1212.53 1008.9,1208.8 1009.48,1211.76 1010.07,1213.03 1010.65,1207.9 1011.24,1207.88 1011.83,1205.45 1012.41,1208.5 1013,1206.32 1013.59,1204.11 1014.17,1200.64 1014.76,1202.66 1015.35,1204.49 1015.93,1203.62 1016.52,1202.89 1017.11,1205.9 1017.69,1206.54 1018.28,1206.93 1018.86,1204.66 1019.45,1206.33 1020.04,1206.69 1020.62,1205.7 1021.21,1205.13 1021.8,1208.49 1022.38,1210.43 1022.97,1209.12 1023.56,1209.21 1024.14,1209.64 1024.73,1212.49 1025.32,1211.03 1025.9,1209.72 1026.49,1208.69 1027.07,1208.92 1027.66,1208.99 1028.25,1206.84 1028.83,1208.25 1029.42,1210.84 1030.01,1210.86 1030.59,1208.51 1031.18,1209.95 1031.77,1210.03 1032.35,1209.93 1032.94,1212.61 1033.52,1215.14 1034.11,1213.75 1034.7,1214.89 1035.28,1213.61 1035.87,1213.68 1036.46,1212.62 1037.04,1212.63 1037.63,1211.42 1038.22,1209.17 1038.8,1210.79 1039.39,1210.8 1039.98,1208.53 1040.56,1207.41 1041.15,1208.9 1041.73,1210.42 1042.32,1209.23 1042.91,1208.45 1043.49,1209.73 1044.08,1210.06 1044.67,1207.66 1045.25,1205.32 1045.84,1204.51 1046.43,1206.48 1047.01,1207.95 1047.6,1207.92 1048.19,1208.31 1048.77,1207.4 1049.36,1210.25 1049.94,1207.95 1050.53,1210.82 1051.12,1209.76 1051.7,1212.39 1052.29,1212.71 1052.88,1212.46 1053.46,1215.06 1054.05,1217.45 1054.64,1215.91 1055.22,1216.92 1055.81,1216.61 1056.39,1216.4 1056.98,1214.97 1057.57,1216.05 1058.15,1217.08 1058.74,1216.73 1059.33,1216.3 1059.91,1217.28 1060.5,1217.37 1061.09,1218.22 1061.67,1212.88 1062.26,1214.27 1062.85,1213.06 1063.43,1211.62 1064.02,1211.59 1064.6,1210.22 1065.19,1209.07 1065.78,1210.46 1066.36,1209.59 1066.95,1213.28 1067.54,1215.91 1068.12,1215.71 1068.71,1214.47 1069.3,1213 1069.88,1211.72 1070.47,1210.43 1071.06,1210.4 1071.64,1211.96 1072.23,1212.2 1072.81,1211.2 1073.4,1211.46 1073.99,1210.27 1074.57,1210.59 1075.16,1209.4 1075.75,1212.06 1076.33,1212.13 1076.92,1212.09 1077.51,1211.86 1078.09,1209.3 1078.68,1209.6 1079.26,1212.18 1079.85,1214.36 1080.44,1212.95 1081.02,1214.39 1081.61,1219.5 1082.2,1221.75 1082.78,1223.87 1083.37,1221.96 1083.96,1218.97 1084.54,1219.95 1085.13,1222.15 1085.72,1221.73 1086.3,1222.53 1086.89,1218.25 1087.47,1216.69 1088.06,1217.48 1088.65,1217.37 1089.23,1218.47 1089.82,1215.65 1090.41,1217.87 1090.99,1214.83 1091.58,1217.07 1092.17,1215.45 1092.75,1216.62 1093.34,1217.86 1093.93,1217.61 1094.51,1217.31 1095.1,1217.05 1095.68,1216.8 1096.27,1219.11 1096.86,1220.09 1097.44,1222.2 1098.03,1222.85 1098.62,1219.48 1099.2,1216.42 1099.79,1217.62 1100.38,1217.25 1100.96,1219.58 1101.55,1219.61 1102.14,1216.47 1102.72,1218.72 1103.31,1220.91 1103.89,1220.52 1104.48,1221.57 1105.07,1221.29 1105.65,1219.55 1106.24,1218.11 1106.83,1216.38 1107.41,1214.9 1108,1212.17 1108.59,1212.13 1109.17,1213.31 1109.76,1210.73 1110.34,1208.37 1110.93,1210.23 1111.52,1208.96 1112.1,1210.5 1112.69,1204.23 1113.28,1207.11 1113.86,1207.19 1114.45,1206.18 1115.04,1206.39 1115.62,1205.66 1116.21,1209.74 1116.8,1214.73 1117.38,1210.77 1117.97,1210.64 1118.55,1211.97 1119.14,1210.74 1119.73,1209.23 1120.31,1209.37 1120.9,1209.76 1121.49,1210.13 1122.07,1206.53 1122.66,1205.73 1123.25,1206.14 1123.83,1206.43 1124.42,1206.67 1125.01,1204.37 1125.59,1202.13 1126.18,1202.51 1126.76,1203.07 1127.35,1203.65 1127.94,1202.9 1128.52,1202.06 1129.11,1206.69 1129.7,1206.96 1130.28,1207.19 1130.87,1208.53 1131.46,1210.2 1132.04,1207.78 1132.63,1208.1 1133.21,1207.14 1133.8,1206.03 1134.39,1206.34 1134.97,1205.13 1135.56,1205.65 1136.15,1208.53 1136.73,1208.6 1137.32,1207.43 1137.91,1207.6 1138.49,1205.09 1139.08,1204.36 1139.67,1207.28 1140.25,1207.56 1140.84,1204.9 1141.42,1206.64 1142.01,1205.95 1142.6,1203.75 1143.18,1205.25 1143.77,1208.04 1144.36,1208.41 1144.94,1209.76 1145.53,1209.94 1146.12,1210.49 1146.7,1209.79 1147.29,1207.4 1147.88,1206.45 1148.46,1205.55 1149.05,1208.64 1149.63,1206.36 1150.22,1208.07 1150.81,1211.01 1151.39,1210.92 1151.98,1211.08 1152.57,1211.32 1153.15,1212.81 1153.74,1211.53 1154.33,1210.56 1154.91,1211.77 1155.5,1211.86 1156.09,1212.08 1156.67,1212.07 1157.26,1213.03 1157.84,1214.43 1158.43,1214.44 1159.02,1216.61 1159.6,1216.34 1160.19,1216.02 1160.78,1216.03 1161.36,1213.38 1161.95,1216.04 1162.54,1213.36 1163.12,1215.7 1163.71,1219.51 1164.29,1219.13 1164.88,1217.72 1165.47,1216.39 1166.05,1216.38 1166.64,1217.45 1167.23,1217.51 1167.81,1214.81 1168.4,1214.6 1168.99,1215.84 1169.57,1218.41 1170.16,1220.68 1170.75,1220.35 1171.33,1219.92 1171.92,1220.62 1172.5,1221.2 1173.09,1216.85 1173.68,1216.66 1174.26,1214.06 1174.85,1212.72 1175.44,1213.99 1176.02,1211.21 1176.61,1212.55 1177.2,1208.71 1177.78,1206.58 1178.37,1208.19 1178.96,1208.28 1179.54,1208.26 1180.13,1210.87 1180.71,1213.24 1181.3,1210.9 1181.89,1209.85 1182.47,1208.92 1183.06,1209.22 1183.65,1212.08 1184.23,1212.43 1184.82,1212.3 1185.41,1211.24 1185.99,1211.24 1186.58,1212.44 1187.16,1213.8 1187.75,1212.26 1188.34,1210.72 1188.92,1213.15 1189.51,1215.5 1190.1,1216.63 1190.68,1216.14 1191.27,1216.05 1191.86,1216.05 1192.44,1214.82 1193.03,1216.01 1193.62,1213.35 1194.2,1213.51 1194.79,1213.17 1195.37,1213.08 1195.96,1215.69 1196.55,1214.53 1197.13,1214.15 1197.72,1214.19 1198.31,1221.9 1198.89,1222.5 1199.48,1222.94 1200.07,1222.47 1200.65,1223.09 1201.24,1221.06 1201.83,1220.53 1202.41,1222.67 1203,1219.68 1203.58,1218.05 1204.17,1217.88 1204.76,1217.36 1205.34,1217.12 1205.93,1213.16 1206.52,1214.39 1207.1,1215.5 1207.69,1215.25 1208.28,1216.17 1208.86,1217.05 1209.45,1216.65 1210.03,1217.9 1210.62,1220.23 1211.21,1221.15 1211.79,1218.27 1212.38,1218.3 1212.97,1214.2 1213.55,1212.82 1214.14,1212.58 1214.73,1215 1215.31,1216.17 1215.9,1213.64 1216.49,1212.54 1217.07,1212.44 1217.66,1214.74 1218.24,1214.9 1218.83,1211.23 1219.42,1211.28 1220,1210.09 1220.59,1208.93 1221.18,1209.06 1221.76,1207.02 1222.35,1211.06 1222.94,1208.52 1223.52,1207.45 1224.11,1207.81 1224.7,1205.71 1225.28,1205.93 1225.87,1205.24 1226.45,1205.39 1227.04,1205.58 1227.63,1205.98 1228.21,1206.28 1228.8,1209.15 1229.39,1209.45 1229.97,1210.65 1230.56,1210.9 1231.15,1211.16 1231.73,1213.59 1232.32,1212.52 1232.91,1208.64 1233.49,1210.06 1234.08,1208.81 1234.66,1212.96 1235.25,1214.3 1235.84,1215.26 1236.42,1214.95 1237.01,1214.69 1237.6,1212.1 1238.18,1212.11 1238.77,1210.81 1239.36,1210.81 1239.94,1207.3 1240.53,1207.43 1241.11,1209.98 1241.7,1208.78 1242.29,1209.19 1242.87,1209.36 1243.46,1208.07 1244.05,1208.36 1244.63,1209.92 1245.22,1208.78 1245.81,1211.32 1246.39,1212.6 1246.98,1211.23 1247.57,1209.95 1248.15,1208.75 1248.74,1211.83 1249.32,1211.96 1249.91,1210.64 1250.5,1210.77 1251.08,1209.82 1251.67,1211.1 1252.26,1209.98 1252.84,1210.28 1253.43,1210.31 1254.02,1209.03 1254.6,1208.15 1255.19,1212.04 1255.78,1215.91 1256.36,1217.13 1256.95,1215.43 1257.53,1215.25 1258.12,1217.54 1258.71,1218.42 1259.29,1218.08 1259.88,1216.72 1260.47,1218.92 1261.05,1219.63 1261.64,1219.26 1262.23,1217.7 1262.81,1219.04 1263.4,1223.65 1263.98,1223.08 1264.57,1223.74 1265.16,1220.67 1265.74,1217.79 1266.33,1215.1 1266.92,1215.21 1267.5,1216.44 1268.09,1216.17 1268.68,1218.27 1269.26,1215.16 1269.85,1215.26 1270.44,1214.09 1271.02,1215.09 1271.61,1213.41 1272.19,1217.24 1272.78,1216.89 1273.37,1215.29 1273.95,1216.37 1274.54,1217.68 1275.13,1218.46 1275.71,1219.49 1276.3,1215.14 1276.89,1217.67 1277.47,1217.34 1278.06,1214.55 1278.65,1216.86 1279.23,1217.99 1279.82,1218.83 1280.4,1215.75 1280.99,1213.13 1281.58,1212.93 1282.16,1210.28 1282.75,1207.64 1283.34,1206.83 1283.92,1205.52 1284.51,1204.77 1285.1,1199.92 1285.68,1199.22 1286.27,1201.22 1286.86,1199.28 1287.44,1198.51 1288.03,1201.81 1288.61,1202.56 1289.2,1202.03 1289.79,1203.81 1290.37,1204.39 1290.96,1207.47 1291.55,1206.72 1292.13,1204.24 1292.72,1204.82 1293.31,1207.77 1293.89,1206.77 1294.48,1205.72 1295.06,1207.34 1295.65,1207.69 1296.24,1204.28 1296.82,1208.48 1297.41,1206.08 1298,1206.32 1298.58,1206.68 1299.17,1210.89 1299.76,1210.71 1300.34,1212.25 1300.93,1212.23 1301.52,1213.52 1302.1,1213.64 1302.69,1212.38 1303.27,1213.64 1303.86,1214.95 1304.45,1214.9 1305.03,1214.8 1305.62,1216.08 1306.21,1215.54 1306.79,1215.37 1307.38,1217.86 1307.97,1216.46 1308.55,1217.52 1309.14,1219.57 1309.73,1219.46 1310.31,1216.56 1310.9,1217.37 1311.48,1216.94 1312.07,1218.19 1312.66,1218.09 1313.24,1216.69 1313.83,1215 1314.42,1217.36 1315,1215.83 1315.59,1217.15 1316.18,1215.83 1316.76,1215.85 1317.35,1215.87 1317.93,1215.65 1318.52,1215.41 1319.11,1216.32 1319.69,1214.87 1320.28,1215.82 1320.87,1215.43 1321.45,1216.53 1322.04,1215.1 1322.63,1216.21 1323.21,1215.91 1323.8,1216.23 1324.39,1218.43 1324.97,1219.03 1325.56,1218.5 1326.14,1215.6 1326.73,1215.35 1327.32,1217.64 1327.9,1217.07 1328.49,1213.08 1329.08,1214.47 1329.66,1213.1 1330.25,1212.06 1330.84,1212.24 1331.42,1210.92 1332.01,1209.47 1332.6,1212.09 1333.18,1212.17 1333.77,1214.74 1334.35,1211.99 1334.94,1212.16 1335.53,1208.24 1336.11,1209.8 1336.7,1211.04 1337.29,1211.23 1337.87,1209.84 1338.46,1208.72 1339.05,1206.37 1339.63,1206.43 1340.22,1208.22 1340.8,1208.36 1341.39,1209.84 1341.98,1209.79 1342.56,1208.7 1343.15,1207.59 1343.74,1210.46 1344.32,1211.75 1344.91,1214.09 1345.5,1210.22 1346.08,1211.62 1346.67,1211.61 1347.26,1212.9 1347.84,1213.98 1348.43,1212.54 1349.01,1215.1 1349.6,1213.76 1350.19,1211.07 1350.77,1208.47 1351.36,1209.85 1351.95,1210.14 1352.53,1210.41 1353.12,1209.26 1353.71,1208.15 1354.29,1208.7 1354.88,1208.78 1355.47,1205.18 1356.05,1205.47 1356.64,1208.24 1357.22,1207.16 1357.81,1207.54 1358.4,1208.98 1358.98,1209.3 1359.57,1209.38 1360.16,1208.11 1360.74,1209.56 1361.33,1209.75 1361.92,1210.06 1362.5,1211.48 1363.09,1210.54 1363.68,1213.13 1364.26,1212.14 1364.85,1214.57 1365.43,1214.2 1366.02,1215.36 1366.61,1215.23 1367.19,1216.28 1367.78,1215.93 1368.37,1215.87 1368.95,1215.97 1369.54,1215.97 1370.13,1216.06 1370.71,1216.85 1371.3,1216.71 1371.88,1213.87 1372.47,1213.76 1373.06,1213.69 1373.64,1213.49 1374.23,1212.16 1374.82,1213.42 1375.4,1214.76 1375.99,1212.11 1376.58,1212.07 1377.16,1210.79 1377.75,1210.82 1378.34,1210.92 1378.92,1209.61 1379.51,1209.75 1380.09,1209.93 1380.68,1211.49 1381.27,1211.42 1381.85,1210.26 1382.44,1210.47 1383.03,1210.51 1383.61,1211.96 1384.2,1213.23 1384.79,1209.54 1385.37,1209.68 1385.96,1209.79 1386.55,1212.68 1387.13,1214.16 1387.72,1216.69 1388.3,1215.16 1388.89,1213.85 1389.48,1215.07 1390.06,1218.69 1390.65,1218.3 1391.24,1216.82 1391.82,1217.64 1392.41,1217.59 1393,1217.2 1393.58,1218.56 1394.17,1215.97 1394.75,1216.87 1395.34,1215.21 1395.93,1215.17 1396.51,1215.13 1397.1,1214.84 1397.69,1218.39 1398.27,1217.16 1398.86,1214.19 1399.45,1214.01 1400.03,1213.7 1400.62,1214.88 1401.21,1214.99 1401.79,1216.34 1402.38,1216.23 1402.96,1217.14 1403.55,1217.08 1404.14,1211.51 1404.72,1212.76 1405.31,1208.71 1405.9,1207.49 1406.48,1207.91 1407.07,1206.93 1407.66,1208.46 1408.24,1208.73 1408.83,1207.62 1409.42,1207.77 1410,1210.78 1410.59,1210.89 1411.17,1212.22 1411.76,1213.36 1412.35,1211.89 1412.93,1209.32 1413.52,1206.88 1414.11,1203.33 1414.69,1204.8 1415.28,1205.04 1415.87,1205.64 1416.45,1205.92 1417.04,1206.08 1417.63,1207.51 1418.21,1208.04 1418.8,1209.53 1419.38,1209.65 1419.97,1207.26 1420.56,1204.85 1421.14,1205.22 1421.73,1204.36 1422.32,1204.51 1422.9,1204.81 1423.49,1205.19 1424.08,1205.28 1424.66,1205.72 1425.25,1208.6 1425.83,1211.64 1426.42,1211.57 1427.01,1212.96 1427.59,1212.92 1428.18,1209.23 1428.77,1210.57 1429.35,1208.06 1429.94,1209.44 1430.53,1209.88 1431.11,1211.25 1431.7,1211.22 1432.29,1212.64 1432.87,1211.42 1433.46,1211.52 1434.04,1211.68 1434.63,1210.62 1435.22,1209.7 1435.8,1208.65 1436.39,1211.28 1436.98,1209.87 1437.56,1212.66 1438.15,1214.06 1438.74,1213.87 1439.32,1214.86 1439.91,1213.84 1440.5,1213.99 1441.08,1213.95 1441.67,1215.17 1442.25,1213.9 1442.84,1213.78 1443.43,1212.6 1444.01,1213.94 1444.6,1212.65 1445.19,1212.84 1445.77,1210.22 1446.36,1208.97 1446.95,1209.06 1447.53,1211.84 1448.12,1214.47 1448.7,1213.44 1449.29,1209.56 1449.88,1211.06 1450.46,1211.13 1451.05,1211.09 1451.64,1213.99 1452.22,1213.66 1452.81,1214.52 1453.4,1215.74 1453.98,1214.48 1454.57,1215.33 1455.16,1213.91 1455.74,1213.79 1456.33,1212.41 1456.91,1215.07 1457.5,1216.29 1458.09,1214.77 1458.67,1215.87 1459.26,1215.59 1459.85,1216.87 1460.43,1217.74 1461.02,1215.01 1461.61,1216.15 1462.19,1215.76 1462.78,1214.46 1463.37,1214.46 1463.95,1215.54 1464.54,1213.02 1465.12,1215.42 1465.71,1212.97 1466.3,1214.12 1466.88,1213.96 1467.47,1214.12 1468.06,1215.23 1468.64,1215.26 1469.23,1212.49 1469.82,1215.11 1470.4,1215.82 1470.99,1218.34 1471.57,1218.05 1472.16,1215.92 1472.75,1214.35 1473.33,1213.11 1473.92,1212.93 1474.51,1215.35 1475.09,1216.59 1475.68,1216.75 1476.27,1217.93 1476.85,1217.4 1477.44,1216.97 1478.03,1215.44 1478.61,1215.07 1479.2,1216.09 1479.78,1210.75 1480.37,1212.18 1480.96,1210.74 1481.54,1209.45 1482.13,1209.75 1482.72,1212.47 1483.3,1213.74 1483.89,1212.36 1484.48,1211.01 1485.06,1212.18 1485.65,1210.84 1486.24,1212.18 1486.82,1212.05 1487.41,1214.66 1487.99,1215.57 1488.58,1214.27 1489.17,1212.98 1489.75,1210.27 1490.34,1212.82 1490.93,1215.29 1491.51,1216.28 1492.1,1214.83 1492.69,1215.06 1493.27,1210.76 1493.86,1209.71 1494.45,1212.48 1495.03,1211.25 1495.62,1209.87 1496.2,1209.58 1496.79,1212.18 1497.38,1212.31 1497.96,1211 1498.55,1209.85 1499.14,1210.05 1499.72,1209.99 1500.31,1211.42 1500.9,1212.81 1501.48,1211.36 1502.07,1212.55 1502.65,1212.33 1503.24,1213.51 1503.83,1213.47 1504.41,1212.09 1505,1214.49 1505.59,1214.21 1506.17,1212.93 1506.76,1214.1 1507.35,1215.29 1507.93,1213.96 1508.52,1212.44 1509.11,1212.23 1509.69,1211.02 1510.28,1212.22 1510.86,1210.8 1511.45,1209.45 1512.04,1209.75 1512.62,1206.28 1513.21,1206.43 1513.8,1208.08 1514.38,1206.77 1514.97,1206.1 1515.56,1206.39 1516.14,1207.99 1516.73,1209.66 1517.32,1209.55 1517.9,1207.44 1518.49,1207.78 1519.07,1205.43 1519.66,1205.5 1520.25,1205.98 1520.83,1205.24 1521.42,1208.31 1522.01,1207.14 1522.59,1211.16 1523.18,1209.89 1523.77,1211.41 1524.35,1211.59 1524.94,1211.52 1525.52,1213.82 1526.11,1212.44 1526.7,1214.86 1527.28,1213.88 1527.87,1212.29 1528.46,1212.19 1529.04,1212.23 1529.63,1212.35 1530.22,1209.87 1530.8,1210 1531.39,1208.69 1531.98,1204.81 1532.56,1205 1533.15,1205.43 1533.73,1207.14 1534.32,1210.11 1534.91,1209.13 1535.49,1206.9 1536.08,1205.79 1536.67,1205.04 1537.25,1203.04 1537.84,1202.28 1538.43,1205.12 1539.01,1205.67 1539.6,1208.8 1540.19,1208.79 1540.77,1209.16 1541.36,1205.82 1541.94,1206.05 1542.53,1209.11 1543.12,1210.23 1543.7,1210.41 1544.29,1210.12 1544.88,1209.02 1545.46,1210.32 1546.05,1210.51 1546.64,1211.63 1547.22,1210.2 1547.81,1209.01 1548.4,1206.63 1548.98,1206.86 1549.57,1205.67 1550.15,1202.12 1550.74,1202.55 1551.33,1203.16 1551.91,1203.8 1552.5,1204.17 1553.09,1204.63 1553.67,1207.53 1554.26,1208.99 1554.85,1206.87 1555.43,1207.37 1556.02,1206.26 1556.6,1208.94 1557.19,1208.76 1557.78,1208.86 1558.36,1210.55 1558.95,1213.2 1559.54,1214.26 1560.12,1216.55 1560.71,1217.76 1561.3,1217.46 1561.88,1216.25 1562.47,1216.28 1563.06,1217.47 1563.64,1217.37 1564.23,1216.94 1564.81,1216.85 1565.4,1212.76 1565.99,1212.86 1566.57,1213.83 1567.16,1212.31 1567.75,1212.34 1568.33,1212.26 1568.92,1212.21 1569.51,1212.15 1570.09,1213.29 1570.68,1211.89 1571.27,1210.67 1571.85,1213.03 1572.44,1212.88 1573.02,1215.3 1573.61,1216.52 1574.2,1216.16 1574.78,1214.82 1575.37,1213.35 1575.96,1213.46 1576.54,1213.79 1577.13,1213.69 1577.72,1214.81 1578.3,1217.43 1578.89,1217.32 1579.47,1217.4 1580.06,1218.38 1580.65,1217.12 1581.23,1216.97 1581.82,1217.89 1582.41,1217.62 1582.99,1215.89 1583.58,1217.13 1584.17,1217.03 1584.75,1216.86 1585.34,1215.27 1585.93,1217.57 1586.51,1216.13 1587.1,1211.83 1587.68,1213.05 1588.27,1212.96 1588.86,1212.81 1589.44,1210.29 1590.03,1212.87 1590.62,1210.2 1591.2,1210.15 1591.79,1210.4 1592.38,1215.76 1592.96,1214.07 1593.55,1215.14 1594.14,1212.62 1594.72,1211.19 1595.31,1212.68 1595.89,1211.48 1596.48,1211.37 1597.07,1211.24 1597.65,1210.84 1598.24,1210.75 1598.83,1209.53 1599.41,1210.81 1600,1210.71 1600.59,1212.05 1601.17,1213.67 1601.76,1213.51 1602.34,1213.48 1602.93,1213.6 1603.52,1213.8 1604.1,1216.59 1604.69,1217.41 1605.28,1214.7 1605.86,1216 1606.45,1216.1 1607.04,1217.24 1607.62,1215.81 1608.21,1215.79 1608.8,1214.2 1609.38,1211.71 1609.97,1211.57 1610.55,1211.49 1611.14,1211.51 1611.73,1210.13 1612.31,1211.61 1612.9,1210.4 1613.49,1210.53 1614.07,1210.64 1614.66,1213.32 1615.25,1211.93 1615.83,1213.43 1616.42,1208.43 1617.01,1212.47 1617.59,1213.85 1618.18,1216.41 1618.76,1216.09 1619.35,1214.72 1619.94,1214.75 1620.52,1214.55 1621.11,1215.44 1621.7,1215.35 1622.28,1215.47 1622.87,1214.37 1623.46,1214.08 1624.04,1211.21 1624.63,1212.22 1625.22,1211.89 1625.8,1213.1 1626.39,1214.31 1626.97,1214.14 1627.56,1213.9 1628.15,1212.54 1628.73,1213.64 1629.32,1213.4 1629.91,1215.82 1630.49,1218.37 1631.08,1218.15 1631.67,1220.37 1632.25,1218.14 1632.84,1217.69 1633.42,1219.77 1634.01,1215.69 1634.6,1216.71 1635.18,1216.5 1635.77,1217.69 1636.36,1216 1636.94,1215.88 1637.53,1215.56 1638.12,1215.41 1638.7,1213.78 1639.29,1214.97 1639.88,1213.7 1640.46,1213.72 1641.05,1213.6 1641.63,1215.86 1642.22,1216.6 1642.81,1217.77 1643.39,1216.32 1643.98,1213.43 1644.57,1211.1 1645.15,1211.11 1645.74,1211.12 1646.33,1208.68 1646.91,1208.62 1647.5,1209.95 1648.09,1211.17 1648.67,1213.62 1649.26,1210.01 1649.84,1212.68 1650.43,1209.08 1651.02,1209.22 1651.6,1210.72 1652.19,1213.33 1652.78,1212.1 1653.36,1209.48 1653.95,1209.47 1654.54,1208.55 1655.12,1208.71 1655.71,1211.33 1656.29,1210.18 1656.88,1207.6 1657.47,1206.61 1658.05,1208.11 1658.64,1204.46 1659.23,1204.87 1659.81,1202.95 1660.4,1204.72 1660.99,1204.94 1661.57,1209.19 1662.16,1208.15 1662.75,1207.31 1663.33,1208.75 1663.92,1208.85 1664.5,1207.64 1665.09,1206.94 1665.68,1206.99 1666.26,1207.27 1666.85,1206.16 1667.44,1205.06 1668.02,1205.76 1668.61,1206 1669.2,1207.55 1669.78,1206.31 1670.37,1208.11 1670.96,1211.01 1671.54,1209.89 1672.13,1210.06 1672.71,1209.09 1673.3,1210.19 1673.89,1212.82 1674.47,1214.11 1675.06,1216.33 1675.65,1214.75 1676.23,1216.04 1676.82,1215.6 1677.41,1216.89 1677.99,1216.47 1678.58,1217.64 1679.17,1217.13 1679.75,1217.01 1680.34,1218.07 1680.92,1216.6 1681.51,1213.81 1682.1,1214 1682.68,1213.74 1683.27,1211.32 1683.86,1212.58 1684.44,1212.77 1685.03,1215.04 1685.62,1216.21 1686.2,1217.36 1686.79,1215.76 1687.37,1216.81 1687.96,1213.85 1688.55,1214.82 1689.13,1213.58 1689.72,1213.27 1690.31,1212 1690.89,1213.23 1691.48,1209.2 1692.07,1210.66 1692.65,1212.18 1693.24,1212.35 1693.83,1211.18 1694.41,1213.95 1695,1213.94 1695.58,1215.13 1696.17,1215.14 1696.76,1212.72 1697.34,1212.75 1697.93,1211.23 1698.52,1211.17 1699.1,1212.3 1699.69,1208.45 1700.28,1208.76 1700.86,1206.54 1701.45,1205.65 1702.04,1206.12 1702.62,1210.39 1703.21,1211.61 1703.79,1213.04 1704.38,1214.12 1704.97,1212.5 1705.55,1211.17 1706.14,1211.43 1706.73,1214.03 1707.31,1213.97 1707.9,1215.31 1708.49,1213.98 1709.07,1214.1 1709.66,1212.93 1710.24,1216.65 1710.83,1217.5 1711.42,1215.09 1712,1215.19 1712.59,1214.04 1713.18,1215.45 1713.76,1217.81 1714.35,1217.4 1714.94,1215.96 1715.52,1212.16 1716.11,1212.1 1716.7,1212.33 1717.28,1213.6 1717.87,1214.59 1718.45,1213.51 1719.04,1213.22 1719.63,1213.51 1720.21,1212.07 1720.8,1213.52 1721.39,1211.08 1721.97,1211.26 1722.56,1211.5 1723.15,1211.39 1723.73,1210.03 1724.32,1210.33 1724.91,1214.22 1725.49,1210.33 1726.08,1212.82 1726.66,1216.46 1727.25,1217.51 1727.84,1217.07 1728.42,1216.85 1729.01,1216.29 1729.6,1221.43 1730.18,1220.91 1730.77,1221.83 1731.36,1222.82 1731.94,1223.36 1732.53,1225.08 1733.11,1224.44 1733.7,1224.17 1734.29,1223.7 1734.87,1220.64 1735.46,1216.32 1736.05,1217.19 1736.63,1218.27 1737.22,1217.84 1737.81,1221.08 1738.39,1216.58 1738.98,1215.15 1739.57,1215.06 1740.15,1217.37 1740.74,1217.14 1741.32,1215.72 1741.91,1215.54 1742.5,1215.61 1743.08,1216.66 1743.67,1217.54 1744.26,1217.16 1744.84,1217.97 1745.43,1216.26 1746.02,1214.98 1746.6,1215.87 1747.19,1213.06 1747.78,1213.09 1748.36,1213.01 1748.95,1212.7 1749.53,1212.61 1750.12,1212.66 1750.71,1213.76 1751.29,1213.55 1751.88,1211.96 1752.47,1211.74 1753.05,1215.86 1753.64,1215.71 1754.23,1214.26 1754.81,1216.5 1755.4,1216.08 1755.99,1216.88 1756.57,1220.48 1757.16,1218.7 1757.74,1214.7 1758.33,1215.9 1758.92,1214.2 1759.5,1215.56 1760.09,1217.74 1760.68,1216.35 1761.26,1216.1 1761.85,1215.59 1762.44,1216.97 1763.02,1216.62 1763.61,1218.76 1764.19,1218.57 1764.78,1215.9 1765.37,1218.06 1765.95,1220.19 1766.54,1216.14 1767.13,1216.12 1767.71,1218.66 1768.3,1215.79 1768.89,1214.29 1769.47,1211.39 1770.06,1209.92 1770.65,1209.88 1771.23,1208.83 1771.82,1206.53 1772.4,1209.42 1772.99,1208.39 1773.58,1209.9 1774.16,1211.1 1774.75,1210.98 1775.34,1212.05 1775.92,1210.69 1776.51,1213.01 1777.1,1212.73 1777.68,1208.85 1778.27,1208.97 1778.86,1206.47 1779.44,1207.82 1780.03,1206.71 1780.61,1207 1781.2,1207.22 1781.79,1207.43 1782.37,1206.25 1782.96,1205.22 1783.55,1206.75 1784.13,1205.85 1784.72,1207.51 1785.31,1206.48 1785.89,1204.28 1786.48,1203.39 1787.06,1203.94 1787.65,1207.99 1788.24,1206.88 1788.82,1207.26 1789.41,1208.88 1790,1211.57 1790.58,1211.53 1791.17,1211.66 1791.76,1207.93 1792.34,1208.26 1792.93,1208.52 1793.52,1205.81 1794.1,1207.46 1794.69,1206.66 1795.27,1205.86 1795.86,1207.51 1796.45,1206.46 1797.03,1206.67 1797.62,1205.7 1798.21,1203.5 1798.79,1202.8 1799.38,1207.09 1799.97,1204.95 1800.55,1206.77 1801.14,1205.96 1801.73,1207.55 1802.31,1207.7 1802.9,1206.58 1803.48,1205.69 1804.07,1203.51 1804.66,1204.19 1805.24,1204.56 1805.83,1207.83 1806.42,1208.23 1807,1208.63 1807.59,1208.96 1808.18,1210.45 1808.76,1209.22 1809.35,1206.9 1809.94,1207.39 1810.52,1208.96 1811.11,1209.23 1811.69,1209.36 1812.28,1208.63 1812.87,1208.67 1813.45,1211.23 1814.04,1212.53 1814.63,1215.12 1815.21,1219.77 1815.8,1219.24 1816.39,1218.75 1816.97,1218.38 1817.56,1218.13 1818.14,1220.39 1818.73,1220.08 1819.32,1220.8 1819.9,1215.25 1820.49,1213.81 1821.08,1214.89 1821.66,1212.41 1822.25,1211.35 1822.84,1211.46 1823.42,1212.79 1824.01,1211.62 1824.6,1211.41 1825.18,1207.89 1825.77,1209.23 1826.35,1209.41 1826.94,1211.96 1827.53,1208.1 1828.11,1207.14 1828.7,1208.56 1829.29,1211.5 1829.87,1215.21 1830.46,1218.03 1831.05,1216.59 1831.63,1215.29 1832.22,1212.36 1832.81,1212.56 1833.39,1211.37 1833.98,1211.64 1834.56,1213.01 1835.15,1213.01 1835.74,1213 1836.32,1214.55 1836.91,1214.4 1837.5,1211.73 1838.08,1211.78 1838.67,1210.49 1839.26,1211.84 1839.84,1213 1840.43,1211.78 1841.01,1214.38 1841.6,1214.22 1842.19,1215.38 1842.77,1216.44 1843.36,1216.12 1843.95,1216.12 1844.53,1214.76 1845.12,1213.35 1845.71,1211.83 1846.29,1211.96 1846.88,1212.05 1847.47,1212.08 1848.05,1212.46 1848.64,1212.55 1849.22,1215.16 1849.81,1214.84 1850.4,1214.69 1850.98,1213.46 1851.57,1215.73 1852.16,1214.23 1852.74,1211.55 1853.33,1213.79 1853.92,1212.32 1854.5,1212.32 1855.09,1214.96 1855.68,1213.63 1856.26,1211.4 1856.85,1211.59 1857.43,1210.56 1858.02,1210.57 1858.61,1211.98 1859.19,1211.94 1859.78,1213.09 1860.37,1213.08 1860.95,1214.34 1861.54,1211.66 1862.13,1210.39 1862.71,1211.47 1863.3,1209.36 1863.88,1210.81 1864.47,1210.48 1865.06,1211.65 1865.64,1210.56 1866.23,1209.57 1866.82,1208.69 1867.4,1210.53 1867.99,1210.79 1868.58,1210.85 1869.16,1213.3 1869.75,1214.23 1870.34,1216.74 1870.92,1219.05 1871.51,1217.55 1872.09,1217.07 1872.68,1214.48 1873.27,1214.54 1873.85,1213.25 1874.44,1214.26 1875.03,1214.05 1875.61,1211.47 1876.2,1215.32 1876.79,1215.13 1877.37,1214.98 1877.96,1212.57 1878.55,1212.65 1879.13,1214.1 1879.72,1213.95 1880.3,1216.3 1880.89,1214.7 1881.48,1213.27 1882.06,1214.56 1882.65,1215.62 1883.24,1214.29 1883.82,1214.02 1884.41,1212.92 1885,1212.99 1885.58,1213.88 1886.17,1213.48 1886.76,1213.31 1887.34,1218.3 1887.93,1217.8 1888.51,1217.54 1889.1,1217.22 1889.69,1220.58 1890.27,1221.27 1890.86,1218.23 1891.45,1217.75 1892.03,1216.03 1892.62,1213.21 1893.21,1210.81 1893.79,1212.24 1894.38,1212.17 1894.96,1214.57 1895.55,1212.21 1896.14,1215.06 1896.72,1213.88 1897.31,1213.78 1897.9,1212.33 1898.48,1213.56 1899.07,1213.65 1899.66,1212.23 1900.24,1212.29 1900.83,1210.91 1901.42,1208.42 1902,1209.94 1902.59,1212.65 1903.17,1213.75 1903.76,1214.01 1904.35,1211.28 1904.93,1211.38 1905.52,1209.15 1906.11,1210.57 1906.69,1210.5 1907.28,1210.46 1907.87,1207.88 1908.45,1208.11 1909.04,1208.71 1909.63,1211.47 1910.21,1210.26 1910.8,1207.85 1911.38,1209.63 1911.97,1211 1912.56,1209.95 1913.14,1207.46 1913.73,1207.87 1914.32,1209.38 1914.9,1209.63 1915.49,1211.2 1916.08,1211.4 1916.66,1210.2 1917.25,1207.84 1917.83,1210.81 1918.42,1208.26 1919.01,1205.65 1919.59,1206.36 1920.18,1206.77 1920.77,1205.6 1921.35,1207.05 1921.94,1208.7 1922.53,1208.87 1923.11,1210.21 1923.7,1210.23 1924.29,1211.75 1924.87,1211.65 1925.46,1209.47 1926.04,1209.59 1926.63,1211.15 1927.22,1210.18 1927.8,1211.55 1928.39,1211.81 1928.98,1211.99 1929.56,1210.57 1930.15,1209.58 1930.74,1208.34 1931.32,1208.72 1931.91,1207.4 1932.5,1207.79 1933.08,1208.27 1933.67,1206.84 1934.25,1207.97 1934.84,1206.98 1935.43,1207.05 1936.01,1207.54 1936.6,1207.86 1937.19,1210.55 1937.77,1210.62 1938.36,1210.63 1938.95,1208.21 1939.53,1207.16 1940.12,1207.4 1940.71,1208.98 1941.29,1207.54 1941.88,1207.81 1942.46,1212.98 1943.05,1211.81 1943.64,1211.78 1944.22,1209.32 1944.81,1210.65 1945.4,1210.69 1945.98,1210.88 1946.57,1212.46 1947.16,1212.69 1947.74,1213.36 1948.33,1213.46 1948.91,1211.74 1949.5,1213.36 1950.09,1212.11 1950.67,1210.9 1951.26,1211.1 1951.85,1207.29 1952.43,1206.18 1953.02,1206.35 1953.61,1206.85 1954.19,1211.97 1954.78,1214.48 1955.37,1215.81 1955.95,1216.96 1956.54,1212.9 1957.12,1212.87 1957.71,1212.93 1958.3,1212.96 1958.88,1213.95 1959.47,1212.38 1960.06,1213.37 1960.64,1213.18 1961.23,1213.11 1961.82,1212.06 1962.4,1208.42 1962.99,1209.8 1963.58,1211 1964.16,1211.2 1964.75,1207.35 1965.33,1206.58 1965.92,1207.91 1966.51,1207.2 1967.09,1207.64 1967.68,1210.39 1968.27,1210.37 1968.85,1210.53 1969.44,1211.54 1970.03,1212.76 1970.61,1212.82 1971.2,1212.98 1971.78,1212.76 1972.37,1212.95 1972.96,1211.49 1973.54,1212.95 1974.13,1210.59 1974.72,1211.82 1975.3,1213.1 1975.89,1215.71 1976.48,1215.54 1977.06,1214.28 1977.65,1215.39 1978.24,1211.5 1978.82,1210.38 1979.41,1210.34 1979.99,1207.96 1980.58,1208.12 1981.17,1208.27 1981.75,1208.62 1982.34,1208.85 1982.93,1208.98 1983.51,1208.94 1984.1,1210.49 1984.69,1210.72 1985.27,1211.26 1985.86,1210.21 1986.45,1210.44 1987.03,1213.31 1987.62,1212.08 1988.2,1213.44 1988.79,1215.73 1989.38,1214.38 1989.96,1211.99 1990.55,1211.73 1991.14,1214.08 1991.72,1212.79 1992.31,1212.74 1992.9,1212.85 1993.48,1214.23 1994.07,1214.06 1994.65,1215.32 1995.24,1214 1995.83,1216.33 1996.41,1217.08 1997,1220.45 1997.59,1219.96 1998.17,1218.31 1998.76,1219.16 1999.35,1220.01 1999.93,1219.59 2000.52,1220.6 2001.11,1222.66 2001.69,1222.06 2002.28,1217.93 2002.86,1215.21 2003.45,1210.12 2004.04,1207.91 2004.62,1209.14 2005.21,1210.59 2005.8,1209.24 2006.38,1209.52 2006.97,1207.06 2007.56,1204.81 2008.14,1205.11 2008.73,1204.28 2009.32,1203.19 2009.9,1203.89 2010.49,1203 2011.07,1203.31 2011.66,1202.39 2012.25,1202.89 2012.83,1204.55 2013.42,1203.67 2014.01,1204.09 2014.59,1208.24 2015.18,1209.61 2015.77,1209.68 2016.35,1209.89 2016.94,1211.46 2017.53,1210.01 2018.11,1210.1 2018.7,1212.73 2019.28,1212.63 2019.87,1211.08 2020.46,1212.49 2021.04,1211.32 2021.63,1212.65 2022.22,1212.72 2022.8,1212.44 2023.39,1212.5 2023.98,1214.87 2024.56,1213.54 2025.15,1213.65 2025.73,1214.79 2026.32,1214.54 2026.91,1215.85 2027.49,1214.53 2028.08,1216.99 2028.67,1216.8 2029.25,1215.58 2029.84,1214.33 2030.43,1215.29 2031.01,1216.26 2031.6,1217.25 2032.19,1218.1 2032.77,1215.23 2033.36,1214.93 2033.94,1214.9 2034.53,1218.47 2035.12,1218.05 2035.7,1220.16 2036.29,1220.88 2036.88,1219.23 2037.46,1218.63 2038.05,1218.11 2038.64,1216.47 2039.22,1216.05 2039.81,1214.41 2040.4,1218.29 2040.98,1218.06 2041.57,1216.54 2042.15,1214.88 2042.74,1213.47 2043.33,1213.28 2043.91,1213.45 2044.5,1214.46 2045.09,1215.4 2045.67,1213.86 2046.26,1213.64 2046.85,1214.7 2047.43,1215.87 2048.02,1215.79 2048.6,1219.51 2049.19,1216.48 2049.78,1214.91 2050.36,1215.76 2050.95,1215.44 2051.54,1214.07 2052.12,1213.91 2052.71,1211.32 2053.3,1212.64 2053.88,1208.73 2054.47,1212.65 2055.06,1212.8 2055.64,1208.78 2056.23,1208.76 2056.81,1209.28 2057.4,1209.53 2057.99,1207.07 2058.57,1207.23 2059.16,1209.97 2059.75,1210.19 2060.33,1212.75 2060.92,1214.05 2061.51,1214.91 2062.09,1216.2 2062.68,1214.53 2063.27,1211.95 2063.85,1209.53 2064.44,1210.81 2065.02,1210.67 2065.61,1210.63 2066.2,1209.47 2066.78,1209.46 2067.37,1212.46 2067.96,1214.66 2068.54,1214.38 2069.13,1214.44 2069.72,1216.59 2070.3,1216.31 2070.89,1216.23 2071.48,1219.68 2072.06,1219.23 2072.65,1222.8 2073.23,1219.5 2073.82,1220.17 2074.41,1222.2 2074.99,1216.62 2075.58,1217.41 2076.17,1217.09 2076.75,1216.78 2077.34,1219.02 2077.93,1217.42 2078.51,1216.2 2079.1,1214.89 2079.68,1213.72 2080.27,1212.35 2080.86,1210.87 2081.44,1210.91 2082.03,1210.64 2082.62,1209.4 2083.2,1210.62 2083.79,1208.12 2084.38,1205.66 2084.96,1205.9 2085.55,1205.88 2086.14,1204.91 2086.72,1205.42 2087.31,1204.28 2087.89,1203.65 2088.48,1201.47 2089.07,1205.9 2089.65,1207.55 2090.24,1210.42 2090.83,1211.74 2091.41,1211.83 2092,1212.9 2092.59,1212.87 2093.17,1211.66 2093.76,1211.52 2094.35,1214.12 2094.93,1211.62 2095.52,1211.58 2096.1,1212.73 2096.69,1214.89 2097.28,1214.68 2097.86,1214.44 2098.45,1215.41 2099.04,1216.49 2099.62,1214.93 2100.21,1214.84 2100.8,1216.04 2101.38,1217.25 2101.97,1217.05 2102.55,1219.73 2103.14,1220.51 2103.73,1221.26 2104.31,1220.81 2104.9,1221.61 2105.49,1222.3 2106.07,1220.31 2106.66,1218.8 2107.25,1218.34 2107.83,1218.06 2108.42,1215.09 2109.01,1213.54 2109.59,1214.81 2110.18,1211.96 2110.76,1211.81 2111.35,1214.41 2111.94,1215.7 2112.52,1213.01 2113.11,1214.66 2113.7,1215.73 2114.28,1218.24 2114.87,1218.16 2115.46,1218.18 2116.04,1217.67 2116.63,1217.54 2117.22,1218.33 2117.8,1219.28 2118.39,1220.15 2118.97,1215.97 2119.56,1215.26 2120.15,1212.46 2120.73,1211.27 2121.32,1211.51 2121.91,1214.24 2122.49,1212.98 2123.08,1211.67 2123.67,1211.63 2124.25,1212.86 2124.84,1211.22 2125.42,1207.5 2126.01,1207.52 2126.6,1207.95 2127.18,1209.48 2127.77,1210.72 2128.36,1210.85 2128.94,1209.58 2129.53,1207.15 2130.12,1207.26 2130.7,1206.51 2131.29,1206.72 2131.88,1204.47 2132.46,1202.21 2133.05,1203.73 2133.63,1202.56 2134.22,1203.14 2134.81,1203.76 2135.39,1204.21 2135.98,1204.76 2136.57,1206.52 2137.15,1206.99 2137.74,1206.12 2138.33,1209.19 2138.91,1206.93 2139.5,1208.43 2140.09,1205.9 2140.67,1204.93 2141.26,1207.89 2141.84,1208.15 2142.43,1208.55 2143.02,1209.04 2143.6,1209.3 2144.19,1207.19 2144.78,1206.22 2145.36,1205.06 2145.95,1206.94 2146.54,1208.42 2147.12,1207.75 2147.71,1211.91 2148.3,1210.59 2148.88,1212.28 2149.47,1213.49 2150.05,1210.91 2150.64,1212.27 2151.23,1213.52 2151.81,1213.16 2152.4,1212.9 2152.99,1211.77 2153.57,1211.87 2154.16,1210.69 2154.75,1212.25 2155.33,1211.04 2155.92,1208.38 2156.5,1212.47 2157.09,1213.78 2157.68,1212.25 2158.26,1213.6 \"/>\n<path clip-path=\"url(#clip572)\" d=\"M986.025 1212.63 L986.612 1212.63 L987.198 1212.63 L987.785 1212.63 L988.371 1212.63 L988.957 1212.63 L989.544 1212.63 L990.13 1212.63 L990.717 1212.63 L991.303 1212.63 L991.889 1212.63 L992.476 1212.63 L993.062 1212.63 L993.649 1212.63 L994.235 1212.63 L994.822 1212.63 L995.408 1212.63 L995.994 1212.63 L996.581 1212.63 L997.167 1212.63 L997.754 1212.63 L998.34 1212.63 L998.926 1212.63 L999.513 1212.63 L1000.1 1212.63 L1000.69 1212.63 L1001.27 1212.63 L1001.86 1212.63 L1002.44 1212.63 L1003.03 1212.63 L1003.62 1212.63 L1004.2 1212.63 L1004.79 1212.63 L1005.38 1212.63 L1005.96 1212.63 L1006.55 1212.63 L1007.14 1212.63 L1007.72 1212.63 L1008.31 1212.63 L1008.9 1212.63 L1009.48 1212.63 L1010.07 1212.63 L1010.65 1212.63 L1011.24 1212.63 L1011.83 1212.63 L1012.41 1212.63 L1013 1212.63 L1013.59 1212.63 L1014.17 1212.63 L1014.76 1212.63 L1015.35 1212.63 L1015.93 1212.63 L1016.52 1212.63 L1017.11 1212.63 L1017.69 1212.63 L1018.28 1212.63 L1018.86 1212.63 L1019.45 1212.63 L1020.04 1212.63 L1020.62 1212.63 L1021.21 1212.63 L1021.8 1212.63 L1022.38 1212.63 L1022.97 1212.63 L1023.56 1212.63 L1024.14 1212.63 L1024.73 1212.63 L1025.32 1212.63 L1025.9 1212.63 L1026.49 1212.63 L1027.07 1212.63 L1027.66 1212.63 L1028.25 1212.63 L1028.83 1212.63 L1029.42 1212.63 L1030.01 1212.63 L1030.59 1212.63 L1031.18 1212.63 L1031.77 1212.63 L1032.35 1212.63 L1032.94 1212.63 L1033.52 1212.63 L1034.11 1212.63 L1034.7 1212.63 L1035.28 1212.63 L1035.87 1212.63 L1036.46 1212.63 L1037.04 1212.63 L1037.63 1212.63 L1038.22 1212.63 L1038.8 1212.63 L1039.39 1212.63 L1039.98 1212.63 L1040.56 1212.63 L1041.15 1212.63 L1041.73 1212.63 L1042.32 1212.63 L1042.91 1212.63 L1043.49 1212.63 L1044.08 1212.63 L1044.67 1212.63 L1045.25 1212.63 L1045.84 1212.63 L1046.43 1212.63 L1047.01 1212.63 L1047.6 1212.63 L1048.19 1212.63 L1048.77 1212.63 L1049.36 1212.63 L1049.94 1212.63 L1050.53 1212.63 L1051.12 1212.63 L1051.7 1212.63 L1052.29 1212.63 L1052.88 1212.63 L1053.46 1212.63 L1054.05 1212.63 L1054.64 1212.63 L1055.22 1212.63 L1055.81 1212.63 L1056.39 1212.63 L1056.98 1212.63 L1057.57 1212.63 L1058.15 1212.63 L1058.74 1212.63 L1059.33 1212.63 L1059.91 1212.63 L1060.5 1212.63 L1061.09 1212.63 L1061.67 1212.63 L1062.26 1212.63 L1062.85 1212.63 L1063.43 1212.63 L1064.02 1212.63 L1064.6 1212.63 L1065.19 1212.63 L1065.78 1212.63 L1066.36 1212.63 L1066.95 1212.63 L1067.54 1212.63 L1068.12 1212.63 L1068.71 1212.63 L1069.3 1212.63 L1069.88 1212.63 L1070.47 1212.63 L1071.06 1212.63 L1071.64 1212.63 L1072.23 1212.63 L1072.81 1212.63 L1073.4 1212.63 L1073.99 1212.63 L1074.57 1212.63 L1075.16 1212.63 L1075.75 1212.63 L1076.33 1212.63 L1076.92 1212.63 L1077.51 1212.63 L1078.09 1212.63 L1078.68 1212.63 L1079.26 1212.63 L1079.85 1212.63 L1080.44 1212.63 L1081.02 1212.63 L1081.61 1212.63 L1082.2 1212.63 L1082.78 1212.63 L1083.37 1212.63 L1083.96 1212.63 L1084.54 1212.63 L1085.13 1212.63 L1085.72 1212.63 L1086.3 1212.63 L1086.89 1212.63 L1087.47 1212.63 L1088.06 1212.63 L1088.65 1212.63 L1089.23 1212.63 L1089.82 1212.63 L1090.41 1212.63 L1090.99 1212.63 L1091.58 1212.63 L1092.17 1212.63 L1092.75 1212.63 L1093.34 1212.63 L1093.93 1212.63 L1094.51 1212.63 L1095.1 1212.63 L1095.68 1212.63 L1096.27 1212.63 L1096.86 1212.63 L1097.44 1212.63 L1098.03 1212.63 L1098.62 1212.63 L1099.2 1212.63 L1099.79 1212.63 L1100.38 1212.63 L1100.96 1212.63 L1101.55 1212.63 L1102.14 1212.63 L1102.72 1212.63 L1103.31 1212.63 L1103.89 1212.63 L1104.48 1212.63 L1105.07 1212.63 L1105.65 1212.63 L1106.24 1212.63 L1106.83 1212.63 L1107.41 1212.63 L1108 1212.63 L1108.59 1212.63 L1109.17 1212.63 L1109.76 1212.63 L1110.34 1212.63 L1110.93 1212.63 L1111.52 1212.63 L1112.1 1212.63 L1112.69 1212.63 L1113.28 1212.63 L1113.86 1212.63 L1114.45 1212.63 L1115.04 1212.63 L1115.62 1212.63 L1116.21 1212.63 L1116.8 1212.63 L1117.38 1212.63 L1117.97 1212.63 L1118.55 1212.63 L1119.14 1212.63 L1119.73 1212.63 L1120.31 1212.63 L1120.9 1212.63 L1121.49 1212.63 L1122.07 1212.63 L1122.66 1212.63 L1123.25 1212.63 L1123.83 1212.63 L1124.42 1212.63 L1125.01 1212.63 L1125.59 1212.63 L1126.18 1212.63 L1126.76 1212.63 L1127.35 1212.63 L1127.94 1212.63 L1128.52 1212.63 L1129.11 1212.63 L1129.7 1212.63 L1130.28 1212.63 L1130.87 1212.63 L1131.46 1212.63 L1132.04 1212.63 L1132.63 1212.63 L1133.21 1212.63 L1133.8 1212.63 L1134.39 1212.63 L1134.97 1212.63 L1135.56 1212.63 L1136.15 1212.63 L1136.73 1212.63 L1137.32 1212.63 L1137.91 1212.63 L1138.49 1212.63 L1139.08 1212.63 L1139.67 1212.63 L1140.25 1212.63 L1140.84 1212.63 L1141.42 1212.63 L1142.01 1212.63 L1142.6 1212.63 L1143.18 1212.63 L1143.77 1212.63 L1144.36 1212.63 L1144.94 1212.63 L1145.53 1212.63 L1146.12 1212.63 L1146.7 1212.63 L1147.29 1212.63 L1147.88 1212.63 L1148.46 1212.63 L1149.05 1212.63 L1149.63 1212.63 L1150.22 1212.63 L1150.81 1212.63 L1151.39 1212.63 L1151.98 1212.63 L1152.57 1212.63 L1153.15 1212.63 L1153.74 1212.63 L1154.33 1212.63 L1154.91 1212.63 L1155.5 1212.63 L1156.09 1212.63 L1156.67 1212.63 L1157.26 1212.63 L1157.84 1212.63 L1158.43 1212.63 L1159.02 1212.63 L1159.6 1212.63 L1160.19 1212.63 L1160.78 1212.63 L1161.36 1212.63 L1161.95 1212.63 L1162.54 1212.63 L1163.12 1212.63 L1163.71 1212.63 L1164.29 1212.63 L1164.88 1212.63 L1165.47 1212.63 L1166.05 1212.63 L1166.64 1212.63 L1167.23 1212.63 L1167.81 1212.63 L1168.4 1212.63 L1168.99 1212.63 L1169.57 1212.63 L1170.16 1212.63 L1170.75 1212.63 L1171.33 1212.63 L1171.92 1212.63 L1172.5 1212.63 L1173.09 1212.63 L1173.68 1212.63 L1174.26 1212.63 L1174.85 1212.63 L1175.44 1212.63 L1176.02 1212.63 L1176.61 1212.63 L1177.2 1212.63 L1177.78 1212.63 L1178.37 1212.63 L1178.96 1212.63 L1179.54 1212.63 L1180.13 1212.63 L1180.71 1212.63 L1181.3 1212.63 L1181.89 1212.63 L1182.47 1212.63 L1183.06 1212.63 L1183.65 1212.63 L1184.23 1212.63 L1184.82 1212.63 L1185.41 1212.63 L1185.99 1212.63 L1186.58 1212.63 L1187.16 1212.63 L1187.75 1212.63 L1188.34 1212.63 L1188.92 1212.63 L1189.51 1212.63 L1190.1 1212.63 L1190.68 1212.63 L1191.27 1212.63 L1191.86 1212.63 L1192.44 1212.63 L1193.03 1212.63 L1193.62 1212.63 L1194.2 1212.63 L1194.79 1212.63 L1195.37 1212.63 L1195.96 1212.63 L1196.55 1212.63 L1197.13 1212.63 L1197.72 1212.63 L1198.31 1212.63 L1198.89 1212.63 L1199.48 1212.63 L1200.07 1212.63 L1200.65 1212.63 L1201.24 1212.63 L1201.83 1212.63 L1202.41 1212.63 L1203 1212.63 L1203.58 1212.63 L1204.17 1212.63 L1204.76 1212.63 L1205.34 1212.63 L1205.93 1212.63 L1206.52 1212.63 L1207.1 1212.63 L1207.69 1212.63 L1208.28 1212.63 L1208.86 1212.63 L1209.45 1212.63 L1210.03 1212.63 L1210.62 1212.63 L1211.21 1212.63 L1211.79 1212.63 L1212.38 1212.63 L1212.97 1212.63 L1213.55 1212.63 L1214.14 1212.63 L1214.73 1212.63 L1215.31 1212.63 L1215.9 1212.63 L1216.49 1212.63 L1217.07 1212.63 L1217.66 1212.63 L1218.24 1212.63 L1218.83 1212.63 L1219.42 1212.63 L1220 1212.63 L1220.59 1212.63 L1221.18 1212.63 L1221.76 1212.63 L1222.35 1212.63 L1222.94 1212.63 L1223.52 1212.63 L1224.11 1212.63 L1224.7 1212.63 L1225.28 1212.63 L1225.87 1212.63 L1226.45 1212.63 L1227.04 1212.63 L1227.63 1212.63 L1228.21 1212.63 L1228.8 1212.63 L1229.39 1212.63 L1229.97 1212.63 L1230.56 1212.63 L1231.15 1212.63 L1231.73 1212.63 L1232.32 1212.63 L1232.91 1212.63 L1233.49 1212.63 L1234.08 1212.63 L1234.66 1212.63 L1235.25 1212.63 L1235.84 1212.63 L1236.42 1212.63 L1237.01 1212.63 L1237.6 1212.63 L1238.18 1212.63 L1238.77 1212.63 L1239.36 1212.63 L1239.94 1212.63 L1240.53 1212.63 L1241.11 1212.63 L1241.7 1212.63 L1242.29 1212.63 L1242.87 1212.63 L1243.46 1212.63 L1244.05 1212.63 L1244.63 1212.63 L1245.22 1212.63 L1245.81 1212.63 L1246.39 1212.63 L1246.98 1212.63 L1247.57 1212.63 L1248.15 1212.63 L1248.74 1212.63 L1249.32 1212.63 L1249.91 1212.63 L1250.5 1212.63 L1251.08 1212.63 L1251.67 1212.63 L1252.26 1212.63 L1252.84 1212.63 L1253.43 1212.63 L1254.02 1212.63 L1254.6 1212.63 L1255.19 1212.63 L1255.78 1212.63 L1256.36 1212.63 L1256.95 1212.63 L1257.53 1212.63 L1258.12 1212.63 L1258.71 1212.63 L1259.29 1212.63 L1259.88 1212.63 L1260.47 1212.63 L1261.05 1212.63 L1261.64 1212.63 L1262.23 1212.63 L1262.81 1212.63 L1263.4 1212.63 L1263.98 1212.63 L1264.57 1212.63 L1265.16 1212.63 L1265.74 1212.63 L1266.33 1212.63 L1266.92 1212.63 L1267.5 1212.63 L1268.09 1212.63 L1268.68 1212.63 L1269.26 1212.63 L1269.85 1212.63 L1270.44 1212.63 L1271.02 1212.63 L1271.61 1212.63 L1272.19 1212.63 L1272.78 1212.63 L1273.37 1212.63 L1273.95 1212.63 L1274.54 1212.63 L1275.13 1212.63 L1275.71 1212.63 L1276.3 1212.63 L1276.89 1212.63 L1277.47 1212.63 L1278.06 1212.63 L1278.65 1212.63 L1279.23 1212.63 L1279.82 1212.63 L1280.4 1212.63 L1280.99 1212.63 L1281.58 1212.63 L1282.16 1212.63 L1282.75 1212.63 L1283.34 1212.63 L1283.92 1212.63 L1284.51 1212.63 L1285.1 1212.63 L1285.68 1212.63 L1286.27 1212.63 L1286.86 1212.63 L1287.44 1212.63 L1288.03 1212.63 L1288.61 1212.63 L1289.2 1212.63 L1289.79 1212.63 L1290.37 1212.63 L1290.96 1212.63 L1291.55 1212.63 L1292.13 1212.63 L1292.72 1212.63 L1293.31 1212.63 L1293.89 1212.63 L1294.48 1212.63 L1295.06 1212.63 L1295.65 1212.63 L1296.24 1212.63 L1296.82 1212.63 L1297.41 1212.63 L1298 1212.63 L1298.58 1212.63 L1299.17 1212.63 L1299.76 1212.63 L1300.34 1212.63 L1300.93 1212.63 L1301.52 1212.63 L1302.1 1212.63 L1302.69 1212.63 L1303.27 1212.63 L1303.86 1212.63 L1304.45 1212.63 L1305.03 1212.63 L1305.62 1212.63 L1306.21 1212.63 L1306.79 1212.63 L1307.38 1212.63 L1307.97 1212.63 L1308.55 1212.63 L1309.14 1212.63 L1309.73 1212.63 L1310.31 1212.63 L1310.9 1212.63 L1311.48 1212.63 L1312.07 1212.63 L1312.66 1212.63 L1313.24 1212.63 L1313.83 1212.63 L1314.42 1212.63 L1315 1212.63 L1315.59 1212.63 L1316.18 1212.63 L1316.76 1212.63 L1317.35 1212.63 L1317.93 1212.63 L1318.52 1212.63 L1319.11 1212.63 L1319.69 1212.63 L1320.28 1212.63 L1320.87 1212.63 L1321.45 1212.63 L1322.04 1212.63 L1322.63 1212.63 L1323.21 1212.63 L1323.8 1212.63 L1324.39 1212.63 L1324.97 1212.63 L1325.56 1212.63 L1326.14 1212.63 L1326.73 1212.63 L1327.32 1212.63 L1327.9 1212.63 L1328.49 1212.63 L1329.08 1212.63 L1329.66 1212.63 L1330.25 1212.63 L1330.84 1212.63 L1331.42 1212.63 L1332.01 1212.63 L1332.6 1212.63 L1333.18 1212.63 L1333.77 1212.63 L1334.35 1212.63 L1334.94 1212.63 L1335.53 1212.63 L1336.11 1212.63 L1336.7 1212.63 L1337.29 1212.63 L1337.87 1212.63 L1338.46 1212.63 L1339.05 1212.63 L1339.63 1212.63 L1340.22 1212.63 L1340.8 1212.63 L1341.39 1212.63 L1341.98 1212.63 L1342.56 1212.63 L1343.15 1212.63 L1343.74 1212.63 L1344.32 1212.63 L1344.91 1212.63 L1345.5 1212.63 L1346.08 1212.63 L1346.67 1212.63 L1347.26 1212.63 L1347.84 1212.63 L1348.43 1212.63 L1349.01 1212.63 L1349.6 1212.63 L1350.19 1212.63 L1350.77 1212.63 L1351.36 1212.63 L1351.95 1212.63 L1352.53 1212.63 L1353.12 1212.63 L1353.71 1212.63 L1354.29 1212.63 L1354.88 1212.63 L1355.47 1212.63 L1356.05 1212.63 L1356.64 1212.63 L1357.22 1212.63 L1357.81 1212.63 L1358.4 1212.63 L1358.98 1212.63 L1359.57 1212.63 L1360.16 1212.63 L1360.74 1212.63 L1361.33 1212.63 L1361.92 1212.63 L1362.5 1212.63 L1363.09 1212.63 L1363.68 1212.63 L1364.26 1212.63 L1364.85 1212.63 L1365.43 1212.63 L1366.02 1212.63 L1366.61 1212.63 L1367.19 1212.63 L1367.78 1212.63 L1368.37 1212.63 L1368.95 1212.63 L1369.54 1212.63 L1370.13 1212.63 L1370.71 1212.63 L1371.3 1212.63 L1371.88 1212.63 L1372.47 1212.63 L1373.06 1212.63 L1373.64 1212.63 L1374.23 1212.63 L1374.82 1212.63 L1375.4 1212.63 L1375.99 1212.63 L1376.58 1212.63 L1377.16 1212.63 L1377.75 1212.63 L1378.34 1212.63 L1378.92 1212.63 L1379.51 1212.63 L1380.09 1212.63 L1380.68 1212.63 L1381.27 1212.63 L1381.85 1212.63 L1382.44 1212.63 L1383.03 1212.63 L1383.61 1212.63 L1384.2 1212.63 L1384.79 1212.63 L1385.37 1212.63 L1385.96 1212.63 L1386.55 1212.63 L1387.13 1212.63 L1387.72 1212.63 L1388.3 1212.63 L1388.89 1212.63 L1389.48 1212.63 L1390.06 1212.63 L1390.65 1212.63 L1391.24 1212.63 L1391.82 1212.63 L1392.41 1212.63 L1393 1212.63 L1393.58 1212.63 L1394.17 1212.63 L1394.75 1212.63 L1395.34 1212.63 L1395.93 1212.63 L1396.51 1212.63 L1397.1 1212.63 L1397.69 1212.63 L1398.27 1212.63 L1398.86 1212.63 L1399.45 1212.63 L1400.03 1212.63 L1400.62 1212.63 L1401.21 1212.63 L1401.79 1212.63 L1402.38 1212.63 L1402.96 1212.63 L1403.55 1212.63 L1404.14 1212.63 L1404.72 1212.63 L1405.31 1212.63 L1405.9 1212.63 L1406.48 1212.63 L1407.07 1212.63 L1407.66 1212.63 L1408.24 1212.63 L1408.83 1212.63 L1409.42 1212.63 L1410 1212.63 L1410.59 1212.63 L1411.17 1212.63 L1411.76 1212.63 L1412.35 1212.63 L1412.93 1212.63 L1413.52 1212.63 L1414.11 1212.63 L1414.69 1212.63 L1415.28 1212.63 L1415.87 1212.63 L1416.45 1212.63 L1417.04 1212.63 L1417.63 1212.63 L1418.21 1212.63 L1418.8 1212.63 L1419.38 1212.63 L1419.97 1212.63 L1420.56 1212.63 L1421.14 1212.63 L1421.73 1212.63 L1422.32 1212.63 L1422.9 1212.63 L1423.49 1212.63 L1424.08 1212.63 L1424.66 1212.63 L1425.25 1212.63 L1425.83 1212.63 L1426.42 1212.63 L1427.01 1212.63 L1427.59 1212.63 L1428.18 1212.63 L1428.77 1212.63 L1429.35 1212.63 L1429.94 1212.63 L1430.53 1212.63 L1431.11 1212.63 L1431.7 1212.63 L1432.29 1212.63 L1432.87 1212.63 L1433.46 1212.63 L1434.04 1212.63 L1434.63 1212.63 L1435.22 1212.63 L1435.8 1212.63 L1436.39 1212.63 L1436.98 1212.63 L1437.56 1212.63 L1438.15 1212.63 L1438.74 1212.63 L1439.32 1212.63 L1439.91 1212.63 L1440.5 1212.63 L1441.08 1212.63 L1441.67 1212.63 L1442.25 1212.63 L1442.84 1212.63 L1443.43 1212.63 L1444.01 1212.63 L1444.6 1212.63 L1445.19 1212.63 L1445.77 1212.63 L1446.36 1212.63 L1446.95 1212.63 L1447.53 1212.63 L1448.12 1212.63 L1448.7 1212.63 L1449.29 1212.63 L1449.88 1212.63 L1450.46 1212.63 L1451.05 1212.63 L1451.64 1212.63 L1452.22 1212.63 L1452.81 1212.63 L1453.4 1212.63 L1453.98 1212.63 L1454.57 1212.63 L1455.16 1212.63 L1455.74 1212.63 L1456.33 1212.63 L1456.91 1212.63 L1457.5 1212.63 L1458.09 1212.63 L1458.67 1212.63 L1459.26 1212.63 L1459.85 1212.63 L1460.43 1212.63 L1461.02 1212.63 L1461.61 1212.63 L1462.19 1212.63 L1462.78 1212.63 L1463.37 1212.63 L1463.95 1212.63 L1464.54 1212.63 L1465.12 1212.63 L1465.71 1212.63 L1466.3 1212.63 L1466.88 1212.63 L1467.47 1212.63 L1468.06 1212.63 L1468.64 1212.63 L1469.23 1212.63 L1469.82 1212.63 L1470.4 1212.63 L1470.99 1212.63 L1471.57 1212.63 L1472.16 1212.63 L1472.75 1212.63 L1473.33 1212.63 L1473.92 1212.63 L1474.51 1212.63 L1475.09 1212.63 L1475.68 1212.63 L1476.27 1212.63 L1476.85 1212.63 L1477.44 1212.63 L1478.03 1212.63 L1478.61 1212.63 L1479.2 1212.63 L1479.78 1212.63 L1480.37 1212.63 L1480.96 1212.63 L1481.54 1212.63 L1482.13 1212.63 L1482.72 1212.63 L1483.3 1212.63 L1483.89 1212.63 L1484.48 1212.63 L1485.06 1212.63 L1485.65 1212.63 L1486.24 1212.63 L1486.82 1212.63 L1487.41 1212.63 L1487.99 1212.63 L1488.58 1212.63 L1489.17 1212.63 L1489.75 1212.63 L1490.34 1212.63 L1490.93 1212.63 L1491.51 1212.63 L1492.1 1212.63 L1492.69 1212.63 L1493.27 1212.63 L1493.86 1212.63 L1494.45 1212.63 L1495.03 1212.63 L1495.62 1212.63 L1496.2 1212.63 L1496.79 1212.63 L1497.38 1212.63 L1497.96 1212.63 L1498.55 1212.63 L1499.14 1212.63 L1499.72 1212.63 L1500.31 1212.63 L1500.9 1212.63 L1501.48 1212.63 L1502.07 1212.63 L1502.65 1212.63 L1503.24 1212.63 L1503.83 1212.63 L1504.41 1212.63 L1505 1212.63 L1505.59 1212.63 L1506.17 1212.63 L1506.76 1212.63 L1507.35 1212.63 L1507.93 1212.63 L1508.52 1212.63 L1509.11 1212.63 L1509.69 1212.63 L1510.28 1212.63 L1510.86 1212.63 L1511.45 1212.63 L1512.04 1212.63 L1512.62 1212.63 L1513.21 1212.63 L1513.8 1212.63 L1514.38 1212.63 L1514.97 1212.63 L1515.56 1212.63 L1516.14 1212.63 L1516.73 1212.63 L1517.32 1212.63 L1517.9 1212.63 L1518.49 1212.63 L1519.07 1212.63 L1519.66 1212.63 L1520.25 1212.63 L1520.83 1212.63 L1521.42 1212.63 L1522.01 1212.63 L1522.59 1212.63 L1523.18 1212.63 L1523.77 1212.63 L1524.35 1212.63 L1524.94 1212.63 L1525.52 1212.63 L1526.11 1212.63 L1526.7 1212.63 L1527.28 1212.63 L1527.87 1212.63 L1528.46 1212.63 L1529.04 1212.63 L1529.63 1212.63 L1530.22 1212.63 L1530.8 1212.63 L1531.39 1212.63 L1531.98 1212.63 L1532.56 1212.63 L1533.15 1212.63 L1533.73 1212.63 L1534.32 1212.63 L1534.91 1212.63 L1535.49 1212.63 L1536.08 1212.63 L1536.67 1212.63 L1537.25 1212.63 L1537.84 1212.63 L1538.43 1212.63 L1539.01 1212.63 L1539.6 1212.63 L1540.19 1212.63 L1540.77 1212.63 L1541.36 1212.63 L1541.94 1212.63 L1542.53 1212.63 L1543.12 1212.63 L1543.7 1212.63 L1544.29 1212.63 L1544.88 1212.63 L1545.46 1212.63 L1546.05 1212.63 L1546.64 1212.63 L1547.22 1212.63 L1547.81 1212.63 L1548.4 1212.63 L1548.98 1212.63 L1549.57 1212.63 L1550.15 1212.63 L1550.74 1212.63 L1551.33 1212.63 L1551.91 1212.63 L1552.5 1212.63 L1553.09 1212.63 L1553.67 1212.63 L1554.26 1212.63 L1554.85 1212.63 L1555.43 1212.63 L1556.02 1212.63 L1556.6 1212.63 L1557.19 1212.63 L1557.78 1212.63 L1558.36 1212.63 L1558.95 1212.63 L1559.54 1212.63 L1560.12 1212.63 L1560.71 1212.63 L1561.3 1212.63 L1561.88 1212.63 L1562.47 1212.63 L1563.06 1212.63 L1563.64 1212.63 L1564.23 1212.63 L1564.81 1212.63 L1565.4 1212.63 L1565.99 1212.63 L1566.57 1212.63 L1567.16 1212.63 L1567.75 1212.63 L1568.33 1212.63 L1568.92 1212.63 L1569.51 1212.63 L1570.09 1212.63 L1570.68 1212.63 L1571.27 1212.63 L1571.85 1212.63 L1572.44 1212.63 L1573.02 1212.63 L1573.61 1212.63 L1574.2 1212.63 L1574.78 1212.63 L1575.37 1212.63 L1575.96 1212.63 L1576.54 1212.63 L1577.13 1212.63 L1577.72 1212.63 L1578.3 1212.63 L1578.89 1212.63 L1579.47 1212.63 L1580.06 1212.63 L1580.65 1212.63 L1581.23 1212.63 L1581.82 1212.63 L1582.41 1212.63 L1582.99 1212.63 L1583.58 1212.63 L1584.17 1212.63 L1584.75 1212.63 L1585.34 1212.63 L1585.93 1212.63 L1586.51 1212.63 L1587.1 1212.63 L1587.68 1212.63 L1588.27 1212.63 L1588.86 1212.63 L1589.44 1212.63 L1590.03 1212.63 L1590.62 1212.63 L1591.2 1212.63 L1591.79 1212.63 L1592.38 1212.63 L1592.96 1212.63 L1593.55 1212.63 L1594.14 1212.63 L1594.72 1212.63 L1595.31 1212.63 L1595.89 1212.63 L1596.48 1212.63 L1597.07 1212.63 L1597.65 1212.63 L1598.24 1212.63 L1598.83 1212.63 L1599.41 1212.63 L1600 1212.63 L1600.59 1212.63 L1601.17 1212.63 L1601.76 1212.63 L1602.34 1212.63 L1602.93 1212.63 L1603.52 1212.63 L1604.1 1212.63 L1604.69 1212.63 L1605.28 1212.63 L1605.86 1212.63 L1606.45 1212.63 L1607.04 1212.63 L1607.62 1212.63 L1608.21 1212.63 L1608.8 1212.63 L1609.38 1212.63 L1609.97 1212.63 L1610.55 1212.63 L1611.14 1212.63 L1611.73 1212.63 L1612.31 1212.63 L1612.9 1212.63 L1613.49 1212.63 L1614.07 1212.63 L1614.66 1212.63 L1615.25 1212.63 L1615.83 1212.63 L1616.42 1212.63 L1617.01 1212.63 L1617.59 1212.63 L1618.18 1212.63 L1618.76 1212.63 L1619.35 1212.63 L1619.94 1212.63 L1620.52 1212.63 L1621.11 1212.63 L1621.7 1212.63 L1622.28 1212.63 L1622.87 1212.63 L1623.46 1212.63 L1624.04 1212.63 L1624.63 1212.63 L1625.22 1212.63 L1625.8 1212.63 L1626.39 1212.63 L1626.97 1212.63 L1627.56 1212.63 L1628.15 1212.63 L1628.73 1212.63 L1629.32 1212.63 L1629.91 1212.63 L1630.49 1212.63 L1631.08 1212.63 L1631.67 1212.63 L1632.25 1212.63 L1632.84 1212.63 L1633.42 1212.63 L1634.01 1212.63 L1634.6 1212.63 L1635.18 1212.63 L1635.77 1212.63 L1636.36 1212.63 L1636.94 1212.63 L1637.53 1212.63 L1638.12 1212.63 L1638.7 1212.63 L1639.29 1212.63 L1639.88 1212.63 L1640.46 1212.63 L1641.05 1212.63 L1641.63 1212.63 L1642.22 1212.63 L1642.81 1212.63 L1643.39 1212.63 L1643.98 1212.63 L1644.57 1212.63 L1645.15 1212.63 L1645.74 1212.63 L1646.33 1212.63 L1646.91 1212.63 L1647.5 1212.63 L1648.09 1212.63 L1648.67 1212.63 L1649.26 1212.63 L1649.84 1212.63 L1650.43 1212.63 L1651.02 1212.63 L1651.6 1212.63 L1652.19 1212.63 L1652.78 1212.63 L1653.36 1212.63 L1653.95 1212.63 L1654.54 1212.63 L1655.12 1212.63 L1655.71 1212.63 L1656.29 1212.63 L1656.88 1212.63 L1657.47 1212.63 L1658.05 1212.63 L1658.64 1212.63 L1659.23 1212.63 L1659.81 1212.63 L1660.4 1212.63 L1660.99 1212.63 L1661.57 1212.63 L1662.16 1212.63 L1662.75 1212.63 L1663.33 1212.63 L1663.92 1212.63 L1664.5 1212.63 L1665.09 1212.63 L1665.68 1212.63 L1666.26 1212.63 L1666.85 1212.63 L1667.44 1212.63 L1668.02 1212.63 L1668.61 1212.63 L1669.2 1212.63 L1669.78 1212.63 L1670.37 1212.63 L1670.96 1212.63 L1671.54 1212.63 L1672.13 1212.63 L1672.71 1212.63 L1673.3 1212.63 L1673.89 1212.63 L1674.47 1212.63 L1675.06 1212.63 L1675.65 1212.63 L1676.23 1212.63 L1676.82 1212.63 L1677.41 1212.63 L1677.99 1212.63 L1678.58 1212.63 L1679.17 1212.63 L1679.75 1212.63 L1680.34 1212.63 L1680.92 1212.63 L1681.51 1212.63 L1682.1 1212.63 L1682.68 1212.63 L1683.27 1212.63 L1683.86 1212.63 L1684.44 1212.63 L1685.03 1212.63 L1685.62 1212.63 L1686.2 1212.63 L1686.79 1212.63 L1687.37 1212.63 L1687.96 1212.63 L1688.55 1212.63 L1689.13 1212.63 L1689.72 1212.63 L1690.31 1212.63 L1690.89 1212.63 L1691.48 1212.63 L1692.07 1212.63 L1692.65 1212.63 L1693.24 1212.63 L1693.83 1212.63 L1694.41 1212.63 L1695 1212.63 L1695.58 1212.63 L1696.17 1212.63 L1696.76 1212.63 L1697.34 1212.63 L1697.93 1212.63 L1698.52 1212.63 L1699.1 1212.63 L1699.69 1212.63 L1700.28 1212.63 L1700.86 1212.63 L1701.45 1212.63 L1702.04 1212.63 L1702.62 1212.63 L1703.21 1212.63 L1703.79 1212.63 L1704.38 1212.63 L1704.97 1212.63 L1705.55 1212.63 L1706.14 1212.63 L1706.73 1212.63 L1707.31 1212.63 L1707.9 1212.63 L1708.49 1212.63 L1709.07 1212.63 L1709.66 1212.63 L1710.24 1212.63 L1710.83 1212.63 L1711.42 1212.63 L1712 1212.63 L1712.59 1212.63 L1713.18 1212.63 L1713.76 1212.63 L1714.35 1212.63 L1714.94 1212.63 L1715.52 1212.63 L1716.11 1212.63 L1716.7 1212.63 L1717.28 1212.63 L1717.87 1212.63 L1718.45 1212.63 L1719.04 1212.63 L1719.63 1212.63 L1720.21 1212.63 L1720.8 1212.63 L1721.39 1212.63 L1721.97 1212.63 L1722.56 1212.63 L1723.15 1212.63 L1723.73 1212.63 L1724.32 1212.63 L1724.91 1212.63 L1725.49 1212.63 L1726.08 1212.63 L1726.66 1212.63 L1727.25 1212.63 L1727.84 1212.63 L1728.42 1212.63 L1729.01 1212.63 L1729.6 1212.63 L1730.18 1212.63 L1730.77 1212.63 L1731.36 1212.63 L1731.94 1212.63 L1732.53 1212.63 L1733.11 1212.63 L1733.7 1212.63 L1734.29 1212.63 L1734.87 1212.63 L1735.46 1212.63 L1736.05 1212.63 L1736.63 1212.63 L1737.22 1212.63 L1737.81 1212.63 L1738.39 1212.63 L1738.98 1212.63 L1739.57 1212.63 L1740.15 1212.63 L1740.74 1212.63 L1741.32 1212.63 L1741.91 1212.63 L1742.5 1212.63 L1743.08 1212.63 L1743.67 1212.63 L1744.26 1212.63 L1744.84 1212.63 L1745.43 1212.63 L1746.02 1212.63 L1746.6 1212.63 L1747.19 1212.63 L1747.78 1212.63 L1748.36 1212.63 L1748.95 1212.63 L1749.53 1212.63 L1750.12 1212.63 L1750.71 1212.63 L1751.29 1212.63 L1751.88 1212.63 L1752.47 1212.63 L1753.05 1212.63 L1753.64 1212.63 L1754.23 1212.63 L1754.81 1212.63 L1755.4 1212.63 L1755.99 1212.63 L1756.57 1212.63 L1757.16 1212.63 L1757.74 1212.63 L1758.33 1212.63 L1758.92 1212.63 L1759.5 1212.63 L1760.09 1212.63 L1760.68 1212.63 L1761.26 1212.63 L1761.85 1212.63 L1762.44 1212.63 L1763.02 1212.63 L1763.61 1212.63 L1764.19 1212.63 L1764.78 1212.63 L1765.37 1212.63 L1765.95 1212.63 L1766.54 1212.63 L1767.13 1212.63 L1767.71 1212.63 L1768.3 1212.63 L1768.89 1212.63 L1769.47 1212.63 L1770.06 1212.63 L1770.65 1212.63 L1771.23 1212.63 L1771.82 1212.63 L1772.4 1212.63 L1772.99 1212.63 L1773.58 1212.63 L1774.16 1212.63 L1774.75 1212.63 L1775.34 1212.63 L1775.92 1212.63 L1776.51 1212.63 L1777.1 1212.63 L1777.68 1212.63 L1778.27 1212.63 L1778.86 1212.63 L1779.44 1212.63 L1780.03 1212.63 L1780.61 1212.63 L1781.2 1212.63 L1781.79 1212.63 L1782.37 1212.63 L1782.96 1212.63 L1783.55 1212.63 L1784.13 1212.63 L1784.72 1212.63 L1785.31 1212.63 L1785.89 1212.63 L1786.48 1212.63 L1787.06 1212.63 L1787.65 1212.63 L1788.24 1212.63 L1788.82 1212.63 L1789.41 1212.63 L1790 1212.63 L1790.58 1212.63 L1791.17 1212.63 L1791.76 1212.63 L1792.34 1212.63 L1792.93 1212.63 L1793.52 1212.63 L1794.1 1212.63 L1794.69 1212.63 L1795.27 1212.63 L1795.86 1212.63 L1796.45 1212.63 L1797.03 1212.63 L1797.62 1212.63 L1798.21 1212.63 L1798.79 1212.63 L1799.38 1212.63 L1799.97 1212.63 L1800.55 1212.63 L1801.14 1212.63 L1801.73 1212.63 L1802.31 1212.63 L1802.9 1212.63 L1803.48 1212.63 L1804.07 1212.63 L1804.66 1212.63 L1805.24 1212.63 L1805.83 1212.63 L1806.42 1212.63 L1807 1212.63 L1807.59 1212.63 L1808.18 1212.63 L1808.76 1212.63 L1809.35 1212.63 L1809.94 1212.63 L1810.52 1212.63 L1811.11 1212.63 L1811.69 1212.63 L1812.28 1212.63 L1812.87 1212.63 L1813.45 1212.63 L1814.04 1212.63 L1814.63 1212.63 L1815.21 1212.63 L1815.8 1212.63 L1816.39 1212.63 L1816.97 1212.63 L1817.56 1212.63 L1818.14 1212.63 L1818.73 1212.63 L1819.32 1212.63 L1819.9 1212.63 L1820.49 1212.63 L1821.08 1212.63 L1821.66 1212.63 L1822.25 1212.63 L1822.84 1212.63 L1823.42 1212.63 L1824.01 1212.63 L1824.6 1212.63 L1825.18 1212.63 L1825.77 1212.63 L1826.35 1212.63 L1826.94 1212.63 L1827.53 1212.63 L1828.11 1212.63 L1828.7 1212.63 L1829.29 1212.63 L1829.87 1212.63 L1830.46 1212.63 L1831.05 1212.63 L1831.63 1212.63 L1832.22 1212.63 L1832.81 1212.63 L1833.39 1212.63 L1833.98 1212.63 L1834.56 1212.63 L1835.15 1212.63 L1835.74 1212.63 L1836.32 1212.63 L1836.91 1212.63 L1837.5 1212.63 L1838.08 1212.63 L1838.67 1212.63 L1839.26 1212.63 L1839.84 1212.63 L1840.43 1212.63 L1841.01 1212.63 L1841.6 1212.63 L1842.19 1212.63 L1842.77 1212.63 L1843.36 1212.63 L1843.95 1212.63 L1844.53 1212.63 L1845.12 1212.63 L1845.71 1212.63 L1846.29 1212.63 L1846.88 1212.63 L1847.47 1212.63 L1848.05 1212.63 L1848.64 1212.63 L1849.22 1212.63 L1849.81 1212.63 L1850.4 1212.63 L1850.98 1212.63 L1851.57 1212.63 L1852.16 1212.63 L1852.74 1212.63 L1853.33 1212.63 L1853.92 1212.63 L1854.5 1212.63 L1855.09 1212.63 L1855.68 1212.63 L1856.26 1212.63 L1856.85 1212.63 L1857.43 1212.63 L1858.02 1212.63 L1858.61 1212.63 L1859.19 1212.63 L1859.78 1212.63 L1860.37 1212.63 L1860.95 1212.63 L1861.54 1212.63 L1862.13 1212.63 L1862.71 1212.63 L1863.3 1212.63 L1863.88 1212.63 L1864.47 1212.63 L1865.06 1212.63 L1865.64 1212.63 L1866.23 1212.63 L1866.82 1212.63 L1867.4 1212.63 L1867.99 1212.63 L1868.58 1212.63 L1869.16 1212.63 L1869.75 1212.63 L1870.34 1212.63 L1870.92 1212.63 L1871.51 1212.63 L1872.09 1212.63 L1872.68 1212.63 L1873.27 1212.63 L1873.85 1212.63 L1874.44 1212.63 L1875.03 1212.63 L1875.61 1212.63 L1876.2 1212.63 L1876.79 1212.63 L1877.37 1212.63 L1877.96 1212.63 L1878.55 1212.63 L1879.13 1212.63 L1879.72 1212.63 L1880.3 1212.63 L1880.89 1212.63 L1881.48 1212.63 L1882.06 1212.63 L1882.65 1212.63 L1883.24 1212.63 L1883.82 1212.63 L1884.41 1212.63 L1885 1212.63 L1885.58 1212.63 L1886.17 1212.63 L1886.76 1212.63 L1887.34 1212.63 L1887.93 1212.63 L1888.51 1212.63 L1889.1 1212.63 L1889.69 1212.63 L1890.27 1212.63 L1890.86 1212.63 L1891.45 1212.63 L1892.03 1212.63 L1892.62 1212.63 L1893.21 1212.63 L1893.79 1212.63 L1894.38 1212.63 L1894.96 1212.63 L1895.55 1212.63 L1896.14 1212.63 L1896.72 1212.63 L1897.31 1212.63 L1897.9 1212.63 L1898.48 1212.63 L1899.07 1212.63 L1899.66 1212.63 L1900.24 1212.63 L1900.83 1212.63 L1901.42 1212.63 L1902 1212.63 L1902.59 1212.63 L1903.17 1212.63 L1903.76 1212.63 L1904.35 1212.63 L1904.93 1212.63 L1905.52 1212.63 L1906.11 1212.63 L1906.69 1212.63 L1907.28 1212.63 L1907.87 1212.63 L1908.45 1212.63 L1909.04 1212.63 L1909.63 1212.63 L1910.21 1212.63 L1910.8 1212.63 L1911.38 1212.63 L1911.97 1212.63 L1912.56 1212.63 L1913.14 1212.63 L1913.73 1212.63 L1914.32 1212.63 L1914.9 1212.63 L1915.49 1212.63 L1916.08 1212.63 L1916.66 1212.63 L1917.25 1212.63 L1917.83 1212.63 L1918.42 1212.63 L1919.01 1212.63 L1919.59 1212.63 L1920.18 1212.63 L1920.77 1212.63 L1921.35 1212.63 L1921.94 1212.63 L1922.53 1212.63 L1923.11 1212.63 L1923.7 1212.63 L1924.29 1212.63 L1924.87 1212.63 L1925.46 1212.63 L1926.04 1212.63 L1926.63 1212.63 L1927.22 1212.63 L1927.8 1212.63 L1928.39 1212.63 L1928.98 1212.63 L1929.56 1212.63 L1930.15 1212.63 L1930.74 1212.63 L1931.32 1212.63 L1931.91 1212.63 L1932.5 1212.63 L1933.08 1212.63 L1933.67 1212.63 L1934.25 1212.63 L1934.84 1212.63 L1935.43 1212.63 L1936.01 1212.63 L1936.6 1212.63 L1937.19 1212.63 L1937.77 1212.63 L1938.36 1212.63 L1938.95 1212.63 L1939.53 1212.63 L1940.12 1212.63 L1940.71 1212.63 L1941.29 1212.63 L1941.88 1212.63 L1942.46 1212.63 L1943.05 1212.63 L1943.64 1212.63 L1944.22 1212.63 L1944.81 1212.63 L1945.4 1212.63 L1945.98 1212.63 L1946.57 1212.63 L1947.16 1212.63 L1947.74 1212.63 L1948.33 1212.63 L1948.91 1212.63 L1949.5 1212.63 L1950.09 1212.63 L1950.67 1212.63 L1951.26 1212.63 L1951.85 1212.63 L1952.43 1212.63 L1953.02 1212.63 L1953.61 1212.63 L1954.19 1212.63 L1954.78 1212.63 L1955.37 1212.63 L1955.95 1212.63 L1956.54 1212.63 L1957.12 1212.63 L1957.71 1212.63 L1958.3 1212.63 L1958.88 1212.63 L1959.47 1212.63 L1960.06 1212.63 L1960.64 1212.63 L1961.23 1212.63 L1961.82 1212.63 L1962.4 1212.63 L1962.99 1212.63 L1963.58 1212.63 L1964.16 1212.63 L1964.75 1212.63 L1965.33 1212.63 L1965.92 1212.63 L1966.51 1212.63 L1967.09 1212.63 L1967.68 1212.63 L1968.27 1212.63 L1968.85 1212.63 L1969.44 1212.63 L1970.03 1212.63 L1970.61 1212.63 L1971.2 1212.63 L1971.78 1212.63 L1972.37 1212.63 L1972.96 1212.63 L1973.54 1212.63 L1974.13 1212.63 L1974.72 1212.63 L1975.3 1212.63 L1975.89 1212.63 L1976.48 1212.63 L1977.06 1212.63 L1977.65 1212.63 L1978.24 1212.63 L1978.82 1212.63 L1979.41 1212.63 L1979.99 1212.63 L1980.58 1212.63 L1981.17 1212.63 L1981.75 1212.63 L1982.34 1212.63 L1982.93 1212.63 L1983.51 1212.63 L1984.1 1212.63 L1984.69 1212.63 L1985.27 1212.63 L1985.86 1212.63 L1986.45 1212.63 L1987.03 1212.63 L1987.62 1212.63 L1988.2 1212.63 L1988.79 1212.63 L1989.38 1212.63 L1989.96 1212.63 L1990.55 1212.63 L1991.14 1212.63 L1991.72 1212.63 L1992.31 1212.63 L1992.9 1212.63 L1993.48 1212.63 L1994.07 1212.63 L1994.65 1212.63 L1995.24 1212.63 L1995.83 1212.63 L1996.41 1212.63 L1997 1212.63 L1997.59 1212.63 L1998.17 1212.63 L1998.76 1212.63 L1999.35 1212.63 L1999.93 1212.63 L2000.52 1212.63 L2001.11 1212.63 L2001.69 1212.63 L2002.28 1212.63 L2002.86 1212.63 L2003.45 1212.63 L2004.04 1212.63 L2004.62 1212.63 L2005.21 1212.63 L2005.8 1212.63 L2006.38 1212.63 L2006.97 1212.63 L2007.56 1212.63 L2008.14 1212.63 L2008.73 1212.63 L2009.32 1212.63 L2009.9 1212.63 L2010.49 1212.63 L2011.07 1212.63 L2011.66 1212.63 L2012.25 1212.63 L2012.83 1212.63 L2013.42 1212.63 L2014.01 1212.63 L2014.59 1212.63 L2015.18 1212.63 L2015.77 1212.63 L2016.35 1212.63 L2016.94 1212.63 L2017.53 1212.63 L2018.11 1212.63 L2018.7 1212.63 L2019.28 1212.63 L2019.87 1212.63 L2020.46 1212.63 L2021.04 1212.63 L2021.63 1212.63 L2022.22 1212.63 L2022.8 1212.63 L2023.39 1212.63 L2023.98 1212.63 L2024.56 1212.63 L2025.15 1212.63 L2025.73 1212.63 L2026.32 1212.63 L2026.91 1212.63 L2027.49 1212.63 L2028.08 1212.63 L2028.67 1212.63 L2029.25 1212.63 L2029.84 1212.63 L2030.43 1212.63 L2031.01 1212.63 L2031.6 1212.63 L2032.19 1212.63 L2032.77 1212.63 L2033.36 1212.63 L2033.94 1212.63 L2034.53 1212.63 L2035.12 1212.63 L2035.7 1212.63 L2036.29 1212.63 L2036.88 1212.63 L2037.46 1212.63 L2038.05 1212.63 L2038.64 1212.63 L2039.22 1212.63 L2039.81 1212.63 L2040.4 1212.63 L2040.98 1212.63 L2041.57 1212.63 L2042.15 1212.63 L2042.74 1212.63 L2043.33 1212.63 L2043.91 1212.63 L2044.5 1212.63 L2045.09 1212.63 L2045.67 1212.63 L2046.26 1212.63 L2046.85 1212.63 L2047.43 1212.63 L2048.02 1212.63 L2048.6 1212.63 L2049.19 1212.63 L2049.78 1212.63 L2050.36 1212.63 L2050.95 1212.63 L2051.54 1212.63 L2052.12 1212.63 L2052.71 1212.63 L2053.3 1212.63 L2053.88 1212.63 L2054.47 1212.63 L2055.06 1212.63 L2055.64 1212.63 L2056.23 1212.63 L2056.81 1212.63 L2057.4 1212.63 L2057.99 1212.63 L2058.57 1212.63 L2059.16 1212.63 L2059.75 1212.63 L2060.33 1212.63 L2060.92 1212.63 L2061.51 1212.63 L2062.09 1212.63 L2062.68 1212.63 L2063.27 1212.63 L2063.85 1212.63 L2064.44 1212.63 L2065.02 1212.63 L2065.61 1212.63 L2066.2 1212.63 L2066.78 1212.63 L2067.37 1212.63 L2067.96 1212.63 L2068.54 1212.63 L2069.13 1212.63 L2069.72 1212.63 L2070.3 1212.63 L2070.89 1212.63 L2071.48 1212.63 L2072.06 1212.63 L2072.65 1212.63 L2073.23 1212.63 L2073.82 1212.63 L2074.41 1212.63 L2074.99 1212.63 L2075.58 1212.63 L2076.17 1212.63 L2076.75 1212.63 L2077.34 1212.63 L2077.93 1212.63 L2078.51 1212.63 L2079.1 1212.63 L2079.68 1212.63 L2080.27 1212.63 L2080.86 1212.63 L2081.44 1212.63 L2082.03 1212.63 L2082.62 1212.63 L2083.2 1212.63 L2083.79 1212.63 L2084.38 1212.63 L2084.96 1212.63 L2085.55 1212.63 L2086.14 1212.63 L2086.72 1212.63 L2087.31 1212.63 L2087.89 1212.63 L2088.48 1212.63 L2089.07 1212.63 L2089.65 1212.63 L2090.24 1212.63 L2090.83 1212.63 L2091.41 1212.63 L2092 1212.63 L2092.59 1212.63 L2093.17 1212.63 L2093.76 1212.63 L2094.35 1212.63 L2094.93 1212.63 L2095.52 1212.63 L2096.1 1212.63 L2096.69 1212.63 L2097.28 1212.63 L2097.86 1212.63 L2098.45 1212.63 L2099.04 1212.63 L2099.62 1212.63 L2100.21 1212.63 L2100.8 1212.63 L2101.38 1212.63 L2101.97 1212.63 L2102.55 1212.63 L2103.14 1212.63 L2103.73 1212.63 L2104.31 1212.63 L2104.9 1212.63 L2105.49 1212.63 L2106.07 1212.63 L2106.66 1212.63 L2107.25 1212.63 L2107.83 1212.63 L2108.42 1212.63 L2109.01 1212.63 L2109.59 1212.63 L2110.18 1212.63 L2110.76 1212.63 L2111.35 1212.63 L2111.94 1212.63 L2112.52 1212.63 L2113.11 1212.63 L2113.7 1212.63 L2114.28 1212.63 L2114.87 1212.63 L2115.46 1212.63 L2116.04 1212.63 L2116.63 1212.63 L2117.22 1212.63 L2117.8 1212.63 L2118.39 1212.63 L2118.97 1212.63 L2119.56 1212.63 L2120.15 1212.63 L2120.73 1212.63 L2121.32 1212.63 L2121.91 1212.63 L2122.49 1212.63 L2123.08 1212.63 L2123.67 1212.63 L2124.25 1212.63 L2124.84 1212.63 L2125.42 1212.63 L2126.01 1212.63 L2126.6 1212.63 L2127.18 1212.63 L2127.77 1212.63 L2128.36 1212.63 L2128.94 1212.63 L2129.53 1212.63 L2130.12 1212.63 L2130.7 1212.63 L2131.29 1212.63 L2131.88 1212.63 L2132.46 1212.63 L2133.05 1212.63 L2133.63 1212.63 L2134.22 1212.63 L2134.81 1212.63 L2135.39 1212.63 L2135.98 1212.63 L2136.57 1212.63 L2137.15 1212.63 L2137.74 1212.63 L2138.33 1212.63 L2138.91 1212.63 L2139.5 1212.63 L2140.09 1212.63 L2140.67 1212.63 L2141.26 1212.63 L2141.84 1212.63 L2142.43 1212.63 L2143.02 1212.63 L2143.6 1212.63 L2144.19 1212.63 L2144.78 1212.63 L2145.36 1212.63 L2145.95 1212.63 L2146.54 1212.63 L2147.12 1212.63 L2147.71 1212.63 L2148.3 1212.63 L2148.88 1212.63 L2149.47 1212.63 L2150.05 1212.63 L2150.64 1212.63 L2151.23 1212.63 L2151.81 1212.63 L2152.4 1212.63 L2152.99 1212.63 L2153.57 1212.63 L2154.16 1212.63 L2154.75 1212.63 L2155.33 1212.63 L2155.92 1212.63 L2156.5 1212.63 L2157.09 1212.63 L2157.68 1212.63 L2158.26 1212.63 L2158.26 1211.9 L2157.68 1211.9 L2157.09 1211.9 L2156.5 1211.9 L2155.92 1211.9 L2155.33 1211.9 L2154.75 1211.9 L2154.16 1211.9 L2153.57 1211.9 L2152.99 1211.9 L2152.4 1211.9 L2151.81 1211.9 L2151.23 1211.9 L2150.64 1211.9 L2150.05 1211.9 L2149.47 1211.9 L2148.88 1211.9 L2148.3 1211.9 L2147.71 1211.9 L2147.12 1211.9 L2146.54 1211.9 L2145.95 1211.9 L2145.36 1211.9 L2144.78 1211.9 L2144.19 1211.9 L2143.6 1211.9 L2143.02 1211.9 L2142.43 1211.9 L2141.84 1211.9 L2141.26 1211.9 L2140.67 1211.9 L2140.09 1211.9 L2139.5 1211.9 L2138.91 1211.9 L2138.33 1211.9 L2137.74 1211.9 L2137.15 1211.9 L2136.57 1211.9 L2135.98 1211.9 L2135.39 1211.9 L2134.81 1211.9 L2134.22 1211.9 L2133.63 1211.9 L2133.05 1211.9 L2132.46 1211.9 L2131.88 1211.9 L2131.29 1211.9 L2130.7 1211.9 L2130.12 1211.9 L2129.53 1211.9 L2128.94 1211.9 L2128.36 1211.9 L2127.77 1211.9 L2127.18 1211.9 L2126.6 1211.9 L2126.01 1211.9 L2125.42 1211.9 L2124.84 1211.9 L2124.25 1211.9 L2123.67 1211.9 L2123.08 1211.9 L2122.49 1211.9 L2121.91 1211.9 L2121.32 1211.9 L2120.73 1211.9 L2120.15 1211.9 L2119.56 1211.9 L2118.97 1211.9 L2118.39 1211.9 L2117.8 1211.9 L2117.22 1211.9 L2116.63 1211.9 L2116.04 1211.9 L2115.46 1211.9 L2114.87 1211.9 L2114.28 1211.9 L2113.7 1211.9 L2113.11 1211.9 L2112.52 1211.9 L2111.94 1211.9 L2111.35 1211.9 L2110.76 1211.9 L2110.18 1211.9 L2109.59 1211.9 L2109.01 1211.9 L2108.42 1211.9 L2107.83 1211.9 L2107.25 1211.9 L2106.66 1211.9 L2106.07 1211.9 L2105.49 1211.9 L2104.9 1211.9 L2104.31 1211.9 L2103.73 1211.9 L2103.14 1211.9 L2102.55 1211.9 L2101.97 1211.9 L2101.38 1211.9 L2100.8 1211.9 L2100.21 1211.9 L2099.62 1211.9 L2099.04 1211.9 L2098.45 1211.9 L2097.86 1211.9 L2097.28 1211.9 L2096.69 1211.9 L2096.1 1211.9 L2095.52 1211.9 L2094.93 1211.9 L2094.35 1211.9 L2093.76 1211.9 L2093.17 1211.9 L2092.59 1211.9 L2092 1211.9 L2091.41 1211.9 L2090.83 1211.9 L2090.24 1211.9 L2089.65 1211.9 L2089.07 1211.9 L2088.48 1211.9 L2087.89 1211.9 L2087.31 1211.9 L2086.72 1211.9 L2086.14 1211.9 L2085.55 1211.9 L2084.96 1211.9 L2084.38 1211.9 L2083.79 1211.9 L2083.2 1211.9 L2082.62 1211.9 L2082.03 1211.9 L2081.44 1211.9 L2080.86 1211.9 L2080.27 1211.9 L2079.68 1211.9 L2079.1 1211.9 L2078.51 1211.9 L2077.93 1211.9 L2077.34 1211.9 L2076.75 1211.9 L2076.17 1211.9 L2075.58 1211.9 L2074.99 1211.9 L2074.41 1211.9 L2073.82 1211.9 L2073.23 1211.9 L2072.65 1211.9 L2072.06 1211.9 L2071.48 1211.9 L2070.89 1211.9 L2070.3 1211.9 L2069.72 1211.9 L2069.13 1211.9 L2068.54 1211.9 L2067.96 1211.9 L2067.37 1211.9 L2066.78 1211.9 L2066.2 1211.9 L2065.61 1211.9 L2065.02 1211.9 L2064.44 1211.9 L2063.85 1211.9 L2063.27 1211.9 L2062.68 1211.9 L2062.09 1211.9 L2061.51 1211.9 L2060.92 1211.9 L2060.33 1211.9 L2059.75 1211.9 L2059.16 1211.9 L2058.57 1211.9 L2057.99 1211.9 L2057.4 1211.9 L2056.81 1211.9 L2056.23 1211.9 L2055.64 1211.9 L2055.06 1211.9 L2054.47 1211.9 L2053.88 1211.9 L2053.3 1211.9 L2052.71 1211.9 L2052.12 1211.9 L2051.54 1211.9 L2050.95 1211.9 L2050.36 1211.9 L2049.78 1211.9 L2049.19 1211.9 L2048.6 1211.9 L2048.02 1211.9 L2047.43 1211.9 L2046.85 1211.9 L2046.26 1211.9 L2045.67 1211.9 L2045.09 1211.9 L2044.5 1211.9 L2043.91 1211.9 L2043.33 1211.9 L2042.74 1211.9 L2042.15 1211.9 L2041.57 1211.9 L2040.98 1211.9 L2040.4 1211.9 L2039.81 1211.9 L2039.22 1211.9 L2038.64 1211.9 L2038.05 1211.9 L2037.46 1211.9 L2036.88 1211.9 L2036.29 1211.9 L2035.7 1211.9 L2035.12 1211.9 L2034.53 1211.9 L2033.94 1211.9 L2033.36 1211.9 L2032.77 1211.9 L2032.19 1211.9 L2031.6 1211.9 L2031.01 1211.9 L2030.43 1211.9 L2029.84 1211.9 L2029.25 1211.9 L2028.67 1211.9 L2028.08 1211.9 L2027.49 1211.9 L2026.91 1211.9 L2026.32 1211.9 L2025.73 1211.9 L2025.15 1211.9 L2024.56 1211.9 L2023.98 1211.9 L2023.39 1211.9 L2022.8 1211.9 L2022.22 1211.9 L2021.63 1211.9 L2021.04 1211.9 L2020.46 1211.9 L2019.87 1211.9 L2019.28 1211.9 L2018.7 1211.9 L2018.11 1211.9 L2017.53 1211.9 L2016.94 1211.9 L2016.35 1211.9 L2015.77 1211.9 L2015.18 1211.9 L2014.59 1211.9 L2014.01 1211.9 L2013.42 1211.9 L2012.83 1211.9 L2012.25 1211.9 L2011.66 1211.9 L2011.07 1211.9 L2010.49 1211.9 L2009.9 1211.9 L2009.32 1211.9 L2008.73 1211.9 L2008.14 1211.9 L2007.56 1211.9 L2006.97 1211.9 L2006.38 1211.9 L2005.8 1211.9 L2005.21 1211.9 L2004.62 1211.9 L2004.04 1211.9 L2003.45 1211.9 L2002.86 1211.9 L2002.28 1211.9 L2001.69 1211.9 L2001.11 1211.9 L2000.52 1211.9 L1999.93 1211.9 L1999.35 1211.9 L1998.76 1211.9 L1998.17 1211.9 L1997.59 1211.9 L1997 1211.9 L1996.41 1211.9 L1995.83 1211.9 L1995.24 1211.9 L1994.65 1211.9 L1994.07 1211.9 L1993.48 1211.9 L1992.9 1211.9 L1992.31 1211.9 L1991.72 1211.9 L1991.14 1211.9 L1990.55 1211.9 L1989.96 1211.9 L1989.38 1211.9 L1988.79 1211.9 L1988.2 1211.9 L1987.62 1211.9 L1987.03 1211.9 L1986.45 1211.9 L1985.86 1211.9 L1985.27 1211.9 L1984.69 1211.9 L1984.1 1211.9 L1983.51 1211.9 L1982.93 1211.9 L1982.34 1211.9 L1981.75 1211.9 L1981.17 1211.9 L1980.58 1211.9 L1979.99 1211.9 L1979.41 1211.9 L1978.82 1211.9 L1978.24 1211.9 L1977.65 1211.9 L1977.06 1211.9 L1976.48 1211.9 L1975.89 1211.9 L1975.3 1211.9 L1974.72 1211.9 L1974.13 1211.9 L1973.54 1211.9 L1972.96 1211.9 L1972.37 1211.9 L1971.78 1211.9 L1971.2 1211.9 L1970.61 1211.9 L1970.03 1211.9 L1969.44 1211.9 L1968.85 1211.9 L1968.27 1211.9 L1967.68 1211.9 L1967.09 1211.9 L1966.51 1211.9 L1965.92 1211.9 L1965.33 1211.9 L1964.75 1211.9 L1964.16 1211.9 L1963.58 1211.9 L1962.99 1211.9 L1962.4 1211.9 L1961.82 1211.9 L1961.23 1211.9 L1960.64 1211.9 L1960.06 1211.9 L1959.47 1211.9 L1958.88 1211.9 L1958.3 1211.9 L1957.71 1211.9 L1957.12 1211.9 L1956.54 1211.9 L1955.95 1211.9 L1955.37 1211.9 L1954.78 1211.9 L1954.19 1211.9 L1953.61 1211.9 L1953.02 1211.9 L1952.43 1211.9 L1951.85 1211.9 L1951.26 1211.9 L1950.67 1211.9 L1950.09 1211.9 L1949.5 1211.9 L1948.91 1211.9 L1948.33 1211.9 L1947.74 1211.9 L1947.16 1211.9 L1946.57 1211.9 L1945.98 1211.9 L1945.4 1211.9 L1944.81 1211.9 L1944.22 1211.9 L1943.64 1211.9 L1943.05 1211.9 L1942.46 1211.9 L1941.88 1211.9 L1941.29 1211.9 L1940.71 1211.9 L1940.12 1211.9 L1939.53 1211.9 L1938.95 1211.9 L1938.36 1211.9 L1937.77 1211.9 L1937.19 1211.9 L1936.6 1211.9 L1936.01 1211.9 L1935.43 1211.9 L1934.84 1211.9 L1934.25 1211.9 L1933.67 1211.9 L1933.08 1211.9 L1932.5 1211.9 L1931.91 1211.9 L1931.32 1211.9 L1930.74 1211.9 L1930.15 1211.9 L1929.56 1211.9 L1928.98 1211.9 L1928.39 1211.9 L1927.8 1211.9 L1927.22 1211.9 L1926.63 1211.9 L1926.04 1211.9 L1925.46 1211.9 L1924.87 1211.9 L1924.29 1211.9 L1923.7 1211.9 L1923.11 1211.9 L1922.53 1211.9 L1921.94 1211.9 L1921.35 1211.9 L1920.77 1211.9 L1920.18 1211.9 L1919.59 1211.9 L1919.01 1211.9 L1918.42 1211.9 L1917.83 1211.9 L1917.25 1211.9 L1916.66 1211.9 L1916.08 1211.9 L1915.49 1211.9 L1914.9 1211.9 L1914.32 1211.9 L1913.73 1211.9 L1913.14 1211.9 L1912.56 1211.9 L1911.97 1211.9 L1911.38 1211.9 L1910.8 1211.9 L1910.21 1211.9 L1909.63 1211.9 L1909.04 1211.9 L1908.45 1211.9 L1907.87 1211.9 L1907.28 1211.9 L1906.69 1211.9 L1906.11 1211.9 L1905.52 1211.9 L1904.93 1211.9 L1904.35 1211.9 L1903.76 1211.9 L1903.17 1211.9 L1902.59 1211.9 L1902 1211.9 L1901.42 1211.9 L1900.83 1211.9 L1900.24 1211.9 L1899.66 1211.9 L1899.07 1211.9 L1898.48 1211.9 L1897.9 1211.9 L1897.31 1211.9 L1896.72 1211.9 L1896.14 1211.9 L1895.55 1211.9 L1894.96 1211.9 L1894.38 1211.9 L1893.79 1211.9 L1893.21 1211.9 L1892.62 1211.9 L1892.03 1211.9 L1891.45 1211.9 L1890.86 1211.9 L1890.27 1211.9 L1889.69 1211.9 L1889.1 1211.9 L1888.51 1211.9 L1887.93 1211.9 L1887.34 1211.9 L1886.76 1211.9 L1886.17 1211.9 L1885.58 1211.9 L1885 1211.9 L1884.41 1211.9 L1883.82 1211.9 L1883.24 1211.9 L1882.65 1211.9 L1882.06 1211.9 L1881.48 1211.9 L1880.89 1211.9 L1880.3 1211.9 L1879.72 1211.9 L1879.13 1211.9 L1878.55 1211.9 L1877.96 1211.9 L1877.37 1211.9 L1876.79 1211.9 L1876.2 1211.9 L1875.61 1211.9 L1875.03 1211.9 L1874.44 1211.9 L1873.85 1211.9 L1873.27 1211.9 L1872.68 1211.9 L1872.09 1211.9 L1871.51 1211.9 L1870.92 1211.9 L1870.34 1211.9 L1869.75 1211.9 L1869.16 1211.9 L1868.58 1211.9 L1867.99 1211.9 L1867.4 1211.9 L1866.82 1211.9 L1866.23 1211.9 L1865.64 1211.9 L1865.06 1211.9 L1864.47 1211.9 L1863.88 1211.9 L1863.3 1211.9 L1862.71 1211.9 L1862.13 1211.9 L1861.54 1211.9 L1860.95 1211.9 L1860.37 1211.9 L1859.78 1211.9 L1859.19 1211.9 L1858.61 1211.9 L1858.02 1211.9 L1857.43 1211.9 L1856.85 1211.9 L1856.26 1211.9 L1855.68 1211.9 L1855.09 1211.9 L1854.5 1211.9 L1853.92 1211.9 L1853.33 1211.9 L1852.74 1211.9 L1852.16 1211.9 L1851.57 1211.9 L1850.98 1211.9 L1850.4 1211.9 L1849.81 1211.9 L1849.22 1211.9 L1848.64 1211.9 L1848.05 1211.9 L1847.47 1211.9 L1846.88 1211.9 L1846.29 1211.9 L1845.71 1211.9 L1845.12 1211.9 L1844.53 1211.9 L1843.95 1211.9 L1843.36 1211.9 L1842.77 1211.9 L1842.19 1211.9 L1841.6 1211.9 L1841.01 1211.9 L1840.43 1211.9 L1839.84 1211.9 L1839.26 1211.9 L1838.67 1211.9 L1838.08 1211.9 L1837.5 1211.9 L1836.91 1211.9 L1836.32 1211.9 L1835.74 1211.9 L1835.15 1211.9 L1834.56 1211.9 L1833.98 1211.9 L1833.39 1211.9 L1832.81 1211.9 L1832.22 1211.9 L1831.63 1211.9 L1831.05 1211.9 L1830.46 1211.9 L1829.87 1211.9 L1829.29 1211.9 L1828.7 1211.9 L1828.11 1211.9 L1827.53 1211.9 L1826.94 1211.9 L1826.35 1211.9 L1825.77 1211.9 L1825.18 1211.9 L1824.6 1211.9 L1824.01 1211.9 L1823.42 1211.9 L1822.84 1211.9 L1822.25 1211.9 L1821.66 1211.9 L1821.08 1211.9 L1820.49 1211.9 L1819.9 1211.9 L1819.32 1211.9 L1818.73 1211.9 L1818.14 1211.9 L1817.56 1211.9 L1816.97 1211.9 L1816.39 1211.9 L1815.8 1211.9 L1815.21 1211.9 L1814.63 1211.9 L1814.04 1211.9 L1813.45 1211.9 L1812.87 1211.9 L1812.28 1211.9 L1811.69 1211.9 L1811.11 1211.9 L1810.52 1211.9 L1809.94 1211.9 L1809.35 1211.9 L1808.76 1211.9 L1808.18 1211.9 L1807.59 1211.9 L1807 1211.9 L1806.42 1211.9 L1805.83 1211.9 L1805.24 1211.9 L1804.66 1211.9 L1804.07 1211.9 L1803.48 1211.9 L1802.9 1211.9 L1802.31 1211.9 L1801.73 1211.9 L1801.14 1211.9 L1800.55 1211.9 L1799.97 1211.9 L1799.38 1211.9 L1798.79 1211.9 L1798.21 1211.9 L1797.62 1211.9 L1797.03 1211.9 L1796.45 1211.9 L1795.86 1211.9 L1795.27 1211.9 L1794.69 1211.9 L1794.1 1211.9 L1793.52 1211.9 L1792.93 1211.9 L1792.34 1211.9 L1791.76 1211.9 L1791.17 1211.9 L1790.58 1211.9 L1790 1211.9 L1789.41 1211.9 L1788.82 1211.9 L1788.24 1211.9 L1787.65 1211.9 L1787.06 1211.9 L1786.48 1211.9 L1785.89 1211.9 L1785.31 1211.9 L1784.72 1211.9 L1784.13 1211.9 L1783.55 1211.9 L1782.96 1211.9 L1782.37 1211.9 L1781.79 1211.9 L1781.2 1211.9 L1780.61 1211.9 L1780.03 1211.9 L1779.44 1211.9 L1778.86 1211.9 L1778.27 1211.9 L1777.68 1211.9 L1777.1 1211.9 L1776.51 1211.9 L1775.92 1211.9 L1775.34 1211.9 L1774.75 1211.9 L1774.16 1211.9 L1773.58 1211.9 L1772.99 1211.9 L1772.4 1211.9 L1771.82 1211.9 L1771.23 1211.9 L1770.65 1211.9 L1770.06 1211.9 L1769.47 1211.9 L1768.89 1211.9 L1768.3 1211.9 L1767.71 1211.9 L1767.13 1211.9 L1766.54 1211.9 L1765.95 1211.9 L1765.37 1211.9 L1764.78 1211.9 L1764.19 1211.9 L1763.61 1211.9 L1763.02 1211.9 L1762.44 1211.9 L1761.85 1211.9 L1761.26 1211.9 L1760.68 1211.9 L1760.09 1211.9 L1759.5 1211.9 L1758.92 1211.9 L1758.33 1211.9 L1757.74 1211.9 L1757.16 1211.9 L1756.57 1211.9 L1755.99 1211.9 L1755.4 1211.9 L1754.81 1211.9 L1754.23 1211.9 L1753.64 1211.9 L1753.05 1211.9 L1752.47 1211.9 L1751.88 1211.9 L1751.29 1211.9 L1750.71 1211.9 L1750.12 1211.9 L1749.53 1211.9 L1748.95 1211.9 L1748.36 1211.9 L1747.78 1211.9 L1747.19 1211.9 L1746.6 1211.9 L1746.02 1211.9 L1745.43 1211.9 L1744.84 1211.9 L1744.26 1211.9 L1743.67 1211.9 L1743.08 1211.9 L1742.5 1211.9 L1741.91 1211.9 L1741.32 1211.9 L1740.74 1211.9 L1740.15 1211.9 L1739.57 1211.9 L1738.98 1211.9 L1738.39 1211.9 L1737.81 1211.9 L1737.22 1211.9 L1736.63 1211.9 L1736.05 1211.9 L1735.46 1211.9 L1734.87 1211.9 L1734.29 1211.9 L1733.7 1211.9 L1733.11 1211.9 L1732.53 1211.9 L1731.94 1211.9 L1731.36 1211.9 L1730.77 1211.9 L1730.18 1211.9 L1729.6 1211.9 L1729.01 1211.9 L1728.42 1211.9 L1727.84 1211.9 L1727.25 1211.9 L1726.66 1211.9 L1726.08 1211.9 L1725.49 1211.9 L1724.91 1211.9 L1724.32 1211.9 L1723.73 1211.9 L1723.15 1211.9 L1722.56 1211.9 L1721.97 1211.9 L1721.39 1211.9 L1720.8 1211.9 L1720.21 1211.9 L1719.63 1211.9 L1719.04 1211.9 L1718.45 1211.9 L1717.87 1211.9 L1717.28 1211.9 L1716.7 1211.9 L1716.11 1211.9 L1715.52 1211.9 L1714.94 1211.9 L1714.35 1211.9 L1713.76 1211.9 L1713.18 1211.9 L1712.59 1211.9 L1712 1211.9 L1711.42 1211.9 L1710.83 1211.9 L1710.24 1211.9 L1709.66 1211.9 L1709.07 1211.9 L1708.49 1211.9 L1707.9 1211.9 L1707.31 1211.9 L1706.73 1211.9 L1706.14 1211.9 L1705.55 1211.9 L1704.97 1211.9 L1704.38 1211.9 L1703.79 1211.9 L1703.21 1211.9 L1702.62 1211.9 L1702.04 1211.9 L1701.45 1211.9 L1700.86 1211.9 L1700.28 1211.9 L1699.69 1211.9 L1699.1 1211.9 L1698.52 1211.9 L1697.93 1211.9 L1697.34 1211.9 L1696.76 1211.9 L1696.17 1211.9 L1695.58 1211.9 L1695 1211.9 L1694.41 1211.9 L1693.83 1211.9 L1693.24 1211.9 L1692.65 1211.9 L1692.07 1211.9 L1691.48 1211.9 L1690.89 1211.9 L1690.31 1211.9 L1689.72 1211.9 L1689.13 1211.9 L1688.55 1211.9 L1687.96 1211.9 L1687.37 1211.9 L1686.79 1211.9 L1686.2 1211.9 L1685.62 1211.9 L1685.03 1211.9 L1684.44 1211.9 L1683.86 1211.9 L1683.27 1211.9 L1682.68 1211.9 L1682.1 1211.9 L1681.51 1211.9 L1680.92 1211.9 L1680.34 1211.9 L1679.75 1211.9 L1679.17 1211.9 L1678.58 1211.9 L1677.99 1211.9 L1677.41 1211.9 L1676.82 1211.9 L1676.23 1211.9 L1675.65 1211.9 L1675.06 1211.9 L1674.47 1211.9 L1673.89 1211.9 L1673.3 1211.9 L1672.71 1211.9 L1672.13 1211.9 L1671.54 1211.9 L1670.96 1211.9 L1670.37 1211.9 L1669.78 1211.9 L1669.2 1211.9 L1668.61 1211.9 L1668.02 1211.9 L1667.44 1211.9 L1666.85 1211.9 L1666.26 1211.9 L1665.68 1211.9 L1665.09 1211.9 L1664.5 1211.9 L1663.92 1211.9 L1663.33 1211.9 L1662.75 1211.9 L1662.16 1211.9 L1661.57 1211.9 L1660.99 1211.9 L1660.4 1211.9 L1659.81 1211.9 L1659.23 1211.9 L1658.64 1211.9 L1658.05 1211.9 L1657.47 1211.9 L1656.88 1211.9 L1656.29 1211.9 L1655.71 1211.9 L1655.12 1211.9 L1654.54 1211.9 L1653.95 1211.9 L1653.36 1211.9 L1652.78 1211.9 L1652.19 1211.9 L1651.6 1211.9 L1651.02 1211.9 L1650.43 1211.9 L1649.84 1211.9 L1649.26 1211.9 L1648.67 1211.9 L1648.09 1211.9 L1647.5 1211.9 L1646.91 1211.9 L1646.33 1211.9 L1645.74 1211.9 L1645.15 1211.9 L1644.57 1211.9 L1643.98 1211.9 L1643.39 1211.9 L1642.81 1211.9 L1642.22 1211.9 L1641.63 1211.9 L1641.05 1211.9 L1640.46 1211.9 L1639.88 1211.9 L1639.29 1211.9 L1638.7 1211.9 L1638.12 1211.9 L1637.53 1211.9 L1636.94 1211.9 L1636.36 1211.9 L1635.77 1211.9 L1635.18 1211.9 L1634.6 1211.9 L1634.01 1211.9 L1633.42 1211.9 L1632.84 1211.9 L1632.25 1211.9 L1631.67 1211.9 L1631.08 1211.9 L1630.49 1211.9 L1629.91 1211.9 L1629.32 1211.9 L1628.73 1211.9 L1628.15 1211.9 L1627.56 1211.9 L1626.97 1211.9 L1626.39 1211.9 L1625.8 1211.9 L1625.22 1211.9 L1624.63 1211.9 L1624.04 1211.9 L1623.46 1211.9 L1622.87 1211.9 L1622.28 1211.9 L1621.7 1211.9 L1621.11 1211.9 L1620.52 1211.9 L1619.94 1211.9 L1619.35 1211.9 L1618.76 1211.9 L1618.18 1211.9 L1617.59 1211.9 L1617.01 1211.9 L1616.42 1211.9 L1615.83 1211.9 L1615.25 1211.9 L1614.66 1211.9 L1614.07 1211.9 L1613.49 1211.9 L1612.9 1211.9 L1612.31 1211.9 L1611.73 1211.9 L1611.14 1211.9 L1610.55 1211.9 L1609.97 1211.9 L1609.38 1211.9 L1608.8 1211.9 L1608.21 1211.9 L1607.62 1211.9 L1607.04 1211.9 L1606.45 1211.9 L1605.86 1211.9 L1605.28 1211.9 L1604.69 1211.9 L1604.1 1211.9 L1603.52 1211.9 L1602.93 1211.9 L1602.34 1211.9 L1601.76 1211.9 L1601.17 1211.9 L1600.59 1211.9 L1600 1211.9 L1599.41 1211.9 L1598.83 1211.9 L1598.24 1211.9 L1597.65 1211.9 L1597.07 1211.9 L1596.48 1211.9 L1595.89 1211.9 L1595.31 1211.9 L1594.72 1211.9 L1594.14 1211.9 L1593.55 1211.9 L1592.96 1211.9 L1592.38 1211.9 L1591.79 1211.9 L1591.2 1211.9 L1590.62 1211.9 L1590.03 1211.9 L1589.44 1211.9 L1588.86 1211.9 L1588.27 1211.9 L1587.68 1211.9 L1587.1 1211.9 L1586.51 1211.9 L1585.93 1211.9 L1585.34 1211.9 L1584.75 1211.9 L1584.17 1211.9 L1583.58 1211.9 L1582.99 1211.9 L1582.41 1211.9 L1581.82 1211.9 L1581.23 1211.9 L1580.65 1211.9 L1580.06 1211.9 L1579.47 1211.9 L1578.89 1211.9 L1578.3 1211.9 L1577.72 1211.9 L1577.13 1211.9 L1576.54 1211.9 L1575.96 1211.9 L1575.37 1211.9 L1574.78 1211.9 L1574.2 1211.9 L1573.61 1211.9 L1573.02 1211.9 L1572.44 1211.9 L1571.85 1211.9 L1571.27 1211.9 L1570.68 1211.9 L1570.09 1211.9 L1569.51 1211.9 L1568.92 1211.9 L1568.33 1211.9 L1567.75 1211.9 L1567.16 1211.9 L1566.57 1211.9 L1565.99 1211.9 L1565.4 1211.9 L1564.81 1211.9 L1564.23 1211.9 L1563.64 1211.9 L1563.06 1211.9 L1562.47 1211.9 L1561.88 1211.9 L1561.3 1211.9 L1560.71 1211.9 L1560.12 1211.9 L1559.54 1211.9 L1558.95 1211.9 L1558.36 1211.9 L1557.78 1211.9 L1557.19 1211.9 L1556.6 1211.9 L1556.02 1211.9 L1555.43 1211.9 L1554.85 1211.9 L1554.26 1211.9 L1553.67 1211.9 L1553.09 1211.9 L1552.5 1211.9 L1551.91 1211.9 L1551.33 1211.9 L1550.74 1211.9 L1550.15 1211.9 L1549.57 1211.9 L1548.98 1211.9 L1548.4 1211.9 L1547.81 1211.9 L1547.22 1211.9 L1546.64 1211.9 L1546.05 1211.9 L1545.46 1211.9 L1544.88 1211.9 L1544.29 1211.9 L1543.7 1211.9 L1543.12 1211.9 L1542.53 1211.9 L1541.94 1211.9 L1541.36 1211.9 L1540.77 1211.9 L1540.19 1211.9 L1539.6 1211.9 L1539.01 1211.9 L1538.43 1211.9 L1537.84 1211.9 L1537.25 1211.9 L1536.67 1211.9 L1536.08 1211.9 L1535.49 1211.9 L1534.91 1211.9 L1534.32 1211.9 L1533.73 1211.9 L1533.15 1211.9 L1532.56 1211.9 L1531.98 1211.9 L1531.39 1211.9 L1530.8 1211.9 L1530.22 1211.9 L1529.63 1211.9 L1529.04 1211.9 L1528.46 1211.9 L1527.87 1211.9 L1527.28 1211.9 L1526.7 1211.9 L1526.11 1211.9 L1525.52 1211.9 L1524.94 1211.9 L1524.35 1211.9 L1523.77 1211.9 L1523.18 1211.9 L1522.59 1211.9 L1522.01 1211.9 L1521.42 1211.9 L1520.83 1211.9 L1520.25 1211.9 L1519.66 1211.9 L1519.07 1211.9 L1518.49 1211.9 L1517.9 1211.9 L1517.32 1211.9 L1516.73 1211.9 L1516.14 1211.9 L1515.56 1211.9 L1514.97 1211.9 L1514.38 1211.9 L1513.8 1211.9 L1513.21 1211.9 L1512.62 1211.9 L1512.04 1211.9 L1511.45 1211.9 L1510.86 1211.9 L1510.28 1211.9 L1509.69 1211.9 L1509.11 1211.9 L1508.52 1211.9 L1507.93 1211.9 L1507.35 1211.9 L1506.76 1211.9 L1506.17 1211.9 L1505.59 1211.9 L1505 1211.9 L1504.41 1211.9 L1503.83 1211.9 L1503.24 1211.9 L1502.65 1211.9 L1502.07 1211.9 L1501.48 1211.9 L1500.9 1211.9 L1500.31 1211.9 L1499.72 1211.9 L1499.14 1211.9 L1498.55 1211.9 L1497.96 1211.9 L1497.38 1211.9 L1496.79 1211.9 L1496.2 1211.9 L1495.62 1211.9 L1495.03 1211.9 L1494.45 1211.9 L1493.86 1211.9 L1493.27 1211.9 L1492.69 1211.9 L1492.1 1211.9 L1491.51 1211.9 L1490.93 1211.9 L1490.34 1211.9 L1489.75 1211.9 L1489.17 1211.9 L1488.58 1211.9 L1487.99 1211.9 L1487.41 1211.9 L1486.82 1211.9 L1486.24 1211.9 L1485.65 1211.9 L1485.06 1211.9 L1484.48 1211.9 L1483.89 1211.9 L1483.3 1211.9 L1482.72 1211.9 L1482.13 1211.9 L1481.54 1211.9 L1480.96 1211.9 L1480.37 1211.9 L1479.78 1211.9 L1479.2 1211.9 L1478.61 1211.9 L1478.03 1211.9 L1477.44 1211.9 L1476.85 1211.9 L1476.27 1211.9 L1475.68 1211.9 L1475.09 1211.9 L1474.51 1211.9 L1473.92 1211.9 L1473.33 1211.9 L1472.75 1211.9 L1472.16 1211.9 L1471.57 1211.9 L1470.99 1211.9 L1470.4 1211.9 L1469.82 1211.9 L1469.23 1211.9 L1468.64 1211.9 L1468.06 1211.9 L1467.47 1211.9 L1466.88 1211.9 L1466.3 1211.9 L1465.71 1211.9 L1465.12 1211.9 L1464.54 1211.9 L1463.95 1211.9 L1463.37 1211.9 L1462.78 1211.9 L1462.19 1211.9 L1461.61 1211.9 L1461.02 1211.9 L1460.43 1211.9 L1459.85 1211.9 L1459.26 1211.9 L1458.67 1211.9 L1458.09 1211.9 L1457.5 1211.9 L1456.91 1211.9 L1456.33 1211.9 L1455.74 1211.9 L1455.16 1211.9 L1454.57 1211.9 L1453.98 1211.9 L1453.4 1211.9 L1452.81 1211.9 L1452.22 1211.9 L1451.64 1211.9 L1451.05 1211.9 L1450.46 1211.9 L1449.88 1211.9 L1449.29 1211.9 L1448.7 1211.9 L1448.12 1211.9 L1447.53 1211.9 L1446.95 1211.9 L1446.36 1211.9 L1445.77 1211.9 L1445.19 1211.9 L1444.6 1211.9 L1444.01 1211.9 L1443.43 1211.9 L1442.84 1211.9 L1442.25 1211.9 L1441.67 1211.9 L1441.08 1211.9 L1440.5 1211.9 L1439.91 1211.9 L1439.32 1211.9 L1438.74 1211.9 L1438.15 1211.9 L1437.56 1211.9 L1436.98 1211.9 L1436.39 1211.9 L1435.8 1211.9 L1435.22 1211.9 L1434.63 1211.9 L1434.04 1211.9 L1433.46 1211.9 L1432.87 1211.9 L1432.29 1211.9 L1431.7 1211.9 L1431.11 1211.9 L1430.53 1211.9 L1429.94 1211.9 L1429.35 1211.9 L1428.77 1211.9 L1428.18 1211.9 L1427.59 1211.9 L1427.01 1211.9 L1426.42 1211.9 L1425.83 1211.9 L1425.25 1211.9 L1424.66 1211.9 L1424.08 1211.9 L1423.49 1211.9 L1422.9 1211.9 L1422.32 1211.9 L1421.73 1211.9 L1421.14 1211.9 L1420.56 1211.9 L1419.97 1211.9 L1419.38 1211.9 L1418.8 1211.9 L1418.21 1211.9 L1417.63 1211.9 L1417.04 1211.9 L1416.45 1211.9 L1415.87 1211.9 L1415.28 1211.9 L1414.69 1211.9 L1414.11 1211.9 L1413.52 1211.9 L1412.93 1211.9 L1412.35 1211.9 L1411.76 1211.9 L1411.17 1211.9 L1410.59 1211.9 L1410 1211.9 L1409.42 1211.9 L1408.83 1211.9 L1408.24 1211.9 L1407.66 1211.9 L1407.07 1211.9 L1406.48 1211.9 L1405.9 1211.9 L1405.31 1211.9 L1404.72 1211.9 L1404.14 1211.9 L1403.55 1211.9 L1402.96 1211.9 L1402.38 1211.9 L1401.79 1211.9 L1401.21 1211.9 L1400.62 1211.9 L1400.03 1211.9 L1399.45 1211.9 L1398.86 1211.9 L1398.27 1211.9 L1397.69 1211.9 L1397.1 1211.9 L1396.51 1211.9 L1395.93 1211.9 L1395.34 1211.9 L1394.75 1211.9 L1394.17 1211.9 L1393.58 1211.9 L1393 1211.9 L1392.41 1211.9 L1391.82 1211.9 L1391.24 1211.9 L1390.65 1211.9 L1390.06 1211.9 L1389.48 1211.9 L1388.89 1211.9 L1388.3 1211.9 L1387.72 1211.9 L1387.13 1211.9 L1386.55 1211.9 L1385.96 1211.9 L1385.37 1211.9 L1384.79 1211.9 L1384.2 1211.9 L1383.61 1211.9 L1383.03 1211.9 L1382.44 1211.9 L1381.85 1211.9 L1381.27 1211.9 L1380.68 1211.9 L1380.09 1211.9 L1379.51 1211.9 L1378.92 1211.9 L1378.34 1211.9 L1377.75 1211.9 L1377.16 1211.9 L1376.58 1211.9 L1375.99 1211.9 L1375.4 1211.9 L1374.82 1211.9 L1374.23 1211.9 L1373.64 1211.9 L1373.06 1211.9 L1372.47 1211.9 L1371.88 1211.9 L1371.3 1211.9 L1370.71 1211.9 L1370.13 1211.9 L1369.54 1211.9 L1368.95 1211.9 L1368.37 1211.9 L1367.78 1211.9 L1367.19 1211.9 L1366.61 1211.9 L1366.02 1211.9 L1365.43 1211.9 L1364.85 1211.9 L1364.26 1211.9 L1363.68 1211.9 L1363.09 1211.9 L1362.5 1211.9 L1361.92 1211.9 L1361.33 1211.9 L1360.74 1211.9 L1360.16 1211.9 L1359.57 1211.9 L1358.98 1211.9 L1358.4 1211.9 L1357.81 1211.9 L1357.22 1211.9 L1356.64 1211.9 L1356.05 1211.9 L1355.47 1211.9 L1354.88 1211.9 L1354.29 1211.9 L1353.71 1211.9 L1353.12 1211.9 L1352.53 1211.9 L1351.95 1211.9 L1351.36 1211.9 L1350.77 1211.9 L1350.19 1211.9 L1349.6 1211.9 L1349.01 1211.9 L1348.43 1211.9 L1347.84 1211.9 L1347.26 1211.9 L1346.67 1211.9 L1346.08 1211.9 L1345.5 1211.9 L1344.91 1211.9 L1344.32 1211.9 L1343.74 1211.9 L1343.15 1211.9 L1342.56 1211.9 L1341.98 1211.9 L1341.39 1211.9 L1340.8 1211.9 L1340.22 1211.9 L1339.63 1211.9 L1339.05 1211.9 L1338.46 1211.9 L1337.87 1211.9 L1337.29 1211.9 L1336.7 1211.9 L1336.11 1211.9 L1335.53 1211.9 L1334.94 1211.9 L1334.35 1211.9 L1333.77 1211.9 L1333.18 1211.9 L1332.6 1211.9 L1332.01 1211.9 L1331.42 1211.9 L1330.84 1211.9 L1330.25 1211.9 L1329.66 1211.9 L1329.08 1211.9 L1328.49 1211.9 L1327.9 1211.9 L1327.32 1211.9 L1326.73 1211.9 L1326.14 1211.9 L1325.56 1211.9 L1324.97 1211.9 L1324.39 1211.9 L1323.8 1211.9 L1323.21 1211.9 L1322.63 1211.9 L1322.04 1211.9 L1321.45 1211.9 L1320.87 1211.9 L1320.28 1211.9 L1319.69 1211.9 L1319.11 1211.9 L1318.52 1211.9 L1317.93 1211.9 L1317.35 1211.9 L1316.76 1211.9 L1316.18 1211.9 L1315.59 1211.9 L1315 1211.9 L1314.42 1211.9 L1313.83 1211.9 L1313.24 1211.9 L1312.66 1211.9 L1312.07 1211.9 L1311.48 1211.9 L1310.9 1211.9 L1310.31 1211.9 L1309.73 1211.9 L1309.14 1211.9 L1308.55 1211.9 L1307.97 1211.9 L1307.38 1211.9 L1306.79 1211.9 L1306.21 1211.9 L1305.62 1211.9 L1305.03 1211.9 L1304.45 1211.9 L1303.86 1211.9 L1303.27 1211.9 L1302.69 1211.9 L1302.1 1211.9 L1301.52 1211.9 L1300.93 1211.9 L1300.34 1211.9 L1299.76 1211.9 L1299.17 1211.9 L1298.58 1211.9 L1298 1211.9 L1297.41 1211.9 L1296.82 1211.9 L1296.24 1211.9 L1295.65 1211.9 L1295.06 1211.9 L1294.48 1211.9 L1293.89 1211.9 L1293.31 1211.9 L1292.72 1211.9 L1292.13 1211.9 L1291.55 1211.9 L1290.96 1211.9 L1290.37 1211.9 L1289.79 1211.9 L1289.2 1211.9 L1288.61 1211.9 L1288.03 1211.9 L1287.44 1211.9 L1286.86 1211.9 L1286.27 1211.9 L1285.68 1211.9 L1285.1 1211.9 L1284.51 1211.9 L1283.92 1211.9 L1283.34 1211.9 L1282.75 1211.9 L1282.16 1211.9 L1281.58 1211.9 L1280.99 1211.9 L1280.4 1211.9 L1279.82 1211.9 L1279.23 1211.9 L1278.65 1211.9 L1278.06 1211.9 L1277.47 1211.9 L1276.89 1211.9 L1276.3 1211.9 L1275.71 1211.9 L1275.13 1211.9 L1274.54 1211.9 L1273.95 1211.9 L1273.37 1211.9 L1272.78 1211.9 L1272.19 1211.9 L1271.61 1211.9 L1271.02 1211.9 L1270.44 1211.9 L1269.85 1211.9 L1269.26 1211.9 L1268.68 1211.9 L1268.09 1211.9 L1267.5 1211.9 L1266.92 1211.9 L1266.33 1211.9 L1265.74 1211.9 L1265.16 1211.9 L1264.57 1211.9 L1263.98 1211.9 L1263.4 1211.9 L1262.81 1211.9 L1262.23 1211.9 L1261.64 1211.9 L1261.05 1211.9 L1260.47 1211.9 L1259.88 1211.9 L1259.29 1211.9 L1258.71 1211.9 L1258.12 1211.9 L1257.53 1211.9 L1256.95 1211.9 L1256.36 1211.9 L1255.78 1211.9 L1255.19 1211.9 L1254.6 1211.9 L1254.02 1211.9 L1253.43 1211.9 L1252.84 1211.9 L1252.26 1211.9 L1251.67 1211.9 L1251.08 1211.9 L1250.5 1211.9 L1249.91 1211.9 L1249.32 1211.9 L1248.74 1211.9 L1248.15 1211.9 L1247.57 1211.9 L1246.98 1211.9 L1246.39 1211.9 L1245.81 1211.9 L1245.22 1211.9 L1244.63 1211.9 L1244.05 1211.9 L1243.46 1211.9 L1242.87 1211.9 L1242.29 1211.9 L1241.7 1211.9 L1241.11 1211.9 L1240.53 1211.9 L1239.94 1211.9 L1239.36 1211.9 L1238.77 1211.9 L1238.18 1211.9 L1237.6 1211.9 L1237.01 1211.9 L1236.42 1211.9 L1235.84 1211.9 L1235.25 1211.9 L1234.66 1211.9 L1234.08 1211.9 L1233.49 1211.9 L1232.91 1211.9 L1232.32 1211.9 L1231.73 1211.9 L1231.15 1211.9 L1230.56 1211.9 L1229.97 1211.9 L1229.39 1211.9 L1228.8 1211.9 L1228.21 1211.9 L1227.63 1211.9 L1227.04 1211.9 L1226.45 1211.9 L1225.87 1211.9 L1225.28 1211.9 L1224.7 1211.9 L1224.11 1211.9 L1223.52 1211.9 L1222.94 1211.9 L1222.35 1211.9 L1221.76 1211.9 L1221.18 1211.9 L1220.59 1211.9 L1220 1211.9 L1219.42 1211.9 L1218.83 1211.9 L1218.24 1211.9 L1217.66 1211.9 L1217.07 1211.9 L1216.49 1211.9 L1215.9 1211.9 L1215.31 1211.9 L1214.73 1211.9 L1214.14 1211.9 L1213.55 1211.9 L1212.97 1211.9 L1212.38 1211.9 L1211.79 1211.9 L1211.21 1211.9 L1210.62 1211.9 L1210.03 1211.9 L1209.45 1211.9 L1208.86 1211.9 L1208.28 1211.9 L1207.69 1211.9 L1207.1 1211.9 L1206.52 1211.9 L1205.93 1211.9 L1205.34 1211.9 L1204.76 1211.9 L1204.17 1211.9 L1203.58 1211.9 L1203 1211.9 L1202.41 1211.9 L1201.83 1211.9 L1201.24 1211.9 L1200.65 1211.9 L1200.07 1211.9 L1199.48 1211.9 L1198.89 1211.9 L1198.31 1211.9 L1197.72 1211.9 L1197.13 1211.9 L1196.55 1211.9 L1195.96 1211.9 L1195.37 1211.9 L1194.79 1211.9 L1194.2 1211.9 L1193.62 1211.9 L1193.03 1211.9 L1192.44 1211.9 L1191.86 1211.9 L1191.27 1211.9 L1190.68 1211.9 L1190.1 1211.9 L1189.51 1211.9 L1188.92 1211.9 L1188.34 1211.9 L1187.75 1211.9 L1187.16 1211.9 L1186.58 1211.9 L1185.99 1211.9 L1185.41 1211.9 L1184.82 1211.9 L1184.23 1211.9 L1183.65 1211.9 L1183.06 1211.9 L1182.47 1211.9 L1181.89 1211.9 L1181.3 1211.9 L1180.71 1211.9 L1180.13 1211.9 L1179.54 1211.9 L1178.96 1211.9 L1178.37 1211.9 L1177.78 1211.9 L1177.2 1211.9 L1176.61 1211.9 L1176.02 1211.9 L1175.44 1211.9 L1174.85 1211.9 L1174.26 1211.9 L1173.68 1211.9 L1173.09 1211.9 L1172.5 1211.9 L1171.92 1211.9 L1171.33 1211.9 L1170.75 1211.9 L1170.16 1211.9 L1169.57 1211.9 L1168.99 1211.9 L1168.4 1211.9 L1167.81 1211.9 L1167.23 1211.9 L1166.64 1211.9 L1166.05 1211.9 L1165.47 1211.9 L1164.88 1211.9 L1164.29 1211.9 L1163.71 1211.9 L1163.12 1211.9 L1162.54 1211.9 L1161.95 1211.9 L1161.36 1211.9 L1160.78 1211.9 L1160.19 1211.9 L1159.6 1211.9 L1159.02 1211.9 L1158.43 1211.9 L1157.84 1211.9 L1157.26 1211.9 L1156.67 1211.9 L1156.09 1211.9 L1155.5 1211.9 L1154.91 1211.9 L1154.33 1211.9 L1153.74 1211.9 L1153.15 1211.9 L1152.57 1211.9 L1151.98 1211.9 L1151.39 1211.9 L1150.81 1211.9 L1150.22 1211.9 L1149.63 1211.9 L1149.05 1211.9 L1148.46 1211.9 L1147.88 1211.9 L1147.29 1211.9 L1146.7 1211.9 L1146.12 1211.9 L1145.53 1211.9 L1144.94 1211.9 L1144.36 1211.9 L1143.77 1211.9 L1143.18 1211.9 L1142.6 1211.9 L1142.01 1211.9 L1141.42 1211.9 L1140.84 1211.9 L1140.25 1211.9 L1139.67 1211.9 L1139.08 1211.9 L1138.49 1211.9 L1137.91 1211.9 L1137.32 1211.9 L1136.73 1211.9 L1136.15 1211.9 L1135.56 1211.9 L1134.97 1211.9 L1134.39 1211.9 L1133.8 1211.9 L1133.21 1211.9 L1132.63 1211.9 L1132.04 1211.9 L1131.46 1211.9 L1130.87 1211.9 L1130.28 1211.9 L1129.7 1211.9 L1129.11 1211.9 L1128.52 1211.9 L1127.94 1211.9 L1127.35 1211.9 L1126.76 1211.9 L1126.18 1211.9 L1125.59 1211.9 L1125.01 1211.9 L1124.42 1211.9 L1123.83 1211.9 L1123.25 1211.9 L1122.66 1211.9 L1122.07 1211.9 L1121.49 1211.9 L1120.9 1211.9 L1120.31 1211.9 L1119.73 1211.9 L1119.14 1211.9 L1118.55 1211.9 L1117.97 1211.9 L1117.38 1211.9 L1116.8 1211.9 L1116.21 1211.9 L1115.62 1211.9 L1115.04 1211.9 L1114.45 1211.9 L1113.86 1211.9 L1113.28 1211.9 L1112.69 1211.9 L1112.1 1211.9 L1111.52 1211.9 L1110.93 1211.9 L1110.34 1211.9 L1109.76 1211.9 L1109.17 1211.9 L1108.59 1211.9 L1108 1211.9 L1107.41 1211.9 L1106.83 1211.9 L1106.24 1211.9 L1105.65 1211.9 L1105.07 1211.9 L1104.48 1211.9 L1103.89 1211.9 L1103.31 1211.9 L1102.72 1211.9 L1102.14 1211.9 L1101.55 1211.9 L1100.96 1211.9 L1100.38 1211.9 L1099.79 1211.9 L1099.2 1211.9 L1098.62 1211.9 L1098.03 1211.9 L1097.44 1211.9 L1096.86 1211.9 L1096.27 1211.9 L1095.68 1211.9 L1095.1 1211.9 L1094.51 1211.9 L1093.93 1211.9 L1093.34 1211.9 L1092.75 1211.9 L1092.17 1211.9 L1091.58 1211.9 L1090.99 1211.9 L1090.41 1211.9 L1089.82 1211.9 L1089.23 1211.9 L1088.65 1211.9 L1088.06 1211.9 L1087.47 1211.9 L1086.89 1211.9 L1086.3 1211.9 L1085.72 1211.9 L1085.13 1211.9 L1084.54 1211.9 L1083.96 1211.9 L1083.37 1211.9 L1082.78 1211.9 L1082.2 1211.9 L1081.61 1211.9 L1081.02 1211.9 L1080.44 1211.9 L1079.85 1211.9 L1079.26 1211.9 L1078.68 1211.9 L1078.09 1211.9 L1077.51 1211.9 L1076.92 1211.9 L1076.33 1211.9 L1075.75 1211.9 L1075.16 1211.9 L1074.57 1211.9 L1073.99 1211.9 L1073.4 1211.9 L1072.81 1211.9 L1072.23 1211.9 L1071.64 1211.9 L1071.06 1211.9 L1070.47 1211.9 L1069.88 1211.9 L1069.3 1211.9 L1068.71 1211.9 L1068.12 1211.9 L1067.54 1211.9 L1066.95 1211.9 L1066.36 1211.9 L1065.78 1211.9 L1065.19 1211.9 L1064.6 1211.9 L1064.02 1211.9 L1063.43 1211.9 L1062.85 1211.9 L1062.26 1211.9 L1061.67 1211.9 L1061.09 1211.9 L1060.5 1211.9 L1059.91 1211.9 L1059.33 1211.9 L1058.74 1211.9 L1058.15 1211.9 L1057.57 1211.9 L1056.98 1211.9 L1056.39 1211.9 L1055.81 1211.9 L1055.22 1211.9 L1054.64 1211.9 L1054.05 1211.9 L1053.46 1211.9 L1052.88 1211.9 L1052.29 1211.9 L1051.7 1211.9 L1051.12 1211.9 L1050.53 1211.9 L1049.94 1211.9 L1049.36 1211.9 L1048.77 1211.9 L1048.19 1211.9 L1047.6 1211.9 L1047.01 1211.9 L1046.43 1211.9 L1045.84 1211.9 L1045.25 1211.9 L1044.67 1211.9 L1044.08 1211.9 L1043.49 1211.9 L1042.91 1211.9 L1042.32 1211.9 L1041.73 1211.9 L1041.15 1211.9 L1040.56 1211.9 L1039.98 1211.9 L1039.39 1211.9 L1038.8 1211.9 L1038.22 1211.9 L1037.63 1211.9 L1037.04 1211.9 L1036.46 1211.9 L1035.87 1211.9 L1035.28 1211.9 L1034.7 1211.9 L1034.11 1211.9 L1033.52 1211.9 L1032.94 1211.9 L1032.35 1211.9 L1031.77 1211.9 L1031.18 1211.9 L1030.59 1211.9 L1030.01 1211.9 L1029.42 1211.9 L1028.83 1211.9 L1028.25 1211.9 L1027.66 1211.9 L1027.07 1211.9 L1026.49 1211.9 L1025.9 1211.9 L1025.32 1211.9 L1024.73 1211.9 L1024.14 1211.9 L1023.56 1211.9 L1022.97 1211.9 L1022.38 1211.9 L1021.8 1211.9 L1021.21 1211.9 L1020.62 1211.9 L1020.04 1211.9 L1019.45 1211.9 L1018.86 1211.9 L1018.28 1211.9 L1017.69 1211.9 L1017.11 1211.9 L1016.52 1211.9 L1015.93 1211.9 L1015.35 1211.9 L1014.76 1211.9 L1014.17 1211.9 L1013.59 1211.9 L1013 1211.9 L1012.41 1211.9 L1011.83 1211.9 L1011.24 1211.9 L1010.65 1211.9 L1010.07 1211.9 L1009.48 1211.9 L1008.9 1211.9 L1008.31 1211.9 L1007.72 1211.9 L1007.14 1211.9 L1006.55 1211.9 L1005.96 1211.9 L1005.38 1211.9 L1004.79 1211.9 L1004.2 1211.9 L1003.62 1211.9 L1003.03 1211.9 L1002.44 1211.9 L1001.86 1211.9 L1001.27 1211.9 L1000.69 1211.9 L1000.1 1211.9 L999.513 1211.9 L998.926 1211.9 L998.34 1211.9 L997.754 1211.9 L997.167 1211.9 L996.581 1211.9 L995.994 1211.9 L995.408 1211.9 L994.822 1211.9 L994.235 1211.9 L993.649 1211.9 L993.062 1211.9 L992.476 1211.9 L991.889 1211.9 L991.303 1211.9 L990.717 1211.9 L990.13 1211.9 L989.544 1211.9 L988.957 1211.9 L988.371 1211.9 L987.785 1211.9 L987.198 1211.9 L986.612 1211.9 L986.025 1211.9  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.26 986.612,1212.26 987.198,1212.26 987.785,1212.26 988.371,1212.26 988.957,1212.26 989.544,1212.26 990.13,1212.26 990.717,1212.26 991.303,1212.26 991.889,1212.26 992.476,1212.26 993.062,1212.26 993.649,1212.26 994.235,1212.26 994.822,1212.26 995.408,1212.26 995.994,1212.26 996.581,1212.26 997.167,1212.26 997.754,1212.26 998.34,1212.26 998.926,1212.26 999.513,1212.26 1000.1,1212.26 1000.69,1212.26 1001.27,1212.26 1001.86,1212.26 1002.44,1212.26 1003.03,1212.26 1003.62,1212.26 1004.2,1212.26 1004.79,1212.26 1005.38,1212.26 1005.96,1212.26 1006.55,1212.26 1007.14,1212.26 1007.72,1212.26 1008.31,1212.26 1008.9,1212.26 1009.48,1212.26 1010.07,1212.26 1010.65,1212.26 1011.24,1212.26 1011.83,1212.26 1012.41,1212.26 1013,1212.26 1013.59,1212.26 1014.17,1212.26 1014.76,1212.26 1015.35,1212.26 1015.93,1212.26 1016.52,1212.26 1017.11,1212.26 1017.69,1212.26 1018.28,1212.26 1018.86,1212.26 1019.45,1212.26 1020.04,1212.26 1020.62,1212.26 1021.21,1212.26 1021.8,1212.26 1022.38,1212.26 1022.97,1212.26 1023.56,1212.26 1024.14,1212.26 1024.73,1212.26 1025.32,1212.26 1025.9,1212.26 1026.49,1212.26 1027.07,1212.26 1027.66,1212.26 1028.25,1212.26 1028.83,1212.26 1029.42,1212.26 1030.01,1212.26 1030.59,1212.26 1031.18,1212.26 1031.77,1212.26 1032.35,1212.26 1032.94,1212.26 1033.52,1212.26 1034.11,1212.26 1034.7,1212.26 1035.28,1212.26 1035.87,1212.26 1036.46,1212.26 1037.04,1212.26 1037.63,1212.26 1038.22,1212.26 1038.8,1212.26 1039.39,1212.26 1039.98,1212.26 1040.56,1212.26 1041.15,1212.26 1041.73,1212.26 1042.32,1212.26 1042.91,1212.26 1043.49,1212.26 1044.08,1212.26 1044.67,1212.26 1045.25,1212.26 1045.84,1212.26 1046.43,1212.26 1047.01,1212.26 1047.6,1212.26 1048.19,1212.26 1048.77,1212.26 1049.36,1212.26 1049.94,1212.26 1050.53,1212.26 1051.12,1212.26 1051.7,1212.26 1052.29,1212.26 1052.88,1212.26 1053.46,1212.26 1054.05,1212.26 1054.64,1212.26 1055.22,1212.26 1055.81,1212.26 1056.39,1212.26 1056.98,1212.26 1057.57,1212.26 1058.15,1212.26 1058.74,1212.26 1059.33,1212.26 1059.91,1212.26 1060.5,1212.26 1061.09,1212.26 1061.67,1212.26 1062.26,1212.26 1062.85,1212.26 1063.43,1212.26 1064.02,1212.26 1064.6,1212.26 1065.19,1212.26 1065.78,1212.26 1066.36,1212.26 1066.95,1212.26 1067.54,1212.26 1068.12,1212.26 1068.71,1212.26 1069.3,1212.26 1069.88,1212.26 1070.47,1212.26 1071.06,1212.26 1071.64,1212.26 1072.23,1212.26 1072.81,1212.26 1073.4,1212.26 1073.99,1212.26 1074.57,1212.26 1075.16,1212.26 1075.75,1212.26 1076.33,1212.26 1076.92,1212.26 1077.51,1212.26 1078.09,1212.26 1078.68,1212.26 1079.26,1212.26 1079.85,1212.26 1080.44,1212.26 1081.02,1212.26 1081.61,1212.26 1082.2,1212.26 1082.78,1212.26 1083.37,1212.26 1083.96,1212.26 1084.54,1212.26 1085.13,1212.26 1085.72,1212.26 1086.3,1212.26 1086.89,1212.26 1087.47,1212.26 1088.06,1212.26 1088.65,1212.26 1089.23,1212.26 1089.82,1212.26 1090.41,1212.26 1090.99,1212.26 1091.58,1212.26 1092.17,1212.26 1092.75,1212.26 1093.34,1212.26 1093.93,1212.26 1094.51,1212.26 1095.1,1212.26 1095.68,1212.26 1096.27,1212.26 1096.86,1212.26 1097.44,1212.26 1098.03,1212.26 1098.62,1212.26 1099.2,1212.26 1099.79,1212.26 1100.38,1212.26 1100.96,1212.26 1101.55,1212.26 1102.14,1212.26 1102.72,1212.26 1103.31,1212.26 1103.89,1212.26 1104.48,1212.26 1105.07,1212.26 1105.65,1212.26 1106.24,1212.26 1106.83,1212.26 1107.41,1212.26 1108,1212.26 1108.59,1212.26 1109.17,1212.26 1109.76,1212.26 1110.34,1212.26 1110.93,1212.26 1111.52,1212.26 1112.1,1212.26 1112.69,1212.26 1113.28,1212.26 1113.86,1212.26 1114.45,1212.26 1115.04,1212.26 1115.62,1212.26 1116.21,1212.26 1116.8,1212.26 1117.38,1212.26 1117.97,1212.26 1118.55,1212.26 1119.14,1212.26 1119.73,1212.26 1120.31,1212.26 1120.9,1212.26 1121.49,1212.26 1122.07,1212.26 1122.66,1212.26 1123.25,1212.26 1123.83,1212.26 1124.42,1212.26 1125.01,1212.26 1125.59,1212.26 1126.18,1212.26 1126.76,1212.26 1127.35,1212.26 1127.94,1212.26 1128.52,1212.26 1129.11,1212.26 1129.7,1212.26 1130.28,1212.26 1130.87,1212.26 1131.46,1212.26 1132.04,1212.26 1132.63,1212.26 1133.21,1212.26 1133.8,1212.26 1134.39,1212.26 1134.97,1212.26 1135.56,1212.26 1136.15,1212.26 1136.73,1212.26 1137.32,1212.26 1137.91,1212.26 1138.49,1212.26 1139.08,1212.26 1139.67,1212.26 1140.25,1212.26 1140.84,1212.26 1141.42,1212.26 1142.01,1212.26 1142.6,1212.26 1143.18,1212.26 1143.77,1212.26 1144.36,1212.26 1144.94,1212.26 1145.53,1212.26 1146.12,1212.26 1146.7,1212.26 1147.29,1212.26 1147.88,1212.26 1148.46,1212.26 1149.05,1212.26 1149.63,1212.26 1150.22,1212.26 1150.81,1212.26 1151.39,1212.26 1151.98,1212.26 1152.57,1212.26 1153.15,1212.26 1153.74,1212.26 1154.33,1212.26 1154.91,1212.26 1155.5,1212.26 1156.09,1212.26 1156.67,1212.26 1157.26,1212.26 1157.84,1212.26 1158.43,1212.26 1159.02,1212.26 1159.6,1212.26 1160.19,1212.26 1160.78,1212.26 1161.36,1212.26 1161.95,1212.26 1162.54,1212.26 1163.12,1212.26 1163.71,1212.26 1164.29,1212.26 1164.88,1212.26 1165.47,1212.26 1166.05,1212.26 1166.64,1212.26 1167.23,1212.26 1167.81,1212.26 1168.4,1212.26 1168.99,1212.26 1169.57,1212.26 1170.16,1212.26 1170.75,1212.26 1171.33,1212.26 1171.92,1212.26 1172.5,1212.26 1173.09,1212.26 1173.68,1212.26 1174.26,1212.26 1174.85,1212.26 1175.44,1212.26 1176.02,1212.26 1176.61,1212.26 1177.2,1212.26 1177.78,1212.26 1178.37,1212.26 1178.96,1212.26 1179.54,1212.26 1180.13,1212.26 1180.71,1212.26 1181.3,1212.26 1181.89,1212.26 1182.47,1212.26 1183.06,1212.26 1183.65,1212.26 1184.23,1212.26 1184.82,1212.26 1185.41,1212.26 1185.99,1212.26 1186.58,1212.26 1187.16,1212.26 1187.75,1212.26 1188.34,1212.26 1188.92,1212.26 1189.51,1212.26 1190.1,1212.26 1190.68,1212.26 1191.27,1212.26 1191.86,1212.26 1192.44,1212.26 1193.03,1212.26 1193.62,1212.26 1194.2,1212.26 1194.79,1212.26 1195.37,1212.26 1195.96,1212.26 1196.55,1212.26 1197.13,1212.26 1197.72,1212.26 1198.31,1212.26 1198.89,1212.26 1199.48,1212.26 1200.07,1212.26 1200.65,1212.26 1201.24,1212.26 1201.83,1212.26 1202.41,1212.26 1203,1212.26 1203.58,1212.26 1204.17,1212.26 1204.76,1212.26 1205.34,1212.26 1205.93,1212.26 1206.52,1212.26 1207.1,1212.26 1207.69,1212.26 1208.28,1212.26 1208.86,1212.26 1209.45,1212.26 1210.03,1212.26 1210.62,1212.26 1211.21,1212.26 1211.79,1212.26 1212.38,1212.26 1212.97,1212.26 1213.55,1212.26 1214.14,1212.26 1214.73,1212.26 1215.31,1212.26 1215.9,1212.26 1216.49,1212.26 1217.07,1212.26 1217.66,1212.26 1218.24,1212.26 1218.83,1212.26 1219.42,1212.26 1220,1212.26 1220.59,1212.26 1221.18,1212.26 1221.76,1212.26 1222.35,1212.26 1222.94,1212.26 1223.52,1212.26 1224.11,1212.26 1224.7,1212.26 1225.28,1212.26 1225.87,1212.26 1226.45,1212.26 1227.04,1212.26 1227.63,1212.26 1228.21,1212.26 1228.8,1212.26 1229.39,1212.26 1229.97,1212.26 1230.56,1212.26 1231.15,1212.26 1231.73,1212.26 1232.32,1212.26 1232.91,1212.26 1233.49,1212.26 1234.08,1212.26 1234.66,1212.26 1235.25,1212.26 1235.84,1212.26 1236.42,1212.26 1237.01,1212.26 1237.6,1212.26 1238.18,1212.26 1238.77,1212.26 1239.36,1212.26 1239.94,1212.26 1240.53,1212.26 1241.11,1212.26 1241.7,1212.26 1242.29,1212.26 1242.87,1212.26 1243.46,1212.26 1244.05,1212.26 1244.63,1212.26 1245.22,1212.26 1245.81,1212.26 1246.39,1212.26 1246.98,1212.26 1247.57,1212.26 1248.15,1212.26 1248.74,1212.26 1249.32,1212.26 1249.91,1212.26 1250.5,1212.26 1251.08,1212.26 1251.67,1212.26 1252.26,1212.26 1252.84,1212.26 1253.43,1212.26 1254.02,1212.26 1254.6,1212.26 1255.19,1212.26 1255.78,1212.26 1256.36,1212.26 1256.95,1212.26 1257.53,1212.26 1258.12,1212.26 1258.71,1212.26 1259.29,1212.26 1259.88,1212.26 1260.47,1212.26 1261.05,1212.26 1261.64,1212.26 1262.23,1212.26 1262.81,1212.26 1263.4,1212.26 1263.98,1212.26 1264.57,1212.26 1265.16,1212.26 1265.74,1212.26 1266.33,1212.26 1266.92,1212.26 1267.5,1212.26 1268.09,1212.26 1268.68,1212.26 1269.26,1212.26 1269.85,1212.26 1270.44,1212.26 1271.02,1212.26 1271.61,1212.26 1272.19,1212.26 1272.78,1212.26 1273.37,1212.26 1273.95,1212.26 1274.54,1212.26 1275.13,1212.26 1275.71,1212.26 1276.3,1212.26 1276.89,1212.26 1277.47,1212.26 1278.06,1212.26 1278.65,1212.26 1279.23,1212.26 1279.82,1212.26 1280.4,1212.26 1280.99,1212.26 1281.58,1212.26 1282.16,1212.26 1282.75,1212.26 1283.34,1212.26 1283.92,1212.26 1284.51,1212.26 1285.1,1212.26 1285.68,1212.26 1286.27,1212.26 1286.86,1212.26 1287.44,1212.26 1288.03,1212.26 1288.61,1212.26 1289.2,1212.26 1289.79,1212.26 1290.37,1212.26 1290.96,1212.26 1291.55,1212.26 1292.13,1212.26 1292.72,1212.26 1293.31,1212.26 1293.89,1212.26 1294.48,1212.26 1295.06,1212.26 1295.65,1212.26 1296.24,1212.26 1296.82,1212.26 1297.41,1212.26 1298,1212.26 1298.58,1212.26 1299.17,1212.26 1299.76,1212.26 1300.34,1212.26 1300.93,1212.26 1301.52,1212.26 1302.1,1212.26 1302.69,1212.26 1303.27,1212.26 1303.86,1212.26 1304.45,1212.26 1305.03,1212.26 1305.62,1212.26 1306.21,1212.26 1306.79,1212.26 1307.38,1212.26 1307.97,1212.26 1308.55,1212.26 1309.14,1212.26 1309.73,1212.26 1310.31,1212.26 1310.9,1212.26 1311.48,1212.26 1312.07,1212.26 1312.66,1212.26 1313.24,1212.26 1313.83,1212.26 1314.42,1212.26 1315,1212.26 1315.59,1212.26 1316.18,1212.26 1316.76,1212.26 1317.35,1212.26 1317.93,1212.26 1318.52,1212.26 1319.11,1212.26 1319.69,1212.26 1320.28,1212.26 1320.87,1212.26 1321.45,1212.26 1322.04,1212.26 1322.63,1212.26 1323.21,1212.26 1323.8,1212.26 1324.39,1212.26 1324.97,1212.26 1325.56,1212.26 1326.14,1212.26 1326.73,1212.26 1327.32,1212.26 1327.9,1212.26 1328.49,1212.26 1329.08,1212.26 1329.66,1212.26 1330.25,1212.26 1330.84,1212.26 1331.42,1212.26 1332.01,1212.26 1332.6,1212.26 1333.18,1212.26 1333.77,1212.26 1334.35,1212.26 1334.94,1212.26 1335.53,1212.26 1336.11,1212.26 1336.7,1212.26 1337.29,1212.26 1337.87,1212.26 1338.46,1212.26 1339.05,1212.26 1339.63,1212.26 1340.22,1212.26 1340.8,1212.26 1341.39,1212.26 1341.98,1212.26 1342.56,1212.26 1343.15,1212.26 1343.74,1212.26 1344.32,1212.26 1344.91,1212.26 1345.5,1212.26 1346.08,1212.26 1346.67,1212.26 1347.26,1212.26 1347.84,1212.26 1348.43,1212.26 1349.01,1212.26 1349.6,1212.26 1350.19,1212.26 1350.77,1212.26 1351.36,1212.26 1351.95,1212.26 1352.53,1212.26 1353.12,1212.26 1353.71,1212.26 1354.29,1212.26 1354.88,1212.26 1355.47,1212.26 1356.05,1212.26 1356.64,1212.26 1357.22,1212.26 1357.81,1212.26 1358.4,1212.26 1358.98,1212.26 1359.57,1212.26 1360.16,1212.26 1360.74,1212.26 1361.33,1212.26 1361.92,1212.26 1362.5,1212.26 1363.09,1212.26 1363.68,1212.26 1364.26,1212.26 1364.85,1212.26 1365.43,1212.26 1366.02,1212.26 1366.61,1212.26 1367.19,1212.26 1367.78,1212.26 1368.37,1212.26 1368.95,1212.26 1369.54,1212.26 1370.13,1212.26 1370.71,1212.26 1371.3,1212.26 1371.88,1212.26 1372.47,1212.26 1373.06,1212.26 1373.64,1212.26 1374.23,1212.26 1374.82,1212.26 1375.4,1212.26 1375.99,1212.26 1376.58,1212.26 1377.16,1212.26 1377.75,1212.26 1378.34,1212.26 1378.92,1212.26 1379.51,1212.26 1380.09,1212.26 1380.68,1212.26 1381.27,1212.26 1381.85,1212.26 1382.44,1212.26 1383.03,1212.26 1383.61,1212.26 1384.2,1212.26 1384.79,1212.26 1385.37,1212.26 1385.96,1212.26 1386.55,1212.26 1387.13,1212.26 1387.72,1212.26 1388.3,1212.26 1388.89,1212.26 1389.48,1212.26 1390.06,1212.26 1390.65,1212.26 1391.24,1212.26 1391.82,1212.26 1392.41,1212.26 1393,1212.26 1393.58,1212.26 1394.17,1212.26 1394.75,1212.26 1395.34,1212.26 1395.93,1212.26 1396.51,1212.26 1397.1,1212.26 1397.69,1212.26 1398.27,1212.26 1398.86,1212.26 1399.45,1212.26 1400.03,1212.26 1400.62,1212.26 1401.21,1212.26 1401.79,1212.26 1402.38,1212.26 1402.96,1212.26 1403.55,1212.26 1404.14,1212.26 1404.72,1212.26 1405.31,1212.26 1405.9,1212.26 1406.48,1212.26 1407.07,1212.26 1407.66,1212.26 1408.24,1212.26 1408.83,1212.26 1409.42,1212.26 1410,1212.26 1410.59,1212.26 1411.17,1212.26 1411.76,1212.26 1412.35,1212.26 1412.93,1212.26 1413.52,1212.26 1414.11,1212.26 1414.69,1212.26 1415.28,1212.26 1415.87,1212.26 1416.45,1212.26 1417.04,1212.26 1417.63,1212.26 1418.21,1212.26 1418.8,1212.26 1419.38,1212.26 1419.97,1212.26 1420.56,1212.26 1421.14,1212.26 1421.73,1212.26 1422.32,1212.26 1422.9,1212.26 1423.49,1212.26 1424.08,1212.26 1424.66,1212.26 1425.25,1212.26 1425.83,1212.26 1426.42,1212.26 1427.01,1212.26 1427.59,1212.26 1428.18,1212.26 1428.77,1212.26 1429.35,1212.26 1429.94,1212.26 1430.53,1212.26 1431.11,1212.26 1431.7,1212.26 1432.29,1212.26 1432.87,1212.26 1433.46,1212.26 1434.04,1212.26 1434.63,1212.26 1435.22,1212.26 1435.8,1212.26 1436.39,1212.26 1436.98,1212.26 1437.56,1212.26 1438.15,1212.26 1438.74,1212.26 1439.32,1212.26 1439.91,1212.26 1440.5,1212.26 1441.08,1212.26 1441.67,1212.26 1442.25,1212.26 1442.84,1212.26 1443.43,1212.26 1444.01,1212.26 1444.6,1212.26 1445.19,1212.26 1445.77,1212.26 1446.36,1212.26 1446.95,1212.26 1447.53,1212.26 1448.12,1212.26 1448.7,1212.26 1449.29,1212.26 1449.88,1212.26 1450.46,1212.26 1451.05,1212.26 1451.64,1212.26 1452.22,1212.26 1452.81,1212.26 1453.4,1212.26 1453.98,1212.26 1454.57,1212.26 1455.16,1212.26 1455.74,1212.26 1456.33,1212.26 1456.91,1212.26 1457.5,1212.26 1458.09,1212.26 1458.67,1212.26 1459.26,1212.26 1459.85,1212.26 1460.43,1212.26 1461.02,1212.26 1461.61,1212.26 1462.19,1212.26 1462.78,1212.26 1463.37,1212.26 1463.95,1212.26 1464.54,1212.26 1465.12,1212.26 1465.71,1212.26 1466.3,1212.26 1466.88,1212.26 1467.47,1212.26 1468.06,1212.26 1468.64,1212.26 1469.23,1212.26 1469.82,1212.26 1470.4,1212.26 1470.99,1212.26 1471.57,1212.26 1472.16,1212.26 1472.75,1212.26 1473.33,1212.26 1473.92,1212.26 1474.51,1212.26 1475.09,1212.26 1475.68,1212.26 1476.27,1212.26 1476.85,1212.26 1477.44,1212.26 1478.03,1212.26 1478.61,1212.26 1479.2,1212.26 1479.78,1212.26 1480.37,1212.26 1480.96,1212.26 1481.54,1212.26 1482.13,1212.26 1482.72,1212.26 1483.3,1212.26 1483.89,1212.26 1484.48,1212.26 1485.06,1212.26 1485.65,1212.26 1486.24,1212.26 1486.82,1212.26 1487.41,1212.26 1487.99,1212.26 1488.58,1212.26 1489.17,1212.26 1489.75,1212.26 1490.34,1212.26 1490.93,1212.26 1491.51,1212.26 1492.1,1212.26 1492.69,1212.26 1493.27,1212.26 1493.86,1212.26 1494.45,1212.26 1495.03,1212.26 1495.62,1212.26 1496.2,1212.26 1496.79,1212.26 1497.38,1212.26 1497.96,1212.26 1498.55,1212.26 1499.14,1212.26 1499.72,1212.26 1500.31,1212.26 1500.9,1212.26 1501.48,1212.26 1502.07,1212.26 1502.65,1212.26 1503.24,1212.26 1503.83,1212.26 1504.41,1212.26 1505,1212.26 1505.59,1212.26 1506.17,1212.26 1506.76,1212.26 1507.35,1212.26 1507.93,1212.26 1508.52,1212.26 1509.11,1212.26 1509.69,1212.26 1510.28,1212.26 1510.86,1212.26 1511.45,1212.26 1512.04,1212.26 1512.62,1212.26 1513.21,1212.26 1513.8,1212.26 1514.38,1212.26 1514.97,1212.26 1515.56,1212.26 1516.14,1212.26 1516.73,1212.26 1517.32,1212.26 1517.9,1212.26 1518.49,1212.26 1519.07,1212.26 1519.66,1212.26 1520.25,1212.26 1520.83,1212.26 1521.42,1212.26 1522.01,1212.26 1522.59,1212.26 1523.18,1212.26 1523.77,1212.26 1524.35,1212.26 1524.94,1212.26 1525.52,1212.26 1526.11,1212.26 1526.7,1212.26 1527.28,1212.26 1527.87,1212.26 1528.46,1212.26 1529.04,1212.26 1529.63,1212.26 1530.22,1212.26 1530.8,1212.26 1531.39,1212.26 1531.98,1212.26 1532.56,1212.26 1533.15,1212.26 1533.73,1212.26 1534.32,1212.26 1534.91,1212.26 1535.49,1212.26 1536.08,1212.26 1536.67,1212.26 1537.25,1212.26 1537.84,1212.26 1538.43,1212.26 1539.01,1212.26 1539.6,1212.26 1540.19,1212.26 1540.77,1212.26 1541.36,1212.26 1541.94,1212.26 1542.53,1212.26 1543.12,1212.26 1543.7,1212.26 1544.29,1212.26 1544.88,1212.26 1545.46,1212.26 1546.05,1212.26 1546.64,1212.26 1547.22,1212.26 1547.81,1212.26 1548.4,1212.26 1548.98,1212.26 1549.57,1212.26 1550.15,1212.26 1550.74,1212.26 1551.33,1212.26 1551.91,1212.26 1552.5,1212.26 1553.09,1212.26 1553.67,1212.26 1554.26,1212.26 1554.85,1212.26 1555.43,1212.26 1556.02,1212.26 1556.6,1212.26 1557.19,1212.26 1557.78,1212.26 1558.36,1212.26 1558.95,1212.26 1559.54,1212.26 1560.12,1212.26 1560.71,1212.26 1561.3,1212.26 1561.88,1212.26 1562.47,1212.26 1563.06,1212.26 1563.64,1212.26 1564.23,1212.26 1564.81,1212.26 1565.4,1212.26 1565.99,1212.26 1566.57,1212.26 1567.16,1212.26 1567.75,1212.26 1568.33,1212.26 1568.92,1212.26 1569.51,1212.26 1570.09,1212.26 1570.68,1212.26 1571.27,1212.26 1571.85,1212.26 1572.44,1212.26 1573.02,1212.26 1573.61,1212.26 1574.2,1212.26 1574.78,1212.26 1575.37,1212.26 1575.96,1212.26 1576.54,1212.26 1577.13,1212.26 1577.72,1212.26 1578.3,1212.26 1578.89,1212.26 1579.47,1212.26 1580.06,1212.26 1580.65,1212.26 1581.23,1212.26 1581.82,1212.26 1582.41,1212.26 1582.99,1212.26 1583.58,1212.26 1584.17,1212.26 1584.75,1212.26 1585.34,1212.26 1585.93,1212.26 1586.51,1212.26 1587.1,1212.26 1587.68,1212.26 1588.27,1212.26 1588.86,1212.26 1589.44,1212.26 1590.03,1212.26 1590.62,1212.26 1591.2,1212.26 1591.79,1212.26 1592.38,1212.26 1592.96,1212.26 1593.55,1212.26 1594.14,1212.26 1594.72,1212.26 1595.31,1212.26 1595.89,1212.26 1596.48,1212.26 1597.07,1212.26 1597.65,1212.26 1598.24,1212.26 1598.83,1212.26 1599.41,1212.26 1600,1212.26 1600.59,1212.26 1601.17,1212.26 1601.76,1212.26 1602.34,1212.26 1602.93,1212.26 1603.52,1212.26 1604.1,1212.26 1604.69,1212.26 1605.28,1212.26 1605.86,1212.26 1606.45,1212.26 1607.04,1212.26 1607.62,1212.26 1608.21,1212.26 1608.8,1212.26 1609.38,1212.26 1609.97,1212.26 1610.55,1212.26 1611.14,1212.26 1611.73,1212.26 1612.31,1212.26 1612.9,1212.26 1613.49,1212.26 1614.07,1212.26 1614.66,1212.26 1615.25,1212.26 1615.83,1212.26 1616.42,1212.26 1617.01,1212.26 1617.59,1212.26 1618.18,1212.26 1618.76,1212.26 1619.35,1212.26 1619.94,1212.26 1620.52,1212.26 1621.11,1212.26 1621.7,1212.26 1622.28,1212.26 1622.87,1212.26 1623.46,1212.26 1624.04,1212.26 1624.63,1212.26 1625.22,1212.26 1625.8,1212.26 1626.39,1212.26 1626.97,1212.26 1627.56,1212.26 1628.15,1212.26 1628.73,1212.26 1629.32,1212.26 1629.91,1212.26 1630.49,1212.26 1631.08,1212.26 1631.67,1212.26 1632.25,1212.26 1632.84,1212.26 1633.42,1212.26 1634.01,1212.26 1634.6,1212.26 1635.18,1212.26 1635.77,1212.26 1636.36,1212.26 1636.94,1212.26 1637.53,1212.26 1638.12,1212.26 1638.7,1212.26 1639.29,1212.26 1639.88,1212.26 1640.46,1212.26 1641.05,1212.26 1641.63,1212.26 1642.22,1212.26 1642.81,1212.26 1643.39,1212.26 1643.98,1212.26 1644.57,1212.26 1645.15,1212.26 1645.74,1212.26 1646.33,1212.26 1646.91,1212.26 1647.5,1212.26 1648.09,1212.26 1648.67,1212.26 1649.26,1212.26 1649.84,1212.26 1650.43,1212.26 1651.02,1212.26 1651.6,1212.26 1652.19,1212.26 1652.78,1212.26 1653.36,1212.26 1653.95,1212.26 1654.54,1212.26 1655.12,1212.26 1655.71,1212.26 1656.29,1212.26 1656.88,1212.26 1657.47,1212.26 1658.05,1212.26 1658.64,1212.26 1659.23,1212.26 1659.81,1212.26 1660.4,1212.26 1660.99,1212.26 1661.57,1212.26 1662.16,1212.26 1662.75,1212.26 1663.33,1212.26 1663.92,1212.26 1664.5,1212.26 1665.09,1212.26 1665.68,1212.26 1666.26,1212.26 1666.85,1212.26 1667.44,1212.26 1668.02,1212.26 1668.61,1212.26 1669.2,1212.26 1669.78,1212.26 1670.37,1212.26 1670.96,1212.26 1671.54,1212.26 1672.13,1212.26 1672.71,1212.26 1673.3,1212.26 1673.89,1212.26 1674.47,1212.26 1675.06,1212.26 1675.65,1212.26 1676.23,1212.26 1676.82,1212.26 1677.41,1212.26 1677.99,1212.26 1678.58,1212.26 1679.17,1212.26 1679.75,1212.26 1680.34,1212.26 1680.92,1212.26 1681.51,1212.26 1682.1,1212.26 1682.68,1212.26 1683.27,1212.26 1683.86,1212.26 1684.44,1212.26 1685.03,1212.26 1685.62,1212.26 1686.2,1212.26 1686.79,1212.26 1687.37,1212.26 1687.96,1212.26 1688.55,1212.26 1689.13,1212.26 1689.72,1212.26 1690.31,1212.26 1690.89,1212.26 1691.48,1212.26 1692.07,1212.26 1692.65,1212.26 1693.24,1212.26 1693.83,1212.26 1694.41,1212.26 1695,1212.26 1695.58,1212.26 1696.17,1212.26 1696.76,1212.26 1697.34,1212.26 1697.93,1212.26 1698.52,1212.26 1699.1,1212.26 1699.69,1212.26 1700.28,1212.26 1700.86,1212.26 1701.45,1212.26 1702.04,1212.26 1702.62,1212.26 1703.21,1212.26 1703.79,1212.26 1704.38,1212.26 1704.97,1212.26 1705.55,1212.26 1706.14,1212.26 1706.73,1212.26 1707.31,1212.26 1707.9,1212.26 1708.49,1212.26 1709.07,1212.26 1709.66,1212.26 1710.24,1212.26 1710.83,1212.26 1711.42,1212.26 1712,1212.26 1712.59,1212.26 1713.18,1212.26 1713.76,1212.26 1714.35,1212.26 1714.94,1212.26 1715.52,1212.26 1716.11,1212.26 1716.7,1212.26 1717.28,1212.26 1717.87,1212.26 1718.45,1212.26 1719.04,1212.26 1719.63,1212.26 1720.21,1212.26 1720.8,1212.26 1721.39,1212.26 1721.97,1212.26 1722.56,1212.26 1723.15,1212.26 1723.73,1212.26 1724.32,1212.26 1724.91,1212.26 1725.49,1212.26 1726.08,1212.26 1726.66,1212.26 1727.25,1212.26 1727.84,1212.26 1728.42,1212.26 1729.01,1212.26 1729.6,1212.26 1730.18,1212.26 1730.77,1212.26 1731.36,1212.26 1731.94,1212.26 1732.53,1212.26 1733.11,1212.26 1733.7,1212.26 1734.29,1212.26 1734.87,1212.26 1735.46,1212.26 1736.05,1212.26 1736.63,1212.26 1737.22,1212.26 1737.81,1212.26 1738.39,1212.26 1738.98,1212.26 1739.57,1212.26 1740.15,1212.26 1740.74,1212.26 1741.32,1212.26 1741.91,1212.26 1742.5,1212.26 1743.08,1212.26 1743.67,1212.26 1744.26,1212.26 1744.84,1212.26 1745.43,1212.26 1746.02,1212.26 1746.6,1212.26 1747.19,1212.26 1747.78,1212.26 1748.36,1212.26 1748.95,1212.26 1749.53,1212.26 1750.12,1212.26 1750.71,1212.26 1751.29,1212.26 1751.88,1212.26 1752.47,1212.26 1753.05,1212.26 1753.64,1212.26 1754.23,1212.26 1754.81,1212.26 1755.4,1212.26 1755.99,1212.26 1756.57,1212.26 1757.16,1212.26 1757.74,1212.26 1758.33,1212.26 1758.92,1212.26 1759.5,1212.26 1760.09,1212.26 1760.68,1212.26 1761.26,1212.26 1761.85,1212.26 1762.44,1212.26 1763.02,1212.26 1763.61,1212.26 1764.19,1212.26 1764.78,1212.26 1765.37,1212.26 1765.95,1212.26 1766.54,1212.26 1767.13,1212.26 1767.71,1212.26 1768.3,1212.26 1768.89,1212.26 1769.47,1212.26 1770.06,1212.26 1770.65,1212.26 1771.23,1212.26 1771.82,1212.26 1772.4,1212.26 1772.99,1212.26 1773.58,1212.26 1774.16,1212.26 1774.75,1212.26 1775.34,1212.26 1775.92,1212.26 1776.51,1212.26 1777.1,1212.26 1777.68,1212.26 1778.27,1212.26 1778.86,1212.26 1779.44,1212.26 1780.03,1212.26 1780.61,1212.26 1781.2,1212.26 1781.79,1212.26 1782.37,1212.26 1782.96,1212.26 1783.55,1212.26 1784.13,1212.26 1784.72,1212.26 1785.31,1212.26 1785.89,1212.26 1786.48,1212.26 1787.06,1212.26 1787.65,1212.26 1788.24,1212.26 1788.82,1212.26 1789.41,1212.26 1790,1212.26 1790.58,1212.26 1791.17,1212.26 1791.76,1212.26 1792.34,1212.26 1792.93,1212.26 1793.52,1212.26 1794.1,1212.26 1794.69,1212.26 1795.27,1212.26 1795.86,1212.26 1796.45,1212.26 1797.03,1212.26 1797.62,1212.26 1798.21,1212.26 1798.79,1212.26 1799.38,1212.26 1799.97,1212.26 1800.55,1212.26 1801.14,1212.26 1801.73,1212.26 1802.31,1212.26 1802.9,1212.26 1803.48,1212.26 1804.07,1212.26 1804.66,1212.26 1805.24,1212.26 1805.83,1212.26 1806.42,1212.26 1807,1212.26 1807.59,1212.26 1808.18,1212.26 1808.76,1212.26 1809.35,1212.26 1809.94,1212.26 1810.52,1212.26 1811.11,1212.26 1811.69,1212.26 1812.28,1212.26 1812.87,1212.26 1813.45,1212.26 1814.04,1212.26 1814.63,1212.26 1815.21,1212.26 1815.8,1212.26 1816.39,1212.26 1816.97,1212.26 1817.56,1212.26 1818.14,1212.26 1818.73,1212.26 1819.32,1212.26 1819.9,1212.26 1820.49,1212.26 1821.08,1212.26 1821.66,1212.26 1822.25,1212.26 1822.84,1212.26 1823.42,1212.26 1824.01,1212.26 1824.6,1212.26 1825.18,1212.26 1825.77,1212.26 1826.35,1212.26 1826.94,1212.26 1827.53,1212.26 1828.11,1212.26 1828.7,1212.26 1829.29,1212.26 1829.87,1212.26 1830.46,1212.26 1831.05,1212.26 1831.63,1212.26 1832.22,1212.26 1832.81,1212.26 1833.39,1212.26 1833.98,1212.26 1834.56,1212.26 1835.15,1212.26 1835.74,1212.26 1836.32,1212.26 1836.91,1212.26 1837.5,1212.26 1838.08,1212.26 1838.67,1212.26 1839.26,1212.26 1839.84,1212.26 1840.43,1212.26 1841.01,1212.26 1841.6,1212.26 1842.19,1212.26 1842.77,1212.26 1843.36,1212.26 1843.95,1212.26 1844.53,1212.26 1845.12,1212.26 1845.71,1212.26 1846.29,1212.26 1846.88,1212.26 1847.47,1212.26 1848.05,1212.26 1848.64,1212.26 1849.22,1212.26 1849.81,1212.26 1850.4,1212.26 1850.98,1212.26 1851.57,1212.26 1852.16,1212.26 1852.74,1212.26 1853.33,1212.26 1853.92,1212.26 1854.5,1212.26 1855.09,1212.26 1855.68,1212.26 1856.26,1212.26 1856.85,1212.26 1857.43,1212.26 1858.02,1212.26 1858.61,1212.26 1859.19,1212.26 1859.78,1212.26 1860.37,1212.26 1860.95,1212.26 1861.54,1212.26 1862.13,1212.26 1862.71,1212.26 1863.3,1212.26 1863.88,1212.26 1864.47,1212.26 1865.06,1212.26 1865.64,1212.26 1866.23,1212.26 1866.82,1212.26 1867.4,1212.26 1867.99,1212.26 1868.58,1212.26 1869.16,1212.26 1869.75,1212.26 1870.34,1212.26 1870.92,1212.26 1871.51,1212.26 1872.09,1212.26 1872.68,1212.26 1873.27,1212.26 1873.85,1212.26 1874.44,1212.26 1875.03,1212.26 1875.61,1212.26 1876.2,1212.26 1876.79,1212.26 1877.37,1212.26 1877.96,1212.26 1878.55,1212.26 1879.13,1212.26 1879.72,1212.26 1880.3,1212.26 1880.89,1212.26 1881.48,1212.26 1882.06,1212.26 1882.65,1212.26 1883.24,1212.26 1883.82,1212.26 1884.41,1212.26 1885,1212.26 1885.58,1212.26 1886.17,1212.26 1886.76,1212.26 1887.34,1212.26 1887.93,1212.26 1888.51,1212.26 1889.1,1212.26 1889.69,1212.26 1890.27,1212.26 1890.86,1212.26 1891.45,1212.26 1892.03,1212.26 1892.62,1212.26 1893.21,1212.26 1893.79,1212.26 1894.38,1212.26 1894.96,1212.26 1895.55,1212.26 1896.14,1212.26 1896.72,1212.26 1897.31,1212.26 1897.9,1212.26 1898.48,1212.26 1899.07,1212.26 1899.66,1212.26 1900.24,1212.26 1900.83,1212.26 1901.42,1212.26 1902,1212.26 1902.59,1212.26 1903.17,1212.26 1903.76,1212.26 1904.35,1212.26 1904.93,1212.26 1905.52,1212.26 1906.11,1212.26 1906.69,1212.26 1907.28,1212.26 1907.87,1212.26 1908.45,1212.26 1909.04,1212.26 1909.63,1212.26 1910.21,1212.26 1910.8,1212.26 1911.38,1212.26 1911.97,1212.26 1912.56,1212.26 1913.14,1212.26 1913.73,1212.26 1914.32,1212.26 1914.9,1212.26 1915.49,1212.26 1916.08,1212.26 1916.66,1212.26 1917.25,1212.26 1917.83,1212.26 1918.42,1212.26 1919.01,1212.26 1919.59,1212.26 1920.18,1212.26 1920.77,1212.26 1921.35,1212.26 1921.94,1212.26 1922.53,1212.26 1923.11,1212.26 1923.7,1212.26 1924.29,1212.26 1924.87,1212.26 1925.46,1212.26 1926.04,1212.26 1926.63,1212.26 1927.22,1212.26 1927.8,1212.26 1928.39,1212.26 1928.98,1212.26 1929.56,1212.26 1930.15,1212.26 1930.74,1212.26 1931.32,1212.26 1931.91,1212.26 1932.5,1212.26 1933.08,1212.26 1933.67,1212.26 1934.25,1212.26 1934.84,1212.26 1935.43,1212.26 1936.01,1212.26 1936.6,1212.26 1937.19,1212.26 1937.77,1212.26 1938.36,1212.26 1938.95,1212.26 1939.53,1212.26 1940.12,1212.26 1940.71,1212.26 1941.29,1212.26 1941.88,1212.26 1942.46,1212.26 1943.05,1212.26 1943.64,1212.26 1944.22,1212.26 1944.81,1212.26 1945.4,1212.26 1945.98,1212.26 1946.57,1212.26 1947.16,1212.26 1947.74,1212.26 1948.33,1212.26 1948.91,1212.26 1949.5,1212.26 1950.09,1212.26 1950.67,1212.26 1951.26,1212.26 1951.85,1212.26 1952.43,1212.26 1953.02,1212.26 1953.61,1212.26 1954.19,1212.26 1954.78,1212.26 1955.37,1212.26 1955.95,1212.26 1956.54,1212.26 1957.12,1212.26 1957.71,1212.26 1958.3,1212.26 1958.88,1212.26 1959.47,1212.26 1960.06,1212.26 1960.64,1212.26 1961.23,1212.26 1961.82,1212.26 1962.4,1212.26 1962.99,1212.26 1963.58,1212.26 1964.16,1212.26 1964.75,1212.26 1965.33,1212.26 1965.92,1212.26 1966.51,1212.26 1967.09,1212.26 1967.68,1212.26 1968.27,1212.26 1968.85,1212.26 1969.44,1212.26 1970.03,1212.26 1970.61,1212.26 1971.2,1212.26 1971.78,1212.26 1972.37,1212.26 1972.96,1212.26 1973.54,1212.26 1974.13,1212.26 1974.72,1212.26 1975.3,1212.26 1975.89,1212.26 1976.48,1212.26 1977.06,1212.26 1977.65,1212.26 1978.24,1212.26 1978.82,1212.26 1979.41,1212.26 1979.99,1212.26 1980.58,1212.26 1981.17,1212.26 1981.75,1212.26 1982.34,1212.26 1982.93,1212.26 1983.51,1212.26 1984.1,1212.26 1984.69,1212.26 1985.27,1212.26 1985.86,1212.26 1986.45,1212.26 1987.03,1212.26 1987.62,1212.26 1988.2,1212.26 1988.79,1212.26 1989.38,1212.26 1989.96,1212.26 1990.55,1212.26 1991.14,1212.26 1991.72,1212.26 1992.31,1212.26 1992.9,1212.26 1993.48,1212.26 1994.07,1212.26 1994.65,1212.26 1995.24,1212.26 1995.83,1212.26 1996.41,1212.26 1997,1212.26 1997.59,1212.26 1998.17,1212.26 1998.76,1212.26 1999.35,1212.26 1999.93,1212.26 2000.52,1212.26 2001.11,1212.26 2001.69,1212.26 2002.28,1212.26 2002.86,1212.26 2003.45,1212.26 2004.04,1212.26 2004.62,1212.26 2005.21,1212.26 2005.8,1212.26 2006.38,1212.26 2006.97,1212.26 2007.56,1212.26 2008.14,1212.26 2008.73,1212.26 2009.32,1212.26 2009.9,1212.26 2010.49,1212.26 2011.07,1212.26 2011.66,1212.26 2012.25,1212.26 2012.83,1212.26 2013.42,1212.26 2014.01,1212.26 2014.59,1212.26 2015.18,1212.26 2015.77,1212.26 2016.35,1212.26 2016.94,1212.26 2017.53,1212.26 2018.11,1212.26 2018.7,1212.26 2019.28,1212.26 2019.87,1212.26 2020.46,1212.26 2021.04,1212.26 2021.63,1212.26 2022.22,1212.26 2022.8,1212.26 2023.39,1212.26 2023.98,1212.26 2024.56,1212.26 2025.15,1212.26 2025.73,1212.26 2026.32,1212.26 2026.91,1212.26 2027.49,1212.26 2028.08,1212.26 2028.67,1212.26 2029.25,1212.26 2029.84,1212.26 2030.43,1212.26 2031.01,1212.26 2031.6,1212.26 2032.19,1212.26 2032.77,1212.26 2033.36,1212.26 2033.94,1212.26 2034.53,1212.26 2035.12,1212.26 2035.7,1212.26 2036.29,1212.26 2036.88,1212.26 2037.46,1212.26 2038.05,1212.26 2038.64,1212.26 2039.22,1212.26 2039.81,1212.26 2040.4,1212.26 2040.98,1212.26 2041.57,1212.26 2042.15,1212.26 2042.74,1212.26 2043.33,1212.26 2043.91,1212.26 2044.5,1212.26 2045.09,1212.26 2045.67,1212.26 2046.26,1212.26 2046.85,1212.26 2047.43,1212.26 2048.02,1212.26 2048.6,1212.26 2049.19,1212.26 2049.78,1212.26 2050.36,1212.26 2050.95,1212.26 2051.54,1212.26 2052.12,1212.26 2052.71,1212.26 2053.3,1212.26 2053.88,1212.26 2054.47,1212.26 2055.06,1212.26 2055.64,1212.26 2056.23,1212.26 2056.81,1212.26 2057.4,1212.26 2057.99,1212.26 2058.57,1212.26 2059.16,1212.26 2059.75,1212.26 2060.33,1212.26 2060.92,1212.26 2061.51,1212.26 2062.09,1212.26 2062.68,1212.26 2063.27,1212.26 2063.85,1212.26 2064.44,1212.26 2065.02,1212.26 2065.61,1212.26 2066.2,1212.26 2066.78,1212.26 2067.37,1212.26 2067.96,1212.26 2068.54,1212.26 2069.13,1212.26 2069.72,1212.26 2070.3,1212.26 2070.89,1212.26 2071.48,1212.26 2072.06,1212.26 2072.65,1212.26 2073.23,1212.26 2073.82,1212.26 2074.41,1212.26 2074.99,1212.26 2075.58,1212.26 2076.17,1212.26 2076.75,1212.26 2077.34,1212.26 2077.93,1212.26 2078.51,1212.26 2079.1,1212.26 2079.68,1212.26 2080.27,1212.26 2080.86,1212.26 2081.44,1212.26 2082.03,1212.26 2082.62,1212.26 2083.2,1212.26 2083.79,1212.26 2084.38,1212.26 2084.96,1212.26 2085.55,1212.26 2086.14,1212.26 2086.72,1212.26 2087.31,1212.26 2087.89,1212.26 2088.48,1212.26 2089.07,1212.26 2089.65,1212.26 2090.24,1212.26 2090.83,1212.26 2091.41,1212.26 2092,1212.26 2092.59,1212.26 2093.17,1212.26 2093.76,1212.26 2094.35,1212.26 2094.93,1212.26 2095.52,1212.26 2096.1,1212.26 2096.69,1212.26 2097.28,1212.26 2097.86,1212.26 2098.45,1212.26 2099.04,1212.26 2099.62,1212.26 2100.21,1212.26 2100.8,1212.26 2101.38,1212.26 2101.97,1212.26 2102.55,1212.26 2103.14,1212.26 2103.73,1212.26 2104.31,1212.26 2104.9,1212.26 2105.49,1212.26 2106.07,1212.26 2106.66,1212.26 2107.25,1212.26 2107.83,1212.26 2108.42,1212.26 2109.01,1212.26 2109.59,1212.26 2110.18,1212.26 2110.76,1212.26 2111.35,1212.26 2111.94,1212.26 2112.52,1212.26 2113.11,1212.26 2113.7,1212.26 2114.28,1212.26 2114.87,1212.26 2115.46,1212.26 2116.04,1212.26 2116.63,1212.26 2117.22,1212.26 2117.8,1212.26 2118.39,1212.26 2118.97,1212.26 2119.56,1212.26 2120.15,1212.26 2120.73,1212.26 2121.32,1212.26 2121.91,1212.26 2122.49,1212.26 2123.08,1212.26 2123.67,1212.26 2124.25,1212.26 2124.84,1212.26 2125.42,1212.26 2126.01,1212.26 2126.6,1212.26 2127.18,1212.26 2127.77,1212.26 2128.36,1212.26 2128.94,1212.26 2129.53,1212.26 2130.12,1212.26 2130.7,1212.26 2131.29,1212.26 2131.88,1212.26 2132.46,1212.26 2133.05,1212.26 2133.63,1212.26 2134.22,1212.26 2134.81,1212.26 2135.39,1212.26 2135.98,1212.26 2136.57,1212.26 2137.15,1212.26 2137.74,1212.26 2138.33,1212.26 2138.91,1212.26 2139.5,1212.26 2140.09,1212.26 2140.67,1212.26 2141.26,1212.26 2141.84,1212.26 2142.43,1212.26 2143.02,1212.26 2143.6,1212.26 2144.19,1212.26 2144.78,1212.26 2145.36,1212.26 2145.95,1212.26 2146.54,1212.26 2147.12,1212.26 2147.71,1212.26 2148.3,1212.26 2148.88,1212.26 2149.47,1212.26 2150.05,1212.26 2150.64,1212.26 2151.23,1212.26 2151.81,1212.26 2152.4,1212.26 2152.99,1212.26 2153.57,1212.26 2154.16,1212.26 2154.75,1212.26 2155.33,1212.26 2155.92,1212.26 2156.5,1212.26 2157.09,1212.26 2157.68,1212.26 2158.26,1212.26 \"/>\n<path clip-path=\"url(#clip572)\" d=\"M986.025 1212.22 L986.612 1212.22 L987.198 1212.22 L987.785 1212.22 L988.371 1212.22 L988.957 1212.22 L989.544 1212.22 L990.13 1212.22 L990.717 1212.22 L991.303 1212.22 L991.889 1212.22 L992.476 1212.22 L993.062 1212.22 L993.649 1212.22 L994.235 1212.22 L994.822 1212.22 L995.408 1212.22 L995.994 1212.22 L996.581 1212.22 L997.167 1212.22 L997.754 1212.22 L998.34 1212.22 L998.926 1212.22 L999.513 1212.22 L1000.1 1212.22 L1000.69 1212.22 L1001.27 1212.22 L1001.86 1212.22 L1002.44 1212.22 L1003.03 1212.22 L1003.62 1212.22 L1004.2 1212.22 L1004.79 1212.22 L1005.38 1212.22 L1005.96 1212.22 L1006.55 1212.22 L1007.14 1212.22 L1007.72 1212.22 L1008.31 1212.22 L1008.9 1212.22 L1009.48 1212.22 L1010.07 1212.22 L1010.65 1212.22 L1011.24 1212.22 L1011.83 1212.22 L1012.41 1212.22 L1013 1212.22 L1013.59 1212.22 L1014.17 1212.22 L1014.76 1212.22 L1015.35 1212.22 L1015.93 1212.22 L1016.52 1212.22 L1017.11 1212.22 L1017.69 1212.22 L1018.28 1212.22 L1018.86 1212.22 L1019.45 1212.22 L1020.04 1212.22 L1020.62 1212.22 L1021.21 1212.22 L1021.8 1212.22 L1022.38 1212.22 L1022.97 1212.22 L1023.56 1212.22 L1024.14 1212.22 L1024.73 1212.22 L1025.32 1212.22 L1025.9 1212.22 L1026.49 1212.22 L1027.07 1212.22 L1027.66 1212.22 L1028.25 1212.22 L1028.83 1212.22 L1029.42 1212.22 L1030.01 1212.22 L1030.59 1212.22 L1031.18 1212.22 L1031.77 1212.22 L1032.35 1212.22 L1032.94 1212.22 L1033.52 1212.22 L1034.11 1212.22 L1034.7 1212.22 L1035.28 1212.22 L1035.87 1212.22 L1036.46 1212.22 L1037.04 1212.22 L1037.63 1212.22 L1038.22 1212.22 L1038.8 1212.22 L1039.39 1212.22 L1039.98 1212.22 L1040.56 1212.22 L1041.15 1212.22 L1041.73 1212.22 L1042.32 1212.22 L1042.91 1212.22 L1043.49 1212.22 L1044.08 1212.22 L1044.67 1212.22 L1045.25 1212.22 L1045.84 1212.22 L1046.43 1212.22 L1047.01 1212.22 L1047.6 1212.22 L1048.19 1212.22 L1048.77 1212.22 L1049.36 1212.22 L1049.94 1212.22 L1050.53 1212.22 L1051.12 1212.22 L1051.7 1212.22 L1052.29 1212.22 L1052.88 1212.22 L1053.46 1212.22 L1054.05 1212.22 L1054.64 1212.22 L1055.22 1212.22 L1055.81 1212.22 L1056.39 1212.22 L1056.98 1212.22 L1057.57 1212.22 L1058.15 1212.22 L1058.74 1212.22 L1059.33 1212.22 L1059.91 1212.22 L1060.5 1212.22 L1061.09 1212.22 L1061.67 1212.22 L1062.26 1212.22 L1062.85 1212.22 L1063.43 1212.22 L1064.02 1212.22 L1064.6 1212.22 L1065.19 1212.22 L1065.78 1212.22 L1066.36 1212.22 L1066.95 1212.22 L1067.54 1212.22 L1068.12 1212.22 L1068.71 1212.22 L1069.3 1212.22 L1069.88 1212.22 L1070.47 1212.22 L1071.06 1212.22 L1071.64 1212.22 L1072.23 1212.22 L1072.81 1212.22 L1073.4 1212.22 L1073.99 1212.22 L1074.57 1212.22 L1075.16 1212.22 L1075.75 1212.22 L1076.33 1212.22 L1076.92 1212.22 L1077.51 1212.22 L1078.09 1212.22 L1078.68 1212.22 L1079.26 1212.22 L1079.85 1212.22 L1080.44 1212.22 L1081.02 1212.22 L1081.61 1212.22 L1082.2 1212.22 L1082.78 1212.22 L1083.37 1212.22 L1083.96 1212.22 L1084.54 1212.22 L1085.13 1212.22 L1085.72 1212.22 L1086.3 1212.22 L1086.89 1212.22 L1087.47 1212.22 L1088.06 1212.22 L1088.65 1212.22 L1089.23 1212.22 L1089.82 1212.22 L1090.41 1212.22 L1090.99 1212.22 L1091.58 1212.22 L1092.17 1212.22 L1092.75 1212.22 L1093.34 1212.22 L1093.93 1212.22 L1094.51 1212.22 L1095.1 1212.22 L1095.68 1212.22 L1096.27 1212.22 L1096.86 1212.22 L1097.44 1212.22 L1098.03 1212.22 L1098.62 1212.22 L1099.2 1212.22 L1099.79 1212.22 L1100.38 1212.22 L1100.96 1212.22 L1101.55 1212.22 L1102.14 1212.22 L1102.72 1212.22 L1103.31 1212.22 L1103.89 1212.22 L1104.48 1212.22 L1105.07 1212.22 L1105.65 1212.22 L1106.24 1212.22 L1106.83 1212.22 L1107.41 1212.22 L1108 1212.22 L1108.59 1212.22 L1109.17 1212.22 L1109.76 1212.22 L1110.34 1212.22 L1110.93 1212.22 L1111.52 1212.22 L1112.1 1212.22 L1112.69 1212.22 L1113.28 1212.22 L1113.86 1212.22 L1114.45 1212.22 L1115.04 1212.22 L1115.62 1212.22 L1116.21 1212.22 L1116.8 1212.22 L1117.38 1212.22 L1117.97 1212.22 L1118.55 1212.22 L1119.14 1212.22 L1119.73 1212.22 L1120.31 1212.22 L1120.9 1212.22 L1121.49 1212.22 L1122.07 1212.22 L1122.66 1212.22 L1123.25 1212.22 L1123.83 1212.22 L1124.42 1212.22 L1125.01 1212.22 L1125.59 1212.22 L1126.18 1212.22 L1126.76 1212.22 L1127.35 1212.22 L1127.94 1212.22 L1128.52 1212.22 L1129.11 1212.22 L1129.7 1212.22 L1130.28 1212.22 L1130.87 1212.22 L1131.46 1212.22 L1132.04 1212.22 L1132.63 1212.22 L1133.21 1212.22 L1133.8 1212.22 L1134.39 1212.22 L1134.97 1212.22 L1135.56 1212.22 L1136.15 1212.22 L1136.73 1212.22 L1137.32 1212.22 L1137.91 1212.22 L1138.49 1212.22 L1139.08 1212.22 L1139.67 1212.22 L1140.25 1212.22 L1140.84 1212.22 L1141.42 1212.22 L1142.01 1212.22 L1142.6 1212.22 L1143.18 1212.22 L1143.77 1212.22 L1144.36 1212.22 L1144.94 1212.22 L1145.53 1212.22 L1146.12 1212.22 L1146.7 1212.22 L1147.29 1212.22 L1147.88 1212.22 L1148.46 1212.22 L1149.05 1212.22 L1149.63 1212.22 L1150.22 1212.22 L1150.81 1212.22 L1151.39 1212.22 L1151.98 1212.22 L1152.57 1212.22 L1153.15 1212.22 L1153.74 1212.22 L1154.33 1212.22 L1154.91 1212.22 L1155.5 1212.22 L1156.09 1212.22 L1156.67 1212.22 L1157.26 1212.22 L1157.84 1212.22 L1158.43 1212.22 L1159.02 1212.22 L1159.6 1212.22 L1160.19 1212.22 L1160.78 1212.22 L1161.36 1212.22 L1161.95 1212.22 L1162.54 1212.22 L1163.12 1212.22 L1163.71 1212.22 L1164.29 1212.22 L1164.88 1212.22 L1165.47 1212.22 L1166.05 1212.22 L1166.64 1212.22 L1167.23 1212.22 L1167.81 1212.22 L1168.4 1212.22 L1168.99 1212.22 L1169.57 1212.22 L1170.16 1212.22 L1170.75 1212.22 L1171.33 1212.22 L1171.92 1212.22 L1172.5 1212.22 L1173.09 1212.22 L1173.68 1212.22 L1174.26 1212.22 L1174.85 1212.22 L1175.44 1212.22 L1176.02 1212.22 L1176.61 1212.22 L1177.2 1212.22 L1177.78 1212.22 L1178.37 1212.22 L1178.96 1212.22 L1179.54 1212.22 L1180.13 1212.22 L1180.71 1212.22 L1181.3 1212.22 L1181.89 1212.22 L1182.47 1212.22 L1183.06 1212.22 L1183.65 1212.22 L1184.23 1212.22 L1184.82 1212.22 L1185.41 1212.22 L1185.99 1212.22 L1186.58 1212.22 L1187.16 1212.22 L1187.75 1212.22 L1188.34 1212.22 L1188.92 1212.22 L1189.51 1212.22 L1190.1 1212.22 L1190.68 1212.22 L1191.27 1212.22 L1191.86 1212.22 L1192.44 1212.22 L1193.03 1212.22 L1193.62 1212.22 L1194.2 1212.22 L1194.79 1212.22 L1195.37 1212.22 L1195.96 1212.22 L1196.55 1212.22 L1197.13 1212.22 L1197.72 1212.22 L1198.31 1212.22 L1198.89 1212.22 L1199.48 1212.22 L1200.07 1212.22 L1200.65 1212.22 L1201.24 1212.22 L1201.83 1212.22 L1202.41 1212.22 L1203 1212.22 L1203.58 1212.22 L1204.17 1212.22 L1204.76 1212.22 L1205.34 1212.22 L1205.93 1212.22 L1206.52 1212.22 L1207.1 1212.22 L1207.69 1212.22 L1208.28 1212.22 L1208.86 1212.22 L1209.45 1212.22 L1210.03 1212.22 L1210.62 1212.22 L1211.21 1212.22 L1211.79 1212.22 L1212.38 1212.22 L1212.97 1212.22 L1213.55 1212.22 L1214.14 1212.22 L1214.73 1212.22 L1215.31 1212.22 L1215.9 1212.22 L1216.49 1212.22 L1217.07 1212.22 L1217.66 1212.22 L1218.24 1212.22 L1218.83 1212.22 L1219.42 1212.22 L1220 1212.22 L1220.59 1212.22 L1221.18 1212.22 L1221.76 1212.22 L1222.35 1212.22 L1222.94 1212.22 L1223.52 1212.22 L1224.11 1212.22 L1224.7 1212.22 L1225.28 1212.22 L1225.87 1212.22 L1226.45 1212.22 L1227.04 1212.22 L1227.63 1212.22 L1228.21 1212.22 L1228.8 1212.22 L1229.39 1212.22 L1229.97 1212.22 L1230.56 1212.22 L1231.15 1212.22 L1231.73 1212.22 L1232.32 1212.22 L1232.91 1212.22 L1233.49 1212.22 L1234.08 1212.22 L1234.66 1212.22 L1235.25 1212.22 L1235.84 1212.22 L1236.42 1212.22 L1237.01 1212.22 L1237.6 1212.22 L1238.18 1212.22 L1238.77 1212.22 L1239.36 1212.22 L1239.94 1212.22 L1240.53 1212.22 L1241.11 1212.22 L1241.7 1212.22 L1242.29 1212.22 L1242.87 1212.22 L1243.46 1212.22 L1244.05 1212.22 L1244.63 1212.22 L1245.22 1212.22 L1245.81 1212.22 L1246.39 1212.22 L1246.98 1212.22 L1247.57 1212.22 L1248.15 1212.22 L1248.74 1212.22 L1249.32 1212.22 L1249.91 1212.22 L1250.5 1212.22 L1251.08 1212.22 L1251.67 1212.22 L1252.26 1212.22 L1252.84 1212.22 L1253.43 1212.22 L1254.02 1212.22 L1254.6 1212.22 L1255.19 1212.22 L1255.78 1212.22 L1256.36 1212.22 L1256.95 1212.22 L1257.53 1212.22 L1258.12 1212.22 L1258.71 1212.22 L1259.29 1212.22 L1259.88 1212.22 L1260.47 1212.22 L1261.05 1212.22 L1261.64 1212.22 L1262.23 1212.22 L1262.81 1212.22 L1263.4 1212.22 L1263.98 1212.22 L1264.57 1212.22 L1265.16 1212.22 L1265.74 1212.22 L1266.33 1212.22 L1266.92 1212.22 L1267.5 1212.22 L1268.09 1212.22 L1268.68 1212.22 L1269.26 1212.22 L1269.85 1212.22 L1270.44 1212.22 L1271.02 1212.22 L1271.61 1212.22 L1272.19 1212.22 L1272.78 1212.22 L1273.37 1212.22 L1273.95 1212.22 L1274.54 1212.22 L1275.13 1212.22 L1275.71 1212.22 L1276.3 1212.22 L1276.89 1212.22 L1277.47 1212.22 L1278.06 1212.22 L1278.65 1212.22 L1279.23 1212.22 L1279.82 1212.22 L1280.4 1212.22 L1280.99 1212.22 L1281.58 1212.22 L1282.16 1212.22 L1282.75 1212.22 L1283.34 1212.22 L1283.92 1212.22 L1284.51 1212.22 L1285.1 1212.22 L1285.68 1212.22 L1286.27 1212.22 L1286.86 1212.22 L1287.44 1212.22 L1288.03 1212.22 L1288.61 1212.22 L1289.2 1212.22 L1289.79 1212.22 L1290.37 1212.22 L1290.96 1212.22 L1291.55 1212.22 L1292.13 1212.22 L1292.72 1212.22 L1293.31 1212.22 L1293.89 1212.22 L1294.48 1212.22 L1295.06 1212.22 L1295.65 1212.22 L1296.24 1212.22 L1296.82 1212.22 L1297.41 1212.22 L1298 1212.22 L1298.58 1212.22 L1299.17 1212.22 L1299.76 1212.22 L1300.34 1212.22 L1300.93 1212.22 L1301.52 1212.22 L1302.1 1212.22 L1302.69 1212.22 L1303.27 1212.22 L1303.86 1212.22 L1304.45 1212.22 L1305.03 1212.22 L1305.62 1212.22 L1306.21 1212.22 L1306.79 1212.22 L1307.38 1212.22 L1307.97 1212.22 L1308.55 1212.22 L1309.14 1212.22 L1309.73 1212.22 L1310.31 1212.22 L1310.9 1212.22 L1311.48 1212.22 L1312.07 1212.22 L1312.66 1212.22 L1313.24 1212.22 L1313.83 1212.22 L1314.42 1212.22 L1315 1212.22 L1315.59 1212.22 L1316.18 1212.22 L1316.76 1212.22 L1317.35 1212.22 L1317.93 1212.22 L1318.52 1212.22 L1319.11 1212.22 L1319.69 1212.22 L1320.28 1212.22 L1320.87 1212.22 L1321.45 1212.22 L1322.04 1212.22 L1322.63 1212.22 L1323.21 1212.22 L1323.8 1212.22 L1324.39 1212.22 L1324.97 1212.22 L1325.56 1212.22 L1326.14 1212.22 L1326.73 1212.22 L1327.32 1212.22 L1327.9 1212.22 L1328.49 1212.22 L1329.08 1212.22 L1329.66 1212.22 L1330.25 1212.22 L1330.84 1212.22 L1331.42 1212.22 L1332.01 1212.22 L1332.6 1212.22 L1333.18 1212.22 L1333.77 1212.22 L1334.35 1212.22 L1334.94 1212.22 L1335.53 1212.22 L1336.11 1212.22 L1336.7 1212.22 L1337.29 1212.22 L1337.87 1212.22 L1338.46 1212.22 L1339.05 1212.22 L1339.63 1212.22 L1340.22 1212.22 L1340.8 1212.22 L1341.39 1212.22 L1341.98 1212.22 L1342.56 1212.22 L1343.15 1212.22 L1343.74 1212.22 L1344.32 1212.22 L1344.91 1212.22 L1345.5 1212.22 L1346.08 1212.22 L1346.67 1212.22 L1347.26 1212.22 L1347.84 1212.22 L1348.43 1212.22 L1349.01 1212.22 L1349.6 1212.22 L1350.19 1212.22 L1350.77 1212.22 L1351.36 1212.22 L1351.95 1212.22 L1352.53 1212.22 L1353.12 1212.22 L1353.71 1212.22 L1354.29 1212.22 L1354.88 1212.22 L1355.47 1212.22 L1356.05 1212.22 L1356.64 1212.22 L1357.22 1212.22 L1357.81 1212.22 L1358.4 1212.22 L1358.98 1212.22 L1359.57 1212.22 L1360.16 1212.22 L1360.74 1212.22 L1361.33 1212.22 L1361.92 1212.22 L1362.5 1212.22 L1363.09 1212.22 L1363.68 1212.22 L1364.26 1212.22 L1364.85 1212.22 L1365.43 1212.22 L1366.02 1212.22 L1366.61 1212.22 L1367.19 1212.22 L1367.78 1212.22 L1368.37 1212.22 L1368.95 1212.22 L1369.54 1212.22 L1370.13 1212.22 L1370.71 1212.22 L1371.3 1212.22 L1371.88 1212.22 L1372.47 1212.22 L1373.06 1212.22 L1373.64 1212.22 L1374.23 1212.22 L1374.82 1212.22 L1375.4 1212.22 L1375.99 1212.22 L1376.58 1212.22 L1377.16 1212.22 L1377.75 1212.22 L1378.34 1212.22 L1378.92 1212.22 L1379.51 1212.22 L1380.09 1212.22 L1380.68 1212.22 L1381.27 1212.22 L1381.85 1212.22 L1382.44 1212.22 L1383.03 1212.22 L1383.61 1212.22 L1384.2 1212.22 L1384.79 1212.22 L1385.37 1212.22 L1385.96 1212.22 L1386.55 1212.22 L1387.13 1212.22 L1387.72 1212.22 L1388.3 1212.22 L1388.89 1212.22 L1389.48 1212.22 L1390.06 1212.22 L1390.65 1212.22 L1391.24 1212.22 L1391.82 1212.22 L1392.41 1212.22 L1393 1212.22 L1393.58 1212.22 L1394.17 1212.22 L1394.75 1212.22 L1395.34 1212.22 L1395.93 1212.22 L1396.51 1212.22 L1397.1 1212.22 L1397.69 1212.22 L1398.27 1212.22 L1398.86 1212.22 L1399.45 1212.22 L1400.03 1212.22 L1400.62 1212.22 L1401.21 1212.22 L1401.79 1212.22 L1402.38 1212.22 L1402.96 1212.22 L1403.55 1212.22 L1404.14 1212.22 L1404.72 1212.22 L1405.31 1212.22 L1405.9 1212.22 L1406.48 1212.22 L1407.07 1212.22 L1407.66 1212.22 L1408.24 1212.22 L1408.83 1212.22 L1409.42 1212.22 L1410 1212.22 L1410.59 1212.22 L1411.17 1212.22 L1411.76 1212.22 L1412.35 1212.22 L1412.93 1212.22 L1413.52 1212.22 L1414.11 1212.22 L1414.69 1212.22 L1415.28 1212.22 L1415.87 1212.22 L1416.45 1212.22 L1417.04 1212.22 L1417.63 1212.22 L1418.21 1212.22 L1418.8 1212.22 L1419.38 1212.22 L1419.97 1212.22 L1420.56 1212.22 L1421.14 1212.22 L1421.73 1212.22 L1422.32 1212.22 L1422.9 1212.22 L1423.49 1212.22 L1424.08 1212.22 L1424.66 1212.22 L1425.25 1212.22 L1425.83 1212.22 L1426.42 1212.22 L1427.01 1212.22 L1427.59 1212.22 L1428.18 1212.22 L1428.77 1212.22 L1429.35 1212.22 L1429.94 1212.22 L1430.53 1212.22 L1431.11 1212.22 L1431.7 1212.22 L1432.29 1212.22 L1432.87 1212.22 L1433.46 1212.22 L1434.04 1212.22 L1434.63 1212.22 L1435.22 1212.22 L1435.8 1212.22 L1436.39 1212.22 L1436.98 1212.22 L1437.56 1212.22 L1438.15 1212.22 L1438.74 1212.22 L1439.32 1212.22 L1439.91 1212.22 L1440.5 1212.22 L1441.08 1212.22 L1441.67 1212.22 L1442.25 1212.22 L1442.84 1212.22 L1443.43 1212.22 L1444.01 1212.22 L1444.6 1212.22 L1445.19 1212.22 L1445.77 1212.22 L1446.36 1212.22 L1446.95 1212.22 L1447.53 1212.22 L1448.12 1212.22 L1448.7 1212.22 L1449.29 1212.22 L1449.88 1212.22 L1450.46 1212.22 L1451.05 1212.22 L1451.64 1212.22 L1452.22 1212.22 L1452.81 1212.22 L1453.4 1212.22 L1453.98 1212.22 L1454.57 1212.22 L1455.16 1212.22 L1455.74 1212.22 L1456.33 1212.22 L1456.91 1212.22 L1457.5 1212.22 L1458.09 1212.22 L1458.67 1212.22 L1459.26 1212.22 L1459.85 1212.22 L1460.43 1212.22 L1461.02 1212.22 L1461.61 1212.22 L1462.19 1212.22 L1462.78 1212.22 L1463.37 1212.22 L1463.95 1212.22 L1464.54 1212.22 L1465.12 1212.22 L1465.71 1212.22 L1466.3 1212.22 L1466.88 1212.22 L1467.47 1212.22 L1468.06 1212.22 L1468.64 1212.22 L1469.23 1212.22 L1469.82 1212.22 L1470.4 1212.22 L1470.99 1212.22 L1471.57 1212.22 L1472.16 1212.22 L1472.75 1212.22 L1473.33 1212.22 L1473.92 1212.22 L1474.51 1212.22 L1475.09 1212.22 L1475.68 1212.22 L1476.27 1212.22 L1476.85 1212.22 L1477.44 1212.22 L1478.03 1212.22 L1478.61 1212.22 L1479.2 1212.22 L1479.78 1212.22 L1480.37 1212.22 L1480.96 1212.22 L1481.54 1212.22 L1482.13 1212.22 L1482.72 1212.22 L1483.3 1212.22 L1483.89 1212.22 L1484.48 1212.22 L1485.06 1212.22 L1485.65 1212.22 L1486.24 1212.22 L1486.82 1212.22 L1487.41 1212.22 L1487.99 1212.22 L1488.58 1212.22 L1489.17 1212.22 L1489.75 1212.22 L1490.34 1212.22 L1490.93 1212.22 L1491.51 1212.22 L1492.1 1212.22 L1492.69 1212.22 L1493.27 1212.22 L1493.86 1212.22 L1494.45 1212.22 L1495.03 1212.22 L1495.62 1212.22 L1496.2 1212.22 L1496.79 1212.22 L1497.38 1212.22 L1497.96 1212.22 L1498.55 1212.22 L1499.14 1212.22 L1499.72 1212.22 L1500.31 1212.22 L1500.9 1212.22 L1501.48 1212.22 L1502.07 1212.22 L1502.65 1212.22 L1503.24 1212.22 L1503.83 1212.22 L1504.41 1212.22 L1505 1212.22 L1505.59 1212.22 L1506.17 1212.22 L1506.76 1212.22 L1507.35 1212.22 L1507.93 1212.22 L1508.52 1212.22 L1509.11 1212.22 L1509.69 1212.22 L1510.28 1212.22 L1510.86 1212.22 L1511.45 1212.22 L1512.04 1212.22 L1512.62 1212.22 L1513.21 1212.22 L1513.8 1212.22 L1514.38 1212.22 L1514.97 1212.22 L1515.56 1212.22 L1516.14 1212.22 L1516.73 1212.22 L1517.32 1212.22 L1517.9 1212.22 L1518.49 1212.22 L1519.07 1212.22 L1519.66 1212.22 L1520.25 1212.22 L1520.83 1212.22 L1521.42 1212.22 L1522.01 1212.22 L1522.59 1212.22 L1523.18 1212.22 L1523.77 1212.22 L1524.35 1212.22 L1524.94 1212.22 L1525.52 1212.22 L1526.11 1212.22 L1526.7 1212.22 L1527.28 1212.22 L1527.87 1212.22 L1528.46 1212.22 L1529.04 1212.22 L1529.63 1212.22 L1530.22 1212.22 L1530.8 1212.22 L1531.39 1212.22 L1531.98 1212.22 L1532.56 1212.22 L1533.15 1212.22 L1533.73 1212.22 L1534.32 1212.22 L1534.91 1212.22 L1535.49 1212.22 L1536.08 1212.22 L1536.67 1212.22 L1537.25 1212.22 L1537.84 1212.22 L1538.43 1212.22 L1539.01 1212.22 L1539.6 1212.22 L1540.19 1212.22 L1540.77 1212.22 L1541.36 1212.22 L1541.94 1212.22 L1542.53 1212.22 L1543.12 1212.22 L1543.7 1212.22 L1544.29 1212.22 L1544.88 1212.22 L1545.46 1212.22 L1546.05 1212.22 L1546.64 1212.22 L1547.22 1212.22 L1547.81 1212.22 L1548.4 1212.22 L1548.98 1212.22 L1549.57 1212.22 L1550.15 1212.22 L1550.74 1212.22 L1551.33 1212.22 L1551.91 1212.22 L1552.5 1212.22 L1553.09 1212.22 L1553.67 1212.22 L1554.26 1212.22 L1554.85 1212.22 L1555.43 1212.22 L1556.02 1212.22 L1556.6 1212.22 L1557.19 1212.22 L1557.78 1212.22 L1558.36 1212.22 L1558.95 1212.22 L1559.54 1212.22 L1560.12 1212.22 L1560.71 1212.22 L1561.3 1212.22 L1561.88 1212.22 L1562.47 1212.22 L1563.06 1212.22 L1563.64 1212.22 L1564.23 1212.22 L1564.81 1212.22 L1565.4 1212.22 L1565.99 1212.22 L1566.57 1212.22 L1567.16 1212.22 L1567.75 1212.22 L1568.33 1212.22 L1568.92 1212.22 L1569.51 1212.22 L1570.09 1212.22 L1570.68 1212.22 L1571.27 1212.22 L1571.85 1212.22 L1572.44 1212.22 L1573.02 1212.22 L1573.61 1212.22 L1574.2 1212.22 L1574.78 1212.22 L1575.37 1212.22 L1575.96 1212.22 L1576.54 1212.22 L1577.13 1212.22 L1577.72 1212.22 L1578.3 1212.22 L1578.89 1212.22 L1579.47 1212.22 L1580.06 1212.22 L1580.65 1212.22 L1581.23 1212.22 L1581.82 1212.22 L1582.41 1212.22 L1582.99 1212.22 L1583.58 1212.22 L1584.17 1212.22 L1584.75 1212.22 L1585.34 1212.22 L1585.93 1212.22 L1586.51 1212.22 L1587.1 1212.22 L1587.68 1212.22 L1588.27 1212.22 L1588.86 1212.22 L1589.44 1212.22 L1590.03 1212.22 L1590.62 1212.22 L1591.2 1212.22 L1591.79 1212.22 L1592.38 1212.22 L1592.96 1212.22 L1593.55 1212.22 L1594.14 1212.22 L1594.72 1212.22 L1595.31 1212.22 L1595.89 1212.22 L1596.48 1212.22 L1597.07 1212.22 L1597.65 1212.22 L1598.24 1212.22 L1598.83 1212.22 L1599.41 1212.22 L1600 1212.22 L1600.59 1212.22 L1601.17 1212.22 L1601.76 1212.22 L1602.34 1212.22 L1602.93 1212.22 L1603.52 1212.22 L1604.1 1212.22 L1604.69 1212.22 L1605.28 1212.22 L1605.86 1212.22 L1606.45 1212.22 L1607.04 1212.22 L1607.62 1212.22 L1608.21 1212.22 L1608.8 1212.22 L1609.38 1212.22 L1609.97 1212.22 L1610.55 1212.22 L1611.14 1212.22 L1611.73 1212.22 L1612.31 1212.22 L1612.9 1212.22 L1613.49 1212.22 L1614.07 1212.22 L1614.66 1212.22 L1615.25 1212.22 L1615.83 1212.22 L1616.42 1212.22 L1617.01 1212.22 L1617.59 1212.22 L1618.18 1212.22 L1618.76 1212.22 L1619.35 1212.22 L1619.94 1212.22 L1620.52 1212.22 L1621.11 1212.22 L1621.7 1212.22 L1622.28 1212.22 L1622.87 1212.22 L1623.46 1212.22 L1624.04 1212.22 L1624.63 1212.22 L1625.22 1212.22 L1625.8 1212.22 L1626.39 1212.22 L1626.97 1212.22 L1627.56 1212.22 L1628.15 1212.22 L1628.73 1212.22 L1629.32 1212.22 L1629.91 1212.22 L1630.49 1212.22 L1631.08 1212.22 L1631.67 1212.22 L1632.25 1212.22 L1632.84 1212.22 L1633.42 1212.22 L1634.01 1212.22 L1634.6 1212.22 L1635.18 1212.22 L1635.77 1212.22 L1636.36 1212.22 L1636.94 1212.22 L1637.53 1212.22 L1638.12 1212.22 L1638.7 1212.22 L1639.29 1212.22 L1639.88 1212.22 L1640.46 1212.22 L1641.05 1212.22 L1641.63 1212.22 L1642.22 1212.22 L1642.81 1212.22 L1643.39 1212.22 L1643.98 1212.22 L1644.57 1212.22 L1645.15 1212.22 L1645.74 1212.22 L1646.33 1212.22 L1646.91 1212.22 L1647.5 1212.22 L1648.09 1212.22 L1648.67 1212.22 L1649.26 1212.22 L1649.84 1212.22 L1650.43 1212.22 L1651.02 1212.22 L1651.6 1212.22 L1652.19 1212.22 L1652.78 1212.22 L1653.36 1212.22 L1653.95 1212.22 L1654.54 1212.22 L1655.12 1212.22 L1655.71 1212.22 L1656.29 1212.22 L1656.88 1212.22 L1657.47 1212.22 L1658.05 1212.22 L1658.64 1212.22 L1659.23 1212.22 L1659.81 1212.22 L1660.4 1212.22 L1660.99 1212.22 L1661.57 1212.22 L1662.16 1212.22 L1662.75 1212.22 L1663.33 1212.22 L1663.92 1212.22 L1664.5 1212.22 L1665.09 1212.22 L1665.68 1212.22 L1666.26 1212.22 L1666.85 1212.22 L1667.44 1212.22 L1668.02 1212.22 L1668.61 1212.22 L1669.2 1212.22 L1669.78 1212.22 L1670.37 1212.22 L1670.96 1212.22 L1671.54 1212.22 L1672.13 1212.22 L1672.71 1212.22 L1673.3 1212.22 L1673.89 1212.22 L1674.47 1212.22 L1675.06 1212.22 L1675.65 1212.22 L1676.23 1212.22 L1676.82 1212.22 L1677.41 1212.22 L1677.99 1212.22 L1678.58 1212.22 L1679.17 1212.22 L1679.75 1212.22 L1680.34 1212.22 L1680.92 1212.22 L1681.51 1212.22 L1682.1 1212.22 L1682.68 1212.22 L1683.27 1212.22 L1683.86 1212.22 L1684.44 1212.22 L1685.03 1212.22 L1685.62 1212.22 L1686.2 1212.22 L1686.79 1212.22 L1687.37 1212.22 L1687.96 1212.22 L1688.55 1212.22 L1689.13 1212.22 L1689.72 1212.22 L1690.31 1212.22 L1690.89 1212.22 L1691.48 1212.22 L1692.07 1212.22 L1692.65 1212.22 L1693.24 1212.22 L1693.83 1212.22 L1694.41 1212.22 L1695 1212.22 L1695.58 1212.22 L1696.17 1212.22 L1696.76 1212.22 L1697.34 1212.22 L1697.93 1212.22 L1698.52 1212.22 L1699.1 1212.22 L1699.69 1212.22 L1700.28 1212.22 L1700.86 1212.22 L1701.45 1212.22 L1702.04 1212.22 L1702.62 1212.22 L1703.21 1212.22 L1703.79 1212.22 L1704.38 1212.22 L1704.97 1212.22 L1705.55 1212.22 L1706.14 1212.22 L1706.73 1212.22 L1707.31 1212.22 L1707.9 1212.22 L1708.49 1212.22 L1709.07 1212.22 L1709.66 1212.22 L1710.24 1212.22 L1710.83 1212.22 L1711.42 1212.22 L1712 1212.22 L1712.59 1212.22 L1713.18 1212.22 L1713.76 1212.22 L1714.35 1212.22 L1714.94 1212.22 L1715.52 1212.22 L1716.11 1212.22 L1716.7 1212.22 L1717.28 1212.22 L1717.87 1212.22 L1718.45 1212.22 L1719.04 1212.22 L1719.63 1212.22 L1720.21 1212.22 L1720.8 1212.22 L1721.39 1212.22 L1721.97 1212.22 L1722.56 1212.22 L1723.15 1212.22 L1723.73 1212.22 L1724.32 1212.22 L1724.91 1212.22 L1725.49 1212.22 L1726.08 1212.22 L1726.66 1212.22 L1727.25 1212.22 L1727.84 1212.22 L1728.42 1212.22 L1729.01 1212.22 L1729.6 1212.22 L1730.18 1212.22 L1730.77 1212.22 L1731.36 1212.22 L1731.94 1212.22 L1732.53 1212.22 L1733.11 1212.22 L1733.7 1212.22 L1734.29 1212.22 L1734.87 1212.22 L1735.46 1212.22 L1736.05 1212.22 L1736.63 1212.22 L1737.22 1212.22 L1737.81 1212.22 L1738.39 1212.22 L1738.98 1212.22 L1739.57 1212.22 L1740.15 1212.22 L1740.74 1212.22 L1741.32 1212.22 L1741.91 1212.22 L1742.5 1212.22 L1743.08 1212.22 L1743.67 1212.22 L1744.26 1212.22 L1744.84 1212.22 L1745.43 1212.22 L1746.02 1212.22 L1746.6 1212.22 L1747.19 1212.22 L1747.78 1212.22 L1748.36 1212.22 L1748.95 1212.22 L1749.53 1212.22 L1750.12 1212.22 L1750.71 1212.22 L1751.29 1212.22 L1751.88 1212.22 L1752.47 1212.22 L1753.05 1212.22 L1753.64 1212.22 L1754.23 1212.22 L1754.81 1212.22 L1755.4 1212.22 L1755.99 1212.22 L1756.57 1212.22 L1757.16 1212.22 L1757.74 1212.22 L1758.33 1212.22 L1758.92 1212.22 L1759.5 1212.22 L1760.09 1212.22 L1760.68 1212.22 L1761.26 1212.22 L1761.85 1212.22 L1762.44 1212.22 L1763.02 1212.22 L1763.61 1212.22 L1764.19 1212.22 L1764.78 1212.22 L1765.37 1212.22 L1765.95 1212.22 L1766.54 1212.22 L1767.13 1212.22 L1767.71 1212.22 L1768.3 1212.22 L1768.89 1212.22 L1769.47 1212.22 L1770.06 1212.22 L1770.65 1212.22 L1771.23 1212.22 L1771.82 1212.22 L1772.4 1212.22 L1772.99 1212.22 L1773.58 1212.22 L1774.16 1212.22 L1774.75 1212.22 L1775.34 1212.22 L1775.92 1212.22 L1776.51 1212.22 L1777.1 1212.22 L1777.68 1212.22 L1778.27 1212.22 L1778.86 1212.22 L1779.44 1212.22 L1780.03 1212.22 L1780.61 1212.22 L1781.2 1212.22 L1781.79 1212.22 L1782.37 1212.22 L1782.96 1212.22 L1783.55 1212.22 L1784.13 1212.22 L1784.72 1212.22 L1785.31 1212.22 L1785.89 1212.22 L1786.48 1212.22 L1787.06 1212.22 L1787.65 1212.22 L1788.24 1212.22 L1788.82 1212.22 L1789.41 1212.22 L1790 1212.22 L1790.58 1212.22 L1791.17 1212.22 L1791.76 1212.22 L1792.34 1212.22 L1792.93 1212.22 L1793.52 1212.22 L1794.1 1212.22 L1794.69 1212.22 L1795.27 1212.22 L1795.86 1212.22 L1796.45 1212.22 L1797.03 1212.22 L1797.62 1212.22 L1798.21 1212.22 L1798.79 1212.22 L1799.38 1212.22 L1799.97 1212.22 L1800.55 1212.22 L1801.14 1212.22 L1801.73 1212.22 L1802.31 1212.22 L1802.9 1212.22 L1803.48 1212.22 L1804.07 1212.22 L1804.66 1212.22 L1805.24 1212.22 L1805.83 1212.22 L1806.42 1212.22 L1807 1212.22 L1807.59 1212.22 L1808.18 1212.22 L1808.76 1212.22 L1809.35 1212.22 L1809.94 1212.22 L1810.52 1212.22 L1811.11 1212.22 L1811.69 1212.22 L1812.28 1212.22 L1812.87 1212.22 L1813.45 1212.22 L1814.04 1212.22 L1814.63 1212.22 L1815.21 1212.22 L1815.8 1212.22 L1816.39 1212.22 L1816.97 1212.22 L1817.56 1212.22 L1818.14 1212.22 L1818.73 1212.22 L1819.32 1212.22 L1819.9 1212.22 L1820.49 1212.22 L1821.08 1212.22 L1821.66 1212.22 L1822.25 1212.22 L1822.84 1212.22 L1823.42 1212.22 L1824.01 1212.22 L1824.6 1212.22 L1825.18 1212.22 L1825.77 1212.22 L1826.35 1212.22 L1826.94 1212.22 L1827.53 1212.22 L1828.11 1212.22 L1828.7 1212.22 L1829.29 1212.22 L1829.87 1212.22 L1830.46 1212.22 L1831.05 1212.22 L1831.63 1212.22 L1832.22 1212.22 L1832.81 1212.22 L1833.39 1212.22 L1833.98 1212.22 L1834.56 1212.22 L1835.15 1212.22 L1835.74 1212.22 L1836.32 1212.22 L1836.91 1212.22 L1837.5 1212.22 L1838.08 1212.22 L1838.67 1212.22 L1839.26 1212.22 L1839.84 1212.22 L1840.43 1212.22 L1841.01 1212.22 L1841.6 1212.22 L1842.19 1212.22 L1842.77 1212.22 L1843.36 1212.22 L1843.95 1212.22 L1844.53 1212.22 L1845.12 1212.22 L1845.71 1212.22 L1846.29 1212.22 L1846.88 1212.22 L1847.47 1212.22 L1848.05 1212.22 L1848.64 1212.22 L1849.22 1212.22 L1849.81 1212.22 L1850.4 1212.22 L1850.98 1212.22 L1851.57 1212.22 L1852.16 1212.22 L1852.74 1212.22 L1853.33 1212.22 L1853.92 1212.22 L1854.5 1212.22 L1855.09 1212.22 L1855.68 1212.22 L1856.26 1212.22 L1856.85 1212.22 L1857.43 1212.22 L1858.02 1212.22 L1858.61 1212.22 L1859.19 1212.22 L1859.78 1212.22 L1860.37 1212.22 L1860.95 1212.22 L1861.54 1212.22 L1862.13 1212.22 L1862.71 1212.22 L1863.3 1212.22 L1863.88 1212.22 L1864.47 1212.22 L1865.06 1212.22 L1865.64 1212.22 L1866.23 1212.22 L1866.82 1212.22 L1867.4 1212.22 L1867.99 1212.22 L1868.58 1212.22 L1869.16 1212.22 L1869.75 1212.22 L1870.34 1212.22 L1870.92 1212.22 L1871.51 1212.22 L1872.09 1212.22 L1872.68 1212.22 L1873.27 1212.22 L1873.85 1212.22 L1874.44 1212.22 L1875.03 1212.22 L1875.61 1212.22 L1876.2 1212.22 L1876.79 1212.22 L1877.37 1212.22 L1877.96 1212.22 L1878.55 1212.22 L1879.13 1212.22 L1879.72 1212.22 L1880.3 1212.22 L1880.89 1212.22 L1881.48 1212.22 L1882.06 1212.22 L1882.65 1212.22 L1883.24 1212.22 L1883.82 1212.22 L1884.41 1212.22 L1885 1212.22 L1885.58 1212.22 L1886.17 1212.22 L1886.76 1212.22 L1887.34 1212.22 L1887.93 1212.22 L1888.51 1212.22 L1889.1 1212.22 L1889.69 1212.22 L1890.27 1212.22 L1890.86 1212.22 L1891.45 1212.22 L1892.03 1212.22 L1892.62 1212.22 L1893.21 1212.22 L1893.79 1212.22 L1894.38 1212.22 L1894.96 1212.22 L1895.55 1212.22 L1896.14 1212.22 L1896.72 1212.22 L1897.31 1212.22 L1897.9 1212.22 L1898.48 1212.22 L1899.07 1212.22 L1899.66 1212.22 L1900.24 1212.22 L1900.83 1212.22 L1901.42 1212.22 L1902 1212.22 L1902.59 1212.22 L1903.17 1212.22 L1903.76 1212.22 L1904.35 1212.22 L1904.93 1212.22 L1905.52 1212.22 L1906.11 1212.22 L1906.69 1212.22 L1907.28 1212.22 L1907.87 1212.22 L1908.45 1212.22 L1909.04 1212.22 L1909.63 1212.22 L1910.21 1212.22 L1910.8 1212.22 L1911.38 1212.22 L1911.97 1212.22 L1912.56 1212.22 L1913.14 1212.22 L1913.73 1212.22 L1914.32 1212.22 L1914.9 1212.22 L1915.49 1212.22 L1916.08 1212.22 L1916.66 1212.22 L1917.25 1212.22 L1917.83 1212.22 L1918.42 1212.22 L1919.01 1212.22 L1919.59 1212.22 L1920.18 1212.22 L1920.77 1212.22 L1921.35 1212.22 L1921.94 1212.22 L1922.53 1212.22 L1923.11 1212.22 L1923.7 1212.22 L1924.29 1212.22 L1924.87 1212.22 L1925.46 1212.22 L1926.04 1212.22 L1926.63 1212.22 L1927.22 1212.22 L1927.8 1212.22 L1928.39 1212.22 L1928.98 1212.22 L1929.56 1212.22 L1930.15 1212.22 L1930.74 1212.22 L1931.32 1212.22 L1931.91 1212.22 L1932.5 1212.22 L1933.08 1212.22 L1933.67 1212.22 L1934.25 1212.22 L1934.84 1212.22 L1935.43 1212.22 L1936.01 1212.22 L1936.6 1212.22 L1937.19 1212.22 L1937.77 1212.22 L1938.36 1212.22 L1938.95 1212.22 L1939.53 1212.22 L1940.12 1212.22 L1940.71 1212.22 L1941.29 1212.22 L1941.88 1212.22 L1942.46 1212.22 L1943.05 1212.22 L1943.64 1212.22 L1944.22 1212.22 L1944.81 1212.22 L1945.4 1212.22 L1945.98 1212.22 L1946.57 1212.22 L1947.16 1212.22 L1947.74 1212.22 L1948.33 1212.22 L1948.91 1212.22 L1949.5 1212.22 L1950.09 1212.22 L1950.67 1212.22 L1951.26 1212.22 L1951.85 1212.22 L1952.43 1212.22 L1953.02 1212.22 L1953.61 1212.22 L1954.19 1212.22 L1954.78 1212.22 L1955.37 1212.22 L1955.95 1212.22 L1956.54 1212.22 L1957.12 1212.22 L1957.71 1212.22 L1958.3 1212.22 L1958.88 1212.22 L1959.47 1212.22 L1960.06 1212.22 L1960.64 1212.22 L1961.23 1212.22 L1961.82 1212.22 L1962.4 1212.22 L1962.99 1212.22 L1963.58 1212.22 L1964.16 1212.22 L1964.75 1212.22 L1965.33 1212.22 L1965.92 1212.22 L1966.51 1212.22 L1967.09 1212.22 L1967.68 1212.22 L1968.27 1212.22 L1968.85 1212.22 L1969.44 1212.22 L1970.03 1212.22 L1970.61 1212.22 L1971.2 1212.22 L1971.78 1212.22 L1972.37 1212.22 L1972.96 1212.22 L1973.54 1212.22 L1974.13 1212.22 L1974.72 1212.22 L1975.3 1212.22 L1975.89 1212.22 L1976.48 1212.22 L1977.06 1212.22 L1977.65 1212.22 L1978.24 1212.22 L1978.82 1212.22 L1979.41 1212.22 L1979.99 1212.22 L1980.58 1212.22 L1981.17 1212.22 L1981.75 1212.22 L1982.34 1212.22 L1982.93 1212.22 L1983.51 1212.22 L1984.1 1212.22 L1984.69 1212.22 L1985.27 1212.22 L1985.86 1212.22 L1986.45 1212.22 L1987.03 1212.22 L1987.62 1212.22 L1988.2 1212.22 L1988.79 1212.22 L1989.38 1212.22 L1989.96 1212.22 L1990.55 1212.22 L1991.14 1212.22 L1991.72 1212.22 L1992.31 1212.22 L1992.9 1212.22 L1993.48 1212.22 L1994.07 1212.22 L1994.65 1212.22 L1995.24 1212.22 L1995.83 1212.22 L1996.41 1212.22 L1997 1212.22 L1997.59 1212.22 L1998.17 1212.22 L1998.76 1212.22 L1999.35 1212.22 L1999.93 1212.22 L2000.52 1212.22 L2001.11 1212.22 L2001.69 1212.22 L2002.28 1212.22 L2002.86 1212.22 L2003.45 1212.22 L2004.04 1212.22 L2004.62 1212.22 L2005.21 1212.22 L2005.8 1212.22 L2006.38 1212.22 L2006.97 1212.22 L2007.56 1212.22 L2008.14 1212.22 L2008.73 1212.22 L2009.32 1212.22 L2009.9 1212.22 L2010.49 1212.22 L2011.07 1212.22 L2011.66 1212.22 L2012.25 1212.22 L2012.83 1212.22 L2013.42 1212.22 L2014.01 1212.22 L2014.59 1212.22 L2015.18 1212.22 L2015.77 1212.22 L2016.35 1212.22 L2016.94 1212.22 L2017.53 1212.22 L2018.11 1212.22 L2018.7 1212.22 L2019.28 1212.22 L2019.87 1212.22 L2020.46 1212.22 L2021.04 1212.22 L2021.63 1212.22 L2022.22 1212.22 L2022.8 1212.22 L2023.39 1212.22 L2023.98 1212.22 L2024.56 1212.22 L2025.15 1212.22 L2025.73 1212.22 L2026.32 1212.22 L2026.91 1212.22 L2027.49 1212.22 L2028.08 1212.22 L2028.67 1212.22 L2029.25 1212.22 L2029.84 1212.22 L2030.43 1212.22 L2031.01 1212.22 L2031.6 1212.22 L2032.19 1212.22 L2032.77 1212.22 L2033.36 1212.22 L2033.94 1212.22 L2034.53 1212.22 L2035.12 1212.22 L2035.7 1212.22 L2036.29 1212.22 L2036.88 1212.22 L2037.46 1212.22 L2038.05 1212.22 L2038.64 1212.22 L2039.22 1212.22 L2039.81 1212.22 L2040.4 1212.22 L2040.98 1212.22 L2041.57 1212.22 L2042.15 1212.22 L2042.74 1212.22 L2043.33 1212.22 L2043.91 1212.22 L2044.5 1212.22 L2045.09 1212.22 L2045.67 1212.22 L2046.26 1212.22 L2046.85 1212.22 L2047.43 1212.22 L2048.02 1212.22 L2048.6 1212.22 L2049.19 1212.22 L2049.78 1212.22 L2050.36 1212.22 L2050.95 1212.22 L2051.54 1212.22 L2052.12 1212.22 L2052.71 1212.22 L2053.3 1212.22 L2053.88 1212.22 L2054.47 1212.22 L2055.06 1212.22 L2055.64 1212.22 L2056.23 1212.22 L2056.81 1212.22 L2057.4 1212.22 L2057.99 1212.22 L2058.57 1212.22 L2059.16 1212.22 L2059.75 1212.22 L2060.33 1212.22 L2060.92 1212.22 L2061.51 1212.22 L2062.09 1212.22 L2062.68 1212.22 L2063.27 1212.22 L2063.85 1212.22 L2064.44 1212.22 L2065.02 1212.22 L2065.61 1212.22 L2066.2 1212.22 L2066.78 1212.22 L2067.37 1212.22 L2067.96 1212.22 L2068.54 1212.22 L2069.13 1212.22 L2069.72 1212.22 L2070.3 1212.22 L2070.89 1212.22 L2071.48 1212.22 L2072.06 1212.22 L2072.65 1212.22 L2073.23 1212.22 L2073.82 1212.22 L2074.41 1212.22 L2074.99 1212.22 L2075.58 1212.22 L2076.17 1212.22 L2076.75 1212.22 L2077.34 1212.22 L2077.93 1212.22 L2078.51 1212.22 L2079.1 1212.22 L2079.68 1212.22 L2080.27 1212.22 L2080.86 1212.22 L2081.44 1212.22 L2082.03 1212.22 L2082.62 1212.22 L2083.2 1212.22 L2083.79 1212.22 L2084.38 1212.22 L2084.96 1212.22 L2085.55 1212.22 L2086.14 1212.22 L2086.72 1212.22 L2087.31 1212.22 L2087.89 1212.22 L2088.48 1212.22 L2089.07 1212.22 L2089.65 1212.22 L2090.24 1212.22 L2090.83 1212.22 L2091.41 1212.22 L2092 1212.22 L2092.59 1212.22 L2093.17 1212.22 L2093.76 1212.22 L2094.35 1212.22 L2094.93 1212.22 L2095.52 1212.22 L2096.1 1212.22 L2096.69 1212.22 L2097.28 1212.22 L2097.86 1212.22 L2098.45 1212.22 L2099.04 1212.22 L2099.62 1212.22 L2100.21 1212.22 L2100.8 1212.22 L2101.38 1212.22 L2101.97 1212.22 L2102.55 1212.22 L2103.14 1212.22 L2103.73 1212.22 L2104.31 1212.22 L2104.9 1212.22 L2105.49 1212.22 L2106.07 1212.22 L2106.66 1212.22 L2107.25 1212.22 L2107.83 1212.22 L2108.42 1212.22 L2109.01 1212.22 L2109.59 1212.22 L2110.18 1212.22 L2110.76 1212.22 L2111.35 1212.22 L2111.94 1212.22 L2112.52 1212.22 L2113.11 1212.22 L2113.7 1212.22 L2114.28 1212.22 L2114.87 1212.22 L2115.46 1212.22 L2116.04 1212.22 L2116.63 1212.22 L2117.22 1212.22 L2117.8 1212.22 L2118.39 1212.22 L2118.97 1212.22 L2119.56 1212.22 L2120.15 1212.22 L2120.73 1212.22 L2121.32 1212.22 L2121.91 1212.22 L2122.49 1212.22 L2123.08 1212.22 L2123.67 1212.22 L2124.25 1212.22 L2124.84 1212.22 L2125.42 1212.22 L2126.01 1212.22 L2126.6 1212.22 L2127.18 1212.22 L2127.77 1212.22 L2128.36 1212.22 L2128.94 1212.22 L2129.53 1212.22 L2130.12 1212.22 L2130.7 1212.22 L2131.29 1212.22 L2131.88 1212.22 L2132.46 1212.22 L2133.05 1212.22 L2133.63 1212.22 L2134.22 1212.22 L2134.81 1212.22 L2135.39 1212.22 L2135.98 1212.22 L2136.57 1212.22 L2137.15 1212.22 L2137.74 1212.22 L2138.33 1212.22 L2138.91 1212.22 L2139.5 1212.22 L2140.09 1212.22 L2140.67 1212.22 L2141.26 1212.22 L2141.84 1212.22 L2142.43 1212.22 L2143.02 1212.22 L2143.6 1212.22 L2144.19 1212.22 L2144.78 1212.22 L2145.36 1212.22 L2145.95 1212.22 L2146.54 1212.22 L2147.12 1212.22 L2147.71 1212.22 L2148.3 1212.22 L2148.88 1212.22 L2149.47 1212.22 L2150.05 1212.22 L2150.64 1212.22 L2151.23 1212.22 L2151.81 1212.22 L2152.4 1212.22 L2152.99 1212.22 L2153.57 1212.22 L2154.16 1212.22 L2154.75 1212.22 L2155.33 1212.22 L2155.92 1212.22 L2156.5 1212.22 L2157.09 1212.22 L2157.68 1212.22 L2158.26 1212.22 L2158.26 1212.11 L2157.68 1212.11 L2157.09 1212.11 L2156.5 1212.11 L2155.92 1212.11 L2155.33 1212.11 L2154.75 1212.11 L2154.16 1212.11 L2153.57 1212.11 L2152.99 1212.11 L2152.4 1212.11 L2151.81 1212.11 L2151.23 1212.11 L2150.64 1212.11 L2150.05 1212.11 L2149.47 1212.11 L2148.88 1212.11 L2148.3 1212.11 L2147.71 1212.11 L2147.12 1212.11 L2146.54 1212.11 L2145.95 1212.11 L2145.36 1212.11 L2144.78 1212.11 L2144.19 1212.11 L2143.6 1212.11 L2143.02 1212.11 L2142.43 1212.11 L2141.84 1212.11 L2141.26 1212.11 L2140.67 1212.11 L2140.09 1212.11 L2139.5 1212.11 L2138.91 1212.11 L2138.33 1212.11 L2137.74 1212.11 L2137.15 1212.11 L2136.57 1212.11 L2135.98 1212.11 L2135.39 1212.11 L2134.81 1212.11 L2134.22 1212.11 L2133.63 1212.11 L2133.05 1212.11 L2132.46 1212.11 L2131.88 1212.11 L2131.29 1212.11 L2130.7 1212.11 L2130.12 1212.11 L2129.53 1212.11 L2128.94 1212.11 L2128.36 1212.11 L2127.77 1212.11 L2127.18 1212.11 L2126.6 1212.11 L2126.01 1212.11 L2125.42 1212.11 L2124.84 1212.11 L2124.25 1212.11 L2123.67 1212.11 L2123.08 1212.11 L2122.49 1212.11 L2121.91 1212.11 L2121.32 1212.11 L2120.73 1212.11 L2120.15 1212.11 L2119.56 1212.11 L2118.97 1212.11 L2118.39 1212.11 L2117.8 1212.11 L2117.22 1212.11 L2116.63 1212.11 L2116.04 1212.11 L2115.46 1212.11 L2114.87 1212.11 L2114.28 1212.11 L2113.7 1212.11 L2113.11 1212.11 L2112.52 1212.11 L2111.94 1212.11 L2111.35 1212.11 L2110.76 1212.11 L2110.18 1212.11 L2109.59 1212.11 L2109.01 1212.11 L2108.42 1212.11 L2107.83 1212.11 L2107.25 1212.11 L2106.66 1212.11 L2106.07 1212.11 L2105.49 1212.11 L2104.9 1212.11 L2104.31 1212.11 L2103.73 1212.11 L2103.14 1212.11 L2102.55 1212.11 L2101.97 1212.11 L2101.38 1212.11 L2100.8 1212.11 L2100.21 1212.11 L2099.62 1212.11 L2099.04 1212.11 L2098.45 1212.11 L2097.86 1212.11 L2097.28 1212.11 L2096.69 1212.11 L2096.1 1212.11 L2095.52 1212.11 L2094.93 1212.11 L2094.35 1212.11 L2093.76 1212.11 L2093.17 1212.11 L2092.59 1212.11 L2092 1212.11 L2091.41 1212.11 L2090.83 1212.11 L2090.24 1212.11 L2089.65 1212.11 L2089.07 1212.11 L2088.48 1212.11 L2087.89 1212.11 L2087.31 1212.11 L2086.72 1212.11 L2086.14 1212.11 L2085.55 1212.11 L2084.96 1212.11 L2084.38 1212.11 L2083.79 1212.11 L2083.2 1212.11 L2082.62 1212.11 L2082.03 1212.11 L2081.44 1212.11 L2080.86 1212.11 L2080.27 1212.11 L2079.68 1212.11 L2079.1 1212.11 L2078.51 1212.11 L2077.93 1212.11 L2077.34 1212.11 L2076.75 1212.11 L2076.17 1212.11 L2075.58 1212.11 L2074.99 1212.11 L2074.41 1212.11 L2073.82 1212.11 L2073.23 1212.11 L2072.65 1212.11 L2072.06 1212.11 L2071.48 1212.11 L2070.89 1212.11 L2070.3 1212.11 L2069.72 1212.11 L2069.13 1212.11 L2068.54 1212.11 L2067.96 1212.11 L2067.37 1212.11 L2066.78 1212.11 L2066.2 1212.11 L2065.61 1212.11 L2065.02 1212.11 L2064.44 1212.11 L2063.85 1212.11 L2063.27 1212.11 L2062.68 1212.11 L2062.09 1212.11 L2061.51 1212.11 L2060.92 1212.11 L2060.33 1212.11 L2059.75 1212.11 L2059.16 1212.11 L2058.57 1212.11 L2057.99 1212.11 L2057.4 1212.11 L2056.81 1212.11 L2056.23 1212.11 L2055.64 1212.11 L2055.06 1212.11 L2054.47 1212.11 L2053.88 1212.11 L2053.3 1212.11 L2052.71 1212.11 L2052.12 1212.11 L2051.54 1212.11 L2050.95 1212.11 L2050.36 1212.11 L2049.78 1212.11 L2049.19 1212.11 L2048.6 1212.11 L2048.02 1212.11 L2047.43 1212.11 L2046.85 1212.11 L2046.26 1212.11 L2045.67 1212.11 L2045.09 1212.11 L2044.5 1212.11 L2043.91 1212.11 L2043.33 1212.11 L2042.74 1212.11 L2042.15 1212.11 L2041.57 1212.11 L2040.98 1212.11 L2040.4 1212.11 L2039.81 1212.11 L2039.22 1212.11 L2038.64 1212.11 L2038.05 1212.11 L2037.46 1212.11 L2036.88 1212.11 L2036.29 1212.11 L2035.7 1212.11 L2035.12 1212.11 L2034.53 1212.11 L2033.94 1212.11 L2033.36 1212.11 L2032.77 1212.11 L2032.19 1212.11 L2031.6 1212.11 L2031.01 1212.11 L2030.43 1212.11 L2029.84 1212.11 L2029.25 1212.11 L2028.67 1212.11 L2028.08 1212.11 L2027.49 1212.11 L2026.91 1212.11 L2026.32 1212.11 L2025.73 1212.11 L2025.15 1212.11 L2024.56 1212.11 L2023.98 1212.11 L2023.39 1212.11 L2022.8 1212.11 L2022.22 1212.11 L2021.63 1212.11 L2021.04 1212.11 L2020.46 1212.11 L2019.87 1212.11 L2019.28 1212.11 L2018.7 1212.11 L2018.11 1212.11 L2017.53 1212.11 L2016.94 1212.11 L2016.35 1212.11 L2015.77 1212.11 L2015.18 1212.11 L2014.59 1212.11 L2014.01 1212.11 L2013.42 1212.11 L2012.83 1212.11 L2012.25 1212.11 L2011.66 1212.11 L2011.07 1212.11 L2010.49 1212.11 L2009.9 1212.11 L2009.32 1212.11 L2008.73 1212.11 L2008.14 1212.11 L2007.56 1212.11 L2006.97 1212.11 L2006.38 1212.11 L2005.8 1212.11 L2005.21 1212.11 L2004.62 1212.11 L2004.04 1212.11 L2003.45 1212.11 L2002.86 1212.11 L2002.28 1212.11 L2001.69 1212.11 L2001.11 1212.11 L2000.52 1212.11 L1999.93 1212.11 L1999.35 1212.11 L1998.76 1212.11 L1998.17 1212.11 L1997.59 1212.11 L1997 1212.11 L1996.41 1212.11 L1995.83 1212.11 L1995.24 1212.11 L1994.65 1212.11 L1994.07 1212.11 L1993.48 1212.11 L1992.9 1212.11 L1992.31 1212.11 L1991.72 1212.11 L1991.14 1212.11 L1990.55 1212.11 L1989.96 1212.11 L1989.38 1212.11 L1988.79 1212.11 L1988.2 1212.11 L1987.62 1212.11 L1987.03 1212.11 L1986.45 1212.11 L1985.86 1212.11 L1985.27 1212.11 L1984.69 1212.11 L1984.1 1212.11 L1983.51 1212.11 L1982.93 1212.11 L1982.34 1212.11 L1981.75 1212.11 L1981.17 1212.11 L1980.58 1212.11 L1979.99 1212.11 L1979.41 1212.11 L1978.82 1212.11 L1978.24 1212.11 L1977.65 1212.11 L1977.06 1212.11 L1976.48 1212.11 L1975.89 1212.11 L1975.3 1212.11 L1974.72 1212.11 L1974.13 1212.11 L1973.54 1212.11 L1972.96 1212.11 L1972.37 1212.11 L1971.78 1212.11 L1971.2 1212.11 L1970.61 1212.11 L1970.03 1212.11 L1969.44 1212.11 L1968.85 1212.11 L1968.27 1212.11 L1967.68 1212.11 L1967.09 1212.11 L1966.51 1212.11 L1965.92 1212.11 L1965.33 1212.11 L1964.75 1212.11 L1964.16 1212.11 L1963.58 1212.11 L1962.99 1212.11 L1962.4 1212.11 L1961.82 1212.11 L1961.23 1212.11 L1960.64 1212.11 L1960.06 1212.11 L1959.47 1212.11 L1958.88 1212.11 L1958.3 1212.11 L1957.71 1212.11 L1957.12 1212.11 L1956.54 1212.11 L1955.95 1212.11 L1955.37 1212.11 L1954.78 1212.11 L1954.19 1212.11 L1953.61 1212.11 L1953.02 1212.11 L1952.43 1212.11 L1951.85 1212.11 L1951.26 1212.11 L1950.67 1212.11 L1950.09 1212.11 L1949.5 1212.11 L1948.91 1212.11 L1948.33 1212.11 L1947.74 1212.11 L1947.16 1212.11 L1946.57 1212.11 L1945.98 1212.11 L1945.4 1212.11 L1944.81 1212.11 L1944.22 1212.11 L1943.64 1212.11 L1943.05 1212.11 L1942.46 1212.11 L1941.88 1212.11 L1941.29 1212.11 L1940.71 1212.11 L1940.12 1212.11 L1939.53 1212.11 L1938.95 1212.11 L1938.36 1212.11 L1937.77 1212.11 L1937.19 1212.11 L1936.6 1212.11 L1936.01 1212.11 L1935.43 1212.11 L1934.84 1212.11 L1934.25 1212.11 L1933.67 1212.11 L1933.08 1212.11 L1932.5 1212.11 L1931.91 1212.11 L1931.32 1212.11 L1930.74 1212.11 L1930.15 1212.11 L1929.56 1212.11 L1928.98 1212.11 L1928.39 1212.11 L1927.8 1212.11 L1927.22 1212.11 L1926.63 1212.11 L1926.04 1212.11 L1925.46 1212.11 L1924.87 1212.11 L1924.29 1212.11 L1923.7 1212.11 L1923.11 1212.11 L1922.53 1212.11 L1921.94 1212.11 L1921.35 1212.11 L1920.77 1212.11 L1920.18 1212.11 L1919.59 1212.11 L1919.01 1212.11 L1918.42 1212.11 L1917.83 1212.11 L1917.25 1212.11 L1916.66 1212.11 L1916.08 1212.11 L1915.49 1212.11 L1914.9 1212.11 L1914.32 1212.11 L1913.73 1212.11 L1913.14 1212.11 L1912.56 1212.11 L1911.97 1212.11 L1911.38 1212.11 L1910.8 1212.11 L1910.21 1212.11 L1909.63 1212.11 L1909.04 1212.11 L1908.45 1212.11 L1907.87 1212.11 L1907.28 1212.11 L1906.69 1212.11 L1906.11 1212.11 L1905.52 1212.11 L1904.93 1212.11 L1904.35 1212.11 L1903.76 1212.11 L1903.17 1212.11 L1902.59 1212.11 L1902 1212.11 L1901.42 1212.11 L1900.83 1212.11 L1900.24 1212.11 L1899.66 1212.11 L1899.07 1212.11 L1898.48 1212.11 L1897.9 1212.11 L1897.31 1212.11 L1896.72 1212.11 L1896.14 1212.11 L1895.55 1212.11 L1894.96 1212.11 L1894.38 1212.11 L1893.79 1212.11 L1893.21 1212.11 L1892.62 1212.11 L1892.03 1212.11 L1891.45 1212.11 L1890.86 1212.11 L1890.27 1212.11 L1889.69 1212.11 L1889.1 1212.11 L1888.51 1212.11 L1887.93 1212.11 L1887.34 1212.11 L1886.76 1212.11 L1886.17 1212.11 L1885.58 1212.11 L1885 1212.11 L1884.41 1212.11 L1883.82 1212.11 L1883.24 1212.11 L1882.65 1212.11 L1882.06 1212.11 L1881.48 1212.11 L1880.89 1212.11 L1880.3 1212.11 L1879.72 1212.11 L1879.13 1212.11 L1878.55 1212.11 L1877.96 1212.11 L1877.37 1212.11 L1876.79 1212.11 L1876.2 1212.11 L1875.61 1212.11 L1875.03 1212.11 L1874.44 1212.11 L1873.85 1212.11 L1873.27 1212.11 L1872.68 1212.11 L1872.09 1212.11 L1871.51 1212.11 L1870.92 1212.11 L1870.34 1212.11 L1869.75 1212.11 L1869.16 1212.11 L1868.58 1212.11 L1867.99 1212.11 L1867.4 1212.11 L1866.82 1212.11 L1866.23 1212.11 L1865.64 1212.11 L1865.06 1212.11 L1864.47 1212.11 L1863.88 1212.11 L1863.3 1212.11 L1862.71 1212.11 L1862.13 1212.11 L1861.54 1212.11 L1860.95 1212.11 L1860.37 1212.11 L1859.78 1212.11 L1859.19 1212.11 L1858.61 1212.11 L1858.02 1212.11 L1857.43 1212.11 L1856.85 1212.11 L1856.26 1212.11 L1855.68 1212.11 L1855.09 1212.11 L1854.5 1212.11 L1853.92 1212.11 L1853.33 1212.11 L1852.74 1212.11 L1852.16 1212.11 L1851.57 1212.11 L1850.98 1212.11 L1850.4 1212.11 L1849.81 1212.11 L1849.22 1212.11 L1848.64 1212.11 L1848.05 1212.11 L1847.47 1212.11 L1846.88 1212.11 L1846.29 1212.11 L1845.71 1212.11 L1845.12 1212.11 L1844.53 1212.11 L1843.95 1212.11 L1843.36 1212.11 L1842.77 1212.11 L1842.19 1212.11 L1841.6 1212.11 L1841.01 1212.11 L1840.43 1212.11 L1839.84 1212.11 L1839.26 1212.11 L1838.67 1212.11 L1838.08 1212.11 L1837.5 1212.11 L1836.91 1212.11 L1836.32 1212.11 L1835.74 1212.11 L1835.15 1212.11 L1834.56 1212.11 L1833.98 1212.11 L1833.39 1212.11 L1832.81 1212.11 L1832.22 1212.11 L1831.63 1212.11 L1831.05 1212.11 L1830.46 1212.11 L1829.87 1212.11 L1829.29 1212.11 L1828.7 1212.11 L1828.11 1212.11 L1827.53 1212.11 L1826.94 1212.11 L1826.35 1212.11 L1825.77 1212.11 L1825.18 1212.11 L1824.6 1212.11 L1824.01 1212.11 L1823.42 1212.11 L1822.84 1212.11 L1822.25 1212.11 L1821.66 1212.11 L1821.08 1212.11 L1820.49 1212.11 L1819.9 1212.11 L1819.32 1212.11 L1818.73 1212.11 L1818.14 1212.11 L1817.56 1212.11 L1816.97 1212.11 L1816.39 1212.11 L1815.8 1212.11 L1815.21 1212.11 L1814.63 1212.11 L1814.04 1212.11 L1813.45 1212.11 L1812.87 1212.11 L1812.28 1212.11 L1811.69 1212.11 L1811.11 1212.11 L1810.52 1212.11 L1809.94 1212.11 L1809.35 1212.11 L1808.76 1212.11 L1808.18 1212.11 L1807.59 1212.11 L1807 1212.11 L1806.42 1212.11 L1805.83 1212.11 L1805.24 1212.11 L1804.66 1212.11 L1804.07 1212.11 L1803.48 1212.11 L1802.9 1212.11 L1802.31 1212.11 L1801.73 1212.11 L1801.14 1212.11 L1800.55 1212.11 L1799.97 1212.11 L1799.38 1212.11 L1798.79 1212.11 L1798.21 1212.11 L1797.62 1212.11 L1797.03 1212.11 L1796.45 1212.11 L1795.86 1212.11 L1795.27 1212.11 L1794.69 1212.11 L1794.1 1212.11 L1793.52 1212.11 L1792.93 1212.11 L1792.34 1212.11 L1791.76 1212.11 L1791.17 1212.11 L1790.58 1212.11 L1790 1212.11 L1789.41 1212.11 L1788.82 1212.11 L1788.24 1212.11 L1787.65 1212.11 L1787.06 1212.11 L1786.48 1212.11 L1785.89 1212.11 L1785.31 1212.11 L1784.72 1212.11 L1784.13 1212.11 L1783.55 1212.11 L1782.96 1212.11 L1782.37 1212.11 L1781.79 1212.11 L1781.2 1212.11 L1780.61 1212.11 L1780.03 1212.11 L1779.44 1212.11 L1778.86 1212.11 L1778.27 1212.11 L1777.68 1212.11 L1777.1 1212.11 L1776.51 1212.11 L1775.92 1212.11 L1775.34 1212.11 L1774.75 1212.11 L1774.16 1212.11 L1773.58 1212.11 L1772.99 1212.11 L1772.4 1212.11 L1771.82 1212.11 L1771.23 1212.11 L1770.65 1212.11 L1770.06 1212.11 L1769.47 1212.11 L1768.89 1212.11 L1768.3 1212.11 L1767.71 1212.11 L1767.13 1212.11 L1766.54 1212.11 L1765.95 1212.11 L1765.37 1212.11 L1764.78 1212.11 L1764.19 1212.11 L1763.61 1212.11 L1763.02 1212.11 L1762.44 1212.11 L1761.85 1212.11 L1761.26 1212.11 L1760.68 1212.11 L1760.09 1212.11 L1759.5 1212.11 L1758.92 1212.11 L1758.33 1212.11 L1757.74 1212.11 L1757.16 1212.11 L1756.57 1212.11 L1755.99 1212.11 L1755.4 1212.11 L1754.81 1212.11 L1754.23 1212.11 L1753.64 1212.11 L1753.05 1212.11 L1752.47 1212.11 L1751.88 1212.11 L1751.29 1212.11 L1750.71 1212.11 L1750.12 1212.11 L1749.53 1212.11 L1748.95 1212.11 L1748.36 1212.11 L1747.78 1212.11 L1747.19 1212.11 L1746.6 1212.11 L1746.02 1212.11 L1745.43 1212.11 L1744.84 1212.11 L1744.26 1212.11 L1743.67 1212.11 L1743.08 1212.11 L1742.5 1212.11 L1741.91 1212.11 L1741.32 1212.11 L1740.74 1212.11 L1740.15 1212.11 L1739.57 1212.11 L1738.98 1212.11 L1738.39 1212.11 L1737.81 1212.11 L1737.22 1212.11 L1736.63 1212.11 L1736.05 1212.11 L1735.46 1212.11 L1734.87 1212.11 L1734.29 1212.11 L1733.7 1212.11 L1733.11 1212.11 L1732.53 1212.11 L1731.94 1212.11 L1731.36 1212.11 L1730.77 1212.11 L1730.18 1212.11 L1729.6 1212.11 L1729.01 1212.11 L1728.42 1212.11 L1727.84 1212.11 L1727.25 1212.11 L1726.66 1212.11 L1726.08 1212.11 L1725.49 1212.11 L1724.91 1212.11 L1724.32 1212.11 L1723.73 1212.11 L1723.15 1212.11 L1722.56 1212.11 L1721.97 1212.11 L1721.39 1212.11 L1720.8 1212.11 L1720.21 1212.11 L1719.63 1212.11 L1719.04 1212.11 L1718.45 1212.11 L1717.87 1212.11 L1717.28 1212.11 L1716.7 1212.11 L1716.11 1212.11 L1715.52 1212.11 L1714.94 1212.11 L1714.35 1212.11 L1713.76 1212.11 L1713.18 1212.11 L1712.59 1212.11 L1712 1212.11 L1711.42 1212.11 L1710.83 1212.11 L1710.24 1212.11 L1709.66 1212.11 L1709.07 1212.11 L1708.49 1212.11 L1707.9 1212.11 L1707.31 1212.11 L1706.73 1212.11 L1706.14 1212.11 L1705.55 1212.11 L1704.97 1212.11 L1704.38 1212.11 L1703.79 1212.11 L1703.21 1212.11 L1702.62 1212.11 L1702.04 1212.11 L1701.45 1212.11 L1700.86 1212.11 L1700.28 1212.11 L1699.69 1212.11 L1699.1 1212.11 L1698.52 1212.11 L1697.93 1212.11 L1697.34 1212.11 L1696.76 1212.11 L1696.17 1212.11 L1695.58 1212.11 L1695 1212.11 L1694.41 1212.11 L1693.83 1212.11 L1693.24 1212.11 L1692.65 1212.11 L1692.07 1212.11 L1691.48 1212.11 L1690.89 1212.11 L1690.31 1212.11 L1689.72 1212.11 L1689.13 1212.11 L1688.55 1212.11 L1687.96 1212.11 L1687.37 1212.11 L1686.79 1212.11 L1686.2 1212.11 L1685.62 1212.11 L1685.03 1212.11 L1684.44 1212.11 L1683.86 1212.11 L1683.27 1212.11 L1682.68 1212.11 L1682.1 1212.11 L1681.51 1212.11 L1680.92 1212.11 L1680.34 1212.11 L1679.75 1212.11 L1679.17 1212.11 L1678.58 1212.11 L1677.99 1212.11 L1677.41 1212.11 L1676.82 1212.11 L1676.23 1212.11 L1675.65 1212.11 L1675.06 1212.11 L1674.47 1212.11 L1673.89 1212.11 L1673.3 1212.11 L1672.71 1212.11 L1672.13 1212.11 L1671.54 1212.11 L1670.96 1212.11 L1670.37 1212.11 L1669.78 1212.11 L1669.2 1212.11 L1668.61 1212.11 L1668.02 1212.11 L1667.44 1212.11 L1666.85 1212.11 L1666.26 1212.11 L1665.68 1212.11 L1665.09 1212.11 L1664.5 1212.11 L1663.92 1212.11 L1663.33 1212.11 L1662.75 1212.11 L1662.16 1212.11 L1661.57 1212.11 L1660.99 1212.11 L1660.4 1212.11 L1659.81 1212.11 L1659.23 1212.11 L1658.64 1212.11 L1658.05 1212.11 L1657.47 1212.11 L1656.88 1212.11 L1656.29 1212.11 L1655.71 1212.11 L1655.12 1212.11 L1654.54 1212.11 L1653.95 1212.11 L1653.36 1212.11 L1652.78 1212.11 L1652.19 1212.11 L1651.6 1212.11 L1651.02 1212.11 L1650.43 1212.11 L1649.84 1212.11 L1649.26 1212.11 L1648.67 1212.11 L1648.09 1212.11 L1647.5 1212.11 L1646.91 1212.11 L1646.33 1212.11 L1645.74 1212.11 L1645.15 1212.11 L1644.57 1212.11 L1643.98 1212.11 L1643.39 1212.11 L1642.81 1212.11 L1642.22 1212.11 L1641.63 1212.11 L1641.05 1212.11 L1640.46 1212.11 L1639.88 1212.11 L1639.29 1212.11 L1638.7 1212.11 L1638.12 1212.11 L1637.53 1212.11 L1636.94 1212.11 L1636.36 1212.11 L1635.77 1212.11 L1635.18 1212.11 L1634.6 1212.11 L1634.01 1212.11 L1633.42 1212.11 L1632.84 1212.11 L1632.25 1212.11 L1631.67 1212.11 L1631.08 1212.11 L1630.49 1212.11 L1629.91 1212.11 L1629.32 1212.11 L1628.73 1212.11 L1628.15 1212.11 L1627.56 1212.11 L1626.97 1212.11 L1626.39 1212.11 L1625.8 1212.11 L1625.22 1212.11 L1624.63 1212.11 L1624.04 1212.11 L1623.46 1212.11 L1622.87 1212.11 L1622.28 1212.11 L1621.7 1212.11 L1621.11 1212.11 L1620.52 1212.11 L1619.94 1212.11 L1619.35 1212.11 L1618.76 1212.11 L1618.18 1212.11 L1617.59 1212.11 L1617.01 1212.11 L1616.42 1212.11 L1615.83 1212.11 L1615.25 1212.11 L1614.66 1212.11 L1614.07 1212.11 L1613.49 1212.11 L1612.9 1212.11 L1612.31 1212.11 L1611.73 1212.11 L1611.14 1212.11 L1610.55 1212.11 L1609.97 1212.11 L1609.38 1212.11 L1608.8 1212.11 L1608.21 1212.11 L1607.62 1212.11 L1607.04 1212.11 L1606.45 1212.11 L1605.86 1212.11 L1605.28 1212.11 L1604.69 1212.11 L1604.1 1212.11 L1603.52 1212.11 L1602.93 1212.11 L1602.34 1212.11 L1601.76 1212.11 L1601.17 1212.11 L1600.59 1212.11 L1600 1212.11 L1599.41 1212.11 L1598.83 1212.11 L1598.24 1212.11 L1597.65 1212.11 L1597.07 1212.11 L1596.48 1212.11 L1595.89 1212.11 L1595.31 1212.11 L1594.72 1212.11 L1594.14 1212.11 L1593.55 1212.11 L1592.96 1212.11 L1592.38 1212.11 L1591.79 1212.11 L1591.2 1212.11 L1590.62 1212.11 L1590.03 1212.11 L1589.44 1212.11 L1588.86 1212.11 L1588.27 1212.11 L1587.68 1212.11 L1587.1 1212.11 L1586.51 1212.11 L1585.93 1212.11 L1585.34 1212.11 L1584.75 1212.11 L1584.17 1212.11 L1583.58 1212.11 L1582.99 1212.11 L1582.41 1212.11 L1581.82 1212.11 L1581.23 1212.11 L1580.65 1212.11 L1580.06 1212.11 L1579.47 1212.11 L1578.89 1212.11 L1578.3 1212.11 L1577.72 1212.11 L1577.13 1212.11 L1576.54 1212.11 L1575.96 1212.11 L1575.37 1212.11 L1574.78 1212.11 L1574.2 1212.11 L1573.61 1212.11 L1573.02 1212.11 L1572.44 1212.11 L1571.85 1212.11 L1571.27 1212.11 L1570.68 1212.11 L1570.09 1212.11 L1569.51 1212.11 L1568.92 1212.11 L1568.33 1212.11 L1567.75 1212.11 L1567.16 1212.11 L1566.57 1212.11 L1565.99 1212.11 L1565.4 1212.11 L1564.81 1212.11 L1564.23 1212.11 L1563.64 1212.11 L1563.06 1212.11 L1562.47 1212.11 L1561.88 1212.11 L1561.3 1212.11 L1560.71 1212.11 L1560.12 1212.11 L1559.54 1212.11 L1558.95 1212.11 L1558.36 1212.11 L1557.78 1212.11 L1557.19 1212.11 L1556.6 1212.11 L1556.02 1212.11 L1555.43 1212.11 L1554.85 1212.11 L1554.26 1212.11 L1553.67 1212.11 L1553.09 1212.11 L1552.5 1212.11 L1551.91 1212.11 L1551.33 1212.11 L1550.74 1212.11 L1550.15 1212.11 L1549.57 1212.11 L1548.98 1212.11 L1548.4 1212.11 L1547.81 1212.11 L1547.22 1212.11 L1546.64 1212.11 L1546.05 1212.11 L1545.46 1212.11 L1544.88 1212.11 L1544.29 1212.11 L1543.7 1212.11 L1543.12 1212.11 L1542.53 1212.11 L1541.94 1212.11 L1541.36 1212.11 L1540.77 1212.11 L1540.19 1212.11 L1539.6 1212.11 L1539.01 1212.11 L1538.43 1212.11 L1537.84 1212.11 L1537.25 1212.11 L1536.67 1212.11 L1536.08 1212.11 L1535.49 1212.11 L1534.91 1212.11 L1534.32 1212.11 L1533.73 1212.11 L1533.15 1212.11 L1532.56 1212.11 L1531.98 1212.11 L1531.39 1212.11 L1530.8 1212.11 L1530.22 1212.11 L1529.63 1212.11 L1529.04 1212.11 L1528.46 1212.11 L1527.87 1212.11 L1527.28 1212.11 L1526.7 1212.11 L1526.11 1212.11 L1525.52 1212.11 L1524.94 1212.11 L1524.35 1212.11 L1523.77 1212.11 L1523.18 1212.11 L1522.59 1212.11 L1522.01 1212.11 L1521.42 1212.11 L1520.83 1212.11 L1520.25 1212.11 L1519.66 1212.11 L1519.07 1212.11 L1518.49 1212.11 L1517.9 1212.11 L1517.32 1212.11 L1516.73 1212.11 L1516.14 1212.11 L1515.56 1212.11 L1514.97 1212.11 L1514.38 1212.11 L1513.8 1212.11 L1513.21 1212.11 L1512.62 1212.11 L1512.04 1212.11 L1511.45 1212.11 L1510.86 1212.11 L1510.28 1212.11 L1509.69 1212.11 L1509.11 1212.11 L1508.52 1212.11 L1507.93 1212.11 L1507.35 1212.11 L1506.76 1212.11 L1506.17 1212.11 L1505.59 1212.11 L1505 1212.11 L1504.41 1212.11 L1503.83 1212.11 L1503.24 1212.11 L1502.65 1212.11 L1502.07 1212.11 L1501.48 1212.11 L1500.9 1212.11 L1500.31 1212.11 L1499.72 1212.11 L1499.14 1212.11 L1498.55 1212.11 L1497.96 1212.11 L1497.38 1212.11 L1496.79 1212.11 L1496.2 1212.11 L1495.62 1212.11 L1495.03 1212.11 L1494.45 1212.11 L1493.86 1212.11 L1493.27 1212.11 L1492.69 1212.11 L1492.1 1212.11 L1491.51 1212.11 L1490.93 1212.11 L1490.34 1212.11 L1489.75 1212.11 L1489.17 1212.11 L1488.58 1212.11 L1487.99 1212.11 L1487.41 1212.11 L1486.82 1212.11 L1486.24 1212.11 L1485.65 1212.11 L1485.06 1212.11 L1484.48 1212.11 L1483.89 1212.11 L1483.3 1212.11 L1482.72 1212.11 L1482.13 1212.11 L1481.54 1212.11 L1480.96 1212.11 L1480.37 1212.11 L1479.78 1212.11 L1479.2 1212.11 L1478.61 1212.11 L1478.03 1212.11 L1477.44 1212.11 L1476.85 1212.11 L1476.27 1212.11 L1475.68 1212.11 L1475.09 1212.11 L1474.51 1212.11 L1473.92 1212.11 L1473.33 1212.11 L1472.75 1212.11 L1472.16 1212.11 L1471.57 1212.11 L1470.99 1212.11 L1470.4 1212.11 L1469.82 1212.11 L1469.23 1212.11 L1468.64 1212.11 L1468.06 1212.11 L1467.47 1212.11 L1466.88 1212.11 L1466.3 1212.11 L1465.71 1212.11 L1465.12 1212.11 L1464.54 1212.11 L1463.95 1212.11 L1463.37 1212.11 L1462.78 1212.11 L1462.19 1212.11 L1461.61 1212.11 L1461.02 1212.11 L1460.43 1212.11 L1459.85 1212.11 L1459.26 1212.11 L1458.67 1212.11 L1458.09 1212.11 L1457.5 1212.11 L1456.91 1212.11 L1456.33 1212.11 L1455.74 1212.11 L1455.16 1212.11 L1454.57 1212.11 L1453.98 1212.11 L1453.4 1212.11 L1452.81 1212.11 L1452.22 1212.11 L1451.64 1212.11 L1451.05 1212.11 L1450.46 1212.11 L1449.88 1212.11 L1449.29 1212.11 L1448.7 1212.11 L1448.12 1212.11 L1447.53 1212.11 L1446.95 1212.11 L1446.36 1212.11 L1445.77 1212.11 L1445.19 1212.11 L1444.6 1212.11 L1444.01 1212.11 L1443.43 1212.11 L1442.84 1212.11 L1442.25 1212.11 L1441.67 1212.11 L1441.08 1212.11 L1440.5 1212.11 L1439.91 1212.11 L1439.32 1212.11 L1438.74 1212.11 L1438.15 1212.11 L1437.56 1212.11 L1436.98 1212.11 L1436.39 1212.11 L1435.8 1212.11 L1435.22 1212.11 L1434.63 1212.11 L1434.04 1212.11 L1433.46 1212.11 L1432.87 1212.11 L1432.29 1212.11 L1431.7 1212.11 L1431.11 1212.11 L1430.53 1212.11 L1429.94 1212.11 L1429.35 1212.11 L1428.77 1212.11 L1428.18 1212.11 L1427.59 1212.11 L1427.01 1212.11 L1426.42 1212.11 L1425.83 1212.11 L1425.25 1212.11 L1424.66 1212.11 L1424.08 1212.11 L1423.49 1212.11 L1422.9 1212.11 L1422.32 1212.11 L1421.73 1212.11 L1421.14 1212.11 L1420.56 1212.11 L1419.97 1212.11 L1419.38 1212.11 L1418.8 1212.11 L1418.21 1212.11 L1417.63 1212.11 L1417.04 1212.11 L1416.45 1212.11 L1415.87 1212.11 L1415.28 1212.11 L1414.69 1212.11 L1414.11 1212.11 L1413.52 1212.11 L1412.93 1212.11 L1412.35 1212.11 L1411.76 1212.11 L1411.17 1212.11 L1410.59 1212.11 L1410 1212.11 L1409.42 1212.11 L1408.83 1212.11 L1408.24 1212.11 L1407.66 1212.11 L1407.07 1212.11 L1406.48 1212.11 L1405.9 1212.11 L1405.31 1212.11 L1404.72 1212.11 L1404.14 1212.11 L1403.55 1212.11 L1402.96 1212.11 L1402.38 1212.11 L1401.79 1212.11 L1401.21 1212.11 L1400.62 1212.11 L1400.03 1212.11 L1399.45 1212.11 L1398.86 1212.11 L1398.27 1212.11 L1397.69 1212.11 L1397.1 1212.11 L1396.51 1212.11 L1395.93 1212.11 L1395.34 1212.11 L1394.75 1212.11 L1394.17 1212.11 L1393.58 1212.11 L1393 1212.11 L1392.41 1212.11 L1391.82 1212.11 L1391.24 1212.11 L1390.65 1212.11 L1390.06 1212.11 L1389.48 1212.11 L1388.89 1212.11 L1388.3 1212.11 L1387.72 1212.11 L1387.13 1212.11 L1386.55 1212.11 L1385.96 1212.11 L1385.37 1212.11 L1384.79 1212.11 L1384.2 1212.11 L1383.61 1212.11 L1383.03 1212.11 L1382.44 1212.11 L1381.85 1212.11 L1381.27 1212.11 L1380.68 1212.11 L1380.09 1212.11 L1379.51 1212.11 L1378.92 1212.11 L1378.34 1212.11 L1377.75 1212.11 L1377.16 1212.11 L1376.58 1212.11 L1375.99 1212.11 L1375.4 1212.11 L1374.82 1212.11 L1374.23 1212.11 L1373.64 1212.11 L1373.06 1212.11 L1372.47 1212.11 L1371.88 1212.11 L1371.3 1212.11 L1370.71 1212.11 L1370.13 1212.11 L1369.54 1212.11 L1368.95 1212.11 L1368.37 1212.11 L1367.78 1212.11 L1367.19 1212.11 L1366.61 1212.11 L1366.02 1212.11 L1365.43 1212.11 L1364.85 1212.11 L1364.26 1212.11 L1363.68 1212.11 L1363.09 1212.11 L1362.5 1212.11 L1361.92 1212.11 L1361.33 1212.11 L1360.74 1212.11 L1360.16 1212.11 L1359.57 1212.11 L1358.98 1212.11 L1358.4 1212.11 L1357.81 1212.11 L1357.22 1212.11 L1356.64 1212.11 L1356.05 1212.11 L1355.47 1212.11 L1354.88 1212.11 L1354.29 1212.11 L1353.71 1212.11 L1353.12 1212.11 L1352.53 1212.11 L1351.95 1212.11 L1351.36 1212.11 L1350.77 1212.11 L1350.19 1212.11 L1349.6 1212.11 L1349.01 1212.11 L1348.43 1212.11 L1347.84 1212.11 L1347.26 1212.11 L1346.67 1212.11 L1346.08 1212.11 L1345.5 1212.11 L1344.91 1212.11 L1344.32 1212.11 L1343.74 1212.11 L1343.15 1212.11 L1342.56 1212.11 L1341.98 1212.11 L1341.39 1212.11 L1340.8 1212.11 L1340.22 1212.11 L1339.63 1212.11 L1339.05 1212.11 L1338.46 1212.11 L1337.87 1212.11 L1337.29 1212.11 L1336.7 1212.11 L1336.11 1212.11 L1335.53 1212.11 L1334.94 1212.11 L1334.35 1212.11 L1333.77 1212.11 L1333.18 1212.11 L1332.6 1212.11 L1332.01 1212.11 L1331.42 1212.11 L1330.84 1212.11 L1330.25 1212.11 L1329.66 1212.11 L1329.08 1212.11 L1328.49 1212.11 L1327.9 1212.11 L1327.32 1212.11 L1326.73 1212.11 L1326.14 1212.11 L1325.56 1212.11 L1324.97 1212.11 L1324.39 1212.11 L1323.8 1212.11 L1323.21 1212.11 L1322.63 1212.11 L1322.04 1212.11 L1321.45 1212.11 L1320.87 1212.11 L1320.28 1212.11 L1319.69 1212.11 L1319.11 1212.11 L1318.52 1212.11 L1317.93 1212.11 L1317.35 1212.11 L1316.76 1212.11 L1316.18 1212.11 L1315.59 1212.11 L1315 1212.11 L1314.42 1212.11 L1313.83 1212.11 L1313.24 1212.11 L1312.66 1212.11 L1312.07 1212.11 L1311.48 1212.11 L1310.9 1212.11 L1310.31 1212.11 L1309.73 1212.11 L1309.14 1212.11 L1308.55 1212.11 L1307.97 1212.11 L1307.38 1212.11 L1306.79 1212.11 L1306.21 1212.11 L1305.62 1212.11 L1305.03 1212.11 L1304.45 1212.11 L1303.86 1212.11 L1303.27 1212.11 L1302.69 1212.11 L1302.1 1212.11 L1301.52 1212.11 L1300.93 1212.11 L1300.34 1212.11 L1299.76 1212.11 L1299.17 1212.11 L1298.58 1212.11 L1298 1212.11 L1297.41 1212.11 L1296.82 1212.11 L1296.24 1212.11 L1295.65 1212.11 L1295.06 1212.11 L1294.48 1212.11 L1293.89 1212.11 L1293.31 1212.11 L1292.72 1212.11 L1292.13 1212.11 L1291.55 1212.11 L1290.96 1212.11 L1290.37 1212.11 L1289.79 1212.11 L1289.2 1212.11 L1288.61 1212.11 L1288.03 1212.11 L1287.44 1212.11 L1286.86 1212.11 L1286.27 1212.11 L1285.68 1212.11 L1285.1 1212.11 L1284.51 1212.11 L1283.92 1212.11 L1283.34 1212.11 L1282.75 1212.11 L1282.16 1212.11 L1281.58 1212.11 L1280.99 1212.11 L1280.4 1212.11 L1279.82 1212.11 L1279.23 1212.11 L1278.65 1212.11 L1278.06 1212.11 L1277.47 1212.11 L1276.89 1212.11 L1276.3 1212.11 L1275.71 1212.11 L1275.13 1212.11 L1274.54 1212.11 L1273.95 1212.11 L1273.37 1212.11 L1272.78 1212.11 L1272.19 1212.11 L1271.61 1212.11 L1271.02 1212.11 L1270.44 1212.11 L1269.85 1212.11 L1269.26 1212.11 L1268.68 1212.11 L1268.09 1212.11 L1267.5 1212.11 L1266.92 1212.11 L1266.33 1212.11 L1265.74 1212.11 L1265.16 1212.11 L1264.57 1212.11 L1263.98 1212.11 L1263.4 1212.11 L1262.81 1212.11 L1262.23 1212.11 L1261.64 1212.11 L1261.05 1212.11 L1260.47 1212.11 L1259.88 1212.11 L1259.29 1212.11 L1258.71 1212.11 L1258.12 1212.11 L1257.53 1212.11 L1256.95 1212.11 L1256.36 1212.11 L1255.78 1212.11 L1255.19 1212.11 L1254.6 1212.11 L1254.02 1212.11 L1253.43 1212.11 L1252.84 1212.11 L1252.26 1212.11 L1251.67 1212.11 L1251.08 1212.11 L1250.5 1212.11 L1249.91 1212.11 L1249.32 1212.11 L1248.74 1212.11 L1248.15 1212.11 L1247.57 1212.11 L1246.98 1212.11 L1246.39 1212.11 L1245.81 1212.11 L1245.22 1212.11 L1244.63 1212.11 L1244.05 1212.11 L1243.46 1212.11 L1242.87 1212.11 L1242.29 1212.11 L1241.7 1212.11 L1241.11 1212.11 L1240.53 1212.11 L1239.94 1212.11 L1239.36 1212.11 L1238.77 1212.11 L1238.18 1212.11 L1237.6 1212.11 L1237.01 1212.11 L1236.42 1212.11 L1235.84 1212.11 L1235.25 1212.11 L1234.66 1212.11 L1234.08 1212.11 L1233.49 1212.11 L1232.91 1212.11 L1232.32 1212.11 L1231.73 1212.11 L1231.15 1212.11 L1230.56 1212.11 L1229.97 1212.11 L1229.39 1212.11 L1228.8 1212.11 L1228.21 1212.11 L1227.63 1212.11 L1227.04 1212.11 L1226.45 1212.11 L1225.87 1212.11 L1225.28 1212.11 L1224.7 1212.11 L1224.11 1212.11 L1223.52 1212.11 L1222.94 1212.11 L1222.35 1212.11 L1221.76 1212.11 L1221.18 1212.11 L1220.59 1212.11 L1220 1212.11 L1219.42 1212.11 L1218.83 1212.11 L1218.24 1212.11 L1217.66 1212.11 L1217.07 1212.11 L1216.49 1212.11 L1215.9 1212.11 L1215.31 1212.11 L1214.73 1212.11 L1214.14 1212.11 L1213.55 1212.11 L1212.97 1212.11 L1212.38 1212.11 L1211.79 1212.11 L1211.21 1212.11 L1210.62 1212.11 L1210.03 1212.11 L1209.45 1212.11 L1208.86 1212.11 L1208.28 1212.11 L1207.69 1212.11 L1207.1 1212.11 L1206.52 1212.11 L1205.93 1212.11 L1205.34 1212.11 L1204.76 1212.11 L1204.17 1212.11 L1203.58 1212.11 L1203 1212.11 L1202.41 1212.11 L1201.83 1212.11 L1201.24 1212.11 L1200.65 1212.11 L1200.07 1212.11 L1199.48 1212.11 L1198.89 1212.11 L1198.31 1212.11 L1197.72 1212.11 L1197.13 1212.11 L1196.55 1212.11 L1195.96 1212.11 L1195.37 1212.11 L1194.79 1212.11 L1194.2 1212.11 L1193.62 1212.11 L1193.03 1212.11 L1192.44 1212.11 L1191.86 1212.11 L1191.27 1212.11 L1190.68 1212.11 L1190.1 1212.11 L1189.51 1212.11 L1188.92 1212.11 L1188.34 1212.11 L1187.75 1212.11 L1187.16 1212.11 L1186.58 1212.11 L1185.99 1212.11 L1185.41 1212.11 L1184.82 1212.11 L1184.23 1212.11 L1183.65 1212.11 L1183.06 1212.11 L1182.47 1212.11 L1181.89 1212.11 L1181.3 1212.11 L1180.71 1212.11 L1180.13 1212.11 L1179.54 1212.11 L1178.96 1212.11 L1178.37 1212.11 L1177.78 1212.11 L1177.2 1212.11 L1176.61 1212.11 L1176.02 1212.11 L1175.44 1212.11 L1174.85 1212.11 L1174.26 1212.11 L1173.68 1212.11 L1173.09 1212.11 L1172.5 1212.11 L1171.92 1212.11 L1171.33 1212.11 L1170.75 1212.11 L1170.16 1212.11 L1169.57 1212.11 L1168.99 1212.11 L1168.4 1212.11 L1167.81 1212.11 L1167.23 1212.11 L1166.64 1212.11 L1166.05 1212.11 L1165.47 1212.11 L1164.88 1212.11 L1164.29 1212.11 L1163.71 1212.11 L1163.12 1212.11 L1162.54 1212.11 L1161.95 1212.11 L1161.36 1212.11 L1160.78 1212.11 L1160.19 1212.11 L1159.6 1212.11 L1159.02 1212.11 L1158.43 1212.11 L1157.84 1212.11 L1157.26 1212.11 L1156.67 1212.11 L1156.09 1212.11 L1155.5 1212.11 L1154.91 1212.11 L1154.33 1212.11 L1153.74 1212.11 L1153.15 1212.11 L1152.57 1212.11 L1151.98 1212.11 L1151.39 1212.11 L1150.81 1212.11 L1150.22 1212.11 L1149.63 1212.11 L1149.05 1212.11 L1148.46 1212.11 L1147.88 1212.11 L1147.29 1212.11 L1146.7 1212.11 L1146.12 1212.11 L1145.53 1212.11 L1144.94 1212.11 L1144.36 1212.11 L1143.77 1212.11 L1143.18 1212.11 L1142.6 1212.11 L1142.01 1212.11 L1141.42 1212.11 L1140.84 1212.11 L1140.25 1212.11 L1139.67 1212.11 L1139.08 1212.11 L1138.49 1212.11 L1137.91 1212.11 L1137.32 1212.11 L1136.73 1212.11 L1136.15 1212.11 L1135.56 1212.11 L1134.97 1212.11 L1134.39 1212.11 L1133.8 1212.11 L1133.21 1212.11 L1132.63 1212.11 L1132.04 1212.11 L1131.46 1212.11 L1130.87 1212.11 L1130.28 1212.11 L1129.7 1212.11 L1129.11 1212.11 L1128.52 1212.11 L1127.94 1212.11 L1127.35 1212.11 L1126.76 1212.11 L1126.18 1212.11 L1125.59 1212.11 L1125.01 1212.11 L1124.42 1212.11 L1123.83 1212.11 L1123.25 1212.11 L1122.66 1212.11 L1122.07 1212.11 L1121.49 1212.11 L1120.9 1212.11 L1120.31 1212.11 L1119.73 1212.11 L1119.14 1212.11 L1118.55 1212.11 L1117.97 1212.11 L1117.38 1212.11 L1116.8 1212.11 L1116.21 1212.11 L1115.62 1212.11 L1115.04 1212.11 L1114.45 1212.11 L1113.86 1212.11 L1113.28 1212.11 L1112.69 1212.11 L1112.1 1212.11 L1111.52 1212.11 L1110.93 1212.11 L1110.34 1212.11 L1109.76 1212.11 L1109.17 1212.11 L1108.59 1212.11 L1108 1212.11 L1107.41 1212.11 L1106.83 1212.11 L1106.24 1212.11 L1105.65 1212.11 L1105.07 1212.11 L1104.48 1212.11 L1103.89 1212.11 L1103.31 1212.11 L1102.72 1212.11 L1102.14 1212.11 L1101.55 1212.11 L1100.96 1212.11 L1100.38 1212.11 L1099.79 1212.11 L1099.2 1212.11 L1098.62 1212.11 L1098.03 1212.11 L1097.44 1212.11 L1096.86 1212.11 L1096.27 1212.11 L1095.68 1212.11 L1095.1 1212.11 L1094.51 1212.11 L1093.93 1212.11 L1093.34 1212.11 L1092.75 1212.11 L1092.17 1212.11 L1091.58 1212.11 L1090.99 1212.11 L1090.41 1212.11 L1089.82 1212.11 L1089.23 1212.11 L1088.65 1212.11 L1088.06 1212.11 L1087.47 1212.11 L1086.89 1212.11 L1086.3 1212.11 L1085.72 1212.11 L1085.13 1212.11 L1084.54 1212.11 L1083.96 1212.11 L1083.37 1212.11 L1082.78 1212.11 L1082.2 1212.11 L1081.61 1212.11 L1081.02 1212.11 L1080.44 1212.11 L1079.85 1212.11 L1079.26 1212.11 L1078.68 1212.11 L1078.09 1212.11 L1077.51 1212.11 L1076.92 1212.11 L1076.33 1212.11 L1075.75 1212.11 L1075.16 1212.11 L1074.57 1212.11 L1073.99 1212.11 L1073.4 1212.11 L1072.81 1212.11 L1072.23 1212.11 L1071.64 1212.11 L1071.06 1212.11 L1070.47 1212.11 L1069.88 1212.11 L1069.3 1212.11 L1068.71 1212.11 L1068.12 1212.11 L1067.54 1212.11 L1066.95 1212.11 L1066.36 1212.11 L1065.78 1212.11 L1065.19 1212.11 L1064.6 1212.11 L1064.02 1212.11 L1063.43 1212.11 L1062.85 1212.11 L1062.26 1212.11 L1061.67 1212.11 L1061.09 1212.11 L1060.5 1212.11 L1059.91 1212.11 L1059.33 1212.11 L1058.74 1212.11 L1058.15 1212.11 L1057.57 1212.11 L1056.98 1212.11 L1056.39 1212.11 L1055.81 1212.11 L1055.22 1212.11 L1054.64 1212.11 L1054.05 1212.11 L1053.46 1212.11 L1052.88 1212.11 L1052.29 1212.11 L1051.7 1212.11 L1051.12 1212.11 L1050.53 1212.11 L1049.94 1212.11 L1049.36 1212.11 L1048.77 1212.11 L1048.19 1212.11 L1047.6 1212.11 L1047.01 1212.11 L1046.43 1212.11 L1045.84 1212.11 L1045.25 1212.11 L1044.67 1212.11 L1044.08 1212.11 L1043.49 1212.11 L1042.91 1212.11 L1042.32 1212.11 L1041.73 1212.11 L1041.15 1212.11 L1040.56 1212.11 L1039.98 1212.11 L1039.39 1212.11 L1038.8 1212.11 L1038.22 1212.11 L1037.63 1212.11 L1037.04 1212.11 L1036.46 1212.11 L1035.87 1212.11 L1035.28 1212.11 L1034.7 1212.11 L1034.11 1212.11 L1033.52 1212.11 L1032.94 1212.11 L1032.35 1212.11 L1031.77 1212.11 L1031.18 1212.11 L1030.59 1212.11 L1030.01 1212.11 L1029.42 1212.11 L1028.83 1212.11 L1028.25 1212.11 L1027.66 1212.11 L1027.07 1212.11 L1026.49 1212.11 L1025.9 1212.11 L1025.32 1212.11 L1024.73 1212.11 L1024.14 1212.11 L1023.56 1212.11 L1022.97 1212.11 L1022.38 1212.11 L1021.8 1212.11 L1021.21 1212.11 L1020.62 1212.11 L1020.04 1212.11 L1019.45 1212.11 L1018.86 1212.11 L1018.28 1212.11 L1017.69 1212.11 L1017.11 1212.11 L1016.52 1212.11 L1015.93 1212.11 L1015.35 1212.11 L1014.76 1212.11 L1014.17 1212.11 L1013.59 1212.11 L1013 1212.11 L1012.41 1212.11 L1011.83 1212.11 L1011.24 1212.11 L1010.65 1212.11 L1010.07 1212.11 L1009.48 1212.11 L1008.9 1212.11 L1008.31 1212.11 L1007.72 1212.11 L1007.14 1212.11 L1006.55 1212.11 L1005.96 1212.11 L1005.38 1212.11 L1004.79 1212.11 L1004.2 1212.11 L1003.62 1212.11 L1003.03 1212.11 L1002.44 1212.11 L1001.86 1212.11 L1001.27 1212.11 L1000.69 1212.11 L1000.1 1212.11 L999.513 1212.11 L998.926 1212.11 L998.34 1212.11 L997.754 1212.11 L997.167 1212.11 L996.581 1212.11 L995.994 1212.11 L995.408 1212.11 L994.822 1212.11 L994.235 1212.11 L993.649 1212.11 L993.062 1212.11 L992.476 1212.11 L991.889 1212.11 L991.303 1212.11 L990.717 1212.11 L990.13 1212.11 L989.544 1212.11 L988.957 1212.11 L988.371 1212.11 L987.785 1212.11 L987.198 1212.11 L986.612 1212.11 L986.025 1212.11  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.17 986.612,1212.17 987.198,1212.17 987.785,1212.17 988.371,1212.17 988.957,1212.17 989.544,1212.17 990.13,1212.17 990.717,1212.17 991.303,1212.17 991.889,1212.17 992.476,1212.17 993.062,1212.17 993.649,1212.17 994.235,1212.17 994.822,1212.17 995.408,1212.17 995.994,1212.17 996.581,1212.17 997.167,1212.17 997.754,1212.17 998.34,1212.17 998.926,1212.17 999.513,1212.17 1000.1,1212.17 1000.69,1212.17 1001.27,1212.17 1001.86,1212.17 1002.44,1212.17 1003.03,1212.17 1003.62,1212.17 1004.2,1212.17 1004.79,1212.17 1005.38,1212.17 1005.96,1212.17 1006.55,1212.17 1007.14,1212.17 1007.72,1212.17 1008.31,1212.17 1008.9,1212.17 1009.48,1212.17 1010.07,1212.17 1010.65,1212.17 1011.24,1212.17 1011.83,1212.17 1012.41,1212.17 1013,1212.17 1013.59,1212.17 1014.17,1212.17 1014.76,1212.17 1015.35,1212.17 1015.93,1212.17 1016.52,1212.17 1017.11,1212.17 1017.69,1212.17 1018.28,1212.17 1018.86,1212.17 1019.45,1212.17 1020.04,1212.17 1020.62,1212.17 1021.21,1212.17 1021.8,1212.17 1022.38,1212.17 1022.97,1212.17 1023.56,1212.17 1024.14,1212.17 1024.73,1212.17 1025.32,1212.17 1025.9,1212.17 1026.49,1212.17 1027.07,1212.17 1027.66,1212.17 1028.25,1212.17 1028.83,1212.17 1029.42,1212.17 1030.01,1212.17 1030.59,1212.17 1031.18,1212.17 1031.77,1212.17 1032.35,1212.17 1032.94,1212.17 1033.52,1212.17 1034.11,1212.17 1034.7,1212.17 1035.28,1212.17 1035.87,1212.17 1036.46,1212.17 1037.04,1212.17 1037.63,1212.17 1038.22,1212.17 1038.8,1212.17 1039.39,1212.17 1039.98,1212.17 1040.56,1212.17 1041.15,1212.17 1041.73,1212.17 1042.32,1212.17 1042.91,1212.17 1043.49,1212.17 1044.08,1212.17 1044.67,1212.17 1045.25,1212.17 1045.84,1212.17 1046.43,1212.17 1047.01,1212.17 1047.6,1212.17 1048.19,1212.17 1048.77,1212.17 1049.36,1212.17 1049.94,1212.17 1050.53,1212.17 1051.12,1212.17 1051.7,1212.17 1052.29,1212.17 1052.88,1212.17 1053.46,1212.17 1054.05,1212.17 1054.64,1212.17 1055.22,1212.17 1055.81,1212.17 1056.39,1212.17 1056.98,1212.17 1057.57,1212.17 1058.15,1212.17 1058.74,1212.17 1059.33,1212.17 1059.91,1212.17 1060.5,1212.17 1061.09,1212.17 1061.67,1212.17 1062.26,1212.17 1062.85,1212.17 1063.43,1212.17 1064.02,1212.17 1064.6,1212.17 1065.19,1212.17 1065.78,1212.17 1066.36,1212.17 1066.95,1212.17 1067.54,1212.17 1068.12,1212.17 1068.71,1212.17 1069.3,1212.17 1069.88,1212.17 1070.47,1212.17 1071.06,1212.17 1071.64,1212.17 1072.23,1212.17 1072.81,1212.17 1073.4,1212.17 1073.99,1212.17 1074.57,1212.17 1075.16,1212.17 1075.75,1212.17 1076.33,1212.17 1076.92,1212.17 1077.51,1212.17 1078.09,1212.17 1078.68,1212.17 1079.26,1212.17 1079.85,1212.17 1080.44,1212.17 1081.02,1212.17 1081.61,1212.17 1082.2,1212.17 1082.78,1212.17 1083.37,1212.17 1083.96,1212.17 1084.54,1212.17 1085.13,1212.17 1085.72,1212.17 1086.3,1212.17 1086.89,1212.17 1087.47,1212.17 1088.06,1212.17 1088.65,1212.17 1089.23,1212.17 1089.82,1212.17 1090.41,1212.17 1090.99,1212.17 1091.58,1212.17 1092.17,1212.17 1092.75,1212.17 1093.34,1212.17 1093.93,1212.17 1094.51,1212.17 1095.1,1212.17 1095.68,1212.17 1096.27,1212.17 1096.86,1212.17 1097.44,1212.17 1098.03,1212.17 1098.62,1212.17 1099.2,1212.17 1099.79,1212.17 1100.38,1212.17 1100.96,1212.17 1101.55,1212.17 1102.14,1212.17 1102.72,1212.17 1103.31,1212.17 1103.89,1212.17 1104.48,1212.17 1105.07,1212.17 1105.65,1212.17 1106.24,1212.17 1106.83,1212.17 1107.41,1212.17 1108,1212.17 1108.59,1212.17 1109.17,1212.17 1109.76,1212.17 1110.34,1212.17 1110.93,1212.17 1111.52,1212.17 1112.1,1212.17 1112.69,1212.17 1113.28,1212.17 1113.86,1212.17 1114.45,1212.17 1115.04,1212.17 1115.62,1212.17 1116.21,1212.17 1116.8,1212.17 1117.38,1212.17 1117.97,1212.17 1118.55,1212.17 1119.14,1212.17 1119.73,1212.17 1120.31,1212.17 1120.9,1212.17 1121.49,1212.17 1122.07,1212.17 1122.66,1212.17 1123.25,1212.17 1123.83,1212.17 1124.42,1212.17 1125.01,1212.17 1125.59,1212.17 1126.18,1212.17 1126.76,1212.17 1127.35,1212.17 1127.94,1212.17 1128.52,1212.17 1129.11,1212.17 1129.7,1212.17 1130.28,1212.17 1130.87,1212.17 1131.46,1212.17 1132.04,1212.17 1132.63,1212.17 1133.21,1212.17 1133.8,1212.17 1134.39,1212.17 1134.97,1212.17 1135.56,1212.17 1136.15,1212.17 1136.73,1212.17 1137.32,1212.17 1137.91,1212.17 1138.49,1212.17 1139.08,1212.17 1139.67,1212.17 1140.25,1212.17 1140.84,1212.17 1141.42,1212.17 1142.01,1212.17 1142.6,1212.17 1143.18,1212.17 1143.77,1212.17 1144.36,1212.17 1144.94,1212.17 1145.53,1212.17 1146.12,1212.17 1146.7,1212.17 1147.29,1212.17 1147.88,1212.17 1148.46,1212.17 1149.05,1212.17 1149.63,1212.17 1150.22,1212.17 1150.81,1212.17 1151.39,1212.17 1151.98,1212.17 1152.57,1212.17 1153.15,1212.17 1153.74,1212.17 1154.33,1212.17 1154.91,1212.17 1155.5,1212.17 1156.09,1212.17 1156.67,1212.17 1157.26,1212.17 1157.84,1212.17 1158.43,1212.17 1159.02,1212.17 1159.6,1212.17 1160.19,1212.17 1160.78,1212.17 1161.36,1212.17 1161.95,1212.17 1162.54,1212.17 1163.12,1212.17 1163.71,1212.17 1164.29,1212.17 1164.88,1212.17 1165.47,1212.17 1166.05,1212.17 1166.64,1212.17 1167.23,1212.17 1167.81,1212.17 1168.4,1212.17 1168.99,1212.17 1169.57,1212.17 1170.16,1212.17 1170.75,1212.17 1171.33,1212.17 1171.92,1212.17 1172.5,1212.17 1173.09,1212.17 1173.68,1212.17 1174.26,1212.17 1174.85,1212.17 1175.44,1212.17 1176.02,1212.17 1176.61,1212.17 1177.2,1212.17 1177.78,1212.17 1178.37,1212.17 1178.96,1212.17 1179.54,1212.17 1180.13,1212.17 1180.71,1212.17 1181.3,1212.17 1181.89,1212.17 1182.47,1212.17 1183.06,1212.17 1183.65,1212.17 1184.23,1212.17 1184.82,1212.17 1185.41,1212.17 1185.99,1212.17 1186.58,1212.17 1187.16,1212.17 1187.75,1212.17 1188.34,1212.17 1188.92,1212.17 1189.51,1212.17 1190.1,1212.17 1190.68,1212.17 1191.27,1212.17 1191.86,1212.17 1192.44,1212.17 1193.03,1212.17 1193.62,1212.17 1194.2,1212.17 1194.79,1212.17 1195.37,1212.17 1195.96,1212.17 1196.55,1212.17 1197.13,1212.17 1197.72,1212.17 1198.31,1212.17 1198.89,1212.17 1199.48,1212.17 1200.07,1212.17 1200.65,1212.17 1201.24,1212.17 1201.83,1212.17 1202.41,1212.17 1203,1212.17 1203.58,1212.17 1204.17,1212.17 1204.76,1212.17 1205.34,1212.17 1205.93,1212.17 1206.52,1212.17 1207.1,1212.17 1207.69,1212.17 1208.28,1212.17 1208.86,1212.17 1209.45,1212.17 1210.03,1212.17 1210.62,1212.17 1211.21,1212.17 1211.79,1212.17 1212.38,1212.17 1212.97,1212.17 1213.55,1212.17 1214.14,1212.17 1214.73,1212.17 1215.31,1212.17 1215.9,1212.17 1216.49,1212.17 1217.07,1212.17 1217.66,1212.17 1218.24,1212.17 1218.83,1212.17 1219.42,1212.17 1220,1212.17 1220.59,1212.17 1221.18,1212.17 1221.76,1212.17 1222.35,1212.17 1222.94,1212.17 1223.52,1212.17 1224.11,1212.17 1224.7,1212.17 1225.28,1212.17 1225.87,1212.17 1226.45,1212.17 1227.04,1212.17 1227.63,1212.17 1228.21,1212.17 1228.8,1212.17 1229.39,1212.17 1229.97,1212.17 1230.56,1212.17 1231.15,1212.17 1231.73,1212.17 1232.32,1212.17 1232.91,1212.17 1233.49,1212.17 1234.08,1212.17 1234.66,1212.17 1235.25,1212.17 1235.84,1212.17 1236.42,1212.17 1237.01,1212.17 1237.6,1212.17 1238.18,1212.17 1238.77,1212.17 1239.36,1212.17 1239.94,1212.17 1240.53,1212.17 1241.11,1212.17 1241.7,1212.17 1242.29,1212.17 1242.87,1212.17 1243.46,1212.17 1244.05,1212.17 1244.63,1212.17 1245.22,1212.17 1245.81,1212.17 1246.39,1212.17 1246.98,1212.17 1247.57,1212.17 1248.15,1212.17 1248.74,1212.17 1249.32,1212.17 1249.91,1212.17 1250.5,1212.17 1251.08,1212.17 1251.67,1212.17 1252.26,1212.17 1252.84,1212.17 1253.43,1212.17 1254.02,1212.17 1254.6,1212.17 1255.19,1212.17 1255.78,1212.17 1256.36,1212.17 1256.95,1212.17 1257.53,1212.17 1258.12,1212.17 1258.71,1212.17 1259.29,1212.17 1259.88,1212.17 1260.47,1212.17 1261.05,1212.17 1261.64,1212.17 1262.23,1212.17 1262.81,1212.17 1263.4,1212.17 1263.98,1212.17 1264.57,1212.17 1265.16,1212.17 1265.74,1212.17 1266.33,1212.17 1266.92,1212.17 1267.5,1212.17 1268.09,1212.17 1268.68,1212.17 1269.26,1212.17 1269.85,1212.17 1270.44,1212.17 1271.02,1212.17 1271.61,1212.17 1272.19,1212.17 1272.78,1212.17 1273.37,1212.17 1273.95,1212.17 1274.54,1212.17 1275.13,1212.17 1275.71,1212.17 1276.3,1212.17 1276.89,1212.17 1277.47,1212.17 1278.06,1212.17 1278.65,1212.17 1279.23,1212.17 1279.82,1212.17 1280.4,1212.17 1280.99,1212.17 1281.58,1212.17 1282.16,1212.17 1282.75,1212.17 1283.34,1212.17 1283.92,1212.17 1284.51,1212.17 1285.1,1212.17 1285.68,1212.17 1286.27,1212.17 1286.86,1212.17 1287.44,1212.17 1288.03,1212.17 1288.61,1212.17 1289.2,1212.17 1289.79,1212.17 1290.37,1212.17 1290.96,1212.17 1291.55,1212.17 1292.13,1212.17 1292.72,1212.17 1293.31,1212.17 1293.89,1212.17 1294.48,1212.17 1295.06,1212.17 1295.65,1212.17 1296.24,1212.17 1296.82,1212.17 1297.41,1212.17 1298,1212.17 1298.58,1212.17 1299.17,1212.17 1299.76,1212.17 1300.34,1212.17 1300.93,1212.17 1301.52,1212.17 1302.1,1212.17 1302.69,1212.17 1303.27,1212.17 1303.86,1212.17 1304.45,1212.17 1305.03,1212.17 1305.62,1212.17 1306.21,1212.17 1306.79,1212.17 1307.38,1212.17 1307.97,1212.17 1308.55,1212.17 1309.14,1212.17 1309.73,1212.17 1310.31,1212.17 1310.9,1212.17 1311.48,1212.17 1312.07,1212.17 1312.66,1212.17 1313.24,1212.17 1313.83,1212.17 1314.42,1212.17 1315,1212.17 1315.59,1212.17 1316.18,1212.17 1316.76,1212.17 1317.35,1212.17 1317.93,1212.17 1318.52,1212.17 1319.11,1212.17 1319.69,1212.17 1320.28,1212.17 1320.87,1212.17 1321.45,1212.17 1322.04,1212.17 1322.63,1212.17 1323.21,1212.17 1323.8,1212.17 1324.39,1212.17 1324.97,1212.17 1325.56,1212.17 1326.14,1212.17 1326.73,1212.17 1327.32,1212.17 1327.9,1212.17 1328.49,1212.17 1329.08,1212.17 1329.66,1212.17 1330.25,1212.17 1330.84,1212.17 1331.42,1212.17 1332.01,1212.17 1332.6,1212.17 1333.18,1212.17 1333.77,1212.17 1334.35,1212.17 1334.94,1212.17 1335.53,1212.17 1336.11,1212.17 1336.7,1212.17 1337.29,1212.17 1337.87,1212.17 1338.46,1212.17 1339.05,1212.17 1339.63,1212.17 1340.22,1212.17 1340.8,1212.17 1341.39,1212.17 1341.98,1212.17 1342.56,1212.17 1343.15,1212.17 1343.74,1212.17 1344.32,1212.17 1344.91,1212.17 1345.5,1212.17 1346.08,1212.17 1346.67,1212.17 1347.26,1212.17 1347.84,1212.17 1348.43,1212.17 1349.01,1212.17 1349.6,1212.17 1350.19,1212.17 1350.77,1212.17 1351.36,1212.17 1351.95,1212.17 1352.53,1212.17 1353.12,1212.17 1353.71,1212.17 1354.29,1212.17 1354.88,1212.17 1355.47,1212.17 1356.05,1212.17 1356.64,1212.17 1357.22,1212.17 1357.81,1212.17 1358.4,1212.17 1358.98,1212.17 1359.57,1212.17 1360.16,1212.17 1360.74,1212.17 1361.33,1212.17 1361.92,1212.17 1362.5,1212.17 1363.09,1212.17 1363.68,1212.17 1364.26,1212.17 1364.85,1212.17 1365.43,1212.17 1366.02,1212.17 1366.61,1212.17 1367.19,1212.17 1367.78,1212.17 1368.37,1212.17 1368.95,1212.17 1369.54,1212.17 1370.13,1212.17 1370.71,1212.17 1371.3,1212.17 1371.88,1212.17 1372.47,1212.17 1373.06,1212.17 1373.64,1212.17 1374.23,1212.17 1374.82,1212.17 1375.4,1212.17 1375.99,1212.17 1376.58,1212.17 1377.16,1212.17 1377.75,1212.17 1378.34,1212.17 1378.92,1212.17 1379.51,1212.17 1380.09,1212.17 1380.68,1212.17 1381.27,1212.17 1381.85,1212.17 1382.44,1212.17 1383.03,1212.17 1383.61,1212.17 1384.2,1212.17 1384.79,1212.17 1385.37,1212.17 1385.96,1212.17 1386.55,1212.17 1387.13,1212.17 1387.72,1212.17 1388.3,1212.17 1388.89,1212.17 1389.48,1212.17 1390.06,1212.17 1390.65,1212.17 1391.24,1212.17 1391.82,1212.17 1392.41,1212.17 1393,1212.17 1393.58,1212.17 1394.17,1212.17 1394.75,1212.17 1395.34,1212.17 1395.93,1212.17 1396.51,1212.17 1397.1,1212.17 1397.69,1212.17 1398.27,1212.17 1398.86,1212.17 1399.45,1212.17 1400.03,1212.17 1400.62,1212.17 1401.21,1212.17 1401.79,1212.17 1402.38,1212.17 1402.96,1212.17 1403.55,1212.17 1404.14,1212.17 1404.72,1212.17 1405.31,1212.17 1405.9,1212.17 1406.48,1212.17 1407.07,1212.17 1407.66,1212.17 1408.24,1212.17 1408.83,1212.17 1409.42,1212.17 1410,1212.17 1410.59,1212.17 1411.17,1212.17 1411.76,1212.17 1412.35,1212.17 1412.93,1212.17 1413.52,1212.17 1414.11,1212.17 1414.69,1212.17 1415.28,1212.17 1415.87,1212.17 1416.45,1212.17 1417.04,1212.17 1417.63,1212.17 1418.21,1212.17 1418.8,1212.17 1419.38,1212.17 1419.97,1212.17 1420.56,1212.17 1421.14,1212.17 1421.73,1212.17 1422.32,1212.17 1422.9,1212.17 1423.49,1212.17 1424.08,1212.17 1424.66,1212.17 1425.25,1212.17 1425.83,1212.17 1426.42,1212.17 1427.01,1212.17 1427.59,1212.17 1428.18,1212.17 1428.77,1212.17 1429.35,1212.17 1429.94,1212.17 1430.53,1212.17 1431.11,1212.17 1431.7,1212.17 1432.29,1212.17 1432.87,1212.17 1433.46,1212.17 1434.04,1212.17 1434.63,1212.17 1435.22,1212.17 1435.8,1212.17 1436.39,1212.17 1436.98,1212.17 1437.56,1212.17 1438.15,1212.17 1438.74,1212.17 1439.32,1212.17 1439.91,1212.17 1440.5,1212.17 1441.08,1212.17 1441.67,1212.17 1442.25,1212.17 1442.84,1212.17 1443.43,1212.17 1444.01,1212.17 1444.6,1212.17 1445.19,1212.17 1445.77,1212.17 1446.36,1212.17 1446.95,1212.17 1447.53,1212.17 1448.12,1212.17 1448.7,1212.17 1449.29,1212.17 1449.88,1212.17 1450.46,1212.17 1451.05,1212.17 1451.64,1212.17 1452.22,1212.17 1452.81,1212.17 1453.4,1212.17 1453.98,1212.17 1454.57,1212.17 1455.16,1212.17 1455.74,1212.17 1456.33,1212.17 1456.91,1212.17 1457.5,1212.17 1458.09,1212.17 1458.67,1212.17 1459.26,1212.17 1459.85,1212.17 1460.43,1212.17 1461.02,1212.17 1461.61,1212.17 1462.19,1212.17 1462.78,1212.17 1463.37,1212.17 1463.95,1212.17 1464.54,1212.17 1465.12,1212.17 1465.71,1212.17 1466.3,1212.17 1466.88,1212.17 1467.47,1212.17 1468.06,1212.17 1468.64,1212.17 1469.23,1212.17 1469.82,1212.17 1470.4,1212.17 1470.99,1212.17 1471.57,1212.17 1472.16,1212.17 1472.75,1212.17 1473.33,1212.17 1473.92,1212.17 1474.51,1212.17 1475.09,1212.17 1475.68,1212.17 1476.27,1212.17 1476.85,1212.17 1477.44,1212.17 1478.03,1212.17 1478.61,1212.17 1479.2,1212.17 1479.78,1212.17 1480.37,1212.17 1480.96,1212.17 1481.54,1212.17 1482.13,1212.17 1482.72,1212.17 1483.3,1212.17 1483.89,1212.17 1484.48,1212.17 1485.06,1212.17 1485.65,1212.17 1486.24,1212.17 1486.82,1212.17 1487.41,1212.17 1487.99,1212.17 1488.58,1212.17 1489.17,1212.17 1489.75,1212.17 1490.34,1212.17 1490.93,1212.17 1491.51,1212.17 1492.1,1212.17 1492.69,1212.17 1493.27,1212.17 1493.86,1212.17 1494.45,1212.17 1495.03,1212.17 1495.62,1212.17 1496.2,1212.17 1496.79,1212.17 1497.38,1212.17 1497.96,1212.17 1498.55,1212.17 1499.14,1212.17 1499.72,1212.17 1500.31,1212.17 1500.9,1212.17 1501.48,1212.17 1502.07,1212.17 1502.65,1212.17 1503.24,1212.17 1503.83,1212.17 1504.41,1212.17 1505,1212.17 1505.59,1212.17 1506.17,1212.17 1506.76,1212.17 1507.35,1212.17 1507.93,1212.17 1508.52,1212.17 1509.11,1212.17 1509.69,1212.17 1510.28,1212.17 1510.86,1212.17 1511.45,1212.17 1512.04,1212.17 1512.62,1212.17 1513.21,1212.17 1513.8,1212.17 1514.38,1212.17 1514.97,1212.17 1515.56,1212.17 1516.14,1212.17 1516.73,1212.17 1517.32,1212.17 1517.9,1212.17 1518.49,1212.17 1519.07,1212.17 1519.66,1212.17 1520.25,1212.17 1520.83,1212.17 1521.42,1212.17 1522.01,1212.17 1522.59,1212.17 1523.18,1212.17 1523.77,1212.17 1524.35,1212.17 1524.94,1212.17 1525.52,1212.17 1526.11,1212.17 1526.7,1212.17 1527.28,1212.17 1527.87,1212.17 1528.46,1212.17 1529.04,1212.17 1529.63,1212.17 1530.22,1212.17 1530.8,1212.17 1531.39,1212.17 1531.98,1212.17 1532.56,1212.17 1533.15,1212.17 1533.73,1212.17 1534.32,1212.17 1534.91,1212.17 1535.49,1212.17 1536.08,1212.17 1536.67,1212.17 1537.25,1212.17 1537.84,1212.17 1538.43,1212.17 1539.01,1212.17 1539.6,1212.17 1540.19,1212.17 1540.77,1212.17 1541.36,1212.17 1541.94,1212.17 1542.53,1212.17 1543.12,1212.17 1543.7,1212.17 1544.29,1212.17 1544.88,1212.17 1545.46,1212.17 1546.05,1212.17 1546.64,1212.17 1547.22,1212.17 1547.81,1212.17 1548.4,1212.17 1548.98,1212.17 1549.57,1212.17 1550.15,1212.17 1550.74,1212.17 1551.33,1212.17 1551.91,1212.17 1552.5,1212.17 1553.09,1212.17 1553.67,1212.17 1554.26,1212.17 1554.85,1212.17 1555.43,1212.17 1556.02,1212.17 1556.6,1212.17 1557.19,1212.17 1557.78,1212.17 1558.36,1212.17 1558.95,1212.17 1559.54,1212.17 1560.12,1212.17 1560.71,1212.17 1561.3,1212.17 1561.88,1212.17 1562.47,1212.17 1563.06,1212.17 1563.64,1212.17 1564.23,1212.17 1564.81,1212.17 1565.4,1212.17 1565.99,1212.17 1566.57,1212.17 1567.16,1212.17 1567.75,1212.17 1568.33,1212.17 1568.92,1212.17 1569.51,1212.17 1570.09,1212.17 1570.68,1212.17 1571.27,1212.17 1571.85,1212.17 1572.44,1212.17 1573.02,1212.17 1573.61,1212.17 1574.2,1212.17 1574.78,1212.17 1575.37,1212.17 1575.96,1212.17 1576.54,1212.17 1577.13,1212.17 1577.72,1212.17 1578.3,1212.17 1578.89,1212.17 1579.47,1212.17 1580.06,1212.17 1580.65,1212.17 1581.23,1212.17 1581.82,1212.17 1582.41,1212.17 1582.99,1212.17 1583.58,1212.17 1584.17,1212.17 1584.75,1212.17 1585.34,1212.17 1585.93,1212.17 1586.51,1212.17 1587.1,1212.17 1587.68,1212.17 1588.27,1212.17 1588.86,1212.17 1589.44,1212.17 1590.03,1212.17 1590.62,1212.17 1591.2,1212.17 1591.79,1212.17 1592.38,1212.17 1592.96,1212.17 1593.55,1212.17 1594.14,1212.17 1594.72,1212.17 1595.31,1212.17 1595.89,1212.17 1596.48,1212.17 1597.07,1212.17 1597.65,1212.17 1598.24,1212.17 1598.83,1212.17 1599.41,1212.17 1600,1212.17 1600.59,1212.17 1601.17,1212.17 1601.76,1212.17 1602.34,1212.17 1602.93,1212.17 1603.52,1212.17 1604.1,1212.17 1604.69,1212.17 1605.28,1212.17 1605.86,1212.17 1606.45,1212.17 1607.04,1212.17 1607.62,1212.17 1608.21,1212.17 1608.8,1212.17 1609.38,1212.17 1609.97,1212.17 1610.55,1212.17 1611.14,1212.17 1611.73,1212.17 1612.31,1212.17 1612.9,1212.17 1613.49,1212.17 1614.07,1212.17 1614.66,1212.17 1615.25,1212.17 1615.83,1212.17 1616.42,1212.17 1617.01,1212.17 1617.59,1212.17 1618.18,1212.17 1618.76,1212.17 1619.35,1212.17 1619.94,1212.17 1620.52,1212.17 1621.11,1212.17 1621.7,1212.17 1622.28,1212.17 1622.87,1212.17 1623.46,1212.17 1624.04,1212.17 1624.63,1212.17 1625.22,1212.17 1625.8,1212.17 1626.39,1212.17 1626.97,1212.17 1627.56,1212.17 1628.15,1212.17 1628.73,1212.17 1629.32,1212.17 1629.91,1212.17 1630.49,1212.17 1631.08,1212.17 1631.67,1212.17 1632.25,1212.17 1632.84,1212.17 1633.42,1212.17 1634.01,1212.17 1634.6,1212.17 1635.18,1212.17 1635.77,1212.17 1636.36,1212.17 1636.94,1212.17 1637.53,1212.17 1638.12,1212.17 1638.7,1212.17 1639.29,1212.17 1639.88,1212.17 1640.46,1212.17 1641.05,1212.17 1641.63,1212.17 1642.22,1212.17 1642.81,1212.17 1643.39,1212.17 1643.98,1212.17 1644.57,1212.17 1645.15,1212.17 1645.74,1212.17 1646.33,1212.17 1646.91,1212.17 1647.5,1212.17 1648.09,1212.17 1648.67,1212.17 1649.26,1212.17 1649.84,1212.17 1650.43,1212.17 1651.02,1212.17 1651.6,1212.17 1652.19,1212.17 1652.78,1212.17 1653.36,1212.17 1653.95,1212.17 1654.54,1212.17 1655.12,1212.17 1655.71,1212.17 1656.29,1212.17 1656.88,1212.17 1657.47,1212.17 1658.05,1212.17 1658.64,1212.17 1659.23,1212.17 1659.81,1212.17 1660.4,1212.17 1660.99,1212.17 1661.57,1212.17 1662.16,1212.17 1662.75,1212.17 1663.33,1212.17 1663.92,1212.17 1664.5,1212.17 1665.09,1212.17 1665.68,1212.17 1666.26,1212.17 1666.85,1212.17 1667.44,1212.17 1668.02,1212.17 1668.61,1212.17 1669.2,1212.17 1669.78,1212.17 1670.37,1212.17 1670.96,1212.17 1671.54,1212.17 1672.13,1212.17 1672.71,1212.17 1673.3,1212.17 1673.89,1212.17 1674.47,1212.17 1675.06,1212.17 1675.65,1212.17 1676.23,1212.17 1676.82,1212.17 1677.41,1212.17 1677.99,1212.17 1678.58,1212.17 1679.17,1212.17 1679.75,1212.17 1680.34,1212.17 1680.92,1212.17 1681.51,1212.17 1682.1,1212.17 1682.68,1212.17 1683.27,1212.17 1683.86,1212.17 1684.44,1212.17 1685.03,1212.17 1685.62,1212.17 1686.2,1212.17 1686.79,1212.17 1687.37,1212.17 1687.96,1212.17 1688.55,1212.17 1689.13,1212.17 1689.72,1212.17 1690.31,1212.17 1690.89,1212.17 1691.48,1212.17 1692.07,1212.17 1692.65,1212.17 1693.24,1212.17 1693.83,1212.17 1694.41,1212.17 1695,1212.17 1695.58,1212.17 1696.17,1212.17 1696.76,1212.17 1697.34,1212.17 1697.93,1212.17 1698.52,1212.17 1699.1,1212.17 1699.69,1212.17 1700.28,1212.17 1700.86,1212.17 1701.45,1212.17 1702.04,1212.17 1702.62,1212.17 1703.21,1212.17 1703.79,1212.17 1704.38,1212.17 1704.97,1212.17 1705.55,1212.17 1706.14,1212.17 1706.73,1212.17 1707.31,1212.17 1707.9,1212.17 1708.49,1212.17 1709.07,1212.17 1709.66,1212.17 1710.24,1212.17 1710.83,1212.17 1711.42,1212.17 1712,1212.17 1712.59,1212.17 1713.18,1212.17 1713.76,1212.17 1714.35,1212.17 1714.94,1212.17 1715.52,1212.17 1716.11,1212.17 1716.7,1212.17 1717.28,1212.17 1717.87,1212.17 1718.45,1212.17 1719.04,1212.17 1719.63,1212.17 1720.21,1212.17 1720.8,1212.17 1721.39,1212.17 1721.97,1212.17 1722.56,1212.17 1723.15,1212.17 1723.73,1212.17 1724.32,1212.17 1724.91,1212.17 1725.49,1212.17 1726.08,1212.17 1726.66,1212.17 1727.25,1212.17 1727.84,1212.17 1728.42,1212.17 1729.01,1212.17 1729.6,1212.17 1730.18,1212.17 1730.77,1212.17 1731.36,1212.17 1731.94,1212.17 1732.53,1212.17 1733.11,1212.17 1733.7,1212.17 1734.29,1212.17 1734.87,1212.17 1735.46,1212.17 1736.05,1212.17 1736.63,1212.17 1737.22,1212.17 1737.81,1212.17 1738.39,1212.17 1738.98,1212.17 1739.57,1212.17 1740.15,1212.17 1740.74,1212.17 1741.32,1212.17 1741.91,1212.17 1742.5,1212.17 1743.08,1212.17 1743.67,1212.17 1744.26,1212.17 1744.84,1212.17 1745.43,1212.17 1746.02,1212.17 1746.6,1212.17 1747.19,1212.17 1747.78,1212.17 1748.36,1212.17 1748.95,1212.17 1749.53,1212.17 1750.12,1212.17 1750.71,1212.17 1751.29,1212.17 1751.88,1212.17 1752.47,1212.17 1753.05,1212.17 1753.64,1212.17 1754.23,1212.17 1754.81,1212.17 1755.4,1212.17 1755.99,1212.17 1756.57,1212.17 1757.16,1212.17 1757.74,1212.17 1758.33,1212.17 1758.92,1212.17 1759.5,1212.17 1760.09,1212.17 1760.68,1212.17 1761.26,1212.17 1761.85,1212.17 1762.44,1212.17 1763.02,1212.17 1763.61,1212.17 1764.19,1212.17 1764.78,1212.17 1765.37,1212.17 1765.95,1212.17 1766.54,1212.17 1767.13,1212.17 1767.71,1212.17 1768.3,1212.17 1768.89,1212.17 1769.47,1212.17 1770.06,1212.17 1770.65,1212.17 1771.23,1212.17 1771.82,1212.17 1772.4,1212.17 1772.99,1212.17 1773.58,1212.17 1774.16,1212.17 1774.75,1212.17 1775.34,1212.17 1775.92,1212.17 1776.51,1212.17 1777.1,1212.17 1777.68,1212.17 1778.27,1212.17 1778.86,1212.17 1779.44,1212.17 1780.03,1212.17 1780.61,1212.17 1781.2,1212.17 1781.79,1212.17 1782.37,1212.17 1782.96,1212.17 1783.55,1212.17 1784.13,1212.17 1784.72,1212.17 1785.31,1212.17 1785.89,1212.17 1786.48,1212.17 1787.06,1212.17 1787.65,1212.17 1788.24,1212.17 1788.82,1212.17 1789.41,1212.17 1790,1212.17 1790.58,1212.17 1791.17,1212.17 1791.76,1212.17 1792.34,1212.17 1792.93,1212.17 1793.52,1212.17 1794.1,1212.17 1794.69,1212.17 1795.27,1212.17 1795.86,1212.17 1796.45,1212.17 1797.03,1212.17 1797.62,1212.17 1798.21,1212.17 1798.79,1212.17 1799.38,1212.17 1799.97,1212.17 1800.55,1212.17 1801.14,1212.17 1801.73,1212.17 1802.31,1212.17 1802.9,1212.17 1803.48,1212.17 1804.07,1212.17 1804.66,1212.17 1805.24,1212.17 1805.83,1212.17 1806.42,1212.17 1807,1212.17 1807.59,1212.17 1808.18,1212.17 1808.76,1212.17 1809.35,1212.17 1809.94,1212.17 1810.52,1212.17 1811.11,1212.17 1811.69,1212.17 1812.28,1212.17 1812.87,1212.17 1813.45,1212.17 1814.04,1212.17 1814.63,1212.17 1815.21,1212.17 1815.8,1212.17 1816.39,1212.17 1816.97,1212.17 1817.56,1212.17 1818.14,1212.17 1818.73,1212.17 1819.32,1212.17 1819.9,1212.17 1820.49,1212.17 1821.08,1212.17 1821.66,1212.17 1822.25,1212.17 1822.84,1212.17 1823.42,1212.17 1824.01,1212.17 1824.6,1212.17 1825.18,1212.17 1825.77,1212.17 1826.35,1212.17 1826.94,1212.17 1827.53,1212.17 1828.11,1212.17 1828.7,1212.17 1829.29,1212.17 1829.87,1212.17 1830.46,1212.17 1831.05,1212.17 1831.63,1212.17 1832.22,1212.17 1832.81,1212.17 1833.39,1212.17 1833.98,1212.17 1834.56,1212.17 1835.15,1212.17 1835.74,1212.17 1836.32,1212.17 1836.91,1212.17 1837.5,1212.17 1838.08,1212.17 1838.67,1212.17 1839.26,1212.17 1839.84,1212.17 1840.43,1212.17 1841.01,1212.17 1841.6,1212.17 1842.19,1212.17 1842.77,1212.17 1843.36,1212.17 1843.95,1212.17 1844.53,1212.17 1845.12,1212.17 1845.71,1212.17 1846.29,1212.17 1846.88,1212.17 1847.47,1212.17 1848.05,1212.17 1848.64,1212.17 1849.22,1212.17 1849.81,1212.17 1850.4,1212.17 1850.98,1212.17 1851.57,1212.17 1852.16,1212.17 1852.74,1212.17 1853.33,1212.17 1853.92,1212.17 1854.5,1212.17 1855.09,1212.17 1855.68,1212.17 1856.26,1212.17 1856.85,1212.17 1857.43,1212.17 1858.02,1212.17 1858.61,1212.17 1859.19,1212.17 1859.78,1212.17 1860.37,1212.17 1860.95,1212.17 1861.54,1212.17 1862.13,1212.17 1862.71,1212.17 1863.3,1212.17 1863.88,1212.17 1864.47,1212.17 1865.06,1212.17 1865.64,1212.17 1866.23,1212.17 1866.82,1212.17 1867.4,1212.17 1867.99,1212.17 1868.58,1212.17 1869.16,1212.17 1869.75,1212.17 1870.34,1212.17 1870.92,1212.17 1871.51,1212.17 1872.09,1212.17 1872.68,1212.17 1873.27,1212.17 1873.85,1212.17 1874.44,1212.17 1875.03,1212.17 1875.61,1212.17 1876.2,1212.17 1876.79,1212.17 1877.37,1212.17 1877.96,1212.17 1878.55,1212.17 1879.13,1212.17 1879.72,1212.17 1880.3,1212.17 1880.89,1212.17 1881.48,1212.17 1882.06,1212.17 1882.65,1212.17 1883.24,1212.17 1883.82,1212.17 1884.41,1212.17 1885,1212.17 1885.58,1212.17 1886.17,1212.17 1886.76,1212.17 1887.34,1212.17 1887.93,1212.17 1888.51,1212.17 1889.1,1212.17 1889.69,1212.17 1890.27,1212.17 1890.86,1212.17 1891.45,1212.17 1892.03,1212.17 1892.62,1212.17 1893.21,1212.17 1893.79,1212.17 1894.38,1212.17 1894.96,1212.17 1895.55,1212.17 1896.14,1212.17 1896.72,1212.17 1897.31,1212.17 1897.9,1212.17 1898.48,1212.17 1899.07,1212.17 1899.66,1212.17 1900.24,1212.17 1900.83,1212.17 1901.42,1212.17 1902,1212.17 1902.59,1212.17 1903.17,1212.17 1903.76,1212.17 1904.35,1212.17 1904.93,1212.17 1905.52,1212.17 1906.11,1212.17 1906.69,1212.17 1907.28,1212.17 1907.87,1212.17 1908.45,1212.17 1909.04,1212.17 1909.63,1212.17 1910.21,1212.17 1910.8,1212.17 1911.38,1212.17 1911.97,1212.17 1912.56,1212.17 1913.14,1212.17 1913.73,1212.17 1914.32,1212.17 1914.9,1212.17 1915.49,1212.17 1916.08,1212.17 1916.66,1212.17 1917.25,1212.17 1917.83,1212.17 1918.42,1212.17 1919.01,1212.17 1919.59,1212.17 1920.18,1212.17 1920.77,1212.17 1921.35,1212.17 1921.94,1212.17 1922.53,1212.17 1923.11,1212.17 1923.7,1212.17 1924.29,1212.17 1924.87,1212.17 1925.46,1212.17 1926.04,1212.17 1926.63,1212.17 1927.22,1212.17 1927.8,1212.17 1928.39,1212.17 1928.98,1212.17 1929.56,1212.17 1930.15,1212.17 1930.74,1212.17 1931.32,1212.17 1931.91,1212.17 1932.5,1212.17 1933.08,1212.17 1933.67,1212.17 1934.25,1212.17 1934.84,1212.17 1935.43,1212.17 1936.01,1212.17 1936.6,1212.17 1937.19,1212.17 1937.77,1212.17 1938.36,1212.17 1938.95,1212.17 1939.53,1212.17 1940.12,1212.17 1940.71,1212.17 1941.29,1212.17 1941.88,1212.17 1942.46,1212.17 1943.05,1212.17 1943.64,1212.17 1944.22,1212.17 1944.81,1212.17 1945.4,1212.17 1945.98,1212.17 1946.57,1212.17 1947.16,1212.17 1947.74,1212.17 1948.33,1212.17 1948.91,1212.17 1949.5,1212.17 1950.09,1212.17 1950.67,1212.17 1951.26,1212.17 1951.85,1212.17 1952.43,1212.17 1953.02,1212.17 1953.61,1212.17 1954.19,1212.17 1954.78,1212.17 1955.37,1212.17 1955.95,1212.17 1956.54,1212.17 1957.12,1212.17 1957.71,1212.17 1958.3,1212.17 1958.88,1212.17 1959.47,1212.17 1960.06,1212.17 1960.64,1212.17 1961.23,1212.17 1961.82,1212.17 1962.4,1212.17 1962.99,1212.17 1963.58,1212.17 1964.16,1212.17 1964.75,1212.17 1965.33,1212.17 1965.92,1212.17 1966.51,1212.17 1967.09,1212.17 1967.68,1212.17 1968.27,1212.17 1968.85,1212.17 1969.44,1212.17 1970.03,1212.17 1970.61,1212.17 1971.2,1212.17 1971.78,1212.17 1972.37,1212.17 1972.96,1212.17 1973.54,1212.17 1974.13,1212.17 1974.72,1212.17 1975.3,1212.17 1975.89,1212.17 1976.48,1212.17 1977.06,1212.17 1977.65,1212.17 1978.24,1212.17 1978.82,1212.17 1979.41,1212.17 1979.99,1212.17 1980.58,1212.17 1981.17,1212.17 1981.75,1212.17 1982.34,1212.17 1982.93,1212.17 1983.51,1212.17 1984.1,1212.17 1984.69,1212.17 1985.27,1212.17 1985.86,1212.17 1986.45,1212.17 1987.03,1212.17 1987.62,1212.17 1988.2,1212.17 1988.79,1212.17 1989.38,1212.17 1989.96,1212.17 1990.55,1212.17 1991.14,1212.17 1991.72,1212.17 1992.31,1212.17 1992.9,1212.17 1993.48,1212.17 1994.07,1212.17 1994.65,1212.17 1995.24,1212.17 1995.83,1212.17 1996.41,1212.17 1997,1212.17 1997.59,1212.17 1998.17,1212.17 1998.76,1212.17 1999.35,1212.17 1999.93,1212.17 2000.52,1212.17 2001.11,1212.17 2001.69,1212.17 2002.28,1212.17 2002.86,1212.17 2003.45,1212.17 2004.04,1212.17 2004.62,1212.17 2005.21,1212.17 2005.8,1212.17 2006.38,1212.17 2006.97,1212.17 2007.56,1212.17 2008.14,1212.17 2008.73,1212.17 2009.32,1212.17 2009.9,1212.17 2010.49,1212.17 2011.07,1212.17 2011.66,1212.17 2012.25,1212.17 2012.83,1212.17 2013.42,1212.17 2014.01,1212.17 2014.59,1212.17 2015.18,1212.17 2015.77,1212.17 2016.35,1212.17 2016.94,1212.17 2017.53,1212.17 2018.11,1212.17 2018.7,1212.17 2019.28,1212.17 2019.87,1212.17 2020.46,1212.17 2021.04,1212.17 2021.63,1212.17 2022.22,1212.17 2022.8,1212.17 2023.39,1212.17 2023.98,1212.17 2024.56,1212.17 2025.15,1212.17 2025.73,1212.17 2026.32,1212.17 2026.91,1212.17 2027.49,1212.17 2028.08,1212.17 2028.67,1212.17 2029.25,1212.17 2029.84,1212.17 2030.43,1212.17 2031.01,1212.17 2031.6,1212.17 2032.19,1212.17 2032.77,1212.17 2033.36,1212.17 2033.94,1212.17 2034.53,1212.17 2035.12,1212.17 2035.7,1212.17 2036.29,1212.17 2036.88,1212.17 2037.46,1212.17 2038.05,1212.17 2038.64,1212.17 2039.22,1212.17 2039.81,1212.17 2040.4,1212.17 2040.98,1212.17 2041.57,1212.17 2042.15,1212.17 2042.74,1212.17 2043.33,1212.17 2043.91,1212.17 2044.5,1212.17 2045.09,1212.17 2045.67,1212.17 2046.26,1212.17 2046.85,1212.17 2047.43,1212.17 2048.02,1212.17 2048.6,1212.17 2049.19,1212.17 2049.78,1212.17 2050.36,1212.17 2050.95,1212.17 2051.54,1212.17 2052.12,1212.17 2052.71,1212.17 2053.3,1212.17 2053.88,1212.17 2054.47,1212.17 2055.06,1212.17 2055.64,1212.17 2056.23,1212.17 2056.81,1212.17 2057.4,1212.17 2057.99,1212.17 2058.57,1212.17 2059.16,1212.17 2059.75,1212.17 2060.33,1212.17 2060.92,1212.17 2061.51,1212.17 2062.09,1212.17 2062.68,1212.17 2063.27,1212.17 2063.85,1212.17 2064.44,1212.17 2065.02,1212.17 2065.61,1212.17 2066.2,1212.17 2066.78,1212.17 2067.37,1212.17 2067.96,1212.17 2068.54,1212.17 2069.13,1212.17 2069.72,1212.17 2070.3,1212.17 2070.89,1212.17 2071.48,1212.17 2072.06,1212.17 2072.65,1212.17 2073.23,1212.17 2073.82,1212.17 2074.41,1212.17 2074.99,1212.17 2075.58,1212.17 2076.17,1212.17 2076.75,1212.17 2077.34,1212.17 2077.93,1212.17 2078.51,1212.17 2079.1,1212.17 2079.68,1212.17 2080.27,1212.17 2080.86,1212.17 2081.44,1212.17 2082.03,1212.17 2082.62,1212.17 2083.2,1212.17 2083.79,1212.17 2084.38,1212.17 2084.96,1212.17 2085.55,1212.17 2086.14,1212.17 2086.72,1212.17 2087.31,1212.17 2087.89,1212.17 2088.48,1212.17 2089.07,1212.17 2089.65,1212.17 2090.24,1212.17 2090.83,1212.17 2091.41,1212.17 2092,1212.17 2092.59,1212.17 2093.17,1212.17 2093.76,1212.17 2094.35,1212.17 2094.93,1212.17 2095.52,1212.17 2096.1,1212.17 2096.69,1212.17 2097.28,1212.17 2097.86,1212.17 2098.45,1212.17 2099.04,1212.17 2099.62,1212.17 2100.21,1212.17 2100.8,1212.17 2101.38,1212.17 2101.97,1212.17 2102.55,1212.17 2103.14,1212.17 2103.73,1212.17 2104.31,1212.17 2104.9,1212.17 2105.49,1212.17 2106.07,1212.17 2106.66,1212.17 2107.25,1212.17 2107.83,1212.17 2108.42,1212.17 2109.01,1212.17 2109.59,1212.17 2110.18,1212.17 2110.76,1212.17 2111.35,1212.17 2111.94,1212.17 2112.52,1212.17 2113.11,1212.17 2113.7,1212.17 2114.28,1212.17 2114.87,1212.17 2115.46,1212.17 2116.04,1212.17 2116.63,1212.17 2117.22,1212.17 2117.8,1212.17 2118.39,1212.17 2118.97,1212.17 2119.56,1212.17 2120.15,1212.17 2120.73,1212.17 2121.32,1212.17 2121.91,1212.17 2122.49,1212.17 2123.08,1212.17 2123.67,1212.17 2124.25,1212.17 2124.84,1212.17 2125.42,1212.17 2126.01,1212.17 2126.6,1212.17 2127.18,1212.17 2127.77,1212.17 2128.36,1212.17 2128.94,1212.17 2129.53,1212.17 2130.12,1212.17 2130.7,1212.17 2131.29,1212.17 2131.88,1212.17 2132.46,1212.17 2133.05,1212.17 2133.63,1212.17 2134.22,1212.17 2134.81,1212.17 2135.39,1212.17 2135.98,1212.17 2136.57,1212.17 2137.15,1212.17 2137.74,1212.17 2138.33,1212.17 2138.91,1212.17 2139.5,1212.17 2140.09,1212.17 2140.67,1212.17 2141.26,1212.17 2141.84,1212.17 2142.43,1212.17 2143.02,1212.17 2143.6,1212.17 2144.19,1212.17 2144.78,1212.17 2145.36,1212.17 2145.95,1212.17 2146.54,1212.17 2147.12,1212.17 2147.71,1212.17 2148.3,1212.17 2148.88,1212.17 2149.47,1212.17 2150.05,1212.17 2150.64,1212.17 2151.23,1212.17 2151.81,1212.17 2152.4,1212.17 2152.99,1212.17 2153.57,1212.17 2154.16,1212.17 2154.75,1212.17 2155.33,1212.17 2155.92,1212.17 2156.5,1212.17 2157.09,1212.17 2157.68,1212.17 2158.26,1212.17 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.43,1194.77 1399.4,899.083 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.94 985.439,1194.77 2158.26,1194.77 2158.26,1228.94 985.439,1228.94 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip573\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip573)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-10743.6 169.384,-11116.6 169.943,-11455 170.503,-11749.9 171.062,-12004 171.621,-11583 172.18,-11239.3 172.74,-11451 173.299,-10670.9 173.858,-10845.2 174.417,-11005.7 174.977,-10347.6 175.536,-10471 176.095,-10557.7 176.655,-10301.9 177.214,-10063.9 177.773,-10100.2 178.332,-10113 178.892,-10118 179.451,-10098.1 180.01,-9842.04 180.569,-9791.89 181.129,-9734.1 181.688,-9476.34 182.247,-9399.77 182.806,-9320.5 183.366,-9227.63 183.925,-9126.35 184.484,-9006.47 185.043,-8759.63 185.603,-8395.02 186.162,-8163.36 186.721,-7711.35 187.28,-7495.29 187.84,-7389.98 188.399,-7190.38 188.958,-7079.62 189.517,-6876.25 190.077,-6755.52 190.636,-6561.15 191.195,-6371.7 191.754,-6186.86 192.314,-6077.08 192.873,-5898.36 193.432,-5721.16 193.991,-5303.24 194.551,-5151.59 195.11,-4888.9 195.669,-4672.15 196.228,-4472.95 196.788,-4338.73 197.347,-4098.24 197.906,-3967.59 198.465,-3838.13 199.025,-3752.8 199.584,-3630.02 200.143,-3463.65 200.702,-3344.14 201.262,-3144.06 201.821,-3038.59 202.38,-2929.02 202.939,-2744.98 203.499,-2645.2 204.058,-2544.88 204.617,-2452.05 205.176,-2391.74 205.736,-2293.67 206.295,-2168.07 206.854,-2081.88 207.413,-1959.89 207.973,-1876.64 208.532,-1789.86 209.091,-1736.29 209.65,-1653.68 210.21,-1573.55 210.769,-1525.67 211.328,-1476.56 211.887,-1314.1 212.447,-1133.53 213.006,-1069.43 213.565,-1008.65 214.124,-915.522 214.684,-880.023 215.243,-793.403 215.802,-687.72 216.361,-607.485 216.921,-508.052 217.48,-461.215 218.039,-436.451 218.598,-296.54 219.158,-273.529 219.717,-231.406 220.276,-209.613 220.835,-190.285 221.395,-125.892 221.954,-83.7086 222.513,-89.0122 223.072,-20.3311 223.632,19.5562 224.191,82.8743 224.75,145.399 225.309,178.552 225.869,169.7 226.428,228.77 226.987,260.073 227.546,331.573 228.106,380.303 228.665,426.122 229.224,433.742 229.783,458.152 230.343,525.992 230.902,549.856 231.461,612.268 232.02,629.506 232.58,648.305 233.139,647.473 233.698,662.215 234.257,640.362 234.817,639.229 235.376,662.608 235.935,662.396 236.494,684.511 237.054,690.058 237.613,714.494 238.172,712.644 238.731,713.093 239.291,711.357 239.85,697.327 240.409,717.865 240.968,777.272 241.528,763.338 242.087,766.127 242.646,788.489 243.205,809.628 243.765,811.902 244.324,825.733 244.883,808.612 245.442,792.347 246.002,790.108 246.561,756.781 247.12,746.404 247.679,771.542 248.239,760.818 248.798,767.397 249.357,771.278 249.916,811.896 250.476,885.069 251.035,868.771 251.594,868.467 252.153,868.809 252.713,871.002 253.272,925.276 253.831,922.894 254.39,921.587 254.95,924.249 255.509,921.605 256.068,939.581 256.627,925.101 257.187,977.449 257.746,973.561 258.305,1024.04 258.864,1015.91 259.424,1046.82 259.983,1058.16 260.542,1082.97 261.101,1074.91 261.661,1151.2 262.22,1155.95 262.779,1175.11 263.338,1165.85 263.898,1120.86 264.457,1076.74 265.016,1086.21 265.575,1128.22 266.135,1119.95 266.694,1106.19 267.253,1126.49 267.812,1149.01 268.372,1133.27 268.931,1104.17 269.49,1113.55 270.049,1085.81 270.609,1093.45 271.168,1136.35 271.727,1094.54 272.286,1100.74 272.846,1092.44 273.405,1082.54 273.964,1078.15 274.523,1058.12 275.083,1086.92 275.642,1081.4 276.201,1057.17 276.76,1065.25 277.32,1063.12 277.879,1058 278.438,1101.7 278.997,1111.42 279.557,1100.95 280.116,1126.38 280.675,1118.69 281.234,1123.77 281.794,1099.74 282.353,1109.87 282.912,1084.45 283.471,1093.85 284.031,1104.73 284.59,1133.19 285.149,1124.48 285.708,1099.89 286.268,1092.47 286.827,1082.61 287.386,1091.42 287.945,1101.03 288.505,1093.34 289.064,1081.42 289.623,1093.68 290.182,1096.82 290.742,1090.29 291.301,1081.77 291.86,1091.67 292.419,1116.6 292.979,1092.55 293.538,1131.93 294.097,1122 294.656,1079.44 295.216,1106.5 295.775,1114.36 296.334,1118.66 296.893,1109.34 297.453,1117.53 298.012,1119.99 298.571,1091.83 299.13,1098.32 299.69,1084.86 300.249,1075.94 300.808,1099.36 301.368,1087.85 301.927,1128.76 302.486,1134.32 303.045,1140.59 303.605,1110.73 304.164,1100.07 304.723,1073.81 305.282,1050.35 305.842,1058.85 306.401,1030 306.96,1038.81 307.519,1048.85 308.079,1072.05 308.638,1048.57 309.197,1041.05 309.756,1031.49 310.316,1039.51 310.875,1029.78 311.434,1006.52 311.993,1015.2 312.553,1007.87 313.112,1031.83 313.671,1021.28 314.23,1029.77 314.79,1021.66 315.349,981.264 315.908,1008.86 316.467,1050.14 317.027,1072.22 317.586,1062.59 318.145,1033.75 318.704,1027.59 319.264,1032.19 319.823,1040.66 320.382,1048.58 320.941,1041.89 321.501,1033.53 322.06,1029.45 322.619,1008.17 323.178,1017.4 323.738,974.735 324.297,957.276 324.856,972.024 325.415,982.827 325.975,975.83 326.534,983.903 327.093,962.236 327.652,989.598 328.212,967.12 328.771,928.189 329.33,907.661 329.889,907.101 330.449,923.131 331.008,953.08 331.567,965.172 332.126,991.136 332.686,1001.02 333.245,1008.23 333.804,999.167 334.363,959.524 334.923,965.044 335.482,897.196 336.041,860.028 336.6,874.786 337.16,862.418 337.719,861.991 338.278,860.209 338.837,842.8 339.397,830.978 339.956,846.687 340.515,864.09 341.074,927.437 341.634,925.812 342.193,932.646 342.752,928.659 343.311,906.713 343.871,920.626 344.43,931.747 344.989,891.268 345.548,920.952 346.108,901.681 346.667,902.37 347.226,917.295 347.785,912.406 348.345,909.335 348.904,876.311 349.463,841.735 350.022,837.054 350.582,819.338 351.141,832.831 351.7,833.048 352.259,832.596 352.819,833.455 353.378,848.765 353.937,832.665 354.496,831.155 355.056,848.157 355.615,848.37 356.174,865.37 356.733,896.644 357.293,893.797 357.852,909.318 358.411,891.994 358.97,889.665 359.53,939.042 360.089,951.487 360.648,961.467 361.207,919.455 361.767,879.838 362.326,892.159 362.885,889.086 363.444,884.757 364.004,883.101 364.563,881.093 365.122,895.353 365.681,942.034 366.241,900.315 366.8,912.181 367.359,892.526 367.918,873.238 368.478,888.922 369.037,902.85 369.596,881.087 370.155,862.093 370.715,862.728 371.274,860.654 371.833,839.948 372.392,821.33 372.952,804.782 373.511,825.214 374.07,791.308 374.629,822.218 375.189,788.08 375.748,805.317 376.307,820.675 376.866,802.74 377.426,804.252 377.985,804.741 378.544,801.601 379.103,836.698 379.663,867.892 380.222,861.742 380.781,842.202 381.34,837.343 381.9,832.712 382.459,879.855 383.018,909.934 383.577,885.28 384.137,882.541 384.696,911.347 385.255,923.006 385.814,917.304 386.374,908.862 386.933,887.569 387.492,865.981 388.051,815.858 388.611,818.459 389.17,831.337 389.729,860.975 390.288,871.944 390.848,869.127 391.407,883.426 391.966,931.287 392.525,925.243 393.085,932.164 393.644,971.045 394.203,962.827 394.762,936.256 395.322,926.442 395.881,918.31 396.44,847.779 396.999,859.847 397.559,855.488 398.118,836.81 398.677,835.428 399.236,849.687 399.796,847.965 400.355,856.2 400.914,854.873 401.473,864.718 402.033,874.367 402.592,901.346 403.151,879.8 403.71,840.242 404.27,851.923 404.829,816.307 405.388,814.058 405.947,829.428 406.507,811.551 407.066,777.985 407.625,778.267 408.184,776.549 408.744,791.784 409.303,788.396 409.862,803.626 410.421,817.355 410.981,813.282 411.54,808.227 412.099,789.188 412.658,805.83 413.218,787.951 413.777,800.584 414.336,798.285 414.895,777.275 415.455,808.074 416.014,772.039 416.573,758.953 417.132,758.501 417.692,774.204 418.251,773.127 418.81,758.946 419.369,742.138 419.929,745.347 420.488,792.88 421.047,824.479 421.606,822.23 422.166,868.649 422.725,892.525 423.284,867.891 423.843,847.461 424.403,856.187 424.962,854.74 425.521,834.756 426.08,832.317 426.64,839.735 427.199,839.181 427.758,833.278 428.318,810.866 428.877,792.615 429.436,788.159 429.995,787.139 430.555,769.709 431.114,799.51 431.673,796.485 432.232,793.421 432.792,793.503 433.351,789.637 433.91,773.255 434.469,787.965 435.029,769.458 435.588,820.124 436.147,849.246 436.706,863.391 437.266,860.297 437.825,837.601 438.384,850.899 438.943,864.107 439.503,876.066 440.062,886.262 440.621,875.434 441.18,884.245 441.74,877.121 442.299,887.219 442.858,844.749 443.417,890.061 443.977,885.221 444.536,875.66 445.095,900.165 445.654,892.464 446.214,901.022 446.773,923.553 447.332,909.251 447.891,885.978 448.451,832.163 449.01,844.986 449.569,854.178 450.128,848.385 450.688,824.329 451.247,786.58 451.806,799.17 452.365,796.918 452.925,844.206 453.484,839.508 454.043,850.101 454.602,794.475 455.162,792.676 455.721,805.124 456.28,801.589 456.839,813.397 457.399,812.178 457.958,793.72 458.517,792.091 459.076,775.915 459.636,755.391 460.195,786.88 460.754,762.579 461.313,745.501 461.873,694.145 462.432,678.536 462.991,681.174 463.55,680.907 464.11,716.276 464.669,701.139 465.228,734.357 465.787,702.056 466.347,686.405 466.906,727.368 467.465,709.534 468.024,708.264 468.584,712.987 469.143,701.356 469.702,702.338 470.261,705.646 470.821,707.526 471.38,722.748 471.939,723.57 472.498,726.608 473.058,726.934 473.617,731.037 474.176,733.73 474.735,736.567 475.295,739.551 475.854,769.251 476.413,799.119 476.972,779.125 477.532,762.224 478.091,763.58 478.65,762.699 479.209,744.194 479.769,758.874 480.328,787.782 480.887,782.231 481.446,782.406 482.006,815.028 482.565,779.182 483.124,795.78 483.683,778.509 484.243,774.642 484.802,809.302 485.361,803.526 485.92,816.048 486.48,845.927 487.039,855.915 487.598,802.114 488.157,848.26 488.717,843.204 489.276,834.392 489.835,814.305 490.394,776.62 490.954,786.772 491.513,767.475 492.072,781.784 492.631,778.218 493.191,775.775 493.75,742.316 494.309,756.641 494.868,753.157 495.428,785.109 495.987,812.706 496.546,806.977 497.105,773.697 497.665,721.626 498.224,673.201 498.783,677.22 499.342,678.68 499.902,634.627 500.461,607.813 501.02,613.087 501.579,618.382 502.139,623.526 502.698,628.325 503.257,649.344 503.816,668.52 504.376,654.973 504.935,642.483 505.494,633.166 506.053,670.889 506.613,691.592 507.172,724.904 507.731,726.724 508.29,710.096 508.85,711.141 509.409,741.888 509.968,757.631 510.527,807.879 511.087,804.644 511.646,801.395 512.205,797.747 512.764,759.611 513.324,745.882 513.883,697.702 514.442,686.056 515.001,704.028 515.561,675.038 516.12,681.268 516.679,700.519 517.238,716.31 517.798,718.271 518.357,720.361 518.916,721.013 519.475,752.512 520.035,715.375 520.594,734.602 521.153,731.72 521.712,701.481 522.272,719.856 522.831,718.522 523.39,688.507 523.949,708.214 524.509,693.011 525.068,679.247 525.627,699.276 526.186,702.219 526.746,703.992 527.305,688.212 527.864,722.922 528.423,720.799 528.983,707.018 529.542,693.58 530.101,645.207 530.66,650.962 531.22,624.547 531.779,627.756 532.338,664.248 532.897,718.636 533.457,720.832 534.016,735.513 534.575,721.31 535.134,705.695 535.694,706.806 536.253,706.967 536.812,692.383 537.371,726.306 537.931,727.043 538.49,712.538 539.049,714.777 539.608,726.479 540.168,738.959 540.727,751.312 541.286,746.37 541.845,758.851 542.405,753.86 542.964,751.328 543.523,748.473 544.082,746.74 544.642,710.537 545.201,693.826 545.76,697.337 546.319,714.586 546.879,730.871 547.438,762.156 547.997,742.88 548.556,726.684 549.116,692.706 549.675,696.56 550.234,681.393 550.793,682.229 551.353,685.581 551.912,640.64 552.471,628.029 553.031,632.387 553.59,684.047 554.149,701.931 554.708,700.652 555.268,718.977 555.827,717.775 556.386,731.307 556.945,730.963 557.505,760.887 558.064,727.229 558.623,742.386 559.182,757.15 559.742,722.344 560.301,690.9 560.86,710.197 561.419,679.417 561.979,679.878 562.538,650.134 563.097,656.347 563.656,661.53 564.216,664.223 564.775,649.866 565.334,655.05 565.893,660.049 566.453,648.075 567.012,668.599 567.571,668.084 568.13,683.894 568.69,700.617 569.249,737.675 569.808,783.407 570.367,776.651 570.927,770.983 571.486,769.691 572.045,768.579 572.604,735.413 573.164,786.087 573.723,779.54 574.282,775.4 574.841,757.958 575.401,768.448 575.96,767.804 576.519,734.14 577.078,719.753 577.638,768.477 578.197,795.782 578.756,811.133 579.315,822.291 579.875,800.75 580.434,783.156 580.993,765.603 581.552,714.702 582.112,711.955 582.671,746.861 583.23,729.037 583.789,745.313 584.349,760.284 584.908,743.099 585.467,773.013 586.026,772.793 586.586,802.971 587.145,816.591 587.704,794.283 588.263,822.179 588.823,816.552 589.382,777.524 589.941,774.397 590.5,770.966 591.06,756.434 591.619,738.764 592.178,755.173 592.737,753.255 593.297,734.483 593.856,732.862 594.415,727.521 594.974,724.401 595.534,705.483 596.093,751.316 596.652,769.021 597.211,766.512 597.771,748.117 598.33,693.595 598.889,694.16 599.448,707.563 600.008,709.637 600.567,725.355 601.126,707.638 601.685,676.344 602.245,711.998 602.804,824.801 603.363,834.808 603.922,792.639 604.482,788.893 605.041,771.136 605.6,786.679 606.159,764.057 606.719,789.528 607.278,788.927 607.837,784.031 608.396,828.7 608.956,824.949 609.515,840.319 610.074,877.445 610.633,851.872 611.193,844.198 611.752,851.496 612.311,794.021 612.87,771.65 613.43,750.291 613.989,765.754 614.548,730.94 615.107,724.392 615.667,706.873 616.226,722.379 616.785,754.897 617.344,767.062 617.904,781.882 618.463,811.152 619.022,773.614 619.581,735.266 620.141,717.161 620.7,731.385 621.259,718.046 621.818,718.897 622.378,705.758 622.937,671.143 623.496,688.297 624.055,725.646 624.615,678.347 625.174,664.201 625.733,666.318 626.292,668.783 626.852,669.742 627.411,641.261 627.97,661.372 628.529,694.583 629.089,693.155 629.648,628.371 630.207,681.189 630.766,715.514 631.326,728.944 631.885,727.648 632.444,725.692 633.003,773.46 633.563,738.572 634.122,736.387 634.681,734.343 635.24,732.349 635.8,714.403 636.359,696.831 636.918,660.17 637.477,674.73 638.037,659.113 638.596,626.875 639.155,629.706 639.714,615.842 640.274,621.513 640.833,594.484 641.392,598.01 641.951,604.659 642.511,610.624 643.07,566.106 643.629,542.793 644.188,553.807 644.748,561.622 645.307,551.239 645.866,560.527 646.425,582.082 646.985,590.435 647.544,578.192 648.103,567.739 648.662,545.24 649.222,563.368 649.781,570.539 650.34,611.356 650.899,614.636 651.459,618.532 652.018,620.834 652.577,640.412 653.136,677.848 653.696,646.283 654.255,666.566 654.814,623.983 655.373,608.441 655.933,584.117 656.492,606.151 657.051,576.281 657.61,567.874 658.17,592.157 658.729,629.816 659.288,581.921 659.847,572.618 660.407,581.761 660.966,604.143 661.525,613.415 662.084,603.347 662.644,589.052 663.203,610.227 663.762,650.517 664.321,640.382 664.881,643.009 665.44,645.384 665.999,614.066 666.558,618.761 667.118,623.714 667.677,660.733 668.236,708.603 668.795,693.559 669.355,727.037 669.914,742.594 670.473,724.184 671.032,737.077 671.592,764.918 672.151,762.793 672.71,760.299 673.269,773.351 673.829,769.598 674.388,767.493 674.947,762.348 675.506,777.715 676.066,786.797 676.625,766 677.184,746.431 677.743,743.729 678.303,756.676 678.862,786.739 679.421,784.739 679.981,784.484 680.54,796.929 681.099,809.804 681.658,789.365 682.218,770.628 682.777,798.919 683.336,776.324 683.895,758.921 684.455,754.586 685.014,768.496 685.573,747.82 686.132,779.165 686.692,774.773 687.251,767.879 687.81,751.341 688.369,762.382 688.929,757.728 689.488,738.064 690.047,735.081 690.606,732.917 691.166,763.831 691.725,779.492 692.284,790.226 692.843,795.703 693.403,821.068 693.962,815.77 694.521,830.274 695.08,823.834 695.64,804.042 696.199,817.618 696.758,779.251 697.317,808.439 697.877,819.537 698.436,828.319 698.995,819.285 699.554,813.648 700.114,791.737 700.673,800.571 701.232,792.921 701.791,804.597 702.351,766.21 702.91,797.367 703.469,775.765 704.028,770.307 704.588,780.268 705.147,777.223 705.706,755.061 706.265,753.72 706.825,752.236 707.384,765.154 707.943,725.245 708.502,753.473 709.062,781.183 709.621,761.791 710.18,774.429 710.739,758.591 711.299,718.897 711.858,734.04 712.417,734.708 712.976,730.983 713.536,727.821 714.095,704.109 714.654,655.553 715.213,673.124 715.773,708.535 716.332,656.564 716.891,640.318 717.45,653.625 718.01,659.175 718.569,676.297 719.128,673.806 719.687,658.698 720.247,658.304 720.806,692.848 721.365,690.444 721.924,704.965 722.484,735.315 723.043,736.505 723.602,701.68 724.161,702.004 724.721,669.738 725.28,606.136 725.839,595.387 726.398,631.973 726.958,635.748 727.517,656.695 728.076,642.234 728.635,725.623 729.195,757.45 729.754,770.319 730.313,733.935 730.872,733.569 731.432,731.978 731.991,712.461 732.55,727.746 733.109,693.218 733.669,691.481 734.228,706.965 734.787,702.466 735.346,671.301 735.906,652.517 736.465,686.349 737.024,718.949 737.583,698.818 738.143,713.239 738.702,677.601 739.261,677.432 739.82,663.148 740.38,679.534 740.939,651.455 741.498,689.169 742.057,641.567 742.617,679.408 743.176,695.639 743.735,629.957 744.294,629.801 744.854,598.706 745.413,637.627 745.972,609.772 746.531,581.531 747.091,537.14 747.65,563.032 748.209,586.462 748.768,575.263 749.328,565.967 749.887,604.377 750.446,612.676 751.005,617.63 751.565,588.54 752.124,609.891 752.683,614.473 753.242,601.875 753.802,594.567 754.361,637.597 754.92,662.406 755.479,645.645 756.039,646.729 756.598,652.309 757.157,688.648 757.716,669.969 758.276,653.313 758.835,640.171 759.394,643.087 759.953,643.978 760.513,616.459 761.072,634.488 761.631,667.632 762.19,667.839 762.75,637.847 763.309,656.241 763.868,657.256 764.427,655.922 764.987,690.213 765.546,722.645 766.105,704.786 766.664,719.429 767.224,702.983 767.783,703.914 768.342,690.311 768.901,690.538 769.461,675.033 770.02,646.308 770.579,667.002 771.138,667.098 771.698,638.115 772.257,623.717 772.816,642.843 773.375,662.195 773.935,646.996 774.494,637.041 775.053,653.457 775.612,657.69 776.172,626.878 776.731,596.957 777.29,586.703 777.849,611.837 778.409,630.67 778.968,630.322 779.527,635.242 780.086,623.617 780.646,660.048 781.205,630.643 781.764,667.327 782.323,653.789 782.883,687.47 783.442,691.455 784.001,688.306 784.56,721.621 785.12,752.183 785.679,732.39 786.238,745.397 786.797,741.395 787.357,738.751 787.916,720.409 788.475,734.2 789.034,747.39 789.594,742.858 790.153,737.428 790.712,749.889 791.271,751.133 791.831,761.998 792.39,693.748 792.949,711.429 793.508,695.979 794.068,677.591 794.627,677.134 795.186,659.728 795.745,644.993 796.305,662.758 796.864,651.605 797.423,698.809 797.982,732.481 798.542,729.82 799.101,714.066 799.66,695.207 800.219,678.861 800.779,662.334 801.338,661.924 801.897,681.953 802.456,685.025 803.016,672.177 803.575,675.559 804.134,660.354 804.693,664.369 805.253,649.239 805.812,683.174 806.371,684.052 806.931,683.561 807.49,680.628 808.049,647.919 808.608,651.702 809.168,684.707 809.727,712.558 810.286,694.532 810.845,713.012 811.405,778.334 811.964,807.062 812.523,834.176 813.082,809.808 813.642,771.57 814.201,784.034 814.76,812.167 815.319,806.796 815.879,817.032 816.438,762.303 816.997,742.359 817.556,752.538 818.116,751.126 818.675,765.169 819.234,729.145 819.793,757.558 820.353,718.604 820.912,747.318 821.471,726.495 822.03,741.568 822.59,757.402 823.149,754.225 823.708,750.282 824.267,746.995 824.827,743.797 825.386,773.333 825.945,785.926 826.504,812.803 827.064,821.13 827.623,778.081 828.182,738.972 828.741,754.347 829.301,749.618 829.86,779.396 830.419,779.683 830.978,739.639 831.538,768.366 832.097,796.406 832.656,791.44 833.215,804.806 833.775,801.276 834.334,779.015 834.893,760.552 835.452,738.446 836.012,719.503 836.571,684.555 837.13,684.107 837.689,699.241 838.249,666.247 838.808,636.06 839.367,659.803 839.926,643.586 840.486,663.233 841.045,583.065 841.604,619.948 842.163,620.884 842.723,608.035 843.282,610.645 843.841,601.345 844.4,653.503 844.96,717.296 845.519,666.661 846.078,665.019 846.637,682.063 847.197,666.366 847.756,647.002 848.315,648.852 848.874,653.763 849.434,658.547 849.993,612.505 850.552,602.291 851.111,607.551 851.671,611.226 852.23,614.249 852.789,584.824 853.348,556.188 853.908,561.032 854.467,568.19 855.026,575.615 855.585,566.072 856.145,555.317 856.704,614.549 857.263,618.014 857.822,620.954 858.382,638.06 858.941,659.439 859.5,628.528 860.059,632.523 860.619,620.32 861.178,606.055 861.737,610.068 862.296,594.635 862.856,601.183 863.415,638.036 863.974,638.996 864.533,623.942 865.093,626.145 865.652,594.01 866.211,584.711 866.77,622.033 867.33,625.708 867.889,591.688 868.448,613.87 869.007,605.026 869.567,576.933 870.126,596.163 870.685,631.817 871.244,636.526 871.804,653.755 872.363,656.13 872.922,663.165 873.481,654.148 874.041,623.557 874.6,611.528 875.159,599.966 875.718,639.41 876.278,610.296 876.837,632.184 877.396,669.777 877.955,668.662 878.515,670.657 879.074,673.719 879.633,692.729 880.192,676.479 880.752,664.045 881.311,679.503 881.87,680.656 882.429,683.452 882.989,683.288 883.548,695.648 884.107,713.541 884.666,713.596 885.226,741.431 885.785,737.954 886.344,733.797 886.903,733.93 887.463,700.123 888.022,734.067 888.581,699.884 889.14,729.685 889.7,778.48 890.259,773.579 890.818,755.617 891.377,738.538 891.937,738.442 892.496,752.077 893.055,752.954 893.614,718.339 894.174,715.691 894.733,731.513 895.292,764.4 895.851,793.433 896.411,789.263 896.97,783.684 897.529,792.693 898.088,800.043 898.648,744.411 899.207,742.021 899.766,708.747 900.325,691.627 900.885,707.852 901.444,672.39 902.003,689.5 902.562,640.392 903.122,613.083 903.681,633.77 904.24,634.911 904.799,634.601 905.359,667.948 905.918,698.27 906.477,668.338 907.036,654.927 907.596,643.062 908.155,646.822 908.714,683.41 909.273,687.892 909.833,686.258 910.392,672.683 910.951,672.775 911.51,688.12 912.07,705.48 912.629,685.742 913.188,666.063 913.747,697.116 914.307,727.195 914.866,741.669 915.425,735.324 915.984,734.237 916.544,734.205 917.103,718.453 917.662,733.719 918.221,699.737 918.781,701.757 919.34,697.36 919.899,696.26 920.458,729.65 921.018,714.814 921.577,709.969 922.136,710.427 922.695,809.074 923.255,816.732 923.814,822.364 924.373,816.261 924.932,824.197 925.492,798.282 926.051,791.568 926.61,818.873 927.169,780.636 927.729,759.811 928.288,757.61 928.847,751.003 929.406,747.856 929.966,697.266 930.525,713.039 931.084,727.234 931.644,724.014 932.203,735.756 932.762,746.971 933.321,741.887 933.881,757.84 934.44,787.72 934.999,799.391 935.558,762.632 936.118,762.976 936.677,710.524 937.236,692.916 937.795,689.891 938.355,720.769 938.914,735.736 939.473,703.369 940.032,689.34 940.592,688.019 941.151,717.513 941.71,719.53 942.269,672.582 942.829,673.252 943.388,658.027 943.947,643.22 944.506,644.872 945.066,618.79 945.625,670.395 946.184,637.934 946.743,624.284 947.303,628.863 947.862,602.064 948.421,604.872 948.98,596.053 949.54,597.849 950.099,600.297 950.658,605.475 951.217,609.32 951.777,645.94 952.336,649.794 952.895,665.178 953.454,668.39 954.014,671.724 954.573,702.826 955.132,689.12 955.691,639.409 956.251,657.62 956.81,641.608 957.369,694.701 957.928,711.85 958.488,724.161 959.047,720.195 959.606,716.883 960.165,683.665 960.725,683.833 961.284,667.264 961.843,667.249 962.402,622.341 962.962,623.969 963.521,656.65 964.08,641.277 964.639,646.519 965.199,648.653 965.758,632.198 966.317,635.843 966.876,655.788 967.436,641.216 967.995,673.738 968.554,690.121 969.113,672.58 969.673,656.191 970.232,640.853 970.791,680.201 971.35,681.885 971.91,665.079 972.469,666.72 973.028,654.589 973.587,670.985 974.147,656.621 974.706,660.455 975.265,660.766 975.824,644.407 976.384,633.26 976.943,682.977 977.502,732.376 978.061,748.008 978.621,726.254 979.18,723.95 979.739,753.218 980.298,764.481 980.858,760.13 981.417,742.744 981.976,770.901 982.535,780.053 983.095,775.291 983.654,755.287 984.213,772.406 984.772,831.415 985.332,824.143 985.891,832.576 986.45,793.246 987.009,756.528 987.569,722.077 988.128,723.514 988.687,739.216 989.246,735.769 989.806,762.554 990.365,722.882 990.924,724.154 991.483,709.134 992.043,722.005 992.602,700.441 993.161,749.402 993.72,744.992 994.28,724.542 994.839,738.257 995.398,755.035 995.957,765.021 996.517,778.212 997.076,722.529 997.635,754.95 998.194,750.711 998.754,715.077 999.313,744.525 999.872,759.033 1000.43,769.779 1000.99,730.364 1001.55,696.824 1002.11,694.379 1002.67,660.392 1003.23,626.74 1003.79,616.348 1004.35,599.607 1004.91,589.956 1005.46,527.968 1006.02,518.953 1006.58,544.631 1007.14,519.738 1007.7,509.992 1008.26,552.186 1008.82,561.755 1009.38,554.925 1009.94,577.703 1010.5,585.082 1011.06,624.53 1011.62,614.901 1012.18,583.196 1012.73,590.683 1013.29,628.357 1013.85,615.554 1014.41,602.102 1014.97,622.847 1015.53,627.373 1016.09,583.734 1016.65,637.402 1017.21,606.673 1017.77,609.86 1018.33,614.363 1018.89,668.184 1019.45,666.003 1020.01,685.628 1020.56,685.315 1021.12,701.849 1021.68,703.404 1022.24,687.336 1022.8,703.374 1023.36,720.161 1023.92,719.57 1024.48,718.25 1025.04,734.564 1025.6,727.74 1026.16,725.506 1026.72,757.388 1027.28,739.435 1027.83,753.028 1028.39,779.224 1028.95,777.857 1029.51,740.703 1030.07,751.15 1030.63,745.574 1031.19,761.629 1031.75,760.299 1032.31,742.346 1032.87,720.771 1033.43,750.982 1033.99,731.471 1034.55,748.23 1035.1,731.37 1035.66,731.649 1036.22,731.939 1036.78,729.058 1037.34,726.064 1037.9,737.684 1038.46,719.118 1039.02,731.251 1039.58,726.293 1040.14,740.365 1040.7,722.096 1041.26,736.294 1041.82,732.386 1042.38,736.556 1042.93,764.641 1043.49,772.39 1044.05,765.491 1044.61,728.48 1045.17,725.319 1045.73,754.53 1046.29,747.249 1046.85,696.256 1047.41,714.045 1047.97,696.472 1048.53,683.241 1049.09,685.478 1049.65,668.58 1050.2,650.049 1050.76,683.626 1051.32,684.581 1051.88,717.496 1052.44,682.332 1053,684.515 1053.56,634.359 1054.12,654.334 1054.68,670.095 1055.24,672.586 1055.8,654.759 1056.36,640.517 1056.92,610.393 1057.48,611.248 1058.03,634.14 1058.59,635.931 1059.15,654.803 1059.71,654.231 1060.27,640.185 1060.83,625.992 1061.39,662.682 1061.95,679.291 1062.51,709.219 1063.07,659.64 1063.63,677.549 1064.19,677.51 1064.75,693.943 1065.3,707.733 1065.86,689.314 1066.42,722.054 1066.98,704.977 1067.54,670.582 1068.1,637.279 1068.66,654.903 1069.22,658.603 1069.78,662.101 1070.34,647.377 1070.9,633.147 1071.46,640.221 1072.02,641.303 1072.57,595.206 1073.13,598.921 1073.69,634.385 1074.25,620.554 1074.81,625.404 1075.37,643.82 1075.93,647.917 1076.49,648.908 1077.05,632.636 1077.61,651.194 1078.17,653.613 1078.73,657.603 1079.29,675.809 1079.85,663.73 1080.4,696.932 1080.96,684.206 1081.52,715.326 1082.08,710.52 1082.64,725.444 1083.2,723.799 1083.76,737.11 1084.32,732.712 1084.88,731.892 1085.44,733.231 1086,733.214 1086.56,734.34 1087.12,744.402 1087.67,742.69 1088.23,706.371 1088.79,704.895 1089.35,704.094 1089.91,701.522 1090.47,684.432 1091.03,700.57 1091.59,717.684 1092.15,683.882 1092.71,683.31 1093.27,667.019 1093.83,667.363 1094.39,668.585 1094.94,651.868 1095.5,653.691 1096.06,655.909 1096.62,675.96 1097.18,674.989 1097.74,660.247 1098.3,662.882 1098.86,663.34 1099.42,681.921 1099.98,698.161 1100.54,650.96 1101.1,652.715 1101.66,654.119 1102.22,691.155 1102.77,710.098 1103.33,742.413 1103.89,722.851 1104.45,706.058 1105.01,721.692 1105.57,767.994 1106.13,762.999 1106.69,744.084 1107.25,754.501 1107.81,753.96 1108.37,748.896 1108.93,766.366 1109.49,733.184 1110.04,744.732 1110.6,723.473 1111.16,722.96 1111.72,722.443 1112.28,718.723 1112.84,764.109 1113.4,748.442 1113.96,710.491 1114.52,708.194 1115.08,704.136 1115.64,719.301 1116.2,720.64 1116.76,737.916 1117.31,736.542 1117.87,748.18 1118.43,747.417 1118.99,676.17 1119.55,692.216 1120.11,640.392 1120.67,624.826 1121.23,630.097 1121.79,617.548 1122.35,637.212 1122.91,640.586 1123.47,626.44 1124.03,628.349 1124.59,666.848 1125.14,668.196 1125.7,685.217 1126.26,699.875 1126.82,681.009 1127.38,648.198 1127.94,617.026 1128.5,571.509 1129.06,590.378 1129.62,593.416 1130.18,601.111 1130.74,604.723 1131.3,606.724 1131.86,625.024 1132.41,631.819 1132.97,650.862 1133.53,652.343 1134.09,621.812 1134.65,590.984 1135.21,595.746 1135.77,584.711 1136.33,586.716 1136.89,590.443 1137.45,595.385 1138.01,596.563 1138.57,602.191 1139.13,638.992 1139.68,677.816 1140.24,676.946 1140.8,694.765 1141.36,694.19 1141.92,646.982 1142.48,664.163 1143.04,632.08 1143.6,649.723 1144.16,655.289 1144.72,672.794 1145.28,672.411 1145.84,690.656 1146.4,675.005 1146.96,676.327 1147.51,678.351 1148.07,664.8 1148.63,653.061 1149.19,639.549 1149.75,673.276 1150.31,655.203 1150.87,690.84 1151.43,708.714 1151.99,706.373 1152.55,719.055 1153.11,705.924 1153.67,707.857 1154.23,707.362 1154.78,722.939 1155.34,706.791 1155.9,705.222 1156.46,690.099 1157.02,707.292 1157.58,690.7 1158.14,693.198 1158.7,659.732 1159.26,643.625 1159.82,644.855 1160.38,680.42 1160.94,714.031 1161.5,700.793 1162.05,651.248 1162.61,670.458 1163.17,671.316 1163.73,670.769 1164.29,707.886 1164.85,703.623 1165.41,714.658 1165.97,730.203 1166.53,714.18 1167.09,725.057 1167.65,706.912 1168.21,705.332 1168.77,687.622 1169.33,721.711 1169.88,737.287 1170.44,717.849 1171,731.962 1171.56,728.308 1172.12,744.765 1172.68,755.852 1173.24,720.945 1173.8,735.498 1174.36,730.509 1174.92,713.847 1175.48,713.861 1176.04,727.682 1176.6,695.417 1177.15,726.105 1177.71,694.783 1178.27,709.559 1178.83,707.515 1179.39,709.528 1179.95,723.743 1180.51,724.089 1181.07,688.751 1181.63,722.224 1182.19,731.251 1182.75,763.503 1183.31,759.758 1183.87,732.522 1184.43,712.485 1184.98,696.597 1185.54,694.284 1186.1,725.317 1186.66,741.185 1187.22,743.118 1187.78,758.261 1188.34,751.544 1188.9,745.955 1189.46,726.374 1190.02,721.736 1190.58,734.78 1191.14,666.42 1191.7,684.679 1192.25,666.304 1192.81,649.767 1193.37,653.63 1193.93,688.473 1194.49,704.731 1195.05,686.989 1195.61,669.723 1196.17,684.782 1196.73,667.553 1197.29,684.718 1197.85,683.129 1198.41,716.448 1198.97,728.028 1199.52,711.407 1200.08,694.936 1200.64,660.356 1201.2,692.879 1201.76,724.564 1202.32,737.129 1202.88,718.592 1203.44,721.562 1204,666.626 1204.56,653.103 1205.12,688.528 1205.68,672.783 1206.24,655.256 1206.8,651.522 1207.35,684.762 1207.91,686.366 1208.47,669.604 1209.03,654.909 1209.59,657.559 1210.15,656.726 1210.71,675.063 1211.27,692.81 1211.83,674.253 1212.39,689.406 1212.95,686.627 1213.51,701.714 1214.07,701.286 1214.62,683.575 1215.18,714.262 1215.74,710.745 1216.3,694.316 1216.86,709.256 1217.42,724.497 1217.98,707.498 1218.54,688.115 1219.1,685.377 1219.66,669.921 1220.22,685.214 1220.78,667.051 1221.34,649.872 1221.89,653.707 1222.45,609.248 1223.01,611.152 1223.57,632.273 1224.13,615.522 1224.69,606.969 1225.25,610.688 1225.81,631.099 1226.37,652.473 1226.93,651.124 1227.49,624.139 1228.05,628.483 1228.61,598.427 1229.17,599.354 1229.72,605.406 1230.28,596.013 1230.84,635.275 1231.4,620.321 1231.96,671.663 1232.52,655.505 1233.08,674.841 1233.64,677.157 1234.2,676.312 1234.76,705.734 1235.32,688.064 1235.88,718.985 1236.44,706.445 1236.99,686.169 1237.55,684.873 1238.11,685.314 1238.67,686.907 1239.23,655.155 1239.79,656.831 1240.35,640.168 1240.91,590.479 1241.47,592.958 1242.03,598.373 1242.59,620.245 1243.15,658.305 1243.71,645.764 1244.26,617.266 1244.82,602.977 1245.38,593.461 1245.94,567.884 1246.5,558.19 1247.06,594.448 1247.62,601.5 1248.18,641.507 1248.74,641.377 1249.3,646.115 1249.86,603.438 1250.42,606.349 1250.98,645.451 1251.54,659.811 1252.09,662.122 1252.65,658.359 1253.21,644.3 1253.77,660.969 1254.33,663.445 1254.89,677.734 1255.45,659.462 1256.01,644.159 1256.57,613.755 1257.13,616.702 1257.69,601.514 1258.25,556.148 1258.81,561.624 1259.36,569.413 1259.92,577.571 1260.48,582.28 1261.04,588.21 1261.6,625.304 1262.16,643.914 1262.72,616.778 1263.28,623.241 1263.84,608.99 1264.4,643.3 1264.96,640.991 1265.52,642.301 1266.08,663.936 1266.63,697.825 1267.19,711.282 1267.75,740.639 1268.31,756.087 1268.87,752.254 1269.43,736.762 1269.99,737.177 1270.55,752.376 1271.11,751.082 1271.67,745.589 1272.23,744.494 1272.79,692.182 1273.35,693.414 1273.91,705.886 1274.46,686.37 1275.02,686.815 1275.58,685.76 1276.14,685.131 1276.7,684.298 1277.26,698.95 1277.82,681.03 1278.38,665.482 1278.94,695.615 1279.5,693.656 1280.06,724.689 1280.62,740.235 1281.18,735.664 1281.73,718.476 1282.29,699.647 1282.85,701.149 1283.41,705.27 1283.97,704.022 1284.53,718.346 1285.09,751.861 1285.65,750.411 1286.21,751.495 1286.77,764.054 1287.33,747.964 1287.89,746.041 1288.45,757.81 1289,754.326 1289.56,732.216 1290.12,748.06 1290.68,746.747 1291.24,744.63 1291.8,724.192 1292.36,753.68 1292.92,735.251 1293.48,680.323 1294.04,695.893 1294.6,694.742 1295.16,692.738 1295.72,660.579 1296.28,693.603 1296.83,659.372 1297.39,658.798 1297.95,661.981 1298.51,730.526 1299.07,708.947 1299.63,722.599 1300.19,690.316 1300.75,672.061 1301.31,691.167 1301.87,675.759 1302.43,674.437 1302.99,672.743 1303.55,667.565 1304.1,666.434 1304.66,650.829 1305.22,667.175 1305.78,665.912 1306.34,683.132 1306.9,703.848 1307.46,701.719 1308.02,701.385 1308.58,702.926 1309.14,705.395 1309.7,741.165 1310.26,751.573 1310.82,716.946 1311.38,733.623 1311.93,734.904 1312.49,749.482 1313.05,731.209 1313.61,730.933 1314.17,710.587 1314.73,678.718 1315.29,676.96 1315.85,675.889 1316.41,676.141 1316.97,658.577 1317.53,677.424 1318.09,662.006 1318.65,663.651 1319.2,664.992 1319.76,699.313 1320.32,681.591 1320.88,700.698 1321.44,636.741 1322,688.443 1322.56,706.048 1323.12,738.858 1323.68,734.721 1324.24,717.185 1324.8,717.592 1325.36,715.101 1325.92,726.461 1326.47,725.237 1327.03,726.86 1327.59,712.732 1328.15,709.047 1328.71,672.374 1329.27,685.219 1329.83,681.049 1330.39,696.561 1330.95,711.96 1331.51,709.791 1332.07,706.683 1332.63,689.299 1333.19,703.452 1333.75,700.33 1334.3,731.266 1334.86,763.883 1335.42,761.049 1335.98,789.519 1336.54,760.894 1337.1,755.147 1337.66,781.812 1338.22,729.559 1338.78,742.694 1339.34,740.021 1339.9,755.141 1340.46,733.638 1341.02,732.004 1341.57,727.967 1342.13,726.079 1342.69,705.161 1343.25,720.449 1343.81,704.139 1344.37,704.434 1344.93,702.901 1345.49,731.744 1346.05,741.286 1346.61,756.222 1347.17,737.693 1347.73,700.775 1348.29,670.92 1348.84,671.116 1349.4,671.118 1349.96,639.961 1350.52,639.196 1351.08,656.245 1351.64,671.762 1352.2,703.166 1352.76,656.952 1353.32,691.186 1353.88,645.06 1354.44,646.849 1355,666.109 1355.56,699.434 1356.12,683.76 1356.67,650.181 1357.23,650.089 1357.79,638.316 1358.35,640.361 1358.91,673.862 1359.47,659.107 1360.03,626.158 1360.59,613.49 1361.15,632.69 1361.71,586.051 1362.27,591.322 1362.83,566.672 1363.39,589.28 1363.94,592.107 1364.5,646.439 1365.06,633.25 1365.62,622.426 1366.18,640.874 1366.74,642.127 1367.3,626.679 1367.86,617.733 1368.42,618.343 1368.98,621.922 1369.54,607.725 1370.1,593.677 1370.66,602.679 1371.21,605.669 1371.77,625.483 1372.33,609.628 1372.89,632.719 1373.45,669.717 1374.01,655.422 1374.57,657.629 1375.13,645.187 1375.69,659.348 1376.25,692.868 1376.81,709.377 1377.37,737.794 1377.93,717.543 1378.49,734.038 1379.04,728.435 1379.6,744.945 1380.16,739.563 1380.72,754.523 1381.28,748.088 1381.84,746.437 1382.4,760.109 1382.96,741.237 1383.52,705.531 1384.08,708.049 1384.64,704.671 1385.2,673.725 1385.76,689.869 1386.31,692.326 1386.87,721.294 1387.43,736.244 1387.99,750.988 1388.55,730.457 1389.11,743.931 1389.67,706.105 1390.23,718.548 1390.79,702.589 1391.35,698.7 1391.91,682.437 1392.47,698.138 1393.03,646.624 1393.58,665.271 1394.14,684.729 1394.7,686.949 1395.26,671.937 1395.82,707.342 1396.38,707.302 1396.94,722.48 1397.5,722.625 1398.06,691.594 1398.62,691.991 1399.18,672.526 1399.74,671.82 1400.3,686.289 1400.86,637.054 1401.41,640.956 1401.97,612.581 1402.53,601.292 1403.09,607.286 1403.65,661.783 1404.21,677.425 1404.77,695.735 1405.33,709.561 1405.89,688.813 1406.45,671.778 1407.01,675.095 1407.57,708.331 1408.13,707.583 1408.68,724.784 1409.24,707.773 1409.8,709.238 1410.36,694.363 1410.92,741.927 1411.48,752.772 1412.04,721.931 1412.6,723.264 1413.16,708.507 1413.72,726.575 1414.28,756.67 1414.84,751.461 1415.4,733.033 1415.95,684.479 1416.51,683.661 1417.07,686.637 1417.63,702.902 1418.19,715.577 1418.75,701.699 1419.31,697.991 1419.87,701.714 1420.43,683.275 1420.99,701.91 1421.55,670.67 1422.11,672.927 1422.67,676.096 1423.23,674.6 1423.78,657.289 1424.34,661.057 1424.9,710.862 1425.46,661.097 1426.02,692.983 1426.58,739.528 1427.14,752.895 1427.7,747.31 1428.26,744.447 1428.82,737.318 1429.38,803.027 1429.94,796.354 1430.5,808.082 1431.05,820.831 1431.61,827.644 1432.17,849.756 1432.73,841.555 1433.29,838.088 1433.85,832.009 1434.41,792.939 1434.97,737.618 1435.53,748.797 1436.09,762.598 1436.65,757.084 1437.21,798.559 1437.77,741.017 1438.33,722.665 1438.88,721.573 1439.44,751.079 1440,748.144 1440.56,729.951 1441.12,727.685 1441.68,728.56 1442.24,742.059 1442.8,753.276 1443.36,748.42 1443.92,758.828 1444.48,736.952 1445.04,720.498 1445.6,731.903 1446.15,695.933 1446.71,696.309 1447.27,695.317 1447.83,691.387 1448.39,690.203 1448.95,690.872 1449.51,704.886 1450.07,702.253 1450.63,681.861 1451.19,679.057 1451.75,731.804 1452.31,729.833 1452.87,711.358 1453.42,739.977 1453.98,734.63 1454.54,744.799 1455.1,790.878 1455.66,768.143 1456.22,716.971 1456.78,732.35 1457.34,710.612 1457.9,727.949 1458.46,755.83 1459.02,738.005 1459.58,734.812 1460.14,728.403 1460.7,745.978 1461.25,741.518 1461.81,768.821 1462.37,766.458 1462.93,732.258 1463.49,759.983 1464.05,787.161 1464.61,735.339 1465.17,735.136 1465.73,767.561 1466.29,730.874 1466.85,711.731 1467.41,674.698 1467.97,655.894 1468.52,655.389 1469.08,641.903 1469.64,612.519 1470.2,649.451 1470.76,636.283 1471.32,655.523 1471.88,670.909 1472.44,669.455 1473,683.118 1473.56,665.728 1474.12,695.331 1474.68,691.731 1475.24,642.173 1475.79,643.655 1476.35,611.698 1476.91,629.026 1477.47,614.808 1478.03,618.5 1478.59,621.265 1479.15,623.944 1479.71,608.89 1480.27,595.798 1480.83,615.302 1481.39,603.728 1481.95,624.973 1482.51,611.878 1483.07,583.728 1483.62,572.333 1484.18,579.358 1484.74,631.175 1485.3,617.019 1485.86,621.823 1486.42,642.478 1486.98,676.977 1487.54,676.451 1488.1,678.065 1488.66,630.38 1489.22,634.657 1489.78,637.948 1490.34,603.273 1490.89,624.429 1491.45,614.184 1492.01,603.888 1492.57,625.072 1493.13,611.553 1493.69,614.282 1494.25,601.867 1494.81,573.794 1495.37,564.817 1495.93,619.611 1496.49,592.346 1497.05,615.588 1497.61,605.259 1498.16,625.522 1498.72,627.446 1499.28,613.19 1499.84,601.784 1500.4,573.809 1500.96,582.615 1501.52,587.328 1502.08,629.131 1502.64,634.271 1503.2,639.367 1503.76,643.509 1504.32,662.631 1504.88,646.899 1505.44,617.258 1505.99,623.435 1506.55,643.569 1507.11,647.031 1507.67,648.649 1508.23,639.28 1508.79,639.804 1509.35,672.546 1509.91,689.196 1510.47,722.328 1511.03,781.747 1511.59,774.962 1512.15,768.733 1512.71,764.077 1513.26,760.814 1513.82,789.744 1514.38,785.701 1514.94,795.024 1515.5,723.98 1516.06,705.623 1516.62,719.353 1517.18,687.712 1517.74,674.062 1518.3,675.593 1518.86,692.552 1519.42,677.548 1519.98,674.841 1520.53,629.818 1521.09,647.003 1521.65,649.254 1522.21,681.901 1522.77,632.514 1523.33,620.341 1523.89,638.413 1524.45,676.079 1525.01,723.487 1525.57,759.532 1526.13,741.112 1526.69,724.552 1527.25,687.057 1527.81,689.647 1528.36,674.32 1528.92,677.883 1529.48,695.402 1530.04,695.366 1530.6,695.207 1531.16,714.979 1531.72,713.135 1532.28,679.037 1532.84,679.571 1533.4,663.178 1533.96,680.414 1534.52,695.255 1535.08,679.64 1535.63,712.926 1536.19,710.829 1536.75,725.695 1537.31,739.222 1537.87,735.115 1538.43,735.152 1538.99,717.782 1539.55,699.68 1540.11,680.254 1540.67,681.956 1541.23,683.079 1541.79,683.477 1542.35,688.364 1542.9,689.499 1543.46,722.842 1544.02,718.734 1544.58,716.801 1545.14,701.068 1545.7,730.158 1546.26,710.98 1546.82,676.644 1547.38,705.317 1547.94,686.589 1548.5,686.577 1549.06,720.348 1549.62,703.245 1550.18,674.738 1550.73,677.24 1551.29,663.984 1551.85,664.145 1552.41,682.156 1552.97,681.696 1553.53,696.418 1554.09,696.187 1554.65,712.368 1555.21,678.082 1555.77,661.824 1556.33,675.711 1556.89,648.685 1557.45,667.233 1558,663.028 1558.56,678.008 1559.12,664.001 1559.68,651.315 1560.24,640.082 1560.8,663.642 1561.36,666.949 1561.92,667.672 1562.48,699.038 1563.04,710.971 1563.6,743.089 1564.16,772.527 1564.72,753.454 1565.28,747.307 1565.83,714.125 1566.39,714.854 1566.95,698.46 1567.51,711.316 1568.07,708.675 1568.63,675.681 1569.19,724.892 1569.75,722.403 1570.31,720.529 1570.87,689.671 1571.43,690.729 1571.99,709.34 1572.55,707.376 1573.1,737.465 1573.66,716.932 1574.22,698.724 1574.78,715.111 1575.34,728.768 1575.9,711.716 1576.46,708.328 1577.02,694.18 1577.58,695.126 1578.14,706.416 1578.7,701.318 1579.26,699.162 1579.82,763.033 1580.37,756.554 1580.93,753.254 1581.49,749.16 1582.05,792.115 1582.61,800.989 1583.17,762.076 1583.73,756.015 1584.29,733.991 1584.85,697.904 1585.41,667.181 1585.97,685.552 1586.53,684.654 1587.09,715.348 1587.65,685.096 1588.2,721.605 1588.76,706.429 1589.32,705.202 1589.88,686.694 1590.44,702.364 1591,703.474 1591.56,685.327 1592.12,686.189 1592.68,668.484 1593.24,636.646 1593.8,656.102 1594.36,690.753 1594.92,704.754 1595.47,708.1 1596.03,673.289 1596.59,674.556 1597.15,646.044 1597.71,664.192 1598.27,663.194 1598.83,662.708 1599.39,629.756 1599.95,632.73 1600.51,640.374 1601.07,675.637 1601.63,660.139 1602.19,629.381 1602.74,652.117 1603.3,669.59 1603.86,656.18 1604.42,624.44 1604.98,629.604 1605.54,648.933 1606.1,652.142 1606.66,672.252 1607.22,674.801 1607.78,659.403 1608.34,629.284 1608.9,667.271 1609.46,634.613 1610.02,601.222 1610.57,610.282 1611.13,615.579 1611.69,600.598 1612.25,619.156 1612.81,640.187 1613.37,642.375 1613.93,659.502 1614.49,659.787 1615.05,679.255 1615.61,677.936 1616.17,650.099 1616.73,651.647 1617.29,671.621 1617.84,659.135 1618.4,676.637 1618.96,680.026 1619.52,682.332 1620.08,664.106 1620.64,651.479 1621.2,635.641 1621.76,640.503 1622.32,623.597 1622.88,628.552 1623.44,634.717 1624,616.485 1624.56,630.958 1625.11,618.273 1625.67,619.076 1626.23,625.448 1626.79,629.473 1627.35,663.944 1627.91,664.736 1628.47,664.955 1629.03,634.006 1629.59,620.547 1630.15,623.614 1630.71,643.83 1631.27,625.36 1631.83,628.886 1632.39,694.971 1632.94,679.97 1633.5,679.65 1634.06,648.13 1634.62,665.223 1635.18,665.725 1635.74,668.053 1636.3,688.279 1636.86,691.226 1637.42,699.809 1637.98,701.086 1638.54,679.102 1639.1,699.875 1639.66,683.846 1640.21,668.331 1640.77,670.94 1641.33,622.144 1641.89,607.989 1642.45,610.237 1643.01,616.611 1643.57,682.007 1644.13,714.205 1644.69,731.141 1645.25,745.918 1645.81,693.927 1646.37,693.601 1646.93,694.323 1647.48,694.737 1648.04,707.414 1648.6,687.284 1649.16,699.991 1649.72,697.543 1650.28,696.645 1650.84,683.143 1651.4,636.695 1651.96,654.343 1652.52,669.613 1653.08,672.156 1653.64,622.95 1654.2,613.089 1654.76,630.182 1655.31,621.046 1655.87,626.658 1656.43,661.785 1656.99,661.584 1657.55,663.694 1658.11,676.562 1658.67,692.193 1659.23,692.95 1659.79,694.909 1660.35,692.12 1660.91,694.553 1661.47,675.903 1662.03,694.595 1662.58,664.443 1663.14,680.181 1663.7,696.437 1664.26,729.869 1664.82,727.702 1665.38,711.63 1665.94,725.747 1666.5,675.994 1667.06,661.756 1667.62,661.216 1668.18,630.724 1668.74,632.815 1669.3,634.714 1669.85,639.154 1670.41,642.147 1670.97,643.821 1671.53,643.326 1672.09,663.069 1672.65,666.105 1673.21,673.008 1673.77,659.525 1674.33,662.46 1674.89,699.196 1675.45,683.516 1676.01,700.886 1676.57,730.127 1677.13,712.848 1677.68,682.247 1678.24,679.038 1678.8,709.005 1679.36,692.54 1679.92,691.867 1680.48,693.328 1681.04,710.907 1681.6,708.789 1682.16,724.872 1682.72,708.043 1683.28,737.781 1683.84,747.355 1684.4,790.517 1684.95,784.227 1685.51,763.138 1686.07,774.043 1686.63,784.901 1687.19,779.512 1687.75,792.416 1688.31,818.689 1688.87,811.065 1689.43,758.311 1689.99,723.458 1690.55,658.383 1691.11,630.095 1691.67,645.851 1692.23,664.46 1692.78,647.158 1693.34,650.765 1693.9,619.225 1694.46,590.525 1695.02,594.341 1695.58,583.729 1696.14,569.819 1696.7,578.734 1697.26,567.404 1697.82,571.295 1698.38,559.489 1698.94,565.884 1699.5,587.228 1700.05,575.974 1700.61,581.315 1701.17,634.331 1701.73,651.928 1702.29,652.725 1702.85,655.459 1703.41,675.579 1703.97,657.009 1704.53,658.116 1705.09,691.736 1705.65,690.453 1706.21,670.609 1706.77,688.654 1707.32,673.745 1707.88,690.78 1708.44,691.65 1709,688.124 1709.56,688.846 1710.12,719.173 1710.68,702.132 1711.24,703.591 1711.8,718.162 1712.36,714.918 1712.92,731.667 1713.48,714.805 1714.04,746.274 1714.6,743.841 1715.15,728.19 1715.71,712.252 1716.27,724.506 1716.83,736.856 1717.39,749.573 1717.95,760.421 1718.51,723.744 1719.07,719.927 1719.63,719.568 1720.19,765.171 1720.75,759.821 1721.31,786.739 1721.87,796.012 1722.42,774.939 1722.98,767.274 1723.54,760.604 1724.1,739.607 1724.66,734.194 1725.22,713.307 1725.78,762.924 1726.34,759.949 1726.9,740.43 1727.46,719.243 1728.02,701.243 1728.58,698.774 1729.14,700.972 1729.69,713.929 1730.25,725.889 1730.81,706.272 1731.37,703.365 1731.93,716.994 1732.49,731.889 1733.05,730.951 1733.61,778.422 1734.17,739.753 1734.73,719.585 1735.29,730.514 1735.85,726.426 1736.41,708.957 1736.97,706.887 1737.52,673.753 1738.08,690.594 1738.64,640.621 1739.2,690.691 1739.76,692.613 1740.32,641.205 1740.88,641.033 1741.44,647.621 1742,650.814 1742.56,619.429 1743.12,621.395 1743.68,656.427 1744.24,659.349 1744.79,692.046 1745.35,708.672 1745.91,719.686 1746.47,736.144 1747.03,714.735 1747.59,681.754 1748.15,650.821 1748.71,667.205 1749.27,665.394 1749.83,664.891 1750.39,650.135 1750.95,649.973 1751.51,688.282 1752.06,716.424 1752.62,712.917 1753.18,713.681 1753.74,741.112 1754.3,737.528 1754.86,736.586 1755.42,780.63 1755.98,774.936 1756.54,820.559 1757.1,778.379 1757.66,786.856 1758.22,812.921 1758.78,741.46 1759.34,751.613 1759.89,747.574 1760.45,743.554 1761.01,772.25 1761.57,751.739 1762.13,736.17 1762.69,719.415 1763.25,704.395 1763.81,686.966 1764.37,667.926 1764.93,668.52 1765.49,664.983 1766.05,649.162 1766.61,664.803 1767.16,632.851 1767.72,601.35 1768.28,604.476 1768.84,604.208 1769.4,591.766 1769.96,598.248 1770.52,583.686 1771.08,575.681 1771.64,547.767 1772.2,604.445 1772.76,625.584 1773.32,662.278 1773.88,679.061 1774.43,680.212 1774.99,693.918 1775.55,693.605 1776.11,678.047 1776.67,676.333 1777.23,709.577 1777.79,677.515 1778.35,677.05 1778.91,691.751 1779.47,719.445 1780.03,716.753 1780.59,713.632 1781.15,726.091 1781.71,739.854 1782.26,719.869 1782.82,718.783 1783.38,734.148 1783.94,749.527 1784.5,746.984 1785.06,781.219 1785.62,791.23 1786.18,800.909 1786.74,795.032 1787.3,805.288 1787.86,814.153 1788.42,788.647 1788.98,769.407 1789.53,763.541 1790.09,759.878 1790.65,722.006 1791.21,702.095 1791.77,718.382 1792.33,681.953 1792.89,680.023 1793.45,713.302 1794.01,729.742 1794.57,695.387 1795.13,716.402 1795.69,730.12 1796.25,762.213 1796.8,761.248 1797.36,761.453 1797.92,754.955 1798.48,753.274 1799.04,763.406 1799.6,775.488 1800.16,786.705 1800.72,733.138 1801.28,724.18 1801.84,688.317 1802.4,673.147 1802.96,676.158 1803.52,711.124 1804.08,694.931 1804.63,678.208 1805.19,677.7 1805.75,693.41 1806.31,672.475 1806.87,624.954 1807.43,625.182 1807.99,630.685 1808.55,650.208 1809.11,666.128 1809.67,667.79 1810.23,651.476 1810.79,620.465 1811.35,621.774 1811.9,612.278 1812.46,614.938 1813.02,586.174 1813.58,557.183 1814.14,576.694 1814.7,561.755 1815.26,569.142 1815.82,577.058 1816.38,582.82 1816.94,589.845 1817.5,612.296 1818.06,618.389 1818.62,607.292 1819.18,646.464 1819.73,617.593 1820.29,636.729 1820.85,604.421 1821.41,592.052 1821.97,629.941 1822.53,633.193 1823.09,638.275 1823.65,644.621 1824.21,647.951 1824.77,620.955 1825.33,608.481 1825.89,593.685 1826.45,617.702 1827,636.613 1827.56,628.088 1828.12,681.339 1828.68,664.41 1829.24,686.009 1829.8,701.54 1830.36,668.499 1830.92,685.921 1831.48,701.819 1832.04,697.329 1832.6,693.902 1833.16,679.5 1833.72,680.733 1834.27,665.726 1834.83,685.657 1835.39,670.191 1835.95,636.143 1836.51,688.494 1837.07,705.212 1837.63,685.668 1838.19,702.854 \"/>\n<path clip-path=\"url(#clip573)\" d=\"M720.247 690.433 L720.806 690.433 L721.365 690.433 L721.924 690.433 L722.484 690.433 L723.043 690.433 L723.602 690.433 L724.161 690.433 L724.721 690.433 L725.28 690.433 L725.839 690.433 L726.398 690.433 L726.958 690.433 L727.517 690.433 L728.076 690.433 L728.635 690.433 L729.195 690.433 L729.754 690.433 L730.313 690.433 L730.872 690.433 L731.432 690.433 L731.991 690.433 L732.55 690.433 L733.109 690.433 L733.669 690.433 L734.228 690.433 L734.787 690.433 L735.346 690.433 L735.906 690.433 L736.465 690.433 L737.024 690.433 L737.583 690.433 L738.143 690.433 L738.702 690.433 L739.261 690.433 L739.82 690.433 L740.38 690.433 L740.939 690.433 L741.498 690.433 L742.057 690.433 L742.617 690.433 L743.176 690.433 L743.735 690.433 L744.294 690.433 L744.854 690.433 L745.413 690.433 L745.972 690.433 L746.531 690.433 L747.091 690.433 L747.65 690.433 L748.209 690.433 L748.768 690.433 L749.328 690.433 L749.887 690.433 L750.446 690.433 L751.005 690.433 L751.565 690.433 L752.124 690.433 L752.683 690.433 L753.242 690.433 L753.802 690.433 L754.361 690.433 L754.92 690.433 L755.479 690.433 L756.039 690.433 L756.598 690.433 L757.157 690.433 L757.716 690.433 L758.276 690.433 L758.835 690.433 L759.394 690.433 L759.953 690.433 L760.513 690.433 L761.072 690.433 L761.631 690.433 L762.19 690.433 L762.75 690.433 L763.309 690.433 L763.868 690.433 L764.427 690.433 L764.987 690.433 L765.546 690.433 L766.105 690.433 L766.664 690.433 L767.224 690.433 L767.783 690.433 L768.342 690.433 L768.901 690.433 L769.461 690.433 L770.02 690.433 L770.579 690.433 L771.138 690.433 L771.698 690.433 L772.257 690.433 L772.816 690.433 L773.375 690.433 L773.935 690.433 L774.494 690.433 L775.053 690.433 L775.612 690.433 L776.172 690.433 L776.731 690.433 L777.29 690.433 L777.849 690.433 L778.409 690.433 L778.968 690.433 L779.527 690.433 L780.086 690.433 L780.646 690.433 L781.205 690.433 L781.764 690.433 L782.323 690.433 L782.883 690.433 L783.442 690.433 L784.001 690.433 L784.56 690.433 L785.12 690.433 L785.679 690.433 L786.238 690.433 L786.797 690.433 L787.357 690.433 L787.916 690.433 L788.475 690.433 L789.034 690.433 L789.594 690.433 L790.153 690.433 L790.712 690.433 L791.271 690.433 L791.831 690.433 L792.39 690.433 L792.949 690.433 L793.508 690.433 L794.068 690.433 L794.627 690.433 L795.186 690.433 L795.745 690.433 L796.305 690.433 L796.864 690.433 L797.423 690.433 L797.982 690.433 L798.542 690.433 L799.101 690.433 L799.66 690.433 L800.219 690.433 L800.779 690.433 L801.338 690.433 L801.897 690.433 L802.456 690.433 L803.016 690.433 L803.575 690.433 L804.134 690.433 L804.693 690.433 L805.253 690.433 L805.812 690.433 L806.371 690.433 L806.931 690.433 L807.49 690.433 L808.049 690.433 L808.608 690.433 L809.168 690.433 L809.727 690.433 L810.286 690.433 L810.845 690.433 L811.405 690.433 L811.964 690.433 L812.523 690.433 L813.082 690.433 L813.642 690.433 L814.201 690.433 L814.76 690.433 L815.319 690.433 L815.879 690.433 L816.438 690.433 L816.997 690.433 L817.556 690.433 L818.116 690.433 L818.675 690.433 L819.234 690.433 L819.793 690.433 L820.353 690.433 L820.912 690.433 L821.471 690.433 L822.03 690.433 L822.59 690.433 L823.149 690.433 L823.708 690.433 L824.267 690.433 L824.827 690.433 L825.386 690.433 L825.945 690.433 L826.504 690.433 L827.064 690.433 L827.623 690.433 L828.182 690.433 L828.741 690.433 L829.301 690.433 L829.86 690.433 L830.419 690.433 L830.978 690.433 L831.538 690.433 L832.097 690.433 L832.656 690.433 L833.215 690.433 L833.775 690.433 L834.334 690.433 L834.893 690.433 L835.452 690.433 L836.012 690.433 L836.571 690.433 L837.13 690.433 L837.689 690.433 L838.249 690.433 L838.808 690.433 L839.367 690.433 L839.926 690.433 L840.486 690.433 L841.045 690.433 L841.604 690.433 L842.163 690.433 L842.723 690.433 L843.282 690.433 L843.841 690.433 L844.4 690.433 L844.96 690.433 L845.519 690.433 L846.078 690.433 L846.637 690.433 L847.197 690.433 L847.756 690.433 L848.315 690.433 L848.874 690.433 L849.434 690.433 L849.993 690.433 L850.552 690.433 L851.111 690.433 L851.671 690.433 L852.23 690.433 L852.789 690.433 L853.348 690.433 L853.908 690.433 L854.467 690.433 L855.026 690.433 L855.585 690.433 L856.145 690.433 L856.704 690.433 L857.263 690.433 L857.822 690.433 L858.382 690.433 L858.941 690.433 L859.5 690.433 L860.059 690.433 L860.619 690.433 L861.178 690.433 L861.737 690.433 L862.296 690.433 L862.856 690.433 L863.415 690.433 L863.974 690.433 L864.533 690.433 L865.093 690.433 L865.652 690.433 L866.211 690.433 L866.77 690.433 L867.33 690.433 L867.889 690.433 L868.448 690.433 L869.007 690.433 L869.567 690.433 L870.126 690.433 L870.685 690.433 L871.244 690.433 L871.804 690.433 L872.363 690.433 L872.922 690.433 L873.481 690.433 L874.041 690.433 L874.6 690.433 L875.159 690.433 L875.718 690.433 L876.278 690.433 L876.837 690.433 L877.396 690.433 L877.955 690.433 L878.515 690.433 L879.074 690.433 L879.633 690.433 L880.192 690.433 L880.752 690.433 L881.311 690.433 L881.87 690.433 L882.429 690.433 L882.989 690.433 L883.548 690.433 L884.107 690.433 L884.666 690.433 L885.226 690.433 L885.785 690.433 L886.344 690.433 L886.903 690.433 L887.463 690.433 L888.022 690.433 L888.581 690.433 L889.14 690.433 L889.7 690.433 L890.259 690.433 L890.818 690.433 L891.377 690.433 L891.937 690.433 L892.496 690.433 L893.055 690.433 L893.614 690.433 L894.174 690.433 L894.733 690.433 L895.292 690.433 L895.851 690.433 L896.411 690.433 L896.97 690.433 L897.529 690.433 L898.088 690.433 L898.648 690.433 L899.207 690.433 L899.766 690.433 L900.325 690.433 L900.885 690.433 L901.444 690.433 L902.003 690.433 L902.562 690.433 L903.122 690.433 L903.681 690.433 L904.24 690.433 L904.799 690.433 L905.359 690.433 L905.918 690.433 L906.477 690.433 L907.036 690.433 L907.596 690.433 L908.155 690.433 L908.714 690.433 L909.273 690.433 L909.833 690.433 L910.392 690.433 L910.951 690.433 L911.51 690.433 L912.07 690.433 L912.629 690.433 L913.188 690.433 L913.747 690.433 L914.307 690.433 L914.866 690.433 L915.425 690.433 L915.984 690.433 L916.544 690.433 L917.103 690.433 L917.662 690.433 L918.221 690.433 L918.781 690.433 L919.34 690.433 L919.899 690.433 L920.458 690.433 L921.018 690.433 L921.577 690.433 L922.136 690.433 L922.695 690.433 L923.255 690.433 L923.814 690.433 L924.373 690.433 L924.932 690.433 L925.492 690.433 L926.051 690.433 L926.61 690.433 L927.169 690.433 L927.729 690.433 L928.288 690.433 L928.847 690.433 L929.406 690.433 L929.966 690.433 L930.525 690.433 L931.084 690.433 L931.644 690.433 L932.203 690.433 L932.762 690.433 L933.321 690.433 L933.881 690.433 L934.44 690.433 L934.999 690.433 L935.558 690.433 L936.118 690.433 L936.677 690.433 L937.236 690.433 L937.795 690.433 L938.355 690.433 L938.914 690.433 L939.473 690.433 L940.032 690.433 L940.592 690.433 L941.151 690.433 L941.71 690.433 L942.269 690.433 L942.829 690.433 L943.388 690.433 L943.947 690.433 L944.506 690.433 L945.066 690.433 L945.625 690.433 L946.184 690.433 L946.743 690.433 L947.303 690.433 L947.862 690.433 L948.421 690.433 L948.98 690.433 L949.54 690.433 L950.099 690.433 L950.658 690.433 L951.217 690.433 L951.777 690.433 L952.336 690.433 L952.895 690.433 L953.454 690.433 L954.014 690.433 L954.573 690.433 L955.132 690.433 L955.691 690.433 L956.251 690.433 L956.81 690.433 L957.369 690.433 L957.928 690.433 L958.488 690.433 L959.047 690.433 L959.606 690.433 L960.165 690.433 L960.725 690.433 L961.284 690.433 L961.843 690.433 L962.402 690.433 L962.962 690.433 L963.521 690.433 L964.08 690.433 L964.639 690.433 L965.199 690.433 L965.758 690.433 L966.317 690.433 L966.876 690.433 L967.436 690.433 L967.995 690.433 L968.554 690.433 L969.113 690.433 L969.673 690.433 L970.232 690.433 L970.791 690.433 L971.35 690.433 L971.91 690.433 L972.469 690.433 L973.028 690.433 L973.587 690.433 L974.147 690.433 L974.706 690.433 L975.265 690.433 L975.824 690.433 L976.384 690.433 L976.943 690.433 L977.502 690.433 L978.061 690.433 L978.621 690.433 L979.18 690.433 L979.739 690.433 L980.298 690.433 L980.858 690.433 L981.417 690.433 L981.976 690.433 L982.535 690.433 L983.095 690.433 L983.654 690.433 L984.213 690.433 L984.772 690.433 L985.332 690.433 L985.891 690.433 L986.45 690.433 L987.009 690.433 L987.569 690.433 L988.128 690.433 L988.687 690.433 L989.246 690.433 L989.806 690.433 L990.365 690.433 L990.924 690.433 L991.483 690.433 L992.043 690.433 L992.602 690.433 L993.161 690.433 L993.72 690.433 L994.28 690.433 L994.839 690.433 L995.398 690.433 L995.957 690.433 L996.517 690.433 L997.076 690.433 L997.635 690.433 L998.194 690.433 L998.754 690.433 L999.313 690.433 L999.872 690.433 L1000.43 690.433 L1000.99 690.433 L1001.55 690.433 L1002.11 690.433 L1002.67 690.433 L1003.23 690.433 L1003.79 690.433 L1004.35 690.433 L1004.91 690.433 L1005.46 690.433 L1006.02 690.433 L1006.58 690.433 L1007.14 690.433 L1007.7 690.433 L1008.26 690.433 L1008.82 690.433 L1009.38 690.433 L1009.94 690.433 L1010.5 690.433 L1011.06 690.433 L1011.62 690.433 L1012.18 690.433 L1012.73 690.433 L1013.29 690.433 L1013.85 690.433 L1014.41 690.433 L1014.97 690.433 L1015.53 690.433 L1016.09 690.433 L1016.65 690.433 L1017.21 690.433 L1017.77 690.433 L1018.33 690.433 L1018.89 690.433 L1019.45 690.433 L1020.01 690.433 L1020.56 690.433 L1021.12 690.433 L1021.68 690.433 L1022.24 690.433 L1022.8 690.433 L1023.36 690.433 L1023.92 690.433 L1024.48 690.433 L1025.04 690.433 L1025.6 690.433 L1026.16 690.433 L1026.72 690.433 L1027.28 690.433 L1027.83 690.433 L1028.39 690.433 L1028.95 690.433 L1029.51 690.433 L1030.07 690.433 L1030.63 690.433 L1031.19 690.433 L1031.75 690.433 L1032.31 690.433 L1032.87 690.433 L1033.43 690.433 L1033.99 690.433 L1034.55 690.433 L1035.1 690.433 L1035.66 690.433 L1036.22 690.433 L1036.78 690.433 L1037.34 690.433 L1037.9 690.433 L1038.46 690.433 L1039.02 690.433 L1039.58 690.433 L1040.14 690.433 L1040.7 690.433 L1041.26 690.433 L1041.82 690.433 L1042.38 690.433 L1042.93 690.433 L1043.49 690.433 L1044.05 690.433 L1044.61 690.433 L1045.17 690.433 L1045.73 690.433 L1046.29 690.433 L1046.85 690.433 L1047.41 690.433 L1047.97 690.433 L1048.53 690.433 L1049.09 690.433 L1049.65 690.433 L1050.2 690.433 L1050.76 690.433 L1051.32 690.433 L1051.88 690.433 L1052.44 690.433 L1053 690.433 L1053.56 690.433 L1054.12 690.433 L1054.68 690.433 L1055.24 690.433 L1055.8 690.433 L1056.36 690.433 L1056.92 690.433 L1057.48 690.433 L1058.03 690.433 L1058.59 690.433 L1059.15 690.433 L1059.71 690.433 L1060.27 690.433 L1060.83 690.433 L1061.39 690.433 L1061.95 690.433 L1062.51 690.433 L1063.07 690.433 L1063.63 690.433 L1064.19 690.433 L1064.75 690.433 L1065.3 690.433 L1065.86 690.433 L1066.42 690.433 L1066.98 690.433 L1067.54 690.433 L1068.1 690.433 L1068.66 690.433 L1069.22 690.433 L1069.78 690.433 L1070.34 690.433 L1070.9 690.433 L1071.46 690.433 L1072.02 690.433 L1072.57 690.433 L1073.13 690.433 L1073.69 690.433 L1074.25 690.433 L1074.81 690.433 L1075.37 690.433 L1075.93 690.433 L1076.49 690.433 L1077.05 690.433 L1077.61 690.433 L1078.17 690.433 L1078.73 690.433 L1079.29 690.433 L1079.85 690.433 L1080.4 690.433 L1080.96 690.433 L1081.52 690.433 L1082.08 690.433 L1082.64 690.433 L1083.2 690.433 L1083.76 690.433 L1084.32 690.433 L1084.88 690.433 L1085.44 690.433 L1086 690.433 L1086.56 690.433 L1087.12 690.433 L1087.67 690.433 L1088.23 690.433 L1088.79 690.433 L1089.35 690.433 L1089.91 690.433 L1090.47 690.433 L1091.03 690.433 L1091.59 690.433 L1092.15 690.433 L1092.71 690.433 L1093.27 690.433 L1093.83 690.433 L1094.39 690.433 L1094.94 690.433 L1095.5 690.433 L1096.06 690.433 L1096.62 690.433 L1097.18 690.433 L1097.74 690.433 L1098.3 690.433 L1098.86 690.433 L1099.42 690.433 L1099.98 690.433 L1100.54 690.433 L1101.1 690.433 L1101.66 690.433 L1102.22 690.433 L1102.77 690.433 L1103.33 690.433 L1103.89 690.433 L1104.45 690.433 L1105.01 690.433 L1105.57 690.433 L1106.13 690.433 L1106.69 690.433 L1107.25 690.433 L1107.81 690.433 L1108.37 690.433 L1108.93 690.433 L1109.49 690.433 L1110.04 690.433 L1110.6 690.433 L1111.16 690.433 L1111.72 690.433 L1112.28 690.433 L1112.84 690.433 L1113.4 690.433 L1113.96 690.433 L1114.52 690.433 L1115.08 690.433 L1115.64 690.433 L1116.2 690.433 L1116.76 690.433 L1117.31 690.433 L1117.87 690.433 L1118.43 690.433 L1118.99 690.433 L1119.55 690.433 L1120.11 690.433 L1120.67 690.433 L1121.23 690.433 L1121.79 690.433 L1122.35 690.433 L1122.91 690.433 L1123.47 690.433 L1124.03 690.433 L1124.59 690.433 L1125.14 690.433 L1125.7 690.433 L1126.26 690.433 L1126.82 690.433 L1127.38 690.433 L1127.94 690.433 L1128.5 690.433 L1129.06 690.433 L1129.62 690.433 L1130.18 690.433 L1130.74 690.433 L1131.3 690.433 L1131.86 690.433 L1132.41 690.433 L1132.97 690.433 L1133.53 690.433 L1134.09 690.433 L1134.65 690.433 L1135.21 690.433 L1135.77 690.433 L1136.33 690.433 L1136.89 690.433 L1137.45 690.433 L1138.01 690.433 L1138.57 690.433 L1139.13 690.433 L1139.68 690.433 L1140.24 690.433 L1140.8 690.433 L1141.36 690.433 L1141.92 690.433 L1142.48 690.433 L1143.04 690.433 L1143.6 690.433 L1144.16 690.433 L1144.72 690.433 L1145.28 690.433 L1145.84 690.433 L1146.4 690.433 L1146.96 690.433 L1147.51 690.433 L1148.07 690.433 L1148.63 690.433 L1149.19 690.433 L1149.75 690.433 L1150.31 690.433 L1150.87 690.433 L1151.43 690.433 L1151.99 690.433 L1152.55 690.433 L1153.11 690.433 L1153.67 690.433 L1154.23 690.433 L1154.78 690.433 L1155.34 690.433 L1155.9 690.433 L1156.46 690.433 L1157.02 690.433 L1157.58 690.433 L1158.14 690.433 L1158.7 690.433 L1159.26 690.433 L1159.82 690.433 L1160.38 690.433 L1160.94 690.433 L1161.5 690.433 L1162.05 690.433 L1162.61 690.433 L1163.17 690.433 L1163.73 690.433 L1164.29 690.433 L1164.85 690.433 L1165.41 690.433 L1165.97 690.433 L1166.53 690.433 L1167.09 690.433 L1167.65 690.433 L1168.21 690.433 L1168.77 690.433 L1169.33 690.433 L1169.88 690.433 L1170.44 690.433 L1171 690.433 L1171.56 690.433 L1172.12 690.433 L1172.68 690.433 L1173.24 690.433 L1173.8 690.433 L1174.36 690.433 L1174.92 690.433 L1175.48 690.433 L1176.04 690.433 L1176.6 690.433 L1177.15 690.433 L1177.71 690.433 L1178.27 690.433 L1178.83 690.433 L1179.39 690.433 L1179.95 690.433 L1180.51 690.433 L1181.07 690.433 L1181.63 690.433 L1182.19 690.433 L1182.75 690.433 L1183.31 690.433 L1183.87 690.433 L1184.43 690.433 L1184.98 690.433 L1185.54 690.433 L1186.1 690.433 L1186.66 690.433 L1187.22 690.433 L1187.78 690.433 L1188.34 690.433 L1188.9 690.433 L1189.46 690.433 L1190.02 690.433 L1190.58 690.433 L1191.14 690.433 L1191.7 690.433 L1192.25 690.433 L1192.81 690.433 L1193.37 690.433 L1193.93 690.433 L1194.49 690.433 L1195.05 690.433 L1195.61 690.433 L1196.17 690.433 L1196.73 690.433 L1197.29 690.433 L1197.85 690.433 L1198.41 690.433 L1198.97 690.433 L1199.52 690.433 L1200.08 690.433 L1200.64 690.433 L1201.2 690.433 L1201.76 690.433 L1202.32 690.433 L1202.88 690.433 L1203.44 690.433 L1204 690.433 L1204.56 690.433 L1205.12 690.433 L1205.68 690.433 L1206.24 690.433 L1206.8 690.433 L1207.35 690.433 L1207.91 690.433 L1208.47 690.433 L1209.03 690.433 L1209.59 690.433 L1210.15 690.433 L1210.71 690.433 L1211.27 690.433 L1211.83 690.433 L1212.39 690.433 L1212.95 690.433 L1213.51 690.433 L1214.07 690.433 L1214.62 690.433 L1215.18 690.433 L1215.74 690.433 L1216.3 690.433 L1216.86 690.433 L1217.42 690.433 L1217.98 690.433 L1218.54 690.433 L1219.1 690.433 L1219.66 690.433 L1220.22 690.433 L1220.78 690.433 L1221.34 690.433 L1221.89 690.433 L1222.45 690.433 L1223.01 690.433 L1223.57 690.433 L1224.13 690.433 L1224.69 690.433 L1225.25 690.433 L1225.81 690.433 L1226.37 690.433 L1226.93 690.433 L1227.49 690.433 L1228.05 690.433 L1228.61 690.433 L1229.17 690.433 L1229.72 690.433 L1230.28 690.433 L1230.84 690.433 L1231.4 690.433 L1231.96 690.433 L1232.52 690.433 L1233.08 690.433 L1233.64 690.433 L1234.2 690.433 L1234.76 690.433 L1235.32 690.433 L1235.88 690.433 L1236.44 690.433 L1236.99 690.433 L1237.55 690.433 L1238.11 690.433 L1238.67 690.433 L1239.23 690.433 L1239.79 690.433 L1240.35 690.433 L1240.91 690.433 L1241.47 690.433 L1242.03 690.433 L1242.59 690.433 L1243.15 690.433 L1243.71 690.433 L1244.26 690.433 L1244.82 690.433 L1245.38 690.433 L1245.94 690.433 L1246.5 690.433 L1247.06 690.433 L1247.62 690.433 L1248.18 690.433 L1248.74 690.433 L1249.3 690.433 L1249.86 690.433 L1250.42 690.433 L1250.98 690.433 L1251.54 690.433 L1252.09 690.433 L1252.65 690.433 L1253.21 690.433 L1253.77 690.433 L1254.33 690.433 L1254.89 690.433 L1255.45 690.433 L1256.01 690.433 L1256.57 690.433 L1257.13 690.433 L1257.69 690.433 L1258.25 690.433 L1258.81 690.433 L1259.36 690.433 L1259.92 690.433 L1260.48 690.433 L1261.04 690.433 L1261.6 690.433 L1262.16 690.433 L1262.72 690.433 L1263.28 690.433 L1263.84 690.433 L1264.4 690.433 L1264.96 690.433 L1265.52 690.433 L1266.08 690.433 L1266.63 690.433 L1267.19 690.433 L1267.75 690.433 L1268.31 690.433 L1268.87 690.433 L1269.43 690.433 L1269.99 690.433 L1270.55 690.433 L1271.11 690.433 L1271.67 690.433 L1272.23 690.433 L1272.79 690.433 L1273.35 690.433 L1273.91 690.433 L1274.46 690.433 L1275.02 690.433 L1275.58 690.433 L1276.14 690.433 L1276.7 690.433 L1277.26 690.433 L1277.82 690.433 L1278.38 690.433 L1278.94 690.433 L1279.5 690.433 L1280.06 690.433 L1280.62 690.433 L1281.18 690.433 L1281.73 690.433 L1282.29 690.433 L1282.85 690.433 L1283.41 690.433 L1283.97 690.433 L1284.53 690.433 L1285.09 690.433 L1285.65 690.433 L1286.21 690.433 L1286.77 690.433 L1287.33 690.433 L1287.89 690.433 L1288.45 690.433 L1289 690.433 L1289.56 690.433 L1290.12 690.433 L1290.68 690.433 L1291.24 690.433 L1291.8 690.433 L1292.36 690.433 L1292.92 690.433 L1293.48 690.433 L1294.04 690.433 L1294.6 690.433 L1295.16 690.433 L1295.72 690.433 L1296.28 690.433 L1296.83 690.433 L1297.39 690.433 L1297.95 690.433 L1298.51 690.433 L1299.07 690.433 L1299.63 690.433 L1300.19 690.433 L1300.75 690.433 L1301.31 690.433 L1301.87 690.433 L1302.43 690.433 L1302.99 690.433 L1303.55 690.433 L1304.1 690.433 L1304.66 690.433 L1305.22 690.433 L1305.78 690.433 L1306.34 690.433 L1306.9 690.433 L1307.46 690.433 L1308.02 690.433 L1308.58 690.433 L1309.14 690.433 L1309.7 690.433 L1310.26 690.433 L1310.82 690.433 L1311.38 690.433 L1311.93 690.433 L1312.49 690.433 L1313.05 690.433 L1313.61 690.433 L1314.17 690.433 L1314.73 690.433 L1315.29 690.433 L1315.85 690.433 L1316.41 690.433 L1316.97 690.433 L1317.53 690.433 L1318.09 690.433 L1318.65 690.433 L1319.2 690.433 L1319.76 690.433 L1320.32 690.433 L1320.88 690.433 L1321.44 690.433 L1322 690.433 L1322.56 690.433 L1323.12 690.433 L1323.68 690.433 L1324.24 690.433 L1324.8 690.433 L1325.36 690.433 L1325.92 690.433 L1326.47 690.433 L1327.03 690.433 L1327.59 690.433 L1328.15 690.433 L1328.71 690.433 L1329.27 690.433 L1329.83 690.433 L1330.39 690.433 L1330.95 690.433 L1331.51 690.433 L1332.07 690.433 L1332.63 690.433 L1333.19 690.433 L1333.75 690.433 L1334.3 690.433 L1334.86 690.433 L1335.42 690.433 L1335.98 690.433 L1336.54 690.433 L1337.1 690.433 L1337.66 690.433 L1338.22 690.433 L1338.78 690.433 L1339.34 690.433 L1339.9 690.433 L1340.46 690.433 L1341.02 690.433 L1341.57 690.433 L1342.13 690.433 L1342.69 690.433 L1343.25 690.433 L1343.81 690.433 L1344.37 690.433 L1344.93 690.433 L1345.49 690.433 L1346.05 690.433 L1346.61 690.433 L1347.17 690.433 L1347.73 690.433 L1348.29 690.433 L1348.84 690.433 L1349.4 690.433 L1349.96 690.433 L1350.52 690.433 L1351.08 690.433 L1351.64 690.433 L1352.2 690.433 L1352.76 690.433 L1353.32 690.433 L1353.88 690.433 L1354.44 690.433 L1355 690.433 L1355.56 690.433 L1356.12 690.433 L1356.67 690.433 L1357.23 690.433 L1357.79 690.433 L1358.35 690.433 L1358.91 690.433 L1359.47 690.433 L1360.03 690.433 L1360.59 690.433 L1361.15 690.433 L1361.71 690.433 L1362.27 690.433 L1362.83 690.433 L1363.39 690.433 L1363.94 690.433 L1364.5 690.433 L1365.06 690.433 L1365.62 690.433 L1366.18 690.433 L1366.74 690.433 L1367.3 690.433 L1367.86 690.433 L1368.42 690.433 L1368.98 690.433 L1369.54 690.433 L1370.1 690.433 L1370.66 690.433 L1371.21 690.433 L1371.77 690.433 L1372.33 690.433 L1372.89 690.433 L1373.45 690.433 L1374.01 690.433 L1374.57 690.433 L1375.13 690.433 L1375.69 690.433 L1376.25 690.433 L1376.81 690.433 L1377.37 690.433 L1377.93 690.433 L1378.49 690.433 L1379.04 690.433 L1379.6 690.433 L1380.16 690.433 L1380.72 690.433 L1381.28 690.433 L1381.84 690.433 L1382.4 690.433 L1382.96 690.433 L1383.52 690.433 L1384.08 690.433 L1384.64 690.433 L1385.2 690.433 L1385.76 690.433 L1386.31 690.433 L1386.87 690.433 L1387.43 690.433 L1387.99 690.433 L1388.55 690.433 L1389.11 690.433 L1389.67 690.433 L1390.23 690.433 L1390.79 690.433 L1391.35 690.433 L1391.91 690.433 L1392.47 690.433 L1393.03 690.433 L1393.58 690.433 L1394.14 690.433 L1394.7 690.433 L1395.26 690.433 L1395.82 690.433 L1396.38 690.433 L1396.94 690.433 L1397.5 690.433 L1398.06 690.433 L1398.62 690.433 L1399.18 690.433 L1399.74 690.433 L1400.3 690.433 L1400.86 690.433 L1401.41 690.433 L1401.97 690.433 L1402.53 690.433 L1403.09 690.433 L1403.65 690.433 L1404.21 690.433 L1404.77 690.433 L1405.33 690.433 L1405.89 690.433 L1406.45 690.433 L1407.01 690.433 L1407.57 690.433 L1408.13 690.433 L1408.68 690.433 L1409.24 690.433 L1409.8 690.433 L1410.36 690.433 L1410.92 690.433 L1411.48 690.433 L1412.04 690.433 L1412.6 690.433 L1413.16 690.433 L1413.72 690.433 L1414.28 690.433 L1414.84 690.433 L1415.4 690.433 L1415.95 690.433 L1416.51 690.433 L1417.07 690.433 L1417.63 690.433 L1418.19 690.433 L1418.75 690.433 L1419.31 690.433 L1419.87 690.433 L1420.43 690.433 L1420.99 690.433 L1421.55 690.433 L1422.11 690.433 L1422.67 690.433 L1423.23 690.433 L1423.78 690.433 L1424.34 690.433 L1424.9 690.433 L1425.46 690.433 L1426.02 690.433 L1426.58 690.433 L1427.14 690.433 L1427.7 690.433 L1428.26 690.433 L1428.82 690.433 L1429.38 690.433 L1429.94 690.433 L1430.5 690.433 L1431.05 690.433 L1431.61 690.433 L1432.17 690.433 L1432.73 690.433 L1433.29 690.433 L1433.85 690.433 L1434.41 690.433 L1434.97 690.433 L1435.53 690.433 L1436.09 690.433 L1436.65 690.433 L1437.21 690.433 L1437.77 690.433 L1438.33 690.433 L1438.88 690.433 L1439.44 690.433 L1440 690.433 L1440.56 690.433 L1441.12 690.433 L1441.68 690.433 L1442.24 690.433 L1442.8 690.433 L1443.36 690.433 L1443.92 690.433 L1444.48 690.433 L1445.04 690.433 L1445.6 690.433 L1446.15 690.433 L1446.71 690.433 L1447.27 690.433 L1447.83 690.433 L1448.39 690.433 L1448.95 690.433 L1449.51 690.433 L1450.07 690.433 L1450.63 690.433 L1451.19 690.433 L1451.75 690.433 L1452.31 690.433 L1452.87 690.433 L1453.42 690.433 L1453.98 690.433 L1454.54 690.433 L1455.1 690.433 L1455.66 690.433 L1456.22 690.433 L1456.78 690.433 L1457.34 690.433 L1457.9 690.433 L1458.46 690.433 L1459.02 690.433 L1459.58 690.433 L1460.14 690.433 L1460.7 690.433 L1461.25 690.433 L1461.81 690.433 L1462.37 690.433 L1462.93 690.433 L1463.49 690.433 L1464.05 690.433 L1464.61 690.433 L1465.17 690.433 L1465.73 690.433 L1466.29 690.433 L1466.85 690.433 L1467.41 690.433 L1467.97 690.433 L1468.52 690.433 L1469.08 690.433 L1469.64 690.433 L1470.2 690.433 L1470.76 690.433 L1471.32 690.433 L1471.88 690.433 L1472.44 690.433 L1473 690.433 L1473.56 690.433 L1474.12 690.433 L1474.68 690.433 L1475.24 690.433 L1475.79 690.433 L1476.35 690.433 L1476.91 690.433 L1477.47 690.433 L1478.03 690.433 L1478.59 690.433 L1479.15 690.433 L1479.71 690.433 L1480.27 690.433 L1480.83 690.433 L1481.39 690.433 L1481.95 690.433 L1482.51 690.433 L1483.07 690.433 L1483.62 690.433 L1484.18 690.433 L1484.74 690.433 L1485.3 690.433 L1485.86 690.433 L1486.42 690.433 L1486.98 690.433 L1487.54 690.433 L1488.1 690.433 L1488.66 690.433 L1489.22 690.433 L1489.78 690.433 L1490.34 690.433 L1490.89 690.433 L1491.45 690.433 L1492.01 690.433 L1492.57 690.433 L1493.13 690.433 L1493.69 690.433 L1494.25 690.433 L1494.81 690.433 L1495.37 690.433 L1495.93 690.433 L1496.49 690.433 L1497.05 690.433 L1497.61 690.433 L1498.16 690.433 L1498.72 690.433 L1499.28 690.433 L1499.84 690.433 L1500.4 690.433 L1500.96 690.433 L1501.52 690.433 L1502.08 690.433 L1502.64 690.433 L1503.2 690.433 L1503.76 690.433 L1504.32 690.433 L1504.88 690.433 L1505.44 690.433 L1505.99 690.433 L1506.55 690.433 L1507.11 690.433 L1507.67 690.433 L1508.23 690.433 L1508.79 690.433 L1509.35 690.433 L1509.91 690.433 L1510.47 690.433 L1511.03 690.433 L1511.59 690.433 L1512.15 690.433 L1512.71 690.433 L1513.26 690.433 L1513.82 690.433 L1514.38 690.433 L1514.94 690.433 L1515.5 690.433 L1516.06 690.433 L1516.62 690.433 L1517.18 690.433 L1517.74 690.433 L1518.3 690.433 L1518.86 690.433 L1519.42 690.433 L1519.98 690.433 L1520.53 690.433 L1521.09 690.433 L1521.65 690.433 L1522.21 690.433 L1522.77 690.433 L1523.33 690.433 L1523.89 690.433 L1524.45 690.433 L1525.01 690.433 L1525.57 690.433 L1526.13 690.433 L1526.69 690.433 L1527.25 690.433 L1527.81 690.433 L1528.36 690.433 L1528.92 690.433 L1529.48 690.433 L1530.04 690.433 L1530.6 690.433 L1531.16 690.433 L1531.72 690.433 L1532.28 690.433 L1532.84 690.433 L1533.4 690.433 L1533.96 690.433 L1534.52 690.433 L1535.08 690.433 L1535.63 690.433 L1536.19 690.433 L1536.75 690.433 L1537.31 690.433 L1537.87 690.433 L1538.43 690.433 L1538.99 690.433 L1539.55 690.433 L1540.11 690.433 L1540.67 690.433 L1541.23 690.433 L1541.79 690.433 L1542.35 690.433 L1542.9 690.433 L1543.46 690.433 L1544.02 690.433 L1544.58 690.433 L1545.14 690.433 L1545.7 690.433 L1546.26 690.433 L1546.82 690.433 L1547.38 690.433 L1547.94 690.433 L1548.5 690.433 L1549.06 690.433 L1549.62 690.433 L1550.18 690.433 L1550.73 690.433 L1551.29 690.433 L1551.85 690.433 L1552.41 690.433 L1552.97 690.433 L1553.53 690.433 L1554.09 690.433 L1554.65 690.433 L1555.21 690.433 L1555.77 690.433 L1556.33 690.433 L1556.89 690.433 L1557.45 690.433 L1558 690.433 L1558.56 690.433 L1559.12 690.433 L1559.68 690.433 L1560.24 690.433 L1560.8 690.433 L1561.36 690.433 L1561.92 690.433 L1562.48 690.433 L1563.04 690.433 L1563.6 690.433 L1564.16 690.433 L1564.72 690.433 L1565.28 690.433 L1565.83 690.433 L1566.39 690.433 L1566.95 690.433 L1567.51 690.433 L1568.07 690.433 L1568.63 690.433 L1569.19 690.433 L1569.75 690.433 L1570.31 690.433 L1570.87 690.433 L1571.43 690.433 L1571.99 690.433 L1572.55 690.433 L1573.1 690.433 L1573.66 690.433 L1574.22 690.433 L1574.78 690.433 L1575.34 690.433 L1575.9 690.433 L1576.46 690.433 L1577.02 690.433 L1577.58 690.433 L1578.14 690.433 L1578.7 690.433 L1579.26 690.433 L1579.82 690.433 L1580.37 690.433 L1580.93 690.433 L1581.49 690.433 L1582.05 690.433 L1582.61 690.433 L1583.17 690.433 L1583.73 690.433 L1584.29 690.433 L1584.85 690.433 L1585.41 690.433 L1585.97 690.433 L1586.53 690.433 L1587.09 690.433 L1587.65 690.433 L1588.2 690.433 L1588.76 690.433 L1589.32 690.433 L1589.88 690.433 L1590.44 690.433 L1591 690.433 L1591.56 690.433 L1592.12 690.433 L1592.68 690.433 L1593.24 690.433 L1593.8 690.433 L1594.36 690.433 L1594.92 690.433 L1595.47 690.433 L1596.03 690.433 L1596.59 690.433 L1597.15 690.433 L1597.71 690.433 L1598.27 690.433 L1598.83 690.433 L1599.39 690.433 L1599.95 690.433 L1600.51 690.433 L1601.07 690.433 L1601.63 690.433 L1602.19 690.433 L1602.74 690.433 L1603.3 690.433 L1603.86 690.433 L1604.42 690.433 L1604.98 690.433 L1605.54 690.433 L1606.1 690.433 L1606.66 690.433 L1607.22 690.433 L1607.78 690.433 L1608.34 690.433 L1608.9 690.433 L1609.46 690.433 L1610.02 690.433 L1610.57 690.433 L1611.13 690.433 L1611.69 690.433 L1612.25 690.433 L1612.81 690.433 L1613.37 690.433 L1613.93 690.433 L1614.49 690.433 L1615.05 690.433 L1615.61 690.433 L1616.17 690.433 L1616.73 690.433 L1617.29 690.433 L1617.84 690.433 L1618.4 690.433 L1618.96 690.433 L1619.52 690.433 L1620.08 690.433 L1620.64 690.433 L1621.2 690.433 L1621.76 690.433 L1622.32 690.433 L1622.88 690.433 L1623.44 690.433 L1624 690.433 L1624.56 690.433 L1625.11 690.433 L1625.67 690.433 L1626.23 690.433 L1626.79 690.433 L1627.35 690.433 L1627.91 690.433 L1628.47 690.433 L1629.03 690.433 L1629.59 690.433 L1630.15 690.433 L1630.71 690.433 L1631.27 690.433 L1631.83 690.433 L1632.39 690.433 L1632.94 690.433 L1633.5 690.433 L1634.06 690.433 L1634.62 690.433 L1635.18 690.433 L1635.74 690.433 L1636.3 690.433 L1636.86 690.433 L1637.42 690.433 L1637.98 690.433 L1638.54 690.433 L1639.1 690.433 L1639.66 690.433 L1640.21 690.433 L1640.77 690.433 L1641.33 690.433 L1641.89 690.433 L1642.45 690.433 L1643.01 690.433 L1643.57 690.433 L1644.13 690.433 L1644.69 690.433 L1645.25 690.433 L1645.81 690.433 L1646.37 690.433 L1646.93 690.433 L1647.48 690.433 L1648.04 690.433 L1648.6 690.433 L1649.16 690.433 L1649.72 690.433 L1650.28 690.433 L1650.84 690.433 L1651.4 690.433 L1651.96 690.433 L1652.52 690.433 L1653.08 690.433 L1653.64 690.433 L1654.2 690.433 L1654.76 690.433 L1655.31 690.433 L1655.87 690.433 L1656.43 690.433 L1656.99 690.433 L1657.55 690.433 L1658.11 690.433 L1658.67 690.433 L1659.23 690.433 L1659.79 690.433 L1660.35 690.433 L1660.91 690.433 L1661.47 690.433 L1662.03 690.433 L1662.58 690.433 L1663.14 690.433 L1663.7 690.433 L1664.26 690.433 L1664.82 690.433 L1665.38 690.433 L1665.94 690.433 L1666.5 690.433 L1667.06 690.433 L1667.62 690.433 L1668.18 690.433 L1668.74 690.433 L1669.3 690.433 L1669.85 690.433 L1670.41 690.433 L1670.97 690.433 L1671.53 690.433 L1672.09 690.433 L1672.65 690.433 L1673.21 690.433 L1673.77 690.433 L1674.33 690.433 L1674.89 690.433 L1675.45 690.433 L1676.01 690.433 L1676.57 690.433 L1677.13 690.433 L1677.68 690.433 L1678.24 690.433 L1678.8 690.433 L1679.36 690.433 L1679.92 690.433 L1680.48 690.433 L1681.04 690.433 L1681.6 690.433 L1682.16 690.433 L1682.72 690.433 L1683.28 690.433 L1683.84 690.433 L1684.4 690.433 L1684.95 690.433 L1685.51 690.433 L1686.07 690.433 L1686.63 690.433 L1687.19 690.433 L1687.75 690.433 L1688.31 690.433 L1688.87 690.433 L1689.43 690.433 L1689.99 690.433 L1690.55 690.433 L1691.11 690.433 L1691.67 690.433 L1692.23 690.433 L1692.78 690.433 L1693.34 690.433 L1693.9 690.433 L1694.46 690.433 L1695.02 690.433 L1695.58 690.433 L1696.14 690.433 L1696.7 690.433 L1697.26 690.433 L1697.82 690.433 L1698.38 690.433 L1698.94 690.433 L1699.5 690.433 L1700.05 690.433 L1700.61 690.433 L1701.17 690.433 L1701.73 690.433 L1702.29 690.433 L1702.85 690.433 L1703.41 690.433 L1703.97 690.433 L1704.53 690.433 L1705.09 690.433 L1705.65 690.433 L1706.21 690.433 L1706.77 690.433 L1707.32 690.433 L1707.88 690.433 L1708.44 690.433 L1709 690.433 L1709.56 690.433 L1710.12 690.433 L1710.68 690.433 L1711.24 690.433 L1711.8 690.433 L1712.36 690.433 L1712.92 690.433 L1713.48 690.433 L1714.04 690.433 L1714.6 690.433 L1715.15 690.433 L1715.71 690.433 L1716.27 690.433 L1716.83 690.433 L1717.39 690.433 L1717.95 690.433 L1718.51 690.433 L1719.07 690.433 L1719.63 690.433 L1720.19 690.433 L1720.75 690.433 L1721.31 690.433 L1721.87 690.433 L1722.42 690.433 L1722.98 690.433 L1723.54 690.433 L1724.1 690.433 L1724.66 690.433 L1725.22 690.433 L1725.78 690.433 L1726.34 690.433 L1726.9 690.433 L1727.46 690.433 L1728.02 690.433 L1728.58 690.433 L1729.14 690.433 L1729.69 690.433 L1730.25 690.433 L1730.81 690.433 L1731.37 690.433 L1731.93 690.433 L1732.49 690.433 L1733.05 690.433 L1733.61 690.433 L1734.17 690.433 L1734.73 690.433 L1735.29 690.433 L1735.85 690.433 L1736.41 690.433 L1736.97 690.433 L1737.52 690.433 L1738.08 690.433 L1738.64 690.433 L1739.2 690.433 L1739.76 690.433 L1740.32 690.433 L1740.88 690.433 L1741.44 690.433 L1742 690.433 L1742.56 690.433 L1743.12 690.433 L1743.68 690.433 L1744.24 690.433 L1744.79 690.433 L1745.35 690.433 L1745.91 690.433 L1746.47 690.433 L1747.03 690.433 L1747.59 690.433 L1748.15 690.433 L1748.71 690.433 L1749.27 690.433 L1749.83 690.433 L1750.39 690.433 L1750.95 690.433 L1751.51 690.433 L1752.06 690.433 L1752.62 690.433 L1753.18 690.433 L1753.74 690.433 L1754.3 690.433 L1754.86 690.433 L1755.42 690.433 L1755.98 690.433 L1756.54 690.433 L1757.1 690.433 L1757.66 690.433 L1758.22 690.433 L1758.78 690.433 L1759.34 690.433 L1759.89 690.433 L1760.45 690.433 L1761.01 690.433 L1761.57 690.433 L1762.13 690.433 L1762.69 690.433 L1763.25 690.433 L1763.81 690.433 L1764.37 690.433 L1764.93 690.433 L1765.49 690.433 L1766.05 690.433 L1766.61 690.433 L1767.16 690.433 L1767.72 690.433 L1768.28 690.433 L1768.84 690.433 L1769.4 690.433 L1769.96 690.433 L1770.52 690.433 L1771.08 690.433 L1771.64 690.433 L1772.2 690.433 L1772.76 690.433 L1773.32 690.433 L1773.88 690.433 L1774.43 690.433 L1774.99 690.433 L1775.55 690.433 L1776.11 690.433 L1776.67 690.433 L1777.23 690.433 L1777.79 690.433 L1778.35 690.433 L1778.91 690.433 L1779.47 690.433 L1780.03 690.433 L1780.59 690.433 L1781.15 690.433 L1781.71 690.433 L1782.26 690.433 L1782.82 690.433 L1783.38 690.433 L1783.94 690.433 L1784.5 690.433 L1785.06 690.433 L1785.62 690.433 L1786.18 690.433 L1786.74 690.433 L1787.3 690.433 L1787.86 690.433 L1788.42 690.433 L1788.98 690.433 L1789.53 690.433 L1790.09 690.433 L1790.65 690.433 L1791.21 690.433 L1791.77 690.433 L1792.33 690.433 L1792.89 690.433 L1793.45 690.433 L1794.01 690.433 L1794.57 690.433 L1795.13 690.433 L1795.69 690.433 L1796.25 690.433 L1796.8 690.433 L1797.36 690.433 L1797.92 690.433 L1798.48 690.433 L1799.04 690.433 L1799.6 690.433 L1800.16 690.433 L1800.72 690.433 L1801.28 690.433 L1801.84 690.433 L1802.4 690.433 L1802.96 690.433 L1803.52 690.433 L1804.08 690.433 L1804.63 690.433 L1805.19 690.433 L1805.75 690.433 L1806.31 690.433 L1806.87 690.433 L1807.43 690.433 L1807.99 690.433 L1808.55 690.433 L1809.11 690.433 L1809.67 690.433 L1810.23 690.433 L1810.79 690.433 L1811.35 690.433 L1811.9 690.433 L1812.46 690.433 L1813.02 690.433 L1813.58 690.433 L1814.14 690.433 L1814.7 690.433 L1815.26 690.433 L1815.82 690.433 L1816.38 690.433 L1816.94 690.433 L1817.5 690.433 L1818.06 690.433 L1818.62 690.433 L1819.18 690.433 L1819.73 690.433 L1820.29 690.433 L1820.85 690.433 L1821.41 690.433 L1821.97 690.433 L1822.53 690.433 L1823.09 690.433 L1823.65 690.433 L1824.21 690.433 L1824.77 690.433 L1825.33 690.433 L1825.89 690.433 L1826.45 690.433 L1827 690.433 L1827.56 690.433 L1828.12 690.433 L1828.68 690.433 L1829.24 690.433 L1829.8 690.433 L1830.36 690.433 L1830.92 690.433 L1831.48 690.433 L1832.04 690.433 L1832.6 690.433 L1833.16 690.433 L1833.72 690.433 L1834.27 690.433 L1834.83 690.433 L1835.39 690.433 L1835.95 690.433 L1836.51 690.433 L1837.07 690.433 L1837.63 690.433 L1838.19 690.433 L1838.19 681.209 L1837.63 681.209 L1837.07 681.209 L1836.51 681.209 L1835.95 681.209 L1835.39 681.209 L1834.83 681.209 L1834.27 681.209 L1833.72 681.209 L1833.16 681.209 L1832.6 681.209 L1832.04 681.209 L1831.48 681.209 L1830.92 681.209 L1830.36 681.209 L1829.8 681.209 L1829.24 681.209 L1828.68 681.209 L1828.12 681.209 L1827.56 681.209 L1827 681.209 L1826.45 681.209 L1825.89 681.209 L1825.33 681.209 L1824.77 681.209 L1824.21 681.209 L1823.65 681.209 L1823.09 681.209 L1822.53 681.209 L1821.97 681.209 L1821.41 681.209 L1820.85 681.209 L1820.29 681.209 L1819.73 681.209 L1819.18 681.209 L1818.62 681.209 L1818.06 681.209 L1817.5 681.209 L1816.94 681.209 L1816.38 681.209 L1815.82 681.209 L1815.26 681.209 L1814.7 681.209 L1814.14 681.209 L1813.58 681.209 L1813.02 681.209 L1812.46 681.209 L1811.9 681.209 L1811.35 681.209 L1810.79 681.209 L1810.23 681.209 L1809.67 681.209 L1809.11 681.209 L1808.55 681.209 L1807.99 681.209 L1807.43 681.209 L1806.87 681.209 L1806.31 681.209 L1805.75 681.209 L1805.19 681.209 L1804.63 681.209 L1804.08 681.209 L1803.52 681.209 L1802.96 681.209 L1802.4 681.209 L1801.84 681.209 L1801.28 681.209 L1800.72 681.209 L1800.16 681.209 L1799.6 681.209 L1799.04 681.209 L1798.48 681.209 L1797.92 681.209 L1797.36 681.209 L1796.8 681.209 L1796.25 681.209 L1795.69 681.209 L1795.13 681.209 L1794.57 681.209 L1794.01 681.209 L1793.45 681.209 L1792.89 681.209 L1792.33 681.209 L1791.77 681.209 L1791.21 681.209 L1790.65 681.209 L1790.09 681.209 L1789.53 681.209 L1788.98 681.209 L1788.42 681.209 L1787.86 681.209 L1787.3 681.209 L1786.74 681.209 L1786.18 681.209 L1785.62 681.209 L1785.06 681.209 L1784.5 681.209 L1783.94 681.209 L1783.38 681.209 L1782.82 681.209 L1782.26 681.209 L1781.71 681.209 L1781.15 681.209 L1780.59 681.209 L1780.03 681.209 L1779.47 681.209 L1778.91 681.209 L1778.35 681.209 L1777.79 681.209 L1777.23 681.209 L1776.67 681.209 L1776.11 681.209 L1775.55 681.209 L1774.99 681.209 L1774.43 681.209 L1773.88 681.209 L1773.32 681.209 L1772.76 681.209 L1772.2 681.209 L1771.64 681.209 L1771.08 681.209 L1770.52 681.209 L1769.96 681.209 L1769.4 681.209 L1768.84 681.209 L1768.28 681.209 L1767.72 681.209 L1767.16 681.209 L1766.61 681.209 L1766.05 681.209 L1765.49 681.209 L1764.93 681.209 L1764.37 681.209 L1763.81 681.209 L1763.25 681.209 L1762.69 681.209 L1762.13 681.209 L1761.57 681.209 L1761.01 681.209 L1760.45 681.209 L1759.89 681.209 L1759.34 681.209 L1758.78 681.209 L1758.22 681.209 L1757.66 681.209 L1757.1 681.209 L1756.54 681.209 L1755.98 681.209 L1755.42 681.209 L1754.86 681.209 L1754.3 681.209 L1753.74 681.209 L1753.18 681.209 L1752.62 681.209 L1752.06 681.209 L1751.51 681.209 L1750.95 681.209 L1750.39 681.209 L1749.83 681.209 L1749.27 681.209 L1748.71 681.209 L1748.15 681.209 L1747.59 681.209 L1747.03 681.209 L1746.47 681.209 L1745.91 681.209 L1745.35 681.209 L1744.79 681.209 L1744.24 681.209 L1743.68 681.209 L1743.12 681.209 L1742.56 681.209 L1742 681.209 L1741.44 681.209 L1740.88 681.209 L1740.32 681.209 L1739.76 681.209 L1739.2 681.209 L1738.64 681.209 L1738.08 681.209 L1737.52 681.209 L1736.97 681.209 L1736.41 681.209 L1735.85 681.209 L1735.29 681.209 L1734.73 681.209 L1734.17 681.209 L1733.61 681.209 L1733.05 681.209 L1732.49 681.209 L1731.93 681.209 L1731.37 681.209 L1730.81 681.209 L1730.25 681.209 L1729.69 681.209 L1729.14 681.209 L1728.58 681.209 L1728.02 681.209 L1727.46 681.209 L1726.9 681.209 L1726.34 681.209 L1725.78 681.209 L1725.22 681.209 L1724.66 681.209 L1724.1 681.209 L1723.54 681.209 L1722.98 681.209 L1722.42 681.209 L1721.87 681.209 L1721.31 681.209 L1720.75 681.209 L1720.19 681.209 L1719.63 681.209 L1719.07 681.209 L1718.51 681.209 L1717.95 681.209 L1717.39 681.209 L1716.83 681.209 L1716.27 681.209 L1715.71 681.209 L1715.15 681.209 L1714.6 681.209 L1714.04 681.209 L1713.48 681.209 L1712.92 681.209 L1712.36 681.209 L1711.8 681.209 L1711.24 681.209 L1710.68 681.209 L1710.12 681.209 L1709.56 681.209 L1709 681.209 L1708.44 681.209 L1707.88 681.209 L1707.32 681.209 L1706.77 681.209 L1706.21 681.209 L1705.65 681.209 L1705.09 681.209 L1704.53 681.209 L1703.97 681.209 L1703.41 681.209 L1702.85 681.209 L1702.29 681.209 L1701.73 681.209 L1701.17 681.209 L1700.61 681.209 L1700.05 681.209 L1699.5 681.209 L1698.94 681.209 L1698.38 681.209 L1697.82 681.209 L1697.26 681.209 L1696.7 681.209 L1696.14 681.209 L1695.58 681.209 L1695.02 681.209 L1694.46 681.209 L1693.9 681.209 L1693.34 681.209 L1692.78 681.209 L1692.23 681.209 L1691.67 681.209 L1691.11 681.209 L1690.55 681.209 L1689.99 681.209 L1689.43 681.209 L1688.87 681.209 L1688.31 681.209 L1687.75 681.209 L1687.19 681.209 L1686.63 681.209 L1686.07 681.209 L1685.51 681.209 L1684.95 681.209 L1684.4 681.209 L1683.84 681.209 L1683.28 681.209 L1682.72 681.209 L1682.16 681.209 L1681.6 681.209 L1681.04 681.209 L1680.48 681.209 L1679.92 681.209 L1679.36 681.209 L1678.8 681.209 L1678.24 681.209 L1677.68 681.209 L1677.13 681.209 L1676.57 681.209 L1676.01 681.209 L1675.45 681.209 L1674.89 681.209 L1674.33 681.209 L1673.77 681.209 L1673.21 681.209 L1672.65 681.209 L1672.09 681.209 L1671.53 681.209 L1670.97 681.209 L1670.41 681.209 L1669.85 681.209 L1669.3 681.209 L1668.74 681.209 L1668.18 681.209 L1667.62 681.209 L1667.06 681.209 L1666.5 681.209 L1665.94 681.209 L1665.38 681.209 L1664.82 681.209 L1664.26 681.209 L1663.7 681.209 L1663.14 681.209 L1662.58 681.209 L1662.03 681.209 L1661.47 681.209 L1660.91 681.209 L1660.35 681.209 L1659.79 681.209 L1659.23 681.209 L1658.67 681.209 L1658.11 681.209 L1657.55 681.209 L1656.99 681.209 L1656.43 681.209 L1655.87 681.209 L1655.31 681.209 L1654.76 681.209 L1654.2 681.209 L1653.64 681.209 L1653.08 681.209 L1652.52 681.209 L1651.96 681.209 L1651.4 681.209 L1650.84 681.209 L1650.28 681.209 L1649.72 681.209 L1649.16 681.209 L1648.6 681.209 L1648.04 681.209 L1647.48 681.209 L1646.93 681.209 L1646.37 681.209 L1645.81 681.209 L1645.25 681.209 L1644.69 681.209 L1644.13 681.209 L1643.57 681.209 L1643.01 681.209 L1642.45 681.209 L1641.89 681.209 L1641.33 681.209 L1640.77 681.209 L1640.21 681.209 L1639.66 681.209 L1639.1 681.209 L1638.54 681.209 L1637.98 681.209 L1637.42 681.209 L1636.86 681.209 L1636.3 681.209 L1635.74 681.209 L1635.18 681.209 L1634.62 681.209 L1634.06 681.209 L1633.5 681.209 L1632.94 681.209 L1632.39 681.209 L1631.83 681.209 L1631.27 681.209 L1630.71 681.209 L1630.15 681.209 L1629.59 681.209 L1629.03 681.209 L1628.47 681.209 L1627.91 681.209 L1627.35 681.209 L1626.79 681.209 L1626.23 681.209 L1625.67 681.209 L1625.11 681.209 L1624.56 681.209 L1624 681.209 L1623.44 681.209 L1622.88 681.209 L1622.32 681.209 L1621.76 681.209 L1621.2 681.209 L1620.64 681.209 L1620.08 681.209 L1619.52 681.209 L1618.96 681.209 L1618.4 681.209 L1617.84 681.209 L1617.29 681.209 L1616.73 681.209 L1616.17 681.209 L1615.61 681.209 L1615.05 681.209 L1614.49 681.209 L1613.93 681.209 L1613.37 681.209 L1612.81 681.209 L1612.25 681.209 L1611.69 681.209 L1611.13 681.209 L1610.57 681.209 L1610.02 681.209 L1609.46 681.209 L1608.9 681.209 L1608.34 681.209 L1607.78 681.209 L1607.22 681.209 L1606.66 681.209 L1606.1 681.209 L1605.54 681.209 L1604.98 681.209 L1604.42 681.209 L1603.86 681.209 L1603.3 681.209 L1602.74 681.209 L1602.19 681.209 L1601.63 681.209 L1601.07 681.209 L1600.51 681.209 L1599.95 681.209 L1599.39 681.209 L1598.83 681.209 L1598.27 681.209 L1597.71 681.209 L1597.15 681.209 L1596.59 681.209 L1596.03 681.209 L1595.47 681.209 L1594.92 681.209 L1594.36 681.209 L1593.8 681.209 L1593.24 681.209 L1592.68 681.209 L1592.12 681.209 L1591.56 681.209 L1591 681.209 L1590.44 681.209 L1589.88 681.209 L1589.32 681.209 L1588.76 681.209 L1588.2 681.209 L1587.65 681.209 L1587.09 681.209 L1586.53 681.209 L1585.97 681.209 L1585.41 681.209 L1584.85 681.209 L1584.29 681.209 L1583.73 681.209 L1583.17 681.209 L1582.61 681.209 L1582.05 681.209 L1581.49 681.209 L1580.93 681.209 L1580.37 681.209 L1579.82 681.209 L1579.26 681.209 L1578.7 681.209 L1578.14 681.209 L1577.58 681.209 L1577.02 681.209 L1576.46 681.209 L1575.9 681.209 L1575.34 681.209 L1574.78 681.209 L1574.22 681.209 L1573.66 681.209 L1573.1 681.209 L1572.55 681.209 L1571.99 681.209 L1571.43 681.209 L1570.87 681.209 L1570.31 681.209 L1569.75 681.209 L1569.19 681.209 L1568.63 681.209 L1568.07 681.209 L1567.51 681.209 L1566.95 681.209 L1566.39 681.209 L1565.83 681.209 L1565.28 681.209 L1564.72 681.209 L1564.16 681.209 L1563.6 681.209 L1563.04 681.209 L1562.48 681.209 L1561.92 681.209 L1561.36 681.209 L1560.8 681.209 L1560.24 681.209 L1559.68 681.209 L1559.12 681.209 L1558.56 681.209 L1558 681.209 L1557.45 681.209 L1556.89 681.209 L1556.33 681.209 L1555.77 681.209 L1555.21 681.209 L1554.65 681.209 L1554.09 681.209 L1553.53 681.209 L1552.97 681.209 L1552.41 681.209 L1551.85 681.209 L1551.29 681.209 L1550.73 681.209 L1550.18 681.209 L1549.62 681.209 L1549.06 681.209 L1548.5 681.209 L1547.94 681.209 L1547.38 681.209 L1546.82 681.209 L1546.26 681.209 L1545.7 681.209 L1545.14 681.209 L1544.58 681.209 L1544.02 681.209 L1543.46 681.209 L1542.9 681.209 L1542.35 681.209 L1541.79 681.209 L1541.23 681.209 L1540.67 681.209 L1540.11 681.209 L1539.55 681.209 L1538.99 681.209 L1538.43 681.209 L1537.87 681.209 L1537.31 681.209 L1536.75 681.209 L1536.19 681.209 L1535.63 681.209 L1535.08 681.209 L1534.52 681.209 L1533.96 681.209 L1533.4 681.209 L1532.84 681.209 L1532.28 681.209 L1531.72 681.209 L1531.16 681.209 L1530.6 681.209 L1530.04 681.209 L1529.48 681.209 L1528.92 681.209 L1528.36 681.209 L1527.81 681.209 L1527.25 681.209 L1526.69 681.209 L1526.13 681.209 L1525.57 681.209 L1525.01 681.209 L1524.45 681.209 L1523.89 681.209 L1523.33 681.209 L1522.77 681.209 L1522.21 681.209 L1521.65 681.209 L1521.09 681.209 L1520.53 681.209 L1519.98 681.209 L1519.42 681.209 L1518.86 681.209 L1518.3 681.209 L1517.74 681.209 L1517.18 681.209 L1516.62 681.209 L1516.06 681.209 L1515.5 681.209 L1514.94 681.209 L1514.38 681.209 L1513.82 681.209 L1513.26 681.209 L1512.71 681.209 L1512.15 681.209 L1511.59 681.209 L1511.03 681.209 L1510.47 681.209 L1509.91 681.209 L1509.35 681.209 L1508.79 681.209 L1508.23 681.209 L1507.67 681.209 L1507.11 681.209 L1506.55 681.209 L1505.99 681.209 L1505.44 681.209 L1504.88 681.209 L1504.32 681.209 L1503.76 681.209 L1503.2 681.209 L1502.64 681.209 L1502.08 681.209 L1501.52 681.209 L1500.96 681.209 L1500.4 681.209 L1499.84 681.209 L1499.28 681.209 L1498.72 681.209 L1498.16 681.209 L1497.61 681.209 L1497.05 681.209 L1496.49 681.209 L1495.93 681.209 L1495.37 681.209 L1494.81 681.209 L1494.25 681.209 L1493.69 681.209 L1493.13 681.209 L1492.57 681.209 L1492.01 681.209 L1491.45 681.209 L1490.89 681.209 L1490.34 681.209 L1489.78 681.209 L1489.22 681.209 L1488.66 681.209 L1488.1 681.209 L1487.54 681.209 L1486.98 681.209 L1486.42 681.209 L1485.86 681.209 L1485.3 681.209 L1484.74 681.209 L1484.18 681.209 L1483.62 681.209 L1483.07 681.209 L1482.51 681.209 L1481.95 681.209 L1481.39 681.209 L1480.83 681.209 L1480.27 681.209 L1479.71 681.209 L1479.15 681.209 L1478.59 681.209 L1478.03 681.209 L1477.47 681.209 L1476.91 681.209 L1476.35 681.209 L1475.79 681.209 L1475.24 681.209 L1474.68 681.209 L1474.12 681.209 L1473.56 681.209 L1473 681.209 L1472.44 681.209 L1471.88 681.209 L1471.32 681.209 L1470.76 681.209 L1470.2 681.209 L1469.64 681.209 L1469.08 681.209 L1468.52 681.209 L1467.97 681.209 L1467.41 681.209 L1466.85 681.209 L1466.29 681.209 L1465.73 681.209 L1465.17 681.209 L1464.61 681.209 L1464.05 681.209 L1463.49 681.209 L1462.93 681.209 L1462.37 681.209 L1461.81 681.209 L1461.25 681.209 L1460.7 681.209 L1460.14 681.209 L1459.58 681.209 L1459.02 681.209 L1458.46 681.209 L1457.9 681.209 L1457.34 681.209 L1456.78 681.209 L1456.22 681.209 L1455.66 681.209 L1455.1 681.209 L1454.54 681.209 L1453.98 681.209 L1453.42 681.209 L1452.87 681.209 L1452.31 681.209 L1451.75 681.209 L1451.19 681.209 L1450.63 681.209 L1450.07 681.209 L1449.51 681.209 L1448.95 681.209 L1448.39 681.209 L1447.83 681.209 L1447.27 681.209 L1446.71 681.209 L1446.15 681.209 L1445.6 681.209 L1445.04 681.209 L1444.48 681.209 L1443.92 681.209 L1443.36 681.209 L1442.8 681.209 L1442.24 681.209 L1441.68 681.209 L1441.12 681.209 L1440.56 681.209 L1440 681.209 L1439.44 681.209 L1438.88 681.209 L1438.33 681.209 L1437.77 681.209 L1437.21 681.209 L1436.65 681.209 L1436.09 681.209 L1435.53 681.209 L1434.97 681.209 L1434.41 681.209 L1433.85 681.209 L1433.29 681.209 L1432.73 681.209 L1432.17 681.209 L1431.61 681.209 L1431.05 681.209 L1430.5 681.209 L1429.94 681.209 L1429.38 681.209 L1428.82 681.209 L1428.26 681.209 L1427.7 681.209 L1427.14 681.209 L1426.58 681.209 L1426.02 681.209 L1425.46 681.209 L1424.9 681.209 L1424.34 681.209 L1423.78 681.209 L1423.23 681.209 L1422.67 681.209 L1422.11 681.209 L1421.55 681.209 L1420.99 681.209 L1420.43 681.209 L1419.87 681.209 L1419.31 681.209 L1418.75 681.209 L1418.19 681.209 L1417.63 681.209 L1417.07 681.209 L1416.51 681.209 L1415.95 681.209 L1415.4 681.209 L1414.84 681.209 L1414.28 681.209 L1413.72 681.209 L1413.16 681.209 L1412.6 681.209 L1412.04 681.209 L1411.48 681.209 L1410.92 681.209 L1410.36 681.209 L1409.8 681.209 L1409.24 681.209 L1408.68 681.209 L1408.13 681.209 L1407.57 681.209 L1407.01 681.209 L1406.45 681.209 L1405.89 681.209 L1405.33 681.209 L1404.77 681.209 L1404.21 681.209 L1403.65 681.209 L1403.09 681.209 L1402.53 681.209 L1401.97 681.209 L1401.41 681.209 L1400.86 681.209 L1400.3 681.209 L1399.74 681.209 L1399.18 681.209 L1398.62 681.209 L1398.06 681.209 L1397.5 681.209 L1396.94 681.209 L1396.38 681.209 L1395.82 681.209 L1395.26 681.209 L1394.7 681.209 L1394.14 681.209 L1393.58 681.209 L1393.03 681.209 L1392.47 681.209 L1391.91 681.209 L1391.35 681.209 L1390.79 681.209 L1390.23 681.209 L1389.67 681.209 L1389.11 681.209 L1388.55 681.209 L1387.99 681.209 L1387.43 681.209 L1386.87 681.209 L1386.31 681.209 L1385.76 681.209 L1385.2 681.209 L1384.64 681.209 L1384.08 681.209 L1383.52 681.209 L1382.96 681.209 L1382.4 681.209 L1381.84 681.209 L1381.28 681.209 L1380.72 681.209 L1380.16 681.209 L1379.6 681.209 L1379.04 681.209 L1378.49 681.209 L1377.93 681.209 L1377.37 681.209 L1376.81 681.209 L1376.25 681.209 L1375.69 681.209 L1375.13 681.209 L1374.57 681.209 L1374.01 681.209 L1373.45 681.209 L1372.89 681.209 L1372.33 681.209 L1371.77 681.209 L1371.21 681.209 L1370.66 681.209 L1370.1 681.209 L1369.54 681.209 L1368.98 681.209 L1368.42 681.209 L1367.86 681.209 L1367.3 681.209 L1366.74 681.209 L1366.18 681.209 L1365.62 681.209 L1365.06 681.209 L1364.5 681.209 L1363.94 681.209 L1363.39 681.209 L1362.83 681.209 L1362.27 681.209 L1361.71 681.209 L1361.15 681.209 L1360.59 681.209 L1360.03 681.209 L1359.47 681.209 L1358.91 681.209 L1358.35 681.209 L1357.79 681.209 L1357.23 681.209 L1356.67 681.209 L1356.12 681.209 L1355.56 681.209 L1355 681.209 L1354.44 681.209 L1353.88 681.209 L1353.32 681.209 L1352.76 681.209 L1352.2 681.209 L1351.64 681.209 L1351.08 681.209 L1350.52 681.209 L1349.96 681.209 L1349.4 681.209 L1348.84 681.209 L1348.29 681.209 L1347.73 681.209 L1347.17 681.209 L1346.61 681.209 L1346.05 681.209 L1345.49 681.209 L1344.93 681.209 L1344.37 681.209 L1343.81 681.209 L1343.25 681.209 L1342.69 681.209 L1342.13 681.209 L1341.57 681.209 L1341.02 681.209 L1340.46 681.209 L1339.9 681.209 L1339.34 681.209 L1338.78 681.209 L1338.22 681.209 L1337.66 681.209 L1337.1 681.209 L1336.54 681.209 L1335.98 681.209 L1335.42 681.209 L1334.86 681.209 L1334.3 681.209 L1333.75 681.209 L1333.19 681.209 L1332.63 681.209 L1332.07 681.209 L1331.51 681.209 L1330.95 681.209 L1330.39 681.209 L1329.83 681.209 L1329.27 681.209 L1328.71 681.209 L1328.15 681.209 L1327.59 681.209 L1327.03 681.209 L1326.47 681.209 L1325.92 681.209 L1325.36 681.209 L1324.8 681.209 L1324.24 681.209 L1323.68 681.209 L1323.12 681.209 L1322.56 681.209 L1322 681.209 L1321.44 681.209 L1320.88 681.209 L1320.32 681.209 L1319.76 681.209 L1319.2 681.209 L1318.65 681.209 L1318.09 681.209 L1317.53 681.209 L1316.97 681.209 L1316.41 681.209 L1315.85 681.209 L1315.29 681.209 L1314.73 681.209 L1314.17 681.209 L1313.61 681.209 L1313.05 681.209 L1312.49 681.209 L1311.93 681.209 L1311.38 681.209 L1310.82 681.209 L1310.26 681.209 L1309.7 681.209 L1309.14 681.209 L1308.58 681.209 L1308.02 681.209 L1307.46 681.209 L1306.9 681.209 L1306.34 681.209 L1305.78 681.209 L1305.22 681.209 L1304.66 681.209 L1304.1 681.209 L1303.55 681.209 L1302.99 681.209 L1302.43 681.209 L1301.87 681.209 L1301.31 681.209 L1300.75 681.209 L1300.19 681.209 L1299.63 681.209 L1299.07 681.209 L1298.51 681.209 L1297.95 681.209 L1297.39 681.209 L1296.83 681.209 L1296.28 681.209 L1295.72 681.209 L1295.16 681.209 L1294.6 681.209 L1294.04 681.209 L1293.48 681.209 L1292.92 681.209 L1292.36 681.209 L1291.8 681.209 L1291.24 681.209 L1290.68 681.209 L1290.12 681.209 L1289.56 681.209 L1289 681.209 L1288.45 681.209 L1287.89 681.209 L1287.33 681.209 L1286.77 681.209 L1286.21 681.209 L1285.65 681.209 L1285.09 681.209 L1284.53 681.209 L1283.97 681.209 L1283.41 681.209 L1282.85 681.209 L1282.29 681.209 L1281.73 681.209 L1281.18 681.209 L1280.62 681.209 L1280.06 681.209 L1279.5 681.209 L1278.94 681.209 L1278.38 681.209 L1277.82 681.209 L1277.26 681.209 L1276.7 681.209 L1276.14 681.209 L1275.58 681.209 L1275.02 681.209 L1274.46 681.209 L1273.91 681.209 L1273.35 681.209 L1272.79 681.209 L1272.23 681.209 L1271.67 681.209 L1271.11 681.209 L1270.55 681.209 L1269.99 681.209 L1269.43 681.209 L1268.87 681.209 L1268.31 681.209 L1267.75 681.209 L1267.19 681.209 L1266.63 681.209 L1266.08 681.209 L1265.52 681.209 L1264.96 681.209 L1264.4 681.209 L1263.84 681.209 L1263.28 681.209 L1262.72 681.209 L1262.16 681.209 L1261.6 681.209 L1261.04 681.209 L1260.48 681.209 L1259.92 681.209 L1259.36 681.209 L1258.81 681.209 L1258.25 681.209 L1257.69 681.209 L1257.13 681.209 L1256.57 681.209 L1256.01 681.209 L1255.45 681.209 L1254.89 681.209 L1254.33 681.209 L1253.77 681.209 L1253.21 681.209 L1252.65 681.209 L1252.09 681.209 L1251.54 681.209 L1250.98 681.209 L1250.42 681.209 L1249.86 681.209 L1249.3 681.209 L1248.74 681.209 L1248.18 681.209 L1247.62 681.209 L1247.06 681.209 L1246.5 681.209 L1245.94 681.209 L1245.38 681.209 L1244.82 681.209 L1244.26 681.209 L1243.71 681.209 L1243.15 681.209 L1242.59 681.209 L1242.03 681.209 L1241.47 681.209 L1240.91 681.209 L1240.35 681.209 L1239.79 681.209 L1239.23 681.209 L1238.67 681.209 L1238.11 681.209 L1237.55 681.209 L1236.99 681.209 L1236.44 681.209 L1235.88 681.209 L1235.32 681.209 L1234.76 681.209 L1234.2 681.209 L1233.64 681.209 L1233.08 681.209 L1232.52 681.209 L1231.96 681.209 L1231.4 681.209 L1230.84 681.209 L1230.28 681.209 L1229.72 681.209 L1229.17 681.209 L1228.61 681.209 L1228.05 681.209 L1227.49 681.209 L1226.93 681.209 L1226.37 681.209 L1225.81 681.209 L1225.25 681.209 L1224.69 681.209 L1224.13 681.209 L1223.57 681.209 L1223.01 681.209 L1222.45 681.209 L1221.89 681.209 L1221.34 681.209 L1220.78 681.209 L1220.22 681.209 L1219.66 681.209 L1219.1 681.209 L1218.54 681.209 L1217.98 681.209 L1217.42 681.209 L1216.86 681.209 L1216.3 681.209 L1215.74 681.209 L1215.18 681.209 L1214.62 681.209 L1214.07 681.209 L1213.51 681.209 L1212.95 681.209 L1212.39 681.209 L1211.83 681.209 L1211.27 681.209 L1210.71 681.209 L1210.15 681.209 L1209.59 681.209 L1209.03 681.209 L1208.47 681.209 L1207.91 681.209 L1207.35 681.209 L1206.8 681.209 L1206.24 681.209 L1205.68 681.209 L1205.12 681.209 L1204.56 681.209 L1204 681.209 L1203.44 681.209 L1202.88 681.209 L1202.32 681.209 L1201.76 681.209 L1201.2 681.209 L1200.64 681.209 L1200.08 681.209 L1199.52 681.209 L1198.97 681.209 L1198.41 681.209 L1197.85 681.209 L1197.29 681.209 L1196.73 681.209 L1196.17 681.209 L1195.61 681.209 L1195.05 681.209 L1194.49 681.209 L1193.93 681.209 L1193.37 681.209 L1192.81 681.209 L1192.25 681.209 L1191.7 681.209 L1191.14 681.209 L1190.58 681.209 L1190.02 681.209 L1189.46 681.209 L1188.9 681.209 L1188.34 681.209 L1187.78 681.209 L1187.22 681.209 L1186.66 681.209 L1186.1 681.209 L1185.54 681.209 L1184.98 681.209 L1184.43 681.209 L1183.87 681.209 L1183.31 681.209 L1182.75 681.209 L1182.19 681.209 L1181.63 681.209 L1181.07 681.209 L1180.51 681.209 L1179.95 681.209 L1179.39 681.209 L1178.83 681.209 L1178.27 681.209 L1177.71 681.209 L1177.15 681.209 L1176.6 681.209 L1176.04 681.209 L1175.48 681.209 L1174.92 681.209 L1174.36 681.209 L1173.8 681.209 L1173.24 681.209 L1172.68 681.209 L1172.12 681.209 L1171.56 681.209 L1171 681.209 L1170.44 681.209 L1169.88 681.209 L1169.33 681.209 L1168.77 681.209 L1168.21 681.209 L1167.65 681.209 L1167.09 681.209 L1166.53 681.209 L1165.97 681.209 L1165.41 681.209 L1164.85 681.209 L1164.29 681.209 L1163.73 681.209 L1163.17 681.209 L1162.61 681.209 L1162.05 681.209 L1161.5 681.209 L1160.94 681.209 L1160.38 681.209 L1159.82 681.209 L1159.26 681.209 L1158.7 681.209 L1158.14 681.209 L1157.58 681.209 L1157.02 681.209 L1156.46 681.209 L1155.9 681.209 L1155.34 681.209 L1154.78 681.209 L1154.23 681.209 L1153.67 681.209 L1153.11 681.209 L1152.55 681.209 L1151.99 681.209 L1151.43 681.209 L1150.87 681.209 L1150.31 681.209 L1149.75 681.209 L1149.19 681.209 L1148.63 681.209 L1148.07 681.209 L1147.51 681.209 L1146.96 681.209 L1146.4 681.209 L1145.84 681.209 L1145.28 681.209 L1144.72 681.209 L1144.16 681.209 L1143.6 681.209 L1143.04 681.209 L1142.48 681.209 L1141.92 681.209 L1141.36 681.209 L1140.8 681.209 L1140.24 681.209 L1139.68 681.209 L1139.13 681.209 L1138.57 681.209 L1138.01 681.209 L1137.45 681.209 L1136.89 681.209 L1136.33 681.209 L1135.77 681.209 L1135.21 681.209 L1134.65 681.209 L1134.09 681.209 L1133.53 681.209 L1132.97 681.209 L1132.41 681.209 L1131.86 681.209 L1131.3 681.209 L1130.74 681.209 L1130.18 681.209 L1129.62 681.209 L1129.06 681.209 L1128.5 681.209 L1127.94 681.209 L1127.38 681.209 L1126.82 681.209 L1126.26 681.209 L1125.7 681.209 L1125.14 681.209 L1124.59 681.209 L1124.03 681.209 L1123.47 681.209 L1122.91 681.209 L1122.35 681.209 L1121.79 681.209 L1121.23 681.209 L1120.67 681.209 L1120.11 681.209 L1119.55 681.209 L1118.99 681.209 L1118.43 681.209 L1117.87 681.209 L1117.31 681.209 L1116.76 681.209 L1116.2 681.209 L1115.64 681.209 L1115.08 681.209 L1114.52 681.209 L1113.96 681.209 L1113.4 681.209 L1112.84 681.209 L1112.28 681.209 L1111.72 681.209 L1111.16 681.209 L1110.6 681.209 L1110.04 681.209 L1109.49 681.209 L1108.93 681.209 L1108.37 681.209 L1107.81 681.209 L1107.25 681.209 L1106.69 681.209 L1106.13 681.209 L1105.57 681.209 L1105.01 681.209 L1104.45 681.209 L1103.89 681.209 L1103.33 681.209 L1102.77 681.209 L1102.22 681.209 L1101.66 681.209 L1101.1 681.209 L1100.54 681.209 L1099.98 681.209 L1099.42 681.209 L1098.86 681.209 L1098.3 681.209 L1097.74 681.209 L1097.18 681.209 L1096.62 681.209 L1096.06 681.209 L1095.5 681.209 L1094.94 681.209 L1094.39 681.209 L1093.83 681.209 L1093.27 681.209 L1092.71 681.209 L1092.15 681.209 L1091.59 681.209 L1091.03 681.209 L1090.47 681.209 L1089.91 681.209 L1089.35 681.209 L1088.79 681.209 L1088.23 681.209 L1087.67 681.209 L1087.12 681.209 L1086.56 681.209 L1086 681.209 L1085.44 681.209 L1084.88 681.209 L1084.32 681.209 L1083.76 681.209 L1083.2 681.209 L1082.64 681.209 L1082.08 681.209 L1081.52 681.209 L1080.96 681.209 L1080.4 681.209 L1079.85 681.209 L1079.29 681.209 L1078.73 681.209 L1078.17 681.209 L1077.61 681.209 L1077.05 681.209 L1076.49 681.209 L1075.93 681.209 L1075.37 681.209 L1074.81 681.209 L1074.25 681.209 L1073.69 681.209 L1073.13 681.209 L1072.57 681.209 L1072.02 681.209 L1071.46 681.209 L1070.9 681.209 L1070.34 681.209 L1069.78 681.209 L1069.22 681.209 L1068.66 681.209 L1068.1 681.209 L1067.54 681.209 L1066.98 681.209 L1066.42 681.209 L1065.86 681.209 L1065.3 681.209 L1064.75 681.209 L1064.19 681.209 L1063.63 681.209 L1063.07 681.209 L1062.51 681.209 L1061.95 681.209 L1061.39 681.209 L1060.83 681.209 L1060.27 681.209 L1059.71 681.209 L1059.15 681.209 L1058.59 681.209 L1058.03 681.209 L1057.48 681.209 L1056.92 681.209 L1056.36 681.209 L1055.8 681.209 L1055.24 681.209 L1054.68 681.209 L1054.12 681.209 L1053.56 681.209 L1053 681.209 L1052.44 681.209 L1051.88 681.209 L1051.32 681.209 L1050.76 681.209 L1050.2 681.209 L1049.65 681.209 L1049.09 681.209 L1048.53 681.209 L1047.97 681.209 L1047.41 681.209 L1046.85 681.209 L1046.29 681.209 L1045.73 681.209 L1045.17 681.209 L1044.61 681.209 L1044.05 681.209 L1043.49 681.209 L1042.93 681.209 L1042.38 681.209 L1041.82 681.209 L1041.26 681.209 L1040.7 681.209 L1040.14 681.209 L1039.58 681.209 L1039.02 681.209 L1038.46 681.209 L1037.9 681.209 L1037.34 681.209 L1036.78 681.209 L1036.22 681.209 L1035.66 681.209 L1035.1 681.209 L1034.55 681.209 L1033.99 681.209 L1033.43 681.209 L1032.87 681.209 L1032.31 681.209 L1031.75 681.209 L1031.19 681.209 L1030.63 681.209 L1030.07 681.209 L1029.51 681.209 L1028.95 681.209 L1028.39 681.209 L1027.83 681.209 L1027.28 681.209 L1026.72 681.209 L1026.16 681.209 L1025.6 681.209 L1025.04 681.209 L1024.48 681.209 L1023.92 681.209 L1023.36 681.209 L1022.8 681.209 L1022.24 681.209 L1021.68 681.209 L1021.12 681.209 L1020.56 681.209 L1020.01 681.209 L1019.45 681.209 L1018.89 681.209 L1018.33 681.209 L1017.77 681.209 L1017.21 681.209 L1016.65 681.209 L1016.09 681.209 L1015.53 681.209 L1014.97 681.209 L1014.41 681.209 L1013.85 681.209 L1013.29 681.209 L1012.73 681.209 L1012.18 681.209 L1011.62 681.209 L1011.06 681.209 L1010.5 681.209 L1009.94 681.209 L1009.38 681.209 L1008.82 681.209 L1008.26 681.209 L1007.7 681.209 L1007.14 681.209 L1006.58 681.209 L1006.02 681.209 L1005.46 681.209 L1004.91 681.209 L1004.35 681.209 L1003.79 681.209 L1003.23 681.209 L1002.67 681.209 L1002.11 681.209 L1001.55 681.209 L1000.99 681.209 L1000.43 681.209 L999.872 681.209 L999.313 681.209 L998.754 681.209 L998.194 681.209 L997.635 681.209 L997.076 681.209 L996.517 681.209 L995.957 681.209 L995.398 681.209 L994.839 681.209 L994.28 681.209 L993.72 681.209 L993.161 681.209 L992.602 681.209 L992.043 681.209 L991.483 681.209 L990.924 681.209 L990.365 681.209 L989.806 681.209 L989.246 681.209 L988.687 681.209 L988.128 681.209 L987.569 681.209 L987.009 681.209 L986.45 681.209 L985.891 681.209 L985.332 681.209 L984.772 681.209 L984.213 681.209 L983.654 681.209 L983.095 681.209 L982.535 681.209 L981.976 681.209 L981.417 681.209 L980.858 681.209 L980.298 681.209 L979.739 681.209 L979.18 681.209 L978.621 681.209 L978.061 681.209 L977.502 681.209 L976.943 681.209 L976.384 681.209 L975.824 681.209 L975.265 681.209 L974.706 681.209 L974.147 681.209 L973.587 681.209 L973.028 681.209 L972.469 681.209 L971.91 681.209 L971.35 681.209 L970.791 681.209 L970.232 681.209 L969.673 681.209 L969.113 681.209 L968.554 681.209 L967.995 681.209 L967.436 681.209 L966.876 681.209 L966.317 681.209 L965.758 681.209 L965.199 681.209 L964.639 681.209 L964.08 681.209 L963.521 681.209 L962.962 681.209 L962.402 681.209 L961.843 681.209 L961.284 681.209 L960.725 681.209 L960.165 681.209 L959.606 681.209 L959.047 681.209 L958.488 681.209 L957.928 681.209 L957.369 681.209 L956.81 681.209 L956.251 681.209 L955.691 681.209 L955.132 681.209 L954.573 681.209 L954.014 681.209 L953.454 681.209 L952.895 681.209 L952.336 681.209 L951.777 681.209 L951.217 681.209 L950.658 681.209 L950.099 681.209 L949.54 681.209 L948.98 681.209 L948.421 681.209 L947.862 681.209 L947.303 681.209 L946.743 681.209 L946.184 681.209 L945.625 681.209 L945.066 681.209 L944.506 681.209 L943.947 681.209 L943.388 681.209 L942.829 681.209 L942.269 681.209 L941.71 681.209 L941.151 681.209 L940.592 681.209 L940.032 681.209 L939.473 681.209 L938.914 681.209 L938.355 681.209 L937.795 681.209 L937.236 681.209 L936.677 681.209 L936.118 681.209 L935.558 681.209 L934.999 681.209 L934.44 681.209 L933.881 681.209 L933.321 681.209 L932.762 681.209 L932.203 681.209 L931.644 681.209 L931.084 681.209 L930.525 681.209 L929.966 681.209 L929.406 681.209 L928.847 681.209 L928.288 681.209 L927.729 681.209 L927.169 681.209 L926.61 681.209 L926.051 681.209 L925.492 681.209 L924.932 681.209 L924.373 681.209 L923.814 681.209 L923.255 681.209 L922.695 681.209 L922.136 681.209 L921.577 681.209 L921.018 681.209 L920.458 681.209 L919.899 681.209 L919.34 681.209 L918.781 681.209 L918.221 681.209 L917.662 681.209 L917.103 681.209 L916.544 681.209 L915.984 681.209 L915.425 681.209 L914.866 681.209 L914.307 681.209 L913.747 681.209 L913.188 681.209 L912.629 681.209 L912.07 681.209 L911.51 681.209 L910.951 681.209 L910.392 681.209 L909.833 681.209 L909.273 681.209 L908.714 681.209 L908.155 681.209 L907.596 681.209 L907.036 681.209 L906.477 681.209 L905.918 681.209 L905.359 681.209 L904.799 681.209 L904.24 681.209 L903.681 681.209 L903.122 681.209 L902.562 681.209 L902.003 681.209 L901.444 681.209 L900.885 681.209 L900.325 681.209 L899.766 681.209 L899.207 681.209 L898.648 681.209 L898.088 681.209 L897.529 681.209 L896.97 681.209 L896.411 681.209 L895.851 681.209 L895.292 681.209 L894.733 681.209 L894.174 681.209 L893.614 681.209 L893.055 681.209 L892.496 681.209 L891.937 681.209 L891.377 681.209 L890.818 681.209 L890.259 681.209 L889.7 681.209 L889.14 681.209 L888.581 681.209 L888.022 681.209 L887.463 681.209 L886.903 681.209 L886.344 681.209 L885.785 681.209 L885.226 681.209 L884.666 681.209 L884.107 681.209 L883.548 681.209 L882.989 681.209 L882.429 681.209 L881.87 681.209 L881.311 681.209 L880.752 681.209 L880.192 681.209 L879.633 681.209 L879.074 681.209 L878.515 681.209 L877.955 681.209 L877.396 681.209 L876.837 681.209 L876.278 681.209 L875.718 681.209 L875.159 681.209 L874.6 681.209 L874.041 681.209 L873.481 681.209 L872.922 681.209 L872.363 681.209 L871.804 681.209 L871.244 681.209 L870.685 681.209 L870.126 681.209 L869.567 681.209 L869.007 681.209 L868.448 681.209 L867.889 681.209 L867.33 681.209 L866.77 681.209 L866.211 681.209 L865.652 681.209 L865.093 681.209 L864.533 681.209 L863.974 681.209 L863.415 681.209 L862.856 681.209 L862.296 681.209 L861.737 681.209 L861.178 681.209 L860.619 681.209 L860.059 681.209 L859.5 681.209 L858.941 681.209 L858.382 681.209 L857.822 681.209 L857.263 681.209 L856.704 681.209 L856.145 681.209 L855.585 681.209 L855.026 681.209 L854.467 681.209 L853.908 681.209 L853.348 681.209 L852.789 681.209 L852.23 681.209 L851.671 681.209 L851.111 681.209 L850.552 681.209 L849.993 681.209 L849.434 681.209 L848.874 681.209 L848.315 681.209 L847.756 681.209 L847.197 681.209 L846.637 681.209 L846.078 681.209 L845.519 681.209 L844.96 681.209 L844.4 681.209 L843.841 681.209 L843.282 681.209 L842.723 681.209 L842.163 681.209 L841.604 681.209 L841.045 681.209 L840.486 681.209 L839.926 681.209 L839.367 681.209 L838.808 681.209 L838.249 681.209 L837.689 681.209 L837.13 681.209 L836.571 681.209 L836.012 681.209 L835.452 681.209 L834.893 681.209 L834.334 681.209 L833.775 681.209 L833.215 681.209 L832.656 681.209 L832.097 681.209 L831.538 681.209 L830.978 681.209 L830.419 681.209 L829.86 681.209 L829.301 681.209 L828.741 681.209 L828.182 681.209 L827.623 681.209 L827.064 681.209 L826.504 681.209 L825.945 681.209 L825.386 681.209 L824.827 681.209 L824.267 681.209 L823.708 681.209 L823.149 681.209 L822.59 681.209 L822.03 681.209 L821.471 681.209 L820.912 681.209 L820.353 681.209 L819.793 681.209 L819.234 681.209 L818.675 681.209 L818.116 681.209 L817.556 681.209 L816.997 681.209 L816.438 681.209 L815.879 681.209 L815.319 681.209 L814.76 681.209 L814.201 681.209 L813.642 681.209 L813.082 681.209 L812.523 681.209 L811.964 681.209 L811.405 681.209 L810.845 681.209 L810.286 681.209 L809.727 681.209 L809.168 681.209 L808.608 681.209 L808.049 681.209 L807.49 681.209 L806.931 681.209 L806.371 681.209 L805.812 681.209 L805.253 681.209 L804.693 681.209 L804.134 681.209 L803.575 681.209 L803.016 681.209 L802.456 681.209 L801.897 681.209 L801.338 681.209 L800.779 681.209 L800.219 681.209 L799.66 681.209 L799.101 681.209 L798.542 681.209 L797.982 681.209 L797.423 681.209 L796.864 681.209 L796.305 681.209 L795.745 681.209 L795.186 681.209 L794.627 681.209 L794.068 681.209 L793.508 681.209 L792.949 681.209 L792.39 681.209 L791.831 681.209 L791.271 681.209 L790.712 681.209 L790.153 681.209 L789.594 681.209 L789.034 681.209 L788.475 681.209 L787.916 681.209 L787.357 681.209 L786.797 681.209 L786.238 681.209 L785.679 681.209 L785.12 681.209 L784.56 681.209 L784.001 681.209 L783.442 681.209 L782.883 681.209 L782.323 681.209 L781.764 681.209 L781.205 681.209 L780.646 681.209 L780.086 681.209 L779.527 681.209 L778.968 681.209 L778.409 681.209 L777.849 681.209 L777.29 681.209 L776.731 681.209 L776.172 681.209 L775.612 681.209 L775.053 681.209 L774.494 681.209 L773.935 681.209 L773.375 681.209 L772.816 681.209 L772.257 681.209 L771.698 681.209 L771.138 681.209 L770.579 681.209 L770.02 681.209 L769.461 681.209 L768.901 681.209 L768.342 681.209 L767.783 681.209 L767.224 681.209 L766.664 681.209 L766.105 681.209 L765.546 681.209 L764.987 681.209 L764.427 681.209 L763.868 681.209 L763.309 681.209 L762.75 681.209 L762.19 681.209 L761.631 681.209 L761.072 681.209 L760.513 681.209 L759.953 681.209 L759.394 681.209 L758.835 681.209 L758.276 681.209 L757.716 681.209 L757.157 681.209 L756.598 681.209 L756.039 681.209 L755.479 681.209 L754.92 681.209 L754.361 681.209 L753.802 681.209 L753.242 681.209 L752.683 681.209 L752.124 681.209 L751.565 681.209 L751.005 681.209 L750.446 681.209 L749.887 681.209 L749.328 681.209 L748.768 681.209 L748.209 681.209 L747.65 681.209 L747.091 681.209 L746.531 681.209 L745.972 681.209 L745.413 681.209 L744.854 681.209 L744.294 681.209 L743.735 681.209 L743.176 681.209 L742.617 681.209 L742.057 681.209 L741.498 681.209 L740.939 681.209 L740.38 681.209 L739.82 681.209 L739.261 681.209 L738.702 681.209 L738.143 681.209 L737.583 681.209 L737.024 681.209 L736.465 681.209 L735.906 681.209 L735.346 681.209 L734.787 681.209 L734.228 681.209 L733.669 681.209 L733.109 681.209 L732.55 681.209 L731.991 681.209 L731.432 681.209 L730.872 681.209 L730.313 681.209 L729.754 681.209 L729.195 681.209 L728.635 681.209 L728.076 681.209 L727.517 681.209 L726.958 681.209 L726.398 681.209 L725.839 681.209 L725.28 681.209 L724.721 681.209 L724.161 681.209 L723.602 681.209 L723.043 681.209 L722.484 681.209 L721.924 681.209 L721.365 681.209 L720.806 681.209 L720.247 681.209  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.821 720.806,685.821 721.365,685.821 721.924,685.821 722.484,685.821 723.043,685.821 723.602,685.821 724.161,685.821 724.721,685.821 725.28,685.821 725.839,685.821 726.398,685.821 726.958,685.821 727.517,685.821 728.076,685.821 728.635,685.821 729.195,685.821 729.754,685.821 730.313,685.821 730.872,685.821 731.432,685.821 731.991,685.821 732.55,685.821 733.109,685.821 733.669,685.821 734.228,685.821 734.787,685.821 735.346,685.821 735.906,685.821 736.465,685.821 737.024,685.821 737.583,685.821 738.143,685.821 738.702,685.821 739.261,685.821 739.82,685.821 740.38,685.821 740.939,685.821 741.498,685.821 742.057,685.821 742.617,685.821 743.176,685.821 743.735,685.821 744.294,685.821 744.854,685.821 745.413,685.821 745.972,685.821 746.531,685.821 747.091,685.821 747.65,685.821 748.209,685.821 748.768,685.821 749.328,685.821 749.887,685.821 750.446,685.821 751.005,685.821 751.565,685.821 752.124,685.821 752.683,685.821 753.242,685.821 753.802,685.821 754.361,685.821 754.92,685.821 755.479,685.821 756.039,685.821 756.598,685.821 757.157,685.821 757.716,685.821 758.276,685.821 758.835,685.821 759.394,685.821 759.953,685.821 760.513,685.821 761.072,685.821 761.631,685.821 762.19,685.821 762.75,685.821 763.309,685.821 763.868,685.821 764.427,685.821 764.987,685.821 765.546,685.821 766.105,685.821 766.664,685.821 767.224,685.821 767.783,685.821 768.342,685.821 768.901,685.821 769.461,685.821 770.02,685.821 770.579,685.821 771.138,685.821 771.698,685.821 772.257,685.821 772.816,685.821 773.375,685.821 773.935,685.821 774.494,685.821 775.053,685.821 775.612,685.821 776.172,685.821 776.731,685.821 777.29,685.821 777.849,685.821 778.409,685.821 778.968,685.821 779.527,685.821 780.086,685.821 780.646,685.821 781.205,685.821 781.764,685.821 782.323,685.821 782.883,685.821 783.442,685.821 784.001,685.821 784.56,685.821 785.12,685.821 785.679,685.821 786.238,685.821 786.797,685.821 787.357,685.821 787.916,685.821 788.475,685.821 789.034,685.821 789.594,685.821 790.153,685.821 790.712,685.821 791.271,685.821 791.831,685.821 792.39,685.821 792.949,685.821 793.508,685.821 794.068,685.821 794.627,685.821 795.186,685.821 795.745,685.821 796.305,685.821 796.864,685.821 797.423,685.821 797.982,685.821 798.542,685.821 799.101,685.821 799.66,685.821 800.219,685.821 800.779,685.821 801.338,685.821 801.897,685.821 802.456,685.821 803.016,685.821 803.575,685.821 804.134,685.821 804.693,685.821 805.253,685.821 805.812,685.821 806.371,685.821 806.931,685.821 807.49,685.821 808.049,685.821 808.608,685.821 809.168,685.821 809.727,685.821 810.286,685.821 810.845,685.821 811.405,685.821 811.964,685.821 812.523,685.821 813.082,685.821 813.642,685.821 814.201,685.821 814.76,685.821 815.319,685.821 815.879,685.821 816.438,685.821 816.997,685.821 817.556,685.821 818.116,685.821 818.675,685.821 819.234,685.821 819.793,685.821 820.353,685.821 820.912,685.821 821.471,685.821 822.03,685.821 822.59,685.821 823.149,685.821 823.708,685.821 824.267,685.821 824.827,685.821 825.386,685.821 825.945,685.821 826.504,685.821 827.064,685.821 827.623,685.821 828.182,685.821 828.741,685.821 829.301,685.821 829.86,685.821 830.419,685.821 830.978,685.821 831.538,685.821 832.097,685.821 832.656,685.821 833.215,685.821 833.775,685.821 834.334,685.821 834.893,685.821 835.452,685.821 836.012,685.821 836.571,685.821 837.13,685.821 837.689,685.821 838.249,685.821 838.808,685.821 839.367,685.821 839.926,685.821 840.486,685.821 841.045,685.821 841.604,685.821 842.163,685.821 842.723,685.821 843.282,685.821 843.841,685.821 844.4,685.821 844.96,685.821 845.519,685.821 846.078,685.821 846.637,685.821 847.197,685.821 847.756,685.821 848.315,685.821 848.874,685.821 849.434,685.821 849.993,685.821 850.552,685.821 851.111,685.821 851.671,685.821 852.23,685.821 852.789,685.821 853.348,685.821 853.908,685.821 854.467,685.821 855.026,685.821 855.585,685.821 856.145,685.821 856.704,685.821 857.263,685.821 857.822,685.821 858.382,685.821 858.941,685.821 859.5,685.821 860.059,685.821 860.619,685.821 861.178,685.821 861.737,685.821 862.296,685.821 862.856,685.821 863.415,685.821 863.974,685.821 864.533,685.821 865.093,685.821 865.652,685.821 866.211,685.821 866.77,685.821 867.33,685.821 867.889,685.821 868.448,685.821 869.007,685.821 869.567,685.821 870.126,685.821 870.685,685.821 871.244,685.821 871.804,685.821 872.363,685.821 872.922,685.821 873.481,685.821 874.041,685.821 874.6,685.821 875.159,685.821 875.718,685.821 876.278,685.821 876.837,685.821 877.396,685.821 877.955,685.821 878.515,685.821 879.074,685.821 879.633,685.821 880.192,685.821 880.752,685.821 881.311,685.821 881.87,685.821 882.429,685.821 882.989,685.821 883.548,685.821 884.107,685.821 884.666,685.821 885.226,685.821 885.785,685.821 886.344,685.821 886.903,685.821 887.463,685.821 888.022,685.821 888.581,685.821 889.14,685.821 889.7,685.821 890.259,685.821 890.818,685.821 891.377,685.821 891.937,685.821 892.496,685.821 893.055,685.821 893.614,685.821 894.174,685.821 894.733,685.821 895.292,685.821 895.851,685.821 896.411,685.821 896.97,685.821 897.529,685.821 898.088,685.821 898.648,685.821 899.207,685.821 899.766,685.821 900.325,685.821 900.885,685.821 901.444,685.821 902.003,685.821 902.562,685.821 903.122,685.821 903.681,685.821 904.24,685.821 904.799,685.821 905.359,685.821 905.918,685.821 906.477,685.821 907.036,685.821 907.596,685.821 908.155,685.821 908.714,685.821 909.273,685.821 909.833,685.821 910.392,685.821 910.951,685.821 911.51,685.821 912.07,685.821 912.629,685.821 913.188,685.821 913.747,685.821 914.307,685.821 914.866,685.821 915.425,685.821 915.984,685.821 916.544,685.821 917.103,685.821 917.662,685.821 918.221,685.821 918.781,685.821 919.34,685.821 919.899,685.821 920.458,685.821 921.018,685.821 921.577,685.821 922.136,685.821 922.695,685.821 923.255,685.821 923.814,685.821 924.373,685.821 924.932,685.821 925.492,685.821 926.051,685.821 926.61,685.821 927.169,685.821 927.729,685.821 928.288,685.821 928.847,685.821 929.406,685.821 929.966,685.821 930.525,685.821 931.084,685.821 931.644,685.821 932.203,685.821 932.762,685.821 933.321,685.821 933.881,685.821 934.44,685.821 934.999,685.821 935.558,685.821 936.118,685.821 936.677,685.821 937.236,685.821 937.795,685.821 938.355,685.821 938.914,685.821 939.473,685.821 940.032,685.821 940.592,685.821 941.151,685.821 941.71,685.821 942.269,685.821 942.829,685.821 943.388,685.821 943.947,685.821 944.506,685.821 945.066,685.821 945.625,685.821 946.184,685.821 946.743,685.821 947.303,685.821 947.862,685.821 948.421,685.821 948.98,685.821 949.54,685.821 950.099,685.821 950.658,685.821 951.217,685.821 951.777,685.821 952.336,685.821 952.895,685.821 953.454,685.821 954.014,685.821 954.573,685.821 955.132,685.821 955.691,685.821 956.251,685.821 956.81,685.821 957.369,685.821 957.928,685.821 958.488,685.821 959.047,685.821 959.606,685.821 960.165,685.821 960.725,685.821 961.284,685.821 961.843,685.821 962.402,685.821 962.962,685.821 963.521,685.821 964.08,685.821 964.639,685.821 965.199,685.821 965.758,685.821 966.317,685.821 966.876,685.821 967.436,685.821 967.995,685.821 968.554,685.821 969.113,685.821 969.673,685.821 970.232,685.821 970.791,685.821 971.35,685.821 971.91,685.821 972.469,685.821 973.028,685.821 973.587,685.821 974.147,685.821 974.706,685.821 975.265,685.821 975.824,685.821 976.384,685.821 976.943,685.821 977.502,685.821 978.061,685.821 978.621,685.821 979.18,685.821 979.739,685.821 980.298,685.821 980.858,685.821 981.417,685.821 981.976,685.821 982.535,685.821 983.095,685.821 983.654,685.821 984.213,685.821 984.772,685.821 985.332,685.821 985.891,685.821 986.45,685.821 987.009,685.821 987.569,685.821 988.128,685.821 988.687,685.821 989.246,685.821 989.806,685.821 990.365,685.821 990.924,685.821 991.483,685.821 992.043,685.821 992.602,685.821 993.161,685.821 993.72,685.821 994.28,685.821 994.839,685.821 995.398,685.821 995.957,685.821 996.517,685.821 997.076,685.821 997.635,685.821 998.194,685.821 998.754,685.821 999.313,685.821 999.872,685.821 1000.43,685.821 1000.99,685.821 1001.55,685.821 1002.11,685.821 1002.67,685.821 1003.23,685.821 1003.79,685.821 1004.35,685.821 1004.91,685.821 1005.46,685.821 1006.02,685.821 1006.58,685.821 1007.14,685.821 1007.7,685.821 1008.26,685.821 1008.82,685.821 1009.38,685.821 1009.94,685.821 1010.5,685.821 1011.06,685.821 1011.62,685.821 1012.18,685.821 1012.73,685.821 1013.29,685.821 1013.85,685.821 1014.41,685.821 1014.97,685.821 1015.53,685.821 1016.09,685.821 1016.65,685.821 1017.21,685.821 1017.77,685.821 1018.33,685.821 1018.89,685.821 1019.45,685.821 1020.01,685.821 1020.56,685.821 1021.12,685.821 1021.68,685.821 1022.24,685.821 1022.8,685.821 1023.36,685.821 1023.92,685.821 1024.48,685.821 1025.04,685.821 1025.6,685.821 1026.16,685.821 1026.72,685.821 1027.28,685.821 1027.83,685.821 1028.39,685.821 1028.95,685.821 1029.51,685.821 1030.07,685.821 1030.63,685.821 1031.19,685.821 1031.75,685.821 1032.31,685.821 1032.87,685.821 1033.43,685.821 1033.99,685.821 1034.55,685.821 1035.1,685.821 1035.66,685.821 1036.22,685.821 1036.78,685.821 1037.34,685.821 1037.9,685.821 1038.46,685.821 1039.02,685.821 1039.58,685.821 1040.14,685.821 1040.7,685.821 1041.26,685.821 1041.82,685.821 1042.38,685.821 1042.93,685.821 1043.49,685.821 1044.05,685.821 1044.61,685.821 1045.17,685.821 1045.73,685.821 1046.29,685.821 1046.85,685.821 1047.41,685.821 1047.97,685.821 1048.53,685.821 1049.09,685.821 1049.65,685.821 1050.2,685.821 1050.76,685.821 1051.32,685.821 1051.88,685.821 1052.44,685.821 1053,685.821 1053.56,685.821 1054.12,685.821 1054.68,685.821 1055.24,685.821 1055.8,685.821 1056.36,685.821 1056.92,685.821 1057.48,685.821 1058.03,685.821 1058.59,685.821 1059.15,685.821 1059.71,685.821 1060.27,685.821 1060.83,685.821 1061.39,685.821 1061.95,685.821 1062.51,685.821 1063.07,685.821 1063.63,685.821 1064.19,685.821 1064.75,685.821 1065.3,685.821 1065.86,685.821 1066.42,685.821 1066.98,685.821 1067.54,685.821 1068.1,685.821 1068.66,685.821 1069.22,685.821 1069.78,685.821 1070.34,685.821 1070.9,685.821 1071.46,685.821 1072.02,685.821 1072.57,685.821 1073.13,685.821 1073.69,685.821 1074.25,685.821 1074.81,685.821 1075.37,685.821 1075.93,685.821 1076.49,685.821 1077.05,685.821 1077.61,685.821 1078.17,685.821 1078.73,685.821 1079.29,685.821 1079.85,685.821 1080.4,685.821 1080.96,685.821 1081.52,685.821 1082.08,685.821 1082.64,685.821 1083.2,685.821 1083.76,685.821 1084.32,685.821 1084.88,685.821 1085.44,685.821 1086,685.821 1086.56,685.821 1087.12,685.821 1087.67,685.821 1088.23,685.821 1088.79,685.821 1089.35,685.821 1089.91,685.821 1090.47,685.821 1091.03,685.821 1091.59,685.821 1092.15,685.821 1092.71,685.821 1093.27,685.821 1093.83,685.821 1094.39,685.821 1094.94,685.821 1095.5,685.821 1096.06,685.821 1096.62,685.821 1097.18,685.821 1097.74,685.821 1098.3,685.821 1098.86,685.821 1099.42,685.821 1099.98,685.821 1100.54,685.821 1101.1,685.821 1101.66,685.821 1102.22,685.821 1102.77,685.821 1103.33,685.821 1103.89,685.821 1104.45,685.821 1105.01,685.821 1105.57,685.821 1106.13,685.821 1106.69,685.821 1107.25,685.821 1107.81,685.821 1108.37,685.821 1108.93,685.821 1109.49,685.821 1110.04,685.821 1110.6,685.821 1111.16,685.821 1111.72,685.821 1112.28,685.821 1112.84,685.821 1113.4,685.821 1113.96,685.821 1114.52,685.821 1115.08,685.821 1115.64,685.821 1116.2,685.821 1116.76,685.821 1117.31,685.821 1117.87,685.821 1118.43,685.821 1118.99,685.821 1119.55,685.821 1120.11,685.821 1120.67,685.821 1121.23,685.821 1121.79,685.821 1122.35,685.821 1122.91,685.821 1123.47,685.821 1124.03,685.821 1124.59,685.821 1125.14,685.821 1125.7,685.821 1126.26,685.821 1126.82,685.821 1127.38,685.821 1127.94,685.821 1128.5,685.821 1129.06,685.821 1129.62,685.821 1130.18,685.821 1130.74,685.821 1131.3,685.821 1131.86,685.821 1132.41,685.821 1132.97,685.821 1133.53,685.821 1134.09,685.821 1134.65,685.821 1135.21,685.821 1135.77,685.821 1136.33,685.821 1136.89,685.821 1137.45,685.821 1138.01,685.821 1138.57,685.821 1139.13,685.821 1139.68,685.821 1140.24,685.821 1140.8,685.821 1141.36,685.821 1141.92,685.821 1142.48,685.821 1143.04,685.821 1143.6,685.821 1144.16,685.821 1144.72,685.821 1145.28,685.821 1145.84,685.821 1146.4,685.821 1146.96,685.821 1147.51,685.821 1148.07,685.821 1148.63,685.821 1149.19,685.821 1149.75,685.821 1150.31,685.821 1150.87,685.821 1151.43,685.821 1151.99,685.821 1152.55,685.821 1153.11,685.821 1153.67,685.821 1154.23,685.821 1154.78,685.821 1155.34,685.821 1155.9,685.821 1156.46,685.821 1157.02,685.821 1157.58,685.821 1158.14,685.821 1158.7,685.821 1159.26,685.821 1159.82,685.821 1160.38,685.821 1160.94,685.821 1161.5,685.821 1162.05,685.821 1162.61,685.821 1163.17,685.821 1163.73,685.821 1164.29,685.821 1164.85,685.821 1165.41,685.821 1165.97,685.821 1166.53,685.821 1167.09,685.821 1167.65,685.821 1168.21,685.821 1168.77,685.821 1169.33,685.821 1169.88,685.821 1170.44,685.821 1171,685.821 1171.56,685.821 1172.12,685.821 1172.68,685.821 1173.24,685.821 1173.8,685.821 1174.36,685.821 1174.92,685.821 1175.48,685.821 1176.04,685.821 1176.6,685.821 1177.15,685.821 1177.71,685.821 1178.27,685.821 1178.83,685.821 1179.39,685.821 1179.95,685.821 1180.51,685.821 1181.07,685.821 1181.63,685.821 1182.19,685.821 1182.75,685.821 1183.31,685.821 1183.87,685.821 1184.43,685.821 1184.98,685.821 1185.54,685.821 1186.1,685.821 1186.66,685.821 1187.22,685.821 1187.78,685.821 1188.34,685.821 1188.9,685.821 1189.46,685.821 1190.02,685.821 1190.58,685.821 1191.14,685.821 1191.7,685.821 1192.25,685.821 1192.81,685.821 1193.37,685.821 1193.93,685.821 1194.49,685.821 1195.05,685.821 1195.61,685.821 1196.17,685.821 1196.73,685.821 1197.29,685.821 1197.85,685.821 1198.41,685.821 1198.97,685.821 1199.52,685.821 1200.08,685.821 1200.64,685.821 1201.2,685.821 1201.76,685.821 1202.32,685.821 1202.88,685.821 1203.44,685.821 1204,685.821 1204.56,685.821 1205.12,685.821 1205.68,685.821 1206.24,685.821 1206.8,685.821 1207.35,685.821 1207.91,685.821 1208.47,685.821 1209.03,685.821 1209.59,685.821 1210.15,685.821 1210.71,685.821 1211.27,685.821 1211.83,685.821 1212.39,685.821 1212.95,685.821 1213.51,685.821 1214.07,685.821 1214.62,685.821 1215.18,685.821 1215.74,685.821 1216.3,685.821 1216.86,685.821 1217.42,685.821 1217.98,685.821 1218.54,685.821 1219.1,685.821 1219.66,685.821 1220.22,685.821 1220.78,685.821 1221.34,685.821 1221.89,685.821 1222.45,685.821 1223.01,685.821 1223.57,685.821 1224.13,685.821 1224.69,685.821 1225.25,685.821 1225.81,685.821 1226.37,685.821 1226.93,685.821 1227.49,685.821 1228.05,685.821 1228.61,685.821 1229.17,685.821 1229.72,685.821 1230.28,685.821 1230.84,685.821 1231.4,685.821 1231.96,685.821 1232.52,685.821 1233.08,685.821 1233.64,685.821 1234.2,685.821 1234.76,685.821 1235.32,685.821 1235.88,685.821 1236.44,685.821 1236.99,685.821 1237.55,685.821 1238.11,685.821 1238.67,685.821 1239.23,685.821 1239.79,685.821 1240.35,685.821 1240.91,685.821 1241.47,685.821 1242.03,685.821 1242.59,685.821 1243.15,685.821 1243.71,685.821 1244.26,685.821 1244.82,685.821 1245.38,685.821 1245.94,685.821 1246.5,685.821 1247.06,685.821 1247.62,685.821 1248.18,685.821 1248.74,685.821 1249.3,685.821 1249.86,685.821 1250.42,685.821 1250.98,685.821 1251.54,685.821 1252.09,685.821 1252.65,685.821 1253.21,685.821 1253.77,685.821 1254.33,685.821 1254.89,685.821 1255.45,685.821 1256.01,685.821 1256.57,685.821 1257.13,685.821 1257.69,685.821 1258.25,685.821 1258.81,685.821 1259.36,685.821 1259.92,685.821 1260.48,685.821 1261.04,685.821 1261.6,685.821 1262.16,685.821 1262.72,685.821 1263.28,685.821 1263.84,685.821 1264.4,685.821 1264.96,685.821 1265.52,685.821 1266.08,685.821 1266.63,685.821 1267.19,685.821 1267.75,685.821 1268.31,685.821 1268.87,685.821 1269.43,685.821 1269.99,685.821 1270.55,685.821 1271.11,685.821 1271.67,685.821 1272.23,685.821 1272.79,685.821 1273.35,685.821 1273.91,685.821 1274.46,685.821 1275.02,685.821 1275.58,685.821 1276.14,685.821 1276.7,685.821 1277.26,685.821 1277.82,685.821 1278.38,685.821 1278.94,685.821 1279.5,685.821 1280.06,685.821 1280.62,685.821 1281.18,685.821 1281.73,685.821 1282.29,685.821 1282.85,685.821 1283.41,685.821 1283.97,685.821 1284.53,685.821 1285.09,685.821 1285.65,685.821 1286.21,685.821 1286.77,685.821 1287.33,685.821 1287.89,685.821 1288.45,685.821 1289,685.821 1289.56,685.821 1290.12,685.821 1290.68,685.821 1291.24,685.821 1291.8,685.821 1292.36,685.821 1292.92,685.821 1293.48,685.821 1294.04,685.821 1294.6,685.821 1295.16,685.821 1295.72,685.821 1296.28,685.821 1296.83,685.821 1297.39,685.821 1297.95,685.821 1298.51,685.821 1299.07,685.821 1299.63,685.821 1300.19,685.821 1300.75,685.821 1301.31,685.821 1301.87,685.821 1302.43,685.821 1302.99,685.821 1303.55,685.821 1304.1,685.821 1304.66,685.821 1305.22,685.821 1305.78,685.821 1306.34,685.821 1306.9,685.821 1307.46,685.821 1308.02,685.821 1308.58,685.821 1309.14,685.821 1309.7,685.821 1310.26,685.821 1310.82,685.821 1311.38,685.821 1311.93,685.821 1312.49,685.821 1313.05,685.821 1313.61,685.821 1314.17,685.821 1314.73,685.821 1315.29,685.821 1315.85,685.821 1316.41,685.821 1316.97,685.821 1317.53,685.821 1318.09,685.821 1318.65,685.821 1319.2,685.821 1319.76,685.821 1320.32,685.821 1320.88,685.821 1321.44,685.821 1322,685.821 1322.56,685.821 1323.12,685.821 1323.68,685.821 1324.24,685.821 1324.8,685.821 1325.36,685.821 1325.92,685.821 1326.47,685.821 1327.03,685.821 1327.59,685.821 1328.15,685.821 1328.71,685.821 1329.27,685.821 1329.83,685.821 1330.39,685.821 1330.95,685.821 1331.51,685.821 1332.07,685.821 1332.63,685.821 1333.19,685.821 1333.75,685.821 1334.3,685.821 1334.86,685.821 1335.42,685.821 1335.98,685.821 1336.54,685.821 1337.1,685.821 1337.66,685.821 1338.22,685.821 1338.78,685.821 1339.34,685.821 1339.9,685.821 1340.46,685.821 1341.02,685.821 1341.57,685.821 1342.13,685.821 1342.69,685.821 1343.25,685.821 1343.81,685.821 1344.37,685.821 1344.93,685.821 1345.49,685.821 1346.05,685.821 1346.61,685.821 1347.17,685.821 1347.73,685.821 1348.29,685.821 1348.84,685.821 1349.4,685.821 1349.96,685.821 1350.52,685.821 1351.08,685.821 1351.64,685.821 1352.2,685.821 1352.76,685.821 1353.32,685.821 1353.88,685.821 1354.44,685.821 1355,685.821 1355.56,685.821 1356.12,685.821 1356.67,685.821 1357.23,685.821 1357.79,685.821 1358.35,685.821 1358.91,685.821 1359.47,685.821 1360.03,685.821 1360.59,685.821 1361.15,685.821 1361.71,685.821 1362.27,685.821 1362.83,685.821 1363.39,685.821 1363.94,685.821 1364.5,685.821 1365.06,685.821 1365.62,685.821 1366.18,685.821 1366.74,685.821 1367.3,685.821 1367.86,685.821 1368.42,685.821 1368.98,685.821 1369.54,685.821 1370.1,685.821 1370.66,685.821 1371.21,685.821 1371.77,685.821 1372.33,685.821 1372.89,685.821 1373.45,685.821 1374.01,685.821 1374.57,685.821 1375.13,685.821 1375.69,685.821 1376.25,685.821 1376.81,685.821 1377.37,685.821 1377.93,685.821 1378.49,685.821 1379.04,685.821 1379.6,685.821 1380.16,685.821 1380.72,685.821 1381.28,685.821 1381.84,685.821 1382.4,685.821 1382.96,685.821 1383.52,685.821 1384.08,685.821 1384.64,685.821 1385.2,685.821 1385.76,685.821 1386.31,685.821 1386.87,685.821 1387.43,685.821 1387.99,685.821 1388.55,685.821 1389.11,685.821 1389.67,685.821 1390.23,685.821 1390.79,685.821 1391.35,685.821 1391.91,685.821 1392.47,685.821 1393.03,685.821 1393.58,685.821 1394.14,685.821 1394.7,685.821 1395.26,685.821 1395.82,685.821 1396.38,685.821 1396.94,685.821 1397.5,685.821 1398.06,685.821 1398.62,685.821 1399.18,685.821 1399.74,685.821 1400.3,685.821 1400.86,685.821 1401.41,685.821 1401.97,685.821 1402.53,685.821 1403.09,685.821 1403.65,685.821 1404.21,685.821 1404.77,685.821 1405.33,685.821 1405.89,685.821 1406.45,685.821 1407.01,685.821 1407.57,685.821 1408.13,685.821 1408.68,685.821 1409.24,685.821 1409.8,685.821 1410.36,685.821 1410.92,685.821 1411.48,685.821 1412.04,685.821 1412.6,685.821 1413.16,685.821 1413.72,685.821 1414.28,685.821 1414.84,685.821 1415.4,685.821 1415.95,685.821 1416.51,685.821 1417.07,685.821 1417.63,685.821 1418.19,685.821 1418.75,685.821 1419.31,685.821 1419.87,685.821 1420.43,685.821 1420.99,685.821 1421.55,685.821 1422.11,685.821 1422.67,685.821 1423.23,685.821 1423.78,685.821 1424.34,685.821 1424.9,685.821 1425.46,685.821 1426.02,685.821 1426.58,685.821 1427.14,685.821 1427.7,685.821 1428.26,685.821 1428.82,685.821 1429.38,685.821 1429.94,685.821 1430.5,685.821 1431.05,685.821 1431.61,685.821 1432.17,685.821 1432.73,685.821 1433.29,685.821 1433.85,685.821 1434.41,685.821 1434.97,685.821 1435.53,685.821 1436.09,685.821 1436.65,685.821 1437.21,685.821 1437.77,685.821 1438.33,685.821 1438.88,685.821 1439.44,685.821 1440,685.821 1440.56,685.821 1441.12,685.821 1441.68,685.821 1442.24,685.821 1442.8,685.821 1443.36,685.821 1443.92,685.821 1444.48,685.821 1445.04,685.821 1445.6,685.821 1446.15,685.821 1446.71,685.821 1447.27,685.821 1447.83,685.821 1448.39,685.821 1448.95,685.821 1449.51,685.821 1450.07,685.821 1450.63,685.821 1451.19,685.821 1451.75,685.821 1452.31,685.821 1452.87,685.821 1453.42,685.821 1453.98,685.821 1454.54,685.821 1455.1,685.821 1455.66,685.821 1456.22,685.821 1456.78,685.821 1457.34,685.821 1457.9,685.821 1458.46,685.821 1459.02,685.821 1459.58,685.821 1460.14,685.821 1460.7,685.821 1461.25,685.821 1461.81,685.821 1462.37,685.821 1462.93,685.821 1463.49,685.821 1464.05,685.821 1464.61,685.821 1465.17,685.821 1465.73,685.821 1466.29,685.821 1466.85,685.821 1467.41,685.821 1467.97,685.821 1468.52,685.821 1469.08,685.821 1469.64,685.821 1470.2,685.821 1470.76,685.821 1471.32,685.821 1471.88,685.821 1472.44,685.821 1473,685.821 1473.56,685.821 1474.12,685.821 1474.68,685.821 1475.24,685.821 1475.79,685.821 1476.35,685.821 1476.91,685.821 1477.47,685.821 1478.03,685.821 1478.59,685.821 1479.15,685.821 1479.71,685.821 1480.27,685.821 1480.83,685.821 1481.39,685.821 1481.95,685.821 1482.51,685.821 1483.07,685.821 1483.62,685.821 1484.18,685.821 1484.74,685.821 1485.3,685.821 1485.86,685.821 1486.42,685.821 1486.98,685.821 1487.54,685.821 1488.1,685.821 1488.66,685.821 1489.22,685.821 1489.78,685.821 1490.34,685.821 1490.89,685.821 1491.45,685.821 1492.01,685.821 1492.57,685.821 1493.13,685.821 1493.69,685.821 1494.25,685.821 1494.81,685.821 1495.37,685.821 1495.93,685.821 1496.49,685.821 1497.05,685.821 1497.61,685.821 1498.16,685.821 1498.72,685.821 1499.28,685.821 1499.84,685.821 1500.4,685.821 1500.96,685.821 1501.52,685.821 1502.08,685.821 1502.64,685.821 1503.2,685.821 1503.76,685.821 1504.32,685.821 1504.88,685.821 1505.44,685.821 1505.99,685.821 1506.55,685.821 1507.11,685.821 1507.67,685.821 1508.23,685.821 1508.79,685.821 1509.35,685.821 1509.91,685.821 1510.47,685.821 1511.03,685.821 1511.59,685.821 1512.15,685.821 1512.71,685.821 1513.26,685.821 1513.82,685.821 1514.38,685.821 1514.94,685.821 1515.5,685.821 1516.06,685.821 1516.62,685.821 1517.18,685.821 1517.74,685.821 1518.3,685.821 1518.86,685.821 1519.42,685.821 1519.98,685.821 1520.53,685.821 1521.09,685.821 1521.65,685.821 1522.21,685.821 1522.77,685.821 1523.33,685.821 1523.89,685.821 1524.45,685.821 1525.01,685.821 1525.57,685.821 1526.13,685.821 1526.69,685.821 1527.25,685.821 1527.81,685.821 1528.36,685.821 1528.92,685.821 1529.48,685.821 1530.04,685.821 1530.6,685.821 1531.16,685.821 1531.72,685.821 1532.28,685.821 1532.84,685.821 1533.4,685.821 1533.96,685.821 1534.52,685.821 1535.08,685.821 1535.63,685.821 1536.19,685.821 1536.75,685.821 1537.31,685.821 1537.87,685.821 1538.43,685.821 1538.99,685.821 1539.55,685.821 1540.11,685.821 1540.67,685.821 1541.23,685.821 1541.79,685.821 1542.35,685.821 1542.9,685.821 1543.46,685.821 1544.02,685.821 1544.58,685.821 1545.14,685.821 1545.7,685.821 1546.26,685.821 1546.82,685.821 1547.38,685.821 1547.94,685.821 1548.5,685.821 1549.06,685.821 1549.62,685.821 1550.18,685.821 1550.73,685.821 1551.29,685.821 1551.85,685.821 1552.41,685.821 1552.97,685.821 1553.53,685.821 1554.09,685.821 1554.65,685.821 1555.21,685.821 1555.77,685.821 1556.33,685.821 1556.89,685.821 1557.45,685.821 1558,685.821 1558.56,685.821 1559.12,685.821 1559.68,685.821 1560.24,685.821 1560.8,685.821 1561.36,685.821 1561.92,685.821 1562.48,685.821 1563.04,685.821 1563.6,685.821 1564.16,685.821 1564.72,685.821 1565.28,685.821 1565.83,685.821 1566.39,685.821 1566.95,685.821 1567.51,685.821 1568.07,685.821 1568.63,685.821 1569.19,685.821 1569.75,685.821 1570.31,685.821 1570.87,685.821 1571.43,685.821 1571.99,685.821 1572.55,685.821 1573.1,685.821 1573.66,685.821 1574.22,685.821 1574.78,685.821 1575.34,685.821 1575.9,685.821 1576.46,685.821 1577.02,685.821 1577.58,685.821 1578.14,685.821 1578.7,685.821 1579.26,685.821 1579.82,685.821 1580.37,685.821 1580.93,685.821 1581.49,685.821 1582.05,685.821 1582.61,685.821 1583.17,685.821 1583.73,685.821 1584.29,685.821 1584.85,685.821 1585.41,685.821 1585.97,685.821 1586.53,685.821 1587.09,685.821 1587.65,685.821 1588.2,685.821 1588.76,685.821 1589.32,685.821 1589.88,685.821 1590.44,685.821 1591,685.821 1591.56,685.821 1592.12,685.821 1592.68,685.821 1593.24,685.821 1593.8,685.821 1594.36,685.821 1594.92,685.821 1595.47,685.821 1596.03,685.821 1596.59,685.821 1597.15,685.821 1597.71,685.821 1598.27,685.821 1598.83,685.821 1599.39,685.821 1599.95,685.821 1600.51,685.821 1601.07,685.821 1601.63,685.821 1602.19,685.821 1602.74,685.821 1603.3,685.821 1603.86,685.821 1604.42,685.821 1604.98,685.821 1605.54,685.821 1606.1,685.821 1606.66,685.821 1607.22,685.821 1607.78,685.821 1608.34,685.821 1608.9,685.821 1609.46,685.821 1610.02,685.821 1610.57,685.821 1611.13,685.821 1611.69,685.821 1612.25,685.821 1612.81,685.821 1613.37,685.821 1613.93,685.821 1614.49,685.821 1615.05,685.821 1615.61,685.821 1616.17,685.821 1616.73,685.821 1617.29,685.821 1617.84,685.821 1618.4,685.821 1618.96,685.821 1619.52,685.821 1620.08,685.821 1620.64,685.821 1621.2,685.821 1621.76,685.821 1622.32,685.821 1622.88,685.821 1623.44,685.821 1624,685.821 1624.56,685.821 1625.11,685.821 1625.67,685.821 1626.23,685.821 1626.79,685.821 1627.35,685.821 1627.91,685.821 1628.47,685.821 1629.03,685.821 1629.59,685.821 1630.15,685.821 1630.71,685.821 1631.27,685.821 1631.83,685.821 1632.39,685.821 1632.94,685.821 1633.5,685.821 1634.06,685.821 1634.62,685.821 1635.18,685.821 1635.74,685.821 1636.3,685.821 1636.86,685.821 1637.42,685.821 1637.98,685.821 1638.54,685.821 1639.1,685.821 1639.66,685.821 1640.21,685.821 1640.77,685.821 1641.33,685.821 1641.89,685.821 1642.45,685.821 1643.01,685.821 1643.57,685.821 1644.13,685.821 1644.69,685.821 1645.25,685.821 1645.81,685.821 1646.37,685.821 1646.93,685.821 1647.48,685.821 1648.04,685.821 1648.6,685.821 1649.16,685.821 1649.72,685.821 1650.28,685.821 1650.84,685.821 1651.4,685.821 1651.96,685.821 1652.52,685.821 1653.08,685.821 1653.64,685.821 1654.2,685.821 1654.76,685.821 1655.31,685.821 1655.87,685.821 1656.43,685.821 1656.99,685.821 1657.55,685.821 1658.11,685.821 1658.67,685.821 1659.23,685.821 1659.79,685.821 1660.35,685.821 1660.91,685.821 1661.47,685.821 1662.03,685.821 1662.58,685.821 1663.14,685.821 1663.7,685.821 1664.26,685.821 1664.82,685.821 1665.38,685.821 1665.94,685.821 1666.5,685.821 1667.06,685.821 1667.62,685.821 1668.18,685.821 1668.74,685.821 1669.3,685.821 1669.85,685.821 1670.41,685.821 1670.97,685.821 1671.53,685.821 1672.09,685.821 1672.65,685.821 1673.21,685.821 1673.77,685.821 1674.33,685.821 1674.89,685.821 1675.45,685.821 1676.01,685.821 1676.57,685.821 1677.13,685.821 1677.68,685.821 1678.24,685.821 1678.8,685.821 1679.36,685.821 1679.92,685.821 1680.48,685.821 1681.04,685.821 1681.6,685.821 1682.16,685.821 1682.72,685.821 1683.28,685.821 1683.84,685.821 1684.4,685.821 1684.95,685.821 1685.51,685.821 1686.07,685.821 1686.63,685.821 1687.19,685.821 1687.75,685.821 1688.31,685.821 1688.87,685.821 1689.43,685.821 1689.99,685.821 1690.55,685.821 1691.11,685.821 1691.67,685.821 1692.23,685.821 1692.78,685.821 1693.34,685.821 1693.9,685.821 1694.46,685.821 1695.02,685.821 1695.58,685.821 1696.14,685.821 1696.7,685.821 1697.26,685.821 1697.82,685.821 1698.38,685.821 1698.94,685.821 1699.5,685.821 1700.05,685.821 1700.61,685.821 1701.17,685.821 1701.73,685.821 1702.29,685.821 1702.85,685.821 1703.41,685.821 1703.97,685.821 1704.53,685.821 1705.09,685.821 1705.65,685.821 1706.21,685.821 1706.77,685.821 1707.32,685.821 1707.88,685.821 1708.44,685.821 1709,685.821 1709.56,685.821 1710.12,685.821 1710.68,685.821 1711.24,685.821 1711.8,685.821 1712.36,685.821 1712.92,685.821 1713.48,685.821 1714.04,685.821 1714.6,685.821 1715.15,685.821 1715.71,685.821 1716.27,685.821 1716.83,685.821 1717.39,685.821 1717.95,685.821 1718.51,685.821 1719.07,685.821 1719.63,685.821 1720.19,685.821 1720.75,685.821 1721.31,685.821 1721.87,685.821 1722.42,685.821 1722.98,685.821 1723.54,685.821 1724.1,685.821 1724.66,685.821 1725.22,685.821 1725.78,685.821 1726.34,685.821 1726.9,685.821 1727.46,685.821 1728.02,685.821 1728.58,685.821 1729.14,685.821 1729.69,685.821 1730.25,685.821 1730.81,685.821 1731.37,685.821 1731.93,685.821 1732.49,685.821 1733.05,685.821 1733.61,685.821 1734.17,685.821 1734.73,685.821 1735.29,685.821 1735.85,685.821 1736.41,685.821 1736.97,685.821 1737.52,685.821 1738.08,685.821 1738.64,685.821 1739.2,685.821 1739.76,685.821 1740.32,685.821 1740.88,685.821 1741.44,685.821 1742,685.821 1742.56,685.821 1743.12,685.821 1743.68,685.821 1744.24,685.821 1744.79,685.821 1745.35,685.821 1745.91,685.821 1746.47,685.821 1747.03,685.821 1747.59,685.821 1748.15,685.821 1748.71,685.821 1749.27,685.821 1749.83,685.821 1750.39,685.821 1750.95,685.821 1751.51,685.821 1752.06,685.821 1752.62,685.821 1753.18,685.821 1753.74,685.821 1754.3,685.821 1754.86,685.821 1755.42,685.821 1755.98,685.821 1756.54,685.821 1757.1,685.821 1757.66,685.821 1758.22,685.821 1758.78,685.821 1759.34,685.821 1759.89,685.821 1760.45,685.821 1761.01,685.821 1761.57,685.821 1762.13,685.821 1762.69,685.821 1763.25,685.821 1763.81,685.821 1764.37,685.821 1764.93,685.821 1765.49,685.821 1766.05,685.821 1766.61,685.821 1767.16,685.821 1767.72,685.821 1768.28,685.821 1768.84,685.821 1769.4,685.821 1769.96,685.821 1770.52,685.821 1771.08,685.821 1771.64,685.821 1772.2,685.821 1772.76,685.821 1773.32,685.821 1773.88,685.821 1774.43,685.821 1774.99,685.821 1775.55,685.821 1776.11,685.821 1776.67,685.821 1777.23,685.821 1777.79,685.821 1778.35,685.821 1778.91,685.821 1779.47,685.821 1780.03,685.821 1780.59,685.821 1781.15,685.821 1781.71,685.821 1782.26,685.821 1782.82,685.821 1783.38,685.821 1783.94,685.821 1784.5,685.821 1785.06,685.821 1785.62,685.821 1786.18,685.821 1786.74,685.821 1787.3,685.821 1787.86,685.821 1788.42,685.821 1788.98,685.821 1789.53,685.821 1790.09,685.821 1790.65,685.821 1791.21,685.821 1791.77,685.821 1792.33,685.821 1792.89,685.821 1793.45,685.821 1794.01,685.821 1794.57,685.821 1795.13,685.821 1795.69,685.821 1796.25,685.821 1796.8,685.821 1797.36,685.821 1797.92,685.821 1798.48,685.821 1799.04,685.821 1799.6,685.821 1800.16,685.821 1800.72,685.821 1801.28,685.821 1801.84,685.821 1802.4,685.821 1802.96,685.821 1803.52,685.821 1804.08,685.821 1804.63,685.821 1805.19,685.821 1805.75,685.821 1806.31,685.821 1806.87,685.821 1807.43,685.821 1807.99,685.821 1808.55,685.821 1809.11,685.821 1809.67,685.821 1810.23,685.821 1810.79,685.821 1811.35,685.821 1811.9,685.821 1812.46,685.821 1813.02,685.821 1813.58,685.821 1814.14,685.821 1814.7,685.821 1815.26,685.821 1815.82,685.821 1816.38,685.821 1816.94,685.821 1817.5,685.821 1818.06,685.821 1818.62,685.821 1819.18,685.821 1819.73,685.821 1820.29,685.821 1820.85,685.821 1821.41,685.821 1821.97,685.821 1822.53,685.821 1823.09,685.821 1823.65,685.821 1824.21,685.821 1824.77,685.821 1825.33,685.821 1825.89,685.821 1826.45,685.821 1827,685.821 1827.56,685.821 1828.12,685.821 1828.68,685.821 1829.24,685.821 1829.8,685.821 1830.36,685.821 1830.92,685.821 1831.48,685.821 1832.04,685.821 1832.6,685.821 1833.16,685.821 1833.72,685.821 1834.27,685.821 1834.83,685.821 1835.39,685.821 1835.95,685.821 1836.51,685.821 1837.07,685.821 1837.63,685.821 1838.19,685.821 \"/>\n<path clip-path=\"url(#clip573)\" d=\"M720.247 685.294 L720.806 685.294 L721.365 685.294 L721.924 685.294 L722.484 685.294 L723.043 685.294 L723.602 685.294 L724.161 685.294 L724.721 685.294 L725.28 685.294 L725.839 685.294 L726.398 685.294 L726.958 685.294 L727.517 685.294 L728.076 685.294 L728.635 685.294 L729.195 685.294 L729.754 685.294 L730.313 685.294 L730.872 685.294 L731.432 685.294 L731.991 685.294 L732.55 685.294 L733.109 685.294 L733.669 685.294 L734.228 685.294 L734.787 685.294 L735.346 685.294 L735.906 685.294 L736.465 685.294 L737.024 685.294 L737.583 685.294 L738.143 685.294 L738.702 685.294 L739.261 685.294 L739.82 685.294 L740.38 685.294 L740.939 685.294 L741.498 685.294 L742.057 685.294 L742.617 685.294 L743.176 685.294 L743.735 685.294 L744.294 685.294 L744.854 685.294 L745.413 685.294 L745.972 685.294 L746.531 685.294 L747.091 685.294 L747.65 685.294 L748.209 685.294 L748.768 685.294 L749.328 685.294 L749.887 685.294 L750.446 685.294 L751.005 685.294 L751.565 685.294 L752.124 685.294 L752.683 685.294 L753.242 685.294 L753.802 685.294 L754.361 685.294 L754.92 685.294 L755.479 685.294 L756.039 685.294 L756.598 685.294 L757.157 685.294 L757.716 685.294 L758.276 685.294 L758.835 685.294 L759.394 685.294 L759.953 685.294 L760.513 685.294 L761.072 685.294 L761.631 685.294 L762.19 685.294 L762.75 685.294 L763.309 685.294 L763.868 685.294 L764.427 685.294 L764.987 685.294 L765.546 685.294 L766.105 685.294 L766.664 685.294 L767.224 685.294 L767.783 685.294 L768.342 685.294 L768.901 685.294 L769.461 685.294 L770.02 685.294 L770.579 685.294 L771.138 685.294 L771.698 685.294 L772.257 685.294 L772.816 685.294 L773.375 685.294 L773.935 685.294 L774.494 685.294 L775.053 685.294 L775.612 685.294 L776.172 685.294 L776.731 685.294 L777.29 685.294 L777.849 685.294 L778.409 685.294 L778.968 685.294 L779.527 685.294 L780.086 685.294 L780.646 685.294 L781.205 685.294 L781.764 685.294 L782.323 685.294 L782.883 685.294 L783.442 685.294 L784.001 685.294 L784.56 685.294 L785.12 685.294 L785.679 685.294 L786.238 685.294 L786.797 685.294 L787.357 685.294 L787.916 685.294 L788.475 685.294 L789.034 685.294 L789.594 685.294 L790.153 685.294 L790.712 685.294 L791.271 685.294 L791.831 685.294 L792.39 685.294 L792.949 685.294 L793.508 685.294 L794.068 685.294 L794.627 685.294 L795.186 685.294 L795.745 685.294 L796.305 685.294 L796.864 685.294 L797.423 685.294 L797.982 685.294 L798.542 685.294 L799.101 685.294 L799.66 685.294 L800.219 685.294 L800.779 685.294 L801.338 685.294 L801.897 685.294 L802.456 685.294 L803.016 685.294 L803.575 685.294 L804.134 685.294 L804.693 685.294 L805.253 685.294 L805.812 685.294 L806.371 685.294 L806.931 685.294 L807.49 685.294 L808.049 685.294 L808.608 685.294 L809.168 685.294 L809.727 685.294 L810.286 685.294 L810.845 685.294 L811.405 685.294 L811.964 685.294 L812.523 685.294 L813.082 685.294 L813.642 685.294 L814.201 685.294 L814.76 685.294 L815.319 685.294 L815.879 685.294 L816.438 685.294 L816.997 685.294 L817.556 685.294 L818.116 685.294 L818.675 685.294 L819.234 685.294 L819.793 685.294 L820.353 685.294 L820.912 685.294 L821.471 685.294 L822.03 685.294 L822.59 685.294 L823.149 685.294 L823.708 685.294 L824.267 685.294 L824.827 685.294 L825.386 685.294 L825.945 685.294 L826.504 685.294 L827.064 685.294 L827.623 685.294 L828.182 685.294 L828.741 685.294 L829.301 685.294 L829.86 685.294 L830.419 685.294 L830.978 685.294 L831.538 685.294 L832.097 685.294 L832.656 685.294 L833.215 685.294 L833.775 685.294 L834.334 685.294 L834.893 685.294 L835.452 685.294 L836.012 685.294 L836.571 685.294 L837.13 685.294 L837.689 685.294 L838.249 685.294 L838.808 685.294 L839.367 685.294 L839.926 685.294 L840.486 685.294 L841.045 685.294 L841.604 685.294 L842.163 685.294 L842.723 685.294 L843.282 685.294 L843.841 685.294 L844.4 685.294 L844.96 685.294 L845.519 685.294 L846.078 685.294 L846.637 685.294 L847.197 685.294 L847.756 685.294 L848.315 685.294 L848.874 685.294 L849.434 685.294 L849.993 685.294 L850.552 685.294 L851.111 685.294 L851.671 685.294 L852.23 685.294 L852.789 685.294 L853.348 685.294 L853.908 685.294 L854.467 685.294 L855.026 685.294 L855.585 685.294 L856.145 685.294 L856.704 685.294 L857.263 685.294 L857.822 685.294 L858.382 685.294 L858.941 685.294 L859.5 685.294 L860.059 685.294 L860.619 685.294 L861.178 685.294 L861.737 685.294 L862.296 685.294 L862.856 685.294 L863.415 685.294 L863.974 685.294 L864.533 685.294 L865.093 685.294 L865.652 685.294 L866.211 685.294 L866.77 685.294 L867.33 685.294 L867.889 685.294 L868.448 685.294 L869.007 685.294 L869.567 685.294 L870.126 685.294 L870.685 685.294 L871.244 685.294 L871.804 685.294 L872.363 685.294 L872.922 685.294 L873.481 685.294 L874.041 685.294 L874.6 685.294 L875.159 685.294 L875.718 685.294 L876.278 685.294 L876.837 685.294 L877.396 685.294 L877.955 685.294 L878.515 685.294 L879.074 685.294 L879.633 685.294 L880.192 685.294 L880.752 685.294 L881.311 685.294 L881.87 685.294 L882.429 685.294 L882.989 685.294 L883.548 685.294 L884.107 685.294 L884.666 685.294 L885.226 685.294 L885.785 685.294 L886.344 685.294 L886.903 685.294 L887.463 685.294 L888.022 685.294 L888.581 685.294 L889.14 685.294 L889.7 685.294 L890.259 685.294 L890.818 685.294 L891.377 685.294 L891.937 685.294 L892.496 685.294 L893.055 685.294 L893.614 685.294 L894.174 685.294 L894.733 685.294 L895.292 685.294 L895.851 685.294 L896.411 685.294 L896.97 685.294 L897.529 685.294 L898.088 685.294 L898.648 685.294 L899.207 685.294 L899.766 685.294 L900.325 685.294 L900.885 685.294 L901.444 685.294 L902.003 685.294 L902.562 685.294 L903.122 685.294 L903.681 685.294 L904.24 685.294 L904.799 685.294 L905.359 685.294 L905.918 685.294 L906.477 685.294 L907.036 685.294 L907.596 685.294 L908.155 685.294 L908.714 685.294 L909.273 685.294 L909.833 685.294 L910.392 685.294 L910.951 685.294 L911.51 685.294 L912.07 685.294 L912.629 685.294 L913.188 685.294 L913.747 685.294 L914.307 685.294 L914.866 685.294 L915.425 685.294 L915.984 685.294 L916.544 685.294 L917.103 685.294 L917.662 685.294 L918.221 685.294 L918.781 685.294 L919.34 685.294 L919.899 685.294 L920.458 685.294 L921.018 685.294 L921.577 685.294 L922.136 685.294 L922.695 685.294 L923.255 685.294 L923.814 685.294 L924.373 685.294 L924.932 685.294 L925.492 685.294 L926.051 685.294 L926.61 685.294 L927.169 685.294 L927.729 685.294 L928.288 685.294 L928.847 685.294 L929.406 685.294 L929.966 685.294 L930.525 685.294 L931.084 685.294 L931.644 685.294 L932.203 685.294 L932.762 685.294 L933.321 685.294 L933.881 685.294 L934.44 685.294 L934.999 685.294 L935.558 685.294 L936.118 685.294 L936.677 685.294 L937.236 685.294 L937.795 685.294 L938.355 685.294 L938.914 685.294 L939.473 685.294 L940.032 685.294 L940.592 685.294 L941.151 685.294 L941.71 685.294 L942.269 685.294 L942.829 685.294 L943.388 685.294 L943.947 685.294 L944.506 685.294 L945.066 685.294 L945.625 685.294 L946.184 685.294 L946.743 685.294 L947.303 685.294 L947.862 685.294 L948.421 685.294 L948.98 685.294 L949.54 685.294 L950.099 685.294 L950.658 685.294 L951.217 685.294 L951.777 685.294 L952.336 685.294 L952.895 685.294 L953.454 685.294 L954.014 685.294 L954.573 685.294 L955.132 685.294 L955.691 685.294 L956.251 685.294 L956.81 685.294 L957.369 685.294 L957.928 685.294 L958.488 685.294 L959.047 685.294 L959.606 685.294 L960.165 685.294 L960.725 685.294 L961.284 685.294 L961.843 685.294 L962.402 685.294 L962.962 685.294 L963.521 685.294 L964.08 685.294 L964.639 685.294 L965.199 685.294 L965.758 685.294 L966.317 685.294 L966.876 685.294 L967.436 685.294 L967.995 685.294 L968.554 685.294 L969.113 685.294 L969.673 685.294 L970.232 685.294 L970.791 685.294 L971.35 685.294 L971.91 685.294 L972.469 685.294 L973.028 685.294 L973.587 685.294 L974.147 685.294 L974.706 685.294 L975.265 685.294 L975.824 685.294 L976.384 685.294 L976.943 685.294 L977.502 685.294 L978.061 685.294 L978.621 685.294 L979.18 685.294 L979.739 685.294 L980.298 685.294 L980.858 685.294 L981.417 685.294 L981.976 685.294 L982.535 685.294 L983.095 685.294 L983.654 685.294 L984.213 685.294 L984.772 685.294 L985.332 685.294 L985.891 685.294 L986.45 685.294 L987.009 685.294 L987.569 685.294 L988.128 685.294 L988.687 685.294 L989.246 685.294 L989.806 685.294 L990.365 685.294 L990.924 685.294 L991.483 685.294 L992.043 685.294 L992.602 685.294 L993.161 685.294 L993.72 685.294 L994.28 685.294 L994.839 685.294 L995.398 685.294 L995.957 685.294 L996.517 685.294 L997.076 685.294 L997.635 685.294 L998.194 685.294 L998.754 685.294 L999.313 685.294 L999.872 685.294 L1000.43 685.294 L1000.99 685.294 L1001.55 685.294 L1002.11 685.294 L1002.67 685.294 L1003.23 685.294 L1003.79 685.294 L1004.35 685.294 L1004.91 685.294 L1005.46 685.294 L1006.02 685.294 L1006.58 685.294 L1007.14 685.294 L1007.7 685.294 L1008.26 685.294 L1008.82 685.294 L1009.38 685.294 L1009.94 685.294 L1010.5 685.294 L1011.06 685.294 L1011.62 685.294 L1012.18 685.294 L1012.73 685.294 L1013.29 685.294 L1013.85 685.294 L1014.41 685.294 L1014.97 685.294 L1015.53 685.294 L1016.09 685.294 L1016.65 685.294 L1017.21 685.294 L1017.77 685.294 L1018.33 685.294 L1018.89 685.294 L1019.45 685.294 L1020.01 685.294 L1020.56 685.294 L1021.12 685.294 L1021.68 685.294 L1022.24 685.294 L1022.8 685.294 L1023.36 685.294 L1023.92 685.294 L1024.48 685.294 L1025.04 685.294 L1025.6 685.294 L1026.16 685.294 L1026.72 685.294 L1027.28 685.294 L1027.83 685.294 L1028.39 685.294 L1028.95 685.294 L1029.51 685.294 L1030.07 685.294 L1030.63 685.294 L1031.19 685.294 L1031.75 685.294 L1032.31 685.294 L1032.87 685.294 L1033.43 685.294 L1033.99 685.294 L1034.55 685.294 L1035.1 685.294 L1035.66 685.294 L1036.22 685.294 L1036.78 685.294 L1037.34 685.294 L1037.9 685.294 L1038.46 685.294 L1039.02 685.294 L1039.58 685.294 L1040.14 685.294 L1040.7 685.294 L1041.26 685.294 L1041.82 685.294 L1042.38 685.294 L1042.93 685.294 L1043.49 685.294 L1044.05 685.294 L1044.61 685.294 L1045.17 685.294 L1045.73 685.294 L1046.29 685.294 L1046.85 685.294 L1047.41 685.294 L1047.97 685.294 L1048.53 685.294 L1049.09 685.294 L1049.65 685.294 L1050.2 685.294 L1050.76 685.294 L1051.32 685.294 L1051.88 685.294 L1052.44 685.294 L1053 685.294 L1053.56 685.294 L1054.12 685.294 L1054.68 685.294 L1055.24 685.294 L1055.8 685.294 L1056.36 685.294 L1056.92 685.294 L1057.48 685.294 L1058.03 685.294 L1058.59 685.294 L1059.15 685.294 L1059.71 685.294 L1060.27 685.294 L1060.83 685.294 L1061.39 685.294 L1061.95 685.294 L1062.51 685.294 L1063.07 685.294 L1063.63 685.294 L1064.19 685.294 L1064.75 685.294 L1065.3 685.294 L1065.86 685.294 L1066.42 685.294 L1066.98 685.294 L1067.54 685.294 L1068.1 685.294 L1068.66 685.294 L1069.22 685.294 L1069.78 685.294 L1070.34 685.294 L1070.9 685.294 L1071.46 685.294 L1072.02 685.294 L1072.57 685.294 L1073.13 685.294 L1073.69 685.294 L1074.25 685.294 L1074.81 685.294 L1075.37 685.294 L1075.93 685.294 L1076.49 685.294 L1077.05 685.294 L1077.61 685.294 L1078.17 685.294 L1078.73 685.294 L1079.29 685.294 L1079.85 685.294 L1080.4 685.294 L1080.96 685.294 L1081.52 685.294 L1082.08 685.294 L1082.64 685.294 L1083.2 685.294 L1083.76 685.294 L1084.32 685.294 L1084.88 685.294 L1085.44 685.294 L1086 685.294 L1086.56 685.294 L1087.12 685.294 L1087.67 685.294 L1088.23 685.294 L1088.79 685.294 L1089.35 685.294 L1089.91 685.294 L1090.47 685.294 L1091.03 685.294 L1091.59 685.294 L1092.15 685.294 L1092.71 685.294 L1093.27 685.294 L1093.83 685.294 L1094.39 685.294 L1094.94 685.294 L1095.5 685.294 L1096.06 685.294 L1096.62 685.294 L1097.18 685.294 L1097.74 685.294 L1098.3 685.294 L1098.86 685.294 L1099.42 685.294 L1099.98 685.294 L1100.54 685.294 L1101.1 685.294 L1101.66 685.294 L1102.22 685.294 L1102.77 685.294 L1103.33 685.294 L1103.89 685.294 L1104.45 685.294 L1105.01 685.294 L1105.57 685.294 L1106.13 685.294 L1106.69 685.294 L1107.25 685.294 L1107.81 685.294 L1108.37 685.294 L1108.93 685.294 L1109.49 685.294 L1110.04 685.294 L1110.6 685.294 L1111.16 685.294 L1111.72 685.294 L1112.28 685.294 L1112.84 685.294 L1113.4 685.294 L1113.96 685.294 L1114.52 685.294 L1115.08 685.294 L1115.64 685.294 L1116.2 685.294 L1116.76 685.294 L1117.31 685.294 L1117.87 685.294 L1118.43 685.294 L1118.99 685.294 L1119.55 685.294 L1120.11 685.294 L1120.67 685.294 L1121.23 685.294 L1121.79 685.294 L1122.35 685.294 L1122.91 685.294 L1123.47 685.294 L1124.03 685.294 L1124.59 685.294 L1125.14 685.294 L1125.7 685.294 L1126.26 685.294 L1126.82 685.294 L1127.38 685.294 L1127.94 685.294 L1128.5 685.294 L1129.06 685.294 L1129.62 685.294 L1130.18 685.294 L1130.74 685.294 L1131.3 685.294 L1131.86 685.294 L1132.41 685.294 L1132.97 685.294 L1133.53 685.294 L1134.09 685.294 L1134.65 685.294 L1135.21 685.294 L1135.77 685.294 L1136.33 685.294 L1136.89 685.294 L1137.45 685.294 L1138.01 685.294 L1138.57 685.294 L1139.13 685.294 L1139.68 685.294 L1140.24 685.294 L1140.8 685.294 L1141.36 685.294 L1141.92 685.294 L1142.48 685.294 L1143.04 685.294 L1143.6 685.294 L1144.16 685.294 L1144.72 685.294 L1145.28 685.294 L1145.84 685.294 L1146.4 685.294 L1146.96 685.294 L1147.51 685.294 L1148.07 685.294 L1148.63 685.294 L1149.19 685.294 L1149.75 685.294 L1150.31 685.294 L1150.87 685.294 L1151.43 685.294 L1151.99 685.294 L1152.55 685.294 L1153.11 685.294 L1153.67 685.294 L1154.23 685.294 L1154.78 685.294 L1155.34 685.294 L1155.9 685.294 L1156.46 685.294 L1157.02 685.294 L1157.58 685.294 L1158.14 685.294 L1158.7 685.294 L1159.26 685.294 L1159.82 685.294 L1160.38 685.294 L1160.94 685.294 L1161.5 685.294 L1162.05 685.294 L1162.61 685.294 L1163.17 685.294 L1163.73 685.294 L1164.29 685.294 L1164.85 685.294 L1165.41 685.294 L1165.97 685.294 L1166.53 685.294 L1167.09 685.294 L1167.65 685.294 L1168.21 685.294 L1168.77 685.294 L1169.33 685.294 L1169.88 685.294 L1170.44 685.294 L1171 685.294 L1171.56 685.294 L1172.12 685.294 L1172.68 685.294 L1173.24 685.294 L1173.8 685.294 L1174.36 685.294 L1174.92 685.294 L1175.48 685.294 L1176.04 685.294 L1176.6 685.294 L1177.15 685.294 L1177.71 685.294 L1178.27 685.294 L1178.83 685.294 L1179.39 685.294 L1179.95 685.294 L1180.51 685.294 L1181.07 685.294 L1181.63 685.294 L1182.19 685.294 L1182.75 685.294 L1183.31 685.294 L1183.87 685.294 L1184.43 685.294 L1184.98 685.294 L1185.54 685.294 L1186.1 685.294 L1186.66 685.294 L1187.22 685.294 L1187.78 685.294 L1188.34 685.294 L1188.9 685.294 L1189.46 685.294 L1190.02 685.294 L1190.58 685.294 L1191.14 685.294 L1191.7 685.294 L1192.25 685.294 L1192.81 685.294 L1193.37 685.294 L1193.93 685.294 L1194.49 685.294 L1195.05 685.294 L1195.61 685.294 L1196.17 685.294 L1196.73 685.294 L1197.29 685.294 L1197.85 685.294 L1198.41 685.294 L1198.97 685.294 L1199.52 685.294 L1200.08 685.294 L1200.64 685.294 L1201.2 685.294 L1201.76 685.294 L1202.32 685.294 L1202.88 685.294 L1203.44 685.294 L1204 685.294 L1204.56 685.294 L1205.12 685.294 L1205.68 685.294 L1206.24 685.294 L1206.8 685.294 L1207.35 685.294 L1207.91 685.294 L1208.47 685.294 L1209.03 685.294 L1209.59 685.294 L1210.15 685.294 L1210.71 685.294 L1211.27 685.294 L1211.83 685.294 L1212.39 685.294 L1212.95 685.294 L1213.51 685.294 L1214.07 685.294 L1214.62 685.294 L1215.18 685.294 L1215.74 685.294 L1216.3 685.294 L1216.86 685.294 L1217.42 685.294 L1217.98 685.294 L1218.54 685.294 L1219.1 685.294 L1219.66 685.294 L1220.22 685.294 L1220.78 685.294 L1221.34 685.294 L1221.89 685.294 L1222.45 685.294 L1223.01 685.294 L1223.57 685.294 L1224.13 685.294 L1224.69 685.294 L1225.25 685.294 L1225.81 685.294 L1226.37 685.294 L1226.93 685.294 L1227.49 685.294 L1228.05 685.294 L1228.61 685.294 L1229.17 685.294 L1229.72 685.294 L1230.28 685.294 L1230.84 685.294 L1231.4 685.294 L1231.96 685.294 L1232.52 685.294 L1233.08 685.294 L1233.64 685.294 L1234.2 685.294 L1234.76 685.294 L1235.32 685.294 L1235.88 685.294 L1236.44 685.294 L1236.99 685.294 L1237.55 685.294 L1238.11 685.294 L1238.67 685.294 L1239.23 685.294 L1239.79 685.294 L1240.35 685.294 L1240.91 685.294 L1241.47 685.294 L1242.03 685.294 L1242.59 685.294 L1243.15 685.294 L1243.71 685.294 L1244.26 685.294 L1244.82 685.294 L1245.38 685.294 L1245.94 685.294 L1246.5 685.294 L1247.06 685.294 L1247.62 685.294 L1248.18 685.294 L1248.74 685.294 L1249.3 685.294 L1249.86 685.294 L1250.42 685.294 L1250.98 685.294 L1251.54 685.294 L1252.09 685.294 L1252.65 685.294 L1253.21 685.294 L1253.77 685.294 L1254.33 685.294 L1254.89 685.294 L1255.45 685.294 L1256.01 685.294 L1256.57 685.294 L1257.13 685.294 L1257.69 685.294 L1258.25 685.294 L1258.81 685.294 L1259.36 685.294 L1259.92 685.294 L1260.48 685.294 L1261.04 685.294 L1261.6 685.294 L1262.16 685.294 L1262.72 685.294 L1263.28 685.294 L1263.84 685.294 L1264.4 685.294 L1264.96 685.294 L1265.52 685.294 L1266.08 685.294 L1266.63 685.294 L1267.19 685.294 L1267.75 685.294 L1268.31 685.294 L1268.87 685.294 L1269.43 685.294 L1269.99 685.294 L1270.55 685.294 L1271.11 685.294 L1271.67 685.294 L1272.23 685.294 L1272.79 685.294 L1273.35 685.294 L1273.91 685.294 L1274.46 685.294 L1275.02 685.294 L1275.58 685.294 L1276.14 685.294 L1276.7 685.294 L1277.26 685.294 L1277.82 685.294 L1278.38 685.294 L1278.94 685.294 L1279.5 685.294 L1280.06 685.294 L1280.62 685.294 L1281.18 685.294 L1281.73 685.294 L1282.29 685.294 L1282.85 685.294 L1283.41 685.294 L1283.97 685.294 L1284.53 685.294 L1285.09 685.294 L1285.65 685.294 L1286.21 685.294 L1286.77 685.294 L1287.33 685.294 L1287.89 685.294 L1288.45 685.294 L1289 685.294 L1289.56 685.294 L1290.12 685.294 L1290.68 685.294 L1291.24 685.294 L1291.8 685.294 L1292.36 685.294 L1292.92 685.294 L1293.48 685.294 L1294.04 685.294 L1294.6 685.294 L1295.16 685.294 L1295.72 685.294 L1296.28 685.294 L1296.83 685.294 L1297.39 685.294 L1297.95 685.294 L1298.51 685.294 L1299.07 685.294 L1299.63 685.294 L1300.19 685.294 L1300.75 685.294 L1301.31 685.294 L1301.87 685.294 L1302.43 685.294 L1302.99 685.294 L1303.55 685.294 L1304.1 685.294 L1304.66 685.294 L1305.22 685.294 L1305.78 685.294 L1306.34 685.294 L1306.9 685.294 L1307.46 685.294 L1308.02 685.294 L1308.58 685.294 L1309.14 685.294 L1309.7 685.294 L1310.26 685.294 L1310.82 685.294 L1311.38 685.294 L1311.93 685.294 L1312.49 685.294 L1313.05 685.294 L1313.61 685.294 L1314.17 685.294 L1314.73 685.294 L1315.29 685.294 L1315.85 685.294 L1316.41 685.294 L1316.97 685.294 L1317.53 685.294 L1318.09 685.294 L1318.65 685.294 L1319.2 685.294 L1319.76 685.294 L1320.32 685.294 L1320.88 685.294 L1321.44 685.294 L1322 685.294 L1322.56 685.294 L1323.12 685.294 L1323.68 685.294 L1324.24 685.294 L1324.8 685.294 L1325.36 685.294 L1325.92 685.294 L1326.47 685.294 L1327.03 685.294 L1327.59 685.294 L1328.15 685.294 L1328.71 685.294 L1329.27 685.294 L1329.83 685.294 L1330.39 685.294 L1330.95 685.294 L1331.51 685.294 L1332.07 685.294 L1332.63 685.294 L1333.19 685.294 L1333.75 685.294 L1334.3 685.294 L1334.86 685.294 L1335.42 685.294 L1335.98 685.294 L1336.54 685.294 L1337.1 685.294 L1337.66 685.294 L1338.22 685.294 L1338.78 685.294 L1339.34 685.294 L1339.9 685.294 L1340.46 685.294 L1341.02 685.294 L1341.57 685.294 L1342.13 685.294 L1342.69 685.294 L1343.25 685.294 L1343.81 685.294 L1344.37 685.294 L1344.93 685.294 L1345.49 685.294 L1346.05 685.294 L1346.61 685.294 L1347.17 685.294 L1347.73 685.294 L1348.29 685.294 L1348.84 685.294 L1349.4 685.294 L1349.96 685.294 L1350.52 685.294 L1351.08 685.294 L1351.64 685.294 L1352.2 685.294 L1352.76 685.294 L1353.32 685.294 L1353.88 685.294 L1354.44 685.294 L1355 685.294 L1355.56 685.294 L1356.12 685.294 L1356.67 685.294 L1357.23 685.294 L1357.79 685.294 L1358.35 685.294 L1358.91 685.294 L1359.47 685.294 L1360.03 685.294 L1360.59 685.294 L1361.15 685.294 L1361.71 685.294 L1362.27 685.294 L1362.83 685.294 L1363.39 685.294 L1363.94 685.294 L1364.5 685.294 L1365.06 685.294 L1365.62 685.294 L1366.18 685.294 L1366.74 685.294 L1367.3 685.294 L1367.86 685.294 L1368.42 685.294 L1368.98 685.294 L1369.54 685.294 L1370.1 685.294 L1370.66 685.294 L1371.21 685.294 L1371.77 685.294 L1372.33 685.294 L1372.89 685.294 L1373.45 685.294 L1374.01 685.294 L1374.57 685.294 L1375.13 685.294 L1375.69 685.294 L1376.25 685.294 L1376.81 685.294 L1377.37 685.294 L1377.93 685.294 L1378.49 685.294 L1379.04 685.294 L1379.6 685.294 L1380.16 685.294 L1380.72 685.294 L1381.28 685.294 L1381.84 685.294 L1382.4 685.294 L1382.96 685.294 L1383.52 685.294 L1384.08 685.294 L1384.64 685.294 L1385.2 685.294 L1385.76 685.294 L1386.31 685.294 L1386.87 685.294 L1387.43 685.294 L1387.99 685.294 L1388.55 685.294 L1389.11 685.294 L1389.67 685.294 L1390.23 685.294 L1390.79 685.294 L1391.35 685.294 L1391.91 685.294 L1392.47 685.294 L1393.03 685.294 L1393.58 685.294 L1394.14 685.294 L1394.7 685.294 L1395.26 685.294 L1395.82 685.294 L1396.38 685.294 L1396.94 685.294 L1397.5 685.294 L1398.06 685.294 L1398.62 685.294 L1399.18 685.294 L1399.74 685.294 L1400.3 685.294 L1400.86 685.294 L1401.41 685.294 L1401.97 685.294 L1402.53 685.294 L1403.09 685.294 L1403.65 685.294 L1404.21 685.294 L1404.77 685.294 L1405.33 685.294 L1405.89 685.294 L1406.45 685.294 L1407.01 685.294 L1407.57 685.294 L1408.13 685.294 L1408.68 685.294 L1409.24 685.294 L1409.8 685.294 L1410.36 685.294 L1410.92 685.294 L1411.48 685.294 L1412.04 685.294 L1412.6 685.294 L1413.16 685.294 L1413.72 685.294 L1414.28 685.294 L1414.84 685.294 L1415.4 685.294 L1415.95 685.294 L1416.51 685.294 L1417.07 685.294 L1417.63 685.294 L1418.19 685.294 L1418.75 685.294 L1419.31 685.294 L1419.87 685.294 L1420.43 685.294 L1420.99 685.294 L1421.55 685.294 L1422.11 685.294 L1422.67 685.294 L1423.23 685.294 L1423.78 685.294 L1424.34 685.294 L1424.9 685.294 L1425.46 685.294 L1426.02 685.294 L1426.58 685.294 L1427.14 685.294 L1427.7 685.294 L1428.26 685.294 L1428.82 685.294 L1429.38 685.294 L1429.94 685.294 L1430.5 685.294 L1431.05 685.294 L1431.61 685.294 L1432.17 685.294 L1432.73 685.294 L1433.29 685.294 L1433.85 685.294 L1434.41 685.294 L1434.97 685.294 L1435.53 685.294 L1436.09 685.294 L1436.65 685.294 L1437.21 685.294 L1437.77 685.294 L1438.33 685.294 L1438.88 685.294 L1439.44 685.294 L1440 685.294 L1440.56 685.294 L1441.12 685.294 L1441.68 685.294 L1442.24 685.294 L1442.8 685.294 L1443.36 685.294 L1443.92 685.294 L1444.48 685.294 L1445.04 685.294 L1445.6 685.294 L1446.15 685.294 L1446.71 685.294 L1447.27 685.294 L1447.83 685.294 L1448.39 685.294 L1448.95 685.294 L1449.51 685.294 L1450.07 685.294 L1450.63 685.294 L1451.19 685.294 L1451.75 685.294 L1452.31 685.294 L1452.87 685.294 L1453.42 685.294 L1453.98 685.294 L1454.54 685.294 L1455.1 685.294 L1455.66 685.294 L1456.22 685.294 L1456.78 685.294 L1457.34 685.294 L1457.9 685.294 L1458.46 685.294 L1459.02 685.294 L1459.58 685.294 L1460.14 685.294 L1460.7 685.294 L1461.25 685.294 L1461.81 685.294 L1462.37 685.294 L1462.93 685.294 L1463.49 685.294 L1464.05 685.294 L1464.61 685.294 L1465.17 685.294 L1465.73 685.294 L1466.29 685.294 L1466.85 685.294 L1467.41 685.294 L1467.97 685.294 L1468.52 685.294 L1469.08 685.294 L1469.64 685.294 L1470.2 685.294 L1470.76 685.294 L1471.32 685.294 L1471.88 685.294 L1472.44 685.294 L1473 685.294 L1473.56 685.294 L1474.12 685.294 L1474.68 685.294 L1475.24 685.294 L1475.79 685.294 L1476.35 685.294 L1476.91 685.294 L1477.47 685.294 L1478.03 685.294 L1478.59 685.294 L1479.15 685.294 L1479.71 685.294 L1480.27 685.294 L1480.83 685.294 L1481.39 685.294 L1481.95 685.294 L1482.51 685.294 L1483.07 685.294 L1483.62 685.294 L1484.18 685.294 L1484.74 685.294 L1485.3 685.294 L1485.86 685.294 L1486.42 685.294 L1486.98 685.294 L1487.54 685.294 L1488.1 685.294 L1488.66 685.294 L1489.22 685.294 L1489.78 685.294 L1490.34 685.294 L1490.89 685.294 L1491.45 685.294 L1492.01 685.294 L1492.57 685.294 L1493.13 685.294 L1493.69 685.294 L1494.25 685.294 L1494.81 685.294 L1495.37 685.294 L1495.93 685.294 L1496.49 685.294 L1497.05 685.294 L1497.61 685.294 L1498.16 685.294 L1498.72 685.294 L1499.28 685.294 L1499.84 685.294 L1500.4 685.294 L1500.96 685.294 L1501.52 685.294 L1502.08 685.294 L1502.64 685.294 L1503.2 685.294 L1503.76 685.294 L1504.32 685.294 L1504.88 685.294 L1505.44 685.294 L1505.99 685.294 L1506.55 685.294 L1507.11 685.294 L1507.67 685.294 L1508.23 685.294 L1508.79 685.294 L1509.35 685.294 L1509.91 685.294 L1510.47 685.294 L1511.03 685.294 L1511.59 685.294 L1512.15 685.294 L1512.71 685.294 L1513.26 685.294 L1513.82 685.294 L1514.38 685.294 L1514.94 685.294 L1515.5 685.294 L1516.06 685.294 L1516.62 685.294 L1517.18 685.294 L1517.74 685.294 L1518.3 685.294 L1518.86 685.294 L1519.42 685.294 L1519.98 685.294 L1520.53 685.294 L1521.09 685.294 L1521.65 685.294 L1522.21 685.294 L1522.77 685.294 L1523.33 685.294 L1523.89 685.294 L1524.45 685.294 L1525.01 685.294 L1525.57 685.294 L1526.13 685.294 L1526.69 685.294 L1527.25 685.294 L1527.81 685.294 L1528.36 685.294 L1528.92 685.294 L1529.48 685.294 L1530.04 685.294 L1530.6 685.294 L1531.16 685.294 L1531.72 685.294 L1532.28 685.294 L1532.84 685.294 L1533.4 685.294 L1533.96 685.294 L1534.52 685.294 L1535.08 685.294 L1535.63 685.294 L1536.19 685.294 L1536.75 685.294 L1537.31 685.294 L1537.87 685.294 L1538.43 685.294 L1538.99 685.294 L1539.55 685.294 L1540.11 685.294 L1540.67 685.294 L1541.23 685.294 L1541.79 685.294 L1542.35 685.294 L1542.9 685.294 L1543.46 685.294 L1544.02 685.294 L1544.58 685.294 L1545.14 685.294 L1545.7 685.294 L1546.26 685.294 L1546.82 685.294 L1547.38 685.294 L1547.94 685.294 L1548.5 685.294 L1549.06 685.294 L1549.62 685.294 L1550.18 685.294 L1550.73 685.294 L1551.29 685.294 L1551.85 685.294 L1552.41 685.294 L1552.97 685.294 L1553.53 685.294 L1554.09 685.294 L1554.65 685.294 L1555.21 685.294 L1555.77 685.294 L1556.33 685.294 L1556.89 685.294 L1557.45 685.294 L1558 685.294 L1558.56 685.294 L1559.12 685.294 L1559.68 685.294 L1560.24 685.294 L1560.8 685.294 L1561.36 685.294 L1561.92 685.294 L1562.48 685.294 L1563.04 685.294 L1563.6 685.294 L1564.16 685.294 L1564.72 685.294 L1565.28 685.294 L1565.83 685.294 L1566.39 685.294 L1566.95 685.294 L1567.51 685.294 L1568.07 685.294 L1568.63 685.294 L1569.19 685.294 L1569.75 685.294 L1570.31 685.294 L1570.87 685.294 L1571.43 685.294 L1571.99 685.294 L1572.55 685.294 L1573.1 685.294 L1573.66 685.294 L1574.22 685.294 L1574.78 685.294 L1575.34 685.294 L1575.9 685.294 L1576.46 685.294 L1577.02 685.294 L1577.58 685.294 L1578.14 685.294 L1578.7 685.294 L1579.26 685.294 L1579.82 685.294 L1580.37 685.294 L1580.93 685.294 L1581.49 685.294 L1582.05 685.294 L1582.61 685.294 L1583.17 685.294 L1583.73 685.294 L1584.29 685.294 L1584.85 685.294 L1585.41 685.294 L1585.97 685.294 L1586.53 685.294 L1587.09 685.294 L1587.65 685.294 L1588.2 685.294 L1588.76 685.294 L1589.32 685.294 L1589.88 685.294 L1590.44 685.294 L1591 685.294 L1591.56 685.294 L1592.12 685.294 L1592.68 685.294 L1593.24 685.294 L1593.8 685.294 L1594.36 685.294 L1594.92 685.294 L1595.47 685.294 L1596.03 685.294 L1596.59 685.294 L1597.15 685.294 L1597.71 685.294 L1598.27 685.294 L1598.83 685.294 L1599.39 685.294 L1599.95 685.294 L1600.51 685.294 L1601.07 685.294 L1601.63 685.294 L1602.19 685.294 L1602.74 685.294 L1603.3 685.294 L1603.86 685.294 L1604.42 685.294 L1604.98 685.294 L1605.54 685.294 L1606.1 685.294 L1606.66 685.294 L1607.22 685.294 L1607.78 685.294 L1608.34 685.294 L1608.9 685.294 L1609.46 685.294 L1610.02 685.294 L1610.57 685.294 L1611.13 685.294 L1611.69 685.294 L1612.25 685.294 L1612.81 685.294 L1613.37 685.294 L1613.93 685.294 L1614.49 685.294 L1615.05 685.294 L1615.61 685.294 L1616.17 685.294 L1616.73 685.294 L1617.29 685.294 L1617.84 685.294 L1618.4 685.294 L1618.96 685.294 L1619.52 685.294 L1620.08 685.294 L1620.64 685.294 L1621.2 685.294 L1621.76 685.294 L1622.32 685.294 L1622.88 685.294 L1623.44 685.294 L1624 685.294 L1624.56 685.294 L1625.11 685.294 L1625.67 685.294 L1626.23 685.294 L1626.79 685.294 L1627.35 685.294 L1627.91 685.294 L1628.47 685.294 L1629.03 685.294 L1629.59 685.294 L1630.15 685.294 L1630.71 685.294 L1631.27 685.294 L1631.83 685.294 L1632.39 685.294 L1632.94 685.294 L1633.5 685.294 L1634.06 685.294 L1634.62 685.294 L1635.18 685.294 L1635.74 685.294 L1636.3 685.294 L1636.86 685.294 L1637.42 685.294 L1637.98 685.294 L1638.54 685.294 L1639.1 685.294 L1639.66 685.294 L1640.21 685.294 L1640.77 685.294 L1641.33 685.294 L1641.89 685.294 L1642.45 685.294 L1643.01 685.294 L1643.57 685.294 L1644.13 685.294 L1644.69 685.294 L1645.25 685.294 L1645.81 685.294 L1646.37 685.294 L1646.93 685.294 L1647.48 685.294 L1648.04 685.294 L1648.6 685.294 L1649.16 685.294 L1649.72 685.294 L1650.28 685.294 L1650.84 685.294 L1651.4 685.294 L1651.96 685.294 L1652.52 685.294 L1653.08 685.294 L1653.64 685.294 L1654.2 685.294 L1654.76 685.294 L1655.31 685.294 L1655.87 685.294 L1656.43 685.294 L1656.99 685.294 L1657.55 685.294 L1658.11 685.294 L1658.67 685.294 L1659.23 685.294 L1659.79 685.294 L1660.35 685.294 L1660.91 685.294 L1661.47 685.294 L1662.03 685.294 L1662.58 685.294 L1663.14 685.294 L1663.7 685.294 L1664.26 685.294 L1664.82 685.294 L1665.38 685.294 L1665.94 685.294 L1666.5 685.294 L1667.06 685.294 L1667.62 685.294 L1668.18 685.294 L1668.74 685.294 L1669.3 685.294 L1669.85 685.294 L1670.41 685.294 L1670.97 685.294 L1671.53 685.294 L1672.09 685.294 L1672.65 685.294 L1673.21 685.294 L1673.77 685.294 L1674.33 685.294 L1674.89 685.294 L1675.45 685.294 L1676.01 685.294 L1676.57 685.294 L1677.13 685.294 L1677.68 685.294 L1678.24 685.294 L1678.8 685.294 L1679.36 685.294 L1679.92 685.294 L1680.48 685.294 L1681.04 685.294 L1681.6 685.294 L1682.16 685.294 L1682.72 685.294 L1683.28 685.294 L1683.84 685.294 L1684.4 685.294 L1684.95 685.294 L1685.51 685.294 L1686.07 685.294 L1686.63 685.294 L1687.19 685.294 L1687.75 685.294 L1688.31 685.294 L1688.87 685.294 L1689.43 685.294 L1689.99 685.294 L1690.55 685.294 L1691.11 685.294 L1691.67 685.294 L1692.23 685.294 L1692.78 685.294 L1693.34 685.294 L1693.9 685.294 L1694.46 685.294 L1695.02 685.294 L1695.58 685.294 L1696.14 685.294 L1696.7 685.294 L1697.26 685.294 L1697.82 685.294 L1698.38 685.294 L1698.94 685.294 L1699.5 685.294 L1700.05 685.294 L1700.61 685.294 L1701.17 685.294 L1701.73 685.294 L1702.29 685.294 L1702.85 685.294 L1703.41 685.294 L1703.97 685.294 L1704.53 685.294 L1705.09 685.294 L1705.65 685.294 L1706.21 685.294 L1706.77 685.294 L1707.32 685.294 L1707.88 685.294 L1708.44 685.294 L1709 685.294 L1709.56 685.294 L1710.12 685.294 L1710.68 685.294 L1711.24 685.294 L1711.8 685.294 L1712.36 685.294 L1712.92 685.294 L1713.48 685.294 L1714.04 685.294 L1714.6 685.294 L1715.15 685.294 L1715.71 685.294 L1716.27 685.294 L1716.83 685.294 L1717.39 685.294 L1717.95 685.294 L1718.51 685.294 L1719.07 685.294 L1719.63 685.294 L1720.19 685.294 L1720.75 685.294 L1721.31 685.294 L1721.87 685.294 L1722.42 685.294 L1722.98 685.294 L1723.54 685.294 L1724.1 685.294 L1724.66 685.294 L1725.22 685.294 L1725.78 685.294 L1726.34 685.294 L1726.9 685.294 L1727.46 685.294 L1728.02 685.294 L1728.58 685.294 L1729.14 685.294 L1729.69 685.294 L1730.25 685.294 L1730.81 685.294 L1731.37 685.294 L1731.93 685.294 L1732.49 685.294 L1733.05 685.294 L1733.61 685.294 L1734.17 685.294 L1734.73 685.294 L1735.29 685.294 L1735.85 685.294 L1736.41 685.294 L1736.97 685.294 L1737.52 685.294 L1738.08 685.294 L1738.64 685.294 L1739.2 685.294 L1739.76 685.294 L1740.32 685.294 L1740.88 685.294 L1741.44 685.294 L1742 685.294 L1742.56 685.294 L1743.12 685.294 L1743.68 685.294 L1744.24 685.294 L1744.79 685.294 L1745.35 685.294 L1745.91 685.294 L1746.47 685.294 L1747.03 685.294 L1747.59 685.294 L1748.15 685.294 L1748.71 685.294 L1749.27 685.294 L1749.83 685.294 L1750.39 685.294 L1750.95 685.294 L1751.51 685.294 L1752.06 685.294 L1752.62 685.294 L1753.18 685.294 L1753.74 685.294 L1754.3 685.294 L1754.86 685.294 L1755.42 685.294 L1755.98 685.294 L1756.54 685.294 L1757.1 685.294 L1757.66 685.294 L1758.22 685.294 L1758.78 685.294 L1759.34 685.294 L1759.89 685.294 L1760.45 685.294 L1761.01 685.294 L1761.57 685.294 L1762.13 685.294 L1762.69 685.294 L1763.25 685.294 L1763.81 685.294 L1764.37 685.294 L1764.93 685.294 L1765.49 685.294 L1766.05 685.294 L1766.61 685.294 L1767.16 685.294 L1767.72 685.294 L1768.28 685.294 L1768.84 685.294 L1769.4 685.294 L1769.96 685.294 L1770.52 685.294 L1771.08 685.294 L1771.64 685.294 L1772.2 685.294 L1772.76 685.294 L1773.32 685.294 L1773.88 685.294 L1774.43 685.294 L1774.99 685.294 L1775.55 685.294 L1776.11 685.294 L1776.67 685.294 L1777.23 685.294 L1777.79 685.294 L1778.35 685.294 L1778.91 685.294 L1779.47 685.294 L1780.03 685.294 L1780.59 685.294 L1781.15 685.294 L1781.71 685.294 L1782.26 685.294 L1782.82 685.294 L1783.38 685.294 L1783.94 685.294 L1784.5 685.294 L1785.06 685.294 L1785.62 685.294 L1786.18 685.294 L1786.74 685.294 L1787.3 685.294 L1787.86 685.294 L1788.42 685.294 L1788.98 685.294 L1789.53 685.294 L1790.09 685.294 L1790.65 685.294 L1791.21 685.294 L1791.77 685.294 L1792.33 685.294 L1792.89 685.294 L1793.45 685.294 L1794.01 685.294 L1794.57 685.294 L1795.13 685.294 L1795.69 685.294 L1796.25 685.294 L1796.8 685.294 L1797.36 685.294 L1797.92 685.294 L1798.48 685.294 L1799.04 685.294 L1799.6 685.294 L1800.16 685.294 L1800.72 685.294 L1801.28 685.294 L1801.84 685.294 L1802.4 685.294 L1802.96 685.294 L1803.52 685.294 L1804.08 685.294 L1804.63 685.294 L1805.19 685.294 L1805.75 685.294 L1806.31 685.294 L1806.87 685.294 L1807.43 685.294 L1807.99 685.294 L1808.55 685.294 L1809.11 685.294 L1809.67 685.294 L1810.23 685.294 L1810.79 685.294 L1811.35 685.294 L1811.9 685.294 L1812.46 685.294 L1813.02 685.294 L1813.58 685.294 L1814.14 685.294 L1814.7 685.294 L1815.26 685.294 L1815.82 685.294 L1816.38 685.294 L1816.94 685.294 L1817.5 685.294 L1818.06 685.294 L1818.62 685.294 L1819.18 685.294 L1819.73 685.294 L1820.29 685.294 L1820.85 685.294 L1821.41 685.294 L1821.97 685.294 L1822.53 685.294 L1823.09 685.294 L1823.65 685.294 L1824.21 685.294 L1824.77 685.294 L1825.33 685.294 L1825.89 685.294 L1826.45 685.294 L1827 685.294 L1827.56 685.294 L1828.12 685.294 L1828.68 685.294 L1829.24 685.294 L1829.8 685.294 L1830.36 685.294 L1830.92 685.294 L1831.48 685.294 L1832.04 685.294 L1832.6 685.294 L1833.16 685.294 L1833.72 685.294 L1834.27 685.294 L1834.83 685.294 L1835.39 685.294 L1835.95 685.294 L1836.51 685.294 L1837.07 685.294 L1837.63 685.294 L1838.19 685.294 L1838.19 683.807 L1837.63 683.807 L1837.07 683.807 L1836.51 683.807 L1835.95 683.807 L1835.39 683.807 L1834.83 683.807 L1834.27 683.807 L1833.72 683.807 L1833.16 683.807 L1832.6 683.807 L1832.04 683.807 L1831.48 683.807 L1830.92 683.807 L1830.36 683.807 L1829.8 683.807 L1829.24 683.807 L1828.68 683.807 L1828.12 683.807 L1827.56 683.807 L1827 683.807 L1826.45 683.807 L1825.89 683.807 L1825.33 683.807 L1824.77 683.807 L1824.21 683.807 L1823.65 683.807 L1823.09 683.807 L1822.53 683.807 L1821.97 683.807 L1821.41 683.807 L1820.85 683.807 L1820.29 683.807 L1819.73 683.807 L1819.18 683.807 L1818.62 683.807 L1818.06 683.807 L1817.5 683.807 L1816.94 683.807 L1816.38 683.807 L1815.82 683.807 L1815.26 683.807 L1814.7 683.807 L1814.14 683.807 L1813.58 683.807 L1813.02 683.807 L1812.46 683.807 L1811.9 683.807 L1811.35 683.807 L1810.79 683.807 L1810.23 683.807 L1809.67 683.807 L1809.11 683.807 L1808.55 683.807 L1807.99 683.807 L1807.43 683.807 L1806.87 683.807 L1806.31 683.807 L1805.75 683.807 L1805.19 683.807 L1804.63 683.807 L1804.08 683.807 L1803.52 683.807 L1802.96 683.807 L1802.4 683.807 L1801.84 683.807 L1801.28 683.807 L1800.72 683.807 L1800.16 683.807 L1799.6 683.807 L1799.04 683.807 L1798.48 683.807 L1797.92 683.807 L1797.36 683.807 L1796.8 683.807 L1796.25 683.807 L1795.69 683.807 L1795.13 683.807 L1794.57 683.807 L1794.01 683.807 L1793.45 683.807 L1792.89 683.807 L1792.33 683.807 L1791.77 683.807 L1791.21 683.807 L1790.65 683.807 L1790.09 683.807 L1789.53 683.807 L1788.98 683.807 L1788.42 683.807 L1787.86 683.807 L1787.3 683.807 L1786.74 683.807 L1786.18 683.807 L1785.62 683.807 L1785.06 683.807 L1784.5 683.807 L1783.94 683.807 L1783.38 683.807 L1782.82 683.807 L1782.26 683.807 L1781.71 683.807 L1781.15 683.807 L1780.59 683.807 L1780.03 683.807 L1779.47 683.807 L1778.91 683.807 L1778.35 683.807 L1777.79 683.807 L1777.23 683.807 L1776.67 683.807 L1776.11 683.807 L1775.55 683.807 L1774.99 683.807 L1774.43 683.807 L1773.88 683.807 L1773.32 683.807 L1772.76 683.807 L1772.2 683.807 L1771.64 683.807 L1771.08 683.807 L1770.52 683.807 L1769.96 683.807 L1769.4 683.807 L1768.84 683.807 L1768.28 683.807 L1767.72 683.807 L1767.16 683.807 L1766.61 683.807 L1766.05 683.807 L1765.49 683.807 L1764.93 683.807 L1764.37 683.807 L1763.81 683.807 L1763.25 683.807 L1762.69 683.807 L1762.13 683.807 L1761.57 683.807 L1761.01 683.807 L1760.45 683.807 L1759.89 683.807 L1759.34 683.807 L1758.78 683.807 L1758.22 683.807 L1757.66 683.807 L1757.1 683.807 L1756.54 683.807 L1755.98 683.807 L1755.42 683.807 L1754.86 683.807 L1754.3 683.807 L1753.74 683.807 L1753.18 683.807 L1752.62 683.807 L1752.06 683.807 L1751.51 683.807 L1750.95 683.807 L1750.39 683.807 L1749.83 683.807 L1749.27 683.807 L1748.71 683.807 L1748.15 683.807 L1747.59 683.807 L1747.03 683.807 L1746.47 683.807 L1745.91 683.807 L1745.35 683.807 L1744.79 683.807 L1744.24 683.807 L1743.68 683.807 L1743.12 683.807 L1742.56 683.807 L1742 683.807 L1741.44 683.807 L1740.88 683.807 L1740.32 683.807 L1739.76 683.807 L1739.2 683.807 L1738.64 683.807 L1738.08 683.807 L1737.52 683.807 L1736.97 683.807 L1736.41 683.807 L1735.85 683.807 L1735.29 683.807 L1734.73 683.807 L1734.17 683.807 L1733.61 683.807 L1733.05 683.807 L1732.49 683.807 L1731.93 683.807 L1731.37 683.807 L1730.81 683.807 L1730.25 683.807 L1729.69 683.807 L1729.14 683.807 L1728.58 683.807 L1728.02 683.807 L1727.46 683.807 L1726.9 683.807 L1726.34 683.807 L1725.78 683.807 L1725.22 683.807 L1724.66 683.807 L1724.1 683.807 L1723.54 683.807 L1722.98 683.807 L1722.42 683.807 L1721.87 683.807 L1721.31 683.807 L1720.75 683.807 L1720.19 683.807 L1719.63 683.807 L1719.07 683.807 L1718.51 683.807 L1717.95 683.807 L1717.39 683.807 L1716.83 683.807 L1716.27 683.807 L1715.71 683.807 L1715.15 683.807 L1714.6 683.807 L1714.04 683.807 L1713.48 683.807 L1712.92 683.807 L1712.36 683.807 L1711.8 683.807 L1711.24 683.807 L1710.68 683.807 L1710.12 683.807 L1709.56 683.807 L1709 683.807 L1708.44 683.807 L1707.88 683.807 L1707.32 683.807 L1706.77 683.807 L1706.21 683.807 L1705.65 683.807 L1705.09 683.807 L1704.53 683.807 L1703.97 683.807 L1703.41 683.807 L1702.85 683.807 L1702.29 683.807 L1701.73 683.807 L1701.17 683.807 L1700.61 683.807 L1700.05 683.807 L1699.5 683.807 L1698.94 683.807 L1698.38 683.807 L1697.82 683.807 L1697.26 683.807 L1696.7 683.807 L1696.14 683.807 L1695.58 683.807 L1695.02 683.807 L1694.46 683.807 L1693.9 683.807 L1693.34 683.807 L1692.78 683.807 L1692.23 683.807 L1691.67 683.807 L1691.11 683.807 L1690.55 683.807 L1689.99 683.807 L1689.43 683.807 L1688.87 683.807 L1688.31 683.807 L1687.75 683.807 L1687.19 683.807 L1686.63 683.807 L1686.07 683.807 L1685.51 683.807 L1684.95 683.807 L1684.4 683.807 L1683.84 683.807 L1683.28 683.807 L1682.72 683.807 L1682.16 683.807 L1681.6 683.807 L1681.04 683.807 L1680.48 683.807 L1679.92 683.807 L1679.36 683.807 L1678.8 683.807 L1678.24 683.807 L1677.68 683.807 L1677.13 683.807 L1676.57 683.807 L1676.01 683.807 L1675.45 683.807 L1674.89 683.807 L1674.33 683.807 L1673.77 683.807 L1673.21 683.807 L1672.65 683.807 L1672.09 683.807 L1671.53 683.807 L1670.97 683.807 L1670.41 683.807 L1669.85 683.807 L1669.3 683.807 L1668.74 683.807 L1668.18 683.807 L1667.62 683.807 L1667.06 683.807 L1666.5 683.807 L1665.94 683.807 L1665.38 683.807 L1664.82 683.807 L1664.26 683.807 L1663.7 683.807 L1663.14 683.807 L1662.58 683.807 L1662.03 683.807 L1661.47 683.807 L1660.91 683.807 L1660.35 683.807 L1659.79 683.807 L1659.23 683.807 L1658.67 683.807 L1658.11 683.807 L1657.55 683.807 L1656.99 683.807 L1656.43 683.807 L1655.87 683.807 L1655.31 683.807 L1654.76 683.807 L1654.2 683.807 L1653.64 683.807 L1653.08 683.807 L1652.52 683.807 L1651.96 683.807 L1651.4 683.807 L1650.84 683.807 L1650.28 683.807 L1649.72 683.807 L1649.16 683.807 L1648.6 683.807 L1648.04 683.807 L1647.48 683.807 L1646.93 683.807 L1646.37 683.807 L1645.81 683.807 L1645.25 683.807 L1644.69 683.807 L1644.13 683.807 L1643.57 683.807 L1643.01 683.807 L1642.45 683.807 L1641.89 683.807 L1641.33 683.807 L1640.77 683.807 L1640.21 683.807 L1639.66 683.807 L1639.1 683.807 L1638.54 683.807 L1637.98 683.807 L1637.42 683.807 L1636.86 683.807 L1636.3 683.807 L1635.74 683.807 L1635.18 683.807 L1634.62 683.807 L1634.06 683.807 L1633.5 683.807 L1632.94 683.807 L1632.39 683.807 L1631.83 683.807 L1631.27 683.807 L1630.71 683.807 L1630.15 683.807 L1629.59 683.807 L1629.03 683.807 L1628.47 683.807 L1627.91 683.807 L1627.35 683.807 L1626.79 683.807 L1626.23 683.807 L1625.67 683.807 L1625.11 683.807 L1624.56 683.807 L1624 683.807 L1623.44 683.807 L1622.88 683.807 L1622.32 683.807 L1621.76 683.807 L1621.2 683.807 L1620.64 683.807 L1620.08 683.807 L1619.52 683.807 L1618.96 683.807 L1618.4 683.807 L1617.84 683.807 L1617.29 683.807 L1616.73 683.807 L1616.17 683.807 L1615.61 683.807 L1615.05 683.807 L1614.49 683.807 L1613.93 683.807 L1613.37 683.807 L1612.81 683.807 L1612.25 683.807 L1611.69 683.807 L1611.13 683.807 L1610.57 683.807 L1610.02 683.807 L1609.46 683.807 L1608.9 683.807 L1608.34 683.807 L1607.78 683.807 L1607.22 683.807 L1606.66 683.807 L1606.1 683.807 L1605.54 683.807 L1604.98 683.807 L1604.42 683.807 L1603.86 683.807 L1603.3 683.807 L1602.74 683.807 L1602.19 683.807 L1601.63 683.807 L1601.07 683.807 L1600.51 683.807 L1599.95 683.807 L1599.39 683.807 L1598.83 683.807 L1598.27 683.807 L1597.71 683.807 L1597.15 683.807 L1596.59 683.807 L1596.03 683.807 L1595.47 683.807 L1594.92 683.807 L1594.36 683.807 L1593.8 683.807 L1593.24 683.807 L1592.68 683.807 L1592.12 683.807 L1591.56 683.807 L1591 683.807 L1590.44 683.807 L1589.88 683.807 L1589.32 683.807 L1588.76 683.807 L1588.2 683.807 L1587.65 683.807 L1587.09 683.807 L1586.53 683.807 L1585.97 683.807 L1585.41 683.807 L1584.85 683.807 L1584.29 683.807 L1583.73 683.807 L1583.17 683.807 L1582.61 683.807 L1582.05 683.807 L1581.49 683.807 L1580.93 683.807 L1580.37 683.807 L1579.82 683.807 L1579.26 683.807 L1578.7 683.807 L1578.14 683.807 L1577.58 683.807 L1577.02 683.807 L1576.46 683.807 L1575.9 683.807 L1575.34 683.807 L1574.78 683.807 L1574.22 683.807 L1573.66 683.807 L1573.1 683.807 L1572.55 683.807 L1571.99 683.807 L1571.43 683.807 L1570.87 683.807 L1570.31 683.807 L1569.75 683.807 L1569.19 683.807 L1568.63 683.807 L1568.07 683.807 L1567.51 683.807 L1566.95 683.807 L1566.39 683.807 L1565.83 683.807 L1565.28 683.807 L1564.72 683.807 L1564.16 683.807 L1563.6 683.807 L1563.04 683.807 L1562.48 683.807 L1561.92 683.807 L1561.36 683.807 L1560.8 683.807 L1560.24 683.807 L1559.68 683.807 L1559.12 683.807 L1558.56 683.807 L1558 683.807 L1557.45 683.807 L1556.89 683.807 L1556.33 683.807 L1555.77 683.807 L1555.21 683.807 L1554.65 683.807 L1554.09 683.807 L1553.53 683.807 L1552.97 683.807 L1552.41 683.807 L1551.85 683.807 L1551.29 683.807 L1550.73 683.807 L1550.18 683.807 L1549.62 683.807 L1549.06 683.807 L1548.5 683.807 L1547.94 683.807 L1547.38 683.807 L1546.82 683.807 L1546.26 683.807 L1545.7 683.807 L1545.14 683.807 L1544.58 683.807 L1544.02 683.807 L1543.46 683.807 L1542.9 683.807 L1542.35 683.807 L1541.79 683.807 L1541.23 683.807 L1540.67 683.807 L1540.11 683.807 L1539.55 683.807 L1538.99 683.807 L1538.43 683.807 L1537.87 683.807 L1537.31 683.807 L1536.75 683.807 L1536.19 683.807 L1535.63 683.807 L1535.08 683.807 L1534.52 683.807 L1533.96 683.807 L1533.4 683.807 L1532.84 683.807 L1532.28 683.807 L1531.72 683.807 L1531.16 683.807 L1530.6 683.807 L1530.04 683.807 L1529.48 683.807 L1528.92 683.807 L1528.36 683.807 L1527.81 683.807 L1527.25 683.807 L1526.69 683.807 L1526.13 683.807 L1525.57 683.807 L1525.01 683.807 L1524.45 683.807 L1523.89 683.807 L1523.33 683.807 L1522.77 683.807 L1522.21 683.807 L1521.65 683.807 L1521.09 683.807 L1520.53 683.807 L1519.98 683.807 L1519.42 683.807 L1518.86 683.807 L1518.3 683.807 L1517.74 683.807 L1517.18 683.807 L1516.62 683.807 L1516.06 683.807 L1515.5 683.807 L1514.94 683.807 L1514.38 683.807 L1513.82 683.807 L1513.26 683.807 L1512.71 683.807 L1512.15 683.807 L1511.59 683.807 L1511.03 683.807 L1510.47 683.807 L1509.91 683.807 L1509.35 683.807 L1508.79 683.807 L1508.23 683.807 L1507.67 683.807 L1507.11 683.807 L1506.55 683.807 L1505.99 683.807 L1505.44 683.807 L1504.88 683.807 L1504.32 683.807 L1503.76 683.807 L1503.2 683.807 L1502.64 683.807 L1502.08 683.807 L1501.52 683.807 L1500.96 683.807 L1500.4 683.807 L1499.84 683.807 L1499.28 683.807 L1498.72 683.807 L1498.16 683.807 L1497.61 683.807 L1497.05 683.807 L1496.49 683.807 L1495.93 683.807 L1495.37 683.807 L1494.81 683.807 L1494.25 683.807 L1493.69 683.807 L1493.13 683.807 L1492.57 683.807 L1492.01 683.807 L1491.45 683.807 L1490.89 683.807 L1490.34 683.807 L1489.78 683.807 L1489.22 683.807 L1488.66 683.807 L1488.1 683.807 L1487.54 683.807 L1486.98 683.807 L1486.42 683.807 L1485.86 683.807 L1485.3 683.807 L1484.74 683.807 L1484.18 683.807 L1483.62 683.807 L1483.07 683.807 L1482.51 683.807 L1481.95 683.807 L1481.39 683.807 L1480.83 683.807 L1480.27 683.807 L1479.71 683.807 L1479.15 683.807 L1478.59 683.807 L1478.03 683.807 L1477.47 683.807 L1476.91 683.807 L1476.35 683.807 L1475.79 683.807 L1475.24 683.807 L1474.68 683.807 L1474.12 683.807 L1473.56 683.807 L1473 683.807 L1472.44 683.807 L1471.88 683.807 L1471.32 683.807 L1470.76 683.807 L1470.2 683.807 L1469.64 683.807 L1469.08 683.807 L1468.52 683.807 L1467.97 683.807 L1467.41 683.807 L1466.85 683.807 L1466.29 683.807 L1465.73 683.807 L1465.17 683.807 L1464.61 683.807 L1464.05 683.807 L1463.49 683.807 L1462.93 683.807 L1462.37 683.807 L1461.81 683.807 L1461.25 683.807 L1460.7 683.807 L1460.14 683.807 L1459.58 683.807 L1459.02 683.807 L1458.46 683.807 L1457.9 683.807 L1457.34 683.807 L1456.78 683.807 L1456.22 683.807 L1455.66 683.807 L1455.1 683.807 L1454.54 683.807 L1453.98 683.807 L1453.42 683.807 L1452.87 683.807 L1452.31 683.807 L1451.75 683.807 L1451.19 683.807 L1450.63 683.807 L1450.07 683.807 L1449.51 683.807 L1448.95 683.807 L1448.39 683.807 L1447.83 683.807 L1447.27 683.807 L1446.71 683.807 L1446.15 683.807 L1445.6 683.807 L1445.04 683.807 L1444.48 683.807 L1443.92 683.807 L1443.36 683.807 L1442.8 683.807 L1442.24 683.807 L1441.68 683.807 L1441.12 683.807 L1440.56 683.807 L1440 683.807 L1439.44 683.807 L1438.88 683.807 L1438.33 683.807 L1437.77 683.807 L1437.21 683.807 L1436.65 683.807 L1436.09 683.807 L1435.53 683.807 L1434.97 683.807 L1434.41 683.807 L1433.85 683.807 L1433.29 683.807 L1432.73 683.807 L1432.17 683.807 L1431.61 683.807 L1431.05 683.807 L1430.5 683.807 L1429.94 683.807 L1429.38 683.807 L1428.82 683.807 L1428.26 683.807 L1427.7 683.807 L1427.14 683.807 L1426.58 683.807 L1426.02 683.807 L1425.46 683.807 L1424.9 683.807 L1424.34 683.807 L1423.78 683.807 L1423.23 683.807 L1422.67 683.807 L1422.11 683.807 L1421.55 683.807 L1420.99 683.807 L1420.43 683.807 L1419.87 683.807 L1419.31 683.807 L1418.75 683.807 L1418.19 683.807 L1417.63 683.807 L1417.07 683.807 L1416.51 683.807 L1415.95 683.807 L1415.4 683.807 L1414.84 683.807 L1414.28 683.807 L1413.72 683.807 L1413.16 683.807 L1412.6 683.807 L1412.04 683.807 L1411.48 683.807 L1410.92 683.807 L1410.36 683.807 L1409.8 683.807 L1409.24 683.807 L1408.68 683.807 L1408.13 683.807 L1407.57 683.807 L1407.01 683.807 L1406.45 683.807 L1405.89 683.807 L1405.33 683.807 L1404.77 683.807 L1404.21 683.807 L1403.65 683.807 L1403.09 683.807 L1402.53 683.807 L1401.97 683.807 L1401.41 683.807 L1400.86 683.807 L1400.3 683.807 L1399.74 683.807 L1399.18 683.807 L1398.62 683.807 L1398.06 683.807 L1397.5 683.807 L1396.94 683.807 L1396.38 683.807 L1395.82 683.807 L1395.26 683.807 L1394.7 683.807 L1394.14 683.807 L1393.58 683.807 L1393.03 683.807 L1392.47 683.807 L1391.91 683.807 L1391.35 683.807 L1390.79 683.807 L1390.23 683.807 L1389.67 683.807 L1389.11 683.807 L1388.55 683.807 L1387.99 683.807 L1387.43 683.807 L1386.87 683.807 L1386.31 683.807 L1385.76 683.807 L1385.2 683.807 L1384.64 683.807 L1384.08 683.807 L1383.52 683.807 L1382.96 683.807 L1382.4 683.807 L1381.84 683.807 L1381.28 683.807 L1380.72 683.807 L1380.16 683.807 L1379.6 683.807 L1379.04 683.807 L1378.49 683.807 L1377.93 683.807 L1377.37 683.807 L1376.81 683.807 L1376.25 683.807 L1375.69 683.807 L1375.13 683.807 L1374.57 683.807 L1374.01 683.807 L1373.45 683.807 L1372.89 683.807 L1372.33 683.807 L1371.77 683.807 L1371.21 683.807 L1370.66 683.807 L1370.1 683.807 L1369.54 683.807 L1368.98 683.807 L1368.42 683.807 L1367.86 683.807 L1367.3 683.807 L1366.74 683.807 L1366.18 683.807 L1365.62 683.807 L1365.06 683.807 L1364.5 683.807 L1363.94 683.807 L1363.39 683.807 L1362.83 683.807 L1362.27 683.807 L1361.71 683.807 L1361.15 683.807 L1360.59 683.807 L1360.03 683.807 L1359.47 683.807 L1358.91 683.807 L1358.35 683.807 L1357.79 683.807 L1357.23 683.807 L1356.67 683.807 L1356.12 683.807 L1355.56 683.807 L1355 683.807 L1354.44 683.807 L1353.88 683.807 L1353.32 683.807 L1352.76 683.807 L1352.2 683.807 L1351.64 683.807 L1351.08 683.807 L1350.52 683.807 L1349.96 683.807 L1349.4 683.807 L1348.84 683.807 L1348.29 683.807 L1347.73 683.807 L1347.17 683.807 L1346.61 683.807 L1346.05 683.807 L1345.49 683.807 L1344.93 683.807 L1344.37 683.807 L1343.81 683.807 L1343.25 683.807 L1342.69 683.807 L1342.13 683.807 L1341.57 683.807 L1341.02 683.807 L1340.46 683.807 L1339.9 683.807 L1339.34 683.807 L1338.78 683.807 L1338.22 683.807 L1337.66 683.807 L1337.1 683.807 L1336.54 683.807 L1335.98 683.807 L1335.42 683.807 L1334.86 683.807 L1334.3 683.807 L1333.75 683.807 L1333.19 683.807 L1332.63 683.807 L1332.07 683.807 L1331.51 683.807 L1330.95 683.807 L1330.39 683.807 L1329.83 683.807 L1329.27 683.807 L1328.71 683.807 L1328.15 683.807 L1327.59 683.807 L1327.03 683.807 L1326.47 683.807 L1325.92 683.807 L1325.36 683.807 L1324.8 683.807 L1324.24 683.807 L1323.68 683.807 L1323.12 683.807 L1322.56 683.807 L1322 683.807 L1321.44 683.807 L1320.88 683.807 L1320.32 683.807 L1319.76 683.807 L1319.2 683.807 L1318.65 683.807 L1318.09 683.807 L1317.53 683.807 L1316.97 683.807 L1316.41 683.807 L1315.85 683.807 L1315.29 683.807 L1314.73 683.807 L1314.17 683.807 L1313.61 683.807 L1313.05 683.807 L1312.49 683.807 L1311.93 683.807 L1311.38 683.807 L1310.82 683.807 L1310.26 683.807 L1309.7 683.807 L1309.14 683.807 L1308.58 683.807 L1308.02 683.807 L1307.46 683.807 L1306.9 683.807 L1306.34 683.807 L1305.78 683.807 L1305.22 683.807 L1304.66 683.807 L1304.1 683.807 L1303.55 683.807 L1302.99 683.807 L1302.43 683.807 L1301.87 683.807 L1301.31 683.807 L1300.75 683.807 L1300.19 683.807 L1299.63 683.807 L1299.07 683.807 L1298.51 683.807 L1297.95 683.807 L1297.39 683.807 L1296.83 683.807 L1296.28 683.807 L1295.72 683.807 L1295.16 683.807 L1294.6 683.807 L1294.04 683.807 L1293.48 683.807 L1292.92 683.807 L1292.36 683.807 L1291.8 683.807 L1291.24 683.807 L1290.68 683.807 L1290.12 683.807 L1289.56 683.807 L1289 683.807 L1288.45 683.807 L1287.89 683.807 L1287.33 683.807 L1286.77 683.807 L1286.21 683.807 L1285.65 683.807 L1285.09 683.807 L1284.53 683.807 L1283.97 683.807 L1283.41 683.807 L1282.85 683.807 L1282.29 683.807 L1281.73 683.807 L1281.18 683.807 L1280.62 683.807 L1280.06 683.807 L1279.5 683.807 L1278.94 683.807 L1278.38 683.807 L1277.82 683.807 L1277.26 683.807 L1276.7 683.807 L1276.14 683.807 L1275.58 683.807 L1275.02 683.807 L1274.46 683.807 L1273.91 683.807 L1273.35 683.807 L1272.79 683.807 L1272.23 683.807 L1271.67 683.807 L1271.11 683.807 L1270.55 683.807 L1269.99 683.807 L1269.43 683.807 L1268.87 683.807 L1268.31 683.807 L1267.75 683.807 L1267.19 683.807 L1266.63 683.807 L1266.08 683.807 L1265.52 683.807 L1264.96 683.807 L1264.4 683.807 L1263.84 683.807 L1263.28 683.807 L1262.72 683.807 L1262.16 683.807 L1261.6 683.807 L1261.04 683.807 L1260.48 683.807 L1259.92 683.807 L1259.36 683.807 L1258.81 683.807 L1258.25 683.807 L1257.69 683.807 L1257.13 683.807 L1256.57 683.807 L1256.01 683.807 L1255.45 683.807 L1254.89 683.807 L1254.33 683.807 L1253.77 683.807 L1253.21 683.807 L1252.65 683.807 L1252.09 683.807 L1251.54 683.807 L1250.98 683.807 L1250.42 683.807 L1249.86 683.807 L1249.3 683.807 L1248.74 683.807 L1248.18 683.807 L1247.62 683.807 L1247.06 683.807 L1246.5 683.807 L1245.94 683.807 L1245.38 683.807 L1244.82 683.807 L1244.26 683.807 L1243.71 683.807 L1243.15 683.807 L1242.59 683.807 L1242.03 683.807 L1241.47 683.807 L1240.91 683.807 L1240.35 683.807 L1239.79 683.807 L1239.23 683.807 L1238.67 683.807 L1238.11 683.807 L1237.55 683.807 L1236.99 683.807 L1236.44 683.807 L1235.88 683.807 L1235.32 683.807 L1234.76 683.807 L1234.2 683.807 L1233.64 683.807 L1233.08 683.807 L1232.52 683.807 L1231.96 683.807 L1231.4 683.807 L1230.84 683.807 L1230.28 683.807 L1229.72 683.807 L1229.17 683.807 L1228.61 683.807 L1228.05 683.807 L1227.49 683.807 L1226.93 683.807 L1226.37 683.807 L1225.81 683.807 L1225.25 683.807 L1224.69 683.807 L1224.13 683.807 L1223.57 683.807 L1223.01 683.807 L1222.45 683.807 L1221.89 683.807 L1221.34 683.807 L1220.78 683.807 L1220.22 683.807 L1219.66 683.807 L1219.1 683.807 L1218.54 683.807 L1217.98 683.807 L1217.42 683.807 L1216.86 683.807 L1216.3 683.807 L1215.74 683.807 L1215.18 683.807 L1214.62 683.807 L1214.07 683.807 L1213.51 683.807 L1212.95 683.807 L1212.39 683.807 L1211.83 683.807 L1211.27 683.807 L1210.71 683.807 L1210.15 683.807 L1209.59 683.807 L1209.03 683.807 L1208.47 683.807 L1207.91 683.807 L1207.35 683.807 L1206.8 683.807 L1206.24 683.807 L1205.68 683.807 L1205.12 683.807 L1204.56 683.807 L1204 683.807 L1203.44 683.807 L1202.88 683.807 L1202.32 683.807 L1201.76 683.807 L1201.2 683.807 L1200.64 683.807 L1200.08 683.807 L1199.52 683.807 L1198.97 683.807 L1198.41 683.807 L1197.85 683.807 L1197.29 683.807 L1196.73 683.807 L1196.17 683.807 L1195.61 683.807 L1195.05 683.807 L1194.49 683.807 L1193.93 683.807 L1193.37 683.807 L1192.81 683.807 L1192.25 683.807 L1191.7 683.807 L1191.14 683.807 L1190.58 683.807 L1190.02 683.807 L1189.46 683.807 L1188.9 683.807 L1188.34 683.807 L1187.78 683.807 L1187.22 683.807 L1186.66 683.807 L1186.1 683.807 L1185.54 683.807 L1184.98 683.807 L1184.43 683.807 L1183.87 683.807 L1183.31 683.807 L1182.75 683.807 L1182.19 683.807 L1181.63 683.807 L1181.07 683.807 L1180.51 683.807 L1179.95 683.807 L1179.39 683.807 L1178.83 683.807 L1178.27 683.807 L1177.71 683.807 L1177.15 683.807 L1176.6 683.807 L1176.04 683.807 L1175.48 683.807 L1174.92 683.807 L1174.36 683.807 L1173.8 683.807 L1173.24 683.807 L1172.68 683.807 L1172.12 683.807 L1171.56 683.807 L1171 683.807 L1170.44 683.807 L1169.88 683.807 L1169.33 683.807 L1168.77 683.807 L1168.21 683.807 L1167.65 683.807 L1167.09 683.807 L1166.53 683.807 L1165.97 683.807 L1165.41 683.807 L1164.85 683.807 L1164.29 683.807 L1163.73 683.807 L1163.17 683.807 L1162.61 683.807 L1162.05 683.807 L1161.5 683.807 L1160.94 683.807 L1160.38 683.807 L1159.82 683.807 L1159.26 683.807 L1158.7 683.807 L1158.14 683.807 L1157.58 683.807 L1157.02 683.807 L1156.46 683.807 L1155.9 683.807 L1155.34 683.807 L1154.78 683.807 L1154.23 683.807 L1153.67 683.807 L1153.11 683.807 L1152.55 683.807 L1151.99 683.807 L1151.43 683.807 L1150.87 683.807 L1150.31 683.807 L1149.75 683.807 L1149.19 683.807 L1148.63 683.807 L1148.07 683.807 L1147.51 683.807 L1146.96 683.807 L1146.4 683.807 L1145.84 683.807 L1145.28 683.807 L1144.72 683.807 L1144.16 683.807 L1143.6 683.807 L1143.04 683.807 L1142.48 683.807 L1141.92 683.807 L1141.36 683.807 L1140.8 683.807 L1140.24 683.807 L1139.68 683.807 L1139.13 683.807 L1138.57 683.807 L1138.01 683.807 L1137.45 683.807 L1136.89 683.807 L1136.33 683.807 L1135.77 683.807 L1135.21 683.807 L1134.65 683.807 L1134.09 683.807 L1133.53 683.807 L1132.97 683.807 L1132.41 683.807 L1131.86 683.807 L1131.3 683.807 L1130.74 683.807 L1130.18 683.807 L1129.62 683.807 L1129.06 683.807 L1128.5 683.807 L1127.94 683.807 L1127.38 683.807 L1126.82 683.807 L1126.26 683.807 L1125.7 683.807 L1125.14 683.807 L1124.59 683.807 L1124.03 683.807 L1123.47 683.807 L1122.91 683.807 L1122.35 683.807 L1121.79 683.807 L1121.23 683.807 L1120.67 683.807 L1120.11 683.807 L1119.55 683.807 L1118.99 683.807 L1118.43 683.807 L1117.87 683.807 L1117.31 683.807 L1116.76 683.807 L1116.2 683.807 L1115.64 683.807 L1115.08 683.807 L1114.52 683.807 L1113.96 683.807 L1113.4 683.807 L1112.84 683.807 L1112.28 683.807 L1111.72 683.807 L1111.16 683.807 L1110.6 683.807 L1110.04 683.807 L1109.49 683.807 L1108.93 683.807 L1108.37 683.807 L1107.81 683.807 L1107.25 683.807 L1106.69 683.807 L1106.13 683.807 L1105.57 683.807 L1105.01 683.807 L1104.45 683.807 L1103.89 683.807 L1103.33 683.807 L1102.77 683.807 L1102.22 683.807 L1101.66 683.807 L1101.1 683.807 L1100.54 683.807 L1099.98 683.807 L1099.42 683.807 L1098.86 683.807 L1098.3 683.807 L1097.74 683.807 L1097.18 683.807 L1096.62 683.807 L1096.06 683.807 L1095.5 683.807 L1094.94 683.807 L1094.39 683.807 L1093.83 683.807 L1093.27 683.807 L1092.71 683.807 L1092.15 683.807 L1091.59 683.807 L1091.03 683.807 L1090.47 683.807 L1089.91 683.807 L1089.35 683.807 L1088.79 683.807 L1088.23 683.807 L1087.67 683.807 L1087.12 683.807 L1086.56 683.807 L1086 683.807 L1085.44 683.807 L1084.88 683.807 L1084.32 683.807 L1083.76 683.807 L1083.2 683.807 L1082.64 683.807 L1082.08 683.807 L1081.52 683.807 L1080.96 683.807 L1080.4 683.807 L1079.85 683.807 L1079.29 683.807 L1078.73 683.807 L1078.17 683.807 L1077.61 683.807 L1077.05 683.807 L1076.49 683.807 L1075.93 683.807 L1075.37 683.807 L1074.81 683.807 L1074.25 683.807 L1073.69 683.807 L1073.13 683.807 L1072.57 683.807 L1072.02 683.807 L1071.46 683.807 L1070.9 683.807 L1070.34 683.807 L1069.78 683.807 L1069.22 683.807 L1068.66 683.807 L1068.1 683.807 L1067.54 683.807 L1066.98 683.807 L1066.42 683.807 L1065.86 683.807 L1065.3 683.807 L1064.75 683.807 L1064.19 683.807 L1063.63 683.807 L1063.07 683.807 L1062.51 683.807 L1061.95 683.807 L1061.39 683.807 L1060.83 683.807 L1060.27 683.807 L1059.71 683.807 L1059.15 683.807 L1058.59 683.807 L1058.03 683.807 L1057.48 683.807 L1056.92 683.807 L1056.36 683.807 L1055.8 683.807 L1055.24 683.807 L1054.68 683.807 L1054.12 683.807 L1053.56 683.807 L1053 683.807 L1052.44 683.807 L1051.88 683.807 L1051.32 683.807 L1050.76 683.807 L1050.2 683.807 L1049.65 683.807 L1049.09 683.807 L1048.53 683.807 L1047.97 683.807 L1047.41 683.807 L1046.85 683.807 L1046.29 683.807 L1045.73 683.807 L1045.17 683.807 L1044.61 683.807 L1044.05 683.807 L1043.49 683.807 L1042.93 683.807 L1042.38 683.807 L1041.82 683.807 L1041.26 683.807 L1040.7 683.807 L1040.14 683.807 L1039.58 683.807 L1039.02 683.807 L1038.46 683.807 L1037.9 683.807 L1037.34 683.807 L1036.78 683.807 L1036.22 683.807 L1035.66 683.807 L1035.1 683.807 L1034.55 683.807 L1033.99 683.807 L1033.43 683.807 L1032.87 683.807 L1032.31 683.807 L1031.75 683.807 L1031.19 683.807 L1030.63 683.807 L1030.07 683.807 L1029.51 683.807 L1028.95 683.807 L1028.39 683.807 L1027.83 683.807 L1027.28 683.807 L1026.72 683.807 L1026.16 683.807 L1025.6 683.807 L1025.04 683.807 L1024.48 683.807 L1023.92 683.807 L1023.36 683.807 L1022.8 683.807 L1022.24 683.807 L1021.68 683.807 L1021.12 683.807 L1020.56 683.807 L1020.01 683.807 L1019.45 683.807 L1018.89 683.807 L1018.33 683.807 L1017.77 683.807 L1017.21 683.807 L1016.65 683.807 L1016.09 683.807 L1015.53 683.807 L1014.97 683.807 L1014.41 683.807 L1013.85 683.807 L1013.29 683.807 L1012.73 683.807 L1012.18 683.807 L1011.62 683.807 L1011.06 683.807 L1010.5 683.807 L1009.94 683.807 L1009.38 683.807 L1008.82 683.807 L1008.26 683.807 L1007.7 683.807 L1007.14 683.807 L1006.58 683.807 L1006.02 683.807 L1005.46 683.807 L1004.91 683.807 L1004.35 683.807 L1003.79 683.807 L1003.23 683.807 L1002.67 683.807 L1002.11 683.807 L1001.55 683.807 L1000.99 683.807 L1000.43 683.807 L999.872 683.807 L999.313 683.807 L998.754 683.807 L998.194 683.807 L997.635 683.807 L997.076 683.807 L996.517 683.807 L995.957 683.807 L995.398 683.807 L994.839 683.807 L994.28 683.807 L993.72 683.807 L993.161 683.807 L992.602 683.807 L992.043 683.807 L991.483 683.807 L990.924 683.807 L990.365 683.807 L989.806 683.807 L989.246 683.807 L988.687 683.807 L988.128 683.807 L987.569 683.807 L987.009 683.807 L986.45 683.807 L985.891 683.807 L985.332 683.807 L984.772 683.807 L984.213 683.807 L983.654 683.807 L983.095 683.807 L982.535 683.807 L981.976 683.807 L981.417 683.807 L980.858 683.807 L980.298 683.807 L979.739 683.807 L979.18 683.807 L978.621 683.807 L978.061 683.807 L977.502 683.807 L976.943 683.807 L976.384 683.807 L975.824 683.807 L975.265 683.807 L974.706 683.807 L974.147 683.807 L973.587 683.807 L973.028 683.807 L972.469 683.807 L971.91 683.807 L971.35 683.807 L970.791 683.807 L970.232 683.807 L969.673 683.807 L969.113 683.807 L968.554 683.807 L967.995 683.807 L967.436 683.807 L966.876 683.807 L966.317 683.807 L965.758 683.807 L965.199 683.807 L964.639 683.807 L964.08 683.807 L963.521 683.807 L962.962 683.807 L962.402 683.807 L961.843 683.807 L961.284 683.807 L960.725 683.807 L960.165 683.807 L959.606 683.807 L959.047 683.807 L958.488 683.807 L957.928 683.807 L957.369 683.807 L956.81 683.807 L956.251 683.807 L955.691 683.807 L955.132 683.807 L954.573 683.807 L954.014 683.807 L953.454 683.807 L952.895 683.807 L952.336 683.807 L951.777 683.807 L951.217 683.807 L950.658 683.807 L950.099 683.807 L949.54 683.807 L948.98 683.807 L948.421 683.807 L947.862 683.807 L947.303 683.807 L946.743 683.807 L946.184 683.807 L945.625 683.807 L945.066 683.807 L944.506 683.807 L943.947 683.807 L943.388 683.807 L942.829 683.807 L942.269 683.807 L941.71 683.807 L941.151 683.807 L940.592 683.807 L940.032 683.807 L939.473 683.807 L938.914 683.807 L938.355 683.807 L937.795 683.807 L937.236 683.807 L936.677 683.807 L936.118 683.807 L935.558 683.807 L934.999 683.807 L934.44 683.807 L933.881 683.807 L933.321 683.807 L932.762 683.807 L932.203 683.807 L931.644 683.807 L931.084 683.807 L930.525 683.807 L929.966 683.807 L929.406 683.807 L928.847 683.807 L928.288 683.807 L927.729 683.807 L927.169 683.807 L926.61 683.807 L926.051 683.807 L925.492 683.807 L924.932 683.807 L924.373 683.807 L923.814 683.807 L923.255 683.807 L922.695 683.807 L922.136 683.807 L921.577 683.807 L921.018 683.807 L920.458 683.807 L919.899 683.807 L919.34 683.807 L918.781 683.807 L918.221 683.807 L917.662 683.807 L917.103 683.807 L916.544 683.807 L915.984 683.807 L915.425 683.807 L914.866 683.807 L914.307 683.807 L913.747 683.807 L913.188 683.807 L912.629 683.807 L912.07 683.807 L911.51 683.807 L910.951 683.807 L910.392 683.807 L909.833 683.807 L909.273 683.807 L908.714 683.807 L908.155 683.807 L907.596 683.807 L907.036 683.807 L906.477 683.807 L905.918 683.807 L905.359 683.807 L904.799 683.807 L904.24 683.807 L903.681 683.807 L903.122 683.807 L902.562 683.807 L902.003 683.807 L901.444 683.807 L900.885 683.807 L900.325 683.807 L899.766 683.807 L899.207 683.807 L898.648 683.807 L898.088 683.807 L897.529 683.807 L896.97 683.807 L896.411 683.807 L895.851 683.807 L895.292 683.807 L894.733 683.807 L894.174 683.807 L893.614 683.807 L893.055 683.807 L892.496 683.807 L891.937 683.807 L891.377 683.807 L890.818 683.807 L890.259 683.807 L889.7 683.807 L889.14 683.807 L888.581 683.807 L888.022 683.807 L887.463 683.807 L886.903 683.807 L886.344 683.807 L885.785 683.807 L885.226 683.807 L884.666 683.807 L884.107 683.807 L883.548 683.807 L882.989 683.807 L882.429 683.807 L881.87 683.807 L881.311 683.807 L880.752 683.807 L880.192 683.807 L879.633 683.807 L879.074 683.807 L878.515 683.807 L877.955 683.807 L877.396 683.807 L876.837 683.807 L876.278 683.807 L875.718 683.807 L875.159 683.807 L874.6 683.807 L874.041 683.807 L873.481 683.807 L872.922 683.807 L872.363 683.807 L871.804 683.807 L871.244 683.807 L870.685 683.807 L870.126 683.807 L869.567 683.807 L869.007 683.807 L868.448 683.807 L867.889 683.807 L867.33 683.807 L866.77 683.807 L866.211 683.807 L865.652 683.807 L865.093 683.807 L864.533 683.807 L863.974 683.807 L863.415 683.807 L862.856 683.807 L862.296 683.807 L861.737 683.807 L861.178 683.807 L860.619 683.807 L860.059 683.807 L859.5 683.807 L858.941 683.807 L858.382 683.807 L857.822 683.807 L857.263 683.807 L856.704 683.807 L856.145 683.807 L855.585 683.807 L855.026 683.807 L854.467 683.807 L853.908 683.807 L853.348 683.807 L852.789 683.807 L852.23 683.807 L851.671 683.807 L851.111 683.807 L850.552 683.807 L849.993 683.807 L849.434 683.807 L848.874 683.807 L848.315 683.807 L847.756 683.807 L847.197 683.807 L846.637 683.807 L846.078 683.807 L845.519 683.807 L844.96 683.807 L844.4 683.807 L843.841 683.807 L843.282 683.807 L842.723 683.807 L842.163 683.807 L841.604 683.807 L841.045 683.807 L840.486 683.807 L839.926 683.807 L839.367 683.807 L838.808 683.807 L838.249 683.807 L837.689 683.807 L837.13 683.807 L836.571 683.807 L836.012 683.807 L835.452 683.807 L834.893 683.807 L834.334 683.807 L833.775 683.807 L833.215 683.807 L832.656 683.807 L832.097 683.807 L831.538 683.807 L830.978 683.807 L830.419 683.807 L829.86 683.807 L829.301 683.807 L828.741 683.807 L828.182 683.807 L827.623 683.807 L827.064 683.807 L826.504 683.807 L825.945 683.807 L825.386 683.807 L824.827 683.807 L824.267 683.807 L823.708 683.807 L823.149 683.807 L822.59 683.807 L822.03 683.807 L821.471 683.807 L820.912 683.807 L820.353 683.807 L819.793 683.807 L819.234 683.807 L818.675 683.807 L818.116 683.807 L817.556 683.807 L816.997 683.807 L816.438 683.807 L815.879 683.807 L815.319 683.807 L814.76 683.807 L814.201 683.807 L813.642 683.807 L813.082 683.807 L812.523 683.807 L811.964 683.807 L811.405 683.807 L810.845 683.807 L810.286 683.807 L809.727 683.807 L809.168 683.807 L808.608 683.807 L808.049 683.807 L807.49 683.807 L806.931 683.807 L806.371 683.807 L805.812 683.807 L805.253 683.807 L804.693 683.807 L804.134 683.807 L803.575 683.807 L803.016 683.807 L802.456 683.807 L801.897 683.807 L801.338 683.807 L800.779 683.807 L800.219 683.807 L799.66 683.807 L799.101 683.807 L798.542 683.807 L797.982 683.807 L797.423 683.807 L796.864 683.807 L796.305 683.807 L795.745 683.807 L795.186 683.807 L794.627 683.807 L794.068 683.807 L793.508 683.807 L792.949 683.807 L792.39 683.807 L791.831 683.807 L791.271 683.807 L790.712 683.807 L790.153 683.807 L789.594 683.807 L789.034 683.807 L788.475 683.807 L787.916 683.807 L787.357 683.807 L786.797 683.807 L786.238 683.807 L785.679 683.807 L785.12 683.807 L784.56 683.807 L784.001 683.807 L783.442 683.807 L782.883 683.807 L782.323 683.807 L781.764 683.807 L781.205 683.807 L780.646 683.807 L780.086 683.807 L779.527 683.807 L778.968 683.807 L778.409 683.807 L777.849 683.807 L777.29 683.807 L776.731 683.807 L776.172 683.807 L775.612 683.807 L775.053 683.807 L774.494 683.807 L773.935 683.807 L773.375 683.807 L772.816 683.807 L772.257 683.807 L771.698 683.807 L771.138 683.807 L770.579 683.807 L770.02 683.807 L769.461 683.807 L768.901 683.807 L768.342 683.807 L767.783 683.807 L767.224 683.807 L766.664 683.807 L766.105 683.807 L765.546 683.807 L764.987 683.807 L764.427 683.807 L763.868 683.807 L763.309 683.807 L762.75 683.807 L762.19 683.807 L761.631 683.807 L761.072 683.807 L760.513 683.807 L759.953 683.807 L759.394 683.807 L758.835 683.807 L758.276 683.807 L757.716 683.807 L757.157 683.807 L756.598 683.807 L756.039 683.807 L755.479 683.807 L754.92 683.807 L754.361 683.807 L753.802 683.807 L753.242 683.807 L752.683 683.807 L752.124 683.807 L751.565 683.807 L751.005 683.807 L750.446 683.807 L749.887 683.807 L749.328 683.807 L748.768 683.807 L748.209 683.807 L747.65 683.807 L747.091 683.807 L746.531 683.807 L745.972 683.807 L745.413 683.807 L744.854 683.807 L744.294 683.807 L743.735 683.807 L743.176 683.807 L742.617 683.807 L742.057 683.807 L741.498 683.807 L740.939 683.807 L740.38 683.807 L739.82 683.807 L739.261 683.807 L738.702 683.807 L738.143 683.807 L737.583 683.807 L737.024 683.807 L736.465 683.807 L735.906 683.807 L735.346 683.807 L734.787 683.807 L734.228 683.807 L733.669 683.807 L733.109 683.807 L732.55 683.807 L731.991 683.807 L731.432 683.807 L730.872 683.807 L730.313 683.807 L729.754 683.807 L729.195 683.807 L728.635 683.807 L728.076 683.807 L727.517 683.807 L726.958 683.807 L726.398 683.807 L725.839 683.807 L725.28 683.807 L724.721 683.807 L724.161 683.807 L723.602 683.807 L723.043 683.807 L722.484 683.807 L721.924 683.807 L721.365 683.807 L720.806 683.807 L720.247 683.807  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip573)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.566 720.806,684.566 721.365,684.566 721.924,684.566 722.484,684.566 723.043,684.566 723.602,684.566 724.161,684.566 724.721,684.566 725.28,684.566 725.839,684.566 726.398,684.566 726.958,684.566 727.517,684.566 728.076,684.566 728.635,684.566 729.195,684.566 729.754,684.566 730.313,684.566 730.872,684.566 731.432,684.566 731.991,684.566 732.55,684.566 733.109,684.566 733.669,684.566 734.228,684.566 734.787,684.566 735.346,684.566 735.906,684.566 736.465,684.566 737.024,684.566 737.583,684.566 738.143,684.566 738.702,684.566 739.261,684.566 739.82,684.566 740.38,684.566 740.939,684.566 741.498,684.566 742.057,684.566 742.617,684.566 743.176,684.566 743.735,684.566 744.294,684.566 744.854,684.566 745.413,684.566 745.972,684.566 746.531,684.566 747.091,684.566 747.65,684.566 748.209,684.566 748.768,684.566 749.328,684.566 749.887,684.566 750.446,684.566 751.005,684.566 751.565,684.566 752.124,684.566 752.683,684.566 753.242,684.566 753.802,684.566 754.361,684.566 754.92,684.566 755.479,684.566 756.039,684.566 756.598,684.566 757.157,684.566 757.716,684.566 758.276,684.566 758.835,684.566 759.394,684.566 759.953,684.566 760.513,684.566 761.072,684.566 761.631,684.566 762.19,684.566 762.75,684.566 763.309,684.566 763.868,684.566 764.427,684.566 764.987,684.566 765.546,684.566 766.105,684.566 766.664,684.566 767.224,684.566 767.783,684.566 768.342,684.566 768.901,684.566 769.461,684.566 770.02,684.566 770.579,684.566 771.138,684.566 771.698,684.566 772.257,684.566 772.816,684.566 773.375,684.566 773.935,684.566 774.494,684.566 775.053,684.566 775.612,684.566 776.172,684.566 776.731,684.566 777.29,684.566 777.849,684.566 778.409,684.566 778.968,684.566 779.527,684.566 780.086,684.566 780.646,684.566 781.205,684.566 781.764,684.566 782.323,684.566 782.883,684.566 783.442,684.566 784.001,684.566 784.56,684.566 785.12,684.566 785.679,684.566 786.238,684.566 786.797,684.566 787.357,684.566 787.916,684.566 788.475,684.566 789.034,684.566 789.594,684.566 790.153,684.566 790.712,684.566 791.271,684.566 791.831,684.566 792.39,684.566 792.949,684.566 793.508,684.566 794.068,684.566 794.627,684.566 795.186,684.566 795.745,684.566 796.305,684.566 796.864,684.566 797.423,684.566 797.982,684.566 798.542,684.566 799.101,684.566 799.66,684.566 800.219,684.566 800.779,684.566 801.338,684.566 801.897,684.566 802.456,684.566 803.016,684.566 803.575,684.566 804.134,684.566 804.693,684.566 805.253,684.566 805.812,684.566 806.371,684.566 806.931,684.566 807.49,684.566 808.049,684.566 808.608,684.566 809.168,684.566 809.727,684.566 810.286,684.566 810.845,684.566 811.405,684.566 811.964,684.566 812.523,684.566 813.082,684.566 813.642,684.566 814.201,684.566 814.76,684.566 815.319,684.566 815.879,684.566 816.438,684.566 816.997,684.566 817.556,684.566 818.116,684.566 818.675,684.566 819.234,684.566 819.793,684.566 820.353,684.566 820.912,684.566 821.471,684.566 822.03,684.566 822.59,684.566 823.149,684.566 823.708,684.566 824.267,684.566 824.827,684.566 825.386,684.566 825.945,684.566 826.504,684.566 827.064,684.566 827.623,684.566 828.182,684.566 828.741,684.566 829.301,684.566 829.86,684.566 830.419,684.566 830.978,684.566 831.538,684.566 832.097,684.566 832.656,684.566 833.215,684.566 833.775,684.566 834.334,684.566 834.893,684.566 835.452,684.566 836.012,684.566 836.571,684.566 837.13,684.566 837.689,684.566 838.249,684.566 838.808,684.566 839.367,684.566 839.926,684.566 840.486,684.566 841.045,684.566 841.604,684.566 842.163,684.566 842.723,684.566 843.282,684.566 843.841,684.566 844.4,684.566 844.96,684.566 845.519,684.566 846.078,684.566 846.637,684.566 847.197,684.566 847.756,684.566 848.315,684.566 848.874,684.566 849.434,684.566 849.993,684.566 850.552,684.566 851.111,684.566 851.671,684.566 852.23,684.566 852.789,684.566 853.348,684.566 853.908,684.566 854.467,684.566 855.026,684.566 855.585,684.566 856.145,684.566 856.704,684.566 857.263,684.566 857.822,684.566 858.382,684.566 858.941,684.566 859.5,684.566 860.059,684.566 860.619,684.566 861.178,684.566 861.737,684.566 862.296,684.566 862.856,684.566 863.415,684.566 863.974,684.566 864.533,684.566 865.093,684.566 865.652,684.566 866.211,684.566 866.77,684.566 867.33,684.566 867.889,684.566 868.448,684.566 869.007,684.566 869.567,684.566 870.126,684.566 870.685,684.566 871.244,684.566 871.804,684.566 872.363,684.566 872.922,684.566 873.481,684.566 874.041,684.566 874.6,684.566 875.159,684.566 875.718,684.566 876.278,684.566 876.837,684.566 877.396,684.566 877.955,684.566 878.515,684.566 879.074,684.566 879.633,684.566 880.192,684.566 880.752,684.566 881.311,684.566 881.87,684.566 882.429,684.566 882.989,684.566 883.548,684.566 884.107,684.566 884.666,684.566 885.226,684.566 885.785,684.566 886.344,684.566 886.903,684.566 887.463,684.566 888.022,684.566 888.581,684.566 889.14,684.566 889.7,684.566 890.259,684.566 890.818,684.566 891.377,684.566 891.937,684.566 892.496,684.566 893.055,684.566 893.614,684.566 894.174,684.566 894.733,684.566 895.292,684.566 895.851,684.566 896.411,684.566 896.97,684.566 897.529,684.566 898.088,684.566 898.648,684.566 899.207,684.566 899.766,684.566 900.325,684.566 900.885,684.566 901.444,684.566 902.003,684.566 902.562,684.566 903.122,684.566 903.681,684.566 904.24,684.566 904.799,684.566 905.359,684.566 905.918,684.566 906.477,684.566 907.036,684.566 907.596,684.566 908.155,684.566 908.714,684.566 909.273,684.566 909.833,684.566 910.392,684.566 910.951,684.566 911.51,684.566 912.07,684.566 912.629,684.566 913.188,684.566 913.747,684.566 914.307,684.566 914.866,684.566 915.425,684.566 915.984,684.566 916.544,684.566 917.103,684.566 917.662,684.566 918.221,684.566 918.781,684.566 919.34,684.566 919.899,684.566 920.458,684.566 921.018,684.566 921.577,684.566 922.136,684.566 922.695,684.566 923.255,684.566 923.814,684.566 924.373,684.566 924.932,684.566 925.492,684.566 926.051,684.566 926.61,684.566 927.169,684.566 927.729,684.566 928.288,684.566 928.847,684.566 929.406,684.566 929.966,684.566 930.525,684.566 931.084,684.566 931.644,684.566 932.203,684.566 932.762,684.566 933.321,684.566 933.881,684.566 934.44,684.566 934.999,684.566 935.558,684.566 936.118,684.566 936.677,684.566 937.236,684.566 937.795,684.566 938.355,684.566 938.914,684.566 939.473,684.566 940.032,684.566 940.592,684.566 941.151,684.566 941.71,684.566 942.269,684.566 942.829,684.566 943.388,684.566 943.947,684.566 944.506,684.566 945.066,684.566 945.625,684.566 946.184,684.566 946.743,684.566 947.303,684.566 947.862,684.566 948.421,684.566 948.98,684.566 949.54,684.566 950.099,684.566 950.658,684.566 951.217,684.566 951.777,684.566 952.336,684.566 952.895,684.566 953.454,684.566 954.014,684.566 954.573,684.566 955.132,684.566 955.691,684.566 956.251,684.566 956.81,684.566 957.369,684.566 957.928,684.566 958.488,684.566 959.047,684.566 959.606,684.566 960.165,684.566 960.725,684.566 961.284,684.566 961.843,684.566 962.402,684.566 962.962,684.566 963.521,684.566 964.08,684.566 964.639,684.566 965.199,684.566 965.758,684.566 966.317,684.566 966.876,684.566 967.436,684.566 967.995,684.566 968.554,684.566 969.113,684.566 969.673,684.566 970.232,684.566 970.791,684.566 971.35,684.566 971.91,684.566 972.469,684.566 973.028,684.566 973.587,684.566 974.147,684.566 974.706,684.566 975.265,684.566 975.824,684.566 976.384,684.566 976.943,684.566 977.502,684.566 978.061,684.566 978.621,684.566 979.18,684.566 979.739,684.566 980.298,684.566 980.858,684.566 981.417,684.566 981.976,684.566 982.535,684.566 983.095,684.566 983.654,684.566 984.213,684.566 984.772,684.566 985.332,684.566 985.891,684.566 986.45,684.566 987.009,684.566 987.569,684.566 988.128,684.566 988.687,684.566 989.246,684.566 989.806,684.566 990.365,684.566 990.924,684.566 991.483,684.566 992.043,684.566 992.602,684.566 993.161,684.566 993.72,684.566 994.28,684.566 994.839,684.566 995.398,684.566 995.957,684.566 996.517,684.566 997.076,684.566 997.635,684.566 998.194,684.566 998.754,684.566 999.313,684.566 999.872,684.566 1000.43,684.566 1000.99,684.566 1001.55,684.566 1002.11,684.566 1002.67,684.566 1003.23,684.566 1003.79,684.566 1004.35,684.566 1004.91,684.566 1005.46,684.566 1006.02,684.566 1006.58,684.566 1007.14,684.566 1007.7,684.566 1008.26,684.566 1008.82,684.566 1009.38,684.566 1009.94,684.566 1010.5,684.566 1011.06,684.566 1011.62,684.566 1012.18,684.566 1012.73,684.566 1013.29,684.566 1013.85,684.566 1014.41,684.566 1014.97,684.566 1015.53,684.566 1016.09,684.566 1016.65,684.566 1017.21,684.566 1017.77,684.566 1018.33,684.566 1018.89,684.566 1019.45,684.566 1020.01,684.566 1020.56,684.566 1021.12,684.566 1021.68,684.566 1022.24,684.566 1022.8,684.566 1023.36,684.566 1023.92,684.566 1024.48,684.566 1025.04,684.566 1025.6,684.566 1026.16,684.566 1026.72,684.566 1027.28,684.566 1027.83,684.566 1028.39,684.566 1028.95,684.566 1029.51,684.566 1030.07,684.566 1030.63,684.566 1031.19,684.566 1031.75,684.566 1032.31,684.566 1032.87,684.566 1033.43,684.566 1033.99,684.566 1034.55,684.566 1035.1,684.566 1035.66,684.566 1036.22,684.566 1036.78,684.566 1037.34,684.566 1037.9,684.566 1038.46,684.566 1039.02,684.566 1039.58,684.566 1040.14,684.566 1040.7,684.566 1041.26,684.566 1041.82,684.566 1042.38,684.566 1042.93,684.566 1043.49,684.566 1044.05,684.566 1044.61,684.566 1045.17,684.566 1045.73,684.566 1046.29,684.566 1046.85,684.566 1047.41,684.566 1047.97,684.566 1048.53,684.566 1049.09,684.566 1049.65,684.566 1050.2,684.566 1050.76,684.566 1051.32,684.566 1051.88,684.566 1052.44,684.566 1053,684.566 1053.56,684.566 1054.12,684.566 1054.68,684.566 1055.24,684.566 1055.8,684.566 1056.36,684.566 1056.92,684.566 1057.48,684.566 1058.03,684.566 1058.59,684.566 1059.15,684.566 1059.71,684.566 1060.27,684.566 1060.83,684.566 1061.39,684.566 1061.95,684.566 1062.51,684.566 1063.07,684.566 1063.63,684.566 1064.19,684.566 1064.75,684.566 1065.3,684.566 1065.86,684.566 1066.42,684.566 1066.98,684.566 1067.54,684.566 1068.1,684.566 1068.66,684.566 1069.22,684.566 1069.78,684.566 1070.34,684.566 1070.9,684.566 1071.46,684.566 1072.02,684.566 1072.57,684.566 1073.13,684.566 1073.69,684.566 1074.25,684.566 1074.81,684.566 1075.37,684.566 1075.93,684.566 1076.49,684.566 1077.05,684.566 1077.61,684.566 1078.17,684.566 1078.73,684.566 1079.29,684.566 1079.85,684.566 1080.4,684.566 1080.96,684.566 1081.52,684.566 1082.08,684.566 1082.64,684.566 1083.2,684.566 1083.76,684.566 1084.32,684.566 1084.88,684.566 1085.44,684.566 1086,684.566 1086.56,684.566 1087.12,684.566 1087.67,684.566 1088.23,684.566 1088.79,684.566 1089.35,684.566 1089.91,684.566 1090.47,684.566 1091.03,684.566 1091.59,684.566 1092.15,684.566 1092.71,684.566 1093.27,684.566 1093.83,684.566 1094.39,684.566 1094.94,684.566 1095.5,684.566 1096.06,684.566 1096.62,684.566 1097.18,684.566 1097.74,684.566 1098.3,684.566 1098.86,684.566 1099.42,684.566 1099.98,684.566 1100.54,684.566 1101.1,684.566 1101.66,684.566 1102.22,684.566 1102.77,684.566 1103.33,684.566 1103.89,684.566 1104.45,684.566 1105.01,684.566 1105.57,684.566 1106.13,684.566 1106.69,684.566 1107.25,684.566 1107.81,684.566 1108.37,684.566 1108.93,684.566 1109.49,684.566 1110.04,684.566 1110.6,684.566 1111.16,684.566 1111.72,684.566 1112.28,684.566 1112.84,684.566 1113.4,684.566 1113.96,684.566 1114.52,684.566 1115.08,684.566 1115.64,684.566 1116.2,684.566 1116.76,684.566 1117.31,684.566 1117.87,684.566 1118.43,684.566 1118.99,684.566 1119.55,684.566 1120.11,684.566 1120.67,684.566 1121.23,684.566 1121.79,684.566 1122.35,684.566 1122.91,684.566 1123.47,684.566 1124.03,684.566 1124.59,684.566 1125.14,684.566 1125.7,684.566 1126.26,684.566 1126.82,684.566 1127.38,684.566 1127.94,684.566 1128.5,684.566 1129.06,684.566 1129.62,684.566 1130.18,684.566 1130.74,684.566 1131.3,684.566 1131.86,684.566 1132.41,684.566 1132.97,684.566 1133.53,684.566 1134.09,684.566 1134.65,684.566 1135.21,684.566 1135.77,684.566 1136.33,684.566 1136.89,684.566 1137.45,684.566 1138.01,684.566 1138.57,684.566 1139.13,684.566 1139.68,684.566 1140.24,684.566 1140.8,684.566 1141.36,684.566 1141.92,684.566 1142.48,684.566 1143.04,684.566 1143.6,684.566 1144.16,684.566 1144.72,684.566 1145.28,684.566 1145.84,684.566 1146.4,684.566 1146.96,684.566 1147.51,684.566 1148.07,684.566 1148.63,684.566 1149.19,684.566 1149.75,684.566 1150.31,684.566 1150.87,684.566 1151.43,684.566 1151.99,684.566 1152.55,684.566 1153.11,684.566 1153.67,684.566 1154.23,684.566 1154.78,684.566 1155.34,684.566 1155.9,684.566 1156.46,684.566 1157.02,684.566 1157.58,684.566 1158.14,684.566 1158.7,684.566 1159.26,684.566 1159.82,684.566 1160.38,684.566 1160.94,684.566 1161.5,684.566 1162.05,684.566 1162.61,684.566 1163.17,684.566 1163.73,684.566 1164.29,684.566 1164.85,684.566 1165.41,684.566 1165.97,684.566 1166.53,684.566 1167.09,684.566 1167.65,684.566 1168.21,684.566 1168.77,684.566 1169.33,684.566 1169.88,684.566 1170.44,684.566 1171,684.566 1171.56,684.566 1172.12,684.566 1172.68,684.566 1173.24,684.566 1173.8,684.566 1174.36,684.566 1174.92,684.566 1175.48,684.566 1176.04,684.566 1176.6,684.566 1177.15,684.566 1177.71,684.566 1178.27,684.566 1178.83,684.566 1179.39,684.566 1179.95,684.566 1180.51,684.566 1181.07,684.566 1181.63,684.566 1182.19,684.566 1182.75,684.566 1183.31,684.566 1183.87,684.566 1184.43,684.566 1184.98,684.566 1185.54,684.566 1186.1,684.566 1186.66,684.566 1187.22,684.566 1187.78,684.566 1188.34,684.566 1188.9,684.566 1189.46,684.566 1190.02,684.566 1190.58,684.566 1191.14,684.566 1191.7,684.566 1192.25,684.566 1192.81,684.566 1193.37,684.566 1193.93,684.566 1194.49,684.566 1195.05,684.566 1195.61,684.566 1196.17,684.566 1196.73,684.566 1197.29,684.566 1197.85,684.566 1198.41,684.566 1198.97,684.566 1199.52,684.566 1200.08,684.566 1200.64,684.566 1201.2,684.566 1201.76,684.566 1202.32,684.566 1202.88,684.566 1203.44,684.566 1204,684.566 1204.56,684.566 1205.12,684.566 1205.68,684.566 1206.24,684.566 1206.8,684.566 1207.35,684.566 1207.91,684.566 1208.47,684.566 1209.03,684.566 1209.59,684.566 1210.15,684.566 1210.71,684.566 1211.27,684.566 1211.83,684.566 1212.39,684.566 1212.95,684.566 1213.51,684.566 1214.07,684.566 1214.62,684.566 1215.18,684.566 1215.74,684.566 1216.3,684.566 1216.86,684.566 1217.42,684.566 1217.98,684.566 1218.54,684.566 1219.1,684.566 1219.66,684.566 1220.22,684.566 1220.78,684.566 1221.34,684.566 1221.89,684.566 1222.45,684.566 1223.01,684.566 1223.57,684.566 1224.13,684.566 1224.69,684.566 1225.25,684.566 1225.81,684.566 1226.37,684.566 1226.93,684.566 1227.49,684.566 1228.05,684.566 1228.61,684.566 1229.17,684.566 1229.72,684.566 1230.28,684.566 1230.84,684.566 1231.4,684.566 1231.96,684.566 1232.52,684.566 1233.08,684.566 1233.64,684.566 1234.2,684.566 1234.76,684.566 1235.32,684.566 1235.88,684.566 1236.44,684.566 1236.99,684.566 1237.55,684.566 1238.11,684.566 1238.67,684.566 1239.23,684.566 1239.79,684.566 1240.35,684.566 1240.91,684.566 1241.47,684.566 1242.03,684.566 1242.59,684.566 1243.15,684.566 1243.71,684.566 1244.26,684.566 1244.82,684.566 1245.38,684.566 1245.94,684.566 1246.5,684.566 1247.06,684.566 1247.62,684.566 1248.18,684.566 1248.74,684.566 1249.3,684.566 1249.86,684.566 1250.42,684.566 1250.98,684.566 1251.54,684.566 1252.09,684.566 1252.65,684.566 1253.21,684.566 1253.77,684.566 1254.33,684.566 1254.89,684.566 1255.45,684.566 1256.01,684.566 1256.57,684.566 1257.13,684.566 1257.69,684.566 1258.25,684.566 1258.81,684.566 1259.36,684.566 1259.92,684.566 1260.48,684.566 1261.04,684.566 1261.6,684.566 1262.16,684.566 1262.72,684.566 1263.28,684.566 1263.84,684.566 1264.4,684.566 1264.96,684.566 1265.52,684.566 1266.08,684.566 1266.63,684.566 1267.19,684.566 1267.75,684.566 1268.31,684.566 1268.87,684.566 1269.43,684.566 1269.99,684.566 1270.55,684.566 1271.11,684.566 1271.67,684.566 1272.23,684.566 1272.79,684.566 1273.35,684.566 1273.91,684.566 1274.46,684.566 1275.02,684.566 1275.58,684.566 1276.14,684.566 1276.7,684.566 1277.26,684.566 1277.82,684.566 1278.38,684.566 1278.94,684.566 1279.5,684.566 1280.06,684.566 1280.62,684.566 1281.18,684.566 1281.73,684.566 1282.29,684.566 1282.85,684.566 1283.41,684.566 1283.97,684.566 1284.53,684.566 1285.09,684.566 1285.65,684.566 1286.21,684.566 1286.77,684.566 1287.33,684.566 1287.89,684.566 1288.45,684.566 1289,684.566 1289.56,684.566 1290.12,684.566 1290.68,684.566 1291.24,684.566 1291.8,684.566 1292.36,684.566 1292.92,684.566 1293.48,684.566 1294.04,684.566 1294.6,684.566 1295.16,684.566 1295.72,684.566 1296.28,684.566 1296.83,684.566 1297.39,684.566 1297.95,684.566 1298.51,684.566 1299.07,684.566 1299.63,684.566 1300.19,684.566 1300.75,684.566 1301.31,684.566 1301.87,684.566 1302.43,684.566 1302.99,684.566 1303.55,684.566 1304.1,684.566 1304.66,684.566 1305.22,684.566 1305.78,684.566 1306.34,684.566 1306.9,684.566 1307.46,684.566 1308.02,684.566 1308.58,684.566 1309.14,684.566 1309.7,684.566 1310.26,684.566 1310.82,684.566 1311.38,684.566 1311.93,684.566 1312.49,684.566 1313.05,684.566 1313.61,684.566 1314.17,684.566 1314.73,684.566 1315.29,684.566 1315.85,684.566 1316.41,684.566 1316.97,684.566 1317.53,684.566 1318.09,684.566 1318.65,684.566 1319.2,684.566 1319.76,684.566 1320.32,684.566 1320.88,684.566 1321.44,684.566 1322,684.566 1322.56,684.566 1323.12,684.566 1323.68,684.566 1324.24,684.566 1324.8,684.566 1325.36,684.566 1325.92,684.566 1326.47,684.566 1327.03,684.566 1327.59,684.566 1328.15,684.566 1328.71,684.566 1329.27,684.566 1329.83,684.566 1330.39,684.566 1330.95,684.566 1331.51,684.566 1332.07,684.566 1332.63,684.566 1333.19,684.566 1333.75,684.566 1334.3,684.566 1334.86,684.566 1335.42,684.566 1335.98,684.566 1336.54,684.566 1337.1,684.566 1337.66,684.566 1338.22,684.566 1338.78,684.566 1339.34,684.566 1339.9,684.566 1340.46,684.566 1341.02,684.566 1341.57,684.566 1342.13,684.566 1342.69,684.566 1343.25,684.566 1343.81,684.566 1344.37,684.566 1344.93,684.566 1345.49,684.566 1346.05,684.566 1346.61,684.566 1347.17,684.566 1347.73,684.566 1348.29,684.566 1348.84,684.566 1349.4,684.566 1349.96,684.566 1350.52,684.566 1351.08,684.566 1351.64,684.566 1352.2,684.566 1352.76,684.566 1353.32,684.566 1353.88,684.566 1354.44,684.566 1355,684.566 1355.56,684.566 1356.12,684.566 1356.67,684.566 1357.23,684.566 1357.79,684.566 1358.35,684.566 1358.91,684.566 1359.47,684.566 1360.03,684.566 1360.59,684.566 1361.15,684.566 1361.71,684.566 1362.27,684.566 1362.83,684.566 1363.39,684.566 1363.94,684.566 1364.5,684.566 1365.06,684.566 1365.62,684.566 1366.18,684.566 1366.74,684.566 1367.3,684.566 1367.86,684.566 1368.42,684.566 1368.98,684.566 1369.54,684.566 1370.1,684.566 1370.66,684.566 1371.21,684.566 1371.77,684.566 1372.33,684.566 1372.89,684.566 1373.45,684.566 1374.01,684.566 1374.57,684.566 1375.13,684.566 1375.69,684.566 1376.25,684.566 1376.81,684.566 1377.37,684.566 1377.93,684.566 1378.49,684.566 1379.04,684.566 1379.6,684.566 1380.16,684.566 1380.72,684.566 1381.28,684.566 1381.84,684.566 1382.4,684.566 1382.96,684.566 1383.52,684.566 1384.08,684.566 1384.64,684.566 1385.2,684.566 1385.76,684.566 1386.31,684.566 1386.87,684.566 1387.43,684.566 1387.99,684.566 1388.55,684.566 1389.11,684.566 1389.67,684.566 1390.23,684.566 1390.79,684.566 1391.35,684.566 1391.91,684.566 1392.47,684.566 1393.03,684.566 1393.58,684.566 1394.14,684.566 1394.7,684.566 1395.26,684.566 1395.82,684.566 1396.38,684.566 1396.94,684.566 1397.5,684.566 1398.06,684.566 1398.62,684.566 1399.18,684.566 1399.74,684.566 1400.3,684.566 1400.86,684.566 1401.41,684.566 1401.97,684.566 1402.53,684.566 1403.09,684.566 1403.65,684.566 1404.21,684.566 1404.77,684.566 1405.33,684.566 1405.89,684.566 1406.45,684.566 1407.01,684.566 1407.57,684.566 1408.13,684.566 1408.68,684.566 1409.24,684.566 1409.8,684.566 1410.36,684.566 1410.92,684.566 1411.48,684.566 1412.04,684.566 1412.6,684.566 1413.16,684.566 1413.72,684.566 1414.28,684.566 1414.84,684.566 1415.4,684.566 1415.95,684.566 1416.51,684.566 1417.07,684.566 1417.63,684.566 1418.19,684.566 1418.75,684.566 1419.31,684.566 1419.87,684.566 1420.43,684.566 1420.99,684.566 1421.55,684.566 1422.11,684.566 1422.67,684.566 1423.23,684.566 1423.78,684.566 1424.34,684.566 1424.9,684.566 1425.46,684.566 1426.02,684.566 1426.58,684.566 1427.14,684.566 1427.7,684.566 1428.26,684.566 1428.82,684.566 1429.38,684.566 1429.94,684.566 1430.5,684.566 1431.05,684.566 1431.61,684.566 1432.17,684.566 1432.73,684.566 1433.29,684.566 1433.85,684.566 1434.41,684.566 1434.97,684.566 1435.53,684.566 1436.09,684.566 1436.65,684.566 1437.21,684.566 1437.77,684.566 1438.33,684.566 1438.88,684.566 1439.44,684.566 1440,684.566 1440.56,684.566 1441.12,684.566 1441.68,684.566 1442.24,684.566 1442.8,684.566 1443.36,684.566 1443.92,684.566 1444.48,684.566 1445.04,684.566 1445.6,684.566 1446.15,684.566 1446.71,684.566 1447.27,684.566 1447.83,684.566 1448.39,684.566 1448.95,684.566 1449.51,684.566 1450.07,684.566 1450.63,684.566 1451.19,684.566 1451.75,684.566 1452.31,684.566 1452.87,684.566 1453.42,684.566 1453.98,684.566 1454.54,684.566 1455.1,684.566 1455.66,684.566 1456.22,684.566 1456.78,684.566 1457.34,684.566 1457.9,684.566 1458.46,684.566 1459.02,684.566 1459.58,684.566 1460.14,684.566 1460.7,684.566 1461.25,684.566 1461.81,684.566 1462.37,684.566 1462.93,684.566 1463.49,684.566 1464.05,684.566 1464.61,684.566 1465.17,684.566 1465.73,684.566 1466.29,684.566 1466.85,684.566 1467.41,684.566 1467.97,684.566 1468.52,684.566 1469.08,684.566 1469.64,684.566 1470.2,684.566 1470.76,684.566 1471.32,684.566 1471.88,684.566 1472.44,684.566 1473,684.566 1473.56,684.566 1474.12,684.566 1474.68,684.566 1475.24,684.566 1475.79,684.566 1476.35,684.566 1476.91,684.566 1477.47,684.566 1478.03,684.566 1478.59,684.566 1479.15,684.566 1479.71,684.566 1480.27,684.566 1480.83,684.566 1481.39,684.566 1481.95,684.566 1482.51,684.566 1483.07,684.566 1483.62,684.566 1484.18,684.566 1484.74,684.566 1485.3,684.566 1485.86,684.566 1486.42,684.566 1486.98,684.566 1487.54,684.566 1488.1,684.566 1488.66,684.566 1489.22,684.566 1489.78,684.566 1490.34,684.566 1490.89,684.566 1491.45,684.566 1492.01,684.566 1492.57,684.566 1493.13,684.566 1493.69,684.566 1494.25,684.566 1494.81,684.566 1495.37,684.566 1495.93,684.566 1496.49,684.566 1497.05,684.566 1497.61,684.566 1498.16,684.566 1498.72,684.566 1499.28,684.566 1499.84,684.566 1500.4,684.566 1500.96,684.566 1501.52,684.566 1502.08,684.566 1502.64,684.566 1503.2,684.566 1503.76,684.566 1504.32,684.566 1504.88,684.566 1505.44,684.566 1505.99,684.566 1506.55,684.566 1507.11,684.566 1507.67,684.566 1508.23,684.566 1508.79,684.566 1509.35,684.566 1509.91,684.566 1510.47,684.566 1511.03,684.566 1511.59,684.566 1512.15,684.566 1512.71,684.566 1513.26,684.566 1513.82,684.566 1514.38,684.566 1514.94,684.566 1515.5,684.566 1516.06,684.566 1516.62,684.566 1517.18,684.566 1517.74,684.566 1518.3,684.566 1518.86,684.566 1519.42,684.566 1519.98,684.566 1520.53,684.566 1521.09,684.566 1521.65,684.566 1522.21,684.566 1522.77,684.566 1523.33,684.566 1523.89,684.566 1524.45,684.566 1525.01,684.566 1525.57,684.566 1526.13,684.566 1526.69,684.566 1527.25,684.566 1527.81,684.566 1528.36,684.566 1528.92,684.566 1529.48,684.566 1530.04,684.566 1530.6,684.566 1531.16,684.566 1531.72,684.566 1532.28,684.566 1532.84,684.566 1533.4,684.566 1533.96,684.566 1534.52,684.566 1535.08,684.566 1535.63,684.566 1536.19,684.566 1536.75,684.566 1537.31,684.566 1537.87,684.566 1538.43,684.566 1538.99,684.566 1539.55,684.566 1540.11,684.566 1540.67,684.566 1541.23,684.566 1541.79,684.566 1542.35,684.566 1542.9,684.566 1543.46,684.566 1544.02,684.566 1544.58,684.566 1545.14,684.566 1545.7,684.566 1546.26,684.566 1546.82,684.566 1547.38,684.566 1547.94,684.566 1548.5,684.566 1549.06,684.566 1549.62,684.566 1550.18,684.566 1550.73,684.566 1551.29,684.566 1551.85,684.566 1552.41,684.566 1552.97,684.566 1553.53,684.566 1554.09,684.566 1554.65,684.566 1555.21,684.566 1555.77,684.566 1556.33,684.566 1556.89,684.566 1557.45,684.566 1558,684.566 1558.56,684.566 1559.12,684.566 1559.68,684.566 1560.24,684.566 1560.8,684.566 1561.36,684.566 1561.92,684.566 1562.48,684.566 1563.04,684.566 1563.6,684.566 1564.16,684.566 1564.72,684.566 1565.28,684.566 1565.83,684.566 1566.39,684.566 1566.95,684.566 1567.51,684.566 1568.07,684.566 1568.63,684.566 1569.19,684.566 1569.75,684.566 1570.31,684.566 1570.87,684.566 1571.43,684.566 1571.99,684.566 1572.55,684.566 1573.1,684.566 1573.66,684.566 1574.22,684.566 1574.78,684.566 1575.34,684.566 1575.9,684.566 1576.46,684.566 1577.02,684.566 1577.58,684.566 1578.14,684.566 1578.7,684.566 1579.26,684.566 1579.82,684.566 1580.37,684.566 1580.93,684.566 1581.49,684.566 1582.05,684.566 1582.61,684.566 1583.17,684.566 1583.73,684.566 1584.29,684.566 1584.85,684.566 1585.41,684.566 1585.97,684.566 1586.53,684.566 1587.09,684.566 1587.65,684.566 1588.2,684.566 1588.76,684.566 1589.32,684.566 1589.88,684.566 1590.44,684.566 1591,684.566 1591.56,684.566 1592.12,684.566 1592.68,684.566 1593.24,684.566 1593.8,684.566 1594.36,684.566 1594.92,684.566 1595.47,684.566 1596.03,684.566 1596.59,684.566 1597.15,684.566 1597.71,684.566 1598.27,684.566 1598.83,684.566 1599.39,684.566 1599.95,684.566 1600.51,684.566 1601.07,684.566 1601.63,684.566 1602.19,684.566 1602.74,684.566 1603.3,684.566 1603.86,684.566 1604.42,684.566 1604.98,684.566 1605.54,684.566 1606.1,684.566 1606.66,684.566 1607.22,684.566 1607.78,684.566 1608.34,684.566 1608.9,684.566 1609.46,684.566 1610.02,684.566 1610.57,684.566 1611.13,684.566 1611.69,684.566 1612.25,684.566 1612.81,684.566 1613.37,684.566 1613.93,684.566 1614.49,684.566 1615.05,684.566 1615.61,684.566 1616.17,684.566 1616.73,684.566 1617.29,684.566 1617.84,684.566 1618.4,684.566 1618.96,684.566 1619.52,684.566 1620.08,684.566 1620.64,684.566 1621.2,684.566 1621.76,684.566 1622.32,684.566 1622.88,684.566 1623.44,684.566 1624,684.566 1624.56,684.566 1625.11,684.566 1625.67,684.566 1626.23,684.566 1626.79,684.566 1627.35,684.566 1627.91,684.566 1628.47,684.566 1629.03,684.566 1629.59,684.566 1630.15,684.566 1630.71,684.566 1631.27,684.566 1631.83,684.566 1632.39,684.566 1632.94,684.566 1633.5,684.566 1634.06,684.566 1634.62,684.566 1635.18,684.566 1635.74,684.566 1636.3,684.566 1636.86,684.566 1637.42,684.566 1637.98,684.566 1638.54,684.566 1639.1,684.566 1639.66,684.566 1640.21,684.566 1640.77,684.566 1641.33,684.566 1641.89,684.566 1642.45,684.566 1643.01,684.566 1643.57,684.566 1644.13,684.566 1644.69,684.566 1645.25,684.566 1645.81,684.566 1646.37,684.566 1646.93,684.566 1647.48,684.566 1648.04,684.566 1648.6,684.566 1649.16,684.566 1649.72,684.566 1650.28,684.566 1650.84,684.566 1651.4,684.566 1651.96,684.566 1652.52,684.566 1653.08,684.566 1653.64,684.566 1654.2,684.566 1654.76,684.566 1655.31,684.566 1655.87,684.566 1656.43,684.566 1656.99,684.566 1657.55,684.566 1658.11,684.566 1658.67,684.566 1659.23,684.566 1659.79,684.566 1660.35,684.566 1660.91,684.566 1661.47,684.566 1662.03,684.566 1662.58,684.566 1663.14,684.566 1663.7,684.566 1664.26,684.566 1664.82,684.566 1665.38,684.566 1665.94,684.566 1666.5,684.566 1667.06,684.566 1667.62,684.566 1668.18,684.566 1668.74,684.566 1669.3,684.566 1669.85,684.566 1670.41,684.566 1670.97,684.566 1671.53,684.566 1672.09,684.566 1672.65,684.566 1673.21,684.566 1673.77,684.566 1674.33,684.566 1674.89,684.566 1675.45,684.566 1676.01,684.566 1676.57,684.566 1677.13,684.566 1677.68,684.566 1678.24,684.566 1678.8,684.566 1679.36,684.566 1679.92,684.566 1680.48,684.566 1681.04,684.566 1681.6,684.566 1682.16,684.566 1682.72,684.566 1683.28,684.566 1683.84,684.566 1684.4,684.566 1684.95,684.566 1685.51,684.566 1686.07,684.566 1686.63,684.566 1687.19,684.566 1687.75,684.566 1688.31,684.566 1688.87,684.566 1689.43,684.566 1689.99,684.566 1690.55,684.566 1691.11,684.566 1691.67,684.566 1692.23,684.566 1692.78,684.566 1693.34,684.566 1693.9,684.566 1694.46,684.566 1695.02,684.566 1695.58,684.566 1696.14,684.566 1696.7,684.566 1697.26,684.566 1697.82,684.566 1698.38,684.566 1698.94,684.566 1699.5,684.566 1700.05,684.566 1700.61,684.566 1701.17,684.566 1701.73,684.566 1702.29,684.566 1702.85,684.566 1703.41,684.566 1703.97,684.566 1704.53,684.566 1705.09,684.566 1705.65,684.566 1706.21,684.566 1706.77,684.566 1707.32,684.566 1707.88,684.566 1708.44,684.566 1709,684.566 1709.56,684.566 1710.12,684.566 1710.68,684.566 1711.24,684.566 1711.8,684.566 1712.36,684.566 1712.92,684.566 1713.48,684.566 1714.04,684.566 1714.6,684.566 1715.15,684.566 1715.71,684.566 1716.27,684.566 1716.83,684.566 1717.39,684.566 1717.95,684.566 1718.51,684.566 1719.07,684.566 1719.63,684.566 1720.19,684.566 1720.75,684.566 1721.31,684.566 1721.87,684.566 1722.42,684.566 1722.98,684.566 1723.54,684.566 1724.1,684.566 1724.66,684.566 1725.22,684.566 1725.78,684.566 1726.34,684.566 1726.9,684.566 1727.46,684.566 1728.02,684.566 1728.58,684.566 1729.14,684.566 1729.69,684.566 1730.25,684.566 1730.81,684.566 1731.37,684.566 1731.93,684.566 1732.49,684.566 1733.05,684.566 1733.61,684.566 1734.17,684.566 1734.73,684.566 1735.29,684.566 1735.85,684.566 1736.41,684.566 1736.97,684.566 1737.52,684.566 1738.08,684.566 1738.64,684.566 1739.2,684.566 1739.76,684.566 1740.32,684.566 1740.88,684.566 1741.44,684.566 1742,684.566 1742.56,684.566 1743.12,684.566 1743.68,684.566 1744.24,684.566 1744.79,684.566 1745.35,684.566 1745.91,684.566 1746.47,684.566 1747.03,684.566 1747.59,684.566 1748.15,684.566 1748.71,684.566 1749.27,684.566 1749.83,684.566 1750.39,684.566 1750.95,684.566 1751.51,684.566 1752.06,684.566 1752.62,684.566 1753.18,684.566 1753.74,684.566 1754.3,684.566 1754.86,684.566 1755.42,684.566 1755.98,684.566 1756.54,684.566 1757.1,684.566 1757.66,684.566 1758.22,684.566 1758.78,684.566 1759.34,684.566 1759.89,684.566 1760.45,684.566 1761.01,684.566 1761.57,684.566 1762.13,684.566 1762.69,684.566 1763.25,684.566 1763.81,684.566 1764.37,684.566 1764.93,684.566 1765.49,684.566 1766.05,684.566 1766.61,684.566 1767.16,684.566 1767.72,684.566 1768.28,684.566 1768.84,684.566 1769.4,684.566 1769.96,684.566 1770.52,684.566 1771.08,684.566 1771.64,684.566 1772.2,684.566 1772.76,684.566 1773.32,684.566 1773.88,684.566 1774.43,684.566 1774.99,684.566 1775.55,684.566 1776.11,684.566 1776.67,684.566 1777.23,684.566 1777.79,684.566 1778.35,684.566 1778.91,684.566 1779.47,684.566 1780.03,684.566 1780.59,684.566 1781.15,684.566 1781.71,684.566 1782.26,684.566 1782.82,684.566 1783.38,684.566 1783.94,684.566 1784.5,684.566 1785.06,684.566 1785.62,684.566 1786.18,684.566 1786.74,684.566 1787.3,684.566 1787.86,684.566 1788.42,684.566 1788.98,684.566 1789.53,684.566 1790.09,684.566 1790.65,684.566 1791.21,684.566 1791.77,684.566 1792.33,684.566 1792.89,684.566 1793.45,684.566 1794.01,684.566 1794.57,684.566 1795.13,684.566 1795.69,684.566 1796.25,684.566 1796.8,684.566 1797.36,684.566 1797.92,684.566 1798.48,684.566 1799.04,684.566 1799.6,684.566 1800.16,684.566 1800.72,684.566 1801.28,684.566 1801.84,684.566 1802.4,684.566 1802.96,684.566 1803.52,684.566 1804.08,684.566 1804.63,684.566 1805.19,684.566 1805.75,684.566 1806.31,684.566 1806.87,684.566 1807.43,684.566 1807.99,684.566 1808.55,684.566 1809.11,684.566 1809.67,684.566 1810.23,684.566 1810.79,684.566 1811.35,684.566 1811.9,684.566 1812.46,684.566 1813.02,684.566 1813.58,684.566 1814.14,684.566 1814.7,684.566 1815.26,684.566 1815.82,684.566 1816.38,684.566 1816.94,684.566 1817.5,684.566 1818.06,684.566 1818.62,684.566 1819.18,684.566 1819.73,684.566 1820.29,684.566 1820.85,684.566 1821.41,684.566 1821.97,684.566 1822.53,684.566 1823.09,684.566 1823.65,684.566 1824.21,684.566 1824.77,684.566 1825.33,684.566 1825.89,684.566 1826.45,684.566 1827,684.566 1827.56,684.566 1828.12,684.566 1828.68,684.566 1829.24,684.566 1829.8,684.566 1830.36,684.566 1830.92,684.566 1831.48,684.566 1832.04,684.566 1832.6,684.566 1833.16,684.566 1833.72,684.566 1834.27,684.566 1834.83,684.566 1835.39,684.566 1835.95,684.566 1836.51,684.566 1837.07,684.566 1837.63,684.566 1838.19,684.566 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0263425097694 ± 0.023220130149640618\nProjected Energy: -4.020024760608743 ± (0.003667279307234317, 0.0038196816121720545)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.12862</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.3402e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2462e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.4948e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.606e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.803e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3596e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.36312429161336\n -0.759019192277087\n  0.13584182219622498\n  0.15789998694608443\n  0.8767114411781343\n  1.530592997097334\n  1.583573261186734\n  3.0728703303258698\n  3.125672653951841\n  4.862107221562166\n  6.260694850380595\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
