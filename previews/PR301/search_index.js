var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20915734348773402 ± 0.0014443133973318434\n   G2(1) = 0.9173079286834741 ± 0.0006283042707096195\n   G2(2) = 0.983623481330207 ± 0.000614619200970969\n   G2(3) = 0.9889798364849036 ± 0.0009591702733863295\n   G2(4) = 0.983623481330207 ± 0.000614619200970969\n   G2(5) = 0.9173079286834741 ± 0.0006283042707096195\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.981536263265874 ± 0.13777200356342392\n   Replica 2: -4.053608924703985 ± 0.1275597047452185\n   Replica 3: -4.008208881490107 ± 0.13753804751489043\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip460\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip461\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip462\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.3 2211.02,1003.3 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.764 2211.02,745.764 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.231 2211.02,488.231 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.698 2211.02,230.698 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.3 423.181,1003.3 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.764 423.181,745.764 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.231 423.181,488.231 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.698 423.181,230.698 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M290.043 1016.64 L306.363 1016.64 L306.363 1020.58 L284.418 1020.58 L284.418 1016.64 Q287.08 1013.89 291.664 1009.26 Q296.27 1004.6 297.451 1003.26 Q299.696 1000.74 300.576 999.003 Q301.478 997.244 301.478 995.554 Q301.478 992.799 299.534 991.063 Q297.613 989.327 294.511 989.327 Q292.312 989.327 289.858 990.091 Q287.427 990.855 284.65 992.406 L284.65 987.684 Q287.474 986.549 289.927 985.971 Q292.381 985.392 294.418 985.392 Q299.789 985.392 302.983 988.077 Q306.177 990.762 306.177 995.253 Q306.177 997.383 305.367 999.304 Q304.58 1001.2 302.474 1003.79 Q301.895 1004.47 298.793 1007.68 Q295.691 1010.88 290.043 1016.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M316.224 986.017 L334.58 986.017 L334.58 989.952 L320.506 989.952 L320.506 998.424 Q321.524 998.077 322.543 997.915 Q323.562 997.73 324.58 997.73 Q330.367 997.73 333.747 1000.9 Q337.126 1004.07 337.126 1009.49 Q337.126 1015.07 333.654 1018.17 Q330.182 1021.25 323.862 1021.25 Q321.687 1021.25 319.418 1020.88 Q317.173 1020.51 314.765 1019.77 L314.765 1015.07 Q316.849 1016.2 319.071 1016.76 Q321.293 1017.31 323.77 1017.31 Q327.774 1017.31 330.112 1015.21 Q332.45 1013.1 332.45 1009.49 Q332.45 1005.88 330.112 1003.77 Q327.774 1001.67 323.77 1001.67 Q321.895 1001.67 320.02 1002.08 Q318.168 1002.5 316.224 1003.38 L316.224 986.017 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M356.339 989.096 Q352.728 989.096 350.899 992.66 Q349.094 996.202 349.094 1003.33 Q349.094 1010.44 350.899 1014 Q352.728 1017.54 356.339 1017.54 Q359.973 1017.54 361.779 1014 Q363.608 1010.44 363.608 1003.33 Q363.608 996.202 361.779 992.66 Q359.973 989.096 356.339 989.096 M356.339 985.392 Q362.149 985.392 365.205 989.998 Q368.284 994.582 368.284 1003.33 Q368.284 1012.06 365.205 1016.66 Q362.149 1021.25 356.339 1021.25 Q350.529 1021.25 347.45 1016.66 Q344.395 1012.06 344.395 1003.33 Q344.395 994.582 347.45 989.998 Q350.529 985.392 356.339 985.392 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M286.062 728.484 L304.418 728.484 L304.418 732.419 L290.344 732.419 L290.344 740.891 Q291.363 740.544 292.381 740.382 Q293.4 740.197 294.418 740.197 Q300.205 740.197 303.585 743.368 Q306.964 746.54 306.964 751.956 Q306.964 757.535 303.492 760.637 Q300.02 763.715 293.701 763.715 Q291.525 763.715 289.256 763.345 Q287.011 762.975 284.603 762.234 L284.603 757.535 Q286.687 758.669 288.909 759.225 Q291.131 759.78 293.608 759.78 Q297.613 759.78 299.951 757.674 Q302.288 755.567 302.288 751.956 Q302.288 748.345 299.951 746.239 Q297.613 744.132 293.608 744.132 Q291.733 744.132 289.858 744.549 Q288.006 744.965 286.062 745.845 L286.062 728.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M326.177 731.563 Q322.566 731.563 320.737 735.128 Q318.932 738.669 318.932 745.799 Q318.932 752.905 320.737 756.47 Q322.566 760.012 326.177 760.012 Q329.811 760.012 331.617 756.47 Q333.446 752.905 333.446 745.799 Q333.446 738.669 331.617 735.128 Q329.811 731.563 326.177 731.563 M326.177 727.859 Q331.987 727.859 335.043 732.466 Q338.122 737.049 338.122 745.799 Q338.122 754.526 335.043 759.132 Q331.987 763.715 326.177 763.715 Q320.367 763.715 317.288 759.132 Q314.233 754.526 314.233 745.799 Q314.233 737.049 317.288 732.466 Q320.367 727.859 326.177 727.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M356.339 731.563 Q352.728 731.563 350.899 735.128 Q349.094 738.669 349.094 745.799 Q349.094 752.905 350.899 756.47 Q352.728 760.012 356.339 760.012 Q359.973 760.012 361.779 756.47 Q363.608 752.905 363.608 745.799 Q363.608 738.669 361.779 735.128 Q359.973 731.563 356.339 731.563 M356.339 727.859 Q362.149 727.859 365.205 732.466 Q368.284 737.049 368.284 745.799 Q368.284 754.526 365.205 759.132 Q362.149 763.715 356.339 763.715 Q350.529 763.715 347.45 759.132 Q344.395 754.526 344.395 745.799 Q344.395 737.049 347.45 732.466 Q350.529 727.859 356.339 727.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M284.835 470.951 L307.057 470.951 L307.057 472.942 L294.511 505.511 L289.627 505.511 L301.432 474.886 L284.835 474.886 L284.835 470.951 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M316.224 470.951 L334.58 470.951 L334.58 474.886 L320.506 474.886 L320.506 483.358 Q321.524 483.011 322.543 482.849 Q323.562 482.664 324.58 482.664 Q330.367 482.664 333.747 485.835 Q337.126 489.007 337.126 494.423 Q337.126 500.002 333.654 503.104 Q330.182 506.182 323.862 506.182 Q321.687 506.182 319.418 505.812 Q317.173 505.442 314.765 504.701 L314.765 500.002 Q316.849 501.136 319.071 501.692 Q321.293 502.247 323.77 502.247 Q327.774 502.247 330.112 500.141 Q332.45 498.034 332.45 494.423 Q332.45 490.812 330.112 488.706 Q327.774 486.599 323.77 486.599 Q321.895 486.599 320.02 487.016 Q318.168 487.433 316.224 488.312 L316.224 470.951 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M356.339 474.03 Q352.728 474.03 350.899 477.595 Q349.094 481.136 349.094 488.266 Q349.094 495.372 350.899 498.937 Q352.728 502.479 356.339 502.479 Q359.973 502.479 361.779 498.937 Q363.608 495.372 363.608 488.266 Q363.608 481.136 361.779 477.595 Q359.973 474.03 356.339 474.03 M356.339 470.326 Q362.149 470.326 365.205 474.933 Q368.284 479.516 368.284 488.266 Q368.284 496.993 365.205 501.599 Q362.149 506.182 356.339 506.182 Q350.529 506.182 347.45 501.599 Q344.395 496.993 344.395 488.266 Q344.395 479.516 347.45 474.933 Q350.529 470.326 356.339 470.326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M256.664 244.043 L264.303 244.043 L264.303 217.677 L255.992 219.344 L255.992 215.085 L264.256 213.418 L268.932 213.418 L268.932 244.043 L276.571 244.043 L276.571 247.978 L256.664 247.978 L256.664 244.043 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M296.015 216.497 Q292.404 216.497 290.576 220.062 Q288.77 223.603 288.77 230.733 Q288.77 237.839 290.576 241.404 Q292.404 244.946 296.015 244.946 Q299.65 244.946 301.455 241.404 Q303.284 237.839 303.284 230.733 Q303.284 223.603 301.455 220.062 Q299.65 216.497 296.015 216.497 M296.015 212.793 Q301.826 212.793 304.881 217.4 Q307.96 221.983 307.96 230.733 Q307.96 239.46 304.881 244.066 Q301.826 248.65 296.015 248.65 Q290.205 248.65 287.127 244.066 Q284.071 239.46 284.071 230.733 Q284.071 221.983 287.127 217.4 Q290.205 212.793 296.015 212.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M326.177 216.497 Q322.566 216.497 320.737 220.062 Q318.932 223.603 318.932 230.733 Q318.932 237.839 320.737 241.404 Q322.566 244.946 326.177 244.946 Q329.811 244.946 331.617 241.404 Q333.446 237.839 333.446 230.733 Q333.446 223.603 331.617 220.062 Q329.811 216.497 326.177 216.497 M326.177 212.793 Q331.987 212.793 335.043 217.4 Q338.122 221.983 338.122 230.733 Q338.122 239.46 335.043 244.066 Q331.987 248.65 326.177 248.65 Q320.367 248.65 317.288 244.066 Q314.233 239.46 314.233 230.733 Q314.233 221.983 317.288 217.4 Q320.367 212.793 326.177 212.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M356.339 216.497 Q352.728 216.497 350.899 220.062 Q349.094 223.603 349.094 230.733 Q349.094 237.839 350.899 241.404 Q352.728 244.946 356.339 244.946 Q359.973 244.946 361.779 241.404 Q363.608 237.839 363.608 230.733 Q363.608 223.603 361.779 220.062 Q359.973 216.497 356.339 216.497 M356.339 212.793 Q362.149 212.793 365.205 217.4 Q368.284 221.983 368.284 230.733 Q368.284 239.46 365.205 244.066 Q362.149 248.65 356.339 248.65 Q350.529 248.65 347.45 244.066 Q344.395 239.46 344.395 230.733 Q344.395 221.983 347.45 217.4 Q350.529 212.793 356.339 212.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip462)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.698 4017.76,230.698 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.55 459.964,1247.03 460.533,1245.4 461.101,1244.75 461.669,1243.01 462.238,1242.23 462.806,1240.32 463.375,1239.42 463.943,1238.42 464.511,1237.3 465.08,1236.1 465.648,1234.78 466.216,1232.27 466.785,1230.77 467.353,1229.13 467.921,1227.34 468.49,1225.41 469.058,1222.32 469.626,1220.11 470.195,1217.71 470.763,1215.15 471.331,1212.43 471.9,1208.54 472.468,1204.47 473.036,1201.19 473.605,1197.73 474.173,1193.02 474.741,1189.12 475.31,1183.97 475.878,1179.61 476.446,1174.03 477.015,1169.35 477.583,1164.39 478.152,1159.28 478.72,1153.92 479.288,1147.22 479.857,1141.39 480.425,1133.26 480.993,1125.9 481.562,1117.12 482.13,1109.28 482.698,1102.36 483.267,1092.05 483.835,1080.65 484.403,1070.21 484.972,1061.7 485.54,1053 486.108,1044.02 486.677,1034.89 487.245,1025.7 487.813,1016.44 488.382,1008.04 488.95,998.381 489.518,989.622 490.087,977.854 490.655,966.053 491.224,956.042 491.792,946.929 492.36,936.796 492.929,925.583 493.497,914.32 494.065,904.242 494.634,894.961 495.202,884.668 495.77,872.408 496.339,861.172 496.907,848.87 497.475,837.629 498.044,826.42 498.612,817.489 499.18,805.158 499.749,796.012 500.317,783.842 500.885,774.854 501.454,763.779 502.022,752.794 502.59,743.058 503.159,734.359 503.727,724.661 504.295,714.153 504.864,703.594 505.432,694.316 506.001,683.112 506.569,673.998 507.137,662.843 507.706,655.055 508.274,645.134 508.842,635.398 509.411,626.076 509.979,617.718 510.547,607.162 511.116,599.978 511.684,592.966 512.252,585.824 512.821,578.757 513.389,571.893 513.957,564.914 514.526,555.093 515.094,545.663 515.662,538.435 516.231,530.409 516.799,524.61 517.367,515.614 517.936,508.764 518.504,501.171 519.072,493.637 519.641,485.554 520.209,480.531 520.778,473.476 521.346,464.544 521.914,461.1 522.483,457.581 523.051,453.009 523.619,446.654 524.188,442.378 524.756,439.067 525.324,433.634 525.893,429.466 526.461,425.201 527.029,420.949 527.598,414.747 528.166,406.882 528.734,401.256 529.303,396.814 529.871,390.588 530.439,386.524 531.008,382.742 531.576,379.948 532.144,377.138 532.713,374.343 533.281,372.438 533.85,367.849 534.418,366.232 534.986,364.907 535.555,358.981 536.123,356.804 536.691,353.333 537.26,347.889 537.828,345.046 538.396,341.769 538.965,338.798 539.533,336.732 540.101,334.809 540.67,334.085 541.238,329.224 541.806,325.358 542.375,324.028 542.943,321.602 543.511,319.147 544.08,318.814 544.648,318.467 545.216,313.891 545.785,313.312 546.353,312.055 546.921,305.471 547.49,303.17 548.058,301.982 548.627,298.841 549.195,295.802 549.763,294.11 550.332,292.362 550.9,289.72 551.468,289.153 552.037,287.772 552.605,287.402 553.173,285.668 553.742,283.3 554.31,281.896 554.878,282.761 555.447,282.36 556.015,279.628 556.583,279.267 557.152,278.597 557.72,277.108 558.288,277.875 558.857,276.292 559.425,274.957 559.993,274.818 560.562,275.635 561.13,276.325 561.698,275.733 562.267,275.089 562.835,273.58 563.404,274.193 563.972,272.701 564.54,272.113 565.109,273.847 565.677,271.149 566.245,269.597 566.814,269.943 567.382,268.442 567.95,268.737 568.519,269.354 569.087,267.58 569.655,265.982 570.224,265.546 570.792,267.284 571.36,265.889 571.929,265.246 572.497,265.721 573.065,265.145 573.634,264.436 574.202,263.022 574.77,264.474 575.339,261.869 575.907,260.314 576.476,259.168 577.044,257.793 577.612,257.584 578.181,258.541 578.749,258.297 579.317,256.881 579.886,256.372 580.454,250.955 581.022,248.83 581.591,248.976 582.159,249.24 582.727,249.455 583.296,249.895 583.864,248.985 584.432,250.255 585.001,249.437 585.569,247.557 586.137,245.783 586.706,247.164 587.274,248.313 587.842,246.4 588.411,245.509 588.979,246.861 589.547,246.991 590.116,246.952 590.684,247.078 591.253,246.187 591.821,245.268 592.389,248.416 592.958,247.404 593.526,248.407 594.094,249.487 594.663,248.147 595.231,242.849 595.799,241.027 596.368,241.293 596.936,241.58 597.504,241.963 598.073,241.327 598.641,240.526 599.209,241.848 599.778,243.959 600.346,244.047 600.914,244.907 601.483,243.754 602.051,242.769 602.619,242.839 603.188,244.143 603.756,244.086 604.325,245.287 604.893,244.259 605.461,246.051 606.03,246.023 606.598,245.927 607.166,247.099 607.735,246.882 608.303,246.493 608.871,245.315 609.44,246.135 610.008,244.905 610.576,241.656 611.145,241.422 611.713,241.561 612.281,238.464 612.85,235.874 613.418,234.157 613.986,234.913 614.555,234.376 615.123,235.009 615.691,236.623 616.26,238.133 616.828,235.403 617.396,233.661 617.965,233.301 618.533,231.911 619.102,231.347 619.67,233.107 620.238,233.344 620.807,235.944 621.375,238.293 621.943,239.375 622.512,239.686 623.08,238.852 623.648,238.83 624.217,237.994 624.785,238.328 625.353,239.361 625.922,238.383 626.49,239.536 627.058,241.783 627.627,239.641 628.195,237.557 628.763,237.903 629.332,238.283 629.9,237.509 630.468,238.873 631.037,239.991 631.605,235.965 632.173,238.416 632.742,238.687 633.31,240.178 633.879,240.305 634.447,240.342 635.015,240.268 635.584,236.448 636.152,233.838 636.72,235.328 637.289,233.677 637.857,234.151 638.425,234.523 638.994,235.927 639.562,236.156 640.13,237.471 640.699,236.778 641.267,238.012 641.835,237.152 642.404,238.281 642.972,237.442 643.54,235.696 644.109,235.066 644.677,234.517 645.245,234.776 645.814,235.899 646.382,235.32 646.951,233.64 647.519,234.121 648.087,234.523 648.656,235.123 649.224,235.72 649.792,233.892 650.361,233.335 650.929,234.826 651.497,234.125 652.066,236.44 652.634,237.732 653.202,238.623 653.771,237.567 654.339,238.745 654.907,239.791 655.476,237.671 656.044,236.887 656.612,238.013 657.181,236.105 657.749,236.488 658.317,239.71 658.886,238.571 659.454,237.425 660.022,238.531 660.591,237.539 661.159,240.849 661.728,239.698 662.296,239.548 662.864,238.268 663.433,238.04 664.001,237.856 664.569,238.879 665.138,236.805 665.706,236.762 666.274,237.75 666.843,237.781 667.411,237.744 667.979,239.654 668.548,240.498 669.116,238.405 669.684,235.291 670.253,234.49 670.821,235.752 671.389,238.087 671.958,235.919 672.526,235.869 673.094,234.88 673.663,234.148 674.231,234.167 674.799,233.32 675.368,231.441 675.936,232.839 676.505,233.039 677.073,233.248 677.641,232.547 678.21,233.593 678.778,232.848 679.346,232.863 679.915,235.162 680.483,235.233 681.051,235.479 681.62,234.521 682.188,235.734 682.756,233.739 683.325,232.04 683.893,233.433 684.461,231.671 685.03,234.06 685.598,235.266 686.166,240.422 686.735,238.937 687.303,238.65 687.871,235.165 688.44,235.072 689.008,234.25 689.577,234.442 690.145,234.456 690.713,235.535 691.282,236.467 691.85,239.617 692.418,238.383 692.987,237.085 693.555,235.923 694.123,236.633 694.692,239.437 695.26,239.137 695.828,237.777 696.397,236.691 696.965,235.544 697.533,237.356 698.102,239.213 698.67,239.901 699.238,240.428 699.807,238.759 700.375,239.519 700.943,236.158 701.512,234.983 702.08,234.951 702.648,233.839 703.217,233.928 703.785,232.923 704.354,233.23 704.922,233.42 705.49,232.524 706.059,232.664 706.627,233.74 707.195,235.81 707.764,231.5 708.332,230.795 708.9,230.852 709.469,230.979 710.037,231.144 710.605,233.478 711.174,231.48 711.742,231.672 712.31,230.589 712.879,230.93 713.447,231.191 714.015,230.179 714.584,229.564 715.152,228.984 715.72,228.34 716.289,227.416 716.857,227.033 717.425,226.421 717.994,224.819 718.562,227.531 719.131,227.947 719.699,228.548 720.267,227.814 720.836,228.139 721.404,230.858 721.972,231.147 722.541,232.438 723.109,230.488 723.677,231.651 724.246,232.068 724.814,231.443 725.382,234.951 725.951,234.683 726.519,234.75 727.087,231.589 727.656,230.017 728.224,233.349 728.792,235.484 729.361,238.372 729.929,236.953 730.497,234.756 731.066,235.716 731.634,235.413 732.203,234.307 732.771,233.321 733.339,231.245 733.908,230.658 734.476,229.76 735.044,233.082 735.613,233.232 736.181,232.36 736.749,232.449 737.318,232.246 737.886,233.629 738.454,234.774 739.023,233.85 739.591,235.884 740.159,235.66 740.728,234.499 741.296,234.332 741.864,234.291 742.433,231.263 743.001,231.452 743.569,231.65 744.138,231.672 744.706,229.666 745.274,228.964 745.843,229.248 746.411,229.585 746.98,229.972 747.548,230.173 748.116,231.463 748.685,231.594 749.253,232.761 749.821,234.102 750.39,234.104 750.958,233.986 751.526,234.058 752.095,234.164 752.663,237.126 753.231,237.88 753.8,235.419 754.368,235.271 754.936,232.905 755.505,232.92 756.073,232.992 756.641,232.935 757.21,235.175 757.778,234.03 758.346,232.834 758.915,234.872 759.483,235.935 760.052,235.843 760.62,235.738 761.188,234.564 761.757,236.691 762.325,237.618 762.893,238.36 763.462,237.827 764.03,236.314 764.598,234.918 765.167,233.64 765.735,233.621 766.303,231.462 766.872,232.505 767.44,233.569 768.008,233.499 768.577,233.631 769.145,235.656 769.713,234.502 770.282,234.264 770.85,236.18 771.418,234.642 771.987,234.605 772.555,233.337 773.123,234.217 773.692,236.11 774.26,235.783 774.829,235.4 775.397,234.298 775.965,234.119 776.534,230.987 777.102,232.221 777.67,231.345 778.239,230.201 778.807,229.37 779.375,229.598 779.944,228.685 780.512,229.99 781.08,226.998 781.649,228.372 782.217,226.61 782.785,226.074 783.354,227.526 783.922,228.664 784.49,228.917 785.059,229.175 785.627,231.361 786.195,233.38 786.764,230.981 787.332,232.076 787.9,232.066 788.469,233.252 789.037,233.25 789.606,233.91 790.174,232.707 790.742,232.59 791.311,234.609 791.879,234.473 792.447,232.264 793.016,230.055 793.584,229.501 794.152,227.764 794.721,230.098 795.289,229.19 795.857,230.517 796.426,229.402 796.994,228.413 797.562,228.628 798.131,227.927 798.699,226.191 799.267,226.736 799.836,227.06 800.404,226.424 800.972,227.1 801.541,226.33 802.109,227.766 802.678,227.977 803.246,229.138 803.814,229.267 804.383,229.415 804.951,230.645 805.519,231.03 806.088,229.121 806.656,227.57 807.224,229.881 807.793,229.141 808.361,227.312 808.929,229.902 809.498,229.198 810.066,230.553 810.634,229.653 811.203,230.811 811.771,233.119 812.339,233.238 812.908,231.351 813.476,231.68 814.044,233.815 814.613,231.632 815.181,232.127 815.749,232.921 816.318,235.043 816.886,232.686 817.455,235.661 818.023,232.371 818.591,232.431 819.16,232.558 819.728,233.545 820.296,232.402 820.865,231.458 821.433,231.399 822.001,228.386 822.57,230.894 823.138,231.107 823.706,231.217 824.275,232.279 824.843,230.394 825.411,229.58 825.98,228.711 826.548,227.865 827.116,228.212 827.685,228.673 828.253,227.26 828.821,228.842 829.39,228.185 829.958,227.733 830.526,228.063 831.095,228.522 831.663,230.771 832.232,230.874 832.8,231.236 833.368,232.26 833.937,233.336 834.505,233.288 835.073,233.248 835.642,233.042 836.21,231.962 836.778,230.043 837.347,232.29 837.915,229.222 838.483,229.322 839.052,231.914 839.62,231.23 840.188,232.365 840.757,232.644 841.325,232.567 841.893,234.631 842.462,232.579 843.03,233.573 843.598,233.588 844.167,232.554 844.735,233.888 845.304,233.909 845.872,233.817 846.44,233.776 847.009,231.577 847.577,231.471 848.145,232.645 848.714,229.56 849.282,228.761 849.85,229.93 850.419,230.103 850.987,229.514 851.555,232.078 852.124,230.093 852.692,233.536 853.26,233.604 853.829,235.588 854.397,238.233 854.965,236.774 855.534,239.614 856.102,239.155 856.67,238.765 857.239,240.387 857.807,242.998 858.375,241.228 858.944,239.558 859.512,236.892 860.081,236.658 860.649,235.499 861.217,236.417 861.786,235.999 862.354,232.599 862.922,233.443 863.491,232.076 864.059,231.015 864.627,233.067 865.196,230.921 865.764,233.863 866.332,236.545 866.901,233.903 867.469,233.614 868.037,232.386 868.606,229.283 869.174,228.353 869.742,229.455 870.311,228.34 870.879,228.609 871.447,228.764 872.016,228.068 872.584,229.379 873.152,230.511 873.721,230.589 874.289,230.819 874.858,229.799 875.426,231.953 875.994,230.848 876.563,231.96 877.131,229.888 877.699,230.118 878.268,231.421 878.836,227.252 879.404,226.544 879.973,227.714 880.541,227.947 881.109,227.102 881.678,227.24 882.246,227.768 882.814,228.914 883.383,229.166 883.951,228.377 884.519,228.574 885.088,229.638 885.656,232.965 886.224,234.882 886.793,234.513 887.361,233.274 887.93,233.218 888.498,233.054 889.066,232.934 889.635,233.987 890.203,234.869 890.771,233.67 891.34,231.528 891.908,233.522 892.476,234.063 893.045,233.65 893.613,233.664 894.181,232.593 894.75,234.738 895.318,232.178 895.886,233.086 896.455,235.054 897.023,233.581 897.591,232.171 898.16,232.987 898.728,232.773 899.296,231.63 899.865,233.707 900.433,234.662 901.001,234.415 901.57,234.16 902.138,234.777 902.707,235.52 903.275,235.109 903.843,234.641 904.412,234.414 904.98,234.033 905.548,232.878 906.117,234.661 906.685,236.165 907.253,235.825 907.822,233.395 908.39,234.03 908.958,232.861 909.527,232.424 910.095,236.234 910.663,233.706 911.232,233.201 911.8,234.895 912.368,234.34 912.937,233.918 913.505,233.483 914.073,233.036 914.642,232.639 915.21,232.236 915.779,233.096 916.347,231.849 916.915,231.6 917.484,230.272 918.052,230.285 918.62,229.255 919.189,231.42 919.757,232.364 920.325,233.169 920.894,230.979 921.462,232.159 922.03,229.764 922.599,227.689 923.167,227.837 923.735,227.799 924.304,228.815 924.872,230.62 925.44,229.563 926.009,230.475 926.577,231.297 927.145,232.167 927.714,231.795 928.282,229.726 928.85,230.518 929.419,231.195 929.987,233.188 930.556,232.916 931.124,231.436 931.692,229.291 932.261,229.258 932.829,230.276 933.397,231.129 933.966,228.956 934.534,230.047 935.102,229.861 935.671,229.925 936.239,229.628 936.807,230.758 937.376,230.587 937.944,230.362 938.512,229.442 939.081,230.463 939.649,230.462 940.217,231.213 940.786,229.026 941.354,230.239 941.922,230.165 942.491,233.263 943.059,233.125 943.627,231.833 944.196,230.76 944.764,232.676 945.333,233.404 945.901,233.185 946.469,230.67 947.038,230.583 947.606,229.443 948.174,229.415 948.743,229.473 949.311,229.46 949.879,228.452 950.448,229.641 951.016,228.554 951.584,228.671 952.153,228.96 952.721,229.824 953.289,226.774 953.858,225.822 954.426,226.936 954.994,227.102 955.563,226.366 956.131,224.739 956.699,226.182 957.268,226.538 957.836,225.784 958.405,226.197 958.973,226.735 959.541,224.969 960.11,226.443 960.678,224.463 961.246,223.016 961.815,223.621 962.383,225.114 962.951,224.625 963.52,222.104 964.088,224.716 964.656,225.317 965.225,225.837 965.793,226.422 966.361,225.88 966.93,223.359 967.498,224.024 968.066,224.805 968.635,225.349 969.203,223.839 969.771,226.474 970.34,225.605 970.908,225.051 971.476,223.685 972.045,224.339 972.613,225.913 973.182,226.334 973.75,225.754 974.318,227.101 974.887,226.594 975.455,226.105 976.023,224.566 976.592,224.981 977.16,224.628 977.728,226.362 978.297,227.09 978.865,227.656 979.433,230.269 980.002,227.571 980.57,225.941 981.138,226.306 981.707,229.873 982.275,232.274 982.843,235.574 983.412,234.569 983.98,235.588 984.548,235.525 985.117,236.25 985.685,236.079 986.253,236.798 986.822,238.554 987.39,240.368 987.959,240.106 988.527,239.599 989.095,237.945 989.664,238.583 990.232,238.281 990.8,235.98 991.369,235.79 991.937,233.559 992.505,233.36 993.074,231.112 993.642,231.227 994.21,230.394 994.779,229.596 995.347,229.631 995.915,229.906 996.484,229.119 997.052,229.288 997.62,230.367 998.189,234.806 998.757,235.758 999.325,233.444 999.894,237.509 1000.46,239.204 1001.03,236.767 1001.6,238.377 1002.17,239.126 1002.74,236.605 1003.3,236.194 1003.87,234.746 1004.44,234.558 1005.01,234.439 1005.58,234.24 1006.15,232.966 1006.71,233.855 1007.28,235.754 1007.85,235.429 1008.42,233.967 1008.99,234.853 1009.56,234.57 1010.12,234.47 1010.69,235.563 1011.26,236.315 1011.83,233.786 1012.4,233.45 1012.97,234.332 1013.53,235.82 1014.1,235.243 1014.67,231.791 1015.24,231.71 1015.81,232.511 1016.38,229.414 1016.94,228.266 1017.51,230.389 1018.08,231.634 1018.65,230.39 1019.22,230.246 1019.79,233.497 1020.35,233.186 1020.92,233.078 1021.49,231.699 1022.06,233.724 1022.63,232.369 1023.2,231.092 1023.76,229.176 1024.33,229.004 1024.9,230.107 1025.47,227.106 1026.04,225.363 1026.61,224.902 1027.17,223.089 1027.74,222.391 1028.31,224.912 1028.88,225.454 1029.45,225.851 1030.02,226.189 1030.58,227.564 1031.15,225.792 1031.72,225.078 1032.29,225.506 1032.86,225.93 1033.43,225.116 1033.99,226.737 1034.56,226.206 1035.13,228.909 1035.7,228.264 1036.27,230.523 1036.84,228.612 1037.4,229.879 1037.97,228.995 1038.54,232.238 1039.11,233.063 1039.68,233.895 1040.25,232.666 1040.81,233.77 1041.38,232.659 1041.95,231.522 1042.52,233.497 1043.09,232.382 1043.66,233.196 1044.22,231.97 1044.79,231.996 1045.36,233.151 1045.93,233.853 1046.5,232.953 1047.07,230.929 1047.63,233.014 1048.2,233.829 1048.77,233.74 1049.34,236.491 1049.91,235.077 1050.48,235.985 1051.05,234.722 1051.61,234.44 1052.18,236.2 1052.75,235.947 1053.32,236.7 1053.89,237.169 1054.46,235.729 1055.02,235.441 1055.59,237.83 1056.16,236.388 1056.73,235.936 1057.3,237.674 1057.87,239.232 1058.43,238.575 1059,235.853 1059.57,235.393 1060.14,235.977 1060.71,233.522 1061.28,232.066 1061.84,231.056 1062.41,231.875 1062.98,228.562 1063.55,228.771 1064.12,228.878 1064.69,225.915 1065.25,226.41 1065.82,227.881 1066.39,227.014 1066.96,227.95 1067.53,228.103 1068.1,228.416 1068.66,228.621 1069.23,225.638 1069.8,225.829 1070.37,227.377 1070.94,225.57 1071.51,226.781 1072.07,226.038 1072.64,226.41 1073.21,226.718 1073.78,227.071 1074.35,227.197 1074.92,227.292 1075.48,227.448 1076.05,227.545 1076.62,227.892 1077.19,229.217 1077.76,231.377 1078.33,231.416 1078.89,230.234 1079.46,229.144 1080.03,228.023 1080.6,229.056 1081.17,230.255 1081.74,230.145 1082.3,230.286 1082.87,227.143 1083.44,228.38 1084.01,229.352 1084.58,226.357 1085.15,225.596 1085.71,229.056 1086.28,229.206 1086.85,228.368 1087.42,228.561 1087.99,231.003 1088.56,232.124 1089.12,232.133 1089.69,233.098 1090.26,231.821 1090.83,234.024 1091.4,233.828 1091.97,233.57 1092.53,235.386 1093.1,237.235 1093.67,236.869 1094.24,237.629 1094.81,237.273 1095.38,236.014 1095.94,234.5 1096.51,233.2 1097.08,230.883 1097.65,227.813 1098.22,227.059 1098.79,227.251 1099.35,227.351 1099.92,227.556 1100.49,227.719 1101.06,228.045 1101.63,227.141 1102.2,226.358 1102.76,229.76 1103.33,230.654 1103.9,233.782 1104.47,234.627 1105.04,234.451 1105.61,235.334 1106.17,232.988 1106.74,232.732 1107.31,231.568 1107.88,229.62 1108.45,229.741 1109.02,234.911 1109.58,234.753 1110.15,234.401 1110.72,231.921 1111.29,232.888 1111.86,233.866 1112.43,233.384 1112.99,232.106 1113.56,233.08 1114.13,232.897 1114.7,232.652 1115.27,232.364 1115.84,232.249 1116.4,232.263 1116.97,233.083 1117.54,230.698 1118.11,229.573 1118.68,230.79 1119.25,231.676 1119.81,230.767 1120.38,230.61 1120.95,228.406 1121.52,228.408 1122.09,229.821 1122.66,229.078 1123.23,230.305 1123.79,230.319 1124.36,229.314 1124.93,230.54 1125.5,230.841 1126.07,231.966 1126.64,230.857 1127.2,230.851 1127.77,228.974 1128.34,231.17 1128.91,231.054 1129.48,229.965 1130.05,227.806 1130.61,228.039 1131.18,226.776 1131.75,226.867 1132.32,226.066 1132.89,231.321 1133.46,229.195 1134.02,230.277 1134.59,233.475 1135.16,235.169 1135.73,233.899 1136.3,233.298 1136.87,232.03 1137.43,232.921 1138,231.568 1138.57,231.699 1139.14,232.646 1139.71,233.591 1140.28,234.398 1140.84,233.092 1141.41,231.81 1141.98,234.695 1142.55,233.407 1143.12,233.111 1143.69,231.86 1144.25,233.492 1144.82,232.391 1145.39,232.264 1145.96,232.944 1146.53,231.567 1147.1,230.061 1147.66,228.773 1148.23,228.005 1148.8,228.099 1149.37,230.31 1149.94,233.437 1150.51,234.378 1151.07,233.261 1151.64,234.957 1152.21,238.647 1152.78,236.915 1153.35,236.454 1153.92,233.722 1154.48,233.578 1155.05,229.501 1155.62,228.276 1156.19,227.336 1156.76,228.483 1157.33,228.49 1157.89,226.608 1158.46,225.696 1159.03,223.754 1159.6,225.229 1160.17,227.644 1160.74,228.855 1161.3,229.851 1161.87,227.896 1162.44,228.022 1163.01,226.994 1163.58,227.337 1164.15,226.514 1164.71,227.589 1165.28,226.639 1165.85,227.831 1166.42,228.108 1166.99,227.345 1167.56,226.651 1168.12,225.846 1168.69,228.587 1169.26,226.808 1169.83,228.096 1170.4,229.311 1170.97,230.387 1171.53,231.451 1172.1,232.591 1172.67,232.46 1173.24,232.649 1173.81,233.556 1174.38,233.242 1174.94,235.25 1175.51,235.876 1176.08,236.586 1176.65,234.954 1177.22,233.649 1177.79,234.563 1178.35,234.166 1178.92,234.023 1179.49,233.626 1180.06,233.459 1180.63,233.344 1181.2,233.109 1181.76,231.738 1182.33,230.613 1182.9,230.66 1183.47,229.618 1184.04,225.426 1184.61,225.818 1185.17,227.18 1185.74,226.326 1186.31,228.405 1186.88,230.513 1187.45,230.529 1188.02,230.61 1188.58,230.683 1189.15,231.773 1189.72,229.478 1190.29,230.556 1190.86,230.315 1191.43,231.496 1192,232.438 1192.56,231.83 1193.13,231.665 1193.7,234.597 1194.27,232.035 1194.84,231.755 1195.41,229.522 1195.97,229.636 1196.54,228.752 1197.11,228.879 1197.68,229.023 1198.25,229.8 1198.82,230.907 1199.38,227.942 1199.95,228.998 1200.52,227.91 1201.09,227.047 1201.66,226.311 1202.23,222.828 1202.79,223.287 1203.36,226.749 1203.93,226.862 1204.5,227.212 1205.07,229.585 1205.64,229.66 1206.2,228.617 1206.77,228.602 1207.34,227.488 1207.91,228.607 1208.48,226.982 1209.05,227.238 1209.61,226.357 1210.18,228.756 1210.75,227.009 1211.32,228.56 1211.89,228.982 1212.46,229.092 1213.02,231.136 1213.59,231.283 1214.16,231.322 1214.73,230.376 1215.3,231.45 1215.87,229.251 1216.43,230.673 1217,230.643 1217.57,230.809 1218.14,231.882 1218.71,231.915 1219.28,232.788 1219.84,233.747 1220.41,235.684 1220.98,234.328 1221.55,234.296 1222.12,232.017 1222.69,233.146 1223.25,232.018 1223.82,231.921 1224.39,228.859 1224.96,229.073 1225.53,230.21 1226.1,232.427 1226.66,233.323 1227.23,233.101 1227.8,235.143 1228.37,234.898 1228.94,233.718 1229.51,233.556 1230.07,234.254 1230.64,232.93 1231.21,232.876 1231.78,232.743 1232.35,232.276 1232.92,232.118 1233.48,233.085 1234.05,231.906 1234.62,232.033 1235.19,231.001 1235.76,230.965 1236.33,229.883 1236.89,230.9 1237.46,231.925 1238.03,232.895 1238.6,232.845 1239.17,232.51 1239.74,232.198 1240.3,232.106 1240.87,232.004 1241.44,231.991 1242.01,231.915 1242.58,229.79 1243.15,231.823 1243.71,231.678 1244.28,233.584 1244.85,233.438 1245.42,232.11 1245.99,230.021 1246.56,231.059 1247.12,228.862 1247.69,227.971 1248.26,229.289 1248.83,230.399 1249.4,229.482 1249.97,229.621 1250.53,227.648 1251.1,227.857 1251.67,230.071 1252.24,227.98 1252.81,226.132 1253.38,224.331 1253.94,223.72 1254.51,220.983 1255.08,222.757 1255.65,223.324 1256.22,222.983 1256.79,224.735 1257.35,226.443 1257.92,223.521 1258.49,224.067 1259.06,225.936 1259.63,229.355 1260.2,229.483 1260.76,231.716 1261.33,232.618 1261.9,231.58 1262.47,233.635 1263.04,234.569 1263.61,233.143 1264.18,234.29 1264.74,234.226 1265.31,234.117 1265.88,234.891 1266.45,236.814 1267.02,238.584 1267.59,236.978 1268.15,236.426 1268.72,234.017 1269.29,233.859 1269.86,233.814 1270.43,234.717 1271,234.417 1271.56,233.968 1272.13,233.538 1272.7,231.403 1273.27,230.154 1273.84,227.333 1274.41,225.506 1274.97,225.914 1275.54,225.19 1276.11,225.45 1276.68,226.727 1277.25,228.031 1277.82,229.307 1278.38,229.209 1278.95,230.201 1279.52,230.226 1280.09,229.292 1280.66,230.339 1281.23,230.406 1281.79,230.325 1282.36,230.199 1282.93,229.478 1283.5,229.556 1284.07,228.368 1284.64,228.416 1285.2,230.814 1285.77,228.845 1286.34,229.982 1286.91,233.201 1287.48,235.052 1288.05,234.838 1288.61,233.574 1289.18,232.393 1289.75,230.246 1290.32,229.994 1290.89,231.937 1291.46,234.054 1292.02,235.802 1292.59,236.354 1293.16,235.958 1293.73,233.408 1294.3,232.095 1294.87,230.827 1295.43,229.783 1296,229.756 1296.57,229.863 1297.14,231.055 1297.71,231.135 1298.28,231.159 1298.84,229.176 1299.41,224.409 1299.98,223.608 1300.55,222.346 1301.12,223.037 1301.69,225.85 1302.25,226.492 1302.82,226.946 1303.39,227.283 1303.96,227.463 1304.53,227.723 1305.1,226.99 1305.66,228.324 1306.23,228.613 1306.8,226.846 1307.37,228.218 1307.94,228.632 1308.51,228.587 1309.07,227.777 1309.64,227.14 1310.21,229.62 1310.78,229.016 1311.35,228.039 1311.92,229.306 1312.48,231.737 1313.05,232.629 1313.62,231.812 1314.19,229.926 1314.76,230.882 1315.33,231.877 1315.89,234.012 1316.46,235.649 1317.03,234.415 1317.6,235.098 1318.17,235.935 1318.74,233.887 1319.3,230.874 1319.87,231.126 1320.44,230.031 1321.01,229.096 1321.58,230.199 1322.15,230.409 1322.71,229.62 1323.28,230.739 1323.85,231.979 1324.42,229.892 1324.99,229.958 1325.56,232.172 1326.12,232.091 1326.69,233.024 1327.26,231.075 1327.83,229.236 1328.4,228.572 1328.97,228.785 1329.53,229.128 1330.1,229.234 1330.67,227.329 1331.24,228.676 1331.81,228.704 1332.38,229.881 1332.94,231.234 1333.51,232.273 1334.08,232.106 1334.65,232.032 1335.22,233.171 1335.79,233.175 1336.36,232.18 1336.92,234.213 1337.49,233.944 1338.06,234.575 1338.63,233.181 1339.2,234.41 1339.77,234.388 1340.33,235.14 1340.9,233.919 1341.47,232.857 1342.04,231.804 1342.61,228.784 1343.18,228.927 1343.74,228.944 1344.31,230.231 1344.88,230.407 1345.45,229.403 1346.02,230.624 1346.59,231.497 1347.15,230.547 1347.72,232.628 1348.29,232.479 1348.86,231.349 1349.43,233.606 1350,231.257 1350.56,231.094 1351.13,233.13 1351.7,233.039 1352.27,232.802 1352.84,232.478 1353.41,230.398 1353.97,229.19 1354.54,228.28 1355.11,225.203 1355.68,224.438 1356.25,224.727 1356.82,225.093 1357.38,227.539 1357.95,228.904 1358.52,230.364 1359.09,229.422 1359.66,229.323 1360.23,228.432 1360.79,229.562 1361.36,227.693 1361.93,227.795 1362.5,227.033 1363.07,228.43 1363.64,228.695 1364.2,229.143 1364.77,229.232 1365.34,229.635 1365.91,232.023 1366.48,227.816 1367.05,227.105 1367.61,228.682 1368.18,230.021 1368.75,228.031 1369.32,229.146 1369.89,230.48 1370.46,231.736 1371.02,236.999 1371.59,236.449 1372.16,236.874 1372.73,236.439 1373.3,237.058 1373.87,237.572 1374.43,238.286 1375,236.694 1375.57,235.467 1376.14,236.433 1376.71,238.195 1377.28,236.815 1377.84,239.154 1378.41,239.643 1378.98,238.84 1379.55,239.246 1380.12,238.721 1380.69,239.086 1381.25,237.346 1381.82,236.949 1382.39,236.436 1382.96,235.825 1383.53,235.459 1384.1,234.895 1384.66,235.796 1385.23,234.22 1385.8,232.851 1386.37,233.581 1386.94,232.341 1387.51,232.352 1388.07,233.146 1388.64,232.85 1389.21,230.626 1389.78,232.557 1390.35,232.391 1390.92,231.046 1391.48,228.752 1392.05,230.43 1392.62,229.206 1393.19,225.253 1393.76,228.756 1394.33,228.844 1394.89,227.756 1395.46,227.98 1396.03,228.044 1396.6,230.212 1397.17,230.964 1397.74,231.838 1398.3,232.725 1398.87,233.348 1399.44,232.108 1400.01,237.065 1400.58,236.476 1401.15,235.967 1401.71,238.649 1402.28,238.075 1402.85,236.182 1403.42,236.668 1403.99,235.051 1404.56,234.543 1405.13,235.253 1405.69,236.898 1406.26,236.25 1406.83,236.563 1407.4,233.826 1407.97,235.298 1408.54,232.856 1409.1,232.649 1409.67,233.447 1410.24,232.041 1410.81,232.794 1411.38,232.407 1411.95,232.059 1412.51,232.967 1413.08,231.439 1413.65,230.913 1414.22,231.61 1414.79,231.261 1415.36,229.85 1415.92,230.841 1416.49,230.637 1417.06,230.241 1417.63,231.089 1418.2,229.72 1418.77,228.746 1419.33,226.645 1419.9,226.81 1420.47,226.752 1421.04,224.889 1421.61,225.163 1422.18,223.221 1422.74,222.536 1423.31,224.109 1423.88,223.269 1424.45,223.64 1425.02,223.03 1425.59,223.403 1426.15,222.694 1426.72,225.067 1427.29,225.626 1427.86,225.877 1428.43,223.022 1429,222.651 1429.56,223.313 1430.13,222.679 1430.7,223.091 1431.27,224.507 1431.84,222.739 1432.41,223.354 1432.97,227.208 1433.54,226.377 1434.11,226.751 1434.68,226.086 1435.25,225.51 1435.82,227.976 1436.38,229.317 1436.95,229.221 1437.52,230.261 1438.09,227.52 1438.66,226.723 1439.23,228.042 1439.79,227.338 1440.36,227.671 1440.93,231.12 1441.5,231.492 1442.07,231.474 1442.64,231.444 1443.2,229.223 1443.77,230.23 1444.34,229.327 1444.91,227.383 1445.48,224.447 1446.05,224.046 1446.61,224.519 1447.18,224.109 1447.75,223.423 1448.32,224.08 1448.89,226.744 1449.46,228.21 1450.02,228.504 1450.59,227.593 1451.16,227.89 1451.73,229.294 1452.3,229.66 1452.87,229.596 1453.43,230.795 1454,229.986 1454.57,231.081 1455.14,230.163 1455.71,232.233 1456.28,232.288 1456.84,234.201 1457.41,232.125 1457.98,232.195 1458.55,231.292 1459.12,232.473 1459.69,232.562 1460.25,230.459 1460.82,230.564 1461.39,230.784 1461.96,228.981 1462.53,232.282 1463.1,232.207 1463.66,233.347 1464.23,233.249 1464.8,231.173 1465.37,230.223 1465.94,232.379 1466.51,232.241 1467.07,234.279 1467.64,232.01 1468.21,233.996 1468.78,232.731 1469.35,232.738 1469.92,233.827 1470.48,233.728 1471.05,233.276 1471.62,233.305 1472.19,232.213 1472.76,232.275 1473.33,232.248 1473.89,233.067 1474.46,233.734 1475.03,232.624 1475.6,231.368 1476.17,233.494 1476.74,233.384 1477.31,234.28 1477.87,233.095 1478.44,234.03 1479.01,234.623 1479.58,234.364 1480.15,234.124 1480.72,234.682 1481.28,232.238 1481.85,232.257 1482.42,232.036 1482.99,231.85 1483.56,232.772 1484.13,234.523 1484.69,231.988 1485.26,232.044 1485.83,229.941 1486.4,231.057 1486.97,230.733 1487.54,231.774 1488.1,232.564 1488.67,230.489 1489.24,229.413 1489.81,230.546 1490.38,233.425 1490.95,232.369 1491.51,233.2 1492.08,233.144 1492.65,234.162 1493.22,231.73 1493.79,228.505 1494.36,228.608 1494.92,226.793 1495.49,226.086 1496.06,226.346 1496.63,226.629 1497.2,223.534 1497.77,225.105 1498.33,224.371 1498.9,224.823 1499.47,226.145 1500.04,230.366 1500.61,231.377 1501.18,231.348 1501.74,232.162 1502.31,230.086 1502.88,233.111 1503.45,234.002 1504.02,232.823 1504.59,233.816 1505.15,233.612 1505.72,234.407 1506.29,234.185 1506.86,237.948 1507.43,238.356 1508,238.842 1508.56,238.107 1509.13,240.651 1509.7,241.071 1510.27,239.15 1510.84,239.723 1511.41,237.13 1511.97,237.386 1512.54,237.729 1513.11,235.99 1513.68,235.565 1514.25,234.082 1514.82,233.669 1515.38,233.358 1515.95,232.946 1516.52,231.698 1517.09,231.452 1517.66,231.3 1518.23,231.224 1518.79,231.088 1519.36,228.911 1519.93,229.658 1520.5,230.718 1521.07,231.869 1521.64,231.61 1522.2,230.337 1522.77,227.245 1523.34,227.326 1523.91,227.33 1524.48,228.485 1525.05,228.601 1525.61,227.581 1526.18,229.638 1526.75,228.379 1527.32,227.245 1527.89,226.262 1528.46,226.362 1529.02,226.778 1529.59,226.035 1530.16,226.157 1530.73,226.375 1531.3,225.688 1531.87,225.955 1532.43,225.296 1533,225.694 1533.57,227.9 1534.14,228.062 1534.71,228.18 1535.28,227.276 1535.84,230.65 1536.41,230.67 1536.98,230.651 1537.55,228.531 1538.12,229.711 1538.69,227.476 1539.25,227.609 1539.82,229.529 1540.39,230.548 1540.96,228.682 1541.53,226.93 1542.1,226.999 1542.66,226.182 1543.23,225.369 1543.8,225.717 1544.37,224.808 1544.94,226.318 1545.51,227.631 1546.08,230.208 1546.64,228.071 1547.21,226.349 1547.78,224.474 1548.35,224.994 1548.92,225.472 1549.49,226.953 1550.05,226.372 1550.62,226.827 1551.19,228.344 1551.76,227.571 1552.33,229.828 1552.9,228.989 1553.46,228.31 1554.03,229.603 1554.6,229.845 1555.17,231.068 1555.74,233.169 1556.31,231.209 1556.87,231.14 1557.44,232.92 1558.01,233.788 1558.58,231.486 1559.15,231.482 1559.72,231.538 1560.28,230.335 1560.85,228.581 1561.42,227.797 1561.99,225.906 1562.56,228.357 1563.13,227.476 1563.69,226.925 1564.26,228.328 1564.83,230.603 1565.4,233.892 1565.97,233.779 1566.54,234.663 1567.1,234.476 1567.67,234.245 1568.24,234.924 1568.81,233.436 1569.38,233.358 1569.95,236.161 1570.51,233.892 1571.08,232.613 1571.65,231.624 1572.22,234.515 1572.79,233.246 1573.36,233.99 1573.92,235.719 1574.49,236.328 1575.06,236.857 1575.63,236.465 1576.2,236.08 1576.77,234.302 1577.33,233.004 1577.9,231.622 1578.47,231.475 1579.04,229.401 1579.61,229.577 1580.18,231.651 1580.74,231.361 1581.31,229.366 1581.88,229.372 1582.45,230.466 1583.02,229.635 1583.59,227.659 1584.15,227.807 1584.72,228.056 1585.29,226.137 1585.86,225.499 1586.43,226.817 1587,228.042 1587.56,229.468 1588.13,229.724 1588.7,229.757 1589.27,232.011 1589.84,232.849 1590.41,231.547 1590.97,230.357 1591.54,230.496 1592.11,230.72 1592.68,232.647 1593.25,230.461 1593.82,231.399 1594.38,231.115 1594.95,232.136 1595.52,231.087 1596.09,231.149 1596.66,231.243 1597.23,232.107 1597.79,232.18 1598.36,232.074 1598.93,232.203 1599.5,232.856 1600.07,232.653 1600.64,231.326 1601.2,232.436 1601.77,233.136 1602.34,234.115 1602.91,231.885 1603.48,230.873 1604.05,230.587 1604.61,230.794 1605.18,227.832 1605.75,230.164 1606.32,228.127 1606.89,229.314 1607.46,229.385 1608.02,227.672 1608.59,231.101 1609.16,230.918 1609.73,229.803 1610.3,226.693 1610.87,226.048 1611.43,226.441 1612,226.607 1612.57,225.926 1613.14,226.226 1613.71,225.46 1614.28,227.951 1614.84,227.304 1615.41,227.572 1615.98,229.049 1616.55,230.425 1617.12,231.425 1617.69,232.692 1618.26,231.444 1618.82,231.356 1619.39,233.67 1619.96,233.551 1620.53,232.11 1621.1,233.044 1621.67,233.883 1622.23,232.578 1622.8,233.385 1623.37,234.243 1623.94,233.136 1624.51,233.14 1625.08,231.948 1625.64,230.992 1626.21,229.116 1626.78,231.356 1627.35,230.474 1627.92,230.656 1628.49,227.968 1629.05,230.072 1629.62,229.105 1630.19,228.285 1630.76,226.396 1631.33,226.717 1631.9,226.144 1632.46,225.363 1633.03,226.948 1633.6,226.321 1634.17,225.9 1634.74,227.247 1635.31,224.441 1635.87,224.78 1636.44,227.278 1637.01,225.635 1637.58,226.898 1638.15,227.057 1638.72,225.28 1639.28,227.015 1639.85,226.292 1640.42,224.581 1640.99,226.06 1641.56,226.551 1642.13,227.941 1642.69,228.454 1643.26,232.854 1643.83,231.657 1644.4,234.707 1644.97,233.405 1645.54,233.639 1646.1,234.733 1646.67,235.633 1647.24,234.368 1647.81,235.471 1648.38,233.927 1648.95,233.854 1649.51,235.84 1650.08,235.313 1650.65,232.737 1651.22,232.684 1651.79,233.712 1652.36,233.562 1652.92,234.687 1653.49,235.441 1654.06,232.997 1654.63,234.035 1655.2,233.019 1655.77,230.76 1656.33,231.871 1656.9,233.112 1657.47,231.885 1658.04,232.936 1658.61,233.859 1659.18,232.749 1659.74,233.638 1660.31,234.39 1660.88,231.922 1661.45,232.865 1662.02,232.781 1662.59,234.606 1663.15,234.332 1663.72,232.078 1664.29,231.953 1664.86,231.091 1665.43,228.715 1666,229.929 1666.56,229.954 1667.13,229.995 1667.7,228.882 1668.27,227.898 1668.84,229.083 1669.41,231.485 1669.97,234.52 1670.54,232.313 1671.11,232.405 1671.68,232.164 1672.25,231.093 1672.82,232.154 1673.38,233.036 1673.95,233.923 1674.52,231.626 1675.09,231.569 1675.66,233.525 1676.23,231.339 1676.79,230.552 1677.36,230.509 1677.93,231.631 1678.5,232.548 1679.07,231.474 1679.64,231.54 1680.2,232.274 1680.77,232.16 1681.34,233.12 1681.91,231.824 1682.48,231.846 1683.05,230.918 1683.61,231.861 1684.18,230.749 1684.75,229.701 1685.32,229.873 1685.89,228.05 1686.46,229.219 1687.02,233.399 1687.59,236.31 1688.16,235.019 1688.73,234.744 1689.3,236.644 1689.87,235.022 1690.44,234.796 1691,236.694 1691.57,235.258 1692.14,234.967 1692.71,234.748 1693.28,233.159 1693.85,235.008 1694.41,233.654 1694.98,231.268 1695.55,233.356 1696.12,235.138 1696.69,234.468 1697.26,233.08 1697.82,233.639 1698.39,232.241 1698.96,230.009 1699.53,231.143 1700.1,228.836 1700.67,227.883 1701.23,226.886 1701.8,226.063 1702.37,226.394 1702.94,227.699 1703.51,226.772 1704.08,226.976 1704.64,226.081 1705.21,224.535 1705.78,225.962 1706.35,227.249 1706.92,230.44 1707.49,230.622 1708.05,231.643 1708.62,230.587 1709.19,230.708 1709.76,231.821 1710.33,230.632 1710.9,232.838 1711.46,233.745 1712.03,233.378 1712.6,235.204 1713.17,235.854 1713.74,234.346 1714.31,234.751 1714.87,234.528 1715.44,234.434 1716.01,235.109 1716.58,234.883 1717.15,232.591 1717.72,230.307 1718.28,230.988 1718.85,230.833 1719.42,230.895 1719.99,233.995 1720.56,235.834 1721.13,237.258 1721.69,236.62 1722.26,235.112 1722.83,234.734 1723.4,234.245 1723.97,234.674 1724.54,233.278 1725.1,232.84 1725.67,232.588 1726.24,233.248 1726.81,231.911 1727.38,231.581 1727.95,231.411 1728.51,230.978 1729.08,230.878 1729.65,229.742 1730.22,229.426 1730.79,229.428 1731.36,228.216 1731.92,230.401 1732.49,230.333 1733.06,231.241 1733.63,229.799 1734.2,231.642 1734.77,231.545 1735.33,231.422 1735.9,230.056 1736.47,232.011 1737.04,230.716 1737.61,231.547 1738.18,231.315 1738.74,227.066 1739.31,226.355 1739.88,223.448 1740.45,223.962 1741.02,225.493 1741.59,225.771 1742.15,224.96 1742.72,224.995 1743.29,227.307 1743.86,228.482 1744.43,227.412 1745,227.518 1745.56,227.485 1746.13,225.553 1746.7,223.821 1747.27,222.993 1747.84,222.577 1748.41,222.016 1748.97,221.374 1749.54,219.895 1750.11,220.893 1750.68,225.607 1751.25,225.8 1751.82,226.104 1752.38,226.586 1752.95,227.972 1753.52,229.219 1754.09,230.561 1754.66,228.926 1755.23,227.966 1755.79,227.03 1756.36,227.479 1756.93,226.724 1757.5,229.077 1758.07,228.214 1758.64,230.5 1759.21,230.714 1759.77,230.872 1760.34,232.025 1760.91,234.107 1761.48,232.554 1762.05,233.469 1762.62,232.365 1763.18,232.26 1763.75,233.187 1764.32,232.924 1764.89,230.485 1765.46,231.805 1766.03,231.521 1766.59,232.552 1767.16,232.356 1767.73,232.198 1768.3,232.11 1768.87,231.008 1769.44,230.1 1770,233.067 1770.57,232.904 1771.14,234.622 1771.71,236.3 1772.28,237.106 1772.85,236.682 1773.41,238.269 1773.98,237.576 1774.55,236.77 1775.12,236.467 1775.69,234.95 1776.26,234.614 1776.82,235.363 1777.39,231.779 1777.96,231.638 1778.53,229.581 1779.1,229.85 1779.67,228.789 1780.23,227.702 1780.8,226.736 1781.37,227.08 1781.94,229.213 1782.51,229.111 1783.08,231.514 1783.64,231.371 1784.21,231.211 1784.78,231.016 1785.35,230.89 1785.92,229.826 1786.49,227.917 1787.05,229.185 1787.62,229.193 1788.19,228.2 1788.76,229.445 1789.33,229.409 1789.9,227.464 1790.46,227.727 1791.03,229.887 1791.6,230.973 1792.17,230.998 1792.74,229.926 1793.31,230.821 1793.87,230.784 1794.44,228.851 1795.01,229.98 1795.58,228.956 1796.15,230.034 1796.72,228.937 1797.28,229.015 1797.85,230.139 1798.42,230.053 1798.99,228.185 1799.56,228.371 1800.13,227.712 1800.69,230.042 1801.26,229.958 1801.83,228.919 1802.4,228.97 1802.97,229.108 1803.54,228.969 1804.1,231.241 1804.67,230.368 1805.24,230.349 1805.81,231.3 1806.38,233.209 1806.95,232.034 1807.51,231.985 1808.08,231.701 1808.65,231.687 1809.22,229.704 1809.79,231.689 1810.36,230.628 1810.92,230.661 1811.49,232.927 1812.06,230.988 1812.63,233.079 1813.2,232.07 1813.77,232.839 1814.33,231.633 1814.9,230.881 1815.47,229.853 1816.04,228.021 1816.61,230.069 1817.18,229.143 1817.74,229.115 1818.31,229.152 1818.88,227.985 1819.45,228.302 1820.02,228.297 1820.59,229.601 1821.15,230.923 1821.72,229.799 1822.29,231.848 1822.86,233.008 1823.43,231.698 1824,229.796 1824.56,231.228 1825.13,231.123 1825.7,232.451 1826.27,229.42 1826.84,229.381 1827.41,230.554 1827.97,227.531 1828.54,229.032 1829.11,228.073 1829.68,229.157 1830.25,227.185 1830.82,226.464 1831.39,227.761 1831.95,226.934 1832.52,227.355 1833.09,228.637 1833.66,228.563 1834.23,225.557 1834.8,224.982 1835.36,225.64 1835.93,227.152 1836.5,229.424 1837.07,229.697 1837.64,230.851 1838.21,230.005 1838.77,228.019 1839.34,228.334 1839.91,229.565 1840.48,230.718 1841.05,230.641 1841.62,230.596 1842.18,230.757 1842.75,230.741 1843.32,230.797 1843.89,230.656 1844.46,231.681 1845.03,232.738 1845.59,233.878 1846.16,233.752 1846.73,231.533 1847.3,230.592 1847.87,231.913 1848.44,233.185 1849,232.218 1849.57,232.298 1850.14,232.369 1850.71,234.258 1851.28,235.045 1851.85,234.568 1852.41,235.255 1852.98,233.892 1853.55,232.853 1854.12,231.743 1854.69,231.656 1855.26,230.911 1855.82,229.776 1856.39,230.912 1856.96,227.734 1857.53,226.932 1858.1,229.201 1858.67,228.417 1859.23,229.567 1859.8,228.48 1860.37,230.726 1860.94,229.646 1861.51,230.923 1862.08,232.167 1862.64,233.281 1863.21,231.307 1863.78,232.488 1864.35,235.537 1864.92,233.298 1865.49,234.155 1866.05,233.84 1866.62,233.652 1867.19,234.553 1867.76,233.308 1868.33,232.888 1868.9,233.969 1869.46,233.848 1870.03,232.538 1870.6,232.429 1871.17,232.234 1871.74,233.18 1872.31,232.888 1872.87,234.861 1873.44,231.595 1874.01,231.559 1874.58,230.437 1875.15,231.494 1875.72,230.431 1876.28,229.35 1876.85,229.523 1877.42,227.475 1877.99,226.89 1878.56,227.164 1879.13,228.373 1879.69,228.728 1880.26,229.717 1880.83,227.787 1881.4,228.965 1881.97,230.075 1882.54,231.135 1883.1,232.226 1883.67,230.969 1884.24,234.935 1884.81,236.601 1885.38,237.156 1885.95,237.68 1886.51,234.96 1887.08,233.562 1887.65,232.356 1888.22,231.307 1888.79,230.207 1889.36,229.521 1889.92,231.344 1890.49,231.278 1891.06,230.197 1891.63,231.076 1892.2,233.234 1892.77,231.782 1893.33,230.597 1893.9,230.468 1894.47,229.215 1895.04,229.382 1895.61,229.329 1896.18,228.186 1896.74,228.505 1897.31,226.34 1897.88,225.593 1898.45,225.844 1899.02,227.103 1899.59,226.587 1900.16,227.713 1900.72,227.083 1901.29,228.4 1901.86,228.397 1902.43,227.348 1903,229.481 1903.57,229.528 1904.13,232.622 1904.7,232.406 1905.27,233.212 1905.84,231.944 1906.41,230.786 1906.98,228.65 1907.54,228.905 1908.11,227.93 1908.68,226.224 1909.25,227.618 1909.82,228.922 1910.39,231.261 1910.95,229.853 1911.52,229.975 1912.09,229.045 1912.66,229.231 1913.23,227.406 1913.8,230.658 1914.36,229.69 1914.93,230.668 1915.5,228.548 1916.07,228.727 1916.64,230.034 1917.21,228.89 1917.77,228.004 1918.34,227.169 1918.91,225.442 1919.48,225.752 1920.05,227.169 1920.62,228.582 1921.18,229.88 1921.75,231.948 1922.32,232.935 1922.89,232.829 1923.46,233.612 1924.03,232.62 1924.59,231.378 1925.16,230.351 1925.73,230.347 1926.3,231.417 1926.87,228.209 1927.44,230.587 1928,231.788 1928.57,230.901 1929.14,230.984 1929.71,229.998 1930.28,228.86 1930.85,229.214 1931.41,228.57 1931.98,228.643 1932.55,227.899 1933.12,229.008 1933.69,228.158 1934.26,229.45 1934.82,230.564 1935.39,230.667 1935.96,230.762 1936.53,231.874 1937.1,233.982 1937.67,231.667 1938.23,235.69 1938.8,233.417 1939.37,233.195 1939.94,233.913 1940.51,235.922 1941.08,233.438 1941.64,234.161 1942.21,233.977 1942.78,232.739 1943.35,231.571 1943.92,231.747 1944.49,231.655 1945.05,230.759 1945.62,230.788 1946.19,231.036 1946.76,231.038 1947.33,231.115 1947.9,231.036 1948.46,232.185 1949.03,233.141 1949.6,233.777 1950.17,232.627 1950.74,236.591 1951.31,233.988 1951.87,232.91 1952.44,232.764 1953.01,233.506 1953.58,233.124 1954.15,230.613 1954.72,230.848 1955.28,231.031 1955.85,232.08 1956.42,232.13 1956.99,230.145 1957.56,229.415 1958.13,228.484 1958.69,225.269 1959.26,225.774 1959.83,226.114 1960.4,226.14 1960.97,227.431 1961.54,225.505 1962.1,225.006 1962.67,224.417 1963.24,225.782 1963.81,227.28 1964.38,228.725 1964.95,227.95 1965.51,226.15 1966.08,227.727 1966.65,226.908 1967.22,226.246 1967.79,226.559 1968.36,225.783 1968.92,226.265 1969.49,226.54 1970.06,226.879 1970.63,227.234 1971.2,229.688 1971.77,230.945 1972.34,231.9 1972.9,231.968 1973.47,233.164 1974.04,233.061 1974.61,233.956 1975.18,233.626 1975.75,234.615 1976.31,235.454 1976.88,234.028 1977.45,234.819 1978.02,233.689 1978.59,232.644 1979.16,232.653 1979.72,233.647 1980.29,233.648 1980.86,232.562 1981.43,233.396 1982,230.265 1982.57,230.323 1983.13,230.268 1983.7,229.374 1984.27,229.452 1984.84,229.607 1985.41,228.615 1985.98,230.019 1986.54,232.269 1987.11,237.619 1987.68,235.209 1988.25,235.851 1988.82,235.522 1989.39,233.13 1989.95,232.988 1990.52,234.104 1991.09,232.654 1991.66,233.385 1992.23,232.972 1992.8,232.909 1993.36,231.705 1993.93,231.464 1994.5,231.476 1995.07,230.349 1995.64,233.272 1996.21,233.108 1996.77,230.858 1997.34,227.834 1997.91,225.842 1998.48,227.18 1999.05,224.286 1999.62,225.713 2000.18,226.88 2000.75,224.144 2001.32,224.544 2001.89,225 2002.46,225.368 2003.03,224.985 2003.59,226.509 2004.16,229.087 2004.73,230.513 2005.3,231.523 2005.87,232.547 2006.44,232.397 2007,233.125 2007.57,232.257 2008.14,233.224 2008.71,233.123 2009.28,232.158 2009.85,232.005 2010.41,232.775 2010.98,233.594 2011.55,233.383 2012.12,234.362 2012.69,234.298 2013.26,237.28 2013.82,236.858 2014.39,235.486 2014.96,232.169 2015.53,234.948 2016.1,233.394 2016.67,234.981 2017.23,232.642 2017.8,232.293 2018.37,235.329 2018.94,235.989 2019.51,236.443 2020.08,236.021 2020.64,236.563 2021.21,233.908 2021.78,232.797 2022.35,232.747 2022.92,232.346 2023.49,232.344 2024.05,236.299 2024.62,235.82 2025.19,235.458 2025.76,234.046 2026.33,232.632 2026.9,234.292 2027.46,233.901 2028.03,233.728 2028.6,233.337 2029.17,229.99 2029.74,230.95 2030.31,232.082 2030.87,232.918 2031.44,230.533 2032.01,229.603 2032.58,229.749 2033.15,230.779 2033.72,230.691 2034.28,229.79 2034.85,229.699 2035.42,230.794 2035.99,229.586 2036.56,230.399 2037.13,230.331 2037.69,230.208 2038.26,230.001 2038.83,230.818 2039.4,229.831 2039.97,228.785 2040.54,229.983 2041.11,228.789 2041.67,231.771 2042.24,231.702 2042.81,229.723 2043.38,227.951 2043.95,226.937 2044.52,226.24 2045.08,226.537 2045.65,228.952 2046.22,227.893 2046.79,228.086 2047.36,225.291 2047.93,227.921 2048.49,230.038 2049.06,227.061 2049.63,228.333 2050.2,228.623 2050.77,226.676 2051.34,230.901 2051.9,231.017 2052.47,233.052 2053.04,230.727 2053.61,230.863 2054.18,230.693 2054.75,231.601 2055.31,231.542 2055.88,229.387 2056.45,230.388 2057.02,231.374 2057.59,229.234 2058.16,229.351 2058.72,231.405 2059.29,233.46 2059.86,233.22 2060.43,232.932 2061,233.93 2061.57,233.512 2062.13,233.208 2062.7,232.203 2063.27,233.09 2063.84,228.722 2064.41,228.787 2064.98,228.853 2065.54,227.835 2066.11,226.817 2066.68,228.164 2067.25,228.273 2067.82,229.29 2068.39,228.442 2068.95,228.671 2069.52,228.754 2070.09,228.774 2070.66,229.014 2071.23,229.114 2071.8,230.17 2072.36,230.411 2072.93,230.437 2073.5,230.47 2074.07,229.446 2074.64,229.618 2075.21,228.751 2075.77,225.876 2076.34,226.366 2076.91,227.698 2077.48,227.602 2078.05,226.656 2078.62,229.093 2079.18,230.956 2079.75,230.826 2080.32,230.789 2080.89,229.796 2081.46,228.851 2082.03,226.89 2082.59,226.154 2083.16,227.467 2083.73,227.691 2084.3,227.176 2084.87,227.403 2085.44,228.533 2086,228.66 2086.57,228.718 2087.14,228.799 2087.71,228.84 2088.28,228.091 2088.85,229.408 2089.41,228.583 2089.98,228.905 2090.55,229.076 2091.12,228.34 2091.69,228.605 2092.26,228.921 2092.82,227.103 2093.39,226.204 2093.96,228.51 2094.53,228.477 2095.1,228.612 2095.67,225.717 2096.23,226.243 2096.8,229.757 2097.37,228.867 2097.94,229.245 2098.51,228.589 2099.08,226.946 2099.64,228.307 2100.21,229.735 2100.78,227.922 2101.35,229.174 2101.92,230.263 2102.49,229.574 2103.05,229.82 2103.62,230.068 2104.19,231.386 2104.76,231.456 2105.33,229.44 2105.9,230.898 2106.46,234.983 2107.03,232.889 2107.6,234.006 2108.17,235.145 2108.74,237.072 2109.31,236.753 2109.87,236.231 2110.44,236.742 2111.01,235.659 2111.58,236.559 2112.15,233.227 2112.72,232.842 2113.29,232.716 2113.85,233.991 2114.42,232.712 2114.99,233.831 2115.56,234.523 2116.13,235.091 2116.7,235.553 2117.26,234.352 2117.83,235.265 2118.4,237.098 2118.97,237.818 2119.54,240.457 2120.11,240.812 2120.67,241.239 2121.24,240.39 2121.81,238.558 2122.38,239.856 2122.95,236.325 2123.52,236.859 2124.08,234.284 2124.65,232.876 2125.22,230.527 2125.79,231.586 2126.36,232.357 2126.93,232.232 2127.49,232.004 2128.06,230.725 2128.63,231.604 2129.2,231.601 2129.77,232.416 2130.34,231.297 2130.9,231.046 2131.47,230.961 2132.04,232.066 2132.61,230.76 2133.18,232.829 2133.75,232.736 2134.31,232.623 2134.88,230.378 2135.45,230.328 2136.02,229.271 2136.59,229.444 2137.16,228.558 2137.72,227.63 2138.29,229.018 2138.86,226.051 2139.43,226.405 2140,225.679 2140.57,226.094 2141.13,226.373 2141.7,226.73 2142.27,228.203 2142.84,229.322 2143.41,228.346 2143.98,230.44 2144.54,230.454 2145.11,231.616 2145.68,230.521 2146.25,228.333 2146.82,227.373 2147.39,226.535 2147.95,227.767 2148.52,227.913 2149.09,228.105 2149.66,228.322 2150.23,227.226 2150.8,226.333 2151.36,227.636 2151.93,230.972 2152.5,231.001 2153.07,230.765 2153.64,230.574 2154.21,228.459 2154.77,228.565 2155.34,229.644 2155.91,228.647 2156.48,228.806 2157.05,227.806 2157.62,227.997 2158.18,226.175 2158.75,225.689 2159.32,226.029 2159.89,223.327 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.019\n  with uncertainty of ± 0.0012352862796904684\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01365 ± (0.00193893, 0.00195643) (MC)\n  95% confidence interval: [-4.01739, -4.00976] (MC)\n  linear error propagation: -4.01369 ± 0.00199753\n  |δ_y| = |0.00121679| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013654383144462, val_l = 0.003738275648197842, val_u = 0.0038984779490034427)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip490\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip491\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip492\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.14 2211.02,1148.14 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,985.513 2211.02,985.513 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,822.884 2211.02,822.884 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,660.256 2211.02,660.256 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,497.628 2211.02,497.628 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,334.999 2211.02,334.999 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.14 365.751,1148.14 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,985.513 365.751,985.513 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,822.884 365.751,822.884 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,660.256 365.751,660.256 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,497.628 365.751,497.628 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,334.999 365.751,334.999 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M298.909 1133.94 Q295.298 1133.94 293.469 1137.5 Q291.664 1141.05 291.664 1148.18 Q291.664 1155.28 293.469 1158.85 Q295.298 1162.39 298.909 1162.39 Q302.543 1162.39 304.349 1158.85 Q306.177 1155.28 306.177 1148.18 Q306.177 1141.05 304.349 1137.5 Q302.543 1133.94 298.909 1133.94 M298.909 1130.24 Q304.719 1130.24 307.775 1134.84 Q310.853 1139.43 310.853 1148.18 Q310.853 1156.9 307.775 1161.51 Q304.719 1166.09 298.909 1166.09 Q293.099 1166.09 290.02 1161.51 Q286.964 1156.9 286.964 1148.18 Q286.964 1139.43 290.02 1134.84 Q293.099 1130.24 298.909 1130.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M259.557 998.858 L267.196 998.858 L267.196 972.492 L258.886 974.159 L258.886 969.9 L267.15 968.233 L271.826 968.233 L271.826 998.858 L279.465 998.858 L279.465 1002.79 L259.557 1002.79 L259.557 998.858 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M298.909 971.312 Q295.298 971.312 293.469 974.876 Q291.664 978.418 291.664 985.548 Q291.664 992.654 293.469 996.219 Q295.298 999.761 298.909 999.761 Q302.543 999.761 304.349 996.219 Q306.177 992.654 306.177 985.548 Q306.177 978.418 304.349 974.876 Q302.543 971.312 298.909 971.312 M298.909 967.608 Q304.719 967.608 307.775 972.214 Q310.853 976.798 310.853 985.548 Q310.853 994.274 307.775 998.881 Q304.719 1003.46 298.909 1003.46 Q293.099 1003.46 290.02 998.881 Q286.964 994.274 286.964 985.548 Q286.964 976.798 290.02 972.214 Q293.099 967.608 298.909 967.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M262.775 836.229 L279.094 836.229 L279.094 840.164 L257.15 840.164 L257.15 836.229 Q259.812 833.475 264.395 828.845 Q269.002 824.192 270.182 822.85 Q272.428 820.327 273.307 818.591 Q274.21 816.831 274.21 815.141 Q274.21 812.387 272.266 810.651 Q270.344 808.915 267.242 808.915 Q265.043 808.915 262.59 809.679 Q260.159 810.442 257.381 811.993 L257.381 807.271 Q260.205 806.137 262.659 805.558 Q265.113 804.979 267.15 804.979 Q272.52 804.979 275.715 807.665 Q278.909 810.35 278.909 814.841 Q278.909 816.97 278.099 818.891 Q277.312 820.79 275.205 823.382 Q274.627 824.053 271.525 827.271 Q268.423 830.465 262.775 836.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M298.909 808.683 Q295.298 808.683 293.469 812.248 Q291.664 815.79 291.664 822.919 Q291.664 830.026 293.469 833.59 Q295.298 837.132 298.909 837.132 Q302.543 837.132 304.349 833.59 Q306.177 830.026 306.177 822.919 Q306.177 815.79 304.349 812.248 Q302.543 808.683 298.909 808.683 M298.909 804.979 Q304.719 804.979 307.775 809.586 Q310.853 814.169 310.853 822.919 Q310.853 831.646 307.775 836.252 Q304.719 840.836 298.909 840.836 Q293.099 840.836 290.02 836.252 Q286.964 831.646 286.964 822.919 Q286.964 814.169 290.02 809.586 Q293.099 804.979 298.909 804.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M272.914 658.902 Q276.27 659.619 278.145 661.888 Q280.043 664.156 280.043 667.49 Q280.043 672.606 276.525 675.406 Q273.006 678.207 266.525 678.207 Q264.349 678.207 262.034 677.768 Q259.742 677.351 257.289 676.494 L257.289 671.981 Q259.233 673.115 261.548 673.693 Q263.863 674.272 266.386 674.272 Q270.784 674.272 273.076 672.536 Q275.39 670.8 275.39 667.49 Q275.39 664.434 273.238 662.721 Q271.108 660.985 267.289 660.985 L263.261 660.985 L263.261 657.143 L267.474 657.143 Q270.923 657.143 272.752 655.777 Q274.58 654.388 274.58 651.795 Q274.58 649.133 272.682 647.721 Q270.807 646.286 267.289 646.286 Q265.367 646.286 263.168 646.703 Q260.969 647.12 258.33 647.999 L258.33 643.833 Q260.992 643.092 263.307 642.721 Q265.645 642.351 267.705 642.351 Q273.029 642.351 276.131 644.782 Q279.233 647.189 279.233 651.309 Q279.233 654.18 277.59 656.17 Q275.946 658.138 272.914 658.902 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M298.909 646.055 Q295.298 646.055 293.469 649.62 Q291.664 653.161 291.664 660.291 Q291.664 667.397 293.469 670.962 Q295.298 674.504 298.909 674.504 Q302.543 674.504 304.349 670.962 Q306.177 667.397 306.177 660.291 Q306.177 653.161 304.349 649.62 Q302.543 646.055 298.909 646.055 M298.909 642.351 Q304.719 642.351 307.775 646.958 Q310.853 651.541 310.853 660.291 Q310.853 669.018 307.775 673.624 Q304.719 678.207 298.909 678.207 Q293.099 678.207 290.02 673.624 Q286.964 669.018 286.964 660.291 Q286.964 651.541 290.02 646.958 Q293.099 642.351 298.909 642.351 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M271.594 484.422 L259.789 502.871 L271.594 502.871 L271.594 484.422 M270.367 480.348 L276.247 480.348 L276.247 502.871 L281.177 502.871 L281.177 506.76 L276.247 506.76 L276.247 514.908 L271.594 514.908 L271.594 506.76 L255.992 506.76 L255.992 502.246 L270.367 480.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M298.909 483.426 Q295.298 483.426 293.469 486.991 Q291.664 490.533 291.664 497.662 Q291.664 504.769 293.469 508.334 Q295.298 511.875 298.909 511.875 Q302.543 511.875 304.349 508.334 Q306.177 504.769 306.177 497.662 Q306.177 490.533 304.349 486.991 Q302.543 483.426 298.909 483.426 M298.909 479.723 Q304.719 479.723 307.775 484.329 Q310.853 488.912 310.853 497.662 Q310.853 506.389 307.775 510.996 Q304.719 515.579 298.909 515.579 Q293.099 515.579 290.02 510.996 Q286.964 506.389 286.964 497.662 Q286.964 488.912 290.02 484.329 Q293.099 479.723 298.909 479.723 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M258.793 317.719 L277.15 317.719 L277.15 321.654 L263.076 321.654 L263.076 330.127 Q264.094 329.779 265.113 329.617 Q266.131 329.432 267.15 329.432 Q272.937 329.432 276.316 332.603 Q279.696 335.775 279.696 341.191 Q279.696 346.77 276.224 349.872 Q272.752 352.95 266.432 352.95 Q264.256 352.95 261.988 352.58 Q259.742 352.21 257.335 351.469 L257.335 346.77 Q259.418 347.904 261.641 348.46 Q263.863 349.015 266.34 349.015 Q270.344 349.015 272.682 346.909 Q275.02 344.802 275.02 341.191 Q275.02 337.58 272.682 335.474 Q270.344 333.367 266.34 333.367 Q264.465 333.367 262.59 333.784 Q260.738 334.201 258.793 335.08 L258.793 317.719 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M298.909 320.798 Q295.298 320.798 293.469 324.363 Q291.664 327.904 291.664 335.034 Q291.664 342.14 293.469 345.705 Q295.298 349.247 298.909 349.247 Q302.543 349.247 304.349 345.705 Q306.177 342.14 306.177 335.034 Q306.177 327.904 304.349 324.363 Q302.543 320.798 298.909 320.798 M298.909 317.094 Q304.719 317.094 307.775 321.701 Q310.853 326.284 310.853 335.034 Q310.853 343.761 307.775 348.367 Q304.719 352.95 298.909 352.95 Q293.099 352.95 290.02 348.367 Q286.964 343.761 286.964 335.034 Q286.964 326.284 290.02 321.701 Q293.099 317.094 298.909 317.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.31 400.199,918.225 400.786,817.217 401.372,724.677 401.958,640.041 402.545,562.787 403.131,492.434 403.718,535.718 404.304,474.17 404.891,509.995 405.477,455.114 406.063,483.282 406.65,434.815 407.236,459.857 407.823,414.891 408.409,374.543 408.995,339.64 409.582,307.584 410.168,279.304 410.755,305.715 411.341,280.697 411.927,258.954 412.514,241.31 413.1,226.469 413.687,249.754 414.273,238.32 414.86,230.325 415.446,224.397 416.032,219.895 416.619,242.99 417.205,264.992 417.792,264.425 418.378,265.011 418.964,287.908 419.551,291.383 420.137,314.066 420.724,319.723 421.31,341.779 421.896,347.165 422.483,354.227 423.069,361.075 423.656,369.07 424.242,390.799 424.829,399.793 425.415,431.167 426.001,451.191 426.588,481.965 427.174,501.24 427.761,510.615 428.347,545.557 428.933,585.218 429.52,614.592 430.106,628.64 430.693,642.667 431.279,657.112 431.865,671.349 432.452,684.762 433.038,697.565 433.625,704.966 434.211,718.188 434.798,726.175 435.384,747.816 435.97,768.413 436.557,780.177 437.143,787.585 437.73,798.823 438.316,813.873 438.902,828.516 439.489,838.21 440.075,844.705 440.662,854.585 441.248,870.936 441.835,883.398 442.421,898.995 443.007,910.871 443.594,922.415 444.18,926.954 444.767,941.42 445.353,946.569 445.939,960.16 446.526,964.898 447.112,975.252 447.699,985.298 448.285,992.097 448.871,996.307 449.458,1003.06 450.044,1011.83 450.631,1020.73 451.217,1026.65 451.804,1037.09 452.39,1042.81 452.976,1053.16 453.563,1056.17 454.149,1063.92 454.736,1071.35 455.322,1078 455.908,1082.76 456.495,1092.1 457.081,1094.77 457.668,1097.23 458.254,1100.07 458.84,1102.89 459.427,1105.45 460.013,1108.35 460.6,1116.75 461.186,1124.52 461.773,1128.37 462.359,1133.8 462.945,1135.35 463.532,1142.72 464.118,1146.44 464.705,1151.58 465.291,1156.76 465.877,1163 466.464,1164.17 467.05,1168.89 467.637,1176.86 468.223,1175.89 468.809,1175.13 469.396,1176.19 469.982,1180.26 470.569,1181.09 471.155,1180.46 471.742,1183.33 472.328,1184.29 472.914,1185.5 473.501,1186.79 474.087,1191.24 474.674,1198.4 475.26,1202.23 475.846,1204.36 476.433,1209.32 477.019,1211.11 477.606,1212.57 478.192,1212.63 478.778,1212.78 479.365,1212.99 479.951,1211.93 480.538,1214.91 481.124,1213.59 481.711,1211.89 482.297,1217.01 482.883,1216.74 483.47,1218.43 484.056,1223.07 484.643,1224.05 485.229,1225.73 485.815,1227.05 486.402,1227.13 486.988,1227.06 487.575,1225.33 488.161,1229.52 488.748,1232.4 489.334,1231.78 489.92,1232.74 490.507,1233.8 491.093,1231.93 491.68,1230.09 492.266,1234.2 492.852,1232.82 493.439,1232.41 494.025,1239.45 494.612,1240.68 495.198,1240.42 495.784,1242.9 496.371,1245.3 496.957,1245.93 497.544,1246.67 498.13,1248.68 498.717,1247.92 499.303,1248.29 499.889,1247.31 500.476,1248.2 501.062,1249.99 501.649,1250.53 502.235,1248.03 502.821,1247.22 503.408,1249.58 503.994,1248.81 504.581,1248.46 505.167,1249.23 505.753,1246.99 506.34,1247.91 506.926,1248.53 507.513,1247.57 508.099,1245.33 508.686,1243.24 509.272,1242.86 509.858,1242.57 510.445,1243.45 511.031,1241.52 511.618,1242.4 512.204,1242.11 512.79,1238.71 513.377,1241.22 513.963,1242.26 514.55,1240.79 515.136,1241.79 515.722,1240.42 516.309,1238.62 516.895,1240 517.482,1241.18 518.068,1240.86 518.655,1237.64 519.241,1238.56 519.827,1238.51 520.414,1236.99 521,1236.86 521.587,1236.92 522.173,1237.94 522.759,1235.17 523.346,1237.77 523.932,1239.04 524.519,1239.8 525.105,1240.89 525.691,1240.47 526.278,1238.52 526.864,1238.13 527.451,1239.29 528.037,1239.3 528.624,1245.78 529.21,1248.05 529.796,1247.4 530.383,1246.58 530.969,1245.83 531.556,1244.77 532.142,1245.48 532.728,1243.34 533.315,1243.92 533.901,1245.91 534.488,1247.8 535.074,1245.61 535.661,1243.68 536.247,1245.74 536.833,1246.5 537.42,1244.36 538.006,1243.78 538.593,1243.41 539.179,1242.84 539.765,1243.59 540.352,1244.39 540.938,1239.9 541.525,1240.78 542.111,1239.04 542.697,1237.17 543.284,1238.45 543.87,1244.93 544.457,1246.99 545.043,1246.38 545.63,1245.74 546.216,1244.96 546.802,1245.51 547.389,1246.28 547.975,1244.31 548.562,1241.27 549.148,1240.82 549.734,1239.36 550.321,1240.5 550.907,1241.46 551.494,1241.06 552.08,1239.05 552.666,1238.78 553.253,1236.87 553.839,1237.84 554.426,1235.16 555.012,1234.8 555.599,1234.54 556.185,1232.62 556.771,1232.48 557.358,1232.58 557.944,1233.72 558.531,1232.28 559.117,1233.49 559.703,1237.37 560.29,1237.39 560.876,1236.94 561.463,1240.69 562.049,1243.85 562.635,1245.94 563.222,1244.88 563.808,1245.46 564.395,1244.55 564.981,1242.35 565.568,1240.25 566.154,1243.59 566.74,1245.73 567.327,1246.12 567.913,1247.85 568.5,1248.54 569.086,1246.26 569.672,1245.89 570.259,1242.46 570.845,1239.28 571.432,1237.68 572.018,1237.06 572.605,1237.92 573.191,1237.74 573.777,1238.62 574.364,1238 574.95,1236.46 575.537,1237.51 576.123,1235.82 576.709,1232.67 577.296,1235.18 577.882,1237.66 578.469,1237.04 579.055,1236.36 579.641,1237.17 580.228,1235.23 580.814,1233.57 581.401,1238.56 581.987,1235.25 582.574,1234.7 583.16,1232.56 583.746,1232.15 584.333,1231.86 584.919,1231.71 585.506,1236.43 586.092,1239.66 586.678,1237.65 587.265,1239.67 587.851,1238.98 588.438,1238.41 589.024,1236.5 589.61,1236.07 590.197,1234.23 590.783,1234.96 591.37,1233.2 591.956,1234.13 592.543,1232.5 593.129,1233.4 593.715,1235.49 594.302,1236.18 594.888,1236.78 595.475,1236.35 596.061,1234.79 596.647,1235.41 597.234,1237.46 597.82,1236.77 598.407,1236.16 598.993,1235.29 599.579,1234.4 600.166,1236.64 600.752,1237.28 601.339,1235.29 601.925,1236.09 602.512,1233.01 603.098,1231.18 603.684,1229.85 604.271,1231.02 604.857,1229.32 605.444,1227.75 606.03,1230.28 606.616,1231.12 607.203,1229.5 607.789,1231.79 608.376,1231.15 608.962,1226.83 609.548,1228.08 610.135,1229.36 610.721,1227.76 611.308,1228.85 611.894,1224.38 612.481,1225.61 613.067,1225.58 613.653,1227.02 614.24,1227.12 614.826,1227.17 615.413,1225.67 615.999,1228.15 616.585,1228.05 617.172,1226.62 617.758,1226.4 618.345,1226.26 618.931,1223.61 619.518,1222.28 620.104,1224.75 620.69,1228.59 621.277,1229.51 621.863,1227.78 622.45,1224.63 623.036,1227.25 623.622,1227.19 624.209,1228.33 624.795,1229.17 625.382,1229.06 625.968,1230.07 626.554,1232.43 627.141,1230.6 627.727,1230.29 628.314,1229.96 628.9,1230.8 629.487,1229.41 630.073,1230.3 630.659,1230.22 631.246,1227.2 631.832,1226.99 632.419,1226.56 633.005,1227.68 633.591,1226.01 634.178,1228.46 634.764,1230.58 635.351,1228.75 635.937,1230.95 636.523,1227.84 637.11,1226.2 637.696,1219.39 638.283,1221.08 638.869,1221.24 639.456,1225.56 640.042,1225.56 640.628,1226.52 641.215,1226.18 641.801,1226.06 642.388,1224.57 642.974,1223.24 643.56,1219.01 644.147,1220.39 644.733,1221.88 645.32,1223.22 645.906,1222.17 646.492,1218.38 647.079,1218.55 647.665,1220.1 648.252,1221.33 648.838,1222.66 649.425,1220.19 650.011,1217.61 650.597,1216.5 651.184,1215.58 651.77,1217.51 652.357,1216.31 652.943,1220.45 653.529,1221.83 654.116,1221.77 654.702,1223.1 655.289,1222.9 655.875,1224.12 656.462,1223.67 657.048,1223.36 657.634,1224.44 658.221,1224.22 658.807,1222.78 659.394,1220.02 659.98,1225.46 660.566,1226.35 661.153,1226.28 661.739,1226.11 662.326,1225.89 662.912,1222.86 663.498,1225.37 664.085,1225.11 664.671,1226.48 665.258,1226.04 665.844,1225.7 666.431,1226.99 667.017,1227.79 667.603,1228.57 668.19,1229.44 668.776,1230.69 669.363,1231.26 669.949,1232.14 670.535,1234.3 671.122,1230.97 671.708,1230.52 672.295,1229.81 672.881,1230.81 673.467,1230.47 674.054,1227.03 674.64,1226.66 675.227,1224.98 675.813,1227.45 676.4,1225.95 676.986,1225.39 677.572,1226.16 678.159,1221.62 678.745,1221.85 679.332,1221.67 679.918,1225.65 680.504,1227.65 681.091,1223.37 681.677,1220.54 682.264,1216.68 682.85,1218.32 683.436,1221.01 684.023,1219.66 684.609,1219.93 685.196,1221.24 685.782,1222.42 686.369,1225.04 686.955,1225.78 687.541,1226.94 688.128,1222.68 688.714,1222.42 689.301,1223.48 689.887,1223.33 690.473,1223.55 691.06,1221.72 691.646,1220.17 692.233,1221.26 692.819,1218.55 693.405,1218.71 693.992,1220.08 694.578,1220.2 695.165,1220.16 695.751,1223.98 696.338,1223.72 696.924,1223.45 697.51,1223.4 698.097,1225.96 698.683,1226.89 699.27,1226.56 699.856,1226.17 700.442,1225.7 701.029,1225.46 701.615,1223.81 702.202,1223.62 702.788,1222.09 703.375,1220.31 703.961,1220.22 704.547,1220.28 705.134,1220.11 705.72,1219.89 706.307,1215.96 706.893,1214.82 707.479,1217.83 708.066,1217.9 708.652,1220.84 709.239,1220.77 709.825,1220.62 710.411,1220.64 710.998,1217.68 711.584,1219.05 712.171,1220.51 712.757,1217.82 713.344,1216.34 713.93,1216.33 714.516,1216.34 715.103,1217.73 715.689,1214.88 716.276,1213.52 716.862,1212.38 717.448,1212.88 718.035,1214.66 718.621,1216.33 719.208,1217.87 719.794,1217.82 720.38,1220.53 720.967,1219.17 721.553,1217.75 722.14,1217.77 722.726,1217.53 723.313,1214.83 723.899,1216.2 724.485,1216.41 725.072,1213.84 725.658,1215.69 726.245,1215.64 726.831,1217.18 727.417,1215.98 728.004,1213.44 728.59,1213.73 729.177,1214.09 729.763,1215.4 730.349,1215.54 730.936,1219.5 731.522,1217.9 732.109,1218.99 732.695,1220.45 733.282,1221.53 733.868,1221.27 734.454,1222.47 735.041,1220.84 735.627,1224.71 736.214,1223.04 736.8,1225.36 737.386,1226.15 737.973,1224.4 738.559,1223.02 739.146,1222.74 739.732,1222.46 740.318,1219.68 740.905,1217.06 741.491,1220.09 742.078,1218.67 742.664,1218.65 743.251,1217.08 743.837,1217.02 744.423,1216.1 745.01,1217.57 745.596,1217.67 746.183,1215.02 746.769,1215.09 747.355,1217.85 747.942,1220.66 748.528,1221.39 749.115,1223.65 749.701,1220.72 750.288,1221.91 750.874,1220.24 751.46,1221.68 752.047,1222.98 752.633,1222.76 753.22,1223.72 753.806,1226.02 754.392,1225.43 754.979,1225.11 755.565,1226.02 756.152,1225.26 756.738,1226.34 757.324,1224.61 757.911,1224.41 758.497,1222.99 759.084,1222.86 759.67,1222.71 760.257,1221.16 760.843,1220.66 761.429,1223.11 762.016,1225.14 762.602,1222.25 763.189,1223.22 763.775,1225.61 764.361,1222.37 764.948,1223.29 765.534,1221.59 766.121,1222.75 766.707,1221.29 767.293,1218.31 767.88,1218.09 768.466,1220.46 769.053,1220.02 769.639,1217.24 770.226,1219.98 770.812,1219.32 771.398,1218.26 771.985,1215.46 772.571,1218.39 773.158,1214.5 773.744,1218.62 774.33,1218.5 774.917,1218.3 775.503,1216.98 776.09,1218.38 776.676,1219.55 777.262,1219.61 777.849,1223.47 778.435,1220.3 779.022,1220.02 779.608,1219.87 780.195,1218.49 780.781,1220.88 781.367,1221.93 781.954,1223.08 782.54,1224.22 783.127,1223.84 783.713,1223.31 784.299,1225.18 784.886,1223.23 785.472,1224.12 786.059,1224.77 786.645,1224.42 787.232,1223.9 787.818,1221.06 788.404,1220.92 788.991,1220.45 789.577,1219.12 790.164,1217.69 790.75,1217.68 791.336,1217.67 791.923,1217.87 792.509,1219.21 793.096,1221.65 793.682,1218.77 794.268,1222.68 794.855,1222.59 795.441,1219.28 796.028,1220.14 796.614,1218.66 797.201,1218.26 797.787,1218.31 798.373,1215.59 798.96,1218.14 799.546,1216.81 800.133,1216.72 800.719,1217.98 801.305,1216.21 801.892,1216.11 802.478,1216.14 803.065,1216.12 803.651,1218.88 804.237,1218.99 804.824,1217.46 805.41,1221.38 805.997,1222.44 806.583,1220.99 807.17,1220.78 807.756,1221.56 808.342,1218.28 808.929,1220.81 809.515,1216.38 810.102,1216.22 810.688,1213.58 811.274,1210.03 811.861,1211.73 812.447,1207.89 813.034,1208.26 813.62,1208.55 814.206,1206.24 814.793,1202.6 815.379,1204.59 815.966,1206.49 816.552,1209.73 817.139,1209.87 817.725,1211.23 818.311,1209.91 818.898,1210.31 819.484,1214.57 820.071,1213.43 820.657,1215.13 821.243,1216.46 821.83,1213.81 822.416,1216.52 823.003,1212.71 823.589,1209.16 824.175,1212.43 824.762,1212.73 825.348,1214.24 825.935,1218.19 826.521,1219.43 827.108,1218.07 827.694,1219.53 828.28,1219.25 828.867,1219.1 829.453,1220.04 830.04,1218.42 830.626,1217 831.212,1216.9 831.799,1216.61 832.385,1217.92 832.972,1215.17 833.558,1216.56 834.145,1215.12 834.731,1217.76 835.317,1217.49 835.904,1215.82 836.49,1221.17 837.077,1222.16 837.663,1220.77 838.249,1220.54 838.836,1221.7 839.422,1221.61 840.009,1221.02 840.595,1219.62 841.181,1219.34 841.768,1220.39 842.354,1220.2 842.941,1218.88 843.527,1214.62 844.114,1212.09 844.7,1212.46 845.286,1213.96 845.873,1213.97 846.459,1214.12 847.046,1214.22 847.632,1212.8 848.218,1211.57 848.805,1213.02 849.391,1215.71 849.978,1213.11 850.564,1212.34 851.15,1212.79 851.737,1212.7 852.323,1214.01 852.91,1211.19 853.496,1214.39 854.083,1213.18 854.669,1210.58 855.255,1212.37 855.842,1214.12 856.428,1213.03 857.015,1213.25 857.601,1214.67 858.187,1211.97 858.774,1210.66 859.36,1210.88 859.947,1211.11 860.533,1210.22 861.119,1209.16 861.706,1209.57 862.292,1210.06 862.879,1210.26 863.465,1210.66 864.052,1212.06 864.638,1209.7 865.224,1207.66 865.811,1207.96 866.397,1210.97 866.984,1210.08 867.57,1211.51 868.156,1212.02 868.743,1207.05 869.329,1210.18 869.916,1210.76 870.502,1208.5 871.089,1209.11 871.675,1209.57 872.261,1210.05 872.848,1210.56 873.434,1211.01 874.021,1211.48 874.607,1210.33 875.193,1211.88 875.78,1212.17 876.366,1213.86 876.953,1213.85 877.539,1215.19 878.125,1212.44 878.712,1211.2 879.298,1210.12 879.885,1212.88 880.471,1211.35 881.058,1214.4 881.644,1217.1 882.23,1216.98 882.817,1217.1 883.403,1215.87 883.99,1213.59 884.576,1214.96 885.162,1213.81 885.749,1212.76 886.335,1211.62 886.922,1212.06 887.508,1214.7 888.094,1213.71 888.681,1212.84 889.267,1210.26 889.854,1210.54 890.44,1212.4 891.027,1215.14 891.613,1215.22 892.199,1213.94 892.786,1212.86 893.372,1215.64 893.959,1214.28 894.545,1214.54 895.131,1214.48 895.718,1214.88 896.304,1213.45 896.891,1213.67 897.477,1213.96 898.063,1215.16 898.65,1213.87 899.236,1213.88 899.823,1212.92 900.409,1215.72 900.996,1214.2 901.582,1214.31 902.168,1210.33 902.755,1210.44 903.341,1212.05 903.928,1213.4 904.514,1210.93 905.1,1209.94 905.687,1210.15 906.273,1213.33 906.86,1213.45 907.446,1214.92 908.032,1214.99 908.619,1214.94 909.205,1214.99 909.792,1216.32 910.378,1214.85 910.965,1216.27 911.551,1216.18 912.137,1215.85 912.724,1214.79 913.31,1218.73 913.897,1220.05 914.483,1218.74 915.069,1218.63 915.656,1219.66 916.242,1221.85 916.829,1220.16 917.415,1219.81 918.002,1220.88 918.588,1220.48 919.174,1219.9 919.761,1222.27 920.347,1220.52 920.934,1223.17 921.52,1225.17 922.106,1224.59 922.693,1222.86 923.279,1223.63 923.866,1227.01 924.452,1223.88 925.038,1223.26 925.625,1222.73 926.211,1222.1 926.798,1222.9 927.384,1226.25 927.971,1225.59 928.557,1224.76 929.143,1224.21 929.73,1226.28 930.316,1223.07 930.903,1224.29 931.489,1225.13 932.075,1227.02 932.662,1226.36 933.248,1224.51 933.835,1224.09 934.421,1224.94 935.007,1223.34 935.594,1224.08 936.18,1224.81 936.767,1226.9 937.353,1226.52 937.94,1227.12 938.526,1225.05 939.112,1224.22 939.699,1223.59 940.285,1220.3 940.872,1223.78 941.458,1225.95 942.044,1225.61 942.631,1221.13 943.217,1218.06 943.804,1213.75 944.39,1214.93 944.976,1213.52 945.563,1213.47 946.149,1212.41 946.736,1212.49 947.322,1211.43 947.909,1208.99 948.495,1206.44 949.081,1206.53 949.668,1206.95 950.254,1208.87 950.841,1207.86 951.427,1208.06 952.013,1210.84 952.6,1210.96 953.186,1213.71 953.773,1213.9 954.359,1216.73 954.945,1216.57 955.532,1217.63 956.118,1218.67 956.705,1218.65 957.291,1218.32 957.878,1219.36 958.464,1219.18 959.05,1217.83 959.637,1212.11 960.223,1210.77 960.81,1213.63 961.396,1208.3 961.982,1205.93 962.569,1208.88 963.155,1206.63 963.742,1205.47 964.328,1208.52 964.915,1208.91 965.501,1210.64 966.087,1210.78 966.674,1210.84 967.26,1211 967.847,1212.56 968.433,1211.35 969.019,1208.82 969.606,1209.11 970.192,1210.88 970.779,1209.65 971.365,1209.91 971.951,1209.94 972.538,1208.43 973.124,1207.34 973.711,1210.47 974.297,1210.82 974.884,1209.61 975.47,1207.6 976.056,1208.21 976.643,1212.56 977.229,1212.63 977.816,1211.57 978.402,1215.52 978.988,1217.03 979.575,1214.36 980.161,1212.76 980.748,1214.34 981.334,1214.54 981.92,1210.35 982.507,1210.68 983.093,1210.76 983.68,1212.48 984.266,1209.84 984.853,1211.51 985.439,1213.12 986.025,1215.58 986.612,1215.84 987.198,1214.46 987.785,1218.33 988.371,1220.66 988.957,1221.38 989.544,1223.85 990.13,1224.93 990.717,1221.92 991.303,1221.37 991.889,1220.99 992.476,1220.68 993.062,1219.03 993.649,1221.38 994.235,1222.42 994.822,1222.01 995.408,1221.6 995.994,1222.76 996.581,1220.83 997.167,1221.61 997.754,1218.25 998.34,1219.12 998.926,1216.28 999.513,1218.74 1000.1,1217.17 1000.69,1218.32 1001.27,1214.19 1001.86,1213.08 1002.44,1211.95 1003.03,1213.46 1003.62,1211.98 1004.2,1213.34 1004.79,1214.76 1005.38,1212.19 1005.96,1213.55 1006.55,1212.46 1007.14,1213.98 1007.72,1213.91 1008.31,1212.39 1008.9,1211.42 1009.48,1212.5 1010.07,1215.06 1010.65,1212.36 1011.24,1211.25 1011.83,1211.29 1012.41,1207.65 1013,1209.34 1013.59,1208.05 1014.17,1209.55 1014.76,1209.81 1015.35,1207.44 1015.93,1207.63 1016.52,1206.52 1017.11,1205.76 1017.69,1207.46 1018.28,1207.71 1018.86,1204.49 1019.45,1206.18 1020.04,1206.62 1020.62,1204.24 1021.21,1202.04 1021.8,1202.67 1022.38,1206 1022.97,1206.47 1023.56,1205.59 1024.14,1208.64 1024.73,1210.44 1025.32,1211.71 1025.9,1210.65 1026.49,1214.88 1027.07,1214.67 1027.66,1214.58 1028.25,1218.43 1028.83,1217.91 1029.42,1216.13 1030.01,1217.32 1030.59,1216.21 1031.18,1216.08 1031.77,1215.75 1032.35,1215.54 1032.94,1219.42 1033.52,1219.3 1034.11,1217.44 1034.7,1219.84 1035.28,1218.42 1035.87,1219.47 1036.46,1219.11 1037.04,1218.82 1037.63,1218.47 1038.22,1218.4 1038.8,1218.37 1039.39,1218.25 1039.98,1218.21 1040.56,1217.84 1041.15,1216.21 1041.73,1213.47 1042.32,1213.4 1042.91,1214.9 1043.49,1216.32 1044.08,1217.8 1044.67,1216.54 1045.25,1215.04 1045.84,1215.19 1046.43,1215.02 1047.01,1219.07 1047.6,1217.57 1048.19,1216.38 1048.77,1220.27 1049.36,1221.35 1049.94,1217.04 1050.53,1216.88 1051.12,1218 1051.7,1217.81 1052.29,1214.72 1052.88,1213.27 1053.46,1213.22 1054.05,1211.94 1054.64,1213.53 1055.22,1210.65 1055.81,1210.82 1056.39,1211.08 1056.98,1208.66 1057.57,1206.14 1058.15,1206.45 1058.74,1205.31 1059.33,1205.6 1059.91,1207.06 1060.5,1208.88 1061.09,1210.47 1061.67,1213.39 1062.26,1217.34 1062.85,1218.38 1063.43,1218.23 1064.02,1218.18 1064.6,1218.01 1065.19,1217.87 1065.78,1217.53 1066.36,1218.76 1066.95,1219.85 1067.54,1215.59 1068.12,1214.46 1068.71,1210.43 1069.3,1209.26 1069.88,1209.39 1070.47,1208.15 1071.06,1211.07 1071.64,1211.34 1072.23,1212.79 1072.81,1215.28 1073.4,1215.15 1073.99,1208.5 1074.57,1208.6 1075.16,1208.95 1075.75,1212.06 1076.33,1210.78 1076.92,1209.46 1077.51,1210.01 1078.09,1211.59 1078.68,1210.29 1079.26,1210.47 1079.85,1210.73 1080.44,1211.05 1081.02,1211.16 1081.61,1211.1 1082.2,1210 1082.78,1213.02 1083.37,1214.47 1083.96,1212.93 1084.54,1211.79 1085.13,1212.93 1085.72,1213.13 1086.3,1215.97 1086.89,1216.03 1087.47,1214.27 1088.06,1215.24 1088.65,1213.71 1089.23,1213.7 1089.82,1215 1090.41,1213.46 1090.99,1213.08 1091.58,1211.62 1092.17,1213.02 1092.75,1213.02 1093.34,1215.43 1093.93,1212.65 1094.51,1212.79 1095.1,1214.18 1095.68,1216.98 1096.27,1216.75 1096.86,1218.44 1097.44,1218.42 1098.03,1219.55 1098.62,1212.91 1099.2,1215.63 1099.79,1214.27 1100.38,1210.16 1100.96,1207.9 1101.55,1209.43 1102.14,1210.12 1102.72,1211.69 1103.31,1210.51 1103.89,1212.2 1104.48,1212.01 1105.07,1210.76 1105.65,1209.49 1106.24,1208.38 1106.83,1209.97 1107.41,1211.56 1108,1207.81 1108.59,1209.37 1109.17,1209.69 1109.76,1211.24 1110.34,1209.1 1110.93,1210.46 1111.52,1210.58 1112.1,1209.66 1112.69,1211.38 1113.28,1213.3 1113.86,1214.97 1114.45,1216.01 1115.04,1215.95 1115.62,1213.18 1116.21,1209.15 1116.8,1207.87 1117.38,1209.22 1117.97,1206.96 1118.55,1202.07 1119.14,1204.12 1119.73,1204.56 1120.31,1207.95 1120.9,1208.05 1121.49,1213.24 1122.07,1214.84 1122.66,1216.11 1123.25,1214.72 1123.83,1214.77 1124.42,1217.24 1125.01,1218.52 1125.59,1221.13 1126.18,1219.42 1126.76,1216.45 1127.35,1214.98 1127.94,1213.74 1128.52,1216.28 1129.11,1216.19 1129.7,1217.57 1130.28,1217.22 1130.87,1218.37 1131.46,1217.09 1132.04,1218.39 1132.63,1216.96 1133.21,1216.68 1133.8,1217.72 1134.39,1218.7 1134.97,1219.83 1135.56,1216.44 1136.15,1218.78 1136.73,1217.22 1137.32,1215.72 1137.91,1214.37 1138.49,1213.01 1139.08,1211.52 1139.67,1211.64 1140.25,1211.35 1140.84,1210.13 1141.42,1210.47 1142.01,1207.81 1142.6,1206.88 1143.18,1205.83 1143.77,1207.79 1144.36,1209.37 1144.94,1208.12 1145.53,1208.53 1146.12,1208.63 1146.7,1209.06 1147.29,1209.2 1147.88,1209.28 1148.46,1209.52 1149.05,1211.22 1149.63,1212.65 1150.22,1212.59 1150.81,1213.93 1151.39,1219.34 1151.98,1218.97 1152.57,1217.35 1153.15,1218.53 1153.74,1215.97 1154.33,1213.32 1154.91,1213.3 1155.5,1213.2 1156.09,1213.11 1156.67,1211.71 1157.26,1214.63 1157.84,1213.28 1158.43,1213.59 1159.02,1212.08 1159.6,1210.84 1160.19,1211.58 1160.78,1211.77 1161.36,1207.96 1161.95,1211.17 1162.54,1211.5 1163.12,1214.35 1163.71,1214.23 1164.29,1215.39 1164.88,1215.28 1165.47,1215.14 1166.05,1214.18 1166.64,1212.78 1167.23,1216.59 1167.81,1215.3 1168.4,1216.74 1168.99,1217.92 1169.57,1218.96 1170.16,1223.53 1170.75,1223.14 1171.33,1218.89 1171.92,1218.85 1172.5,1218.49 1173.09,1215.53 1173.68,1215.46 1174.26,1216.83 1174.85,1216.9 1175.44,1218.39 1176.02,1217.03 1176.61,1219.17 1177.2,1218.93 1177.78,1220.15 1178.37,1217.18 1178.96,1219.47 1179.54,1217.57 1180.13,1217.09 1180.71,1216.99 1181.3,1214.4 1181.89,1214.2 1182.47,1214.13 1183.06,1215.33 1183.65,1213.96 1184.23,1216.77 1184.82,1214.98 1185.41,1215.02 1185.99,1214.8 1186.58,1213.42 1187.16,1213.35 1187.75,1212.19 1188.34,1210.9 1188.92,1208.32 1189.51,1209.94 1190.1,1209.89 1190.68,1212.74 1191.27,1211.25 1191.86,1212.65 1192.44,1212.74 1193.03,1216.65 1193.62,1216.42 1194.2,1215 1194.79,1212.16 1195.37,1210.96 1195.96,1211.18 1196.55,1208.48 1197.13,1208.68 1197.72,1210.1 1198.31,1210.23 1198.89,1209.26 1199.48,1210.88 1200.07,1210.89 1200.65,1211.01 1201.24,1211.56 1201.83,1211.72 1202.41,1210.44 1203,1211.9 1203.58,1211.71 1204.17,1213 1204.76,1213.04 1205.34,1214.43 1205.93,1213.14 1206.52,1211.81 1207.1,1210.53 1207.69,1210.54 1208.28,1210.92 1208.86,1211.27 1209.45,1211.35 1210.03,1211.45 1210.62,1211.43 1211.21,1211.5 1211.79,1214.21 1212.38,1211.61 1212.97,1211.77 1213.55,1209.28 1214.14,1209.4 1214.73,1211.04 1215.31,1213.7 1215.9,1212.38 1216.49,1215.2 1217.07,1216.39 1217.66,1214.77 1218.24,1213.37 1218.83,1214.56 1219.42,1214.41 1220,1216.98 1220.59,1216.79 1221.18,1214.01 1221.76,1216.71 1222.35,1219.16 1222.94,1221.58 1223.52,1222.52 1224.11,1226.19 1224.7,1224.17 1225.28,1223.65 1225.87,1224.27 1226.45,1222.22 1227.04,1220.18 1227.63,1224.03 1228.21,1223.51 1228.8,1221.29 1229.39,1217.02 1229.97,1216.88 1230.56,1214.04 1231.15,1212.85 1231.73,1214.14 1232.32,1211.47 1232.91,1210.18 1233.49,1211.93 1234.08,1210.38 1234.66,1210.38 1235.25,1210.43 1235.84,1209.34 1236.42,1206.75 1237.01,1204.29 1237.6,1206.18 1238.18,1206.73 1238.77,1209.71 1239.36,1209.83 1239.94,1209.8 1240.53,1208.56 1241.11,1208.84 1241.7,1209.33 1242.29,1209.8 1242.87,1212.49 1243.46,1214.08 1244.05,1217.72 1244.63,1220.15 1245.22,1219.76 1245.81,1220.8 1246.39,1220.61 1246.98,1219.1 1247.57,1217.53 1248.15,1215.96 1248.74,1216.12 1249.32,1214.88 1249.91,1214.86 1250.5,1216.07 1251.08,1214.76 1251.67,1214.68 1252.26,1214.8 1252.84,1214.97 1253.43,1215.91 1254.02,1215.84 1254.6,1217.39 1255.19,1217.39 1255.78,1214.36 1256.36,1216.9 1256.95,1215.48 1257.53,1211.35 1258.12,1208.89 1258.71,1209.06 1259.29,1210.59 1259.88,1212.04 1260.47,1214.76 1261.05,1215.1 1261.64,1212.61 1262.23,1209.85 1262.81,1207.5 1263.4,1206.66 1263.98,1207.03 1264.57,1210.19 1265.16,1211.82 1265.74,1213.42 1266.33,1214.76 1266.92,1214.82 1267.5,1214.7 1268.09,1213.19 1268.68,1213.08 1269.26,1213.04 1269.85,1215.58 1270.44,1221.73 1271.02,1222.92 1271.61,1224.71 1272.19,1224.04 1272.78,1220.63 1273.37,1219.93 1273.95,1219.45 1274.54,1219.11 1275.13,1218.97 1275.71,1218.71 1276.3,1219.73 1276.89,1218.11 1277.47,1217.8 1278.06,1220.12 1278.65,1218.46 1279.23,1217.99 1279.82,1218.1 1280.4,1219.19 1280.99,1220.08 1281.58,1216.98 1282.16,1217.79 1282.75,1219.09 1283.34,1217.52 1283.92,1214.43 1284.51,1213.25 1285.1,1214.26 1285.68,1216.66 1286.27,1215.45 1286.86,1214.16 1287.44,1211.37 1288.03,1209.17 1288.61,1210.64 1289.2,1209.67 1289.79,1208.47 1290.37,1210.99 1290.96,1214.8 1291.55,1214.47 1292.13,1215.87 1292.72,1217.09 1293.31,1215.71 1293.89,1215.45 1294.48,1216.47 1295.06,1215.06 1295.65,1213.46 1296.24,1216.12 1296.82,1216.05 1297.41,1213.22 1298,1213.28 1298.58,1212.04 1299.17,1214.5 1299.76,1216.86 1300.34,1217.75 1300.93,1217.53 1301.52,1217.14 1302.1,1217.04 1302.69,1219.52 1303.27,1217.88 1303.86,1217.89 1304.45,1216.43 1305.03,1214.71 1305.62,1213.35 1306.21,1213.53 1306.79,1213.59 1307.38,1212.09 1307.97,1212.02 1308.55,1213.24 1309.14,1210.58 1309.73,1210.84 1310.31,1209.94 1310.9,1211.64 1311.48,1209.99 1312.07,1209.93 1312.66,1208.86 1313.24,1210.32 1313.83,1211.62 1314.42,1212.92 1315,1216.78 1315.59,1216.65 1316.18,1216.67 1316.76,1215.06 1317.35,1214.84 1317.93,1216.14 1318.52,1214.6 1319.11,1213.48 1319.69,1214.68 1320.28,1212 1320.87,1212.15 1321.45,1213.56 1322.04,1210.63 1322.63,1213.59 1323.21,1213.78 1323.8,1211.15 1324.39,1211.2 1324.97,1211.45 1325.56,1211.81 1326.14,1214.45 1326.73,1216.01 1327.32,1217.22 1327.9,1221.23 1328.49,1222.35 1329.08,1222.14 1329.66,1221.82 1330.25,1218.82 1330.84,1217.15 1331.42,1215.31 1332.01,1216.54 1332.6,1216.7 1333.18,1217.88 1333.77,1216.48 1334.35,1218.91 1334.94,1218.86 1335.53,1219.91 1336.11,1218.21 1336.7,1217.92 1337.29,1217.4 1337.87,1217.32 1338.46,1216.84 1339.05,1213.79 1339.63,1219.17 1340.22,1220.16 1340.8,1218.22 1341.39,1216.55 1341.98,1219.13 1342.56,1217.76 1343.15,1216.08 1343.74,1214.47 1344.32,1207.64 1344.91,1208.19 1345.5,1207.5 1346.08,1207.9 1346.67,1206.96 1347.26,1206.13 1347.84,1205.03 1348.43,1206.9 1349.01,1208.34 1349.6,1206.97 1350.19,1204.53 1350.77,1206.13 1351.36,1202.94 1351.95,1202.1 1352.53,1202.91 1353.12,1202.18 1353.71,1202.64 1354.29,1201.97 1354.88,1204.01 1355.47,1204.36 1356.05,1204.86 1356.64,1205.51 1357.22,1205.85 1357.81,1206.46 1358.4,1205.19 1358.98,1207.1 1359.57,1208.78 1360.16,1207.78 1360.74,1209.31 1361.33,1209.25 1361.92,1208.19 1362.5,1208.51 1363.09,1211.32 1363.68,1208.83 1364.26,1209 1364.85,1210.69 1365.43,1213.64 1366.02,1211.53 1366.61,1213.11 1367.19,1218.22 1367.78,1213.86 1368.37,1213.8 1368.95,1215.24 1369.54,1215.03 1370.13,1215.02 1370.71,1212.29 1371.3,1211.34 1371.88,1210.2 1372.47,1209.03 1373.06,1208.18 1373.64,1209.71 1374.23,1203.26 1374.82,1203.87 1375.4,1204.38 1375.99,1200.77 1376.58,1201.31 1377.16,1203.58 1377.75,1202.81 1378.34,1204.75 1378.92,1205.3 1379.51,1204.28 1380.09,1202.04 1380.68,1202.72 1381.27,1202.17 1381.85,1205.57 1382.44,1203.58 1383.03,1206.62 1383.61,1206.84 1384.2,1205.76 1384.79,1207.5 1385.37,1206.5 1385.96,1206.94 1386.55,1207.35 1387.13,1206.14 1387.72,1208.06 1388.3,1208.72 1388.89,1207.81 1389.48,1208.24 1390.06,1210.04 1390.65,1208.79 1391.24,1209.05 1391.82,1209.56 1392.41,1208.48 1393,1210.23 1393.58,1211.51 1394.17,1214.26 1394.75,1214.15 1395.34,1214.32 1395.93,1216.81 1396.51,1216.6 1397.1,1219.23 1397.69,1220.29 1398.27,1218.49 1398.86,1219.73 1399.45,1219.44 1400.03,1220.4 1400.62,1220.11 1401.21,1221.2 1401.79,1218.37 1402.38,1217.79 1402.96,1217.6 1403.55,1221.38 1404.14,1222.04 1404.72,1221.4 1405.31,1222.4 1405.9,1222.07 1406.48,1220.45 1407.07,1222.87 1407.66,1222.28 1408.24,1217.53 1408.83,1218.68 1409.42,1218.31 1410,1219.26 1410.59,1220.12 1411.17,1217.09 1411.76,1215.43 1412.35,1215.59 1412.93,1214.29 1413.52,1217.82 1414.11,1218.93 1414.69,1217.33 1415.28,1218.3 1415.87,1217.96 1416.45,1213.6 1417.04,1213.11 1417.63,1213.11 1418.21,1213.13 1418.8,1215.97 1419.38,1214.71 1419.97,1215.89 1420.56,1218.42 1421.14,1222.27 1421.73,1222.94 1422.32,1222.5 1422.9,1223.18 1423.49,1224.23 1424.08,1223.57 1424.66,1220.32 1425.25,1218.54 1425.83,1218.22 1426.42,1219.45 1427.01,1219.15 1427.59,1217.41 1428.18,1216.98 1428.77,1217.08 1429.35,1215.57 1429.94,1216.61 1430.53,1215.22 1431.11,1216.39 1431.7,1213.73 1432.29,1213.62 1432.87,1211.11 1433.46,1213.71 1434.04,1213.58 1434.63,1214.71 1435.22,1213.17 1435.8,1213.01 1436.39,1215.67 1436.98,1215.54 1437.56,1215.26 1438.15,1217.58 1438.74,1213.37 1439.32,1213.43 1439.91,1211.92 1440.5,1211.98 1441.08,1214.59 1441.67,1215.81 1442.25,1213.04 1442.84,1213.17 1443.43,1210.5 1444.01,1213.34 1444.6,1210.75 1445.19,1212.3 1445.77,1212.23 1446.36,1210.78 1446.95,1210.83 1447.53,1211.33 1448.12,1211.23 1448.7,1212.57 1449.29,1212.46 1449.88,1212.45 1450.46,1211.36 1451.05,1210.43 1451.64,1211.79 1452.22,1213.36 1452.81,1210.6 1453.4,1210.67 1453.98,1209.45 1454.57,1210.89 1455.16,1209.62 1455.74,1208.77 1456.33,1209 1456.91,1209.22 1457.5,1208.41 1458.09,1211.47 1458.67,1211.41 1459.26,1211.65 1459.85,1211.86 1460.43,1210.64 1461.02,1208.32 1461.61,1211.5 1462.19,1211.4 1462.78,1214.07 1463.37,1212.65 1463.95,1213.06 1464.54,1211.72 1465.12,1210.67 1465.71,1213.3 1466.3,1214.69 1466.88,1213.26 1467.47,1209.55 1468.06,1210.85 1468.64,1209.73 1469.23,1209.74 1469.82,1208.37 1470.4,1211.42 1470.99,1215.55 1471.57,1215.47 1472.16,1217.85 1472.75,1218.86 1473.33,1218.64 1473.92,1218.39 1474.51,1222.45 1475.09,1220.62 1475.68,1221.71 1476.27,1221.29 1476.85,1219.74 1477.44,1214.43 1478.03,1213.13 1478.61,1213.15 1479.2,1212.09 1479.78,1214.73 1480.37,1210.84 1480.96,1209.63 1481.54,1211.07 1482.13,1209.73 1482.72,1209.92 1483.3,1208.82 1483.89,1209.01 1484.48,1204.05 1485.06,1203.34 1485.65,1202.51 1486.24,1203.26 1486.82,1199.77 1487.41,1198.97 1487.99,1201.2 1488.58,1200.24 1489.17,1203.38 1489.75,1202.88 1490.34,1202.27 1490.93,1204.35 1491.51,1204.76 1492.1,1206.56 1492.69,1207 1493.27,1207.33 1493.86,1207.8 1494.45,1209.35 1495.03,1209.64 1495.62,1209.82 1496.2,1209.9 1496.79,1210.06 1497.38,1212.86 1497.96,1211.94 1498.55,1210.6 1499.14,1209.12 1499.72,1209.42 1500.31,1211.04 1500.9,1215.02 1501.48,1215.01 1502.07,1215.09 1502.65,1213.69 1503.24,1213.59 1503.83,1214.96 1504.41,1212.39 1505,1214.04 1505.59,1215.55 1506.17,1216.9 1506.76,1216.88 1507.35,1216.46 1507.93,1217.51 1508.52,1217.47 1509.11,1217.31 1509.69,1218.3 1510.28,1218.08 1510.86,1219.05 1511.45,1218.67 1512.04,1215.97 1512.62,1215.83 1513.21,1215.75 1513.8,1216.97 1514.38,1212.72 1514.97,1212.69 1515.56,1212.72 1516.14,1215.45 1516.73,1213.98 1517.32,1216.88 1517.9,1216.79 1518.49,1214.4 1519.07,1213.12 1519.66,1215.52 1520.25,1217.83 1520.83,1217.83 1521.42,1218.97 1522.01,1220.13 1522.59,1219.82 1523.18,1221.11 1523.77,1219.32 1524.35,1217.75 1524.94,1214.51 1525.52,1217.27 1526.11,1219.55 1526.7,1222.06 1527.28,1221.55 1527.87,1221.08 1528.46,1219.31 1529.04,1220.15 1529.63,1219.68 1530.22,1217.83 1530.8,1218.88 1531.39,1216.06 1531.98,1217.16 1532.56,1218.08 1533.15,1216.47 1533.73,1216.19 1534.32,1214.64 1534.91,1211.92 1535.49,1214.38 1536.08,1214.46 1536.67,1212.15 1537.25,1210.98 1537.84,1213.87 1538.43,1213.85 1539.01,1213.76 1539.6,1215.29 1540.19,1217.56 1540.77,1218.62 1541.36,1221.12 1541.94,1218.09 1542.53,1219.28 1543.12,1220.07 1543.7,1218.36 1544.29,1215.5 1544.88,1211.25 1545.46,1211.32 1546.05,1210.1 1546.64,1210.24 1547.22,1210.44 1547.81,1209.48 1548.4,1211.29 1548.98,1211.32 1549.57,1207.63 1550.15,1210.43 1550.74,1212 1551.33,1213.23 1551.91,1209.47 1552.5,1211.01 1553.09,1209.99 1553.67,1207.67 1554.26,1206.75 1554.85,1205.93 1555.43,1206.28 1556.02,1206.63 1556.6,1208.79 1557.19,1210.38 1557.78,1212.1 1558.36,1212.27 1558.95,1214.92 1559.54,1214.73 1560.12,1212.09 1560.71,1212.44 1561.3,1214.99 1561.88,1215.01 1562.47,1213.64 1563.06,1214.72 1563.64,1217.28 1564.23,1217.17 1564.81,1216.92 1565.4,1219.45 1565.99,1220.38 1566.57,1218.83 1567.16,1217.35 1567.75,1215.58 1568.33,1215.28 1568.92,1215.27 1569.51,1212.39 1570.09,1211.27 1570.68,1212.9 1571.27,1214.41 1571.85,1214.24 1572.44,1213.96 1573.02,1211.47 1573.61,1214.24 1574.2,1213.04 1574.78,1213.39 1575.37,1212.06 1575.96,1213.37 1576.54,1213.28 1577.13,1213.15 1577.72,1212.02 1578.3,1211.89 1578.89,1211.99 1579.47,1211.79 1580.06,1210.91 1580.65,1211.12 1581.23,1212.78 1581.82,1211.33 1582.41,1210.39 1582.99,1209.06 1583.58,1211.85 1584.17,1213.13 1584.75,1213.49 1585.34,1213.23 1585.93,1217.04 1586.51,1214.11 1587.1,1216.74 1587.68,1215.28 1588.27,1215.22 1588.86,1217.46 1589.44,1213.12 1590.03,1213.35 1590.62,1214.78 1591.2,1218.8 1591.79,1219.73 1592.38,1219.34 1592.96,1219.24 1593.55,1220.21 1594.14,1219.95 1594.72,1221.04 1595.31,1217.98 1595.89,1218.88 1596.48,1218.62 1597.07,1216.8 1597.65,1215.07 1598.24,1213.79 1598.83,1212.14 1599.41,1213.7 1600,1213.79 1600.59,1210.79 1601.17,1210.87 1601.76,1212.65 1602.34,1211.41 1602.93,1210.27 1603.52,1211.87 1604.1,1210.79 1604.69,1209.61 1605.28,1210.95 1605.86,1210.88 1606.45,1212.36 1607.04,1213.56 1607.62,1215.97 1608.21,1213.12 1608.8,1214.24 1609.38,1214.01 1609.97,1217.47 1610.55,1214.84 1611.14,1216.1 1611.73,1217.19 1612.31,1219.68 1612.9,1219.37 1613.49,1220.21 1614.07,1221.33 1614.66,1219.43 1615.25,1220.33 1615.83,1220.98 1616.42,1219.37 1617.01,1223.05 1617.59,1222.78 1618.18,1219.72 1618.76,1221.92 1619.35,1220.42 1619.94,1220.32 1620.52,1222.69 1621.11,1220.6 1621.7,1221.62 1622.28,1223.92 1622.87,1222.18 1623.46,1221.67 1624.04,1219.99 1624.63,1219.4 1625.22,1213.79 1625.8,1215.28 1626.39,1211.32 1626.97,1212.9 1627.56,1212.53 1628.15,1211.04 1628.73,1209.77 1629.32,1211.28 1629.91,1209.76 1630.49,1211.64 1631.08,1211.65 1631.67,1209 1632.25,1209.56 1632.84,1212.77 1633.42,1212.78 1634.01,1211.41 1634.6,1211.52 1635.18,1210 1635.77,1208.92 1636.36,1211.96 1636.94,1210.56 1637.53,1211.79 1638.12,1214.64 1638.7,1213.21 1639.29,1211.58 1639.88,1213.1 1640.46,1211.71 1641.05,1210.47 1641.63,1211.82 1642.22,1210.62 1642.81,1209.57 1643.39,1212.67 1643.98,1211.42 1644.57,1211.47 1645.15,1209.06 1645.74,1209.32 1646.33,1212.14 1646.91,1212.26 1647.5,1213.34 1648.09,1216.39 1648.67,1214.88 1649.26,1214.87 1649.84,1214.83 1650.43,1216.28 1651.02,1217.59 1651.6,1216.14 1652.19,1213.09 1652.78,1209.15 1653.36,1211.9 1653.95,1211.74 1654.54,1212.01 1655.12,1213.36 1655.71,1211.98 1656.29,1210.8 1656.88,1209.6 1657.47,1212.48 1658.05,1212.53 1658.64,1209.99 1659.23,1212.73 1659.81,1213.73 1660.4,1213.79 1660.99,1212.35 1661.57,1211.14 1662.16,1212.48 1662.75,1212.38 1663.33,1211.41 1663.92,1211.52 1664.5,1210.24 1665.09,1211.85 1665.68,1211.8 1666.26,1212.96 1666.85,1211.74 1667.44,1213.15 1668.02,1214.49 1668.61,1214.3 1669.2,1216.66 1669.78,1215.23 1670.37,1209.88 1670.96,1206.04 1671.54,1207.57 1672.13,1207.82 1672.71,1205.26 1673.3,1207.2 1673.89,1207.39 1674.47,1204.83 1675.06,1206.54 1675.65,1206.8 1676.23,1206.97 1676.82,1208.92 1677.41,1206.47 1677.99,1208.11 1678.58,1211.12 1679.17,1208.41 1679.75,1206.04 1680.34,1206.79 1680.92,1208.49 1681.51,1207.71 1682.1,1209.44 1682.68,1212.27 1683.27,1210.83 1683.86,1213.79 1684.44,1215.06 1685.03,1216.41 1685.62,1217.56 1686.2,1217.26 1686.79,1215.69 1687.37,1216.96 1687.96,1216.79 1688.55,1218.04 1689.13,1220.13 1689.72,1218.46 1690.31,1216.93 1690.89,1212.91 1691.48,1212.68 1692.07,1211.37 1692.65,1212.71 1693.24,1212.55 1693.83,1211.12 1694.41,1212.62 1695,1209.78 1695.58,1208.55 1696.17,1208.95 1696.76,1206.52 1697.34,1205.57 1697.93,1207.39 1698.52,1206.77 1699.1,1206.96 1699.69,1206.98 1700.28,1206.02 1700.86,1206.2 1701.45,1209.05 1702.04,1211.95 1702.62,1211.08 1703.21,1211.27 1703.79,1211.19 1704.38,1207.18 1704.97,1204.72 1705.55,1202.75 1706.14,1203.41 1706.73,1205.21 1707.31,1205.59 1707.9,1206.12 1708.49,1205.47 1709.07,1207.18 1709.66,1207.68 1710.24,1207.95 1710.83,1207.05 1711.42,1208.71 1712,1209.1 1712.59,1209.3 1713.18,1209.84 1713.76,1209.96 1714.35,1211.42 1714.94,1211.85 1715.52,1211.88 1716.11,1213.47 1716.7,1210.72 1717.28,1210.82 1717.87,1209.66 1718.45,1211.5 1719.04,1209.15 1719.63,1209.25 1720.21,1209.39 1720.8,1211.13 1721.39,1208.63 1721.97,1210.26 1722.56,1209.19 1723.15,1209.47 1723.73,1214.92 1724.32,1215.92 1724.91,1219.76 1725.49,1219.28 1726.08,1217.49 1726.66,1217.26 1727.25,1218.43 1727.84,1218.53 1728.42,1215.71 1729.01,1214.28 1729.6,1215.71 1730.18,1215.66 1730.77,1215.78 1731.36,1218.34 1731.94,1220.69 1732.53,1221.92 1733.11,1222.65 1733.7,1223.57 1734.29,1224.61 1734.87,1226.73 1735.46,1225.73 1736.05,1219.95 1736.63,1219.83 1737.22,1219.56 1737.81,1219.06 1738.39,1217.38 1738.98,1215.85 1739.57,1214.16 1740.15,1216.26 1740.74,1217.54 1741.32,1218.81 1741.91,1218.33 1742.5,1219.38 1743.08,1216.46 1743.67,1217.61 1744.26,1214.73 1744.84,1214.46 1745.43,1214.25 1746.02,1212.76 1746.6,1210.04 1747.19,1211.96 1747.78,1210.73 1748.36,1212.09 1748.95,1212.18 1749.53,1210.95 1750.12,1211.22 1750.71,1214.31 1751.29,1212.62 1751.88,1212.95 1752.47,1211.6 1753.05,1211.81 1753.64,1211.97 1754.23,1212.05 1754.81,1213.43 1755.4,1214.59 1755.99,1210.78 1756.57,1210.93 1757.16,1208.66 1757.74,1206.39 1758.33,1205.2 1758.92,1205.59 1759.5,1203.38 1760.09,1204.09 1760.68,1204.96 1761.26,1205.2 1761.85,1207.01 1762.44,1207.34 1763.02,1206.27 1763.61,1210.78 1764.19,1210.94 1764.78,1213.56 1765.37,1213.25 1765.95,1214.63 1766.54,1216.08 1767.13,1217.39 1767.71,1217.05 1768.3,1214.4 1768.89,1214.57 1769.47,1211.52 1770.06,1211.68 1770.65,1211.87 1771.23,1212.11 1771.82,1212.26 1772.4,1213.63 1772.99,1216.1 1773.58,1214.54 1774.16,1214.57 1774.75,1215.89 1775.34,1214.35 1775.92,1214.43 1776.51,1216.96 1777.1,1216.7 1777.68,1214 1778.27,1212.62 1778.86,1212.58 1779.44,1213.96 1780.03,1212.82 1780.61,1212.87 1781.2,1215.35 1781.79,1213.95 1782.37,1215.28 1782.96,1213.94 1783.55,1215.37 1784.13,1215.31 1784.72,1213.91 1785.31,1214.03 1785.89,1216.45 1786.48,1216.28 1787.06,1217.18 1787.65,1214.26 1788.24,1214.39 1788.82,1215.74 1789.41,1215.72 1790,1215.59 1790.58,1215.81 1791.17,1212.92 1791.76,1214.04 1792.34,1214.07 1792.93,1212.85 1793.52,1210.37 1794.1,1211.83 1794.69,1211.86 1795.27,1212.19 1795.86,1212.18 1796.45,1214.71 1797.03,1212.18 1797.62,1213.52 1798.21,1213.48 1798.79,1210.56 1799.38,1213.01 1799.97,1210.3 1800.55,1211.54 1801.14,1210.52 1801.73,1212.02 1802.31,1212.96 1802.9,1214.28 1803.48,1216.66 1804.07,1214.09 1804.66,1215.3 1805.24,1215.38 1805.83,1215.37 1806.42,1216.91 1807,1216.57 1807.59,1216.64 1808.18,1215.02 1808.76,1213.35 1809.35,1214.79 1809.94,1212.17 1810.52,1210.64 1811.11,1212.28 1811.69,1214.7 1812.28,1212.88 1812.87,1213 1813.45,1211.28 1814.04,1215.14 1814.63,1215.22 1815.21,1213.74 1815.8,1217.64 1816.39,1215.79 1816.97,1217.06 1817.56,1215.73 1818.14,1218.31 1818.73,1219.32 1819.32,1217.76 1819.9,1218.9 1820.49,1218.45 1821.08,1216.89 1821.66,1217.04 1822.25,1220.95 1822.84,1221.82 1823.42,1221.12 1824.01,1219.31 1824.6,1216.47 1825.18,1216.16 1825.77,1214.69 1826.35,1215.78 1826.94,1218.35 1827.53,1218.02 1828.11,1216.49 1828.7,1215.04 1829.29,1215.13 1829.87,1215.19 1830.46,1214.99 1831.05,1215.01 1831.63,1214.93 1832.22,1215.11 1832.81,1213.79 1833.39,1212.41 1833.98,1210.88 1834.56,1210.96 1835.15,1213.75 1835.74,1214.94 1836.32,1213.24 1836.91,1211.57 1837.5,1212.76 1838.08,1212.61 1838.67,1212.48 1839.26,1210 1839.84,1208.89 1840.43,1209.4 1841.01,1208.41 1841.6,1210.06 1842.19,1211.32 1842.77,1212.7 1843.36,1212.78 1843.95,1213.72 1844.53,1215.18 1845.12,1213.74 1845.71,1217.82 1846.29,1218.92 1846.88,1216.1 1847.47,1217.15 1848.05,1215.73 1848.64,1217.16 1849.22,1214.32 1849.81,1215.71 1850.4,1214.09 1850.98,1212.48 1851.57,1211.01 1852.16,1213.49 1852.74,1211.95 1853.33,1207.97 1853.92,1210.74 1854.5,1209.56 1855.09,1209.88 1855.68,1210.05 1856.26,1208.81 1856.85,1210.32 1857.43,1210.8 1858.02,1209.34 1858.61,1209.42 1859.19,1211.03 1859.78,1211.12 1860.37,1211.33 1860.95,1210.07 1861.54,1210.39 1862.13,1207.78 1862.71,1211.89 1863.3,1211.92 1863.88,1213.34 1864.47,1211.99 1865.06,1213.34 1865.64,1214.73 1866.23,1214.55 1866.82,1217.21 1867.4,1218.04 1867.99,1217.79 1868.58,1216.32 1869.16,1215.92 1869.75,1214.7 1870.34,1217.21 1870.92,1215.77 1871.51,1214.38 1872.09,1213.03 1872.68,1211.61 1873.27,1213.2 1873.85,1208.07 1874.44,1205.8 1875.03,1204.94 1875.61,1204.09 1876.2,1207.44 1876.79,1209.14 1877.37,1210.62 1877.96,1211.93 1878.55,1213.34 1879.13,1214.23 1879.72,1211.91 1880.3,1211.98 1880.89,1213.36 1881.48,1212.24 1882.06,1209.45 1882.65,1211.26 1883.24,1212.76 1883.82,1212.92 1884.41,1214.54 1885,1214.37 1885.58,1214.47 1886.17,1215.97 1886.76,1215.63 1887.34,1218.46 1887.93,1219.53 1888.51,1219.34 1889.1,1217.84 1889.69,1218.6 1890.27,1217.25 1890.86,1218.14 1891.45,1216.54 1892.03,1216.6 1892.62,1218.01 1893.21,1215.35 1893.79,1215.32 1894.38,1211.36 1894.96,1211.59 1895.55,1210.51 1896.14,1212.08 1896.72,1213.54 1897.31,1216.29 1897.9,1216.01 1898.48,1217.31 1899.07,1219.57 1899.66,1217.89 1900.24,1216.3 1900.83,1213.33 1901.42,1215.13 1902,1214.99 1902.59,1216.21 1903.17,1216.01 1903.76,1218.39 1904.35,1214.29 1904.93,1215.54 1905.52,1214.31 1906.11,1217.04 1906.69,1216.86 1907.28,1215.23 1907.87,1216.72 1908.45,1217.9 1909.04,1219.04 1909.63,1221.35 1910.21,1221.08 1910.8,1219.39 1911.38,1217.66 1911.97,1216.04 1912.56,1213.4 1913.14,1212.1 1913.73,1212.18 1914.32,1211.11 1914.9,1212.32 1915.49,1213.87 1916.08,1215.18 1916.66,1215.19 1917.25,1213.82 1917.83,1217.93 1918.42,1214.94 1919.01,1213.39 1919.59,1214.51 1920.18,1214.39 1920.77,1215.66 1921.35,1217.14 1921.94,1216.73 1922.53,1217.6 1923.11,1217.56 1923.7,1218.56 1924.29,1217.21 1924.87,1218.34 1925.46,1216.75 1926.04,1215.34 1926.63,1215.22 1927.22,1215.09 1927.8,1213.66 1928.39,1210.91 1928.98,1213.81 1929.56,1208.59 1930.15,1211.4 1930.74,1211.62 1931.32,1210.63 1931.91,1207.95 1932.5,1211.03 1933.08,1210.03 1933.67,1210.18 1934.25,1211.69 1934.84,1213.15 1935.43,1212.9 1936.01,1212.99 1936.6,1214.12 1937.19,1214.08 1937.77,1213.76 1938.36,1213.75 1938.95,1213.64 1939.53,1213.73 1940.12,1212.24 1940.71,1210.97 1941.29,1210.09 1941.88,1211.5 1942.46,1206.32 1943.05,1209.54 1943.64,1210.85 1944.22,1210.98 1944.81,1209.97 1945.4,1210.39 1945.98,1213.57 1946.57,1213.27 1947.16,1213.03 1947.74,1211.67 1948.33,1211.57 1948.91,1214.09 1949.5,1215.05 1950.09,1216.28 1950.67,1220.46 1951.26,1219.95 1951.85,1219.64 1952.43,1219.72 1953.02,1218.18 1953.61,1220.73 1954.19,1221.5 1954.78,1222.4 1955.37,1220.81 1955.95,1219.01 1956.54,1217.24 1957.12,1218.28 1957.71,1220.66 1958.3,1218.76 1958.88,1219.88 1959.47,1220.83 1960.06,1220.54 1960.64,1221.64 1961.23,1221.14 1961.82,1220.9 1962.4,1220.57 1962.99,1220.21 1963.58,1217.14 1964.16,1215.55 1964.75,1214.31 1965.33,1214.2 1965.92,1212.62 1966.51,1212.69 1967.09,1211.47 1967.68,1211.82 1968.27,1210.47 1968.85,1209.28 1969.44,1211.01 1970.03,1209.9 1970.61,1211.26 1971.2,1212.53 1971.78,1212.47 1972.37,1211.13 1972.96,1211.06 1973.54,1212.39 1974.13,1211.26 1974.72,1215.23 1975.3,1215.17 1975.89,1215.25 1976.48,1216.41 1977.06,1216.34 1977.65,1216.18 1978.24,1217.48 1978.82,1215.73 1979.41,1212.84 1979.99,1205.88 1980.58,1208.83 1981.17,1207.88 1981.75,1208.18 1982.34,1211.15 1982.93,1211.27 1983.51,1209.77 1984.1,1211.56 1984.69,1210.57 1985.27,1211.03 1985.86,1211.06 1986.45,1212.55 1987.03,1212.84 1987.62,1212.8 1988.2,1214.24 1988.79,1210.48 1989.38,1210.62 1989.96,1213.46 1990.55,1217.35 1991.14,1219.98 1991.72,1218.38 1992.31,1222.18 1992.9,1220.52 1993.48,1219.14 1994.07,1222.75 1994.65,1222.4 1995.24,1221.97 1995.83,1221.64 1996.41,1222.27 1997,1220.46 1997.59,1217.25 1998.17,1215.46 1998.76,1214.16 1999.35,1212.82 1999.93,1212.97 2000.52,1211.98 2001.11,1213.04 2001.69,1211.75 2002.28,1211.82 2002.86,1213.01 2003.45,1213.17 2004.04,1212.14 2004.62,1211.03 2005.21,1211.23 2005.8,1209.9 2006.38,1209.89 2006.97,1205.93 2007.56,1206.31 2008.14,1207.94 2008.73,1212.1 2009.32,1208.47 2009.9,1210.37 2010.49,1208.25 2011.07,1211.17 2011.66,1211.57 2012.25,1207.61 2012.83,1206.63 2013.42,1205.91 2014.01,1206.31 2014.59,1205.48 2015.18,1208.76 2015.77,1210.12 2016.35,1210.13 2016.94,1210.59 2017.53,1210.56 2018.11,1205.4 2018.7,1205.88 2019.28,1206.22 2019.87,1207.92 2020.46,1209.67 2021.04,1207.47 2021.63,1207.89 2022.22,1208.03 2022.8,1208.46 2023.39,1212.71 2023.98,1211.49 2024.56,1210.02 2025.15,1208.91 2025.73,1211.93 2026.32,1213.13 2026.91,1212.97 2027.49,1211.67 2028.08,1211.78 2028.67,1212.94 2029.25,1213.08 2029.84,1211.69 2030.43,1213.25 2031.01,1212.23 2031.6,1212.32 2032.19,1212.49 2032.77,1212.77 2033.36,1211.74 2033.94,1213 2034.53,1214.37 2035.12,1212.88 2035.7,1214.43 2036.29,1210.64 2036.88,1210.7 2037.46,1213.23 2038.05,1215.53 2038.64,1216.9 2039.22,1217.89 2039.81,1217.62 2040.4,1214.62 2040.98,1216.03 2041.57,1215.85 2042.15,1219.51 2042.74,1216.27 2043.33,1213.61 2043.91,1217.46 2044.5,1215.92 2045.09,1215.6 2045.67,1218.16 2046.26,1212.82 2046.85,1212.67 2047.43,1210.04 2048.02,1212.98 2048.6,1212.8 2049.19,1213.01 2049.78,1211.85 2050.36,1211.9 2050.95,1214.65 2051.54,1213.4 2052.12,1212.13 2052.71,1214.87 2053.3,1214.76 2053.88,1212.15 2054.47,1209.48 2055.06,1209.72 2055.64,1210.03 2056.23,1208.68 2056.81,1209.14 2057.4,1209.46 2057.99,1210.69 2058.57,1209.51 2059.16,1215.08 2059.75,1215.05 2060.33,1215.01 2060.92,1216.36 2061.51,1217.74 2062.09,1216.11 2062.68,1216.03 2063.27,1214.79 2063.85,1215.91 2064.44,1215.68 2065.02,1215.62 2065.61,1215.64 2066.2,1215.38 2066.78,1215.3 2067.37,1213.98 2067.96,1213.68 2068.54,1213.66 2069.13,1213.62 2069.72,1214.94 2070.3,1214.75 2070.89,1215.9 2071.48,1219.64 2072.06,1219.13 2072.65,1217.53 2073.23,1217.73 2073.82,1219.02 2074.41,1215.99 2074.99,1213.63 2075.58,1213.8 2076.17,1213.84 2076.75,1215.12 2077.34,1216.36 2077.93,1218.92 2078.51,1219.96 2079.1,1218.39 2079.68,1218.19 2080.27,1218.92 2080.86,1218.72 2081.44,1217.35 2082.03,1217.24 2082.62,1217.22 2083.2,1217.16 2083.79,1217.16 2084.38,1218.17 2084.96,1216.54 2085.55,1217.64 2086.14,1217.28 2086.72,1217.1 2087.31,1218.09 2087.89,1217.81 2088.48,1217.45 2089.07,1219.83 2089.65,1221.08 2090.24,1218.23 2090.83,1218.33 2091.41,1218.21 2092,1221.98 2092.59,1221.43 2093.17,1217.03 2093.76,1218.2 2094.35,1217.76 2094.93,1218.64 2095.52,1220.8 2096.1,1219.15 2096.69,1217.37 2097.28,1219.73 2097.86,1218.19 2098.45,1216.82 2099.04,1217.72 2099.62,1217.43 2100.21,1217.14 2100.8,1215.46 2101.38,1215.35 2101.97,1217.92 2102.55,1216.08 2103.14,1210.8 2103.73,1213.4 2104.31,1211.9 2104.9,1210.34 2105.49,1207.74 2106.07,1207.99 2106.66,1208.51 2107.25,1207.71 2107.83,1208.96 2108.42,1207.67 2109.01,1211.83 2109.59,1212.26 2110.18,1212.37 2110.76,1210.67 2111.35,1212.24 2111.94,1210.74 2112.52,1209.77 2113.11,1208.94 2113.7,1208.23 2114.28,1209.66 2114.87,1208.39 2115.46,1205.9 2116.04,1204.8 2116.63,1201.19 2117.22,1200.48 2117.8,1199.67 2118.39,1200.51 2118.97,1202.64 2119.56,1200.76 2120.15,1205.11 2120.73,1204.27 2121.32,1207.45 2121.91,1209.18 2122.49,1212.15 2123.08,1210.79 2123.67,1209.77 2124.25,1209.89 2124.84,1210.15 2125.42,1211.76 2126.01,1210.63 2126.6,1210.61 2127.18,1209.54 2127.77,1210.94 2128.36,1211.25 2128.94,1211.35 2129.53,1209.92 2130.12,1211.56 2130.7,1208.9 2131.29,1208.96 2131.88,1209.06 2132.46,1211.9 2133.05,1211.97 2133.63,1213.34 2134.22,1213.16 2134.81,1214.33 2135.39,1215.57 2135.98,1213.87 2136.57,1217.72 2137.15,1217.38 2137.74,1218.42 2138.33,1218.02 2138.91,1217.78 2139.5,1217.43 2140.09,1215.63 2140.67,1214.26 2141.26,1215.55 2141.84,1212.91 2142.43,1212.9 2143.02,1211.41 2143.6,1212.8 2144.19,1215.62 2144.78,1216.91 2145.36,1218.07 2145.95,1216.59 2146.54,1216.48 2147.12,1216.3 2147.71,1216.09 2148.3,1217.56 2148.88,1218.79 2149.47,1217.23 2150.05,1213.02 2150.64,1212.97 2151.23,1213.27 2151.81,1213.51 2152.4,1216.24 2152.99,1216.16 2153.57,1214.82 2154.16,1216.13 2154.75,1215.98 2155.33,1217.31 2155.92,1217.14 2156.5,1219.55 2157.09,1220.28 2157.68,1219.97 2158.26,1223.55 \"/>\n<path clip-path=\"url(#clip492)\" d=\"M986.025 1213.95 L986.612 1213.95 L987.198 1213.95 L987.785 1213.95 L988.371 1213.95 L988.957 1213.95 L989.544 1213.95 L990.13 1213.95 L990.717 1213.95 L991.303 1213.95 L991.889 1213.95 L992.476 1213.95 L993.062 1213.95 L993.649 1213.95 L994.235 1213.95 L994.822 1213.95 L995.408 1213.95 L995.994 1213.95 L996.581 1213.95 L997.167 1213.95 L997.754 1213.95 L998.34 1213.95 L998.926 1213.95 L999.513 1213.95 L1000.1 1213.95 L1000.69 1213.95 L1001.27 1213.95 L1001.86 1213.95 L1002.44 1213.95 L1003.03 1213.95 L1003.62 1213.95 L1004.2 1213.95 L1004.79 1213.95 L1005.38 1213.95 L1005.96 1213.95 L1006.55 1213.95 L1007.14 1213.95 L1007.72 1213.95 L1008.31 1213.95 L1008.9 1213.95 L1009.48 1213.95 L1010.07 1213.95 L1010.65 1213.95 L1011.24 1213.95 L1011.83 1213.95 L1012.41 1213.95 L1013 1213.95 L1013.59 1213.95 L1014.17 1213.95 L1014.76 1213.95 L1015.35 1213.95 L1015.93 1213.95 L1016.52 1213.95 L1017.11 1213.95 L1017.69 1213.95 L1018.28 1213.95 L1018.86 1213.95 L1019.45 1213.95 L1020.04 1213.95 L1020.62 1213.95 L1021.21 1213.95 L1021.8 1213.95 L1022.38 1213.95 L1022.97 1213.95 L1023.56 1213.95 L1024.14 1213.95 L1024.73 1213.95 L1025.32 1213.95 L1025.9 1213.95 L1026.49 1213.95 L1027.07 1213.95 L1027.66 1213.95 L1028.25 1213.95 L1028.83 1213.95 L1029.42 1213.95 L1030.01 1213.95 L1030.59 1213.95 L1031.18 1213.95 L1031.77 1213.95 L1032.35 1213.95 L1032.94 1213.95 L1033.52 1213.95 L1034.11 1213.95 L1034.7 1213.95 L1035.28 1213.95 L1035.87 1213.95 L1036.46 1213.95 L1037.04 1213.95 L1037.63 1213.95 L1038.22 1213.95 L1038.8 1213.95 L1039.39 1213.95 L1039.98 1213.95 L1040.56 1213.95 L1041.15 1213.95 L1041.73 1213.95 L1042.32 1213.95 L1042.91 1213.95 L1043.49 1213.95 L1044.08 1213.95 L1044.67 1213.95 L1045.25 1213.95 L1045.84 1213.95 L1046.43 1213.95 L1047.01 1213.95 L1047.6 1213.95 L1048.19 1213.95 L1048.77 1213.95 L1049.36 1213.95 L1049.94 1213.95 L1050.53 1213.95 L1051.12 1213.95 L1051.7 1213.95 L1052.29 1213.95 L1052.88 1213.95 L1053.46 1213.95 L1054.05 1213.95 L1054.64 1213.95 L1055.22 1213.95 L1055.81 1213.95 L1056.39 1213.95 L1056.98 1213.95 L1057.57 1213.95 L1058.15 1213.95 L1058.74 1213.95 L1059.33 1213.95 L1059.91 1213.95 L1060.5 1213.95 L1061.09 1213.95 L1061.67 1213.95 L1062.26 1213.95 L1062.85 1213.95 L1063.43 1213.95 L1064.02 1213.95 L1064.6 1213.95 L1065.19 1213.95 L1065.78 1213.95 L1066.36 1213.95 L1066.95 1213.95 L1067.54 1213.95 L1068.12 1213.95 L1068.71 1213.95 L1069.3 1213.95 L1069.88 1213.95 L1070.47 1213.95 L1071.06 1213.95 L1071.64 1213.95 L1072.23 1213.95 L1072.81 1213.95 L1073.4 1213.95 L1073.99 1213.95 L1074.57 1213.95 L1075.16 1213.95 L1075.75 1213.95 L1076.33 1213.95 L1076.92 1213.95 L1077.51 1213.95 L1078.09 1213.95 L1078.68 1213.95 L1079.26 1213.95 L1079.85 1213.95 L1080.44 1213.95 L1081.02 1213.95 L1081.61 1213.95 L1082.2 1213.95 L1082.78 1213.95 L1083.37 1213.95 L1083.96 1213.95 L1084.54 1213.95 L1085.13 1213.95 L1085.72 1213.95 L1086.3 1213.95 L1086.89 1213.95 L1087.47 1213.95 L1088.06 1213.95 L1088.65 1213.95 L1089.23 1213.95 L1089.82 1213.95 L1090.41 1213.95 L1090.99 1213.95 L1091.58 1213.95 L1092.17 1213.95 L1092.75 1213.95 L1093.34 1213.95 L1093.93 1213.95 L1094.51 1213.95 L1095.1 1213.95 L1095.68 1213.95 L1096.27 1213.95 L1096.86 1213.95 L1097.44 1213.95 L1098.03 1213.95 L1098.62 1213.95 L1099.2 1213.95 L1099.79 1213.95 L1100.38 1213.95 L1100.96 1213.95 L1101.55 1213.95 L1102.14 1213.95 L1102.72 1213.95 L1103.31 1213.95 L1103.89 1213.95 L1104.48 1213.95 L1105.07 1213.95 L1105.65 1213.95 L1106.24 1213.95 L1106.83 1213.95 L1107.41 1213.95 L1108 1213.95 L1108.59 1213.95 L1109.17 1213.95 L1109.76 1213.95 L1110.34 1213.95 L1110.93 1213.95 L1111.52 1213.95 L1112.1 1213.95 L1112.69 1213.95 L1113.28 1213.95 L1113.86 1213.95 L1114.45 1213.95 L1115.04 1213.95 L1115.62 1213.95 L1116.21 1213.95 L1116.8 1213.95 L1117.38 1213.95 L1117.97 1213.95 L1118.55 1213.95 L1119.14 1213.95 L1119.73 1213.95 L1120.31 1213.95 L1120.9 1213.95 L1121.49 1213.95 L1122.07 1213.95 L1122.66 1213.95 L1123.25 1213.95 L1123.83 1213.95 L1124.42 1213.95 L1125.01 1213.95 L1125.59 1213.95 L1126.18 1213.95 L1126.76 1213.95 L1127.35 1213.95 L1127.94 1213.95 L1128.52 1213.95 L1129.11 1213.95 L1129.7 1213.95 L1130.28 1213.95 L1130.87 1213.95 L1131.46 1213.95 L1132.04 1213.95 L1132.63 1213.95 L1133.21 1213.95 L1133.8 1213.95 L1134.39 1213.95 L1134.97 1213.95 L1135.56 1213.95 L1136.15 1213.95 L1136.73 1213.95 L1137.32 1213.95 L1137.91 1213.95 L1138.49 1213.95 L1139.08 1213.95 L1139.67 1213.95 L1140.25 1213.95 L1140.84 1213.95 L1141.42 1213.95 L1142.01 1213.95 L1142.6 1213.95 L1143.18 1213.95 L1143.77 1213.95 L1144.36 1213.95 L1144.94 1213.95 L1145.53 1213.95 L1146.12 1213.95 L1146.7 1213.95 L1147.29 1213.95 L1147.88 1213.95 L1148.46 1213.95 L1149.05 1213.95 L1149.63 1213.95 L1150.22 1213.95 L1150.81 1213.95 L1151.39 1213.95 L1151.98 1213.95 L1152.57 1213.95 L1153.15 1213.95 L1153.74 1213.95 L1154.33 1213.95 L1154.91 1213.95 L1155.5 1213.95 L1156.09 1213.95 L1156.67 1213.95 L1157.26 1213.95 L1157.84 1213.95 L1158.43 1213.95 L1159.02 1213.95 L1159.6 1213.95 L1160.19 1213.95 L1160.78 1213.95 L1161.36 1213.95 L1161.95 1213.95 L1162.54 1213.95 L1163.12 1213.95 L1163.71 1213.95 L1164.29 1213.95 L1164.88 1213.95 L1165.47 1213.95 L1166.05 1213.95 L1166.64 1213.95 L1167.23 1213.95 L1167.81 1213.95 L1168.4 1213.95 L1168.99 1213.95 L1169.57 1213.95 L1170.16 1213.95 L1170.75 1213.95 L1171.33 1213.95 L1171.92 1213.95 L1172.5 1213.95 L1173.09 1213.95 L1173.68 1213.95 L1174.26 1213.95 L1174.85 1213.95 L1175.44 1213.95 L1176.02 1213.95 L1176.61 1213.95 L1177.2 1213.95 L1177.78 1213.95 L1178.37 1213.95 L1178.96 1213.95 L1179.54 1213.95 L1180.13 1213.95 L1180.71 1213.95 L1181.3 1213.95 L1181.89 1213.95 L1182.47 1213.95 L1183.06 1213.95 L1183.65 1213.95 L1184.23 1213.95 L1184.82 1213.95 L1185.41 1213.95 L1185.99 1213.95 L1186.58 1213.95 L1187.16 1213.95 L1187.75 1213.95 L1188.34 1213.95 L1188.92 1213.95 L1189.51 1213.95 L1190.1 1213.95 L1190.68 1213.95 L1191.27 1213.95 L1191.86 1213.95 L1192.44 1213.95 L1193.03 1213.95 L1193.62 1213.95 L1194.2 1213.95 L1194.79 1213.95 L1195.37 1213.95 L1195.96 1213.95 L1196.55 1213.95 L1197.13 1213.95 L1197.72 1213.95 L1198.31 1213.95 L1198.89 1213.95 L1199.48 1213.95 L1200.07 1213.95 L1200.65 1213.95 L1201.24 1213.95 L1201.83 1213.95 L1202.41 1213.95 L1203 1213.95 L1203.58 1213.95 L1204.17 1213.95 L1204.76 1213.95 L1205.34 1213.95 L1205.93 1213.95 L1206.52 1213.95 L1207.1 1213.95 L1207.69 1213.95 L1208.28 1213.95 L1208.86 1213.95 L1209.45 1213.95 L1210.03 1213.95 L1210.62 1213.95 L1211.21 1213.95 L1211.79 1213.95 L1212.38 1213.95 L1212.97 1213.95 L1213.55 1213.95 L1214.14 1213.95 L1214.73 1213.95 L1215.31 1213.95 L1215.9 1213.95 L1216.49 1213.95 L1217.07 1213.95 L1217.66 1213.95 L1218.24 1213.95 L1218.83 1213.95 L1219.42 1213.95 L1220 1213.95 L1220.59 1213.95 L1221.18 1213.95 L1221.76 1213.95 L1222.35 1213.95 L1222.94 1213.95 L1223.52 1213.95 L1224.11 1213.95 L1224.7 1213.95 L1225.28 1213.95 L1225.87 1213.95 L1226.45 1213.95 L1227.04 1213.95 L1227.63 1213.95 L1228.21 1213.95 L1228.8 1213.95 L1229.39 1213.95 L1229.97 1213.95 L1230.56 1213.95 L1231.15 1213.95 L1231.73 1213.95 L1232.32 1213.95 L1232.91 1213.95 L1233.49 1213.95 L1234.08 1213.95 L1234.66 1213.95 L1235.25 1213.95 L1235.84 1213.95 L1236.42 1213.95 L1237.01 1213.95 L1237.6 1213.95 L1238.18 1213.95 L1238.77 1213.95 L1239.36 1213.95 L1239.94 1213.95 L1240.53 1213.95 L1241.11 1213.95 L1241.7 1213.95 L1242.29 1213.95 L1242.87 1213.95 L1243.46 1213.95 L1244.05 1213.95 L1244.63 1213.95 L1245.22 1213.95 L1245.81 1213.95 L1246.39 1213.95 L1246.98 1213.95 L1247.57 1213.95 L1248.15 1213.95 L1248.74 1213.95 L1249.32 1213.95 L1249.91 1213.95 L1250.5 1213.95 L1251.08 1213.95 L1251.67 1213.95 L1252.26 1213.95 L1252.84 1213.95 L1253.43 1213.95 L1254.02 1213.95 L1254.6 1213.95 L1255.19 1213.95 L1255.78 1213.95 L1256.36 1213.95 L1256.95 1213.95 L1257.53 1213.95 L1258.12 1213.95 L1258.71 1213.95 L1259.29 1213.95 L1259.88 1213.95 L1260.47 1213.95 L1261.05 1213.95 L1261.64 1213.95 L1262.23 1213.95 L1262.81 1213.95 L1263.4 1213.95 L1263.98 1213.95 L1264.57 1213.95 L1265.16 1213.95 L1265.74 1213.95 L1266.33 1213.95 L1266.92 1213.95 L1267.5 1213.95 L1268.09 1213.95 L1268.68 1213.95 L1269.26 1213.95 L1269.85 1213.95 L1270.44 1213.95 L1271.02 1213.95 L1271.61 1213.95 L1272.19 1213.95 L1272.78 1213.95 L1273.37 1213.95 L1273.95 1213.95 L1274.54 1213.95 L1275.13 1213.95 L1275.71 1213.95 L1276.3 1213.95 L1276.89 1213.95 L1277.47 1213.95 L1278.06 1213.95 L1278.65 1213.95 L1279.23 1213.95 L1279.82 1213.95 L1280.4 1213.95 L1280.99 1213.95 L1281.58 1213.95 L1282.16 1213.95 L1282.75 1213.95 L1283.34 1213.95 L1283.92 1213.95 L1284.51 1213.95 L1285.1 1213.95 L1285.68 1213.95 L1286.27 1213.95 L1286.86 1213.95 L1287.44 1213.95 L1288.03 1213.95 L1288.61 1213.95 L1289.2 1213.95 L1289.79 1213.95 L1290.37 1213.95 L1290.96 1213.95 L1291.55 1213.95 L1292.13 1213.95 L1292.72 1213.95 L1293.31 1213.95 L1293.89 1213.95 L1294.48 1213.95 L1295.06 1213.95 L1295.65 1213.95 L1296.24 1213.95 L1296.82 1213.95 L1297.41 1213.95 L1298 1213.95 L1298.58 1213.95 L1299.17 1213.95 L1299.76 1213.95 L1300.34 1213.95 L1300.93 1213.95 L1301.52 1213.95 L1302.1 1213.95 L1302.69 1213.95 L1303.27 1213.95 L1303.86 1213.95 L1304.45 1213.95 L1305.03 1213.95 L1305.62 1213.95 L1306.21 1213.95 L1306.79 1213.95 L1307.38 1213.95 L1307.97 1213.95 L1308.55 1213.95 L1309.14 1213.95 L1309.73 1213.95 L1310.31 1213.95 L1310.9 1213.95 L1311.48 1213.95 L1312.07 1213.95 L1312.66 1213.95 L1313.24 1213.95 L1313.83 1213.95 L1314.42 1213.95 L1315 1213.95 L1315.59 1213.95 L1316.18 1213.95 L1316.76 1213.95 L1317.35 1213.95 L1317.93 1213.95 L1318.52 1213.95 L1319.11 1213.95 L1319.69 1213.95 L1320.28 1213.95 L1320.87 1213.95 L1321.45 1213.95 L1322.04 1213.95 L1322.63 1213.95 L1323.21 1213.95 L1323.8 1213.95 L1324.39 1213.95 L1324.97 1213.95 L1325.56 1213.95 L1326.14 1213.95 L1326.73 1213.95 L1327.32 1213.95 L1327.9 1213.95 L1328.49 1213.95 L1329.08 1213.95 L1329.66 1213.95 L1330.25 1213.95 L1330.84 1213.95 L1331.42 1213.95 L1332.01 1213.95 L1332.6 1213.95 L1333.18 1213.95 L1333.77 1213.95 L1334.35 1213.95 L1334.94 1213.95 L1335.53 1213.95 L1336.11 1213.95 L1336.7 1213.95 L1337.29 1213.95 L1337.87 1213.95 L1338.46 1213.95 L1339.05 1213.95 L1339.63 1213.95 L1340.22 1213.95 L1340.8 1213.95 L1341.39 1213.95 L1341.98 1213.95 L1342.56 1213.95 L1343.15 1213.95 L1343.74 1213.95 L1344.32 1213.95 L1344.91 1213.95 L1345.5 1213.95 L1346.08 1213.95 L1346.67 1213.95 L1347.26 1213.95 L1347.84 1213.95 L1348.43 1213.95 L1349.01 1213.95 L1349.6 1213.95 L1350.19 1213.95 L1350.77 1213.95 L1351.36 1213.95 L1351.95 1213.95 L1352.53 1213.95 L1353.12 1213.95 L1353.71 1213.95 L1354.29 1213.95 L1354.88 1213.95 L1355.47 1213.95 L1356.05 1213.95 L1356.64 1213.95 L1357.22 1213.95 L1357.81 1213.95 L1358.4 1213.95 L1358.98 1213.95 L1359.57 1213.95 L1360.16 1213.95 L1360.74 1213.95 L1361.33 1213.95 L1361.92 1213.95 L1362.5 1213.95 L1363.09 1213.95 L1363.68 1213.95 L1364.26 1213.95 L1364.85 1213.95 L1365.43 1213.95 L1366.02 1213.95 L1366.61 1213.95 L1367.19 1213.95 L1367.78 1213.95 L1368.37 1213.95 L1368.95 1213.95 L1369.54 1213.95 L1370.13 1213.95 L1370.71 1213.95 L1371.3 1213.95 L1371.88 1213.95 L1372.47 1213.95 L1373.06 1213.95 L1373.64 1213.95 L1374.23 1213.95 L1374.82 1213.95 L1375.4 1213.95 L1375.99 1213.95 L1376.58 1213.95 L1377.16 1213.95 L1377.75 1213.95 L1378.34 1213.95 L1378.92 1213.95 L1379.51 1213.95 L1380.09 1213.95 L1380.68 1213.95 L1381.27 1213.95 L1381.85 1213.95 L1382.44 1213.95 L1383.03 1213.95 L1383.61 1213.95 L1384.2 1213.95 L1384.79 1213.95 L1385.37 1213.95 L1385.96 1213.95 L1386.55 1213.95 L1387.13 1213.95 L1387.72 1213.95 L1388.3 1213.95 L1388.89 1213.95 L1389.48 1213.95 L1390.06 1213.95 L1390.65 1213.95 L1391.24 1213.95 L1391.82 1213.95 L1392.41 1213.95 L1393 1213.95 L1393.58 1213.95 L1394.17 1213.95 L1394.75 1213.95 L1395.34 1213.95 L1395.93 1213.95 L1396.51 1213.95 L1397.1 1213.95 L1397.69 1213.95 L1398.27 1213.95 L1398.86 1213.95 L1399.45 1213.95 L1400.03 1213.95 L1400.62 1213.95 L1401.21 1213.95 L1401.79 1213.95 L1402.38 1213.95 L1402.96 1213.95 L1403.55 1213.95 L1404.14 1213.95 L1404.72 1213.95 L1405.31 1213.95 L1405.9 1213.95 L1406.48 1213.95 L1407.07 1213.95 L1407.66 1213.95 L1408.24 1213.95 L1408.83 1213.95 L1409.42 1213.95 L1410 1213.95 L1410.59 1213.95 L1411.17 1213.95 L1411.76 1213.95 L1412.35 1213.95 L1412.93 1213.95 L1413.52 1213.95 L1414.11 1213.95 L1414.69 1213.95 L1415.28 1213.95 L1415.87 1213.95 L1416.45 1213.95 L1417.04 1213.95 L1417.63 1213.95 L1418.21 1213.95 L1418.8 1213.95 L1419.38 1213.95 L1419.97 1213.95 L1420.56 1213.95 L1421.14 1213.95 L1421.73 1213.95 L1422.32 1213.95 L1422.9 1213.95 L1423.49 1213.95 L1424.08 1213.95 L1424.66 1213.95 L1425.25 1213.95 L1425.83 1213.95 L1426.42 1213.95 L1427.01 1213.95 L1427.59 1213.95 L1428.18 1213.95 L1428.77 1213.95 L1429.35 1213.95 L1429.94 1213.95 L1430.53 1213.95 L1431.11 1213.95 L1431.7 1213.95 L1432.29 1213.95 L1432.87 1213.95 L1433.46 1213.95 L1434.04 1213.95 L1434.63 1213.95 L1435.22 1213.95 L1435.8 1213.95 L1436.39 1213.95 L1436.98 1213.95 L1437.56 1213.95 L1438.15 1213.95 L1438.74 1213.95 L1439.32 1213.95 L1439.91 1213.95 L1440.5 1213.95 L1441.08 1213.95 L1441.67 1213.95 L1442.25 1213.95 L1442.84 1213.95 L1443.43 1213.95 L1444.01 1213.95 L1444.6 1213.95 L1445.19 1213.95 L1445.77 1213.95 L1446.36 1213.95 L1446.95 1213.95 L1447.53 1213.95 L1448.12 1213.95 L1448.7 1213.95 L1449.29 1213.95 L1449.88 1213.95 L1450.46 1213.95 L1451.05 1213.95 L1451.64 1213.95 L1452.22 1213.95 L1452.81 1213.95 L1453.4 1213.95 L1453.98 1213.95 L1454.57 1213.95 L1455.16 1213.95 L1455.74 1213.95 L1456.33 1213.95 L1456.91 1213.95 L1457.5 1213.95 L1458.09 1213.95 L1458.67 1213.95 L1459.26 1213.95 L1459.85 1213.95 L1460.43 1213.95 L1461.02 1213.95 L1461.61 1213.95 L1462.19 1213.95 L1462.78 1213.95 L1463.37 1213.95 L1463.95 1213.95 L1464.54 1213.95 L1465.12 1213.95 L1465.71 1213.95 L1466.3 1213.95 L1466.88 1213.95 L1467.47 1213.95 L1468.06 1213.95 L1468.64 1213.95 L1469.23 1213.95 L1469.82 1213.95 L1470.4 1213.95 L1470.99 1213.95 L1471.57 1213.95 L1472.16 1213.95 L1472.75 1213.95 L1473.33 1213.95 L1473.92 1213.95 L1474.51 1213.95 L1475.09 1213.95 L1475.68 1213.95 L1476.27 1213.95 L1476.85 1213.95 L1477.44 1213.95 L1478.03 1213.95 L1478.61 1213.95 L1479.2 1213.95 L1479.78 1213.95 L1480.37 1213.95 L1480.96 1213.95 L1481.54 1213.95 L1482.13 1213.95 L1482.72 1213.95 L1483.3 1213.95 L1483.89 1213.95 L1484.48 1213.95 L1485.06 1213.95 L1485.65 1213.95 L1486.24 1213.95 L1486.82 1213.95 L1487.41 1213.95 L1487.99 1213.95 L1488.58 1213.95 L1489.17 1213.95 L1489.75 1213.95 L1490.34 1213.95 L1490.93 1213.95 L1491.51 1213.95 L1492.1 1213.95 L1492.69 1213.95 L1493.27 1213.95 L1493.86 1213.95 L1494.45 1213.95 L1495.03 1213.95 L1495.62 1213.95 L1496.2 1213.95 L1496.79 1213.95 L1497.38 1213.95 L1497.96 1213.95 L1498.55 1213.95 L1499.14 1213.95 L1499.72 1213.95 L1500.31 1213.95 L1500.9 1213.95 L1501.48 1213.95 L1502.07 1213.95 L1502.65 1213.95 L1503.24 1213.95 L1503.83 1213.95 L1504.41 1213.95 L1505 1213.95 L1505.59 1213.95 L1506.17 1213.95 L1506.76 1213.95 L1507.35 1213.95 L1507.93 1213.95 L1508.52 1213.95 L1509.11 1213.95 L1509.69 1213.95 L1510.28 1213.95 L1510.86 1213.95 L1511.45 1213.95 L1512.04 1213.95 L1512.62 1213.95 L1513.21 1213.95 L1513.8 1213.95 L1514.38 1213.95 L1514.97 1213.95 L1515.56 1213.95 L1516.14 1213.95 L1516.73 1213.95 L1517.32 1213.95 L1517.9 1213.95 L1518.49 1213.95 L1519.07 1213.95 L1519.66 1213.95 L1520.25 1213.95 L1520.83 1213.95 L1521.42 1213.95 L1522.01 1213.95 L1522.59 1213.95 L1523.18 1213.95 L1523.77 1213.95 L1524.35 1213.95 L1524.94 1213.95 L1525.52 1213.95 L1526.11 1213.95 L1526.7 1213.95 L1527.28 1213.95 L1527.87 1213.95 L1528.46 1213.95 L1529.04 1213.95 L1529.63 1213.95 L1530.22 1213.95 L1530.8 1213.95 L1531.39 1213.95 L1531.98 1213.95 L1532.56 1213.95 L1533.15 1213.95 L1533.73 1213.95 L1534.32 1213.95 L1534.91 1213.95 L1535.49 1213.95 L1536.08 1213.95 L1536.67 1213.95 L1537.25 1213.95 L1537.84 1213.95 L1538.43 1213.95 L1539.01 1213.95 L1539.6 1213.95 L1540.19 1213.95 L1540.77 1213.95 L1541.36 1213.95 L1541.94 1213.95 L1542.53 1213.95 L1543.12 1213.95 L1543.7 1213.95 L1544.29 1213.95 L1544.88 1213.95 L1545.46 1213.95 L1546.05 1213.95 L1546.64 1213.95 L1547.22 1213.95 L1547.81 1213.95 L1548.4 1213.95 L1548.98 1213.95 L1549.57 1213.95 L1550.15 1213.95 L1550.74 1213.95 L1551.33 1213.95 L1551.91 1213.95 L1552.5 1213.95 L1553.09 1213.95 L1553.67 1213.95 L1554.26 1213.95 L1554.85 1213.95 L1555.43 1213.95 L1556.02 1213.95 L1556.6 1213.95 L1557.19 1213.95 L1557.78 1213.95 L1558.36 1213.95 L1558.95 1213.95 L1559.54 1213.95 L1560.12 1213.95 L1560.71 1213.95 L1561.3 1213.95 L1561.88 1213.95 L1562.47 1213.95 L1563.06 1213.95 L1563.64 1213.95 L1564.23 1213.95 L1564.81 1213.95 L1565.4 1213.95 L1565.99 1213.95 L1566.57 1213.95 L1567.16 1213.95 L1567.75 1213.95 L1568.33 1213.95 L1568.92 1213.95 L1569.51 1213.95 L1570.09 1213.95 L1570.68 1213.95 L1571.27 1213.95 L1571.85 1213.95 L1572.44 1213.95 L1573.02 1213.95 L1573.61 1213.95 L1574.2 1213.95 L1574.78 1213.95 L1575.37 1213.95 L1575.96 1213.95 L1576.54 1213.95 L1577.13 1213.95 L1577.72 1213.95 L1578.3 1213.95 L1578.89 1213.95 L1579.47 1213.95 L1580.06 1213.95 L1580.65 1213.95 L1581.23 1213.95 L1581.82 1213.95 L1582.41 1213.95 L1582.99 1213.95 L1583.58 1213.95 L1584.17 1213.95 L1584.75 1213.95 L1585.34 1213.95 L1585.93 1213.95 L1586.51 1213.95 L1587.1 1213.95 L1587.68 1213.95 L1588.27 1213.95 L1588.86 1213.95 L1589.44 1213.95 L1590.03 1213.95 L1590.62 1213.95 L1591.2 1213.95 L1591.79 1213.95 L1592.38 1213.95 L1592.96 1213.95 L1593.55 1213.95 L1594.14 1213.95 L1594.72 1213.95 L1595.31 1213.95 L1595.89 1213.95 L1596.48 1213.95 L1597.07 1213.95 L1597.65 1213.95 L1598.24 1213.95 L1598.83 1213.95 L1599.41 1213.95 L1600 1213.95 L1600.59 1213.95 L1601.17 1213.95 L1601.76 1213.95 L1602.34 1213.95 L1602.93 1213.95 L1603.52 1213.95 L1604.1 1213.95 L1604.69 1213.95 L1605.28 1213.95 L1605.86 1213.95 L1606.45 1213.95 L1607.04 1213.95 L1607.62 1213.95 L1608.21 1213.95 L1608.8 1213.95 L1609.38 1213.95 L1609.97 1213.95 L1610.55 1213.95 L1611.14 1213.95 L1611.73 1213.95 L1612.31 1213.95 L1612.9 1213.95 L1613.49 1213.95 L1614.07 1213.95 L1614.66 1213.95 L1615.25 1213.95 L1615.83 1213.95 L1616.42 1213.95 L1617.01 1213.95 L1617.59 1213.95 L1618.18 1213.95 L1618.76 1213.95 L1619.35 1213.95 L1619.94 1213.95 L1620.52 1213.95 L1621.11 1213.95 L1621.7 1213.95 L1622.28 1213.95 L1622.87 1213.95 L1623.46 1213.95 L1624.04 1213.95 L1624.63 1213.95 L1625.22 1213.95 L1625.8 1213.95 L1626.39 1213.95 L1626.97 1213.95 L1627.56 1213.95 L1628.15 1213.95 L1628.73 1213.95 L1629.32 1213.95 L1629.91 1213.95 L1630.49 1213.95 L1631.08 1213.95 L1631.67 1213.95 L1632.25 1213.95 L1632.84 1213.95 L1633.42 1213.95 L1634.01 1213.95 L1634.6 1213.95 L1635.18 1213.95 L1635.77 1213.95 L1636.36 1213.95 L1636.94 1213.95 L1637.53 1213.95 L1638.12 1213.95 L1638.7 1213.95 L1639.29 1213.95 L1639.88 1213.95 L1640.46 1213.95 L1641.05 1213.95 L1641.63 1213.95 L1642.22 1213.95 L1642.81 1213.95 L1643.39 1213.95 L1643.98 1213.95 L1644.57 1213.95 L1645.15 1213.95 L1645.74 1213.95 L1646.33 1213.95 L1646.91 1213.95 L1647.5 1213.95 L1648.09 1213.95 L1648.67 1213.95 L1649.26 1213.95 L1649.84 1213.95 L1650.43 1213.95 L1651.02 1213.95 L1651.6 1213.95 L1652.19 1213.95 L1652.78 1213.95 L1653.36 1213.95 L1653.95 1213.95 L1654.54 1213.95 L1655.12 1213.95 L1655.71 1213.95 L1656.29 1213.95 L1656.88 1213.95 L1657.47 1213.95 L1658.05 1213.95 L1658.64 1213.95 L1659.23 1213.95 L1659.81 1213.95 L1660.4 1213.95 L1660.99 1213.95 L1661.57 1213.95 L1662.16 1213.95 L1662.75 1213.95 L1663.33 1213.95 L1663.92 1213.95 L1664.5 1213.95 L1665.09 1213.95 L1665.68 1213.95 L1666.26 1213.95 L1666.85 1213.95 L1667.44 1213.95 L1668.02 1213.95 L1668.61 1213.95 L1669.2 1213.95 L1669.78 1213.95 L1670.37 1213.95 L1670.96 1213.95 L1671.54 1213.95 L1672.13 1213.95 L1672.71 1213.95 L1673.3 1213.95 L1673.89 1213.95 L1674.47 1213.95 L1675.06 1213.95 L1675.65 1213.95 L1676.23 1213.95 L1676.82 1213.95 L1677.41 1213.95 L1677.99 1213.95 L1678.58 1213.95 L1679.17 1213.95 L1679.75 1213.95 L1680.34 1213.95 L1680.92 1213.95 L1681.51 1213.95 L1682.1 1213.95 L1682.68 1213.95 L1683.27 1213.95 L1683.86 1213.95 L1684.44 1213.95 L1685.03 1213.95 L1685.62 1213.95 L1686.2 1213.95 L1686.79 1213.95 L1687.37 1213.95 L1687.96 1213.95 L1688.55 1213.95 L1689.13 1213.95 L1689.72 1213.95 L1690.31 1213.95 L1690.89 1213.95 L1691.48 1213.95 L1692.07 1213.95 L1692.65 1213.95 L1693.24 1213.95 L1693.83 1213.95 L1694.41 1213.95 L1695 1213.95 L1695.58 1213.95 L1696.17 1213.95 L1696.76 1213.95 L1697.34 1213.95 L1697.93 1213.95 L1698.52 1213.95 L1699.1 1213.95 L1699.69 1213.95 L1700.28 1213.95 L1700.86 1213.95 L1701.45 1213.95 L1702.04 1213.95 L1702.62 1213.95 L1703.21 1213.95 L1703.79 1213.95 L1704.38 1213.95 L1704.97 1213.95 L1705.55 1213.95 L1706.14 1213.95 L1706.73 1213.95 L1707.31 1213.95 L1707.9 1213.95 L1708.49 1213.95 L1709.07 1213.95 L1709.66 1213.95 L1710.24 1213.95 L1710.83 1213.95 L1711.42 1213.95 L1712 1213.95 L1712.59 1213.95 L1713.18 1213.95 L1713.76 1213.95 L1714.35 1213.95 L1714.94 1213.95 L1715.52 1213.95 L1716.11 1213.95 L1716.7 1213.95 L1717.28 1213.95 L1717.87 1213.95 L1718.45 1213.95 L1719.04 1213.95 L1719.63 1213.95 L1720.21 1213.95 L1720.8 1213.95 L1721.39 1213.95 L1721.97 1213.95 L1722.56 1213.95 L1723.15 1213.95 L1723.73 1213.95 L1724.32 1213.95 L1724.91 1213.95 L1725.49 1213.95 L1726.08 1213.95 L1726.66 1213.95 L1727.25 1213.95 L1727.84 1213.95 L1728.42 1213.95 L1729.01 1213.95 L1729.6 1213.95 L1730.18 1213.95 L1730.77 1213.95 L1731.36 1213.95 L1731.94 1213.95 L1732.53 1213.95 L1733.11 1213.95 L1733.7 1213.95 L1734.29 1213.95 L1734.87 1213.95 L1735.46 1213.95 L1736.05 1213.95 L1736.63 1213.95 L1737.22 1213.95 L1737.81 1213.95 L1738.39 1213.95 L1738.98 1213.95 L1739.57 1213.95 L1740.15 1213.95 L1740.74 1213.95 L1741.32 1213.95 L1741.91 1213.95 L1742.5 1213.95 L1743.08 1213.95 L1743.67 1213.95 L1744.26 1213.95 L1744.84 1213.95 L1745.43 1213.95 L1746.02 1213.95 L1746.6 1213.95 L1747.19 1213.95 L1747.78 1213.95 L1748.36 1213.95 L1748.95 1213.95 L1749.53 1213.95 L1750.12 1213.95 L1750.71 1213.95 L1751.29 1213.95 L1751.88 1213.95 L1752.47 1213.95 L1753.05 1213.95 L1753.64 1213.95 L1754.23 1213.95 L1754.81 1213.95 L1755.4 1213.95 L1755.99 1213.95 L1756.57 1213.95 L1757.16 1213.95 L1757.74 1213.95 L1758.33 1213.95 L1758.92 1213.95 L1759.5 1213.95 L1760.09 1213.95 L1760.68 1213.95 L1761.26 1213.95 L1761.85 1213.95 L1762.44 1213.95 L1763.02 1213.95 L1763.61 1213.95 L1764.19 1213.95 L1764.78 1213.95 L1765.37 1213.95 L1765.95 1213.95 L1766.54 1213.95 L1767.13 1213.95 L1767.71 1213.95 L1768.3 1213.95 L1768.89 1213.95 L1769.47 1213.95 L1770.06 1213.95 L1770.65 1213.95 L1771.23 1213.95 L1771.82 1213.95 L1772.4 1213.95 L1772.99 1213.95 L1773.58 1213.95 L1774.16 1213.95 L1774.75 1213.95 L1775.34 1213.95 L1775.92 1213.95 L1776.51 1213.95 L1777.1 1213.95 L1777.68 1213.95 L1778.27 1213.95 L1778.86 1213.95 L1779.44 1213.95 L1780.03 1213.95 L1780.61 1213.95 L1781.2 1213.95 L1781.79 1213.95 L1782.37 1213.95 L1782.96 1213.95 L1783.55 1213.95 L1784.13 1213.95 L1784.72 1213.95 L1785.31 1213.95 L1785.89 1213.95 L1786.48 1213.95 L1787.06 1213.95 L1787.65 1213.95 L1788.24 1213.95 L1788.82 1213.95 L1789.41 1213.95 L1790 1213.95 L1790.58 1213.95 L1791.17 1213.95 L1791.76 1213.95 L1792.34 1213.95 L1792.93 1213.95 L1793.52 1213.95 L1794.1 1213.95 L1794.69 1213.95 L1795.27 1213.95 L1795.86 1213.95 L1796.45 1213.95 L1797.03 1213.95 L1797.62 1213.95 L1798.21 1213.95 L1798.79 1213.95 L1799.38 1213.95 L1799.97 1213.95 L1800.55 1213.95 L1801.14 1213.95 L1801.73 1213.95 L1802.31 1213.95 L1802.9 1213.95 L1803.48 1213.95 L1804.07 1213.95 L1804.66 1213.95 L1805.24 1213.95 L1805.83 1213.95 L1806.42 1213.95 L1807 1213.95 L1807.59 1213.95 L1808.18 1213.95 L1808.76 1213.95 L1809.35 1213.95 L1809.94 1213.95 L1810.52 1213.95 L1811.11 1213.95 L1811.69 1213.95 L1812.28 1213.95 L1812.87 1213.95 L1813.45 1213.95 L1814.04 1213.95 L1814.63 1213.95 L1815.21 1213.95 L1815.8 1213.95 L1816.39 1213.95 L1816.97 1213.95 L1817.56 1213.95 L1818.14 1213.95 L1818.73 1213.95 L1819.32 1213.95 L1819.9 1213.95 L1820.49 1213.95 L1821.08 1213.95 L1821.66 1213.95 L1822.25 1213.95 L1822.84 1213.95 L1823.42 1213.95 L1824.01 1213.95 L1824.6 1213.95 L1825.18 1213.95 L1825.77 1213.95 L1826.35 1213.95 L1826.94 1213.95 L1827.53 1213.95 L1828.11 1213.95 L1828.7 1213.95 L1829.29 1213.95 L1829.87 1213.95 L1830.46 1213.95 L1831.05 1213.95 L1831.63 1213.95 L1832.22 1213.95 L1832.81 1213.95 L1833.39 1213.95 L1833.98 1213.95 L1834.56 1213.95 L1835.15 1213.95 L1835.74 1213.95 L1836.32 1213.95 L1836.91 1213.95 L1837.5 1213.95 L1838.08 1213.95 L1838.67 1213.95 L1839.26 1213.95 L1839.84 1213.95 L1840.43 1213.95 L1841.01 1213.95 L1841.6 1213.95 L1842.19 1213.95 L1842.77 1213.95 L1843.36 1213.95 L1843.95 1213.95 L1844.53 1213.95 L1845.12 1213.95 L1845.71 1213.95 L1846.29 1213.95 L1846.88 1213.95 L1847.47 1213.95 L1848.05 1213.95 L1848.64 1213.95 L1849.22 1213.95 L1849.81 1213.95 L1850.4 1213.95 L1850.98 1213.95 L1851.57 1213.95 L1852.16 1213.95 L1852.74 1213.95 L1853.33 1213.95 L1853.92 1213.95 L1854.5 1213.95 L1855.09 1213.95 L1855.68 1213.95 L1856.26 1213.95 L1856.85 1213.95 L1857.43 1213.95 L1858.02 1213.95 L1858.61 1213.95 L1859.19 1213.95 L1859.78 1213.95 L1860.37 1213.95 L1860.95 1213.95 L1861.54 1213.95 L1862.13 1213.95 L1862.71 1213.95 L1863.3 1213.95 L1863.88 1213.95 L1864.47 1213.95 L1865.06 1213.95 L1865.64 1213.95 L1866.23 1213.95 L1866.82 1213.95 L1867.4 1213.95 L1867.99 1213.95 L1868.58 1213.95 L1869.16 1213.95 L1869.75 1213.95 L1870.34 1213.95 L1870.92 1213.95 L1871.51 1213.95 L1872.09 1213.95 L1872.68 1213.95 L1873.27 1213.95 L1873.85 1213.95 L1874.44 1213.95 L1875.03 1213.95 L1875.61 1213.95 L1876.2 1213.95 L1876.79 1213.95 L1877.37 1213.95 L1877.96 1213.95 L1878.55 1213.95 L1879.13 1213.95 L1879.72 1213.95 L1880.3 1213.95 L1880.89 1213.95 L1881.48 1213.95 L1882.06 1213.95 L1882.65 1213.95 L1883.24 1213.95 L1883.82 1213.95 L1884.41 1213.95 L1885 1213.95 L1885.58 1213.95 L1886.17 1213.95 L1886.76 1213.95 L1887.34 1213.95 L1887.93 1213.95 L1888.51 1213.95 L1889.1 1213.95 L1889.69 1213.95 L1890.27 1213.95 L1890.86 1213.95 L1891.45 1213.95 L1892.03 1213.95 L1892.62 1213.95 L1893.21 1213.95 L1893.79 1213.95 L1894.38 1213.95 L1894.96 1213.95 L1895.55 1213.95 L1896.14 1213.95 L1896.72 1213.95 L1897.31 1213.95 L1897.9 1213.95 L1898.48 1213.95 L1899.07 1213.95 L1899.66 1213.95 L1900.24 1213.95 L1900.83 1213.95 L1901.42 1213.95 L1902 1213.95 L1902.59 1213.95 L1903.17 1213.95 L1903.76 1213.95 L1904.35 1213.95 L1904.93 1213.95 L1905.52 1213.95 L1906.11 1213.95 L1906.69 1213.95 L1907.28 1213.95 L1907.87 1213.95 L1908.45 1213.95 L1909.04 1213.95 L1909.63 1213.95 L1910.21 1213.95 L1910.8 1213.95 L1911.38 1213.95 L1911.97 1213.95 L1912.56 1213.95 L1913.14 1213.95 L1913.73 1213.95 L1914.32 1213.95 L1914.9 1213.95 L1915.49 1213.95 L1916.08 1213.95 L1916.66 1213.95 L1917.25 1213.95 L1917.83 1213.95 L1918.42 1213.95 L1919.01 1213.95 L1919.59 1213.95 L1920.18 1213.95 L1920.77 1213.95 L1921.35 1213.95 L1921.94 1213.95 L1922.53 1213.95 L1923.11 1213.95 L1923.7 1213.95 L1924.29 1213.95 L1924.87 1213.95 L1925.46 1213.95 L1926.04 1213.95 L1926.63 1213.95 L1927.22 1213.95 L1927.8 1213.95 L1928.39 1213.95 L1928.98 1213.95 L1929.56 1213.95 L1930.15 1213.95 L1930.74 1213.95 L1931.32 1213.95 L1931.91 1213.95 L1932.5 1213.95 L1933.08 1213.95 L1933.67 1213.95 L1934.25 1213.95 L1934.84 1213.95 L1935.43 1213.95 L1936.01 1213.95 L1936.6 1213.95 L1937.19 1213.95 L1937.77 1213.95 L1938.36 1213.95 L1938.95 1213.95 L1939.53 1213.95 L1940.12 1213.95 L1940.71 1213.95 L1941.29 1213.95 L1941.88 1213.95 L1942.46 1213.95 L1943.05 1213.95 L1943.64 1213.95 L1944.22 1213.95 L1944.81 1213.95 L1945.4 1213.95 L1945.98 1213.95 L1946.57 1213.95 L1947.16 1213.95 L1947.74 1213.95 L1948.33 1213.95 L1948.91 1213.95 L1949.5 1213.95 L1950.09 1213.95 L1950.67 1213.95 L1951.26 1213.95 L1951.85 1213.95 L1952.43 1213.95 L1953.02 1213.95 L1953.61 1213.95 L1954.19 1213.95 L1954.78 1213.95 L1955.37 1213.95 L1955.95 1213.95 L1956.54 1213.95 L1957.12 1213.95 L1957.71 1213.95 L1958.3 1213.95 L1958.88 1213.95 L1959.47 1213.95 L1960.06 1213.95 L1960.64 1213.95 L1961.23 1213.95 L1961.82 1213.95 L1962.4 1213.95 L1962.99 1213.95 L1963.58 1213.95 L1964.16 1213.95 L1964.75 1213.95 L1965.33 1213.95 L1965.92 1213.95 L1966.51 1213.95 L1967.09 1213.95 L1967.68 1213.95 L1968.27 1213.95 L1968.85 1213.95 L1969.44 1213.95 L1970.03 1213.95 L1970.61 1213.95 L1971.2 1213.95 L1971.78 1213.95 L1972.37 1213.95 L1972.96 1213.95 L1973.54 1213.95 L1974.13 1213.95 L1974.72 1213.95 L1975.3 1213.95 L1975.89 1213.95 L1976.48 1213.95 L1977.06 1213.95 L1977.65 1213.95 L1978.24 1213.95 L1978.82 1213.95 L1979.41 1213.95 L1979.99 1213.95 L1980.58 1213.95 L1981.17 1213.95 L1981.75 1213.95 L1982.34 1213.95 L1982.93 1213.95 L1983.51 1213.95 L1984.1 1213.95 L1984.69 1213.95 L1985.27 1213.95 L1985.86 1213.95 L1986.45 1213.95 L1987.03 1213.95 L1987.62 1213.95 L1988.2 1213.95 L1988.79 1213.95 L1989.38 1213.95 L1989.96 1213.95 L1990.55 1213.95 L1991.14 1213.95 L1991.72 1213.95 L1992.31 1213.95 L1992.9 1213.95 L1993.48 1213.95 L1994.07 1213.95 L1994.65 1213.95 L1995.24 1213.95 L1995.83 1213.95 L1996.41 1213.95 L1997 1213.95 L1997.59 1213.95 L1998.17 1213.95 L1998.76 1213.95 L1999.35 1213.95 L1999.93 1213.95 L2000.52 1213.95 L2001.11 1213.95 L2001.69 1213.95 L2002.28 1213.95 L2002.86 1213.95 L2003.45 1213.95 L2004.04 1213.95 L2004.62 1213.95 L2005.21 1213.95 L2005.8 1213.95 L2006.38 1213.95 L2006.97 1213.95 L2007.56 1213.95 L2008.14 1213.95 L2008.73 1213.95 L2009.32 1213.95 L2009.9 1213.95 L2010.49 1213.95 L2011.07 1213.95 L2011.66 1213.95 L2012.25 1213.95 L2012.83 1213.95 L2013.42 1213.95 L2014.01 1213.95 L2014.59 1213.95 L2015.18 1213.95 L2015.77 1213.95 L2016.35 1213.95 L2016.94 1213.95 L2017.53 1213.95 L2018.11 1213.95 L2018.7 1213.95 L2019.28 1213.95 L2019.87 1213.95 L2020.46 1213.95 L2021.04 1213.95 L2021.63 1213.95 L2022.22 1213.95 L2022.8 1213.95 L2023.39 1213.95 L2023.98 1213.95 L2024.56 1213.95 L2025.15 1213.95 L2025.73 1213.95 L2026.32 1213.95 L2026.91 1213.95 L2027.49 1213.95 L2028.08 1213.95 L2028.67 1213.95 L2029.25 1213.95 L2029.84 1213.95 L2030.43 1213.95 L2031.01 1213.95 L2031.6 1213.95 L2032.19 1213.95 L2032.77 1213.95 L2033.36 1213.95 L2033.94 1213.95 L2034.53 1213.95 L2035.12 1213.95 L2035.7 1213.95 L2036.29 1213.95 L2036.88 1213.95 L2037.46 1213.95 L2038.05 1213.95 L2038.64 1213.95 L2039.22 1213.95 L2039.81 1213.95 L2040.4 1213.95 L2040.98 1213.95 L2041.57 1213.95 L2042.15 1213.95 L2042.74 1213.95 L2043.33 1213.95 L2043.91 1213.95 L2044.5 1213.95 L2045.09 1213.95 L2045.67 1213.95 L2046.26 1213.95 L2046.85 1213.95 L2047.43 1213.95 L2048.02 1213.95 L2048.6 1213.95 L2049.19 1213.95 L2049.78 1213.95 L2050.36 1213.95 L2050.95 1213.95 L2051.54 1213.95 L2052.12 1213.95 L2052.71 1213.95 L2053.3 1213.95 L2053.88 1213.95 L2054.47 1213.95 L2055.06 1213.95 L2055.64 1213.95 L2056.23 1213.95 L2056.81 1213.95 L2057.4 1213.95 L2057.99 1213.95 L2058.57 1213.95 L2059.16 1213.95 L2059.75 1213.95 L2060.33 1213.95 L2060.92 1213.95 L2061.51 1213.95 L2062.09 1213.95 L2062.68 1213.95 L2063.27 1213.95 L2063.85 1213.95 L2064.44 1213.95 L2065.02 1213.95 L2065.61 1213.95 L2066.2 1213.95 L2066.78 1213.95 L2067.37 1213.95 L2067.96 1213.95 L2068.54 1213.95 L2069.13 1213.95 L2069.72 1213.95 L2070.3 1213.95 L2070.89 1213.95 L2071.48 1213.95 L2072.06 1213.95 L2072.65 1213.95 L2073.23 1213.95 L2073.82 1213.95 L2074.41 1213.95 L2074.99 1213.95 L2075.58 1213.95 L2076.17 1213.95 L2076.75 1213.95 L2077.34 1213.95 L2077.93 1213.95 L2078.51 1213.95 L2079.1 1213.95 L2079.68 1213.95 L2080.27 1213.95 L2080.86 1213.95 L2081.44 1213.95 L2082.03 1213.95 L2082.62 1213.95 L2083.2 1213.95 L2083.79 1213.95 L2084.38 1213.95 L2084.96 1213.95 L2085.55 1213.95 L2086.14 1213.95 L2086.72 1213.95 L2087.31 1213.95 L2087.89 1213.95 L2088.48 1213.95 L2089.07 1213.95 L2089.65 1213.95 L2090.24 1213.95 L2090.83 1213.95 L2091.41 1213.95 L2092 1213.95 L2092.59 1213.95 L2093.17 1213.95 L2093.76 1213.95 L2094.35 1213.95 L2094.93 1213.95 L2095.52 1213.95 L2096.1 1213.95 L2096.69 1213.95 L2097.28 1213.95 L2097.86 1213.95 L2098.45 1213.95 L2099.04 1213.95 L2099.62 1213.95 L2100.21 1213.95 L2100.8 1213.95 L2101.38 1213.95 L2101.97 1213.95 L2102.55 1213.95 L2103.14 1213.95 L2103.73 1213.95 L2104.31 1213.95 L2104.9 1213.95 L2105.49 1213.95 L2106.07 1213.95 L2106.66 1213.95 L2107.25 1213.95 L2107.83 1213.95 L2108.42 1213.95 L2109.01 1213.95 L2109.59 1213.95 L2110.18 1213.95 L2110.76 1213.95 L2111.35 1213.95 L2111.94 1213.95 L2112.52 1213.95 L2113.11 1213.95 L2113.7 1213.95 L2114.28 1213.95 L2114.87 1213.95 L2115.46 1213.95 L2116.04 1213.95 L2116.63 1213.95 L2117.22 1213.95 L2117.8 1213.95 L2118.39 1213.95 L2118.97 1213.95 L2119.56 1213.95 L2120.15 1213.95 L2120.73 1213.95 L2121.32 1213.95 L2121.91 1213.95 L2122.49 1213.95 L2123.08 1213.95 L2123.67 1213.95 L2124.25 1213.95 L2124.84 1213.95 L2125.42 1213.95 L2126.01 1213.95 L2126.6 1213.95 L2127.18 1213.95 L2127.77 1213.95 L2128.36 1213.95 L2128.94 1213.95 L2129.53 1213.95 L2130.12 1213.95 L2130.7 1213.95 L2131.29 1213.95 L2131.88 1213.95 L2132.46 1213.95 L2133.05 1213.95 L2133.63 1213.95 L2134.22 1213.95 L2134.81 1213.95 L2135.39 1213.95 L2135.98 1213.95 L2136.57 1213.95 L2137.15 1213.95 L2137.74 1213.95 L2138.33 1213.95 L2138.91 1213.95 L2139.5 1213.95 L2140.09 1213.95 L2140.67 1213.95 L2141.26 1213.95 L2141.84 1213.95 L2142.43 1213.95 L2143.02 1213.95 L2143.6 1213.95 L2144.19 1213.95 L2144.78 1213.95 L2145.36 1213.95 L2145.95 1213.95 L2146.54 1213.95 L2147.12 1213.95 L2147.71 1213.95 L2148.3 1213.95 L2148.88 1213.95 L2149.47 1213.95 L2150.05 1213.95 L2150.64 1213.95 L2151.23 1213.95 L2151.81 1213.95 L2152.4 1213.95 L2152.99 1213.95 L2153.57 1213.95 L2154.16 1213.95 L2154.75 1213.95 L2155.33 1213.95 L2155.92 1213.95 L2156.5 1213.95 L2157.09 1213.95 L2157.68 1213.95 L2158.26 1213.95 L2158.26 1213.32 L2157.68 1213.32 L2157.09 1213.32 L2156.5 1213.32 L2155.92 1213.32 L2155.33 1213.32 L2154.75 1213.32 L2154.16 1213.32 L2153.57 1213.32 L2152.99 1213.32 L2152.4 1213.32 L2151.81 1213.32 L2151.23 1213.32 L2150.64 1213.32 L2150.05 1213.32 L2149.47 1213.32 L2148.88 1213.32 L2148.3 1213.32 L2147.71 1213.32 L2147.12 1213.32 L2146.54 1213.32 L2145.95 1213.32 L2145.36 1213.32 L2144.78 1213.32 L2144.19 1213.32 L2143.6 1213.32 L2143.02 1213.32 L2142.43 1213.32 L2141.84 1213.32 L2141.26 1213.32 L2140.67 1213.32 L2140.09 1213.32 L2139.5 1213.32 L2138.91 1213.32 L2138.33 1213.32 L2137.74 1213.32 L2137.15 1213.32 L2136.57 1213.32 L2135.98 1213.32 L2135.39 1213.32 L2134.81 1213.32 L2134.22 1213.32 L2133.63 1213.32 L2133.05 1213.32 L2132.46 1213.32 L2131.88 1213.32 L2131.29 1213.32 L2130.7 1213.32 L2130.12 1213.32 L2129.53 1213.32 L2128.94 1213.32 L2128.36 1213.32 L2127.77 1213.32 L2127.18 1213.32 L2126.6 1213.32 L2126.01 1213.32 L2125.42 1213.32 L2124.84 1213.32 L2124.25 1213.32 L2123.67 1213.32 L2123.08 1213.32 L2122.49 1213.32 L2121.91 1213.32 L2121.32 1213.32 L2120.73 1213.32 L2120.15 1213.32 L2119.56 1213.32 L2118.97 1213.32 L2118.39 1213.32 L2117.8 1213.32 L2117.22 1213.32 L2116.63 1213.32 L2116.04 1213.32 L2115.46 1213.32 L2114.87 1213.32 L2114.28 1213.32 L2113.7 1213.32 L2113.11 1213.32 L2112.52 1213.32 L2111.94 1213.32 L2111.35 1213.32 L2110.76 1213.32 L2110.18 1213.32 L2109.59 1213.32 L2109.01 1213.32 L2108.42 1213.32 L2107.83 1213.32 L2107.25 1213.32 L2106.66 1213.32 L2106.07 1213.32 L2105.49 1213.32 L2104.9 1213.32 L2104.31 1213.32 L2103.73 1213.32 L2103.14 1213.32 L2102.55 1213.32 L2101.97 1213.32 L2101.38 1213.32 L2100.8 1213.32 L2100.21 1213.32 L2099.62 1213.32 L2099.04 1213.32 L2098.45 1213.32 L2097.86 1213.32 L2097.28 1213.32 L2096.69 1213.32 L2096.1 1213.32 L2095.52 1213.32 L2094.93 1213.32 L2094.35 1213.32 L2093.76 1213.32 L2093.17 1213.32 L2092.59 1213.32 L2092 1213.32 L2091.41 1213.32 L2090.83 1213.32 L2090.24 1213.32 L2089.65 1213.32 L2089.07 1213.32 L2088.48 1213.32 L2087.89 1213.32 L2087.31 1213.32 L2086.72 1213.32 L2086.14 1213.32 L2085.55 1213.32 L2084.96 1213.32 L2084.38 1213.32 L2083.79 1213.32 L2083.2 1213.32 L2082.62 1213.32 L2082.03 1213.32 L2081.44 1213.32 L2080.86 1213.32 L2080.27 1213.32 L2079.68 1213.32 L2079.1 1213.32 L2078.51 1213.32 L2077.93 1213.32 L2077.34 1213.32 L2076.75 1213.32 L2076.17 1213.32 L2075.58 1213.32 L2074.99 1213.32 L2074.41 1213.32 L2073.82 1213.32 L2073.23 1213.32 L2072.65 1213.32 L2072.06 1213.32 L2071.48 1213.32 L2070.89 1213.32 L2070.3 1213.32 L2069.72 1213.32 L2069.13 1213.32 L2068.54 1213.32 L2067.96 1213.32 L2067.37 1213.32 L2066.78 1213.32 L2066.2 1213.32 L2065.61 1213.32 L2065.02 1213.32 L2064.44 1213.32 L2063.85 1213.32 L2063.27 1213.32 L2062.68 1213.32 L2062.09 1213.32 L2061.51 1213.32 L2060.92 1213.32 L2060.33 1213.32 L2059.75 1213.32 L2059.16 1213.32 L2058.57 1213.32 L2057.99 1213.32 L2057.4 1213.32 L2056.81 1213.32 L2056.23 1213.32 L2055.64 1213.32 L2055.06 1213.32 L2054.47 1213.32 L2053.88 1213.32 L2053.3 1213.32 L2052.71 1213.32 L2052.12 1213.32 L2051.54 1213.32 L2050.95 1213.32 L2050.36 1213.32 L2049.78 1213.32 L2049.19 1213.32 L2048.6 1213.32 L2048.02 1213.32 L2047.43 1213.32 L2046.85 1213.32 L2046.26 1213.32 L2045.67 1213.32 L2045.09 1213.32 L2044.5 1213.32 L2043.91 1213.32 L2043.33 1213.32 L2042.74 1213.32 L2042.15 1213.32 L2041.57 1213.32 L2040.98 1213.32 L2040.4 1213.32 L2039.81 1213.32 L2039.22 1213.32 L2038.64 1213.32 L2038.05 1213.32 L2037.46 1213.32 L2036.88 1213.32 L2036.29 1213.32 L2035.7 1213.32 L2035.12 1213.32 L2034.53 1213.32 L2033.94 1213.32 L2033.36 1213.32 L2032.77 1213.32 L2032.19 1213.32 L2031.6 1213.32 L2031.01 1213.32 L2030.43 1213.32 L2029.84 1213.32 L2029.25 1213.32 L2028.67 1213.32 L2028.08 1213.32 L2027.49 1213.32 L2026.91 1213.32 L2026.32 1213.32 L2025.73 1213.32 L2025.15 1213.32 L2024.56 1213.32 L2023.98 1213.32 L2023.39 1213.32 L2022.8 1213.32 L2022.22 1213.32 L2021.63 1213.32 L2021.04 1213.32 L2020.46 1213.32 L2019.87 1213.32 L2019.28 1213.32 L2018.7 1213.32 L2018.11 1213.32 L2017.53 1213.32 L2016.94 1213.32 L2016.35 1213.32 L2015.77 1213.32 L2015.18 1213.32 L2014.59 1213.32 L2014.01 1213.32 L2013.42 1213.32 L2012.83 1213.32 L2012.25 1213.32 L2011.66 1213.32 L2011.07 1213.32 L2010.49 1213.32 L2009.9 1213.32 L2009.32 1213.32 L2008.73 1213.32 L2008.14 1213.32 L2007.56 1213.32 L2006.97 1213.32 L2006.38 1213.32 L2005.8 1213.32 L2005.21 1213.32 L2004.62 1213.32 L2004.04 1213.32 L2003.45 1213.32 L2002.86 1213.32 L2002.28 1213.32 L2001.69 1213.32 L2001.11 1213.32 L2000.52 1213.32 L1999.93 1213.32 L1999.35 1213.32 L1998.76 1213.32 L1998.17 1213.32 L1997.59 1213.32 L1997 1213.32 L1996.41 1213.32 L1995.83 1213.32 L1995.24 1213.32 L1994.65 1213.32 L1994.07 1213.32 L1993.48 1213.32 L1992.9 1213.32 L1992.31 1213.32 L1991.72 1213.32 L1991.14 1213.32 L1990.55 1213.32 L1989.96 1213.32 L1989.38 1213.32 L1988.79 1213.32 L1988.2 1213.32 L1987.62 1213.32 L1987.03 1213.32 L1986.45 1213.32 L1985.86 1213.32 L1985.27 1213.32 L1984.69 1213.32 L1984.1 1213.32 L1983.51 1213.32 L1982.93 1213.32 L1982.34 1213.32 L1981.75 1213.32 L1981.17 1213.32 L1980.58 1213.32 L1979.99 1213.32 L1979.41 1213.32 L1978.82 1213.32 L1978.24 1213.32 L1977.65 1213.32 L1977.06 1213.32 L1976.48 1213.32 L1975.89 1213.32 L1975.3 1213.32 L1974.72 1213.32 L1974.13 1213.32 L1973.54 1213.32 L1972.96 1213.32 L1972.37 1213.32 L1971.78 1213.32 L1971.2 1213.32 L1970.61 1213.32 L1970.03 1213.32 L1969.44 1213.32 L1968.85 1213.32 L1968.27 1213.32 L1967.68 1213.32 L1967.09 1213.32 L1966.51 1213.32 L1965.92 1213.32 L1965.33 1213.32 L1964.75 1213.32 L1964.16 1213.32 L1963.58 1213.32 L1962.99 1213.32 L1962.4 1213.32 L1961.82 1213.32 L1961.23 1213.32 L1960.64 1213.32 L1960.06 1213.32 L1959.47 1213.32 L1958.88 1213.32 L1958.3 1213.32 L1957.71 1213.32 L1957.12 1213.32 L1956.54 1213.32 L1955.95 1213.32 L1955.37 1213.32 L1954.78 1213.32 L1954.19 1213.32 L1953.61 1213.32 L1953.02 1213.32 L1952.43 1213.32 L1951.85 1213.32 L1951.26 1213.32 L1950.67 1213.32 L1950.09 1213.32 L1949.5 1213.32 L1948.91 1213.32 L1948.33 1213.32 L1947.74 1213.32 L1947.16 1213.32 L1946.57 1213.32 L1945.98 1213.32 L1945.4 1213.32 L1944.81 1213.32 L1944.22 1213.32 L1943.64 1213.32 L1943.05 1213.32 L1942.46 1213.32 L1941.88 1213.32 L1941.29 1213.32 L1940.71 1213.32 L1940.12 1213.32 L1939.53 1213.32 L1938.95 1213.32 L1938.36 1213.32 L1937.77 1213.32 L1937.19 1213.32 L1936.6 1213.32 L1936.01 1213.32 L1935.43 1213.32 L1934.84 1213.32 L1934.25 1213.32 L1933.67 1213.32 L1933.08 1213.32 L1932.5 1213.32 L1931.91 1213.32 L1931.32 1213.32 L1930.74 1213.32 L1930.15 1213.32 L1929.56 1213.32 L1928.98 1213.32 L1928.39 1213.32 L1927.8 1213.32 L1927.22 1213.32 L1926.63 1213.32 L1926.04 1213.32 L1925.46 1213.32 L1924.87 1213.32 L1924.29 1213.32 L1923.7 1213.32 L1923.11 1213.32 L1922.53 1213.32 L1921.94 1213.32 L1921.35 1213.32 L1920.77 1213.32 L1920.18 1213.32 L1919.59 1213.32 L1919.01 1213.32 L1918.42 1213.32 L1917.83 1213.32 L1917.25 1213.32 L1916.66 1213.32 L1916.08 1213.32 L1915.49 1213.32 L1914.9 1213.32 L1914.32 1213.32 L1913.73 1213.32 L1913.14 1213.32 L1912.56 1213.32 L1911.97 1213.32 L1911.38 1213.32 L1910.8 1213.32 L1910.21 1213.32 L1909.63 1213.32 L1909.04 1213.32 L1908.45 1213.32 L1907.87 1213.32 L1907.28 1213.32 L1906.69 1213.32 L1906.11 1213.32 L1905.52 1213.32 L1904.93 1213.32 L1904.35 1213.32 L1903.76 1213.32 L1903.17 1213.32 L1902.59 1213.32 L1902 1213.32 L1901.42 1213.32 L1900.83 1213.32 L1900.24 1213.32 L1899.66 1213.32 L1899.07 1213.32 L1898.48 1213.32 L1897.9 1213.32 L1897.31 1213.32 L1896.72 1213.32 L1896.14 1213.32 L1895.55 1213.32 L1894.96 1213.32 L1894.38 1213.32 L1893.79 1213.32 L1893.21 1213.32 L1892.62 1213.32 L1892.03 1213.32 L1891.45 1213.32 L1890.86 1213.32 L1890.27 1213.32 L1889.69 1213.32 L1889.1 1213.32 L1888.51 1213.32 L1887.93 1213.32 L1887.34 1213.32 L1886.76 1213.32 L1886.17 1213.32 L1885.58 1213.32 L1885 1213.32 L1884.41 1213.32 L1883.82 1213.32 L1883.24 1213.32 L1882.65 1213.32 L1882.06 1213.32 L1881.48 1213.32 L1880.89 1213.32 L1880.3 1213.32 L1879.72 1213.32 L1879.13 1213.32 L1878.55 1213.32 L1877.96 1213.32 L1877.37 1213.32 L1876.79 1213.32 L1876.2 1213.32 L1875.61 1213.32 L1875.03 1213.32 L1874.44 1213.32 L1873.85 1213.32 L1873.27 1213.32 L1872.68 1213.32 L1872.09 1213.32 L1871.51 1213.32 L1870.92 1213.32 L1870.34 1213.32 L1869.75 1213.32 L1869.16 1213.32 L1868.58 1213.32 L1867.99 1213.32 L1867.4 1213.32 L1866.82 1213.32 L1866.23 1213.32 L1865.64 1213.32 L1865.06 1213.32 L1864.47 1213.32 L1863.88 1213.32 L1863.3 1213.32 L1862.71 1213.32 L1862.13 1213.32 L1861.54 1213.32 L1860.95 1213.32 L1860.37 1213.32 L1859.78 1213.32 L1859.19 1213.32 L1858.61 1213.32 L1858.02 1213.32 L1857.43 1213.32 L1856.85 1213.32 L1856.26 1213.32 L1855.68 1213.32 L1855.09 1213.32 L1854.5 1213.32 L1853.92 1213.32 L1853.33 1213.32 L1852.74 1213.32 L1852.16 1213.32 L1851.57 1213.32 L1850.98 1213.32 L1850.4 1213.32 L1849.81 1213.32 L1849.22 1213.32 L1848.64 1213.32 L1848.05 1213.32 L1847.47 1213.32 L1846.88 1213.32 L1846.29 1213.32 L1845.71 1213.32 L1845.12 1213.32 L1844.53 1213.32 L1843.95 1213.32 L1843.36 1213.32 L1842.77 1213.32 L1842.19 1213.32 L1841.6 1213.32 L1841.01 1213.32 L1840.43 1213.32 L1839.84 1213.32 L1839.26 1213.32 L1838.67 1213.32 L1838.08 1213.32 L1837.5 1213.32 L1836.91 1213.32 L1836.32 1213.32 L1835.74 1213.32 L1835.15 1213.32 L1834.56 1213.32 L1833.98 1213.32 L1833.39 1213.32 L1832.81 1213.32 L1832.22 1213.32 L1831.63 1213.32 L1831.05 1213.32 L1830.46 1213.32 L1829.87 1213.32 L1829.29 1213.32 L1828.7 1213.32 L1828.11 1213.32 L1827.53 1213.32 L1826.94 1213.32 L1826.35 1213.32 L1825.77 1213.32 L1825.18 1213.32 L1824.6 1213.32 L1824.01 1213.32 L1823.42 1213.32 L1822.84 1213.32 L1822.25 1213.32 L1821.66 1213.32 L1821.08 1213.32 L1820.49 1213.32 L1819.9 1213.32 L1819.32 1213.32 L1818.73 1213.32 L1818.14 1213.32 L1817.56 1213.32 L1816.97 1213.32 L1816.39 1213.32 L1815.8 1213.32 L1815.21 1213.32 L1814.63 1213.32 L1814.04 1213.32 L1813.45 1213.32 L1812.87 1213.32 L1812.28 1213.32 L1811.69 1213.32 L1811.11 1213.32 L1810.52 1213.32 L1809.94 1213.32 L1809.35 1213.32 L1808.76 1213.32 L1808.18 1213.32 L1807.59 1213.32 L1807 1213.32 L1806.42 1213.32 L1805.83 1213.32 L1805.24 1213.32 L1804.66 1213.32 L1804.07 1213.32 L1803.48 1213.32 L1802.9 1213.32 L1802.31 1213.32 L1801.73 1213.32 L1801.14 1213.32 L1800.55 1213.32 L1799.97 1213.32 L1799.38 1213.32 L1798.79 1213.32 L1798.21 1213.32 L1797.62 1213.32 L1797.03 1213.32 L1796.45 1213.32 L1795.86 1213.32 L1795.27 1213.32 L1794.69 1213.32 L1794.1 1213.32 L1793.52 1213.32 L1792.93 1213.32 L1792.34 1213.32 L1791.76 1213.32 L1791.17 1213.32 L1790.58 1213.32 L1790 1213.32 L1789.41 1213.32 L1788.82 1213.32 L1788.24 1213.32 L1787.65 1213.32 L1787.06 1213.32 L1786.48 1213.32 L1785.89 1213.32 L1785.31 1213.32 L1784.72 1213.32 L1784.13 1213.32 L1783.55 1213.32 L1782.96 1213.32 L1782.37 1213.32 L1781.79 1213.32 L1781.2 1213.32 L1780.61 1213.32 L1780.03 1213.32 L1779.44 1213.32 L1778.86 1213.32 L1778.27 1213.32 L1777.68 1213.32 L1777.1 1213.32 L1776.51 1213.32 L1775.92 1213.32 L1775.34 1213.32 L1774.75 1213.32 L1774.16 1213.32 L1773.58 1213.32 L1772.99 1213.32 L1772.4 1213.32 L1771.82 1213.32 L1771.23 1213.32 L1770.65 1213.32 L1770.06 1213.32 L1769.47 1213.32 L1768.89 1213.32 L1768.3 1213.32 L1767.71 1213.32 L1767.13 1213.32 L1766.54 1213.32 L1765.95 1213.32 L1765.37 1213.32 L1764.78 1213.32 L1764.19 1213.32 L1763.61 1213.32 L1763.02 1213.32 L1762.44 1213.32 L1761.85 1213.32 L1761.26 1213.32 L1760.68 1213.32 L1760.09 1213.32 L1759.5 1213.32 L1758.92 1213.32 L1758.33 1213.32 L1757.74 1213.32 L1757.16 1213.32 L1756.57 1213.32 L1755.99 1213.32 L1755.4 1213.32 L1754.81 1213.32 L1754.23 1213.32 L1753.64 1213.32 L1753.05 1213.32 L1752.47 1213.32 L1751.88 1213.32 L1751.29 1213.32 L1750.71 1213.32 L1750.12 1213.32 L1749.53 1213.32 L1748.95 1213.32 L1748.36 1213.32 L1747.78 1213.32 L1747.19 1213.32 L1746.6 1213.32 L1746.02 1213.32 L1745.43 1213.32 L1744.84 1213.32 L1744.26 1213.32 L1743.67 1213.32 L1743.08 1213.32 L1742.5 1213.32 L1741.91 1213.32 L1741.32 1213.32 L1740.74 1213.32 L1740.15 1213.32 L1739.57 1213.32 L1738.98 1213.32 L1738.39 1213.32 L1737.81 1213.32 L1737.22 1213.32 L1736.63 1213.32 L1736.05 1213.32 L1735.46 1213.32 L1734.87 1213.32 L1734.29 1213.32 L1733.7 1213.32 L1733.11 1213.32 L1732.53 1213.32 L1731.94 1213.32 L1731.36 1213.32 L1730.77 1213.32 L1730.18 1213.32 L1729.6 1213.32 L1729.01 1213.32 L1728.42 1213.32 L1727.84 1213.32 L1727.25 1213.32 L1726.66 1213.32 L1726.08 1213.32 L1725.49 1213.32 L1724.91 1213.32 L1724.32 1213.32 L1723.73 1213.32 L1723.15 1213.32 L1722.56 1213.32 L1721.97 1213.32 L1721.39 1213.32 L1720.8 1213.32 L1720.21 1213.32 L1719.63 1213.32 L1719.04 1213.32 L1718.45 1213.32 L1717.87 1213.32 L1717.28 1213.32 L1716.7 1213.32 L1716.11 1213.32 L1715.52 1213.32 L1714.94 1213.32 L1714.35 1213.32 L1713.76 1213.32 L1713.18 1213.32 L1712.59 1213.32 L1712 1213.32 L1711.42 1213.32 L1710.83 1213.32 L1710.24 1213.32 L1709.66 1213.32 L1709.07 1213.32 L1708.49 1213.32 L1707.9 1213.32 L1707.31 1213.32 L1706.73 1213.32 L1706.14 1213.32 L1705.55 1213.32 L1704.97 1213.32 L1704.38 1213.32 L1703.79 1213.32 L1703.21 1213.32 L1702.62 1213.32 L1702.04 1213.32 L1701.45 1213.32 L1700.86 1213.32 L1700.28 1213.32 L1699.69 1213.32 L1699.1 1213.32 L1698.52 1213.32 L1697.93 1213.32 L1697.34 1213.32 L1696.76 1213.32 L1696.17 1213.32 L1695.58 1213.32 L1695 1213.32 L1694.41 1213.32 L1693.83 1213.32 L1693.24 1213.32 L1692.65 1213.32 L1692.07 1213.32 L1691.48 1213.32 L1690.89 1213.32 L1690.31 1213.32 L1689.72 1213.32 L1689.13 1213.32 L1688.55 1213.32 L1687.96 1213.32 L1687.37 1213.32 L1686.79 1213.32 L1686.2 1213.32 L1685.62 1213.32 L1685.03 1213.32 L1684.44 1213.32 L1683.86 1213.32 L1683.27 1213.32 L1682.68 1213.32 L1682.1 1213.32 L1681.51 1213.32 L1680.92 1213.32 L1680.34 1213.32 L1679.75 1213.32 L1679.17 1213.32 L1678.58 1213.32 L1677.99 1213.32 L1677.41 1213.32 L1676.82 1213.32 L1676.23 1213.32 L1675.65 1213.32 L1675.06 1213.32 L1674.47 1213.32 L1673.89 1213.32 L1673.3 1213.32 L1672.71 1213.32 L1672.13 1213.32 L1671.54 1213.32 L1670.96 1213.32 L1670.37 1213.32 L1669.78 1213.32 L1669.2 1213.32 L1668.61 1213.32 L1668.02 1213.32 L1667.44 1213.32 L1666.85 1213.32 L1666.26 1213.32 L1665.68 1213.32 L1665.09 1213.32 L1664.5 1213.32 L1663.92 1213.32 L1663.33 1213.32 L1662.75 1213.32 L1662.16 1213.32 L1661.57 1213.32 L1660.99 1213.32 L1660.4 1213.32 L1659.81 1213.32 L1659.23 1213.32 L1658.64 1213.32 L1658.05 1213.32 L1657.47 1213.32 L1656.88 1213.32 L1656.29 1213.32 L1655.71 1213.32 L1655.12 1213.32 L1654.54 1213.32 L1653.95 1213.32 L1653.36 1213.32 L1652.78 1213.32 L1652.19 1213.32 L1651.6 1213.32 L1651.02 1213.32 L1650.43 1213.32 L1649.84 1213.32 L1649.26 1213.32 L1648.67 1213.32 L1648.09 1213.32 L1647.5 1213.32 L1646.91 1213.32 L1646.33 1213.32 L1645.74 1213.32 L1645.15 1213.32 L1644.57 1213.32 L1643.98 1213.32 L1643.39 1213.32 L1642.81 1213.32 L1642.22 1213.32 L1641.63 1213.32 L1641.05 1213.32 L1640.46 1213.32 L1639.88 1213.32 L1639.29 1213.32 L1638.7 1213.32 L1638.12 1213.32 L1637.53 1213.32 L1636.94 1213.32 L1636.36 1213.32 L1635.77 1213.32 L1635.18 1213.32 L1634.6 1213.32 L1634.01 1213.32 L1633.42 1213.32 L1632.84 1213.32 L1632.25 1213.32 L1631.67 1213.32 L1631.08 1213.32 L1630.49 1213.32 L1629.91 1213.32 L1629.32 1213.32 L1628.73 1213.32 L1628.15 1213.32 L1627.56 1213.32 L1626.97 1213.32 L1626.39 1213.32 L1625.8 1213.32 L1625.22 1213.32 L1624.63 1213.32 L1624.04 1213.32 L1623.46 1213.32 L1622.87 1213.32 L1622.28 1213.32 L1621.7 1213.32 L1621.11 1213.32 L1620.52 1213.32 L1619.94 1213.32 L1619.35 1213.32 L1618.76 1213.32 L1618.18 1213.32 L1617.59 1213.32 L1617.01 1213.32 L1616.42 1213.32 L1615.83 1213.32 L1615.25 1213.32 L1614.66 1213.32 L1614.07 1213.32 L1613.49 1213.32 L1612.9 1213.32 L1612.31 1213.32 L1611.73 1213.32 L1611.14 1213.32 L1610.55 1213.32 L1609.97 1213.32 L1609.38 1213.32 L1608.8 1213.32 L1608.21 1213.32 L1607.62 1213.32 L1607.04 1213.32 L1606.45 1213.32 L1605.86 1213.32 L1605.28 1213.32 L1604.69 1213.32 L1604.1 1213.32 L1603.52 1213.32 L1602.93 1213.32 L1602.34 1213.32 L1601.76 1213.32 L1601.17 1213.32 L1600.59 1213.32 L1600 1213.32 L1599.41 1213.32 L1598.83 1213.32 L1598.24 1213.32 L1597.65 1213.32 L1597.07 1213.32 L1596.48 1213.32 L1595.89 1213.32 L1595.31 1213.32 L1594.72 1213.32 L1594.14 1213.32 L1593.55 1213.32 L1592.96 1213.32 L1592.38 1213.32 L1591.79 1213.32 L1591.2 1213.32 L1590.62 1213.32 L1590.03 1213.32 L1589.44 1213.32 L1588.86 1213.32 L1588.27 1213.32 L1587.68 1213.32 L1587.1 1213.32 L1586.51 1213.32 L1585.93 1213.32 L1585.34 1213.32 L1584.75 1213.32 L1584.17 1213.32 L1583.58 1213.32 L1582.99 1213.32 L1582.41 1213.32 L1581.82 1213.32 L1581.23 1213.32 L1580.65 1213.32 L1580.06 1213.32 L1579.47 1213.32 L1578.89 1213.32 L1578.3 1213.32 L1577.72 1213.32 L1577.13 1213.32 L1576.54 1213.32 L1575.96 1213.32 L1575.37 1213.32 L1574.78 1213.32 L1574.2 1213.32 L1573.61 1213.32 L1573.02 1213.32 L1572.44 1213.32 L1571.85 1213.32 L1571.27 1213.32 L1570.68 1213.32 L1570.09 1213.32 L1569.51 1213.32 L1568.92 1213.32 L1568.33 1213.32 L1567.75 1213.32 L1567.16 1213.32 L1566.57 1213.32 L1565.99 1213.32 L1565.4 1213.32 L1564.81 1213.32 L1564.23 1213.32 L1563.64 1213.32 L1563.06 1213.32 L1562.47 1213.32 L1561.88 1213.32 L1561.3 1213.32 L1560.71 1213.32 L1560.12 1213.32 L1559.54 1213.32 L1558.95 1213.32 L1558.36 1213.32 L1557.78 1213.32 L1557.19 1213.32 L1556.6 1213.32 L1556.02 1213.32 L1555.43 1213.32 L1554.85 1213.32 L1554.26 1213.32 L1553.67 1213.32 L1553.09 1213.32 L1552.5 1213.32 L1551.91 1213.32 L1551.33 1213.32 L1550.74 1213.32 L1550.15 1213.32 L1549.57 1213.32 L1548.98 1213.32 L1548.4 1213.32 L1547.81 1213.32 L1547.22 1213.32 L1546.64 1213.32 L1546.05 1213.32 L1545.46 1213.32 L1544.88 1213.32 L1544.29 1213.32 L1543.7 1213.32 L1543.12 1213.32 L1542.53 1213.32 L1541.94 1213.32 L1541.36 1213.32 L1540.77 1213.32 L1540.19 1213.32 L1539.6 1213.32 L1539.01 1213.32 L1538.43 1213.32 L1537.84 1213.32 L1537.25 1213.32 L1536.67 1213.32 L1536.08 1213.32 L1535.49 1213.32 L1534.91 1213.32 L1534.32 1213.32 L1533.73 1213.32 L1533.15 1213.32 L1532.56 1213.32 L1531.98 1213.32 L1531.39 1213.32 L1530.8 1213.32 L1530.22 1213.32 L1529.63 1213.32 L1529.04 1213.32 L1528.46 1213.32 L1527.87 1213.32 L1527.28 1213.32 L1526.7 1213.32 L1526.11 1213.32 L1525.52 1213.32 L1524.94 1213.32 L1524.35 1213.32 L1523.77 1213.32 L1523.18 1213.32 L1522.59 1213.32 L1522.01 1213.32 L1521.42 1213.32 L1520.83 1213.32 L1520.25 1213.32 L1519.66 1213.32 L1519.07 1213.32 L1518.49 1213.32 L1517.9 1213.32 L1517.32 1213.32 L1516.73 1213.32 L1516.14 1213.32 L1515.56 1213.32 L1514.97 1213.32 L1514.38 1213.32 L1513.8 1213.32 L1513.21 1213.32 L1512.62 1213.32 L1512.04 1213.32 L1511.45 1213.32 L1510.86 1213.32 L1510.28 1213.32 L1509.69 1213.32 L1509.11 1213.32 L1508.52 1213.32 L1507.93 1213.32 L1507.35 1213.32 L1506.76 1213.32 L1506.17 1213.32 L1505.59 1213.32 L1505 1213.32 L1504.41 1213.32 L1503.83 1213.32 L1503.24 1213.32 L1502.65 1213.32 L1502.07 1213.32 L1501.48 1213.32 L1500.9 1213.32 L1500.31 1213.32 L1499.72 1213.32 L1499.14 1213.32 L1498.55 1213.32 L1497.96 1213.32 L1497.38 1213.32 L1496.79 1213.32 L1496.2 1213.32 L1495.62 1213.32 L1495.03 1213.32 L1494.45 1213.32 L1493.86 1213.32 L1493.27 1213.32 L1492.69 1213.32 L1492.1 1213.32 L1491.51 1213.32 L1490.93 1213.32 L1490.34 1213.32 L1489.75 1213.32 L1489.17 1213.32 L1488.58 1213.32 L1487.99 1213.32 L1487.41 1213.32 L1486.82 1213.32 L1486.24 1213.32 L1485.65 1213.32 L1485.06 1213.32 L1484.48 1213.32 L1483.89 1213.32 L1483.3 1213.32 L1482.72 1213.32 L1482.13 1213.32 L1481.54 1213.32 L1480.96 1213.32 L1480.37 1213.32 L1479.78 1213.32 L1479.2 1213.32 L1478.61 1213.32 L1478.03 1213.32 L1477.44 1213.32 L1476.85 1213.32 L1476.27 1213.32 L1475.68 1213.32 L1475.09 1213.32 L1474.51 1213.32 L1473.92 1213.32 L1473.33 1213.32 L1472.75 1213.32 L1472.16 1213.32 L1471.57 1213.32 L1470.99 1213.32 L1470.4 1213.32 L1469.82 1213.32 L1469.23 1213.32 L1468.64 1213.32 L1468.06 1213.32 L1467.47 1213.32 L1466.88 1213.32 L1466.3 1213.32 L1465.71 1213.32 L1465.12 1213.32 L1464.54 1213.32 L1463.95 1213.32 L1463.37 1213.32 L1462.78 1213.32 L1462.19 1213.32 L1461.61 1213.32 L1461.02 1213.32 L1460.43 1213.32 L1459.85 1213.32 L1459.26 1213.32 L1458.67 1213.32 L1458.09 1213.32 L1457.5 1213.32 L1456.91 1213.32 L1456.33 1213.32 L1455.74 1213.32 L1455.16 1213.32 L1454.57 1213.32 L1453.98 1213.32 L1453.4 1213.32 L1452.81 1213.32 L1452.22 1213.32 L1451.64 1213.32 L1451.05 1213.32 L1450.46 1213.32 L1449.88 1213.32 L1449.29 1213.32 L1448.7 1213.32 L1448.12 1213.32 L1447.53 1213.32 L1446.95 1213.32 L1446.36 1213.32 L1445.77 1213.32 L1445.19 1213.32 L1444.6 1213.32 L1444.01 1213.32 L1443.43 1213.32 L1442.84 1213.32 L1442.25 1213.32 L1441.67 1213.32 L1441.08 1213.32 L1440.5 1213.32 L1439.91 1213.32 L1439.32 1213.32 L1438.74 1213.32 L1438.15 1213.32 L1437.56 1213.32 L1436.98 1213.32 L1436.39 1213.32 L1435.8 1213.32 L1435.22 1213.32 L1434.63 1213.32 L1434.04 1213.32 L1433.46 1213.32 L1432.87 1213.32 L1432.29 1213.32 L1431.7 1213.32 L1431.11 1213.32 L1430.53 1213.32 L1429.94 1213.32 L1429.35 1213.32 L1428.77 1213.32 L1428.18 1213.32 L1427.59 1213.32 L1427.01 1213.32 L1426.42 1213.32 L1425.83 1213.32 L1425.25 1213.32 L1424.66 1213.32 L1424.08 1213.32 L1423.49 1213.32 L1422.9 1213.32 L1422.32 1213.32 L1421.73 1213.32 L1421.14 1213.32 L1420.56 1213.32 L1419.97 1213.32 L1419.38 1213.32 L1418.8 1213.32 L1418.21 1213.32 L1417.63 1213.32 L1417.04 1213.32 L1416.45 1213.32 L1415.87 1213.32 L1415.28 1213.32 L1414.69 1213.32 L1414.11 1213.32 L1413.52 1213.32 L1412.93 1213.32 L1412.35 1213.32 L1411.76 1213.32 L1411.17 1213.32 L1410.59 1213.32 L1410 1213.32 L1409.42 1213.32 L1408.83 1213.32 L1408.24 1213.32 L1407.66 1213.32 L1407.07 1213.32 L1406.48 1213.32 L1405.9 1213.32 L1405.31 1213.32 L1404.72 1213.32 L1404.14 1213.32 L1403.55 1213.32 L1402.96 1213.32 L1402.38 1213.32 L1401.79 1213.32 L1401.21 1213.32 L1400.62 1213.32 L1400.03 1213.32 L1399.45 1213.32 L1398.86 1213.32 L1398.27 1213.32 L1397.69 1213.32 L1397.1 1213.32 L1396.51 1213.32 L1395.93 1213.32 L1395.34 1213.32 L1394.75 1213.32 L1394.17 1213.32 L1393.58 1213.32 L1393 1213.32 L1392.41 1213.32 L1391.82 1213.32 L1391.24 1213.32 L1390.65 1213.32 L1390.06 1213.32 L1389.48 1213.32 L1388.89 1213.32 L1388.3 1213.32 L1387.72 1213.32 L1387.13 1213.32 L1386.55 1213.32 L1385.96 1213.32 L1385.37 1213.32 L1384.79 1213.32 L1384.2 1213.32 L1383.61 1213.32 L1383.03 1213.32 L1382.44 1213.32 L1381.85 1213.32 L1381.27 1213.32 L1380.68 1213.32 L1380.09 1213.32 L1379.51 1213.32 L1378.92 1213.32 L1378.34 1213.32 L1377.75 1213.32 L1377.16 1213.32 L1376.58 1213.32 L1375.99 1213.32 L1375.4 1213.32 L1374.82 1213.32 L1374.23 1213.32 L1373.64 1213.32 L1373.06 1213.32 L1372.47 1213.32 L1371.88 1213.32 L1371.3 1213.32 L1370.71 1213.32 L1370.13 1213.32 L1369.54 1213.32 L1368.95 1213.32 L1368.37 1213.32 L1367.78 1213.32 L1367.19 1213.32 L1366.61 1213.32 L1366.02 1213.32 L1365.43 1213.32 L1364.85 1213.32 L1364.26 1213.32 L1363.68 1213.32 L1363.09 1213.32 L1362.5 1213.32 L1361.92 1213.32 L1361.33 1213.32 L1360.74 1213.32 L1360.16 1213.32 L1359.57 1213.32 L1358.98 1213.32 L1358.4 1213.32 L1357.81 1213.32 L1357.22 1213.32 L1356.64 1213.32 L1356.05 1213.32 L1355.47 1213.32 L1354.88 1213.32 L1354.29 1213.32 L1353.71 1213.32 L1353.12 1213.32 L1352.53 1213.32 L1351.95 1213.32 L1351.36 1213.32 L1350.77 1213.32 L1350.19 1213.32 L1349.6 1213.32 L1349.01 1213.32 L1348.43 1213.32 L1347.84 1213.32 L1347.26 1213.32 L1346.67 1213.32 L1346.08 1213.32 L1345.5 1213.32 L1344.91 1213.32 L1344.32 1213.32 L1343.74 1213.32 L1343.15 1213.32 L1342.56 1213.32 L1341.98 1213.32 L1341.39 1213.32 L1340.8 1213.32 L1340.22 1213.32 L1339.63 1213.32 L1339.05 1213.32 L1338.46 1213.32 L1337.87 1213.32 L1337.29 1213.32 L1336.7 1213.32 L1336.11 1213.32 L1335.53 1213.32 L1334.94 1213.32 L1334.35 1213.32 L1333.77 1213.32 L1333.18 1213.32 L1332.6 1213.32 L1332.01 1213.32 L1331.42 1213.32 L1330.84 1213.32 L1330.25 1213.32 L1329.66 1213.32 L1329.08 1213.32 L1328.49 1213.32 L1327.9 1213.32 L1327.32 1213.32 L1326.73 1213.32 L1326.14 1213.32 L1325.56 1213.32 L1324.97 1213.32 L1324.39 1213.32 L1323.8 1213.32 L1323.21 1213.32 L1322.63 1213.32 L1322.04 1213.32 L1321.45 1213.32 L1320.87 1213.32 L1320.28 1213.32 L1319.69 1213.32 L1319.11 1213.32 L1318.52 1213.32 L1317.93 1213.32 L1317.35 1213.32 L1316.76 1213.32 L1316.18 1213.32 L1315.59 1213.32 L1315 1213.32 L1314.42 1213.32 L1313.83 1213.32 L1313.24 1213.32 L1312.66 1213.32 L1312.07 1213.32 L1311.48 1213.32 L1310.9 1213.32 L1310.31 1213.32 L1309.73 1213.32 L1309.14 1213.32 L1308.55 1213.32 L1307.97 1213.32 L1307.38 1213.32 L1306.79 1213.32 L1306.21 1213.32 L1305.62 1213.32 L1305.03 1213.32 L1304.45 1213.32 L1303.86 1213.32 L1303.27 1213.32 L1302.69 1213.32 L1302.1 1213.32 L1301.52 1213.32 L1300.93 1213.32 L1300.34 1213.32 L1299.76 1213.32 L1299.17 1213.32 L1298.58 1213.32 L1298 1213.32 L1297.41 1213.32 L1296.82 1213.32 L1296.24 1213.32 L1295.65 1213.32 L1295.06 1213.32 L1294.48 1213.32 L1293.89 1213.32 L1293.31 1213.32 L1292.72 1213.32 L1292.13 1213.32 L1291.55 1213.32 L1290.96 1213.32 L1290.37 1213.32 L1289.79 1213.32 L1289.2 1213.32 L1288.61 1213.32 L1288.03 1213.32 L1287.44 1213.32 L1286.86 1213.32 L1286.27 1213.32 L1285.68 1213.32 L1285.1 1213.32 L1284.51 1213.32 L1283.92 1213.32 L1283.34 1213.32 L1282.75 1213.32 L1282.16 1213.32 L1281.58 1213.32 L1280.99 1213.32 L1280.4 1213.32 L1279.82 1213.32 L1279.23 1213.32 L1278.65 1213.32 L1278.06 1213.32 L1277.47 1213.32 L1276.89 1213.32 L1276.3 1213.32 L1275.71 1213.32 L1275.13 1213.32 L1274.54 1213.32 L1273.95 1213.32 L1273.37 1213.32 L1272.78 1213.32 L1272.19 1213.32 L1271.61 1213.32 L1271.02 1213.32 L1270.44 1213.32 L1269.85 1213.32 L1269.26 1213.32 L1268.68 1213.32 L1268.09 1213.32 L1267.5 1213.32 L1266.92 1213.32 L1266.33 1213.32 L1265.74 1213.32 L1265.16 1213.32 L1264.57 1213.32 L1263.98 1213.32 L1263.4 1213.32 L1262.81 1213.32 L1262.23 1213.32 L1261.64 1213.32 L1261.05 1213.32 L1260.47 1213.32 L1259.88 1213.32 L1259.29 1213.32 L1258.71 1213.32 L1258.12 1213.32 L1257.53 1213.32 L1256.95 1213.32 L1256.36 1213.32 L1255.78 1213.32 L1255.19 1213.32 L1254.6 1213.32 L1254.02 1213.32 L1253.43 1213.32 L1252.84 1213.32 L1252.26 1213.32 L1251.67 1213.32 L1251.08 1213.32 L1250.5 1213.32 L1249.91 1213.32 L1249.32 1213.32 L1248.74 1213.32 L1248.15 1213.32 L1247.57 1213.32 L1246.98 1213.32 L1246.39 1213.32 L1245.81 1213.32 L1245.22 1213.32 L1244.63 1213.32 L1244.05 1213.32 L1243.46 1213.32 L1242.87 1213.32 L1242.29 1213.32 L1241.7 1213.32 L1241.11 1213.32 L1240.53 1213.32 L1239.94 1213.32 L1239.36 1213.32 L1238.77 1213.32 L1238.18 1213.32 L1237.6 1213.32 L1237.01 1213.32 L1236.42 1213.32 L1235.84 1213.32 L1235.25 1213.32 L1234.66 1213.32 L1234.08 1213.32 L1233.49 1213.32 L1232.91 1213.32 L1232.32 1213.32 L1231.73 1213.32 L1231.15 1213.32 L1230.56 1213.32 L1229.97 1213.32 L1229.39 1213.32 L1228.8 1213.32 L1228.21 1213.32 L1227.63 1213.32 L1227.04 1213.32 L1226.45 1213.32 L1225.87 1213.32 L1225.28 1213.32 L1224.7 1213.32 L1224.11 1213.32 L1223.52 1213.32 L1222.94 1213.32 L1222.35 1213.32 L1221.76 1213.32 L1221.18 1213.32 L1220.59 1213.32 L1220 1213.32 L1219.42 1213.32 L1218.83 1213.32 L1218.24 1213.32 L1217.66 1213.32 L1217.07 1213.32 L1216.49 1213.32 L1215.9 1213.32 L1215.31 1213.32 L1214.73 1213.32 L1214.14 1213.32 L1213.55 1213.32 L1212.97 1213.32 L1212.38 1213.32 L1211.79 1213.32 L1211.21 1213.32 L1210.62 1213.32 L1210.03 1213.32 L1209.45 1213.32 L1208.86 1213.32 L1208.28 1213.32 L1207.69 1213.32 L1207.1 1213.32 L1206.52 1213.32 L1205.93 1213.32 L1205.34 1213.32 L1204.76 1213.32 L1204.17 1213.32 L1203.58 1213.32 L1203 1213.32 L1202.41 1213.32 L1201.83 1213.32 L1201.24 1213.32 L1200.65 1213.32 L1200.07 1213.32 L1199.48 1213.32 L1198.89 1213.32 L1198.31 1213.32 L1197.72 1213.32 L1197.13 1213.32 L1196.55 1213.32 L1195.96 1213.32 L1195.37 1213.32 L1194.79 1213.32 L1194.2 1213.32 L1193.62 1213.32 L1193.03 1213.32 L1192.44 1213.32 L1191.86 1213.32 L1191.27 1213.32 L1190.68 1213.32 L1190.1 1213.32 L1189.51 1213.32 L1188.92 1213.32 L1188.34 1213.32 L1187.75 1213.32 L1187.16 1213.32 L1186.58 1213.32 L1185.99 1213.32 L1185.41 1213.32 L1184.82 1213.32 L1184.23 1213.32 L1183.65 1213.32 L1183.06 1213.32 L1182.47 1213.32 L1181.89 1213.32 L1181.3 1213.32 L1180.71 1213.32 L1180.13 1213.32 L1179.54 1213.32 L1178.96 1213.32 L1178.37 1213.32 L1177.78 1213.32 L1177.2 1213.32 L1176.61 1213.32 L1176.02 1213.32 L1175.44 1213.32 L1174.85 1213.32 L1174.26 1213.32 L1173.68 1213.32 L1173.09 1213.32 L1172.5 1213.32 L1171.92 1213.32 L1171.33 1213.32 L1170.75 1213.32 L1170.16 1213.32 L1169.57 1213.32 L1168.99 1213.32 L1168.4 1213.32 L1167.81 1213.32 L1167.23 1213.32 L1166.64 1213.32 L1166.05 1213.32 L1165.47 1213.32 L1164.88 1213.32 L1164.29 1213.32 L1163.71 1213.32 L1163.12 1213.32 L1162.54 1213.32 L1161.95 1213.32 L1161.36 1213.32 L1160.78 1213.32 L1160.19 1213.32 L1159.6 1213.32 L1159.02 1213.32 L1158.43 1213.32 L1157.84 1213.32 L1157.26 1213.32 L1156.67 1213.32 L1156.09 1213.32 L1155.5 1213.32 L1154.91 1213.32 L1154.33 1213.32 L1153.74 1213.32 L1153.15 1213.32 L1152.57 1213.32 L1151.98 1213.32 L1151.39 1213.32 L1150.81 1213.32 L1150.22 1213.32 L1149.63 1213.32 L1149.05 1213.32 L1148.46 1213.32 L1147.88 1213.32 L1147.29 1213.32 L1146.7 1213.32 L1146.12 1213.32 L1145.53 1213.32 L1144.94 1213.32 L1144.36 1213.32 L1143.77 1213.32 L1143.18 1213.32 L1142.6 1213.32 L1142.01 1213.32 L1141.42 1213.32 L1140.84 1213.32 L1140.25 1213.32 L1139.67 1213.32 L1139.08 1213.32 L1138.49 1213.32 L1137.91 1213.32 L1137.32 1213.32 L1136.73 1213.32 L1136.15 1213.32 L1135.56 1213.32 L1134.97 1213.32 L1134.39 1213.32 L1133.8 1213.32 L1133.21 1213.32 L1132.63 1213.32 L1132.04 1213.32 L1131.46 1213.32 L1130.87 1213.32 L1130.28 1213.32 L1129.7 1213.32 L1129.11 1213.32 L1128.52 1213.32 L1127.94 1213.32 L1127.35 1213.32 L1126.76 1213.32 L1126.18 1213.32 L1125.59 1213.32 L1125.01 1213.32 L1124.42 1213.32 L1123.83 1213.32 L1123.25 1213.32 L1122.66 1213.32 L1122.07 1213.32 L1121.49 1213.32 L1120.9 1213.32 L1120.31 1213.32 L1119.73 1213.32 L1119.14 1213.32 L1118.55 1213.32 L1117.97 1213.32 L1117.38 1213.32 L1116.8 1213.32 L1116.21 1213.32 L1115.62 1213.32 L1115.04 1213.32 L1114.45 1213.32 L1113.86 1213.32 L1113.28 1213.32 L1112.69 1213.32 L1112.1 1213.32 L1111.52 1213.32 L1110.93 1213.32 L1110.34 1213.32 L1109.76 1213.32 L1109.17 1213.32 L1108.59 1213.32 L1108 1213.32 L1107.41 1213.32 L1106.83 1213.32 L1106.24 1213.32 L1105.65 1213.32 L1105.07 1213.32 L1104.48 1213.32 L1103.89 1213.32 L1103.31 1213.32 L1102.72 1213.32 L1102.14 1213.32 L1101.55 1213.32 L1100.96 1213.32 L1100.38 1213.32 L1099.79 1213.32 L1099.2 1213.32 L1098.62 1213.32 L1098.03 1213.32 L1097.44 1213.32 L1096.86 1213.32 L1096.27 1213.32 L1095.68 1213.32 L1095.1 1213.32 L1094.51 1213.32 L1093.93 1213.32 L1093.34 1213.32 L1092.75 1213.32 L1092.17 1213.32 L1091.58 1213.32 L1090.99 1213.32 L1090.41 1213.32 L1089.82 1213.32 L1089.23 1213.32 L1088.65 1213.32 L1088.06 1213.32 L1087.47 1213.32 L1086.89 1213.32 L1086.3 1213.32 L1085.72 1213.32 L1085.13 1213.32 L1084.54 1213.32 L1083.96 1213.32 L1083.37 1213.32 L1082.78 1213.32 L1082.2 1213.32 L1081.61 1213.32 L1081.02 1213.32 L1080.44 1213.32 L1079.85 1213.32 L1079.26 1213.32 L1078.68 1213.32 L1078.09 1213.32 L1077.51 1213.32 L1076.92 1213.32 L1076.33 1213.32 L1075.75 1213.32 L1075.16 1213.32 L1074.57 1213.32 L1073.99 1213.32 L1073.4 1213.32 L1072.81 1213.32 L1072.23 1213.32 L1071.64 1213.32 L1071.06 1213.32 L1070.47 1213.32 L1069.88 1213.32 L1069.3 1213.32 L1068.71 1213.32 L1068.12 1213.32 L1067.54 1213.32 L1066.95 1213.32 L1066.36 1213.32 L1065.78 1213.32 L1065.19 1213.32 L1064.6 1213.32 L1064.02 1213.32 L1063.43 1213.32 L1062.85 1213.32 L1062.26 1213.32 L1061.67 1213.32 L1061.09 1213.32 L1060.5 1213.32 L1059.91 1213.32 L1059.33 1213.32 L1058.74 1213.32 L1058.15 1213.32 L1057.57 1213.32 L1056.98 1213.32 L1056.39 1213.32 L1055.81 1213.32 L1055.22 1213.32 L1054.64 1213.32 L1054.05 1213.32 L1053.46 1213.32 L1052.88 1213.32 L1052.29 1213.32 L1051.7 1213.32 L1051.12 1213.32 L1050.53 1213.32 L1049.94 1213.32 L1049.36 1213.32 L1048.77 1213.32 L1048.19 1213.32 L1047.6 1213.32 L1047.01 1213.32 L1046.43 1213.32 L1045.84 1213.32 L1045.25 1213.32 L1044.67 1213.32 L1044.08 1213.32 L1043.49 1213.32 L1042.91 1213.32 L1042.32 1213.32 L1041.73 1213.32 L1041.15 1213.32 L1040.56 1213.32 L1039.98 1213.32 L1039.39 1213.32 L1038.8 1213.32 L1038.22 1213.32 L1037.63 1213.32 L1037.04 1213.32 L1036.46 1213.32 L1035.87 1213.32 L1035.28 1213.32 L1034.7 1213.32 L1034.11 1213.32 L1033.52 1213.32 L1032.94 1213.32 L1032.35 1213.32 L1031.77 1213.32 L1031.18 1213.32 L1030.59 1213.32 L1030.01 1213.32 L1029.42 1213.32 L1028.83 1213.32 L1028.25 1213.32 L1027.66 1213.32 L1027.07 1213.32 L1026.49 1213.32 L1025.9 1213.32 L1025.32 1213.32 L1024.73 1213.32 L1024.14 1213.32 L1023.56 1213.32 L1022.97 1213.32 L1022.38 1213.32 L1021.8 1213.32 L1021.21 1213.32 L1020.62 1213.32 L1020.04 1213.32 L1019.45 1213.32 L1018.86 1213.32 L1018.28 1213.32 L1017.69 1213.32 L1017.11 1213.32 L1016.52 1213.32 L1015.93 1213.32 L1015.35 1213.32 L1014.76 1213.32 L1014.17 1213.32 L1013.59 1213.32 L1013 1213.32 L1012.41 1213.32 L1011.83 1213.32 L1011.24 1213.32 L1010.65 1213.32 L1010.07 1213.32 L1009.48 1213.32 L1008.9 1213.32 L1008.31 1213.32 L1007.72 1213.32 L1007.14 1213.32 L1006.55 1213.32 L1005.96 1213.32 L1005.38 1213.32 L1004.79 1213.32 L1004.2 1213.32 L1003.62 1213.32 L1003.03 1213.32 L1002.44 1213.32 L1001.86 1213.32 L1001.27 1213.32 L1000.69 1213.32 L1000.1 1213.32 L999.513 1213.32 L998.926 1213.32 L998.34 1213.32 L997.754 1213.32 L997.167 1213.32 L996.581 1213.32 L995.994 1213.32 L995.408 1213.32 L994.822 1213.32 L994.235 1213.32 L993.649 1213.32 L993.062 1213.32 L992.476 1213.32 L991.889 1213.32 L991.303 1213.32 L990.717 1213.32 L990.13 1213.32 L989.544 1213.32 L988.957 1213.32 L988.371 1213.32 L987.785 1213.32 L987.198 1213.32 L986.612 1213.32 L986.025 1213.32  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.63 986.612,1213.63 987.198,1213.63 987.785,1213.63 988.371,1213.63 988.957,1213.63 989.544,1213.63 990.13,1213.63 990.717,1213.63 991.303,1213.63 991.889,1213.63 992.476,1213.63 993.062,1213.63 993.649,1213.63 994.235,1213.63 994.822,1213.63 995.408,1213.63 995.994,1213.63 996.581,1213.63 997.167,1213.63 997.754,1213.63 998.34,1213.63 998.926,1213.63 999.513,1213.63 1000.1,1213.63 1000.69,1213.63 1001.27,1213.63 1001.86,1213.63 1002.44,1213.63 1003.03,1213.63 1003.62,1213.63 1004.2,1213.63 1004.79,1213.63 1005.38,1213.63 1005.96,1213.63 1006.55,1213.63 1007.14,1213.63 1007.72,1213.63 1008.31,1213.63 1008.9,1213.63 1009.48,1213.63 1010.07,1213.63 1010.65,1213.63 1011.24,1213.63 1011.83,1213.63 1012.41,1213.63 1013,1213.63 1013.59,1213.63 1014.17,1213.63 1014.76,1213.63 1015.35,1213.63 1015.93,1213.63 1016.52,1213.63 1017.11,1213.63 1017.69,1213.63 1018.28,1213.63 1018.86,1213.63 1019.45,1213.63 1020.04,1213.63 1020.62,1213.63 1021.21,1213.63 1021.8,1213.63 1022.38,1213.63 1022.97,1213.63 1023.56,1213.63 1024.14,1213.63 1024.73,1213.63 1025.32,1213.63 1025.9,1213.63 1026.49,1213.63 1027.07,1213.63 1027.66,1213.63 1028.25,1213.63 1028.83,1213.63 1029.42,1213.63 1030.01,1213.63 1030.59,1213.63 1031.18,1213.63 1031.77,1213.63 1032.35,1213.63 1032.94,1213.63 1033.52,1213.63 1034.11,1213.63 1034.7,1213.63 1035.28,1213.63 1035.87,1213.63 1036.46,1213.63 1037.04,1213.63 1037.63,1213.63 1038.22,1213.63 1038.8,1213.63 1039.39,1213.63 1039.98,1213.63 1040.56,1213.63 1041.15,1213.63 1041.73,1213.63 1042.32,1213.63 1042.91,1213.63 1043.49,1213.63 1044.08,1213.63 1044.67,1213.63 1045.25,1213.63 1045.84,1213.63 1046.43,1213.63 1047.01,1213.63 1047.6,1213.63 1048.19,1213.63 1048.77,1213.63 1049.36,1213.63 1049.94,1213.63 1050.53,1213.63 1051.12,1213.63 1051.7,1213.63 1052.29,1213.63 1052.88,1213.63 1053.46,1213.63 1054.05,1213.63 1054.64,1213.63 1055.22,1213.63 1055.81,1213.63 1056.39,1213.63 1056.98,1213.63 1057.57,1213.63 1058.15,1213.63 1058.74,1213.63 1059.33,1213.63 1059.91,1213.63 1060.5,1213.63 1061.09,1213.63 1061.67,1213.63 1062.26,1213.63 1062.85,1213.63 1063.43,1213.63 1064.02,1213.63 1064.6,1213.63 1065.19,1213.63 1065.78,1213.63 1066.36,1213.63 1066.95,1213.63 1067.54,1213.63 1068.12,1213.63 1068.71,1213.63 1069.3,1213.63 1069.88,1213.63 1070.47,1213.63 1071.06,1213.63 1071.64,1213.63 1072.23,1213.63 1072.81,1213.63 1073.4,1213.63 1073.99,1213.63 1074.57,1213.63 1075.16,1213.63 1075.75,1213.63 1076.33,1213.63 1076.92,1213.63 1077.51,1213.63 1078.09,1213.63 1078.68,1213.63 1079.26,1213.63 1079.85,1213.63 1080.44,1213.63 1081.02,1213.63 1081.61,1213.63 1082.2,1213.63 1082.78,1213.63 1083.37,1213.63 1083.96,1213.63 1084.54,1213.63 1085.13,1213.63 1085.72,1213.63 1086.3,1213.63 1086.89,1213.63 1087.47,1213.63 1088.06,1213.63 1088.65,1213.63 1089.23,1213.63 1089.82,1213.63 1090.41,1213.63 1090.99,1213.63 1091.58,1213.63 1092.17,1213.63 1092.75,1213.63 1093.34,1213.63 1093.93,1213.63 1094.51,1213.63 1095.1,1213.63 1095.68,1213.63 1096.27,1213.63 1096.86,1213.63 1097.44,1213.63 1098.03,1213.63 1098.62,1213.63 1099.2,1213.63 1099.79,1213.63 1100.38,1213.63 1100.96,1213.63 1101.55,1213.63 1102.14,1213.63 1102.72,1213.63 1103.31,1213.63 1103.89,1213.63 1104.48,1213.63 1105.07,1213.63 1105.65,1213.63 1106.24,1213.63 1106.83,1213.63 1107.41,1213.63 1108,1213.63 1108.59,1213.63 1109.17,1213.63 1109.76,1213.63 1110.34,1213.63 1110.93,1213.63 1111.52,1213.63 1112.1,1213.63 1112.69,1213.63 1113.28,1213.63 1113.86,1213.63 1114.45,1213.63 1115.04,1213.63 1115.62,1213.63 1116.21,1213.63 1116.8,1213.63 1117.38,1213.63 1117.97,1213.63 1118.55,1213.63 1119.14,1213.63 1119.73,1213.63 1120.31,1213.63 1120.9,1213.63 1121.49,1213.63 1122.07,1213.63 1122.66,1213.63 1123.25,1213.63 1123.83,1213.63 1124.42,1213.63 1125.01,1213.63 1125.59,1213.63 1126.18,1213.63 1126.76,1213.63 1127.35,1213.63 1127.94,1213.63 1128.52,1213.63 1129.11,1213.63 1129.7,1213.63 1130.28,1213.63 1130.87,1213.63 1131.46,1213.63 1132.04,1213.63 1132.63,1213.63 1133.21,1213.63 1133.8,1213.63 1134.39,1213.63 1134.97,1213.63 1135.56,1213.63 1136.15,1213.63 1136.73,1213.63 1137.32,1213.63 1137.91,1213.63 1138.49,1213.63 1139.08,1213.63 1139.67,1213.63 1140.25,1213.63 1140.84,1213.63 1141.42,1213.63 1142.01,1213.63 1142.6,1213.63 1143.18,1213.63 1143.77,1213.63 1144.36,1213.63 1144.94,1213.63 1145.53,1213.63 1146.12,1213.63 1146.7,1213.63 1147.29,1213.63 1147.88,1213.63 1148.46,1213.63 1149.05,1213.63 1149.63,1213.63 1150.22,1213.63 1150.81,1213.63 1151.39,1213.63 1151.98,1213.63 1152.57,1213.63 1153.15,1213.63 1153.74,1213.63 1154.33,1213.63 1154.91,1213.63 1155.5,1213.63 1156.09,1213.63 1156.67,1213.63 1157.26,1213.63 1157.84,1213.63 1158.43,1213.63 1159.02,1213.63 1159.6,1213.63 1160.19,1213.63 1160.78,1213.63 1161.36,1213.63 1161.95,1213.63 1162.54,1213.63 1163.12,1213.63 1163.71,1213.63 1164.29,1213.63 1164.88,1213.63 1165.47,1213.63 1166.05,1213.63 1166.64,1213.63 1167.23,1213.63 1167.81,1213.63 1168.4,1213.63 1168.99,1213.63 1169.57,1213.63 1170.16,1213.63 1170.75,1213.63 1171.33,1213.63 1171.92,1213.63 1172.5,1213.63 1173.09,1213.63 1173.68,1213.63 1174.26,1213.63 1174.85,1213.63 1175.44,1213.63 1176.02,1213.63 1176.61,1213.63 1177.2,1213.63 1177.78,1213.63 1178.37,1213.63 1178.96,1213.63 1179.54,1213.63 1180.13,1213.63 1180.71,1213.63 1181.3,1213.63 1181.89,1213.63 1182.47,1213.63 1183.06,1213.63 1183.65,1213.63 1184.23,1213.63 1184.82,1213.63 1185.41,1213.63 1185.99,1213.63 1186.58,1213.63 1187.16,1213.63 1187.75,1213.63 1188.34,1213.63 1188.92,1213.63 1189.51,1213.63 1190.1,1213.63 1190.68,1213.63 1191.27,1213.63 1191.86,1213.63 1192.44,1213.63 1193.03,1213.63 1193.62,1213.63 1194.2,1213.63 1194.79,1213.63 1195.37,1213.63 1195.96,1213.63 1196.55,1213.63 1197.13,1213.63 1197.72,1213.63 1198.31,1213.63 1198.89,1213.63 1199.48,1213.63 1200.07,1213.63 1200.65,1213.63 1201.24,1213.63 1201.83,1213.63 1202.41,1213.63 1203,1213.63 1203.58,1213.63 1204.17,1213.63 1204.76,1213.63 1205.34,1213.63 1205.93,1213.63 1206.52,1213.63 1207.1,1213.63 1207.69,1213.63 1208.28,1213.63 1208.86,1213.63 1209.45,1213.63 1210.03,1213.63 1210.62,1213.63 1211.21,1213.63 1211.79,1213.63 1212.38,1213.63 1212.97,1213.63 1213.55,1213.63 1214.14,1213.63 1214.73,1213.63 1215.31,1213.63 1215.9,1213.63 1216.49,1213.63 1217.07,1213.63 1217.66,1213.63 1218.24,1213.63 1218.83,1213.63 1219.42,1213.63 1220,1213.63 1220.59,1213.63 1221.18,1213.63 1221.76,1213.63 1222.35,1213.63 1222.94,1213.63 1223.52,1213.63 1224.11,1213.63 1224.7,1213.63 1225.28,1213.63 1225.87,1213.63 1226.45,1213.63 1227.04,1213.63 1227.63,1213.63 1228.21,1213.63 1228.8,1213.63 1229.39,1213.63 1229.97,1213.63 1230.56,1213.63 1231.15,1213.63 1231.73,1213.63 1232.32,1213.63 1232.91,1213.63 1233.49,1213.63 1234.08,1213.63 1234.66,1213.63 1235.25,1213.63 1235.84,1213.63 1236.42,1213.63 1237.01,1213.63 1237.6,1213.63 1238.18,1213.63 1238.77,1213.63 1239.36,1213.63 1239.94,1213.63 1240.53,1213.63 1241.11,1213.63 1241.7,1213.63 1242.29,1213.63 1242.87,1213.63 1243.46,1213.63 1244.05,1213.63 1244.63,1213.63 1245.22,1213.63 1245.81,1213.63 1246.39,1213.63 1246.98,1213.63 1247.57,1213.63 1248.15,1213.63 1248.74,1213.63 1249.32,1213.63 1249.91,1213.63 1250.5,1213.63 1251.08,1213.63 1251.67,1213.63 1252.26,1213.63 1252.84,1213.63 1253.43,1213.63 1254.02,1213.63 1254.6,1213.63 1255.19,1213.63 1255.78,1213.63 1256.36,1213.63 1256.95,1213.63 1257.53,1213.63 1258.12,1213.63 1258.71,1213.63 1259.29,1213.63 1259.88,1213.63 1260.47,1213.63 1261.05,1213.63 1261.64,1213.63 1262.23,1213.63 1262.81,1213.63 1263.4,1213.63 1263.98,1213.63 1264.57,1213.63 1265.16,1213.63 1265.74,1213.63 1266.33,1213.63 1266.92,1213.63 1267.5,1213.63 1268.09,1213.63 1268.68,1213.63 1269.26,1213.63 1269.85,1213.63 1270.44,1213.63 1271.02,1213.63 1271.61,1213.63 1272.19,1213.63 1272.78,1213.63 1273.37,1213.63 1273.95,1213.63 1274.54,1213.63 1275.13,1213.63 1275.71,1213.63 1276.3,1213.63 1276.89,1213.63 1277.47,1213.63 1278.06,1213.63 1278.65,1213.63 1279.23,1213.63 1279.82,1213.63 1280.4,1213.63 1280.99,1213.63 1281.58,1213.63 1282.16,1213.63 1282.75,1213.63 1283.34,1213.63 1283.92,1213.63 1284.51,1213.63 1285.1,1213.63 1285.68,1213.63 1286.27,1213.63 1286.86,1213.63 1287.44,1213.63 1288.03,1213.63 1288.61,1213.63 1289.2,1213.63 1289.79,1213.63 1290.37,1213.63 1290.96,1213.63 1291.55,1213.63 1292.13,1213.63 1292.72,1213.63 1293.31,1213.63 1293.89,1213.63 1294.48,1213.63 1295.06,1213.63 1295.65,1213.63 1296.24,1213.63 1296.82,1213.63 1297.41,1213.63 1298,1213.63 1298.58,1213.63 1299.17,1213.63 1299.76,1213.63 1300.34,1213.63 1300.93,1213.63 1301.52,1213.63 1302.1,1213.63 1302.69,1213.63 1303.27,1213.63 1303.86,1213.63 1304.45,1213.63 1305.03,1213.63 1305.62,1213.63 1306.21,1213.63 1306.79,1213.63 1307.38,1213.63 1307.97,1213.63 1308.55,1213.63 1309.14,1213.63 1309.73,1213.63 1310.31,1213.63 1310.9,1213.63 1311.48,1213.63 1312.07,1213.63 1312.66,1213.63 1313.24,1213.63 1313.83,1213.63 1314.42,1213.63 1315,1213.63 1315.59,1213.63 1316.18,1213.63 1316.76,1213.63 1317.35,1213.63 1317.93,1213.63 1318.52,1213.63 1319.11,1213.63 1319.69,1213.63 1320.28,1213.63 1320.87,1213.63 1321.45,1213.63 1322.04,1213.63 1322.63,1213.63 1323.21,1213.63 1323.8,1213.63 1324.39,1213.63 1324.97,1213.63 1325.56,1213.63 1326.14,1213.63 1326.73,1213.63 1327.32,1213.63 1327.9,1213.63 1328.49,1213.63 1329.08,1213.63 1329.66,1213.63 1330.25,1213.63 1330.84,1213.63 1331.42,1213.63 1332.01,1213.63 1332.6,1213.63 1333.18,1213.63 1333.77,1213.63 1334.35,1213.63 1334.94,1213.63 1335.53,1213.63 1336.11,1213.63 1336.7,1213.63 1337.29,1213.63 1337.87,1213.63 1338.46,1213.63 1339.05,1213.63 1339.63,1213.63 1340.22,1213.63 1340.8,1213.63 1341.39,1213.63 1341.98,1213.63 1342.56,1213.63 1343.15,1213.63 1343.74,1213.63 1344.32,1213.63 1344.91,1213.63 1345.5,1213.63 1346.08,1213.63 1346.67,1213.63 1347.26,1213.63 1347.84,1213.63 1348.43,1213.63 1349.01,1213.63 1349.6,1213.63 1350.19,1213.63 1350.77,1213.63 1351.36,1213.63 1351.95,1213.63 1352.53,1213.63 1353.12,1213.63 1353.71,1213.63 1354.29,1213.63 1354.88,1213.63 1355.47,1213.63 1356.05,1213.63 1356.64,1213.63 1357.22,1213.63 1357.81,1213.63 1358.4,1213.63 1358.98,1213.63 1359.57,1213.63 1360.16,1213.63 1360.74,1213.63 1361.33,1213.63 1361.92,1213.63 1362.5,1213.63 1363.09,1213.63 1363.68,1213.63 1364.26,1213.63 1364.85,1213.63 1365.43,1213.63 1366.02,1213.63 1366.61,1213.63 1367.19,1213.63 1367.78,1213.63 1368.37,1213.63 1368.95,1213.63 1369.54,1213.63 1370.13,1213.63 1370.71,1213.63 1371.3,1213.63 1371.88,1213.63 1372.47,1213.63 1373.06,1213.63 1373.64,1213.63 1374.23,1213.63 1374.82,1213.63 1375.4,1213.63 1375.99,1213.63 1376.58,1213.63 1377.16,1213.63 1377.75,1213.63 1378.34,1213.63 1378.92,1213.63 1379.51,1213.63 1380.09,1213.63 1380.68,1213.63 1381.27,1213.63 1381.85,1213.63 1382.44,1213.63 1383.03,1213.63 1383.61,1213.63 1384.2,1213.63 1384.79,1213.63 1385.37,1213.63 1385.96,1213.63 1386.55,1213.63 1387.13,1213.63 1387.72,1213.63 1388.3,1213.63 1388.89,1213.63 1389.48,1213.63 1390.06,1213.63 1390.65,1213.63 1391.24,1213.63 1391.82,1213.63 1392.41,1213.63 1393,1213.63 1393.58,1213.63 1394.17,1213.63 1394.75,1213.63 1395.34,1213.63 1395.93,1213.63 1396.51,1213.63 1397.1,1213.63 1397.69,1213.63 1398.27,1213.63 1398.86,1213.63 1399.45,1213.63 1400.03,1213.63 1400.62,1213.63 1401.21,1213.63 1401.79,1213.63 1402.38,1213.63 1402.96,1213.63 1403.55,1213.63 1404.14,1213.63 1404.72,1213.63 1405.31,1213.63 1405.9,1213.63 1406.48,1213.63 1407.07,1213.63 1407.66,1213.63 1408.24,1213.63 1408.83,1213.63 1409.42,1213.63 1410,1213.63 1410.59,1213.63 1411.17,1213.63 1411.76,1213.63 1412.35,1213.63 1412.93,1213.63 1413.52,1213.63 1414.11,1213.63 1414.69,1213.63 1415.28,1213.63 1415.87,1213.63 1416.45,1213.63 1417.04,1213.63 1417.63,1213.63 1418.21,1213.63 1418.8,1213.63 1419.38,1213.63 1419.97,1213.63 1420.56,1213.63 1421.14,1213.63 1421.73,1213.63 1422.32,1213.63 1422.9,1213.63 1423.49,1213.63 1424.08,1213.63 1424.66,1213.63 1425.25,1213.63 1425.83,1213.63 1426.42,1213.63 1427.01,1213.63 1427.59,1213.63 1428.18,1213.63 1428.77,1213.63 1429.35,1213.63 1429.94,1213.63 1430.53,1213.63 1431.11,1213.63 1431.7,1213.63 1432.29,1213.63 1432.87,1213.63 1433.46,1213.63 1434.04,1213.63 1434.63,1213.63 1435.22,1213.63 1435.8,1213.63 1436.39,1213.63 1436.98,1213.63 1437.56,1213.63 1438.15,1213.63 1438.74,1213.63 1439.32,1213.63 1439.91,1213.63 1440.5,1213.63 1441.08,1213.63 1441.67,1213.63 1442.25,1213.63 1442.84,1213.63 1443.43,1213.63 1444.01,1213.63 1444.6,1213.63 1445.19,1213.63 1445.77,1213.63 1446.36,1213.63 1446.95,1213.63 1447.53,1213.63 1448.12,1213.63 1448.7,1213.63 1449.29,1213.63 1449.88,1213.63 1450.46,1213.63 1451.05,1213.63 1451.64,1213.63 1452.22,1213.63 1452.81,1213.63 1453.4,1213.63 1453.98,1213.63 1454.57,1213.63 1455.16,1213.63 1455.74,1213.63 1456.33,1213.63 1456.91,1213.63 1457.5,1213.63 1458.09,1213.63 1458.67,1213.63 1459.26,1213.63 1459.85,1213.63 1460.43,1213.63 1461.02,1213.63 1461.61,1213.63 1462.19,1213.63 1462.78,1213.63 1463.37,1213.63 1463.95,1213.63 1464.54,1213.63 1465.12,1213.63 1465.71,1213.63 1466.3,1213.63 1466.88,1213.63 1467.47,1213.63 1468.06,1213.63 1468.64,1213.63 1469.23,1213.63 1469.82,1213.63 1470.4,1213.63 1470.99,1213.63 1471.57,1213.63 1472.16,1213.63 1472.75,1213.63 1473.33,1213.63 1473.92,1213.63 1474.51,1213.63 1475.09,1213.63 1475.68,1213.63 1476.27,1213.63 1476.85,1213.63 1477.44,1213.63 1478.03,1213.63 1478.61,1213.63 1479.2,1213.63 1479.78,1213.63 1480.37,1213.63 1480.96,1213.63 1481.54,1213.63 1482.13,1213.63 1482.72,1213.63 1483.3,1213.63 1483.89,1213.63 1484.48,1213.63 1485.06,1213.63 1485.65,1213.63 1486.24,1213.63 1486.82,1213.63 1487.41,1213.63 1487.99,1213.63 1488.58,1213.63 1489.17,1213.63 1489.75,1213.63 1490.34,1213.63 1490.93,1213.63 1491.51,1213.63 1492.1,1213.63 1492.69,1213.63 1493.27,1213.63 1493.86,1213.63 1494.45,1213.63 1495.03,1213.63 1495.62,1213.63 1496.2,1213.63 1496.79,1213.63 1497.38,1213.63 1497.96,1213.63 1498.55,1213.63 1499.14,1213.63 1499.72,1213.63 1500.31,1213.63 1500.9,1213.63 1501.48,1213.63 1502.07,1213.63 1502.65,1213.63 1503.24,1213.63 1503.83,1213.63 1504.41,1213.63 1505,1213.63 1505.59,1213.63 1506.17,1213.63 1506.76,1213.63 1507.35,1213.63 1507.93,1213.63 1508.52,1213.63 1509.11,1213.63 1509.69,1213.63 1510.28,1213.63 1510.86,1213.63 1511.45,1213.63 1512.04,1213.63 1512.62,1213.63 1513.21,1213.63 1513.8,1213.63 1514.38,1213.63 1514.97,1213.63 1515.56,1213.63 1516.14,1213.63 1516.73,1213.63 1517.32,1213.63 1517.9,1213.63 1518.49,1213.63 1519.07,1213.63 1519.66,1213.63 1520.25,1213.63 1520.83,1213.63 1521.42,1213.63 1522.01,1213.63 1522.59,1213.63 1523.18,1213.63 1523.77,1213.63 1524.35,1213.63 1524.94,1213.63 1525.52,1213.63 1526.11,1213.63 1526.7,1213.63 1527.28,1213.63 1527.87,1213.63 1528.46,1213.63 1529.04,1213.63 1529.63,1213.63 1530.22,1213.63 1530.8,1213.63 1531.39,1213.63 1531.98,1213.63 1532.56,1213.63 1533.15,1213.63 1533.73,1213.63 1534.32,1213.63 1534.91,1213.63 1535.49,1213.63 1536.08,1213.63 1536.67,1213.63 1537.25,1213.63 1537.84,1213.63 1538.43,1213.63 1539.01,1213.63 1539.6,1213.63 1540.19,1213.63 1540.77,1213.63 1541.36,1213.63 1541.94,1213.63 1542.53,1213.63 1543.12,1213.63 1543.7,1213.63 1544.29,1213.63 1544.88,1213.63 1545.46,1213.63 1546.05,1213.63 1546.64,1213.63 1547.22,1213.63 1547.81,1213.63 1548.4,1213.63 1548.98,1213.63 1549.57,1213.63 1550.15,1213.63 1550.74,1213.63 1551.33,1213.63 1551.91,1213.63 1552.5,1213.63 1553.09,1213.63 1553.67,1213.63 1554.26,1213.63 1554.85,1213.63 1555.43,1213.63 1556.02,1213.63 1556.6,1213.63 1557.19,1213.63 1557.78,1213.63 1558.36,1213.63 1558.95,1213.63 1559.54,1213.63 1560.12,1213.63 1560.71,1213.63 1561.3,1213.63 1561.88,1213.63 1562.47,1213.63 1563.06,1213.63 1563.64,1213.63 1564.23,1213.63 1564.81,1213.63 1565.4,1213.63 1565.99,1213.63 1566.57,1213.63 1567.16,1213.63 1567.75,1213.63 1568.33,1213.63 1568.92,1213.63 1569.51,1213.63 1570.09,1213.63 1570.68,1213.63 1571.27,1213.63 1571.85,1213.63 1572.44,1213.63 1573.02,1213.63 1573.61,1213.63 1574.2,1213.63 1574.78,1213.63 1575.37,1213.63 1575.96,1213.63 1576.54,1213.63 1577.13,1213.63 1577.72,1213.63 1578.3,1213.63 1578.89,1213.63 1579.47,1213.63 1580.06,1213.63 1580.65,1213.63 1581.23,1213.63 1581.82,1213.63 1582.41,1213.63 1582.99,1213.63 1583.58,1213.63 1584.17,1213.63 1584.75,1213.63 1585.34,1213.63 1585.93,1213.63 1586.51,1213.63 1587.1,1213.63 1587.68,1213.63 1588.27,1213.63 1588.86,1213.63 1589.44,1213.63 1590.03,1213.63 1590.62,1213.63 1591.2,1213.63 1591.79,1213.63 1592.38,1213.63 1592.96,1213.63 1593.55,1213.63 1594.14,1213.63 1594.72,1213.63 1595.31,1213.63 1595.89,1213.63 1596.48,1213.63 1597.07,1213.63 1597.65,1213.63 1598.24,1213.63 1598.83,1213.63 1599.41,1213.63 1600,1213.63 1600.59,1213.63 1601.17,1213.63 1601.76,1213.63 1602.34,1213.63 1602.93,1213.63 1603.52,1213.63 1604.1,1213.63 1604.69,1213.63 1605.28,1213.63 1605.86,1213.63 1606.45,1213.63 1607.04,1213.63 1607.62,1213.63 1608.21,1213.63 1608.8,1213.63 1609.38,1213.63 1609.97,1213.63 1610.55,1213.63 1611.14,1213.63 1611.73,1213.63 1612.31,1213.63 1612.9,1213.63 1613.49,1213.63 1614.07,1213.63 1614.66,1213.63 1615.25,1213.63 1615.83,1213.63 1616.42,1213.63 1617.01,1213.63 1617.59,1213.63 1618.18,1213.63 1618.76,1213.63 1619.35,1213.63 1619.94,1213.63 1620.52,1213.63 1621.11,1213.63 1621.7,1213.63 1622.28,1213.63 1622.87,1213.63 1623.46,1213.63 1624.04,1213.63 1624.63,1213.63 1625.22,1213.63 1625.8,1213.63 1626.39,1213.63 1626.97,1213.63 1627.56,1213.63 1628.15,1213.63 1628.73,1213.63 1629.32,1213.63 1629.91,1213.63 1630.49,1213.63 1631.08,1213.63 1631.67,1213.63 1632.25,1213.63 1632.84,1213.63 1633.42,1213.63 1634.01,1213.63 1634.6,1213.63 1635.18,1213.63 1635.77,1213.63 1636.36,1213.63 1636.94,1213.63 1637.53,1213.63 1638.12,1213.63 1638.7,1213.63 1639.29,1213.63 1639.88,1213.63 1640.46,1213.63 1641.05,1213.63 1641.63,1213.63 1642.22,1213.63 1642.81,1213.63 1643.39,1213.63 1643.98,1213.63 1644.57,1213.63 1645.15,1213.63 1645.74,1213.63 1646.33,1213.63 1646.91,1213.63 1647.5,1213.63 1648.09,1213.63 1648.67,1213.63 1649.26,1213.63 1649.84,1213.63 1650.43,1213.63 1651.02,1213.63 1651.6,1213.63 1652.19,1213.63 1652.78,1213.63 1653.36,1213.63 1653.95,1213.63 1654.54,1213.63 1655.12,1213.63 1655.71,1213.63 1656.29,1213.63 1656.88,1213.63 1657.47,1213.63 1658.05,1213.63 1658.64,1213.63 1659.23,1213.63 1659.81,1213.63 1660.4,1213.63 1660.99,1213.63 1661.57,1213.63 1662.16,1213.63 1662.75,1213.63 1663.33,1213.63 1663.92,1213.63 1664.5,1213.63 1665.09,1213.63 1665.68,1213.63 1666.26,1213.63 1666.85,1213.63 1667.44,1213.63 1668.02,1213.63 1668.61,1213.63 1669.2,1213.63 1669.78,1213.63 1670.37,1213.63 1670.96,1213.63 1671.54,1213.63 1672.13,1213.63 1672.71,1213.63 1673.3,1213.63 1673.89,1213.63 1674.47,1213.63 1675.06,1213.63 1675.65,1213.63 1676.23,1213.63 1676.82,1213.63 1677.41,1213.63 1677.99,1213.63 1678.58,1213.63 1679.17,1213.63 1679.75,1213.63 1680.34,1213.63 1680.92,1213.63 1681.51,1213.63 1682.1,1213.63 1682.68,1213.63 1683.27,1213.63 1683.86,1213.63 1684.44,1213.63 1685.03,1213.63 1685.62,1213.63 1686.2,1213.63 1686.79,1213.63 1687.37,1213.63 1687.96,1213.63 1688.55,1213.63 1689.13,1213.63 1689.72,1213.63 1690.31,1213.63 1690.89,1213.63 1691.48,1213.63 1692.07,1213.63 1692.65,1213.63 1693.24,1213.63 1693.83,1213.63 1694.41,1213.63 1695,1213.63 1695.58,1213.63 1696.17,1213.63 1696.76,1213.63 1697.34,1213.63 1697.93,1213.63 1698.52,1213.63 1699.1,1213.63 1699.69,1213.63 1700.28,1213.63 1700.86,1213.63 1701.45,1213.63 1702.04,1213.63 1702.62,1213.63 1703.21,1213.63 1703.79,1213.63 1704.38,1213.63 1704.97,1213.63 1705.55,1213.63 1706.14,1213.63 1706.73,1213.63 1707.31,1213.63 1707.9,1213.63 1708.49,1213.63 1709.07,1213.63 1709.66,1213.63 1710.24,1213.63 1710.83,1213.63 1711.42,1213.63 1712,1213.63 1712.59,1213.63 1713.18,1213.63 1713.76,1213.63 1714.35,1213.63 1714.94,1213.63 1715.52,1213.63 1716.11,1213.63 1716.7,1213.63 1717.28,1213.63 1717.87,1213.63 1718.45,1213.63 1719.04,1213.63 1719.63,1213.63 1720.21,1213.63 1720.8,1213.63 1721.39,1213.63 1721.97,1213.63 1722.56,1213.63 1723.15,1213.63 1723.73,1213.63 1724.32,1213.63 1724.91,1213.63 1725.49,1213.63 1726.08,1213.63 1726.66,1213.63 1727.25,1213.63 1727.84,1213.63 1728.42,1213.63 1729.01,1213.63 1729.6,1213.63 1730.18,1213.63 1730.77,1213.63 1731.36,1213.63 1731.94,1213.63 1732.53,1213.63 1733.11,1213.63 1733.7,1213.63 1734.29,1213.63 1734.87,1213.63 1735.46,1213.63 1736.05,1213.63 1736.63,1213.63 1737.22,1213.63 1737.81,1213.63 1738.39,1213.63 1738.98,1213.63 1739.57,1213.63 1740.15,1213.63 1740.74,1213.63 1741.32,1213.63 1741.91,1213.63 1742.5,1213.63 1743.08,1213.63 1743.67,1213.63 1744.26,1213.63 1744.84,1213.63 1745.43,1213.63 1746.02,1213.63 1746.6,1213.63 1747.19,1213.63 1747.78,1213.63 1748.36,1213.63 1748.95,1213.63 1749.53,1213.63 1750.12,1213.63 1750.71,1213.63 1751.29,1213.63 1751.88,1213.63 1752.47,1213.63 1753.05,1213.63 1753.64,1213.63 1754.23,1213.63 1754.81,1213.63 1755.4,1213.63 1755.99,1213.63 1756.57,1213.63 1757.16,1213.63 1757.74,1213.63 1758.33,1213.63 1758.92,1213.63 1759.5,1213.63 1760.09,1213.63 1760.68,1213.63 1761.26,1213.63 1761.85,1213.63 1762.44,1213.63 1763.02,1213.63 1763.61,1213.63 1764.19,1213.63 1764.78,1213.63 1765.37,1213.63 1765.95,1213.63 1766.54,1213.63 1767.13,1213.63 1767.71,1213.63 1768.3,1213.63 1768.89,1213.63 1769.47,1213.63 1770.06,1213.63 1770.65,1213.63 1771.23,1213.63 1771.82,1213.63 1772.4,1213.63 1772.99,1213.63 1773.58,1213.63 1774.16,1213.63 1774.75,1213.63 1775.34,1213.63 1775.92,1213.63 1776.51,1213.63 1777.1,1213.63 1777.68,1213.63 1778.27,1213.63 1778.86,1213.63 1779.44,1213.63 1780.03,1213.63 1780.61,1213.63 1781.2,1213.63 1781.79,1213.63 1782.37,1213.63 1782.96,1213.63 1783.55,1213.63 1784.13,1213.63 1784.72,1213.63 1785.31,1213.63 1785.89,1213.63 1786.48,1213.63 1787.06,1213.63 1787.65,1213.63 1788.24,1213.63 1788.82,1213.63 1789.41,1213.63 1790,1213.63 1790.58,1213.63 1791.17,1213.63 1791.76,1213.63 1792.34,1213.63 1792.93,1213.63 1793.52,1213.63 1794.1,1213.63 1794.69,1213.63 1795.27,1213.63 1795.86,1213.63 1796.45,1213.63 1797.03,1213.63 1797.62,1213.63 1798.21,1213.63 1798.79,1213.63 1799.38,1213.63 1799.97,1213.63 1800.55,1213.63 1801.14,1213.63 1801.73,1213.63 1802.31,1213.63 1802.9,1213.63 1803.48,1213.63 1804.07,1213.63 1804.66,1213.63 1805.24,1213.63 1805.83,1213.63 1806.42,1213.63 1807,1213.63 1807.59,1213.63 1808.18,1213.63 1808.76,1213.63 1809.35,1213.63 1809.94,1213.63 1810.52,1213.63 1811.11,1213.63 1811.69,1213.63 1812.28,1213.63 1812.87,1213.63 1813.45,1213.63 1814.04,1213.63 1814.63,1213.63 1815.21,1213.63 1815.8,1213.63 1816.39,1213.63 1816.97,1213.63 1817.56,1213.63 1818.14,1213.63 1818.73,1213.63 1819.32,1213.63 1819.9,1213.63 1820.49,1213.63 1821.08,1213.63 1821.66,1213.63 1822.25,1213.63 1822.84,1213.63 1823.42,1213.63 1824.01,1213.63 1824.6,1213.63 1825.18,1213.63 1825.77,1213.63 1826.35,1213.63 1826.94,1213.63 1827.53,1213.63 1828.11,1213.63 1828.7,1213.63 1829.29,1213.63 1829.87,1213.63 1830.46,1213.63 1831.05,1213.63 1831.63,1213.63 1832.22,1213.63 1832.81,1213.63 1833.39,1213.63 1833.98,1213.63 1834.56,1213.63 1835.15,1213.63 1835.74,1213.63 1836.32,1213.63 1836.91,1213.63 1837.5,1213.63 1838.08,1213.63 1838.67,1213.63 1839.26,1213.63 1839.84,1213.63 1840.43,1213.63 1841.01,1213.63 1841.6,1213.63 1842.19,1213.63 1842.77,1213.63 1843.36,1213.63 1843.95,1213.63 1844.53,1213.63 1845.12,1213.63 1845.71,1213.63 1846.29,1213.63 1846.88,1213.63 1847.47,1213.63 1848.05,1213.63 1848.64,1213.63 1849.22,1213.63 1849.81,1213.63 1850.4,1213.63 1850.98,1213.63 1851.57,1213.63 1852.16,1213.63 1852.74,1213.63 1853.33,1213.63 1853.92,1213.63 1854.5,1213.63 1855.09,1213.63 1855.68,1213.63 1856.26,1213.63 1856.85,1213.63 1857.43,1213.63 1858.02,1213.63 1858.61,1213.63 1859.19,1213.63 1859.78,1213.63 1860.37,1213.63 1860.95,1213.63 1861.54,1213.63 1862.13,1213.63 1862.71,1213.63 1863.3,1213.63 1863.88,1213.63 1864.47,1213.63 1865.06,1213.63 1865.64,1213.63 1866.23,1213.63 1866.82,1213.63 1867.4,1213.63 1867.99,1213.63 1868.58,1213.63 1869.16,1213.63 1869.75,1213.63 1870.34,1213.63 1870.92,1213.63 1871.51,1213.63 1872.09,1213.63 1872.68,1213.63 1873.27,1213.63 1873.85,1213.63 1874.44,1213.63 1875.03,1213.63 1875.61,1213.63 1876.2,1213.63 1876.79,1213.63 1877.37,1213.63 1877.96,1213.63 1878.55,1213.63 1879.13,1213.63 1879.72,1213.63 1880.3,1213.63 1880.89,1213.63 1881.48,1213.63 1882.06,1213.63 1882.65,1213.63 1883.24,1213.63 1883.82,1213.63 1884.41,1213.63 1885,1213.63 1885.58,1213.63 1886.17,1213.63 1886.76,1213.63 1887.34,1213.63 1887.93,1213.63 1888.51,1213.63 1889.1,1213.63 1889.69,1213.63 1890.27,1213.63 1890.86,1213.63 1891.45,1213.63 1892.03,1213.63 1892.62,1213.63 1893.21,1213.63 1893.79,1213.63 1894.38,1213.63 1894.96,1213.63 1895.55,1213.63 1896.14,1213.63 1896.72,1213.63 1897.31,1213.63 1897.9,1213.63 1898.48,1213.63 1899.07,1213.63 1899.66,1213.63 1900.24,1213.63 1900.83,1213.63 1901.42,1213.63 1902,1213.63 1902.59,1213.63 1903.17,1213.63 1903.76,1213.63 1904.35,1213.63 1904.93,1213.63 1905.52,1213.63 1906.11,1213.63 1906.69,1213.63 1907.28,1213.63 1907.87,1213.63 1908.45,1213.63 1909.04,1213.63 1909.63,1213.63 1910.21,1213.63 1910.8,1213.63 1911.38,1213.63 1911.97,1213.63 1912.56,1213.63 1913.14,1213.63 1913.73,1213.63 1914.32,1213.63 1914.9,1213.63 1915.49,1213.63 1916.08,1213.63 1916.66,1213.63 1917.25,1213.63 1917.83,1213.63 1918.42,1213.63 1919.01,1213.63 1919.59,1213.63 1920.18,1213.63 1920.77,1213.63 1921.35,1213.63 1921.94,1213.63 1922.53,1213.63 1923.11,1213.63 1923.7,1213.63 1924.29,1213.63 1924.87,1213.63 1925.46,1213.63 1926.04,1213.63 1926.63,1213.63 1927.22,1213.63 1927.8,1213.63 1928.39,1213.63 1928.98,1213.63 1929.56,1213.63 1930.15,1213.63 1930.74,1213.63 1931.32,1213.63 1931.91,1213.63 1932.5,1213.63 1933.08,1213.63 1933.67,1213.63 1934.25,1213.63 1934.84,1213.63 1935.43,1213.63 1936.01,1213.63 1936.6,1213.63 1937.19,1213.63 1937.77,1213.63 1938.36,1213.63 1938.95,1213.63 1939.53,1213.63 1940.12,1213.63 1940.71,1213.63 1941.29,1213.63 1941.88,1213.63 1942.46,1213.63 1943.05,1213.63 1943.64,1213.63 1944.22,1213.63 1944.81,1213.63 1945.4,1213.63 1945.98,1213.63 1946.57,1213.63 1947.16,1213.63 1947.74,1213.63 1948.33,1213.63 1948.91,1213.63 1949.5,1213.63 1950.09,1213.63 1950.67,1213.63 1951.26,1213.63 1951.85,1213.63 1952.43,1213.63 1953.02,1213.63 1953.61,1213.63 1954.19,1213.63 1954.78,1213.63 1955.37,1213.63 1955.95,1213.63 1956.54,1213.63 1957.12,1213.63 1957.71,1213.63 1958.3,1213.63 1958.88,1213.63 1959.47,1213.63 1960.06,1213.63 1960.64,1213.63 1961.23,1213.63 1961.82,1213.63 1962.4,1213.63 1962.99,1213.63 1963.58,1213.63 1964.16,1213.63 1964.75,1213.63 1965.33,1213.63 1965.92,1213.63 1966.51,1213.63 1967.09,1213.63 1967.68,1213.63 1968.27,1213.63 1968.85,1213.63 1969.44,1213.63 1970.03,1213.63 1970.61,1213.63 1971.2,1213.63 1971.78,1213.63 1972.37,1213.63 1972.96,1213.63 1973.54,1213.63 1974.13,1213.63 1974.72,1213.63 1975.3,1213.63 1975.89,1213.63 1976.48,1213.63 1977.06,1213.63 1977.65,1213.63 1978.24,1213.63 1978.82,1213.63 1979.41,1213.63 1979.99,1213.63 1980.58,1213.63 1981.17,1213.63 1981.75,1213.63 1982.34,1213.63 1982.93,1213.63 1983.51,1213.63 1984.1,1213.63 1984.69,1213.63 1985.27,1213.63 1985.86,1213.63 1986.45,1213.63 1987.03,1213.63 1987.62,1213.63 1988.2,1213.63 1988.79,1213.63 1989.38,1213.63 1989.96,1213.63 1990.55,1213.63 1991.14,1213.63 1991.72,1213.63 1992.31,1213.63 1992.9,1213.63 1993.48,1213.63 1994.07,1213.63 1994.65,1213.63 1995.24,1213.63 1995.83,1213.63 1996.41,1213.63 1997,1213.63 1997.59,1213.63 1998.17,1213.63 1998.76,1213.63 1999.35,1213.63 1999.93,1213.63 2000.52,1213.63 2001.11,1213.63 2001.69,1213.63 2002.28,1213.63 2002.86,1213.63 2003.45,1213.63 2004.04,1213.63 2004.62,1213.63 2005.21,1213.63 2005.8,1213.63 2006.38,1213.63 2006.97,1213.63 2007.56,1213.63 2008.14,1213.63 2008.73,1213.63 2009.32,1213.63 2009.9,1213.63 2010.49,1213.63 2011.07,1213.63 2011.66,1213.63 2012.25,1213.63 2012.83,1213.63 2013.42,1213.63 2014.01,1213.63 2014.59,1213.63 2015.18,1213.63 2015.77,1213.63 2016.35,1213.63 2016.94,1213.63 2017.53,1213.63 2018.11,1213.63 2018.7,1213.63 2019.28,1213.63 2019.87,1213.63 2020.46,1213.63 2021.04,1213.63 2021.63,1213.63 2022.22,1213.63 2022.8,1213.63 2023.39,1213.63 2023.98,1213.63 2024.56,1213.63 2025.15,1213.63 2025.73,1213.63 2026.32,1213.63 2026.91,1213.63 2027.49,1213.63 2028.08,1213.63 2028.67,1213.63 2029.25,1213.63 2029.84,1213.63 2030.43,1213.63 2031.01,1213.63 2031.6,1213.63 2032.19,1213.63 2032.77,1213.63 2033.36,1213.63 2033.94,1213.63 2034.53,1213.63 2035.12,1213.63 2035.7,1213.63 2036.29,1213.63 2036.88,1213.63 2037.46,1213.63 2038.05,1213.63 2038.64,1213.63 2039.22,1213.63 2039.81,1213.63 2040.4,1213.63 2040.98,1213.63 2041.57,1213.63 2042.15,1213.63 2042.74,1213.63 2043.33,1213.63 2043.91,1213.63 2044.5,1213.63 2045.09,1213.63 2045.67,1213.63 2046.26,1213.63 2046.85,1213.63 2047.43,1213.63 2048.02,1213.63 2048.6,1213.63 2049.19,1213.63 2049.78,1213.63 2050.36,1213.63 2050.95,1213.63 2051.54,1213.63 2052.12,1213.63 2052.71,1213.63 2053.3,1213.63 2053.88,1213.63 2054.47,1213.63 2055.06,1213.63 2055.64,1213.63 2056.23,1213.63 2056.81,1213.63 2057.4,1213.63 2057.99,1213.63 2058.57,1213.63 2059.16,1213.63 2059.75,1213.63 2060.33,1213.63 2060.92,1213.63 2061.51,1213.63 2062.09,1213.63 2062.68,1213.63 2063.27,1213.63 2063.85,1213.63 2064.44,1213.63 2065.02,1213.63 2065.61,1213.63 2066.2,1213.63 2066.78,1213.63 2067.37,1213.63 2067.96,1213.63 2068.54,1213.63 2069.13,1213.63 2069.72,1213.63 2070.3,1213.63 2070.89,1213.63 2071.48,1213.63 2072.06,1213.63 2072.65,1213.63 2073.23,1213.63 2073.82,1213.63 2074.41,1213.63 2074.99,1213.63 2075.58,1213.63 2076.17,1213.63 2076.75,1213.63 2077.34,1213.63 2077.93,1213.63 2078.51,1213.63 2079.1,1213.63 2079.68,1213.63 2080.27,1213.63 2080.86,1213.63 2081.44,1213.63 2082.03,1213.63 2082.62,1213.63 2083.2,1213.63 2083.79,1213.63 2084.38,1213.63 2084.96,1213.63 2085.55,1213.63 2086.14,1213.63 2086.72,1213.63 2087.31,1213.63 2087.89,1213.63 2088.48,1213.63 2089.07,1213.63 2089.65,1213.63 2090.24,1213.63 2090.83,1213.63 2091.41,1213.63 2092,1213.63 2092.59,1213.63 2093.17,1213.63 2093.76,1213.63 2094.35,1213.63 2094.93,1213.63 2095.52,1213.63 2096.1,1213.63 2096.69,1213.63 2097.28,1213.63 2097.86,1213.63 2098.45,1213.63 2099.04,1213.63 2099.62,1213.63 2100.21,1213.63 2100.8,1213.63 2101.38,1213.63 2101.97,1213.63 2102.55,1213.63 2103.14,1213.63 2103.73,1213.63 2104.31,1213.63 2104.9,1213.63 2105.49,1213.63 2106.07,1213.63 2106.66,1213.63 2107.25,1213.63 2107.83,1213.63 2108.42,1213.63 2109.01,1213.63 2109.59,1213.63 2110.18,1213.63 2110.76,1213.63 2111.35,1213.63 2111.94,1213.63 2112.52,1213.63 2113.11,1213.63 2113.7,1213.63 2114.28,1213.63 2114.87,1213.63 2115.46,1213.63 2116.04,1213.63 2116.63,1213.63 2117.22,1213.63 2117.8,1213.63 2118.39,1213.63 2118.97,1213.63 2119.56,1213.63 2120.15,1213.63 2120.73,1213.63 2121.32,1213.63 2121.91,1213.63 2122.49,1213.63 2123.08,1213.63 2123.67,1213.63 2124.25,1213.63 2124.84,1213.63 2125.42,1213.63 2126.01,1213.63 2126.6,1213.63 2127.18,1213.63 2127.77,1213.63 2128.36,1213.63 2128.94,1213.63 2129.53,1213.63 2130.12,1213.63 2130.7,1213.63 2131.29,1213.63 2131.88,1213.63 2132.46,1213.63 2133.05,1213.63 2133.63,1213.63 2134.22,1213.63 2134.81,1213.63 2135.39,1213.63 2135.98,1213.63 2136.57,1213.63 2137.15,1213.63 2137.74,1213.63 2138.33,1213.63 2138.91,1213.63 2139.5,1213.63 2140.09,1213.63 2140.67,1213.63 2141.26,1213.63 2141.84,1213.63 2142.43,1213.63 2143.02,1213.63 2143.6,1213.63 2144.19,1213.63 2144.78,1213.63 2145.36,1213.63 2145.95,1213.63 2146.54,1213.63 2147.12,1213.63 2147.71,1213.63 2148.3,1213.63 2148.88,1213.63 2149.47,1213.63 2150.05,1213.63 2150.64,1213.63 2151.23,1213.63 2151.81,1213.63 2152.4,1213.63 2152.99,1213.63 2153.57,1213.63 2154.16,1213.63 2154.75,1213.63 2155.33,1213.63 2155.92,1213.63 2156.5,1213.63 2157.09,1213.63 2157.68,1213.63 2158.26,1213.63 \"/>\n<path clip-path=\"url(#clip492)\" d=\"M986.025 1213.48 L986.612 1213.48 L987.198 1213.48 L987.785 1213.48 L988.371 1213.48 L988.957 1213.48 L989.544 1213.48 L990.13 1213.48 L990.717 1213.48 L991.303 1213.48 L991.889 1213.48 L992.476 1213.48 L993.062 1213.48 L993.649 1213.48 L994.235 1213.48 L994.822 1213.48 L995.408 1213.48 L995.994 1213.48 L996.581 1213.48 L997.167 1213.48 L997.754 1213.48 L998.34 1213.48 L998.926 1213.48 L999.513 1213.48 L1000.1 1213.48 L1000.69 1213.48 L1001.27 1213.48 L1001.86 1213.48 L1002.44 1213.48 L1003.03 1213.48 L1003.62 1213.48 L1004.2 1213.48 L1004.79 1213.48 L1005.38 1213.48 L1005.96 1213.48 L1006.55 1213.48 L1007.14 1213.48 L1007.72 1213.48 L1008.31 1213.48 L1008.9 1213.48 L1009.48 1213.48 L1010.07 1213.48 L1010.65 1213.48 L1011.24 1213.48 L1011.83 1213.48 L1012.41 1213.48 L1013 1213.48 L1013.59 1213.48 L1014.17 1213.48 L1014.76 1213.48 L1015.35 1213.48 L1015.93 1213.48 L1016.52 1213.48 L1017.11 1213.48 L1017.69 1213.48 L1018.28 1213.48 L1018.86 1213.48 L1019.45 1213.48 L1020.04 1213.48 L1020.62 1213.48 L1021.21 1213.48 L1021.8 1213.48 L1022.38 1213.48 L1022.97 1213.48 L1023.56 1213.48 L1024.14 1213.48 L1024.73 1213.48 L1025.32 1213.48 L1025.9 1213.48 L1026.49 1213.48 L1027.07 1213.48 L1027.66 1213.48 L1028.25 1213.48 L1028.83 1213.48 L1029.42 1213.48 L1030.01 1213.48 L1030.59 1213.48 L1031.18 1213.48 L1031.77 1213.48 L1032.35 1213.48 L1032.94 1213.48 L1033.52 1213.48 L1034.11 1213.48 L1034.7 1213.48 L1035.28 1213.48 L1035.87 1213.48 L1036.46 1213.48 L1037.04 1213.48 L1037.63 1213.48 L1038.22 1213.48 L1038.8 1213.48 L1039.39 1213.48 L1039.98 1213.48 L1040.56 1213.48 L1041.15 1213.48 L1041.73 1213.48 L1042.32 1213.48 L1042.91 1213.48 L1043.49 1213.48 L1044.08 1213.48 L1044.67 1213.48 L1045.25 1213.48 L1045.84 1213.48 L1046.43 1213.48 L1047.01 1213.48 L1047.6 1213.48 L1048.19 1213.48 L1048.77 1213.48 L1049.36 1213.48 L1049.94 1213.48 L1050.53 1213.48 L1051.12 1213.48 L1051.7 1213.48 L1052.29 1213.48 L1052.88 1213.48 L1053.46 1213.48 L1054.05 1213.48 L1054.64 1213.48 L1055.22 1213.48 L1055.81 1213.48 L1056.39 1213.48 L1056.98 1213.48 L1057.57 1213.48 L1058.15 1213.48 L1058.74 1213.48 L1059.33 1213.48 L1059.91 1213.48 L1060.5 1213.48 L1061.09 1213.48 L1061.67 1213.48 L1062.26 1213.48 L1062.85 1213.48 L1063.43 1213.48 L1064.02 1213.48 L1064.6 1213.48 L1065.19 1213.48 L1065.78 1213.48 L1066.36 1213.48 L1066.95 1213.48 L1067.54 1213.48 L1068.12 1213.48 L1068.71 1213.48 L1069.3 1213.48 L1069.88 1213.48 L1070.47 1213.48 L1071.06 1213.48 L1071.64 1213.48 L1072.23 1213.48 L1072.81 1213.48 L1073.4 1213.48 L1073.99 1213.48 L1074.57 1213.48 L1075.16 1213.48 L1075.75 1213.48 L1076.33 1213.48 L1076.92 1213.48 L1077.51 1213.48 L1078.09 1213.48 L1078.68 1213.48 L1079.26 1213.48 L1079.85 1213.48 L1080.44 1213.48 L1081.02 1213.48 L1081.61 1213.48 L1082.2 1213.48 L1082.78 1213.48 L1083.37 1213.48 L1083.96 1213.48 L1084.54 1213.48 L1085.13 1213.48 L1085.72 1213.48 L1086.3 1213.48 L1086.89 1213.48 L1087.47 1213.48 L1088.06 1213.48 L1088.65 1213.48 L1089.23 1213.48 L1089.82 1213.48 L1090.41 1213.48 L1090.99 1213.48 L1091.58 1213.48 L1092.17 1213.48 L1092.75 1213.48 L1093.34 1213.48 L1093.93 1213.48 L1094.51 1213.48 L1095.1 1213.48 L1095.68 1213.48 L1096.27 1213.48 L1096.86 1213.48 L1097.44 1213.48 L1098.03 1213.48 L1098.62 1213.48 L1099.2 1213.48 L1099.79 1213.48 L1100.38 1213.48 L1100.96 1213.48 L1101.55 1213.48 L1102.14 1213.48 L1102.72 1213.48 L1103.31 1213.48 L1103.89 1213.48 L1104.48 1213.48 L1105.07 1213.48 L1105.65 1213.48 L1106.24 1213.48 L1106.83 1213.48 L1107.41 1213.48 L1108 1213.48 L1108.59 1213.48 L1109.17 1213.48 L1109.76 1213.48 L1110.34 1213.48 L1110.93 1213.48 L1111.52 1213.48 L1112.1 1213.48 L1112.69 1213.48 L1113.28 1213.48 L1113.86 1213.48 L1114.45 1213.48 L1115.04 1213.48 L1115.62 1213.48 L1116.21 1213.48 L1116.8 1213.48 L1117.38 1213.48 L1117.97 1213.48 L1118.55 1213.48 L1119.14 1213.48 L1119.73 1213.48 L1120.31 1213.48 L1120.9 1213.48 L1121.49 1213.48 L1122.07 1213.48 L1122.66 1213.48 L1123.25 1213.48 L1123.83 1213.48 L1124.42 1213.48 L1125.01 1213.48 L1125.59 1213.48 L1126.18 1213.48 L1126.76 1213.48 L1127.35 1213.48 L1127.94 1213.48 L1128.52 1213.48 L1129.11 1213.48 L1129.7 1213.48 L1130.28 1213.48 L1130.87 1213.48 L1131.46 1213.48 L1132.04 1213.48 L1132.63 1213.48 L1133.21 1213.48 L1133.8 1213.48 L1134.39 1213.48 L1134.97 1213.48 L1135.56 1213.48 L1136.15 1213.48 L1136.73 1213.48 L1137.32 1213.48 L1137.91 1213.48 L1138.49 1213.48 L1139.08 1213.48 L1139.67 1213.48 L1140.25 1213.48 L1140.84 1213.48 L1141.42 1213.48 L1142.01 1213.48 L1142.6 1213.48 L1143.18 1213.48 L1143.77 1213.48 L1144.36 1213.48 L1144.94 1213.48 L1145.53 1213.48 L1146.12 1213.48 L1146.7 1213.48 L1147.29 1213.48 L1147.88 1213.48 L1148.46 1213.48 L1149.05 1213.48 L1149.63 1213.48 L1150.22 1213.48 L1150.81 1213.48 L1151.39 1213.48 L1151.98 1213.48 L1152.57 1213.48 L1153.15 1213.48 L1153.74 1213.48 L1154.33 1213.48 L1154.91 1213.48 L1155.5 1213.48 L1156.09 1213.48 L1156.67 1213.48 L1157.26 1213.48 L1157.84 1213.48 L1158.43 1213.48 L1159.02 1213.48 L1159.6 1213.48 L1160.19 1213.48 L1160.78 1213.48 L1161.36 1213.48 L1161.95 1213.48 L1162.54 1213.48 L1163.12 1213.48 L1163.71 1213.48 L1164.29 1213.48 L1164.88 1213.48 L1165.47 1213.48 L1166.05 1213.48 L1166.64 1213.48 L1167.23 1213.48 L1167.81 1213.48 L1168.4 1213.48 L1168.99 1213.48 L1169.57 1213.48 L1170.16 1213.48 L1170.75 1213.48 L1171.33 1213.48 L1171.92 1213.48 L1172.5 1213.48 L1173.09 1213.48 L1173.68 1213.48 L1174.26 1213.48 L1174.85 1213.48 L1175.44 1213.48 L1176.02 1213.48 L1176.61 1213.48 L1177.2 1213.48 L1177.78 1213.48 L1178.37 1213.48 L1178.96 1213.48 L1179.54 1213.48 L1180.13 1213.48 L1180.71 1213.48 L1181.3 1213.48 L1181.89 1213.48 L1182.47 1213.48 L1183.06 1213.48 L1183.65 1213.48 L1184.23 1213.48 L1184.82 1213.48 L1185.41 1213.48 L1185.99 1213.48 L1186.58 1213.48 L1187.16 1213.48 L1187.75 1213.48 L1188.34 1213.48 L1188.92 1213.48 L1189.51 1213.48 L1190.1 1213.48 L1190.68 1213.48 L1191.27 1213.48 L1191.86 1213.48 L1192.44 1213.48 L1193.03 1213.48 L1193.62 1213.48 L1194.2 1213.48 L1194.79 1213.48 L1195.37 1213.48 L1195.96 1213.48 L1196.55 1213.48 L1197.13 1213.48 L1197.72 1213.48 L1198.31 1213.48 L1198.89 1213.48 L1199.48 1213.48 L1200.07 1213.48 L1200.65 1213.48 L1201.24 1213.48 L1201.83 1213.48 L1202.41 1213.48 L1203 1213.48 L1203.58 1213.48 L1204.17 1213.48 L1204.76 1213.48 L1205.34 1213.48 L1205.93 1213.48 L1206.52 1213.48 L1207.1 1213.48 L1207.69 1213.48 L1208.28 1213.48 L1208.86 1213.48 L1209.45 1213.48 L1210.03 1213.48 L1210.62 1213.48 L1211.21 1213.48 L1211.79 1213.48 L1212.38 1213.48 L1212.97 1213.48 L1213.55 1213.48 L1214.14 1213.48 L1214.73 1213.48 L1215.31 1213.48 L1215.9 1213.48 L1216.49 1213.48 L1217.07 1213.48 L1217.66 1213.48 L1218.24 1213.48 L1218.83 1213.48 L1219.42 1213.48 L1220 1213.48 L1220.59 1213.48 L1221.18 1213.48 L1221.76 1213.48 L1222.35 1213.48 L1222.94 1213.48 L1223.52 1213.48 L1224.11 1213.48 L1224.7 1213.48 L1225.28 1213.48 L1225.87 1213.48 L1226.45 1213.48 L1227.04 1213.48 L1227.63 1213.48 L1228.21 1213.48 L1228.8 1213.48 L1229.39 1213.48 L1229.97 1213.48 L1230.56 1213.48 L1231.15 1213.48 L1231.73 1213.48 L1232.32 1213.48 L1232.91 1213.48 L1233.49 1213.48 L1234.08 1213.48 L1234.66 1213.48 L1235.25 1213.48 L1235.84 1213.48 L1236.42 1213.48 L1237.01 1213.48 L1237.6 1213.48 L1238.18 1213.48 L1238.77 1213.48 L1239.36 1213.48 L1239.94 1213.48 L1240.53 1213.48 L1241.11 1213.48 L1241.7 1213.48 L1242.29 1213.48 L1242.87 1213.48 L1243.46 1213.48 L1244.05 1213.48 L1244.63 1213.48 L1245.22 1213.48 L1245.81 1213.48 L1246.39 1213.48 L1246.98 1213.48 L1247.57 1213.48 L1248.15 1213.48 L1248.74 1213.48 L1249.32 1213.48 L1249.91 1213.48 L1250.5 1213.48 L1251.08 1213.48 L1251.67 1213.48 L1252.26 1213.48 L1252.84 1213.48 L1253.43 1213.48 L1254.02 1213.48 L1254.6 1213.48 L1255.19 1213.48 L1255.78 1213.48 L1256.36 1213.48 L1256.95 1213.48 L1257.53 1213.48 L1258.12 1213.48 L1258.71 1213.48 L1259.29 1213.48 L1259.88 1213.48 L1260.47 1213.48 L1261.05 1213.48 L1261.64 1213.48 L1262.23 1213.48 L1262.81 1213.48 L1263.4 1213.48 L1263.98 1213.48 L1264.57 1213.48 L1265.16 1213.48 L1265.74 1213.48 L1266.33 1213.48 L1266.92 1213.48 L1267.5 1213.48 L1268.09 1213.48 L1268.68 1213.48 L1269.26 1213.48 L1269.85 1213.48 L1270.44 1213.48 L1271.02 1213.48 L1271.61 1213.48 L1272.19 1213.48 L1272.78 1213.48 L1273.37 1213.48 L1273.95 1213.48 L1274.54 1213.48 L1275.13 1213.48 L1275.71 1213.48 L1276.3 1213.48 L1276.89 1213.48 L1277.47 1213.48 L1278.06 1213.48 L1278.65 1213.48 L1279.23 1213.48 L1279.82 1213.48 L1280.4 1213.48 L1280.99 1213.48 L1281.58 1213.48 L1282.16 1213.48 L1282.75 1213.48 L1283.34 1213.48 L1283.92 1213.48 L1284.51 1213.48 L1285.1 1213.48 L1285.68 1213.48 L1286.27 1213.48 L1286.86 1213.48 L1287.44 1213.48 L1288.03 1213.48 L1288.61 1213.48 L1289.2 1213.48 L1289.79 1213.48 L1290.37 1213.48 L1290.96 1213.48 L1291.55 1213.48 L1292.13 1213.48 L1292.72 1213.48 L1293.31 1213.48 L1293.89 1213.48 L1294.48 1213.48 L1295.06 1213.48 L1295.65 1213.48 L1296.24 1213.48 L1296.82 1213.48 L1297.41 1213.48 L1298 1213.48 L1298.58 1213.48 L1299.17 1213.48 L1299.76 1213.48 L1300.34 1213.48 L1300.93 1213.48 L1301.52 1213.48 L1302.1 1213.48 L1302.69 1213.48 L1303.27 1213.48 L1303.86 1213.48 L1304.45 1213.48 L1305.03 1213.48 L1305.62 1213.48 L1306.21 1213.48 L1306.79 1213.48 L1307.38 1213.48 L1307.97 1213.48 L1308.55 1213.48 L1309.14 1213.48 L1309.73 1213.48 L1310.31 1213.48 L1310.9 1213.48 L1311.48 1213.48 L1312.07 1213.48 L1312.66 1213.48 L1313.24 1213.48 L1313.83 1213.48 L1314.42 1213.48 L1315 1213.48 L1315.59 1213.48 L1316.18 1213.48 L1316.76 1213.48 L1317.35 1213.48 L1317.93 1213.48 L1318.52 1213.48 L1319.11 1213.48 L1319.69 1213.48 L1320.28 1213.48 L1320.87 1213.48 L1321.45 1213.48 L1322.04 1213.48 L1322.63 1213.48 L1323.21 1213.48 L1323.8 1213.48 L1324.39 1213.48 L1324.97 1213.48 L1325.56 1213.48 L1326.14 1213.48 L1326.73 1213.48 L1327.32 1213.48 L1327.9 1213.48 L1328.49 1213.48 L1329.08 1213.48 L1329.66 1213.48 L1330.25 1213.48 L1330.84 1213.48 L1331.42 1213.48 L1332.01 1213.48 L1332.6 1213.48 L1333.18 1213.48 L1333.77 1213.48 L1334.35 1213.48 L1334.94 1213.48 L1335.53 1213.48 L1336.11 1213.48 L1336.7 1213.48 L1337.29 1213.48 L1337.87 1213.48 L1338.46 1213.48 L1339.05 1213.48 L1339.63 1213.48 L1340.22 1213.48 L1340.8 1213.48 L1341.39 1213.48 L1341.98 1213.48 L1342.56 1213.48 L1343.15 1213.48 L1343.74 1213.48 L1344.32 1213.48 L1344.91 1213.48 L1345.5 1213.48 L1346.08 1213.48 L1346.67 1213.48 L1347.26 1213.48 L1347.84 1213.48 L1348.43 1213.48 L1349.01 1213.48 L1349.6 1213.48 L1350.19 1213.48 L1350.77 1213.48 L1351.36 1213.48 L1351.95 1213.48 L1352.53 1213.48 L1353.12 1213.48 L1353.71 1213.48 L1354.29 1213.48 L1354.88 1213.48 L1355.47 1213.48 L1356.05 1213.48 L1356.64 1213.48 L1357.22 1213.48 L1357.81 1213.48 L1358.4 1213.48 L1358.98 1213.48 L1359.57 1213.48 L1360.16 1213.48 L1360.74 1213.48 L1361.33 1213.48 L1361.92 1213.48 L1362.5 1213.48 L1363.09 1213.48 L1363.68 1213.48 L1364.26 1213.48 L1364.85 1213.48 L1365.43 1213.48 L1366.02 1213.48 L1366.61 1213.48 L1367.19 1213.48 L1367.78 1213.48 L1368.37 1213.48 L1368.95 1213.48 L1369.54 1213.48 L1370.13 1213.48 L1370.71 1213.48 L1371.3 1213.48 L1371.88 1213.48 L1372.47 1213.48 L1373.06 1213.48 L1373.64 1213.48 L1374.23 1213.48 L1374.82 1213.48 L1375.4 1213.48 L1375.99 1213.48 L1376.58 1213.48 L1377.16 1213.48 L1377.75 1213.48 L1378.34 1213.48 L1378.92 1213.48 L1379.51 1213.48 L1380.09 1213.48 L1380.68 1213.48 L1381.27 1213.48 L1381.85 1213.48 L1382.44 1213.48 L1383.03 1213.48 L1383.61 1213.48 L1384.2 1213.48 L1384.79 1213.48 L1385.37 1213.48 L1385.96 1213.48 L1386.55 1213.48 L1387.13 1213.48 L1387.72 1213.48 L1388.3 1213.48 L1388.89 1213.48 L1389.48 1213.48 L1390.06 1213.48 L1390.65 1213.48 L1391.24 1213.48 L1391.82 1213.48 L1392.41 1213.48 L1393 1213.48 L1393.58 1213.48 L1394.17 1213.48 L1394.75 1213.48 L1395.34 1213.48 L1395.93 1213.48 L1396.51 1213.48 L1397.1 1213.48 L1397.69 1213.48 L1398.27 1213.48 L1398.86 1213.48 L1399.45 1213.48 L1400.03 1213.48 L1400.62 1213.48 L1401.21 1213.48 L1401.79 1213.48 L1402.38 1213.48 L1402.96 1213.48 L1403.55 1213.48 L1404.14 1213.48 L1404.72 1213.48 L1405.31 1213.48 L1405.9 1213.48 L1406.48 1213.48 L1407.07 1213.48 L1407.66 1213.48 L1408.24 1213.48 L1408.83 1213.48 L1409.42 1213.48 L1410 1213.48 L1410.59 1213.48 L1411.17 1213.48 L1411.76 1213.48 L1412.35 1213.48 L1412.93 1213.48 L1413.52 1213.48 L1414.11 1213.48 L1414.69 1213.48 L1415.28 1213.48 L1415.87 1213.48 L1416.45 1213.48 L1417.04 1213.48 L1417.63 1213.48 L1418.21 1213.48 L1418.8 1213.48 L1419.38 1213.48 L1419.97 1213.48 L1420.56 1213.48 L1421.14 1213.48 L1421.73 1213.48 L1422.32 1213.48 L1422.9 1213.48 L1423.49 1213.48 L1424.08 1213.48 L1424.66 1213.48 L1425.25 1213.48 L1425.83 1213.48 L1426.42 1213.48 L1427.01 1213.48 L1427.59 1213.48 L1428.18 1213.48 L1428.77 1213.48 L1429.35 1213.48 L1429.94 1213.48 L1430.53 1213.48 L1431.11 1213.48 L1431.7 1213.48 L1432.29 1213.48 L1432.87 1213.48 L1433.46 1213.48 L1434.04 1213.48 L1434.63 1213.48 L1435.22 1213.48 L1435.8 1213.48 L1436.39 1213.48 L1436.98 1213.48 L1437.56 1213.48 L1438.15 1213.48 L1438.74 1213.48 L1439.32 1213.48 L1439.91 1213.48 L1440.5 1213.48 L1441.08 1213.48 L1441.67 1213.48 L1442.25 1213.48 L1442.84 1213.48 L1443.43 1213.48 L1444.01 1213.48 L1444.6 1213.48 L1445.19 1213.48 L1445.77 1213.48 L1446.36 1213.48 L1446.95 1213.48 L1447.53 1213.48 L1448.12 1213.48 L1448.7 1213.48 L1449.29 1213.48 L1449.88 1213.48 L1450.46 1213.48 L1451.05 1213.48 L1451.64 1213.48 L1452.22 1213.48 L1452.81 1213.48 L1453.4 1213.48 L1453.98 1213.48 L1454.57 1213.48 L1455.16 1213.48 L1455.74 1213.48 L1456.33 1213.48 L1456.91 1213.48 L1457.5 1213.48 L1458.09 1213.48 L1458.67 1213.48 L1459.26 1213.48 L1459.85 1213.48 L1460.43 1213.48 L1461.02 1213.48 L1461.61 1213.48 L1462.19 1213.48 L1462.78 1213.48 L1463.37 1213.48 L1463.95 1213.48 L1464.54 1213.48 L1465.12 1213.48 L1465.71 1213.48 L1466.3 1213.48 L1466.88 1213.48 L1467.47 1213.48 L1468.06 1213.48 L1468.64 1213.48 L1469.23 1213.48 L1469.82 1213.48 L1470.4 1213.48 L1470.99 1213.48 L1471.57 1213.48 L1472.16 1213.48 L1472.75 1213.48 L1473.33 1213.48 L1473.92 1213.48 L1474.51 1213.48 L1475.09 1213.48 L1475.68 1213.48 L1476.27 1213.48 L1476.85 1213.48 L1477.44 1213.48 L1478.03 1213.48 L1478.61 1213.48 L1479.2 1213.48 L1479.78 1213.48 L1480.37 1213.48 L1480.96 1213.48 L1481.54 1213.48 L1482.13 1213.48 L1482.72 1213.48 L1483.3 1213.48 L1483.89 1213.48 L1484.48 1213.48 L1485.06 1213.48 L1485.65 1213.48 L1486.24 1213.48 L1486.82 1213.48 L1487.41 1213.48 L1487.99 1213.48 L1488.58 1213.48 L1489.17 1213.48 L1489.75 1213.48 L1490.34 1213.48 L1490.93 1213.48 L1491.51 1213.48 L1492.1 1213.48 L1492.69 1213.48 L1493.27 1213.48 L1493.86 1213.48 L1494.45 1213.48 L1495.03 1213.48 L1495.62 1213.48 L1496.2 1213.48 L1496.79 1213.48 L1497.38 1213.48 L1497.96 1213.48 L1498.55 1213.48 L1499.14 1213.48 L1499.72 1213.48 L1500.31 1213.48 L1500.9 1213.48 L1501.48 1213.48 L1502.07 1213.48 L1502.65 1213.48 L1503.24 1213.48 L1503.83 1213.48 L1504.41 1213.48 L1505 1213.48 L1505.59 1213.48 L1506.17 1213.48 L1506.76 1213.48 L1507.35 1213.48 L1507.93 1213.48 L1508.52 1213.48 L1509.11 1213.48 L1509.69 1213.48 L1510.28 1213.48 L1510.86 1213.48 L1511.45 1213.48 L1512.04 1213.48 L1512.62 1213.48 L1513.21 1213.48 L1513.8 1213.48 L1514.38 1213.48 L1514.97 1213.48 L1515.56 1213.48 L1516.14 1213.48 L1516.73 1213.48 L1517.32 1213.48 L1517.9 1213.48 L1518.49 1213.48 L1519.07 1213.48 L1519.66 1213.48 L1520.25 1213.48 L1520.83 1213.48 L1521.42 1213.48 L1522.01 1213.48 L1522.59 1213.48 L1523.18 1213.48 L1523.77 1213.48 L1524.35 1213.48 L1524.94 1213.48 L1525.52 1213.48 L1526.11 1213.48 L1526.7 1213.48 L1527.28 1213.48 L1527.87 1213.48 L1528.46 1213.48 L1529.04 1213.48 L1529.63 1213.48 L1530.22 1213.48 L1530.8 1213.48 L1531.39 1213.48 L1531.98 1213.48 L1532.56 1213.48 L1533.15 1213.48 L1533.73 1213.48 L1534.32 1213.48 L1534.91 1213.48 L1535.49 1213.48 L1536.08 1213.48 L1536.67 1213.48 L1537.25 1213.48 L1537.84 1213.48 L1538.43 1213.48 L1539.01 1213.48 L1539.6 1213.48 L1540.19 1213.48 L1540.77 1213.48 L1541.36 1213.48 L1541.94 1213.48 L1542.53 1213.48 L1543.12 1213.48 L1543.7 1213.48 L1544.29 1213.48 L1544.88 1213.48 L1545.46 1213.48 L1546.05 1213.48 L1546.64 1213.48 L1547.22 1213.48 L1547.81 1213.48 L1548.4 1213.48 L1548.98 1213.48 L1549.57 1213.48 L1550.15 1213.48 L1550.74 1213.48 L1551.33 1213.48 L1551.91 1213.48 L1552.5 1213.48 L1553.09 1213.48 L1553.67 1213.48 L1554.26 1213.48 L1554.85 1213.48 L1555.43 1213.48 L1556.02 1213.48 L1556.6 1213.48 L1557.19 1213.48 L1557.78 1213.48 L1558.36 1213.48 L1558.95 1213.48 L1559.54 1213.48 L1560.12 1213.48 L1560.71 1213.48 L1561.3 1213.48 L1561.88 1213.48 L1562.47 1213.48 L1563.06 1213.48 L1563.64 1213.48 L1564.23 1213.48 L1564.81 1213.48 L1565.4 1213.48 L1565.99 1213.48 L1566.57 1213.48 L1567.16 1213.48 L1567.75 1213.48 L1568.33 1213.48 L1568.92 1213.48 L1569.51 1213.48 L1570.09 1213.48 L1570.68 1213.48 L1571.27 1213.48 L1571.85 1213.48 L1572.44 1213.48 L1573.02 1213.48 L1573.61 1213.48 L1574.2 1213.48 L1574.78 1213.48 L1575.37 1213.48 L1575.96 1213.48 L1576.54 1213.48 L1577.13 1213.48 L1577.72 1213.48 L1578.3 1213.48 L1578.89 1213.48 L1579.47 1213.48 L1580.06 1213.48 L1580.65 1213.48 L1581.23 1213.48 L1581.82 1213.48 L1582.41 1213.48 L1582.99 1213.48 L1583.58 1213.48 L1584.17 1213.48 L1584.75 1213.48 L1585.34 1213.48 L1585.93 1213.48 L1586.51 1213.48 L1587.1 1213.48 L1587.68 1213.48 L1588.27 1213.48 L1588.86 1213.48 L1589.44 1213.48 L1590.03 1213.48 L1590.62 1213.48 L1591.2 1213.48 L1591.79 1213.48 L1592.38 1213.48 L1592.96 1213.48 L1593.55 1213.48 L1594.14 1213.48 L1594.72 1213.48 L1595.31 1213.48 L1595.89 1213.48 L1596.48 1213.48 L1597.07 1213.48 L1597.65 1213.48 L1598.24 1213.48 L1598.83 1213.48 L1599.41 1213.48 L1600 1213.48 L1600.59 1213.48 L1601.17 1213.48 L1601.76 1213.48 L1602.34 1213.48 L1602.93 1213.48 L1603.52 1213.48 L1604.1 1213.48 L1604.69 1213.48 L1605.28 1213.48 L1605.86 1213.48 L1606.45 1213.48 L1607.04 1213.48 L1607.62 1213.48 L1608.21 1213.48 L1608.8 1213.48 L1609.38 1213.48 L1609.97 1213.48 L1610.55 1213.48 L1611.14 1213.48 L1611.73 1213.48 L1612.31 1213.48 L1612.9 1213.48 L1613.49 1213.48 L1614.07 1213.48 L1614.66 1213.48 L1615.25 1213.48 L1615.83 1213.48 L1616.42 1213.48 L1617.01 1213.48 L1617.59 1213.48 L1618.18 1213.48 L1618.76 1213.48 L1619.35 1213.48 L1619.94 1213.48 L1620.52 1213.48 L1621.11 1213.48 L1621.7 1213.48 L1622.28 1213.48 L1622.87 1213.48 L1623.46 1213.48 L1624.04 1213.48 L1624.63 1213.48 L1625.22 1213.48 L1625.8 1213.48 L1626.39 1213.48 L1626.97 1213.48 L1627.56 1213.48 L1628.15 1213.48 L1628.73 1213.48 L1629.32 1213.48 L1629.91 1213.48 L1630.49 1213.48 L1631.08 1213.48 L1631.67 1213.48 L1632.25 1213.48 L1632.84 1213.48 L1633.42 1213.48 L1634.01 1213.48 L1634.6 1213.48 L1635.18 1213.48 L1635.77 1213.48 L1636.36 1213.48 L1636.94 1213.48 L1637.53 1213.48 L1638.12 1213.48 L1638.7 1213.48 L1639.29 1213.48 L1639.88 1213.48 L1640.46 1213.48 L1641.05 1213.48 L1641.63 1213.48 L1642.22 1213.48 L1642.81 1213.48 L1643.39 1213.48 L1643.98 1213.48 L1644.57 1213.48 L1645.15 1213.48 L1645.74 1213.48 L1646.33 1213.48 L1646.91 1213.48 L1647.5 1213.48 L1648.09 1213.48 L1648.67 1213.48 L1649.26 1213.48 L1649.84 1213.48 L1650.43 1213.48 L1651.02 1213.48 L1651.6 1213.48 L1652.19 1213.48 L1652.78 1213.48 L1653.36 1213.48 L1653.95 1213.48 L1654.54 1213.48 L1655.12 1213.48 L1655.71 1213.48 L1656.29 1213.48 L1656.88 1213.48 L1657.47 1213.48 L1658.05 1213.48 L1658.64 1213.48 L1659.23 1213.48 L1659.81 1213.48 L1660.4 1213.48 L1660.99 1213.48 L1661.57 1213.48 L1662.16 1213.48 L1662.75 1213.48 L1663.33 1213.48 L1663.92 1213.48 L1664.5 1213.48 L1665.09 1213.48 L1665.68 1213.48 L1666.26 1213.48 L1666.85 1213.48 L1667.44 1213.48 L1668.02 1213.48 L1668.61 1213.48 L1669.2 1213.48 L1669.78 1213.48 L1670.37 1213.48 L1670.96 1213.48 L1671.54 1213.48 L1672.13 1213.48 L1672.71 1213.48 L1673.3 1213.48 L1673.89 1213.48 L1674.47 1213.48 L1675.06 1213.48 L1675.65 1213.48 L1676.23 1213.48 L1676.82 1213.48 L1677.41 1213.48 L1677.99 1213.48 L1678.58 1213.48 L1679.17 1213.48 L1679.75 1213.48 L1680.34 1213.48 L1680.92 1213.48 L1681.51 1213.48 L1682.1 1213.48 L1682.68 1213.48 L1683.27 1213.48 L1683.86 1213.48 L1684.44 1213.48 L1685.03 1213.48 L1685.62 1213.48 L1686.2 1213.48 L1686.79 1213.48 L1687.37 1213.48 L1687.96 1213.48 L1688.55 1213.48 L1689.13 1213.48 L1689.72 1213.48 L1690.31 1213.48 L1690.89 1213.48 L1691.48 1213.48 L1692.07 1213.48 L1692.65 1213.48 L1693.24 1213.48 L1693.83 1213.48 L1694.41 1213.48 L1695 1213.48 L1695.58 1213.48 L1696.17 1213.48 L1696.76 1213.48 L1697.34 1213.48 L1697.93 1213.48 L1698.52 1213.48 L1699.1 1213.48 L1699.69 1213.48 L1700.28 1213.48 L1700.86 1213.48 L1701.45 1213.48 L1702.04 1213.48 L1702.62 1213.48 L1703.21 1213.48 L1703.79 1213.48 L1704.38 1213.48 L1704.97 1213.48 L1705.55 1213.48 L1706.14 1213.48 L1706.73 1213.48 L1707.31 1213.48 L1707.9 1213.48 L1708.49 1213.48 L1709.07 1213.48 L1709.66 1213.48 L1710.24 1213.48 L1710.83 1213.48 L1711.42 1213.48 L1712 1213.48 L1712.59 1213.48 L1713.18 1213.48 L1713.76 1213.48 L1714.35 1213.48 L1714.94 1213.48 L1715.52 1213.48 L1716.11 1213.48 L1716.7 1213.48 L1717.28 1213.48 L1717.87 1213.48 L1718.45 1213.48 L1719.04 1213.48 L1719.63 1213.48 L1720.21 1213.48 L1720.8 1213.48 L1721.39 1213.48 L1721.97 1213.48 L1722.56 1213.48 L1723.15 1213.48 L1723.73 1213.48 L1724.32 1213.48 L1724.91 1213.48 L1725.49 1213.48 L1726.08 1213.48 L1726.66 1213.48 L1727.25 1213.48 L1727.84 1213.48 L1728.42 1213.48 L1729.01 1213.48 L1729.6 1213.48 L1730.18 1213.48 L1730.77 1213.48 L1731.36 1213.48 L1731.94 1213.48 L1732.53 1213.48 L1733.11 1213.48 L1733.7 1213.48 L1734.29 1213.48 L1734.87 1213.48 L1735.46 1213.48 L1736.05 1213.48 L1736.63 1213.48 L1737.22 1213.48 L1737.81 1213.48 L1738.39 1213.48 L1738.98 1213.48 L1739.57 1213.48 L1740.15 1213.48 L1740.74 1213.48 L1741.32 1213.48 L1741.91 1213.48 L1742.5 1213.48 L1743.08 1213.48 L1743.67 1213.48 L1744.26 1213.48 L1744.84 1213.48 L1745.43 1213.48 L1746.02 1213.48 L1746.6 1213.48 L1747.19 1213.48 L1747.78 1213.48 L1748.36 1213.48 L1748.95 1213.48 L1749.53 1213.48 L1750.12 1213.48 L1750.71 1213.48 L1751.29 1213.48 L1751.88 1213.48 L1752.47 1213.48 L1753.05 1213.48 L1753.64 1213.48 L1754.23 1213.48 L1754.81 1213.48 L1755.4 1213.48 L1755.99 1213.48 L1756.57 1213.48 L1757.16 1213.48 L1757.74 1213.48 L1758.33 1213.48 L1758.92 1213.48 L1759.5 1213.48 L1760.09 1213.48 L1760.68 1213.48 L1761.26 1213.48 L1761.85 1213.48 L1762.44 1213.48 L1763.02 1213.48 L1763.61 1213.48 L1764.19 1213.48 L1764.78 1213.48 L1765.37 1213.48 L1765.95 1213.48 L1766.54 1213.48 L1767.13 1213.48 L1767.71 1213.48 L1768.3 1213.48 L1768.89 1213.48 L1769.47 1213.48 L1770.06 1213.48 L1770.65 1213.48 L1771.23 1213.48 L1771.82 1213.48 L1772.4 1213.48 L1772.99 1213.48 L1773.58 1213.48 L1774.16 1213.48 L1774.75 1213.48 L1775.34 1213.48 L1775.92 1213.48 L1776.51 1213.48 L1777.1 1213.48 L1777.68 1213.48 L1778.27 1213.48 L1778.86 1213.48 L1779.44 1213.48 L1780.03 1213.48 L1780.61 1213.48 L1781.2 1213.48 L1781.79 1213.48 L1782.37 1213.48 L1782.96 1213.48 L1783.55 1213.48 L1784.13 1213.48 L1784.72 1213.48 L1785.31 1213.48 L1785.89 1213.48 L1786.48 1213.48 L1787.06 1213.48 L1787.65 1213.48 L1788.24 1213.48 L1788.82 1213.48 L1789.41 1213.48 L1790 1213.48 L1790.58 1213.48 L1791.17 1213.48 L1791.76 1213.48 L1792.34 1213.48 L1792.93 1213.48 L1793.52 1213.48 L1794.1 1213.48 L1794.69 1213.48 L1795.27 1213.48 L1795.86 1213.48 L1796.45 1213.48 L1797.03 1213.48 L1797.62 1213.48 L1798.21 1213.48 L1798.79 1213.48 L1799.38 1213.48 L1799.97 1213.48 L1800.55 1213.48 L1801.14 1213.48 L1801.73 1213.48 L1802.31 1213.48 L1802.9 1213.48 L1803.48 1213.48 L1804.07 1213.48 L1804.66 1213.48 L1805.24 1213.48 L1805.83 1213.48 L1806.42 1213.48 L1807 1213.48 L1807.59 1213.48 L1808.18 1213.48 L1808.76 1213.48 L1809.35 1213.48 L1809.94 1213.48 L1810.52 1213.48 L1811.11 1213.48 L1811.69 1213.48 L1812.28 1213.48 L1812.87 1213.48 L1813.45 1213.48 L1814.04 1213.48 L1814.63 1213.48 L1815.21 1213.48 L1815.8 1213.48 L1816.39 1213.48 L1816.97 1213.48 L1817.56 1213.48 L1818.14 1213.48 L1818.73 1213.48 L1819.32 1213.48 L1819.9 1213.48 L1820.49 1213.48 L1821.08 1213.48 L1821.66 1213.48 L1822.25 1213.48 L1822.84 1213.48 L1823.42 1213.48 L1824.01 1213.48 L1824.6 1213.48 L1825.18 1213.48 L1825.77 1213.48 L1826.35 1213.48 L1826.94 1213.48 L1827.53 1213.48 L1828.11 1213.48 L1828.7 1213.48 L1829.29 1213.48 L1829.87 1213.48 L1830.46 1213.48 L1831.05 1213.48 L1831.63 1213.48 L1832.22 1213.48 L1832.81 1213.48 L1833.39 1213.48 L1833.98 1213.48 L1834.56 1213.48 L1835.15 1213.48 L1835.74 1213.48 L1836.32 1213.48 L1836.91 1213.48 L1837.5 1213.48 L1838.08 1213.48 L1838.67 1213.48 L1839.26 1213.48 L1839.84 1213.48 L1840.43 1213.48 L1841.01 1213.48 L1841.6 1213.48 L1842.19 1213.48 L1842.77 1213.48 L1843.36 1213.48 L1843.95 1213.48 L1844.53 1213.48 L1845.12 1213.48 L1845.71 1213.48 L1846.29 1213.48 L1846.88 1213.48 L1847.47 1213.48 L1848.05 1213.48 L1848.64 1213.48 L1849.22 1213.48 L1849.81 1213.48 L1850.4 1213.48 L1850.98 1213.48 L1851.57 1213.48 L1852.16 1213.48 L1852.74 1213.48 L1853.33 1213.48 L1853.92 1213.48 L1854.5 1213.48 L1855.09 1213.48 L1855.68 1213.48 L1856.26 1213.48 L1856.85 1213.48 L1857.43 1213.48 L1858.02 1213.48 L1858.61 1213.48 L1859.19 1213.48 L1859.78 1213.48 L1860.37 1213.48 L1860.95 1213.48 L1861.54 1213.48 L1862.13 1213.48 L1862.71 1213.48 L1863.3 1213.48 L1863.88 1213.48 L1864.47 1213.48 L1865.06 1213.48 L1865.64 1213.48 L1866.23 1213.48 L1866.82 1213.48 L1867.4 1213.48 L1867.99 1213.48 L1868.58 1213.48 L1869.16 1213.48 L1869.75 1213.48 L1870.34 1213.48 L1870.92 1213.48 L1871.51 1213.48 L1872.09 1213.48 L1872.68 1213.48 L1873.27 1213.48 L1873.85 1213.48 L1874.44 1213.48 L1875.03 1213.48 L1875.61 1213.48 L1876.2 1213.48 L1876.79 1213.48 L1877.37 1213.48 L1877.96 1213.48 L1878.55 1213.48 L1879.13 1213.48 L1879.72 1213.48 L1880.3 1213.48 L1880.89 1213.48 L1881.48 1213.48 L1882.06 1213.48 L1882.65 1213.48 L1883.24 1213.48 L1883.82 1213.48 L1884.41 1213.48 L1885 1213.48 L1885.58 1213.48 L1886.17 1213.48 L1886.76 1213.48 L1887.34 1213.48 L1887.93 1213.48 L1888.51 1213.48 L1889.1 1213.48 L1889.69 1213.48 L1890.27 1213.48 L1890.86 1213.48 L1891.45 1213.48 L1892.03 1213.48 L1892.62 1213.48 L1893.21 1213.48 L1893.79 1213.48 L1894.38 1213.48 L1894.96 1213.48 L1895.55 1213.48 L1896.14 1213.48 L1896.72 1213.48 L1897.31 1213.48 L1897.9 1213.48 L1898.48 1213.48 L1899.07 1213.48 L1899.66 1213.48 L1900.24 1213.48 L1900.83 1213.48 L1901.42 1213.48 L1902 1213.48 L1902.59 1213.48 L1903.17 1213.48 L1903.76 1213.48 L1904.35 1213.48 L1904.93 1213.48 L1905.52 1213.48 L1906.11 1213.48 L1906.69 1213.48 L1907.28 1213.48 L1907.87 1213.48 L1908.45 1213.48 L1909.04 1213.48 L1909.63 1213.48 L1910.21 1213.48 L1910.8 1213.48 L1911.38 1213.48 L1911.97 1213.48 L1912.56 1213.48 L1913.14 1213.48 L1913.73 1213.48 L1914.32 1213.48 L1914.9 1213.48 L1915.49 1213.48 L1916.08 1213.48 L1916.66 1213.48 L1917.25 1213.48 L1917.83 1213.48 L1918.42 1213.48 L1919.01 1213.48 L1919.59 1213.48 L1920.18 1213.48 L1920.77 1213.48 L1921.35 1213.48 L1921.94 1213.48 L1922.53 1213.48 L1923.11 1213.48 L1923.7 1213.48 L1924.29 1213.48 L1924.87 1213.48 L1925.46 1213.48 L1926.04 1213.48 L1926.63 1213.48 L1927.22 1213.48 L1927.8 1213.48 L1928.39 1213.48 L1928.98 1213.48 L1929.56 1213.48 L1930.15 1213.48 L1930.74 1213.48 L1931.32 1213.48 L1931.91 1213.48 L1932.5 1213.48 L1933.08 1213.48 L1933.67 1213.48 L1934.25 1213.48 L1934.84 1213.48 L1935.43 1213.48 L1936.01 1213.48 L1936.6 1213.48 L1937.19 1213.48 L1937.77 1213.48 L1938.36 1213.48 L1938.95 1213.48 L1939.53 1213.48 L1940.12 1213.48 L1940.71 1213.48 L1941.29 1213.48 L1941.88 1213.48 L1942.46 1213.48 L1943.05 1213.48 L1943.64 1213.48 L1944.22 1213.48 L1944.81 1213.48 L1945.4 1213.48 L1945.98 1213.48 L1946.57 1213.48 L1947.16 1213.48 L1947.74 1213.48 L1948.33 1213.48 L1948.91 1213.48 L1949.5 1213.48 L1950.09 1213.48 L1950.67 1213.48 L1951.26 1213.48 L1951.85 1213.48 L1952.43 1213.48 L1953.02 1213.48 L1953.61 1213.48 L1954.19 1213.48 L1954.78 1213.48 L1955.37 1213.48 L1955.95 1213.48 L1956.54 1213.48 L1957.12 1213.48 L1957.71 1213.48 L1958.3 1213.48 L1958.88 1213.48 L1959.47 1213.48 L1960.06 1213.48 L1960.64 1213.48 L1961.23 1213.48 L1961.82 1213.48 L1962.4 1213.48 L1962.99 1213.48 L1963.58 1213.48 L1964.16 1213.48 L1964.75 1213.48 L1965.33 1213.48 L1965.92 1213.48 L1966.51 1213.48 L1967.09 1213.48 L1967.68 1213.48 L1968.27 1213.48 L1968.85 1213.48 L1969.44 1213.48 L1970.03 1213.48 L1970.61 1213.48 L1971.2 1213.48 L1971.78 1213.48 L1972.37 1213.48 L1972.96 1213.48 L1973.54 1213.48 L1974.13 1213.48 L1974.72 1213.48 L1975.3 1213.48 L1975.89 1213.48 L1976.48 1213.48 L1977.06 1213.48 L1977.65 1213.48 L1978.24 1213.48 L1978.82 1213.48 L1979.41 1213.48 L1979.99 1213.48 L1980.58 1213.48 L1981.17 1213.48 L1981.75 1213.48 L1982.34 1213.48 L1982.93 1213.48 L1983.51 1213.48 L1984.1 1213.48 L1984.69 1213.48 L1985.27 1213.48 L1985.86 1213.48 L1986.45 1213.48 L1987.03 1213.48 L1987.62 1213.48 L1988.2 1213.48 L1988.79 1213.48 L1989.38 1213.48 L1989.96 1213.48 L1990.55 1213.48 L1991.14 1213.48 L1991.72 1213.48 L1992.31 1213.48 L1992.9 1213.48 L1993.48 1213.48 L1994.07 1213.48 L1994.65 1213.48 L1995.24 1213.48 L1995.83 1213.48 L1996.41 1213.48 L1997 1213.48 L1997.59 1213.48 L1998.17 1213.48 L1998.76 1213.48 L1999.35 1213.48 L1999.93 1213.48 L2000.52 1213.48 L2001.11 1213.48 L2001.69 1213.48 L2002.28 1213.48 L2002.86 1213.48 L2003.45 1213.48 L2004.04 1213.48 L2004.62 1213.48 L2005.21 1213.48 L2005.8 1213.48 L2006.38 1213.48 L2006.97 1213.48 L2007.56 1213.48 L2008.14 1213.48 L2008.73 1213.48 L2009.32 1213.48 L2009.9 1213.48 L2010.49 1213.48 L2011.07 1213.48 L2011.66 1213.48 L2012.25 1213.48 L2012.83 1213.48 L2013.42 1213.48 L2014.01 1213.48 L2014.59 1213.48 L2015.18 1213.48 L2015.77 1213.48 L2016.35 1213.48 L2016.94 1213.48 L2017.53 1213.48 L2018.11 1213.48 L2018.7 1213.48 L2019.28 1213.48 L2019.87 1213.48 L2020.46 1213.48 L2021.04 1213.48 L2021.63 1213.48 L2022.22 1213.48 L2022.8 1213.48 L2023.39 1213.48 L2023.98 1213.48 L2024.56 1213.48 L2025.15 1213.48 L2025.73 1213.48 L2026.32 1213.48 L2026.91 1213.48 L2027.49 1213.48 L2028.08 1213.48 L2028.67 1213.48 L2029.25 1213.48 L2029.84 1213.48 L2030.43 1213.48 L2031.01 1213.48 L2031.6 1213.48 L2032.19 1213.48 L2032.77 1213.48 L2033.36 1213.48 L2033.94 1213.48 L2034.53 1213.48 L2035.12 1213.48 L2035.7 1213.48 L2036.29 1213.48 L2036.88 1213.48 L2037.46 1213.48 L2038.05 1213.48 L2038.64 1213.48 L2039.22 1213.48 L2039.81 1213.48 L2040.4 1213.48 L2040.98 1213.48 L2041.57 1213.48 L2042.15 1213.48 L2042.74 1213.48 L2043.33 1213.48 L2043.91 1213.48 L2044.5 1213.48 L2045.09 1213.48 L2045.67 1213.48 L2046.26 1213.48 L2046.85 1213.48 L2047.43 1213.48 L2048.02 1213.48 L2048.6 1213.48 L2049.19 1213.48 L2049.78 1213.48 L2050.36 1213.48 L2050.95 1213.48 L2051.54 1213.48 L2052.12 1213.48 L2052.71 1213.48 L2053.3 1213.48 L2053.88 1213.48 L2054.47 1213.48 L2055.06 1213.48 L2055.64 1213.48 L2056.23 1213.48 L2056.81 1213.48 L2057.4 1213.48 L2057.99 1213.48 L2058.57 1213.48 L2059.16 1213.48 L2059.75 1213.48 L2060.33 1213.48 L2060.92 1213.48 L2061.51 1213.48 L2062.09 1213.48 L2062.68 1213.48 L2063.27 1213.48 L2063.85 1213.48 L2064.44 1213.48 L2065.02 1213.48 L2065.61 1213.48 L2066.2 1213.48 L2066.78 1213.48 L2067.37 1213.48 L2067.96 1213.48 L2068.54 1213.48 L2069.13 1213.48 L2069.72 1213.48 L2070.3 1213.48 L2070.89 1213.48 L2071.48 1213.48 L2072.06 1213.48 L2072.65 1213.48 L2073.23 1213.48 L2073.82 1213.48 L2074.41 1213.48 L2074.99 1213.48 L2075.58 1213.48 L2076.17 1213.48 L2076.75 1213.48 L2077.34 1213.48 L2077.93 1213.48 L2078.51 1213.48 L2079.1 1213.48 L2079.68 1213.48 L2080.27 1213.48 L2080.86 1213.48 L2081.44 1213.48 L2082.03 1213.48 L2082.62 1213.48 L2083.2 1213.48 L2083.79 1213.48 L2084.38 1213.48 L2084.96 1213.48 L2085.55 1213.48 L2086.14 1213.48 L2086.72 1213.48 L2087.31 1213.48 L2087.89 1213.48 L2088.48 1213.48 L2089.07 1213.48 L2089.65 1213.48 L2090.24 1213.48 L2090.83 1213.48 L2091.41 1213.48 L2092 1213.48 L2092.59 1213.48 L2093.17 1213.48 L2093.76 1213.48 L2094.35 1213.48 L2094.93 1213.48 L2095.52 1213.48 L2096.1 1213.48 L2096.69 1213.48 L2097.28 1213.48 L2097.86 1213.48 L2098.45 1213.48 L2099.04 1213.48 L2099.62 1213.48 L2100.21 1213.48 L2100.8 1213.48 L2101.38 1213.48 L2101.97 1213.48 L2102.55 1213.48 L2103.14 1213.48 L2103.73 1213.48 L2104.31 1213.48 L2104.9 1213.48 L2105.49 1213.48 L2106.07 1213.48 L2106.66 1213.48 L2107.25 1213.48 L2107.83 1213.48 L2108.42 1213.48 L2109.01 1213.48 L2109.59 1213.48 L2110.18 1213.48 L2110.76 1213.48 L2111.35 1213.48 L2111.94 1213.48 L2112.52 1213.48 L2113.11 1213.48 L2113.7 1213.48 L2114.28 1213.48 L2114.87 1213.48 L2115.46 1213.48 L2116.04 1213.48 L2116.63 1213.48 L2117.22 1213.48 L2117.8 1213.48 L2118.39 1213.48 L2118.97 1213.48 L2119.56 1213.48 L2120.15 1213.48 L2120.73 1213.48 L2121.32 1213.48 L2121.91 1213.48 L2122.49 1213.48 L2123.08 1213.48 L2123.67 1213.48 L2124.25 1213.48 L2124.84 1213.48 L2125.42 1213.48 L2126.01 1213.48 L2126.6 1213.48 L2127.18 1213.48 L2127.77 1213.48 L2128.36 1213.48 L2128.94 1213.48 L2129.53 1213.48 L2130.12 1213.48 L2130.7 1213.48 L2131.29 1213.48 L2131.88 1213.48 L2132.46 1213.48 L2133.05 1213.48 L2133.63 1213.48 L2134.22 1213.48 L2134.81 1213.48 L2135.39 1213.48 L2135.98 1213.48 L2136.57 1213.48 L2137.15 1213.48 L2137.74 1213.48 L2138.33 1213.48 L2138.91 1213.48 L2139.5 1213.48 L2140.09 1213.48 L2140.67 1213.48 L2141.26 1213.48 L2141.84 1213.48 L2142.43 1213.48 L2143.02 1213.48 L2143.6 1213.48 L2144.19 1213.48 L2144.78 1213.48 L2145.36 1213.48 L2145.95 1213.48 L2146.54 1213.48 L2147.12 1213.48 L2147.71 1213.48 L2148.3 1213.48 L2148.88 1213.48 L2149.47 1213.48 L2150.05 1213.48 L2150.64 1213.48 L2151.23 1213.48 L2151.81 1213.48 L2152.4 1213.48 L2152.99 1213.48 L2153.57 1213.48 L2154.16 1213.48 L2154.75 1213.48 L2155.33 1213.48 L2155.92 1213.48 L2156.5 1213.48 L2157.09 1213.48 L2157.68 1213.48 L2158.26 1213.48 L2158.26 1213.35 L2157.68 1213.35 L2157.09 1213.35 L2156.5 1213.35 L2155.92 1213.35 L2155.33 1213.35 L2154.75 1213.35 L2154.16 1213.35 L2153.57 1213.35 L2152.99 1213.35 L2152.4 1213.35 L2151.81 1213.35 L2151.23 1213.35 L2150.64 1213.35 L2150.05 1213.35 L2149.47 1213.35 L2148.88 1213.35 L2148.3 1213.35 L2147.71 1213.35 L2147.12 1213.35 L2146.54 1213.35 L2145.95 1213.35 L2145.36 1213.35 L2144.78 1213.35 L2144.19 1213.35 L2143.6 1213.35 L2143.02 1213.35 L2142.43 1213.35 L2141.84 1213.35 L2141.26 1213.35 L2140.67 1213.35 L2140.09 1213.35 L2139.5 1213.35 L2138.91 1213.35 L2138.33 1213.35 L2137.74 1213.35 L2137.15 1213.35 L2136.57 1213.35 L2135.98 1213.35 L2135.39 1213.35 L2134.81 1213.35 L2134.22 1213.35 L2133.63 1213.35 L2133.05 1213.35 L2132.46 1213.35 L2131.88 1213.35 L2131.29 1213.35 L2130.7 1213.35 L2130.12 1213.35 L2129.53 1213.35 L2128.94 1213.35 L2128.36 1213.35 L2127.77 1213.35 L2127.18 1213.35 L2126.6 1213.35 L2126.01 1213.35 L2125.42 1213.35 L2124.84 1213.35 L2124.25 1213.35 L2123.67 1213.35 L2123.08 1213.35 L2122.49 1213.35 L2121.91 1213.35 L2121.32 1213.35 L2120.73 1213.35 L2120.15 1213.35 L2119.56 1213.35 L2118.97 1213.35 L2118.39 1213.35 L2117.8 1213.35 L2117.22 1213.35 L2116.63 1213.35 L2116.04 1213.35 L2115.46 1213.35 L2114.87 1213.35 L2114.28 1213.35 L2113.7 1213.35 L2113.11 1213.35 L2112.52 1213.35 L2111.94 1213.35 L2111.35 1213.35 L2110.76 1213.35 L2110.18 1213.35 L2109.59 1213.35 L2109.01 1213.35 L2108.42 1213.35 L2107.83 1213.35 L2107.25 1213.35 L2106.66 1213.35 L2106.07 1213.35 L2105.49 1213.35 L2104.9 1213.35 L2104.31 1213.35 L2103.73 1213.35 L2103.14 1213.35 L2102.55 1213.35 L2101.97 1213.35 L2101.38 1213.35 L2100.8 1213.35 L2100.21 1213.35 L2099.62 1213.35 L2099.04 1213.35 L2098.45 1213.35 L2097.86 1213.35 L2097.28 1213.35 L2096.69 1213.35 L2096.1 1213.35 L2095.52 1213.35 L2094.93 1213.35 L2094.35 1213.35 L2093.76 1213.35 L2093.17 1213.35 L2092.59 1213.35 L2092 1213.35 L2091.41 1213.35 L2090.83 1213.35 L2090.24 1213.35 L2089.65 1213.35 L2089.07 1213.35 L2088.48 1213.35 L2087.89 1213.35 L2087.31 1213.35 L2086.72 1213.35 L2086.14 1213.35 L2085.55 1213.35 L2084.96 1213.35 L2084.38 1213.35 L2083.79 1213.35 L2083.2 1213.35 L2082.62 1213.35 L2082.03 1213.35 L2081.44 1213.35 L2080.86 1213.35 L2080.27 1213.35 L2079.68 1213.35 L2079.1 1213.35 L2078.51 1213.35 L2077.93 1213.35 L2077.34 1213.35 L2076.75 1213.35 L2076.17 1213.35 L2075.58 1213.35 L2074.99 1213.35 L2074.41 1213.35 L2073.82 1213.35 L2073.23 1213.35 L2072.65 1213.35 L2072.06 1213.35 L2071.48 1213.35 L2070.89 1213.35 L2070.3 1213.35 L2069.72 1213.35 L2069.13 1213.35 L2068.54 1213.35 L2067.96 1213.35 L2067.37 1213.35 L2066.78 1213.35 L2066.2 1213.35 L2065.61 1213.35 L2065.02 1213.35 L2064.44 1213.35 L2063.85 1213.35 L2063.27 1213.35 L2062.68 1213.35 L2062.09 1213.35 L2061.51 1213.35 L2060.92 1213.35 L2060.33 1213.35 L2059.75 1213.35 L2059.16 1213.35 L2058.57 1213.35 L2057.99 1213.35 L2057.4 1213.35 L2056.81 1213.35 L2056.23 1213.35 L2055.64 1213.35 L2055.06 1213.35 L2054.47 1213.35 L2053.88 1213.35 L2053.3 1213.35 L2052.71 1213.35 L2052.12 1213.35 L2051.54 1213.35 L2050.95 1213.35 L2050.36 1213.35 L2049.78 1213.35 L2049.19 1213.35 L2048.6 1213.35 L2048.02 1213.35 L2047.43 1213.35 L2046.85 1213.35 L2046.26 1213.35 L2045.67 1213.35 L2045.09 1213.35 L2044.5 1213.35 L2043.91 1213.35 L2043.33 1213.35 L2042.74 1213.35 L2042.15 1213.35 L2041.57 1213.35 L2040.98 1213.35 L2040.4 1213.35 L2039.81 1213.35 L2039.22 1213.35 L2038.64 1213.35 L2038.05 1213.35 L2037.46 1213.35 L2036.88 1213.35 L2036.29 1213.35 L2035.7 1213.35 L2035.12 1213.35 L2034.53 1213.35 L2033.94 1213.35 L2033.36 1213.35 L2032.77 1213.35 L2032.19 1213.35 L2031.6 1213.35 L2031.01 1213.35 L2030.43 1213.35 L2029.84 1213.35 L2029.25 1213.35 L2028.67 1213.35 L2028.08 1213.35 L2027.49 1213.35 L2026.91 1213.35 L2026.32 1213.35 L2025.73 1213.35 L2025.15 1213.35 L2024.56 1213.35 L2023.98 1213.35 L2023.39 1213.35 L2022.8 1213.35 L2022.22 1213.35 L2021.63 1213.35 L2021.04 1213.35 L2020.46 1213.35 L2019.87 1213.35 L2019.28 1213.35 L2018.7 1213.35 L2018.11 1213.35 L2017.53 1213.35 L2016.94 1213.35 L2016.35 1213.35 L2015.77 1213.35 L2015.18 1213.35 L2014.59 1213.35 L2014.01 1213.35 L2013.42 1213.35 L2012.83 1213.35 L2012.25 1213.35 L2011.66 1213.35 L2011.07 1213.35 L2010.49 1213.35 L2009.9 1213.35 L2009.32 1213.35 L2008.73 1213.35 L2008.14 1213.35 L2007.56 1213.35 L2006.97 1213.35 L2006.38 1213.35 L2005.8 1213.35 L2005.21 1213.35 L2004.62 1213.35 L2004.04 1213.35 L2003.45 1213.35 L2002.86 1213.35 L2002.28 1213.35 L2001.69 1213.35 L2001.11 1213.35 L2000.52 1213.35 L1999.93 1213.35 L1999.35 1213.35 L1998.76 1213.35 L1998.17 1213.35 L1997.59 1213.35 L1997 1213.35 L1996.41 1213.35 L1995.83 1213.35 L1995.24 1213.35 L1994.65 1213.35 L1994.07 1213.35 L1993.48 1213.35 L1992.9 1213.35 L1992.31 1213.35 L1991.72 1213.35 L1991.14 1213.35 L1990.55 1213.35 L1989.96 1213.35 L1989.38 1213.35 L1988.79 1213.35 L1988.2 1213.35 L1987.62 1213.35 L1987.03 1213.35 L1986.45 1213.35 L1985.86 1213.35 L1985.27 1213.35 L1984.69 1213.35 L1984.1 1213.35 L1983.51 1213.35 L1982.93 1213.35 L1982.34 1213.35 L1981.75 1213.35 L1981.17 1213.35 L1980.58 1213.35 L1979.99 1213.35 L1979.41 1213.35 L1978.82 1213.35 L1978.24 1213.35 L1977.65 1213.35 L1977.06 1213.35 L1976.48 1213.35 L1975.89 1213.35 L1975.3 1213.35 L1974.72 1213.35 L1974.13 1213.35 L1973.54 1213.35 L1972.96 1213.35 L1972.37 1213.35 L1971.78 1213.35 L1971.2 1213.35 L1970.61 1213.35 L1970.03 1213.35 L1969.44 1213.35 L1968.85 1213.35 L1968.27 1213.35 L1967.68 1213.35 L1967.09 1213.35 L1966.51 1213.35 L1965.92 1213.35 L1965.33 1213.35 L1964.75 1213.35 L1964.16 1213.35 L1963.58 1213.35 L1962.99 1213.35 L1962.4 1213.35 L1961.82 1213.35 L1961.23 1213.35 L1960.64 1213.35 L1960.06 1213.35 L1959.47 1213.35 L1958.88 1213.35 L1958.3 1213.35 L1957.71 1213.35 L1957.12 1213.35 L1956.54 1213.35 L1955.95 1213.35 L1955.37 1213.35 L1954.78 1213.35 L1954.19 1213.35 L1953.61 1213.35 L1953.02 1213.35 L1952.43 1213.35 L1951.85 1213.35 L1951.26 1213.35 L1950.67 1213.35 L1950.09 1213.35 L1949.5 1213.35 L1948.91 1213.35 L1948.33 1213.35 L1947.74 1213.35 L1947.16 1213.35 L1946.57 1213.35 L1945.98 1213.35 L1945.4 1213.35 L1944.81 1213.35 L1944.22 1213.35 L1943.64 1213.35 L1943.05 1213.35 L1942.46 1213.35 L1941.88 1213.35 L1941.29 1213.35 L1940.71 1213.35 L1940.12 1213.35 L1939.53 1213.35 L1938.95 1213.35 L1938.36 1213.35 L1937.77 1213.35 L1937.19 1213.35 L1936.6 1213.35 L1936.01 1213.35 L1935.43 1213.35 L1934.84 1213.35 L1934.25 1213.35 L1933.67 1213.35 L1933.08 1213.35 L1932.5 1213.35 L1931.91 1213.35 L1931.32 1213.35 L1930.74 1213.35 L1930.15 1213.35 L1929.56 1213.35 L1928.98 1213.35 L1928.39 1213.35 L1927.8 1213.35 L1927.22 1213.35 L1926.63 1213.35 L1926.04 1213.35 L1925.46 1213.35 L1924.87 1213.35 L1924.29 1213.35 L1923.7 1213.35 L1923.11 1213.35 L1922.53 1213.35 L1921.94 1213.35 L1921.35 1213.35 L1920.77 1213.35 L1920.18 1213.35 L1919.59 1213.35 L1919.01 1213.35 L1918.42 1213.35 L1917.83 1213.35 L1917.25 1213.35 L1916.66 1213.35 L1916.08 1213.35 L1915.49 1213.35 L1914.9 1213.35 L1914.32 1213.35 L1913.73 1213.35 L1913.14 1213.35 L1912.56 1213.35 L1911.97 1213.35 L1911.38 1213.35 L1910.8 1213.35 L1910.21 1213.35 L1909.63 1213.35 L1909.04 1213.35 L1908.45 1213.35 L1907.87 1213.35 L1907.28 1213.35 L1906.69 1213.35 L1906.11 1213.35 L1905.52 1213.35 L1904.93 1213.35 L1904.35 1213.35 L1903.76 1213.35 L1903.17 1213.35 L1902.59 1213.35 L1902 1213.35 L1901.42 1213.35 L1900.83 1213.35 L1900.24 1213.35 L1899.66 1213.35 L1899.07 1213.35 L1898.48 1213.35 L1897.9 1213.35 L1897.31 1213.35 L1896.72 1213.35 L1896.14 1213.35 L1895.55 1213.35 L1894.96 1213.35 L1894.38 1213.35 L1893.79 1213.35 L1893.21 1213.35 L1892.62 1213.35 L1892.03 1213.35 L1891.45 1213.35 L1890.86 1213.35 L1890.27 1213.35 L1889.69 1213.35 L1889.1 1213.35 L1888.51 1213.35 L1887.93 1213.35 L1887.34 1213.35 L1886.76 1213.35 L1886.17 1213.35 L1885.58 1213.35 L1885 1213.35 L1884.41 1213.35 L1883.82 1213.35 L1883.24 1213.35 L1882.65 1213.35 L1882.06 1213.35 L1881.48 1213.35 L1880.89 1213.35 L1880.3 1213.35 L1879.72 1213.35 L1879.13 1213.35 L1878.55 1213.35 L1877.96 1213.35 L1877.37 1213.35 L1876.79 1213.35 L1876.2 1213.35 L1875.61 1213.35 L1875.03 1213.35 L1874.44 1213.35 L1873.85 1213.35 L1873.27 1213.35 L1872.68 1213.35 L1872.09 1213.35 L1871.51 1213.35 L1870.92 1213.35 L1870.34 1213.35 L1869.75 1213.35 L1869.16 1213.35 L1868.58 1213.35 L1867.99 1213.35 L1867.4 1213.35 L1866.82 1213.35 L1866.23 1213.35 L1865.64 1213.35 L1865.06 1213.35 L1864.47 1213.35 L1863.88 1213.35 L1863.3 1213.35 L1862.71 1213.35 L1862.13 1213.35 L1861.54 1213.35 L1860.95 1213.35 L1860.37 1213.35 L1859.78 1213.35 L1859.19 1213.35 L1858.61 1213.35 L1858.02 1213.35 L1857.43 1213.35 L1856.85 1213.35 L1856.26 1213.35 L1855.68 1213.35 L1855.09 1213.35 L1854.5 1213.35 L1853.92 1213.35 L1853.33 1213.35 L1852.74 1213.35 L1852.16 1213.35 L1851.57 1213.35 L1850.98 1213.35 L1850.4 1213.35 L1849.81 1213.35 L1849.22 1213.35 L1848.64 1213.35 L1848.05 1213.35 L1847.47 1213.35 L1846.88 1213.35 L1846.29 1213.35 L1845.71 1213.35 L1845.12 1213.35 L1844.53 1213.35 L1843.95 1213.35 L1843.36 1213.35 L1842.77 1213.35 L1842.19 1213.35 L1841.6 1213.35 L1841.01 1213.35 L1840.43 1213.35 L1839.84 1213.35 L1839.26 1213.35 L1838.67 1213.35 L1838.08 1213.35 L1837.5 1213.35 L1836.91 1213.35 L1836.32 1213.35 L1835.74 1213.35 L1835.15 1213.35 L1834.56 1213.35 L1833.98 1213.35 L1833.39 1213.35 L1832.81 1213.35 L1832.22 1213.35 L1831.63 1213.35 L1831.05 1213.35 L1830.46 1213.35 L1829.87 1213.35 L1829.29 1213.35 L1828.7 1213.35 L1828.11 1213.35 L1827.53 1213.35 L1826.94 1213.35 L1826.35 1213.35 L1825.77 1213.35 L1825.18 1213.35 L1824.6 1213.35 L1824.01 1213.35 L1823.42 1213.35 L1822.84 1213.35 L1822.25 1213.35 L1821.66 1213.35 L1821.08 1213.35 L1820.49 1213.35 L1819.9 1213.35 L1819.32 1213.35 L1818.73 1213.35 L1818.14 1213.35 L1817.56 1213.35 L1816.97 1213.35 L1816.39 1213.35 L1815.8 1213.35 L1815.21 1213.35 L1814.63 1213.35 L1814.04 1213.35 L1813.45 1213.35 L1812.87 1213.35 L1812.28 1213.35 L1811.69 1213.35 L1811.11 1213.35 L1810.52 1213.35 L1809.94 1213.35 L1809.35 1213.35 L1808.76 1213.35 L1808.18 1213.35 L1807.59 1213.35 L1807 1213.35 L1806.42 1213.35 L1805.83 1213.35 L1805.24 1213.35 L1804.66 1213.35 L1804.07 1213.35 L1803.48 1213.35 L1802.9 1213.35 L1802.31 1213.35 L1801.73 1213.35 L1801.14 1213.35 L1800.55 1213.35 L1799.97 1213.35 L1799.38 1213.35 L1798.79 1213.35 L1798.21 1213.35 L1797.62 1213.35 L1797.03 1213.35 L1796.45 1213.35 L1795.86 1213.35 L1795.27 1213.35 L1794.69 1213.35 L1794.1 1213.35 L1793.52 1213.35 L1792.93 1213.35 L1792.34 1213.35 L1791.76 1213.35 L1791.17 1213.35 L1790.58 1213.35 L1790 1213.35 L1789.41 1213.35 L1788.82 1213.35 L1788.24 1213.35 L1787.65 1213.35 L1787.06 1213.35 L1786.48 1213.35 L1785.89 1213.35 L1785.31 1213.35 L1784.72 1213.35 L1784.13 1213.35 L1783.55 1213.35 L1782.96 1213.35 L1782.37 1213.35 L1781.79 1213.35 L1781.2 1213.35 L1780.61 1213.35 L1780.03 1213.35 L1779.44 1213.35 L1778.86 1213.35 L1778.27 1213.35 L1777.68 1213.35 L1777.1 1213.35 L1776.51 1213.35 L1775.92 1213.35 L1775.34 1213.35 L1774.75 1213.35 L1774.16 1213.35 L1773.58 1213.35 L1772.99 1213.35 L1772.4 1213.35 L1771.82 1213.35 L1771.23 1213.35 L1770.65 1213.35 L1770.06 1213.35 L1769.47 1213.35 L1768.89 1213.35 L1768.3 1213.35 L1767.71 1213.35 L1767.13 1213.35 L1766.54 1213.35 L1765.95 1213.35 L1765.37 1213.35 L1764.78 1213.35 L1764.19 1213.35 L1763.61 1213.35 L1763.02 1213.35 L1762.44 1213.35 L1761.85 1213.35 L1761.26 1213.35 L1760.68 1213.35 L1760.09 1213.35 L1759.5 1213.35 L1758.92 1213.35 L1758.33 1213.35 L1757.74 1213.35 L1757.16 1213.35 L1756.57 1213.35 L1755.99 1213.35 L1755.4 1213.35 L1754.81 1213.35 L1754.23 1213.35 L1753.64 1213.35 L1753.05 1213.35 L1752.47 1213.35 L1751.88 1213.35 L1751.29 1213.35 L1750.71 1213.35 L1750.12 1213.35 L1749.53 1213.35 L1748.95 1213.35 L1748.36 1213.35 L1747.78 1213.35 L1747.19 1213.35 L1746.6 1213.35 L1746.02 1213.35 L1745.43 1213.35 L1744.84 1213.35 L1744.26 1213.35 L1743.67 1213.35 L1743.08 1213.35 L1742.5 1213.35 L1741.91 1213.35 L1741.32 1213.35 L1740.74 1213.35 L1740.15 1213.35 L1739.57 1213.35 L1738.98 1213.35 L1738.39 1213.35 L1737.81 1213.35 L1737.22 1213.35 L1736.63 1213.35 L1736.05 1213.35 L1735.46 1213.35 L1734.87 1213.35 L1734.29 1213.35 L1733.7 1213.35 L1733.11 1213.35 L1732.53 1213.35 L1731.94 1213.35 L1731.36 1213.35 L1730.77 1213.35 L1730.18 1213.35 L1729.6 1213.35 L1729.01 1213.35 L1728.42 1213.35 L1727.84 1213.35 L1727.25 1213.35 L1726.66 1213.35 L1726.08 1213.35 L1725.49 1213.35 L1724.91 1213.35 L1724.32 1213.35 L1723.73 1213.35 L1723.15 1213.35 L1722.56 1213.35 L1721.97 1213.35 L1721.39 1213.35 L1720.8 1213.35 L1720.21 1213.35 L1719.63 1213.35 L1719.04 1213.35 L1718.45 1213.35 L1717.87 1213.35 L1717.28 1213.35 L1716.7 1213.35 L1716.11 1213.35 L1715.52 1213.35 L1714.94 1213.35 L1714.35 1213.35 L1713.76 1213.35 L1713.18 1213.35 L1712.59 1213.35 L1712 1213.35 L1711.42 1213.35 L1710.83 1213.35 L1710.24 1213.35 L1709.66 1213.35 L1709.07 1213.35 L1708.49 1213.35 L1707.9 1213.35 L1707.31 1213.35 L1706.73 1213.35 L1706.14 1213.35 L1705.55 1213.35 L1704.97 1213.35 L1704.38 1213.35 L1703.79 1213.35 L1703.21 1213.35 L1702.62 1213.35 L1702.04 1213.35 L1701.45 1213.35 L1700.86 1213.35 L1700.28 1213.35 L1699.69 1213.35 L1699.1 1213.35 L1698.52 1213.35 L1697.93 1213.35 L1697.34 1213.35 L1696.76 1213.35 L1696.17 1213.35 L1695.58 1213.35 L1695 1213.35 L1694.41 1213.35 L1693.83 1213.35 L1693.24 1213.35 L1692.65 1213.35 L1692.07 1213.35 L1691.48 1213.35 L1690.89 1213.35 L1690.31 1213.35 L1689.72 1213.35 L1689.13 1213.35 L1688.55 1213.35 L1687.96 1213.35 L1687.37 1213.35 L1686.79 1213.35 L1686.2 1213.35 L1685.62 1213.35 L1685.03 1213.35 L1684.44 1213.35 L1683.86 1213.35 L1683.27 1213.35 L1682.68 1213.35 L1682.1 1213.35 L1681.51 1213.35 L1680.92 1213.35 L1680.34 1213.35 L1679.75 1213.35 L1679.17 1213.35 L1678.58 1213.35 L1677.99 1213.35 L1677.41 1213.35 L1676.82 1213.35 L1676.23 1213.35 L1675.65 1213.35 L1675.06 1213.35 L1674.47 1213.35 L1673.89 1213.35 L1673.3 1213.35 L1672.71 1213.35 L1672.13 1213.35 L1671.54 1213.35 L1670.96 1213.35 L1670.37 1213.35 L1669.78 1213.35 L1669.2 1213.35 L1668.61 1213.35 L1668.02 1213.35 L1667.44 1213.35 L1666.85 1213.35 L1666.26 1213.35 L1665.68 1213.35 L1665.09 1213.35 L1664.5 1213.35 L1663.92 1213.35 L1663.33 1213.35 L1662.75 1213.35 L1662.16 1213.35 L1661.57 1213.35 L1660.99 1213.35 L1660.4 1213.35 L1659.81 1213.35 L1659.23 1213.35 L1658.64 1213.35 L1658.05 1213.35 L1657.47 1213.35 L1656.88 1213.35 L1656.29 1213.35 L1655.71 1213.35 L1655.12 1213.35 L1654.54 1213.35 L1653.95 1213.35 L1653.36 1213.35 L1652.78 1213.35 L1652.19 1213.35 L1651.6 1213.35 L1651.02 1213.35 L1650.43 1213.35 L1649.84 1213.35 L1649.26 1213.35 L1648.67 1213.35 L1648.09 1213.35 L1647.5 1213.35 L1646.91 1213.35 L1646.33 1213.35 L1645.74 1213.35 L1645.15 1213.35 L1644.57 1213.35 L1643.98 1213.35 L1643.39 1213.35 L1642.81 1213.35 L1642.22 1213.35 L1641.63 1213.35 L1641.05 1213.35 L1640.46 1213.35 L1639.88 1213.35 L1639.29 1213.35 L1638.7 1213.35 L1638.12 1213.35 L1637.53 1213.35 L1636.94 1213.35 L1636.36 1213.35 L1635.77 1213.35 L1635.18 1213.35 L1634.6 1213.35 L1634.01 1213.35 L1633.42 1213.35 L1632.84 1213.35 L1632.25 1213.35 L1631.67 1213.35 L1631.08 1213.35 L1630.49 1213.35 L1629.91 1213.35 L1629.32 1213.35 L1628.73 1213.35 L1628.15 1213.35 L1627.56 1213.35 L1626.97 1213.35 L1626.39 1213.35 L1625.8 1213.35 L1625.22 1213.35 L1624.63 1213.35 L1624.04 1213.35 L1623.46 1213.35 L1622.87 1213.35 L1622.28 1213.35 L1621.7 1213.35 L1621.11 1213.35 L1620.52 1213.35 L1619.94 1213.35 L1619.35 1213.35 L1618.76 1213.35 L1618.18 1213.35 L1617.59 1213.35 L1617.01 1213.35 L1616.42 1213.35 L1615.83 1213.35 L1615.25 1213.35 L1614.66 1213.35 L1614.07 1213.35 L1613.49 1213.35 L1612.9 1213.35 L1612.31 1213.35 L1611.73 1213.35 L1611.14 1213.35 L1610.55 1213.35 L1609.97 1213.35 L1609.38 1213.35 L1608.8 1213.35 L1608.21 1213.35 L1607.62 1213.35 L1607.04 1213.35 L1606.45 1213.35 L1605.86 1213.35 L1605.28 1213.35 L1604.69 1213.35 L1604.1 1213.35 L1603.52 1213.35 L1602.93 1213.35 L1602.34 1213.35 L1601.76 1213.35 L1601.17 1213.35 L1600.59 1213.35 L1600 1213.35 L1599.41 1213.35 L1598.83 1213.35 L1598.24 1213.35 L1597.65 1213.35 L1597.07 1213.35 L1596.48 1213.35 L1595.89 1213.35 L1595.31 1213.35 L1594.72 1213.35 L1594.14 1213.35 L1593.55 1213.35 L1592.96 1213.35 L1592.38 1213.35 L1591.79 1213.35 L1591.2 1213.35 L1590.62 1213.35 L1590.03 1213.35 L1589.44 1213.35 L1588.86 1213.35 L1588.27 1213.35 L1587.68 1213.35 L1587.1 1213.35 L1586.51 1213.35 L1585.93 1213.35 L1585.34 1213.35 L1584.75 1213.35 L1584.17 1213.35 L1583.58 1213.35 L1582.99 1213.35 L1582.41 1213.35 L1581.82 1213.35 L1581.23 1213.35 L1580.65 1213.35 L1580.06 1213.35 L1579.47 1213.35 L1578.89 1213.35 L1578.3 1213.35 L1577.72 1213.35 L1577.13 1213.35 L1576.54 1213.35 L1575.96 1213.35 L1575.37 1213.35 L1574.78 1213.35 L1574.2 1213.35 L1573.61 1213.35 L1573.02 1213.35 L1572.44 1213.35 L1571.85 1213.35 L1571.27 1213.35 L1570.68 1213.35 L1570.09 1213.35 L1569.51 1213.35 L1568.92 1213.35 L1568.33 1213.35 L1567.75 1213.35 L1567.16 1213.35 L1566.57 1213.35 L1565.99 1213.35 L1565.4 1213.35 L1564.81 1213.35 L1564.23 1213.35 L1563.64 1213.35 L1563.06 1213.35 L1562.47 1213.35 L1561.88 1213.35 L1561.3 1213.35 L1560.71 1213.35 L1560.12 1213.35 L1559.54 1213.35 L1558.95 1213.35 L1558.36 1213.35 L1557.78 1213.35 L1557.19 1213.35 L1556.6 1213.35 L1556.02 1213.35 L1555.43 1213.35 L1554.85 1213.35 L1554.26 1213.35 L1553.67 1213.35 L1553.09 1213.35 L1552.5 1213.35 L1551.91 1213.35 L1551.33 1213.35 L1550.74 1213.35 L1550.15 1213.35 L1549.57 1213.35 L1548.98 1213.35 L1548.4 1213.35 L1547.81 1213.35 L1547.22 1213.35 L1546.64 1213.35 L1546.05 1213.35 L1545.46 1213.35 L1544.88 1213.35 L1544.29 1213.35 L1543.7 1213.35 L1543.12 1213.35 L1542.53 1213.35 L1541.94 1213.35 L1541.36 1213.35 L1540.77 1213.35 L1540.19 1213.35 L1539.6 1213.35 L1539.01 1213.35 L1538.43 1213.35 L1537.84 1213.35 L1537.25 1213.35 L1536.67 1213.35 L1536.08 1213.35 L1535.49 1213.35 L1534.91 1213.35 L1534.32 1213.35 L1533.73 1213.35 L1533.15 1213.35 L1532.56 1213.35 L1531.98 1213.35 L1531.39 1213.35 L1530.8 1213.35 L1530.22 1213.35 L1529.63 1213.35 L1529.04 1213.35 L1528.46 1213.35 L1527.87 1213.35 L1527.28 1213.35 L1526.7 1213.35 L1526.11 1213.35 L1525.52 1213.35 L1524.94 1213.35 L1524.35 1213.35 L1523.77 1213.35 L1523.18 1213.35 L1522.59 1213.35 L1522.01 1213.35 L1521.42 1213.35 L1520.83 1213.35 L1520.25 1213.35 L1519.66 1213.35 L1519.07 1213.35 L1518.49 1213.35 L1517.9 1213.35 L1517.32 1213.35 L1516.73 1213.35 L1516.14 1213.35 L1515.56 1213.35 L1514.97 1213.35 L1514.38 1213.35 L1513.8 1213.35 L1513.21 1213.35 L1512.62 1213.35 L1512.04 1213.35 L1511.45 1213.35 L1510.86 1213.35 L1510.28 1213.35 L1509.69 1213.35 L1509.11 1213.35 L1508.52 1213.35 L1507.93 1213.35 L1507.35 1213.35 L1506.76 1213.35 L1506.17 1213.35 L1505.59 1213.35 L1505 1213.35 L1504.41 1213.35 L1503.83 1213.35 L1503.24 1213.35 L1502.65 1213.35 L1502.07 1213.35 L1501.48 1213.35 L1500.9 1213.35 L1500.31 1213.35 L1499.72 1213.35 L1499.14 1213.35 L1498.55 1213.35 L1497.96 1213.35 L1497.38 1213.35 L1496.79 1213.35 L1496.2 1213.35 L1495.62 1213.35 L1495.03 1213.35 L1494.45 1213.35 L1493.86 1213.35 L1493.27 1213.35 L1492.69 1213.35 L1492.1 1213.35 L1491.51 1213.35 L1490.93 1213.35 L1490.34 1213.35 L1489.75 1213.35 L1489.17 1213.35 L1488.58 1213.35 L1487.99 1213.35 L1487.41 1213.35 L1486.82 1213.35 L1486.24 1213.35 L1485.65 1213.35 L1485.06 1213.35 L1484.48 1213.35 L1483.89 1213.35 L1483.3 1213.35 L1482.72 1213.35 L1482.13 1213.35 L1481.54 1213.35 L1480.96 1213.35 L1480.37 1213.35 L1479.78 1213.35 L1479.2 1213.35 L1478.61 1213.35 L1478.03 1213.35 L1477.44 1213.35 L1476.85 1213.35 L1476.27 1213.35 L1475.68 1213.35 L1475.09 1213.35 L1474.51 1213.35 L1473.92 1213.35 L1473.33 1213.35 L1472.75 1213.35 L1472.16 1213.35 L1471.57 1213.35 L1470.99 1213.35 L1470.4 1213.35 L1469.82 1213.35 L1469.23 1213.35 L1468.64 1213.35 L1468.06 1213.35 L1467.47 1213.35 L1466.88 1213.35 L1466.3 1213.35 L1465.71 1213.35 L1465.12 1213.35 L1464.54 1213.35 L1463.95 1213.35 L1463.37 1213.35 L1462.78 1213.35 L1462.19 1213.35 L1461.61 1213.35 L1461.02 1213.35 L1460.43 1213.35 L1459.85 1213.35 L1459.26 1213.35 L1458.67 1213.35 L1458.09 1213.35 L1457.5 1213.35 L1456.91 1213.35 L1456.33 1213.35 L1455.74 1213.35 L1455.16 1213.35 L1454.57 1213.35 L1453.98 1213.35 L1453.4 1213.35 L1452.81 1213.35 L1452.22 1213.35 L1451.64 1213.35 L1451.05 1213.35 L1450.46 1213.35 L1449.88 1213.35 L1449.29 1213.35 L1448.7 1213.35 L1448.12 1213.35 L1447.53 1213.35 L1446.95 1213.35 L1446.36 1213.35 L1445.77 1213.35 L1445.19 1213.35 L1444.6 1213.35 L1444.01 1213.35 L1443.43 1213.35 L1442.84 1213.35 L1442.25 1213.35 L1441.67 1213.35 L1441.08 1213.35 L1440.5 1213.35 L1439.91 1213.35 L1439.32 1213.35 L1438.74 1213.35 L1438.15 1213.35 L1437.56 1213.35 L1436.98 1213.35 L1436.39 1213.35 L1435.8 1213.35 L1435.22 1213.35 L1434.63 1213.35 L1434.04 1213.35 L1433.46 1213.35 L1432.87 1213.35 L1432.29 1213.35 L1431.7 1213.35 L1431.11 1213.35 L1430.53 1213.35 L1429.94 1213.35 L1429.35 1213.35 L1428.77 1213.35 L1428.18 1213.35 L1427.59 1213.35 L1427.01 1213.35 L1426.42 1213.35 L1425.83 1213.35 L1425.25 1213.35 L1424.66 1213.35 L1424.08 1213.35 L1423.49 1213.35 L1422.9 1213.35 L1422.32 1213.35 L1421.73 1213.35 L1421.14 1213.35 L1420.56 1213.35 L1419.97 1213.35 L1419.38 1213.35 L1418.8 1213.35 L1418.21 1213.35 L1417.63 1213.35 L1417.04 1213.35 L1416.45 1213.35 L1415.87 1213.35 L1415.28 1213.35 L1414.69 1213.35 L1414.11 1213.35 L1413.52 1213.35 L1412.93 1213.35 L1412.35 1213.35 L1411.76 1213.35 L1411.17 1213.35 L1410.59 1213.35 L1410 1213.35 L1409.42 1213.35 L1408.83 1213.35 L1408.24 1213.35 L1407.66 1213.35 L1407.07 1213.35 L1406.48 1213.35 L1405.9 1213.35 L1405.31 1213.35 L1404.72 1213.35 L1404.14 1213.35 L1403.55 1213.35 L1402.96 1213.35 L1402.38 1213.35 L1401.79 1213.35 L1401.21 1213.35 L1400.62 1213.35 L1400.03 1213.35 L1399.45 1213.35 L1398.86 1213.35 L1398.27 1213.35 L1397.69 1213.35 L1397.1 1213.35 L1396.51 1213.35 L1395.93 1213.35 L1395.34 1213.35 L1394.75 1213.35 L1394.17 1213.35 L1393.58 1213.35 L1393 1213.35 L1392.41 1213.35 L1391.82 1213.35 L1391.24 1213.35 L1390.65 1213.35 L1390.06 1213.35 L1389.48 1213.35 L1388.89 1213.35 L1388.3 1213.35 L1387.72 1213.35 L1387.13 1213.35 L1386.55 1213.35 L1385.96 1213.35 L1385.37 1213.35 L1384.79 1213.35 L1384.2 1213.35 L1383.61 1213.35 L1383.03 1213.35 L1382.44 1213.35 L1381.85 1213.35 L1381.27 1213.35 L1380.68 1213.35 L1380.09 1213.35 L1379.51 1213.35 L1378.92 1213.35 L1378.34 1213.35 L1377.75 1213.35 L1377.16 1213.35 L1376.58 1213.35 L1375.99 1213.35 L1375.4 1213.35 L1374.82 1213.35 L1374.23 1213.35 L1373.64 1213.35 L1373.06 1213.35 L1372.47 1213.35 L1371.88 1213.35 L1371.3 1213.35 L1370.71 1213.35 L1370.13 1213.35 L1369.54 1213.35 L1368.95 1213.35 L1368.37 1213.35 L1367.78 1213.35 L1367.19 1213.35 L1366.61 1213.35 L1366.02 1213.35 L1365.43 1213.35 L1364.85 1213.35 L1364.26 1213.35 L1363.68 1213.35 L1363.09 1213.35 L1362.5 1213.35 L1361.92 1213.35 L1361.33 1213.35 L1360.74 1213.35 L1360.16 1213.35 L1359.57 1213.35 L1358.98 1213.35 L1358.4 1213.35 L1357.81 1213.35 L1357.22 1213.35 L1356.64 1213.35 L1356.05 1213.35 L1355.47 1213.35 L1354.88 1213.35 L1354.29 1213.35 L1353.71 1213.35 L1353.12 1213.35 L1352.53 1213.35 L1351.95 1213.35 L1351.36 1213.35 L1350.77 1213.35 L1350.19 1213.35 L1349.6 1213.35 L1349.01 1213.35 L1348.43 1213.35 L1347.84 1213.35 L1347.26 1213.35 L1346.67 1213.35 L1346.08 1213.35 L1345.5 1213.35 L1344.91 1213.35 L1344.32 1213.35 L1343.74 1213.35 L1343.15 1213.35 L1342.56 1213.35 L1341.98 1213.35 L1341.39 1213.35 L1340.8 1213.35 L1340.22 1213.35 L1339.63 1213.35 L1339.05 1213.35 L1338.46 1213.35 L1337.87 1213.35 L1337.29 1213.35 L1336.7 1213.35 L1336.11 1213.35 L1335.53 1213.35 L1334.94 1213.35 L1334.35 1213.35 L1333.77 1213.35 L1333.18 1213.35 L1332.6 1213.35 L1332.01 1213.35 L1331.42 1213.35 L1330.84 1213.35 L1330.25 1213.35 L1329.66 1213.35 L1329.08 1213.35 L1328.49 1213.35 L1327.9 1213.35 L1327.32 1213.35 L1326.73 1213.35 L1326.14 1213.35 L1325.56 1213.35 L1324.97 1213.35 L1324.39 1213.35 L1323.8 1213.35 L1323.21 1213.35 L1322.63 1213.35 L1322.04 1213.35 L1321.45 1213.35 L1320.87 1213.35 L1320.28 1213.35 L1319.69 1213.35 L1319.11 1213.35 L1318.52 1213.35 L1317.93 1213.35 L1317.35 1213.35 L1316.76 1213.35 L1316.18 1213.35 L1315.59 1213.35 L1315 1213.35 L1314.42 1213.35 L1313.83 1213.35 L1313.24 1213.35 L1312.66 1213.35 L1312.07 1213.35 L1311.48 1213.35 L1310.9 1213.35 L1310.31 1213.35 L1309.73 1213.35 L1309.14 1213.35 L1308.55 1213.35 L1307.97 1213.35 L1307.38 1213.35 L1306.79 1213.35 L1306.21 1213.35 L1305.62 1213.35 L1305.03 1213.35 L1304.45 1213.35 L1303.86 1213.35 L1303.27 1213.35 L1302.69 1213.35 L1302.1 1213.35 L1301.52 1213.35 L1300.93 1213.35 L1300.34 1213.35 L1299.76 1213.35 L1299.17 1213.35 L1298.58 1213.35 L1298 1213.35 L1297.41 1213.35 L1296.82 1213.35 L1296.24 1213.35 L1295.65 1213.35 L1295.06 1213.35 L1294.48 1213.35 L1293.89 1213.35 L1293.31 1213.35 L1292.72 1213.35 L1292.13 1213.35 L1291.55 1213.35 L1290.96 1213.35 L1290.37 1213.35 L1289.79 1213.35 L1289.2 1213.35 L1288.61 1213.35 L1288.03 1213.35 L1287.44 1213.35 L1286.86 1213.35 L1286.27 1213.35 L1285.68 1213.35 L1285.1 1213.35 L1284.51 1213.35 L1283.92 1213.35 L1283.34 1213.35 L1282.75 1213.35 L1282.16 1213.35 L1281.58 1213.35 L1280.99 1213.35 L1280.4 1213.35 L1279.82 1213.35 L1279.23 1213.35 L1278.65 1213.35 L1278.06 1213.35 L1277.47 1213.35 L1276.89 1213.35 L1276.3 1213.35 L1275.71 1213.35 L1275.13 1213.35 L1274.54 1213.35 L1273.95 1213.35 L1273.37 1213.35 L1272.78 1213.35 L1272.19 1213.35 L1271.61 1213.35 L1271.02 1213.35 L1270.44 1213.35 L1269.85 1213.35 L1269.26 1213.35 L1268.68 1213.35 L1268.09 1213.35 L1267.5 1213.35 L1266.92 1213.35 L1266.33 1213.35 L1265.74 1213.35 L1265.16 1213.35 L1264.57 1213.35 L1263.98 1213.35 L1263.4 1213.35 L1262.81 1213.35 L1262.23 1213.35 L1261.64 1213.35 L1261.05 1213.35 L1260.47 1213.35 L1259.88 1213.35 L1259.29 1213.35 L1258.71 1213.35 L1258.12 1213.35 L1257.53 1213.35 L1256.95 1213.35 L1256.36 1213.35 L1255.78 1213.35 L1255.19 1213.35 L1254.6 1213.35 L1254.02 1213.35 L1253.43 1213.35 L1252.84 1213.35 L1252.26 1213.35 L1251.67 1213.35 L1251.08 1213.35 L1250.5 1213.35 L1249.91 1213.35 L1249.32 1213.35 L1248.74 1213.35 L1248.15 1213.35 L1247.57 1213.35 L1246.98 1213.35 L1246.39 1213.35 L1245.81 1213.35 L1245.22 1213.35 L1244.63 1213.35 L1244.05 1213.35 L1243.46 1213.35 L1242.87 1213.35 L1242.29 1213.35 L1241.7 1213.35 L1241.11 1213.35 L1240.53 1213.35 L1239.94 1213.35 L1239.36 1213.35 L1238.77 1213.35 L1238.18 1213.35 L1237.6 1213.35 L1237.01 1213.35 L1236.42 1213.35 L1235.84 1213.35 L1235.25 1213.35 L1234.66 1213.35 L1234.08 1213.35 L1233.49 1213.35 L1232.91 1213.35 L1232.32 1213.35 L1231.73 1213.35 L1231.15 1213.35 L1230.56 1213.35 L1229.97 1213.35 L1229.39 1213.35 L1228.8 1213.35 L1228.21 1213.35 L1227.63 1213.35 L1227.04 1213.35 L1226.45 1213.35 L1225.87 1213.35 L1225.28 1213.35 L1224.7 1213.35 L1224.11 1213.35 L1223.52 1213.35 L1222.94 1213.35 L1222.35 1213.35 L1221.76 1213.35 L1221.18 1213.35 L1220.59 1213.35 L1220 1213.35 L1219.42 1213.35 L1218.83 1213.35 L1218.24 1213.35 L1217.66 1213.35 L1217.07 1213.35 L1216.49 1213.35 L1215.9 1213.35 L1215.31 1213.35 L1214.73 1213.35 L1214.14 1213.35 L1213.55 1213.35 L1212.97 1213.35 L1212.38 1213.35 L1211.79 1213.35 L1211.21 1213.35 L1210.62 1213.35 L1210.03 1213.35 L1209.45 1213.35 L1208.86 1213.35 L1208.28 1213.35 L1207.69 1213.35 L1207.1 1213.35 L1206.52 1213.35 L1205.93 1213.35 L1205.34 1213.35 L1204.76 1213.35 L1204.17 1213.35 L1203.58 1213.35 L1203 1213.35 L1202.41 1213.35 L1201.83 1213.35 L1201.24 1213.35 L1200.65 1213.35 L1200.07 1213.35 L1199.48 1213.35 L1198.89 1213.35 L1198.31 1213.35 L1197.72 1213.35 L1197.13 1213.35 L1196.55 1213.35 L1195.96 1213.35 L1195.37 1213.35 L1194.79 1213.35 L1194.2 1213.35 L1193.62 1213.35 L1193.03 1213.35 L1192.44 1213.35 L1191.86 1213.35 L1191.27 1213.35 L1190.68 1213.35 L1190.1 1213.35 L1189.51 1213.35 L1188.92 1213.35 L1188.34 1213.35 L1187.75 1213.35 L1187.16 1213.35 L1186.58 1213.35 L1185.99 1213.35 L1185.41 1213.35 L1184.82 1213.35 L1184.23 1213.35 L1183.65 1213.35 L1183.06 1213.35 L1182.47 1213.35 L1181.89 1213.35 L1181.3 1213.35 L1180.71 1213.35 L1180.13 1213.35 L1179.54 1213.35 L1178.96 1213.35 L1178.37 1213.35 L1177.78 1213.35 L1177.2 1213.35 L1176.61 1213.35 L1176.02 1213.35 L1175.44 1213.35 L1174.85 1213.35 L1174.26 1213.35 L1173.68 1213.35 L1173.09 1213.35 L1172.5 1213.35 L1171.92 1213.35 L1171.33 1213.35 L1170.75 1213.35 L1170.16 1213.35 L1169.57 1213.35 L1168.99 1213.35 L1168.4 1213.35 L1167.81 1213.35 L1167.23 1213.35 L1166.64 1213.35 L1166.05 1213.35 L1165.47 1213.35 L1164.88 1213.35 L1164.29 1213.35 L1163.71 1213.35 L1163.12 1213.35 L1162.54 1213.35 L1161.95 1213.35 L1161.36 1213.35 L1160.78 1213.35 L1160.19 1213.35 L1159.6 1213.35 L1159.02 1213.35 L1158.43 1213.35 L1157.84 1213.35 L1157.26 1213.35 L1156.67 1213.35 L1156.09 1213.35 L1155.5 1213.35 L1154.91 1213.35 L1154.33 1213.35 L1153.74 1213.35 L1153.15 1213.35 L1152.57 1213.35 L1151.98 1213.35 L1151.39 1213.35 L1150.81 1213.35 L1150.22 1213.35 L1149.63 1213.35 L1149.05 1213.35 L1148.46 1213.35 L1147.88 1213.35 L1147.29 1213.35 L1146.7 1213.35 L1146.12 1213.35 L1145.53 1213.35 L1144.94 1213.35 L1144.36 1213.35 L1143.77 1213.35 L1143.18 1213.35 L1142.6 1213.35 L1142.01 1213.35 L1141.42 1213.35 L1140.84 1213.35 L1140.25 1213.35 L1139.67 1213.35 L1139.08 1213.35 L1138.49 1213.35 L1137.91 1213.35 L1137.32 1213.35 L1136.73 1213.35 L1136.15 1213.35 L1135.56 1213.35 L1134.97 1213.35 L1134.39 1213.35 L1133.8 1213.35 L1133.21 1213.35 L1132.63 1213.35 L1132.04 1213.35 L1131.46 1213.35 L1130.87 1213.35 L1130.28 1213.35 L1129.7 1213.35 L1129.11 1213.35 L1128.52 1213.35 L1127.94 1213.35 L1127.35 1213.35 L1126.76 1213.35 L1126.18 1213.35 L1125.59 1213.35 L1125.01 1213.35 L1124.42 1213.35 L1123.83 1213.35 L1123.25 1213.35 L1122.66 1213.35 L1122.07 1213.35 L1121.49 1213.35 L1120.9 1213.35 L1120.31 1213.35 L1119.73 1213.35 L1119.14 1213.35 L1118.55 1213.35 L1117.97 1213.35 L1117.38 1213.35 L1116.8 1213.35 L1116.21 1213.35 L1115.62 1213.35 L1115.04 1213.35 L1114.45 1213.35 L1113.86 1213.35 L1113.28 1213.35 L1112.69 1213.35 L1112.1 1213.35 L1111.52 1213.35 L1110.93 1213.35 L1110.34 1213.35 L1109.76 1213.35 L1109.17 1213.35 L1108.59 1213.35 L1108 1213.35 L1107.41 1213.35 L1106.83 1213.35 L1106.24 1213.35 L1105.65 1213.35 L1105.07 1213.35 L1104.48 1213.35 L1103.89 1213.35 L1103.31 1213.35 L1102.72 1213.35 L1102.14 1213.35 L1101.55 1213.35 L1100.96 1213.35 L1100.38 1213.35 L1099.79 1213.35 L1099.2 1213.35 L1098.62 1213.35 L1098.03 1213.35 L1097.44 1213.35 L1096.86 1213.35 L1096.27 1213.35 L1095.68 1213.35 L1095.1 1213.35 L1094.51 1213.35 L1093.93 1213.35 L1093.34 1213.35 L1092.75 1213.35 L1092.17 1213.35 L1091.58 1213.35 L1090.99 1213.35 L1090.41 1213.35 L1089.82 1213.35 L1089.23 1213.35 L1088.65 1213.35 L1088.06 1213.35 L1087.47 1213.35 L1086.89 1213.35 L1086.3 1213.35 L1085.72 1213.35 L1085.13 1213.35 L1084.54 1213.35 L1083.96 1213.35 L1083.37 1213.35 L1082.78 1213.35 L1082.2 1213.35 L1081.61 1213.35 L1081.02 1213.35 L1080.44 1213.35 L1079.85 1213.35 L1079.26 1213.35 L1078.68 1213.35 L1078.09 1213.35 L1077.51 1213.35 L1076.92 1213.35 L1076.33 1213.35 L1075.75 1213.35 L1075.16 1213.35 L1074.57 1213.35 L1073.99 1213.35 L1073.4 1213.35 L1072.81 1213.35 L1072.23 1213.35 L1071.64 1213.35 L1071.06 1213.35 L1070.47 1213.35 L1069.88 1213.35 L1069.3 1213.35 L1068.71 1213.35 L1068.12 1213.35 L1067.54 1213.35 L1066.95 1213.35 L1066.36 1213.35 L1065.78 1213.35 L1065.19 1213.35 L1064.6 1213.35 L1064.02 1213.35 L1063.43 1213.35 L1062.85 1213.35 L1062.26 1213.35 L1061.67 1213.35 L1061.09 1213.35 L1060.5 1213.35 L1059.91 1213.35 L1059.33 1213.35 L1058.74 1213.35 L1058.15 1213.35 L1057.57 1213.35 L1056.98 1213.35 L1056.39 1213.35 L1055.81 1213.35 L1055.22 1213.35 L1054.64 1213.35 L1054.05 1213.35 L1053.46 1213.35 L1052.88 1213.35 L1052.29 1213.35 L1051.7 1213.35 L1051.12 1213.35 L1050.53 1213.35 L1049.94 1213.35 L1049.36 1213.35 L1048.77 1213.35 L1048.19 1213.35 L1047.6 1213.35 L1047.01 1213.35 L1046.43 1213.35 L1045.84 1213.35 L1045.25 1213.35 L1044.67 1213.35 L1044.08 1213.35 L1043.49 1213.35 L1042.91 1213.35 L1042.32 1213.35 L1041.73 1213.35 L1041.15 1213.35 L1040.56 1213.35 L1039.98 1213.35 L1039.39 1213.35 L1038.8 1213.35 L1038.22 1213.35 L1037.63 1213.35 L1037.04 1213.35 L1036.46 1213.35 L1035.87 1213.35 L1035.28 1213.35 L1034.7 1213.35 L1034.11 1213.35 L1033.52 1213.35 L1032.94 1213.35 L1032.35 1213.35 L1031.77 1213.35 L1031.18 1213.35 L1030.59 1213.35 L1030.01 1213.35 L1029.42 1213.35 L1028.83 1213.35 L1028.25 1213.35 L1027.66 1213.35 L1027.07 1213.35 L1026.49 1213.35 L1025.9 1213.35 L1025.32 1213.35 L1024.73 1213.35 L1024.14 1213.35 L1023.56 1213.35 L1022.97 1213.35 L1022.38 1213.35 L1021.8 1213.35 L1021.21 1213.35 L1020.62 1213.35 L1020.04 1213.35 L1019.45 1213.35 L1018.86 1213.35 L1018.28 1213.35 L1017.69 1213.35 L1017.11 1213.35 L1016.52 1213.35 L1015.93 1213.35 L1015.35 1213.35 L1014.76 1213.35 L1014.17 1213.35 L1013.59 1213.35 L1013 1213.35 L1012.41 1213.35 L1011.83 1213.35 L1011.24 1213.35 L1010.65 1213.35 L1010.07 1213.35 L1009.48 1213.35 L1008.9 1213.35 L1008.31 1213.35 L1007.72 1213.35 L1007.14 1213.35 L1006.55 1213.35 L1005.96 1213.35 L1005.38 1213.35 L1004.79 1213.35 L1004.2 1213.35 L1003.62 1213.35 L1003.03 1213.35 L1002.44 1213.35 L1001.86 1213.35 L1001.27 1213.35 L1000.69 1213.35 L1000.1 1213.35 L999.513 1213.35 L998.926 1213.35 L998.34 1213.35 L997.754 1213.35 L997.167 1213.35 L996.581 1213.35 L995.994 1213.35 L995.408 1213.35 L994.822 1213.35 L994.235 1213.35 L993.649 1213.35 L993.062 1213.35 L992.476 1213.35 L991.889 1213.35 L991.303 1213.35 L990.717 1213.35 L990.13 1213.35 L989.544 1213.35 L988.957 1213.35 L988.371 1213.35 L987.785 1213.35 L987.198 1213.35 L986.612 1213.35 L986.025 1213.35  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.41 986.612,1213.41 987.198,1213.41 987.785,1213.41 988.371,1213.41 988.957,1213.41 989.544,1213.41 990.13,1213.41 990.717,1213.41 991.303,1213.41 991.889,1213.41 992.476,1213.41 993.062,1213.41 993.649,1213.41 994.235,1213.41 994.822,1213.41 995.408,1213.41 995.994,1213.41 996.581,1213.41 997.167,1213.41 997.754,1213.41 998.34,1213.41 998.926,1213.41 999.513,1213.41 1000.1,1213.41 1000.69,1213.41 1001.27,1213.41 1001.86,1213.41 1002.44,1213.41 1003.03,1213.41 1003.62,1213.41 1004.2,1213.41 1004.79,1213.41 1005.38,1213.41 1005.96,1213.41 1006.55,1213.41 1007.14,1213.41 1007.72,1213.41 1008.31,1213.41 1008.9,1213.41 1009.48,1213.41 1010.07,1213.41 1010.65,1213.41 1011.24,1213.41 1011.83,1213.41 1012.41,1213.41 1013,1213.41 1013.59,1213.41 1014.17,1213.41 1014.76,1213.41 1015.35,1213.41 1015.93,1213.41 1016.52,1213.41 1017.11,1213.41 1017.69,1213.41 1018.28,1213.41 1018.86,1213.41 1019.45,1213.41 1020.04,1213.41 1020.62,1213.41 1021.21,1213.41 1021.8,1213.41 1022.38,1213.41 1022.97,1213.41 1023.56,1213.41 1024.14,1213.41 1024.73,1213.41 1025.32,1213.41 1025.9,1213.41 1026.49,1213.41 1027.07,1213.41 1027.66,1213.41 1028.25,1213.41 1028.83,1213.41 1029.42,1213.41 1030.01,1213.41 1030.59,1213.41 1031.18,1213.41 1031.77,1213.41 1032.35,1213.41 1032.94,1213.41 1033.52,1213.41 1034.11,1213.41 1034.7,1213.41 1035.28,1213.41 1035.87,1213.41 1036.46,1213.41 1037.04,1213.41 1037.63,1213.41 1038.22,1213.41 1038.8,1213.41 1039.39,1213.41 1039.98,1213.41 1040.56,1213.41 1041.15,1213.41 1041.73,1213.41 1042.32,1213.41 1042.91,1213.41 1043.49,1213.41 1044.08,1213.41 1044.67,1213.41 1045.25,1213.41 1045.84,1213.41 1046.43,1213.41 1047.01,1213.41 1047.6,1213.41 1048.19,1213.41 1048.77,1213.41 1049.36,1213.41 1049.94,1213.41 1050.53,1213.41 1051.12,1213.41 1051.7,1213.41 1052.29,1213.41 1052.88,1213.41 1053.46,1213.41 1054.05,1213.41 1054.64,1213.41 1055.22,1213.41 1055.81,1213.41 1056.39,1213.41 1056.98,1213.41 1057.57,1213.41 1058.15,1213.41 1058.74,1213.41 1059.33,1213.41 1059.91,1213.41 1060.5,1213.41 1061.09,1213.41 1061.67,1213.41 1062.26,1213.41 1062.85,1213.41 1063.43,1213.41 1064.02,1213.41 1064.6,1213.41 1065.19,1213.41 1065.78,1213.41 1066.36,1213.41 1066.95,1213.41 1067.54,1213.41 1068.12,1213.41 1068.71,1213.41 1069.3,1213.41 1069.88,1213.41 1070.47,1213.41 1071.06,1213.41 1071.64,1213.41 1072.23,1213.41 1072.81,1213.41 1073.4,1213.41 1073.99,1213.41 1074.57,1213.41 1075.16,1213.41 1075.75,1213.41 1076.33,1213.41 1076.92,1213.41 1077.51,1213.41 1078.09,1213.41 1078.68,1213.41 1079.26,1213.41 1079.85,1213.41 1080.44,1213.41 1081.02,1213.41 1081.61,1213.41 1082.2,1213.41 1082.78,1213.41 1083.37,1213.41 1083.96,1213.41 1084.54,1213.41 1085.13,1213.41 1085.72,1213.41 1086.3,1213.41 1086.89,1213.41 1087.47,1213.41 1088.06,1213.41 1088.65,1213.41 1089.23,1213.41 1089.82,1213.41 1090.41,1213.41 1090.99,1213.41 1091.58,1213.41 1092.17,1213.41 1092.75,1213.41 1093.34,1213.41 1093.93,1213.41 1094.51,1213.41 1095.1,1213.41 1095.68,1213.41 1096.27,1213.41 1096.86,1213.41 1097.44,1213.41 1098.03,1213.41 1098.62,1213.41 1099.2,1213.41 1099.79,1213.41 1100.38,1213.41 1100.96,1213.41 1101.55,1213.41 1102.14,1213.41 1102.72,1213.41 1103.31,1213.41 1103.89,1213.41 1104.48,1213.41 1105.07,1213.41 1105.65,1213.41 1106.24,1213.41 1106.83,1213.41 1107.41,1213.41 1108,1213.41 1108.59,1213.41 1109.17,1213.41 1109.76,1213.41 1110.34,1213.41 1110.93,1213.41 1111.52,1213.41 1112.1,1213.41 1112.69,1213.41 1113.28,1213.41 1113.86,1213.41 1114.45,1213.41 1115.04,1213.41 1115.62,1213.41 1116.21,1213.41 1116.8,1213.41 1117.38,1213.41 1117.97,1213.41 1118.55,1213.41 1119.14,1213.41 1119.73,1213.41 1120.31,1213.41 1120.9,1213.41 1121.49,1213.41 1122.07,1213.41 1122.66,1213.41 1123.25,1213.41 1123.83,1213.41 1124.42,1213.41 1125.01,1213.41 1125.59,1213.41 1126.18,1213.41 1126.76,1213.41 1127.35,1213.41 1127.94,1213.41 1128.52,1213.41 1129.11,1213.41 1129.7,1213.41 1130.28,1213.41 1130.87,1213.41 1131.46,1213.41 1132.04,1213.41 1132.63,1213.41 1133.21,1213.41 1133.8,1213.41 1134.39,1213.41 1134.97,1213.41 1135.56,1213.41 1136.15,1213.41 1136.73,1213.41 1137.32,1213.41 1137.91,1213.41 1138.49,1213.41 1139.08,1213.41 1139.67,1213.41 1140.25,1213.41 1140.84,1213.41 1141.42,1213.41 1142.01,1213.41 1142.6,1213.41 1143.18,1213.41 1143.77,1213.41 1144.36,1213.41 1144.94,1213.41 1145.53,1213.41 1146.12,1213.41 1146.7,1213.41 1147.29,1213.41 1147.88,1213.41 1148.46,1213.41 1149.05,1213.41 1149.63,1213.41 1150.22,1213.41 1150.81,1213.41 1151.39,1213.41 1151.98,1213.41 1152.57,1213.41 1153.15,1213.41 1153.74,1213.41 1154.33,1213.41 1154.91,1213.41 1155.5,1213.41 1156.09,1213.41 1156.67,1213.41 1157.26,1213.41 1157.84,1213.41 1158.43,1213.41 1159.02,1213.41 1159.6,1213.41 1160.19,1213.41 1160.78,1213.41 1161.36,1213.41 1161.95,1213.41 1162.54,1213.41 1163.12,1213.41 1163.71,1213.41 1164.29,1213.41 1164.88,1213.41 1165.47,1213.41 1166.05,1213.41 1166.64,1213.41 1167.23,1213.41 1167.81,1213.41 1168.4,1213.41 1168.99,1213.41 1169.57,1213.41 1170.16,1213.41 1170.75,1213.41 1171.33,1213.41 1171.92,1213.41 1172.5,1213.41 1173.09,1213.41 1173.68,1213.41 1174.26,1213.41 1174.85,1213.41 1175.44,1213.41 1176.02,1213.41 1176.61,1213.41 1177.2,1213.41 1177.78,1213.41 1178.37,1213.41 1178.96,1213.41 1179.54,1213.41 1180.13,1213.41 1180.71,1213.41 1181.3,1213.41 1181.89,1213.41 1182.47,1213.41 1183.06,1213.41 1183.65,1213.41 1184.23,1213.41 1184.82,1213.41 1185.41,1213.41 1185.99,1213.41 1186.58,1213.41 1187.16,1213.41 1187.75,1213.41 1188.34,1213.41 1188.92,1213.41 1189.51,1213.41 1190.1,1213.41 1190.68,1213.41 1191.27,1213.41 1191.86,1213.41 1192.44,1213.41 1193.03,1213.41 1193.62,1213.41 1194.2,1213.41 1194.79,1213.41 1195.37,1213.41 1195.96,1213.41 1196.55,1213.41 1197.13,1213.41 1197.72,1213.41 1198.31,1213.41 1198.89,1213.41 1199.48,1213.41 1200.07,1213.41 1200.65,1213.41 1201.24,1213.41 1201.83,1213.41 1202.41,1213.41 1203,1213.41 1203.58,1213.41 1204.17,1213.41 1204.76,1213.41 1205.34,1213.41 1205.93,1213.41 1206.52,1213.41 1207.1,1213.41 1207.69,1213.41 1208.28,1213.41 1208.86,1213.41 1209.45,1213.41 1210.03,1213.41 1210.62,1213.41 1211.21,1213.41 1211.79,1213.41 1212.38,1213.41 1212.97,1213.41 1213.55,1213.41 1214.14,1213.41 1214.73,1213.41 1215.31,1213.41 1215.9,1213.41 1216.49,1213.41 1217.07,1213.41 1217.66,1213.41 1218.24,1213.41 1218.83,1213.41 1219.42,1213.41 1220,1213.41 1220.59,1213.41 1221.18,1213.41 1221.76,1213.41 1222.35,1213.41 1222.94,1213.41 1223.52,1213.41 1224.11,1213.41 1224.7,1213.41 1225.28,1213.41 1225.87,1213.41 1226.45,1213.41 1227.04,1213.41 1227.63,1213.41 1228.21,1213.41 1228.8,1213.41 1229.39,1213.41 1229.97,1213.41 1230.56,1213.41 1231.15,1213.41 1231.73,1213.41 1232.32,1213.41 1232.91,1213.41 1233.49,1213.41 1234.08,1213.41 1234.66,1213.41 1235.25,1213.41 1235.84,1213.41 1236.42,1213.41 1237.01,1213.41 1237.6,1213.41 1238.18,1213.41 1238.77,1213.41 1239.36,1213.41 1239.94,1213.41 1240.53,1213.41 1241.11,1213.41 1241.7,1213.41 1242.29,1213.41 1242.87,1213.41 1243.46,1213.41 1244.05,1213.41 1244.63,1213.41 1245.22,1213.41 1245.81,1213.41 1246.39,1213.41 1246.98,1213.41 1247.57,1213.41 1248.15,1213.41 1248.74,1213.41 1249.32,1213.41 1249.91,1213.41 1250.5,1213.41 1251.08,1213.41 1251.67,1213.41 1252.26,1213.41 1252.84,1213.41 1253.43,1213.41 1254.02,1213.41 1254.6,1213.41 1255.19,1213.41 1255.78,1213.41 1256.36,1213.41 1256.95,1213.41 1257.53,1213.41 1258.12,1213.41 1258.71,1213.41 1259.29,1213.41 1259.88,1213.41 1260.47,1213.41 1261.05,1213.41 1261.64,1213.41 1262.23,1213.41 1262.81,1213.41 1263.4,1213.41 1263.98,1213.41 1264.57,1213.41 1265.16,1213.41 1265.74,1213.41 1266.33,1213.41 1266.92,1213.41 1267.5,1213.41 1268.09,1213.41 1268.68,1213.41 1269.26,1213.41 1269.85,1213.41 1270.44,1213.41 1271.02,1213.41 1271.61,1213.41 1272.19,1213.41 1272.78,1213.41 1273.37,1213.41 1273.95,1213.41 1274.54,1213.41 1275.13,1213.41 1275.71,1213.41 1276.3,1213.41 1276.89,1213.41 1277.47,1213.41 1278.06,1213.41 1278.65,1213.41 1279.23,1213.41 1279.82,1213.41 1280.4,1213.41 1280.99,1213.41 1281.58,1213.41 1282.16,1213.41 1282.75,1213.41 1283.34,1213.41 1283.92,1213.41 1284.51,1213.41 1285.1,1213.41 1285.68,1213.41 1286.27,1213.41 1286.86,1213.41 1287.44,1213.41 1288.03,1213.41 1288.61,1213.41 1289.2,1213.41 1289.79,1213.41 1290.37,1213.41 1290.96,1213.41 1291.55,1213.41 1292.13,1213.41 1292.72,1213.41 1293.31,1213.41 1293.89,1213.41 1294.48,1213.41 1295.06,1213.41 1295.65,1213.41 1296.24,1213.41 1296.82,1213.41 1297.41,1213.41 1298,1213.41 1298.58,1213.41 1299.17,1213.41 1299.76,1213.41 1300.34,1213.41 1300.93,1213.41 1301.52,1213.41 1302.1,1213.41 1302.69,1213.41 1303.27,1213.41 1303.86,1213.41 1304.45,1213.41 1305.03,1213.41 1305.62,1213.41 1306.21,1213.41 1306.79,1213.41 1307.38,1213.41 1307.97,1213.41 1308.55,1213.41 1309.14,1213.41 1309.73,1213.41 1310.31,1213.41 1310.9,1213.41 1311.48,1213.41 1312.07,1213.41 1312.66,1213.41 1313.24,1213.41 1313.83,1213.41 1314.42,1213.41 1315,1213.41 1315.59,1213.41 1316.18,1213.41 1316.76,1213.41 1317.35,1213.41 1317.93,1213.41 1318.52,1213.41 1319.11,1213.41 1319.69,1213.41 1320.28,1213.41 1320.87,1213.41 1321.45,1213.41 1322.04,1213.41 1322.63,1213.41 1323.21,1213.41 1323.8,1213.41 1324.39,1213.41 1324.97,1213.41 1325.56,1213.41 1326.14,1213.41 1326.73,1213.41 1327.32,1213.41 1327.9,1213.41 1328.49,1213.41 1329.08,1213.41 1329.66,1213.41 1330.25,1213.41 1330.84,1213.41 1331.42,1213.41 1332.01,1213.41 1332.6,1213.41 1333.18,1213.41 1333.77,1213.41 1334.35,1213.41 1334.94,1213.41 1335.53,1213.41 1336.11,1213.41 1336.7,1213.41 1337.29,1213.41 1337.87,1213.41 1338.46,1213.41 1339.05,1213.41 1339.63,1213.41 1340.22,1213.41 1340.8,1213.41 1341.39,1213.41 1341.98,1213.41 1342.56,1213.41 1343.15,1213.41 1343.74,1213.41 1344.32,1213.41 1344.91,1213.41 1345.5,1213.41 1346.08,1213.41 1346.67,1213.41 1347.26,1213.41 1347.84,1213.41 1348.43,1213.41 1349.01,1213.41 1349.6,1213.41 1350.19,1213.41 1350.77,1213.41 1351.36,1213.41 1351.95,1213.41 1352.53,1213.41 1353.12,1213.41 1353.71,1213.41 1354.29,1213.41 1354.88,1213.41 1355.47,1213.41 1356.05,1213.41 1356.64,1213.41 1357.22,1213.41 1357.81,1213.41 1358.4,1213.41 1358.98,1213.41 1359.57,1213.41 1360.16,1213.41 1360.74,1213.41 1361.33,1213.41 1361.92,1213.41 1362.5,1213.41 1363.09,1213.41 1363.68,1213.41 1364.26,1213.41 1364.85,1213.41 1365.43,1213.41 1366.02,1213.41 1366.61,1213.41 1367.19,1213.41 1367.78,1213.41 1368.37,1213.41 1368.95,1213.41 1369.54,1213.41 1370.13,1213.41 1370.71,1213.41 1371.3,1213.41 1371.88,1213.41 1372.47,1213.41 1373.06,1213.41 1373.64,1213.41 1374.23,1213.41 1374.82,1213.41 1375.4,1213.41 1375.99,1213.41 1376.58,1213.41 1377.16,1213.41 1377.75,1213.41 1378.34,1213.41 1378.92,1213.41 1379.51,1213.41 1380.09,1213.41 1380.68,1213.41 1381.27,1213.41 1381.85,1213.41 1382.44,1213.41 1383.03,1213.41 1383.61,1213.41 1384.2,1213.41 1384.79,1213.41 1385.37,1213.41 1385.96,1213.41 1386.55,1213.41 1387.13,1213.41 1387.72,1213.41 1388.3,1213.41 1388.89,1213.41 1389.48,1213.41 1390.06,1213.41 1390.65,1213.41 1391.24,1213.41 1391.82,1213.41 1392.41,1213.41 1393,1213.41 1393.58,1213.41 1394.17,1213.41 1394.75,1213.41 1395.34,1213.41 1395.93,1213.41 1396.51,1213.41 1397.1,1213.41 1397.69,1213.41 1398.27,1213.41 1398.86,1213.41 1399.45,1213.41 1400.03,1213.41 1400.62,1213.41 1401.21,1213.41 1401.79,1213.41 1402.38,1213.41 1402.96,1213.41 1403.55,1213.41 1404.14,1213.41 1404.72,1213.41 1405.31,1213.41 1405.9,1213.41 1406.48,1213.41 1407.07,1213.41 1407.66,1213.41 1408.24,1213.41 1408.83,1213.41 1409.42,1213.41 1410,1213.41 1410.59,1213.41 1411.17,1213.41 1411.76,1213.41 1412.35,1213.41 1412.93,1213.41 1413.52,1213.41 1414.11,1213.41 1414.69,1213.41 1415.28,1213.41 1415.87,1213.41 1416.45,1213.41 1417.04,1213.41 1417.63,1213.41 1418.21,1213.41 1418.8,1213.41 1419.38,1213.41 1419.97,1213.41 1420.56,1213.41 1421.14,1213.41 1421.73,1213.41 1422.32,1213.41 1422.9,1213.41 1423.49,1213.41 1424.08,1213.41 1424.66,1213.41 1425.25,1213.41 1425.83,1213.41 1426.42,1213.41 1427.01,1213.41 1427.59,1213.41 1428.18,1213.41 1428.77,1213.41 1429.35,1213.41 1429.94,1213.41 1430.53,1213.41 1431.11,1213.41 1431.7,1213.41 1432.29,1213.41 1432.87,1213.41 1433.46,1213.41 1434.04,1213.41 1434.63,1213.41 1435.22,1213.41 1435.8,1213.41 1436.39,1213.41 1436.98,1213.41 1437.56,1213.41 1438.15,1213.41 1438.74,1213.41 1439.32,1213.41 1439.91,1213.41 1440.5,1213.41 1441.08,1213.41 1441.67,1213.41 1442.25,1213.41 1442.84,1213.41 1443.43,1213.41 1444.01,1213.41 1444.6,1213.41 1445.19,1213.41 1445.77,1213.41 1446.36,1213.41 1446.95,1213.41 1447.53,1213.41 1448.12,1213.41 1448.7,1213.41 1449.29,1213.41 1449.88,1213.41 1450.46,1213.41 1451.05,1213.41 1451.64,1213.41 1452.22,1213.41 1452.81,1213.41 1453.4,1213.41 1453.98,1213.41 1454.57,1213.41 1455.16,1213.41 1455.74,1213.41 1456.33,1213.41 1456.91,1213.41 1457.5,1213.41 1458.09,1213.41 1458.67,1213.41 1459.26,1213.41 1459.85,1213.41 1460.43,1213.41 1461.02,1213.41 1461.61,1213.41 1462.19,1213.41 1462.78,1213.41 1463.37,1213.41 1463.95,1213.41 1464.54,1213.41 1465.12,1213.41 1465.71,1213.41 1466.3,1213.41 1466.88,1213.41 1467.47,1213.41 1468.06,1213.41 1468.64,1213.41 1469.23,1213.41 1469.82,1213.41 1470.4,1213.41 1470.99,1213.41 1471.57,1213.41 1472.16,1213.41 1472.75,1213.41 1473.33,1213.41 1473.92,1213.41 1474.51,1213.41 1475.09,1213.41 1475.68,1213.41 1476.27,1213.41 1476.85,1213.41 1477.44,1213.41 1478.03,1213.41 1478.61,1213.41 1479.2,1213.41 1479.78,1213.41 1480.37,1213.41 1480.96,1213.41 1481.54,1213.41 1482.13,1213.41 1482.72,1213.41 1483.3,1213.41 1483.89,1213.41 1484.48,1213.41 1485.06,1213.41 1485.65,1213.41 1486.24,1213.41 1486.82,1213.41 1487.41,1213.41 1487.99,1213.41 1488.58,1213.41 1489.17,1213.41 1489.75,1213.41 1490.34,1213.41 1490.93,1213.41 1491.51,1213.41 1492.1,1213.41 1492.69,1213.41 1493.27,1213.41 1493.86,1213.41 1494.45,1213.41 1495.03,1213.41 1495.62,1213.41 1496.2,1213.41 1496.79,1213.41 1497.38,1213.41 1497.96,1213.41 1498.55,1213.41 1499.14,1213.41 1499.72,1213.41 1500.31,1213.41 1500.9,1213.41 1501.48,1213.41 1502.07,1213.41 1502.65,1213.41 1503.24,1213.41 1503.83,1213.41 1504.41,1213.41 1505,1213.41 1505.59,1213.41 1506.17,1213.41 1506.76,1213.41 1507.35,1213.41 1507.93,1213.41 1508.52,1213.41 1509.11,1213.41 1509.69,1213.41 1510.28,1213.41 1510.86,1213.41 1511.45,1213.41 1512.04,1213.41 1512.62,1213.41 1513.21,1213.41 1513.8,1213.41 1514.38,1213.41 1514.97,1213.41 1515.56,1213.41 1516.14,1213.41 1516.73,1213.41 1517.32,1213.41 1517.9,1213.41 1518.49,1213.41 1519.07,1213.41 1519.66,1213.41 1520.25,1213.41 1520.83,1213.41 1521.42,1213.41 1522.01,1213.41 1522.59,1213.41 1523.18,1213.41 1523.77,1213.41 1524.35,1213.41 1524.94,1213.41 1525.52,1213.41 1526.11,1213.41 1526.7,1213.41 1527.28,1213.41 1527.87,1213.41 1528.46,1213.41 1529.04,1213.41 1529.63,1213.41 1530.22,1213.41 1530.8,1213.41 1531.39,1213.41 1531.98,1213.41 1532.56,1213.41 1533.15,1213.41 1533.73,1213.41 1534.32,1213.41 1534.91,1213.41 1535.49,1213.41 1536.08,1213.41 1536.67,1213.41 1537.25,1213.41 1537.84,1213.41 1538.43,1213.41 1539.01,1213.41 1539.6,1213.41 1540.19,1213.41 1540.77,1213.41 1541.36,1213.41 1541.94,1213.41 1542.53,1213.41 1543.12,1213.41 1543.7,1213.41 1544.29,1213.41 1544.88,1213.41 1545.46,1213.41 1546.05,1213.41 1546.64,1213.41 1547.22,1213.41 1547.81,1213.41 1548.4,1213.41 1548.98,1213.41 1549.57,1213.41 1550.15,1213.41 1550.74,1213.41 1551.33,1213.41 1551.91,1213.41 1552.5,1213.41 1553.09,1213.41 1553.67,1213.41 1554.26,1213.41 1554.85,1213.41 1555.43,1213.41 1556.02,1213.41 1556.6,1213.41 1557.19,1213.41 1557.78,1213.41 1558.36,1213.41 1558.95,1213.41 1559.54,1213.41 1560.12,1213.41 1560.71,1213.41 1561.3,1213.41 1561.88,1213.41 1562.47,1213.41 1563.06,1213.41 1563.64,1213.41 1564.23,1213.41 1564.81,1213.41 1565.4,1213.41 1565.99,1213.41 1566.57,1213.41 1567.16,1213.41 1567.75,1213.41 1568.33,1213.41 1568.92,1213.41 1569.51,1213.41 1570.09,1213.41 1570.68,1213.41 1571.27,1213.41 1571.85,1213.41 1572.44,1213.41 1573.02,1213.41 1573.61,1213.41 1574.2,1213.41 1574.78,1213.41 1575.37,1213.41 1575.96,1213.41 1576.54,1213.41 1577.13,1213.41 1577.72,1213.41 1578.3,1213.41 1578.89,1213.41 1579.47,1213.41 1580.06,1213.41 1580.65,1213.41 1581.23,1213.41 1581.82,1213.41 1582.41,1213.41 1582.99,1213.41 1583.58,1213.41 1584.17,1213.41 1584.75,1213.41 1585.34,1213.41 1585.93,1213.41 1586.51,1213.41 1587.1,1213.41 1587.68,1213.41 1588.27,1213.41 1588.86,1213.41 1589.44,1213.41 1590.03,1213.41 1590.62,1213.41 1591.2,1213.41 1591.79,1213.41 1592.38,1213.41 1592.96,1213.41 1593.55,1213.41 1594.14,1213.41 1594.72,1213.41 1595.31,1213.41 1595.89,1213.41 1596.48,1213.41 1597.07,1213.41 1597.65,1213.41 1598.24,1213.41 1598.83,1213.41 1599.41,1213.41 1600,1213.41 1600.59,1213.41 1601.17,1213.41 1601.76,1213.41 1602.34,1213.41 1602.93,1213.41 1603.52,1213.41 1604.1,1213.41 1604.69,1213.41 1605.28,1213.41 1605.86,1213.41 1606.45,1213.41 1607.04,1213.41 1607.62,1213.41 1608.21,1213.41 1608.8,1213.41 1609.38,1213.41 1609.97,1213.41 1610.55,1213.41 1611.14,1213.41 1611.73,1213.41 1612.31,1213.41 1612.9,1213.41 1613.49,1213.41 1614.07,1213.41 1614.66,1213.41 1615.25,1213.41 1615.83,1213.41 1616.42,1213.41 1617.01,1213.41 1617.59,1213.41 1618.18,1213.41 1618.76,1213.41 1619.35,1213.41 1619.94,1213.41 1620.52,1213.41 1621.11,1213.41 1621.7,1213.41 1622.28,1213.41 1622.87,1213.41 1623.46,1213.41 1624.04,1213.41 1624.63,1213.41 1625.22,1213.41 1625.8,1213.41 1626.39,1213.41 1626.97,1213.41 1627.56,1213.41 1628.15,1213.41 1628.73,1213.41 1629.32,1213.41 1629.91,1213.41 1630.49,1213.41 1631.08,1213.41 1631.67,1213.41 1632.25,1213.41 1632.84,1213.41 1633.42,1213.41 1634.01,1213.41 1634.6,1213.41 1635.18,1213.41 1635.77,1213.41 1636.36,1213.41 1636.94,1213.41 1637.53,1213.41 1638.12,1213.41 1638.7,1213.41 1639.29,1213.41 1639.88,1213.41 1640.46,1213.41 1641.05,1213.41 1641.63,1213.41 1642.22,1213.41 1642.81,1213.41 1643.39,1213.41 1643.98,1213.41 1644.57,1213.41 1645.15,1213.41 1645.74,1213.41 1646.33,1213.41 1646.91,1213.41 1647.5,1213.41 1648.09,1213.41 1648.67,1213.41 1649.26,1213.41 1649.84,1213.41 1650.43,1213.41 1651.02,1213.41 1651.6,1213.41 1652.19,1213.41 1652.78,1213.41 1653.36,1213.41 1653.95,1213.41 1654.54,1213.41 1655.12,1213.41 1655.71,1213.41 1656.29,1213.41 1656.88,1213.41 1657.47,1213.41 1658.05,1213.41 1658.64,1213.41 1659.23,1213.41 1659.81,1213.41 1660.4,1213.41 1660.99,1213.41 1661.57,1213.41 1662.16,1213.41 1662.75,1213.41 1663.33,1213.41 1663.92,1213.41 1664.5,1213.41 1665.09,1213.41 1665.68,1213.41 1666.26,1213.41 1666.85,1213.41 1667.44,1213.41 1668.02,1213.41 1668.61,1213.41 1669.2,1213.41 1669.78,1213.41 1670.37,1213.41 1670.96,1213.41 1671.54,1213.41 1672.13,1213.41 1672.71,1213.41 1673.3,1213.41 1673.89,1213.41 1674.47,1213.41 1675.06,1213.41 1675.65,1213.41 1676.23,1213.41 1676.82,1213.41 1677.41,1213.41 1677.99,1213.41 1678.58,1213.41 1679.17,1213.41 1679.75,1213.41 1680.34,1213.41 1680.92,1213.41 1681.51,1213.41 1682.1,1213.41 1682.68,1213.41 1683.27,1213.41 1683.86,1213.41 1684.44,1213.41 1685.03,1213.41 1685.62,1213.41 1686.2,1213.41 1686.79,1213.41 1687.37,1213.41 1687.96,1213.41 1688.55,1213.41 1689.13,1213.41 1689.72,1213.41 1690.31,1213.41 1690.89,1213.41 1691.48,1213.41 1692.07,1213.41 1692.65,1213.41 1693.24,1213.41 1693.83,1213.41 1694.41,1213.41 1695,1213.41 1695.58,1213.41 1696.17,1213.41 1696.76,1213.41 1697.34,1213.41 1697.93,1213.41 1698.52,1213.41 1699.1,1213.41 1699.69,1213.41 1700.28,1213.41 1700.86,1213.41 1701.45,1213.41 1702.04,1213.41 1702.62,1213.41 1703.21,1213.41 1703.79,1213.41 1704.38,1213.41 1704.97,1213.41 1705.55,1213.41 1706.14,1213.41 1706.73,1213.41 1707.31,1213.41 1707.9,1213.41 1708.49,1213.41 1709.07,1213.41 1709.66,1213.41 1710.24,1213.41 1710.83,1213.41 1711.42,1213.41 1712,1213.41 1712.59,1213.41 1713.18,1213.41 1713.76,1213.41 1714.35,1213.41 1714.94,1213.41 1715.52,1213.41 1716.11,1213.41 1716.7,1213.41 1717.28,1213.41 1717.87,1213.41 1718.45,1213.41 1719.04,1213.41 1719.63,1213.41 1720.21,1213.41 1720.8,1213.41 1721.39,1213.41 1721.97,1213.41 1722.56,1213.41 1723.15,1213.41 1723.73,1213.41 1724.32,1213.41 1724.91,1213.41 1725.49,1213.41 1726.08,1213.41 1726.66,1213.41 1727.25,1213.41 1727.84,1213.41 1728.42,1213.41 1729.01,1213.41 1729.6,1213.41 1730.18,1213.41 1730.77,1213.41 1731.36,1213.41 1731.94,1213.41 1732.53,1213.41 1733.11,1213.41 1733.7,1213.41 1734.29,1213.41 1734.87,1213.41 1735.46,1213.41 1736.05,1213.41 1736.63,1213.41 1737.22,1213.41 1737.81,1213.41 1738.39,1213.41 1738.98,1213.41 1739.57,1213.41 1740.15,1213.41 1740.74,1213.41 1741.32,1213.41 1741.91,1213.41 1742.5,1213.41 1743.08,1213.41 1743.67,1213.41 1744.26,1213.41 1744.84,1213.41 1745.43,1213.41 1746.02,1213.41 1746.6,1213.41 1747.19,1213.41 1747.78,1213.41 1748.36,1213.41 1748.95,1213.41 1749.53,1213.41 1750.12,1213.41 1750.71,1213.41 1751.29,1213.41 1751.88,1213.41 1752.47,1213.41 1753.05,1213.41 1753.64,1213.41 1754.23,1213.41 1754.81,1213.41 1755.4,1213.41 1755.99,1213.41 1756.57,1213.41 1757.16,1213.41 1757.74,1213.41 1758.33,1213.41 1758.92,1213.41 1759.5,1213.41 1760.09,1213.41 1760.68,1213.41 1761.26,1213.41 1761.85,1213.41 1762.44,1213.41 1763.02,1213.41 1763.61,1213.41 1764.19,1213.41 1764.78,1213.41 1765.37,1213.41 1765.95,1213.41 1766.54,1213.41 1767.13,1213.41 1767.71,1213.41 1768.3,1213.41 1768.89,1213.41 1769.47,1213.41 1770.06,1213.41 1770.65,1213.41 1771.23,1213.41 1771.82,1213.41 1772.4,1213.41 1772.99,1213.41 1773.58,1213.41 1774.16,1213.41 1774.75,1213.41 1775.34,1213.41 1775.92,1213.41 1776.51,1213.41 1777.1,1213.41 1777.68,1213.41 1778.27,1213.41 1778.86,1213.41 1779.44,1213.41 1780.03,1213.41 1780.61,1213.41 1781.2,1213.41 1781.79,1213.41 1782.37,1213.41 1782.96,1213.41 1783.55,1213.41 1784.13,1213.41 1784.72,1213.41 1785.31,1213.41 1785.89,1213.41 1786.48,1213.41 1787.06,1213.41 1787.65,1213.41 1788.24,1213.41 1788.82,1213.41 1789.41,1213.41 1790,1213.41 1790.58,1213.41 1791.17,1213.41 1791.76,1213.41 1792.34,1213.41 1792.93,1213.41 1793.52,1213.41 1794.1,1213.41 1794.69,1213.41 1795.27,1213.41 1795.86,1213.41 1796.45,1213.41 1797.03,1213.41 1797.62,1213.41 1798.21,1213.41 1798.79,1213.41 1799.38,1213.41 1799.97,1213.41 1800.55,1213.41 1801.14,1213.41 1801.73,1213.41 1802.31,1213.41 1802.9,1213.41 1803.48,1213.41 1804.07,1213.41 1804.66,1213.41 1805.24,1213.41 1805.83,1213.41 1806.42,1213.41 1807,1213.41 1807.59,1213.41 1808.18,1213.41 1808.76,1213.41 1809.35,1213.41 1809.94,1213.41 1810.52,1213.41 1811.11,1213.41 1811.69,1213.41 1812.28,1213.41 1812.87,1213.41 1813.45,1213.41 1814.04,1213.41 1814.63,1213.41 1815.21,1213.41 1815.8,1213.41 1816.39,1213.41 1816.97,1213.41 1817.56,1213.41 1818.14,1213.41 1818.73,1213.41 1819.32,1213.41 1819.9,1213.41 1820.49,1213.41 1821.08,1213.41 1821.66,1213.41 1822.25,1213.41 1822.84,1213.41 1823.42,1213.41 1824.01,1213.41 1824.6,1213.41 1825.18,1213.41 1825.77,1213.41 1826.35,1213.41 1826.94,1213.41 1827.53,1213.41 1828.11,1213.41 1828.7,1213.41 1829.29,1213.41 1829.87,1213.41 1830.46,1213.41 1831.05,1213.41 1831.63,1213.41 1832.22,1213.41 1832.81,1213.41 1833.39,1213.41 1833.98,1213.41 1834.56,1213.41 1835.15,1213.41 1835.74,1213.41 1836.32,1213.41 1836.91,1213.41 1837.5,1213.41 1838.08,1213.41 1838.67,1213.41 1839.26,1213.41 1839.84,1213.41 1840.43,1213.41 1841.01,1213.41 1841.6,1213.41 1842.19,1213.41 1842.77,1213.41 1843.36,1213.41 1843.95,1213.41 1844.53,1213.41 1845.12,1213.41 1845.71,1213.41 1846.29,1213.41 1846.88,1213.41 1847.47,1213.41 1848.05,1213.41 1848.64,1213.41 1849.22,1213.41 1849.81,1213.41 1850.4,1213.41 1850.98,1213.41 1851.57,1213.41 1852.16,1213.41 1852.74,1213.41 1853.33,1213.41 1853.92,1213.41 1854.5,1213.41 1855.09,1213.41 1855.68,1213.41 1856.26,1213.41 1856.85,1213.41 1857.43,1213.41 1858.02,1213.41 1858.61,1213.41 1859.19,1213.41 1859.78,1213.41 1860.37,1213.41 1860.95,1213.41 1861.54,1213.41 1862.13,1213.41 1862.71,1213.41 1863.3,1213.41 1863.88,1213.41 1864.47,1213.41 1865.06,1213.41 1865.64,1213.41 1866.23,1213.41 1866.82,1213.41 1867.4,1213.41 1867.99,1213.41 1868.58,1213.41 1869.16,1213.41 1869.75,1213.41 1870.34,1213.41 1870.92,1213.41 1871.51,1213.41 1872.09,1213.41 1872.68,1213.41 1873.27,1213.41 1873.85,1213.41 1874.44,1213.41 1875.03,1213.41 1875.61,1213.41 1876.2,1213.41 1876.79,1213.41 1877.37,1213.41 1877.96,1213.41 1878.55,1213.41 1879.13,1213.41 1879.72,1213.41 1880.3,1213.41 1880.89,1213.41 1881.48,1213.41 1882.06,1213.41 1882.65,1213.41 1883.24,1213.41 1883.82,1213.41 1884.41,1213.41 1885,1213.41 1885.58,1213.41 1886.17,1213.41 1886.76,1213.41 1887.34,1213.41 1887.93,1213.41 1888.51,1213.41 1889.1,1213.41 1889.69,1213.41 1890.27,1213.41 1890.86,1213.41 1891.45,1213.41 1892.03,1213.41 1892.62,1213.41 1893.21,1213.41 1893.79,1213.41 1894.38,1213.41 1894.96,1213.41 1895.55,1213.41 1896.14,1213.41 1896.72,1213.41 1897.31,1213.41 1897.9,1213.41 1898.48,1213.41 1899.07,1213.41 1899.66,1213.41 1900.24,1213.41 1900.83,1213.41 1901.42,1213.41 1902,1213.41 1902.59,1213.41 1903.17,1213.41 1903.76,1213.41 1904.35,1213.41 1904.93,1213.41 1905.52,1213.41 1906.11,1213.41 1906.69,1213.41 1907.28,1213.41 1907.87,1213.41 1908.45,1213.41 1909.04,1213.41 1909.63,1213.41 1910.21,1213.41 1910.8,1213.41 1911.38,1213.41 1911.97,1213.41 1912.56,1213.41 1913.14,1213.41 1913.73,1213.41 1914.32,1213.41 1914.9,1213.41 1915.49,1213.41 1916.08,1213.41 1916.66,1213.41 1917.25,1213.41 1917.83,1213.41 1918.42,1213.41 1919.01,1213.41 1919.59,1213.41 1920.18,1213.41 1920.77,1213.41 1921.35,1213.41 1921.94,1213.41 1922.53,1213.41 1923.11,1213.41 1923.7,1213.41 1924.29,1213.41 1924.87,1213.41 1925.46,1213.41 1926.04,1213.41 1926.63,1213.41 1927.22,1213.41 1927.8,1213.41 1928.39,1213.41 1928.98,1213.41 1929.56,1213.41 1930.15,1213.41 1930.74,1213.41 1931.32,1213.41 1931.91,1213.41 1932.5,1213.41 1933.08,1213.41 1933.67,1213.41 1934.25,1213.41 1934.84,1213.41 1935.43,1213.41 1936.01,1213.41 1936.6,1213.41 1937.19,1213.41 1937.77,1213.41 1938.36,1213.41 1938.95,1213.41 1939.53,1213.41 1940.12,1213.41 1940.71,1213.41 1941.29,1213.41 1941.88,1213.41 1942.46,1213.41 1943.05,1213.41 1943.64,1213.41 1944.22,1213.41 1944.81,1213.41 1945.4,1213.41 1945.98,1213.41 1946.57,1213.41 1947.16,1213.41 1947.74,1213.41 1948.33,1213.41 1948.91,1213.41 1949.5,1213.41 1950.09,1213.41 1950.67,1213.41 1951.26,1213.41 1951.85,1213.41 1952.43,1213.41 1953.02,1213.41 1953.61,1213.41 1954.19,1213.41 1954.78,1213.41 1955.37,1213.41 1955.95,1213.41 1956.54,1213.41 1957.12,1213.41 1957.71,1213.41 1958.3,1213.41 1958.88,1213.41 1959.47,1213.41 1960.06,1213.41 1960.64,1213.41 1961.23,1213.41 1961.82,1213.41 1962.4,1213.41 1962.99,1213.41 1963.58,1213.41 1964.16,1213.41 1964.75,1213.41 1965.33,1213.41 1965.92,1213.41 1966.51,1213.41 1967.09,1213.41 1967.68,1213.41 1968.27,1213.41 1968.85,1213.41 1969.44,1213.41 1970.03,1213.41 1970.61,1213.41 1971.2,1213.41 1971.78,1213.41 1972.37,1213.41 1972.96,1213.41 1973.54,1213.41 1974.13,1213.41 1974.72,1213.41 1975.3,1213.41 1975.89,1213.41 1976.48,1213.41 1977.06,1213.41 1977.65,1213.41 1978.24,1213.41 1978.82,1213.41 1979.41,1213.41 1979.99,1213.41 1980.58,1213.41 1981.17,1213.41 1981.75,1213.41 1982.34,1213.41 1982.93,1213.41 1983.51,1213.41 1984.1,1213.41 1984.69,1213.41 1985.27,1213.41 1985.86,1213.41 1986.45,1213.41 1987.03,1213.41 1987.62,1213.41 1988.2,1213.41 1988.79,1213.41 1989.38,1213.41 1989.96,1213.41 1990.55,1213.41 1991.14,1213.41 1991.72,1213.41 1992.31,1213.41 1992.9,1213.41 1993.48,1213.41 1994.07,1213.41 1994.65,1213.41 1995.24,1213.41 1995.83,1213.41 1996.41,1213.41 1997,1213.41 1997.59,1213.41 1998.17,1213.41 1998.76,1213.41 1999.35,1213.41 1999.93,1213.41 2000.52,1213.41 2001.11,1213.41 2001.69,1213.41 2002.28,1213.41 2002.86,1213.41 2003.45,1213.41 2004.04,1213.41 2004.62,1213.41 2005.21,1213.41 2005.8,1213.41 2006.38,1213.41 2006.97,1213.41 2007.56,1213.41 2008.14,1213.41 2008.73,1213.41 2009.32,1213.41 2009.9,1213.41 2010.49,1213.41 2011.07,1213.41 2011.66,1213.41 2012.25,1213.41 2012.83,1213.41 2013.42,1213.41 2014.01,1213.41 2014.59,1213.41 2015.18,1213.41 2015.77,1213.41 2016.35,1213.41 2016.94,1213.41 2017.53,1213.41 2018.11,1213.41 2018.7,1213.41 2019.28,1213.41 2019.87,1213.41 2020.46,1213.41 2021.04,1213.41 2021.63,1213.41 2022.22,1213.41 2022.8,1213.41 2023.39,1213.41 2023.98,1213.41 2024.56,1213.41 2025.15,1213.41 2025.73,1213.41 2026.32,1213.41 2026.91,1213.41 2027.49,1213.41 2028.08,1213.41 2028.67,1213.41 2029.25,1213.41 2029.84,1213.41 2030.43,1213.41 2031.01,1213.41 2031.6,1213.41 2032.19,1213.41 2032.77,1213.41 2033.36,1213.41 2033.94,1213.41 2034.53,1213.41 2035.12,1213.41 2035.7,1213.41 2036.29,1213.41 2036.88,1213.41 2037.46,1213.41 2038.05,1213.41 2038.64,1213.41 2039.22,1213.41 2039.81,1213.41 2040.4,1213.41 2040.98,1213.41 2041.57,1213.41 2042.15,1213.41 2042.74,1213.41 2043.33,1213.41 2043.91,1213.41 2044.5,1213.41 2045.09,1213.41 2045.67,1213.41 2046.26,1213.41 2046.85,1213.41 2047.43,1213.41 2048.02,1213.41 2048.6,1213.41 2049.19,1213.41 2049.78,1213.41 2050.36,1213.41 2050.95,1213.41 2051.54,1213.41 2052.12,1213.41 2052.71,1213.41 2053.3,1213.41 2053.88,1213.41 2054.47,1213.41 2055.06,1213.41 2055.64,1213.41 2056.23,1213.41 2056.81,1213.41 2057.4,1213.41 2057.99,1213.41 2058.57,1213.41 2059.16,1213.41 2059.75,1213.41 2060.33,1213.41 2060.92,1213.41 2061.51,1213.41 2062.09,1213.41 2062.68,1213.41 2063.27,1213.41 2063.85,1213.41 2064.44,1213.41 2065.02,1213.41 2065.61,1213.41 2066.2,1213.41 2066.78,1213.41 2067.37,1213.41 2067.96,1213.41 2068.54,1213.41 2069.13,1213.41 2069.72,1213.41 2070.3,1213.41 2070.89,1213.41 2071.48,1213.41 2072.06,1213.41 2072.65,1213.41 2073.23,1213.41 2073.82,1213.41 2074.41,1213.41 2074.99,1213.41 2075.58,1213.41 2076.17,1213.41 2076.75,1213.41 2077.34,1213.41 2077.93,1213.41 2078.51,1213.41 2079.1,1213.41 2079.68,1213.41 2080.27,1213.41 2080.86,1213.41 2081.44,1213.41 2082.03,1213.41 2082.62,1213.41 2083.2,1213.41 2083.79,1213.41 2084.38,1213.41 2084.96,1213.41 2085.55,1213.41 2086.14,1213.41 2086.72,1213.41 2087.31,1213.41 2087.89,1213.41 2088.48,1213.41 2089.07,1213.41 2089.65,1213.41 2090.24,1213.41 2090.83,1213.41 2091.41,1213.41 2092,1213.41 2092.59,1213.41 2093.17,1213.41 2093.76,1213.41 2094.35,1213.41 2094.93,1213.41 2095.52,1213.41 2096.1,1213.41 2096.69,1213.41 2097.28,1213.41 2097.86,1213.41 2098.45,1213.41 2099.04,1213.41 2099.62,1213.41 2100.21,1213.41 2100.8,1213.41 2101.38,1213.41 2101.97,1213.41 2102.55,1213.41 2103.14,1213.41 2103.73,1213.41 2104.31,1213.41 2104.9,1213.41 2105.49,1213.41 2106.07,1213.41 2106.66,1213.41 2107.25,1213.41 2107.83,1213.41 2108.42,1213.41 2109.01,1213.41 2109.59,1213.41 2110.18,1213.41 2110.76,1213.41 2111.35,1213.41 2111.94,1213.41 2112.52,1213.41 2113.11,1213.41 2113.7,1213.41 2114.28,1213.41 2114.87,1213.41 2115.46,1213.41 2116.04,1213.41 2116.63,1213.41 2117.22,1213.41 2117.8,1213.41 2118.39,1213.41 2118.97,1213.41 2119.56,1213.41 2120.15,1213.41 2120.73,1213.41 2121.32,1213.41 2121.91,1213.41 2122.49,1213.41 2123.08,1213.41 2123.67,1213.41 2124.25,1213.41 2124.84,1213.41 2125.42,1213.41 2126.01,1213.41 2126.6,1213.41 2127.18,1213.41 2127.77,1213.41 2128.36,1213.41 2128.94,1213.41 2129.53,1213.41 2130.12,1213.41 2130.7,1213.41 2131.29,1213.41 2131.88,1213.41 2132.46,1213.41 2133.05,1213.41 2133.63,1213.41 2134.22,1213.41 2134.81,1213.41 2135.39,1213.41 2135.98,1213.41 2136.57,1213.41 2137.15,1213.41 2137.74,1213.41 2138.33,1213.41 2138.91,1213.41 2139.5,1213.41 2140.09,1213.41 2140.67,1213.41 2141.26,1213.41 2141.84,1213.41 2142.43,1213.41 2143.02,1213.41 2143.6,1213.41 2144.19,1213.41 2144.78,1213.41 2145.36,1213.41 2145.95,1213.41 2146.54,1213.41 2147.12,1213.41 2147.71,1213.41 2148.3,1213.41 2148.88,1213.41 2149.47,1213.41 2150.05,1213.41 2150.64,1213.41 2151.23,1213.41 2151.81,1213.41 2152.4,1213.41 2152.99,1213.41 2153.57,1213.41 2154.16,1213.41 2154.75,1213.41 2155.33,1213.41 2155.92,1213.41 2156.5,1213.41 2157.09,1213.41 2157.68,1213.41 2158.26,1213.41 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.01,1195.3 1399.1,899.083 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.08 985.439,1195.3 2158.26,1195.3 2158.26,1231.08 985.439,1231.08 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip493\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip493)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-8345.68 166.029,-7908.13 166.588,-8578.43 167.147,-8234.4 167.706,-8826.36 168.266,-8520.5 168.825,-9069.7 169.384,-9562.51 169.943,-9988.81 170.503,-10380.3 171.062,-10725.7 171.621,-10403.2 172.18,-10708.7 172.74,-10974.3 173.299,-11189.8 173.858,-11371.1 174.417,-11086.7 174.977,-11226.3 175.536,-11324 176.095,-11396.4 176.655,-11451.3 177.214,-11169.3 177.773,-10900.5 178.332,-10907.5 178.892,-10900.3 179.451,-10620.7 180.01,-10578.2 180.569,-10301.2 181.129,-10232.1 181.688,-9962.68 182.247,-9896.9 182.806,-9810.65 183.366,-9727 183.925,-9629.36 184.484,-9363.96 185.043,-9254.11 185.603,-8870.92 186.162,-8626.35 186.721,-8250.49 187.28,-8015.06 187.84,-7900.56 188.399,-7473.78 188.958,-6989.37 189.517,-6630.6 190.077,-6459.03 190.636,-6287.7 191.195,-6111.28 191.754,-5937.39 192.314,-5773.56 192.873,-5617.18 193.432,-5526.79 193.991,-5365.3 194.551,-5267.75 195.11,-5003.43 195.669,-4751.86 196.228,-4608.18 196.788,-4517.7 197.347,-4380.44 197.906,-4196.62 198.465,-4017.78 199.025,-3899.37 199.584,-3820.04 200.143,-3699.37 200.702,-3499.67 201.262,-3347.46 201.821,-3156.96 202.38,-3011.9 202.939,-2870.92 203.499,-2815.47 204.058,-2638.79 204.617,-2575.89 205.176,-2409.9 205.736,-2352.03 206.295,-2225.57 206.854,-2102.87 207.413,-2019.84 207.973,-1968.41 208.532,-1885.9 209.091,-1778.83 209.65,-1670.13 210.21,-1597.76 210.769,-1470.35 211.328,-1400.45 211.887,-1274.07 212.447,-1237.21 213.006,-1142.62 213.565,-1051.91 214.124,-970.689 214.684,-912.549 215.243,-798.397 215.802,-765.794 216.361,-735.808 216.921,-701.107 217.48,-666.654 218.039,-635.38 218.598,-599.885 219.158,-497.377 219.717,-402.434 220.276,-355.429 220.835,-289.117 221.395,-270.217 221.954,-180.119 222.513,-134.721 223.072,-71.8758 223.632,-8.72531 224.191,67.4895 224.75,81.8419 225.309,139.443 225.869,236.876 226.428,224.982 226.987,215.695 227.546,228.62 228.106,278.376 228.665,288.509 229.224,280.838 229.783,315.822 230.343,327.557 230.902,342.364 231.461,358.13 232.02,412.489 232.58,499.898 233.139,546.719 233.698,572.742 234.257,633.236 234.817,655.146 235.376,672.985 235.935,673.722 236.494,675.601 237.054,678.062 237.613,665.112 238.172,701.577 238.731,685.495 239.291,664.646 239.85,727.154 240.409,723.956 240.968,744.567 241.528,801.235 242.087,813.244 242.646,833.742 243.205,849.789 243.765,850.833 244.324,850.016 244.883,828.819 245.442,880 246.002,915.168 246.561,907.564 247.12,919.296 247.679,932.255 248.239,909.452 248.798,887 249.357,937.222 249.916,920.361 250.476,915.282 251.035,1001.23 251.594,1016.27 252.153,1013.19 252.713,1043.4 253.272,1072.76 253.831,1080.41 254.39,1089.5 254.95,1114.05 255.509,1104.76 256.068,1109.21 256.627,1097.26 257.187,1108.1 257.746,1129.99 258.305,1136.6 258.864,1106.06 259.424,1096.23 259.983,1125.06 260.542,1115.56 261.101,1111.28 261.661,1120.7 262.22,1093.41 262.779,1104.59 263.338,1112.16 263.898,1100.48 264.457,1073.14 265.016,1047.6 265.575,1042.95 266.135,1039.34 266.694,1050.14 267.253,1026.55 267.812,1037.35 268.372,1033.76 268.931,992.258 269.49,1022.91 270.049,1035.57 270.609,1017.68 271.168,1029.87 271.727,1013.2 272.286,991.153 272.846,1007.97 273.405,1022.44 273.964,1018.46 274.523,979.198 275.083,990.447 275.642,989.869 276.201,971.302 276.76,969.682 277.32,970.402 277.879,982.819 278.438,949.069 278.997,980.807 279.557,996.244 280.116,1005.53 280.675,1018.85 281.234,1013.76 281.794,989.896 282.353,985.122 282.912,999.382 283.471,999.409 284.031,1078.56 284.59,1106.32 285.149,1098.34 285.708,1088.42 286.268,1079.21 286.827,1066.3 287.386,1074.91 287.945,1048.86 288.505,1055.88 289.064,1080.15 289.623,1103.27 290.182,1076.5 290.742,1053.01 291.301,1078.12 291.86,1087.46 292.419,1061.27 292.979,1054.15 293.538,1049.71 294.097,1042.64 294.656,1051.8 295.216,1061.65 295.775,1006.81 296.334,1017.48 296.893,996.235 297.453,973.423 298.012,989.033 298.571,1068.19 299.13,1093.4 299.69,1085.97 300.249,1078.12 300.808,1068.64 301.368,1075.28 301.927,1084.7 302.486,1060.64 303.045,1023.56 303.605,1018.05 304.164,1000.2 304.723,1014.16 305.282,1025.8 305.842,1020.94 306.401,996.39 306.96,993.122 307.519,969.808 308.079,981.675 308.638,948.866 309.197,944.545 309.756,941.32 310.316,917.857 310.875,916.215 311.434,917.411 311.993,931.313 312.553,913.667 313.112,928.512 313.671,975.85 314.23,976.17 314.79,970.631 315.349,1016.45 315.908,1055.04 316.467,1080.57 317.027,1067.57 317.586,1074.74 318.145,1063.6 318.704,1036.75 319.264,1011 319.823,1051.91 320.382,1077.97 320.941,1082.73 321.501,1103.84 322.06,1112.35 322.619,1084.41 323.178,1079.94 323.738,1038.06 324.297,999.235 324.856,979.728 325.415,972.098 325.975,982.553 326.534,980.37 327.093,991.104 327.652,983.558 328.212,964.813 328.771,977.637 329.33,956.97 329.889,918.523 330.449,949.124 331.008,979.398 331.567,971.797 332.126,963.545 332.686,973.455 333.245,949.731 333.804,929.46 334.363,990.377 334.923,949.939 335.482,943.247 336.041,917.105 336.6,912.153 337.16,908.585 337.719,906.772 338.278,964.369 338.837,1003.83 339.397,979.327 339.956,1003.97 340.515,995.561 341.074,988.624 341.634,965.25 342.193,960.021 342.752,937.514 343.311,946.398 343.871,924.972 344.43,936.321 344.989,916.44 345.548,927.391 346.108,952.932 346.667,961.341 347.226,968.66 347.785,963.398 348.345,944.384 348.904,951.927 349.463,977.037 350.022,968.53 350.582,961.123 351.141,950.47 351.7,939.659 352.259,966.986 352.819,974.783 353.378,950.434 353.937,960.234 354.496,922.579 355.056,900.343 355.615,884.052 356.174,898.331 356.733,877.532 357.293,858.449 357.852,889.247 358.411,899.512 358.97,879.753 359.53,907.696 360.089,899.972 360.648,847.114 361.207,862.383 361.767,878.107 362.326,858.502 362.885,871.792 363.444,817.173 364.004,832.3 364.563,831.887 365.122,849.457 365.681,850.725 366.241,851.365 366.8,832.934 367.359,863.254 367.918,862.041 368.478,844.529 369.037,841.855 369.596,840.239 370.155,807.783 370.715,791.596 371.274,821.782 371.833,868.678 372.392,879.922 372.952,858.802 373.511,820.268 374.07,852.302 374.629,851.488 375.189,865.524 375.748,875.787 376.307,874.419 376.866,886.71 377.426,915.51 377.985,893.256 378.544,889.44 379.103,885.431 379.663,895.699 380.222,878.619 380.781,889.482 381.34,888.575 381.9,851.63 382.459,849.12 383.018,843.824 383.577,857.494 384.137,837.131 384.696,867.095 385.255,892.941 385.814,870.565 386.374,897.491 386.933,859.527 387.492,839.448 388.051,756.34 388.611,776.888 389.17,778.898 389.729,831.598 390.288,831.685 390.848,843.318 391.407,839.191 391.966,837.805 392.525,819.603 393.085,803.359 393.644,751.659 394.203,768.474 394.762,786.654 395.322,803.064 395.881,790.217 396.44,743.952 396.999,746.001 397.559,764.94 398.118,779.954 398.677,796.231 399.236,766.071 399.796,734.568 400.355,721.012 400.914,709.79 401.473,733.263 402.033,718.713 402.592,769.235 403.151,786.112 403.71,785.303 404.27,801.546 404.829,799.175 405.388,814.022 405.947,808.502 406.507,804.717 407.066,818.008 407.625,815.237 408.184,797.659 408.744,764.013 409.303,830.452 409.862,841.291 410.421,840.378 410.981,838.326 411.54,835.646 412.099,798.718 412.658,829.351 413.218,826.095 413.777,842.835 414.336,837.502 414.895,833.328 415.455,849.091 416.014,858.924 416.573,868.395 417.132,879.026 417.692,894.247 418.251,901.269 418.81,911.991 419.369,938.39 419.929,897.711 420.488,892.16 421.047,883.582 421.606,895.767 422.166,891.549 422.725,849.61 423.284,845.014 423.843,824.53 424.403,854.697 424.962,836.459 425.521,829.604 426.08,839.021 426.64,783.463 427.199,786.381 427.758,784.098 428.318,832.693 428.877,857.163 429.436,804.883 429.995,770.362 430.555,723.157 431.114,743.265 431.673,776.062 432.232,759.637 432.792,762.885 433.351,778.901 433.91,793.337 434.469,825.248 435.029,834.312 435.588,848.451 436.147,796.434 436.706,793.331 437.266,806.293 437.825,804.385 438.384,807.041 438.943,784.761 439.503,765.767 440.062,779.099 440.621,745.989 441.18,747.937 441.74,764.749 442.299,766.197 442.858,765.729 443.417,812.357 443.977,809.216 444.536,805.863 445.095,805.225 445.654,836.483 446.214,847.83 446.773,843.9 447.332,839.06 447.891,833.31 448.451,830.368 449.01,810.233 449.569,807.946 450.128,789.269 450.688,767.485 451.247,766.392 451.806,767.211 452.365,765.049 452.925,762.346 453.484,714.446 454.043,700.508 454.602,737.235 455.162,738.121 455.721,774.052 456.28,773.126 456.839,771.308 457.399,771.506 457.958,735.448 458.517,752.158 459.076,769.987 459.636,737.163 460.195,719.065 460.754,718.905 461.313,718.974 461.873,735.973 462.432,701.143 462.991,684.611 463.55,670.717 464.11,676.787 464.669,698.539 465.228,718.865 465.787,737.74 466.347,737.133 466.906,770.255 467.465,753.596 468.024,736.251 468.584,736.473 469.143,733.533 469.702,700.639 470.261,717.34 470.821,719.914 471.38,688.547 471.939,711.147 472.498,710.522 473.058,729.321 473.617,714.624 474.176,683.623 474.735,687.117 475.295,691.603 475.854,707.555 476.413,709.274 476.972,757.582 477.532,738.052 478.091,751.391 478.65,769.182 479.209,782.403 479.769,779.229 480.328,793.919 480.887,774.028 481.446,821.222 482.006,800.802 482.565,829.164 483.124,838.811 483.683,817.486 484.243,800.602 484.802,797.247 485.361,793.754 485.92,759.845 486.48,727.813 487.039,764.782 487.598,747.456 488.157,747.19 488.717,728.068 489.276,727.314 489.835,716.106 490.394,734.093 490.954,735.321 491.513,702.872 492.072,703.811 492.631,737.493 493.191,771.791 493.75,780.701 494.309,808.344 494.868,772.577 495.428,787.035 495.987,766.643 496.546,784.232 497.105,800.163 497.665,797.491 498.224,809.129 498.783,837.209 499.342,830.045 499.902,826.192 500.461,837.285 501.02,827.998 501.579,841.175 502.139,820.012 502.698,817.595 503.257,800.212 503.816,798.657 504.376,796.783 504.935,777.838 505.494,771.793 506.053,801.705 506.613,826.547 507.172,791.22 507.731,803.096 508.29,832.284 508.85,792.656 509.409,803.965 509.968,783.123 510.527,797.324 511.087,779.437 511.646,743.05 512.205,740.412 512.764,769.37 513.324,763.995 513.883,730.026 514.442,763.472 515.001,755.387 515.561,742.437 516.12,708.249 516.679,744.104 517.238,696.531 517.798,746.936 518.357,745.467 518.916,742.93 519.475,726.796 520.035,743.941 520.594,758.286 521.153,758.981 521.712,806.134 522.272,767.412 522.831,764.009 523.39,762.147 523.949,745.266 524.509,774.458 525.068,787.35 525.627,801.334 526.186,815.235 526.746,810.667 527.305,804.196 527.864,826.98 528.423,803.216 528.983,814.1 529.542,821.972 530.101,817.711 530.66,811.319 531.22,776.637 531.779,774.993 532.338,769.248 532.897,752.95 533.457,735.502 534.016,735.44 534.575,735.267 535.134,737.728 535.694,754.032 536.253,783.848 536.812,748.675 537.371,796.456 537.931,795.349 538.49,754.989 539.049,765.391 539.608,747.348 540.168,742.437 540.727,743.053 541.286,709.897 541.845,741.069 542.405,724.811 542.964,723.677 543.523,739.096 544.082,717.486 544.642,716.17 545.201,716.632 545.76,716.309 546.319,750.024 546.879,751.414 547.438,732.681 547.997,780.643 548.556,793.543 549.116,775.776 549.675,773.289 550.234,782.737 550.793,742.762 551.353,773.579 551.912,719.527 552.471,717.578 553.031,685.344 553.59,641.962 554.149,662.738 554.708,615.839 555.268,620.361 555.827,623.934 556.386,595.69 556.945,551.156 557.505,575.506 558.064,598.766 558.623,638.272 559.182,640.063 559.742,656.56 560.301,640.551 560.86,645.387 561.419,697.442 561.979,683.54 562.538,704.253 563.097,720.533 563.656,688.109 564.216,721.185 564.775,674.747 565.334,631.386 565.893,671.332 566.453,674.899 567.012,693.364 567.571,741.667 568.13,756.713 568.69,740.122 569.249,758.022 569.808,754.53 570.367,752.728 570.927,764.262 571.486,744.486 572.045,727.085 572.604,725.922 573.164,722.341 573.723,738.345 574.282,704.719 574.841,721.723 575.401,704.181 575.96,736.401 576.519,733.029 577.078,712.7 577.638,777.993 578.197,790.155 578.756,773.091 579.315,770.351 579.875,784.457 580.434,783.397 580.993,776.18 581.552,759.088 582.112,755.675 582.671,768.549 583.23,766.162 583.789,750.1 584.349,698.05 584.908,667.09 585.467,671.636 586.026,690.002 586.586,690.1 587.145,691.911 587.704,693.076 588.263,675.77 588.823,660.82 589.382,678.461 589.941,711.305 590.5,679.623 591.06,670.216 591.619,675.696 592.178,674.56 592.737,690.533 593.297,656.097 593.856,695.244 594.415,680.469 594.974,648.672 595.534,670.574 596.093,691.914 596.652,678.596 597.211,681.275 597.771,698.644 598.33,665.614 598.889,649.598 599.448,652.283 600.008,655.16 600.567,644.341 601.126,631.338 601.685,636.345 602.245,642.375 602.804,644.743 603.363,649.609 603.922,666.799 604.482,637.982 605.041,612.997 605.6,616.669 606.159,653.475 606.719,642.614 607.278,660.024 607.837,666.254 608.396,605.556 608.956,643.787 609.515,650.83 610.074,623.316 610.633,630.784 611.193,636.321 611.752,642.184 612.311,648.377 612.87,653.91 613.43,659.668 613.989,645.628 614.548,664.543 615.107,668.111 615.667,688.734 616.226,688.668 616.785,704.981 617.344,671.376 617.904,656.282 618.463,643.08 619.022,676.818 619.581,658.141 620.141,695.388 620.7,728.268 621.259,726.871 621.818,728.348 622.378,713.296 622.937,685.496 623.496,702.145 624.055,688.158 624.615,675.286 625.174,661.403 625.733,666.81 626.292,699.019 626.852,686.877 627.411,676.268 627.97,644.712 628.529,648.226 629.089,670.863 629.648,704.38 630.207,705.339 630.766,689.772 631.326,676.487 631.885,710.519 632.444,693.904 633.003,697.037 633.563,696.29 634.122,701.2 634.681,683.752 635.24,686.429 635.8,689.997 636.359,704.572 636.918,688.894 637.477,688.982 638.037,677.239 638.596,711.48 639.155,692.927 639.714,694.238 640.274,645.6 640.833,646.981 641.392,666.61 641.951,683.148 642.511,652.943 643.07,640.85 643.629,643.482 644.188,682.325 644.748,683.707 645.307,701.662 645.866,702.499 646.425,701.977 646.985,702.554 647.544,718.766 648.103,700.794 648.662,718.196 649.222,717.015 649.781,713.103 650.34,700.059 650.899,748.2 651.459,764.33 652.018,748.368 652.577,746.938 653.136,759.58 653.696,786.386 654.255,765.63 654.814,761.431 655.373,774.533 655.933,769.569 656.492,762.536 657.051,791.407 657.61,770.084 658.17,802.394 658.729,826.926 659.288,819.842 659.847,798.669 660.407,808.027 660.966,849.292 661.525,811.111 662.084,803.549 662.644,797.072 663.203,789.397 663.762,799.21 664.321,840.123 664.881,831.985 665.44,821.822 665.999,815.129 666.558,840.394 667.118,801.26 667.677,816.177 668.236,826.417 668.795,849.518 669.355,841.445 669.914,818.774 670.473,813.644 671.032,824.082 671.592,804.491 672.151,813.551 672.71,822.466 673.269,847.969 673.829,843.367 674.388,850.651 674.947,825.366 675.506,815.291 676.066,807.526 676.625,767.417 677.184,809.938 677.743,836.448 678.303,832.191 678.862,777.558 679.421,740.022 679.981,687.446 680.54,701.821 681.099,684.527 681.658,684.009 682.218,671.052 682.777,672.04 683.336,659.005 683.895,629.298 684.455,598.078 685.014,599.242 685.573,604.372 686.132,627.845 686.692,615.486 687.251,617.839 687.81,651.913 688.369,653.288 688.929,686.96 689.488,689.213 690.047,723.807 690.606,721.866 691.166,734.812 691.725,747.455 692.284,747.252 692.843,743.258 693.403,755.87 693.962,753.7 694.521,737.173 695.08,667.307 695.64,650.987 696.199,685.973 696.758,620.868 697.317,591.889 697.877,627.865 698.436,600.492 698.995,586.23 699.554,623.563 700.114,628.235 700.673,649.429 701.232,651.148 701.791,651.826 702.351,653.816 702.91,672.824 703.469,658.101 704.028,627.128 704.588,630.699 705.147,652.338 705.706,637.331 706.265,640.521 706.825,640.894 707.384,622.46 707.943,609.058 708.502,647.29 709.062,651.636 709.621,636.866 710.18,612.226 710.739,619.772 711.299,672.819 711.858,673.757 712.417,660.827 712.976,709.008 713.536,727.434 714.095,694.831 714.654,675.335 715.213,694.614 715.773,696.985 716.332,645.909 716.891,649.945 717.45,650.891 718.01,671.877 718.569,639.651 719.128,660.078 719.687,679.686 720.247,709.692 720.806,712.866 721.365,696.05 721.924,743.36 722.484,771.772 723.043,780.615 723.602,810.74 724.161,823.987 724.721,787.146 725.28,780.436 725.839,775.835 726.398,772.03 726.958,751.866 727.517,780.604 728.076,793.284 728.635,788.315 729.195,783.276 729.754,797.499 730.313,773.824 730.872,783.359 731.432,742.346 731.991,753.02 732.55,718.279 733.109,748.358 733.669,729.107 734.228,743.251 734.787,692.745 735.346,679.26 735.906,665.412 736.465,683.804 737.024,665.782 737.583,682.359 738.143,699.674 738.702,668.283 739.261,685.001 739.82,671.655 740.38,690.2 740.939,689.404 741.498,670.803 742.057,658.957 742.617,672.185 743.176,703.375 743.735,670.46 744.294,656.88 744.854,657.317 745.413,612.913 745.972,633.482 746.531,617.775 747.091,636.1 747.65,639.304 748.209,610.329 748.768,612.637 749.328,599.098 749.887,589.819 750.446,610.589 751.005,613.594 751.565,574.316 752.124,594.938 752.683,600.329 753.242,571.195 753.802,544.345 754.361,552.126 754.92,592.786 755.479,598.457 756.039,587.771 756.598,624.929 757.157,647.01 757.716,662.494 758.276,649.477 758.835,701.223 759.394,698.604 759.953,697.515 760.513,744.543 761.072,738.257 761.631,716.525 762.19,730.981 762.75,717.441 763.309,715.883 763.868,711.767 764.427,709.259 764.987,756.663 765.546,755.23 766.105,732.476 766.664,761.807 767.224,744.415 767.783,757.259 768.342,752.873 768.901,749.362 769.461,745.054 770.02,744.194 770.579,743.788 771.138,742.384 771.698,741.877 772.257,737.4 772.816,717.458 773.375,683.948 773.935,683.119 774.494,701.499 775.053,718.776 775.612,736.861 776.172,721.461 776.731,703.127 777.29,704.98 777.849,702.934 778.409,752.419 778.968,734.109 779.527,719.554 780.086,766.97 780.646,780.23 781.205,727.524 781.764,725.679 782.323,739.297 782.883,736.988 783.442,699.256 784.001,681.509 784.56,680.937 785.12,665.279 785.679,684.662 786.238,649.585 786.797,651.65 787.357,654.753 787.916,625.179 788.475,594.479 789.034,598.258 789.594,584.306 790.153,587.8 790.712,605.69 791.271,627.972 791.831,647.311 792.39,683.05 792.949,731.225 793.508,743.947 794.068,742.061 794.627,741.549 795.186,739.371 795.745,737.775 796.305,733.575 796.864,748.569 797.423,761.949 797.982,709.886 798.542,696.12 799.101,646.846 799.66,632.551 800.219,634.109 800.779,619.003 801.338,654.612 801.897,657.932 802.456,675.649 803.016,706.034 803.575,704.457 804.134,623.28 804.693,624.466 805.253,628.784 805.812,666.751 806.371,651.135 806.931,635.03 807.49,641.657 808.049,660.974 808.608,645.178 809.168,647.339 809.727,650.524 810.286,654.453 810.845,655.756 811.405,655.055 811.964,641.642 812.523,678.476 813.082,696.173 813.642,677.381 814.201,663.396 814.76,677.412 815.319,679.856 815.879,714.523 816.438,715.203 816.997,693.708 817.556,705.644 818.116,686.861 818.675,686.764 819.234,702.676 819.793,683.828 820.353,679.152 820.912,661.383 821.471,678.463 822.03,678.497 822.59,707.973 823.149,673.975 823.708,675.653 824.267,692.673 824.827,726.801 825.386,724.048 825.945,744.671 826.504,744.446 827.064,758.176 827.623,677.084 828.182,710.328 828.741,693.791 829.301,643.538 829.86,615.935 830.419,634.605 830.978,643.102 831.538,662.28 832.097,647.841 832.656,668.465 833.215,666.133 833.775,650.91 834.334,635.4 834.893,621.765 835.452,641.24 836.012,660.7 836.571,614.845 837.13,633.954 837.689,637.777 838.249,656.745 838.808,630.66 839.367,647.16 839.926,648.645 840.486,637.445 841.045,658.438 841.604,681.878 842.163,702.316 842.723,714.966 843.282,714.317 843.841,680.384 844.4,631.24 844.96,615.551 845.519,632.038 846.078,604.468 846.637,544.741 847.197,569.723 847.756,575.091 848.315,616.495 848.874,617.824 849.434,681.142 849.993,700.745 850.552,716.246 851.111,699.279 851.671,699.846 852.23,730.061 852.789,745.595 853.348,777.52 853.908,756.592 854.467,720.426 855.026,702.358 855.585,687.278 856.145,718.236 856.704,717.137 857.263,734.076 857.822,729.835 858.382,743.785 858.941,728.207 859.5,744.067 860.059,726.618 860.619,723.154 861.178,735.935 861.737,747.841 862.296,761.697 862.856,720.212 863.415,748.774 863.974,729.773 864.533,711.483 865.093,695.007 865.652,678.347 866.211,660.165 866.77,661.64 867.33,658.113 867.889,643.213 868.448,647.274 869.007,614.796 869.567,603.484 870.126,590.659 870.685,614.644 871.244,633.923 871.804,618.585 872.363,623.659 872.922,624.84 873.481,630.083 874.041,631.82 874.6,632.773 875.159,635.673 875.718,656.528 876.278,673.911 876.837,673.208 877.396,689.6 877.955,755.691 878.515,751.181 879.074,731.342 879.633,745.8 880.192,714.536 880.752,682.128 881.311,681.921 881.87,680.702 882.429,679.581 882.989,662.435 883.548,698.2 884.107,681.634 884.666,685.474 885.226,666.996 885.785,651.907 886.344,660.948 886.903,663.202 887.463,616.657 888.022,655.87 888.581,659.878 889.14,694.674 889.7,693.247 890.259,707.466 890.818,706.075 891.377,704.368 891.937,692.668 892.496,675.542 893.055,722.075 893.614,706.333 894.174,723.948 894.733,738.347 895.292,751.004 895.851,806.822 896.411,802.081 896.97,750.182 897.529,749.636 898.088,745.323 898.648,709.138 899.207,708.313 899.766,725.021 900.325,725.884 900.885,744.022 901.444,727.442 902.003,753.589 902.562,750.718 903.122,765.589 903.681,729.295 904.24,757.303 904.799,734.107 905.359,728.138 905.918,726.941 906.477,695.293 907.036,692.839 907.596,692.05 908.155,706.745 908.714,689.937 909.273,724.303 909.833,702.389 910.392,702.865 910.951,700.275 911.51,683.339 912.07,682.463 912.629,668.332 913.188,652.552 913.747,621.018 914.307,640.901 914.866,640.284 915.425,675.11 915.984,656.917 916.544,673.93 917.103,675.06 917.662,722.848 918.221,720.044 918.781,702.676 919.34,667.924 919.899,653.262 920.458,655.946 921.018,622.975 921.577,625.473 922.136,642.798 922.695,644.426 923.255,632.521 923.814,652.326 924.373,652.481 924.932,653.911 925.492,660.643 926.051,662.632 926.61,646.957 927.169,664.796 927.729,662.426 928.288,678.267 928.847,678.743 929.406,695.682 929.966,679.933 930.525,663.726 931.084,648.059 931.644,648.177 932.203,652.789 932.762,657.148 933.321,658.136 933.881,659.306 934.44,659.117 934.999,659.909 935.558,692.975 936.118,661.257 936.677,663.199 937.236,632.851 937.795,634.26 938.355,654.346 938.914,686.802 939.473,670.681 940.032,705.112 940.592,719.665 941.151,699.811 941.71,682.791 942.269,697.31 942.829,695.495 943.388,726.804 943.947,724.467 944.506,690.56 945.066,723.604 945.625,753.42 946.184,783.009 946.743,794.525 947.303,839.379 947.862,814.686 948.421,808.282 948.98,815.864 949.54,790.865 950.099,765.949 950.658,812.978 951.217,806.654 951.777,779.444 952.336,727.285 952.895,725.684 953.454,690.922 954.014,676.395 954.573,692.159 955.132,659.497 955.691,643.839 956.251,665.147 956.81,646.291 957.369,646.196 957.928,646.827 958.488,633.542 959.047,601.849 959.606,571.91 960.165,594.911 960.725,601.7 961.284,638.01 961.843,639.469 962.402,639.209 962.962,623.987 963.521,627.479 964.08,633.427 964.639,639.194 965.199,671.973 965.758,691.406 966.317,735.879 966.876,765.547 967.436,760.746 967.995,773.557 968.554,771.178 969.113,752.796 969.673,733.563 970.232,714.342 970.791,716.314 971.35,701.176 971.91,700.935 972.469,715.767 973.028,699.748 973.587,698.799 974.147,700.163 974.706,702.257 975.265,713.756 975.824,712.902 976.384,731.91 976.943,731.874 977.502,694.887 978.061,725.812 978.621,708.512 979.18,658.04 979.739,628.051 980.298,630.078 980.858,648.761 981.417,666.497 981.976,699.777 982.535,703.875 983.095,673.513 983.654,639.747 984.213,611.087 984.772,600.785 985.332,605.293 985.891,643.95 986.45,663.809 987.009,683.348 987.569,699.724 988.128,700.441 988.687,699.038 989.246,680.554 989.806,679.173 990.365,678.668 990.924,709.712 991.483,784.9 992.043,799.35 992.602,821.25 993.161,813.024 993.72,771.383 994.28,762.826 994.839,757.006 995.398,752.869 995.957,751.095 996.517,748.017 997.076,760.428 997.635,740.647 998.194,736.837 998.754,765.205 999.313,744.866 999.872,739.133 1000.43,740.472 1000.99,753.841 1001.55,764.727 1002.11,726.897 1002.67,736.714 1003.23,752.569 1003.79,733.493 1004.35,695.684 1004.91,681.307 1005.46,693.594 1006.02,722.928 1006.58,708.117 1007.14,692.406 1007.7,658.372 1008.26,631.49 1008.82,649.45 1009.38,637.522 1009.94,622.923 1010.5,653.654 1011.06,700.164 1011.62,696.138 1012.18,713.242 1012.73,728.132 1013.29,711.3 1013.85,708.143 1014.41,720.639 1014.97,703.374 1015.53,683.841 1016.09,716.29 1016.65,715.501 1017.21,680.877 1017.77,681.7 1018.33,666.559 1018.89,696.556 1019.45,725.359 1020.01,736.23 1020.56,733.543 1021.12,728.743 1021.68,727.56 1022.24,757.927 1022.8,737.817 1023.36,738.01 1023.92,720.122 1024.48,699.09 1025.04,682.566 1025.6,684.706 1026.16,685.435 1026.72,667.071 1027.28,666.252 1027.83,681.16 1028.39,648.636 1028.95,651.81 1029.51,640.843 1030.07,661.64 1030.63,641.472 1031.19,640.682 1031.75,627.657 1032.31,645.563 1032.87,661.332 1033.43,677.253 1033.99,724.406 1034.55,722.754 1035.1,723.03 1035.66,703.35 1036.22,700.719 1036.78,716.599 1037.34,697.806 1037.9,684.082 1038.46,698.788 1039.02,666.062 1039.58,667.81 1040.14,685.067 1040.7,649.286 1041.26,685.417 1041.82,687.811 1042.38,655.608 1042.93,656.296 1043.49,659.308 1044.05,663.759 1044.61,695.957 1045.17,715.045 1045.73,729.804 1046.29,778.778 1046.85,792.432 1047.41,789.839 1047.97,785.951 1048.53,749.35 1049.09,728.896 1049.65,706.502 1050.2,721.418 1050.76,723.366 1051.32,737.785 1051.88,720.74 1052.44,750.425 1053,749.75 1053.56,762.602 1054.12,741.811 1054.68,738.348 1055.24,731.927 1055.8,731.007 1056.36,725.136 1056.92,687.89 1057.48,753.615 1058.03,765.653 1058.59,742.02 1059.15,721.597 1059.71,753.075 1060.27,736.382 1060.83,715.883 1061.39,696.183 1061.95,612.767 1062.51,619.518 1063.07,611.016 1063.63,615.986 1064.19,604.417 1064.75,594.299 1065.3,580.861 1065.86,603.726 1066.42,621.285 1066.98,604.531 1067.54,574.844 1068.1,594.383 1068.66,555.422 1069.22,545.051 1069.78,555.021 1070.34,546.063 1070.9,551.74 1071.46,543.456 1072.02,568.451 1072.57,572.665 1073.13,578.863 1073.69,586.745 1074.25,590.952 1074.81,598.38 1075.37,582.856 1075.93,606.181 1076.49,626.682 1077.05,614.503 1077.61,633.175 1078.17,632.491 1078.73,619.458 1079.29,623.367 1079.85,657.739 1080.4,627.342 1080.96,629.389 1081.52,650.057 1082.08,686.01 1082.64,660.238 1083.2,679.562 1083.76,742.015 1084.32,688.767 1084.88,687.976 1085.44,705.631 1086,703.023 1086.56,702.864 1087.12,669.619 1087.67,657.94 1088.23,644.096 1088.79,629.763 1089.35,619.307 1089.91,638.048 1090.47,559.32 1091.03,566.675 1091.59,572.931 1092.15,528.835 1092.71,535.469 1093.27,563.159 1093.83,553.764 1094.39,577.498 1094.94,584.173 1095.5,571.762 1096.06,544.346 1096.62,552.671 1097.18,546.014 1097.74,587.446 1098.3,563.224 1098.86,600.357 1099.42,602.951 1099.98,589.774 1100.54,611.082 1101.1,598.803 1101.66,604.259 1102.22,609.218 1102.77,594.486 1103.33,617.863 1103.89,625.903 1104.45,614.865 1105.01,620.086 1105.57,642.103 1106.13,626.784 1106.69,629.949 1107.25,636.19 1107.81,622.993 1108.37,644.415 1108.93,660.013 1109.49,693.584 1110.04,692.244 1110.6,694.342 1111.16,724.735 1111.72,722.233 1112.28,754.302 1112.84,767.303 1113.4,745.231 1113.96,760.39 1114.52,756.872 1115.08,768.567 1115.64,765.1 1116.2,778.419 1116.76,743.792 1117.31,736.768 1117.87,734.397 1118.43,780.527 1118.99,788.679 1119.55,780.827 1120.11,792.987 1120.67,789.018 1121.23,769.227 1121.79,798.759 1122.35,791.609 1122.91,733.544 1123.47,747.636 1124.03,743.109 1124.59,754.743 1125.14,765.178 1125.7,728.13 1126.26,707.909 1126.82,709.849 1127.38,693.953 1127.94,737.138 1128.5,750.608 1129.06,731.151 1129.62,743.021 1130.18,738.824 1130.74,685.565 1131.3,679.576 1131.86,679.613 1132.41,679.844 1132.97,714.551 1133.53,699.166 1134.09,713.508 1134.65,744.456 1135.21,791.452 1135.77,799.65 1136.33,794.294 1136.89,802.609 1137.45,815.351 1138.01,807.321 1138.57,767.656 1139.13,745.883 1139.68,742.038 1140.24,757.01 1140.8,753.3 1141.36,732.127 1141.92,726.806 1142.48,728.127 1143.04,709.607 1143.6,722.316 1144.16,705.299 1144.72,719.635 1145.28,687.202 1145.84,685.86 1146.4,655.205 1146.96,686.867 1147.51,685.318 1148.07,699.072 1148.63,680.289 1149.19,678.346 1149.75,710.889 1150.31,709.307 1150.87,705.887 1151.43,734.197 1151.99,682.801 1152.55,683.487 1153.11,665.049 1153.67,665.772 1154.23,697.696 1154.78,712.502 1155.34,678.712 1155.9,680.367 1156.46,647.733 1157.02,682.423 1157.58,650.697 1158.14,669.638 1158.7,668.889 1159.26,651.095 1159.82,651.676 1160.38,657.871 1160.94,656.626 1161.5,673.037 1162.05,671.587 1162.61,671.535 1163.17,658.145 1163.73,646.886 1164.29,663.447 1164.85,682.649 1165.41,648.926 1165.97,649.802 1166.53,634.838 1167.09,652.422 1167.65,636.938 1168.21,626.543 1168.77,629.416 1169.33,632.076 1169.88,622.211 1170.44,659.534 1171,658.762 1171.56,661.751 1172.12,664.269 1172.68,649.392 1173.24,621.123 1173.8,659.926 1174.36,658.638 1174.92,691.319 1175.48,674.004 1176.04,678.998 1176.6,662.599 1177.15,649.819 1177.71,681.91 1178.27,698.896 1178.83,681.47 1179.39,636.158 1179.95,651.979 1180.51,638.35 1181.07,638.466 1181.63,621.651 1182.19,658.933 1182.75,709.329 1183.31,708.389 1183.87,737.5 1184.43,749.781 1184.98,747.124 1185.54,744.041 1186.1,793.712 1186.66,771.357 1187.22,784.566 1187.78,779.432 1188.34,760.55 1188.9,695.696 1189.46,679.878 1190.02,680.124 1190.58,667.106 1191.14,699.333 1191.7,651.886 1192.25,637.087 1192.81,654.67 1193.37,638.343 1193.93,640.593 1194.49,627.148 1195.05,629.511 1195.61,568.91 1196.17,560.194 1196.73,550.127 1197.29,559.249 1197.85,516.593 1198.41,506.833 1198.97,534.117 1199.52,522.41 1200.08,560.727 1200.64,554.676 1201.2,547.178 1201.76,572.525 1202.32,577.606 1202.88,599.521 1203.44,604.998 1204,608.989 1204.56,614.672 1205.12,633.637 1205.68,637.209 1206.24,639.361 1206.8,640.379 1207.35,642.352 1207.91,676.468 1208.47,665.273 1209.03,648.922 1209.59,630.807 1210.15,634.527 1210.71,654.266 1211.27,702.948 1211.83,702.731 1212.39,703.714 1212.95,686.626 1213.51,685.49 1214.07,702.14 1214.62,670.808 1215.18,690.911 1215.74,709.421 1216.3,725.88 1216.86,725.684 1217.42,720.496 1217.98,733.355 1218.54,732.871 1219.1,730.853 1219.66,742.947 1220.22,740.304 1220.78,752.092 1221.34,747.523 1221.89,714.487 1222.45,712.796 1223.01,711.762 1223.57,726.723 1224.13,674.778 1224.69,674.475 1225.25,674.786 1225.81,708.112 1226.37,690.252 1226.93,725.654 1227.49,724.554 1228.05,695.354 1228.61,679.701 1229.17,709.069 1229.72,737.189 1230.28,737.263 1230.84,751.199 1231.4,765.327 1231.96,761.521 1232.52,777.276 1233.08,755.444 1233.64,736.205 1234.2,696.685 1234.76,730.399 1235.32,758.224 1235.88,788.903 1236.44,782.688 1236.99,776.957 1237.55,755.365 1238.11,765.619 1238.67,759.832 1239.23,737.228 1239.79,750.08 1240.35,715.593 1240.91,729.056 1241.47,740.241 1242.03,720.672 1242.59,717.192 1243.15,698.225 1243.71,665.001 1244.26,695.134 1244.82,696.059 1245.38,667.879 1245.94,653.503 1246.5,688.834 1247.06,688.651 1247.62,687.534 1248.18,706.195 1248.74,733.88 1249.3,746.838 1249.86,777.374 1250.42,740.423 1250.98,754.959 1251.54,764.603 1252.09,743.745 1252.65,708.722 1253.21,656.921 1253.77,657.73 1254.33,642.821 1254.89,644.54 1255.45,647.022 1256.01,635.208 1256.57,657.396 1257.13,657.772 1257.69,612.671 1258.25,646.829 1258.81,666.028 1259.36,681.01 1259.92,635.138 1260.48,653.982 1261.04,641.464 1261.6,613.131 1262.16,601.937 1262.72,591.822 1263.28,596.123 1263.84,600.437 1264.4,626.864 1264.96,646.239 1265.52,667.303 1266.08,669.323 1266.63,701.722 1267.19,699.355 1267.75,667.068 1268.31,671.342 1268.87,702.509 1269.43,702.836 1269.99,686.04 1270.55,699.184 1271.11,730.537 1271.67,729.142 1272.23,726.137 1272.79,757.029 1273.35,768.431 1273.91,749.381 1274.46,731.366 1275.02,709.794 1275.58,706.14 1276.14,705.918 1276.7,670.746 1277.26,657.13 1277.82,676.985 1278.38,695.443 1278.94,693.375 1279.5,689.905 1280.06,659.554 1280.62,693.372 1281.18,678.691 1281.73,682.94 1282.29,666.731 1282.85,682.807 1283.41,681.712 1283.97,680.09 1284.53,666.321 1285.09,664.726 1285.65,665.937 1286.21,663.484 1286.77,652.732 1287.33,655.264 1287.89,675.567 1288.45,657.879 1289,646.309 1289.56,630.109 1290.12,664.216 1290.68,679.793 1291.24,684.236 1291.8,681.01 1292.36,727.526 1292.92,691.783 1293.48,723.945 1294.04,706.096 1294.6,705.402 1295.16,732.712 1295.72,679.756 1296.28,682.511 1296.83,699.989 1297.39,749.07 1297.95,760.413 1298.51,755.683 1299.07,754.4 1299.63,766.327 1300.19,763.093 1300.75,776.469 1301.31,739.035 1301.87,750.036 1302.43,746.881 1302.99,724.66 1303.55,703.535 1304.1,687.882 1304.66,667.697 1305.22,686.736 1305.78,687.9 1306.34,651.226 1306.9,652.183 1307.46,674.011 1308.02,658.854 1308.58,644.898 1309.14,664.492 1309.7,651.19 1310.26,636.829 1310.82,653.19 1311.38,652.377 1311.93,670.406 1312.49,685.086 1313.05,714.483 1313.61,679.744 1314.17,693.417 1314.73,690.626 1315.29,732.885 1315.85,700.671 1316.41,716.063 1316.97,729.426 1317.53,759.8 1318.09,756.091 1318.65,766.302 1319.2,779.931 1319.76,756.736 1320.32,767.718 1320.88,775.67 1321.44,756.032 1322,801.041 1322.56,797.653 1323.12,760.357 1323.68,787.154 1324.24,768.92 1324.8,767.606 1325.36,796.561 1325.92,771.057 1326.47,783.521 1327.03,811.661 1327.59,790.382 1328.15,784.13 1328.71,763.595 1329.27,756.402 1329.83,687.863 1330.39,706.062 1330.95,657.658 1331.51,676.976 1332.07,672.437 1332.63,654.272 1333.19,638.79 1333.75,657.256 1334.3,638.699 1334.86,661.613 1335.42,661.764 1335.98,629.405 1336.54,636.16 1337.1,675.384 1337.66,675.591 1338.22,658.764 1338.78,660.206 1339.34,641.557 1339.9,628.406 1340.46,665.533 1341.02,648.437 1341.57,663.45 1342.13,698.314 1342.69,680.796 1343.25,660.881 1343.81,679.475 1344.37,662.54 1344.93,647.285 1345.49,663.822 1346.05,649.162 1346.61,636.393 1347.17,674.179 1347.73,658.935 1348.29,659.59 1348.84,630.144 1349.4,633.273 1349.96,667.691 1350.52,669.236 1351.08,682.429 1351.64,719.657 1352.2,701.189 1352.76,701.034 1353.32,700.623 1353.88,718.336 1354.44,734.331 1355,716.599 1355.56,679.31 1356.12,631.218 1356.67,664.844 1357.23,662.896 1357.79,666.166 1358.35,682.59 1358.91,665.748 1359.47,651.401 1360.03,636.682 1360.59,671.901 1361.15,672.512 1361.71,641.42 1362.27,674.993 1362.83,687.177 1363.39,687.908 1363.94,670.302 1364.5,655.568 1365.06,671.912 1365.62,670.633 1366.18,658.813 1366.74,660.13 1367.3,644.544 1367.86,664.211 1368.42,663.529 1368.98,677.777 1369.54,662.865 1370.1,680.007 1370.66,696.48 1371.21,694.085 1371.77,722.978 1372.33,705.43 1372.89,640.074 1373.45,593.263 1374.01,611.94 1374.57,614.948 1375.13,583.652 1375.69,607.452 1376.25,609.697 1376.81,578.411 1377.37,599.273 1377.93,602.464 1378.49,604.595 1379.04,628.432 1379.6,598.482 1380.16,618.527 1380.72,655.225 1381.28,622.139 1381.84,593.186 1382.4,602.394 1382.96,623.128 1383.52,613.579 1384.08,634.718 1384.64,669.369 1385.2,651.749 1385.76,687.888 1386.31,703.415 1386.87,719.925 1387.43,733.987 1387.99,730.227 1388.55,711.1 1389.11,726.565 1389.67,724.568 1390.23,739.745 1390.79,765.364 1391.35,744.917 1391.91,726.211 1392.47,677.157 1393.03,674.372 1393.58,658.328 1394.14,674.652 1394.7,672.79 1395.26,655.26 1395.82,673.627 1396.38,638.913 1396.94,623.935 1397.5,628.782 1398.06,599.136 1398.62,587.456 1399.18,609.688 1399.74,602.174 1400.3,604.435 1400.86,604.739 1401.41,592.925 1401.97,595.133 1402.53,630.011 1403.09,665.391 1403.65,654.793 1404.21,657.136 1404.77,656.121 1405.33,607.201 1405.89,577.132 1406.45,553.017 1407.01,561.075 1407.57,583.086 1408.13,587.704 1408.68,594.178 1409.24,586.301 1409.8,607.106 1410.36,613.216 1410.92,616.534 1411.48,605.55 1412.04,625.832 1412.6,630.651 1413.16,633.053 1413.72,639.647 1414.28,641.135 1414.84,658.948 1415.4,664.206 1415.95,664.579 1416.51,684.004 1417.07,650.428 1417.63,651.594 1418.19,637.418 1418.75,659.931 1419.31,631.215 1419.87,632.452 1420.43,634.128 1420.99,655.394 1421.55,624.826 1422.11,644.804 1422.67,631.725 1423.23,635.111 1423.78,701.675 1424.34,713.95 1424.9,760.756 1425.46,754.963 1426.02,733.073 1426.58,730.326 1427.14,744.54 1427.7,745.765 1428.26,711.301 1428.82,693.906 1429.38,711.376 1429.94,710.72 1430.5,712.215 1431.05,743.486 1431.61,772.173 1432.17,787.224 1432.73,796.078 1433.29,807.325 1433.85,820.012 1434.41,845.916 1434.97,833.697 1435.53,763.066 1436.09,761.612 1436.65,758.352 1437.21,752.21 1437.77,731.754 1438.33,712.999 1438.88,692.356 1439.44,718.111 1440,733.72 1440.56,749.241 1441.12,743.333 1441.68,756.166 1442.24,720.475 1442.8,734.517 1443.36,699.371 1443.92,696.054 1444.48,693.562 1445.04,675.36 1445.6,642.12 1446.15,665.565 1446.71,650.552 1447.27,667.102 1447.83,668.246 1448.39,653.159 1448.95,656.528 1449.51,694.25 1450.07,673.546 1450.63,677.678 1451.19,661.173 1451.75,663.698 1452.31,665.677 1452.87,666.604 1453.42,683.515 1453.98,697.703 1454.54,651.167 1455.1,653.001 1455.66,625.21 1456.22,597.469 1456.78,582.978 1457.34,587.709 1457.9,560.727 1458.46,569.368 1459.02,579.995 1459.58,582.911 1460.14,605.116 1460.7,609.105 1461.25,596.065 1461.81,651.17 1462.37,653.053 1462.93,685.125 1463.49,681.235 1464.05,698.176 1464.61,715.832 1465.17,731.896 1465.73,727.726 1466.29,695.355 1466.85,697.42 1467.41,660.115 1467.97,662.114 1468.52,664.434 1469.08,667.342 1469.64,669.217 1470.2,685.906 1470.76,716.15 1471.32,697.095 1471.88,697.444 1472.44,713.494 1473,694.708 1473.56,695.673 1474.12,726.596 1474.68,723.477 1475.24,690.467 1475.79,673.634 1476.35,673.151 1476.91,689.922 1477.47,676.079 1478.03,676.628 1478.59,706.991 1479.15,689.815 1479.71,706.13 1480.27,689.728 1480.83,707.178 1481.39,706.491 1481.95,689.343 1482.51,690.863 1483.07,720.407 1483.62,718.272 1484.18,729.334 1484.74,693.648 1485.3,695.173 1485.86,711.722 1486.42,711.471 1486.98,709.848 1487.54,712.515 1488.1,677.319 1488.66,690.898 1489.22,691.286 1489.78,676.434 1490.34,646.167 1490.89,663.912 1491.45,664.278 1492.01,668.356 1492.57,668.266 1493.13,699.157 1493.69,668.23 1494.25,684.63 1494.81,684.122 1495.37,648.45 1495.93,678.302 1496.49,645.27 1497.05,660.439 1497.61,647.904 1498.16,666.237 1498.72,677.789 1499.28,693.909 1499.84,722.948 1500.4,691.597 1500.96,706.348 1501.52,707.259 1502.08,707.162 1502.64,725.962 1503.2,721.828 1503.76,722.646 1504.32,702.9 1504.88,682.457 1505.44,700.06 1505.99,668.099 1506.55,649.465 1507.11,669.387 1507.67,699.002 1508.23,676.763 1508.79,678.249 1509.35,657.194 1509.91,704.357 1510.47,705.375 1511.03,687.328 1511.59,734.865 1512.15,712.273 1512.71,727.847 1513.26,711.639 1513.82,743.063 1514.38,755.445 1514.94,736.407 1515.5,750.294 1516.06,744.839 1516.62,725.755 1517.18,727.554 1517.74,775.336 1518.3,785.921 1518.86,777.382 1519.42,755.258 1519.98,720.676 1520.53,716.777 1521.09,698.937 1521.65,712.203 1522.21,743.604 1522.77,739.494 1523.33,720.882 1523.89,703.108 1524.45,704.308 1525.01,705.038 1525.57,702.537 1526.13,702.765 1526.69,701.864 1527.25,704.051 1527.81,687.933 1528.36,670.981 1528.92,652.358 1529.48,653.376 1530.04,687.41 1530.6,701.956 1531.16,681.201 1531.72,660.771 1532.28,675.253 1532.84,673.514 1533.4,671.901 1533.96,641.593 1534.52,628.06 1535.08,634.257 1535.63,622.197 1536.19,642.319 1536.75,657.729 1537.31,674.556 1537.87,675.598 1538.43,687.034 1538.99,704.823 1539.55,687.234 1540.11,737.108 1540.67,750.596 1541.23,716.149 1541.79,728.929 1542.35,711.558 1542.9,728.984 1543.46,694.36 1544.02,711.35 1544.58,691.579 1545.14,671.929 1545.7,653.915 1546.26,684.222 1546.82,665.424 1547.38,616.74 1547.94,650.608 1548.5,636.271 1549.06,640.179 1549.62,642.181 1550.18,627.045 1550.73,645.495 1551.29,651.324 1551.85,633.585 1552.41,634.493 1552.97,654.17 1553.53,655.329 1554.09,657.863 1554.65,642.472 1555.21,646.31 1555.77,614.497 1556.33,664.727 1556.89,665.019 1557.45,682.413 1558,665.854 1558.56,682.338 1559.12,699.412 1559.68,697.106 1560.24,729.639 1560.8,739.805 1561.36,736.681 1561.92,718.787 1562.48,713.942 1563.04,699.011 1563.6,729.624 1564.16,712.025 1564.72,695.108 1565.28,678.627 1565.83,661.307 1566.39,680.629 1566.95,618.003 1567.51,590.35 1568.07,579.742 1568.63,569.442 1569.19,610.316 1569.75,631.067 1570.31,649.214 1570.87,665.22 1571.43,682.34 1571.99,693.269 1572.55,664.96 1573.1,665.803 1573.66,682.639 1574.22,668.96 1574.78,634.845 1575.34,656.94 1575.9,675.265 1576.46,677.319 1577.02,697.088 1577.58,694.925 1578.14,696.17 1578.7,714.532 1579.26,710.301 1579.82,744.931 1580.37,757.97 1580.93,755.62 1581.49,737.39 1582.05,746.573 1582.61,730.195 1583.17,740.992 1583.73,721.445 1584.29,722.199 1584.85,739.365 1585.41,706.909 1585.97,706.545 1586.53,658.206 1587.09,661.011 1587.65,647.775 1588.2,667.001 1588.76,684.844 1589.32,718.397 1589.88,715.019 1590.44,730.877 1591,758.485 1591.56,737.999 1592.12,718.483 1592.68,682.253 1593.24,704.233 1593.8,702.561 1594.36,717.405 1594.92,714.999 1595.47,744.097 1596.03,694.018 1596.59,709.259 1597.15,694.195 1597.71,727.524 1598.27,725.373 1598.83,705.438 1599.39,723.631 1599.95,738.091 1600.51,752.016 1601.07,780.17 1601.63,776.935 1602.19,756.253 1602.74,735.168 1603.3,715.423 1603.86,683.137 1604.42,667.186 1604.98,668.169 1605.54,655.159 1606.1,669.901 1606.66,688.877 1607.22,704.836 1607.78,704.996 1608.34,688.266 1608.9,738.484 1609.46,701.883 1610.02,683.007 1610.57,696.643 1611.13,695.269 1611.69,710.689 1612.25,728.793 1612.81,723.79 1613.37,734.362 1613.93,733.88 1614.49,746.182 1615.05,729.635 1615.61,743.503 1616.17,723.998 1616.73,706.862 1617.29,705.294 1617.84,703.804 1618.4,686.274 1618.96,652.673 1619.52,688.163 1620.08,624.377 1620.64,658.73 1621.2,661.399 1621.76,649.296 1622.32,616.555 1622.88,654.18 1623.44,641.926 1624,643.758 1624.56,662.269 1625.11,680.052 1625.67,677.011 1626.23,678.138 1626.79,691.946 1627.35,691.471 1627.91,687.539 1628.47,687.393 1629.03,686.082 1629.59,687.194 1630.15,669.001 1630.71,653.478 1631.27,642.686 1631.83,659.864 1632.39,596.662 1632.94,635.987 1633.5,651.969 1634.06,653.597 1634.62,641.258 1635.18,646.413 1635.74,685.217 1636.3,681.547 1636.86,678.616 1637.42,661.993 1637.98,660.773 1638.54,691.587 1639.1,703.234 1639.66,718.254 1640.21,769.326 1640.77,763.089 1641.33,759.291 1641.89,760.291 1642.45,741.452 1643.01,772.644 1643.57,782.051 1644.13,793.016 1644.69,773.585 1645.25,751.623 1645.81,730 1646.37,742.779 1646.93,771.847 1647.48,748.526 1648.04,762.276 1648.6,773.817 1649.16,770.286 1649.72,783.715 1650.28,777.69 1650.84,774.746 1651.4,770.709 1651.96,766.309 1652.52,728.861 1653.08,709.4 1653.64,694.286 1654.2,692.836 1654.76,673.604 1655.31,674.455 1655.87,659.607 1656.43,663.812 1656.99,647.296 1657.55,632.823 1658.11,653.872 1658.67,640.368 1659.23,656.924 1659.79,672.485 1660.35,671.739 1660.91,655.454 1661.47,654.541 1662.03,670.743 1662.58,657.025 1663.14,705.507 1663.7,704.729 1664.26,705.705 1664.82,719.896 1665.38,719.074 1665.94,717.032 1666.5,732.947 1667.06,711.535 1667.62,676.315 1668.18,591.318 1668.74,627.298 1669.3,615.749 1669.85,619.366 1670.41,655.634 1670.97,657.122 1671.53,638.818 1672.09,660.637 1672.65,648.508 1673.21,654.183 1673.77,654.484 1674.33,672.767 1674.89,676.255 1675.45,675.829 1676.01,693.326 1676.57,647.4 1677.13,649.181 1677.68,683.892 1678.24,731.358 1678.8,763.46 1679.36,743.995 1679.92,790.386 1680.48,770.037 1681.04,753.276 1681.6,797.29 1682.16,793.047 1682.72,787.812 1683.28,783.81 1683.84,791.439 1684.4,769.329 1684.95,730.175 1685.51,708.261 1686.07,692.414 1686.63,676.023 1687.19,677.814 1687.75,665.825 1688.31,678.759 1688.87,663.022 1689.43,663.835 1689.99,678.308 1690.55,680.259 1691.11,667.73 1691.67,654.162 1692.23,656.591 1692.78,640.32 1693.34,640.201 1693.9,591.932 1694.46,596.581 1695.02,616.373 1695.58,667.244 1696.14,622.936 1696.7,646.164 1697.26,620.279 1697.82,655.863 1698.38,660.758 1698.94,612.352 1699.5,600.492 1700.05,591.664 1700.61,596.573 1701.17,586.352 1701.73,626.488 1702.29,643.035 1702.85,643.168 1703.41,648.86 1703.97,648.382 1704.53,585.42 1705.09,591.261 1705.65,595.405 1706.21,616.238 1706.77,637.509 1707.32,610.727 1707.88,615.783 1708.44,617.53 1709,622.761 1709.56,674.647 1710.12,659.777 1710.68,641.874 1711.24,628.256 1711.8,665.139 1712.36,679.819 1712.92,677.852 1713.48,661.955 1714.04,663.319 1714.6,677.478 1715.15,679.196 1715.71,662.275 1716.27,681.254 1716.83,668.806 1717.39,669.978 1717.95,672.026 1718.51,675.421 1719.07,662.794 1719.63,678.283 1720.19,694.978 1720.75,676.742 1721.31,695.723 1721.87,649.407 1722.42,650.176 1722.98,681.002 1723.54,709.138 1724.1,725.882 1724.66,737.957 1725.22,734.685 1725.78,698.067 1726.34,715.238 1726.9,713.078 1727.46,757.691 1728.02,718.137 1728.58,685.728 1729.14,732.678 1729.69,713.843 1730.25,710.016 1730.81,741.21 1731.37,676.081 1731.93,674.207 1732.49,642.044 1733.05,677.934 1733.61,675.787 1734.17,678.412 1734.73,664.129 1735.29,664.766 1735.85,698.414 1736.41,683.073 1736.97,667.664 1737.52,701.102 1738.08,699.713 1738.64,667.831 1739.2,635.218 1739.76,638.156 1740.32,641.912 1740.88,625.487 1741.44,631.081 1742,635 1742.56,650.071 1743.12,635.624 1743.68,703.633 1744.24,703.213 1744.79,702.769 1745.35,719.312 1745.91,736.164 1746.47,716.226 1747.03,715.304 1747.59,700.078 1748.15,713.834 1748.71,710.939 1749.27,710.246 1749.83,710.54 1750.39,707.355 1750.95,706.316 1751.51,690.203 1752.06,686.568 1752.62,686.245 1753.18,685.809 1753.74,701.99 1754.3,699.664 1754.86,713.627 1755.42,759.312 1755.98,753.115 1756.54,733.575 1757.1,735.997 1757.66,751.783 1758.22,714.798 1758.78,685.987 1759.34,687.962 1759.89,688.504 1760.45,704.089 1761.01,719.225 1761.57,750.558 1762.13,763.267 1762.69,744.08 1763.25,741.571 1763.81,750.561 1764.37,748.09 1764.93,731.378 1765.49,730.052 1766.05,729.764 1766.61,729.097 1767.16,729.038 1767.72,741.378 1768.28,721.493 1768.84,734.857 1769.4,730.449 1769.96,728.314 1770.52,740.37 1771.08,736.946 1771.64,732.622 1772.2,761.702 1772.76,776.901 1773.32,742.114 1773.88,743.31 1774.43,741.88 1774.99,787.919 1775.55,781.204 1776.11,727.432 1776.67,741.704 1777.23,736.34 1777.79,747.078 1778.35,773.505 1778.91,753.325 1779.47,731.627 1780.03,760.4 1780.59,741.594 1781.15,724.936 1781.71,735.906 1782.26,732.392 1782.82,728.755 1783.38,708.222 1783.94,706.897 1784.5,738.383 1785.06,715.844 1785.62,651.366 1786.18,683.098 1786.74,664.799 1787.3,645.776 1787.86,613.933 1788.42,616.997 1788.98,623.385 1789.53,613.587 1790.09,628.855 1790.65,613.083 1791.21,663.915 1791.77,669.205 1792.33,670.524 1792.89,649.795 1793.45,668.957 1794.01,650.684 1794.57,638.782 1795.13,628.624 1795.69,619.962 1796.25,637.439 1796.8,621.893 1797.36,591.478 1797.92,578.106 1798.48,534.027 1799.04,525.366 1799.6,515.439 1800.16,525.671 1800.72,551.738 1801.28,528.708 1801.84,581.828 1802.4,571.636 1802.96,610.439 1803.52,631.553 1804.08,667.873 1804.63,651.253 1805.19,638.834 1805.75,640.292 1806.31,643.41 1806.87,663.15 1807.43,649.303 1807.99,649.07 1808.55,635.952 1809.11,653.043 1809.67,656.811 1810.23,658.038 1810.79,640.557 1811.35,660.694 1811.9,628.098 1812.46,628.909 1813.02,630.055 1813.58,664.811 1814.14,665.698 1814.7,682.425 1815.26,680.146 1815.82,694.453 1816.38,709.676 1816.94,688.835 1817.5,735.885 1818.06,731.769 1818.62,744.473 1819.18,739.521 1819.73,736.557 1820.29,732.297 1820.85,710.409 1821.41,693.614 1821.97,709.365 1822.53,677.186 1823.09,677.037 1823.65,658.824 1824.21,675.787 1824.77,710.216 1825.33,726.004 1825.89,740.175 1826.45,722.143 1827,720.753 1827.56,718.595 1828.12,715.992 1828.68,733.917 1829.24,748.985 1829.8,729.895 1830.36,678.425 1830.92,677.874 1831.48,681.497 1832.04,684.479 1832.6,717.761 1833.16,716.791 1833.72,700.503 1834.27,716.48 1834.83,714.623 1835.39,730.894 1835.95,728.793 1836.51,758.201 1837.07,767.198 1837.63,763.413 1838.19,807.116 \"/>\n<path clip-path=\"url(#clip493)\" d=\"M720.247 689.844 L720.806 689.844 L721.365 689.844 L721.924 689.844 L722.484 689.844 L723.043 689.844 L723.602 689.844 L724.161 689.844 L724.721 689.844 L725.28 689.844 L725.839 689.844 L726.398 689.844 L726.958 689.844 L727.517 689.844 L728.076 689.844 L728.635 689.844 L729.195 689.844 L729.754 689.844 L730.313 689.844 L730.872 689.844 L731.432 689.844 L731.991 689.844 L732.55 689.844 L733.109 689.844 L733.669 689.844 L734.228 689.844 L734.787 689.844 L735.346 689.844 L735.906 689.844 L736.465 689.844 L737.024 689.844 L737.583 689.844 L738.143 689.844 L738.702 689.844 L739.261 689.844 L739.82 689.844 L740.38 689.844 L740.939 689.844 L741.498 689.844 L742.057 689.844 L742.617 689.844 L743.176 689.844 L743.735 689.844 L744.294 689.844 L744.854 689.844 L745.413 689.844 L745.972 689.844 L746.531 689.844 L747.091 689.844 L747.65 689.844 L748.209 689.844 L748.768 689.844 L749.328 689.844 L749.887 689.844 L750.446 689.844 L751.005 689.844 L751.565 689.844 L752.124 689.844 L752.683 689.844 L753.242 689.844 L753.802 689.844 L754.361 689.844 L754.92 689.844 L755.479 689.844 L756.039 689.844 L756.598 689.844 L757.157 689.844 L757.716 689.844 L758.276 689.844 L758.835 689.844 L759.394 689.844 L759.953 689.844 L760.513 689.844 L761.072 689.844 L761.631 689.844 L762.19 689.844 L762.75 689.844 L763.309 689.844 L763.868 689.844 L764.427 689.844 L764.987 689.844 L765.546 689.844 L766.105 689.844 L766.664 689.844 L767.224 689.844 L767.783 689.844 L768.342 689.844 L768.901 689.844 L769.461 689.844 L770.02 689.844 L770.579 689.844 L771.138 689.844 L771.698 689.844 L772.257 689.844 L772.816 689.844 L773.375 689.844 L773.935 689.844 L774.494 689.844 L775.053 689.844 L775.612 689.844 L776.172 689.844 L776.731 689.844 L777.29 689.844 L777.849 689.844 L778.409 689.844 L778.968 689.844 L779.527 689.844 L780.086 689.844 L780.646 689.844 L781.205 689.844 L781.764 689.844 L782.323 689.844 L782.883 689.844 L783.442 689.844 L784.001 689.844 L784.56 689.844 L785.12 689.844 L785.679 689.844 L786.238 689.844 L786.797 689.844 L787.357 689.844 L787.916 689.844 L788.475 689.844 L789.034 689.844 L789.594 689.844 L790.153 689.844 L790.712 689.844 L791.271 689.844 L791.831 689.844 L792.39 689.844 L792.949 689.844 L793.508 689.844 L794.068 689.844 L794.627 689.844 L795.186 689.844 L795.745 689.844 L796.305 689.844 L796.864 689.844 L797.423 689.844 L797.982 689.844 L798.542 689.844 L799.101 689.844 L799.66 689.844 L800.219 689.844 L800.779 689.844 L801.338 689.844 L801.897 689.844 L802.456 689.844 L803.016 689.844 L803.575 689.844 L804.134 689.844 L804.693 689.844 L805.253 689.844 L805.812 689.844 L806.371 689.844 L806.931 689.844 L807.49 689.844 L808.049 689.844 L808.608 689.844 L809.168 689.844 L809.727 689.844 L810.286 689.844 L810.845 689.844 L811.405 689.844 L811.964 689.844 L812.523 689.844 L813.082 689.844 L813.642 689.844 L814.201 689.844 L814.76 689.844 L815.319 689.844 L815.879 689.844 L816.438 689.844 L816.997 689.844 L817.556 689.844 L818.116 689.844 L818.675 689.844 L819.234 689.844 L819.793 689.844 L820.353 689.844 L820.912 689.844 L821.471 689.844 L822.03 689.844 L822.59 689.844 L823.149 689.844 L823.708 689.844 L824.267 689.844 L824.827 689.844 L825.386 689.844 L825.945 689.844 L826.504 689.844 L827.064 689.844 L827.623 689.844 L828.182 689.844 L828.741 689.844 L829.301 689.844 L829.86 689.844 L830.419 689.844 L830.978 689.844 L831.538 689.844 L832.097 689.844 L832.656 689.844 L833.215 689.844 L833.775 689.844 L834.334 689.844 L834.893 689.844 L835.452 689.844 L836.012 689.844 L836.571 689.844 L837.13 689.844 L837.689 689.844 L838.249 689.844 L838.808 689.844 L839.367 689.844 L839.926 689.844 L840.486 689.844 L841.045 689.844 L841.604 689.844 L842.163 689.844 L842.723 689.844 L843.282 689.844 L843.841 689.844 L844.4 689.844 L844.96 689.844 L845.519 689.844 L846.078 689.844 L846.637 689.844 L847.197 689.844 L847.756 689.844 L848.315 689.844 L848.874 689.844 L849.434 689.844 L849.993 689.844 L850.552 689.844 L851.111 689.844 L851.671 689.844 L852.23 689.844 L852.789 689.844 L853.348 689.844 L853.908 689.844 L854.467 689.844 L855.026 689.844 L855.585 689.844 L856.145 689.844 L856.704 689.844 L857.263 689.844 L857.822 689.844 L858.382 689.844 L858.941 689.844 L859.5 689.844 L860.059 689.844 L860.619 689.844 L861.178 689.844 L861.737 689.844 L862.296 689.844 L862.856 689.844 L863.415 689.844 L863.974 689.844 L864.533 689.844 L865.093 689.844 L865.652 689.844 L866.211 689.844 L866.77 689.844 L867.33 689.844 L867.889 689.844 L868.448 689.844 L869.007 689.844 L869.567 689.844 L870.126 689.844 L870.685 689.844 L871.244 689.844 L871.804 689.844 L872.363 689.844 L872.922 689.844 L873.481 689.844 L874.041 689.844 L874.6 689.844 L875.159 689.844 L875.718 689.844 L876.278 689.844 L876.837 689.844 L877.396 689.844 L877.955 689.844 L878.515 689.844 L879.074 689.844 L879.633 689.844 L880.192 689.844 L880.752 689.844 L881.311 689.844 L881.87 689.844 L882.429 689.844 L882.989 689.844 L883.548 689.844 L884.107 689.844 L884.666 689.844 L885.226 689.844 L885.785 689.844 L886.344 689.844 L886.903 689.844 L887.463 689.844 L888.022 689.844 L888.581 689.844 L889.14 689.844 L889.7 689.844 L890.259 689.844 L890.818 689.844 L891.377 689.844 L891.937 689.844 L892.496 689.844 L893.055 689.844 L893.614 689.844 L894.174 689.844 L894.733 689.844 L895.292 689.844 L895.851 689.844 L896.411 689.844 L896.97 689.844 L897.529 689.844 L898.088 689.844 L898.648 689.844 L899.207 689.844 L899.766 689.844 L900.325 689.844 L900.885 689.844 L901.444 689.844 L902.003 689.844 L902.562 689.844 L903.122 689.844 L903.681 689.844 L904.24 689.844 L904.799 689.844 L905.359 689.844 L905.918 689.844 L906.477 689.844 L907.036 689.844 L907.596 689.844 L908.155 689.844 L908.714 689.844 L909.273 689.844 L909.833 689.844 L910.392 689.844 L910.951 689.844 L911.51 689.844 L912.07 689.844 L912.629 689.844 L913.188 689.844 L913.747 689.844 L914.307 689.844 L914.866 689.844 L915.425 689.844 L915.984 689.844 L916.544 689.844 L917.103 689.844 L917.662 689.844 L918.221 689.844 L918.781 689.844 L919.34 689.844 L919.899 689.844 L920.458 689.844 L921.018 689.844 L921.577 689.844 L922.136 689.844 L922.695 689.844 L923.255 689.844 L923.814 689.844 L924.373 689.844 L924.932 689.844 L925.492 689.844 L926.051 689.844 L926.61 689.844 L927.169 689.844 L927.729 689.844 L928.288 689.844 L928.847 689.844 L929.406 689.844 L929.966 689.844 L930.525 689.844 L931.084 689.844 L931.644 689.844 L932.203 689.844 L932.762 689.844 L933.321 689.844 L933.881 689.844 L934.44 689.844 L934.999 689.844 L935.558 689.844 L936.118 689.844 L936.677 689.844 L937.236 689.844 L937.795 689.844 L938.355 689.844 L938.914 689.844 L939.473 689.844 L940.032 689.844 L940.592 689.844 L941.151 689.844 L941.71 689.844 L942.269 689.844 L942.829 689.844 L943.388 689.844 L943.947 689.844 L944.506 689.844 L945.066 689.844 L945.625 689.844 L946.184 689.844 L946.743 689.844 L947.303 689.844 L947.862 689.844 L948.421 689.844 L948.98 689.844 L949.54 689.844 L950.099 689.844 L950.658 689.844 L951.217 689.844 L951.777 689.844 L952.336 689.844 L952.895 689.844 L953.454 689.844 L954.014 689.844 L954.573 689.844 L955.132 689.844 L955.691 689.844 L956.251 689.844 L956.81 689.844 L957.369 689.844 L957.928 689.844 L958.488 689.844 L959.047 689.844 L959.606 689.844 L960.165 689.844 L960.725 689.844 L961.284 689.844 L961.843 689.844 L962.402 689.844 L962.962 689.844 L963.521 689.844 L964.08 689.844 L964.639 689.844 L965.199 689.844 L965.758 689.844 L966.317 689.844 L966.876 689.844 L967.436 689.844 L967.995 689.844 L968.554 689.844 L969.113 689.844 L969.673 689.844 L970.232 689.844 L970.791 689.844 L971.35 689.844 L971.91 689.844 L972.469 689.844 L973.028 689.844 L973.587 689.844 L974.147 689.844 L974.706 689.844 L975.265 689.844 L975.824 689.844 L976.384 689.844 L976.943 689.844 L977.502 689.844 L978.061 689.844 L978.621 689.844 L979.18 689.844 L979.739 689.844 L980.298 689.844 L980.858 689.844 L981.417 689.844 L981.976 689.844 L982.535 689.844 L983.095 689.844 L983.654 689.844 L984.213 689.844 L984.772 689.844 L985.332 689.844 L985.891 689.844 L986.45 689.844 L987.009 689.844 L987.569 689.844 L988.128 689.844 L988.687 689.844 L989.246 689.844 L989.806 689.844 L990.365 689.844 L990.924 689.844 L991.483 689.844 L992.043 689.844 L992.602 689.844 L993.161 689.844 L993.72 689.844 L994.28 689.844 L994.839 689.844 L995.398 689.844 L995.957 689.844 L996.517 689.844 L997.076 689.844 L997.635 689.844 L998.194 689.844 L998.754 689.844 L999.313 689.844 L999.872 689.844 L1000.43 689.844 L1000.99 689.844 L1001.55 689.844 L1002.11 689.844 L1002.67 689.844 L1003.23 689.844 L1003.79 689.844 L1004.35 689.844 L1004.91 689.844 L1005.46 689.844 L1006.02 689.844 L1006.58 689.844 L1007.14 689.844 L1007.7 689.844 L1008.26 689.844 L1008.82 689.844 L1009.38 689.844 L1009.94 689.844 L1010.5 689.844 L1011.06 689.844 L1011.62 689.844 L1012.18 689.844 L1012.73 689.844 L1013.29 689.844 L1013.85 689.844 L1014.41 689.844 L1014.97 689.844 L1015.53 689.844 L1016.09 689.844 L1016.65 689.844 L1017.21 689.844 L1017.77 689.844 L1018.33 689.844 L1018.89 689.844 L1019.45 689.844 L1020.01 689.844 L1020.56 689.844 L1021.12 689.844 L1021.68 689.844 L1022.24 689.844 L1022.8 689.844 L1023.36 689.844 L1023.92 689.844 L1024.48 689.844 L1025.04 689.844 L1025.6 689.844 L1026.16 689.844 L1026.72 689.844 L1027.28 689.844 L1027.83 689.844 L1028.39 689.844 L1028.95 689.844 L1029.51 689.844 L1030.07 689.844 L1030.63 689.844 L1031.19 689.844 L1031.75 689.844 L1032.31 689.844 L1032.87 689.844 L1033.43 689.844 L1033.99 689.844 L1034.55 689.844 L1035.1 689.844 L1035.66 689.844 L1036.22 689.844 L1036.78 689.844 L1037.34 689.844 L1037.9 689.844 L1038.46 689.844 L1039.02 689.844 L1039.58 689.844 L1040.14 689.844 L1040.7 689.844 L1041.26 689.844 L1041.82 689.844 L1042.38 689.844 L1042.93 689.844 L1043.49 689.844 L1044.05 689.844 L1044.61 689.844 L1045.17 689.844 L1045.73 689.844 L1046.29 689.844 L1046.85 689.844 L1047.41 689.844 L1047.97 689.844 L1048.53 689.844 L1049.09 689.844 L1049.65 689.844 L1050.2 689.844 L1050.76 689.844 L1051.32 689.844 L1051.88 689.844 L1052.44 689.844 L1053 689.844 L1053.56 689.844 L1054.12 689.844 L1054.68 689.844 L1055.24 689.844 L1055.8 689.844 L1056.36 689.844 L1056.92 689.844 L1057.48 689.844 L1058.03 689.844 L1058.59 689.844 L1059.15 689.844 L1059.71 689.844 L1060.27 689.844 L1060.83 689.844 L1061.39 689.844 L1061.95 689.844 L1062.51 689.844 L1063.07 689.844 L1063.63 689.844 L1064.19 689.844 L1064.75 689.844 L1065.3 689.844 L1065.86 689.844 L1066.42 689.844 L1066.98 689.844 L1067.54 689.844 L1068.1 689.844 L1068.66 689.844 L1069.22 689.844 L1069.78 689.844 L1070.34 689.844 L1070.9 689.844 L1071.46 689.844 L1072.02 689.844 L1072.57 689.844 L1073.13 689.844 L1073.69 689.844 L1074.25 689.844 L1074.81 689.844 L1075.37 689.844 L1075.93 689.844 L1076.49 689.844 L1077.05 689.844 L1077.61 689.844 L1078.17 689.844 L1078.73 689.844 L1079.29 689.844 L1079.85 689.844 L1080.4 689.844 L1080.96 689.844 L1081.52 689.844 L1082.08 689.844 L1082.64 689.844 L1083.2 689.844 L1083.76 689.844 L1084.32 689.844 L1084.88 689.844 L1085.44 689.844 L1086 689.844 L1086.56 689.844 L1087.12 689.844 L1087.67 689.844 L1088.23 689.844 L1088.79 689.844 L1089.35 689.844 L1089.91 689.844 L1090.47 689.844 L1091.03 689.844 L1091.59 689.844 L1092.15 689.844 L1092.71 689.844 L1093.27 689.844 L1093.83 689.844 L1094.39 689.844 L1094.94 689.844 L1095.5 689.844 L1096.06 689.844 L1096.62 689.844 L1097.18 689.844 L1097.74 689.844 L1098.3 689.844 L1098.86 689.844 L1099.42 689.844 L1099.98 689.844 L1100.54 689.844 L1101.1 689.844 L1101.66 689.844 L1102.22 689.844 L1102.77 689.844 L1103.33 689.844 L1103.89 689.844 L1104.45 689.844 L1105.01 689.844 L1105.57 689.844 L1106.13 689.844 L1106.69 689.844 L1107.25 689.844 L1107.81 689.844 L1108.37 689.844 L1108.93 689.844 L1109.49 689.844 L1110.04 689.844 L1110.6 689.844 L1111.16 689.844 L1111.72 689.844 L1112.28 689.844 L1112.84 689.844 L1113.4 689.844 L1113.96 689.844 L1114.52 689.844 L1115.08 689.844 L1115.64 689.844 L1116.2 689.844 L1116.76 689.844 L1117.31 689.844 L1117.87 689.844 L1118.43 689.844 L1118.99 689.844 L1119.55 689.844 L1120.11 689.844 L1120.67 689.844 L1121.23 689.844 L1121.79 689.844 L1122.35 689.844 L1122.91 689.844 L1123.47 689.844 L1124.03 689.844 L1124.59 689.844 L1125.14 689.844 L1125.7 689.844 L1126.26 689.844 L1126.82 689.844 L1127.38 689.844 L1127.94 689.844 L1128.5 689.844 L1129.06 689.844 L1129.62 689.844 L1130.18 689.844 L1130.74 689.844 L1131.3 689.844 L1131.86 689.844 L1132.41 689.844 L1132.97 689.844 L1133.53 689.844 L1134.09 689.844 L1134.65 689.844 L1135.21 689.844 L1135.77 689.844 L1136.33 689.844 L1136.89 689.844 L1137.45 689.844 L1138.01 689.844 L1138.57 689.844 L1139.13 689.844 L1139.68 689.844 L1140.24 689.844 L1140.8 689.844 L1141.36 689.844 L1141.92 689.844 L1142.48 689.844 L1143.04 689.844 L1143.6 689.844 L1144.16 689.844 L1144.72 689.844 L1145.28 689.844 L1145.84 689.844 L1146.4 689.844 L1146.96 689.844 L1147.51 689.844 L1148.07 689.844 L1148.63 689.844 L1149.19 689.844 L1149.75 689.844 L1150.31 689.844 L1150.87 689.844 L1151.43 689.844 L1151.99 689.844 L1152.55 689.844 L1153.11 689.844 L1153.67 689.844 L1154.23 689.844 L1154.78 689.844 L1155.34 689.844 L1155.9 689.844 L1156.46 689.844 L1157.02 689.844 L1157.58 689.844 L1158.14 689.844 L1158.7 689.844 L1159.26 689.844 L1159.82 689.844 L1160.38 689.844 L1160.94 689.844 L1161.5 689.844 L1162.05 689.844 L1162.61 689.844 L1163.17 689.844 L1163.73 689.844 L1164.29 689.844 L1164.85 689.844 L1165.41 689.844 L1165.97 689.844 L1166.53 689.844 L1167.09 689.844 L1167.65 689.844 L1168.21 689.844 L1168.77 689.844 L1169.33 689.844 L1169.88 689.844 L1170.44 689.844 L1171 689.844 L1171.56 689.844 L1172.12 689.844 L1172.68 689.844 L1173.24 689.844 L1173.8 689.844 L1174.36 689.844 L1174.92 689.844 L1175.48 689.844 L1176.04 689.844 L1176.6 689.844 L1177.15 689.844 L1177.71 689.844 L1178.27 689.844 L1178.83 689.844 L1179.39 689.844 L1179.95 689.844 L1180.51 689.844 L1181.07 689.844 L1181.63 689.844 L1182.19 689.844 L1182.75 689.844 L1183.31 689.844 L1183.87 689.844 L1184.43 689.844 L1184.98 689.844 L1185.54 689.844 L1186.1 689.844 L1186.66 689.844 L1187.22 689.844 L1187.78 689.844 L1188.34 689.844 L1188.9 689.844 L1189.46 689.844 L1190.02 689.844 L1190.58 689.844 L1191.14 689.844 L1191.7 689.844 L1192.25 689.844 L1192.81 689.844 L1193.37 689.844 L1193.93 689.844 L1194.49 689.844 L1195.05 689.844 L1195.61 689.844 L1196.17 689.844 L1196.73 689.844 L1197.29 689.844 L1197.85 689.844 L1198.41 689.844 L1198.97 689.844 L1199.52 689.844 L1200.08 689.844 L1200.64 689.844 L1201.2 689.844 L1201.76 689.844 L1202.32 689.844 L1202.88 689.844 L1203.44 689.844 L1204 689.844 L1204.56 689.844 L1205.12 689.844 L1205.68 689.844 L1206.24 689.844 L1206.8 689.844 L1207.35 689.844 L1207.91 689.844 L1208.47 689.844 L1209.03 689.844 L1209.59 689.844 L1210.15 689.844 L1210.71 689.844 L1211.27 689.844 L1211.83 689.844 L1212.39 689.844 L1212.95 689.844 L1213.51 689.844 L1214.07 689.844 L1214.62 689.844 L1215.18 689.844 L1215.74 689.844 L1216.3 689.844 L1216.86 689.844 L1217.42 689.844 L1217.98 689.844 L1218.54 689.844 L1219.1 689.844 L1219.66 689.844 L1220.22 689.844 L1220.78 689.844 L1221.34 689.844 L1221.89 689.844 L1222.45 689.844 L1223.01 689.844 L1223.57 689.844 L1224.13 689.844 L1224.69 689.844 L1225.25 689.844 L1225.81 689.844 L1226.37 689.844 L1226.93 689.844 L1227.49 689.844 L1228.05 689.844 L1228.61 689.844 L1229.17 689.844 L1229.72 689.844 L1230.28 689.844 L1230.84 689.844 L1231.4 689.844 L1231.96 689.844 L1232.52 689.844 L1233.08 689.844 L1233.64 689.844 L1234.2 689.844 L1234.76 689.844 L1235.32 689.844 L1235.88 689.844 L1236.44 689.844 L1236.99 689.844 L1237.55 689.844 L1238.11 689.844 L1238.67 689.844 L1239.23 689.844 L1239.79 689.844 L1240.35 689.844 L1240.91 689.844 L1241.47 689.844 L1242.03 689.844 L1242.59 689.844 L1243.15 689.844 L1243.71 689.844 L1244.26 689.844 L1244.82 689.844 L1245.38 689.844 L1245.94 689.844 L1246.5 689.844 L1247.06 689.844 L1247.62 689.844 L1248.18 689.844 L1248.74 689.844 L1249.3 689.844 L1249.86 689.844 L1250.42 689.844 L1250.98 689.844 L1251.54 689.844 L1252.09 689.844 L1252.65 689.844 L1253.21 689.844 L1253.77 689.844 L1254.33 689.844 L1254.89 689.844 L1255.45 689.844 L1256.01 689.844 L1256.57 689.844 L1257.13 689.844 L1257.69 689.844 L1258.25 689.844 L1258.81 689.844 L1259.36 689.844 L1259.92 689.844 L1260.48 689.844 L1261.04 689.844 L1261.6 689.844 L1262.16 689.844 L1262.72 689.844 L1263.28 689.844 L1263.84 689.844 L1264.4 689.844 L1264.96 689.844 L1265.52 689.844 L1266.08 689.844 L1266.63 689.844 L1267.19 689.844 L1267.75 689.844 L1268.31 689.844 L1268.87 689.844 L1269.43 689.844 L1269.99 689.844 L1270.55 689.844 L1271.11 689.844 L1271.67 689.844 L1272.23 689.844 L1272.79 689.844 L1273.35 689.844 L1273.91 689.844 L1274.46 689.844 L1275.02 689.844 L1275.58 689.844 L1276.14 689.844 L1276.7 689.844 L1277.26 689.844 L1277.82 689.844 L1278.38 689.844 L1278.94 689.844 L1279.5 689.844 L1280.06 689.844 L1280.62 689.844 L1281.18 689.844 L1281.73 689.844 L1282.29 689.844 L1282.85 689.844 L1283.41 689.844 L1283.97 689.844 L1284.53 689.844 L1285.09 689.844 L1285.65 689.844 L1286.21 689.844 L1286.77 689.844 L1287.33 689.844 L1287.89 689.844 L1288.45 689.844 L1289 689.844 L1289.56 689.844 L1290.12 689.844 L1290.68 689.844 L1291.24 689.844 L1291.8 689.844 L1292.36 689.844 L1292.92 689.844 L1293.48 689.844 L1294.04 689.844 L1294.6 689.844 L1295.16 689.844 L1295.72 689.844 L1296.28 689.844 L1296.83 689.844 L1297.39 689.844 L1297.95 689.844 L1298.51 689.844 L1299.07 689.844 L1299.63 689.844 L1300.19 689.844 L1300.75 689.844 L1301.31 689.844 L1301.87 689.844 L1302.43 689.844 L1302.99 689.844 L1303.55 689.844 L1304.1 689.844 L1304.66 689.844 L1305.22 689.844 L1305.78 689.844 L1306.34 689.844 L1306.9 689.844 L1307.46 689.844 L1308.02 689.844 L1308.58 689.844 L1309.14 689.844 L1309.7 689.844 L1310.26 689.844 L1310.82 689.844 L1311.38 689.844 L1311.93 689.844 L1312.49 689.844 L1313.05 689.844 L1313.61 689.844 L1314.17 689.844 L1314.73 689.844 L1315.29 689.844 L1315.85 689.844 L1316.41 689.844 L1316.97 689.844 L1317.53 689.844 L1318.09 689.844 L1318.65 689.844 L1319.2 689.844 L1319.76 689.844 L1320.32 689.844 L1320.88 689.844 L1321.44 689.844 L1322 689.844 L1322.56 689.844 L1323.12 689.844 L1323.68 689.844 L1324.24 689.844 L1324.8 689.844 L1325.36 689.844 L1325.92 689.844 L1326.47 689.844 L1327.03 689.844 L1327.59 689.844 L1328.15 689.844 L1328.71 689.844 L1329.27 689.844 L1329.83 689.844 L1330.39 689.844 L1330.95 689.844 L1331.51 689.844 L1332.07 689.844 L1332.63 689.844 L1333.19 689.844 L1333.75 689.844 L1334.3 689.844 L1334.86 689.844 L1335.42 689.844 L1335.98 689.844 L1336.54 689.844 L1337.1 689.844 L1337.66 689.844 L1338.22 689.844 L1338.78 689.844 L1339.34 689.844 L1339.9 689.844 L1340.46 689.844 L1341.02 689.844 L1341.57 689.844 L1342.13 689.844 L1342.69 689.844 L1343.25 689.844 L1343.81 689.844 L1344.37 689.844 L1344.93 689.844 L1345.49 689.844 L1346.05 689.844 L1346.61 689.844 L1347.17 689.844 L1347.73 689.844 L1348.29 689.844 L1348.84 689.844 L1349.4 689.844 L1349.96 689.844 L1350.52 689.844 L1351.08 689.844 L1351.64 689.844 L1352.2 689.844 L1352.76 689.844 L1353.32 689.844 L1353.88 689.844 L1354.44 689.844 L1355 689.844 L1355.56 689.844 L1356.12 689.844 L1356.67 689.844 L1357.23 689.844 L1357.79 689.844 L1358.35 689.844 L1358.91 689.844 L1359.47 689.844 L1360.03 689.844 L1360.59 689.844 L1361.15 689.844 L1361.71 689.844 L1362.27 689.844 L1362.83 689.844 L1363.39 689.844 L1363.94 689.844 L1364.5 689.844 L1365.06 689.844 L1365.62 689.844 L1366.18 689.844 L1366.74 689.844 L1367.3 689.844 L1367.86 689.844 L1368.42 689.844 L1368.98 689.844 L1369.54 689.844 L1370.1 689.844 L1370.66 689.844 L1371.21 689.844 L1371.77 689.844 L1372.33 689.844 L1372.89 689.844 L1373.45 689.844 L1374.01 689.844 L1374.57 689.844 L1375.13 689.844 L1375.69 689.844 L1376.25 689.844 L1376.81 689.844 L1377.37 689.844 L1377.93 689.844 L1378.49 689.844 L1379.04 689.844 L1379.6 689.844 L1380.16 689.844 L1380.72 689.844 L1381.28 689.844 L1381.84 689.844 L1382.4 689.844 L1382.96 689.844 L1383.52 689.844 L1384.08 689.844 L1384.64 689.844 L1385.2 689.844 L1385.76 689.844 L1386.31 689.844 L1386.87 689.844 L1387.43 689.844 L1387.99 689.844 L1388.55 689.844 L1389.11 689.844 L1389.67 689.844 L1390.23 689.844 L1390.79 689.844 L1391.35 689.844 L1391.91 689.844 L1392.47 689.844 L1393.03 689.844 L1393.58 689.844 L1394.14 689.844 L1394.7 689.844 L1395.26 689.844 L1395.82 689.844 L1396.38 689.844 L1396.94 689.844 L1397.5 689.844 L1398.06 689.844 L1398.62 689.844 L1399.18 689.844 L1399.74 689.844 L1400.3 689.844 L1400.86 689.844 L1401.41 689.844 L1401.97 689.844 L1402.53 689.844 L1403.09 689.844 L1403.65 689.844 L1404.21 689.844 L1404.77 689.844 L1405.33 689.844 L1405.89 689.844 L1406.45 689.844 L1407.01 689.844 L1407.57 689.844 L1408.13 689.844 L1408.68 689.844 L1409.24 689.844 L1409.8 689.844 L1410.36 689.844 L1410.92 689.844 L1411.48 689.844 L1412.04 689.844 L1412.6 689.844 L1413.16 689.844 L1413.72 689.844 L1414.28 689.844 L1414.84 689.844 L1415.4 689.844 L1415.95 689.844 L1416.51 689.844 L1417.07 689.844 L1417.63 689.844 L1418.19 689.844 L1418.75 689.844 L1419.31 689.844 L1419.87 689.844 L1420.43 689.844 L1420.99 689.844 L1421.55 689.844 L1422.11 689.844 L1422.67 689.844 L1423.23 689.844 L1423.78 689.844 L1424.34 689.844 L1424.9 689.844 L1425.46 689.844 L1426.02 689.844 L1426.58 689.844 L1427.14 689.844 L1427.7 689.844 L1428.26 689.844 L1428.82 689.844 L1429.38 689.844 L1429.94 689.844 L1430.5 689.844 L1431.05 689.844 L1431.61 689.844 L1432.17 689.844 L1432.73 689.844 L1433.29 689.844 L1433.85 689.844 L1434.41 689.844 L1434.97 689.844 L1435.53 689.844 L1436.09 689.844 L1436.65 689.844 L1437.21 689.844 L1437.77 689.844 L1438.33 689.844 L1438.88 689.844 L1439.44 689.844 L1440 689.844 L1440.56 689.844 L1441.12 689.844 L1441.68 689.844 L1442.24 689.844 L1442.8 689.844 L1443.36 689.844 L1443.92 689.844 L1444.48 689.844 L1445.04 689.844 L1445.6 689.844 L1446.15 689.844 L1446.71 689.844 L1447.27 689.844 L1447.83 689.844 L1448.39 689.844 L1448.95 689.844 L1449.51 689.844 L1450.07 689.844 L1450.63 689.844 L1451.19 689.844 L1451.75 689.844 L1452.31 689.844 L1452.87 689.844 L1453.42 689.844 L1453.98 689.844 L1454.54 689.844 L1455.1 689.844 L1455.66 689.844 L1456.22 689.844 L1456.78 689.844 L1457.34 689.844 L1457.9 689.844 L1458.46 689.844 L1459.02 689.844 L1459.58 689.844 L1460.14 689.844 L1460.7 689.844 L1461.25 689.844 L1461.81 689.844 L1462.37 689.844 L1462.93 689.844 L1463.49 689.844 L1464.05 689.844 L1464.61 689.844 L1465.17 689.844 L1465.73 689.844 L1466.29 689.844 L1466.85 689.844 L1467.41 689.844 L1467.97 689.844 L1468.52 689.844 L1469.08 689.844 L1469.64 689.844 L1470.2 689.844 L1470.76 689.844 L1471.32 689.844 L1471.88 689.844 L1472.44 689.844 L1473 689.844 L1473.56 689.844 L1474.12 689.844 L1474.68 689.844 L1475.24 689.844 L1475.79 689.844 L1476.35 689.844 L1476.91 689.844 L1477.47 689.844 L1478.03 689.844 L1478.59 689.844 L1479.15 689.844 L1479.71 689.844 L1480.27 689.844 L1480.83 689.844 L1481.39 689.844 L1481.95 689.844 L1482.51 689.844 L1483.07 689.844 L1483.62 689.844 L1484.18 689.844 L1484.74 689.844 L1485.3 689.844 L1485.86 689.844 L1486.42 689.844 L1486.98 689.844 L1487.54 689.844 L1488.1 689.844 L1488.66 689.844 L1489.22 689.844 L1489.78 689.844 L1490.34 689.844 L1490.89 689.844 L1491.45 689.844 L1492.01 689.844 L1492.57 689.844 L1493.13 689.844 L1493.69 689.844 L1494.25 689.844 L1494.81 689.844 L1495.37 689.844 L1495.93 689.844 L1496.49 689.844 L1497.05 689.844 L1497.61 689.844 L1498.16 689.844 L1498.72 689.844 L1499.28 689.844 L1499.84 689.844 L1500.4 689.844 L1500.96 689.844 L1501.52 689.844 L1502.08 689.844 L1502.64 689.844 L1503.2 689.844 L1503.76 689.844 L1504.32 689.844 L1504.88 689.844 L1505.44 689.844 L1505.99 689.844 L1506.55 689.844 L1507.11 689.844 L1507.67 689.844 L1508.23 689.844 L1508.79 689.844 L1509.35 689.844 L1509.91 689.844 L1510.47 689.844 L1511.03 689.844 L1511.59 689.844 L1512.15 689.844 L1512.71 689.844 L1513.26 689.844 L1513.82 689.844 L1514.38 689.844 L1514.94 689.844 L1515.5 689.844 L1516.06 689.844 L1516.62 689.844 L1517.18 689.844 L1517.74 689.844 L1518.3 689.844 L1518.86 689.844 L1519.42 689.844 L1519.98 689.844 L1520.53 689.844 L1521.09 689.844 L1521.65 689.844 L1522.21 689.844 L1522.77 689.844 L1523.33 689.844 L1523.89 689.844 L1524.45 689.844 L1525.01 689.844 L1525.57 689.844 L1526.13 689.844 L1526.69 689.844 L1527.25 689.844 L1527.81 689.844 L1528.36 689.844 L1528.92 689.844 L1529.48 689.844 L1530.04 689.844 L1530.6 689.844 L1531.16 689.844 L1531.72 689.844 L1532.28 689.844 L1532.84 689.844 L1533.4 689.844 L1533.96 689.844 L1534.52 689.844 L1535.08 689.844 L1535.63 689.844 L1536.19 689.844 L1536.75 689.844 L1537.31 689.844 L1537.87 689.844 L1538.43 689.844 L1538.99 689.844 L1539.55 689.844 L1540.11 689.844 L1540.67 689.844 L1541.23 689.844 L1541.79 689.844 L1542.35 689.844 L1542.9 689.844 L1543.46 689.844 L1544.02 689.844 L1544.58 689.844 L1545.14 689.844 L1545.7 689.844 L1546.26 689.844 L1546.82 689.844 L1547.38 689.844 L1547.94 689.844 L1548.5 689.844 L1549.06 689.844 L1549.62 689.844 L1550.18 689.844 L1550.73 689.844 L1551.29 689.844 L1551.85 689.844 L1552.41 689.844 L1552.97 689.844 L1553.53 689.844 L1554.09 689.844 L1554.65 689.844 L1555.21 689.844 L1555.77 689.844 L1556.33 689.844 L1556.89 689.844 L1557.45 689.844 L1558 689.844 L1558.56 689.844 L1559.12 689.844 L1559.68 689.844 L1560.24 689.844 L1560.8 689.844 L1561.36 689.844 L1561.92 689.844 L1562.48 689.844 L1563.04 689.844 L1563.6 689.844 L1564.16 689.844 L1564.72 689.844 L1565.28 689.844 L1565.83 689.844 L1566.39 689.844 L1566.95 689.844 L1567.51 689.844 L1568.07 689.844 L1568.63 689.844 L1569.19 689.844 L1569.75 689.844 L1570.31 689.844 L1570.87 689.844 L1571.43 689.844 L1571.99 689.844 L1572.55 689.844 L1573.1 689.844 L1573.66 689.844 L1574.22 689.844 L1574.78 689.844 L1575.34 689.844 L1575.9 689.844 L1576.46 689.844 L1577.02 689.844 L1577.58 689.844 L1578.14 689.844 L1578.7 689.844 L1579.26 689.844 L1579.82 689.844 L1580.37 689.844 L1580.93 689.844 L1581.49 689.844 L1582.05 689.844 L1582.61 689.844 L1583.17 689.844 L1583.73 689.844 L1584.29 689.844 L1584.85 689.844 L1585.41 689.844 L1585.97 689.844 L1586.53 689.844 L1587.09 689.844 L1587.65 689.844 L1588.2 689.844 L1588.76 689.844 L1589.32 689.844 L1589.88 689.844 L1590.44 689.844 L1591 689.844 L1591.56 689.844 L1592.12 689.844 L1592.68 689.844 L1593.24 689.844 L1593.8 689.844 L1594.36 689.844 L1594.92 689.844 L1595.47 689.844 L1596.03 689.844 L1596.59 689.844 L1597.15 689.844 L1597.71 689.844 L1598.27 689.844 L1598.83 689.844 L1599.39 689.844 L1599.95 689.844 L1600.51 689.844 L1601.07 689.844 L1601.63 689.844 L1602.19 689.844 L1602.74 689.844 L1603.3 689.844 L1603.86 689.844 L1604.42 689.844 L1604.98 689.844 L1605.54 689.844 L1606.1 689.844 L1606.66 689.844 L1607.22 689.844 L1607.78 689.844 L1608.34 689.844 L1608.9 689.844 L1609.46 689.844 L1610.02 689.844 L1610.57 689.844 L1611.13 689.844 L1611.69 689.844 L1612.25 689.844 L1612.81 689.844 L1613.37 689.844 L1613.93 689.844 L1614.49 689.844 L1615.05 689.844 L1615.61 689.844 L1616.17 689.844 L1616.73 689.844 L1617.29 689.844 L1617.84 689.844 L1618.4 689.844 L1618.96 689.844 L1619.52 689.844 L1620.08 689.844 L1620.64 689.844 L1621.2 689.844 L1621.76 689.844 L1622.32 689.844 L1622.88 689.844 L1623.44 689.844 L1624 689.844 L1624.56 689.844 L1625.11 689.844 L1625.67 689.844 L1626.23 689.844 L1626.79 689.844 L1627.35 689.844 L1627.91 689.844 L1628.47 689.844 L1629.03 689.844 L1629.59 689.844 L1630.15 689.844 L1630.71 689.844 L1631.27 689.844 L1631.83 689.844 L1632.39 689.844 L1632.94 689.844 L1633.5 689.844 L1634.06 689.844 L1634.62 689.844 L1635.18 689.844 L1635.74 689.844 L1636.3 689.844 L1636.86 689.844 L1637.42 689.844 L1637.98 689.844 L1638.54 689.844 L1639.1 689.844 L1639.66 689.844 L1640.21 689.844 L1640.77 689.844 L1641.33 689.844 L1641.89 689.844 L1642.45 689.844 L1643.01 689.844 L1643.57 689.844 L1644.13 689.844 L1644.69 689.844 L1645.25 689.844 L1645.81 689.844 L1646.37 689.844 L1646.93 689.844 L1647.48 689.844 L1648.04 689.844 L1648.6 689.844 L1649.16 689.844 L1649.72 689.844 L1650.28 689.844 L1650.84 689.844 L1651.4 689.844 L1651.96 689.844 L1652.52 689.844 L1653.08 689.844 L1653.64 689.844 L1654.2 689.844 L1654.76 689.844 L1655.31 689.844 L1655.87 689.844 L1656.43 689.844 L1656.99 689.844 L1657.55 689.844 L1658.11 689.844 L1658.67 689.844 L1659.23 689.844 L1659.79 689.844 L1660.35 689.844 L1660.91 689.844 L1661.47 689.844 L1662.03 689.844 L1662.58 689.844 L1663.14 689.844 L1663.7 689.844 L1664.26 689.844 L1664.82 689.844 L1665.38 689.844 L1665.94 689.844 L1666.5 689.844 L1667.06 689.844 L1667.62 689.844 L1668.18 689.844 L1668.74 689.844 L1669.3 689.844 L1669.85 689.844 L1670.41 689.844 L1670.97 689.844 L1671.53 689.844 L1672.09 689.844 L1672.65 689.844 L1673.21 689.844 L1673.77 689.844 L1674.33 689.844 L1674.89 689.844 L1675.45 689.844 L1676.01 689.844 L1676.57 689.844 L1677.13 689.844 L1677.68 689.844 L1678.24 689.844 L1678.8 689.844 L1679.36 689.844 L1679.92 689.844 L1680.48 689.844 L1681.04 689.844 L1681.6 689.844 L1682.16 689.844 L1682.72 689.844 L1683.28 689.844 L1683.84 689.844 L1684.4 689.844 L1684.95 689.844 L1685.51 689.844 L1686.07 689.844 L1686.63 689.844 L1687.19 689.844 L1687.75 689.844 L1688.31 689.844 L1688.87 689.844 L1689.43 689.844 L1689.99 689.844 L1690.55 689.844 L1691.11 689.844 L1691.67 689.844 L1692.23 689.844 L1692.78 689.844 L1693.34 689.844 L1693.9 689.844 L1694.46 689.844 L1695.02 689.844 L1695.58 689.844 L1696.14 689.844 L1696.7 689.844 L1697.26 689.844 L1697.82 689.844 L1698.38 689.844 L1698.94 689.844 L1699.5 689.844 L1700.05 689.844 L1700.61 689.844 L1701.17 689.844 L1701.73 689.844 L1702.29 689.844 L1702.85 689.844 L1703.41 689.844 L1703.97 689.844 L1704.53 689.844 L1705.09 689.844 L1705.65 689.844 L1706.21 689.844 L1706.77 689.844 L1707.32 689.844 L1707.88 689.844 L1708.44 689.844 L1709 689.844 L1709.56 689.844 L1710.12 689.844 L1710.68 689.844 L1711.24 689.844 L1711.8 689.844 L1712.36 689.844 L1712.92 689.844 L1713.48 689.844 L1714.04 689.844 L1714.6 689.844 L1715.15 689.844 L1715.71 689.844 L1716.27 689.844 L1716.83 689.844 L1717.39 689.844 L1717.95 689.844 L1718.51 689.844 L1719.07 689.844 L1719.63 689.844 L1720.19 689.844 L1720.75 689.844 L1721.31 689.844 L1721.87 689.844 L1722.42 689.844 L1722.98 689.844 L1723.54 689.844 L1724.1 689.844 L1724.66 689.844 L1725.22 689.844 L1725.78 689.844 L1726.34 689.844 L1726.9 689.844 L1727.46 689.844 L1728.02 689.844 L1728.58 689.844 L1729.14 689.844 L1729.69 689.844 L1730.25 689.844 L1730.81 689.844 L1731.37 689.844 L1731.93 689.844 L1732.49 689.844 L1733.05 689.844 L1733.61 689.844 L1734.17 689.844 L1734.73 689.844 L1735.29 689.844 L1735.85 689.844 L1736.41 689.844 L1736.97 689.844 L1737.52 689.844 L1738.08 689.844 L1738.64 689.844 L1739.2 689.844 L1739.76 689.844 L1740.32 689.844 L1740.88 689.844 L1741.44 689.844 L1742 689.844 L1742.56 689.844 L1743.12 689.844 L1743.68 689.844 L1744.24 689.844 L1744.79 689.844 L1745.35 689.844 L1745.91 689.844 L1746.47 689.844 L1747.03 689.844 L1747.59 689.844 L1748.15 689.844 L1748.71 689.844 L1749.27 689.844 L1749.83 689.844 L1750.39 689.844 L1750.95 689.844 L1751.51 689.844 L1752.06 689.844 L1752.62 689.844 L1753.18 689.844 L1753.74 689.844 L1754.3 689.844 L1754.86 689.844 L1755.42 689.844 L1755.98 689.844 L1756.54 689.844 L1757.1 689.844 L1757.66 689.844 L1758.22 689.844 L1758.78 689.844 L1759.34 689.844 L1759.89 689.844 L1760.45 689.844 L1761.01 689.844 L1761.57 689.844 L1762.13 689.844 L1762.69 689.844 L1763.25 689.844 L1763.81 689.844 L1764.37 689.844 L1764.93 689.844 L1765.49 689.844 L1766.05 689.844 L1766.61 689.844 L1767.16 689.844 L1767.72 689.844 L1768.28 689.844 L1768.84 689.844 L1769.4 689.844 L1769.96 689.844 L1770.52 689.844 L1771.08 689.844 L1771.64 689.844 L1772.2 689.844 L1772.76 689.844 L1773.32 689.844 L1773.88 689.844 L1774.43 689.844 L1774.99 689.844 L1775.55 689.844 L1776.11 689.844 L1776.67 689.844 L1777.23 689.844 L1777.79 689.844 L1778.35 689.844 L1778.91 689.844 L1779.47 689.844 L1780.03 689.844 L1780.59 689.844 L1781.15 689.844 L1781.71 689.844 L1782.26 689.844 L1782.82 689.844 L1783.38 689.844 L1783.94 689.844 L1784.5 689.844 L1785.06 689.844 L1785.62 689.844 L1786.18 689.844 L1786.74 689.844 L1787.3 689.844 L1787.86 689.844 L1788.42 689.844 L1788.98 689.844 L1789.53 689.844 L1790.09 689.844 L1790.65 689.844 L1791.21 689.844 L1791.77 689.844 L1792.33 689.844 L1792.89 689.844 L1793.45 689.844 L1794.01 689.844 L1794.57 689.844 L1795.13 689.844 L1795.69 689.844 L1796.25 689.844 L1796.8 689.844 L1797.36 689.844 L1797.92 689.844 L1798.48 689.844 L1799.04 689.844 L1799.6 689.844 L1800.16 689.844 L1800.72 689.844 L1801.28 689.844 L1801.84 689.844 L1802.4 689.844 L1802.96 689.844 L1803.52 689.844 L1804.08 689.844 L1804.63 689.844 L1805.19 689.844 L1805.75 689.844 L1806.31 689.844 L1806.87 689.844 L1807.43 689.844 L1807.99 689.844 L1808.55 689.844 L1809.11 689.844 L1809.67 689.844 L1810.23 689.844 L1810.79 689.844 L1811.35 689.844 L1811.9 689.844 L1812.46 689.844 L1813.02 689.844 L1813.58 689.844 L1814.14 689.844 L1814.7 689.844 L1815.26 689.844 L1815.82 689.844 L1816.38 689.844 L1816.94 689.844 L1817.5 689.844 L1818.06 689.844 L1818.62 689.844 L1819.18 689.844 L1819.73 689.844 L1820.29 689.844 L1820.85 689.844 L1821.41 689.844 L1821.97 689.844 L1822.53 689.844 L1823.09 689.844 L1823.65 689.844 L1824.21 689.844 L1824.77 689.844 L1825.33 689.844 L1825.89 689.844 L1826.45 689.844 L1827 689.844 L1827.56 689.844 L1828.12 689.844 L1828.68 689.844 L1829.24 689.844 L1829.8 689.844 L1830.36 689.844 L1830.92 689.844 L1831.48 689.844 L1832.04 689.844 L1832.6 689.844 L1833.16 689.844 L1833.72 689.844 L1834.27 689.844 L1834.83 689.844 L1835.39 689.844 L1835.95 689.844 L1836.51 689.844 L1837.07 689.844 L1837.63 689.844 L1838.19 689.844 L1838.19 682.116 L1837.63 682.116 L1837.07 682.116 L1836.51 682.116 L1835.95 682.116 L1835.39 682.116 L1834.83 682.116 L1834.27 682.116 L1833.72 682.116 L1833.16 682.116 L1832.6 682.116 L1832.04 682.116 L1831.48 682.116 L1830.92 682.116 L1830.36 682.116 L1829.8 682.116 L1829.24 682.116 L1828.68 682.116 L1828.12 682.116 L1827.56 682.116 L1827 682.116 L1826.45 682.116 L1825.89 682.116 L1825.33 682.116 L1824.77 682.116 L1824.21 682.116 L1823.65 682.116 L1823.09 682.116 L1822.53 682.116 L1821.97 682.116 L1821.41 682.116 L1820.85 682.116 L1820.29 682.116 L1819.73 682.116 L1819.18 682.116 L1818.62 682.116 L1818.06 682.116 L1817.5 682.116 L1816.94 682.116 L1816.38 682.116 L1815.82 682.116 L1815.26 682.116 L1814.7 682.116 L1814.14 682.116 L1813.58 682.116 L1813.02 682.116 L1812.46 682.116 L1811.9 682.116 L1811.35 682.116 L1810.79 682.116 L1810.23 682.116 L1809.67 682.116 L1809.11 682.116 L1808.55 682.116 L1807.99 682.116 L1807.43 682.116 L1806.87 682.116 L1806.31 682.116 L1805.75 682.116 L1805.19 682.116 L1804.63 682.116 L1804.08 682.116 L1803.52 682.116 L1802.96 682.116 L1802.4 682.116 L1801.84 682.116 L1801.28 682.116 L1800.72 682.116 L1800.16 682.116 L1799.6 682.116 L1799.04 682.116 L1798.48 682.116 L1797.92 682.116 L1797.36 682.116 L1796.8 682.116 L1796.25 682.116 L1795.69 682.116 L1795.13 682.116 L1794.57 682.116 L1794.01 682.116 L1793.45 682.116 L1792.89 682.116 L1792.33 682.116 L1791.77 682.116 L1791.21 682.116 L1790.65 682.116 L1790.09 682.116 L1789.53 682.116 L1788.98 682.116 L1788.42 682.116 L1787.86 682.116 L1787.3 682.116 L1786.74 682.116 L1786.18 682.116 L1785.62 682.116 L1785.06 682.116 L1784.5 682.116 L1783.94 682.116 L1783.38 682.116 L1782.82 682.116 L1782.26 682.116 L1781.71 682.116 L1781.15 682.116 L1780.59 682.116 L1780.03 682.116 L1779.47 682.116 L1778.91 682.116 L1778.35 682.116 L1777.79 682.116 L1777.23 682.116 L1776.67 682.116 L1776.11 682.116 L1775.55 682.116 L1774.99 682.116 L1774.43 682.116 L1773.88 682.116 L1773.32 682.116 L1772.76 682.116 L1772.2 682.116 L1771.64 682.116 L1771.08 682.116 L1770.52 682.116 L1769.96 682.116 L1769.4 682.116 L1768.84 682.116 L1768.28 682.116 L1767.72 682.116 L1767.16 682.116 L1766.61 682.116 L1766.05 682.116 L1765.49 682.116 L1764.93 682.116 L1764.37 682.116 L1763.81 682.116 L1763.25 682.116 L1762.69 682.116 L1762.13 682.116 L1761.57 682.116 L1761.01 682.116 L1760.45 682.116 L1759.89 682.116 L1759.34 682.116 L1758.78 682.116 L1758.22 682.116 L1757.66 682.116 L1757.1 682.116 L1756.54 682.116 L1755.98 682.116 L1755.42 682.116 L1754.86 682.116 L1754.3 682.116 L1753.74 682.116 L1753.18 682.116 L1752.62 682.116 L1752.06 682.116 L1751.51 682.116 L1750.95 682.116 L1750.39 682.116 L1749.83 682.116 L1749.27 682.116 L1748.71 682.116 L1748.15 682.116 L1747.59 682.116 L1747.03 682.116 L1746.47 682.116 L1745.91 682.116 L1745.35 682.116 L1744.79 682.116 L1744.24 682.116 L1743.68 682.116 L1743.12 682.116 L1742.56 682.116 L1742 682.116 L1741.44 682.116 L1740.88 682.116 L1740.32 682.116 L1739.76 682.116 L1739.2 682.116 L1738.64 682.116 L1738.08 682.116 L1737.52 682.116 L1736.97 682.116 L1736.41 682.116 L1735.85 682.116 L1735.29 682.116 L1734.73 682.116 L1734.17 682.116 L1733.61 682.116 L1733.05 682.116 L1732.49 682.116 L1731.93 682.116 L1731.37 682.116 L1730.81 682.116 L1730.25 682.116 L1729.69 682.116 L1729.14 682.116 L1728.58 682.116 L1728.02 682.116 L1727.46 682.116 L1726.9 682.116 L1726.34 682.116 L1725.78 682.116 L1725.22 682.116 L1724.66 682.116 L1724.1 682.116 L1723.54 682.116 L1722.98 682.116 L1722.42 682.116 L1721.87 682.116 L1721.31 682.116 L1720.75 682.116 L1720.19 682.116 L1719.63 682.116 L1719.07 682.116 L1718.51 682.116 L1717.95 682.116 L1717.39 682.116 L1716.83 682.116 L1716.27 682.116 L1715.71 682.116 L1715.15 682.116 L1714.6 682.116 L1714.04 682.116 L1713.48 682.116 L1712.92 682.116 L1712.36 682.116 L1711.8 682.116 L1711.24 682.116 L1710.68 682.116 L1710.12 682.116 L1709.56 682.116 L1709 682.116 L1708.44 682.116 L1707.88 682.116 L1707.32 682.116 L1706.77 682.116 L1706.21 682.116 L1705.65 682.116 L1705.09 682.116 L1704.53 682.116 L1703.97 682.116 L1703.41 682.116 L1702.85 682.116 L1702.29 682.116 L1701.73 682.116 L1701.17 682.116 L1700.61 682.116 L1700.05 682.116 L1699.5 682.116 L1698.94 682.116 L1698.38 682.116 L1697.82 682.116 L1697.26 682.116 L1696.7 682.116 L1696.14 682.116 L1695.58 682.116 L1695.02 682.116 L1694.46 682.116 L1693.9 682.116 L1693.34 682.116 L1692.78 682.116 L1692.23 682.116 L1691.67 682.116 L1691.11 682.116 L1690.55 682.116 L1689.99 682.116 L1689.43 682.116 L1688.87 682.116 L1688.31 682.116 L1687.75 682.116 L1687.19 682.116 L1686.63 682.116 L1686.07 682.116 L1685.51 682.116 L1684.95 682.116 L1684.4 682.116 L1683.84 682.116 L1683.28 682.116 L1682.72 682.116 L1682.16 682.116 L1681.6 682.116 L1681.04 682.116 L1680.48 682.116 L1679.92 682.116 L1679.36 682.116 L1678.8 682.116 L1678.24 682.116 L1677.68 682.116 L1677.13 682.116 L1676.57 682.116 L1676.01 682.116 L1675.45 682.116 L1674.89 682.116 L1674.33 682.116 L1673.77 682.116 L1673.21 682.116 L1672.65 682.116 L1672.09 682.116 L1671.53 682.116 L1670.97 682.116 L1670.41 682.116 L1669.85 682.116 L1669.3 682.116 L1668.74 682.116 L1668.18 682.116 L1667.62 682.116 L1667.06 682.116 L1666.5 682.116 L1665.94 682.116 L1665.38 682.116 L1664.82 682.116 L1664.26 682.116 L1663.7 682.116 L1663.14 682.116 L1662.58 682.116 L1662.03 682.116 L1661.47 682.116 L1660.91 682.116 L1660.35 682.116 L1659.79 682.116 L1659.23 682.116 L1658.67 682.116 L1658.11 682.116 L1657.55 682.116 L1656.99 682.116 L1656.43 682.116 L1655.87 682.116 L1655.31 682.116 L1654.76 682.116 L1654.2 682.116 L1653.64 682.116 L1653.08 682.116 L1652.52 682.116 L1651.96 682.116 L1651.4 682.116 L1650.84 682.116 L1650.28 682.116 L1649.72 682.116 L1649.16 682.116 L1648.6 682.116 L1648.04 682.116 L1647.48 682.116 L1646.93 682.116 L1646.37 682.116 L1645.81 682.116 L1645.25 682.116 L1644.69 682.116 L1644.13 682.116 L1643.57 682.116 L1643.01 682.116 L1642.45 682.116 L1641.89 682.116 L1641.33 682.116 L1640.77 682.116 L1640.21 682.116 L1639.66 682.116 L1639.1 682.116 L1638.54 682.116 L1637.98 682.116 L1637.42 682.116 L1636.86 682.116 L1636.3 682.116 L1635.74 682.116 L1635.18 682.116 L1634.62 682.116 L1634.06 682.116 L1633.5 682.116 L1632.94 682.116 L1632.39 682.116 L1631.83 682.116 L1631.27 682.116 L1630.71 682.116 L1630.15 682.116 L1629.59 682.116 L1629.03 682.116 L1628.47 682.116 L1627.91 682.116 L1627.35 682.116 L1626.79 682.116 L1626.23 682.116 L1625.67 682.116 L1625.11 682.116 L1624.56 682.116 L1624 682.116 L1623.44 682.116 L1622.88 682.116 L1622.32 682.116 L1621.76 682.116 L1621.2 682.116 L1620.64 682.116 L1620.08 682.116 L1619.52 682.116 L1618.96 682.116 L1618.4 682.116 L1617.84 682.116 L1617.29 682.116 L1616.73 682.116 L1616.17 682.116 L1615.61 682.116 L1615.05 682.116 L1614.49 682.116 L1613.93 682.116 L1613.37 682.116 L1612.81 682.116 L1612.25 682.116 L1611.69 682.116 L1611.13 682.116 L1610.57 682.116 L1610.02 682.116 L1609.46 682.116 L1608.9 682.116 L1608.34 682.116 L1607.78 682.116 L1607.22 682.116 L1606.66 682.116 L1606.1 682.116 L1605.54 682.116 L1604.98 682.116 L1604.42 682.116 L1603.86 682.116 L1603.3 682.116 L1602.74 682.116 L1602.19 682.116 L1601.63 682.116 L1601.07 682.116 L1600.51 682.116 L1599.95 682.116 L1599.39 682.116 L1598.83 682.116 L1598.27 682.116 L1597.71 682.116 L1597.15 682.116 L1596.59 682.116 L1596.03 682.116 L1595.47 682.116 L1594.92 682.116 L1594.36 682.116 L1593.8 682.116 L1593.24 682.116 L1592.68 682.116 L1592.12 682.116 L1591.56 682.116 L1591 682.116 L1590.44 682.116 L1589.88 682.116 L1589.32 682.116 L1588.76 682.116 L1588.2 682.116 L1587.65 682.116 L1587.09 682.116 L1586.53 682.116 L1585.97 682.116 L1585.41 682.116 L1584.85 682.116 L1584.29 682.116 L1583.73 682.116 L1583.17 682.116 L1582.61 682.116 L1582.05 682.116 L1581.49 682.116 L1580.93 682.116 L1580.37 682.116 L1579.82 682.116 L1579.26 682.116 L1578.7 682.116 L1578.14 682.116 L1577.58 682.116 L1577.02 682.116 L1576.46 682.116 L1575.9 682.116 L1575.34 682.116 L1574.78 682.116 L1574.22 682.116 L1573.66 682.116 L1573.1 682.116 L1572.55 682.116 L1571.99 682.116 L1571.43 682.116 L1570.87 682.116 L1570.31 682.116 L1569.75 682.116 L1569.19 682.116 L1568.63 682.116 L1568.07 682.116 L1567.51 682.116 L1566.95 682.116 L1566.39 682.116 L1565.83 682.116 L1565.28 682.116 L1564.72 682.116 L1564.16 682.116 L1563.6 682.116 L1563.04 682.116 L1562.48 682.116 L1561.92 682.116 L1561.36 682.116 L1560.8 682.116 L1560.24 682.116 L1559.68 682.116 L1559.12 682.116 L1558.56 682.116 L1558 682.116 L1557.45 682.116 L1556.89 682.116 L1556.33 682.116 L1555.77 682.116 L1555.21 682.116 L1554.65 682.116 L1554.09 682.116 L1553.53 682.116 L1552.97 682.116 L1552.41 682.116 L1551.85 682.116 L1551.29 682.116 L1550.73 682.116 L1550.18 682.116 L1549.62 682.116 L1549.06 682.116 L1548.5 682.116 L1547.94 682.116 L1547.38 682.116 L1546.82 682.116 L1546.26 682.116 L1545.7 682.116 L1545.14 682.116 L1544.58 682.116 L1544.02 682.116 L1543.46 682.116 L1542.9 682.116 L1542.35 682.116 L1541.79 682.116 L1541.23 682.116 L1540.67 682.116 L1540.11 682.116 L1539.55 682.116 L1538.99 682.116 L1538.43 682.116 L1537.87 682.116 L1537.31 682.116 L1536.75 682.116 L1536.19 682.116 L1535.63 682.116 L1535.08 682.116 L1534.52 682.116 L1533.96 682.116 L1533.4 682.116 L1532.84 682.116 L1532.28 682.116 L1531.72 682.116 L1531.16 682.116 L1530.6 682.116 L1530.04 682.116 L1529.48 682.116 L1528.92 682.116 L1528.36 682.116 L1527.81 682.116 L1527.25 682.116 L1526.69 682.116 L1526.13 682.116 L1525.57 682.116 L1525.01 682.116 L1524.45 682.116 L1523.89 682.116 L1523.33 682.116 L1522.77 682.116 L1522.21 682.116 L1521.65 682.116 L1521.09 682.116 L1520.53 682.116 L1519.98 682.116 L1519.42 682.116 L1518.86 682.116 L1518.3 682.116 L1517.74 682.116 L1517.18 682.116 L1516.62 682.116 L1516.06 682.116 L1515.5 682.116 L1514.94 682.116 L1514.38 682.116 L1513.82 682.116 L1513.26 682.116 L1512.71 682.116 L1512.15 682.116 L1511.59 682.116 L1511.03 682.116 L1510.47 682.116 L1509.91 682.116 L1509.35 682.116 L1508.79 682.116 L1508.23 682.116 L1507.67 682.116 L1507.11 682.116 L1506.55 682.116 L1505.99 682.116 L1505.44 682.116 L1504.88 682.116 L1504.32 682.116 L1503.76 682.116 L1503.2 682.116 L1502.64 682.116 L1502.08 682.116 L1501.52 682.116 L1500.96 682.116 L1500.4 682.116 L1499.84 682.116 L1499.28 682.116 L1498.72 682.116 L1498.16 682.116 L1497.61 682.116 L1497.05 682.116 L1496.49 682.116 L1495.93 682.116 L1495.37 682.116 L1494.81 682.116 L1494.25 682.116 L1493.69 682.116 L1493.13 682.116 L1492.57 682.116 L1492.01 682.116 L1491.45 682.116 L1490.89 682.116 L1490.34 682.116 L1489.78 682.116 L1489.22 682.116 L1488.66 682.116 L1488.1 682.116 L1487.54 682.116 L1486.98 682.116 L1486.42 682.116 L1485.86 682.116 L1485.3 682.116 L1484.74 682.116 L1484.18 682.116 L1483.62 682.116 L1483.07 682.116 L1482.51 682.116 L1481.95 682.116 L1481.39 682.116 L1480.83 682.116 L1480.27 682.116 L1479.71 682.116 L1479.15 682.116 L1478.59 682.116 L1478.03 682.116 L1477.47 682.116 L1476.91 682.116 L1476.35 682.116 L1475.79 682.116 L1475.24 682.116 L1474.68 682.116 L1474.12 682.116 L1473.56 682.116 L1473 682.116 L1472.44 682.116 L1471.88 682.116 L1471.32 682.116 L1470.76 682.116 L1470.2 682.116 L1469.64 682.116 L1469.08 682.116 L1468.52 682.116 L1467.97 682.116 L1467.41 682.116 L1466.85 682.116 L1466.29 682.116 L1465.73 682.116 L1465.17 682.116 L1464.61 682.116 L1464.05 682.116 L1463.49 682.116 L1462.93 682.116 L1462.37 682.116 L1461.81 682.116 L1461.25 682.116 L1460.7 682.116 L1460.14 682.116 L1459.58 682.116 L1459.02 682.116 L1458.46 682.116 L1457.9 682.116 L1457.34 682.116 L1456.78 682.116 L1456.22 682.116 L1455.66 682.116 L1455.1 682.116 L1454.54 682.116 L1453.98 682.116 L1453.42 682.116 L1452.87 682.116 L1452.31 682.116 L1451.75 682.116 L1451.19 682.116 L1450.63 682.116 L1450.07 682.116 L1449.51 682.116 L1448.95 682.116 L1448.39 682.116 L1447.83 682.116 L1447.27 682.116 L1446.71 682.116 L1446.15 682.116 L1445.6 682.116 L1445.04 682.116 L1444.48 682.116 L1443.92 682.116 L1443.36 682.116 L1442.8 682.116 L1442.24 682.116 L1441.68 682.116 L1441.12 682.116 L1440.56 682.116 L1440 682.116 L1439.44 682.116 L1438.88 682.116 L1438.33 682.116 L1437.77 682.116 L1437.21 682.116 L1436.65 682.116 L1436.09 682.116 L1435.53 682.116 L1434.97 682.116 L1434.41 682.116 L1433.85 682.116 L1433.29 682.116 L1432.73 682.116 L1432.17 682.116 L1431.61 682.116 L1431.05 682.116 L1430.5 682.116 L1429.94 682.116 L1429.38 682.116 L1428.82 682.116 L1428.26 682.116 L1427.7 682.116 L1427.14 682.116 L1426.58 682.116 L1426.02 682.116 L1425.46 682.116 L1424.9 682.116 L1424.34 682.116 L1423.78 682.116 L1423.23 682.116 L1422.67 682.116 L1422.11 682.116 L1421.55 682.116 L1420.99 682.116 L1420.43 682.116 L1419.87 682.116 L1419.31 682.116 L1418.75 682.116 L1418.19 682.116 L1417.63 682.116 L1417.07 682.116 L1416.51 682.116 L1415.95 682.116 L1415.4 682.116 L1414.84 682.116 L1414.28 682.116 L1413.72 682.116 L1413.16 682.116 L1412.6 682.116 L1412.04 682.116 L1411.48 682.116 L1410.92 682.116 L1410.36 682.116 L1409.8 682.116 L1409.24 682.116 L1408.68 682.116 L1408.13 682.116 L1407.57 682.116 L1407.01 682.116 L1406.45 682.116 L1405.89 682.116 L1405.33 682.116 L1404.77 682.116 L1404.21 682.116 L1403.65 682.116 L1403.09 682.116 L1402.53 682.116 L1401.97 682.116 L1401.41 682.116 L1400.86 682.116 L1400.3 682.116 L1399.74 682.116 L1399.18 682.116 L1398.62 682.116 L1398.06 682.116 L1397.5 682.116 L1396.94 682.116 L1396.38 682.116 L1395.82 682.116 L1395.26 682.116 L1394.7 682.116 L1394.14 682.116 L1393.58 682.116 L1393.03 682.116 L1392.47 682.116 L1391.91 682.116 L1391.35 682.116 L1390.79 682.116 L1390.23 682.116 L1389.67 682.116 L1389.11 682.116 L1388.55 682.116 L1387.99 682.116 L1387.43 682.116 L1386.87 682.116 L1386.31 682.116 L1385.76 682.116 L1385.2 682.116 L1384.64 682.116 L1384.08 682.116 L1383.52 682.116 L1382.96 682.116 L1382.4 682.116 L1381.84 682.116 L1381.28 682.116 L1380.72 682.116 L1380.16 682.116 L1379.6 682.116 L1379.04 682.116 L1378.49 682.116 L1377.93 682.116 L1377.37 682.116 L1376.81 682.116 L1376.25 682.116 L1375.69 682.116 L1375.13 682.116 L1374.57 682.116 L1374.01 682.116 L1373.45 682.116 L1372.89 682.116 L1372.33 682.116 L1371.77 682.116 L1371.21 682.116 L1370.66 682.116 L1370.1 682.116 L1369.54 682.116 L1368.98 682.116 L1368.42 682.116 L1367.86 682.116 L1367.3 682.116 L1366.74 682.116 L1366.18 682.116 L1365.62 682.116 L1365.06 682.116 L1364.5 682.116 L1363.94 682.116 L1363.39 682.116 L1362.83 682.116 L1362.27 682.116 L1361.71 682.116 L1361.15 682.116 L1360.59 682.116 L1360.03 682.116 L1359.47 682.116 L1358.91 682.116 L1358.35 682.116 L1357.79 682.116 L1357.23 682.116 L1356.67 682.116 L1356.12 682.116 L1355.56 682.116 L1355 682.116 L1354.44 682.116 L1353.88 682.116 L1353.32 682.116 L1352.76 682.116 L1352.2 682.116 L1351.64 682.116 L1351.08 682.116 L1350.52 682.116 L1349.96 682.116 L1349.4 682.116 L1348.84 682.116 L1348.29 682.116 L1347.73 682.116 L1347.17 682.116 L1346.61 682.116 L1346.05 682.116 L1345.49 682.116 L1344.93 682.116 L1344.37 682.116 L1343.81 682.116 L1343.25 682.116 L1342.69 682.116 L1342.13 682.116 L1341.57 682.116 L1341.02 682.116 L1340.46 682.116 L1339.9 682.116 L1339.34 682.116 L1338.78 682.116 L1338.22 682.116 L1337.66 682.116 L1337.1 682.116 L1336.54 682.116 L1335.98 682.116 L1335.42 682.116 L1334.86 682.116 L1334.3 682.116 L1333.75 682.116 L1333.19 682.116 L1332.63 682.116 L1332.07 682.116 L1331.51 682.116 L1330.95 682.116 L1330.39 682.116 L1329.83 682.116 L1329.27 682.116 L1328.71 682.116 L1328.15 682.116 L1327.59 682.116 L1327.03 682.116 L1326.47 682.116 L1325.92 682.116 L1325.36 682.116 L1324.8 682.116 L1324.24 682.116 L1323.68 682.116 L1323.12 682.116 L1322.56 682.116 L1322 682.116 L1321.44 682.116 L1320.88 682.116 L1320.32 682.116 L1319.76 682.116 L1319.2 682.116 L1318.65 682.116 L1318.09 682.116 L1317.53 682.116 L1316.97 682.116 L1316.41 682.116 L1315.85 682.116 L1315.29 682.116 L1314.73 682.116 L1314.17 682.116 L1313.61 682.116 L1313.05 682.116 L1312.49 682.116 L1311.93 682.116 L1311.38 682.116 L1310.82 682.116 L1310.26 682.116 L1309.7 682.116 L1309.14 682.116 L1308.58 682.116 L1308.02 682.116 L1307.46 682.116 L1306.9 682.116 L1306.34 682.116 L1305.78 682.116 L1305.22 682.116 L1304.66 682.116 L1304.1 682.116 L1303.55 682.116 L1302.99 682.116 L1302.43 682.116 L1301.87 682.116 L1301.31 682.116 L1300.75 682.116 L1300.19 682.116 L1299.63 682.116 L1299.07 682.116 L1298.51 682.116 L1297.95 682.116 L1297.39 682.116 L1296.83 682.116 L1296.28 682.116 L1295.72 682.116 L1295.16 682.116 L1294.6 682.116 L1294.04 682.116 L1293.48 682.116 L1292.92 682.116 L1292.36 682.116 L1291.8 682.116 L1291.24 682.116 L1290.68 682.116 L1290.12 682.116 L1289.56 682.116 L1289 682.116 L1288.45 682.116 L1287.89 682.116 L1287.33 682.116 L1286.77 682.116 L1286.21 682.116 L1285.65 682.116 L1285.09 682.116 L1284.53 682.116 L1283.97 682.116 L1283.41 682.116 L1282.85 682.116 L1282.29 682.116 L1281.73 682.116 L1281.18 682.116 L1280.62 682.116 L1280.06 682.116 L1279.5 682.116 L1278.94 682.116 L1278.38 682.116 L1277.82 682.116 L1277.26 682.116 L1276.7 682.116 L1276.14 682.116 L1275.58 682.116 L1275.02 682.116 L1274.46 682.116 L1273.91 682.116 L1273.35 682.116 L1272.79 682.116 L1272.23 682.116 L1271.67 682.116 L1271.11 682.116 L1270.55 682.116 L1269.99 682.116 L1269.43 682.116 L1268.87 682.116 L1268.31 682.116 L1267.75 682.116 L1267.19 682.116 L1266.63 682.116 L1266.08 682.116 L1265.52 682.116 L1264.96 682.116 L1264.4 682.116 L1263.84 682.116 L1263.28 682.116 L1262.72 682.116 L1262.16 682.116 L1261.6 682.116 L1261.04 682.116 L1260.48 682.116 L1259.92 682.116 L1259.36 682.116 L1258.81 682.116 L1258.25 682.116 L1257.69 682.116 L1257.13 682.116 L1256.57 682.116 L1256.01 682.116 L1255.45 682.116 L1254.89 682.116 L1254.33 682.116 L1253.77 682.116 L1253.21 682.116 L1252.65 682.116 L1252.09 682.116 L1251.54 682.116 L1250.98 682.116 L1250.42 682.116 L1249.86 682.116 L1249.3 682.116 L1248.74 682.116 L1248.18 682.116 L1247.62 682.116 L1247.06 682.116 L1246.5 682.116 L1245.94 682.116 L1245.38 682.116 L1244.82 682.116 L1244.26 682.116 L1243.71 682.116 L1243.15 682.116 L1242.59 682.116 L1242.03 682.116 L1241.47 682.116 L1240.91 682.116 L1240.35 682.116 L1239.79 682.116 L1239.23 682.116 L1238.67 682.116 L1238.11 682.116 L1237.55 682.116 L1236.99 682.116 L1236.44 682.116 L1235.88 682.116 L1235.32 682.116 L1234.76 682.116 L1234.2 682.116 L1233.64 682.116 L1233.08 682.116 L1232.52 682.116 L1231.96 682.116 L1231.4 682.116 L1230.84 682.116 L1230.28 682.116 L1229.72 682.116 L1229.17 682.116 L1228.61 682.116 L1228.05 682.116 L1227.49 682.116 L1226.93 682.116 L1226.37 682.116 L1225.81 682.116 L1225.25 682.116 L1224.69 682.116 L1224.13 682.116 L1223.57 682.116 L1223.01 682.116 L1222.45 682.116 L1221.89 682.116 L1221.34 682.116 L1220.78 682.116 L1220.22 682.116 L1219.66 682.116 L1219.1 682.116 L1218.54 682.116 L1217.98 682.116 L1217.42 682.116 L1216.86 682.116 L1216.3 682.116 L1215.74 682.116 L1215.18 682.116 L1214.62 682.116 L1214.07 682.116 L1213.51 682.116 L1212.95 682.116 L1212.39 682.116 L1211.83 682.116 L1211.27 682.116 L1210.71 682.116 L1210.15 682.116 L1209.59 682.116 L1209.03 682.116 L1208.47 682.116 L1207.91 682.116 L1207.35 682.116 L1206.8 682.116 L1206.24 682.116 L1205.68 682.116 L1205.12 682.116 L1204.56 682.116 L1204 682.116 L1203.44 682.116 L1202.88 682.116 L1202.32 682.116 L1201.76 682.116 L1201.2 682.116 L1200.64 682.116 L1200.08 682.116 L1199.52 682.116 L1198.97 682.116 L1198.41 682.116 L1197.85 682.116 L1197.29 682.116 L1196.73 682.116 L1196.17 682.116 L1195.61 682.116 L1195.05 682.116 L1194.49 682.116 L1193.93 682.116 L1193.37 682.116 L1192.81 682.116 L1192.25 682.116 L1191.7 682.116 L1191.14 682.116 L1190.58 682.116 L1190.02 682.116 L1189.46 682.116 L1188.9 682.116 L1188.34 682.116 L1187.78 682.116 L1187.22 682.116 L1186.66 682.116 L1186.1 682.116 L1185.54 682.116 L1184.98 682.116 L1184.43 682.116 L1183.87 682.116 L1183.31 682.116 L1182.75 682.116 L1182.19 682.116 L1181.63 682.116 L1181.07 682.116 L1180.51 682.116 L1179.95 682.116 L1179.39 682.116 L1178.83 682.116 L1178.27 682.116 L1177.71 682.116 L1177.15 682.116 L1176.6 682.116 L1176.04 682.116 L1175.48 682.116 L1174.92 682.116 L1174.36 682.116 L1173.8 682.116 L1173.24 682.116 L1172.68 682.116 L1172.12 682.116 L1171.56 682.116 L1171 682.116 L1170.44 682.116 L1169.88 682.116 L1169.33 682.116 L1168.77 682.116 L1168.21 682.116 L1167.65 682.116 L1167.09 682.116 L1166.53 682.116 L1165.97 682.116 L1165.41 682.116 L1164.85 682.116 L1164.29 682.116 L1163.73 682.116 L1163.17 682.116 L1162.61 682.116 L1162.05 682.116 L1161.5 682.116 L1160.94 682.116 L1160.38 682.116 L1159.82 682.116 L1159.26 682.116 L1158.7 682.116 L1158.14 682.116 L1157.58 682.116 L1157.02 682.116 L1156.46 682.116 L1155.9 682.116 L1155.34 682.116 L1154.78 682.116 L1154.23 682.116 L1153.67 682.116 L1153.11 682.116 L1152.55 682.116 L1151.99 682.116 L1151.43 682.116 L1150.87 682.116 L1150.31 682.116 L1149.75 682.116 L1149.19 682.116 L1148.63 682.116 L1148.07 682.116 L1147.51 682.116 L1146.96 682.116 L1146.4 682.116 L1145.84 682.116 L1145.28 682.116 L1144.72 682.116 L1144.16 682.116 L1143.6 682.116 L1143.04 682.116 L1142.48 682.116 L1141.92 682.116 L1141.36 682.116 L1140.8 682.116 L1140.24 682.116 L1139.68 682.116 L1139.13 682.116 L1138.57 682.116 L1138.01 682.116 L1137.45 682.116 L1136.89 682.116 L1136.33 682.116 L1135.77 682.116 L1135.21 682.116 L1134.65 682.116 L1134.09 682.116 L1133.53 682.116 L1132.97 682.116 L1132.41 682.116 L1131.86 682.116 L1131.3 682.116 L1130.74 682.116 L1130.18 682.116 L1129.62 682.116 L1129.06 682.116 L1128.5 682.116 L1127.94 682.116 L1127.38 682.116 L1126.82 682.116 L1126.26 682.116 L1125.7 682.116 L1125.14 682.116 L1124.59 682.116 L1124.03 682.116 L1123.47 682.116 L1122.91 682.116 L1122.35 682.116 L1121.79 682.116 L1121.23 682.116 L1120.67 682.116 L1120.11 682.116 L1119.55 682.116 L1118.99 682.116 L1118.43 682.116 L1117.87 682.116 L1117.31 682.116 L1116.76 682.116 L1116.2 682.116 L1115.64 682.116 L1115.08 682.116 L1114.52 682.116 L1113.96 682.116 L1113.4 682.116 L1112.84 682.116 L1112.28 682.116 L1111.72 682.116 L1111.16 682.116 L1110.6 682.116 L1110.04 682.116 L1109.49 682.116 L1108.93 682.116 L1108.37 682.116 L1107.81 682.116 L1107.25 682.116 L1106.69 682.116 L1106.13 682.116 L1105.57 682.116 L1105.01 682.116 L1104.45 682.116 L1103.89 682.116 L1103.33 682.116 L1102.77 682.116 L1102.22 682.116 L1101.66 682.116 L1101.1 682.116 L1100.54 682.116 L1099.98 682.116 L1099.42 682.116 L1098.86 682.116 L1098.3 682.116 L1097.74 682.116 L1097.18 682.116 L1096.62 682.116 L1096.06 682.116 L1095.5 682.116 L1094.94 682.116 L1094.39 682.116 L1093.83 682.116 L1093.27 682.116 L1092.71 682.116 L1092.15 682.116 L1091.59 682.116 L1091.03 682.116 L1090.47 682.116 L1089.91 682.116 L1089.35 682.116 L1088.79 682.116 L1088.23 682.116 L1087.67 682.116 L1087.12 682.116 L1086.56 682.116 L1086 682.116 L1085.44 682.116 L1084.88 682.116 L1084.32 682.116 L1083.76 682.116 L1083.2 682.116 L1082.64 682.116 L1082.08 682.116 L1081.52 682.116 L1080.96 682.116 L1080.4 682.116 L1079.85 682.116 L1079.29 682.116 L1078.73 682.116 L1078.17 682.116 L1077.61 682.116 L1077.05 682.116 L1076.49 682.116 L1075.93 682.116 L1075.37 682.116 L1074.81 682.116 L1074.25 682.116 L1073.69 682.116 L1073.13 682.116 L1072.57 682.116 L1072.02 682.116 L1071.46 682.116 L1070.9 682.116 L1070.34 682.116 L1069.78 682.116 L1069.22 682.116 L1068.66 682.116 L1068.1 682.116 L1067.54 682.116 L1066.98 682.116 L1066.42 682.116 L1065.86 682.116 L1065.3 682.116 L1064.75 682.116 L1064.19 682.116 L1063.63 682.116 L1063.07 682.116 L1062.51 682.116 L1061.95 682.116 L1061.39 682.116 L1060.83 682.116 L1060.27 682.116 L1059.71 682.116 L1059.15 682.116 L1058.59 682.116 L1058.03 682.116 L1057.48 682.116 L1056.92 682.116 L1056.36 682.116 L1055.8 682.116 L1055.24 682.116 L1054.68 682.116 L1054.12 682.116 L1053.56 682.116 L1053 682.116 L1052.44 682.116 L1051.88 682.116 L1051.32 682.116 L1050.76 682.116 L1050.2 682.116 L1049.65 682.116 L1049.09 682.116 L1048.53 682.116 L1047.97 682.116 L1047.41 682.116 L1046.85 682.116 L1046.29 682.116 L1045.73 682.116 L1045.17 682.116 L1044.61 682.116 L1044.05 682.116 L1043.49 682.116 L1042.93 682.116 L1042.38 682.116 L1041.82 682.116 L1041.26 682.116 L1040.7 682.116 L1040.14 682.116 L1039.58 682.116 L1039.02 682.116 L1038.46 682.116 L1037.9 682.116 L1037.34 682.116 L1036.78 682.116 L1036.22 682.116 L1035.66 682.116 L1035.1 682.116 L1034.55 682.116 L1033.99 682.116 L1033.43 682.116 L1032.87 682.116 L1032.31 682.116 L1031.75 682.116 L1031.19 682.116 L1030.63 682.116 L1030.07 682.116 L1029.51 682.116 L1028.95 682.116 L1028.39 682.116 L1027.83 682.116 L1027.28 682.116 L1026.72 682.116 L1026.16 682.116 L1025.6 682.116 L1025.04 682.116 L1024.48 682.116 L1023.92 682.116 L1023.36 682.116 L1022.8 682.116 L1022.24 682.116 L1021.68 682.116 L1021.12 682.116 L1020.56 682.116 L1020.01 682.116 L1019.45 682.116 L1018.89 682.116 L1018.33 682.116 L1017.77 682.116 L1017.21 682.116 L1016.65 682.116 L1016.09 682.116 L1015.53 682.116 L1014.97 682.116 L1014.41 682.116 L1013.85 682.116 L1013.29 682.116 L1012.73 682.116 L1012.18 682.116 L1011.62 682.116 L1011.06 682.116 L1010.5 682.116 L1009.94 682.116 L1009.38 682.116 L1008.82 682.116 L1008.26 682.116 L1007.7 682.116 L1007.14 682.116 L1006.58 682.116 L1006.02 682.116 L1005.46 682.116 L1004.91 682.116 L1004.35 682.116 L1003.79 682.116 L1003.23 682.116 L1002.67 682.116 L1002.11 682.116 L1001.55 682.116 L1000.99 682.116 L1000.43 682.116 L999.872 682.116 L999.313 682.116 L998.754 682.116 L998.194 682.116 L997.635 682.116 L997.076 682.116 L996.517 682.116 L995.957 682.116 L995.398 682.116 L994.839 682.116 L994.28 682.116 L993.72 682.116 L993.161 682.116 L992.602 682.116 L992.043 682.116 L991.483 682.116 L990.924 682.116 L990.365 682.116 L989.806 682.116 L989.246 682.116 L988.687 682.116 L988.128 682.116 L987.569 682.116 L987.009 682.116 L986.45 682.116 L985.891 682.116 L985.332 682.116 L984.772 682.116 L984.213 682.116 L983.654 682.116 L983.095 682.116 L982.535 682.116 L981.976 682.116 L981.417 682.116 L980.858 682.116 L980.298 682.116 L979.739 682.116 L979.18 682.116 L978.621 682.116 L978.061 682.116 L977.502 682.116 L976.943 682.116 L976.384 682.116 L975.824 682.116 L975.265 682.116 L974.706 682.116 L974.147 682.116 L973.587 682.116 L973.028 682.116 L972.469 682.116 L971.91 682.116 L971.35 682.116 L970.791 682.116 L970.232 682.116 L969.673 682.116 L969.113 682.116 L968.554 682.116 L967.995 682.116 L967.436 682.116 L966.876 682.116 L966.317 682.116 L965.758 682.116 L965.199 682.116 L964.639 682.116 L964.08 682.116 L963.521 682.116 L962.962 682.116 L962.402 682.116 L961.843 682.116 L961.284 682.116 L960.725 682.116 L960.165 682.116 L959.606 682.116 L959.047 682.116 L958.488 682.116 L957.928 682.116 L957.369 682.116 L956.81 682.116 L956.251 682.116 L955.691 682.116 L955.132 682.116 L954.573 682.116 L954.014 682.116 L953.454 682.116 L952.895 682.116 L952.336 682.116 L951.777 682.116 L951.217 682.116 L950.658 682.116 L950.099 682.116 L949.54 682.116 L948.98 682.116 L948.421 682.116 L947.862 682.116 L947.303 682.116 L946.743 682.116 L946.184 682.116 L945.625 682.116 L945.066 682.116 L944.506 682.116 L943.947 682.116 L943.388 682.116 L942.829 682.116 L942.269 682.116 L941.71 682.116 L941.151 682.116 L940.592 682.116 L940.032 682.116 L939.473 682.116 L938.914 682.116 L938.355 682.116 L937.795 682.116 L937.236 682.116 L936.677 682.116 L936.118 682.116 L935.558 682.116 L934.999 682.116 L934.44 682.116 L933.881 682.116 L933.321 682.116 L932.762 682.116 L932.203 682.116 L931.644 682.116 L931.084 682.116 L930.525 682.116 L929.966 682.116 L929.406 682.116 L928.847 682.116 L928.288 682.116 L927.729 682.116 L927.169 682.116 L926.61 682.116 L926.051 682.116 L925.492 682.116 L924.932 682.116 L924.373 682.116 L923.814 682.116 L923.255 682.116 L922.695 682.116 L922.136 682.116 L921.577 682.116 L921.018 682.116 L920.458 682.116 L919.899 682.116 L919.34 682.116 L918.781 682.116 L918.221 682.116 L917.662 682.116 L917.103 682.116 L916.544 682.116 L915.984 682.116 L915.425 682.116 L914.866 682.116 L914.307 682.116 L913.747 682.116 L913.188 682.116 L912.629 682.116 L912.07 682.116 L911.51 682.116 L910.951 682.116 L910.392 682.116 L909.833 682.116 L909.273 682.116 L908.714 682.116 L908.155 682.116 L907.596 682.116 L907.036 682.116 L906.477 682.116 L905.918 682.116 L905.359 682.116 L904.799 682.116 L904.24 682.116 L903.681 682.116 L903.122 682.116 L902.562 682.116 L902.003 682.116 L901.444 682.116 L900.885 682.116 L900.325 682.116 L899.766 682.116 L899.207 682.116 L898.648 682.116 L898.088 682.116 L897.529 682.116 L896.97 682.116 L896.411 682.116 L895.851 682.116 L895.292 682.116 L894.733 682.116 L894.174 682.116 L893.614 682.116 L893.055 682.116 L892.496 682.116 L891.937 682.116 L891.377 682.116 L890.818 682.116 L890.259 682.116 L889.7 682.116 L889.14 682.116 L888.581 682.116 L888.022 682.116 L887.463 682.116 L886.903 682.116 L886.344 682.116 L885.785 682.116 L885.226 682.116 L884.666 682.116 L884.107 682.116 L883.548 682.116 L882.989 682.116 L882.429 682.116 L881.87 682.116 L881.311 682.116 L880.752 682.116 L880.192 682.116 L879.633 682.116 L879.074 682.116 L878.515 682.116 L877.955 682.116 L877.396 682.116 L876.837 682.116 L876.278 682.116 L875.718 682.116 L875.159 682.116 L874.6 682.116 L874.041 682.116 L873.481 682.116 L872.922 682.116 L872.363 682.116 L871.804 682.116 L871.244 682.116 L870.685 682.116 L870.126 682.116 L869.567 682.116 L869.007 682.116 L868.448 682.116 L867.889 682.116 L867.33 682.116 L866.77 682.116 L866.211 682.116 L865.652 682.116 L865.093 682.116 L864.533 682.116 L863.974 682.116 L863.415 682.116 L862.856 682.116 L862.296 682.116 L861.737 682.116 L861.178 682.116 L860.619 682.116 L860.059 682.116 L859.5 682.116 L858.941 682.116 L858.382 682.116 L857.822 682.116 L857.263 682.116 L856.704 682.116 L856.145 682.116 L855.585 682.116 L855.026 682.116 L854.467 682.116 L853.908 682.116 L853.348 682.116 L852.789 682.116 L852.23 682.116 L851.671 682.116 L851.111 682.116 L850.552 682.116 L849.993 682.116 L849.434 682.116 L848.874 682.116 L848.315 682.116 L847.756 682.116 L847.197 682.116 L846.637 682.116 L846.078 682.116 L845.519 682.116 L844.96 682.116 L844.4 682.116 L843.841 682.116 L843.282 682.116 L842.723 682.116 L842.163 682.116 L841.604 682.116 L841.045 682.116 L840.486 682.116 L839.926 682.116 L839.367 682.116 L838.808 682.116 L838.249 682.116 L837.689 682.116 L837.13 682.116 L836.571 682.116 L836.012 682.116 L835.452 682.116 L834.893 682.116 L834.334 682.116 L833.775 682.116 L833.215 682.116 L832.656 682.116 L832.097 682.116 L831.538 682.116 L830.978 682.116 L830.419 682.116 L829.86 682.116 L829.301 682.116 L828.741 682.116 L828.182 682.116 L827.623 682.116 L827.064 682.116 L826.504 682.116 L825.945 682.116 L825.386 682.116 L824.827 682.116 L824.267 682.116 L823.708 682.116 L823.149 682.116 L822.59 682.116 L822.03 682.116 L821.471 682.116 L820.912 682.116 L820.353 682.116 L819.793 682.116 L819.234 682.116 L818.675 682.116 L818.116 682.116 L817.556 682.116 L816.997 682.116 L816.438 682.116 L815.879 682.116 L815.319 682.116 L814.76 682.116 L814.201 682.116 L813.642 682.116 L813.082 682.116 L812.523 682.116 L811.964 682.116 L811.405 682.116 L810.845 682.116 L810.286 682.116 L809.727 682.116 L809.168 682.116 L808.608 682.116 L808.049 682.116 L807.49 682.116 L806.931 682.116 L806.371 682.116 L805.812 682.116 L805.253 682.116 L804.693 682.116 L804.134 682.116 L803.575 682.116 L803.016 682.116 L802.456 682.116 L801.897 682.116 L801.338 682.116 L800.779 682.116 L800.219 682.116 L799.66 682.116 L799.101 682.116 L798.542 682.116 L797.982 682.116 L797.423 682.116 L796.864 682.116 L796.305 682.116 L795.745 682.116 L795.186 682.116 L794.627 682.116 L794.068 682.116 L793.508 682.116 L792.949 682.116 L792.39 682.116 L791.831 682.116 L791.271 682.116 L790.712 682.116 L790.153 682.116 L789.594 682.116 L789.034 682.116 L788.475 682.116 L787.916 682.116 L787.357 682.116 L786.797 682.116 L786.238 682.116 L785.679 682.116 L785.12 682.116 L784.56 682.116 L784.001 682.116 L783.442 682.116 L782.883 682.116 L782.323 682.116 L781.764 682.116 L781.205 682.116 L780.646 682.116 L780.086 682.116 L779.527 682.116 L778.968 682.116 L778.409 682.116 L777.849 682.116 L777.29 682.116 L776.731 682.116 L776.172 682.116 L775.612 682.116 L775.053 682.116 L774.494 682.116 L773.935 682.116 L773.375 682.116 L772.816 682.116 L772.257 682.116 L771.698 682.116 L771.138 682.116 L770.579 682.116 L770.02 682.116 L769.461 682.116 L768.901 682.116 L768.342 682.116 L767.783 682.116 L767.224 682.116 L766.664 682.116 L766.105 682.116 L765.546 682.116 L764.987 682.116 L764.427 682.116 L763.868 682.116 L763.309 682.116 L762.75 682.116 L762.19 682.116 L761.631 682.116 L761.072 682.116 L760.513 682.116 L759.953 682.116 L759.394 682.116 L758.835 682.116 L758.276 682.116 L757.716 682.116 L757.157 682.116 L756.598 682.116 L756.039 682.116 L755.479 682.116 L754.92 682.116 L754.361 682.116 L753.802 682.116 L753.242 682.116 L752.683 682.116 L752.124 682.116 L751.565 682.116 L751.005 682.116 L750.446 682.116 L749.887 682.116 L749.328 682.116 L748.768 682.116 L748.209 682.116 L747.65 682.116 L747.091 682.116 L746.531 682.116 L745.972 682.116 L745.413 682.116 L744.854 682.116 L744.294 682.116 L743.735 682.116 L743.176 682.116 L742.617 682.116 L742.057 682.116 L741.498 682.116 L740.939 682.116 L740.38 682.116 L739.82 682.116 L739.261 682.116 L738.702 682.116 L738.143 682.116 L737.583 682.116 L737.024 682.116 L736.465 682.116 L735.906 682.116 L735.346 682.116 L734.787 682.116 L734.228 682.116 L733.669 682.116 L733.109 682.116 L732.55 682.116 L731.991 682.116 L731.432 682.116 L730.872 682.116 L730.313 682.116 L729.754 682.116 L729.195 682.116 L728.635 682.116 L728.076 682.116 L727.517 682.116 L726.958 682.116 L726.398 682.116 L725.839 682.116 L725.28 682.116 L724.721 682.116 L724.161 682.116 L723.602 682.116 L723.043 682.116 L722.484 682.116 L721.924 682.116 L721.365 682.116 L720.806 682.116 L720.247 682.116  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.98 720.806,685.98 721.365,685.98 721.924,685.98 722.484,685.98 723.043,685.98 723.602,685.98 724.161,685.98 724.721,685.98 725.28,685.98 725.839,685.98 726.398,685.98 726.958,685.98 727.517,685.98 728.076,685.98 728.635,685.98 729.195,685.98 729.754,685.98 730.313,685.98 730.872,685.98 731.432,685.98 731.991,685.98 732.55,685.98 733.109,685.98 733.669,685.98 734.228,685.98 734.787,685.98 735.346,685.98 735.906,685.98 736.465,685.98 737.024,685.98 737.583,685.98 738.143,685.98 738.702,685.98 739.261,685.98 739.82,685.98 740.38,685.98 740.939,685.98 741.498,685.98 742.057,685.98 742.617,685.98 743.176,685.98 743.735,685.98 744.294,685.98 744.854,685.98 745.413,685.98 745.972,685.98 746.531,685.98 747.091,685.98 747.65,685.98 748.209,685.98 748.768,685.98 749.328,685.98 749.887,685.98 750.446,685.98 751.005,685.98 751.565,685.98 752.124,685.98 752.683,685.98 753.242,685.98 753.802,685.98 754.361,685.98 754.92,685.98 755.479,685.98 756.039,685.98 756.598,685.98 757.157,685.98 757.716,685.98 758.276,685.98 758.835,685.98 759.394,685.98 759.953,685.98 760.513,685.98 761.072,685.98 761.631,685.98 762.19,685.98 762.75,685.98 763.309,685.98 763.868,685.98 764.427,685.98 764.987,685.98 765.546,685.98 766.105,685.98 766.664,685.98 767.224,685.98 767.783,685.98 768.342,685.98 768.901,685.98 769.461,685.98 770.02,685.98 770.579,685.98 771.138,685.98 771.698,685.98 772.257,685.98 772.816,685.98 773.375,685.98 773.935,685.98 774.494,685.98 775.053,685.98 775.612,685.98 776.172,685.98 776.731,685.98 777.29,685.98 777.849,685.98 778.409,685.98 778.968,685.98 779.527,685.98 780.086,685.98 780.646,685.98 781.205,685.98 781.764,685.98 782.323,685.98 782.883,685.98 783.442,685.98 784.001,685.98 784.56,685.98 785.12,685.98 785.679,685.98 786.238,685.98 786.797,685.98 787.357,685.98 787.916,685.98 788.475,685.98 789.034,685.98 789.594,685.98 790.153,685.98 790.712,685.98 791.271,685.98 791.831,685.98 792.39,685.98 792.949,685.98 793.508,685.98 794.068,685.98 794.627,685.98 795.186,685.98 795.745,685.98 796.305,685.98 796.864,685.98 797.423,685.98 797.982,685.98 798.542,685.98 799.101,685.98 799.66,685.98 800.219,685.98 800.779,685.98 801.338,685.98 801.897,685.98 802.456,685.98 803.016,685.98 803.575,685.98 804.134,685.98 804.693,685.98 805.253,685.98 805.812,685.98 806.371,685.98 806.931,685.98 807.49,685.98 808.049,685.98 808.608,685.98 809.168,685.98 809.727,685.98 810.286,685.98 810.845,685.98 811.405,685.98 811.964,685.98 812.523,685.98 813.082,685.98 813.642,685.98 814.201,685.98 814.76,685.98 815.319,685.98 815.879,685.98 816.438,685.98 816.997,685.98 817.556,685.98 818.116,685.98 818.675,685.98 819.234,685.98 819.793,685.98 820.353,685.98 820.912,685.98 821.471,685.98 822.03,685.98 822.59,685.98 823.149,685.98 823.708,685.98 824.267,685.98 824.827,685.98 825.386,685.98 825.945,685.98 826.504,685.98 827.064,685.98 827.623,685.98 828.182,685.98 828.741,685.98 829.301,685.98 829.86,685.98 830.419,685.98 830.978,685.98 831.538,685.98 832.097,685.98 832.656,685.98 833.215,685.98 833.775,685.98 834.334,685.98 834.893,685.98 835.452,685.98 836.012,685.98 836.571,685.98 837.13,685.98 837.689,685.98 838.249,685.98 838.808,685.98 839.367,685.98 839.926,685.98 840.486,685.98 841.045,685.98 841.604,685.98 842.163,685.98 842.723,685.98 843.282,685.98 843.841,685.98 844.4,685.98 844.96,685.98 845.519,685.98 846.078,685.98 846.637,685.98 847.197,685.98 847.756,685.98 848.315,685.98 848.874,685.98 849.434,685.98 849.993,685.98 850.552,685.98 851.111,685.98 851.671,685.98 852.23,685.98 852.789,685.98 853.348,685.98 853.908,685.98 854.467,685.98 855.026,685.98 855.585,685.98 856.145,685.98 856.704,685.98 857.263,685.98 857.822,685.98 858.382,685.98 858.941,685.98 859.5,685.98 860.059,685.98 860.619,685.98 861.178,685.98 861.737,685.98 862.296,685.98 862.856,685.98 863.415,685.98 863.974,685.98 864.533,685.98 865.093,685.98 865.652,685.98 866.211,685.98 866.77,685.98 867.33,685.98 867.889,685.98 868.448,685.98 869.007,685.98 869.567,685.98 870.126,685.98 870.685,685.98 871.244,685.98 871.804,685.98 872.363,685.98 872.922,685.98 873.481,685.98 874.041,685.98 874.6,685.98 875.159,685.98 875.718,685.98 876.278,685.98 876.837,685.98 877.396,685.98 877.955,685.98 878.515,685.98 879.074,685.98 879.633,685.98 880.192,685.98 880.752,685.98 881.311,685.98 881.87,685.98 882.429,685.98 882.989,685.98 883.548,685.98 884.107,685.98 884.666,685.98 885.226,685.98 885.785,685.98 886.344,685.98 886.903,685.98 887.463,685.98 888.022,685.98 888.581,685.98 889.14,685.98 889.7,685.98 890.259,685.98 890.818,685.98 891.377,685.98 891.937,685.98 892.496,685.98 893.055,685.98 893.614,685.98 894.174,685.98 894.733,685.98 895.292,685.98 895.851,685.98 896.411,685.98 896.97,685.98 897.529,685.98 898.088,685.98 898.648,685.98 899.207,685.98 899.766,685.98 900.325,685.98 900.885,685.98 901.444,685.98 902.003,685.98 902.562,685.98 903.122,685.98 903.681,685.98 904.24,685.98 904.799,685.98 905.359,685.98 905.918,685.98 906.477,685.98 907.036,685.98 907.596,685.98 908.155,685.98 908.714,685.98 909.273,685.98 909.833,685.98 910.392,685.98 910.951,685.98 911.51,685.98 912.07,685.98 912.629,685.98 913.188,685.98 913.747,685.98 914.307,685.98 914.866,685.98 915.425,685.98 915.984,685.98 916.544,685.98 917.103,685.98 917.662,685.98 918.221,685.98 918.781,685.98 919.34,685.98 919.899,685.98 920.458,685.98 921.018,685.98 921.577,685.98 922.136,685.98 922.695,685.98 923.255,685.98 923.814,685.98 924.373,685.98 924.932,685.98 925.492,685.98 926.051,685.98 926.61,685.98 927.169,685.98 927.729,685.98 928.288,685.98 928.847,685.98 929.406,685.98 929.966,685.98 930.525,685.98 931.084,685.98 931.644,685.98 932.203,685.98 932.762,685.98 933.321,685.98 933.881,685.98 934.44,685.98 934.999,685.98 935.558,685.98 936.118,685.98 936.677,685.98 937.236,685.98 937.795,685.98 938.355,685.98 938.914,685.98 939.473,685.98 940.032,685.98 940.592,685.98 941.151,685.98 941.71,685.98 942.269,685.98 942.829,685.98 943.388,685.98 943.947,685.98 944.506,685.98 945.066,685.98 945.625,685.98 946.184,685.98 946.743,685.98 947.303,685.98 947.862,685.98 948.421,685.98 948.98,685.98 949.54,685.98 950.099,685.98 950.658,685.98 951.217,685.98 951.777,685.98 952.336,685.98 952.895,685.98 953.454,685.98 954.014,685.98 954.573,685.98 955.132,685.98 955.691,685.98 956.251,685.98 956.81,685.98 957.369,685.98 957.928,685.98 958.488,685.98 959.047,685.98 959.606,685.98 960.165,685.98 960.725,685.98 961.284,685.98 961.843,685.98 962.402,685.98 962.962,685.98 963.521,685.98 964.08,685.98 964.639,685.98 965.199,685.98 965.758,685.98 966.317,685.98 966.876,685.98 967.436,685.98 967.995,685.98 968.554,685.98 969.113,685.98 969.673,685.98 970.232,685.98 970.791,685.98 971.35,685.98 971.91,685.98 972.469,685.98 973.028,685.98 973.587,685.98 974.147,685.98 974.706,685.98 975.265,685.98 975.824,685.98 976.384,685.98 976.943,685.98 977.502,685.98 978.061,685.98 978.621,685.98 979.18,685.98 979.739,685.98 980.298,685.98 980.858,685.98 981.417,685.98 981.976,685.98 982.535,685.98 983.095,685.98 983.654,685.98 984.213,685.98 984.772,685.98 985.332,685.98 985.891,685.98 986.45,685.98 987.009,685.98 987.569,685.98 988.128,685.98 988.687,685.98 989.246,685.98 989.806,685.98 990.365,685.98 990.924,685.98 991.483,685.98 992.043,685.98 992.602,685.98 993.161,685.98 993.72,685.98 994.28,685.98 994.839,685.98 995.398,685.98 995.957,685.98 996.517,685.98 997.076,685.98 997.635,685.98 998.194,685.98 998.754,685.98 999.313,685.98 999.872,685.98 1000.43,685.98 1000.99,685.98 1001.55,685.98 1002.11,685.98 1002.67,685.98 1003.23,685.98 1003.79,685.98 1004.35,685.98 1004.91,685.98 1005.46,685.98 1006.02,685.98 1006.58,685.98 1007.14,685.98 1007.7,685.98 1008.26,685.98 1008.82,685.98 1009.38,685.98 1009.94,685.98 1010.5,685.98 1011.06,685.98 1011.62,685.98 1012.18,685.98 1012.73,685.98 1013.29,685.98 1013.85,685.98 1014.41,685.98 1014.97,685.98 1015.53,685.98 1016.09,685.98 1016.65,685.98 1017.21,685.98 1017.77,685.98 1018.33,685.98 1018.89,685.98 1019.45,685.98 1020.01,685.98 1020.56,685.98 1021.12,685.98 1021.68,685.98 1022.24,685.98 1022.8,685.98 1023.36,685.98 1023.92,685.98 1024.48,685.98 1025.04,685.98 1025.6,685.98 1026.16,685.98 1026.72,685.98 1027.28,685.98 1027.83,685.98 1028.39,685.98 1028.95,685.98 1029.51,685.98 1030.07,685.98 1030.63,685.98 1031.19,685.98 1031.75,685.98 1032.31,685.98 1032.87,685.98 1033.43,685.98 1033.99,685.98 1034.55,685.98 1035.1,685.98 1035.66,685.98 1036.22,685.98 1036.78,685.98 1037.34,685.98 1037.9,685.98 1038.46,685.98 1039.02,685.98 1039.58,685.98 1040.14,685.98 1040.7,685.98 1041.26,685.98 1041.82,685.98 1042.38,685.98 1042.93,685.98 1043.49,685.98 1044.05,685.98 1044.61,685.98 1045.17,685.98 1045.73,685.98 1046.29,685.98 1046.85,685.98 1047.41,685.98 1047.97,685.98 1048.53,685.98 1049.09,685.98 1049.65,685.98 1050.2,685.98 1050.76,685.98 1051.32,685.98 1051.88,685.98 1052.44,685.98 1053,685.98 1053.56,685.98 1054.12,685.98 1054.68,685.98 1055.24,685.98 1055.8,685.98 1056.36,685.98 1056.92,685.98 1057.48,685.98 1058.03,685.98 1058.59,685.98 1059.15,685.98 1059.71,685.98 1060.27,685.98 1060.83,685.98 1061.39,685.98 1061.95,685.98 1062.51,685.98 1063.07,685.98 1063.63,685.98 1064.19,685.98 1064.75,685.98 1065.3,685.98 1065.86,685.98 1066.42,685.98 1066.98,685.98 1067.54,685.98 1068.1,685.98 1068.66,685.98 1069.22,685.98 1069.78,685.98 1070.34,685.98 1070.9,685.98 1071.46,685.98 1072.02,685.98 1072.57,685.98 1073.13,685.98 1073.69,685.98 1074.25,685.98 1074.81,685.98 1075.37,685.98 1075.93,685.98 1076.49,685.98 1077.05,685.98 1077.61,685.98 1078.17,685.98 1078.73,685.98 1079.29,685.98 1079.85,685.98 1080.4,685.98 1080.96,685.98 1081.52,685.98 1082.08,685.98 1082.64,685.98 1083.2,685.98 1083.76,685.98 1084.32,685.98 1084.88,685.98 1085.44,685.98 1086,685.98 1086.56,685.98 1087.12,685.98 1087.67,685.98 1088.23,685.98 1088.79,685.98 1089.35,685.98 1089.91,685.98 1090.47,685.98 1091.03,685.98 1091.59,685.98 1092.15,685.98 1092.71,685.98 1093.27,685.98 1093.83,685.98 1094.39,685.98 1094.94,685.98 1095.5,685.98 1096.06,685.98 1096.62,685.98 1097.18,685.98 1097.74,685.98 1098.3,685.98 1098.86,685.98 1099.42,685.98 1099.98,685.98 1100.54,685.98 1101.1,685.98 1101.66,685.98 1102.22,685.98 1102.77,685.98 1103.33,685.98 1103.89,685.98 1104.45,685.98 1105.01,685.98 1105.57,685.98 1106.13,685.98 1106.69,685.98 1107.25,685.98 1107.81,685.98 1108.37,685.98 1108.93,685.98 1109.49,685.98 1110.04,685.98 1110.6,685.98 1111.16,685.98 1111.72,685.98 1112.28,685.98 1112.84,685.98 1113.4,685.98 1113.96,685.98 1114.52,685.98 1115.08,685.98 1115.64,685.98 1116.2,685.98 1116.76,685.98 1117.31,685.98 1117.87,685.98 1118.43,685.98 1118.99,685.98 1119.55,685.98 1120.11,685.98 1120.67,685.98 1121.23,685.98 1121.79,685.98 1122.35,685.98 1122.91,685.98 1123.47,685.98 1124.03,685.98 1124.59,685.98 1125.14,685.98 1125.7,685.98 1126.26,685.98 1126.82,685.98 1127.38,685.98 1127.94,685.98 1128.5,685.98 1129.06,685.98 1129.62,685.98 1130.18,685.98 1130.74,685.98 1131.3,685.98 1131.86,685.98 1132.41,685.98 1132.97,685.98 1133.53,685.98 1134.09,685.98 1134.65,685.98 1135.21,685.98 1135.77,685.98 1136.33,685.98 1136.89,685.98 1137.45,685.98 1138.01,685.98 1138.57,685.98 1139.13,685.98 1139.68,685.98 1140.24,685.98 1140.8,685.98 1141.36,685.98 1141.92,685.98 1142.48,685.98 1143.04,685.98 1143.6,685.98 1144.16,685.98 1144.72,685.98 1145.28,685.98 1145.84,685.98 1146.4,685.98 1146.96,685.98 1147.51,685.98 1148.07,685.98 1148.63,685.98 1149.19,685.98 1149.75,685.98 1150.31,685.98 1150.87,685.98 1151.43,685.98 1151.99,685.98 1152.55,685.98 1153.11,685.98 1153.67,685.98 1154.23,685.98 1154.78,685.98 1155.34,685.98 1155.9,685.98 1156.46,685.98 1157.02,685.98 1157.58,685.98 1158.14,685.98 1158.7,685.98 1159.26,685.98 1159.82,685.98 1160.38,685.98 1160.94,685.98 1161.5,685.98 1162.05,685.98 1162.61,685.98 1163.17,685.98 1163.73,685.98 1164.29,685.98 1164.85,685.98 1165.41,685.98 1165.97,685.98 1166.53,685.98 1167.09,685.98 1167.65,685.98 1168.21,685.98 1168.77,685.98 1169.33,685.98 1169.88,685.98 1170.44,685.98 1171,685.98 1171.56,685.98 1172.12,685.98 1172.68,685.98 1173.24,685.98 1173.8,685.98 1174.36,685.98 1174.92,685.98 1175.48,685.98 1176.04,685.98 1176.6,685.98 1177.15,685.98 1177.71,685.98 1178.27,685.98 1178.83,685.98 1179.39,685.98 1179.95,685.98 1180.51,685.98 1181.07,685.98 1181.63,685.98 1182.19,685.98 1182.75,685.98 1183.31,685.98 1183.87,685.98 1184.43,685.98 1184.98,685.98 1185.54,685.98 1186.1,685.98 1186.66,685.98 1187.22,685.98 1187.78,685.98 1188.34,685.98 1188.9,685.98 1189.46,685.98 1190.02,685.98 1190.58,685.98 1191.14,685.98 1191.7,685.98 1192.25,685.98 1192.81,685.98 1193.37,685.98 1193.93,685.98 1194.49,685.98 1195.05,685.98 1195.61,685.98 1196.17,685.98 1196.73,685.98 1197.29,685.98 1197.85,685.98 1198.41,685.98 1198.97,685.98 1199.52,685.98 1200.08,685.98 1200.64,685.98 1201.2,685.98 1201.76,685.98 1202.32,685.98 1202.88,685.98 1203.44,685.98 1204,685.98 1204.56,685.98 1205.12,685.98 1205.68,685.98 1206.24,685.98 1206.8,685.98 1207.35,685.98 1207.91,685.98 1208.47,685.98 1209.03,685.98 1209.59,685.98 1210.15,685.98 1210.71,685.98 1211.27,685.98 1211.83,685.98 1212.39,685.98 1212.95,685.98 1213.51,685.98 1214.07,685.98 1214.62,685.98 1215.18,685.98 1215.74,685.98 1216.3,685.98 1216.86,685.98 1217.42,685.98 1217.98,685.98 1218.54,685.98 1219.1,685.98 1219.66,685.98 1220.22,685.98 1220.78,685.98 1221.34,685.98 1221.89,685.98 1222.45,685.98 1223.01,685.98 1223.57,685.98 1224.13,685.98 1224.69,685.98 1225.25,685.98 1225.81,685.98 1226.37,685.98 1226.93,685.98 1227.49,685.98 1228.05,685.98 1228.61,685.98 1229.17,685.98 1229.72,685.98 1230.28,685.98 1230.84,685.98 1231.4,685.98 1231.96,685.98 1232.52,685.98 1233.08,685.98 1233.64,685.98 1234.2,685.98 1234.76,685.98 1235.32,685.98 1235.88,685.98 1236.44,685.98 1236.99,685.98 1237.55,685.98 1238.11,685.98 1238.67,685.98 1239.23,685.98 1239.79,685.98 1240.35,685.98 1240.91,685.98 1241.47,685.98 1242.03,685.98 1242.59,685.98 1243.15,685.98 1243.71,685.98 1244.26,685.98 1244.82,685.98 1245.38,685.98 1245.94,685.98 1246.5,685.98 1247.06,685.98 1247.62,685.98 1248.18,685.98 1248.74,685.98 1249.3,685.98 1249.86,685.98 1250.42,685.98 1250.98,685.98 1251.54,685.98 1252.09,685.98 1252.65,685.98 1253.21,685.98 1253.77,685.98 1254.33,685.98 1254.89,685.98 1255.45,685.98 1256.01,685.98 1256.57,685.98 1257.13,685.98 1257.69,685.98 1258.25,685.98 1258.81,685.98 1259.36,685.98 1259.92,685.98 1260.48,685.98 1261.04,685.98 1261.6,685.98 1262.16,685.98 1262.72,685.98 1263.28,685.98 1263.84,685.98 1264.4,685.98 1264.96,685.98 1265.52,685.98 1266.08,685.98 1266.63,685.98 1267.19,685.98 1267.75,685.98 1268.31,685.98 1268.87,685.98 1269.43,685.98 1269.99,685.98 1270.55,685.98 1271.11,685.98 1271.67,685.98 1272.23,685.98 1272.79,685.98 1273.35,685.98 1273.91,685.98 1274.46,685.98 1275.02,685.98 1275.58,685.98 1276.14,685.98 1276.7,685.98 1277.26,685.98 1277.82,685.98 1278.38,685.98 1278.94,685.98 1279.5,685.98 1280.06,685.98 1280.62,685.98 1281.18,685.98 1281.73,685.98 1282.29,685.98 1282.85,685.98 1283.41,685.98 1283.97,685.98 1284.53,685.98 1285.09,685.98 1285.65,685.98 1286.21,685.98 1286.77,685.98 1287.33,685.98 1287.89,685.98 1288.45,685.98 1289,685.98 1289.56,685.98 1290.12,685.98 1290.68,685.98 1291.24,685.98 1291.8,685.98 1292.36,685.98 1292.92,685.98 1293.48,685.98 1294.04,685.98 1294.6,685.98 1295.16,685.98 1295.72,685.98 1296.28,685.98 1296.83,685.98 1297.39,685.98 1297.95,685.98 1298.51,685.98 1299.07,685.98 1299.63,685.98 1300.19,685.98 1300.75,685.98 1301.31,685.98 1301.87,685.98 1302.43,685.98 1302.99,685.98 1303.55,685.98 1304.1,685.98 1304.66,685.98 1305.22,685.98 1305.78,685.98 1306.34,685.98 1306.9,685.98 1307.46,685.98 1308.02,685.98 1308.58,685.98 1309.14,685.98 1309.7,685.98 1310.26,685.98 1310.82,685.98 1311.38,685.98 1311.93,685.98 1312.49,685.98 1313.05,685.98 1313.61,685.98 1314.17,685.98 1314.73,685.98 1315.29,685.98 1315.85,685.98 1316.41,685.98 1316.97,685.98 1317.53,685.98 1318.09,685.98 1318.65,685.98 1319.2,685.98 1319.76,685.98 1320.32,685.98 1320.88,685.98 1321.44,685.98 1322,685.98 1322.56,685.98 1323.12,685.98 1323.68,685.98 1324.24,685.98 1324.8,685.98 1325.36,685.98 1325.92,685.98 1326.47,685.98 1327.03,685.98 1327.59,685.98 1328.15,685.98 1328.71,685.98 1329.27,685.98 1329.83,685.98 1330.39,685.98 1330.95,685.98 1331.51,685.98 1332.07,685.98 1332.63,685.98 1333.19,685.98 1333.75,685.98 1334.3,685.98 1334.86,685.98 1335.42,685.98 1335.98,685.98 1336.54,685.98 1337.1,685.98 1337.66,685.98 1338.22,685.98 1338.78,685.98 1339.34,685.98 1339.9,685.98 1340.46,685.98 1341.02,685.98 1341.57,685.98 1342.13,685.98 1342.69,685.98 1343.25,685.98 1343.81,685.98 1344.37,685.98 1344.93,685.98 1345.49,685.98 1346.05,685.98 1346.61,685.98 1347.17,685.98 1347.73,685.98 1348.29,685.98 1348.84,685.98 1349.4,685.98 1349.96,685.98 1350.52,685.98 1351.08,685.98 1351.64,685.98 1352.2,685.98 1352.76,685.98 1353.32,685.98 1353.88,685.98 1354.44,685.98 1355,685.98 1355.56,685.98 1356.12,685.98 1356.67,685.98 1357.23,685.98 1357.79,685.98 1358.35,685.98 1358.91,685.98 1359.47,685.98 1360.03,685.98 1360.59,685.98 1361.15,685.98 1361.71,685.98 1362.27,685.98 1362.83,685.98 1363.39,685.98 1363.94,685.98 1364.5,685.98 1365.06,685.98 1365.62,685.98 1366.18,685.98 1366.74,685.98 1367.3,685.98 1367.86,685.98 1368.42,685.98 1368.98,685.98 1369.54,685.98 1370.1,685.98 1370.66,685.98 1371.21,685.98 1371.77,685.98 1372.33,685.98 1372.89,685.98 1373.45,685.98 1374.01,685.98 1374.57,685.98 1375.13,685.98 1375.69,685.98 1376.25,685.98 1376.81,685.98 1377.37,685.98 1377.93,685.98 1378.49,685.98 1379.04,685.98 1379.6,685.98 1380.16,685.98 1380.72,685.98 1381.28,685.98 1381.84,685.98 1382.4,685.98 1382.96,685.98 1383.52,685.98 1384.08,685.98 1384.64,685.98 1385.2,685.98 1385.76,685.98 1386.31,685.98 1386.87,685.98 1387.43,685.98 1387.99,685.98 1388.55,685.98 1389.11,685.98 1389.67,685.98 1390.23,685.98 1390.79,685.98 1391.35,685.98 1391.91,685.98 1392.47,685.98 1393.03,685.98 1393.58,685.98 1394.14,685.98 1394.7,685.98 1395.26,685.98 1395.82,685.98 1396.38,685.98 1396.94,685.98 1397.5,685.98 1398.06,685.98 1398.62,685.98 1399.18,685.98 1399.74,685.98 1400.3,685.98 1400.86,685.98 1401.41,685.98 1401.97,685.98 1402.53,685.98 1403.09,685.98 1403.65,685.98 1404.21,685.98 1404.77,685.98 1405.33,685.98 1405.89,685.98 1406.45,685.98 1407.01,685.98 1407.57,685.98 1408.13,685.98 1408.68,685.98 1409.24,685.98 1409.8,685.98 1410.36,685.98 1410.92,685.98 1411.48,685.98 1412.04,685.98 1412.6,685.98 1413.16,685.98 1413.72,685.98 1414.28,685.98 1414.84,685.98 1415.4,685.98 1415.95,685.98 1416.51,685.98 1417.07,685.98 1417.63,685.98 1418.19,685.98 1418.75,685.98 1419.31,685.98 1419.87,685.98 1420.43,685.98 1420.99,685.98 1421.55,685.98 1422.11,685.98 1422.67,685.98 1423.23,685.98 1423.78,685.98 1424.34,685.98 1424.9,685.98 1425.46,685.98 1426.02,685.98 1426.58,685.98 1427.14,685.98 1427.7,685.98 1428.26,685.98 1428.82,685.98 1429.38,685.98 1429.94,685.98 1430.5,685.98 1431.05,685.98 1431.61,685.98 1432.17,685.98 1432.73,685.98 1433.29,685.98 1433.85,685.98 1434.41,685.98 1434.97,685.98 1435.53,685.98 1436.09,685.98 1436.65,685.98 1437.21,685.98 1437.77,685.98 1438.33,685.98 1438.88,685.98 1439.44,685.98 1440,685.98 1440.56,685.98 1441.12,685.98 1441.68,685.98 1442.24,685.98 1442.8,685.98 1443.36,685.98 1443.92,685.98 1444.48,685.98 1445.04,685.98 1445.6,685.98 1446.15,685.98 1446.71,685.98 1447.27,685.98 1447.83,685.98 1448.39,685.98 1448.95,685.98 1449.51,685.98 1450.07,685.98 1450.63,685.98 1451.19,685.98 1451.75,685.98 1452.31,685.98 1452.87,685.98 1453.42,685.98 1453.98,685.98 1454.54,685.98 1455.1,685.98 1455.66,685.98 1456.22,685.98 1456.78,685.98 1457.34,685.98 1457.9,685.98 1458.46,685.98 1459.02,685.98 1459.58,685.98 1460.14,685.98 1460.7,685.98 1461.25,685.98 1461.81,685.98 1462.37,685.98 1462.93,685.98 1463.49,685.98 1464.05,685.98 1464.61,685.98 1465.17,685.98 1465.73,685.98 1466.29,685.98 1466.85,685.98 1467.41,685.98 1467.97,685.98 1468.52,685.98 1469.08,685.98 1469.64,685.98 1470.2,685.98 1470.76,685.98 1471.32,685.98 1471.88,685.98 1472.44,685.98 1473,685.98 1473.56,685.98 1474.12,685.98 1474.68,685.98 1475.24,685.98 1475.79,685.98 1476.35,685.98 1476.91,685.98 1477.47,685.98 1478.03,685.98 1478.59,685.98 1479.15,685.98 1479.71,685.98 1480.27,685.98 1480.83,685.98 1481.39,685.98 1481.95,685.98 1482.51,685.98 1483.07,685.98 1483.62,685.98 1484.18,685.98 1484.74,685.98 1485.3,685.98 1485.86,685.98 1486.42,685.98 1486.98,685.98 1487.54,685.98 1488.1,685.98 1488.66,685.98 1489.22,685.98 1489.78,685.98 1490.34,685.98 1490.89,685.98 1491.45,685.98 1492.01,685.98 1492.57,685.98 1493.13,685.98 1493.69,685.98 1494.25,685.98 1494.81,685.98 1495.37,685.98 1495.93,685.98 1496.49,685.98 1497.05,685.98 1497.61,685.98 1498.16,685.98 1498.72,685.98 1499.28,685.98 1499.84,685.98 1500.4,685.98 1500.96,685.98 1501.52,685.98 1502.08,685.98 1502.64,685.98 1503.2,685.98 1503.76,685.98 1504.32,685.98 1504.88,685.98 1505.44,685.98 1505.99,685.98 1506.55,685.98 1507.11,685.98 1507.67,685.98 1508.23,685.98 1508.79,685.98 1509.35,685.98 1509.91,685.98 1510.47,685.98 1511.03,685.98 1511.59,685.98 1512.15,685.98 1512.71,685.98 1513.26,685.98 1513.82,685.98 1514.38,685.98 1514.94,685.98 1515.5,685.98 1516.06,685.98 1516.62,685.98 1517.18,685.98 1517.74,685.98 1518.3,685.98 1518.86,685.98 1519.42,685.98 1519.98,685.98 1520.53,685.98 1521.09,685.98 1521.65,685.98 1522.21,685.98 1522.77,685.98 1523.33,685.98 1523.89,685.98 1524.45,685.98 1525.01,685.98 1525.57,685.98 1526.13,685.98 1526.69,685.98 1527.25,685.98 1527.81,685.98 1528.36,685.98 1528.92,685.98 1529.48,685.98 1530.04,685.98 1530.6,685.98 1531.16,685.98 1531.72,685.98 1532.28,685.98 1532.84,685.98 1533.4,685.98 1533.96,685.98 1534.52,685.98 1535.08,685.98 1535.63,685.98 1536.19,685.98 1536.75,685.98 1537.31,685.98 1537.87,685.98 1538.43,685.98 1538.99,685.98 1539.55,685.98 1540.11,685.98 1540.67,685.98 1541.23,685.98 1541.79,685.98 1542.35,685.98 1542.9,685.98 1543.46,685.98 1544.02,685.98 1544.58,685.98 1545.14,685.98 1545.7,685.98 1546.26,685.98 1546.82,685.98 1547.38,685.98 1547.94,685.98 1548.5,685.98 1549.06,685.98 1549.62,685.98 1550.18,685.98 1550.73,685.98 1551.29,685.98 1551.85,685.98 1552.41,685.98 1552.97,685.98 1553.53,685.98 1554.09,685.98 1554.65,685.98 1555.21,685.98 1555.77,685.98 1556.33,685.98 1556.89,685.98 1557.45,685.98 1558,685.98 1558.56,685.98 1559.12,685.98 1559.68,685.98 1560.24,685.98 1560.8,685.98 1561.36,685.98 1561.92,685.98 1562.48,685.98 1563.04,685.98 1563.6,685.98 1564.16,685.98 1564.72,685.98 1565.28,685.98 1565.83,685.98 1566.39,685.98 1566.95,685.98 1567.51,685.98 1568.07,685.98 1568.63,685.98 1569.19,685.98 1569.75,685.98 1570.31,685.98 1570.87,685.98 1571.43,685.98 1571.99,685.98 1572.55,685.98 1573.1,685.98 1573.66,685.98 1574.22,685.98 1574.78,685.98 1575.34,685.98 1575.9,685.98 1576.46,685.98 1577.02,685.98 1577.58,685.98 1578.14,685.98 1578.7,685.98 1579.26,685.98 1579.82,685.98 1580.37,685.98 1580.93,685.98 1581.49,685.98 1582.05,685.98 1582.61,685.98 1583.17,685.98 1583.73,685.98 1584.29,685.98 1584.85,685.98 1585.41,685.98 1585.97,685.98 1586.53,685.98 1587.09,685.98 1587.65,685.98 1588.2,685.98 1588.76,685.98 1589.32,685.98 1589.88,685.98 1590.44,685.98 1591,685.98 1591.56,685.98 1592.12,685.98 1592.68,685.98 1593.24,685.98 1593.8,685.98 1594.36,685.98 1594.92,685.98 1595.47,685.98 1596.03,685.98 1596.59,685.98 1597.15,685.98 1597.71,685.98 1598.27,685.98 1598.83,685.98 1599.39,685.98 1599.95,685.98 1600.51,685.98 1601.07,685.98 1601.63,685.98 1602.19,685.98 1602.74,685.98 1603.3,685.98 1603.86,685.98 1604.42,685.98 1604.98,685.98 1605.54,685.98 1606.1,685.98 1606.66,685.98 1607.22,685.98 1607.78,685.98 1608.34,685.98 1608.9,685.98 1609.46,685.98 1610.02,685.98 1610.57,685.98 1611.13,685.98 1611.69,685.98 1612.25,685.98 1612.81,685.98 1613.37,685.98 1613.93,685.98 1614.49,685.98 1615.05,685.98 1615.61,685.98 1616.17,685.98 1616.73,685.98 1617.29,685.98 1617.84,685.98 1618.4,685.98 1618.96,685.98 1619.52,685.98 1620.08,685.98 1620.64,685.98 1621.2,685.98 1621.76,685.98 1622.32,685.98 1622.88,685.98 1623.44,685.98 1624,685.98 1624.56,685.98 1625.11,685.98 1625.67,685.98 1626.23,685.98 1626.79,685.98 1627.35,685.98 1627.91,685.98 1628.47,685.98 1629.03,685.98 1629.59,685.98 1630.15,685.98 1630.71,685.98 1631.27,685.98 1631.83,685.98 1632.39,685.98 1632.94,685.98 1633.5,685.98 1634.06,685.98 1634.62,685.98 1635.18,685.98 1635.74,685.98 1636.3,685.98 1636.86,685.98 1637.42,685.98 1637.98,685.98 1638.54,685.98 1639.1,685.98 1639.66,685.98 1640.21,685.98 1640.77,685.98 1641.33,685.98 1641.89,685.98 1642.45,685.98 1643.01,685.98 1643.57,685.98 1644.13,685.98 1644.69,685.98 1645.25,685.98 1645.81,685.98 1646.37,685.98 1646.93,685.98 1647.48,685.98 1648.04,685.98 1648.6,685.98 1649.16,685.98 1649.72,685.98 1650.28,685.98 1650.84,685.98 1651.4,685.98 1651.96,685.98 1652.52,685.98 1653.08,685.98 1653.64,685.98 1654.2,685.98 1654.76,685.98 1655.31,685.98 1655.87,685.98 1656.43,685.98 1656.99,685.98 1657.55,685.98 1658.11,685.98 1658.67,685.98 1659.23,685.98 1659.79,685.98 1660.35,685.98 1660.91,685.98 1661.47,685.98 1662.03,685.98 1662.58,685.98 1663.14,685.98 1663.7,685.98 1664.26,685.98 1664.82,685.98 1665.38,685.98 1665.94,685.98 1666.5,685.98 1667.06,685.98 1667.62,685.98 1668.18,685.98 1668.74,685.98 1669.3,685.98 1669.85,685.98 1670.41,685.98 1670.97,685.98 1671.53,685.98 1672.09,685.98 1672.65,685.98 1673.21,685.98 1673.77,685.98 1674.33,685.98 1674.89,685.98 1675.45,685.98 1676.01,685.98 1676.57,685.98 1677.13,685.98 1677.68,685.98 1678.24,685.98 1678.8,685.98 1679.36,685.98 1679.92,685.98 1680.48,685.98 1681.04,685.98 1681.6,685.98 1682.16,685.98 1682.72,685.98 1683.28,685.98 1683.84,685.98 1684.4,685.98 1684.95,685.98 1685.51,685.98 1686.07,685.98 1686.63,685.98 1687.19,685.98 1687.75,685.98 1688.31,685.98 1688.87,685.98 1689.43,685.98 1689.99,685.98 1690.55,685.98 1691.11,685.98 1691.67,685.98 1692.23,685.98 1692.78,685.98 1693.34,685.98 1693.9,685.98 1694.46,685.98 1695.02,685.98 1695.58,685.98 1696.14,685.98 1696.7,685.98 1697.26,685.98 1697.82,685.98 1698.38,685.98 1698.94,685.98 1699.5,685.98 1700.05,685.98 1700.61,685.98 1701.17,685.98 1701.73,685.98 1702.29,685.98 1702.85,685.98 1703.41,685.98 1703.97,685.98 1704.53,685.98 1705.09,685.98 1705.65,685.98 1706.21,685.98 1706.77,685.98 1707.32,685.98 1707.88,685.98 1708.44,685.98 1709,685.98 1709.56,685.98 1710.12,685.98 1710.68,685.98 1711.24,685.98 1711.8,685.98 1712.36,685.98 1712.92,685.98 1713.48,685.98 1714.04,685.98 1714.6,685.98 1715.15,685.98 1715.71,685.98 1716.27,685.98 1716.83,685.98 1717.39,685.98 1717.95,685.98 1718.51,685.98 1719.07,685.98 1719.63,685.98 1720.19,685.98 1720.75,685.98 1721.31,685.98 1721.87,685.98 1722.42,685.98 1722.98,685.98 1723.54,685.98 1724.1,685.98 1724.66,685.98 1725.22,685.98 1725.78,685.98 1726.34,685.98 1726.9,685.98 1727.46,685.98 1728.02,685.98 1728.58,685.98 1729.14,685.98 1729.69,685.98 1730.25,685.98 1730.81,685.98 1731.37,685.98 1731.93,685.98 1732.49,685.98 1733.05,685.98 1733.61,685.98 1734.17,685.98 1734.73,685.98 1735.29,685.98 1735.85,685.98 1736.41,685.98 1736.97,685.98 1737.52,685.98 1738.08,685.98 1738.64,685.98 1739.2,685.98 1739.76,685.98 1740.32,685.98 1740.88,685.98 1741.44,685.98 1742,685.98 1742.56,685.98 1743.12,685.98 1743.68,685.98 1744.24,685.98 1744.79,685.98 1745.35,685.98 1745.91,685.98 1746.47,685.98 1747.03,685.98 1747.59,685.98 1748.15,685.98 1748.71,685.98 1749.27,685.98 1749.83,685.98 1750.39,685.98 1750.95,685.98 1751.51,685.98 1752.06,685.98 1752.62,685.98 1753.18,685.98 1753.74,685.98 1754.3,685.98 1754.86,685.98 1755.42,685.98 1755.98,685.98 1756.54,685.98 1757.1,685.98 1757.66,685.98 1758.22,685.98 1758.78,685.98 1759.34,685.98 1759.89,685.98 1760.45,685.98 1761.01,685.98 1761.57,685.98 1762.13,685.98 1762.69,685.98 1763.25,685.98 1763.81,685.98 1764.37,685.98 1764.93,685.98 1765.49,685.98 1766.05,685.98 1766.61,685.98 1767.16,685.98 1767.72,685.98 1768.28,685.98 1768.84,685.98 1769.4,685.98 1769.96,685.98 1770.52,685.98 1771.08,685.98 1771.64,685.98 1772.2,685.98 1772.76,685.98 1773.32,685.98 1773.88,685.98 1774.43,685.98 1774.99,685.98 1775.55,685.98 1776.11,685.98 1776.67,685.98 1777.23,685.98 1777.79,685.98 1778.35,685.98 1778.91,685.98 1779.47,685.98 1780.03,685.98 1780.59,685.98 1781.15,685.98 1781.71,685.98 1782.26,685.98 1782.82,685.98 1783.38,685.98 1783.94,685.98 1784.5,685.98 1785.06,685.98 1785.62,685.98 1786.18,685.98 1786.74,685.98 1787.3,685.98 1787.86,685.98 1788.42,685.98 1788.98,685.98 1789.53,685.98 1790.09,685.98 1790.65,685.98 1791.21,685.98 1791.77,685.98 1792.33,685.98 1792.89,685.98 1793.45,685.98 1794.01,685.98 1794.57,685.98 1795.13,685.98 1795.69,685.98 1796.25,685.98 1796.8,685.98 1797.36,685.98 1797.92,685.98 1798.48,685.98 1799.04,685.98 1799.6,685.98 1800.16,685.98 1800.72,685.98 1801.28,685.98 1801.84,685.98 1802.4,685.98 1802.96,685.98 1803.52,685.98 1804.08,685.98 1804.63,685.98 1805.19,685.98 1805.75,685.98 1806.31,685.98 1806.87,685.98 1807.43,685.98 1807.99,685.98 1808.55,685.98 1809.11,685.98 1809.67,685.98 1810.23,685.98 1810.79,685.98 1811.35,685.98 1811.9,685.98 1812.46,685.98 1813.02,685.98 1813.58,685.98 1814.14,685.98 1814.7,685.98 1815.26,685.98 1815.82,685.98 1816.38,685.98 1816.94,685.98 1817.5,685.98 1818.06,685.98 1818.62,685.98 1819.18,685.98 1819.73,685.98 1820.29,685.98 1820.85,685.98 1821.41,685.98 1821.97,685.98 1822.53,685.98 1823.09,685.98 1823.65,685.98 1824.21,685.98 1824.77,685.98 1825.33,685.98 1825.89,685.98 1826.45,685.98 1827,685.98 1827.56,685.98 1828.12,685.98 1828.68,685.98 1829.24,685.98 1829.8,685.98 1830.36,685.98 1830.92,685.98 1831.48,685.98 1832.04,685.98 1832.6,685.98 1833.16,685.98 1833.72,685.98 1834.27,685.98 1834.83,685.98 1835.39,685.98 1835.95,685.98 1836.51,685.98 1837.07,685.98 1837.63,685.98 1838.19,685.98 \"/>\n<path clip-path=\"url(#clip493)\" d=\"M720.247 684.043 L720.806 684.043 L721.365 684.043 L721.924 684.043 L722.484 684.043 L723.043 684.043 L723.602 684.043 L724.161 684.043 L724.721 684.043 L725.28 684.043 L725.839 684.043 L726.398 684.043 L726.958 684.043 L727.517 684.043 L728.076 684.043 L728.635 684.043 L729.195 684.043 L729.754 684.043 L730.313 684.043 L730.872 684.043 L731.432 684.043 L731.991 684.043 L732.55 684.043 L733.109 684.043 L733.669 684.043 L734.228 684.043 L734.787 684.043 L735.346 684.043 L735.906 684.043 L736.465 684.043 L737.024 684.043 L737.583 684.043 L738.143 684.043 L738.702 684.043 L739.261 684.043 L739.82 684.043 L740.38 684.043 L740.939 684.043 L741.498 684.043 L742.057 684.043 L742.617 684.043 L743.176 684.043 L743.735 684.043 L744.294 684.043 L744.854 684.043 L745.413 684.043 L745.972 684.043 L746.531 684.043 L747.091 684.043 L747.65 684.043 L748.209 684.043 L748.768 684.043 L749.328 684.043 L749.887 684.043 L750.446 684.043 L751.005 684.043 L751.565 684.043 L752.124 684.043 L752.683 684.043 L753.242 684.043 L753.802 684.043 L754.361 684.043 L754.92 684.043 L755.479 684.043 L756.039 684.043 L756.598 684.043 L757.157 684.043 L757.716 684.043 L758.276 684.043 L758.835 684.043 L759.394 684.043 L759.953 684.043 L760.513 684.043 L761.072 684.043 L761.631 684.043 L762.19 684.043 L762.75 684.043 L763.309 684.043 L763.868 684.043 L764.427 684.043 L764.987 684.043 L765.546 684.043 L766.105 684.043 L766.664 684.043 L767.224 684.043 L767.783 684.043 L768.342 684.043 L768.901 684.043 L769.461 684.043 L770.02 684.043 L770.579 684.043 L771.138 684.043 L771.698 684.043 L772.257 684.043 L772.816 684.043 L773.375 684.043 L773.935 684.043 L774.494 684.043 L775.053 684.043 L775.612 684.043 L776.172 684.043 L776.731 684.043 L777.29 684.043 L777.849 684.043 L778.409 684.043 L778.968 684.043 L779.527 684.043 L780.086 684.043 L780.646 684.043 L781.205 684.043 L781.764 684.043 L782.323 684.043 L782.883 684.043 L783.442 684.043 L784.001 684.043 L784.56 684.043 L785.12 684.043 L785.679 684.043 L786.238 684.043 L786.797 684.043 L787.357 684.043 L787.916 684.043 L788.475 684.043 L789.034 684.043 L789.594 684.043 L790.153 684.043 L790.712 684.043 L791.271 684.043 L791.831 684.043 L792.39 684.043 L792.949 684.043 L793.508 684.043 L794.068 684.043 L794.627 684.043 L795.186 684.043 L795.745 684.043 L796.305 684.043 L796.864 684.043 L797.423 684.043 L797.982 684.043 L798.542 684.043 L799.101 684.043 L799.66 684.043 L800.219 684.043 L800.779 684.043 L801.338 684.043 L801.897 684.043 L802.456 684.043 L803.016 684.043 L803.575 684.043 L804.134 684.043 L804.693 684.043 L805.253 684.043 L805.812 684.043 L806.371 684.043 L806.931 684.043 L807.49 684.043 L808.049 684.043 L808.608 684.043 L809.168 684.043 L809.727 684.043 L810.286 684.043 L810.845 684.043 L811.405 684.043 L811.964 684.043 L812.523 684.043 L813.082 684.043 L813.642 684.043 L814.201 684.043 L814.76 684.043 L815.319 684.043 L815.879 684.043 L816.438 684.043 L816.997 684.043 L817.556 684.043 L818.116 684.043 L818.675 684.043 L819.234 684.043 L819.793 684.043 L820.353 684.043 L820.912 684.043 L821.471 684.043 L822.03 684.043 L822.59 684.043 L823.149 684.043 L823.708 684.043 L824.267 684.043 L824.827 684.043 L825.386 684.043 L825.945 684.043 L826.504 684.043 L827.064 684.043 L827.623 684.043 L828.182 684.043 L828.741 684.043 L829.301 684.043 L829.86 684.043 L830.419 684.043 L830.978 684.043 L831.538 684.043 L832.097 684.043 L832.656 684.043 L833.215 684.043 L833.775 684.043 L834.334 684.043 L834.893 684.043 L835.452 684.043 L836.012 684.043 L836.571 684.043 L837.13 684.043 L837.689 684.043 L838.249 684.043 L838.808 684.043 L839.367 684.043 L839.926 684.043 L840.486 684.043 L841.045 684.043 L841.604 684.043 L842.163 684.043 L842.723 684.043 L843.282 684.043 L843.841 684.043 L844.4 684.043 L844.96 684.043 L845.519 684.043 L846.078 684.043 L846.637 684.043 L847.197 684.043 L847.756 684.043 L848.315 684.043 L848.874 684.043 L849.434 684.043 L849.993 684.043 L850.552 684.043 L851.111 684.043 L851.671 684.043 L852.23 684.043 L852.789 684.043 L853.348 684.043 L853.908 684.043 L854.467 684.043 L855.026 684.043 L855.585 684.043 L856.145 684.043 L856.704 684.043 L857.263 684.043 L857.822 684.043 L858.382 684.043 L858.941 684.043 L859.5 684.043 L860.059 684.043 L860.619 684.043 L861.178 684.043 L861.737 684.043 L862.296 684.043 L862.856 684.043 L863.415 684.043 L863.974 684.043 L864.533 684.043 L865.093 684.043 L865.652 684.043 L866.211 684.043 L866.77 684.043 L867.33 684.043 L867.889 684.043 L868.448 684.043 L869.007 684.043 L869.567 684.043 L870.126 684.043 L870.685 684.043 L871.244 684.043 L871.804 684.043 L872.363 684.043 L872.922 684.043 L873.481 684.043 L874.041 684.043 L874.6 684.043 L875.159 684.043 L875.718 684.043 L876.278 684.043 L876.837 684.043 L877.396 684.043 L877.955 684.043 L878.515 684.043 L879.074 684.043 L879.633 684.043 L880.192 684.043 L880.752 684.043 L881.311 684.043 L881.87 684.043 L882.429 684.043 L882.989 684.043 L883.548 684.043 L884.107 684.043 L884.666 684.043 L885.226 684.043 L885.785 684.043 L886.344 684.043 L886.903 684.043 L887.463 684.043 L888.022 684.043 L888.581 684.043 L889.14 684.043 L889.7 684.043 L890.259 684.043 L890.818 684.043 L891.377 684.043 L891.937 684.043 L892.496 684.043 L893.055 684.043 L893.614 684.043 L894.174 684.043 L894.733 684.043 L895.292 684.043 L895.851 684.043 L896.411 684.043 L896.97 684.043 L897.529 684.043 L898.088 684.043 L898.648 684.043 L899.207 684.043 L899.766 684.043 L900.325 684.043 L900.885 684.043 L901.444 684.043 L902.003 684.043 L902.562 684.043 L903.122 684.043 L903.681 684.043 L904.24 684.043 L904.799 684.043 L905.359 684.043 L905.918 684.043 L906.477 684.043 L907.036 684.043 L907.596 684.043 L908.155 684.043 L908.714 684.043 L909.273 684.043 L909.833 684.043 L910.392 684.043 L910.951 684.043 L911.51 684.043 L912.07 684.043 L912.629 684.043 L913.188 684.043 L913.747 684.043 L914.307 684.043 L914.866 684.043 L915.425 684.043 L915.984 684.043 L916.544 684.043 L917.103 684.043 L917.662 684.043 L918.221 684.043 L918.781 684.043 L919.34 684.043 L919.899 684.043 L920.458 684.043 L921.018 684.043 L921.577 684.043 L922.136 684.043 L922.695 684.043 L923.255 684.043 L923.814 684.043 L924.373 684.043 L924.932 684.043 L925.492 684.043 L926.051 684.043 L926.61 684.043 L927.169 684.043 L927.729 684.043 L928.288 684.043 L928.847 684.043 L929.406 684.043 L929.966 684.043 L930.525 684.043 L931.084 684.043 L931.644 684.043 L932.203 684.043 L932.762 684.043 L933.321 684.043 L933.881 684.043 L934.44 684.043 L934.999 684.043 L935.558 684.043 L936.118 684.043 L936.677 684.043 L937.236 684.043 L937.795 684.043 L938.355 684.043 L938.914 684.043 L939.473 684.043 L940.032 684.043 L940.592 684.043 L941.151 684.043 L941.71 684.043 L942.269 684.043 L942.829 684.043 L943.388 684.043 L943.947 684.043 L944.506 684.043 L945.066 684.043 L945.625 684.043 L946.184 684.043 L946.743 684.043 L947.303 684.043 L947.862 684.043 L948.421 684.043 L948.98 684.043 L949.54 684.043 L950.099 684.043 L950.658 684.043 L951.217 684.043 L951.777 684.043 L952.336 684.043 L952.895 684.043 L953.454 684.043 L954.014 684.043 L954.573 684.043 L955.132 684.043 L955.691 684.043 L956.251 684.043 L956.81 684.043 L957.369 684.043 L957.928 684.043 L958.488 684.043 L959.047 684.043 L959.606 684.043 L960.165 684.043 L960.725 684.043 L961.284 684.043 L961.843 684.043 L962.402 684.043 L962.962 684.043 L963.521 684.043 L964.08 684.043 L964.639 684.043 L965.199 684.043 L965.758 684.043 L966.317 684.043 L966.876 684.043 L967.436 684.043 L967.995 684.043 L968.554 684.043 L969.113 684.043 L969.673 684.043 L970.232 684.043 L970.791 684.043 L971.35 684.043 L971.91 684.043 L972.469 684.043 L973.028 684.043 L973.587 684.043 L974.147 684.043 L974.706 684.043 L975.265 684.043 L975.824 684.043 L976.384 684.043 L976.943 684.043 L977.502 684.043 L978.061 684.043 L978.621 684.043 L979.18 684.043 L979.739 684.043 L980.298 684.043 L980.858 684.043 L981.417 684.043 L981.976 684.043 L982.535 684.043 L983.095 684.043 L983.654 684.043 L984.213 684.043 L984.772 684.043 L985.332 684.043 L985.891 684.043 L986.45 684.043 L987.009 684.043 L987.569 684.043 L988.128 684.043 L988.687 684.043 L989.246 684.043 L989.806 684.043 L990.365 684.043 L990.924 684.043 L991.483 684.043 L992.043 684.043 L992.602 684.043 L993.161 684.043 L993.72 684.043 L994.28 684.043 L994.839 684.043 L995.398 684.043 L995.957 684.043 L996.517 684.043 L997.076 684.043 L997.635 684.043 L998.194 684.043 L998.754 684.043 L999.313 684.043 L999.872 684.043 L1000.43 684.043 L1000.99 684.043 L1001.55 684.043 L1002.11 684.043 L1002.67 684.043 L1003.23 684.043 L1003.79 684.043 L1004.35 684.043 L1004.91 684.043 L1005.46 684.043 L1006.02 684.043 L1006.58 684.043 L1007.14 684.043 L1007.7 684.043 L1008.26 684.043 L1008.82 684.043 L1009.38 684.043 L1009.94 684.043 L1010.5 684.043 L1011.06 684.043 L1011.62 684.043 L1012.18 684.043 L1012.73 684.043 L1013.29 684.043 L1013.85 684.043 L1014.41 684.043 L1014.97 684.043 L1015.53 684.043 L1016.09 684.043 L1016.65 684.043 L1017.21 684.043 L1017.77 684.043 L1018.33 684.043 L1018.89 684.043 L1019.45 684.043 L1020.01 684.043 L1020.56 684.043 L1021.12 684.043 L1021.68 684.043 L1022.24 684.043 L1022.8 684.043 L1023.36 684.043 L1023.92 684.043 L1024.48 684.043 L1025.04 684.043 L1025.6 684.043 L1026.16 684.043 L1026.72 684.043 L1027.28 684.043 L1027.83 684.043 L1028.39 684.043 L1028.95 684.043 L1029.51 684.043 L1030.07 684.043 L1030.63 684.043 L1031.19 684.043 L1031.75 684.043 L1032.31 684.043 L1032.87 684.043 L1033.43 684.043 L1033.99 684.043 L1034.55 684.043 L1035.1 684.043 L1035.66 684.043 L1036.22 684.043 L1036.78 684.043 L1037.34 684.043 L1037.9 684.043 L1038.46 684.043 L1039.02 684.043 L1039.58 684.043 L1040.14 684.043 L1040.7 684.043 L1041.26 684.043 L1041.82 684.043 L1042.38 684.043 L1042.93 684.043 L1043.49 684.043 L1044.05 684.043 L1044.61 684.043 L1045.17 684.043 L1045.73 684.043 L1046.29 684.043 L1046.85 684.043 L1047.41 684.043 L1047.97 684.043 L1048.53 684.043 L1049.09 684.043 L1049.65 684.043 L1050.2 684.043 L1050.76 684.043 L1051.32 684.043 L1051.88 684.043 L1052.44 684.043 L1053 684.043 L1053.56 684.043 L1054.12 684.043 L1054.68 684.043 L1055.24 684.043 L1055.8 684.043 L1056.36 684.043 L1056.92 684.043 L1057.48 684.043 L1058.03 684.043 L1058.59 684.043 L1059.15 684.043 L1059.71 684.043 L1060.27 684.043 L1060.83 684.043 L1061.39 684.043 L1061.95 684.043 L1062.51 684.043 L1063.07 684.043 L1063.63 684.043 L1064.19 684.043 L1064.75 684.043 L1065.3 684.043 L1065.86 684.043 L1066.42 684.043 L1066.98 684.043 L1067.54 684.043 L1068.1 684.043 L1068.66 684.043 L1069.22 684.043 L1069.78 684.043 L1070.34 684.043 L1070.9 684.043 L1071.46 684.043 L1072.02 684.043 L1072.57 684.043 L1073.13 684.043 L1073.69 684.043 L1074.25 684.043 L1074.81 684.043 L1075.37 684.043 L1075.93 684.043 L1076.49 684.043 L1077.05 684.043 L1077.61 684.043 L1078.17 684.043 L1078.73 684.043 L1079.29 684.043 L1079.85 684.043 L1080.4 684.043 L1080.96 684.043 L1081.52 684.043 L1082.08 684.043 L1082.64 684.043 L1083.2 684.043 L1083.76 684.043 L1084.32 684.043 L1084.88 684.043 L1085.44 684.043 L1086 684.043 L1086.56 684.043 L1087.12 684.043 L1087.67 684.043 L1088.23 684.043 L1088.79 684.043 L1089.35 684.043 L1089.91 684.043 L1090.47 684.043 L1091.03 684.043 L1091.59 684.043 L1092.15 684.043 L1092.71 684.043 L1093.27 684.043 L1093.83 684.043 L1094.39 684.043 L1094.94 684.043 L1095.5 684.043 L1096.06 684.043 L1096.62 684.043 L1097.18 684.043 L1097.74 684.043 L1098.3 684.043 L1098.86 684.043 L1099.42 684.043 L1099.98 684.043 L1100.54 684.043 L1101.1 684.043 L1101.66 684.043 L1102.22 684.043 L1102.77 684.043 L1103.33 684.043 L1103.89 684.043 L1104.45 684.043 L1105.01 684.043 L1105.57 684.043 L1106.13 684.043 L1106.69 684.043 L1107.25 684.043 L1107.81 684.043 L1108.37 684.043 L1108.93 684.043 L1109.49 684.043 L1110.04 684.043 L1110.6 684.043 L1111.16 684.043 L1111.72 684.043 L1112.28 684.043 L1112.84 684.043 L1113.4 684.043 L1113.96 684.043 L1114.52 684.043 L1115.08 684.043 L1115.64 684.043 L1116.2 684.043 L1116.76 684.043 L1117.31 684.043 L1117.87 684.043 L1118.43 684.043 L1118.99 684.043 L1119.55 684.043 L1120.11 684.043 L1120.67 684.043 L1121.23 684.043 L1121.79 684.043 L1122.35 684.043 L1122.91 684.043 L1123.47 684.043 L1124.03 684.043 L1124.59 684.043 L1125.14 684.043 L1125.7 684.043 L1126.26 684.043 L1126.82 684.043 L1127.38 684.043 L1127.94 684.043 L1128.5 684.043 L1129.06 684.043 L1129.62 684.043 L1130.18 684.043 L1130.74 684.043 L1131.3 684.043 L1131.86 684.043 L1132.41 684.043 L1132.97 684.043 L1133.53 684.043 L1134.09 684.043 L1134.65 684.043 L1135.21 684.043 L1135.77 684.043 L1136.33 684.043 L1136.89 684.043 L1137.45 684.043 L1138.01 684.043 L1138.57 684.043 L1139.13 684.043 L1139.68 684.043 L1140.24 684.043 L1140.8 684.043 L1141.36 684.043 L1141.92 684.043 L1142.48 684.043 L1143.04 684.043 L1143.6 684.043 L1144.16 684.043 L1144.72 684.043 L1145.28 684.043 L1145.84 684.043 L1146.4 684.043 L1146.96 684.043 L1147.51 684.043 L1148.07 684.043 L1148.63 684.043 L1149.19 684.043 L1149.75 684.043 L1150.31 684.043 L1150.87 684.043 L1151.43 684.043 L1151.99 684.043 L1152.55 684.043 L1153.11 684.043 L1153.67 684.043 L1154.23 684.043 L1154.78 684.043 L1155.34 684.043 L1155.9 684.043 L1156.46 684.043 L1157.02 684.043 L1157.58 684.043 L1158.14 684.043 L1158.7 684.043 L1159.26 684.043 L1159.82 684.043 L1160.38 684.043 L1160.94 684.043 L1161.5 684.043 L1162.05 684.043 L1162.61 684.043 L1163.17 684.043 L1163.73 684.043 L1164.29 684.043 L1164.85 684.043 L1165.41 684.043 L1165.97 684.043 L1166.53 684.043 L1167.09 684.043 L1167.65 684.043 L1168.21 684.043 L1168.77 684.043 L1169.33 684.043 L1169.88 684.043 L1170.44 684.043 L1171 684.043 L1171.56 684.043 L1172.12 684.043 L1172.68 684.043 L1173.24 684.043 L1173.8 684.043 L1174.36 684.043 L1174.92 684.043 L1175.48 684.043 L1176.04 684.043 L1176.6 684.043 L1177.15 684.043 L1177.71 684.043 L1178.27 684.043 L1178.83 684.043 L1179.39 684.043 L1179.95 684.043 L1180.51 684.043 L1181.07 684.043 L1181.63 684.043 L1182.19 684.043 L1182.75 684.043 L1183.31 684.043 L1183.87 684.043 L1184.43 684.043 L1184.98 684.043 L1185.54 684.043 L1186.1 684.043 L1186.66 684.043 L1187.22 684.043 L1187.78 684.043 L1188.34 684.043 L1188.9 684.043 L1189.46 684.043 L1190.02 684.043 L1190.58 684.043 L1191.14 684.043 L1191.7 684.043 L1192.25 684.043 L1192.81 684.043 L1193.37 684.043 L1193.93 684.043 L1194.49 684.043 L1195.05 684.043 L1195.61 684.043 L1196.17 684.043 L1196.73 684.043 L1197.29 684.043 L1197.85 684.043 L1198.41 684.043 L1198.97 684.043 L1199.52 684.043 L1200.08 684.043 L1200.64 684.043 L1201.2 684.043 L1201.76 684.043 L1202.32 684.043 L1202.88 684.043 L1203.44 684.043 L1204 684.043 L1204.56 684.043 L1205.12 684.043 L1205.68 684.043 L1206.24 684.043 L1206.8 684.043 L1207.35 684.043 L1207.91 684.043 L1208.47 684.043 L1209.03 684.043 L1209.59 684.043 L1210.15 684.043 L1210.71 684.043 L1211.27 684.043 L1211.83 684.043 L1212.39 684.043 L1212.95 684.043 L1213.51 684.043 L1214.07 684.043 L1214.62 684.043 L1215.18 684.043 L1215.74 684.043 L1216.3 684.043 L1216.86 684.043 L1217.42 684.043 L1217.98 684.043 L1218.54 684.043 L1219.1 684.043 L1219.66 684.043 L1220.22 684.043 L1220.78 684.043 L1221.34 684.043 L1221.89 684.043 L1222.45 684.043 L1223.01 684.043 L1223.57 684.043 L1224.13 684.043 L1224.69 684.043 L1225.25 684.043 L1225.81 684.043 L1226.37 684.043 L1226.93 684.043 L1227.49 684.043 L1228.05 684.043 L1228.61 684.043 L1229.17 684.043 L1229.72 684.043 L1230.28 684.043 L1230.84 684.043 L1231.4 684.043 L1231.96 684.043 L1232.52 684.043 L1233.08 684.043 L1233.64 684.043 L1234.2 684.043 L1234.76 684.043 L1235.32 684.043 L1235.88 684.043 L1236.44 684.043 L1236.99 684.043 L1237.55 684.043 L1238.11 684.043 L1238.67 684.043 L1239.23 684.043 L1239.79 684.043 L1240.35 684.043 L1240.91 684.043 L1241.47 684.043 L1242.03 684.043 L1242.59 684.043 L1243.15 684.043 L1243.71 684.043 L1244.26 684.043 L1244.82 684.043 L1245.38 684.043 L1245.94 684.043 L1246.5 684.043 L1247.06 684.043 L1247.62 684.043 L1248.18 684.043 L1248.74 684.043 L1249.3 684.043 L1249.86 684.043 L1250.42 684.043 L1250.98 684.043 L1251.54 684.043 L1252.09 684.043 L1252.65 684.043 L1253.21 684.043 L1253.77 684.043 L1254.33 684.043 L1254.89 684.043 L1255.45 684.043 L1256.01 684.043 L1256.57 684.043 L1257.13 684.043 L1257.69 684.043 L1258.25 684.043 L1258.81 684.043 L1259.36 684.043 L1259.92 684.043 L1260.48 684.043 L1261.04 684.043 L1261.6 684.043 L1262.16 684.043 L1262.72 684.043 L1263.28 684.043 L1263.84 684.043 L1264.4 684.043 L1264.96 684.043 L1265.52 684.043 L1266.08 684.043 L1266.63 684.043 L1267.19 684.043 L1267.75 684.043 L1268.31 684.043 L1268.87 684.043 L1269.43 684.043 L1269.99 684.043 L1270.55 684.043 L1271.11 684.043 L1271.67 684.043 L1272.23 684.043 L1272.79 684.043 L1273.35 684.043 L1273.91 684.043 L1274.46 684.043 L1275.02 684.043 L1275.58 684.043 L1276.14 684.043 L1276.7 684.043 L1277.26 684.043 L1277.82 684.043 L1278.38 684.043 L1278.94 684.043 L1279.5 684.043 L1280.06 684.043 L1280.62 684.043 L1281.18 684.043 L1281.73 684.043 L1282.29 684.043 L1282.85 684.043 L1283.41 684.043 L1283.97 684.043 L1284.53 684.043 L1285.09 684.043 L1285.65 684.043 L1286.21 684.043 L1286.77 684.043 L1287.33 684.043 L1287.89 684.043 L1288.45 684.043 L1289 684.043 L1289.56 684.043 L1290.12 684.043 L1290.68 684.043 L1291.24 684.043 L1291.8 684.043 L1292.36 684.043 L1292.92 684.043 L1293.48 684.043 L1294.04 684.043 L1294.6 684.043 L1295.16 684.043 L1295.72 684.043 L1296.28 684.043 L1296.83 684.043 L1297.39 684.043 L1297.95 684.043 L1298.51 684.043 L1299.07 684.043 L1299.63 684.043 L1300.19 684.043 L1300.75 684.043 L1301.31 684.043 L1301.87 684.043 L1302.43 684.043 L1302.99 684.043 L1303.55 684.043 L1304.1 684.043 L1304.66 684.043 L1305.22 684.043 L1305.78 684.043 L1306.34 684.043 L1306.9 684.043 L1307.46 684.043 L1308.02 684.043 L1308.58 684.043 L1309.14 684.043 L1309.7 684.043 L1310.26 684.043 L1310.82 684.043 L1311.38 684.043 L1311.93 684.043 L1312.49 684.043 L1313.05 684.043 L1313.61 684.043 L1314.17 684.043 L1314.73 684.043 L1315.29 684.043 L1315.85 684.043 L1316.41 684.043 L1316.97 684.043 L1317.53 684.043 L1318.09 684.043 L1318.65 684.043 L1319.2 684.043 L1319.76 684.043 L1320.32 684.043 L1320.88 684.043 L1321.44 684.043 L1322 684.043 L1322.56 684.043 L1323.12 684.043 L1323.68 684.043 L1324.24 684.043 L1324.8 684.043 L1325.36 684.043 L1325.92 684.043 L1326.47 684.043 L1327.03 684.043 L1327.59 684.043 L1328.15 684.043 L1328.71 684.043 L1329.27 684.043 L1329.83 684.043 L1330.39 684.043 L1330.95 684.043 L1331.51 684.043 L1332.07 684.043 L1332.63 684.043 L1333.19 684.043 L1333.75 684.043 L1334.3 684.043 L1334.86 684.043 L1335.42 684.043 L1335.98 684.043 L1336.54 684.043 L1337.1 684.043 L1337.66 684.043 L1338.22 684.043 L1338.78 684.043 L1339.34 684.043 L1339.9 684.043 L1340.46 684.043 L1341.02 684.043 L1341.57 684.043 L1342.13 684.043 L1342.69 684.043 L1343.25 684.043 L1343.81 684.043 L1344.37 684.043 L1344.93 684.043 L1345.49 684.043 L1346.05 684.043 L1346.61 684.043 L1347.17 684.043 L1347.73 684.043 L1348.29 684.043 L1348.84 684.043 L1349.4 684.043 L1349.96 684.043 L1350.52 684.043 L1351.08 684.043 L1351.64 684.043 L1352.2 684.043 L1352.76 684.043 L1353.32 684.043 L1353.88 684.043 L1354.44 684.043 L1355 684.043 L1355.56 684.043 L1356.12 684.043 L1356.67 684.043 L1357.23 684.043 L1357.79 684.043 L1358.35 684.043 L1358.91 684.043 L1359.47 684.043 L1360.03 684.043 L1360.59 684.043 L1361.15 684.043 L1361.71 684.043 L1362.27 684.043 L1362.83 684.043 L1363.39 684.043 L1363.94 684.043 L1364.5 684.043 L1365.06 684.043 L1365.62 684.043 L1366.18 684.043 L1366.74 684.043 L1367.3 684.043 L1367.86 684.043 L1368.42 684.043 L1368.98 684.043 L1369.54 684.043 L1370.1 684.043 L1370.66 684.043 L1371.21 684.043 L1371.77 684.043 L1372.33 684.043 L1372.89 684.043 L1373.45 684.043 L1374.01 684.043 L1374.57 684.043 L1375.13 684.043 L1375.69 684.043 L1376.25 684.043 L1376.81 684.043 L1377.37 684.043 L1377.93 684.043 L1378.49 684.043 L1379.04 684.043 L1379.6 684.043 L1380.16 684.043 L1380.72 684.043 L1381.28 684.043 L1381.84 684.043 L1382.4 684.043 L1382.96 684.043 L1383.52 684.043 L1384.08 684.043 L1384.64 684.043 L1385.2 684.043 L1385.76 684.043 L1386.31 684.043 L1386.87 684.043 L1387.43 684.043 L1387.99 684.043 L1388.55 684.043 L1389.11 684.043 L1389.67 684.043 L1390.23 684.043 L1390.79 684.043 L1391.35 684.043 L1391.91 684.043 L1392.47 684.043 L1393.03 684.043 L1393.58 684.043 L1394.14 684.043 L1394.7 684.043 L1395.26 684.043 L1395.82 684.043 L1396.38 684.043 L1396.94 684.043 L1397.5 684.043 L1398.06 684.043 L1398.62 684.043 L1399.18 684.043 L1399.74 684.043 L1400.3 684.043 L1400.86 684.043 L1401.41 684.043 L1401.97 684.043 L1402.53 684.043 L1403.09 684.043 L1403.65 684.043 L1404.21 684.043 L1404.77 684.043 L1405.33 684.043 L1405.89 684.043 L1406.45 684.043 L1407.01 684.043 L1407.57 684.043 L1408.13 684.043 L1408.68 684.043 L1409.24 684.043 L1409.8 684.043 L1410.36 684.043 L1410.92 684.043 L1411.48 684.043 L1412.04 684.043 L1412.6 684.043 L1413.16 684.043 L1413.72 684.043 L1414.28 684.043 L1414.84 684.043 L1415.4 684.043 L1415.95 684.043 L1416.51 684.043 L1417.07 684.043 L1417.63 684.043 L1418.19 684.043 L1418.75 684.043 L1419.31 684.043 L1419.87 684.043 L1420.43 684.043 L1420.99 684.043 L1421.55 684.043 L1422.11 684.043 L1422.67 684.043 L1423.23 684.043 L1423.78 684.043 L1424.34 684.043 L1424.9 684.043 L1425.46 684.043 L1426.02 684.043 L1426.58 684.043 L1427.14 684.043 L1427.7 684.043 L1428.26 684.043 L1428.82 684.043 L1429.38 684.043 L1429.94 684.043 L1430.5 684.043 L1431.05 684.043 L1431.61 684.043 L1432.17 684.043 L1432.73 684.043 L1433.29 684.043 L1433.85 684.043 L1434.41 684.043 L1434.97 684.043 L1435.53 684.043 L1436.09 684.043 L1436.65 684.043 L1437.21 684.043 L1437.77 684.043 L1438.33 684.043 L1438.88 684.043 L1439.44 684.043 L1440 684.043 L1440.56 684.043 L1441.12 684.043 L1441.68 684.043 L1442.24 684.043 L1442.8 684.043 L1443.36 684.043 L1443.92 684.043 L1444.48 684.043 L1445.04 684.043 L1445.6 684.043 L1446.15 684.043 L1446.71 684.043 L1447.27 684.043 L1447.83 684.043 L1448.39 684.043 L1448.95 684.043 L1449.51 684.043 L1450.07 684.043 L1450.63 684.043 L1451.19 684.043 L1451.75 684.043 L1452.31 684.043 L1452.87 684.043 L1453.42 684.043 L1453.98 684.043 L1454.54 684.043 L1455.1 684.043 L1455.66 684.043 L1456.22 684.043 L1456.78 684.043 L1457.34 684.043 L1457.9 684.043 L1458.46 684.043 L1459.02 684.043 L1459.58 684.043 L1460.14 684.043 L1460.7 684.043 L1461.25 684.043 L1461.81 684.043 L1462.37 684.043 L1462.93 684.043 L1463.49 684.043 L1464.05 684.043 L1464.61 684.043 L1465.17 684.043 L1465.73 684.043 L1466.29 684.043 L1466.85 684.043 L1467.41 684.043 L1467.97 684.043 L1468.52 684.043 L1469.08 684.043 L1469.64 684.043 L1470.2 684.043 L1470.76 684.043 L1471.32 684.043 L1471.88 684.043 L1472.44 684.043 L1473 684.043 L1473.56 684.043 L1474.12 684.043 L1474.68 684.043 L1475.24 684.043 L1475.79 684.043 L1476.35 684.043 L1476.91 684.043 L1477.47 684.043 L1478.03 684.043 L1478.59 684.043 L1479.15 684.043 L1479.71 684.043 L1480.27 684.043 L1480.83 684.043 L1481.39 684.043 L1481.95 684.043 L1482.51 684.043 L1483.07 684.043 L1483.62 684.043 L1484.18 684.043 L1484.74 684.043 L1485.3 684.043 L1485.86 684.043 L1486.42 684.043 L1486.98 684.043 L1487.54 684.043 L1488.1 684.043 L1488.66 684.043 L1489.22 684.043 L1489.78 684.043 L1490.34 684.043 L1490.89 684.043 L1491.45 684.043 L1492.01 684.043 L1492.57 684.043 L1493.13 684.043 L1493.69 684.043 L1494.25 684.043 L1494.81 684.043 L1495.37 684.043 L1495.93 684.043 L1496.49 684.043 L1497.05 684.043 L1497.61 684.043 L1498.16 684.043 L1498.72 684.043 L1499.28 684.043 L1499.84 684.043 L1500.4 684.043 L1500.96 684.043 L1501.52 684.043 L1502.08 684.043 L1502.64 684.043 L1503.2 684.043 L1503.76 684.043 L1504.32 684.043 L1504.88 684.043 L1505.44 684.043 L1505.99 684.043 L1506.55 684.043 L1507.11 684.043 L1507.67 684.043 L1508.23 684.043 L1508.79 684.043 L1509.35 684.043 L1509.91 684.043 L1510.47 684.043 L1511.03 684.043 L1511.59 684.043 L1512.15 684.043 L1512.71 684.043 L1513.26 684.043 L1513.82 684.043 L1514.38 684.043 L1514.94 684.043 L1515.5 684.043 L1516.06 684.043 L1516.62 684.043 L1517.18 684.043 L1517.74 684.043 L1518.3 684.043 L1518.86 684.043 L1519.42 684.043 L1519.98 684.043 L1520.53 684.043 L1521.09 684.043 L1521.65 684.043 L1522.21 684.043 L1522.77 684.043 L1523.33 684.043 L1523.89 684.043 L1524.45 684.043 L1525.01 684.043 L1525.57 684.043 L1526.13 684.043 L1526.69 684.043 L1527.25 684.043 L1527.81 684.043 L1528.36 684.043 L1528.92 684.043 L1529.48 684.043 L1530.04 684.043 L1530.6 684.043 L1531.16 684.043 L1531.72 684.043 L1532.28 684.043 L1532.84 684.043 L1533.4 684.043 L1533.96 684.043 L1534.52 684.043 L1535.08 684.043 L1535.63 684.043 L1536.19 684.043 L1536.75 684.043 L1537.31 684.043 L1537.87 684.043 L1538.43 684.043 L1538.99 684.043 L1539.55 684.043 L1540.11 684.043 L1540.67 684.043 L1541.23 684.043 L1541.79 684.043 L1542.35 684.043 L1542.9 684.043 L1543.46 684.043 L1544.02 684.043 L1544.58 684.043 L1545.14 684.043 L1545.7 684.043 L1546.26 684.043 L1546.82 684.043 L1547.38 684.043 L1547.94 684.043 L1548.5 684.043 L1549.06 684.043 L1549.62 684.043 L1550.18 684.043 L1550.73 684.043 L1551.29 684.043 L1551.85 684.043 L1552.41 684.043 L1552.97 684.043 L1553.53 684.043 L1554.09 684.043 L1554.65 684.043 L1555.21 684.043 L1555.77 684.043 L1556.33 684.043 L1556.89 684.043 L1557.45 684.043 L1558 684.043 L1558.56 684.043 L1559.12 684.043 L1559.68 684.043 L1560.24 684.043 L1560.8 684.043 L1561.36 684.043 L1561.92 684.043 L1562.48 684.043 L1563.04 684.043 L1563.6 684.043 L1564.16 684.043 L1564.72 684.043 L1565.28 684.043 L1565.83 684.043 L1566.39 684.043 L1566.95 684.043 L1567.51 684.043 L1568.07 684.043 L1568.63 684.043 L1569.19 684.043 L1569.75 684.043 L1570.31 684.043 L1570.87 684.043 L1571.43 684.043 L1571.99 684.043 L1572.55 684.043 L1573.1 684.043 L1573.66 684.043 L1574.22 684.043 L1574.78 684.043 L1575.34 684.043 L1575.9 684.043 L1576.46 684.043 L1577.02 684.043 L1577.58 684.043 L1578.14 684.043 L1578.7 684.043 L1579.26 684.043 L1579.82 684.043 L1580.37 684.043 L1580.93 684.043 L1581.49 684.043 L1582.05 684.043 L1582.61 684.043 L1583.17 684.043 L1583.73 684.043 L1584.29 684.043 L1584.85 684.043 L1585.41 684.043 L1585.97 684.043 L1586.53 684.043 L1587.09 684.043 L1587.65 684.043 L1588.2 684.043 L1588.76 684.043 L1589.32 684.043 L1589.88 684.043 L1590.44 684.043 L1591 684.043 L1591.56 684.043 L1592.12 684.043 L1592.68 684.043 L1593.24 684.043 L1593.8 684.043 L1594.36 684.043 L1594.92 684.043 L1595.47 684.043 L1596.03 684.043 L1596.59 684.043 L1597.15 684.043 L1597.71 684.043 L1598.27 684.043 L1598.83 684.043 L1599.39 684.043 L1599.95 684.043 L1600.51 684.043 L1601.07 684.043 L1601.63 684.043 L1602.19 684.043 L1602.74 684.043 L1603.3 684.043 L1603.86 684.043 L1604.42 684.043 L1604.98 684.043 L1605.54 684.043 L1606.1 684.043 L1606.66 684.043 L1607.22 684.043 L1607.78 684.043 L1608.34 684.043 L1608.9 684.043 L1609.46 684.043 L1610.02 684.043 L1610.57 684.043 L1611.13 684.043 L1611.69 684.043 L1612.25 684.043 L1612.81 684.043 L1613.37 684.043 L1613.93 684.043 L1614.49 684.043 L1615.05 684.043 L1615.61 684.043 L1616.17 684.043 L1616.73 684.043 L1617.29 684.043 L1617.84 684.043 L1618.4 684.043 L1618.96 684.043 L1619.52 684.043 L1620.08 684.043 L1620.64 684.043 L1621.2 684.043 L1621.76 684.043 L1622.32 684.043 L1622.88 684.043 L1623.44 684.043 L1624 684.043 L1624.56 684.043 L1625.11 684.043 L1625.67 684.043 L1626.23 684.043 L1626.79 684.043 L1627.35 684.043 L1627.91 684.043 L1628.47 684.043 L1629.03 684.043 L1629.59 684.043 L1630.15 684.043 L1630.71 684.043 L1631.27 684.043 L1631.83 684.043 L1632.39 684.043 L1632.94 684.043 L1633.5 684.043 L1634.06 684.043 L1634.62 684.043 L1635.18 684.043 L1635.74 684.043 L1636.3 684.043 L1636.86 684.043 L1637.42 684.043 L1637.98 684.043 L1638.54 684.043 L1639.1 684.043 L1639.66 684.043 L1640.21 684.043 L1640.77 684.043 L1641.33 684.043 L1641.89 684.043 L1642.45 684.043 L1643.01 684.043 L1643.57 684.043 L1644.13 684.043 L1644.69 684.043 L1645.25 684.043 L1645.81 684.043 L1646.37 684.043 L1646.93 684.043 L1647.48 684.043 L1648.04 684.043 L1648.6 684.043 L1649.16 684.043 L1649.72 684.043 L1650.28 684.043 L1650.84 684.043 L1651.4 684.043 L1651.96 684.043 L1652.52 684.043 L1653.08 684.043 L1653.64 684.043 L1654.2 684.043 L1654.76 684.043 L1655.31 684.043 L1655.87 684.043 L1656.43 684.043 L1656.99 684.043 L1657.55 684.043 L1658.11 684.043 L1658.67 684.043 L1659.23 684.043 L1659.79 684.043 L1660.35 684.043 L1660.91 684.043 L1661.47 684.043 L1662.03 684.043 L1662.58 684.043 L1663.14 684.043 L1663.7 684.043 L1664.26 684.043 L1664.82 684.043 L1665.38 684.043 L1665.94 684.043 L1666.5 684.043 L1667.06 684.043 L1667.62 684.043 L1668.18 684.043 L1668.74 684.043 L1669.3 684.043 L1669.85 684.043 L1670.41 684.043 L1670.97 684.043 L1671.53 684.043 L1672.09 684.043 L1672.65 684.043 L1673.21 684.043 L1673.77 684.043 L1674.33 684.043 L1674.89 684.043 L1675.45 684.043 L1676.01 684.043 L1676.57 684.043 L1677.13 684.043 L1677.68 684.043 L1678.24 684.043 L1678.8 684.043 L1679.36 684.043 L1679.92 684.043 L1680.48 684.043 L1681.04 684.043 L1681.6 684.043 L1682.16 684.043 L1682.72 684.043 L1683.28 684.043 L1683.84 684.043 L1684.4 684.043 L1684.95 684.043 L1685.51 684.043 L1686.07 684.043 L1686.63 684.043 L1687.19 684.043 L1687.75 684.043 L1688.31 684.043 L1688.87 684.043 L1689.43 684.043 L1689.99 684.043 L1690.55 684.043 L1691.11 684.043 L1691.67 684.043 L1692.23 684.043 L1692.78 684.043 L1693.34 684.043 L1693.9 684.043 L1694.46 684.043 L1695.02 684.043 L1695.58 684.043 L1696.14 684.043 L1696.7 684.043 L1697.26 684.043 L1697.82 684.043 L1698.38 684.043 L1698.94 684.043 L1699.5 684.043 L1700.05 684.043 L1700.61 684.043 L1701.17 684.043 L1701.73 684.043 L1702.29 684.043 L1702.85 684.043 L1703.41 684.043 L1703.97 684.043 L1704.53 684.043 L1705.09 684.043 L1705.65 684.043 L1706.21 684.043 L1706.77 684.043 L1707.32 684.043 L1707.88 684.043 L1708.44 684.043 L1709 684.043 L1709.56 684.043 L1710.12 684.043 L1710.68 684.043 L1711.24 684.043 L1711.8 684.043 L1712.36 684.043 L1712.92 684.043 L1713.48 684.043 L1714.04 684.043 L1714.6 684.043 L1715.15 684.043 L1715.71 684.043 L1716.27 684.043 L1716.83 684.043 L1717.39 684.043 L1717.95 684.043 L1718.51 684.043 L1719.07 684.043 L1719.63 684.043 L1720.19 684.043 L1720.75 684.043 L1721.31 684.043 L1721.87 684.043 L1722.42 684.043 L1722.98 684.043 L1723.54 684.043 L1724.1 684.043 L1724.66 684.043 L1725.22 684.043 L1725.78 684.043 L1726.34 684.043 L1726.9 684.043 L1727.46 684.043 L1728.02 684.043 L1728.58 684.043 L1729.14 684.043 L1729.69 684.043 L1730.25 684.043 L1730.81 684.043 L1731.37 684.043 L1731.93 684.043 L1732.49 684.043 L1733.05 684.043 L1733.61 684.043 L1734.17 684.043 L1734.73 684.043 L1735.29 684.043 L1735.85 684.043 L1736.41 684.043 L1736.97 684.043 L1737.52 684.043 L1738.08 684.043 L1738.64 684.043 L1739.2 684.043 L1739.76 684.043 L1740.32 684.043 L1740.88 684.043 L1741.44 684.043 L1742 684.043 L1742.56 684.043 L1743.12 684.043 L1743.68 684.043 L1744.24 684.043 L1744.79 684.043 L1745.35 684.043 L1745.91 684.043 L1746.47 684.043 L1747.03 684.043 L1747.59 684.043 L1748.15 684.043 L1748.71 684.043 L1749.27 684.043 L1749.83 684.043 L1750.39 684.043 L1750.95 684.043 L1751.51 684.043 L1752.06 684.043 L1752.62 684.043 L1753.18 684.043 L1753.74 684.043 L1754.3 684.043 L1754.86 684.043 L1755.42 684.043 L1755.98 684.043 L1756.54 684.043 L1757.1 684.043 L1757.66 684.043 L1758.22 684.043 L1758.78 684.043 L1759.34 684.043 L1759.89 684.043 L1760.45 684.043 L1761.01 684.043 L1761.57 684.043 L1762.13 684.043 L1762.69 684.043 L1763.25 684.043 L1763.81 684.043 L1764.37 684.043 L1764.93 684.043 L1765.49 684.043 L1766.05 684.043 L1766.61 684.043 L1767.16 684.043 L1767.72 684.043 L1768.28 684.043 L1768.84 684.043 L1769.4 684.043 L1769.96 684.043 L1770.52 684.043 L1771.08 684.043 L1771.64 684.043 L1772.2 684.043 L1772.76 684.043 L1773.32 684.043 L1773.88 684.043 L1774.43 684.043 L1774.99 684.043 L1775.55 684.043 L1776.11 684.043 L1776.67 684.043 L1777.23 684.043 L1777.79 684.043 L1778.35 684.043 L1778.91 684.043 L1779.47 684.043 L1780.03 684.043 L1780.59 684.043 L1781.15 684.043 L1781.71 684.043 L1782.26 684.043 L1782.82 684.043 L1783.38 684.043 L1783.94 684.043 L1784.5 684.043 L1785.06 684.043 L1785.62 684.043 L1786.18 684.043 L1786.74 684.043 L1787.3 684.043 L1787.86 684.043 L1788.42 684.043 L1788.98 684.043 L1789.53 684.043 L1790.09 684.043 L1790.65 684.043 L1791.21 684.043 L1791.77 684.043 L1792.33 684.043 L1792.89 684.043 L1793.45 684.043 L1794.01 684.043 L1794.57 684.043 L1795.13 684.043 L1795.69 684.043 L1796.25 684.043 L1796.8 684.043 L1797.36 684.043 L1797.92 684.043 L1798.48 684.043 L1799.04 684.043 L1799.6 684.043 L1800.16 684.043 L1800.72 684.043 L1801.28 684.043 L1801.84 684.043 L1802.4 684.043 L1802.96 684.043 L1803.52 684.043 L1804.08 684.043 L1804.63 684.043 L1805.19 684.043 L1805.75 684.043 L1806.31 684.043 L1806.87 684.043 L1807.43 684.043 L1807.99 684.043 L1808.55 684.043 L1809.11 684.043 L1809.67 684.043 L1810.23 684.043 L1810.79 684.043 L1811.35 684.043 L1811.9 684.043 L1812.46 684.043 L1813.02 684.043 L1813.58 684.043 L1814.14 684.043 L1814.7 684.043 L1815.26 684.043 L1815.82 684.043 L1816.38 684.043 L1816.94 684.043 L1817.5 684.043 L1818.06 684.043 L1818.62 684.043 L1819.18 684.043 L1819.73 684.043 L1820.29 684.043 L1820.85 684.043 L1821.41 684.043 L1821.97 684.043 L1822.53 684.043 L1823.09 684.043 L1823.65 684.043 L1824.21 684.043 L1824.77 684.043 L1825.33 684.043 L1825.89 684.043 L1826.45 684.043 L1827 684.043 L1827.56 684.043 L1828.12 684.043 L1828.68 684.043 L1829.24 684.043 L1829.8 684.043 L1830.36 684.043 L1830.92 684.043 L1831.48 684.043 L1832.04 684.043 L1832.6 684.043 L1833.16 684.043 L1833.72 684.043 L1834.27 684.043 L1834.83 684.043 L1835.39 684.043 L1835.95 684.043 L1836.51 684.043 L1837.07 684.043 L1837.63 684.043 L1838.19 684.043 L1838.19 682.526 L1837.63 682.526 L1837.07 682.526 L1836.51 682.526 L1835.95 682.526 L1835.39 682.526 L1834.83 682.526 L1834.27 682.526 L1833.72 682.526 L1833.16 682.526 L1832.6 682.526 L1832.04 682.526 L1831.48 682.526 L1830.92 682.526 L1830.36 682.526 L1829.8 682.526 L1829.24 682.526 L1828.68 682.526 L1828.12 682.526 L1827.56 682.526 L1827 682.526 L1826.45 682.526 L1825.89 682.526 L1825.33 682.526 L1824.77 682.526 L1824.21 682.526 L1823.65 682.526 L1823.09 682.526 L1822.53 682.526 L1821.97 682.526 L1821.41 682.526 L1820.85 682.526 L1820.29 682.526 L1819.73 682.526 L1819.18 682.526 L1818.62 682.526 L1818.06 682.526 L1817.5 682.526 L1816.94 682.526 L1816.38 682.526 L1815.82 682.526 L1815.26 682.526 L1814.7 682.526 L1814.14 682.526 L1813.58 682.526 L1813.02 682.526 L1812.46 682.526 L1811.9 682.526 L1811.35 682.526 L1810.79 682.526 L1810.23 682.526 L1809.67 682.526 L1809.11 682.526 L1808.55 682.526 L1807.99 682.526 L1807.43 682.526 L1806.87 682.526 L1806.31 682.526 L1805.75 682.526 L1805.19 682.526 L1804.63 682.526 L1804.08 682.526 L1803.52 682.526 L1802.96 682.526 L1802.4 682.526 L1801.84 682.526 L1801.28 682.526 L1800.72 682.526 L1800.16 682.526 L1799.6 682.526 L1799.04 682.526 L1798.48 682.526 L1797.92 682.526 L1797.36 682.526 L1796.8 682.526 L1796.25 682.526 L1795.69 682.526 L1795.13 682.526 L1794.57 682.526 L1794.01 682.526 L1793.45 682.526 L1792.89 682.526 L1792.33 682.526 L1791.77 682.526 L1791.21 682.526 L1790.65 682.526 L1790.09 682.526 L1789.53 682.526 L1788.98 682.526 L1788.42 682.526 L1787.86 682.526 L1787.3 682.526 L1786.74 682.526 L1786.18 682.526 L1785.62 682.526 L1785.06 682.526 L1784.5 682.526 L1783.94 682.526 L1783.38 682.526 L1782.82 682.526 L1782.26 682.526 L1781.71 682.526 L1781.15 682.526 L1780.59 682.526 L1780.03 682.526 L1779.47 682.526 L1778.91 682.526 L1778.35 682.526 L1777.79 682.526 L1777.23 682.526 L1776.67 682.526 L1776.11 682.526 L1775.55 682.526 L1774.99 682.526 L1774.43 682.526 L1773.88 682.526 L1773.32 682.526 L1772.76 682.526 L1772.2 682.526 L1771.64 682.526 L1771.08 682.526 L1770.52 682.526 L1769.96 682.526 L1769.4 682.526 L1768.84 682.526 L1768.28 682.526 L1767.72 682.526 L1767.16 682.526 L1766.61 682.526 L1766.05 682.526 L1765.49 682.526 L1764.93 682.526 L1764.37 682.526 L1763.81 682.526 L1763.25 682.526 L1762.69 682.526 L1762.13 682.526 L1761.57 682.526 L1761.01 682.526 L1760.45 682.526 L1759.89 682.526 L1759.34 682.526 L1758.78 682.526 L1758.22 682.526 L1757.66 682.526 L1757.1 682.526 L1756.54 682.526 L1755.98 682.526 L1755.42 682.526 L1754.86 682.526 L1754.3 682.526 L1753.74 682.526 L1753.18 682.526 L1752.62 682.526 L1752.06 682.526 L1751.51 682.526 L1750.95 682.526 L1750.39 682.526 L1749.83 682.526 L1749.27 682.526 L1748.71 682.526 L1748.15 682.526 L1747.59 682.526 L1747.03 682.526 L1746.47 682.526 L1745.91 682.526 L1745.35 682.526 L1744.79 682.526 L1744.24 682.526 L1743.68 682.526 L1743.12 682.526 L1742.56 682.526 L1742 682.526 L1741.44 682.526 L1740.88 682.526 L1740.32 682.526 L1739.76 682.526 L1739.2 682.526 L1738.64 682.526 L1738.08 682.526 L1737.52 682.526 L1736.97 682.526 L1736.41 682.526 L1735.85 682.526 L1735.29 682.526 L1734.73 682.526 L1734.17 682.526 L1733.61 682.526 L1733.05 682.526 L1732.49 682.526 L1731.93 682.526 L1731.37 682.526 L1730.81 682.526 L1730.25 682.526 L1729.69 682.526 L1729.14 682.526 L1728.58 682.526 L1728.02 682.526 L1727.46 682.526 L1726.9 682.526 L1726.34 682.526 L1725.78 682.526 L1725.22 682.526 L1724.66 682.526 L1724.1 682.526 L1723.54 682.526 L1722.98 682.526 L1722.42 682.526 L1721.87 682.526 L1721.31 682.526 L1720.75 682.526 L1720.19 682.526 L1719.63 682.526 L1719.07 682.526 L1718.51 682.526 L1717.95 682.526 L1717.39 682.526 L1716.83 682.526 L1716.27 682.526 L1715.71 682.526 L1715.15 682.526 L1714.6 682.526 L1714.04 682.526 L1713.48 682.526 L1712.92 682.526 L1712.36 682.526 L1711.8 682.526 L1711.24 682.526 L1710.68 682.526 L1710.12 682.526 L1709.56 682.526 L1709 682.526 L1708.44 682.526 L1707.88 682.526 L1707.32 682.526 L1706.77 682.526 L1706.21 682.526 L1705.65 682.526 L1705.09 682.526 L1704.53 682.526 L1703.97 682.526 L1703.41 682.526 L1702.85 682.526 L1702.29 682.526 L1701.73 682.526 L1701.17 682.526 L1700.61 682.526 L1700.05 682.526 L1699.5 682.526 L1698.94 682.526 L1698.38 682.526 L1697.82 682.526 L1697.26 682.526 L1696.7 682.526 L1696.14 682.526 L1695.58 682.526 L1695.02 682.526 L1694.46 682.526 L1693.9 682.526 L1693.34 682.526 L1692.78 682.526 L1692.23 682.526 L1691.67 682.526 L1691.11 682.526 L1690.55 682.526 L1689.99 682.526 L1689.43 682.526 L1688.87 682.526 L1688.31 682.526 L1687.75 682.526 L1687.19 682.526 L1686.63 682.526 L1686.07 682.526 L1685.51 682.526 L1684.95 682.526 L1684.4 682.526 L1683.84 682.526 L1683.28 682.526 L1682.72 682.526 L1682.16 682.526 L1681.6 682.526 L1681.04 682.526 L1680.48 682.526 L1679.92 682.526 L1679.36 682.526 L1678.8 682.526 L1678.24 682.526 L1677.68 682.526 L1677.13 682.526 L1676.57 682.526 L1676.01 682.526 L1675.45 682.526 L1674.89 682.526 L1674.33 682.526 L1673.77 682.526 L1673.21 682.526 L1672.65 682.526 L1672.09 682.526 L1671.53 682.526 L1670.97 682.526 L1670.41 682.526 L1669.85 682.526 L1669.3 682.526 L1668.74 682.526 L1668.18 682.526 L1667.62 682.526 L1667.06 682.526 L1666.5 682.526 L1665.94 682.526 L1665.38 682.526 L1664.82 682.526 L1664.26 682.526 L1663.7 682.526 L1663.14 682.526 L1662.58 682.526 L1662.03 682.526 L1661.47 682.526 L1660.91 682.526 L1660.35 682.526 L1659.79 682.526 L1659.23 682.526 L1658.67 682.526 L1658.11 682.526 L1657.55 682.526 L1656.99 682.526 L1656.43 682.526 L1655.87 682.526 L1655.31 682.526 L1654.76 682.526 L1654.2 682.526 L1653.64 682.526 L1653.08 682.526 L1652.52 682.526 L1651.96 682.526 L1651.4 682.526 L1650.84 682.526 L1650.28 682.526 L1649.72 682.526 L1649.16 682.526 L1648.6 682.526 L1648.04 682.526 L1647.48 682.526 L1646.93 682.526 L1646.37 682.526 L1645.81 682.526 L1645.25 682.526 L1644.69 682.526 L1644.13 682.526 L1643.57 682.526 L1643.01 682.526 L1642.45 682.526 L1641.89 682.526 L1641.33 682.526 L1640.77 682.526 L1640.21 682.526 L1639.66 682.526 L1639.1 682.526 L1638.54 682.526 L1637.98 682.526 L1637.42 682.526 L1636.86 682.526 L1636.3 682.526 L1635.74 682.526 L1635.18 682.526 L1634.62 682.526 L1634.06 682.526 L1633.5 682.526 L1632.94 682.526 L1632.39 682.526 L1631.83 682.526 L1631.27 682.526 L1630.71 682.526 L1630.15 682.526 L1629.59 682.526 L1629.03 682.526 L1628.47 682.526 L1627.91 682.526 L1627.35 682.526 L1626.79 682.526 L1626.23 682.526 L1625.67 682.526 L1625.11 682.526 L1624.56 682.526 L1624 682.526 L1623.44 682.526 L1622.88 682.526 L1622.32 682.526 L1621.76 682.526 L1621.2 682.526 L1620.64 682.526 L1620.08 682.526 L1619.52 682.526 L1618.96 682.526 L1618.4 682.526 L1617.84 682.526 L1617.29 682.526 L1616.73 682.526 L1616.17 682.526 L1615.61 682.526 L1615.05 682.526 L1614.49 682.526 L1613.93 682.526 L1613.37 682.526 L1612.81 682.526 L1612.25 682.526 L1611.69 682.526 L1611.13 682.526 L1610.57 682.526 L1610.02 682.526 L1609.46 682.526 L1608.9 682.526 L1608.34 682.526 L1607.78 682.526 L1607.22 682.526 L1606.66 682.526 L1606.1 682.526 L1605.54 682.526 L1604.98 682.526 L1604.42 682.526 L1603.86 682.526 L1603.3 682.526 L1602.74 682.526 L1602.19 682.526 L1601.63 682.526 L1601.07 682.526 L1600.51 682.526 L1599.95 682.526 L1599.39 682.526 L1598.83 682.526 L1598.27 682.526 L1597.71 682.526 L1597.15 682.526 L1596.59 682.526 L1596.03 682.526 L1595.47 682.526 L1594.92 682.526 L1594.36 682.526 L1593.8 682.526 L1593.24 682.526 L1592.68 682.526 L1592.12 682.526 L1591.56 682.526 L1591 682.526 L1590.44 682.526 L1589.88 682.526 L1589.32 682.526 L1588.76 682.526 L1588.2 682.526 L1587.65 682.526 L1587.09 682.526 L1586.53 682.526 L1585.97 682.526 L1585.41 682.526 L1584.85 682.526 L1584.29 682.526 L1583.73 682.526 L1583.17 682.526 L1582.61 682.526 L1582.05 682.526 L1581.49 682.526 L1580.93 682.526 L1580.37 682.526 L1579.82 682.526 L1579.26 682.526 L1578.7 682.526 L1578.14 682.526 L1577.58 682.526 L1577.02 682.526 L1576.46 682.526 L1575.9 682.526 L1575.34 682.526 L1574.78 682.526 L1574.22 682.526 L1573.66 682.526 L1573.1 682.526 L1572.55 682.526 L1571.99 682.526 L1571.43 682.526 L1570.87 682.526 L1570.31 682.526 L1569.75 682.526 L1569.19 682.526 L1568.63 682.526 L1568.07 682.526 L1567.51 682.526 L1566.95 682.526 L1566.39 682.526 L1565.83 682.526 L1565.28 682.526 L1564.72 682.526 L1564.16 682.526 L1563.6 682.526 L1563.04 682.526 L1562.48 682.526 L1561.92 682.526 L1561.36 682.526 L1560.8 682.526 L1560.24 682.526 L1559.68 682.526 L1559.12 682.526 L1558.56 682.526 L1558 682.526 L1557.45 682.526 L1556.89 682.526 L1556.33 682.526 L1555.77 682.526 L1555.21 682.526 L1554.65 682.526 L1554.09 682.526 L1553.53 682.526 L1552.97 682.526 L1552.41 682.526 L1551.85 682.526 L1551.29 682.526 L1550.73 682.526 L1550.18 682.526 L1549.62 682.526 L1549.06 682.526 L1548.5 682.526 L1547.94 682.526 L1547.38 682.526 L1546.82 682.526 L1546.26 682.526 L1545.7 682.526 L1545.14 682.526 L1544.58 682.526 L1544.02 682.526 L1543.46 682.526 L1542.9 682.526 L1542.35 682.526 L1541.79 682.526 L1541.23 682.526 L1540.67 682.526 L1540.11 682.526 L1539.55 682.526 L1538.99 682.526 L1538.43 682.526 L1537.87 682.526 L1537.31 682.526 L1536.75 682.526 L1536.19 682.526 L1535.63 682.526 L1535.08 682.526 L1534.52 682.526 L1533.96 682.526 L1533.4 682.526 L1532.84 682.526 L1532.28 682.526 L1531.72 682.526 L1531.16 682.526 L1530.6 682.526 L1530.04 682.526 L1529.48 682.526 L1528.92 682.526 L1528.36 682.526 L1527.81 682.526 L1527.25 682.526 L1526.69 682.526 L1526.13 682.526 L1525.57 682.526 L1525.01 682.526 L1524.45 682.526 L1523.89 682.526 L1523.33 682.526 L1522.77 682.526 L1522.21 682.526 L1521.65 682.526 L1521.09 682.526 L1520.53 682.526 L1519.98 682.526 L1519.42 682.526 L1518.86 682.526 L1518.3 682.526 L1517.74 682.526 L1517.18 682.526 L1516.62 682.526 L1516.06 682.526 L1515.5 682.526 L1514.94 682.526 L1514.38 682.526 L1513.82 682.526 L1513.26 682.526 L1512.71 682.526 L1512.15 682.526 L1511.59 682.526 L1511.03 682.526 L1510.47 682.526 L1509.91 682.526 L1509.35 682.526 L1508.79 682.526 L1508.23 682.526 L1507.67 682.526 L1507.11 682.526 L1506.55 682.526 L1505.99 682.526 L1505.44 682.526 L1504.88 682.526 L1504.32 682.526 L1503.76 682.526 L1503.2 682.526 L1502.64 682.526 L1502.08 682.526 L1501.52 682.526 L1500.96 682.526 L1500.4 682.526 L1499.84 682.526 L1499.28 682.526 L1498.72 682.526 L1498.16 682.526 L1497.61 682.526 L1497.05 682.526 L1496.49 682.526 L1495.93 682.526 L1495.37 682.526 L1494.81 682.526 L1494.25 682.526 L1493.69 682.526 L1493.13 682.526 L1492.57 682.526 L1492.01 682.526 L1491.45 682.526 L1490.89 682.526 L1490.34 682.526 L1489.78 682.526 L1489.22 682.526 L1488.66 682.526 L1488.1 682.526 L1487.54 682.526 L1486.98 682.526 L1486.42 682.526 L1485.86 682.526 L1485.3 682.526 L1484.74 682.526 L1484.18 682.526 L1483.62 682.526 L1483.07 682.526 L1482.51 682.526 L1481.95 682.526 L1481.39 682.526 L1480.83 682.526 L1480.27 682.526 L1479.71 682.526 L1479.15 682.526 L1478.59 682.526 L1478.03 682.526 L1477.47 682.526 L1476.91 682.526 L1476.35 682.526 L1475.79 682.526 L1475.24 682.526 L1474.68 682.526 L1474.12 682.526 L1473.56 682.526 L1473 682.526 L1472.44 682.526 L1471.88 682.526 L1471.32 682.526 L1470.76 682.526 L1470.2 682.526 L1469.64 682.526 L1469.08 682.526 L1468.52 682.526 L1467.97 682.526 L1467.41 682.526 L1466.85 682.526 L1466.29 682.526 L1465.73 682.526 L1465.17 682.526 L1464.61 682.526 L1464.05 682.526 L1463.49 682.526 L1462.93 682.526 L1462.37 682.526 L1461.81 682.526 L1461.25 682.526 L1460.7 682.526 L1460.14 682.526 L1459.58 682.526 L1459.02 682.526 L1458.46 682.526 L1457.9 682.526 L1457.34 682.526 L1456.78 682.526 L1456.22 682.526 L1455.66 682.526 L1455.1 682.526 L1454.54 682.526 L1453.98 682.526 L1453.42 682.526 L1452.87 682.526 L1452.31 682.526 L1451.75 682.526 L1451.19 682.526 L1450.63 682.526 L1450.07 682.526 L1449.51 682.526 L1448.95 682.526 L1448.39 682.526 L1447.83 682.526 L1447.27 682.526 L1446.71 682.526 L1446.15 682.526 L1445.6 682.526 L1445.04 682.526 L1444.48 682.526 L1443.92 682.526 L1443.36 682.526 L1442.8 682.526 L1442.24 682.526 L1441.68 682.526 L1441.12 682.526 L1440.56 682.526 L1440 682.526 L1439.44 682.526 L1438.88 682.526 L1438.33 682.526 L1437.77 682.526 L1437.21 682.526 L1436.65 682.526 L1436.09 682.526 L1435.53 682.526 L1434.97 682.526 L1434.41 682.526 L1433.85 682.526 L1433.29 682.526 L1432.73 682.526 L1432.17 682.526 L1431.61 682.526 L1431.05 682.526 L1430.5 682.526 L1429.94 682.526 L1429.38 682.526 L1428.82 682.526 L1428.26 682.526 L1427.7 682.526 L1427.14 682.526 L1426.58 682.526 L1426.02 682.526 L1425.46 682.526 L1424.9 682.526 L1424.34 682.526 L1423.78 682.526 L1423.23 682.526 L1422.67 682.526 L1422.11 682.526 L1421.55 682.526 L1420.99 682.526 L1420.43 682.526 L1419.87 682.526 L1419.31 682.526 L1418.75 682.526 L1418.19 682.526 L1417.63 682.526 L1417.07 682.526 L1416.51 682.526 L1415.95 682.526 L1415.4 682.526 L1414.84 682.526 L1414.28 682.526 L1413.72 682.526 L1413.16 682.526 L1412.6 682.526 L1412.04 682.526 L1411.48 682.526 L1410.92 682.526 L1410.36 682.526 L1409.8 682.526 L1409.24 682.526 L1408.68 682.526 L1408.13 682.526 L1407.57 682.526 L1407.01 682.526 L1406.45 682.526 L1405.89 682.526 L1405.33 682.526 L1404.77 682.526 L1404.21 682.526 L1403.65 682.526 L1403.09 682.526 L1402.53 682.526 L1401.97 682.526 L1401.41 682.526 L1400.86 682.526 L1400.3 682.526 L1399.74 682.526 L1399.18 682.526 L1398.62 682.526 L1398.06 682.526 L1397.5 682.526 L1396.94 682.526 L1396.38 682.526 L1395.82 682.526 L1395.26 682.526 L1394.7 682.526 L1394.14 682.526 L1393.58 682.526 L1393.03 682.526 L1392.47 682.526 L1391.91 682.526 L1391.35 682.526 L1390.79 682.526 L1390.23 682.526 L1389.67 682.526 L1389.11 682.526 L1388.55 682.526 L1387.99 682.526 L1387.43 682.526 L1386.87 682.526 L1386.31 682.526 L1385.76 682.526 L1385.2 682.526 L1384.64 682.526 L1384.08 682.526 L1383.52 682.526 L1382.96 682.526 L1382.4 682.526 L1381.84 682.526 L1381.28 682.526 L1380.72 682.526 L1380.16 682.526 L1379.6 682.526 L1379.04 682.526 L1378.49 682.526 L1377.93 682.526 L1377.37 682.526 L1376.81 682.526 L1376.25 682.526 L1375.69 682.526 L1375.13 682.526 L1374.57 682.526 L1374.01 682.526 L1373.45 682.526 L1372.89 682.526 L1372.33 682.526 L1371.77 682.526 L1371.21 682.526 L1370.66 682.526 L1370.1 682.526 L1369.54 682.526 L1368.98 682.526 L1368.42 682.526 L1367.86 682.526 L1367.3 682.526 L1366.74 682.526 L1366.18 682.526 L1365.62 682.526 L1365.06 682.526 L1364.5 682.526 L1363.94 682.526 L1363.39 682.526 L1362.83 682.526 L1362.27 682.526 L1361.71 682.526 L1361.15 682.526 L1360.59 682.526 L1360.03 682.526 L1359.47 682.526 L1358.91 682.526 L1358.35 682.526 L1357.79 682.526 L1357.23 682.526 L1356.67 682.526 L1356.12 682.526 L1355.56 682.526 L1355 682.526 L1354.44 682.526 L1353.88 682.526 L1353.32 682.526 L1352.76 682.526 L1352.2 682.526 L1351.64 682.526 L1351.08 682.526 L1350.52 682.526 L1349.96 682.526 L1349.4 682.526 L1348.84 682.526 L1348.29 682.526 L1347.73 682.526 L1347.17 682.526 L1346.61 682.526 L1346.05 682.526 L1345.49 682.526 L1344.93 682.526 L1344.37 682.526 L1343.81 682.526 L1343.25 682.526 L1342.69 682.526 L1342.13 682.526 L1341.57 682.526 L1341.02 682.526 L1340.46 682.526 L1339.9 682.526 L1339.34 682.526 L1338.78 682.526 L1338.22 682.526 L1337.66 682.526 L1337.1 682.526 L1336.54 682.526 L1335.98 682.526 L1335.42 682.526 L1334.86 682.526 L1334.3 682.526 L1333.75 682.526 L1333.19 682.526 L1332.63 682.526 L1332.07 682.526 L1331.51 682.526 L1330.95 682.526 L1330.39 682.526 L1329.83 682.526 L1329.27 682.526 L1328.71 682.526 L1328.15 682.526 L1327.59 682.526 L1327.03 682.526 L1326.47 682.526 L1325.92 682.526 L1325.36 682.526 L1324.8 682.526 L1324.24 682.526 L1323.68 682.526 L1323.12 682.526 L1322.56 682.526 L1322 682.526 L1321.44 682.526 L1320.88 682.526 L1320.32 682.526 L1319.76 682.526 L1319.2 682.526 L1318.65 682.526 L1318.09 682.526 L1317.53 682.526 L1316.97 682.526 L1316.41 682.526 L1315.85 682.526 L1315.29 682.526 L1314.73 682.526 L1314.17 682.526 L1313.61 682.526 L1313.05 682.526 L1312.49 682.526 L1311.93 682.526 L1311.38 682.526 L1310.82 682.526 L1310.26 682.526 L1309.7 682.526 L1309.14 682.526 L1308.58 682.526 L1308.02 682.526 L1307.46 682.526 L1306.9 682.526 L1306.34 682.526 L1305.78 682.526 L1305.22 682.526 L1304.66 682.526 L1304.1 682.526 L1303.55 682.526 L1302.99 682.526 L1302.43 682.526 L1301.87 682.526 L1301.31 682.526 L1300.75 682.526 L1300.19 682.526 L1299.63 682.526 L1299.07 682.526 L1298.51 682.526 L1297.95 682.526 L1297.39 682.526 L1296.83 682.526 L1296.28 682.526 L1295.72 682.526 L1295.16 682.526 L1294.6 682.526 L1294.04 682.526 L1293.48 682.526 L1292.92 682.526 L1292.36 682.526 L1291.8 682.526 L1291.24 682.526 L1290.68 682.526 L1290.12 682.526 L1289.56 682.526 L1289 682.526 L1288.45 682.526 L1287.89 682.526 L1287.33 682.526 L1286.77 682.526 L1286.21 682.526 L1285.65 682.526 L1285.09 682.526 L1284.53 682.526 L1283.97 682.526 L1283.41 682.526 L1282.85 682.526 L1282.29 682.526 L1281.73 682.526 L1281.18 682.526 L1280.62 682.526 L1280.06 682.526 L1279.5 682.526 L1278.94 682.526 L1278.38 682.526 L1277.82 682.526 L1277.26 682.526 L1276.7 682.526 L1276.14 682.526 L1275.58 682.526 L1275.02 682.526 L1274.46 682.526 L1273.91 682.526 L1273.35 682.526 L1272.79 682.526 L1272.23 682.526 L1271.67 682.526 L1271.11 682.526 L1270.55 682.526 L1269.99 682.526 L1269.43 682.526 L1268.87 682.526 L1268.31 682.526 L1267.75 682.526 L1267.19 682.526 L1266.63 682.526 L1266.08 682.526 L1265.52 682.526 L1264.96 682.526 L1264.4 682.526 L1263.84 682.526 L1263.28 682.526 L1262.72 682.526 L1262.16 682.526 L1261.6 682.526 L1261.04 682.526 L1260.48 682.526 L1259.92 682.526 L1259.36 682.526 L1258.81 682.526 L1258.25 682.526 L1257.69 682.526 L1257.13 682.526 L1256.57 682.526 L1256.01 682.526 L1255.45 682.526 L1254.89 682.526 L1254.33 682.526 L1253.77 682.526 L1253.21 682.526 L1252.65 682.526 L1252.09 682.526 L1251.54 682.526 L1250.98 682.526 L1250.42 682.526 L1249.86 682.526 L1249.3 682.526 L1248.74 682.526 L1248.18 682.526 L1247.62 682.526 L1247.06 682.526 L1246.5 682.526 L1245.94 682.526 L1245.38 682.526 L1244.82 682.526 L1244.26 682.526 L1243.71 682.526 L1243.15 682.526 L1242.59 682.526 L1242.03 682.526 L1241.47 682.526 L1240.91 682.526 L1240.35 682.526 L1239.79 682.526 L1239.23 682.526 L1238.67 682.526 L1238.11 682.526 L1237.55 682.526 L1236.99 682.526 L1236.44 682.526 L1235.88 682.526 L1235.32 682.526 L1234.76 682.526 L1234.2 682.526 L1233.64 682.526 L1233.08 682.526 L1232.52 682.526 L1231.96 682.526 L1231.4 682.526 L1230.84 682.526 L1230.28 682.526 L1229.72 682.526 L1229.17 682.526 L1228.61 682.526 L1228.05 682.526 L1227.49 682.526 L1226.93 682.526 L1226.37 682.526 L1225.81 682.526 L1225.25 682.526 L1224.69 682.526 L1224.13 682.526 L1223.57 682.526 L1223.01 682.526 L1222.45 682.526 L1221.89 682.526 L1221.34 682.526 L1220.78 682.526 L1220.22 682.526 L1219.66 682.526 L1219.1 682.526 L1218.54 682.526 L1217.98 682.526 L1217.42 682.526 L1216.86 682.526 L1216.3 682.526 L1215.74 682.526 L1215.18 682.526 L1214.62 682.526 L1214.07 682.526 L1213.51 682.526 L1212.95 682.526 L1212.39 682.526 L1211.83 682.526 L1211.27 682.526 L1210.71 682.526 L1210.15 682.526 L1209.59 682.526 L1209.03 682.526 L1208.47 682.526 L1207.91 682.526 L1207.35 682.526 L1206.8 682.526 L1206.24 682.526 L1205.68 682.526 L1205.12 682.526 L1204.56 682.526 L1204 682.526 L1203.44 682.526 L1202.88 682.526 L1202.32 682.526 L1201.76 682.526 L1201.2 682.526 L1200.64 682.526 L1200.08 682.526 L1199.52 682.526 L1198.97 682.526 L1198.41 682.526 L1197.85 682.526 L1197.29 682.526 L1196.73 682.526 L1196.17 682.526 L1195.61 682.526 L1195.05 682.526 L1194.49 682.526 L1193.93 682.526 L1193.37 682.526 L1192.81 682.526 L1192.25 682.526 L1191.7 682.526 L1191.14 682.526 L1190.58 682.526 L1190.02 682.526 L1189.46 682.526 L1188.9 682.526 L1188.34 682.526 L1187.78 682.526 L1187.22 682.526 L1186.66 682.526 L1186.1 682.526 L1185.54 682.526 L1184.98 682.526 L1184.43 682.526 L1183.87 682.526 L1183.31 682.526 L1182.75 682.526 L1182.19 682.526 L1181.63 682.526 L1181.07 682.526 L1180.51 682.526 L1179.95 682.526 L1179.39 682.526 L1178.83 682.526 L1178.27 682.526 L1177.71 682.526 L1177.15 682.526 L1176.6 682.526 L1176.04 682.526 L1175.48 682.526 L1174.92 682.526 L1174.36 682.526 L1173.8 682.526 L1173.24 682.526 L1172.68 682.526 L1172.12 682.526 L1171.56 682.526 L1171 682.526 L1170.44 682.526 L1169.88 682.526 L1169.33 682.526 L1168.77 682.526 L1168.21 682.526 L1167.65 682.526 L1167.09 682.526 L1166.53 682.526 L1165.97 682.526 L1165.41 682.526 L1164.85 682.526 L1164.29 682.526 L1163.73 682.526 L1163.17 682.526 L1162.61 682.526 L1162.05 682.526 L1161.5 682.526 L1160.94 682.526 L1160.38 682.526 L1159.82 682.526 L1159.26 682.526 L1158.7 682.526 L1158.14 682.526 L1157.58 682.526 L1157.02 682.526 L1156.46 682.526 L1155.9 682.526 L1155.34 682.526 L1154.78 682.526 L1154.23 682.526 L1153.67 682.526 L1153.11 682.526 L1152.55 682.526 L1151.99 682.526 L1151.43 682.526 L1150.87 682.526 L1150.31 682.526 L1149.75 682.526 L1149.19 682.526 L1148.63 682.526 L1148.07 682.526 L1147.51 682.526 L1146.96 682.526 L1146.4 682.526 L1145.84 682.526 L1145.28 682.526 L1144.72 682.526 L1144.16 682.526 L1143.6 682.526 L1143.04 682.526 L1142.48 682.526 L1141.92 682.526 L1141.36 682.526 L1140.8 682.526 L1140.24 682.526 L1139.68 682.526 L1139.13 682.526 L1138.57 682.526 L1138.01 682.526 L1137.45 682.526 L1136.89 682.526 L1136.33 682.526 L1135.77 682.526 L1135.21 682.526 L1134.65 682.526 L1134.09 682.526 L1133.53 682.526 L1132.97 682.526 L1132.41 682.526 L1131.86 682.526 L1131.3 682.526 L1130.74 682.526 L1130.18 682.526 L1129.62 682.526 L1129.06 682.526 L1128.5 682.526 L1127.94 682.526 L1127.38 682.526 L1126.82 682.526 L1126.26 682.526 L1125.7 682.526 L1125.14 682.526 L1124.59 682.526 L1124.03 682.526 L1123.47 682.526 L1122.91 682.526 L1122.35 682.526 L1121.79 682.526 L1121.23 682.526 L1120.67 682.526 L1120.11 682.526 L1119.55 682.526 L1118.99 682.526 L1118.43 682.526 L1117.87 682.526 L1117.31 682.526 L1116.76 682.526 L1116.2 682.526 L1115.64 682.526 L1115.08 682.526 L1114.52 682.526 L1113.96 682.526 L1113.4 682.526 L1112.84 682.526 L1112.28 682.526 L1111.72 682.526 L1111.16 682.526 L1110.6 682.526 L1110.04 682.526 L1109.49 682.526 L1108.93 682.526 L1108.37 682.526 L1107.81 682.526 L1107.25 682.526 L1106.69 682.526 L1106.13 682.526 L1105.57 682.526 L1105.01 682.526 L1104.45 682.526 L1103.89 682.526 L1103.33 682.526 L1102.77 682.526 L1102.22 682.526 L1101.66 682.526 L1101.1 682.526 L1100.54 682.526 L1099.98 682.526 L1099.42 682.526 L1098.86 682.526 L1098.3 682.526 L1097.74 682.526 L1097.18 682.526 L1096.62 682.526 L1096.06 682.526 L1095.5 682.526 L1094.94 682.526 L1094.39 682.526 L1093.83 682.526 L1093.27 682.526 L1092.71 682.526 L1092.15 682.526 L1091.59 682.526 L1091.03 682.526 L1090.47 682.526 L1089.91 682.526 L1089.35 682.526 L1088.79 682.526 L1088.23 682.526 L1087.67 682.526 L1087.12 682.526 L1086.56 682.526 L1086 682.526 L1085.44 682.526 L1084.88 682.526 L1084.32 682.526 L1083.76 682.526 L1083.2 682.526 L1082.64 682.526 L1082.08 682.526 L1081.52 682.526 L1080.96 682.526 L1080.4 682.526 L1079.85 682.526 L1079.29 682.526 L1078.73 682.526 L1078.17 682.526 L1077.61 682.526 L1077.05 682.526 L1076.49 682.526 L1075.93 682.526 L1075.37 682.526 L1074.81 682.526 L1074.25 682.526 L1073.69 682.526 L1073.13 682.526 L1072.57 682.526 L1072.02 682.526 L1071.46 682.526 L1070.9 682.526 L1070.34 682.526 L1069.78 682.526 L1069.22 682.526 L1068.66 682.526 L1068.1 682.526 L1067.54 682.526 L1066.98 682.526 L1066.42 682.526 L1065.86 682.526 L1065.3 682.526 L1064.75 682.526 L1064.19 682.526 L1063.63 682.526 L1063.07 682.526 L1062.51 682.526 L1061.95 682.526 L1061.39 682.526 L1060.83 682.526 L1060.27 682.526 L1059.71 682.526 L1059.15 682.526 L1058.59 682.526 L1058.03 682.526 L1057.48 682.526 L1056.92 682.526 L1056.36 682.526 L1055.8 682.526 L1055.24 682.526 L1054.68 682.526 L1054.12 682.526 L1053.56 682.526 L1053 682.526 L1052.44 682.526 L1051.88 682.526 L1051.32 682.526 L1050.76 682.526 L1050.2 682.526 L1049.65 682.526 L1049.09 682.526 L1048.53 682.526 L1047.97 682.526 L1047.41 682.526 L1046.85 682.526 L1046.29 682.526 L1045.73 682.526 L1045.17 682.526 L1044.61 682.526 L1044.05 682.526 L1043.49 682.526 L1042.93 682.526 L1042.38 682.526 L1041.82 682.526 L1041.26 682.526 L1040.7 682.526 L1040.14 682.526 L1039.58 682.526 L1039.02 682.526 L1038.46 682.526 L1037.9 682.526 L1037.34 682.526 L1036.78 682.526 L1036.22 682.526 L1035.66 682.526 L1035.1 682.526 L1034.55 682.526 L1033.99 682.526 L1033.43 682.526 L1032.87 682.526 L1032.31 682.526 L1031.75 682.526 L1031.19 682.526 L1030.63 682.526 L1030.07 682.526 L1029.51 682.526 L1028.95 682.526 L1028.39 682.526 L1027.83 682.526 L1027.28 682.526 L1026.72 682.526 L1026.16 682.526 L1025.6 682.526 L1025.04 682.526 L1024.48 682.526 L1023.92 682.526 L1023.36 682.526 L1022.8 682.526 L1022.24 682.526 L1021.68 682.526 L1021.12 682.526 L1020.56 682.526 L1020.01 682.526 L1019.45 682.526 L1018.89 682.526 L1018.33 682.526 L1017.77 682.526 L1017.21 682.526 L1016.65 682.526 L1016.09 682.526 L1015.53 682.526 L1014.97 682.526 L1014.41 682.526 L1013.85 682.526 L1013.29 682.526 L1012.73 682.526 L1012.18 682.526 L1011.62 682.526 L1011.06 682.526 L1010.5 682.526 L1009.94 682.526 L1009.38 682.526 L1008.82 682.526 L1008.26 682.526 L1007.7 682.526 L1007.14 682.526 L1006.58 682.526 L1006.02 682.526 L1005.46 682.526 L1004.91 682.526 L1004.35 682.526 L1003.79 682.526 L1003.23 682.526 L1002.67 682.526 L1002.11 682.526 L1001.55 682.526 L1000.99 682.526 L1000.43 682.526 L999.872 682.526 L999.313 682.526 L998.754 682.526 L998.194 682.526 L997.635 682.526 L997.076 682.526 L996.517 682.526 L995.957 682.526 L995.398 682.526 L994.839 682.526 L994.28 682.526 L993.72 682.526 L993.161 682.526 L992.602 682.526 L992.043 682.526 L991.483 682.526 L990.924 682.526 L990.365 682.526 L989.806 682.526 L989.246 682.526 L988.687 682.526 L988.128 682.526 L987.569 682.526 L987.009 682.526 L986.45 682.526 L985.891 682.526 L985.332 682.526 L984.772 682.526 L984.213 682.526 L983.654 682.526 L983.095 682.526 L982.535 682.526 L981.976 682.526 L981.417 682.526 L980.858 682.526 L980.298 682.526 L979.739 682.526 L979.18 682.526 L978.621 682.526 L978.061 682.526 L977.502 682.526 L976.943 682.526 L976.384 682.526 L975.824 682.526 L975.265 682.526 L974.706 682.526 L974.147 682.526 L973.587 682.526 L973.028 682.526 L972.469 682.526 L971.91 682.526 L971.35 682.526 L970.791 682.526 L970.232 682.526 L969.673 682.526 L969.113 682.526 L968.554 682.526 L967.995 682.526 L967.436 682.526 L966.876 682.526 L966.317 682.526 L965.758 682.526 L965.199 682.526 L964.639 682.526 L964.08 682.526 L963.521 682.526 L962.962 682.526 L962.402 682.526 L961.843 682.526 L961.284 682.526 L960.725 682.526 L960.165 682.526 L959.606 682.526 L959.047 682.526 L958.488 682.526 L957.928 682.526 L957.369 682.526 L956.81 682.526 L956.251 682.526 L955.691 682.526 L955.132 682.526 L954.573 682.526 L954.014 682.526 L953.454 682.526 L952.895 682.526 L952.336 682.526 L951.777 682.526 L951.217 682.526 L950.658 682.526 L950.099 682.526 L949.54 682.526 L948.98 682.526 L948.421 682.526 L947.862 682.526 L947.303 682.526 L946.743 682.526 L946.184 682.526 L945.625 682.526 L945.066 682.526 L944.506 682.526 L943.947 682.526 L943.388 682.526 L942.829 682.526 L942.269 682.526 L941.71 682.526 L941.151 682.526 L940.592 682.526 L940.032 682.526 L939.473 682.526 L938.914 682.526 L938.355 682.526 L937.795 682.526 L937.236 682.526 L936.677 682.526 L936.118 682.526 L935.558 682.526 L934.999 682.526 L934.44 682.526 L933.881 682.526 L933.321 682.526 L932.762 682.526 L932.203 682.526 L931.644 682.526 L931.084 682.526 L930.525 682.526 L929.966 682.526 L929.406 682.526 L928.847 682.526 L928.288 682.526 L927.729 682.526 L927.169 682.526 L926.61 682.526 L926.051 682.526 L925.492 682.526 L924.932 682.526 L924.373 682.526 L923.814 682.526 L923.255 682.526 L922.695 682.526 L922.136 682.526 L921.577 682.526 L921.018 682.526 L920.458 682.526 L919.899 682.526 L919.34 682.526 L918.781 682.526 L918.221 682.526 L917.662 682.526 L917.103 682.526 L916.544 682.526 L915.984 682.526 L915.425 682.526 L914.866 682.526 L914.307 682.526 L913.747 682.526 L913.188 682.526 L912.629 682.526 L912.07 682.526 L911.51 682.526 L910.951 682.526 L910.392 682.526 L909.833 682.526 L909.273 682.526 L908.714 682.526 L908.155 682.526 L907.596 682.526 L907.036 682.526 L906.477 682.526 L905.918 682.526 L905.359 682.526 L904.799 682.526 L904.24 682.526 L903.681 682.526 L903.122 682.526 L902.562 682.526 L902.003 682.526 L901.444 682.526 L900.885 682.526 L900.325 682.526 L899.766 682.526 L899.207 682.526 L898.648 682.526 L898.088 682.526 L897.529 682.526 L896.97 682.526 L896.411 682.526 L895.851 682.526 L895.292 682.526 L894.733 682.526 L894.174 682.526 L893.614 682.526 L893.055 682.526 L892.496 682.526 L891.937 682.526 L891.377 682.526 L890.818 682.526 L890.259 682.526 L889.7 682.526 L889.14 682.526 L888.581 682.526 L888.022 682.526 L887.463 682.526 L886.903 682.526 L886.344 682.526 L885.785 682.526 L885.226 682.526 L884.666 682.526 L884.107 682.526 L883.548 682.526 L882.989 682.526 L882.429 682.526 L881.87 682.526 L881.311 682.526 L880.752 682.526 L880.192 682.526 L879.633 682.526 L879.074 682.526 L878.515 682.526 L877.955 682.526 L877.396 682.526 L876.837 682.526 L876.278 682.526 L875.718 682.526 L875.159 682.526 L874.6 682.526 L874.041 682.526 L873.481 682.526 L872.922 682.526 L872.363 682.526 L871.804 682.526 L871.244 682.526 L870.685 682.526 L870.126 682.526 L869.567 682.526 L869.007 682.526 L868.448 682.526 L867.889 682.526 L867.33 682.526 L866.77 682.526 L866.211 682.526 L865.652 682.526 L865.093 682.526 L864.533 682.526 L863.974 682.526 L863.415 682.526 L862.856 682.526 L862.296 682.526 L861.737 682.526 L861.178 682.526 L860.619 682.526 L860.059 682.526 L859.5 682.526 L858.941 682.526 L858.382 682.526 L857.822 682.526 L857.263 682.526 L856.704 682.526 L856.145 682.526 L855.585 682.526 L855.026 682.526 L854.467 682.526 L853.908 682.526 L853.348 682.526 L852.789 682.526 L852.23 682.526 L851.671 682.526 L851.111 682.526 L850.552 682.526 L849.993 682.526 L849.434 682.526 L848.874 682.526 L848.315 682.526 L847.756 682.526 L847.197 682.526 L846.637 682.526 L846.078 682.526 L845.519 682.526 L844.96 682.526 L844.4 682.526 L843.841 682.526 L843.282 682.526 L842.723 682.526 L842.163 682.526 L841.604 682.526 L841.045 682.526 L840.486 682.526 L839.926 682.526 L839.367 682.526 L838.808 682.526 L838.249 682.526 L837.689 682.526 L837.13 682.526 L836.571 682.526 L836.012 682.526 L835.452 682.526 L834.893 682.526 L834.334 682.526 L833.775 682.526 L833.215 682.526 L832.656 682.526 L832.097 682.526 L831.538 682.526 L830.978 682.526 L830.419 682.526 L829.86 682.526 L829.301 682.526 L828.741 682.526 L828.182 682.526 L827.623 682.526 L827.064 682.526 L826.504 682.526 L825.945 682.526 L825.386 682.526 L824.827 682.526 L824.267 682.526 L823.708 682.526 L823.149 682.526 L822.59 682.526 L822.03 682.526 L821.471 682.526 L820.912 682.526 L820.353 682.526 L819.793 682.526 L819.234 682.526 L818.675 682.526 L818.116 682.526 L817.556 682.526 L816.997 682.526 L816.438 682.526 L815.879 682.526 L815.319 682.526 L814.76 682.526 L814.201 682.526 L813.642 682.526 L813.082 682.526 L812.523 682.526 L811.964 682.526 L811.405 682.526 L810.845 682.526 L810.286 682.526 L809.727 682.526 L809.168 682.526 L808.608 682.526 L808.049 682.526 L807.49 682.526 L806.931 682.526 L806.371 682.526 L805.812 682.526 L805.253 682.526 L804.693 682.526 L804.134 682.526 L803.575 682.526 L803.016 682.526 L802.456 682.526 L801.897 682.526 L801.338 682.526 L800.779 682.526 L800.219 682.526 L799.66 682.526 L799.101 682.526 L798.542 682.526 L797.982 682.526 L797.423 682.526 L796.864 682.526 L796.305 682.526 L795.745 682.526 L795.186 682.526 L794.627 682.526 L794.068 682.526 L793.508 682.526 L792.949 682.526 L792.39 682.526 L791.831 682.526 L791.271 682.526 L790.712 682.526 L790.153 682.526 L789.594 682.526 L789.034 682.526 L788.475 682.526 L787.916 682.526 L787.357 682.526 L786.797 682.526 L786.238 682.526 L785.679 682.526 L785.12 682.526 L784.56 682.526 L784.001 682.526 L783.442 682.526 L782.883 682.526 L782.323 682.526 L781.764 682.526 L781.205 682.526 L780.646 682.526 L780.086 682.526 L779.527 682.526 L778.968 682.526 L778.409 682.526 L777.849 682.526 L777.29 682.526 L776.731 682.526 L776.172 682.526 L775.612 682.526 L775.053 682.526 L774.494 682.526 L773.935 682.526 L773.375 682.526 L772.816 682.526 L772.257 682.526 L771.698 682.526 L771.138 682.526 L770.579 682.526 L770.02 682.526 L769.461 682.526 L768.901 682.526 L768.342 682.526 L767.783 682.526 L767.224 682.526 L766.664 682.526 L766.105 682.526 L765.546 682.526 L764.987 682.526 L764.427 682.526 L763.868 682.526 L763.309 682.526 L762.75 682.526 L762.19 682.526 L761.631 682.526 L761.072 682.526 L760.513 682.526 L759.953 682.526 L759.394 682.526 L758.835 682.526 L758.276 682.526 L757.716 682.526 L757.157 682.526 L756.598 682.526 L756.039 682.526 L755.479 682.526 L754.92 682.526 L754.361 682.526 L753.802 682.526 L753.242 682.526 L752.683 682.526 L752.124 682.526 L751.565 682.526 L751.005 682.526 L750.446 682.526 L749.887 682.526 L749.328 682.526 L748.768 682.526 L748.209 682.526 L747.65 682.526 L747.091 682.526 L746.531 682.526 L745.972 682.526 L745.413 682.526 L744.854 682.526 L744.294 682.526 L743.735 682.526 L743.176 682.526 L742.617 682.526 L742.057 682.526 L741.498 682.526 L740.939 682.526 L740.38 682.526 L739.82 682.526 L739.261 682.526 L738.702 682.526 L738.143 682.526 L737.583 682.526 L737.024 682.526 L736.465 682.526 L735.906 682.526 L735.346 682.526 L734.787 682.526 L734.228 682.526 L733.669 682.526 L733.109 682.526 L732.55 682.526 L731.991 682.526 L731.432 682.526 L730.872 682.526 L730.313 682.526 L729.754 682.526 L729.195 682.526 L728.635 682.526 L728.076 682.526 L727.517 682.526 L726.958 682.526 L726.398 682.526 L725.839 682.526 L725.28 682.526 L724.721 682.526 L724.161 682.526 L723.602 682.526 L723.043 682.526 L722.484 682.526 L721.924 682.526 L721.365 682.526 L720.806 682.526 L720.247 682.526  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip493)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.301 720.806,683.301 721.365,683.301 721.924,683.301 722.484,683.301 723.043,683.301 723.602,683.301 724.161,683.301 724.721,683.301 725.28,683.301 725.839,683.301 726.398,683.301 726.958,683.301 727.517,683.301 728.076,683.301 728.635,683.301 729.195,683.301 729.754,683.301 730.313,683.301 730.872,683.301 731.432,683.301 731.991,683.301 732.55,683.301 733.109,683.301 733.669,683.301 734.228,683.301 734.787,683.301 735.346,683.301 735.906,683.301 736.465,683.301 737.024,683.301 737.583,683.301 738.143,683.301 738.702,683.301 739.261,683.301 739.82,683.301 740.38,683.301 740.939,683.301 741.498,683.301 742.057,683.301 742.617,683.301 743.176,683.301 743.735,683.301 744.294,683.301 744.854,683.301 745.413,683.301 745.972,683.301 746.531,683.301 747.091,683.301 747.65,683.301 748.209,683.301 748.768,683.301 749.328,683.301 749.887,683.301 750.446,683.301 751.005,683.301 751.565,683.301 752.124,683.301 752.683,683.301 753.242,683.301 753.802,683.301 754.361,683.301 754.92,683.301 755.479,683.301 756.039,683.301 756.598,683.301 757.157,683.301 757.716,683.301 758.276,683.301 758.835,683.301 759.394,683.301 759.953,683.301 760.513,683.301 761.072,683.301 761.631,683.301 762.19,683.301 762.75,683.301 763.309,683.301 763.868,683.301 764.427,683.301 764.987,683.301 765.546,683.301 766.105,683.301 766.664,683.301 767.224,683.301 767.783,683.301 768.342,683.301 768.901,683.301 769.461,683.301 770.02,683.301 770.579,683.301 771.138,683.301 771.698,683.301 772.257,683.301 772.816,683.301 773.375,683.301 773.935,683.301 774.494,683.301 775.053,683.301 775.612,683.301 776.172,683.301 776.731,683.301 777.29,683.301 777.849,683.301 778.409,683.301 778.968,683.301 779.527,683.301 780.086,683.301 780.646,683.301 781.205,683.301 781.764,683.301 782.323,683.301 782.883,683.301 783.442,683.301 784.001,683.301 784.56,683.301 785.12,683.301 785.679,683.301 786.238,683.301 786.797,683.301 787.357,683.301 787.916,683.301 788.475,683.301 789.034,683.301 789.594,683.301 790.153,683.301 790.712,683.301 791.271,683.301 791.831,683.301 792.39,683.301 792.949,683.301 793.508,683.301 794.068,683.301 794.627,683.301 795.186,683.301 795.745,683.301 796.305,683.301 796.864,683.301 797.423,683.301 797.982,683.301 798.542,683.301 799.101,683.301 799.66,683.301 800.219,683.301 800.779,683.301 801.338,683.301 801.897,683.301 802.456,683.301 803.016,683.301 803.575,683.301 804.134,683.301 804.693,683.301 805.253,683.301 805.812,683.301 806.371,683.301 806.931,683.301 807.49,683.301 808.049,683.301 808.608,683.301 809.168,683.301 809.727,683.301 810.286,683.301 810.845,683.301 811.405,683.301 811.964,683.301 812.523,683.301 813.082,683.301 813.642,683.301 814.201,683.301 814.76,683.301 815.319,683.301 815.879,683.301 816.438,683.301 816.997,683.301 817.556,683.301 818.116,683.301 818.675,683.301 819.234,683.301 819.793,683.301 820.353,683.301 820.912,683.301 821.471,683.301 822.03,683.301 822.59,683.301 823.149,683.301 823.708,683.301 824.267,683.301 824.827,683.301 825.386,683.301 825.945,683.301 826.504,683.301 827.064,683.301 827.623,683.301 828.182,683.301 828.741,683.301 829.301,683.301 829.86,683.301 830.419,683.301 830.978,683.301 831.538,683.301 832.097,683.301 832.656,683.301 833.215,683.301 833.775,683.301 834.334,683.301 834.893,683.301 835.452,683.301 836.012,683.301 836.571,683.301 837.13,683.301 837.689,683.301 838.249,683.301 838.808,683.301 839.367,683.301 839.926,683.301 840.486,683.301 841.045,683.301 841.604,683.301 842.163,683.301 842.723,683.301 843.282,683.301 843.841,683.301 844.4,683.301 844.96,683.301 845.519,683.301 846.078,683.301 846.637,683.301 847.197,683.301 847.756,683.301 848.315,683.301 848.874,683.301 849.434,683.301 849.993,683.301 850.552,683.301 851.111,683.301 851.671,683.301 852.23,683.301 852.789,683.301 853.348,683.301 853.908,683.301 854.467,683.301 855.026,683.301 855.585,683.301 856.145,683.301 856.704,683.301 857.263,683.301 857.822,683.301 858.382,683.301 858.941,683.301 859.5,683.301 860.059,683.301 860.619,683.301 861.178,683.301 861.737,683.301 862.296,683.301 862.856,683.301 863.415,683.301 863.974,683.301 864.533,683.301 865.093,683.301 865.652,683.301 866.211,683.301 866.77,683.301 867.33,683.301 867.889,683.301 868.448,683.301 869.007,683.301 869.567,683.301 870.126,683.301 870.685,683.301 871.244,683.301 871.804,683.301 872.363,683.301 872.922,683.301 873.481,683.301 874.041,683.301 874.6,683.301 875.159,683.301 875.718,683.301 876.278,683.301 876.837,683.301 877.396,683.301 877.955,683.301 878.515,683.301 879.074,683.301 879.633,683.301 880.192,683.301 880.752,683.301 881.311,683.301 881.87,683.301 882.429,683.301 882.989,683.301 883.548,683.301 884.107,683.301 884.666,683.301 885.226,683.301 885.785,683.301 886.344,683.301 886.903,683.301 887.463,683.301 888.022,683.301 888.581,683.301 889.14,683.301 889.7,683.301 890.259,683.301 890.818,683.301 891.377,683.301 891.937,683.301 892.496,683.301 893.055,683.301 893.614,683.301 894.174,683.301 894.733,683.301 895.292,683.301 895.851,683.301 896.411,683.301 896.97,683.301 897.529,683.301 898.088,683.301 898.648,683.301 899.207,683.301 899.766,683.301 900.325,683.301 900.885,683.301 901.444,683.301 902.003,683.301 902.562,683.301 903.122,683.301 903.681,683.301 904.24,683.301 904.799,683.301 905.359,683.301 905.918,683.301 906.477,683.301 907.036,683.301 907.596,683.301 908.155,683.301 908.714,683.301 909.273,683.301 909.833,683.301 910.392,683.301 910.951,683.301 911.51,683.301 912.07,683.301 912.629,683.301 913.188,683.301 913.747,683.301 914.307,683.301 914.866,683.301 915.425,683.301 915.984,683.301 916.544,683.301 917.103,683.301 917.662,683.301 918.221,683.301 918.781,683.301 919.34,683.301 919.899,683.301 920.458,683.301 921.018,683.301 921.577,683.301 922.136,683.301 922.695,683.301 923.255,683.301 923.814,683.301 924.373,683.301 924.932,683.301 925.492,683.301 926.051,683.301 926.61,683.301 927.169,683.301 927.729,683.301 928.288,683.301 928.847,683.301 929.406,683.301 929.966,683.301 930.525,683.301 931.084,683.301 931.644,683.301 932.203,683.301 932.762,683.301 933.321,683.301 933.881,683.301 934.44,683.301 934.999,683.301 935.558,683.301 936.118,683.301 936.677,683.301 937.236,683.301 937.795,683.301 938.355,683.301 938.914,683.301 939.473,683.301 940.032,683.301 940.592,683.301 941.151,683.301 941.71,683.301 942.269,683.301 942.829,683.301 943.388,683.301 943.947,683.301 944.506,683.301 945.066,683.301 945.625,683.301 946.184,683.301 946.743,683.301 947.303,683.301 947.862,683.301 948.421,683.301 948.98,683.301 949.54,683.301 950.099,683.301 950.658,683.301 951.217,683.301 951.777,683.301 952.336,683.301 952.895,683.301 953.454,683.301 954.014,683.301 954.573,683.301 955.132,683.301 955.691,683.301 956.251,683.301 956.81,683.301 957.369,683.301 957.928,683.301 958.488,683.301 959.047,683.301 959.606,683.301 960.165,683.301 960.725,683.301 961.284,683.301 961.843,683.301 962.402,683.301 962.962,683.301 963.521,683.301 964.08,683.301 964.639,683.301 965.199,683.301 965.758,683.301 966.317,683.301 966.876,683.301 967.436,683.301 967.995,683.301 968.554,683.301 969.113,683.301 969.673,683.301 970.232,683.301 970.791,683.301 971.35,683.301 971.91,683.301 972.469,683.301 973.028,683.301 973.587,683.301 974.147,683.301 974.706,683.301 975.265,683.301 975.824,683.301 976.384,683.301 976.943,683.301 977.502,683.301 978.061,683.301 978.621,683.301 979.18,683.301 979.739,683.301 980.298,683.301 980.858,683.301 981.417,683.301 981.976,683.301 982.535,683.301 983.095,683.301 983.654,683.301 984.213,683.301 984.772,683.301 985.332,683.301 985.891,683.301 986.45,683.301 987.009,683.301 987.569,683.301 988.128,683.301 988.687,683.301 989.246,683.301 989.806,683.301 990.365,683.301 990.924,683.301 991.483,683.301 992.043,683.301 992.602,683.301 993.161,683.301 993.72,683.301 994.28,683.301 994.839,683.301 995.398,683.301 995.957,683.301 996.517,683.301 997.076,683.301 997.635,683.301 998.194,683.301 998.754,683.301 999.313,683.301 999.872,683.301 1000.43,683.301 1000.99,683.301 1001.55,683.301 1002.11,683.301 1002.67,683.301 1003.23,683.301 1003.79,683.301 1004.35,683.301 1004.91,683.301 1005.46,683.301 1006.02,683.301 1006.58,683.301 1007.14,683.301 1007.7,683.301 1008.26,683.301 1008.82,683.301 1009.38,683.301 1009.94,683.301 1010.5,683.301 1011.06,683.301 1011.62,683.301 1012.18,683.301 1012.73,683.301 1013.29,683.301 1013.85,683.301 1014.41,683.301 1014.97,683.301 1015.53,683.301 1016.09,683.301 1016.65,683.301 1017.21,683.301 1017.77,683.301 1018.33,683.301 1018.89,683.301 1019.45,683.301 1020.01,683.301 1020.56,683.301 1021.12,683.301 1021.68,683.301 1022.24,683.301 1022.8,683.301 1023.36,683.301 1023.92,683.301 1024.48,683.301 1025.04,683.301 1025.6,683.301 1026.16,683.301 1026.72,683.301 1027.28,683.301 1027.83,683.301 1028.39,683.301 1028.95,683.301 1029.51,683.301 1030.07,683.301 1030.63,683.301 1031.19,683.301 1031.75,683.301 1032.31,683.301 1032.87,683.301 1033.43,683.301 1033.99,683.301 1034.55,683.301 1035.1,683.301 1035.66,683.301 1036.22,683.301 1036.78,683.301 1037.34,683.301 1037.9,683.301 1038.46,683.301 1039.02,683.301 1039.58,683.301 1040.14,683.301 1040.7,683.301 1041.26,683.301 1041.82,683.301 1042.38,683.301 1042.93,683.301 1043.49,683.301 1044.05,683.301 1044.61,683.301 1045.17,683.301 1045.73,683.301 1046.29,683.301 1046.85,683.301 1047.41,683.301 1047.97,683.301 1048.53,683.301 1049.09,683.301 1049.65,683.301 1050.2,683.301 1050.76,683.301 1051.32,683.301 1051.88,683.301 1052.44,683.301 1053,683.301 1053.56,683.301 1054.12,683.301 1054.68,683.301 1055.24,683.301 1055.8,683.301 1056.36,683.301 1056.92,683.301 1057.48,683.301 1058.03,683.301 1058.59,683.301 1059.15,683.301 1059.71,683.301 1060.27,683.301 1060.83,683.301 1061.39,683.301 1061.95,683.301 1062.51,683.301 1063.07,683.301 1063.63,683.301 1064.19,683.301 1064.75,683.301 1065.3,683.301 1065.86,683.301 1066.42,683.301 1066.98,683.301 1067.54,683.301 1068.1,683.301 1068.66,683.301 1069.22,683.301 1069.78,683.301 1070.34,683.301 1070.9,683.301 1071.46,683.301 1072.02,683.301 1072.57,683.301 1073.13,683.301 1073.69,683.301 1074.25,683.301 1074.81,683.301 1075.37,683.301 1075.93,683.301 1076.49,683.301 1077.05,683.301 1077.61,683.301 1078.17,683.301 1078.73,683.301 1079.29,683.301 1079.85,683.301 1080.4,683.301 1080.96,683.301 1081.52,683.301 1082.08,683.301 1082.64,683.301 1083.2,683.301 1083.76,683.301 1084.32,683.301 1084.88,683.301 1085.44,683.301 1086,683.301 1086.56,683.301 1087.12,683.301 1087.67,683.301 1088.23,683.301 1088.79,683.301 1089.35,683.301 1089.91,683.301 1090.47,683.301 1091.03,683.301 1091.59,683.301 1092.15,683.301 1092.71,683.301 1093.27,683.301 1093.83,683.301 1094.39,683.301 1094.94,683.301 1095.5,683.301 1096.06,683.301 1096.62,683.301 1097.18,683.301 1097.74,683.301 1098.3,683.301 1098.86,683.301 1099.42,683.301 1099.98,683.301 1100.54,683.301 1101.1,683.301 1101.66,683.301 1102.22,683.301 1102.77,683.301 1103.33,683.301 1103.89,683.301 1104.45,683.301 1105.01,683.301 1105.57,683.301 1106.13,683.301 1106.69,683.301 1107.25,683.301 1107.81,683.301 1108.37,683.301 1108.93,683.301 1109.49,683.301 1110.04,683.301 1110.6,683.301 1111.16,683.301 1111.72,683.301 1112.28,683.301 1112.84,683.301 1113.4,683.301 1113.96,683.301 1114.52,683.301 1115.08,683.301 1115.64,683.301 1116.2,683.301 1116.76,683.301 1117.31,683.301 1117.87,683.301 1118.43,683.301 1118.99,683.301 1119.55,683.301 1120.11,683.301 1120.67,683.301 1121.23,683.301 1121.79,683.301 1122.35,683.301 1122.91,683.301 1123.47,683.301 1124.03,683.301 1124.59,683.301 1125.14,683.301 1125.7,683.301 1126.26,683.301 1126.82,683.301 1127.38,683.301 1127.94,683.301 1128.5,683.301 1129.06,683.301 1129.62,683.301 1130.18,683.301 1130.74,683.301 1131.3,683.301 1131.86,683.301 1132.41,683.301 1132.97,683.301 1133.53,683.301 1134.09,683.301 1134.65,683.301 1135.21,683.301 1135.77,683.301 1136.33,683.301 1136.89,683.301 1137.45,683.301 1138.01,683.301 1138.57,683.301 1139.13,683.301 1139.68,683.301 1140.24,683.301 1140.8,683.301 1141.36,683.301 1141.92,683.301 1142.48,683.301 1143.04,683.301 1143.6,683.301 1144.16,683.301 1144.72,683.301 1145.28,683.301 1145.84,683.301 1146.4,683.301 1146.96,683.301 1147.51,683.301 1148.07,683.301 1148.63,683.301 1149.19,683.301 1149.75,683.301 1150.31,683.301 1150.87,683.301 1151.43,683.301 1151.99,683.301 1152.55,683.301 1153.11,683.301 1153.67,683.301 1154.23,683.301 1154.78,683.301 1155.34,683.301 1155.9,683.301 1156.46,683.301 1157.02,683.301 1157.58,683.301 1158.14,683.301 1158.7,683.301 1159.26,683.301 1159.82,683.301 1160.38,683.301 1160.94,683.301 1161.5,683.301 1162.05,683.301 1162.61,683.301 1163.17,683.301 1163.73,683.301 1164.29,683.301 1164.85,683.301 1165.41,683.301 1165.97,683.301 1166.53,683.301 1167.09,683.301 1167.65,683.301 1168.21,683.301 1168.77,683.301 1169.33,683.301 1169.88,683.301 1170.44,683.301 1171,683.301 1171.56,683.301 1172.12,683.301 1172.68,683.301 1173.24,683.301 1173.8,683.301 1174.36,683.301 1174.92,683.301 1175.48,683.301 1176.04,683.301 1176.6,683.301 1177.15,683.301 1177.71,683.301 1178.27,683.301 1178.83,683.301 1179.39,683.301 1179.95,683.301 1180.51,683.301 1181.07,683.301 1181.63,683.301 1182.19,683.301 1182.75,683.301 1183.31,683.301 1183.87,683.301 1184.43,683.301 1184.98,683.301 1185.54,683.301 1186.1,683.301 1186.66,683.301 1187.22,683.301 1187.78,683.301 1188.34,683.301 1188.9,683.301 1189.46,683.301 1190.02,683.301 1190.58,683.301 1191.14,683.301 1191.7,683.301 1192.25,683.301 1192.81,683.301 1193.37,683.301 1193.93,683.301 1194.49,683.301 1195.05,683.301 1195.61,683.301 1196.17,683.301 1196.73,683.301 1197.29,683.301 1197.85,683.301 1198.41,683.301 1198.97,683.301 1199.52,683.301 1200.08,683.301 1200.64,683.301 1201.2,683.301 1201.76,683.301 1202.32,683.301 1202.88,683.301 1203.44,683.301 1204,683.301 1204.56,683.301 1205.12,683.301 1205.68,683.301 1206.24,683.301 1206.8,683.301 1207.35,683.301 1207.91,683.301 1208.47,683.301 1209.03,683.301 1209.59,683.301 1210.15,683.301 1210.71,683.301 1211.27,683.301 1211.83,683.301 1212.39,683.301 1212.95,683.301 1213.51,683.301 1214.07,683.301 1214.62,683.301 1215.18,683.301 1215.74,683.301 1216.3,683.301 1216.86,683.301 1217.42,683.301 1217.98,683.301 1218.54,683.301 1219.1,683.301 1219.66,683.301 1220.22,683.301 1220.78,683.301 1221.34,683.301 1221.89,683.301 1222.45,683.301 1223.01,683.301 1223.57,683.301 1224.13,683.301 1224.69,683.301 1225.25,683.301 1225.81,683.301 1226.37,683.301 1226.93,683.301 1227.49,683.301 1228.05,683.301 1228.61,683.301 1229.17,683.301 1229.72,683.301 1230.28,683.301 1230.84,683.301 1231.4,683.301 1231.96,683.301 1232.52,683.301 1233.08,683.301 1233.64,683.301 1234.2,683.301 1234.76,683.301 1235.32,683.301 1235.88,683.301 1236.44,683.301 1236.99,683.301 1237.55,683.301 1238.11,683.301 1238.67,683.301 1239.23,683.301 1239.79,683.301 1240.35,683.301 1240.91,683.301 1241.47,683.301 1242.03,683.301 1242.59,683.301 1243.15,683.301 1243.71,683.301 1244.26,683.301 1244.82,683.301 1245.38,683.301 1245.94,683.301 1246.5,683.301 1247.06,683.301 1247.62,683.301 1248.18,683.301 1248.74,683.301 1249.3,683.301 1249.86,683.301 1250.42,683.301 1250.98,683.301 1251.54,683.301 1252.09,683.301 1252.65,683.301 1253.21,683.301 1253.77,683.301 1254.33,683.301 1254.89,683.301 1255.45,683.301 1256.01,683.301 1256.57,683.301 1257.13,683.301 1257.69,683.301 1258.25,683.301 1258.81,683.301 1259.36,683.301 1259.92,683.301 1260.48,683.301 1261.04,683.301 1261.6,683.301 1262.16,683.301 1262.72,683.301 1263.28,683.301 1263.84,683.301 1264.4,683.301 1264.96,683.301 1265.52,683.301 1266.08,683.301 1266.63,683.301 1267.19,683.301 1267.75,683.301 1268.31,683.301 1268.87,683.301 1269.43,683.301 1269.99,683.301 1270.55,683.301 1271.11,683.301 1271.67,683.301 1272.23,683.301 1272.79,683.301 1273.35,683.301 1273.91,683.301 1274.46,683.301 1275.02,683.301 1275.58,683.301 1276.14,683.301 1276.7,683.301 1277.26,683.301 1277.82,683.301 1278.38,683.301 1278.94,683.301 1279.5,683.301 1280.06,683.301 1280.62,683.301 1281.18,683.301 1281.73,683.301 1282.29,683.301 1282.85,683.301 1283.41,683.301 1283.97,683.301 1284.53,683.301 1285.09,683.301 1285.65,683.301 1286.21,683.301 1286.77,683.301 1287.33,683.301 1287.89,683.301 1288.45,683.301 1289,683.301 1289.56,683.301 1290.12,683.301 1290.68,683.301 1291.24,683.301 1291.8,683.301 1292.36,683.301 1292.92,683.301 1293.48,683.301 1294.04,683.301 1294.6,683.301 1295.16,683.301 1295.72,683.301 1296.28,683.301 1296.83,683.301 1297.39,683.301 1297.95,683.301 1298.51,683.301 1299.07,683.301 1299.63,683.301 1300.19,683.301 1300.75,683.301 1301.31,683.301 1301.87,683.301 1302.43,683.301 1302.99,683.301 1303.55,683.301 1304.1,683.301 1304.66,683.301 1305.22,683.301 1305.78,683.301 1306.34,683.301 1306.9,683.301 1307.46,683.301 1308.02,683.301 1308.58,683.301 1309.14,683.301 1309.7,683.301 1310.26,683.301 1310.82,683.301 1311.38,683.301 1311.93,683.301 1312.49,683.301 1313.05,683.301 1313.61,683.301 1314.17,683.301 1314.73,683.301 1315.29,683.301 1315.85,683.301 1316.41,683.301 1316.97,683.301 1317.53,683.301 1318.09,683.301 1318.65,683.301 1319.2,683.301 1319.76,683.301 1320.32,683.301 1320.88,683.301 1321.44,683.301 1322,683.301 1322.56,683.301 1323.12,683.301 1323.68,683.301 1324.24,683.301 1324.8,683.301 1325.36,683.301 1325.92,683.301 1326.47,683.301 1327.03,683.301 1327.59,683.301 1328.15,683.301 1328.71,683.301 1329.27,683.301 1329.83,683.301 1330.39,683.301 1330.95,683.301 1331.51,683.301 1332.07,683.301 1332.63,683.301 1333.19,683.301 1333.75,683.301 1334.3,683.301 1334.86,683.301 1335.42,683.301 1335.98,683.301 1336.54,683.301 1337.1,683.301 1337.66,683.301 1338.22,683.301 1338.78,683.301 1339.34,683.301 1339.9,683.301 1340.46,683.301 1341.02,683.301 1341.57,683.301 1342.13,683.301 1342.69,683.301 1343.25,683.301 1343.81,683.301 1344.37,683.301 1344.93,683.301 1345.49,683.301 1346.05,683.301 1346.61,683.301 1347.17,683.301 1347.73,683.301 1348.29,683.301 1348.84,683.301 1349.4,683.301 1349.96,683.301 1350.52,683.301 1351.08,683.301 1351.64,683.301 1352.2,683.301 1352.76,683.301 1353.32,683.301 1353.88,683.301 1354.44,683.301 1355,683.301 1355.56,683.301 1356.12,683.301 1356.67,683.301 1357.23,683.301 1357.79,683.301 1358.35,683.301 1358.91,683.301 1359.47,683.301 1360.03,683.301 1360.59,683.301 1361.15,683.301 1361.71,683.301 1362.27,683.301 1362.83,683.301 1363.39,683.301 1363.94,683.301 1364.5,683.301 1365.06,683.301 1365.62,683.301 1366.18,683.301 1366.74,683.301 1367.3,683.301 1367.86,683.301 1368.42,683.301 1368.98,683.301 1369.54,683.301 1370.1,683.301 1370.66,683.301 1371.21,683.301 1371.77,683.301 1372.33,683.301 1372.89,683.301 1373.45,683.301 1374.01,683.301 1374.57,683.301 1375.13,683.301 1375.69,683.301 1376.25,683.301 1376.81,683.301 1377.37,683.301 1377.93,683.301 1378.49,683.301 1379.04,683.301 1379.6,683.301 1380.16,683.301 1380.72,683.301 1381.28,683.301 1381.84,683.301 1382.4,683.301 1382.96,683.301 1383.52,683.301 1384.08,683.301 1384.64,683.301 1385.2,683.301 1385.76,683.301 1386.31,683.301 1386.87,683.301 1387.43,683.301 1387.99,683.301 1388.55,683.301 1389.11,683.301 1389.67,683.301 1390.23,683.301 1390.79,683.301 1391.35,683.301 1391.91,683.301 1392.47,683.301 1393.03,683.301 1393.58,683.301 1394.14,683.301 1394.7,683.301 1395.26,683.301 1395.82,683.301 1396.38,683.301 1396.94,683.301 1397.5,683.301 1398.06,683.301 1398.62,683.301 1399.18,683.301 1399.74,683.301 1400.3,683.301 1400.86,683.301 1401.41,683.301 1401.97,683.301 1402.53,683.301 1403.09,683.301 1403.65,683.301 1404.21,683.301 1404.77,683.301 1405.33,683.301 1405.89,683.301 1406.45,683.301 1407.01,683.301 1407.57,683.301 1408.13,683.301 1408.68,683.301 1409.24,683.301 1409.8,683.301 1410.36,683.301 1410.92,683.301 1411.48,683.301 1412.04,683.301 1412.6,683.301 1413.16,683.301 1413.72,683.301 1414.28,683.301 1414.84,683.301 1415.4,683.301 1415.95,683.301 1416.51,683.301 1417.07,683.301 1417.63,683.301 1418.19,683.301 1418.75,683.301 1419.31,683.301 1419.87,683.301 1420.43,683.301 1420.99,683.301 1421.55,683.301 1422.11,683.301 1422.67,683.301 1423.23,683.301 1423.78,683.301 1424.34,683.301 1424.9,683.301 1425.46,683.301 1426.02,683.301 1426.58,683.301 1427.14,683.301 1427.7,683.301 1428.26,683.301 1428.82,683.301 1429.38,683.301 1429.94,683.301 1430.5,683.301 1431.05,683.301 1431.61,683.301 1432.17,683.301 1432.73,683.301 1433.29,683.301 1433.85,683.301 1434.41,683.301 1434.97,683.301 1435.53,683.301 1436.09,683.301 1436.65,683.301 1437.21,683.301 1437.77,683.301 1438.33,683.301 1438.88,683.301 1439.44,683.301 1440,683.301 1440.56,683.301 1441.12,683.301 1441.68,683.301 1442.24,683.301 1442.8,683.301 1443.36,683.301 1443.92,683.301 1444.48,683.301 1445.04,683.301 1445.6,683.301 1446.15,683.301 1446.71,683.301 1447.27,683.301 1447.83,683.301 1448.39,683.301 1448.95,683.301 1449.51,683.301 1450.07,683.301 1450.63,683.301 1451.19,683.301 1451.75,683.301 1452.31,683.301 1452.87,683.301 1453.42,683.301 1453.98,683.301 1454.54,683.301 1455.1,683.301 1455.66,683.301 1456.22,683.301 1456.78,683.301 1457.34,683.301 1457.9,683.301 1458.46,683.301 1459.02,683.301 1459.58,683.301 1460.14,683.301 1460.7,683.301 1461.25,683.301 1461.81,683.301 1462.37,683.301 1462.93,683.301 1463.49,683.301 1464.05,683.301 1464.61,683.301 1465.17,683.301 1465.73,683.301 1466.29,683.301 1466.85,683.301 1467.41,683.301 1467.97,683.301 1468.52,683.301 1469.08,683.301 1469.64,683.301 1470.2,683.301 1470.76,683.301 1471.32,683.301 1471.88,683.301 1472.44,683.301 1473,683.301 1473.56,683.301 1474.12,683.301 1474.68,683.301 1475.24,683.301 1475.79,683.301 1476.35,683.301 1476.91,683.301 1477.47,683.301 1478.03,683.301 1478.59,683.301 1479.15,683.301 1479.71,683.301 1480.27,683.301 1480.83,683.301 1481.39,683.301 1481.95,683.301 1482.51,683.301 1483.07,683.301 1483.62,683.301 1484.18,683.301 1484.74,683.301 1485.3,683.301 1485.86,683.301 1486.42,683.301 1486.98,683.301 1487.54,683.301 1488.1,683.301 1488.66,683.301 1489.22,683.301 1489.78,683.301 1490.34,683.301 1490.89,683.301 1491.45,683.301 1492.01,683.301 1492.57,683.301 1493.13,683.301 1493.69,683.301 1494.25,683.301 1494.81,683.301 1495.37,683.301 1495.93,683.301 1496.49,683.301 1497.05,683.301 1497.61,683.301 1498.16,683.301 1498.72,683.301 1499.28,683.301 1499.84,683.301 1500.4,683.301 1500.96,683.301 1501.52,683.301 1502.08,683.301 1502.64,683.301 1503.2,683.301 1503.76,683.301 1504.32,683.301 1504.88,683.301 1505.44,683.301 1505.99,683.301 1506.55,683.301 1507.11,683.301 1507.67,683.301 1508.23,683.301 1508.79,683.301 1509.35,683.301 1509.91,683.301 1510.47,683.301 1511.03,683.301 1511.59,683.301 1512.15,683.301 1512.71,683.301 1513.26,683.301 1513.82,683.301 1514.38,683.301 1514.94,683.301 1515.5,683.301 1516.06,683.301 1516.62,683.301 1517.18,683.301 1517.74,683.301 1518.3,683.301 1518.86,683.301 1519.42,683.301 1519.98,683.301 1520.53,683.301 1521.09,683.301 1521.65,683.301 1522.21,683.301 1522.77,683.301 1523.33,683.301 1523.89,683.301 1524.45,683.301 1525.01,683.301 1525.57,683.301 1526.13,683.301 1526.69,683.301 1527.25,683.301 1527.81,683.301 1528.36,683.301 1528.92,683.301 1529.48,683.301 1530.04,683.301 1530.6,683.301 1531.16,683.301 1531.72,683.301 1532.28,683.301 1532.84,683.301 1533.4,683.301 1533.96,683.301 1534.52,683.301 1535.08,683.301 1535.63,683.301 1536.19,683.301 1536.75,683.301 1537.31,683.301 1537.87,683.301 1538.43,683.301 1538.99,683.301 1539.55,683.301 1540.11,683.301 1540.67,683.301 1541.23,683.301 1541.79,683.301 1542.35,683.301 1542.9,683.301 1543.46,683.301 1544.02,683.301 1544.58,683.301 1545.14,683.301 1545.7,683.301 1546.26,683.301 1546.82,683.301 1547.38,683.301 1547.94,683.301 1548.5,683.301 1549.06,683.301 1549.62,683.301 1550.18,683.301 1550.73,683.301 1551.29,683.301 1551.85,683.301 1552.41,683.301 1552.97,683.301 1553.53,683.301 1554.09,683.301 1554.65,683.301 1555.21,683.301 1555.77,683.301 1556.33,683.301 1556.89,683.301 1557.45,683.301 1558,683.301 1558.56,683.301 1559.12,683.301 1559.68,683.301 1560.24,683.301 1560.8,683.301 1561.36,683.301 1561.92,683.301 1562.48,683.301 1563.04,683.301 1563.6,683.301 1564.16,683.301 1564.72,683.301 1565.28,683.301 1565.83,683.301 1566.39,683.301 1566.95,683.301 1567.51,683.301 1568.07,683.301 1568.63,683.301 1569.19,683.301 1569.75,683.301 1570.31,683.301 1570.87,683.301 1571.43,683.301 1571.99,683.301 1572.55,683.301 1573.1,683.301 1573.66,683.301 1574.22,683.301 1574.78,683.301 1575.34,683.301 1575.9,683.301 1576.46,683.301 1577.02,683.301 1577.58,683.301 1578.14,683.301 1578.7,683.301 1579.26,683.301 1579.82,683.301 1580.37,683.301 1580.93,683.301 1581.49,683.301 1582.05,683.301 1582.61,683.301 1583.17,683.301 1583.73,683.301 1584.29,683.301 1584.85,683.301 1585.41,683.301 1585.97,683.301 1586.53,683.301 1587.09,683.301 1587.65,683.301 1588.2,683.301 1588.76,683.301 1589.32,683.301 1589.88,683.301 1590.44,683.301 1591,683.301 1591.56,683.301 1592.12,683.301 1592.68,683.301 1593.24,683.301 1593.8,683.301 1594.36,683.301 1594.92,683.301 1595.47,683.301 1596.03,683.301 1596.59,683.301 1597.15,683.301 1597.71,683.301 1598.27,683.301 1598.83,683.301 1599.39,683.301 1599.95,683.301 1600.51,683.301 1601.07,683.301 1601.63,683.301 1602.19,683.301 1602.74,683.301 1603.3,683.301 1603.86,683.301 1604.42,683.301 1604.98,683.301 1605.54,683.301 1606.1,683.301 1606.66,683.301 1607.22,683.301 1607.78,683.301 1608.34,683.301 1608.9,683.301 1609.46,683.301 1610.02,683.301 1610.57,683.301 1611.13,683.301 1611.69,683.301 1612.25,683.301 1612.81,683.301 1613.37,683.301 1613.93,683.301 1614.49,683.301 1615.05,683.301 1615.61,683.301 1616.17,683.301 1616.73,683.301 1617.29,683.301 1617.84,683.301 1618.4,683.301 1618.96,683.301 1619.52,683.301 1620.08,683.301 1620.64,683.301 1621.2,683.301 1621.76,683.301 1622.32,683.301 1622.88,683.301 1623.44,683.301 1624,683.301 1624.56,683.301 1625.11,683.301 1625.67,683.301 1626.23,683.301 1626.79,683.301 1627.35,683.301 1627.91,683.301 1628.47,683.301 1629.03,683.301 1629.59,683.301 1630.15,683.301 1630.71,683.301 1631.27,683.301 1631.83,683.301 1632.39,683.301 1632.94,683.301 1633.5,683.301 1634.06,683.301 1634.62,683.301 1635.18,683.301 1635.74,683.301 1636.3,683.301 1636.86,683.301 1637.42,683.301 1637.98,683.301 1638.54,683.301 1639.1,683.301 1639.66,683.301 1640.21,683.301 1640.77,683.301 1641.33,683.301 1641.89,683.301 1642.45,683.301 1643.01,683.301 1643.57,683.301 1644.13,683.301 1644.69,683.301 1645.25,683.301 1645.81,683.301 1646.37,683.301 1646.93,683.301 1647.48,683.301 1648.04,683.301 1648.6,683.301 1649.16,683.301 1649.72,683.301 1650.28,683.301 1650.84,683.301 1651.4,683.301 1651.96,683.301 1652.52,683.301 1653.08,683.301 1653.64,683.301 1654.2,683.301 1654.76,683.301 1655.31,683.301 1655.87,683.301 1656.43,683.301 1656.99,683.301 1657.55,683.301 1658.11,683.301 1658.67,683.301 1659.23,683.301 1659.79,683.301 1660.35,683.301 1660.91,683.301 1661.47,683.301 1662.03,683.301 1662.58,683.301 1663.14,683.301 1663.7,683.301 1664.26,683.301 1664.82,683.301 1665.38,683.301 1665.94,683.301 1666.5,683.301 1667.06,683.301 1667.62,683.301 1668.18,683.301 1668.74,683.301 1669.3,683.301 1669.85,683.301 1670.41,683.301 1670.97,683.301 1671.53,683.301 1672.09,683.301 1672.65,683.301 1673.21,683.301 1673.77,683.301 1674.33,683.301 1674.89,683.301 1675.45,683.301 1676.01,683.301 1676.57,683.301 1677.13,683.301 1677.68,683.301 1678.24,683.301 1678.8,683.301 1679.36,683.301 1679.92,683.301 1680.48,683.301 1681.04,683.301 1681.6,683.301 1682.16,683.301 1682.72,683.301 1683.28,683.301 1683.84,683.301 1684.4,683.301 1684.95,683.301 1685.51,683.301 1686.07,683.301 1686.63,683.301 1687.19,683.301 1687.75,683.301 1688.31,683.301 1688.87,683.301 1689.43,683.301 1689.99,683.301 1690.55,683.301 1691.11,683.301 1691.67,683.301 1692.23,683.301 1692.78,683.301 1693.34,683.301 1693.9,683.301 1694.46,683.301 1695.02,683.301 1695.58,683.301 1696.14,683.301 1696.7,683.301 1697.26,683.301 1697.82,683.301 1698.38,683.301 1698.94,683.301 1699.5,683.301 1700.05,683.301 1700.61,683.301 1701.17,683.301 1701.73,683.301 1702.29,683.301 1702.85,683.301 1703.41,683.301 1703.97,683.301 1704.53,683.301 1705.09,683.301 1705.65,683.301 1706.21,683.301 1706.77,683.301 1707.32,683.301 1707.88,683.301 1708.44,683.301 1709,683.301 1709.56,683.301 1710.12,683.301 1710.68,683.301 1711.24,683.301 1711.8,683.301 1712.36,683.301 1712.92,683.301 1713.48,683.301 1714.04,683.301 1714.6,683.301 1715.15,683.301 1715.71,683.301 1716.27,683.301 1716.83,683.301 1717.39,683.301 1717.95,683.301 1718.51,683.301 1719.07,683.301 1719.63,683.301 1720.19,683.301 1720.75,683.301 1721.31,683.301 1721.87,683.301 1722.42,683.301 1722.98,683.301 1723.54,683.301 1724.1,683.301 1724.66,683.301 1725.22,683.301 1725.78,683.301 1726.34,683.301 1726.9,683.301 1727.46,683.301 1728.02,683.301 1728.58,683.301 1729.14,683.301 1729.69,683.301 1730.25,683.301 1730.81,683.301 1731.37,683.301 1731.93,683.301 1732.49,683.301 1733.05,683.301 1733.61,683.301 1734.17,683.301 1734.73,683.301 1735.29,683.301 1735.85,683.301 1736.41,683.301 1736.97,683.301 1737.52,683.301 1738.08,683.301 1738.64,683.301 1739.2,683.301 1739.76,683.301 1740.32,683.301 1740.88,683.301 1741.44,683.301 1742,683.301 1742.56,683.301 1743.12,683.301 1743.68,683.301 1744.24,683.301 1744.79,683.301 1745.35,683.301 1745.91,683.301 1746.47,683.301 1747.03,683.301 1747.59,683.301 1748.15,683.301 1748.71,683.301 1749.27,683.301 1749.83,683.301 1750.39,683.301 1750.95,683.301 1751.51,683.301 1752.06,683.301 1752.62,683.301 1753.18,683.301 1753.74,683.301 1754.3,683.301 1754.86,683.301 1755.42,683.301 1755.98,683.301 1756.54,683.301 1757.1,683.301 1757.66,683.301 1758.22,683.301 1758.78,683.301 1759.34,683.301 1759.89,683.301 1760.45,683.301 1761.01,683.301 1761.57,683.301 1762.13,683.301 1762.69,683.301 1763.25,683.301 1763.81,683.301 1764.37,683.301 1764.93,683.301 1765.49,683.301 1766.05,683.301 1766.61,683.301 1767.16,683.301 1767.72,683.301 1768.28,683.301 1768.84,683.301 1769.4,683.301 1769.96,683.301 1770.52,683.301 1771.08,683.301 1771.64,683.301 1772.2,683.301 1772.76,683.301 1773.32,683.301 1773.88,683.301 1774.43,683.301 1774.99,683.301 1775.55,683.301 1776.11,683.301 1776.67,683.301 1777.23,683.301 1777.79,683.301 1778.35,683.301 1778.91,683.301 1779.47,683.301 1780.03,683.301 1780.59,683.301 1781.15,683.301 1781.71,683.301 1782.26,683.301 1782.82,683.301 1783.38,683.301 1783.94,683.301 1784.5,683.301 1785.06,683.301 1785.62,683.301 1786.18,683.301 1786.74,683.301 1787.3,683.301 1787.86,683.301 1788.42,683.301 1788.98,683.301 1789.53,683.301 1790.09,683.301 1790.65,683.301 1791.21,683.301 1791.77,683.301 1792.33,683.301 1792.89,683.301 1793.45,683.301 1794.01,683.301 1794.57,683.301 1795.13,683.301 1795.69,683.301 1796.25,683.301 1796.8,683.301 1797.36,683.301 1797.92,683.301 1798.48,683.301 1799.04,683.301 1799.6,683.301 1800.16,683.301 1800.72,683.301 1801.28,683.301 1801.84,683.301 1802.4,683.301 1802.96,683.301 1803.52,683.301 1804.08,683.301 1804.63,683.301 1805.19,683.301 1805.75,683.301 1806.31,683.301 1806.87,683.301 1807.43,683.301 1807.99,683.301 1808.55,683.301 1809.11,683.301 1809.67,683.301 1810.23,683.301 1810.79,683.301 1811.35,683.301 1811.9,683.301 1812.46,683.301 1813.02,683.301 1813.58,683.301 1814.14,683.301 1814.7,683.301 1815.26,683.301 1815.82,683.301 1816.38,683.301 1816.94,683.301 1817.5,683.301 1818.06,683.301 1818.62,683.301 1819.18,683.301 1819.73,683.301 1820.29,683.301 1820.85,683.301 1821.41,683.301 1821.97,683.301 1822.53,683.301 1823.09,683.301 1823.65,683.301 1824.21,683.301 1824.77,683.301 1825.33,683.301 1825.89,683.301 1826.45,683.301 1827,683.301 1827.56,683.301 1828.12,683.301 1828.68,683.301 1829.24,683.301 1829.8,683.301 1830.36,683.301 1830.92,683.301 1831.48,683.301 1832.04,683.301 1832.6,683.301 1833.16,683.301 1833.72,683.301 1834.27,683.301 1834.83,683.301 1835.39,683.301 1835.95,683.301 1836.51,683.301 1837.07,683.301 1837.63,683.301 1838.19,683.301 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027143482482249 ± 0.01945330778588301\nProjected Energy: -4.013654383144462 ± (0.003738275648197842, 0.0038984779490034427)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.14061</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.771e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.6228e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5539e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.817e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.973e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4156e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133743\n -0.7590191922770888\n  0.13584182219622853\n  0.15789998694608265\n  0.8767114411781378\n  1.5305929970973224\n  1.5835732611867472\n  3.0728703303258706\n  3.125672653951834\n  4.862107221562177\n  6.260694850380596\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
