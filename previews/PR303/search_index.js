var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21028015278588894 ± 0.0016110314992958657\n   G2(1) = 0.9196316228466189 ± 0.0006849963745850131\n   G2(2) = 0.9803776285986748 ± 0.0006059932011142798\n   G2(3) = 0.9897013443235239 ± 0.0009204004575566132\n   G2(4) = 0.9803776285986748 ± 0.0006059932011142798\n   G2(5) = 0.9196316228466189 ± 0.0006849963745850131\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9785125083553985 ± 0.14653046652527874\n   Replica 2: -4.050075107739682 ± 0.13548814876223614\n   Replica 3: -3.990012737481433 ± 0.14021632908568626\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip090\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip091\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip092\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.94 2211.02,1003.94 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.009 2211.02,746.009 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.076 2211.02,488.076 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.144 2211.02,230.144 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.94 423.181,1003.94 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.009 423.181,746.009 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.076 423.181,488.076 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.144 423.181,230.144 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M290.043 1017.29 L306.363 1017.29 L306.363 1021.22 L284.418 1021.22 L284.418 1017.29 Q287.08 1014.53 291.664 1009.9 Q296.27 1005.25 297.451 1003.91 Q299.696 1001.38 300.576 999.647 Q301.478 997.888 301.478 996.198 Q301.478 993.443 299.534 991.707 Q297.613 989.971 294.511 989.971 Q292.312 989.971 289.858 990.735 Q287.427 991.499 284.65 993.05 L284.65 988.328 Q287.474 987.193 289.927 986.615 Q292.381 986.036 294.418 986.036 Q299.789 986.036 302.983 988.721 Q306.177 991.406 306.177 995.897 Q306.177 998.027 305.367 999.948 Q304.58 1001.85 302.474 1004.44 Q301.895 1005.11 298.793 1008.33 Q295.691 1011.52 290.043 1017.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M316.224 986.661 L334.58 986.661 L334.58 990.596 L320.506 990.596 L320.506 999.068 Q321.524 998.721 322.543 998.559 Q323.562 998.374 324.58 998.374 Q330.367 998.374 333.747 1001.55 Q337.126 1004.72 337.126 1010.13 Q337.126 1015.71 333.654 1018.81 Q330.182 1021.89 323.862 1021.89 Q321.687 1021.89 319.418 1021.52 Q317.173 1021.15 314.765 1020.41 L314.765 1015.71 Q316.849 1016.85 319.071 1017.4 Q321.293 1017.96 323.77 1017.96 Q327.774 1017.96 330.112 1015.85 Q332.45 1013.74 332.45 1010.13 Q332.45 1006.52 330.112 1004.42 Q327.774 1002.31 323.77 1002.31 Q321.895 1002.31 320.02 1002.73 Q318.168 1003.14 316.224 1004.02 L316.224 986.661 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M356.339 989.74 Q352.728 989.74 350.899 993.304 Q349.094 996.846 349.094 1003.98 Q349.094 1011.08 350.899 1014.65 Q352.728 1018.19 356.339 1018.19 Q359.973 1018.19 361.779 1014.65 Q363.608 1011.08 363.608 1003.98 Q363.608 996.846 361.779 993.304 Q359.973 989.74 356.339 989.74 M356.339 986.036 Q362.149 986.036 365.205 990.642 Q368.284 995.226 368.284 1003.98 Q368.284 1012.7 365.205 1017.31 Q362.149 1021.89 356.339 1021.89 Q350.529 1021.89 347.45 1017.31 Q344.395 1012.7 344.395 1003.98 Q344.395 995.226 347.45 990.642 Q350.529 986.036 356.339 986.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M286.062 728.729 L304.418 728.729 L304.418 732.664 L290.344 732.664 L290.344 741.136 Q291.363 740.789 292.381 740.627 Q293.4 740.441 294.418 740.441 Q300.205 740.441 303.585 743.613 Q306.964 746.784 306.964 752.201 Q306.964 757.779 303.492 760.881 Q300.02 763.96 293.701 763.96 Q291.525 763.96 289.256 763.59 Q287.011 763.219 284.603 762.478 L284.603 757.779 Q286.687 758.914 288.909 759.469 Q291.131 760.025 293.608 760.025 Q297.613 760.025 299.951 757.918 Q302.288 755.812 302.288 752.201 Q302.288 748.59 299.951 746.483 Q297.613 744.377 293.608 744.377 Q291.733 744.377 289.858 744.793 Q288.006 745.21 286.062 746.09 L286.062 728.729 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M326.177 731.807 Q322.566 731.807 320.737 735.372 Q318.932 738.914 318.932 746.043 Q318.932 753.15 320.737 756.715 Q322.566 760.256 326.177 760.256 Q329.811 760.256 331.617 756.715 Q333.446 753.15 333.446 746.043 Q333.446 738.914 331.617 735.372 Q329.811 731.807 326.177 731.807 M326.177 728.104 Q331.987 728.104 335.043 732.71 Q338.122 737.293 338.122 746.043 Q338.122 754.77 335.043 759.377 Q331.987 763.96 326.177 763.96 Q320.367 763.96 317.288 759.377 Q314.233 754.77 314.233 746.043 Q314.233 737.293 317.288 732.71 Q320.367 728.104 326.177 728.104 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M356.339 731.807 Q352.728 731.807 350.899 735.372 Q349.094 738.914 349.094 746.043 Q349.094 753.15 350.899 756.715 Q352.728 760.256 356.339 760.256 Q359.973 760.256 361.779 756.715 Q363.608 753.15 363.608 746.043 Q363.608 738.914 361.779 735.372 Q359.973 731.807 356.339 731.807 M356.339 728.104 Q362.149 728.104 365.205 732.71 Q368.284 737.293 368.284 746.043 Q368.284 754.77 365.205 759.377 Q362.149 763.96 356.339 763.96 Q350.529 763.96 347.45 759.377 Q344.395 754.77 344.395 746.043 Q344.395 737.293 347.45 732.71 Q350.529 728.104 356.339 728.104 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M284.835 470.796 L307.057 470.796 L307.057 472.787 L294.511 505.356 L289.627 505.356 L301.432 474.731 L284.835 474.731 L284.835 470.796 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M316.224 470.796 L334.58 470.796 L334.58 474.731 L320.506 474.731 L320.506 483.204 Q321.524 482.856 322.543 482.694 Q323.562 482.509 324.58 482.509 Q330.367 482.509 333.747 485.68 Q337.126 488.852 337.126 494.268 Q337.126 499.847 333.654 502.949 Q330.182 506.028 323.862 506.028 Q321.687 506.028 319.418 505.657 Q317.173 505.287 314.765 504.546 L314.765 499.847 Q316.849 500.981 319.071 501.537 Q321.293 502.092 323.77 502.092 Q327.774 502.092 330.112 499.986 Q332.45 497.879 332.45 494.268 Q332.45 490.657 330.112 488.551 Q327.774 486.444 323.77 486.444 Q321.895 486.444 320.02 486.861 Q318.168 487.278 316.224 488.157 L316.224 470.796 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M356.339 473.875 Q352.728 473.875 350.899 477.44 Q349.094 480.981 349.094 488.111 Q349.094 495.217 350.899 498.782 Q352.728 502.324 356.339 502.324 Q359.973 502.324 361.779 498.782 Q363.608 495.217 363.608 488.111 Q363.608 480.981 361.779 477.44 Q359.973 473.875 356.339 473.875 M356.339 470.171 Q362.149 470.171 365.205 474.778 Q368.284 479.361 368.284 488.111 Q368.284 496.838 365.205 501.444 Q362.149 506.028 356.339 506.028 Q350.529 506.028 347.45 501.444 Q344.395 496.838 344.395 488.111 Q344.395 479.361 347.45 474.778 Q350.529 470.171 356.339 470.171 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M256.664 243.489 L264.303 243.489 L264.303 217.123 L255.992 218.79 L255.992 214.53 L264.256 212.864 L268.932 212.864 L268.932 243.489 L276.571 243.489 L276.571 247.424 L256.664 247.424 L256.664 243.489 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M296.015 215.943 Q292.404 215.943 290.576 219.507 Q288.77 223.049 288.77 230.179 Q288.77 237.285 290.576 240.85 Q292.404 244.391 296.015 244.391 Q299.65 244.391 301.455 240.85 Q303.284 237.285 303.284 230.179 Q303.284 223.049 301.455 219.507 Q299.65 215.943 296.015 215.943 M296.015 212.239 Q301.826 212.239 304.881 216.845 Q307.96 221.429 307.96 230.179 Q307.96 238.905 304.881 243.512 Q301.826 248.095 296.015 248.095 Q290.205 248.095 287.127 243.512 Q284.071 238.905 284.071 230.179 Q284.071 221.429 287.127 216.845 Q290.205 212.239 296.015 212.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M326.177 215.943 Q322.566 215.943 320.737 219.507 Q318.932 223.049 318.932 230.179 Q318.932 237.285 320.737 240.85 Q322.566 244.391 326.177 244.391 Q329.811 244.391 331.617 240.85 Q333.446 237.285 333.446 230.179 Q333.446 223.049 331.617 219.507 Q329.811 215.943 326.177 215.943 M326.177 212.239 Q331.987 212.239 335.043 216.845 Q338.122 221.429 338.122 230.179 Q338.122 238.905 335.043 243.512 Q331.987 248.095 326.177 248.095 Q320.367 248.095 317.288 243.512 Q314.233 238.905 314.233 230.179 Q314.233 221.429 317.288 216.845 Q320.367 212.239 326.177 212.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M356.339 215.943 Q352.728 215.943 350.899 219.507 Q349.094 223.049 349.094 230.179 Q349.094 237.285 350.899 240.85 Q352.728 244.391 356.339 244.391 Q359.973 244.391 361.779 240.85 Q363.608 237.285 363.608 230.179 Q363.608 223.049 361.779 219.507 Q359.973 215.943 356.339 215.943 M356.339 212.239 Q362.149 212.239 365.205 216.845 Q368.284 221.429 368.284 230.179 Q368.284 238.905 365.205 243.512 Q362.149 248.095 356.339 248.095 Q350.529 248.095 347.45 243.512 Q344.395 238.905 344.395 230.179 Q344.395 221.429 347.45 216.845 Q350.529 212.239 356.339 212.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip092)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.144 4017.76,230.144 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.44 457.123,1248.23 457.691,1248.11 458.259,1247.91 458.828,1247.6 459.396,1247.25 459.964,1246.81 460.533,1246.3 461.101,1245.68 461.669,1245 462.238,1244.24 462.806,1243.39 463.375,1242.41 463.943,1240.35 464.511,1239.23 465.08,1238.01 465.648,1234.62 466.216,1233.24 466.785,1231.71 467.353,1229.02 467.921,1226.21 468.49,1224.28 469.058,1221.21 469.626,1219.04 470.195,1215.68 470.763,1213.22 471.331,1208.53 471.9,1204.79 472.468,1201.92 473.036,1197.86 473.605,1192.56 474.173,1189.21 474.741,1185.63 475.31,1181.9 475.878,1177.92 476.446,1173.79 477.015,1169.47 477.583,1161.79 478.152,1156.97 478.72,1151.95 479.288,1144.65 479.857,1138.28 480.425,1129.68 480.993,1121.82 481.562,1114.88 482.13,1108.82 482.698,1102.53 483.267,1094.08 483.835,1087.47 484.403,1079.45 484.972,1072.42 485.54,1063.12 486.108,1053.76 486.677,1046.36 487.245,1037.63 487.813,1027.71 488.382,1019.88 488.95,1011.75 489.518,1002.58 490.087,993.262 490.655,984.76 491.224,976.2 491.792,967.425 492.36,955.476 492.929,942.42 493.497,931.486 494.065,920.597 494.634,911.709 495.202,901.62 495.77,892.523 496.339,883.254 496.907,874.162 497.475,862.826 498.044,852.511 498.612,843.304 499.18,832.906 499.749,822.553 500.317,811.12 500.885,801.885 501.454,789.465 502.022,779.152 502.59,766.938 503.159,755.771 503.727,746.559 504.295,736.373 504.864,727.245 505.432,718.263 506.001,709.322 506.569,699.547 507.137,689.611 507.706,678.68 508.274,666.981 508.842,653.548 509.411,644.383 509.979,635.196 510.547,626.265 511.116,613.456 511.684,602.859 512.252,592.671 512.821,584.352 513.389,575.402 513.957,566.55 514.526,555.698 515.094,549.353 515.662,543.117 516.231,535.83 516.799,528.61 517.367,521.638 517.936,509.766 518.504,505.413 519.072,497.857 519.641,489.369 520.209,483.437 520.778,478.364 521.346,472.261 521.914,465.312 522.483,460.667 523.051,456.117 523.619,448.476 524.188,440.118 524.756,436.14 525.324,433.128 525.893,426.987 526.461,421.081 527.029,417.267 527.598,412.394 528.166,408.899 528.734,404.223 529.303,397.667 529.871,394.353 530.439,391.136 531.008,387.985 531.576,384.639 532.144,379.502 532.713,375.332 533.281,371.24 533.85,367.523 534.418,364.856 534.986,360.232 535.555,356.472 536.123,352.759 536.691,349.443 537.26,347.159 537.828,344.935 538.396,342.672 538.965,339.623 539.533,336.404 540.101,334.376 540.67,331.296 541.238,331.281 541.806,327.029 542.375,323.961 542.943,322.313 543.511,318.578 544.08,315.963 544.648,312.513 545.216,310.833 545.785,307.362 546.353,304.062 546.921,300.026 547.49,300.364 548.058,299.31 548.627,298.417 549.195,298.298 549.763,296.076 550.332,296.171 550.9,294.262 551.468,293.295 552.037,291.296 552.605,290.4 553.173,287.582 553.742,286.982 554.31,288.526 554.878,287.695 555.447,283.695 556.015,281.794 556.583,280.934 557.152,277.144 557.72,273.46 558.288,272.324 558.857,270.157 559.425,270.044 559.993,271.797 560.562,270.471 561.13,269.226 561.698,268.019 562.267,267.945 562.835,265.808 563.404,265.793 563.972,265.565 564.54,266.442 565.109,267.259 565.677,266.665 566.245,266.338 566.814,264.75 567.382,265.49 567.95,265.076 568.519,263.481 569.087,261.199 569.655,259.848 570.224,256.602 570.792,256.872 571.36,255.778 571.929,256.877 572.497,257.133 573.065,256.149 573.634,256.064 574.202,253.917 574.77,254.091 575.339,254.114 575.907,252.982 576.476,251.972 577.044,252.154 577.612,255.357 578.181,255.193 578.749,255.119 579.317,253.98 579.886,253.769 580.454,255.068 581.022,253.68 581.591,250.447 582.159,252.598 582.727,252.525 583.296,252.346 583.864,251.957 584.432,251.912 585.001,250.748 585.569,250.71 586.137,250.568 586.706,250.308 587.274,251.232 587.842,250.103 588.411,250.009 588.979,249.014 589.547,248.916 590.116,247.997 590.684,245.643 591.253,245.593 591.821,243.653 592.389,243.975 592.958,241.203 593.526,238.51 594.094,239.978 594.663,239.46 595.231,241.111 595.799,240.555 596.368,239.897 596.936,237.296 597.504,236.926 598.073,238.769 598.641,238.398 599.209,239.817 599.778,239.934 600.346,239.302 600.914,241.901 601.483,243.247 602.051,244.382 602.619,244.527 603.188,244.733 603.756,246.905 604.325,247.7 604.893,246.421 605.461,245.21 606.03,245.281 606.598,243.022 607.166,243.905 607.735,243.733 608.303,243.515 608.871,243.513 609.44,245.383 610.008,245.015 610.576,244.876 611.145,244.547 611.713,244.451 612.281,243.25 612.85,242.354 613.418,242.1 613.986,240.971 614.555,241.957 615.123,241.007 615.691,241.854 616.26,239.746 616.828,238.788 617.396,239.065 617.965,238.015 618.533,237.206 619.102,239.64 619.67,237.642 620.238,237.939 620.807,238.179 621.375,238.551 621.943,238.533 622.512,237.436 623.08,237.5 623.648,238.658 624.217,239.693 624.785,240.952 625.353,241.006 625.922,241.965 626.49,241.929 627.058,241.488 627.627,241.344 628.195,241.169 628.763,239.128 629.332,239.041 629.9,238.05 630.468,239.058 631.037,239.909 631.605,239.76 632.173,240.683 632.742,240.5 633.31,239.313 633.879,239.219 634.447,238.809 635.015,240.895 635.584,242.436 636.152,243.989 636.72,244.359 637.289,244.855 637.857,242.27 638.425,242.825 638.994,241.207 639.562,240.885 640.13,238.442 640.699,237.856 641.267,236.955 641.835,237.202 642.404,234.905 642.972,235.34 643.54,235.193 644.109,235.361 644.677,235.381 645.245,232.315 645.814,233.733 646.382,232.809 646.951,231.596 647.519,231.597 648.087,231.837 648.656,232.209 649.224,233.527 649.792,234.822 650.361,235.913 650.929,233.721 651.497,233.952 652.066,235.144 652.634,234.053 653.202,233.144 653.771,233.242 654.339,234.48 654.907,233.538 655.476,233.603 656.044,233.823 656.612,232.796 657.181,235.066 657.749,233.148 658.317,232.285 658.886,232.593 659.454,232.618 660.022,232.802 660.591,234.814 661.159,235.122 661.728,232.032 662.296,232.126 662.864,232.301 663.433,231.523 664.001,230.682 664.569,229.985 665.138,231.544 665.706,231.953 666.274,235.406 666.843,235.206 667.411,235.433 667.979,236.354 668.548,238.179 669.116,236.131 669.684,236.113 670.253,234.18 670.821,234.233 671.389,234.303 671.958,233.171 672.526,230.229 673.094,231.486 673.663,231.601 674.231,232.875 674.799,234.96 675.368,234.884 675.936,233.795 676.505,234.726 677.073,234.484 677.641,233.449 678.21,234.368 678.778,236.434 679.346,236.317 679.915,235.217 680.483,232.799 681.051,233.976 681.62,230.989 682.188,229.933 682.756,230.353 683.325,230.524 683.893,229.75 684.461,230.07 685.03,229.323 685.598,228.531 686.166,229.905 686.735,230.038 687.303,230.345 687.871,231.764 688.44,230.872 689.008,231.234 689.577,230.656 690.145,230.063 690.713,229.195 691.282,230.682 691.85,231.98 692.418,231.134 692.987,232.271 693.555,232.387 694.123,232.52 694.692,231.632 695.26,234.707 695.828,234.507 696.397,232.341 696.965,234.602 697.533,233.35 698.102,232.384 698.67,233.515 699.238,233.813 699.807,235.207 700.375,233.058 700.943,232.076 701.512,232.189 702.08,232.232 702.648,232.472 703.217,235.696 703.785,234.41 704.354,233.196 704.922,230.379 705.49,233.964 706.059,232.856 706.627,233.034 707.195,229.846 707.764,232.196 708.332,231.181 708.9,229.382 709.469,229.927 710.037,230.356 710.605,232.788 711.174,233.032 711.742,232.117 712.31,232.274 712.879,233.436 713.447,234.395 714.015,233.323 714.584,235.558 715.152,237.623 715.72,237.417 716.289,237.075 716.857,235.787 717.425,236.786 717.994,236.593 718.562,237.47 719.131,238.15 719.699,238.712 720.267,235.314 720.836,234.032 721.404,231.904 721.972,231.911 722.541,231.826 723.109,232.03 723.677,231.295 724.246,231.647 724.814,227.9 725.382,227.113 725.951,228.628 726.519,227.91 727.087,229.453 727.656,231.817 728.224,232.804 728.792,232.747 729.361,232.985 729.929,234.136 730.497,232.929 731.066,232.162 731.634,231.124 732.203,231.229 732.771,232.556 733.339,232.425 733.908,233.476 734.476,232.447 735.044,231.434 735.613,232.801 736.181,232.685 736.749,234.636 737.318,234.218 737.886,234.099 738.454,234.073 739.023,234.89 739.591,234.565 740.159,234.547 740.728,237.397 741.296,235.076 741.864,234.827 742.433,233.547 743.001,233.442 743.569,231.372 744.138,231.451 744.706,232.682 745.274,233.811 745.843,232.743 746.411,231.531 746.98,231.389 747.548,230.115 748.116,229.312 748.685,227.444 749.253,226.634 749.821,224.878 750.39,225.4 750.958,225.991 751.526,226.349 752.095,226.618 752.663,226.896 753.231,227.485 753.8,227.816 754.368,227.982 754.936,230.384 755.505,228.458 756.073,227.694 756.641,229.077 757.21,227.381 757.778,226.847 758.346,227.27 758.915,228.727 759.483,228.818 760.052,229.258 760.62,227.472 761.188,226.645 761.757,224.973 762.325,223.636 762.893,224.41 763.462,225.071 764.03,225.606 764.598,226.234 765.167,227.619 765.735,228.211 766.303,229.554 766.872,229.633 767.44,229.151 768.008,228.471 768.577,227.896 769.145,226.01 769.713,226.244 770.282,227.544 770.85,226.825 771.418,225.244 771.987,223.825 772.555,226.644 773.123,225.91 773.692,225.424 774.26,226.925 774.829,226.382 775.397,226.955 775.965,228.471 776.534,226.758 777.102,229.267 777.67,230.749 778.239,228.78 778.807,230.136 779.375,230.459 779.944,230.766 780.512,231.119 781.08,232.419 781.649,231.577 782.217,231.664 782.785,232.815 783.354,231.875 783.922,231.816 784.49,230.953 785.059,230.249 785.627,229.548 786.195,230.986 786.764,232.224 787.332,234.628 787.9,236.738 788.469,236.635 789.037,238.624 789.606,237.604 790.174,236.242 790.742,234.892 791.311,234.879 791.879,236.719 792.447,236.489 793.016,236.356 793.584,236.391 794.152,235.88 794.721,232.701 795.289,231.794 795.857,230.783 796.426,230.908 796.994,231.421 797.562,232.65 798.131,231.711 798.699,230.781 799.267,228.799 799.836,229.079 800.404,231.563 800.972,233.013 801.541,235.969 802.109,238.725 802.678,239.455 803.246,240.134 803.814,241.709 804.383,242.292 804.951,240.38 805.519,239.82 806.088,240.412 806.656,238.722 807.224,239.475 807.793,237.957 808.361,236.504 808.929,236.155 809.498,237.769 810.066,238.345 810.634,236.979 811.203,237.55 811.771,236.946 812.339,235.49 812.908,234.125 813.476,233.767 814.044,232.553 814.613,232.357 815.181,232.273 815.749,231.249 816.318,232.281 816.886,230.945 817.455,230.816 818.023,230.582 818.591,231.719 819.16,232.653 819.728,233.752 820.296,230.421 820.865,231.532 821.433,233.503 822.001,232.475 822.57,234.481 823.138,235.469 823.706,236.111 824.275,236.71 824.843,237.382 825.411,236.889 825.98,235.462 826.548,234.977 827.116,234.613 827.685,235.393 828.253,235.195 828.821,236.893 829.39,235.231 829.958,233.731 830.526,235.564 831.095,235.974 831.663,231.226 832.232,232.155 832.8,231.792 833.368,229.697 833.937,230.555 834.505,231.439 835.073,231.274 835.642,230.182 836.21,229.98 836.778,226.959 837.347,226.151 837.915,224.305 838.483,223.64 839.052,225.148 839.62,224.244 840.188,224.685 840.757,225.97 841.325,226.165 841.893,227.602 842.462,226.153 843.03,224.414 843.598,225.735 844.167,228.079 844.735,225.166 845.304,225.622 845.872,224.788 846.44,224.227 847.009,224.761 847.577,225.266 848.145,227.009 848.714,225.41 849.282,226.688 849.85,226.003 850.419,226.498 850.987,227.851 851.555,227.024 852.124,227.41 852.692,225.506 853.26,226.023 853.829,227.494 854.397,227.82 854.965,230.196 855.534,229.28 856.102,227.274 856.67,227.718 857.239,229.961 857.807,230.144 858.375,230.539 858.944,230.774 859.512,231.987 860.081,231.202 860.649,231.252 861.217,231.362 861.786,233.285 862.354,235.512 862.922,236.426 863.491,237.986 864.059,237.636 864.627,238.219 865.196,237.653 865.764,237.242 866.332,238.779 866.901,238.082 867.469,234.361 868.037,234.322 868.606,233.992 869.174,234.49 869.742,235.229 870.311,234.96 870.879,234.931 871.447,236.389 872.016,234.804 872.584,234.346 873.152,232.894 873.721,230.631 874.289,231.513 874.858,231.59 875.426,231.538 875.994,231.332 876.563,231.295 877.131,232.102 877.699,232.091 878.268,233.002 878.836,232.963 879.404,234.804 879.973,233.478 880.541,233.273 881.109,234.167 881.678,233.94 882.246,232.599 882.814,232.469 883.383,234.334 883.951,232.936 884.519,232.562 885.088,230.452 885.656,230.374 886.224,232.23 886.793,230.945 887.361,231.95 887.93,231.595 888.498,231.554 889.066,231.326 889.635,229.24 890.203,230.278 890.771,230.243 891.34,230.234 891.908,231.196 892.476,229.063 893.045,229.135 893.613,227.061 894.181,227.078 894.75,225.901 895.318,224.97 895.886,223.118 896.455,224.67 897.023,221.831 897.591,223.361 898.16,225.7 898.728,226.066 899.296,225.259 899.865,223.622 900.433,222.062 901.001,223.778 901.57,225.303 902.138,225.693 902.707,226.86 903.275,226.106 903.843,227.497 904.412,227.6 904.98,228.787 905.548,226.968 906.117,227.342 906.685,228.666 907.253,228.957 907.822,230.177 908.39,230.289 908.958,230.522 909.527,228.651 910.095,226.745 910.663,227.088 911.232,226.6 911.8,228.106 912.368,230.584 912.937,229.796 913.505,232.875 914.073,229.568 914.642,231.791 915.21,232.776 915.779,233.611 916.347,233.707 916.915,234.668 917.484,235.442 918.052,234.378 918.62,233.862 919.189,233.642 919.757,233.402 920.325,233.102 920.894,231.847 921.462,231.846 922.03,230.794 922.599,231.06 923.167,231.772 923.735,231.842 924.304,232.717 924.872,231.647 925.44,233.72 926.009,235.225 926.577,234.621 927.145,236.306 927.714,236.074 928.282,233.622 928.85,233.513 929.419,233.288 929.987,234.129 930.556,234.929 931.124,235.763 931.692,235.273 932.261,234.955 932.829,235.614 933.397,233.18 933.966,231.732 934.534,230.627 935.102,229.505 935.671,226.283 936.239,225.663 936.807,224.933 937.376,224.321 937.944,225.952 938.512,224.223 939.081,224.588 939.649,225.086 940.217,227.52 940.786,229.913 941.354,226.808 941.922,229 942.491,229.022 943.059,230.278 943.627,231.283 944.196,229.03 944.764,228.181 945.333,229.339 945.901,229.475 946.469,231.544 947.038,231.859 947.606,227.612 948.174,227.739 948.743,228.748 949.311,228.625 949.879,229.561 950.448,231.701 951.016,231.657 951.584,231.77 952.153,231.86 952.721,230.672 953.289,231.608 953.858,230.412 954.426,230.453 954.994,230.555 955.563,230.744 956.131,230.756 956.699,230.882 957.268,230.714 957.836,231.905 958.405,228.553 958.973,230.727 959.541,229.688 960.11,227.506 960.678,231.023 961.246,231.111 961.815,232.015 962.383,232.977 962.951,231.828 963.52,231.586 964.088,231.672 964.656,230.703 965.225,231.691 965.793,230.531 966.361,230.66 966.93,232.011 967.498,232.856 968.066,231.863 968.635,230.785 969.203,231.794 969.771,232.686 970.34,230.467 970.908,230.421 971.476,230.424 972.045,229.487 972.613,228.686 973.182,227.724 973.75,226.837 974.318,227.122 974.887,227.515 975.455,229.898 976.023,229.949 976.592,228.913 977.16,230.969 977.728,229.956 978.297,225.919 978.865,228.059 979.433,227.246 980.002,228.28 980.57,230.398 981.138,231.236 981.707,229.96 982.275,230.015 982.843,230.921 983.412,230.836 983.98,231.731 984.548,231.81 985.117,232.887 985.685,232.454 986.253,231.441 986.822,232.482 987.39,232.72 987.959,231.493 988.527,231.285 989.095,230.199 989.664,230.121 990.232,231.072 990.8,234.138 991.369,235.802 991.937,233.282 992.505,231.767 993.074,229.399 993.642,231.497 994.21,231.247 994.779,231.26 995.347,231.142 995.915,229.977 996.484,229.858 997.052,228.694 997.62,229.067 998.189,230.091 998.757,230.013 999.325,229.958 999.894,227.869 1000.46,230.235 1001.03,232.381 1001.6,230.142 1002.17,230.293 1002.74,231.253 1003.3,230.976 1003.87,231.892 1004.44,231.735 1005.01,230.558 1005.58,229.358 1006.15,229.568 1006.71,229.436 1007.28,227.358 1007.85,227.502 1008.42,228.812 1008.99,229.823 1009.56,231.185 1010.12,231.179 1010.69,229.269 1011.26,229.24 1011.83,228.432 1012.4,227.535 1012.97,228.802 1013.53,227.855 1014.1,229.013 1014.67,231.245 1015.24,230.216 1015.81,228.243 1016.38,231.424 1016.94,231.298 1017.51,231.189 1018.08,232.092 1018.65,232.003 1019.22,230.889 1019.79,231.701 1020.35,231.638 1020.92,230.448 1021.49,228.226 1022.06,228.091 1022.63,231.408 1023.2,233.357 1023.76,235.361 1024.33,233.76 1024.9,232.451 1025.47,231.283 1026.04,233.197 1026.61,235.013 1027.17,234.446 1027.74,232.985 1028.31,231.687 1028.88,232.349 1029.45,233.273 1030.02,231.748 1030.58,230.529 1031.15,230.504 1031.72,231.305 1032.29,230.087 1032.86,231.149 1033.43,231.043 1033.99,230.678 1034.56,232.853 1035.13,234.722 1035.7,234.524 1036.27,233.97 1036.84,232.581 1037.4,232.522 1037.97,231.298 1038.54,230.093 1039.11,228.947 1039.68,228.175 1040.25,227.201 1040.81,227.528 1041.38,229.597 1041.95,229.571 1042.52,227.454 1043.09,225.691 1043.66,226.188 1044.22,226.545 1044.79,226.789 1045.36,227.024 1045.93,226.159 1046.5,226.357 1047.07,225.697 1047.63,223.979 1048.2,221.409 1048.77,219.895 1049.34,222.911 1049.91,225.72 1050.48,226.945 1051.05,229.217 1051.61,228.277 1052.18,228.571 1052.75,227.634 1053.32,225.62 1053.89,226.253 1054.46,228.699 1055.02,228.724 1055.59,229.872 1056.16,230.883 1056.73,233.105 1057.3,232.957 1057.87,231.713 1058.43,233.704 1059,234.758 1059.57,235.545 1060.14,234.32 1060.71,232.884 1061.28,231.68 1061.84,230.508 1062.41,229.437 1062.98,230.259 1063.55,231.43 1064.12,230.22 1064.69,228.284 1065.25,227.37 1065.82,226.576 1066.39,226.839 1066.96,228.187 1067.53,229.46 1068.1,228.461 1068.66,229.588 1069.23,229.623 1069.8,231.902 1070.37,232.804 1070.94,232.729 1071.51,234.286 1072.07,234.868 1072.64,233.636 1073.21,235.476 1073.78,234.82 1074.35,235.454 1074.92,234.189 1075.48,232.651 1076.05,233.747 1076.62,231.551 1077.19,228.613 1077.76,228.743 1078.33,227.775 1078.89,229.081 1079.46,229.3 1080.03,231.435 1080.6,231.4 1081.17,230.041 1081.74,230.074 1082.3,232.221 1082.87,234.15 1083.44,234.857 1084.01,233.31 1084.58,232.005 1085.15,231.789 1085.71,229.542 1086.28,229.382 1086.85,230.237 1087.42,230.115 1087.99,230.173 1088.56,227.936 1089.12,229.056 1089.69,228.06 1090.26,229.271 1090.83,225.139 1091.4,223.315 1091.97,221.765 1092.53,222.413 1093.1,222.853 1093.67,223.368 1094.24,223.945 1094.81,222.568 1095.38,224.163 1095.94,225.859 1096.51,224.403 1097.08,226.918 1097.65,228.116 1098.22,229.51 1098.79,228.581 1099.35,228.756 1099.92,228.727 1100.49,229.888 1101.06,230.886 1101.63,233.027 1102.2,232.906 1102.76,232.9 1103.33,234.127 1103.9,234.978 1104.47,234.645 1105.04,235.461 1105.61,234.061 1106.17,234.924 1106.74,232.682 1107.31,231.456 1107.88,231.193 1108.45,231.072 1109.02,231.923 1109.58,232.09 1110.15,231.982 1110.72,230.774 1111.29,229.926 1111.86,230.811 1112.43,231.09 1112.99,229.087 1113.56,228.536 1114.13,229.492 1114.7,229.642 1115.27,230.912 1115.84,227.85 1116.4,230.064 1116.97,228.864 1117.54,230.297 1118.11,229.089 1118.68,230.077 1119.25,230.021 1119.81,230.058 1120.38,231.101 1120.95,229.858 1121.52,231.994 1122.09,230.827 1122.66,231.767 1123.23,228.595 1123.79,227.674 1124.36,229.025 1124.93,229.02 1125.5,230.234 1126.07,231.122 1126.64,230.061 1127.2,227.237 1127.77,227.482 1128.34,227.644 1128.91,229.793 1129.48,231.867 1130.05,231.826 1130.61,232.746 1131.18,231.737 1131.75,232.808 1132.32,233.858 1132.89,234.339 1133.46,234.213 1134.02,234.91 1134.59,235.38 1135.16,235.009 1135.73,233.725 1136.3,235.467 1136.87,234.991 1137.43,235.649 1138,234.089 1138.57,231.757 1139.14,229.631 1139.71,229.683 1140.28,229.67 1140.84,231.935 1141.41,230.875 1141.98,230.93 1142.55,230.994 1143.12,228.846 1143.69,228.862 1144.25,227.88 1144.82,229.008 1145.39,229.038 1145.96,228.06 1146.53,228.193 1147.1,227.233 1147.66,230.492 1148.23,230.417 1148.8,229.249 1149.37,229.194 1149.94,231.147 1150.51,230.995 1151.07,231.702 1151.64,229.355 1152.21,228.46 1152.78,229.92 1153.35,228.882 1153.92,227.917 1154.48,226.103 1155.05,225.304 1155.62,224.485 1156.19,226.838 1156.76,228.135 1157.33,228.364 1157.89,228.732 1158.46,230.001 1159.03,231.262 1159.6,233.342 1160.17,233.039 1160.74,230.863 1161.3,228.578 1161.87,230.66 1162.44,230.389 1163.01,231.251 1163.58,230.296 1164.15,230.169 1164.71,229.071 1165.28,229.303 1165.85,229.401 1166.42,230.46 1166.99,231.467 1167.56,228.218 1168.12,227.468 1168.69,226.478 1169.26,225.669 1169.83,225.963 1170.4,226.505 1170.97,226.796 1171.53,225.06 1172.1,226.575 1172.67,227.841 1173.24,228 1173.81,229.179 1174.38,229.516 1174.94,230.702 1175.51,230.751 1176.08,230.899 1176.65,232.906 1177.22,232.817 1177.79,233.61 1178.35,233.653 1178.92,233.445 1179.49,233.37 1180.06,234.372 1180.63,234.175 1181.2,232.101 1181.76,231.191 1182.33,230.162 1182.9,229.197 1183.47,230.299 1184.04,229.068 1184.61,226.058 1185.17,226.284 1185.74,228.746 1186.31,227.879 1186.88,230.186 1187.45,231.238 1188.02,233.38 1188.58,233.139 1189.15,233.037 1189.72,233.878 1190.29,233.551 1190.86,233.197 1191.43,233.07 1192,231.89 1192.56,230.693 1193.13,230.624 1193.7,231.28 1194.27,232.164 1194.84,231.139 1195.41,230.891 1195.97,228.731 1196.54,227.67 1197.11,227.875 1197.68,227.172 1198.25,227.526 1198.82,225.612 1199.38,225.828 1199.95,226.178 1200.52,223.235 1201.09,223.884 1201.66,224.285 1202.23,222.629 1202.79,222.128 1203.36,223.651 1203.93,227.123 1204.5,227.226 1205.07,227.594 1205.64,228.842 1206.2,227.829 1206.77,226.202 1207.34,227.601 1207.91,226.84 1208.48,227.973 1209.05,228.161 1209.61,230.449 1210.18,231.502 1210.75,229.233 1211.32,232.296 1211.89,229.964 1212.46,230.041 1213.02,232.19 1213.59,232.015 1214.16,232.846 1214.73,231.523 1215.3,232.648 1215.87,233.521 1216.43,232.147 1217,233.198 1217.57,232.999 1218.14,233.162 1218.71,236.138 1219.28,236.66 1219.84,236.204 1220.41,232.368 1220.98,232.32 1221.55,231.102 1222.12,232.068 1222.69,229.884 1223.25,228.678 1223.82,228.759 1224.39,229.053 1224.96,228.291 1225.53,228.601 1226.1,227.709 1226.66,229.032 1227.23,228.946 1227.8,229.011 1228.37,230.071 1228.94,229.241 1229.51,229.461 1230.07,231.716 1230.64,229.674 1231.21,227.947 1231.78,230.419 1232.35,231.603 1232.92,229.416 1233.48,230.543 1234.05,229.562 1234.62,228.769 1235.19,226.844 1235.76,228.088 1236.33,228.078 1236.89,229.223 1237.46,226.208 1238.03,226.41 1238.6,225.605 1239.17,228.156 1239.74,229.424 1240.3,229.643 1240.87,228.608 1241.44,228.748 1242.01,230.068 1242.58,231.32 1243.15,232.543 1243.71,233.287 1244.28,229.262 1244.85,228.124 1245.42,228.361 1245.99,227.761 1246.56,228.973 1247.12,229.21 1247.69,227.534 1248.26,227.729 1248.83,230.03 1249.4,229.306 1249.97,231.55 1250.53,233.642 1251.1,232.615 1251.67,230.676 1252.24,228.956 1252.81,229.174 1253.38,233.572 1253.94,233.64 1254.51,236.608 1255.08,234.204 1255.65,234.213 1256.22,234 1256.79,233.839 1257.35,232.402 1257.92,231.455 1258.49,232.422 1259.06,231.435 1259.63,231.708 1260.2,233.891 1260.76,235.901 1261.33,235.455 1261.9,233.868 1262.47,234.495 1263.04,233.044 1263.61,232.881 1264.18,234.9 1264.74,236.627 1265.31,237.243 1265.88,236.669 1266.45,236.393 1267.02,235.998 1267.59,232.361 1268.15,231.115 1268.72,230.844 1269.29,232.775 1269.86,233.551 1270.43,234.286 1271,233.111 1271.56,232.875 1272.13,233.387 1272.7,235.277 1273.27,234.096 1273.84,232.846 1274.41,232.84 1274.97,229.593 1275.54,229.755 1276.11,228.681 1276.68,228.67 1277.25,228.671 1277.82,227.559 1278.38,222.511 1278.95,224.112 1279.52,224.324 1280.09,224.632 1280.66,223.989 1281.23,226.479 1281.79,226.768 1282.36,224.975 1282.93,226.577 1283.5,226.887 1284.07,228.234 1284.64,227.348 1285.2,228.516 1285.77,229.91 1286.34,231.967 1286.91,233.986 1287.48,232.842 1288.05,231.587 1288.61,230.471 1289.18,229.263 1289.75,230.385 1290.32,230.4 1290.89,230.518 1291.46,232.512 1292.02,231.078 1292.59,229.91 1293.16,232.091 1293.73,230.969 1294.3,233.986 1294.87,233.526 1295.43,232.034 1296,230.971 1296.57,231.174 1297.14,229.932 1297.71,229.846 1298.28,229.945 1298.84,230.879 1299.41,232.899 1299.98,232.702 1300.55,231.373 1301.12,230.072 1301.69,229.965 1302.25,230.894 1302.82,228.837 1303.39,228.964 1303.96,228.77 1304.53,229.932 1305.1,232.913 1305.66,234.007 1306.23,231.672 1306.8,232.417 1307.37,233.292 1307.94,233.242 1308.51,234.928 1309.07,237.635 1309.64,234.981 1310.21,232.471 1310.78,234.265 1311.35,233.776 1311.92,232.434 1312.48,232.283 1313.05,232.192 1313.62,229.002 1314.19,231.19 1314.76,231.107 1315.33,228.123 1315.89,227.211 1316.46,229.483 1317.03,228.412 1317.6,230.54 1318.17,230.633 1318.74,231.56 1319.3,231.383 1319.87,230.114 1320.44,230.92 1321.01,230.87 1321.58,230.831 1322.15,229.607 1322.71,229.577 1323.28,230.548 1323.85,231.413 1324.42,232.066 1324.99,232.001 1325.56,232.716 1326.12,230.377 1326.69,230.143 1327.26,230.198 1327.83,229.339 1328.4,228.391 1328.97,228.41 1329.53,229.536 1330.1,228.731 1330.67,227.869 1331.24,229.035 1331.81,228.191 1332.38,229.225 1332.94,227.166 1333.51,227.225 1334.08,228.485 1334.65,227.403 1335.22,225.684 1335.79,225.933 1336.36,222.268 1336.92,223.981 1337.49,223.463 1338.06,223.805 1338.63,228.23 1339.2,228.344 1339.77,230.45 1340.33,229.501 1340.9,229.397 1341.47,229.498 1342.04,227.394 1342.61,228.762 1343.18,227.828 1343.74,225.712 1344.31,227.316 1344.88,226.408 1345.45,223.615 1346.02,224.1 1346.59,227.658 1347.15,227.944 1347.72,229.19 1348.29,230.23 1348.86,230.41 1349.43,228.164 1350,227.16 1350.56,227.485 1351.13,227.616 1351.7,228.661 1352.27,228.753 1352.84,227.938 1353.41,228.294 1353.97,229.273 1354.54,230.83 1355.11,227.632 1355.68,225.921 1356.25,230.381 1356.82,230.541 1357.38,230.624 1357.95,229.715 1358.52,229.677 1359.09,229.641 1359.66,230.647 1360.23,230.557 1360.79,229.637 1361.36,228.693 1361.93,225.7 1362.5,227.073 1363.07,227.409 1363.64,227.788 1364.2,230.217 1364.77,231.394 1365.34,231.36 1365.91,231.443 1366.48,232.281 1367.05,233.306 1367.61,234.067 1368.18,233.972 1368.75,232.681 1369.32,233.419 1369.89,233.12 1370.46,231.701 1371.02,230.777 1371.59,229.731 1372.16,231.003 1372.73,230.141 1373.3,232.293 1373.87,231.225 1374.43,231.219 1375,231.19 1375.57,232.103 1376.14,232.949 1376.71,229.807 1377.28,227.848 1377.84,228.305 1378.41,227.479 1378.98,227.495 1379.55,229.899 1380.12,231.017 1380.69,230.067 1381.25,229.114 1381.82,227.978 1382.39,227.113 1382.96,227.534 1383.53,228.823 1384.1,229.049 1384.66,228.113 1385.23,229.31 1385.8,230.593 1386.37,231.582 1386.94,231.52 1387.51,231.495 1388.07,232.67 1388.64,231.636 1389.21,229.683 1389.78,231.596 1390.35,232.525 1390.92,235.449 1391.48,231.804 1392.05,233.697 1392.62,233.483 1393.19,231.254 1393.76,230.971 1394.33,229.987 1394.89,229.174 1395.46,229.187 1396.03,229.253 1396.6,229.269 1397.17,229.222 1397.74,228.238 1398.3,228.491 1398.87,228.656 1399.44,230.941 1400.01,230.628 1400.58,230.729 1401.15,228.809 1401.71,227.9 1402.28,227.286 1402.85,228.667 1403.42,229.828 1403.99,229.788 1404.56,231.746 1405.13,232.688 1405.69,234.644 1406.26,233.46 1406.83,235.341 1407.4,234.894 1407.97,234.515 1408.54,235.124 1409.1,234.771 1409.67,235.585 1410.24,238.255 1410.81,237.669 1411.38,238.099 1411.95,235.545 1412.51,235.157 1413.08,234.84 1413.65,238.593 1414.22,237.939 1414.79,238.268 1415.36,237.584 1415.92,237.231 1416.49,238.741 1417.06,236.962 1417.63,235.573 1418.2,234.193 1418.77,232.76 1419.33,233.378 1419.9,234.259 1420.47,233.789 1421.04,231.621 1421.61,231.427 1422.18,229.269 1422.74,229.126 1423.31,227.864 1423.88,228.026 1424.45,229.063 1425.02,231.07 1425.59,231.943 1426.15,231.71 1426.72,231.438 1427.29,231.332 1427.86,232.069 1428.43,230.481 1429,228.174 1429.56,228.418 1430.13,229.352 1430.7,228.062 1431.27,226.964 1431.84,226.149 1432.41,221.172 1432.97,221.825 1433.54,225.427 1434.11,228.861 1434.68,228.941 1435.25,229.902 1435.82,227.84 1436.38,224.946 1436.95,227.258 1437.52,228.435 1438.09,227.379 1438.66,226.532 1439.23,228.749 1439.79,231.92 1440.36,229.75 1440.93,230.523 1441.5,230.387 1442.07,229.191 1442.64,228.418 1443.2,229.445 1443.77,229.45 1444.34,229.471 1444.91,228.462 1445.48,227.767 1446.05,228.785 1446.61,230.892 1447.18,234.01 1447.75,233.799 1448.32,233.623 1448.89,232.17 1449.46,235.099 1450.02,233.591 1450.59,235.271 1451.16,236.869 1451.73,236.164 1452.3,237.838 1452.87,237.028 1453.43,235.393 1454,235.93 1454.57,235.27 1455.14,233.731 1455.71,234.13 1456.28,233.452 1456.84,233.892 1457.41,232.376 1457.98,231.065 1458.55,231.871 1459.12,231.521 1459.69,233.17 1460.25,231.735 1460.82,229.265 1461.39,230.191 1461.96,228.966 1462.53,228.829 1463.1,228.909 1463.66,226.742 1464.23,224.972 1464.8,221.377 1465.37,220.782 1465.94,221.377 1466.51,222.72 1467.07,222.065 1467.64,223.532 1468.21,224.806 1468.78,222.94 1469.35,226.608 1469.92,228.807 1470.48,228.851 1471.05,227.876 1471.62,227.001 1472.19,228.157 1472.76,229.358 1473.33,228.234 1473.89,226.36 1474.46,226.738 1475.03,227.135 1475.6,223.159 1476.17,223.651 1476.74,221.016 1477.31,223.741 1477.87,222.956 1478.44,221.348 1479.01,221.724 1479.58,224.356 1480.15,223.569 1480.72,223.132 1481.28,224.225 1481.85,224.74 1482.42,227.278 1482.99,228.469 1483.56,228.865 1484.13,230.115 1484.69,229.186 1485.26,229.395 1485.83,228.51 1486.4,227.7 1486.97,228.071 1487.54,229.383 1488.1,228.543 1488.67,229.685 1489.24,231.963 1489.81,232.781 1490.38,232.512 1490.95,232.173 1491.51,232.206 1492.08,233.28 1492.65,232.989 1493.22,232.847 1493.79,234.735 1494.36,234.66 1494.92,234.291 1495.49,230.723 1496.06,230.707 1496.63,232.69 1497.2,232.663 1497.77,233.341 1498.33,232.086 1498.9,233.749 1499.47,231.549 1500.04,229.448 1500.61,229.427 1501.18,228.632 1501.74,228.699 1502.31,227.896 1502.88,227.176 1503.45,228.478 1504.02,228.76 1504.59,228.816 1505.15,229.973 1505.72,229.104 1506.29,228.532 1506.86,226.787 1507.43,227.051 1508,227.251 1508.56,226.183 1509.13,226.747 1509.7,229.252 1510.27,229.569 1510.84,229.578 1511.41,229.611 1511.97,231.493 1512.54,228.294 1513.11,226.501 1513.68,225.566 1514.25,225.091 1514.82,225.677 1515.38,227.332 1515.95,226.39 1516.52,228.912 1517.09,229.052 1517.66,233.271 1518.23,232.059 1518.79,232.985 1519.36,233.016 1519.93,233.808 1520.5,234.749 1521.07,235.429 1521.64,234.013 1522.2,233.697 1522.77,231.489 1523.34,231.378 1523.91,231.362 1524.48,230.034 1525.05,227.029 1525.61,228.347 1526.18,229.493 1526.75,230.625 1527.32,230.75 1527.89,232.831 1528.46,232.6 1529.02,232.386 1529.59,233.231 1530.16,228.937 1530.73,228.749 1531.3,229.025 1531.87,226.222 1532.43,225.474 1533,225.993 1533.57,224.187 1534.14,223.975 1534.71,227.718 1535.28,227.033 1535.84,231.547 1536.41,231.48 1536.98,232.403 1537.55,232.353 1538.12,232.155 1538.69,230.099 1539.25,229.166 1539.82,229.238 1540.39,229.139 1540.96,229.316 1541.53,228.379 1542.1,230.692 1542.66,231.606 1543.23,231.372 1543.8,233.307 1544.37,231.184 1544.94,234.226 1545.51,232.786 1546.08,231.706 1546.64,233.598 1547.21,233.451 1547.78,233.319 1548.35,231.131 1548.92,231.965 1549.49,234.018 1550.05,232.971 1550.62,234.009 1551.19,234.91 1551.76,233.508 1552.33,232.13 1552.9,232.939 1553.46,230.799 1554.03,229.755 1554.6,226.709 1555.17,226.869 1555.74,229.283 1556.31,230.277 1556.87,229.217 1557.44,229.235 1558.01,229.386 1558.58,228.563 1559.15,228.726 1559.72,225.847 1560.28,227.197 1560.85,227.483 1561.42,229.764 1561.99,231.918 1562.56,232.793 1563.13,231.707 1563.69,230.702 1564.26,229.746 1564.83,228.767 1565.4,227.796 1565.97,228.846 1566.54,228.916 1567.1,229.125 1567.67,228.176 1568.24,228.318 1568.81,228.512 1569.38,228.649 1569.95,228.813 1570.51,228.104 1571.08,228.319 1571.65,228.42 1572.22,225.308 1572.79,227.739 1573.36,229.962 1573.92,229.027 1574.49,229.303 1575.06,230.465 1575.63,231.401 1576.2,229.455 1576.77,229.49 1577.33,231.772 1577.9,232.832 1578.47,236.78 1579.04,236.49 1579.61,232.149 1580.18,230.938 1580.74,229.918 1581.31,230.987 1581.88,232.755 1582.45,234.343 1583.02,231.813 1583.59,232.757 1584.15,232.596 1584.72,232.566 1585.29,235.483 1585.86,235.051 1586.43,235.715 1587,234.512 1587.56,232.863 1588.13,233.882 1588.7,233.652 1589.27,234.301 1589.84,233.158 1590.41,232.796 1590.97,230.557 1591.54,231.623 1592.11,232.382 1592.68,231.126 1593.25,225.878 1593.82,227.125 1594.38,226.269 1594.95,228.532 1595.52,229.492 1596.09,227.424 1596.66,226.954 1597.23,227.336 1597.79,226.905 1598.36,225.986 1598.93,226.445 1599.5,225.909 1600.07,226.217 1600.64,226.335 1601.2,226.468 1601.77,227.879 1602.34,227.251 1602.91,226.272 1603.48,225.556 1604.05,224.759 1604.61,224.002 1605.18,225.603 1605.75,224.912 1606.32,225.413 1606.89,225.714 1607.46,227.027 1608.02,226.216 1608.59,225.347 1609.16,225.592 1609.73,227.124 1610.3,227.473 1610.87,227.682 1611.43,230.038 1612,231.083 1612.57,231.074 1613.14,230.06 1613.71,228.293 1614.28,230.449 1614.84,232.698 1615.41,232.982 1615.98,231.842 1616.55,233.594 1617.12,234.544 1617.69,235.257 1618.26,238.375 1618.82,237.997 1619.39,237.4 1619.96,238.981 1620.53,238.592 1621.1,235.008 1621.67,232.566 1622.23,231.445 1622.8,231.462 1623.37,234.758 1623.94,234.556 1624.51,234.274 1625.08,233.933 1625.64,233.653 1626.21,232.298 1626.78,229.13 1627.35,230.417 1627.92,229.209 1628.49,230.514 1629.05,230.406 1629.62,231.374 1630.19,230.327 1630.76,232.357 1631.33,235.216 1631.9,235.036 1632.46,234.652 1633.03,233.146 1633.6,232.125 1634.17,229.848 1634.74,231.035 1635.31,231.841 1635.87,231.641 1636.44,232.518 1637.01,235.316 1637.58,233.861 1638.15,233.608 1638.72,234.387 1639.28,232.784 1639.85,231.608 1640.42,232.403 1640.99,233.158 1641.56,229.783 1642.13,229.679 1642.69,229.552 1643.26,227.463 1643.83,225.446 1644.4,225.623 1644.97,225.87 1645.54,227.183 1646.1,227.43 1646.67,227.579 1647.24,228.851 1647.81,228.943 1648.38,229.831 1648.95,230.769 1649.51,231.383 1650.08,231.31 1650.65,229.086 1651.22,228.162 1651.79,228.093 1652.36,228.266 1652.92,229.363 1653.49,229.494 1654.06,229.401 1654.63,226.345 1655.2,226.725 1655.77,226.044 1656.33,224.35 1656.9,226.726 1657.47,227.189 1658.04,229.5 1658.61,228.462 1659.18,228.425 1659.74,229.608 1660.31,228.628 1660.88,227.692 1661.45,230.985 1662.02,232.856 1662.59,231.711 1663.15,232.58 1663.72,234.322 1664.29,232.983 1664.86,232.717 1665.43,232.769 1666,233.753 1666.56,233.376 1667.13,234.209 1667.7,232.914 1668.27,231.614 1668.84,230.561 1669.41,230.652 1669.97,230.721 1670.54,230.685 1671.11,229.668 1671.68,228.626 1672.25,229.638 1672.82,229.821 1673.38,228.895 1673.95,228.879 1674.52,227.766 1675.09,229.004 1675.66,229.018 1676.23,227.026 1676.79,227.155 1677.36,228.342 1677.93,227.498 1678.5,230.567 1679.07,232.781 1679.64,234.672 1680.2,235.267 1680.77,234.919 1681.34,234.499 1681.91,234.371 1682.48,233.95 1683.05,233.734 1683.61,234.817 1684.18,232.122 1684.75,231.809 1685.32,232.786 1685.89,232.483 1686.46,232.286 1687.02,233.111 1687.59,232.56 1688.16,234.506 1688.73,235.22 1689.3,235.719 1689.87,237.612 1690.44,234.832 1691,233.245 1691.57,230.811 1692.14,231.605 1692.71,232.119 1693.28,232.011 1693.85,230.62 1694.41,229.457 1694.98,227.569 1695.55,226.658 1696.12,229.913 1696.69,225.656 1697.26,227.7 1697.82,230.974 1698.39,230.858 1698.96,230.699 1699.53,230.514 1700.1,229.42 1700.67,228.337 1701.23,228.603 1701.8,226.629 1702.37,226.775 1702.94,226.994 1703.51,228.024 1704.08,229.113 1704.64,230.133 1705.21,230.085 1705.78,230.29 1706.35,229.12 1706.92,230.251 1707.49,227.468 1708.05,225.798 1708.62,226.983 1709.19,226.79 1709.76,225.914 1710.33,227.03 1710.9,227.062 1711.46,228.205 1712.03,227.28 1712.6,229.48 1713.17,230.533 1713.74,230.38 1714.31,230.318 1714.87,228.203 1715.44,227.142 1716.01,229.512 1716.58,227.604 1717.15,226.74 1717.72,228.041 1718.28,228.145 1718.85,229.07 1719.42,227.949 1719.99,228.977 1720.56,229.85 1721.13,227.789 1721.69,227.09 1722.26,229.615 1722.83,231.756 1723.4,231.74 1723.97,230.588 1724.54,230.676 1725.1,229.727 1725.67,227.669 1726.24,229.828 1726.81,226.745 1727.38,227.984 1727.95,229.199 1728.51,229.347 1729.08,229.624 1729.65,229.605 1730.22,231.717 1730.79,231.809 1731.36,232.887 1731.92,230.794 1732.49,229.709 1733.06,230.745 1733.63,228.878 1734.2,229.906 1734.77,228.914 1735.33,228.803 1735.9,228.882 1736.47,229.05 1737.04,229.048 1737.61,229.157 1738.18,228.1 1738.74,229.185 1739.31,229.367 1739.88,228.477 1740.45,227.657 1741.02,226.744 1741.59,228.965 1742.15,228.148 1742.72,230.314 1743.29,230.498 1743.86,228.307 1744.43,229.267 1745,229.438 1745.56,228.686 1746.13,228.794 1746.7,228.636 1747.27,226.71 1747.84,225.922 1748.41,228.382 1748.97,229.689 1749.54,232.708 1750.11,230.211 1750.68,226.955 1751.25,227.07 1751.82,226.497 1752.38,226.779 1752.95,226.877 1753.52,225.084 1754.09,225.319 1754.66,225.753 1755.23,225.217 1755.79,225.557 1756.36,223.846 1756.93,224.526 1757.5,228.291 1758.07,229.744 1758.64,228.814 1759.21,231.003 1759.77,231.999 1760.34,230.844 1760.91,230.63 1761.48,230.843 1762.05,230.597 1762.62,230.616 1763.18,228.53 1763.75,228.748 1764.32,228.953 1764.89,228.136 1765.46,229.329 1766.03,228.523 1766.59,231.885 1767.16,231.928 1767.73,233.049 1768.3,233.892 1768.87,233.656 1769.44,234.577 1770,232.39 1770.57,231.249 1771.14,231.346 1771.71,230.254 1772.28,230.419 1772.85,230.355 1773.41,231.476 1773.98,232.38 1774.55,232.306 1775.12,230.367 1775.69,228.463 1776.26,229.786 1776.82,226.583 1777.39,228.9 1777.96,230.026 1778.53,232.129 1779.1,230.915 1779.67,233.073 1780.23,230.658 1780.8,231.606 1781.37,233.512 1781.94,233.186 1782.51,234.008 1783.08,233.435 1783.64,233.242 1784.21,235.081 1784.78,234.884 1785.35,232.575 1785.92,232.324 1786.49,231.442 1787.05,231.294 1787.62,231.406 1788.19,229.369 1788.76,228.583 1789.33,228.835 1789.9,233.231 1790.46,233.017 1791.03,235.027 1791.6,233.581 1792.17,233.21 1792.74,231.82 1793.31,233.516 1793.87,233.428 1794.44,233.058 1795.01,230.791 1795.58,229.7 1796.15,231.417 1796.72,232.371 1797.28,231.143 1797.85,231.998 1798.42,232.917 1798.99,235.909 1799.56,236.466 1800.13,235.009 1800.69,234.618 1801.26,231.993 1801.83,232.051 1802.4,232.808 1802.97,232.37 1803.54,232.279 1804.1,231.892 1804.67,231.643 1805.24,229.386 1805.81,227.307 1806.38,229.481 1806.95,232.349 1807.51,233.193 1808.08,232.907 1808.65,231.776 1809.22,231.748 1809.79,230.438 1810.36,232.526 1810.92,234.426 1811.49,233.986 1812.06,231.486 1812.63,232.27 1813.2,232.145 1813.77,231.042 1814.33,232.016 1814.9,232.774 1815.47,233.59 1816.04,235.234 1816.61,234.446 1817.18,237.097 1817.74,236.385 1818.31,237.746 1818.88,237.039 1819.45,236.48 1820.02,233.841 1820.59,234.443 1821.15,233 1821.72,232.572 1822.29,231.351 1822.86,231.032 1823.43,230.905 1824,231.572 1824.56,230.161 1825.13,229.11 1825.7,228.97 1826.27,228.004 1826.84,227.987 1827.41,230.092 1827.97,228.945 1828.54,228.901 1829.11,229.081 1829.68,230.015 1830.25,228.735 1830.82,227.959 1831.39,227.905 1831.95,226.755 1832.52,225.943 1833.09,227.259 1833.66,227.536 1834.23,224.37 1834.8,224.79 1835.36,228.01 1835.93,227.129 1836.5,226.227 1837.07,226.333 1837.64,226.517 1838.21,226.634 1838.77,224.898 1839.34,225.214 1839.91,224.261 1840.48,223.646 1841.05,222.838 1841.62,221.272 1842.18,221.95 1842.75,223.313 1843.32,222.822 1843.89,222.537 1844.46,224.08 1845.03,224.512 1845.59,226.057 1846.16,225.327 1846.73,225.822 1847.3,225.144 1847.87,226.499 1848.44,227.001 1849,227.174 1849.57,227.71 1850.14,227.849 1850.71,229.939 1851.28,228.951 1851.85,228.871 1852.41,228.977 1852.98,229.083 1853.55,226.949 1854.12,226.102 1854.69,225.565 1855.26,226.909 1855.82,227.088 1856.39,227.241 1856.96,228.653 1857.53,228.769 1858.1,227.819 1858.67,228.32 1859.23,228.598 1859.8,228.621 1860.37,227.829 1860.94,224.908 1861.51,224.728 1862.08,225.201 1862.64,227.63 1863.21,227.919 1863.78,225.735 1864.35,228.979 1864.92,231.249 1865.49,232.407 1866.05,232.424 1866.62,234.458 1867.19,233.217 1867.76,233.101 1868.33,231.93 1868.9,230.891 1869.46,229.007 1870.03,229.319 1870.6,229.383 1871.17,228.499 1871.74,229.614 1872.31,228.913 1872.87,227.098 1873.44,227.582 1874.01,228.916 1874.58,228.037 1875.15,226.285 1875.72,227.576 1876.28,227.864 1876.85,230.339 1877.42,229.501 1877.99,227.469 1878.56,228.804 1879.13,228.009 1879.69,229.153 1880.26,231.377 1880.83,234.267 1881.4,234.068 1881.97,234.903 1882.54,234.813 1883.1,233.636 1883.67,235.496 1884.24,232.951 1884.81,232.75 1885.38,231.406 1885.95,233.476 1886.51,234.098 1887.08,233.747 1887.65,232.455 1888.22,232.536 1888.79,230.373 1889.36,231.632 1889.92,232.777 1890.49,231.469 1891.06,229.373 1891.63,230.387 1892.2,229.287 1892.77,229.282 1893.33,229.507 1893.9,231.478 1894.47,230.399 1895.04,227.16 1895.61,224.226 1896.18,225.677 1896.74,226.06 1897.31,226.326 1897.88,223.631 1898.45,225.046 1899.02,224.415 1899.59,226.83 1900.16,227.936 1900.72,228.146 1901.29,230.505 1901.86,229.532 1902.43,228.611 1903,228.811 1903.57,228.028 1904.13,227.321 1904.7,230.988 1905.27,230.246 1905.84,230.415 1906.41,231.415 1906.98,232.166 1907.54,231.022 1908.11,233.331 1908.68,233.326 1909.25,234.334 1909.82,234.144 1910.39,234.046 1910.95,233.894 1911.52,231.771 1912.09,233.006 1912.66,233.906 1913.23,235.986 1913.8,236.835 1914.36,237.419 1914.93,235.7 1915.5,235.235 1916.07,234.875 1916.64,235.535 1917.21,234.236 1917.77,232.795 1918.34,233.541 1918.91,231.34 1919.48,233.235 1920.05,234.009 1920.62,233.351 1921.18,233.018 1921.75,232.931 1922.32,233.746 1922.89,232.252 1923.46,233.091 1924.03,231.941 1924.59,230.538 1925.16,231.55 1925.73,231.392 1926.3,231.33 1926.87,233.328 1927.44,234.19 1928,234.692 1928.57,232.418 1929.14,232.392 1929.71,233.327 1930.28,229.822 1930.85,229.825 1931.41,229.851 1931.98,229.696 1932.55,229.619 1933.12,228.754 1933.69,229.776 1934.26,230.685 1934.82,229.722 1935.39,231.947 1935.96,232.753 1936.53,230.422 1937.1,229.28 1937.67,229.253 1938.23,230.135 1938.8,230.083 1939.37,230.979 1939.94,230.818 1940.51,229.742 1941.08,230.656 1941.64,230.402 1942.21,230.176 1942.78,227.972 1943.35,229.08 1943.92,229.925 1944.49,231.91 1945.05,232.801 1945.62,234.742 1946.19,234.324 1946.76,234.08 1947.33,233.703 1947.9,231.226 1948.46,231.133 1949.03,230.873 1949.6,231.73 1950.17,230.658 1950.74,231.332 1951.31,229.158 1951.87,230.343 1952.44,229.164 1953.01,228.223 1953.58,227.285 1954.15,227.555 1954.72,227.782 1955.28,227.94 1955.85,229.155 1956.42,230.448 1956.99,229.416 1957.56,228.408 1958.13,227.282 1958.69,227.439 1959.26,227.568 1959.83,229.692 1960.4,229.913 1960.97,233.032 1961.54,232.641 1962.1,232.431 1962.67,229.904 1963.24,231.957 1963.81,232.767 1964.38,232.516 1964.95,232.228 1965.51,231.941 1966.08,232.969 1966.65,231.719 1967.22,231.556 1967.79,229.514 1968.36,230.624 1968.92,231.492 1969.49,230.341 1970.06,232.401 1970.63,231.041 1971.2,230.976 1971.77,229.929 1972.34,229.892 1972.9,231.004 1973.47,231.999 1974.04,230.671 1974.61,229.37 1975.18,230.211 1975.75,231.148 1976.31,230.977 1976.88,229.86 1977.45,230.96 1978.02,230.812 1978.59,229.652 1979.16,228.65 1979.72,227.444 1980.29,226.667 1980.86,227.808 1981.43,226.847 1982,227.279 1982.57,225.332 1983.13,223.611 1983.7,224.206 1984.27,224.832 1984.84,225.13 1985.41,225.396 1985.98,226.857 1986.54,225.985 1987.11,225.425 1987.68,225.025 1988.25,224.375 1988.82,225.837 1989.39,229.312 1989.95,230.688 1990.52,232.536 1991.09,231.202 1991.66,230.092 1992.23,229.902 1992.8,229.836 1993.36,229.827 1993.93,227.875 1994.5,229.979 1995.07,230.001 1995.64,230.945 1996.21,228.879 1996.77,228.088 1997.34,228.272 1997.91,229.12 1998.48,229.306 1999.05,230.352 1999.62,233.643 2000.18,234.402 2000.75,235.14 2001.32,236.477 2001.89,237.029 2002.46,234.38 2003.03,234.098 2003.59,231.67 2004.16,231.5 2004.73,229.424 2005.3,230.251 2005.87,231.152 2006.44,229.963 2007,227.923 2007.57,226.94 2008.14,229.381 2008.71,229.36 2009.28,228.509 2009.85,227.705 2010.41,229.021 2010.98,231.182 2011.55,229.854 2012.12,229.94 2012.69,227.781 2013.26,230.038 2013.82,228.005 2014.39,227.349 2014.96,225.443 2015.53,224.77 2016.1,226.107 2016.67,225.439 2017.23,225.898 2017.8,225.303 2018.37,226.894 2018.94,226.142 2019.51,227.491 2020.08,227.693 2020.64,227.005 2021.21,226.267 2021.78,224.541 2022.35,225.991 2022.92,225.634 2023.49,225.204 2024.05,224.397 2024.62,224.621 2025.19,225.9 2025.76,227.323 2026.33,226.674 2026.9,227.002 2027.46,227.258 2028.03,223.634 2028.6,224.189 2029.17,226.918 2029.74,228.3 2030.31,229.45 2030.87,230.695 2031.44,230.869 2032.01,230.797 2032.58,230.871 2033.15,229.697 2033.72,232.054 2034.28,230.876 2034.85,231.709 2035.42,229.662 2035.99,228.784 2036.56,230.091 2037.13,229.142 2037.69,229.513 2038.26,233.731 2038.83,231.484 2039.4,230.424 2039.97,232.548 2040.54,232.56 2041.11,232.457 2041.67,231.336 2042.24,231.55 2042.81,230.688 2043.38,229.819 2043.95,228.645 2044.52,229.728 2045.08,229.931 2045.65,227.936 2046.22,227.243 2046.79,227.705 2047.36,231.904 2047.93,231.81 2048.49,230.834 2049.06,230.973 2049.63,231.17 2050.2,233.299 2050.77,231.943 2051.34,232.068 2051.9,235.011 2052.47,235.875 2053.04,235.625 2053.61,234.359 2054.18,234.085 2054.75,232.892 2055.31,232.627 2055.88,231.492 2056.45,232.339 2057.02,231.272 2057.59,231.422 2058.16,231.418 2058.72,231.48 2059.29,230.287 2059.86,231.401 2060.43,231.418 2061,232.302 2061.57,232.077 2062.13,231.967 2062.7,231.151 2063.27,232.181 2063.84,233.078 2064.41,232.988 2064.98,230.67 2065.54,230.673 2066.11,229.518 2066.68,228.746 2067.25,232.126 2067.82,232.204 2068.39,233.037 2068.95,233.993 2069.52,233.747 2070.09,232.496 2070.66,233.291 2071.23,233.052 2071.8,231.729 2072.36,230.42 2072.93,233.598 2073.5,234.34 2074.07,234.082 2074.64,232.797 2075.21,232.693 2075.77,232.828 2076.34,229.644 2076.91,230.809 2077.48,231.827 2078.05,231.665 2078.62,232.776 2079.18,234.442 2079.75,235.136 2080.32,232.613 2080.89,232.295 2081.46,231.125 2082.03,231.287 2082.59,231.253 2083.16,233.299 2083.73,232.965 2084.3,231.627 2084.87,230.317 2085.44,228.565 2086,227.385 2086.57,227.423 2087.14,227.515 2087.71,228.59 2088.28,225.602 2088.85,224.946 2089.41,225.248 2089.98,226.701 2090.55,228.84 2091.12,228.053 2091.69,229.123 2092.26,229.887 2092.82,227.927 2093.39,230.173 2093.96,230.034 2094.53,228.799 2095.1,228.885 2095.67,230.138 2096.23,229.237 2096.8,229.176 2097.37,229.301 2097.94,229.395 2098.51,229.24 2099.08,230.416 2099.64,231.263 2100.21,229.14 2100.78,229.113 2101.35,229.057 2101.92,229.237 2102.49,229.43 2103.05,231.395 2103.62,232.238 2104.19,234.064 2104.76,233.915 2105.33,233.591 2105.9,233.298 2106.46,234.913 2107.03,237.85 2107.6,237.374 2108.17,236.942 2108.74,237.1 2109.31,233.422 2109.87,232.019 2110.44,229.825 2111.01,230.74 2111.58,230.63 2112.15,228.279 2112.72,228.188 2113.29,226.225 2113.85,227.368 2114.42,226.705 2114.99,223.868 2115.56,227.366 2116.13,227.726 2116.7,229.864 2117.26,230.702 2117.83,230.632 2118.4,228.327 2118.97,226.694 2119.54,224.986 2120.11,225.456 2120.67,224.827 2121.24,226.149 2121.81,223.427 2122.38,225.028 2122.95,224.343 2123.52,225.792 2124.08,226.161 2124.65,228.589 2125.22,229.753 2125.79,229.899 2126.36,229.792 2126.93,228.806 2127.49,227.814 2128.06,227.034 2128.63,227.433 2129.2,230.842 2129.77,229.906 2130.34,230.173 2130.9,230.248 2131.47,231.347 2132.04,233.522 2132.61,232.049 2133.18,233.006 2133.75,231.752 2134.31,231.593 2134.88,229.473 2135.45,228.516 2136.02,225.745 2136.59,228.245 2137.16,227.421 2137.72,227.504 2138.29,225.592 2138.86,225.03 2139.43,227.765 2140,227.862 2140.57,227.078 2141.13,227.331 2141.7,227.631 2142.27,227.812 2142.84,225.978 2143.41,228.471 2143.98,229.899 2144.54,231.165 2145.11,232.284 2145.68,233.222 2146.25,231.985 2146.82,230.954 2147.39,231.06 2147.95,233.102 2148.52,232.108 2149.09,232.104 2149.66,231.001 2150.23,232.822 2150.8,233.675 2151.36,236.514 2151.93,235.06 2152.5,235.894 2153.07,236.477 2153.64,235.119 2154.21,234.758 2154.77,235.204 2155.34,237.042 2155.91,235.666 2156.48,234.147 2157.05,234.892 2157.62,234.567 2158.18,235.195 2158.75,235.726 2159.32,234.267 2159.89,235.9 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.02\n  with uncertainty of ± 0.0018352963698354354\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01555 ± (0.00217204, 0.00223524) (MC)\n  95% confidence interval: [-4.01996, -4.01137] (MC)\n  linear error propagation: -4.01548 ± 0.00227195\n  |δ_y| = |0.00278145| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0155534964247055, val_l = 0.004408668039808994, val_u = 0.004184753189585777)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip120\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip120)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip121\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip120)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip122\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.56 2211.02,1143.56 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,970.158 2211.02,970.158 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,796.756 2211.02,796.756 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,623.354 2211.02,623.354 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,449.951 2211.02,449.951 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,276.549 2211.02,276.549 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.56 365.751,1143.56 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,970.158 365.751,970.158 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,796.756 365.751,796.756 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,623.354 365.751,623.354 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,449.951 365.751,449.951 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,276.549 365.751,276.549 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M298.909 1129.36 Q295.298 1129.36 293.469 1132.92 Q291.664 1136.47 291.664 1143.6 Q291.664 1150.7 293.469 1154.27 Q295.298 1157.81 298.909 1157.81 Q302.543 1157.81 304.349 1154.27 Q306.177 1150.7 306.177 1143.6 Q306.177 1136.47 304.349 1132.92 Q302.543 1129.36 298.909 1129.36 M298.909 1125.66 Q304.719 1125.66 307.775 1130.26 Q310.853 1134.85 310.853 1143.6 Q310.853 1152.32 307.775 1156.93 Q304.719 1161.51 298.909 1161.51 Q293.099 1161.51 290.02 1156.93 Q286.964 1152.32 286.964 1143.6 Q286.964 1134.85 290.02 1130.26 Q293.099 1125.66 298.909 1125.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M259.557 983.503 L267.196 983.503 L267.196 957.137 L258.886 958.804 L258.886 954.545 L267.15 952.878 L271.826 952.878 L271.826 983.503 L279.465 983.503 L279.465 987.438 L259.557 987.438 L259.557 983.503 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M298.909 955.957 Q295.298 955.957 293.469 959.522 Q291.664 963.063 291.664 970.193 Q291.664 977.299 293.469 980.864 Q295.298 984.406 298.909 984.406 Q302.543 984.406 304.349 980.864 Q306.177 977.299 306.177 970.193 Q306.177 963.063 304.349 959.522 Q302.543 955.957 298.909 955.957 M298.909 952.253 Q304.719 952.253 307.775 956.86 Q310.853 961.443 310.853 970.193 Q310.853 978.92 307.775 983.526 Q304.719 988.109 298.909 988.109 Q293.099 988.109 290.02 983.526 Q286.964 978.92 286.964 970.193 Q286.964 961.443 290.02 956.86 Q293.099 952.253 298.909 952.253 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M262.775 810.101 L279.094 810.101 L279.094 814.036 L257.15 814.036 L257.15 810.101 Q259.812 807.346 264.395 802.717 Q269.002 798.064 270.182 796.721 Q272.428 794.198 273.307 792.462 Q274.21 790.703 274.21 789.013 Q274.21 786.258 272.266 784.522 Q270.344 782.786 267.242 782.786 Q265.043 782.786 262.59 783.55 Q260.159 784.314 257.381 785.865 L257.381 781.143 Q260.205 780.008 262.659 779.43 Q265.113 778.851 267.15 778.851 Q272.52 778.851 275.715 781.536 Q278.909 784.221 278.909 788.712 Q278.909 790.842 278.099 792.763 Q277.312 794.661 275.205 797.254 Q274.627 797.925 271.525 801.142 Q268.423 804.337 262.775 810.101 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M298.909 782.555 Q295.298 782.555 293.469 786.119 Q291.664 789.661 291.664 796.791 Q291.664 803.897 293.469 807.462 Q295.298 811.004 298.909 811.004 Q302.543 811.004 304.349 807.462 Q306.177 803.897 306.177 796.791 Q306.177 789.661 304.349 786.119 Q302.543 782.555 298.909 782.555 M298.909 778.851 Q304.719 778.851 307.775 783.457 Q310.853 788.041 310.853 796.791 Q310.853 805.517 307.775 810.124 Q304.719 814.707 298.909 814.707 Q293.099 814.707 290.02 810.124 Q286.964 805.517 286.964 796.791 Q286.964 788.041 290.02 783.457 Q293.099 778.851 298.909 778.851 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M272.914 621.999 Q276.27 622.717 278.145 624.986 Q280.043 627.254 280.043 630.587 Q280.043 635.703 276.525 638.504 Q273.006 641.305 266.525 641.305 Q264.349 641.305 262.034 640.865 Q259.742 640.448 257.289 639.592 L257.289 635.078 Q259.233 636.212 261.548 636.791 Q263.863 637.37 266.386 637.37 Q270.784 637.37 273.076 635.634 Q275.39 633.898 275.39 630.587 Q275.39 627.532 273.238 625.819 Q271.108 624.083 267.289 624.083 L263.261 624.083 L263.261 620.24 L267.474 620.24 Q270.923 620.24 272.752 618.874 Q274.58 617.486 274.58 614.893 Q274.58 612.231 272.682 610.819 Q270.807 609.384 267.289 609.384 Q265.367 609.384 263.168 609.8 Q260.969 610.217 258.33 611.097 L258.33 606.93 Q260.992 606.189 263.307 605.819 Q265.645 605.449 267.705 605.449 Q273.029 605.449 276.131 607.879 Q279.233 610.287 279.233 614.407 Q279.233 617.277 277.59 619.268 Q275.946 621.236 272.914 621.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M298.909 609.152 Q295.298 609.152 293.469 612.717 Q291.664 616.259 291.664 623.388 Q291.664 630.495 293.469 634.06 Q295.298 637.601 298.909 637.601 Q302.543 637.601 304.349 634.06 Q306.177 630.495 306.177 623.388 Q306.177 616.259 304.349 612.717 Q302.543 609.152 298.909 609.152 M298.909 605.449 Q304.719 605.449 307.775 610.055 Q310.853 614.638 310.853 623.388 Q310.853 632.115 307.775 636.722 Q304.719 641.305 298.909 641.305 Q293.099 641.305 290.02 636.722 Q286.964 632.115 286.964 623.388 Q286.964 614.638 290.02 610.055 Q293.099 605.449 298.909 605.449 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M271.594 436.745 L259.789 455.194 L271.594 455.194 L271.594 436.745 M270.367 432.671 L276.247 432.671 L276.247 455.194 L281.177 455.194 L281.177 459.083 L276.247 459.083 L276.247 467.231 L271.594 467.231 L271.594 459.083 L255.992 459.083 L255.992 454.569 L270.367 432.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M298.909 435.75 Q295.298 435.75 293.469 439.315 Q291.664 442.856 291.664 449.986 Q291.664 457.093 293.469 460.657 Q295.298 464.199 298.909 464.199 Q302.543 464.199 304.349 460.657 Q306.177 457.093 306.177 449.986 Q306.177 442.856 304.349 439.315 Q302.543 435.75 298.909 435.75 M298.909 432.046 Q304.719 432.046 307.775 436.653 Q310.853 441.236 310.853 449.986 Q310.853 458.713 307.775 463.319 Q304.719 467.903 298.909 467.903 Q293.099 467.903 290.02 463.319 Q286.964 458.713 286.964 449.986 Q286.964 441.236 290.02 436.653 Q293.099 432.046 298.909 432.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M258.793 259.269 L277.15 259.269 L277.15 263.204 L263.076 263.204 L263.076 271.676 Q264.094 271.329 265.113 271.167 Q266.131 270.982 267.15 270.982 Q272.937 270.982 276.316 274.153 Q279.696 277.325 279.696 282.741 Q279.696 288.32 276.224 291.422 Q272.752 294.5 266.432 294.5 Q264.256 294.5 261.988 294.13 Q259.742 293.76 257.335 293.019 L257.335 288.32 Q259.418 289.454 261.641 290.01 Q263.863 290.565 266.34 290.565 Q270.344 290.565 272.682 288.459 Q275.02 286.352 275.02 282.741 Q275.02 279.13 272.682 277.024 Q270.344 274.917 266.34 274.917 Q264.465 274.917 262.59 275.334 Q260.738 275.75 258.793 276.63 L258.793 259.269 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M298.909 262.348 Q295.298 262.348 293.469 265.913 Q291.664 269.454 291.664 276.584 Q291.664 283.69 293.469 287.255 Q295.298 290.797 298.909 290.797 Q302.543 290.797 304.349 287.255 Q306.177 283.69 306.177 276.584 Q306.177 269.454 304.349 265.913 Q302.543 262.348 298.909 262.348 M298.909 258.644 Q304.719 258.644 307.775 263.251 Q310.853 267.834 310.853 276.584 Q310.853 285.311 307.775 289.917 Q304.719 294.5 298.909 294.5 Q293.099 294.5 290.02 289.917 Q286.964 285.311 286.964 276.584 Q286.964 267.834 290.02 263.251 Q293.099 258.644 298.909 258.644 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip122)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1150.65 400.199,1025 400.786,911.153 401.372,1036.29 401.958,928.294 402.545,829.53 403.131,740.874 403.718,655.978 404.304,580.55 404.891,509.793 405.477,448.724 406.063,391.89 406.65,340.227 407.236,293.798 407.823,255.345 408.409,287.712 408.995,251.722 409.582,219.895 410.168,303.383 410.755,272.436 411.341,246.827 411.927,269.763 412.514,290.304 413.1,271.608 413.687,290.683 414.273,274.375 414.86,293.028 415.446,280.322 416.032,325.65 416.619,339.592 417.205,328.595 417.792,342.28 418.378,377.699 418.964,369.728 419.551,364.127 420.137,359.477 420.724,357.109 421.31,355.458 421.896,354.985 422.483,400.974 423.069,402.778 423.656,405.522 424.242,434.384 424.829,448.92 425.415,485.283 426.001,509.982 426.588,523.007 427.174,526.062 427.761,530.161 428.347,551.433 428.933,555.681 429.52,570.048 430.106,575.449 430.693,596.237 431.279,615.62 431.865,620.644 432.452,633.413 433.038,652.292 433.625,657.712 434.211,664.229 434.798,675.852 435.384,687.511 435.97,694.264 436.557,700.84 437.143,708.018 437.73,729.519 438.316,754.876 438.902,769.972 439.489,784.261 440.075,789.946 440.662,800.157 441.248,806.252 441.835,812.823 442.421,818.584 443.007,832.21 443.594,841.964 444.18,847.789 444.767,857.481 445.353,866.875 445.939,879.54 446.526,885.265 447.112,900.552 447.699,909.435 448.285,923.719 448.871,934.908 449.458,940.672 450.044,949.105 450.631,954.757 451.217,960.091 451.804,965.396 452.39,972.886 452.976,980.829 453.563,991.25 454.149,1003.53 454.736,1019.84 455.322,1026.35 455.908,1033 456.495,1039.19 457.081,1053.98 457.668,1064.03 458.254,1073.31 458.84,1078.78 459.427,1085.68 460.013,1092.5 460.6,1103.47 461.186,1105.61 461.773,1107.66 462.359,1111.91 462.945,1116.16 463.532,1120.08 464.118,1133.38 464.705,1132.77 465.291,1138.23 465.877,1145.53 466.464,1148.32 467.05,1149.7 467.637,1153.04 468.223,1158.02 468.809,1159.07 469.396,1160.07 469.982,1166.56 470.569,1174.43 471.155,1174.95 471.742,1173.92 472.328,1178.29 472.914,1182.39 473.501,1183.12 474.087,1185.71 474.674,1186.12 475.26,1188.58 475.846,1194.23 476.433,1194.73 477.019,1195.16 477.606,1195.56 478.192,1196.36 478.778,1200.12 479.365,1202.45 479.951,1204.76 480.538,1206.58 481.124,1206.82 481.711,1210.22 482.297,1212.37 482.883,1214.53 483.47,1216.18 484.056,1216.3 484.643,1216.4 485.229,1216.62 485.815,1218.1 486.402,1219.92 486.988,1220 487.575,1221.73 488.161,1218.89 488.748,1222.48 489.334,1224.38 489.92,1224.22 490.507,1227.24 491.093,1228.67 491.68,1231.41 492.266,1231.6 492.852,1234.5 493.439,1237.22 494.025,1241.11 494.612,1238.67 495.198,1238.26 495.784,1237.65 496.371,1235.92 496.957,1237.29 497.544,1235.32 498.13,1236.28 498.717,1235.91 499.303,1237.07 499.889,1236.68 500.476,1239.11 501.062,1238.4 501.649,1234.58 502.235,1234.17 502.821,1238.38 503.408,1239.65 503.994,1239.46 504.581,1243.52 505.167,1247.51 505.753,1247.94 506.34,1249.88 506.926,1248.94 507.513,1245.35 508.099,1246.1 508.686,1246.77 509.272,1247.41 509.858,1246.48 510.445,1248.49 511.031,1247.53 511.618,1246.88 512.204,1244.66 512.79,1242.51 513.377,1242.34 513.963,1241.8 514.55,1243.07 515.136,1241.07 515.722,1240.69 516.309,1242 516.895,1244.32 517.482,1245.38 518.068,1249.14 518.655,1248.04 519.241,1248.85 519.827,1246.61 520.414,1245.52 521,1246.17 521.587,1245.58 522.173,1247.89 522.759,1247 523.346,1246.32 523.932,1247.25 524.519,1248.05 525.105,1247.2 525.691,1242.11 526.278,1241.65 526.864,1241.07 527.451,1241.99 528.037,1241.64 528.624,1239.17 529.21,1240.44 529.796,1244.33 530.383,1240.77 530.969,1240.26 531.556,1239.9 532.142,1239.85 532.728,1239.32 533.315,1240.35 533.901,1239.85 534.488,1239.49 535.074,1239.3 535.661,1237.46 536.247,1238.46 536.833,1238.05 537.42,1238.9 538.006,1238.53 538.593,1239.3 539.179,1242.1 539.765,1241.75 540.352,1244.03 540.938,1243.22 541.525,1246.69 542.111,1250.12 542.697,1247.86 543.284,1248.31 543.87,1245.77 544.457,1246.25 545.043,1246.88 545.63,1250.21 546.216,1250.53 546.802,1247.8 547.389,1248.08 547.975,1245.89 548.562,1245.47 549.148,1246.08 549.734,1242.23 550.321,1240.05 550.907,1238.11 551.494,1237.53 552.08,1236.85 552.666,1233.43 553.253,1231.87 553.839,1233.18 554.426,1234.42 555.012,1233.91 555.599,1236.64 556.185,1235.07 556.771,1234.93 557.358,1234.87 557.944,1234.51 558.531,1231.55 559.117,1231.65 559.703,1231.44 560.29,1231.5 560.876,1231.24 561.463,1232.52 562.049,1233.41 562.635,1233.43 563.222,1234.68 563.808,1233.02 564.395,1234.01 564.981,1232.55 565.568,1235.15 566.154,1236.22 566.74,1235.6 567.327,1236.81 567.913,1237.72 568.5,1234.16 569.086,1236.67 569.672,1236.05 570.259,1235.51 570.845,1234.78 571.432,1234.58 572.018,1235.87 572.605,1235.58 573.191,1233.78 573.777,1232.12 574.364,1230.12 574.95,1229.75 575.537,1228.13 576.123,1227.86 576.709,1228.15 577.296,1228.05 577.882,1227.99 578.469,1230.51 579.055,1230.39 579.641,1231.52 580.228,1229.91 580.814,1228.5 581.401,1228.44 581.987,1226.9 582.574,1226.87 583.16,1228.23 583.746,1228.11 584.333,1228.44 584.919,1225.31 585.506,1222.89 586.092,1220.4 586.678,1219.51 587.265,1218.43 587.851,1221.63 588.438,1220.53 589.024,1222.43 589.61,1222.58 590.197,1225.67 590.783,1226.25 591.37,1227.29 591.956,1226.77 592.543,1229.74 593.129,1229.02 593.715,1229.08 594.302,1228.71 594.888,1228.54 595.475,1232.62 596.061,1230.61 596.647,1231.79 597.234,1233.38 597.82,1233.34 598.407,1232.97 598.993,1232.42 599.579,1230.55 600.166,1228.67 600.752,1227.04 601.339,1229.91 601.925,1229.49 602.512,1227.75 603.098,1229.12 603.684,1230.26 604.271,1230.05 604.857,1228.26 605.444,1229.44 606.03,1229.26 606.616,1228.86 607.203,1230.18 607.789,1226.98 608.376,1229.49 608.962,1230.59 609.548,1230.11 610.135,1230.01 610.721,1229.69 611.308,1226.85 611.894,1226.3 612.481,1230.42 613.067,1230.24 613.653,1229.95 614.24,1230.96 614.826,1232.07 615.413,1233.02 615.999,1230.88 616.585,1230.28 617.172,1225.48 617.758,1225.61 618.345,1225.16 618.931,1223.75 619.518,1221.07 620.104,1223.68 620.69,1223.54 621.277,1226.04 621.863,1225.86 622.45,1225.65 623.036,1227.1 623.622,1231.06 624.209,1229.33 624.795,1229.14 625.382,1227.35 625.968,1224.4 626.554,1224.38 627.141,1225.75 627.727,1224.37 628.314,1224.58 628.9,1225.89 629.487,1224.53 630.073,1221.57 630.659,1221.56 631.246,1222.91 631.832,1226.11 632.419,1224.42 633.005,1228.42 633.591,1229.84 634.178,1229.27 634.764,1229.03 635.351,1230.08 635.937,1229.66 636.523,1230.68 637.11,1231.79 637.696,1229.95 638.283,1229.77 638.869,1229.36 639.456,1227.4 640.042,1228.58 640.628,1228.07 641.215,1228.83 641.801,1229.63 642.388,1230.82 642.974,1228.81 643.56,1227.01 644.147,1228.12 644.733,1226.54 645.32,1226.32 645.906,1226.08 646.492,1227.23 647.079,1222.96 647.665,1223.12 648.252,1225.98 648.838,1222.81 649.425,1224.41 650.011,1225.65 650.597,1224.04 651.184,1223.54 651.77,1221.52 652.357,1224.34 652.943,1225.61 653.529,1225.41 654.116,1225.29 654.702,1224.9 655.289,1220.4 655.875,1222.03 656.462,1223.58 657.048,1227.37 657.634,1222.44 658.221,1223.86 658.807,1223.54 659.394,1227.84 659.98,1224.62 660.566,1225.96 661.153,1228.4 661.739,1227.67 662.326,1227.09 662.912,1223.75 663.498,1223.34 664.085,1224.52 664.671,1224.25 665.258,1222.6 665.844,1221.19 666.431,1222.55 667.017,1219.38 667.603,1216.39 668.19,1216.47 668.776,1216.75 669.363,1218.34 669.949,1216.81 670.535,1216.89 671.122,1215.51 671.708,1214.37 672.295,1213.38 672.881,1217.84 673.467,1219.46 674.054,1222.29 674.64,1222.23 675.227,1222.3 675.813,1221.97 676.4,1222.93 676.986,1222.42 677.572,1227.52 678.159,1228.65 678.745,1226.66 679.332,1227.68 679.918,1225.63 680.504,1222.4 681.091,1221 681.677,1221.01 682.264,1220.61 682.85,1218.95 683.436,1220.51 684.023,1221.48 684.609,1222.86 685.196,1222.69 685.782,1220.83 686.369,1220.95 686.955,1219.44 687.541,1220.77 688.128,1222.1 688.714,1220.18 689.301,1220.27 689.887,1217.52 690.473,1217.97 691.06,1218.03 691.646,1217.96 692.233,1216.73 692.819,1217.05 693.405,1216.95 693.992,1212.9 694.578,1215.91 695.165,1216.12 695.751,1217.75 696.338,1217.81 696.924,1220.56 697.51,1220.42 698.097,1218.69 698.683,1217.07 699.27,1218.44 699.856,1220.04 700.442,1220.2 701.029,1221.91 701.615,1223.01 702.202,1225.59 702.788,1226.77 703.375,1229.27 703.961,1228.69 704.547,1228.01 705.134,1227.64 705.72,1227.37 706.307,1227.09 706.893,1226.37 707.479,1225.99 708.066,1225.82 708.652,1222.59 709.239,1225.22 709.825,1226.31 710.411,1224.49 710.998,1226.84 711.584,1227.64 712.171,1227.15 712.757,1225.23 713.344,1225.15 713.93,1224.58 714.516,1227.05 715.103,1228.25 715.689,1230.63 716.276,1232.59 716.862,1231.71 717.448,1230.96 718.035,1230.37 718.621,1229.63 719.208,1227.84 719.794,1227.1 720.38,1225.31 720.967,1225.22 721.553,1225.89 722.14,1226.85 722.726,1227.69 723.313,1230.32 723.899,1230.11 724.485,1228.44 725.072,1229.5 725.658,1231.74 726.245,1233.81 726.831,1230.13 727.417,1231.23 728.004,1232.01 728.59,1230.08 729.177,1230.91 729.763,1230.23 730.349,1228.24 730.936,1230.63 731.522,1227.29 732.109,1225.28 732.695,1227.96 733.282,1226.14 733.868,1225.7 734.454,1225.27 735.041,1224.77 735.627,1222.95 736.214,1224.05 736.8,1223.89 737.386,1222.27 737.973,1223.49 738.559,1223.52 739.146,1224.66 739.732,1225.61 740.318,1226.56 740.905,1224.61 741.491,1222.89 742.078,1219.52 742.664,1216.49 743.251,1216.46 743.837,1213.53 744.423,1214.71 745.01,1216.39 745.596,1218.09 746.183,1217.98 746.769,1215.31 747.355,1215.45 747.942,1215.47 748.528,1215.25 749.115,1215.79 749.701,1220.01 750.288,1221.19 750.874,1222.53 751.46,1222.34 752.047,1221.62 752.633,1219.9 753.22,1221.12 753.806,1222.35 754.392,1225.05 754.979,1224.71 755.565,1221.33 756.152,1219.3 756.738,1215.15 757.324,1211.18 757.911,1209.94 758.497,1208.75 759.084,1206.3 759.67,1205.18 760.257,1207.5 760.843,1208 761.429,1206.92 762.016,1208.98 762.602,1207.7 763.189,1209.55 763.775,1211.35 764.361,1211.66 764.948,1209.27 765.534,1208.27 766.121,1209.93 766.707,1208.96 767.293,1209.59 767.88,1211.42 768.466,1213.15 769.053,1213.54 769.639,1215.11 770.226,1215.32 770.812,1215.37 771.398,1216.72 771.985,1215.27 772.571,1217.05 773.158,1217.21 773.744,1217.51 774.33,1215.94 774.917,1214.61 775.503,1213.03 776.09,1217.51 776.676,1215.98 777.262,1213.23 777.849,1214.56 778.435,1211.73 779.022,1210.25 779.608,1209.23 780.195,1208.24 780.781,1207.13 781.367,1207.62 781.954,1209.41 782.54,1209.93 783.127,1210.3 783.713,1209.11 784.299,1209.24 784.886,1206.76 785.472,1208.87 786.059,1210.8 786.645,1208.18 787.232,1207.47 787.818,1213.84 788.404,1212.54 788.991,1212.98 789.577,1215.81 790.164,1214.65 790.75,1213.42 791.336,1213.61 791.923,1215.08 792.509,1215.36 793.096,1219.5 793.682,1220.69 794.268,1223.32 794.855,1224.38 795.441,1222.5 796.028,1223.86 796.614,1223.42 797.201,1221.81 797.787,1221.66 798.373,1219.8 798.96,1221.85 799.546,1224.33 800.133,1222.68 800.719,1219.6 801.305,1223.63 801.892,1223.14 802.478,1224.4 803.065,1225.31 803.651,1224.74 804.237,1224.2 804.824,1221.95 805.41,1224.22 805.997,1222.6 806.583,1223.63 807.17,1223.06 807.756,1221.31 808.342,1222.5 808.929,1222.06 809.515,1224.73 810.102,1224.15 810.688,1222.25 811.274,1221.88 811.861,1218.68 812.447,1219.94 813.034,1222.71 813.62,1222.18 814.206,1219.17 814.793,1218.92 815.379,1218.38 815.966,1218.05 816.552,1216.37 817.139,1217.39 817.725,1217.3 818.311,1217.12 818.898,1214.44 819.484,1211.29 820.071,1209.88 820.657,1207.56 821.243,1207.83 821.83,1206.83 822.416,1207.39 823.003,1207.75 823.589,1205.44 824.175,1206.17 824.762,1211.09 825.348,1211.03 825.935,1211.37 826.521,1210.58 827.108,1209.45 827.694,1209.68 828.28,1209.59 828.867,1207.45 829.453,1209.47 830.04,1209.97 830.626,1211.86 831.212,1214.89 831.799,1213.67 832.385,1213.52 832.972,1213.56 833.558,1213.8 834.145,1213.82 834.731,1212.68 835.317,1212.64 835.904,1211.34 836.49,1211.32 837.077,1208.71 837.663,1210.41 838.249,1210.6 838.836,1209.28 839.422,1209.49 840.009,1211.23 840.595,1211.34 841.181,1208.72 841.768,1210.53 842.354,1210.96 842.941,1213.8 843.527,1213.9 844.114,1211.34 844.7,1213.05 845.286,1211.65 845.873,1212.09 846.459,1212.1 847.046,1212.38 847.632,1215.21 848.218,1213.81 848.805,1213.85 849.391,1213.86 849.978,1212.54 850.564,1215.44 851.15,1215.37 851.737,1218.23 852.323,1218.29 852.91,1219.99 853.496,1221.37 854.083,1224.03 854.669,1222.11 855.255,1226.12 855.842,1224.26 856.428,1221.25 857.015,1220.87 857.601,1222.08 858.187,1224.45 858.774,1226.75 859.36,1224.62 859.947,1222.72 860.533,1222.31 861.119,1220.84 861.706,1221.96 862.292,1220.16 862.879,1220.09 863.465,1218.54 864.052,1221.06 864.638,1220.64 865.224,1218.9 865.811,1218.54 866.397,1216.9 866.984,1216.75 867.57,1216.42 868.156,1218.98 868.743,1221.63 869.329,1221.25 869.916,1222 870.502,1220.03 871.089,1216.69 871.675,1217.76 872.261,1213.54 872.848,1218.01 873.434,1214.97 874.021,1213.57 874.607,1212.36 875.193,1212.13 875.78,1210.71 876.366,1209.52 876.953,1210.85 877.539,1211.44 878.125,1211.64 878.712,1211.88 879.298,1212.21 879.885,1213.85 880.471,1213.81 881.058,1215.2 881.644,1214.82 882.23,1213.82 882.817,1213.68 883.403,1212.43 883.99,1213.83 884.576,1210.94 885.162,1208.77 885.749,1209.47 886.335,1207.02 886.922,1207.18 887.508,1210.4 888.094,1210.45 888.681,1210.67 889.267,1209.43 889.854,1208.22 890.44,1206.94 891.027,1207.47 891.613,1207.77 892.199,1206.73 892.786,1209.93 893.372,1211.84 893.959,1213.32 894.545,1214.84 895.131,1219.27 895.718,1220.22 896.304,1221.33 896.891,1222.31 897.477,1220.24 898.063,1222.71 898.65,1222.37 899.236,1221.84 899.823,1218.65 900.409,1215.45 900.996,1219.7 901.582,1216.79 902.168,1216.79 902.755,1215.1 903.341,1213.72 903.928,1216.78 904.514,1217.97 905.1,1216.44 905.687,1216.27 906.273,1213.45 906.86,1212.98 907.446,1218.76 908.032,1218.65 908.619,1217.34 909.205,1217.54 909.792,1216.3 910.378,1213.38 910.965,1213.4 911.551,1213.2 912.137,1213.03 912.724,1214.62 913.31,1213.32 913.897,1214.92 914.483,1214.86 915.069,1214.71 915.656,1214.44 916.242,1214.41 916.829,1214.22 917.415,1214.43 918.002,1212.78 918.588,1217.33 919.174,1214.39 919.761,1215.8 920.347,1218.8 920.934,1214.05 921.52,1213.91 922.106,1212.64 922.693,1211.27 923.279,1212.77 923.866,1213.06 924.452,1212.9 925.038,1214.19 925.625,1212.82 926.211,1214.37 926.798,1214.18 927.384,1212.31 927.971,1211.1 928.557,1212.39 929.143,1213.83 929.73,1212.42 930.316,1211.15 930.903,1214.13 931.489,1214.19 932.075,1214.18 932.662,1215.45 933.248,1216.57 933.835,1217.92 934.421,1219.2 935.007,1218.9 935.594,1218.44 936.18,1215.25 936.767,1215.19 937.353,1216.61 937.94,1213.83 938.526,1215.2 939.112,1220.72 939.699,1217.91 940.285,1219.08 940.872,1217.74 941.458,1214.89 942.044,1213.73 942.631,1215.46 943.217,1215.39 943.804,1214.15 944.39,1214.24 944.976,1212.99 945.563,1212.84 946.149,1211.32 946.736,1211.84 947.322,1213.17 947.909,1211.7 948.495,1211.31 949.081,1212.93 949.668,1213.18 950.254,1214.64 950.841,1214.75 951.427,1213.44 952.013,1209.2 952.6,1206.8 953.186,1210.12 953.773,1212.12 954.359,1215.32 954.945,1212.46 955.532,1212.77 956.118,1212.72 956.705,1212.85 957.291,1214.43 957.878,1214.59 958.464,1216.2 959.05,1215.73 959.637,1214.35 960.223,1214.46 960.81,1214.54 961.396,1217.4 961.982,1214.22 962.569,1211.27 963.155,1214.29 963.742,1214.08 964.328,1212.76 964.915,1213.11 965.501,1211.83 966.087,1212 966.674,1213.57 967.26,1215.21 967.847,1214.94 968.433,1215.14 969.019,1218 969.606,1217.88 970.192,1216.16 970.779,1214.81 971.365,1212.95 971.951,1212.93 972.538,1215.52 973.124,1215.58 973.711,1216.71 974.297,1217.99 974.884,1216.32 975.47,1217.66 976.056,1216.13 976.643,1213.1 977.229,1214.48 977.816,1217.18 978.402,1212.87 978.988,1213.01 979.575,1213.13 980.161,1211.86 980.748,1211.93 981.334,1213.41 981.92,1212.28 982.507,1212.32 983.093,1213.92 983.68,1216.95 984.266,1217.19 984.853,1212.7 985.439,1209.98 986.025,1207.14 986.612,1209.2 987.198,1210.9 987.785,1212.45 988.371,1209.79 988.957,1207.2 989.544,1207.85 990.13,1209.75 990.717,1211.46 991.303,1210.5 991.889,1209.17 992.476,1211.19 993.062,1212.82 993.649,1212.84 994.235,1211.73 994.822,1213.37 995.408,1211.92 995.994,1212.03 996.581,1212.51 997.167,1209.51 997.754,1206.86 998.34,1207.01 998.926,1207.66 999.513,1209.47 1000.1,1209.48 1000.69,1211.1 1001.27,1212.72 1001.86,1214.29 1002.44,1215.38 1003.03,1216.77 1003.62,1216.4 1004.2,1213.64 1004.79,1213.69 1005.38,1216.6 1005.96,1219.08 1006.55,1218.52 1007.14,1218.14 1007.72,1217.91 1008.31,1217.67 1008.9,1218.94 1009.48,1218.78 1010.07,1219.78 1010.65,1222.24 1011.24,1225.91 1011.83,1228.2 1012.41,1224.37 1013,1220.73 1013.59,1219.18 1014.17,1216.16 1014.76,1217.47 1015.35,1217.11 1015.93,1218.44 1016.52,1221.26 1017.11,1220.52 1017.69,1217.28 1018.28,1217.28 1018.86,1215.75 1019.45,1214.37 1020.04,1211.29 1020.62,1211.42 1021.21,1213.05 1021.8,1210.27 1022.38,1208.72 1022.97,1207.52 1023.56,1209.06 1024.14,1210.92 1024.73,1212.5 1025.32,1214.07 1025.9,1215.53 1026.49,1214.42 1027.07,1212.81 1027.66,1214.44 1028.25,1217.09 1028.83,1218.39 1029.42,1219.55 1030.01,1219.28 1030.59,1217.53 1031.18,1215.84 1031.77,1217.22 1032.35,1215.73 1032.94,1215.69 1033.52,1212.58 1034.11,1211.29 1034.7,1211.32 1035.28,1209.11 1035.87,1208.2 1036.46,1209.77 1037.04,1207.14 1037.63,1207.9 1038.22,1206.9 1038.8,1208.5 1039.39,1210.51 1039.98,1208.93 1040.56,1211.85 1041.15,1215.84 1041.73,1215.71 1042.32,1217.07 1042.91,1215.35 1043.49,1215.07 1044.08,1212.17 1044.67,1212.18 1045.25,1214.01 1045.84,1213.97 1046.43,1211.02 1047.01,1208.32 1047.6,1207.23 1048.19,1209.24 1048.77,1210.94 1049.36,1211.19 1049.94,1214.23 1050.53,1214.47 1051.12,1213.31 1051.7,1213.48 1052.29,1213.4 1052.88,1216.47 1053.46,1214.99 1054.05,1216.38 1054.64,1214.78 1055.22,1220.45 1055.81,1223.08 1056.39,1225.37 1056.98,1224.71 1057.57,1224.32 1058.15,1223.81 1058.74,1223.21 1059.33,1225.25 1059.91,1223.28 1060.5,1221.13 1061.09,1223.23 1061.67,1219.95 1062.26,1218.4 1062.85,1216.54 1063.43,1217.83 1064.02,1217.63 1064.6,1217.71 1065.19,1216.16 1065.78,1214.8 1066.36,1211.84 1066.95,1211.92 1067.54,1211.86 1068.12,1210.1 1068.71,1208.82 1069.3,1209.14 1069.88,1207.9 1070.47,1209.68 1071.06,1208.39 1071.64,1211.35 1072.23,1212.96 1072.81,1213.29 1073.4,1213.43 1073.99,1212.23 1074.57,1211.95 1075.16,1212.05 1075.75,1213.66 1076.33,1214.81 1076.92,1213.6 1077.51,1213.2 1078.09,1215.92 1078.68,1216.7 1079.26,1215.44 1079.85,1215.25 1080.44,1213.52 1081.02,1217.69 1081.61,1214.72 1082.2,1216.37 1082.78,1214.44 1083.37,1216.09 1083.96,1214.77 1084.54,1214.85 1085.13,1214.8 1085.72,1213.37 1086.3,1215.05 1086.89,1212.12 1087.47,1213.68 1088.06,1212.37 1088.65,1216.67 1089.23,1217.98 1089.82,1216.19 1090.41,1216.23 1090.99,1214.6 1091.58,1213.38 1092.17,1214.81 1092.75,1218.68 1093.34,1218.42 1093.93,1218.27 1094.51,1215.39 1095.1,1212.55 1095.68,1212.56 1096.27,1211.26 1096.86,1212.57 1097.44,1211.06 1098.03,1209.54 1098.62,1208.78 1099.2,1208.84 1099.79,1207.77 1100.38,1206.99 1100.96,1207.36 1101.55,1209 1102.14,1206.5 1102.72,1207.02 1103.31,1205.98 1103.89,1207.98 1104.48,1211.08 1105.07,1213.95 1105.65,1213.9 1106.24,1213.93 1106.83,1210.83 1107.41,1212.24 1108,1212.14 1108.59,1212.03 1109.17,1214.96 1109.76,1214.97 1110.34,1216.35 1110.93,1214.87 1111.52,1214.86 1112.1,1216.22 1112.69,1216.1 1113.28,1217.46 1113.86,1213.08 1114.45,1213.17 1115.04,1214.77 1115.62,1214.86 1116.21,1212.21 1116.8,1212.39 1117.38,1211.4 1117.97,1214.58 1118.55,1215.82 1119.14,1213.87 1119.73,1215.3 1120.31,1216.65 1120.9,1219.19 1121.49,1220.39 1122.07,1221.64 1122.66,1218.58 1123.25,1216.89 1123.83,1216.63 1124.42,1216.18 1125.01,1214.48 1125.59,1212.75 1126.18,1209.86 1126.76,1210.19 1127.35,1213.1 1127.94,1216.22 1128.52,1213.41 1129.11,1213.76 1129.7,1212.57 1130.28,1213.85 1130.87,1214.02 1131.46,1215.53 1132.04,1215.24 1132.63,1215.13 1133.21,1213.7 1133.8,1212.31 1134.39,1216.72 1134.97,1217.8 1135.56,1219.23 1136.15,1220.43 1136.73,1220.15 1137.32,1219.52 1137.91,1219.22 1138.49,1221.68 1139.08,1219.75 1139.67,1218.11 1140.25,1217.96 1140.84,1216.4 1141.42,1215.97 1142.01,1214.36 1142.6,1214.27 1143.18,1214.05 1143.77,1211.28 1144.36,1211.33 1144.94,1210.16 1145.53,1210.01 1146.12,1210.2 1146.7,1210.22 1147.29,1208.75 1147.88,1208.91 1148.46,1211.65 1149.05,1212.85 1149.63,1214.23 1150.22,1215.55 1150.81,1214.07 1151.39,1215.75 1151.98,1219.9 1152.57,1219.7 1153.15,1216.44 1153.74,1217.66 1154.33,1214.56 1154.91,1213.12 1155.5,1210.14 1156.09,1210.39 1156.67,1210.45 1157.26,1209.21 1157.84,1209.56 1158.43,1209.96 1159.02,1210.05 1159.6,1211.59 1160.19,1213.19 1160.78,1213.27 1161.36,1212.35 1161.95,1211.11 1162.54,1212.46 1163.12,1212.78 1163.71,1215.72 1164.29,1217.21 1164.88,1217 1165.47,1218.02 1166.05,1217.61 1166.64,1220.3 1167.23,1220.13 1167.81,1219.76 1168.4,1223.89 1168.99,1223.19 1169.57,1222.81 1170.16,1225.22 1170.75,1226.1 1171.33,1224.24 1171.92,1219.68 1172.5,1219.62 1173.09,1219.19 1173.68,1217.55 1174.26,1218.98 1174.85,1221.26 1175.44,1219.46 1176.02,1220.56 1176.61,1219.1 1177.2,1218.9 1177.78,1215.82 1178.37,1214.37 1178.96,1217.45 1179.54,1213.27 1180.13,1216.41 1180.71,1216.31 1181.3,1213.36 1181.89,1213.55 1182.47,1212.35 1183.06,1214.1 1183.65,1212.52 1184.23,1211.25 1184.82,1213.05 1185.41,1211.55 1185.99,1211.74 1186.58,1211.44 1187.16,1207.26 1187.75,1206.38 1188.34,1206.83 1188.92,1211.95 1189.51,1211.95 1190.1,1213.57 1190.68,1212.22 1191.27,1215.16 1191.86,1216.82 1192.44,1216.75 1193.03,1216.38 1193.62,1217.46 1194.2,1217.08 1194.79,1218.34 1195.37,1216.6 1195.96,1216.75 1196.55,1216.69 1197.13,1215.27 1197.72,1216.41 1198.31,1216.13 1198.89,1213.06 1199.48,1215.81 1200.07,1218.19 1200.65,1214.86 1201.24,1213.23 1201.83,1216.19 1202.41,1214.67 1203,1216 1203.58,1217.1 1204.17,1219.77 1204.76,1218.16 1205.34,1218.23 1205.93,1216.72 1206.52,1220.87 1207.1,1220.7 1207.69,1221.9 1208.28,1218.53 1208.86,1216.85 1209.45,1216.57 1210.03,1218 1210.62,1217.85 1211.21,1216.08 1211.79,1214.36 1212.38,1212.65 1212.97,1211.56 1213.55,1217 1214.14,1218.58 1214.73,1218.31 1215.31,1219.18 1215.9,1217.59 1216.49,1217.3 1217.07,1219.61 1217.66,1219.42 1218.24,1216.33 1218.83,1217.33 1219.42,1214.27 1220,1211.36 1220.59,1212.68 1221.18,1215.27 1221.76,1217.62 1222.35,1217.35 1222.94,1211.34 1223.52,1211.15 1224.11,1206.97 1224.7,1210.11 1225.28,1209.98 1225.87,1210.17 1226.45,1210.29 1227.04,1212.16 1227.63,1213.4 1228.21,1212.04 1228.8,1213.33 1229.39,1212.92 1229.97,1209.88 1230.56,1207.01 1231.15,1207.47 1231.73,1209.51 1232.32,1208.55 1232.91,1210.43 1233.49,1210.57 1234.08,1207.72 1234.66,1205.21 1235.25,1204.19 1235.84,1204.79 1236.42,1204.99 1237.01,1205.37 1237.6,1210.22 1238.18,1211.87 1238.77,1212.22 1239.36,1209.54 1239.94,1208.41 1240.53,1207.3 1241.11,1208.81 1241.7,1209.05 1242.29,1208.28 1242.87,1205.58 1243.46,1207.07 1244.05,1208.69 1244.63,1208.62 1245.22,1213.01 1245.81,1212.8 1246.39,1214.28 1246.98,1214.34 1247.57,1214.38 1248.15,1215.94 1248.74,1222.9 1249.32,1220.92 1249.91,1220.79 1250.5,1220.53 1251.08,1221.55 1251.67,1218.32 1252.26,1218.02 1252.84,1220.56 1253.43,1218.51 1254.02,1218.18 1254.6,1216.43 1255.19,1217.69 1255.78,1216.17 1256.36,1214.3 1256.95,1211.49 1257.53,1208.66 1258.12,1210.13 1258.71,1211.78 1259.29,1213.28 1259.88,1214.92 1260.47,1213.41 1261.05,1213.38 1261.64,1213.21 1262.23,1210.46 1262.81,1212.37 1263.4,1213.95 1263.98,1210.96 1264.57,1212.45 1265.16,1208.28 1265.74,1208.81 1266.33,1210.77 1266.92,1212.18 1267.5,1211.88 1268.09,1213.55 1268.68,1213.68 1269.26,1213.55 1269.85,1212.27 1270.44,1209.48 1271.02,1209.68 1271.61,1211.43 1272.19,1213.18 1272.78,1213.33 1273.37,1212.06 1273.95,1214.86 1274.54,1214.72 1275.13,1215.02 1275.71,1213.47 1276.3,1209.38 1276.89,1207.8 1277.47,1210.91 1278.06,1209.84 1278.65,1208.58 1279.23,1208.56 1279.82,1206.16 1280.4,1202.29 1280.99,1205.75 1281.58,1209.08 1282.16,1206.55 1282.75,1207.11 1283.34,1208.86 1283.92,1209 1284.51,1209.07 1285.1,1213.39 1285.68,1210.42 1286.27,1210.51 1286.86,1214.57 1287.44,1215.87 1288.03,1212.84 1288.61,1214.33 1289.2,1211.46 1289.79,1211.32 1290.37,1210.03 1290.96,1210.24 1291.55,1211.95 1292.13,1210.84 1292.72,1210.89 1293.31,1210.92 1293.89,1212.58 1294.48,1212.64 1295.06,1211.32 1295.65,1210.12 1296.24,1209.19 1296.82,1209.23 1297.41,1208.2 1298,1211.34 1298.58,1211.65 1299.17,1211.58 1299.76,1212.76 1300.34,1214.08 1300.93,1214.1 1301.52,1212.6 1302.1,1213.72 1302.69,1214.94 1303.27,1213.4 1303.86,1214.59 1304.45,1213.23 1305.03,1216.07 1305.62,1216.07 1306.21,1214.42 1306.79,1215.95 1307.38,1218.37 1307.97,1218.15 1308.55,1223.26 1309.14,1221.14 1309.73,1222.01 1310.31,1221.72 1310.9,1215.85 1311.48,1215.74 1312.07,1212.9 1312.66,1214.2 1313.24,1214.36 1313.83,1214.24 1314.42,1217.14 1315,1215.34 1315.59,1216.65 1316.18,1219.61 1316.76,1217.54 1317.35,1218.85 1317.93,1222.76 1318.52,1222.28 1319.11,1217.58 1319.69,1217.26 1320.28,1215.61 1320.87,1214.21 1321.45,1213.96 1322.04,1217.03 1322.63,1218.46 1323.21,1218.09 1323.8,1217.99 1324.39,1216.62 1324.97,1216.54 1325.56,1217.69 1326.14,1217.26 1326.73,1215.97 1327.32,1213.86 1327.9,1218.22 1328.49,1220.63 1329.08,1214.64 1329.66,1214.41 1330.25,1214.29 1330.84,1215.52 1331.42,1215.58 1332.01,1215.65 1332.6,1214.28 1333.18,1214.39 1333.77,1215.64 1334.35,1216.95 1334.94,1221.08 1335.53,1219.32 1336.11,1218.95 1336.7,1218.5 1337.29,1215.24 1337.87,1213.62 1338.46,1213.63 1339.05,1213.49 1339.63,1212.3 1340.22,1210.83 1340.8,1209.7 1341.39,1209.73 1341.98,1211.4 1342.56,1210.31 1343.15,1210.64 1343.74,1212.51 1344.32,1213.73 1344.91,1215.15 1345.5,1213.42 1346.08,1214.58 1346.67,1211.62 1347.26,1213.03 1347.84,1213.01 1348.43,1213.02 1349.01,1211.74 1349.6,1210.52 1350.19,1214.76 1350.77,1217.46 1351.36,1216.89 1351.95,1218.07 1352.53,1218.12 1353.12,1214.9 1353.71,1213.37 1354.29,1214.65 1354.88,1215.96 1355.47,1217.55 1356.05,1218.79 1356.64,1218.29 1357.22,1216.6 1357.81,1216.32 1358.4,1217.63 1358.98,1216.05 1359.57,1214.31 1360.16,1212.94 1360.74,1212.99 1361.33,1212.99 1361.92,1211.34 1362.5,1212.69 1363.09,1215.33 1363.68,1212.72 1364.26,1211.4 1364.85,1207.31 1365.43,1212.18 1366.02,1209.54 1366.61,1209.74 1367.19,1212.71 1367.78,1213.07 1368.37,1214.4 1368.95,1215.51 1369.54,1215.52 1370.13,1215.46 1370.71,1215.46 1371.3,1215.55 1371.88,1216.92 1372.47,1216.62 1373.06,1216.44 1373.64,1213.35 1374.23,1213.76 1374.82,1213.61 1375.4,1216.22 1375.99,1217.5 1376.58,1218.4 1377.16,1216.59 1377.75,1215.04 1378.34,1215.1 1378.92,1212.43 1379.51,1211.09 1380.09,1208.33 1380.68,1209.84 1381.27,1207.16 1381.85,1207.63 1382.44,1208.03 1383.03,1207.07 1383.61,1207.42 1384.2,1206.17 1384.79,1202.34 1385.37,1202.93 1385.96,1202.14 1386.55,1205.45 1387.13,1205.84 1387.72,1206.14 1388.3,1200.83 1388.89,1201.51 1389.48,1200.84 1390.06,1201.57 1390.65,1201.85 1391.24,1199.58 1391.82,1201.8 1392.41,1203.54 1393,1205.29 1393.58,1207.15 1394.17,1206.23 1394.75,1204.93 1395.34,1205.47 1395.93,1208.35 1396.51,1208.58 1397.1,1211.5 1397.69,1211.72 1398.27,1213.48 1398.86,1213.32 1399.45,1211.96 1400.03,1209.23 1400.62,1208.01 1401.21,1208.28 1401.79,1208.61 1402.38,1208.72 1402.96,1207.68 1403.55,1209.81 1404.14,1212.96 1404.72,1212.68 1405.31,1211.44 1405.9,1213.23 1406.48,1214.79 1407.07,1215.99 1407.66,1222.88 1408.24,1222.23 1408.83,1217.54 1409.42,1212.98 1410,1212.9 1410.59,1211.62 1411.17,1214.45 1411.76,1218.46 1412.35,1215.44 1412.93,1213.91 1413.52,1215.4 1414.11,1216.64 1414.69,1213.7 1415.28,1209.39 1415.87,1212.32 1416.45,1211.27 1417.04,1211.44 1417.63,1213.08 1418.21,1214.16 1418.8,1212.8 1419.38,1212.81 1419.97,1212.8 1420.56,1214.2 1421.14,1215.2 1421.73,1213.87 1422.32,1211.02 1422.9,1206.71 1423.49,1206.9 1424.08,1207.04 1424.66,1208.94 1425.25,1204.86 1425.83,1206.8 1426.42,1204.4 1427.01,1202.06 1427.59,1202.85 1428.18,1200.37 1428.77,1201.28 1429.35,1203.35 1429.94,1202.47 1430.53,1203.23 1431.11,1205.21 1431.7,1204.56 1432.29,1205.39 1432.87,1204.69 1433.46,1206.68 1434.04,1208.42 1434.63,1207.29 1435.22,1207.72 1435.8,1205.42 1436.39,1207.31 1436.98,1210.65 1437.56,1209.41 1438.15,1211.09 1438.74,1211.3 1439.32,1211.23 1439.91,1214.23 1440.5,1216.74 1441.08,1221.77 1441.67,1222.82 1442.25,1222.26 1442.84,1220.67 1443.43,1221.76 1444.01,1219.98 1444.6,1218.42 1445.19,1221.1 1445.77,1216.29 1446.36,1213.38 1446.95,1213.35 1447.53,1214.72 1448.12,1215.98 1448.7,1214.48 1449.29,1212.89 1449.88,1214.45 1450.46,1217.07 1451.05,1216.65 1451.64,1216.2 1452.22,1221.71 1452.81,1221.22 1453.4,1224.98 1453.98,1221.52 1454.57,1222.76 1455.16,1225.14 1455.74,1224.87 1456.33,1221.51 1456.91,1222.73 1457.5,1223.51 1458.09,1222.2 1458.67,1221.66 1459.26,1218.34 1459.85,1216.79 1460.43,1216.29 1461.02,1214.61 1461.61,1215.88 1462.19,1215.62 1462.78,1216.86 1463.37,1218.01 1463.95,1217.57 1464.54,1215.82 1465.12,1217 1465.71,1215.48 1466.3,1212.36 1466.88,1211.19 1467.47,1211.49 1468.06,1211.89 1468.64,1211.79 1469.23,1210.26 1469.82,1210.57 1470.4,1210.69 1470.99,1208.02 1471.57,1208 1472.16,1208.39 1472.75,1213.18 1473.33,1213.19 1473.92,1210.45 1474.51,1210.41 1475.09,1209.41 1475.68,1211.05 1476.27,1208.71 1476.85,1211.64 1477.44,1214.49 1478.03,1214.53 1478.61,1215.64 1479.2,1215.59 1479.78,1216.73 1480.37,1217.78 1480.96,1216.07 1481.54,1215.73 1482.13,1215.69 1482.72,1214.14 1483.3,1215.34 1483.89,1216.15 1484.48,1218.58 1485.06,1218.31 1485.65,1218.12 1486.24,1219.66 1486.82,1218.99 1487.41,1215.65 1487.99,1215.24 1488.58,1215.25 1489.17,1215.22 1489.75,1212.65 1490.34,1217 1490.93,1219.5 1491.51,1220.88 1492.1,1221.65 1492.69,1220.98 1493.27,1218.84 1493.86,1220.21 1494.45,1216.86 1495.03,1216.7 1495.62,1210.93 1496.2,1212.52 1496.79,1211.19 1497.38,1211.07 1497.96,1209.91 1498.55,1208.51 1499.14,1207.45 1499.72,1209.26 1500.31,1209.59 1500.9,1212.53 1501.48,1212.64 1502.07,1212.63 1502.65,1214.42 1503.24,1218.54 1503.83,1216.82 1504.41,1215.3 1505,1213.76 1505.59,1213.58 1506.17,1210.7 1506.76,1210.95 1507.35,1211.18 1507.93,1209.96 1508.52,1215.77 1509.11,1216.06 1509.69,1215.72 1510.28,1219.58 1510.86,1220.71 1511.45,1220.13 1512.04,1222.7 1512.62,1223.15 1513.21,1218.2 1513.8,1219.21 1514.38,1213.1 1514.97,1213.16 1515.56,1211.85 1516.14,1211.86 1516.73,1212.07 1517.32,1214.84 1517.9,1216.12 1518.49,1216.05 1519.07,1216.21 1519.66,1215.99 1520.25,1217.3 1520.83,1214.18 1521.42,1212.91 1522.01,1213.19 1522.59,1210.5 1523.18,1213.33 1523.77,1209.12 1524.35,1210.99 1524.94,1212.4 1525.52,1209.76 1526.11,1209.87 1526.7,1209.96 1527.28,1212.88 1527.87,1211.71 1528.46,1208.84 1529.04,1210.18 1529.63,1208.67 1530.22,1207.33 1530.8,1209.13 1531.39,1210.93 1531.98,1209.77 1532.56,1212.63 1533.15,1214.05 1533.73,1218.23 1534.32,1218.1 1534.91,1214.88 1535.49,1213.54 1536.08,1214.99 1536.67,1214.99 1537.25,1214.81 1537.84,1215.96 1538.43,1215.78 1539.01,1219.75 1539.6,1218.02 1540.19,1217.71 1540.77,1214.66 1541.36,1211.71 1541.94,1210.46 1542.53,1211.89 1543.12,1213.22 1543.7,1214.52 1544.29,1215.87 1544.88,1217.24 1545.46,1215.86 1546.05,1215.8 1546.64,1215.55 1547.22,1216.88 1547.81,1216.73 1548.4,1216.52 1548.98,1216.37 1549.57,1216.19 1550.15,1217.19 1550.74,1216.96 1551.33,1216.87 1551.91,1221.17 1552.5,1217.97 1553.09,1214.99 1553.67,1216.28 1554.26,1215.93 1554.85,1214.36 1555.43,1213.07 1556.02,1215.7 1556.6,1215.68 1557.19,1212.56 1557.78,1211.06 1558.36,1205.55 1558.95,1205.77 1559.54,1211.58 1560.12,1213.19 1560.71,1214.56 1561.3,1213.1 1561.88,1210.65 1562.47,1208.4 1563.06,1211.76 1563.64,1210.42 1564.23,1210.57 1564.81,1210.55 1565.4,1206.47 1565.99,1206.92 1566.57,1205.87 1567.16,1207.38 1567.75,1209.53 1568.33,1208.05 1568.92,1208.27 1569.51,1207.28 1570.09,1208.74 1570.68,1209.16 1571.27,1212.16 1571.85,1210.69 1572.44,1209.61 1573.02,1211.27 1573.61,1218.43 1574.2,1216.84 1574.78,1218.09 1575.37,1215.1 1575.96,1213.83 1576.54,1216.68 1577.13,1217.39 1577.72,1216.96 1578.3,1217.62 1578.89,1218.96 1579.47,1218.45 1580.06,1219.28 1580.65,1218.97 1581.23,1218.92 1581.82,1218.84 1582.41,1217.01 1582.99,1217.93 1583.58,1219.34 1584.17,1220.43 1584.75,1221.64 1585.34,1222.81 1585.93,1220.79 1586.51,1221.86 1587.1,1221.32 1587.68,1221.03 1588.27,1219.36 1588.86,1220.55 1589.44,1221.84 1590.03,1221.63 1590.62,1219.66 1591.2,1219.27 1591.79,1219.05 1592.38,1215.89 1592.96,1214.46 1593.55,1214.45 1594.14,1215.81 1594.72,1218.24 1595.31,1215.33 1595.89,1212.24 1596.48,1211.78 1597.07,1213.27 1597.65,1210.81 1598.24,1209.41 1598.83,1208.31 1599.41,1203.87 1600,1204.17 1600.59,1204.78 1601.17,1202.4 1601.76,1202.7 1602.34,1207.42 1602.93,1210.65 1603.52,1212.12 1604.1,1212.07 1604.69,1207.5 1605.28,1207.65 1605.86,1207.92 1606.45,1208.28 1607.04,1208.56 1607.62,1210.33 1608.21,1214.62 1608.8,1212.88 1609.38,1214.53 1609.97,1212.77 1610.55,1212.91 1611.14,1211.57 1611.73,1212.97 1612.31,1210.18 1612.9,1206.19 1613.49,1206.3 1614.07,1206.7 1614.66,1208.65 1615.25,1209.97 1615.83,1213.04 1616.42,1211.42 1617.01,1210.29 1617.59,1210.52 1618.18,1209.27 1618.76,1205.36 1619.35,1207.22 1619.94,1207.47 1620.52,1206.31 1621.11,1208.4 1621.7,1209.94 1622.28,1208.81 1622.87,1207.71 1623.46,1212.26 1624.04,1212.42 1624.63,1212.6 1625.22,1215.48 1625.8,1218.31 1626.39,1218.19 1626.97,1217.98 1627.56,1216.3 1628.15,1216.04 1628.73,1215.91 1629.32,1214.24 1629.91,1214.14 1630.49,1212.96 1631.08,1211.68 1631.67,1210.82 1632.25,1210.89 1632.84,1213.91 1633.42,1215.2 1634.01,1215.35 1634.6,1215.17 1635.18,1213.71 1635.77,1213.56 1636.36,1213.7 1636.94,1217.9 1637.53,1217.49 1638.12,1218.51 1638.7,1220.93 1639.29,1217.84 1639.88,1217.3 1640.46,1214.22 1641.05,1215.66 1641.63,1215.75 1642.22,1214.18 1642.81,1215.53 1643.39,1216.86 1643.98,1212.41 1644.57,1209.82 1645.15,1211.32 1645.74,1210.08 1646.33,1207.62 1646.91,1209.35 1647.5,1209.64 1648.09,1209.5 1648.67,1208.07 1649.26,1208.49 1649.84,1207.26 1650.43,1208.93 1651.02,1210.65 1651.6,1212.05 1652.19,1211.91 1652.78,1211.81 1653.36,1211.84 1653.95,1213.22 1654.54,1214.66 1655.12,1213.31 1655.71,1213.08 1656.29,1214.36 1656.88,1214.41 1657.47,1215.97 1658.05,1214.34 1658.64,1214.35 1659.23,1217.11 1659.81,1217.01 1660.4,1215.47 1660.99,1216.67 1661.57,1212.54 1662.16,1209.49 1662.75,1206.81 1663.33,1205.87 1663.92,1206.21 1664.5,1206.66 1665.09,1206.72 1665.68,1207.19 1666.26,1207.38 1666.85,1205.79 1667.44,1209.38 1668.02,1209.75 1668.61,1208.37 1669.2,1208.71 1669.78,1208.92 1670.37,1207.73 1670.96,1208.4 1671.54,1205.66 1672.13,1204.56 1672.71,1203.74 1673.3,1200.97 1673.89,1204.61 1674.47,1206.66 1675.06,1209.93 1675.65,1208.82 1676.23,1208.07 1676.82,1208.17 1677.41,1210.03 1677.99,1211.61 1678.58,1214.21 1679.17,1215.53 1679.75,1211.16 1680.34,1217 1680.92,1214.32 1681.51,1209.9 1682.1,1210.04 1682.68,1210.24 1683.27,1210.48 1683.86,1211.97 1684.44,1213.47 1685.03,1213.15 1685.62,1215.9 1686.2,1215.79 1686.79,1215.58 1687.37,1214.26 1687.96,1212.82 1688.55,1211.45 1689.13,1211.52 1689.72,1211.24 1690.31,1212.84 1690.89,1211.32 1691.48,1215.13 1692.07,1217.48 1692.65,1215.98 1693.24,1216.33 1693.83,1217.61 1694.41,1216.2 1695,1216.24 1695.58,1214.76 1696.17,1216.08 1696.76,1213.14 1697.34,1211.72 1697.93,1211.92 1698.52,1212 1699.1,1214.89 1699.69,1216.39 1700.28,1213.23 1700.86,1215.86 1701.45,1217.11 1702.04,1215.42 1702.62,1215.33 1703.21,1214.12 1703.79,1215.68 1704.38,1214.34 1704.97,1213.17 1705.55,1216 1706.14,1217.02 1706.73,1213.65 1707.31,1210.72 1707.9,1210.7 1708.49,1212.24 1709.07,1212.11 1709.66,1213.39 1710.24,1216.22 1710.83,1213.33 1711.42,1217.56 1712,1215.96 1712.59,1214.35 1713.18,1214.18 1713.76,1213.82 1714.35,1213.86 1714.94,1210.97 1715.52,1210.81 1716.11,1209.28 1716.7,1212.08 1717.28,1213.55 1717.87,1212.14 1718.45,1214.68 1719.04,1213.31 1719.63,1214.68 1720.21,1214.86 1720.8,1214.79 1721.39,1214.59 1721.97,1214.63 1722.56,1214.51 1723.15,1215.98 1723.73,1214.55 1724.32,1214.33 1724.91,1215.56 1725.49,1216.73 1726.08,1218.05 1726.66,1215.1 1727.25,1216.25 1727.84,1213.34 1728.42,1213.08 1729.01,1216.07 1729.6,1214.81 1730.18,1214.59 1730.77,1215.64 1731.36,1215.54 1731.94,1215.79 1732.53,1218.46 1733.11,1219.63 1733.7,1216.38 1734.29,1214.64 1734.87,1210.51 1735.46,1213.87 1736.05,1218.32 1736.63,1218.25 1737.22,1219.12 1737.81,1218.83 1738.39,1218.79 1738.98,1221.32 1739.57,1221.14 1740.15,1220.67 1740.74,1221.52 1741.32,1221.19 1741.91,1223.65 1742.5,1222.89 1743.08,1217.9 1743.67,1215.96 1744.26,1217.24 1744.84,1214.28 1745.43,1212.89 1746.02,1214.42 1746.6,1214.7 1747.19,1214.39 1747.78,1214.71 1748.36,1214.67 1748.95,1217.52 1749.53,1217.26 1750.12,1217.02 1750.71,1218.17 1751.29,1216.59 1751.88,1217.72 1752.47,1213.15 1753.05,1213.04 1753.64,1211.45 1754.23,1210.22 1754.81,1210.44 1755.4,1209.08 1755.99,1211.97 1756.57,1213.47 1757.16,1213.31 1757.74,1214.78 1758.33,1214.55 1758.92,1214.63 1759.5,1213.08 1760.09,1211.81 1760.68,1211.85 1761.26,1214.45 1761.85,1217.05 1762.44,1215.29 1763.02,1219.68 1763.61,1216.61 1764.19,1215.1 1764.78,1212.21 1765.37,1213.83 1765.95,1210.84 1766.54,1214.08 1767.13,1212.76 1767.71,1210.1 1768.3,1210.46 1768.89,1209.25 1769.47,1209.93 1770.06,1210.11 1770.65,1207.5 1771.23,1207.63 1771.82,1210.68 1772.4,1210.96 1772.99,1212.12 1773.58,1212.29 1774.16,1212.1 1774.75,1214.86 1775.34,1215.96 1775.92,1215.66 1776.51,1209.66 1777.1,1209.87 1777.68,1207.02 1778.27,1208.88 1778.86,1209.3 1779.44,1211.13 1780.03,1208.75 1780.61,1208.78 1781.2,1209.2 1781.79,1212.24 1782.37,1213.72 1782.96,1211.37 1783.55,1210.03 1784.13,1211.66 1784.72,1210.45 1785.31,1209.14 1785.89,1204.95 1786.48,1204.02 1787.06,1205.86 1787.65,1206.27 1788.24,1209.76 1788.82,1209.63 1789.41,1208.54 1790,1209.07 1790.58,1209.13 1791.17,1209.61 1791.76,1209.9 1792.34,1212.96 1792.93,1215.83 1793.52,1212.93 1794.1,1209.01 1794.69,1207.79 1795.27,1208.1 1795.86,1209.58 1796.45,1209.57 1797.03,1211.33 1797.62,1208.45 1798.21,1205.77 1798.79,1206.27 1799.38,1209.6 1799.97,1208.48 1800.55,1208.6 1801.14,1210.06 1801.73,1208.7 1802.31,1207.61 1802.9,1206.41 1803.48,1204.06 1804.07,1205 1804.66,1201.23 1805.24,1202.03 1805.83,1199.98 1806.42,1200.75 1807,1201.34 1807.59,1204.8 1808.18,1203.88 1808.76,1205.75 1809.35,1206.26 1809.94,1207.87 1810.52,1208.27 1811.11,1208.42 1811.69,1207.49 1812.28,1209.39 1812.87,1210.83 1813.45,1211.05 1814.04,1212.4 1814.63,1212.48 1815.21,1209.66 1815.8,1211.23 1816.39,1211.32 1816.97,1211.11 1817.56,1209.86 1818.14,1211.61 1818.73,1212.72 1819.32,1212.85 1819.9,1214.48 1820.49,1215.68 1821.08,1214 1821.66,1213.69 1822.25,1218.09 1822.84,1217.67 1823.42,1213.41 1824.01,1214.68 1824.6,1215.99 1825.18,1215.95 1825.77,1215.8 1826.35,1215.74 1826.94,1218.2 1827.53,1217.91 1828.11,1219.35 1828.7,1220.34 1829.29,1221.62 1829.87,1223.94 1830.46,1223.26 1831.05,1221.62 1831.63,1222.47 1832.22,1223.06 1832.81,1221.16 1833.39,1220.73 1833.98,1218.78 1834.56,1219.88 1835.15,1219.34 1835.74,1220.38 1836.32,1218.66 1836.91,1218.07 1837.5,1217.92 1838.08,1217.27 1838.67,1217.14 1839.26,1214.34 1839.84,1215.7 1840.43,1215.84 1841.01,1215.73 1841.6,1215.62 1842.19,1218.57 1842.77,1219.81 1843.36,1220.65 1843.95,1218.94 1844.53,1218.78 1845.12,1218.65 1845.71,1216.8 1846.29,1216.68 1846.88,1218.02 1847.47,1217.39 1848.05,1217.06 1848.64,1217.07 1849.22,1218.2 1849.81,1222.25 1850.4,1222.64 1850.98,1222.14 1851.57,1218.95 1852.16,1218.62 1852.74,1221.67 1853.33,1217.35 1853.92,1214.27 1854.5,1212.65 1855.09,1212.56 1855.68,1209.7 1856.26,1211.29 1856.85,1211.37 1857.43,1212.9 1858.02,1214.28 1858.61,1216.84 1859.19,1216.45 1859.78,1216.38 1860.37,1217.61 1860.95,1216.13 1861.54,1217.1 1862.13,1219.62 1862.71,1219.04 1863.3,1217.28 1863.88,1218.52 1864.47,1220.97 1865.06,1219.31 1865.64,1218.99 1866.23,1215.66 1866.82,1216.8 1867.4,1219.6 1867.99,1217.84 1868.58,1218.97 1869.16,1217.46 1869.75,1214.44 1870.34,1210.43 1870.92,1210.59 1871.51,1209.33 1872.09,1209.33 1872.68,1210.83 1873.27,1208.17 1873.85,1211.53 1874.44,1211.73 1875.03,1213.51 1875.61,1210.63 1876.2,1209.68 1876.79,1210.06 1877.37,1211.74 1877.96,1211.56 1878.55,1214.47 1879.13,1212.74 1879.72,1211.12 1880.3,1212.85 1880.89,1215.69 1881.48,1214.32 1882.06,1215.82 1882.65,1215.85 1883.24,1215.57 1883.82,1212.88 1884.41,1214.32 1885,1218.75 1885.58,1222.84 1886.17,1221.02 1886.76,1220.62 1887.34,1220.36 1887.93,1224.14 1888.51,1222.39 1889.1,1223.38 1889.69,1220.24 1890.27,1218.82 1890.86,1218.59 1891.45,1215.41 1892.03,1216.73 1892.62,1218.01 1893.21,1217.78 1893.79,1218.89 1894.38,1219.91 1894.96,1214.96 1895.55,1215.96 1896.14,1215.72 1896.72,1214.34 1897.31,1213.28 1897.9,1214.79 1898.48,1211.6 1899.07,1211.52 1899.66,1210.05 1900.24,1210.2 1900.83,1210.22 1901.42,1210.33 1902,1213.14 1902.59,1211.4 1903.17,1210.09 1903.76,1207.12 1904.35,1205.79 1904.93,1204.8 1905.52,1206.98 1906.11,1207.47 1906.69,1207.83 1907.28,1206.79 1907.87,1208.44 1908.45,1210.31 1909.04,1209.21 1909.63,1212.15 1910.21,1209.51 1910.8,1208.36 1911.38,1209.16 1911.97,1209.54 1912.56,1209.58 1913.14,1208.38 1913.73,1210.34 1914.32,1209.13 1914.9,1210.63 1915.49,1212.51 1916.08,1211.11 1916.66,1211.29 1917.25,1211.34 1917.83,1208.56 1918.42,1207.29 1919.01,1206.49 1919.59,1209.49 1920.18,1209.47 1920.77,1208.12 1921.35,1212.85 1921.94,1212.86 1922.53,1212.83 1923.11,1213.05 1923.7,1213.17 1924.29,1214.37 1924.87,1213 1925.46,1211.77 1926.04,1213.07 1926.63,1210.03 1927.22,1208.87 1927.8,1212 1928.39,1213.56 1928.98,1213.62 1929.56,1212.44 1930.15,1212.51 1930.74,1211.28 1931.32,1211.48 1931.91,1212.94 1932.5,1211.7 1933.08,1212.03 1933.67,1212.33 1934.25,1215.35 1934.84,1213.89 1935.43,1212.76 1936.01,1210.04 1936.6,1208.77 1937.19,1206.03 1937.77,1206.48 1938.36,1206.71 1938.95,1207.12 1939.53,1210.43 1940.12,1210.52 1940.71,1210.86 1941.29,1209.66 1941.88,1211.09 1942.46,1210.15 1943.05,1213.1 1943.64,1211.5 1944.22,1213.11 1944.81,1214.43 1945.4,1215.76 1945.98,1215.47 1946.57,1215.23 1947.16,1215.07 1947.74,1213.47 1948.33,1211.73 1948.91,1213.13 1949.5,1214.53 1950.09,1216.12 1950.67,1215.98 1951.26,1215.88 1951.85,1213.04 1952.43,1212.75 1953.02,1208.47 1953.61,1208.93 1954.19,1209.15 1954.78,1212.56 1955.37,1209.75 1955.95,1208.59 1956.54,1208.86 1957.12,1209.19 1957.71,1209.53 1958.3,1208.07 1958.88,1209.71 1959.47,1209.89 1960.06,1212.66 1960.64,1211.15 1961.23,1209.95 1961.82,1211.49 1962.4,1208.66 1962.99,1210.46 1963.58,1210.53 1964.16,1211.94 1964.75,1212 1965.33,1210.48 1965.92,1209.09 1966.51,1210.86 1967.09,1212.63 1967.68,1211.5 1968.27,1210.21 1968.85,1210.42 1969.44,1211.93 1970.03,1210.43 1970.61,1210.61 1971.2,1212.18 1971.78,1213.57 1972.37,1215.26 1972.96,1216.4 1973.54,1214.93 1974.13,1216.31 1974.72,1215.81 1975.3,1218.54 1975.89,1221.02 1976.48,1220.38 1977.06,1219.69 1977.65,1219.42 1978.24,1219.2 1978.82,1217.33 1979.41,1218.61 1979.99,1219.48 1980.58,1220.15 1981.17,1221.18 1981.75,1219.34 1982.34,1214.7 1982.93,1212.84 1983.51,1210.28 1984.1,1212.05 1984.69,1213.55 1985.27,1213.81 1985.86,1213.9 1986.45,1213.92 1987.03,1216.61 1987.62,1213.79 1988.2,1213.76 1988.79,1212.47 1989.38,1215.28 1989.96,1216.4 1990.55,1216.2 1991.14,1215.09 1991.72,1214.86 1992.31,1213.45 1992.9,1208.92 1993.48,1207.79 1994.07,1206.65 1994.65,1204.67 1995.24,1203.74 1995.83,1207.21 1996.41,1207.48 1997,1210.72 1997.59,1210.91 1998.17,1213.72 1998.76,1212.6 1999.35,1211.37 1999.93,1212.97 2000.52,1215.77 2001.11,1217.17 2001.69,1213.92 2002.28,1213.97 2002.86,1215.15 2003.45,1216.3 2004.04,1214.56 2004.62,1211.63 2005.21,1213.42 2005.8,1213.31 2006.38,1216.28 2006.97,1213.25 2007.56,1216.04 2008.14,1216.99 2008.73,1219.67 2009.32,1220.71 2009.9,1219.03 2010.49,1220.05 2011.07,1219.55 2011.66,1220.48 2012.25,1218.44 2012.83,1219.55 2013.42,1217.81 2014.01,1217.61 2014.59,1218.62 2015.18,1219.71 2015.77,1222.17 2016.35,1220.34 2016.94,1220.94 2017.53,1221.65 2018.11,1222.88 2018.7,1222.73 2019.28,1221.13 2019.87,1219.3 2020.46,1220.26 2021.04,1219.91 2021.63,1219.64 2022.22,1224.67 2022.8,1224.09 2023.39,1220.52 2023.98,1218.72 2024.56,1217.19 2025.15,1215.5 2025.73,1215.25 2026.32,1215.33 2026.91,1215.21 2027.49,1216.8 2028.08,1213.58 2028.67,1215.14 2029.25,1213.98 2029.84,1216.75 2030.43,1217.96 2031.01,1216.21 2031.6,1217.51 2032.19,1217.03 2032.77,1211.25 2033.36,1214.24 2033.94,1215.66 2034.53,1212.74 2035.12,1212.66 2035.7,1212.73 2036.29,1214.21 2036.88,1213.88 2037.46,1215.03 2038.05,1216.21 2038.64,1217.82 2039.22,1216.38 2039.81,1216.11 2040.4,1218.85 2040.98,1219.86 2041.57,1219.31 2042.15,1213.62 2042.74,1213.7 2043.33,1214.99 2043.91,1214.78 2044.5,1214.49 2045.09,1211.54 2045.67,1213.32 2046.26,1213.1 2046.85,1208.99 2047.43,1207.67 2048.02,1207.86 2048.6,1209.46 2049.19,1209.72 2049.78,1211.26 2050.36,1211.55 2050.95,1213.04 2051.54,1211.84 2052.12,1213.25 2052.71,1213.01 2053.3,1212.98 2053.88,1212.86 2054.47,1214.46 2055.06,1212.93 2055.64,1212.88 2056.23,1211.63 2056.81,1211.88 2057.4,1211.98 2057.99,1213.05 2058.57,1211.61 2059.16,1210.32 2059.75,1210.36 2060.33,1213.47 2060.92,1213.45 2061.51,1215.02 2062.09,1216.1 2062.68,1211.5 2063.27,1211.34 2063.85,1210.14 2064.44,1208.74 2065.02,1208.98 2065.61,1210.6 2066.2,1209.44 2066.78,1209.69 2067.37,1211.43 2067.96,1213.18 2068.54,1208.81 2069.13,1207.69 2069.72,1207.94 2070.3,1209.6 2070.89,1209.67 2071.48,1209.42 2072.06,1213.72 2072.65,1212.13 2073.23,1210.72 2073.82,1210.89 2074.41,1209.32 2074.99,1206.96 2075.58,1205.89 2076.17,1209.23 2076.75,1209.6 2077.34,1211.15 2077.93,1210.9 2078.51,1210.91 2079.1,1208.07 2079.68,1208.45 2080.27,1210.21 2080.86,1211.97 2081.44,1214.36 2082.03,1216.02 2082.62,1216.04 2083.2,1215.99 2083.79,1214.59 2084.38,1218.72 2084.96,1219.73 2085.55,1219.46 2086.14,1217.61 2086.72,1214.78 2087.31,1215.89 2087.89,1214.48 2088.48,1213.46 2089.07,1216.15 2089.65,1213.13 2090.24,1213.32 2090.83,1215.02 2091.41,1214.94 2092,1213.25 2092.59,1214.49 2093.17,1214.6 2093.76,1214.45 2094.35,1214.34 2094.93,1214.58 2095.52,1212.99 2096.1,1211.82 2096.69,1214.7 2097.28,1214.77 2097.86,1214.87 2098.45,1214.65 2099.04,1214.41 2099.62,1211.74 2100.21,1210.54 2100.8,1207.98 2101.38,1208.08 2101.97,1208.42 2102.55,1208.73 2103.14,1206.42 2103.73,1202.24 2104.31,1202.69 2104.9,1203.09 2105.49,1202.69 2106.07,1207.57 2106.66,1209.41 2107.25,1212.37 2107.83,1211.13 2108.42,1211.26 2109.01,1214.47 2109.59,1214.65 2110.18,1217.38 2110.76,1215.92 2111.35,1216.91 2111.94,1220.87 2112.52,1216.26 2113.11,1215.85 2113.7,1212.98 2114.28,1211.84 2114.87,1211.92 2115.46,1215.07 2116.04,1217.35 2116.63,1219.77 2117.22,1219.27 2117.8,1220.26 2118.39,1218.59 2118.97,1222.42 2119.56,1220.41 2120.15,1221.48 2120.73,1219.66 2121.32,1219.27 2121.91,1216.06 2122.49,1214.51 2123.08,1214.32 2123.67,1214.47 2124.25,1215.83 2124.84,1217.22 2125.42,1218.35 2126.01,1217.89 2126.6,1213.3 2127.18,1214.56 2127.77,1214.2 2128.36,1214.1 2128.94,1212.59 2129.53,1209.56 2130.12,1211.5 2130.7,1210.13 2131.29,1211.78 2131.88,1211.95 2132.46,1214.82 2133.05,1216.15 2133.63,1219.98 2134.22,1216.68 2134.81,1217.86 2135.39,1217.82 2135.98,1220.51 2136.57,1221.4 2137.15,1217.8 2137.74,1217.73 2138.33,1218.86 2138.91,1218.6 2139.5,1218.26 2140.09,1218.08 2140.67,1220.65 2141.26,1217.35 2141.84,1215.44 2142.43,1213.71 2143.02,1212.15 2143.6,1210.8 2144.19,1212.42 2144.78,1213.78 2145.36,1213.62 2145.95,1210.79 2146.54,1212.07 2147.12,1212.03 2147.71,1213.49 2148.3,1210.96 2148.88,1209.72 2149.47,1205.71 2150.05,1207.54 2150.64,1206.26 2151.23,1205.3 2151.81,1207 2152.4,1207.37 2152.99,1206.63 2153.57,1203.96 2154.16,1205.67 2154.75,1207.61 2155.33,1206.48 2155.92,1206.8 2156.5,1205.81 2157.09,1204.95 2157.68,1206.81 2158.26,1204.44 \"/>\n<path clip-path=\"url(#clip122)\" d=\"M986.025 1213.93 L986.612 1213.93 L987.198 1213.93 L987.785 1213.93 L988.371 1213.93 L988.957 1213.93 L989.544 1213.93 L990.13 1213.93 L990.717 1213.93 L991.303 1213.93 L991.889 1213.93 L992.476 1213.93 L993.062 1213.93 L993.649 1213.93 L994.235 1213.93 L994.822 1213.93 L995.408 1213.93 L995.994 1213.93 L996.581 1213.93 L997.167 1213.93 L997.754 1213.93 L998.34 1213.93 L998.926 1213.93 L999.513 1213.93 L1000.1 1213.93 L1000.69 1213.93 L1001.27 1213.93 L1001.86 1213.93 L1002.44 1213.93 L1003.03 1213.93 L1003.62 1213.93 L1004.2 1213.93 L1004.79 1213.93 L1005.38 1213.93 L1005.96 1213.93 L1006.55 1213.93 L1007.14 1213.93 L1007.72 1213.93 L1008.31 1213.93 L1008.9 1213.93 L1009.48 1213.93 L1010.07 1213.93 L1010.65 1213.93 L1011.24 1213.93 L1011.83 1213.93 L1012.41 1213.93 L1013 1213.93 L1013.59 1213.93 L1014.17 1213.93 L1014.76 1213.93 L1015.35 1213.93 L1015.93 1213.93 L1016.52 1213.93 L1017.11 1213.93 L1017.69 1213.93 L1018.28 1213.93 L1018.86 1213.93 L1019.45 1213.93 L1020.04 1213.93 L1020.62 1213.93 L1021.21 1213.93 L1021.8 1213.93 L1022.38 1213.93 L1022.97 1213.93 L1023.56 1213.93 L1024.14 1213.93 L1024.73 1213.93 L1025.32 1213.93 L1025.9 1213.93 L1026.49 1213.93 L1027.07 1213.93 L1027.66 1213.93 L1028.25 1213.93 L1028.83 1213.93 L1029.42 1213.93 L1030.01 1213.93 L1030.59 1213.93 L1031.18 1213.93 L1031.77 1213.93 L1032.35 1213.93 L1032.94 1213.93 L1033.52 1213.93 L1034.11 1213.93 L1034.7 1213.93 L1035.28 1213.93 L1035.87 1213.93 L1036.46 1213.93 L1037.04 1213.93 L1037.63 1213.93 L1038.22 1213.93 L1038.8 1213.93 L1039.39 1213.93 L1039.98 1213.93 L1040.56 1213.93 L1041.15 1213.93 L1041.73 1213.93 L1042.32 1213.93 L1042.91 1213.93 L1043.49 1213.93 L1044.08 1213.93 L1044.67 1213.93 L1045.25 1213.93 L1045.84 1213.93 L1046.43 1213.93 L1047.01 1213.93 L1047.6 1213.93 L1048.19 1213.93 L1048.77 1213.93 L1049.36 1213.93 L1049.94 1213.93 L1050.53 1213.93 L1051.12 1213.93 L1051.7 1213.93 L1052.29 1213.93 L1052.88 1213.93 L1053.46 1213.93 L1054.05 1213.93 L1054.64 1213.93 L1055.22 1213.93 L1055.81 1213.93 L1056.39 1213.93 L1056.98 1213.93 L1057.57 1213.93 L1058.15 1213.93 L1058.74 1213.93 L1059.33 1213.93 L1059.91 1213.93 L1060.5 1213.93 L1061.09 1213.93 L1061.67 1213.93 L1062.26 1213.93 L1062.85 1213.93 L1063.43 1213.93 L1064.02 1213.93 L1064.6 1213.93 L1065.19 1213.93 L1065.78 1213.93 L1066.36 1213.93 L1066.95 1213.93 L1067.54 1213.93 L1068.12 1213.93 L1068.71 1213.93 L1069.3 1213.93 L1069.88 1213.93 L1070.47 1213.93 L1071.06 1213.93 L1071.64 1213.93 L1072.23 1213.93 L1072.81 1213.93 L1073.4 1213.93 L1073.99 1213.93 L1074.57 1213.93 L1075.16 1213.93 L1075.75 1213.93 L1076.33 1213.93 L1076.92 1213.93 L1077.51 1213.93 L1078.09 1213.93 L1078.68 1213.93 L1079.26 1213.93 L1079.85 1213.93 L1080.44 1213.93 L1081.02 1213.93 L1081.61 1213.93 L1082.2 1213.93 L1082.78 1213.93 L1083.37 1213.93 L1083.96 1213.93 L1084.54 1213.93 L1085.13 1213.93 L1085.72 1213.93 L1086.3 1213.93 L1086.89 1213.93 L1087.47 1213.93 L1088.06 1213.93 L1088.65 1213.93 L1089.23 1213.93 L1089.82 1213.93 L1090.41 1213.93 L1090.99 1213.93 L1091.58 1213.93 L1092.17 1213.93 L1092.75 1213.93 L1093.34 1213.93 L1093.93 1213.93 L1094.51 1213.93 L1095.1 1213.93 L1095.68 1213.93 L1096.27 1213.93 L1096.86 1213.93 L1097.44 1213.93 L1098.03 1213.93 L1098.62 1213.93 L1099.2 1213.93 L1099.79 1213.93 L1100.38 1213.93 L1100.96 1213.93 L1101.55 1213.93 L1102.14 1213.93 L1102.72 1213.93 L1103.31 1213.93 L1103.89 1213.93 L1104.48 1213.93 L1105.07 1213.93 L1105.65 1213.93 L1106.24 1213.93 L1106.83 1213.93 L1107.41 1213.93 L1108 1213.93 L1108.59 1213.93 L1109.17 1213.93 L1109.76 1213.93 L1110.34 1213.93 L1110.93 1213.93 L1111.52 1213.93 L1112.1 1213.93 L1112.69 1213.93 L1113.28 1213.93 L1113.86 1213.93 L1114.45 1213.93 L1115.04 1213.93 L1115.62 1213.93 L1116.21 1213.93 L1116.8 1213.93 L1117.38 1213.93 L1117.97 1213.93 L1118.55 1213.93 L1119.14 1213.93 L1119.73 1213.93 L1120.31 1213.93 L1120.9 1213.93 L1121.49 1213.93 L1122.07 1213.93 L1122.66 1213.93 L1123.25 1213.93 L1123.83 1213.93 L1124.42 1213.93 L1125.01 1213.93 L1125.59 1213.93 L1126.18 1213.93 L1126.76 1213.93 L1127.35 1213.93 L1127.94 1213.93 L1128.52 1213.93 L1129.11 1213.93 L1129.7 1213.93 L1130.28 1213.93 L1130.87 1213.93 L1131.46 1213.93 L1132.04 1213.93 L1132.63 1213.93 L1133.21 1213.93 L1133.8 1213.93 L1134.39 1213.93 L1134.97 1213.93 L1135.56 1213.93 L1136.15 1213.93 L1136.73 1213.93 L1137.32 1213.93 L1137.91 1213.93 L1138.49 1213.93 L1139.08 1213.93 L1139.67 1213.93 L1140.25 1213.93 L1140.84 1213.93 L1141.42 1213.93 L1142.01 1213.93 L1142.6 1213.93 L1143.18 1213.93 L1143.77 1213.93 L1144.36 1213.93 L1144.94 1213.93 L1145.53 1213.93 L1146.12 1213.93 L1146.7 1213.93 L1147.29 1213.93 L1147.88 1213.93 L1148.46 1213.93 L1149.05 1213.93 L1149.63 1213.93 L1150.22 1213.93 L1150.81 1213.93 L1151.39 1213.93 L1151.98 1213.93 L1152.57 1213.93 L1153.15 1213.93 L1153.74 1213.93 L1154.33 1213.93 L1154.91 1213.93 L1155.5 1213.93 L1156.09 1213.93 L1156.67 1213.93 L1157.26 1213.93 L1157.84 1213.93 L1158.43 1213.93 L1159.02 1213.93 L1159.6 1213.93 L1160.19 1213.93 L1160.78 1213.93 L1161.36 1213.93 L1161.95 1213.93 L1162.54 1213.93 L1163.12 1213.93 L1163.71 1213.93 L1164.29 1213.93 L1164.88 1213.93 L1165.47 1213.93 L1166.05 1213.93 L1166.64 1213.93 L1167.23 1213.93 L1167.81 1213.93 L1168.4 1213.93 L1168.99 1213.93 L1169.57 1213.93 L1170.16 1213.93 L1170.75 1213.93 L1171.33 1213.93 L1171.92 1213.93 L1172.5 1213.93 L1173.09 1213.93 L1173.68 1213.93 L1174.26 1213.93 L1174.85 1213.93 L1175.44 1213.93 L1176.02 1213.93 L1176.61 1213.93 L1177.2 1213.93 L1177.78 1213.93 L1178.37 1213.93 L1178.96 1213.93 L1179.54 1213.93 L1180.13 1213.93 L1180.71 1213.93 L1181.3 1213.93 L1181.89 1213.93 L1182.47 1213.93 L1183.06 1213.93 L1183.65 1213.93 L1184.23 1213.93 L1184.82 1213.93 L1185.41 1213.93 L1185.99 1213.93 L1186.58 1213.93 L1187.16 1213.93 L1187.75 1213.93 L1188.34 1213.93 L1188.92 1213.93 L1189.51 1213.93 L1190.1 1213.93 L1190.68 1213.93 L1191.27 1213.93 L1191.86 1213.93 L1192.44 1213.93 L1193.03 1213.93 L1193.62 1213.93 L1194.2 1213.93 L1194.79 1213.93 L1195.37 1213.93 L1195.96 1213.93 L1196.55 1213.93 L1197.13 1213.93 L1197.72 1213.93 L1198.31 1213.93 L1198.89 1213.93 L1199.48 1213.93 L1200.07 1213.93 L1200.65 1213.93 L1201.24 1213.93 L1201.83 1213.93 L1202.41 1213.93 L1203 1213.93 L1203.58 1213.93 L1204.17 1213.93 L1204.76 1213.93 L1205.34 1213.93 L1205.93 1213.93 L1206.52 1213.93 L1207.1 1213.93 L1207.69 1213.93 L1208.28 1213.93 L1208.86 1213.93 L1209.45 1213.93 L1210.03 1213.93 L1210.62 1213.93 L1211.21 1213.93 L1211.79 1213.93 L1212.38 1213.93 L1212.97 1213.93 L1213.55 1213.93 L1214.14 1213.93 L1214.73 1213.93 L1215.31 1213.93 L1215.9 1213.93 L1216.49 1213.93 L1217.07 1213.93 L1217.66 1213.93 L1218.24 1213.93 L1218.83 1213.93 L1219.42 1213.93 L1220 1213.93 L1220.59 1213.93 L1221.18 1213.93 L1221.76 1213.93 L1222.35 1213.93 L1222.94 1213.93 L1223.52 1213.93 L1224.11 1213.93 L1224.7 1213.93 L1225.28 1213.93 L1225.87 1213.93 L1226.45 1213.93 L1227.04 1213.93 L1227.63 1213.93 L1228.21 1213.93 L1228.8 1213.93 L1229.39 1213.93 L1229.97 1213.93 L1230.56 1213.93 L1231.15 1213.93 L1231.73 1213.93 L1232.32 1213.93 L1232.91 1213.93 L1233.49 1213.93 L1234.08 1213.93 L1234.66 1213.93 L1235.25 1213.93 L1235.84 1213.93 L1236.42 1213.93 L1237.01 1213.93 L1237.6 1213.93 L1238.18 1213.93 L1238.77 1213.93 L1239.36 1213.93 L1239.94 1213.93 L1240.53 1213.93 L1241.11 1213.93 L1241.7 1213.93 L1242.29 1213.93 L1242.87 1213.93 L1243.46 1213.93 L1244.05 1213.93 L1244.63 1213.93 L1245.22 1213.93 L1245.81 1213.93 L1246.39 1213.93 L1246.98 1213.93 L1247.57 1213.93 L1248.15 1213.93 L1248.74 1213.93 L1249.32 1213.93 L1249.91 1213.93 L1250.5 1213.93 L1251.08 1213.93 L1251.67 1213.93 L1252.26 1213.93 L1252.84 1213.93 L1253.43 1213.93 L1254.02 1213.93 L1254.6 1213.93 L1255.19 1213.93 L1255.78 1213.93 L1256.36 1213.93 L1256.95 1213.93 L1257.53 1213.93 L1258.12 1213.93 L1258.71 1213.93 L1259.29 1213.93 L1259.88 1213.93 L1260.47 1213.93 L1261.05 1213.93 L1261.64 1213.93 L1262.23 1213.93 L1262.81 1213.93 L1263.4 1213.93 L1263.98 1213.93 L1264.57 1213.93 L1265.16 1213.93 L1265.74 1213.93 L1266.33 1213.93 L1266.92 1213.93 L1267.5 1213.93 L1268.09 1213.93 L1268.68 1213.93 L1269.26 1213.93 L1269.85 1213.93 L1270.44 1213.93 L1271.02 1213.93 L1271.61 1213.93 L1272.19 1213.93 L1272.78 1213.93 L1273.37 1213.93 L1273.95 1213.93 L1274.54 1213.93 L1275.13 1213.93 L1275.71 1213.93 L1276.3 1213.93 L1276.89 1213.93 L1277.47 1213.93 L1278.06 1213.93 L1278.65 1213.93 L1279.23 1213.93 L1279.82 1213.93 L1280.4 1213.93 L1280.99 1213.93 L1281.58 1213.93 L1282.16 1213.93 L1282.75 1213.93 L1283.34 1213.93 L1283.92 1213.93 L1284.51 1213.93 L1285.1 1213.93 L1285.68 1213.93 L1286.27 1213.93 L1286.86 1213.93 L1287.44 1213.93 L1288.03 1213.93 L1288.61 1213.93 L1289.2 1213.93 L1289.79 1213.93 L1290.37 1213.93 L1290.96 1213.93 L1291.55 1213.93 L1292.13 1213.93 L1292.72 1213.93 L1293.31 1213.93 L1293.89 1213.93 L1294.48 1213.93 L1295.06 1213.93 L1295.65 1213.93 L1296.24 1213.93 L1296.82 1213.93 L1297.41 1213.93 L1298 1213.93 L1298.58 1213.93 L1299.17 1213.93 L1299.76 1213.93 L1300.34 1213.93 L1300.93 1213.93 L1301.52 1213.93 L1302.1 1213.93 L1302.69 1213.93 L1303.27 1213.93 L1303.86 1213.93 L1304.45 1213.93 L1305.03 1213.93 L1305.62 1213.93 L1306.21 1213.93 L1306.79 1213.93 L1307.38 1213.93 L1307.97 1213.93 L1308.55 1213.93 L1309.14 1213.93 L1309.73 1213.93 L1310.31 1213.93 L1310.9 1213.93 L1311.48 1213.93 L1312.07 1213.93 L1312.66 1213.93 L1313.24 1213.93 L1313.83 1213.93 L1314.42 1213.93 L1315 1213.93 L1315.59 1213.93 L1316.18 1213.93 L1316.76 1213.93 L1317.35 1213.93 L1317.93 1213.93 L1318.52 1213.93 L1319.11 1213.93 L1319.69 1213.93 L1320.28 1213.93 L1320.87 1213.93 L1321.45 1213.93 L1322.04 1213.93 L1322.63 1213.93 L1323.21 1213.93 L1323.8 1213.93 L1324.39 1213.93 L1324.97 1213.93 L1325.56 1213.93 L1326.14 1213.93 L1326.73 1213.93 L1327.32 1213.93 L1327.9 1213.93 L1328.49 1213.93 L1329.08 1213.93 L1329.66 1213.93 L1330.25 1213.93 L1330.84 1213.93 L1331.42 1213.93 L1332.01 1213.93 L1332.6 1213.93 L1333.18 1213.93 L1333.77 1213.93 L1334.35 1213.93 L1334.94 1213.93 L1335.53 1213.93 L1336.11 1213.93 L1336.7 1213.93 L1337.29 1213.93 L1337.87 1213.93 L1338.46 1213.93 L1339.05 1213.93 L1339.63 1213.93 L1340.22 1213.93 L1340.8 1213.93 L1341.39 1213.93 L1341.98 1213.93 L1342.56 1213.93 L1343.15 1213.93 L1343.74 1213.93 L1344.32 1213.93 L1344.91 1213.93 L1345.5 1213.93 L1346.08 1213.93 L1346.67 1213.93 L1347.26 1213.93 L1347.84 1213.93 L1348.43 1213.93 L1349.01 1213.93 L1349.6 1213.93 L1350.19 1213.93 L1350.77 1213.93 L1351.36 1213.93 L1351.95 1213.93 L1352.53 1213.93 L1353.12 1213.93 L1353.71 1213.93 L1354.29 1213.93 L1354.88 1213.93 L1355.47 1213.93 L1356.05 1213.93 L1356.64 1213.93 L1357.22 1213.93 L1357.81 1213.93 L1358.4 1213.93 L1358.98 1213.93 L1359.57 1213.93 L1360.16 1213.93 L1360.74 1213.93 L1361.33 1213.93 L1361.92 1213.93 L1362.5 1213.93 L1363.09 1213.93 L1363.68 1213.93 L1364.26 1213.93 L1364.85 1213.93 L1365.43 1213.93 L1366.02 1213.93 L1366.61 1213.93 L1367.19 1213.93 L1367.78 1213.93 L1368.37 1213.93 L1368.95 1213.93 L1369.54 1213.93 L1370.13 1213.93 L1370.71 1213.93 L1371.3 1213.93 L1371.88 1213.93 L1372.47 1213.93 L1373.06 1213.93 L1373.64 1213.93 L1374.23 1213.93 L1374.82 1213.93 L1375.4 1213.93 L1375.99 1213.93 L1376.58 1213.93 L1377.16 1213.93 L1377.75 1213.93 L1378.34 1213.93 L1378.92 1213.93 L1379.51 1213.93 L1380.09 1213.93 L1380.68 1213.93 L1381.27 1213.93 L1381.85 1213.93 L1382.44 1213.93 L1383.03 1213.93 L1383.61 1213.93 L1384.2 1213.93 L1384.79 1213.93 L1385.37 1213.93 L1385.96 1213.93 L1386.55 1213.93 L1387.13 1213.93 L1387.72 1213.93 L1388.3 1213.93 L1388.89 1213.93 L1389.48 1213.93 L1390.06 1213.93 L1390.65 1213.93 L1391.24 1213.93 L1391.82 1213.93 L1392.41 1213.93 L1393 1213.93 L1393.58 1213.93 L1394.17 1213.93 L1394.75 1213.93 L1395.34 1213.93 L1395.93 1213.93 L1396.51 1213.93 L1397.1 1213.93 L1397.69 1213.93 L1398.27 1213.93 L1398.86 1213.93 L1399.45 1213.93 L1400.03 1213.93 L1400.62 1213.93 L1401.21 1213.93 L1401.79 1213.93 L1402.38 1213.93 L1402.96 1213.93 L1403.55 1213.93 L1404.14 1213.93 L1404.72 1213.93 L1405.31 1213.93 L1405.9 1213.93 L1406.48 1213.93 L1407.07 1213.93 L1407.66 1213.93 L1408.24 1213.93 L1408.83 1213.93 L1409.42 1213.93 L1410 1213.93 L1410.59 1213.93 L1411.17 1213.93 L1411.76 1213.93 L1412.35 1213.93 L1412.93 1213.93 L1413.52 1213.93 L1414.11 1213.93 L1414.69 1213.93 L1415.28 1213.93 L1415.87 1213.93 L1416.45 1213.93 L1417.04 1213.93 L1417.63 1213.93 L1418.21 1213.93 L1418.8 1213.93 L1419.38 1213.93 L1419.97 1213.93 L1420.56 1213.93 L1421.14 1213.93 L1421.73 1213.93 L1422.32 1213.93 L1422.9 1213.93 L1423.49 1213.93 L1424.08 1213.93 L1424.66 1213.93 L1425.25 1213.93 L1425.83 1213.93 L1426.42 1213.93 L1427.01 1213.93 L1427.59 1213.93 L1428.18 1213.93 L1428.77 1213.93 L1429.35 1213.93 L1429.94 1213.93 L1430.53 1213.93 L1431.11 1213.93 L1431.7 1213.93 L1432.29 1213.93 L1432.87 1213.93 L1433.46 1213.93 L1434.04 1213.93 L1434.63 1213.93 L1435.22 1213.93 L1435.8 1213.93 L1436.39 1213.93 L1436.98 1213.93 L1437.56 1213.93 L1438.15 1213.93 L1438.74 1213.93 L1439.32 1213.93 L1439.91 1213.93 L1440.5 1213.93 L1441.08 1213.93 L1441.67 1213.93 L1442.25 1213.93 L1442.84 1213.93 L1443.43 1213.93 L1444.01 1213.93 L1444.6 1213.93 L1445.19 1213.93 L1445.77 1213.93 L1446.36 1213.93 L1446.95 1213.93 L1447.53 1213.93 L1448.12 1213.93 L1448.7 1213.93 L1449.29 1213.93 L1449.88 1213.93 L1450.46 1213.93 L1451.05 1213.93 L1451.64 1213.93 L1452.22 1213.93 L1452.81 1213.93 L1453.4 1213.93 L1453.98 1213.93 L1454.57 1213.93 L1455.16 1213.93 L1455.74 1213.93 L1456.33 1213.93 L1456.91 1213.93 L1457.5 1213.93 L1458.09 1213.93 L1458.67 1213.93 L1459.26 1213.93 L1459.85 1213.93 L1460.43 1213.93 L1461.02 1213.93 L1461.61 1213.93 L1462.19 1213.93 L1462.78 1213.93 L1463.37 1213.93 L1463.95 1213.93 L1464.54 1213.93 L1465.12 1213.93 L1465.71 1213.93 L1466.3 1213.93 L1466.88 1213.93 L1467.47 1213.93 L1468.06 1213.93 L1468.64 1213.93 L1469.23 1213.93 L1469.82 1213.93 L1470.4 1213.93 L1470.99 1213.93 L1471.57 1213.93 L1472.16 1213.93 L1472.75 1213.93 L1473.33 1213.93 L1473.92 1213.93 L1474.51 1213.93 L1475.09 1213.93 L1475.68 1213.93 L1476.27 1213.93 L1476.85 1213.93 L1477.44 1213.93 L1478.03 1213.93 L1478.61 1213.93 L1479.2 1213.93 L1479.78 1213.93 L1480.37 1213.93 L1480.96 1213.93 L1481.54 1213.93 L1482.13 1213.93 L1482.72 1213.93 L1483.3 1213.93 L1483.89 1213.93 L1484.48 1213.93 L1485.06 1213.93 L1485.65 1213.93 L1486.24 1213.93 L1486.82 1213.93 L1487.41 1213.93 L1487.99 1213.93 L1488.58 1213.93 L1489.17 1213.93 L1489.75 1213.93 L1490.34 1213.93 L1490.93 1213.93 L1491.51 1213.93 L1492.1 1213.93 L1492.69 1213.93 L1493.27 1213.93 L1493.86 1213.93 L1494.45 1213.93 L1495.03 1213.93 L1495.62 1213.93 L1496.2 1213.93 L1496.79 1213.93 L1497.38 1213.93 L1497.96 1213.93 L1498.55 1213.93 L1499.14 1213.93 L1499.72 1213.93 L1500.31 1213.93 L1500.9 1213.93 L1501.48 1213.93 L1502.07 1213.93 L1502.65 1213.93 L1503.24 1213.93 L1503.83 1213.93 L1504.41 1213.93 L1505 1213.93 L1505.59 1213.93 L1506.17 1213.93 L1506.76 1213.93 L1507.35 1213.93 L1507.93 1213.93 L1508.52 1213.93 L1509.11 1213.93 L1509.69 1213.93 L1510.28 1213.93 L1510.86 1213.93 L1511.45 1213.93 L1512.04 1213.93 L1512.62 1213.93 L1513.21 1213.93 L1513.8 1213.93 L1514.38 1213.93 L1514.97 1213.93 L1515.56 1213.93 L1516.14 1213.93 L1516.73 1213.93 L1517.32 1213.93 L1517.9 1213.93 L1518.49 1213.93 L1519.07 1213.93 L1519.66 1213.93 L1520.25 1213.93 L1520.83 1213.93 L1521.42 1213.93 L1522.01 1213.93 L1522.59 1213.93 L1523.18 1213.93 L1523.77 1213.93 L1524.35 1213.93 L1524.94 1213.93 L1525.52 1213.93 L1526.11 1213.93 L1526.7 1213.93 L1527.28 1213.93 L1527.87 1213.93 L1528.46 1213.93 L1529.04 1213.93 L1529.63 1213.93 L1530.22 1213.93 L1530.8 1213.93 L1531.39 1213.93 L1531.98 1213.93 L1532.56 1213.93 L1533.15 1213.93 L1533.73 1213.93 L1534.32 1213.93 L1534.91 1213.93 L1535.49 1213.93 L1536.08 1213.93 L1536.67 1213.93 L1537.25 1213.93 L1537.84 1213.93 L1538.43 1213.93 L1539.01 1213.93 L1539.6 1213.93 L1540.19 1213.93 L1540.77 1213.93 L1541.36 1213.93 L1541.94 1213.93 L1542.53 1213.93 L1543.12 1213.93 L1543.7 1213.93 L1544.29 1213.93 L1544.88 1213.93 L1545.46 1213.93 L1546.05 1213.93 L1546.64 1213.93 L1547.22 1213.93 L1547.81 1213.93 L1548.4 1213.93 L1548.98 1213.93 L1549.57 1213.93 L1550.15 1213.93 L1550.74 1213.93 L1551.33 1213.93 L1551.91 1213.93 L1552.5 1213.93 L1553.09 1213.93 L1553.67 1213.93 L1554.26 1213.93 L1554.85 1213.93 L1555.43 1213.93 L1556.02 1213.93 L1556.6 1213.93 L1557.19 1213.93 L1557.78 1213.93 L1558.36 1213.93 L1558.95 1213.93 L1559.54 1213.93 L1560.12 1213.93 L1560.71 1213.93 L1561.3 1213.93 L1561.88 1213.93 L1562.47 1213.93 L1563.06 1213.93 L1563.64 1213.93 L1564.23 1213.93 L1564.81 1213.93 L1565.4 1213.93 L1565.99 1213.93 L1566.57 1213.93 L1567.16 1213.93 L1567.75 1213.93 L1568.33 1213.93 L1568.92 1213.93 L1569.51 1213.93 L1570.09 1213.93 L1570.68 1213.93 L1571.27 1213.93 L1571.85 1213.93 L1572.44 1213.93 L1573.02 1213.93 L1573.61 1213.93 L1574.2 1213.93 L1574.78 1213.93 L1575.37 1213.93 L1575.96 1213.93 L1576.54 1213.93 L1577.13 1213.93 L1577.72 1213.93 L1578.3 1213.93 L1578.89 1213.93 L1579.47 1213.93 L1580.06 1213.93 L1580.65 1213.93 L1581.23 1213.93 L1581.82 1213.93 L1582.41 1213.93 L1582.99 1213.93 L1583.58 1213.93 L1584.17 1213.93 L1584.75 1213.93 L1585.34 1213.93 L1585.93 1213.93 L1586.51 1213.93 L1587.1 1213.93 L1587.68 1213.93 L1588.27 1213.93 L1588.86 1213.93 L1589.44 1213.93 L1590.03 1213.93 L1590.62 1213.93 L1591.2 1213.93 L1591.79 1213.93 L1592.38 1213.93 L1592.96 1213.93 L1593.55 1213.93 L1594.14 1213.93 L1594.72 1213.93 L1595.31 1213.93 L1595.89 1213.93 L1596.48 1213.93 L1597.07 1213.93 L1597.65 1213.93 L1598.24 1213.93 L1598.83 1213.93 L1599.41 1213.93 L1600 1213.93 L1600.59 1213.93 L1601.17 1213.93 L1601.76 1213.93 L1602.34 1213.93 L1602.93 1213.93 L1603.52 1213.93 L1604.1 1213.93 L1604.69 1213.93 L1605.28 1213.93 L1605.86 1213.93 L1606.45 1213.93 L1607.04 1213.93 L1607.62 1213.93 L1608.21 1213.93 L1608.8 1213.93 L1609.38 1213.93 L1609.97 1213.93 L1610.55 1213.93 L1611.14 1213.93 L1611.73 1213.93 L1612.31 1213.93 L1612.9 1213.93 L1613.49 1213.93 L1614.07 1213.93 L1614.66 1213.93 L1615.25 1213.93 L1615.83 1213.93 L1616.42 1213.93 L1617.01 1213.93 L1617.59 1213.93 L1618.18 1213.93 L1618.76 1213.93 L1619.35 1213.93 L1619.94 1213.93 L1620.52 1213.93 L1621.11 1213.93 L1621.7 1213.93 L1622.28 1213.93 L1622.87 1213.93 L1623.46 1213.93 L1624.04 1213.93 L1624.63 1213.93 L1625.22 1213.93 L1625.8 1213.93 L1626.39 1213.93 L1626.97 1213.93 L1627.56 1213.93 L1628.15 1213.93 L1628.73 1213.93 L1629.32 1213.93 L1629.91 1213.93 L1630.49 1213.93 L1631.08 1213.93 L1631.67 1213.93 L1632.25 1213.93 L1632.84 1213.93 L1633.42 1213.93 L1634.01 1213.93 L1634.6 1213.93 L1635.18 1213.93 L1635.77 1213.93 L1636.36 1213.93 L1636.94 1213.93 L1637.53 1213.93 L1638.12 1213.93 L1638.7 1213.93 L1639.29 1213.93 L1639.88 1213.93 L1640.46 1213.93 L1641.05 1213.93 L1641.63 1213.93 L1642.22 1213.93 L1642.81 1213.93 L1643.39 1213.93 L1643.98 1213.93 L1644.57 1213.93 L1645.15 1213.93 L1645.74 1213.93 L1646.33 1213.93 L1646.91 1213.93 L1647.5 1213.93 L1648.09 1213.93 L1648.67 1213.93 L1649.26 1213.93 L1649.84 1213.93 L1650.43 1213.93 L1651.02 1213.93 L1651.6 1213.93 L1652.19 1213.93 L1652.78 1213.93 L1653.36 1213.93 L1653.95 1213.93 L1654.54 1213.93 L1655.12 1213.93 L1655.71 1213.93 L1656.29 1213.93 L1656.88 1213.93 L1657.47 1213.93 L1658.05 1213.93 L1658.64 1213.93 L1659.23 1213.93 L1659.81 1213.93 L1660.4 1213.93 L1660.99 1213.93 L1661.57 1213.93 L1662.16 1213.93 L1662.75 1213.93 L1663.33 1213.93 L1663.92 1213.93 L1664.5 1213.93 L1665.09 1213.93 L1665.68 1213.93 L1666.26 1213.93 L1666.85 1213.93 L1667.44 1213.93 L1668.02 1213.93 L1668.61 1213.93 L1669.2 1213.93 L1669.78 1213.93 L1670.37 1213.93 L1670.96 1213.93 L1671.54 1213.93 L1672.13 1213.93 L1672.71 1213.93 L1673.3 1213.93 L1673.89 1213.93 L1674.47 1213.93 L1675.06 1213.93 L1675.65 1213.93 L1676.23 1213.93 L1676.82 1213.93 L1677.41 1213.93 L1677.99 1213.93 L1678.58 1213.93 L1679.17 1213.93 L1679.75 1213.93 L1680.34 1213.93 L1680.92 1213.93 L1681.51 1213.93 L1682.1 1213.93 L1682.68 1213.93 L1683.27 1213.93 L1683.86 1213.93 L1684.44 1213.93 L1685.03 1213.93 L1685.62 1213.93 L1686.2 1213.93 L1686.79 1213.93 L1687.37 1213.93 L1687.96 1213.93 L1688.55 1213.93 L1689.13 1213.93 L1689.72 1213.93 L1690.31 1213.93 L1690.89 1213.93 L1691.48 1213.93 L1692.07 1213.93 L1692.65 1213.93 L1693.24 1213.93 L1693.83 1213.93 L1694.41 1213.93 L1695 1213.93 L1695.58 1213.93 L1696.17 1213.93 L1696.76 1213.93 L1697.34 1213.93 L1697.93 1213.93 L1698.52 1213.93 L1699.1 1213.93 L1699.69 1213.93 L1700.28 1213.93 L1700.86 1213.93 L1701.45 1213.93 L1702.04 1213.93 L1702.62 1213.93 L1703.21 1213.93 L1703.79 1213.93 L1704.38 1213.93 L1704.97 1213.93 L1705.55 1213.93 L1706.14 1213.93 L1706.73 1213.93 L1707.31 1213.93 L1707.9 1213.93 L1708.49 1213.93 L1709.07 1213.93 L1709.66 1213.93 L1710.24 1213.93 L1710.83 1213.93 L1711.42 1213.93 L1712 1213.93 L1712.59 1213.93 L1713.18 1213.93 L1713.76 1213.93 L1714.35 1213.93 L1714.94 1213.93 L1715.52 1213.93 L1716.11 1213.93 L1716.7 1213.93 L1717.28 1213.93 L1717.87 1213.93 L1718.45 1213.93 L1719.04 1213.93 L1719.63 1213.93 L1720.21 1213.93 L1720.8 1213.93 L1721.39 1213.93 L1721.97 1213.93 L1722.56 1213.93 L1723.15 1213.93 L1723.73 1213.93 L1724.32 1213.93 L1724.91 1213.93 L1725.49 1213.93 L1726.08 1213.93 L1726.66 1213.93 L1727.25 1213.93 L1727.84 1213.93 L1728.42 1213.93 L1729.01 1213.93 L1729.6 1213.93 L1730.18 1213.93 L1730.77 1213.93 L1731.36 1213.93 L1731.94 1213.93 L1732.53 1213.93 L1733.11 1213.93 L1733.7 1213.93 L1734.29 1213.93 L1734.87 1213.93 L1735.46 1213.93 L1736.05 1213.93 L1736.63 1213.93 L1737.22 1213.93 L1737.81 1213.93 L1738.39 1213.93 L1738.98 1213.93 L1739.57 1213.93 L1740.15 1213.93 L1740.74 1213.93 L1741.32 1213.93 L1741.91 1213.93 L1742.5 1213.93 L1743.08 1213.93 L1743.67 1213.93 L1744.26 1213.93 L1744.84 1213.93 L1745.43 1213.93 L1746.02 1213.93 L1746.6 1213.93 L1747.19 1213.93 L1747.78 1213.93 L1748.36 1213.93 L1748.95 1213.93 L1749.53 1213.93 L1750.12 1213.93 L1750.71 1213.93 L1751.29 1213.93 L1751.88 1213.93 L1752.47 1213.93 L1753.05 1213.93 L1753.64 1213.93 L1754.23 1213.93 L1754.81 1213.93 L1755.4 1213.93 L1755.99 1213.93 L1756.57 1213.93 L1757.16 1213.93 L1757.74 1213.93 L1758.33 1213.93 L1758.92 1213.93 L1759.5 1213.93 L1760.09 1213.93 L1760.68 1213.93 L1761.26 1213.93 L1761.85 1213.93 L1762.44 1213.93 L1763.02 1213.93 L1763.61 1213.93 L1764.19 1213.93 L1764.78 1213.93 L1765.37 1213.93 L1765.95 1213.93 L1766.54 1213.93 L1767.13 1213.93 L1767.71 1213.93 L1768.3 1213.93 L1768.89 1213.93 L1769.47 1213.93 L1770.06 1213.93 L1770.65 1213.93 L1771.23 1213.93 L1771.82 1213.93 L1772.4 1213.93 L1772.99 1213.93 L1773.58 1213.93 L1774.16 1213.93 L1774.75 1213.93 L1775.34 1213.93 L1775.92 1213.93 L1776.51 1213.93 L1777.1 1213.93 L1777.68 1213.93 L1778.27 1213.93 L1778.86 1213.93 L1779.44 1213.93 L1780.03 1213.93 L1780.61 1213.93 L1781.2 1213.93 L1781.79 1213.93 L1782.37 1213.93 L1782.96 1213.93 L1783.55 1213.93 L1784.13 1213.93 L1784.72 1213.93 L1785.31 1213.93 L1785.89 1213.93 L1786.48 1213.93 L1787.06 1213.93 L1787.65 1213.93 L1788.24 1213.93 L1788.82 1213.93 L1789.41 1213.93 L1790 1213.93 L1790.58 1213.93 L1791.17 1213.93 L1791.76 1213.93 L1792.34 1213.93 L1792.93 1213.93 L1793.52 1213.93 L1794.1 1213.93 L1794.69 1213.93 L1795.27 1213.93 L1795.86 1213.93 L1796.45 1213.93 L1797.03 1213.93 L1797.62 1213.93 L1798.21 1213.93 L1798.79 1213.93 L1799.38 1213.93 L1799.97 1213.93 L1800.55 1213.93 L1801.14 1213.93 L1801.73 1213.93 L1802.31 1213.93 L1802.9 1213.93 L1803.48 1213.93 L1804.07 1213.93 L1804.66 1213.93 L1805.24 1213.93 L1805.83 1213.93 L1806.42 1213.93 L1807 1213.93 L1807.59 1213.93 L1808.18 1213.93 L1808.76 1213.93 L1809.35 1213.93 L1809.94 1213.93 L1810.52 1213.93 L1811.11 1213.93 L1811.69 1213.93 L1812.28 1213.93 L1812.87 1213.93 L1813.45 1213.93 L1814.04 1213.93 L1814.63 1213.93 L1815.21 1213.93 L1815.8 1213.93 L1816.39 1213.93 L1816.97 1213.93 L1817.56 1213.93 L1818.14 1213.93 L1818.73 1213.93 L1819.32 1213.93 L1819.9 1213.93 L1820.49 1213.93 L1821.08 1213.93 L1821.66 1213.93 L1822.25 1213.93 L1822.84 1213.93 L1823.42 1213.93 L1824.01 1213.93 L1824.6 1213.93 L1825.18 1213.93 L1825.77 1213.93 L1826.35 1213.93 L1826.94 1213.93 L1827.53 1213.93 L1828.11 1213.93 L1828.7 1213.93 L1829.29 1213.93 L1829.87 1213.93 L1830.46 1213.93 L1831.05 1213.93 L1831.63 1213.93 L1832.22 1213.93 L1832.81 1213.93 L1833.39 1213.93 L1833.98 1213.93 L1834.56 1213.93 L1835.15 1213.93 L1835.74 1213.93 L1836.32 1213.93 L1836.91 1213.93 L1837.5 1213.93 L1838.08 1213.93 L1838.67 1213.93 L1839.26 1213.93 L1839.84 1213.93 L1840.43 1213.93 L1841.01 1213.93 L1841.6 1213.93 L1842.19 1213.93 L1842.77 1213.93 L1843.36 1213.93 L1843.95 1213.93 L1844.53 1213.93 L1845.12 1213.93 L1845.71 1213.93 L1846.29 1213.93 L1846.88 1213.93 L1847.47 1213.93 L1848.05 1213.93 L1848.64 1213.93 L1849.22 1213.93 L1849.81 1213.93 L1850.4 1213.93 L1850.98 1213.93 L1851.57 1213.93 L1852.16 1213.93 L1852.74 1213.93 L1853.33 1213.93 L1853.92 1213.93 L1854.5 1213.93 L1855.09 1213.93 L1855.68 1213.93 L1856.26 1213.93 L1856.85 1213.93 L1857.43 1213.93 L1858.02 1213.93 L1858.61 1213.93 L1859.19 1213.93 L1859.78 1213.93 L1860.37 1213.93 L1860.95 1213.93 L1861.54 1213.93 L1862.13 1213.93 L1862.71 1213.93 L1863.3 1213.93 L1863.88 1213.93 L1864.47 1213.93 L1865.06 1213.93 L1865.64 1213.93 L1866.23 1213.93 L1866.82 1213.93 L1867.4 1213.93 L1867.99 1213.93 L1868.58 1213.93 L1869.16 1213.93 L1869.75 1213.93 L1870.34 1213.93 L1870.92 1213.93 L1871.51 1213.93 L1872.09 1213.93 L1872.68 1213.93 L1873.27 1213.93 L1873.85 1213.93 L1874.44 1213.93 L1875.03 1213.93 L1875.61 1213.93 L1876.2 1213.93 L1876.79 1213.93 L1877.37 1213.93 L1877.96 1213.93 L1878.55 1213.93 L1879.13 1213.93 L1879.72 1213.93 L1880.3 1213.93 L1880.89 1213.93 L1881.48 1213.93 L1882.06 1213.93 L1882.65 1213.93 L1883.24 1213.93 L1883.82 1213.93 L1884.41 1213.93 L1885 1213.93 L1885.58 1213.93 L1886.17 1213.93 L1886.76 1213.93 L1887.34 1213.93 L1887.93 1213.93 L1888.51 1213.93 L1889.1 1213.93 L1889.69 1213.93 L1890.27 1213.93 L1890.86 1213.93 L1891.45 1213.93 L1892.03 1213.93 L1892.62 1213.93 L1893.21 1213.93 L1893.79 1213.93 L1894.38 1213.93 L1894.96 1213.93 L1895.55 1213.93 L1896.14 1213.93 L1896.72 1213.93 L1897.31 1213.93 L1897.9 1213.93 L1898.48 1213.93 L1899.07 1213.93 L1899.66 1213.93 L1900.24 1213.93 L1900.83 1213.93 L1901.42 1213.93 L1902 1213.93 L1902.59 1213.93 L1903.17 1213.93 L1903.76 1213.93 L1904.35 1213.93 L1904.93 1213.93 L1905.52 1213.93 L1906.11 1213.93 L1906.69 1213.93 L1907.28 1213.93 L1907.87 1213.93 L1908.45 1213.93 L1909.04 1213.93 L1909.63 1213.93 L1910.21 1213.93 L1910.8 1213.93 L1911.38 1213.93 L1911.97 1213.93 L1912.56 1213.93 L1913.14 1213.93 L1913.73 1213.93 L1914.32 1213.93 L1914.9 1213.93 L1915.49 1213.93 L1916.08 1213.93 L1916.66 1213.93 L1917.25 1213.93 L1917.83 1213.93 L1918.42 1213.93 L1919.01 1213.93 L1919.59 1213.93 L1920.18 1213.93 L1920.77 1213.93 L1921.35 1213.93 L1921.94 1213.93 L1922.53 1213.93 L1923.11 1213.93 L1923.7 1213.93 L1924.29 1213.93 L1924.87 1213.93 L1925.46 1213.93 L1926.04 1213.93 L1926.63 1213.93 L1927.22 1213.93 L1927.8 1213.93 L1928.39 1213.93 L1928.98 1213.93 L1929.56 1213.93 L1930.15 1213.93 L1930.74 1213.93 L1931.32 1213.93 L1931.91 1213.93 L1932.5 1213.93 L1933.08 1213.93 L1933.67 1213.93 L1934.25 1213.93 L1934.84 1213.93 L1935.43 1213.93 L1936.01 1213.93 L1936.6 1213.93 L1937.19 1213.93 L1937.77 1213.93 L1938.36 1213.93 L1938.95 1213.93 L1939.53 1213.93 L1940.12 1213.93 L1940.71 1213.93 L1941.29 1213.93 L1941.88 1213.93 L1942.46 1213.93 L1943.05 1213.93 L1943.64 1213.93 L1944.22 1213.93 L1944.81 1213.93 L1945.4 1213.93 L1945.98 1213.93 L1946.57 1213.93 L1947.16 1213.93 L1947.74 1213.93 L1948.33 1213.93 L1948.91 1213.93 L1949.5 1213.93 L1950.09 1213.93 L1950.67 1213.93 L1951.26 1213.93 L1951.85 1213.93 L1952.43 1213.93 L1953.02 1213.93 L1953.61 1213.93 L1954.19 1213.93 L1954.78 1213.93 L1955.37 1213.93 L1955.95 1213.93 L1956.54 1213.93 L1957.12 1213.93 L1957.71 1213.93 L1958.3 1213.93 L1958.88 1213.93 L1959.47 1213.93 L1960.06 1213.93 L1960.64 1213.93 L1961.23 1213.93 L1961.82 1213.93 L1962.4 1213.93 L1962.99 1213.93 L1963.58 1213.93 L1964.16 1213.93 L1964.75 1213.93 L1965.33 1213.93 L1965.92 1213.93 L1966.51 1213.93 L1967.09 1213.93 L1967.68 1213.93 L1968.27 1213.93 L1968.85 1213.93 L1969.44 1213.93 L1970.03 1213.93 L1970.61 1213.93 L1971.2 1213.93 L1971.78 1213.93 L1972.37 1213.93 L1972.96 1213.93 L1973.54 1213.93 L1974.13 1213.93 L1974.72 1213.93 L1975.3 1213.93 L1975.89 1213.93 L1976.48 1213.93 L1977.06 1213.93 L1977.65 1213.93 L1978.24 1213.93 L1978.82 1213.93 L1979.41 1213.93 L1979.99 1213.93 L1980.58 1213.93 L1981.17 1213.93 L1981.75 1213.93 L1982.34 1213.93 L1982.93 1213.93 L1983.51 1213.93 L1984.1 1213.93 L1984.69 1213.93 L1985.27 1213.93 L1985.86 1213.93 L1986.45 1213.93 L1987.03 1213.93 L1987.62 1213.93 L1988.2 1213.93 L1988.79 1213.93 L1989.38 1213.93 L1989.96 1213.93 L1990.55 1213.93 L1991.14 1213.93 L1991.72 1213.93 L1992.31 1213.93 L1992.9 1213.93 L1993.48 1213.93 L1994.07 1213.93 L1994.65 1213.93 L1995.24 1213.93 L1995.83 1213.93 L1996.41 1213.93 L1997 1213.93 L1997.59 1213.93 L1998.17 1213.93 L1998.76 1213.93 L1999.35 1213.93 L1999.93 1213.93 L2000.52 1213.93 L2001.11 1213.93 L2001.69 1213.93 L2002.28 1213.93 L2002.86 1213.93 L2003.45 1213.93 L2004.04 1213.93 L2004.62 1213.93 L2005.21 1213.93 L2005.8 1213.93 L2006.38 1213.93 L2006.97 1213.93 L2007.56 1213.93 L2008.14 1213.93 L2008.73 1213.93 L2009.32 1213.93 L2009.9 1213.93 L2010.49 1213.93 L2011.07 1213.93 L2011.66 1213.93 L2012.25 1213.93 L2012.83 1213.93 L2013.42 1213.93 L2014.01 1213.93 L2014.59 1213.93 L2015.18 1213.93 L2015.77 1213.93 L2016.35 1213.93 L2016.94 1213.93 L2017.53 1213.93 L2018.11 1213.93 L2018.7 1213.93 L2019.28 1213.93 L2019.87 1213.93 L2020.46 1213.93 L2021.04 1213.93 L2021.63 1213.93 L2022.22 1213.93 L2022.8 1213.93 L2023.39 1213.93 L2023.98 1213.93 L2024.56 1213.93 L2025.15 1213.93 L2025.73 1213.93 L2026.32 1213.93 L2026.91 1213.93 L2027.49 1213.93 L2028.08 1213.93 L2028.67 1213.93 L2029.25 1213.93 L2029.84 1213.93 L2030.43 1213.93 L2031.01 1213.93 L2031.6 1213.93 L2032.19 1213.93 L2032.77 1213.93 L2033.36 1213.93 L2033.94 1213.93 L2034.53 1213.93 L2035.12 1213.93 L2035.7 1213.93 L2036.29 1213.93 L2036.88 1213.93 L2037.46 1213.93 L2038.05 1213.93 L2038.64 1213.93 L2039.22 1213.93 L2039.81 1213.93 L2040.4 1213.93 L2040.98 1213.93 L2041.57 1213.93 L2042.15 1213.93 L2042.74 1213.93 L2043.33 1213.93 L2043.91 1213.93 L2044.5 1213.93 L2045.09 1213.93 L2045.67 1213.93 L2046.26 1213.93 L2046.85 1213.93 L2047.43 1213.93 L2048.02 1213.93 L2048.6 1213.93 L2049.19 1213.93 L2049.78 1213.93 L2050.36 1213.93 L2050.95 1213.93 L2051.54 1213.93 L2052.12 1213.93 L2052.71 1213.93 L2053.3 1213.93 L2053.88 1213.93 L2054.47 1213.93 L2055.06 1213.93 L2055.64 1213.93 L2056.23 1213.93 L2056.81 1213.93 L2057.4 1213.93 L2057.99 1213.93 L2058.57 1213.93 L2059.16 1213.93 L2059.75 1213.93 L2060.33 1213.93 L2060.92 1213.93 L2061.51 1213.93 L2062.09 1213.93 L2062.68 1213.93 L2063.27 1213.93 L2063.85 1213.93 L2064.44 1213.93 L2065.02 1213.93 L2065.61 1213.93 L2066.2 1213.93 L2066.78 1213.93 L2067.37 1213.93 L2067.96 1213.93 L2068.54 1213.93 L2069.13 1213.93 L2069.72 1213.93 L2070.3 1213.93 L2070.89 1213.93 L2071.48 1213.93 L2072.06 1213.93 L2072.65 1213.93 L2073.23 1213.93 L2073.82 1213.93 L2074.41 1213.93 L2074.99 1213.93 L2075.58 1213.93 L2076.17 1213.93 L2076.75 1213.93 L2077.34 1213.93 L2077.93 1213.93 L2078.51 1213.93 L2079.1 1213.93 L2079.68 1213.93 L2080.27 1213.93 L2080.86 1213.93 L2081.44 1213.93 L2082.03 1213.93 L2082.62 1213.93 L2083.2 1213.93 L2083.79 1213.93 L2084.38 1213.93 L2084.96 1213.93 L2085.55 1213.93 L2086.14 1213.93 L2086.72 1213.93 L2087.31 1213.93 L2087.89 1213.93 L2088.48 1213.93 L2089.07 1213.93 L2089.65 1213.93 L2090.24 1213.93 L2090.83 1213.93 L2091.41 1213.93 L2092 1213.93 L2092.59 1213.93 L2093.17 1213.93 L2093.76 1213.93 L2094.35 1213.93 L2094.93 1213.93 L2095.52 1213.93 L2096.1 1213.93 L2096.69 1213.93 L2097.28 1213.93 L2097.86 1213.93 L2098.45 1213.93 L2099.04 1213.93 L2099.62 1213.93 L2100.21 1213.93 L2100.8 1213.93 L2101.38 1213.93 L2101.97 1213.93 L2102.55 1213.93 L2103.14 1213.93 L2103.73 1213.93 L2104.31 1213.93 L2104.9 1213.93 L2105.49 1213.93 L2106.07 1213.93 L2106.66 1213.93 L2107.25 1213.93 L2107.83 1213.93 L2108.42 1213.93 L2109.01 1213.93 L2109.59 1213.93 L2110.18 1213.93 L2110.76 1213.93 L2111.35 1213.93 L2111.94 1213.93 L2112.52 1213.93 L2113.11 1213.93 L2113.7 1213.93 L2114.28 1213.93 L2114.87 1213.93 L2115.46 1213.93 L2116.04 1213.93 L2116.63 1213.93 L2117.22 1213.93 L2117.8 1213.93 L2118.39 1213.93 L2118.97 1213.93 L2119.56 1213.93 L2120.15 1213.93 L2120.73 1213.93 L2121.32 1213.93 L2121.91 1213.93 L2122.49 1213.93 L2123.08 1213.93 L2123.67 1213.93 L2124.25 1213.93 L2124.84 1213.93 L2125.42 1213.93 L2126.01 1213.93 L2126.6 1213.93 L2127.18 1213.93 L2127.77 1213.93 L2128.36 1213.93 L2128.94 1213.93 L2129.53 1213.93 L2130.12 1213.93 L2130.7 1213.93 L2131.29 1213.93 L2131.88 1213.93 L2132.46 1213.93 L2133.05 1213.93 L2133.63 1213.93 L2134.22 1213.93 L2134.81 1213.93 L2135.39 1213.93 L2135.98 1213.93 L2136.57 1213.93 L2137.15 1213.93 L2137.74 1213.93 L2138.33 1213.93 L2138.91 1213.93 L2139.5 1213.93 L2140.09 1213.93 L2140.67 1213.93 L2141.26 1213.93 L2141.84 1213.93 L2142.43 1213.93 L2143.02 1213.93 L2143.6 1213.93 L2144.19 1213.93 L2144.78 1213.93 L2145.36 1213.93 L2145.95 1213.93 L2146.54 1213.93 L2147.12 1213.93 L2147.71 1213.93 L2148.3 1213.93 L2148.88 1213.93 L2149.47 1213.93 L2150.05 1213.93 L2150.64 1213.93 L2151.23 1213.93 L2151.81 1213.93 L2152.4 1213.93 L2152.99 1213.93 L2153.57 1213.93 L2154.16 1213.93 L2154.75 1213.93 L2155.33 1213.93 L2155.92 1213.93 L2156.5 1213.93 L2157.09 1213.93 L2157.68 1213.93 L2158.26 1213.93 L2158.26 1213.22 L2157.68 1213.22 L2157.09 1213.22 L2156.5 1213.22 L2155.92 1213.22 L2155.33 1213.22 L2154.75 1213.22 L2154.16 1213.22 L2153.57 1213.22 L2152.99 1213.22 L2152.4 1213.22 L2151.81 1213.22 L2151.23 1213.22 L2150.64 1213.22 L2150.05 1213.22 L2149.47 1213.22 L2148.88 1213.22 L2148.3 1213.22 L2147.71 1213.22 L2147.12 1213.22 L2146.54 1213.22 L2145.95 1213.22 L2145.36 1213.22 L2144.78 1213.22 L2144.19 1213.22 L2143.6 1213.22 L2143.02 1213.22 L2142.43 1213.22 L2141.84 1213.22 L2141.26 1213.22 L2140.67 1213.22 L2140.09 1213.22 L2139.5 1213.22 L2138.91 1213.22 L2138.33 1213.22 L2137.74 1213.22 L2137.15 1213.22 L2136.57 1213.22 L2135.98 1213.22 L2135.39 1213.22 L2134.81 1213.22 L2134.22 1213.22 L2133.63 1213.22 L2133.05 1213.22 L2132.46 1213.22 L2131.88 1213.22 L2131.29 1213.22 L2130.7 1213.22 L2130.12 1213.22 L2129.53 1213.22 L2128.94 1213.22 L2128.36 1213.22 L2127.77 1213.22 L2127.18 1213.22 L2126.6 1213.22 L2126.01 1213.22 L2125.42 1213.22 L2124.84 1213.22 L2124.25 1213.22 L2123.67 1213.22 L2123.08 1213.22 L2122.49 1213.22 L2121.91 1213.22 L2121.32 1213.22 L2120.73 1213.22 L2120.15 1213.22 L2119.56 1213.22 L2118.97 1213.22 L2118.39 1213.22 L2117.8 1213.22 L2117.22 1213.22 L2116.63 1213.22 L2116.04 1213.22 L2115.46 1213.22 L2114.87 1213.22 L2114.28 1213.22 L2113.7 1213.22 L2113.11 1213.22 L2112.52 1213.22 L2111.94 1213.22 L2111.35 1213.22 L2110.76 1213.22 L2110.18 1213.22 L2109.59 1213.22 L2109.01 1213.22 L2108.42 1213.22 L2107.83 1213.22 L2107.25 1213.22 L2106.66 1213.22 L2106.07 1213.22 L2105.49 1213.22 L2104.9 1213.22 L2104.31 1213.22 L2103.73 1213.22 L2103.14 1213.22 L2102.55 1213.22 L2101.97 1213.22 L2101.38 1213.22 L2100.8 1213.22 L2100.21 1213.22 L2099.62 1213.22 L2099.04 1213.22 L2098.45 1213.22 L2097.86 1213.22 L2097.28 1213.22 L2096.69 1213.22 L2096.1 1213.22 L2095.52 1213.22 L2094.93 1213.22 L2094.35 1213.22 L2093.76 1213.22 L2093.17 1213.22 L2092.59 1213.22 L2092 1213.22 L2091.41 1213.22 L2090.83 1213.22 L2090.24 1213.22 L2089.65 1213.22 L2089.07 1213.22 L2088.48 1213.22 L2087.89 1213.22 L2087.31 1213.22 L2086.72 1213.22 L2086.14 1213.22 L2085.55 1213.22 L2084.96 1213.22 L2084.38 1213.22 L2083.79 1213.22 L2083.2 1213.22 L2082.62 1213.22 L2082.03 1213.22 L2081.44 1213.22 L2080.86 1213.22 L2080.27 1213.22 L2079.68 1213.22 L2079.1 1213.22 L2078.51 1213.22 L2077.93 1213.22 L2077.34 1213.22 L2076.75 1213.22 L2076.17 1213.22 L2075.58 1213.22 L2074.99 1213.22 L2074.41 1213.22 L2073.82 1213.22 L2073.23 1213.22 L2072.65 1213.22 L2072.06 1213.22 L2071.48 1213.22 L2070.89 1213.22 L2070.3 1213.22 L2069.72 1213.22 L2069.13 1213.22 L2068.54 1213.22 L2067.96 1213.22 L2067.37 1213.22 L2066.78 1213.22 L2066.2 1213.22 L2065.61 1213.22 L2065.02 1213.22 L2064.44 1213.22 L2063.85 1213.22 L2063.27 1213.22 L2062.68 1213.22 L2062.09 1213.22 L2061.51 1213.22 L2060.92 1213.22 L2060.33 1213.22 L2059.75 1213.22 L2059.16 1213.22 L2058.57 1213.22 L2057.99 1213.22 L2057.4 1213.22 L2056.81 1213.22 L2056.23 1213.22 L2055.64 1213.22 L2055.06 1213.22 L2054.47 1213.22 L2053.88 1213.22 L2053.3 1213.22 L2052.71 1213.22 L2052.12 1213.22 L2051.54 1213.22 L2050.95 1213.22 L2050.36 1213.22 L2049.78 1213.22 L2049.19 1213.22 L2048.6 1213.22 L2048.02 1213.22 L2047.43 1213.22 L2046.85 1213.22 L2046.26 1213.22 L2045.67 1213.22 L2045.09 1213.22 L2044.5 1213.22 L2043.91 1213.22 L2043.33 1213.22 L2042.74 1213.22 L2042.15 1213.22 L2041.57 1213.22 L2040.98 1213.22 L2040.4 1213.22 L2039.81 1213.22 L2039.22 1213.22 L2038.64 1213.22 L2038.05 1213.22 L2037.46 1213.22 L2036.88 1213.22 L2036.29 1213.22 L2035.7 1213.22 L2035.12 1213.22 L2034.53 1213.22 L2033.94 1213.22 L2033.36 1213.22 L2032.77 1213.22 L2032.19 1213.22 L2031.6 1213.22 L2031.01 1213.22 L2030.43 1213.22 L2029.84 1213.22 L2029.25 1213.22 L2028.67 1213.22 L2028.08 1213.22 L2027.49 1213.22 L2026.91 1213.22 L2026.32 1213.22 L2025.73 1213.22 L2025.15 1213.22 L2024.56 1213.22 L2023.98 1213.22 L2023.39 1213.22 L2022.8 1213.22 L2022.22 1213.22 L2021.63 1213.22 L2021.04 1213.22 L2020.46 1213.22 L2019.87 1213.22 L2019.28 1213.22 L2018.7 1213.22 L2018.11 1213.22 L2017.53 1213.22 L2016.94 1213.22 L2016.35 1213.22 L2015.77 1213.22 L2015.18 1213.22 L2014.59 1213.22 L2014.01 1213.22 L2013.42 1213.22 L2012.83 1213.22 L2012.25 1213.22 L2011.66 1213.22 L2011.07 1213.22 L2010.49 1213.22 L2009.9 1213.22 L2009.32 1213.22 L2008.73 1213.22 L2008.14 1213.22 L2007.56 1213.22 L2006.97 1213.22 L2006.38 1213.22 L2005.8 1213.22 L2005.21 1213.22 L2004.62 1213.22 L2004.04 1213.22 L2003.45 1213.22 L2002.86 1213.22 L2002.28 1213.22 L2001.69 1213.22 L2001.11 1213.22 L2000.52 1213.22 L1999.93 1213.22 L1999.35 1213.22 L1998.76 1213.22 L1998.17 1213.22 L1997.59 1213.22 L1997 1213.22 L1996.41 1213.22 L1995.83 1213.22 L1995.24 1213.22 L1994.65 1213.22 L1994.07 1213.22 L1993.48 1213.22 L1992.9 1213.22 L1992.31 1213.22 L1991.72 1213.22 L1991.14 1213.22 L1990.55 1213.22 L1989.96 1213.22 L1989.38 1213.22 L1988.79 1213.22 L1988.2 1213.22 L1987.62 1213.22 L1987.03 1213.22 L1986.45 1213.22 L1985.86 1213.22 L1985.27 1213.22 L1984.69 1213.22 L1984.1 1213.22 L1983.51 1213.22 L1982.93 1213.22 L1982.34 1213.22 L1981.75 1213.22 L1981.17 1213.22 L1980.58 1213.22 L1979.99 1213.22 L1979.41 1213.22 L1978.82 1213.22 L1978.24 1213.22 L1977.65 1213.22 L1977.06 1213.22 L1976.48 1213.22 L1975.89 1213.22 L1975.3 1213.22 L1974.72 1213.22 L1974.13 1213.22 L1973.54 1213.22 L1972.96 1213.22 L1972.37 1213.22 L1971.78 1213.22 L1971.2 1213.22 L1970.61 1213.22 L1970.03 1213.22 L1969.44 1213.22 L1968.85 1213.22 L1968.27 1213.22 L1967.68 1213.22 L1967.09 1213.22 L1966.51 1213.22 L1965.92 1213.22 L1965.33 1213.22 L1964.75 1213.22 L1964.16 1213.22 L1963.58 1213.22 L1962.99 1213.22 L1962.4 1213.22 L1961.82 1213.22 L1961.23 1213.22 L1960.64 1213.22 L1960.06 1213.22 L1959.47 1213.22 L1958.88 1213.22 L1958.3 1213.22 L1957.71 1213.22 L1957.12 1213.22 L1956.54 1213.22 L1955.95 1213.22 L1955.37 1213.22 L1954.78 1213.22 L1954.19 1213.22 L1953.61 1213.22 L1953.02 1213.22 L1952.43 1213.22 L1951.85 1213.22 L1951.26 1213.22 L1950.67 1213.22 L1950.09 1213.22 L1949.5 1213.22 L1948.91 1213.22 L1948.33 1213.22 L1947.74 1213.22 L1947.16 1213.22 L1946.57 1213.22 L1945.98 1213.22 L1945.4 1213.22 L1944.81 1213.22 L1944.22 1213.22 L1943.64 1213.22 L1943.05 1213.22 L1942.46 1213.22 L1941.88 1213.22 L1941.29 1213.22 L1940.71 1213.22 L1940.12 1213.22 L1939.53 1213.22 L1938.95 1213.22 L1938.36 1213.22 L1937.77 1213.22 L1937.19 1213.22 L1936.6 1213.22 L1936.01 1213.22 L1935.43 1213.22 L1934.84 1213.22 L1934.25 1213.22 L1933.67 1213.22 L1933.08 1213.22 L1932.5 1213.22 L1931.91 1213.22 L1931.32 1213.22 L1930.74 1213.22 L1930.15 1213.22 L1929.56 1213.22 L1928.98 1213.22 L1928.39 1213.22 L1927.8 1213.22 L1927.22 1213.22 L1926.63 1213.22 L1926.04 1213.22 L1925.46 1213.22 L1924.87 1213.22 L1924.29 1213.22 L1923.7 1213.22 L1923.11 1213.22 L1922.53 1213.22 L1921.94 1213.22 L1921.35 1213.22 L1920.77 1213.22 L1920.18 1213.22 L1919.59 1213.22 L1919.01 1213.22 L1918.42 1213.22 L1917.83 1213.22 L1917.25 1213.22 L1916.66 1213.22 L1916.08 1213.22 L1915.49 1213.22 L1914.9 1213.22 L1914.32 1213.22 L1913.73 1213.22 L1913.14 1213.22 L1912.56 1213.22 L1911.97 1213.22 L1911.38 1213.22 L1910.8 1213.22 L1910.21 1213.22 L1909.63 1213.22 L1909.04 1213.22 L1908.45 1213.22 L1907.87 1213.22 L1907.28 1213.22 L1906.69 1213.22 L1906.11 1213.22 L1905.52 1213.22 L1904.93 1213.22 L1904.35 1213.22 L1903.76 1213.22 L1903.17 1213.22 L1902.59 1213.22 L1902 1213.22 L1901.42 1213.22 L1900.83 1213.22 L1900.24 1213.22 L1899.66 1213.22 L1899.07 1213.22 L1898.48 1213.22 L1897.9 1213.22 L1897.31 1213.22 L1896.72 1213.22 L1896.14 1213.22 L1895.55 1213.22 L1894.96 1213.22 L1894.38 1213.22 L1893.79 1213.22 L1893.21 1213.22 L1892.62 1213.22 L1892.03 1213.22 L1891.45 1213.22 L1890.86 1213.22 L1890.27 1213.22 L1889.69 1213.22 L1889.1 1213.22 L1888.51 1213.22 L1887.93 1213.22 L1887.34 1213.22 L1886.76 1213.22 L1886.17 1213.22 L1885.58 1213.22 L1885 1213.22 L1884.41 1213.22 L1883.82 1213.22 L1883.24 1213.22 L1882.65 1213.22 L1882.06 1213.22 L1881.48 1213.22 L1880.89 1213.22 L1880.3 1213.22 L1879.72 1213.22 L1879.13 1213.22 L1878.55 1213.22 L1877.96 1213.22 L1877.37 1213.22 L1876.79 1213.22 L1876.2 1213.22 L1875.61 1213.22 L1875.03 1213.22 L1874.44 1213.22 L1873.85 1213.22 L1873.27 1213.22 L1872.68 1213.22 L1872.09 1213.22 L1871.51 1213.22 L1870.92 1213.22 L1870.34 1213.22 L1869.75 1213.22 L1869.16 1213.22 L1868.58 1213.22 L1867.99 1213.22 L1867.4 1213.22 L1866.82 1213.22 L1866.23 1213.22 L1865.64 1213.22 L1865.06 1213.22 L1864.47 1213.22 L1863.88 1213.22 L1863.3 1213.22 L1862.71 1213.22 L1862.13 1213.22 L1861.54 1213.22 L1860.95 1213.22 L1860.37 1213.22 L1859.78 1213.22 L1859.19 1213.22 L1858.61 1213.22 L1858.02 1213.22 L1857.43 1213.22 L1856.85 1213.22 L1856.26 1213.22 L1855.68 1213.22 L1855.09 1213.22 L1854.5 1213.22 L1853.92 1213.22 L1853.33 1213.22 L1852.74 1213.22 L1852.16 1213.22 L1851.57 1213.22 L1850.98 1213.22 L1850.4 1213.22 L1849.81 1213.22 L1849.22 1213.22 L1848.64 1213.22 L1848.05 1213.22 L1847.47 1213.22 L1846.88 1213.22 L1846.29 1213.22 L1845.71 1213.22 L1845.12 1213.22 L1844.53 1213.22 L1843.95 1213.22 L1843.36 1213.22 L1842.77 1213.22 L1842.19 1213.22 L1841.6 1213.22 L1841.01 1213.22 L1840.43 1213.22 L1839.84 1213.22 L1839.26 1213.22 L1838.67 1213.22 L1838.08 1213.22 L1837.5 1213.22 L1836.91 1213.22 L1836.32 1213.22 L1835.74 1213.22 L1835.15 1213.22 L1834.56 1213.22 L1833.98 1213.22 L1833.39 1213.22 L1832.81 1213.22 L1832.22 1213.22 L1831.63 1213.22 L1831.05 1213.22 L1830.46 1213.22 L1829.87 1213.22 L1829.29 1213.22 L1828.7 1213.22 L1828.11 1213.22 L1827.53 1213.22 L1826.94 1213.22 L1826.35 1213.22 L1825.77 1213.22 L1825.18 1213.22 L1824.6 1213.22 L1824.01 1213.22 L1823.42 1213.22 L1822.84 1213.22 L1822.25 1213.22 L1821.66 1213.22 L1821.08 1213.22 L1820.49 1213.22 L1819.9 1213.22 L1819.32 1213.22 L1818.73 1213.22 L1818.14 1213.22 L1817.56 1213.22 L1816.97 1213.22 L1816.39 1213.22 L1815.8 1213.22 L1815.21 1213.22 L1814.63 1213.22 L1814.04 1213.22 L1813.45 1213.22 L1812.87 1213.22 L1812.28 1213.22 L1811.69 1213.22 L1811.11 1213.22 L1810.52 1213.22 L1809.94 1213.22 L1809.35 1213.22 L1808.76 1213.22 L1808.18 1213.22 L1807.59 1213.22 L1807 1213.22 L1806.42 1213.22 L1805.83 1213.22 L1805.24 1213.22 L1804.66 1213.22 L1804.07 1213.22 L1803.48 1213.22 L1802.9 1213.22 L1802.31 1213.22 L1801.73 1213.22 L1801.14 1213.22 L1800.55 1213.22 L1799.97 1213.22 L1799.38 1213.22 L1798.79 1213.22 L1798.21 1213.22 L1797.62 1213.22 L1797.03 1213.22 L1796.45 1213.22 L1795.86 1213.22 L1795.27 1213.22 L1794.69 1213.22 L1794.1 1213.22 L1793.52 1213.22 L1792.93 1213.22 L1792.34 1213.22 L1791.76 1213.22 L1791.17 1213.22 L1790.58 1213.22 L1790 1213.22 L1789.41 1213.22 L1788.82 1213.22 L1788.24 1213.22 L1787.65 1213.22 L1787.06 1213.22 L1786.48 1213.22 L1785.89 1213.22 L1785.31 1213.22 L1784.72 1213.22 L1784.13 1213.22 L1783.55 1213.22 L1782.96 1213.22 L1782.37 1213.22 L1781.79 1213.22 L1781.2 1213.22 L1780.61 1213.22 L1780.03 1213.22 L1779.44 1213.22 L1778.86 1213.22 L1778.27 1213.22 L1777.68 1213.22 L1777.1 1213.22 L1776.51 1213.22 L1775.92 1213.22 L1775.34 1213.22 L1774.75 1213.22 L1774.16 1213.22 L1773.58 1213.22 L1772.99 1213.22 L1772.4 1213.22 L1771.82 1213.22 L1771.23 1213.22 L1770.65 1213.22 L1770.06 1213.22 L1769.47 1213.22 L1768.89 1213.22 L1768.3 1213.22 L1767.71 1213.22 L1767.13 1213.22 L1766.54 1213.22 L1765.95 1213.22 L1765.37 1213.22 L1764.78 1213.22 L1764.19 1213.22 L1763.61 1213.22 L1763.02 1213.22 L1762.44 1213.22 L1761.85 1213.22 L1761.26 1213.22 L1760.68 1213.22 L1760.09 1213.22 L1759.5 1213.22 L1758.92 1213.22 L1758.33 1213.22 L1757.74 1213.22 L1757.16 1213.22 L1756.57 1213.22 L1755.99 1213.22 L1755.4 1213.22 L1754.81 1213.22 L1754.23 1213.22 L1753.64 1213.22 L1753.05 1213.22 L1752.47 1213.22 L1751.88 1213.22 L1751.29 1213.22 L1750.71 1213.22 L1750.12 1213.22 L1749.53 1213.22 L1748.95 1213.22 L1748.36 1213.22 L1747.78 1213.22 L1747.19 1213.22 L1746.6 1213.22 L1746.02 1213.22 L1745.43 1213.22 L1744.84 1213.22 L1744.26 1213.22 L1743.67 1213.22 L1743.08 1213.22 L1742.5 1213.22 L1741.91 1213.22 L1741.32 1213.22 L1740.74 1213.22 L1740.15 1213.22 L1739.57 1213.22 L1738.98 1213.22 L1738.39 1213.22 L1737.81 1213.22 L1737.22 1213.22 L1736.63 1213.22 L1736.05 1213.22 L1735.46 1213.22 L1734.87 1213.22 L1734.29 1213.22 L1733.7 1213.22 L1733.11 1213.22 L1732.53 1213.22 L1731.94 1213.22 L1731.36 1213.22 L1730.77 1213.22 L1730.18 1213.22 L1729.6 1213.22 L1729.01 1213.22 L1728.42 1213.22 L1727.84 1213.22 L1727.25 1213.22 L1726.66 1213.22 L1726.08 1213.22 L1725.49 1213.22 L1724.91 1213.22 L1724.32 1213.22 L1723.73 1213.22 L1723.15 1213.22 L1722.56 1213.22 L1721.97 1213.22 L1721.39 1213.22 L1720.8 1213.22 L1720.21 1213.22 L1719.63 1213.22 L1719.04 1213.22 L1718.45 1213.22 L1717.87 1213.22 L1717.28 1213.22 L1716.7 1213.22 L1716.11 1213.22 L1715.52 1213.22 L1714.94 1213.22 L1714.35 1213.22 L1713.76 1213.22 L1713.18 1213.22 L1712.59 1213.22 L1712 1213.22 L1711.42 1213.22 L1710.83 1213.22 L1710.24 1213.22 L1709.66 1213.22 L1709.07 1213.22 L1708.49 1213.22 L1707.9 1213.22 L1707.31 1213.22 L1706.73 1213.22 L1706.14 1213.22 L1705.55 1213.22 L1704.97 1213.22 L1704.38 1213.22 L1703.79 1213.22 L1703.21 1213.22 L1702.62 1213.22 L1702.04 1213.22 L1701.45 1213.22 L1700.86 1213.22 L1700.28 1213.22 L1699.69 1213.22 L1699.1 1213.22 L1698.52 1213.22 L1697.93 1213.22 L1697.34 1213.22 L1696.76 1213.22 L1696.17 1213.22 L1695.58 1213.22 L1695 1213.22 L1694.41 1213.22 L1693.83 1213.22 L1693.24 1213.22 L1692.65 1213.22 L1692.07 1213.22 L1691.48 1213.22 L1690.89 1213.22 L1690.31 1213.22 L1689.72 1213.22 L1689.13 1213.22 L1688.55 1213.22 L1687.96 1213.22 L1687.37 1213.22 L1686.79 1213.22 L1686.2 1213.22 L1685.62 1213.22 L1685.03 1213.22 L1684.44 1213.22 L1683.86 1213.22 L1683.27 1213.22 L1682.68 1213.22 L1682.1 1213.22 L1681.51 1213.22 L1680.92 1213.22 L1680.34 1213.22 L1679.75 1213.22 L1679.17 1213.22 L1678.58 1213.22 L1677.99 1213.22 L1677.41 1213.22 L1676.82 1213.22 L1676.23 1213.22 L1675.65 1213.22 L1675.06 1213.22 L1674.47 1213.22 L1673.89 1213.22 L1673.3 1213.22 L1672.71 1213.22 L1672.13 1213.22 L1671.54 1213.22 L1670.96 1213.22 L1670.37 1213.22 L1669.78 1213.22 L1669.2 1213.22 L1668.61 1213.22 L1668.02 1213.22 L1667.44 1213.22 L1666.85 1213.22 L1666.26 1213.22 L1665.68 1213.22 L1665.09 1213.22 L1664.5 1213.22 L1663.92 1213.22 L1663.33 1213.22 L1662.75 1213.22 L1662.16 1213.22 L1661.57 1213.22 L1660.99 1213.22 L1660.4 1213.22 L1659.81 1213.22 L1659.23 1213.22 L1658.64 1213.22 L1658.05 1213.22 L1657.47 1213.22 L1656.88 1213.22 L1656.29 1213.22 L1655.71 1213.22 L1655.12 1213.22 L1654.54 1213.22 L1653.95 1213.22 L1653.36 1213.22 L1652.78 1213.22 L1652.19 1213.22 L1651.6 1213.22 L1651.02 1213.22 L1650.43 1213.22 L1649.84 1213.22 L1649.26 1213.22 L1648.67 1213.22 L1648.09 1213.22 L1647.5 1213.22 L1646.91 1213.22 L1646.33 1213.22 L1645.74 1213.22 L1645.15 1213.22 L1644.57 1213.22 L1643.98 1213.22 L1643.39 1213.22 L1642.81 1213.22 L1642.22 1213.22 L1641.63 1213.22 L1641.05 1213.22 L1640.46 1213.22 L1639.88 1213.22 L1639.29 1213.22 L1638.7 1213.22 L1638.12 1213.22 L1637.53 1213.22 L1636.94 1213.22 L1636.36 1213.22 L1635.77 1213.22 L1635.18 1213.22 L1634.6 1213.22 L1634.01 1213.22 L1633.42 1213.22 L1632.84 1213.22 L1632.25 1213.22 L1631.67 1213.22 L1631.08 1213.22 L1630.49 1213.22 L1629.91 1213.22 L1629.32 1213.22 L1628.73 1213.22 L1628.15 1213.22 L1627.56 1213.22 L1626.97 1213.22 L1626.39 1213.22 L1625.8 1213.22 L1625.22 1213.22 L1624.63 1213.22 L1624.04 1213.22 L1623.46 1213.22 L1622.87 1213.22 L1622.28 1213.22 L1621.7 1213.22 L1621.11 1213.22 L1620.52 1213.22 L1619.94 1213.22 L1619.35 1213.22 L1618.76 1213.22 L1618.18 1213.22 L1617.59 1213.22 L1617.01 1213.22 L1616.42 1213.22 L1615.83 1213.22 L1615.25 1213.22 L1614.66 1213.22 L1614.07 1213.22 L1613.49 1213.22 L1612.9 1213.22 L1612.31 1213.22 L1611.73 1213.22 L1611.14 1213.22 L1610.55 1213.22 L1609.97 1213.22 L1609.38 1213.22 L1608.8 1213.22 L1608.21 1213.22 L1607.62 1213.22 L1607.04 1213.22 L1606.45 1213.22 L1605.86 1213.22 L1605.28 1213.22 L1604.69 1213.22 L1604.1 1213.22 L1603.52 1213.22 L1602.93 1213.22 L1602.34 1213.22 L1601.76 1213.22 L1601.17 1213.22 L1600.59 1213.22 L1600 1213.22 L1599.41 1213.22 L1598.83 1213.22 L1598.24 1213.22 L1597.65 1213.22 L1597.07 1213.22 L1596.48 1213.22 L1595.89 1213.22 L1595.31 1213.22 L1594.72 1213.22 L1594.14 1213.22 L1593.55 1213.22 L1592.96 1213.22 L1592.38 1213.22 L1591.79 1213.22 L1591.2 1213.22 L1590.62 1213.22 L1590.03 1213.22 L1589.44 1213.22 L1588.86 1213.22 L1588.27 1213.22 L1587.68 1213.22 L1587.1 1213.22 L1586.51 1213.22 L1585.93 1213.22 L1585.34 1213.22 L1584.75 1213.22 L1584.17 1213.22 L1583.58 1213.22 L1582.99 1213.22 L1582.41 1213.22 L1581.82 1213.22 L1581.23 1213.22 L1580.65 1213.22 L1580.06 1213.22 L1579.47 1213.22 L1578.89 1213.22 L1578.3 1213.22 L1577.72 1213.22 L1577.13 1213.22 L1576.54 1213.22 L1575.96 1213.22 L1575.37 1213.22 L1574.78 1213.22 L1574.2 1213.22 L1573.61 1213.22 L1573.02 1213.22 L1572.44 1213.22 L1571.85 1213.22 L1571.27 1213.22 L1570.68 1213.22 L1570.09 1213.22 L1569.51 1213.22 L1568.92 1213.22 L1568.33 1213.22 L1567.75 1213.22 L1567.16 1213.22 L1566.57 1213.22 L1565.99 1213.22 L1565.4 1213.22 L1564.81 1213.22 L1564.23 1213.22 L1563.64 1213.22 L1563.06 1213.22 L1562.47 1213.22 L1561.88 1213.22 L1561.3 1213.22 L1560.71 1213.22 L1560.12 1213.22 L1559.54 1213.22 L1558.95 1213.22 L1558.36 1213.22 L1557.78 1213.22 L1557.19 1213.22 L1556.6 1213.22 L1556.02 1213.22 L1555.43 1213.22 L1554.85 1213.22 L1554.26 1213.22 L1553.67 1213.22 L1553.09 1213.22 L1552.5 1213.22 L1551.91 1213.22 L1551.33 1213.22 L1550.74 1213.22 L1550.15 1213.22 L1549.57 1213.22 L1548.98 1213.22 L1548.4 1213.22 L1547.81 1213.22 L1547.22 1213.22 L1546.64 1213.22 L1546.05 1213.22 L1545.46 1213.22 L1544.88 1213.22 L1544.29 1213.22 L1543.7 1213.22 L1543.12 1213.22 L1542.53 1213.22 L1541.94 1213.22 L1541.36 1213.22 L1540.77 1213.22 L1540.19 1213.22 L1539.6 1213.22 L1539.01 1213.22 L1538.43 1213.22 L1537.84 1213.22 L1537.25 1213.22 L1536.67 1213.22 L1536.08 1213.22 L1535.49 1213.22 L1534.91 1213.22 L1534.32 1213.22 L1533.73 1213.22 L1533.15 1213.22 L1532.56 1213.22 L1531.98 1213.22 L1531.39 1213.22 L1530.8 1213.22 L1530.22 1213.22 L1529.63 1213.22 L1529.04 1213.22 L1528.46 1213.22 L1527.87 1213.22 L1527.28 1213.22 L1526.7 1213.22 L1526.11 1213.22 L1525.52 1213.22 L1524.94 1213.22 L1524.35 1213.22 L1523.77 1213.22 L1523.18 1213.22 L1522.59 1213.22 L1522.01 1213.22 L1521.42 1213.22 L1520.83 1213.22 L1520.25 1213.22 L1519.66 1213.22 L1519.07 1213.22 L1518.49 1213.22 L1517.9 1213.22 L1517.32 1213.22 L1516.73 1213.22 L1516.14 1213.22 L1515.56 1213.22 L1514.97 1213.22 L1514.38 1213.22 L1513.8 1213.22 L1513.21 1213.22 L1512.62 1213.22 L1512.04 1213.22 L1511.45 1213.22 L1510.86 1213.22 L1510.28 1213.22 L1509.69 1213.22 L1509.11 1213.22 L1508.52 1213.22 L1507.93 1213.22 L1507.35 1213.22 L1506.76 1213.22 L1506.17 1213.22 L1505.59 1213.22 L1505 1213.22 L1504.41 1213.22 L1503.83 1213.22 L1503.24 1213.22 L1502.65 1213.22 L1502.07 1213.22 L1501.48 1213.22 L1500.9 1213.22 L1500.31 1213.22 L1499.72 1213.22 L1499.14 1213.22 L1498.55 1213.22 L1497.96 1213.22 L1497.38 1213.22 L1496.79 1213.22 L1496.2 1213.22 L1495.62 1213.22 L1495.03 1213.22 L1494.45 1213.22 L1493.86 1213.22 L1493.27 1213.22 L1492.69 1213.22 L1492.1 1213.22 L1491.51 1213.22 L1490.93 1213.22 L1490.34 1213.22 L1489.75 1213.22 L1489.17 1213.22 L1488.58 1213.22 L1487.99 1213.22 L1487.41 1213.22 L1486.82 1213.22 L1486.24 1213.22 L1485.65 1213.22 L1485.06 1213.22 L1484.48 1213.22 L1483.89 1213.22 L1483.3 1213.22 L1482.72 1213.22 L1482.13 1213.22 L1481.54 1213.22 L1480.96 1213.22 L1480.37 1213.22 L1479.78 1213.22 L1479.2 1213.22 L1478.61 1213.22 L1478.03 1213.22 L1477.44 1213.22 L1476.85 1213.22 L1476.27 1213.22 L1475.68 1213.22 L1475.09 1213.22 L1474.51 1213.22 L1473.92 1213.22 L1473.33 1213.22 L1472.75 1213.22 L1472.16 1213.22 L1471.57 1213.22 L1470.99 1213.22 L1470.4 1213.22 L1469.82 1213.22 L1469.23 1213.22 L1468.64 1213.22 L1468.06 1213.22 L1467.47 1213.22 L1466.88 1213.22 L1466.3 1213.22 L1465.71 1213.22 L1465.12 1213.22 L1464.54 1213.22 L1463.95 1213.22 L1463.37 1213.22 L1462.78 1213.22 L1462.19 1213.22 L1461.61 1213.22 L1461.02 1213.22 L1460.43 1213.22 L1459.85 1213.22 L1459.26 1213.22 L1458.67 1213.22 L1458.09 1213.22 L1457.5 1213.22 L1456.91 1213.22 L1456.33 1213.22 L1455.74 1213.22 L1455.16 1213.22 L1454.57 1213.22 L1453.98 1213.22 L1453.4 1213.22 L1452.81 1213.22 L1452.22 1213.22 L1451.64 1213.22 L1451.05 1213.22 L1450.46 1213.22 L1449.88 1213.22 L1449.29 1213.22 L1448.7 1213.22 L1448.12 1213.22 L1447.53 1213.22 L1446.95 1213.22 L1446.36 1213.22 L1445.77 1213.22 L1445.19 1213.22 L1444.6 1213.22 L1444.01 1213.22 L1443.43 1213.22 L1442.84 1213.22 L1442.25 1213.22 L1441.67 1213.22 L1441.08 1213.22 L1440.5 1213.22 L1439.91 1213.22 L1439.32 1213.22 L1438.74 1213.22 L1438.15 1213.22 L1437.56 1213.22 L1436.98 1213.22 L1436.39 1213.22 L1435.8 1213.22 L1435.22 1213.22 L1434.63 1213.22 L1434.04 1213.22 L1433.46 1213.22 L1432.87 1213.22 L1432.29 1213.22 L1431.7 1213.22 L1431.11 1213.22 L1430.53 1213.22 L1429.94 1213.22 L1429.35 1213.22 L1428.77 1213.22 L1428.18 1213.22 L1427.59 1213.22 L1427.01 1213.22 L1426.42 1213.22 L1425.83 1213.22 L1425.25 1213.22 L1424.66 1213.22 L1424.08 1213.22 L1423.49 1213.22 L1422.9 1213.22 L1422.32 1213.22 L1421.73 1213.22 L1421.14 1213.22 L1420.56 1213.22 L1419.97 1213.22 L1419.38 1213.22 L1418.8 1213.22 L1418.21 1213.22 L1417.63 1213.22 L1417.04 1213.22 L1416.45 1213.22 L1415.87 1213.22 L1415.28 1213.22 L1414.69 1213.22 L1414.11 1213.22 L1413.52 1213.22 L1412.93 1213.22 L1412.35 1213.22 L1411.76 1213.22 L1411.17 1213.22 L1410.59 1213.22 L1410 1213.22 L1409.42 1213.22 L1408.83 1213.22 L1408.24 1213.22 L1407.66 1213.22 L1407.07 1213.22 L1406.48 1213.22 L1405.9 1213.22 L1405.31 1213.22 L1404.72 1213.22 L1404.14 1213.22 L1403.55 1213.22 L1402.96 1213.22 L1402.38 1213.22 L1401.79 1213.22 L1401.21 1213.22 L1400.62 1213.22 L1400.03 1213.22 L1399.45 1213.22 L1398.86 1213.22 L1398.27 1213.22 L1397.69 1213.22 L1397.1 1213.22 L1396.51 1213.22 L1395.93 1213.22 L1395.34 1213.22 L1394.75 1213.22 L1394.17 1213.22 L1393.58 1213.22 L1393 1213.22 L1392.41 1213.22 L1391.82 1213.22 L1391.24 1213.22 L1390.65 1213.22 L1390.06 1213.22 L1389.48 1213.22 L1388.89 1213.22 L1388.3 1213.22 L1387.72 1213.22 L1387.13 1213.22 L1386.55 1213.22 L1385.96 1213.22 L1385.37 1213.22 L1384.79 1213.22 L1384.2 1213.22 L1383.61 1213.22 L1383.03 1213.22 L1382.44 1213.22 L1381.85 1213.22 L1381.27 1213.22 L1380.68 1213.22 L1380.09 1213.22 L1379.51 1213.22 L1378.92 1213.22 L1378.34 1213.22 L1377.75 1213.22 L1377.16 1213.22 L1376.58 1213.22 L1375.99 1213.22 L1375.4 1213.22 L1374.82 1213.22 L1374.23 1213.22 L1373.64 1213.22 L1373.06 1213.22 L1372.47 1213.22 L1371.88 1213.22 L1371.3 1213.22 L1370.71 1213.22 L1370.13 1213.22 L1369.54 1213.22 L1368.95 1213.22 L1368.37 1213.22 L1367.78 1213.22 L1367.19 1213.22 L1366.61 1213.22 L1366.02 1213.22 L1365.43 1213.22 L1364.85 1213.22 L1364.26 1213.22 L1363.68 1213.22 L1363.09 1213.22 L1362.5 1213.22 L1361.92 1213.22 L1361.33 1213.22 L1360.74 1213.22 L1360.16 1213.22 L1359.57 1213.22 L1358.98 1213.22 L1358.4 1213.22 L1357.81 1213.22 L1357.22 1213.22 L1356.64 1213.22 L1356.05 1213.22 L1355.47 1213.22 L1354.88 1213.22 L1354.29 1213.22 L1353.71 1213.22 L1353.12 1213.22 L1352.53 1213.22 L1351.95 1213.22 L1351.36 1213.22 L1350.77 1213.22 L1350.19 1213.22 L1349.6 1213.22 L1349.01 1213.22 L1348.43 1213.22 L1347.84 1213.22 L1347.26 1213.22 L1346.67 1213.22 L1346.08 1213.22 L1345.5 1213.22 L1344.91 1213.22 L1344.32 1213.22 L1343.74 1213.22 L1343.15 1213.22 L1342.56 1213.22 L1341.98 1213.22 L1341.39 1213.22 L1340.8 1213.22 L1340.22 1213.22 L1339.63 1213.22 L1339.05 1213.22 L1338.46 1213.22 L1337.87 1213.22 L1337.29 1213.22 L1336.7 1213.22 L1336.11 1213.22 L1335.53 1213.22 L1334.94 1213.22 L1334.35 1213.22 L1333.77 1213.22 L1333.18 1213.22 L1332.6 1213.22 L1332.01 1213.22 L1331.42 1213.22 L1330.84 1213.22 L1330.25 1213.22 L1329.66 1213.22 L1329.08 1213.22 L1328.49 1213.22 L1327.9 1213.22 L1327.32 1213.22 L1326.73 1213.22 L1326.14 1213.22 L1325.56 1213.22 L1324.97 1213.22 L1324.39 1213.22 L1323.8 1213.22 L1323.21 1213.22 L1322.63 1213.22 L1322.04 1213.22 L1321.45 1213.22 L1320.87 1213.22 L1320.28 1213.22 L1319.69 1213.22 L1319.11 1213.22 L1318.52 1213.22 L1317.93 1213.22 L1317.35 1213.22 L1316.76 1213.22 L1316.18 1213.22 L1315.59 1213.22 L1315 1213.22 L1314.42 1213.22 L1313.83 1213.22 L1313.24 1213.22 L1312.66 1213.22 L1312.07 1213.22 L1311.48 1213.22 L1310.9 1213.22 L1310.31 1213.22 L1309.73 1213.22 L1309.14 1213.22 L1308.55 1213.22 L1307.97 1213.22 L1307.38 1213.22 L1306.79 1213.22 L1306.21 1213.22 L1305.62 1213.22 L1305.03 1213.22 L1304.45 1213.22 L1303.86 1213.22 L1303.27 1213.22 L1302.69 1213.22 L1302.1 1213.22 L1301.52 1213.22 L1300.93 1213.22 L1300.34 1213.22 L1299.76 1213.22 L1299.17 1213.22 L1298.58 1213.22 L1298 1213.22 L1297.41 1213.22 L1296.82 1213.22 L1296.24 1213.22 L1295.65 1213.22 L1295.06 1213.22 L1294.48 1213.22 L1293.89 1213.22 L1293.31 1213.22 L1292.72 1213.22 L1292.13 1213.22 L1291.55 1213.22 L1290.96 1213.22 L1290.37 1213.22 L1289.79 1213.22 L1289.2 1213.22 L1288.61 1213.22 L1288.03 1213.22 L1287.44 1213.22 L1286.86 1213.22 L1286.27 1213.22 L1285.68 1213.22 L1285.1 1213.22 L1284.51 1213.22 L1283.92 1213.22 L1283.34 1213.22 L1282.75 1213.22 L1282.16 1213.22 L1281.58 1213.22 L1280.99 1213.22 L1280.4 1213.22 L1279.82 1213.22 L1279.23 1213.22 L1278.65 1213.22 L1278.06 1213.22 L1277.47 1213.22 L1276.89 1213.22 L1276.3 1213.22 L1275.71 1213.22 L1275.13 1213.22 L1274.54 1213.22 L1273.95 1213.22 L1273.37 1213.22 L1272.78 1213.22 L1272.19 1213.22 L1271.61 1213.22 L1271.02 1213.22 L1270.44 1213.22 L1269.85 1213.22 L1269.26 1213.22 L1268.68 1213.22 L1268.09 1213.22 L1267.5 1213.22 L1266.92 1213.22 L1266.33 1213.22 L1265.74 1213.22 L1265.16 1213.22 L1264.57 1213.22 L1263.98 1213.22 L1263.4 1213.22 L1262.81 1213.22 L1262.23 1213.22 L1261.64 1213.22 L1261.05 1213.22 L1260.47 1213.22 L1259.88 1213.22 L1259.29 1213.22 L1258.71 1213.22 L1258.12 1213.22 L1257.53 1213.22 L1256.95 1213.22 L1256.36 1213.22 L1255.78 1213.22 L1255.19 1213.22 L1254.6 1213.22 L1254.02 1213.22 L1253.43 1213.22 L1252.84 1213.22 L1252.26 1213.22 L1251.67 1213.22 L1251.08 1213.22 L1250.5 1213.22 L1249.91 1213.22 L1249.32 1213.22 L1248.74 1213.22 L1248.15 1213.22 L1247.57 1213.22 L1246.98 1213.22 L1246.39 1213.22 L1245.81 1213.22 L1245.22 1213.22 L1244.63 1213.22 L1244.05 1213.22 L1243.46 1213.22 L1242.87 1213.22 L1242.29 1213.22 L1241.7 1213.22 L1241.11 1213.22 L1240.53 1213.22 L1239.94 1213.22 L1239.36 1213.22 L1238.77 1213.22 L1238.18 1213.22 L1237.6 1213.22 L1237.01 1213.22 L1236.42 1213.22 L1235.84 1213.22 L1235.25 1213.22 L1234.66 1213.22 L1234.08 1213.22 L1233.49 1213.22 L1232.91 1213.22 L1232.32 1213.22 L1231.73 1213.22 L1231.15 1213.22 L1230.56 1213.22 L1229.97 1213.22 L1229.39 1213.22 L1228.8 1213.22 L1228.21 1213.22 L1227.63 1213.22 L1227.04 1213.22 L1226.45 1213.22 L1225.87 1213.22 L1225.28 1213.22 L1224.7 1213.22 L1224.11 1213.22 L1223.52 1213.22 L1222.94 1213.22 L1222.35 1213.22 L1221.76 1213.22 L1221.18 1213.22 L1220.59 1213.22 L1220 1213.22 L1219.42 1213.22 L1218.83 1213.22 L1218.24 1213.22 L1217.66 1213.22 L1217.07 1213.22 L1216.49 1213.22 L1215.9 1213.22 L1215.31 1213.22 L1214.73 1213.22 L1214.14 1213.22 L1213.55 1213.22 L1212.97 1213.22 L1212.38 1213.22 L1211.79 1213.22 L1211.21 1213.22 L1210.62 1213.22 L1210.03 1213.22 L1209.45 1213.22 L1208.86 1213.22 L1208.28 1213.22 L1207.69 1213.22 L1207.1 1213.22 L1206.52 1213.22 L1205.93 1213.22 L1205.34 1213.22 L1204.76 1213.22 L1204.17 1213.22 L1203.58 1213.22 L1203 1213.22 L1202.41 1213.22 L1201.83 1213.22 L1201.24 1213.22 L1200.65 1213.22 L1200.07 1213.22 L1199.48 1213.22 L1198.89 1213.22 L1198.31 1213.22 L1197.72 1213.22 L1197.13 1213.22 L1196.55 1213.22 L1195.96 1213.22 L1195.37 1213.22 L1194.79 1213.22 L1194.2 1213.22 L1193.62 1213.22 L1193.03 1213.22 L1192.44 1213.22 L1191.86 1213.22 L1191.27 1213.22 L1190.68 1213.22 L1190.1 1213.22 L1189.51 1213.22 L1188.92 1213.22 L1188.34 1213.22 L1187.75 1213.22 L1187.16 1213.22 L1186.58 1213.22 L1185.99 1213.22 L1185.41 1213.22 L1184.82 1213.22 L1184.23 1213.22 L1183.65 1213.22 L1183.06 1213.22 L1182.47 1213.22 L1181.89 1213.22 L1181.3 1213.22 L1180.71 1213.22 L1180.13 1213.22 L1179.54 1213.22 L1178.96 1213.22 L1178.37 1213.22 L1177.78 1213.22 L1177.2 1213.22 L1176.61 1213.22 L1176.02 1213.22 L1175.44 1213.22 L1174.85 1213.22 L1174.26 1213.22 L1173.68 1213.22 L1173.09 1213.22 L1172.5 1213.22 L1171.92 1213.22 L1171.33 1213.22 L1170.75 1213.22 L1170.16 1213.22 L1169.57 1213.22 L1168.99 1213.22 L1168.4 1213.22 L1167.81 1213.22 L1167.23 1213.22 L1166.64 1213.22 L1166.05 1213.22 L1165.47 1213.22 L1164.88 1213.22 L1164.29 1213.22 L1163.71 1213.22 L1163.12 1213.22 L1162.54 1213.22 L1161.95 1213.22 L1161.36 1213.22 L1160.78 1213.22 L1160.19 1213.22 L1159.6 1213.22 L1159.02 1213.22 L1158.43 1213.22 L1157.84 1213.22 L1157.26 1213.22 L1156.67 1213.22 L1156.09 1213.22 L1155.5 1213.22 L1154.91 1213.22 L1154.33 1213.22 L1153.74 1213.22 L1153.15 1213.22 L1152.57 1213.22 L1151.98 1213.22 L1151.39 1213.22 L1150.81 1213.22 L1150.22 1213.22 L1149.63 1213.22 L1149.05 1213.22 L1148.46 1213.22 L1147.88 1213.22 L1147.29 1213.22 L1146.7 1213.22 L1146.12 1213.22 L1145.53 1213.22 L1144.94 1213.22 L1144.36 1213.22 L1143.77 1213.22 L1143.18 1213.22 L1142.6 1213.22 L1142.01 1213.22 L1141.42 1213.22 L1140.84 1213.22 L1140.25 1213.22 L1139.67 1213.22 L1139.08 1213.22 L1138.49 1213.22 L1137.91 1213.22 L1137.32 1213.22 L1136.73 1213.22 L1136.15 1213.22 L1135.56 1213.22 L1134.97 1213.22 L1134.39 1213.22 L1133.8 1213.22 L1133.21 1213.22 L1132.63 1213.22 L1132.04 1213.22 L1131.46 1213.22 L1130.87 1213.22 L1130.28 1213.22 L1129.7 1213.22 L1129.11 1213.22 L1128.52 1213.22 L1127.94 1213.22 L1127.35 1213.22 L1126.76 1213.22 L1126.18 1213.22 L1125.59 1213.22 L1125.01 1213.22 L1124.42 1213.22 L1123.83 1213.22 L1123.25 1213.22 L1122.66 1213.22 L1122.07 1213.22 L1121.49 1213.22 L1120.9 1213.22 L1120.31 1213.22 L1119.73 1213.22 L1119.14 1213.22 L1118.55 1213.22 L1117.97 1213.22 L1117.38 1213.22 L1116.8 1213.22 L1116.21 1213.22 L1115.62 1213.22 L1115.04 1213.22 L1114.45 1213.22 L1113.86 1213.22 L1113.28 1213.22 L1112.69 1213.22 L1112.1 1213.22 L1111.52 1213.22 L1110.93 1213.22 L1110.34 1213.22 L1109.76 1213.22 L1109.17 1213.22 L1108.59 1213.22 L1108 1213.22 L1107.41 1213.22 L1106.83 1213.22 L1106.24 1213.22 L1105.65 1213.22 L1105.07 1213.22 L1104.48 1213.22 L1103.89 1213.22 L1103.31 1213.22 L1102.72 1213.22 L1102.14 1213.22 L1101.55 1213.22 L1100.96 1213.22 L1100.38 1213.22 L1099.79 1213.22 L1099.2 1213.22 L1098.62 1213.22 L1098.03 1213.22 L1097.44 1213.22 L1096.86 1213.22 L1096.27 1213.22 L1095.68 1213.22 L1095.1 1213.22 L1094.51 1213.22 L1093.93 1213.22 L1093.34 1213.22 L1092.75 1213.22 L1092.17 1213.22 L1091.58 1213.22 L1090.99 1213.22 L1090.41 1213.22 L1089.82 1213.22 L1089.23 1213.22 L1088.65 1213.22 L1088.06 1213.22 L1087.47 1213.22 L1086.89 1213.22 L1086.3 1213.22 L1085.72 1213.22 L1085.13 1213.22 L1084.54 1213.22 L1083.96 1213.22 L1083.37 1213.22 L1082.78 1213.22 L1082.2 1213.22 L1081.61 1213.22 L1081.02 1213.22 L1080.44 1213.22 L1079.85 1213.22 L1079.26 1213.22 L1078.68 1213.22 L1078.09 1213.22 L1077.51 1213.22 L1076.92 1213.22 L1076.33 1213.22 L1075.75 1213.22 L1075.16 1213.22 L1074.57 1213.22 L1073.99 1213.22 L1073.4 1213.22 L1072.81 1213.22 L1072.23 1213.22 L1071.64 1213.22 L1071.06 1213.22 L1070.47 1213.22 L1069.88 1213.22 L1069.3 1213.22 L1068.71 1213.22 L1068.12 1213.22 L1067.54 1213.22 L1066.95 1213.22 L1066.36 1213.22 L1065.78 1213.22 L1065.19 1213.22 L1064.6 1213.22 L1064.02 1213.22 L1063.43 1213.22 L1062.85 1213.22 L1062.26 1213.22 L1061.67 1213.22 L1061.09 1213.22 L1060.5 1213.22 L1059.91 1213.22 L1059.33 1213.22 L1058.74 1213.22 L1058.15 1213.22 L1057.57 1213.22 L1056.98 1213.22 L1056.39 1213.22 L1055.81 1213.22 L1055.22 1213.22 L1054.64 1213.22 L1054.05 1213.22 L1053.46 1213.22 L1052.88 1213.22 L1052.29 1213.22 L1051.7 1213.22 L1051.12 1213.22 L1050.53 1213.22 L1049.94 1213.22 L1049.36 1213.22 L1048.77 1213.22 L1048.19 1213.22 L1047.6 1213.22 L1047.01 1213.22 L1046.43 1213.22 L1045.84 1213.22 L1045.25 1213.22 L1044.67 1213.22 L1044.08 1213.22 L1043.49 1213.22 L1042.91 1213.22 L1042.32 1213.22 L1041.73 1213.22 L1041.15 1213.22 L1040.56 1213.22 L1039.98 1213.22 L1039.39 1213.22 L1038.8 1213.22 L1038.22 1213.22 L1037.63 1213.22 L1037.04 1213.22 L1036.46 1213.22 L1035.87 1213.22 L1035.28 1213.22 L1034.7 1213.22 L1034.11 1213.22 L1033.52 1213.22 L1032.94 1213.22 L1032.35 1213.22 L1031.77 1213.22 L1031.18 1213.22 L1030.59 1213.22 L1030.01 1213.22 L1029.42 1213.22 L1028.83 1213.22 L1028.25 1213.22 L1027.66 1213.22 L1027.07 1213.22 L1026.49 1213.22 L1025.9 1213.22 L1025.32 1213.22 L1024.73 1213.22 L1024.14 1213.22 L1023.56 1213.22 L1022.97 1213.22 L1022.38 1213.22 L1021.8 1213.22 L1021.21 1213.22 L1020.62 1213.22 L1020.04 1213.22 L1019.45 1213.22 L1018.86 1213.22 L1018.28 1213.22 L1017.69 1213.22 L1017.11 1213.22 L1016.52 1213.22 L1015.93 1213.22 L1015.35 1213.22 L1014.76 1213.22 L1014.17 1213.22 L1013.59 1213.22 L1013 1213.22 L1012.41 1213.22 L1011.83 1213.22 L1011.24 1213.22 L1010.65 1213.22 L1010.07 1213.22 L1009.48 1213.22 L1008.9 1213.22 L1008.31 1213.22 L1007.72 1213.22 L1007.14 1213.22 L1006.55 1213.22 L1005.96 1213.22 L1005.38 1213.22 L1004.79 1213.22 L1004.2 1213.22 L1003.62 1213.22 L1003.03 1213.22 L1002.44 1213.22 L1001.86 1213.22 L1001.27 1213.22 L1000.69 1213.22 L1000.1 1213.22 L999.513 1213.22 L998.926 1213.22 L998.34 1213.22 L997.754 1213.22 L997.167 1213.22 L996.581 1213.22 L995.994 1213.22 L995.408 1213.22 L994.822 1213.22 L994.235 1213.22 L993.649 1213.22 L993.062 1213.22 L992.476 1213.22 L991.889 1213.22 L991.303 1213.22 L990.717 1213.22 L990.13 1213.22 L989.544 1213.22 L988.957 1213.22 L988.371 1213.22 L987.785 1213.22 L987.198 1213.22 L986.612 1213.22 L986.025 1213.22  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.58 986.612,1213.58 987.198,1213.58 987.785,1213.58 988.371,1213.58 988.957,1213.58 989.544,1213.58 990.13,1213.58 990.717,1213.58 991.303,1213.58 991.889,1213.58 992.476,1213.58 993.062,1213.58 993.649,1213.58 994.235,1213.58 994.822,1213.58 995.408,1213.58 995.994,1213.58 996.581,1213.58 997.167,1213.58 997.754,1213.58 998.34,1213.58 998.926,1213.58 999.513,1213.58 1000.1,1213.58 1000.69,1213.58 1001.27,1213.58 1001.86,1213.58 1002.44,1213.58 1003.03,1213.58 1003.62,1213.58 1004.2,1213.58 1004.79,1213.58 1005.38,1213.58 1005.96,1213.58 1006.55,1213.58 1007.14,1213.58 1007.72,1213.58 1008.31,1213.58 1008.9,1213.58 1009.48,1213.58 1010.07,1213.58 1010.65,1213.58 1011.24,1213.58 1011.83,1213.58 1012.41,1213.58 1013,1213.58 1013.59,1213.58 1014.17,1213.58 1014.76,1213.58 1015.35,1213.58 1015.93,1213.58 1016.52,1213.58 1017.11,1213.58 1017.69,1213.58 1018.28,1213.58 1018.86,1213.58 1019.45,1213.58 1020.04,1213.58 1020.62,1213.58 1021.21,1213.58 1021.8,1213.58 1022.38,1213.58 1022.97,1213.58 1023.56,1213.58 1024.14,1213.58 1024.73,1213.58 1025.32,1213.58 1025.9,1213.58 1026.49,1213.58 1027.07,1213.58 1027.66,1213.58 1028.25,1213.58 1028.83,1213.58 1029.42,1213.58 1030.01,1213.58 1030.59,1213.58 1031.18,1213.58 1031.77,1213.58 1032.35,1213.58 1032.94,1213.58 1033.52,1213.58 1034.11,1213.58 1034.7,1213.58 1035.28,1213.58 1035.87,1213.58 1036.46,1213.58 1037.04,1213.58 1037.63,1213.58 1038.22,1213.58 1038.8,1213.58 1039.39,1213.58 1039.98,1213.58 1040.56,1213.58 1041.15,1213.58 1041.73,1213.58 1042.32,1213.58 1042.91,1213.58 1043.49,1213.58 1044.08,1213.58 1044.67,1213.58 1045.25,1213.58 1045.84,1213.58 1046.43,1213.58 1047.01,1213.58 1047.6,1213.58 1048.19,1213.58 1048.77,1213.58 1049.36,1213.58 1049.94,1213.58 1050.53,1213.58 1051.12,1213.58 1051.7,1213.58 1052.29,1213.58 1052.88,1213.58 1053.46,1213.58 1054.05,1213.58 1054.64,1213.58 1055.22,1213.58 1055.81,1213.58 1056.39,1213.58 1056.98,1213.58 1057.57,1213.58 1058.15,1213.58 1058.74,1213.58 1059.33,1213.58 1059.91,1213.58 1060.5,1213.58 1061.09,1213.58 1061.67,1213.58 1062.26,1213.58 1062.85,1213.58 1063.43,1213.58 1064.02,1213.58 1064.6,1213.58 1065.19,1213.58 1065.78,1213.58 1066.36,1213.58 1066.95,1213.58 1067.54,1213.58 1068.12,1213.58 1068.71,1213.58 1069.3,1213.58 1069.88,1213.58 1070.47,1213.58 1071.06,1213.58 1071.64,1213.58 1072.23,1213.58 1072.81,1213.58 1073.4,1213.58 1073.99,1213.58 1074.57,1213.58 1075.16,1213.58 1075.75,1213.58 1076.33,1213.58 1076.92,1213.58 1077.51,1213.58 1078.09,1213.58 1078.68,1213.58 1079.26,1213.58 1079.85,1213.58 1080.44,1213.58 1081.02,1213.58 1081.61,1213.58 1082.2,1213.58 1082.78,1213.58 1083.37,1213.58 1083.96,1213.58 1084.54,1213.58 1085.13,1213.58 1085.72,1213.58 1086.3,1213.58 1086.89,1213.58 1087.47,1213.58 1088.06,1213.58 1088.65,1213.58 1089.23,1213.58 1089.82,1213.58 1090.41,1213.58 1090.99,1213.58 1091.58,1213.58 1092.17,1213.58 1092.75,1213.58 1093.34,1213.58 1093.93,1213.58 1094.51,1213.58 1095.1,1213.58 1095.68,1213.58 1096.27,1213.58 1096.86,1213.58 1097.44,1213.58 1098.03,1213.58 1098.62,1213.58 1099.2,1213.58 1099.79,1213.58 1100.38,1213.58 1100.96,1213.58 1101.55,1213.58 1102.14,1213.58 1102.72,1213.58 1103.31,1213.58 1103.89,1213.58 1104.48,1213.58 1105.07,1213.58 1105.65,1213.58 1106.24,1213.58 1106.83,1213.58 1107.41,1213.58 1108,1213.58 1108.59,1213.58 1109.17,1213.58 1109.76,1213.58 1110.34,1213.58 1110.93,1213.58 1111.52,1213.58 1112.1,1213.58 1112.69,1213.58 1113.28,1213.58 1113.86,1213.58 1114.45,1213.58 1115.04,1213.58 1115.62,1213.58 1116.21,1213.58 1116.8,1213.58 1117.38,1213.58 1117.97,1213.58 1118.55,1213.58 1119.14,1213.58 1119.73,1213.58 1120.31,1213.58 1120.9,1213.58 1121.49,1213.58 1122.07,1213.58 1122.66,1213.58 1123.25,1213.58 1123.83,1213.58 1124.42,1213.58 1125.01,1213.58 1125.59,1213.58 1126.18,1213.58 1126.76,1213.58 1127.35,1213.58 1127.94,1213.58 1128.52,1213.58 1129.11,1213.58 1129.7,1213.58 1130.28,1213.58 1130.87,1213.58 1131.46,1213.58 1132.04,1213.58 1132.63,1213.58 1133.21,1213.58 1133.8,1213.58 1134.39,1213.58 1134.97,1213.58 1135.56,1213.58 1136.15,1213.58 1136.73,1213.58 1137.32,1213.58 1137.91,1213.58 1138.49,1213.58 1139.08,1213.58 1139.67,1213.58 1140.25,1213.58 1140.84,1213.58 1141.42,1213.58 1142.01,1213.58 1142.6,1213.58 1143.18,1213.58 1143.77,1213.58 1144.36,1213.58 1144.94,1213.58 1145.53,1213.58 1146.12,1213.58 1146.7,1213.58 1147.29,1213.58 1147.88,1213.58 1148.46,1213.58 1149.05,1213.58 1149.63,1213.58 1150.22,1213.58 1150.81,1213.58 1151.39,1213.58 1151.98,1213.58 1152.57,1213.58 1153.15,1213.58 1153.74,1213.58 1154.33,1213.58 1154.91,1213.58 1155.5,1213.58 1156.09,1213.58 1156.67,1213.58 1157.26,1213.58 1157.84,1213.58 1158.43,1213.58 1159.02,1213.58 1159.6,1213.58 1160.19,1213.58 1160.78,1213.58 1161.36,1213.58 1161.95,1213.58 1162.54,1213.58 1163.12,1213.58 1163.71,1213.58 1164.29,1213.58 1164.88,1213.58 1165.47,1213.58 1166.05,1213.58 1166.64,1213.58 1167.23,1213.58 1167.81,1213.58 1168.4,1213.58 1168.99,1213.58 1169.57,1213.58 1170.16,1213.58 1170.75,1213.58 1171.33,1213.58 1171.92,1213.58 1172.5,1213.58 1173.09,1213.58 1173.68,1213.58 1174.26,1213.58 1174.85,1213.58 1175.44,1213.58 1176.02,1213.58 1176.61,1213.58 1177.2,1213.58 1177.78,1213.58 1178.37,1213.58 1178.96,1213.58 1179.54,1213.58 1180.13,1213.58 1180.71,1213.58 1181.3,1213.58 1181.89,1213.58 1182.47,1213.58 1183.06,1213.58 1183.65,1213.58 1184.23,1213.58 1184.82,1213.58 1185.41,1213.58 1185.99,1213.58 1186.58,1213.58 1187.16,1213.58 1187.75,1213.58 1188.34,1213.58 1188.92,1213.58 1189.51,1213.58 1190.1,1213.58 1190.68,1213.58 1191.27,1213.58 1191.86,1213.58 1192.44,1213.58 1193.03,1213.58 1193.62,1213.58 1194.2,1213.58 1194.79,1213.58 1195.37,1213.58 1195.96,1213.58 1196.55,1213.58 1197.13,1213.58 1197.72,1213.58 1198.31,1213.58 1198.89,1213.58 1199.48,1213.58 1200.07,1213.58 1200.65,1213.58 1201.24,1213.58 1201.83,1213.58 1202.41,1213.58 1203,1213.58 1203.58,1213.58 1204.17,1213.58 1204.76,1213.58 1205.34,1213.58 1205.93,1213.58 1206.52,1213.58 1207.1,1213.58 1207.69,1213.58 1208.28,1213.58 1208.86,1213.58 1209.45,1213.58 1210.03,1213.58 1210.62,1213.58 1211.21,1213.58 1211.79,1213.58 1212.38,1213.58 1212.97,1213.58 1213.55,1213.58 1214.14,1213.58 1214.73,1213.58 1215.31,1213.58 1215.9,1213.58 1216.49,1213.58 1217.07,1213.58 1217.66,1213.58 1218.24,1213.58 1218.83,1213.58 1219.42,1213.58 1220,1213.58 1220.59,1213.58 1221.18,1213.58 1221.76,1213.58 1222.35,1213.58 1222.94,1213.58 1223.52,1213.58 1224.11,1213.58 1224.7,1213.58 1225.28,1213.58 1225.87,1213.58 1226.45,1213.58 1227.04,1213.58 1227.63,1213.58 1228.21,1213.58 1228.8,1213.58 1229.39,1213.58 1229.97,1213.58 1230.56,1213.58 1231.15,1213.58 1231.73,1213.58 1232.32,1213.58 1232.91,1213.58 1233.49,1213.58 1234.08,1213.58 1234.66,1213.58 1235.25,1213.58 1235.84,1213.58 1236.42,1213.58 1237.01,1213.58 1237.6,1213.58 1238.18,1213.58 1238.77,1213.58 1239.36,1213.58 1239.94,1213.58 1240.53,1213.58 1241.11,1213.58 1241.7,1213.58 1242.29,1213.58 1242.87,1213.58 1243.46,1213.58 1244.05,1213.58 1244.63,1213.58 1245.22,1213.58 1245.81,1213.58 1246.39,1213.58 1246.98,1213.58 1247.57,1213.58 1248.15,1213.58 1248.74,1213.58 1249.32,1213.58 1249.91,1213.58 1250.5,1213.58 1251.08,1213.58 1251.67,1213.58 1252.26,1213.58 1252.84,1213.58 1253.43,1213.58 1254.02,1213.58 1254.6,1213.58 1255.19,1213.58 1255.78,1213.58 1256.36,1213.58 1256.95,1213.58 1257.53,1213.58 1258.12,1213.58 1258.71,1213.58 1259.29,1213.58 1259.88,1213.58 1260.47,1213.58 1261.05,1213.58 1261.64,1213.58 1262.23,1213.58 1262.81,1213.58 1263.4,1213.58 1263.98,1213.58 1264.57,1213.58 1265.16,1213.58 1265.74,1213.58 1266.33,1213.58 1266.92,1213.58 1267.5,1213.58 1268.09,1213.58 1268.68,1213.58 1269.26,1213.58 1269.85,1213.58 1270.44,1213.58 1271.02,1213.58 1271.61,1213.58 1272.19,1213.58 1272.78,1213.58 1273.37,1213.58 1273.95,1213.58 1274.54,1213.58 1275.13,1213.58 1275.71,1213.58 1276.3,1213.58 1276.89,1213.58 1277.47,1213.58 1278.06,1213.58 1278.65,1213.58 1279.23,1213.58 1279.82,1213.58 1280.4,1213.58 1280.99,1213.58 1281.58,1213.58 1282.16,1213.58 1282.75,1213.58 1283.34,1213.58 1283.92,1213.58 1284.51,1213.58 1285.1,1213.58 1285.68,1213.58 1286.27,1213.58 1286.86,1213.58 1287.44,1213.58 1288.03,1213.58 1288.61,1213.58 1289.2,1213.58 1289.79,1213.58 1290.37,1213.58 1290.96,1213.58 1291.55,1213.58 1292.13,1213.58 1292.72,1213.58 1293.31,1213.58 1293.89,1213.58 1294.48,1213.58 1295.06,1213.58 1295.65,1213.58 1296.24,1213.58 1296.82,1213.58 1297.41,1213.58 1298,1213.58 1298.58,1213.58 1299.17,1213.58 1299.76,1213.58 1300.34,1213.58 1300.93,1213.58 1301.52,1213.58 1302.1,1213.58 1302.69,1213.58 1303.27,1213.58 1303.86,1213.58 1304.45,1213.58 1305.03,1213.58 1305.62,1213.58 1306.21,1213.58 1306.79,1213.58 1307.38,1213.58 1307.97,1213.58 1308.55,1213.58 1309.14,1213.58 1309.73,1213.58 1310.31,1213.58 1310.9,1213.58 1311.48,1213.58 1312.07,1213.58 1312.66,1213.58 1313.24,1213.58 1313.83,1213.58 1314.42,1213.58 1315,1213.58 1315.59,1213.58 1316.18,1213.58 1316.76,1213.58 1317.35,1213.58 1317.93,1213.58 1318.52,1213.58 1319.11,1213.58 1319.69,1213.58 1320.28,1213.58 1320.87,1213.58 1321.45,1213.58 1322.04,1213.58 1322.63,1213.58 1323.21,1213.58 1323.8,1213.58 1324.39,1213.58 1324.97,1213.58 1325.56,1213.58 1326.14,1213.58 1326.73,1213.58 1327.32,1213.58 1327.9,1213.58 1328.49,1213.58 1329.08,1213.58 1329.66,1213.58 1330.25,1213.58 1330.84,1213.58 1331.42,1213.58 1332.01,1213.58 1332.6,1213.58 1333.18,1213.58 1333.77,1213.58 1334.35,1213.58 1334.94,1213.58 1335.53,1213.58 1336.11,1213.58 1336.7,1213.58 1337.29,1213.58 1337.87,1213.58 1338.46,1213.58 1339.05,1213.58 1339.63,1213.58 1340.22,1213.58 1340.8,1213.58 1341.39,1213.58 1341.98,1213.58 1342.56,1213.58 1343.15,1213.58 1343.74,1213.58 1344.32,1213.58 1344.91,1213.58 1345.5,1213.58 1346.08,1213.58 1346.67,1213.58 1347.26,1213.58 1347.84,1213.58 1348.43,1213.58 1349.01,1213.58 1349.6,1213.58 1350.19,1213.58 1350.77,1213.58 1351.36,1213.58 1351.95,1213.58 1352.53,1213.58 1353.12,1213.58 1353.71,1213.58 1354.29,1213.58 1354.88,1213.58 1355.47,1213.58 1356.05,1213.58 1356.64,1213.58 1357.22,1213.58 1357.81,1213.58 1358.4,1213.58 1358.98,1213.58 1359.57,1213.58 1360.16,1213.58 1360.74,1213.58 1361.33,1213.58 1361.92,1213.58 1362.5,1213.58 1363.09,1213.58 1363.68,1213.58 1364.26,1213.58 1364.85,1213.58 1365.43,1213.58 1366.02,1213.58 1366.61,1213.58 1367.19,1213.58 1367.78,1213.58 1368.37,1213.58 1368.95,1213.58 1369.54,1213.58 1370.13,1213.58 1370.71,1213.58 1371.3,1213.58 1371.88,1213.58 1372.47,1213.58 1373.06,1213.58 1373.64,1213.58 1374.23,1213.58 1374.82,1213.58 1375.4,1213.58 1375.99,1213.58 1376.58,1213.58 1377.16,1213.58 1377.75,1213.58 1378.34,1213.58 1378.92,1213.58 1379.51,1213.58 1380.09,1213.58 1380.68,1213.58 1381.27,1213.58 1381.85,1213.58 1382.44,1213.58 1383.03,1213.58 1383.61,1213.58 1384.2,1213.58 1384.79,1213.58 1385.37,1213.58 1385.96,1213.58 1386.55,1213.58 1387.13,1213.58 1387.72,1213.58 1388.3,1213.58 1388.89,1213.58 1389.48,1213.58 1390.06,1213.58 1390.65,1213.58 1391.24,1213.58 1391.82,1213.58 1392.41,1213.58 1393,1213.58 1393.58,1213.58 1394.17,1213.58 1394.75,1213.58 1395.34,1213.58 1395.93,1213.58 1396.51,1213.58 1397.1,1213.58 1397.69,1213.58 1398.27,1213.58 1398.86,1213.58 1399.45,1213.58 1400.03,1213.58 1400.62,1213.58 1401.21,1213.58 1401.79,1213.58 1402.38,1213.58 1402.96,1213.58 1403.55,1213.58 1404.14,1213.58 1404.72,1213.58 1405.31,1213.58 1405.9,1213.58 1406.48,1213.58 1407.07,1213.58 1407.66,1213.58 1408.24,1213.58 1408.83,1213.58 1409.42,1213.58 1410,1213.58 1410.59,1213.58 1411.17,1213.58 1411.76,1213.58 1412.35,1213.58 1412.93,1213.58 1413.52,1213.58 1414.11,1213.58 1414.69,1213.58 1415.28,1213.58 1415.87,1213.58 1416.45,1213.58 1417.04,1213.58 1417.63,1213.58 1418.21,1213.58 1418.8,1213.58 1419.38,1213.58 1419.97,1213.58 1420.56,1213.58 1421.14,1213.58 1421.73,1213.58 1422.32,1213.58 1422.9,1213.58 1423.49,1213.58 1424.08,1213.58 1424.66,1213.58 1425.25,1213.58 1425.83,1213.58 1426.42,1213.58 1427.01,1213.58 1427.59,1213.58 1428.18,1213.58 1428.77,1213.58 1429.35,1213.58 1429.94,1213.58 1430.53,1213.58 1431.11,1213.58 1431.7,1213.58 1432.29,1213.58 1432.87,1213.58 1433.46,1213.58 1434.04,1213.58 1434.63,1213.58 1435.22,1213.58 1435.8,1213.58 1436.39,1213.58 1436.98,1213.58 1437.56,1213.58 1438.15,1213.58 1438.74,1213.58 1439.32,1213.58 1439.91,1213.58 1440.5,1213.58 1441.08,1213.58 1441.67,1213.58 1442.25,1213.58 1442.84,1213.58 1443.43,1213.58 1444.01,1213.58 1444.6,1213.58 1445.19,1213.58 1445.77,1213.58 1446.36,1213.58 1446.95,1213.58 1447.53,1213.58 1448.12,1213.58 1448.7,1213.58 1449.29,1213.58 1449.88,1213.58 1450.46,1213.58 1451.05,1213.58 1451.64,1213.58 1452.22,1213.58 1452.81,1213.58 1453.4,1213.58 1453.98,1213.58 1454.57,1213.58 1455.16,1213.58 1455.74,1213.58 1456.33,1213.58 1456.91,1213.58 1457.5,1213.58 1458.09,1213.58 1458.67,1213.58 1459.26,1213.58 1459.85,1213.58 1460.43,1213.58 1461.02,1213.58 1461.61,1213.58 1462.19,1213.58 1462.78,1213.58 1463.37,1213.58 1463.95,1213.58 1464.54,1213.58 1465.12,1213.58 1465.71,1213.58 1466.3,1213.58 1466.88,1213.58 1467.47,1213.58 1468.06,1213.58 1468.64,1213.58 1469.23,1213.58 1469.82,1213.58 1470.4,1213.58 1470.99,1213.58 1471.57,1213.58 1472.16,1213.58 1472.75,1213.58 1473.33,1213.58 1473.92,1213.58 1474.51,1213.58 1475.09,1213.58 1475.68,1213.58 1476.27,1213.58 1476.85,1213.58 1477.44,1213.58 1478.03,1213.58 1478.61,1213.58 1479.2,1213.58 1479.78,1213.58 1480.37,1213.58 1480.96,1213.58 1481.54,1213.58 1482.13,1213.58 1482.72,1213.58 1483.3,1213.58 1483.89,1213.58 1484.48,1213.58 1485.06,1213.58 1485.65,1213.58 1486.24,1213.58 1486.82,1213.58 1487.41,1213.58 1487.99,1213.58 1488.58,1213.58 1489.17,1213.58 1489.75,1213.58 1490.34,1213.58 1490.93,1213.58 1491.51,1213.58 1492.1,1213.58 1492.69,1213.58 1493.27,1213.58 1493.86,1213.58 1494.45,1213.58 1495.03,1213.58 1495.62,1213.58 1496.2,1213.58 1496.79,1213.58 1497.38,1213.58 1497.96,1213.58 1498.55,1213.58 1499.14,1213.58 1499.72,1213.58 1500.31,1213.58 1500.9,1213.58 1501.48,1213.58 1502.07,1213.58 1502.65,1213.58 1503.24,1213.58 1503.83,1213.58 1504.41,1213.58 1505,1213.58 1505.59,1213.58 1506.17,1213.58 1506.76,1213.58 1507.35,1213.58 1507.93,1213.58 1508.52,1213.58 1509.11,1213.58 1509.69,1213.58 1510.28,1213.58 1510.86,1213.58 1511.45,1213.58 1512.04,1213.58 1512.62,1213.58 1513.21,1213.58 1513.8,1213.58 1514.38,1213.58 1514.97,1213.58 1515.56,1213.58 1516.14,1213.58 1516.73,1213.58 1517.32,1213.58 1517.9,1213.58 1518.49,1213.58 1519.07,1213.58 1519.66,1213.58 1520.25,1213.58 1520.83,1213.58 1521.42,1213.58 1522.01,1213.58 1522.59,1213.58 1523.18,1213.58 1523.77,1213.58 1524.35,1213.58 1524.94,1213.58 1525.52,1213.58 1526.11,1213.58 1526.7,1213.58 1527.28,1213.58 1527.87,1213.58 1528.46,1213.58 1529.04,1213.58 1529.63,1213.58 1530.22,1213.58 1530.8,1213.58 1531.39,1213.58 1531.98,1213.58 1532.56,1213.58 1533.15,1213.58 1533.73,1213.58 1534.32,1213.58 1534.91,1213.58 1535.49,1213.58 1536.08,1213.58 1536.67,1213.58 1537.25,1213.58 1537.84,1213.58 1538.43,1213.58 1539.01,1213.58 1539.6,1213.58 1540.19,1213.58 1540.77,1213.58 1541.36,1213.58 1541.94,1213.58 1542.53,1213.58 1543.12,1213.58 1543.7,1213.58 1544.29,1213.58 1544.88,1213.58 1545.46,1213.58 1546.05,1213.58 1546.64,1213.58 1547.22,1213.58 1547.81,1213.58 1548.4,1213.58 1548.98,1213.58 1549.57,1213.58 1550.15,1213.58 1550.74,1213.58 1551.33,1213.58 1551.91,1213.58 1552.5,1213.58 1553.09,1213.58 1553.67,1213.58 1554.26,1213.58 1554.85,1213.58 1555.43,1213.58 1556.02,1213.58 1556.6,1213.58 1557.19,1213.58 1557.78,1213.58 1558.36,1213.58 1558.95,1213.58 1559.54,1213.58 1560.12,1213.58 1560.71,1213.58 1561.3,1213.58 1561.88,1213.58 1562.47,1213.58 1563.06,1213.58 1563.64,1213.58 1564.23,1213.58 1564.81,1213.58 1565.4,1213.58 1565.99,1213.58 1566.57,1213.58 1567.16,1213.58 1567.75,1213.58 1568.33,1213.58 1568.92,1213.58 1569.51,1213.58 1570.09,1213.58 1570.68,1213.58 1571.27,1213.58 1571.85,1213.58 1572.44,1213.58 1573.02,1213.58 1573.61,1213.58 1574.2,1213.58 1574.78,1213.58 1575.37,1213.58 1575.96,1213.58 1576.54,1213.58 1577.13,1213.58 1577.72,1213.58 1578.3,1213.58 1578.89,1213.58 1579.47,1213.58 1580.06,1213.58 1580.65,1213.58 1581.23,1213.58 1581.82,1213.58 1582.41,1213.58 1582.99,1213.58 1583.58,1213.58 1584.17,1213.58 1584.75,1213.58 1585.34,1213.58 1585.93,1213.58 1586.51,1213.58 1587.1,1213.58 1587.68,1213.58 1588.27,1213.58 1588.86,1213.58 1589.44,1213.58 1590.03,1213.58 1590.62,1213.58 1591.2,1213.58 1591.79,1213.58 1592.38,1213.58 1592.96,1213.58 1593.55,1213.58 1594.14,1213.58 1594.72,1213.58 1595.31,1213.58 1595.89,1213.58 1596.48,1213.58 1597.07,1213.58 1597.65,1213.58 1598.24,1213.58 1598.83,1213.58 1599.41,1213.58 1600,1213.58 1600.59,1213.58 1601.17,1213.58 1601.76,1213.58 1602.34,1213.58 1602.93,1213.58 1603.52,1213.58 1604.1,1213.58 1604.69,1213.58 1605.28,1213.58 1605.86,1213.58 1606.45,1213.58 1607.04,1213.58 1607.62,1213.58 1608.21,1213.58 1608.8,1213.58 1609.38,1213.58 1609.97,1213.58 1610.55,1213.58 1611.14,1213.58 1611.73,1213.58 1612.31,1213.58 1612.9,1213.58 1613.49,1213.58 1614.07,1213.58 1614.66,1213.58 1615.25,1213.58 1615.83,1213.58 1616.42,1213.58 1617.01,1213.58 1617.59,1213.58 1618.18,1213.58 1618.76,1213.58 1619.35,1213.58 1619.94,1213.58 1620.52,1213.58 1621.11,1213.58 1621.7,1213.58 1622.28,1213.58 1622.87,1213.58 1623.46,1213.58 1624.04,1213.58 1624.63,1213.58 1625.22,1213.58 1625.8,1213.58 1626.39,1213.58 1626.97,1213.58 1627.56,1213.58 1628.15,1213.58 1628.73,1213.58 1629.32,1213.58 1629.91,1213.58 1630.49,1213.58 1631.08,1213.58 1631.67,1213.58 1632.25,1213.58 1632.84,1213.58 1633.42,1213.58 1634.01,1213.58 1634.6,1213.58 1635.18,1213.58 1635.77,1213.58 1636.36,1213.58 1636.94,1213.58 1637.53,1213.58 1638.12,1213.58 1638.7,1213.58 1639.29,1213.58 1639.88,1213.58 1640.46,1213.58 1641.05,1213.58 1641.63,1213.58 1642.22,1213.58 1642.81,1213.58 1643.39,1213.58 1643.98,1213.58 1644.57,1213.58 1645.15,1213.58 1645.74,1213.58 1646.33,1213.58 1646.91,1213.58 1647.5,1213.58 1648.09,1213.58 1648.67,1213.58 1649.26,1213.58 1649.84,1213.58 1650.43,1213.58 1651.02,1213.58 1651.6,1213.58 1652.19,1213.58 1652.78,1213.58 1653.36,1213.58 1653.95,1213.58 1654.54,1213.58 1655.12,1213.58 1655.71,1213.58 1656.29,1213.58 1656.88,1213.58 1657.47,1213.58 1658.05,1213.58 1658.64,1213.58 1659.23,1213.58 1659.81,1213.58 1660.4,1213.58 1660.99,1213.58 1661.57,1213.58 1662.16,1213.58 1662.75,1213.58 1663.33,1213.58 1663.92,1213.58 1664.5,1213.58 1665.09,1213.58 1665.68,1213.58 1666.26,1213.58 1666.85,1213.58 1667.44,1213.58 1668.02,1213.58 1668.61,1213.58 1669.2,1213.58 1669.78,1213.58 1670.37,1213.58 1670.96,1213.58 1671.54,1213.58 1672.13,1213.58 1672.71,1213.58 1673.3,1213.58 1673.89,1213.58 1674.47,1213.58 1675.06,1213.58 1675.65,1213.58 1676.23,1213.58 1676.82,1213.58 1677.41,1213.58 1677.99,1213.58 1678.58,1213.58 1679.17,1213.58 1679.75,1213.58 1680.34,1213.58 1680.92,1213.58 1681.51,1213.58 1682.1,1213.58 1682.68,1213.58 1683.27,1213.58 1683.86,1213.58 1684.44,1213.58 1685.03,1213.58 1685.62,1213.58 1686.2,1213.58 1686.79,1213.58 1687.37,1213.58 1687.96,1213.58 1688.55,1213.58 1689.13,1213.58 1689.72,1213.58 1690.31,1213.58 1690.89,1213.58 1691.48,1213.58 1692.07,1213.58 1692.65,1213.58 1693.24,1213.58 1693.83,1213.58 1694.41,1213.58 1695,1213.58 1695.58,1213.58 1696.17,1213.58 1696.76,1213.58 1697.34,1213.58 1697.93,1213.58 1698.52,1213.58 1699.1,1213.58 1699.69,1213.58 1700.28,1213.58 1700.86,1213.58 1701.45,1213.58 1702.04,1213.58 1702.62,1213.58 1703.21,1213.58 1703.79,1213.58 1704.38,1213.58 1704.97,1213.58 1705.55,1213.58 1706.14,1213.58 1706.73,1213.58 1707.31,1213.58 1707.9,1213.58 1708.49,1213.58 1709.07,1213.58 1709.66,1213.58 1710.24,1213.58 1710.83,1213.58 1711.42,1213.58 1712,1213.58 1712.59,1213.58 1713.18,1213.58 1713.76,1213.58 1714.35,1213.58 1714.94,1213.58 1715.52,1213.58 1716.11,1213.58 1716.7,1213.58 1717.28,1213.58 1717.87,1213.58 1718.45,1213.58 1719.04,1213.58 1719.63,1213.58 1720.21,1213.58 1720.8,1213.58 1721.39,1213.58 1721.97,1213.58 1722.56,1213.58 1723.15,1213.58 1723.73,1213.58 1724.32,1213.58 1724.91,1213.58 1725.49,1213.58 1726.08,1213.58 1726.66,1213.58 1727.25,1213.58 1727.84,1213.58 1728.42,1213.58 1729.01,1213.58 1729.6,1213.58 1730.18,1213.58 1730.77,1213.58 1731.36,1213.58 1731.94,1213.58 1732.53,1213.58 1733.11,1213.58 1733.7,1213.58 1734.29,1213.58 1734.87,1213.58 1735.46,1213.58 1736.05,1213.58 1736.63,1213.58 1737.22,1213.58 1737.81,1213.58 1738.39,1213.58 1738.98,1213.58 1739.57,1213.58 1740.15,1213.58 1740.74,1213.58 1741.32,1213.58 1741.91,1213.58 1742.5,1213.58 1743.08,1213.58 1743.67,1213.58 1744.26,1213.58 1744.84,1213.58 1745.43,1213.58 1746.02,1213.58 1746.6,1213.58 1747.19,1213.58 1747.78,1213.58 1748.36,1213.58 1748.95,1213.58 1749.53,1213.58 1750.12,1213.58 1750.71,1213.58 1751.29,1213.58 1751.88,1213.58 1752.47,1213.58 1753.05,1213.58 1753.64,1213.58 1754.23,1213.58 1754.81,1213.58 1755.4,1213.58 1755.99,1213.58 1756.57,1213.58 1757.16,1213.58 1757.74,1213.58 1758.33,1213.58 1758.92,1213.58 1759.5,1213.58 1760.09,1213.58 1760.68,1213.58 1761.26,1213.58 1761.85,1213.58 1762.44,1213.58 1763.02,1213.58 1763.61,1213.58 1764.19,1213.58 1764.78,1213.58 1765.37,1213.58 1765.95,1213.58 1766.54,1213.58 1767.13,1213.58 1767.71,1213.58 1768.3,1213.58 1768.89,1213.58 1769.47,1213.58 1770.06,1213.58 1770.65,1213.58 1771.23,1213.58 1771.82,1213.58 1772.4,1213.58 1772.99,1213.58 1773.58,1213.58 1774.16,1213.58 1774.75,1213.58 1775.34,1213.58 1775.92,1213.58 1776.51,1213.58 1777.1,1213.58 1777.68,1213.58 1778.27,1213.58 1778.86,1213.58 1779.44,1213.58 1780.03,1213.58 1780.61,1213.58 1781.2,1213.58 1781.79,1213.58 1782.37,1213.58 1782.96,1213.58 1783.55,1213.58 1784.13,1213.58 1784.72,1213.58 1785.31,1213.58 1785.89,1213.58 1786.48,1213.58 1787.06,1213.58 1787.65,1213.58 1788.24,1213.58 1788.82,1213.58 1789.41,1213.58 1790,1213.58 1790.58,1213.58 1791.17,1213.58 1791.76,1213.58 1792.34,1213.58 1792.93,1213.58 1793.52,1213.58 1794.1,1213.58 1794.69,1213.58 1795.27,1213.58 1795.86,1213.58 1796.45,1213.58 1797.03,1213.58 1797.62,1213.58 1798.21,1213.58 1798.79,1213.58 1799.38,1213.58 1799.97,1213.58 1800.55,1213.58 1801.14,1213.58 1801.73,1213.58 1802.31,1213.58 1802.9,1213.58 1803.48,1213.58 1804.07,1213.58 1804.66,1213.58 1805.24,1213.58 1805.83,1213.58 1806.42,1213.58 1807,1213.58 1807.59,1213.58 1808.18,1213.58 1808.76,1213.58 1809.35,1213.58 1809.94,1213.58 1810.52,1213.58 1811.11,1213.58 1811.69,1213.58 1812.28,1213.58 1812.87,1213.58 1813.45,1213.58 1814.04,1213.58 1814.63,1213.58 1815.21,1213.58 1815.8,1213.58 1816.39,1213.58 1816.97,1213.58 1817.56,1213.58 1818.14,1213.58 1818.73,1213.58 1819.32,1213.58 1819.9,1213.58 1820.49,1213.58 1821.08,1213.58 1821.66,1213.58 1822.25,1213.58 1822.84,1213.58 1823.42,1213.58 1824.01,1213.58 1824.6,1213.58 1825.18,1213.58 1825.77,1213.58 1826.35,1213.58 1826.94,1213.58 1827.53,1213.58 1828.11,1213.58 1828.7,1213.58 1829.29,1213.58 1829.87,1213.58 1830.46,1213.58 1831.05,1213.58 1831.63,1213.58 1832.22,1213.58 1832.81,1213.58 1833.39,1213.58 1833.98,1213.58 1834.56,1213.58 1835.15,1213.58 1835.74,1213.58 1836.32,1213.58 1836.91,1213.58 1837.5,1213.58 1838.08,1213.58 1838.67,1213.58 1839.26,1213.58 1839.84,1213.58 1840.43,1213.58 1841.01,1213.58 1841.6,1213.58 1842.19,1213.58 1842.77,1213.58 1843.36,1213.58 1843.95,1213.58 1844.53,1213.58 1845.12,1213.58 1845.71,1213.58 1846.29,1213.58 1846.88,1213.58 1847.47,1213.58 1848.05,1213.58 1848.64,1213.58 1849.22,1213.58 1849.81,1213.58 1850.4,1213.58 1850.98,1213.58 1851.57,1213.58 1852.16,1213.58 1852.74,1213.58 1853.33,1213.58 1853.92,1213.58 1854.5,1213.58 1855.09,1213.58 1855.68,1213.58 1856.26,1213.58 1856.85,1213.58 1857.43,1213.58 1858.02,1213.58 1858.61,1213.58 1859.19,1213.58 1859.78,1213.58 1860.37,1213.58 1860.95,1213.58 1861.54,1213.58 1862.13,1213.58 1862.71,1213.58 1863.3,1213.58 1863.88,1213.58 1864.47,1213.58 1865.06,1213.58 1865.64,1213.58 1866.23,1213.58 1866.82,1213.58 1867.4,1213.58 1867.99,1213.58 1868.58,1213.58 1869.16,1213.58 1869.75,1213.58 1870.34,1213.58 1870.92,1213.58 1871.51,1213.58 1872.09,1213.58 1872.68,1213.58 1873.27,1213.58 1873.85,1213.58 1874.44,1213.58 1875.03,1213.58 1875.61,1213.58 1876.2,1213.58 1876.79,1213.58 1877.37,1213.58 1877.96,1213.58 1878.55,1213.58 1879.13,1213.58 1879.72,1213.58 1880.3,1213.58 1880.89,1213.58 1881.48,1213.58 1882.06,1213.58 1882.65,1213.58 1883.24,1213.58 1883.82,1213.58 1884.41,1213.58 1885,1213.58 1885.58,1213.58 1886.17,1213.58 1886.76,1213.58 1887.34,1213.58 1887.93,1213.58 1888.51,1213.58 1889.1,1213.58 1889.69,1213.58 1890.27,1213.58 1890.86,1213.58 1891.45,1213.58 1892.03,1213.58 1892.62,1213.58 1893.21,1213.58 1893.79,1213.58 1894.38,1213.58 1894.96,1213.58 1895.55,1213.58 1896.14,1213.58 1896.72,1213.58 1897.31,1213.58 1897.9,1213.58 1898.48,1213.58 1899.07,1213.58 1899.66,1213.58 1900.24,1213.58 1900.83,1213.58 1901.42,1213.58 1902,1213.58 1902.59,1213.58 1903.17,1213.58 1903.76,1213.58 1904.35,1213.58 1904.93,1213.58 1905.52,1213.58 1906.11,1213.58 1906.69,1213.58 1907.28,1213.58 1907.87,1213.58 1908.45,1213.58 1909.04,1213.58 1909.63,1213.58 1910.21,1213.58 1910.8,1213.58 1911.38,1213.58 1911.97,1213.58 1912.56,1213.58 1913.14,1213.58 1913.73,1213.58 1914.32,1213.58 1914.9,1213.58 1915.49,1213.58 1916.08,1213.58 1916.66,1213.58 1917.25,1213.58 1917.83,1213.58 1918.42,1213.58 1919.01,1213.58 1919.59,1213.58 1920.18,1213.58 1920.77,1213.58 1921.35,1213.58 1921.94,1213.58 1922.53,1213.58 1923.11,1213.58 1923.7,1213.58 1924.29,1213.58 1924.87,1213.58 1925.46,1213.58 1926.04,1213.58 1926.63,1213.58 1927.22,1213.58 1927.8,1213.58 1928.39,1213.58 1928.98,1213.58 1929.56,1213.58 1930.15,1213.58 1930.74,1213.58 1931.32,1213.58 1931.91,1213.58 1932.5,1213.58 1933.08,1213.58 1933.67,1213.58 1934.25,1213.58 1934.84,1213.58 1935.43,1213.58 1936.01,1213.58 1936.6,1213.58 1937.19,1213.58 1937.77,1213.58 1938.36,1213.58 1938.95,1213.58 1939.53,1213.58 1940.12,1213.58 1940.71,1213.58 1941.29,1213.58 1941.88,1213.58 1942.46,1213.58 1943.05,1213.58 1943.64,1213.58 1944.22,1213.58 1944.81,1213.58 1945.4,1213.58 1945.98,1213.58 1946.57,1213.58 1947.16,1213.58 1947.74,1213.58 1948.33,1213.58 1948.91,1213.58 1949.5,1213.58 1950.09,1213.58 1950.67,1213.58 1951.26,1213.58 1951.85,1213.58 1952.43,1213.58 1953.02,1213.58 1953.61,1213.58 1954.19,1213.58 1954.78,1213.58 1955.37,1213.58 1955.95,1213.58 1956.54,1213.58 1957.12,1213.58 1957.71,1213.58 1958.3,1213.58 1958.88,1213.58 1959.47,1213.58 1960.06,1213.58 1960.64,1213.58 1961.23,1213.58 1961.82,1213.58 1962.4,1213.58 1962.99,1213.58 1963.58,1213.58 1964.16,1213.58 1964.75,1213.58 1965.33,1213.58 1965.92,1213.58 1966.51,1213.58 1967.09,1213.58 1967.68,1213.58 1968.27,1213.58 1968.85,1213.58 1969.44,1213.58 1970.03,1213.58 1970.61,1213.58 1971.2,1213.58 1971.78,1213.58 1972.37,1213.58 1972.96,1213.58 1973.54,1213.58 1974.13,1213.58 1974.72,1213.58 1975.3,1213.58 1975.89,1213.58 1976.48,1213.58 1977.06,1213.58 1977.65,1213.58 1978.24,1213.58 1978.82,1213.58 1979.41,1213.58 1979.99,1213.58 1980.58,1213.58 1981.17,1213.58 1981.75,1213.58 1982.34,1213.58 1982.93,1213.58 1983.51,1213.58 1984.1,1213.58 1984.69,1213.58 1985.27,1213.58 1985.86,1213.58 1986.45,1213.58 1987.03,1213.58 1987.62,1213.58 1988.2,1213.58 1988.79,1213.58 1989.38,1213.58 1989.96,1213.58 1990.55,1213.58 1991.14,1213.58 1991.72,1213.58 1992.31,1213.58 1992.9,1213.58 1993.48,1213.58 1994.07,1213.58 1994.65,1213.58 1995.24,1213.58 1995.83,1213.58 1996.41,1213.58 1997,1213.58 1997.59,1213.58 1998.17,1213.58 1998.76,1213.58 1999.35,1213.58 1999.93,1213.58 2000.52,1213.58 2001.11,1213.58 2001.69,1213.58 2002.28,1213.58 2002.86,1213.58 2003.45,1213.58 2004.04,1213.58 2004.62,1213.58 2005.21,1213.58 2005.8,1213.58 2006.38,1213.58 2006.97,1213.58 2007.56,1213.58 2008.14,1213.58 2008.73,1213.58 2009.32,1213.58 2009.9,1213.58 2010.49,1213.58 2011.07,1213.58 2011.66,1213.58 2012.25,1213.58 2012.83,1213.58 2013.42,1213.58 2014.01,1213.58 2014.59,1213.58 2015.18,1213.58 2015.77,1213.58 2016.35,1213.58 2016.94,1213.58 2017.53,1213.58 2018.11,1213.58 2018.7,1213.58 2019.28,1213.58 2019.87,1213.58 2020.46,1213.58 2021.04,1213.58 2021.63,1213.58 2022.22,1213.58 2022.8,1213.58 2023.39,1213.58 2023.98,1213.58 2024.56,1213.58 2025.15,1213.58 2025.73,1213.58 2026.32,1213.58 2026.91,1213.58 2027.49,1213.58 2028.08,1213.58 2028.67,1213.58 2029.25,1213.58 2029.84,1213.58 2030.43,1213.58 2031.01,1213.58 2031.6,1213.58 2032.19,1213.58 2032.77,1213.58 2033.36,1213.58 2033.94,1213.58 2034.53,1213.58 2035.12,1213.58 2035.7,1213.58 2036.29,1213.58 2036.88,1213.58 2037.46,1213.58 2038.05,1213.58 2038.64,1213.58 2039.22,1213.58 2039.81,1213.58 2040.4,1213.58 2040.98,1213.58 2041.57,1213.58 2042.15,1213.58 2042.74,1213.58 2043.33,1213.58 2043.91,1213.58 2044.5,1213.58 2045.09,1213.58 2045.67,1213.58 2046.26,1213.58 2046.85,1213.58 2047.43,1213.58 2048.02,1213.58 2048.6,1213.58 2049.19,1213.58 2049.78,1213.58 2050.36,1213.58 2050.95,1213.58 2051.54,1213.58 2052.12,1213.58 2052.71,1213.58 2053.3,1213.58 2053.88,1213.58 2054.47,1213.58 2055.06,1213.58 2055.64,1213.58 2056.23,1213.58 2056.81,1213.58 2057.4,1213.58 2057.99,1213.58 2058.57,1213.58 2059.16,1213.58 2059.75,1213.58 2060.33,1213.58 2060.92,1213.58 2061.51,1213.58 2062.09,1213.58 2062.68,1213.58 2063.27,1213.58 2063.85,1213.58 2064.44,1213.58 2065.02,1213.58 2065.61,1213.58 2066.2,1213.58 2066.78,1213.58 2067.37,1213.58 2067.96,1213.58 2068.54,1213.58 2069.13,1213.58 2069.72,1213.58 2070.3,1213.58 2070.89,1213.58 2071.48,1213.58 2072.06,1213.58 2072.65,1213.58 2073.23,1213.58 2073.82,1213.58 2074.41,1213.58 2074.99,1213.58 2075.58,1213.58 2076.17,1213.58 2076.75,1213.58 2077.34,1213.58 2077.93,1213.58 2078.51,1213.58 2079.1,1213.58 2079.68,1213.58 2080.27,1213.58 2080.86,1213.58 2081.44,1213.58 2082.03,1213.58 2082.62,1213.58 2083.2,1213.58 2083.79,1213.58 2084.38,1213.58 2084.96,1213.58 2085.55,1213.58 2086.14,1213.58 2086.72,1213.58 2087.31,1213.58 2087.89,1213.58 2088.48,1213.58 2089.07,1213.58 2089.65,1213.58 2090.24,1213.58 2090.83,1213.58 2091.41,1213.58 2092,1213.58 2092.59,1213.58 2093.17,1213.58 2093.76,1213.58 2094.35,1213.58 2094.93,1213.58 2095.52,1213.58 2096.1,1213.58 2096.69,1213.58 2097.28,1213.58 2097.86,1213.58 2098.45,1213.58 2099.04,1213.58 2099.62,1213.58 2100.21,1213.58 2100.8,1213.58 2101.38,1213.58 2101.97,1213.58 2102.55,1213.58 2103.14,1213.58 2103.73,1213.58 2104.31,1213.58 2104.9,1213.58 2105.49,1213.58 2106.07,1213.58 2106.66,1213.58 2107.25,1213.58 2107.83,1213.58 2108.42,1213.58 2109.01,1213.58 2109.59,1213.58 2110.18,1213.58 2110.76,1213.58 2111.35,1213.58 2111.94,1213.58 2112.52,1213.58 2113.11,1213.58 2113.7,1213.58 2114.28,1213.58 2114.87,1213.58 2115.46,1213.58 2116.04,1213.58 2116.63,1213.58 2117.22,1213.58 2117.8,1213.58 2118.39,1213.58 2118.97,1213.58 2119.56,1213.58 2120.15,1213.58 2120.73,1213.58 2121.32,1213.58 2121.91,1213.58 2122.49,1213.58 2123.08,1213.58 2123.67,1213.58 2124.25,1213.58 2124.84,1213.58 2125.42,1213.58 2126.01,1213.58 2126.6,1213.58 2127.18,1213.58 2127.77,1213.58 2128.36,1213.58 2128.94,1213.58 2129.53,1213.58 2130.12,1213.58 2130.7,1213.58 2131.29,1213.58 2131.88,1213.58 2132.46,1213.58 2133.05,1213.58 2133.63,1213.58 2134.22,1213.58 2134.81,1213.58 2135.39,1213.58 2135.98,1213.58 2136.57,1213.58 2137.15,1213.58 2137.74,1213.58 2138.33,1213.58 2138.91,1213.58 2139.5,1213.58 2140.09,1213.58 2140.67,1213.58 2141.26,1213.58 2141.84,1213.58 2142.43,1213.58 2143.02,1213.58 2143.6,1213.58 2144.19,1213.58 2144.78,1213.58 2145.36,1213.58 2145.95,1213.58 2146.54,1213.58 2147.12,1213.58 2147.71,1213.58 2148.3,1213.58 2148.88,1213.58 2149.47,1213.58 2150.05,1213.58 2150.64,1213.58 2151.23,1213.58 2151.81,1213.58 2152.4,1213.58 2152.99,1213.58 2153.57,1213.58 2154.16,1213.58 2154.75,1213.58 2155.33,1213.58 2155.92,1213.58 2156.5,1213.58 2157.09,1213.58 2157.68,1213.58 2158.26,1213.58 \"/>\n<path clip-path=\"url(#clip122)\" d=\"M986.025 1213.27 L986.612 1213.27 L987.198 1213.27 L987.785 1213.27 L988.371 1213.27 L988.957 1213.27 L989.544 1213.27 L990.13 1213.27 L990.717 1213.27 L991.303 1213.27 L991.889 1213.27 L992.476 1213.27 L993.062 1213.27 L993.649 1213.27 L994.235 1213.27 L994.822 1213.27 L995.408 1213.27 L995.994 1213.27 L996.581 1213.27 L997.167 1213.27 L997.754 1213.27 L998.34 1213.27 L998.926 1213.27 L999.513 1213.27 L1000.1 1213.27 L1000.69 1213.27 L1001.27 1213.27 L1001.86 1213.27 L1002.44 1213.27 L1003.03 1213.27 L1003.62 1213.27 L1004.2 1213.27 L1004.79 1213.27 L1005.38 1213.27 L1005.96 1213.27 L1006.55 1213.27 L1007.14 1213.27 L1007.72 1213.27 L1008.31 1213.27 L1008.9 1213.27 L1009.48 1213.27 L1010.07 1213.27 L1010.65 1213.27 L1011.24 1213.27 L1011.83 1213.27 L1012.41 1213.27 L1013 1213.27 L1013.59 1213.27 L1014.17 1213.27 L1014.76 1213.27 L1015.35 1213.27 L1015.93 1213.27 L1016.52 1213.27 L1017.11 1213.27 L1017.69 1213.27 L1018.28 1213.27 L1018.86 1213.27 L1019.45 1213.27 L1020.04 1213.27 L1020.62 1213.27 L1021.21 1213.27 L1021.8 1213.27 L1022.38 1213.27 L1022.97 1213.27 L1023.56 1213.27 L1024.14 1213.27 L1024.73 1213.27 L1025.32 1213.27 L1025.9 1213.27 L1026.49 1213.27 L1027.07 1213.27 L1027.66 1213.27 L1028.25 1213.27 L1028.83 1213.27 L1029.42 1213.27 L1030.01 1213.27 L1030.59 1213.27 L1031.18 1213.27 L1031.77 1213.27 L1032.35 1213.27 L1032.94 1213.27 L1033.52 1213.27 L1034.11 1213.27 L1034.7 1213.27 L1035.28 1213.27 L1035.87 1213.27 L1036.46 1213.27 L1037.04 1213.27 L1037.63 1213.27 L1038.22 1213.27 L1038.8 1213.27 L1039.39 1213.27 L1039.98 1213.27 L1040.56 1213.27 L1041.15 1213.27 L1041.73 1213.27 L1042.32 1213.27 L1042.91 1213.27 L1043.49 1213.27 L1044.08 1213.27 L1044.67 1213.27 L1045.25 1213.27 L1045.84 1213.27 L1046.43 1213.27 L1047.01 1213.27 L1047.6 1213.27 L1048.19 1213.27 L1048.77 1213.27 L1049.36 1213.27 L1049.94 1213.27 L1050.53 1213.27 L1051.12 1213.27 L1051.7 1213.27 L1052.29 1213.27 L1052.88 1213.27 L1053.46 1213.27 L1054.05 1213.27 L1054.64 1213.27 L1055.22 1213.27 L1055.81 1213.27 L1056.39 1213.27 L1056.98 1213.27 L1057.57 1213.27 L1058.15 1213.27 L1058.74 1213.27 L1059.33 1213.27 L1059.91 1213.27 L1060.5 1213.27 L1061.09 1213.27 L1061.67 1213.27 L1062.26 1213.27 L1062.85 1213.27 L1063.43 1213.27 L1064.02 1213.27 L1064.6 1213.27 L1065.19 1213.27 L1065.78 1213.27 L1066.36 1213.27 L1066.95 1213.27 L1067.54 1213.27 L1068.12 1213.27 L1068.71 1213.27 L1069.3 1213.27 L1069.88 1213.27 L1070.47 1213.27 L1071.06 1213.27 L1071.64 1213.27 L1072.23 1213.27 L1072.81 1213.27 L1073.4 1213.27 L1073.99 1213.27 L1074.57 1213.27 L1075.16 1213.27 L1075.75 1213.27 L1076.33 1213.27 L1076.92 1213.27 L1077.51 1213.27 L1078.09 1213.27 L1078.68 1213.27 L1079.26 1213.27 L1079.85 1213.27 L1080.44 1213.27 L1081.02 1213.27 L1081.61 1213.27 L1082.2 1213.27 L1082.78 1213.27 L1083.37 1213.27 L1083.96 1213.27 L1084.54 1213.27 L1085.13 1213.27 L1085.72 1213.27 L1086.3 1213.27 L1086.89 1213.27 L1087.47 1213.27 L1088.06 1213.27 L1088.65 1213.27 L1089.23 1213.27 L1089.82 1213.27 L1090.41 1213.27 L1090.99 1213.27 L1091.58 1213.27 L1092.17 1213.27 L1092.75 1213.27 L1093.34 1213.27 L1093.93 1213.27 L1094.51 1213.27 L1095.1 1213.27 L1095.68 1213.27 L1096.27 1213.27 L1096.86 1213.27 L1097.44 1213.27 L1098.03 1213.27 L1098.62 1213.27 L1099.2 1213.27 L1099.79 1213.27 L1100.38 1213.27 L1100.96 1213.27 L1101.55 1213.27 L1102.14 1213.27 L1102.72 1213.27 L1103.31 1213.27 L1103.89 1213.27 L1104.48 1213.27 L1105.07 1213.27 L1105.65 1213.27 L1106.24 1213.27 L1106.83 1213.27 L1107.41 1213.27 L1108 1213.27 L1108.59 1213.27 L1109.17 1213.27 L1109.76 1213.27 L1110.34 1213.27 L1110.93 1213.27 L1111.52 1213.27 L1112.1 1213.27 L1112.69 1213.27 L1113.28 1213.27 L1113.86 1213.27 L1114.45 1213.27 L1115.04 1213.27 L1115.62 1213.27 L1116.21 1213.27 L1116.8 1213.27 L1117.38 1213.27 L1117.97 1213.27 L1118.55 1213.27 L1119.14 1213.27 L1119.73 1213.27 L1120.31 1213.27 L1120.9 1213.27 L1121.49 1213.27 L1122.07 1213.27 L1122.66 1213.27 L1123.25 1213.27 L1123.83 1213.27 L1124.42 1213.27 L1125.01 1213.27 L1125.59 1213.27 L1126.18 1213.27 L1126.76 1213.27 L1127.35 1213.27 L1127.94 1213.27 L1128.52 1213.27 L1129.11 1213.27 L1129.7 1213.27 L1130.28 1213.27 L1130.87 1213.27 L1131.46 1213.27 L1132.04 1213.27 L1132.63 1213.27 L1133.21 1213.27 L1133.8 1213.27 L1134.39 1213.27 L1134.97 1213.27 L1135.56 1213.27 L1136.15 1213.27 L1136.73 1213.27 L1137.32 1213.27 L1137.91 1213.27 L1138.49 1213.27 L1139.08 1213.27 L1139.67 1213.27 L1140.25 1213.27 L1140.84 1213.27 L1141.42 1213.27 L1142.01 1213.27 L1142.6 1213.27 L1143.18 1213.27 L1143.77 1213.27 L1144.36 1213.27 L1144.94 1213.27 L1145.53 1213.27 L1146.12 1213.27 L1146.7 1213.27 L1147.29 1213.27 L1147.88 1213.27 L1148.46 1213.27 L1149.05 1213.27 L1149.63 1213.27 L1150.22 1213.27 L1150.81 1213.27 L1151.39 1213.27 L1151.98 1213.27 L1152.57 1213.27 L1153.15 1213.27 L1153.74 1213.27 L1154.33 1213.27 L1154.91 1213.27 L1155.5 1213.27 L1156.09 1213.27 L1156.67 1213.27 L1157.26 1213.27 L1157.84 1213.27 L1158.43 1213.27 L1159.02 1213.27 L1159.6 1213.27 L1160.19 1213.27 L1160.78 1213.27 L1161.36 1213.27 L1161.95 1213.27 L1162.54 1213.27 L1163.12 1213.27 L1163.71 1213.27 L1164.29 1213.27 L1164.88 1213.27 L1165.47 1213.27 L1166.05 1213.27 L1166.64 1213.27 L1167.23 1213.27 L1167.81 1213.27 L1168.4 1213.27 L1168.99 1213.27 L1169.57 1213.27 L1170.16 1213.27 L1170.75 1213.27 L1171.33 1213.27 L1171.92 1213.27 L1172.5 1213.27 L1173.09 1213.27 L1173.68 1213.27 L1174.26 1213.27 L1174.85 1213.27 L1175.44 1213.27 L1176.02 1213.27 L1176.61 1213.27 L1177.2 1213.27 L1177.78 1213.27 L1178.37 1213.27 L1178.96 1213.27 L1179.54 1213.27 L1180.13 1213.27 L1180.71 1213.27 L1181.3 1213.27 L1181.89 1213.27 L1182.47 1213.27 L1183.06 1213.27 L1183.65 1213.27 L1184.23 1213.27 L1184.82 1213.27 L1185.41 1213.27 L1185.99 1213.27 L1186.58 1213.27 L1187.16 1213.27 L1187.75 1213.27 L1188.34 1213.27 L1188.92 1213.27 L1189.51 1213.27 L1190.1 1213.27 L1190.68 1213.27 L1191.27 1213.27 L1191.86 1213.27 L1192.44 1213.27 L1193.03 1213.27 L1193.62 1213.27 L1194.2 1213.27 L1194.79 1213.27 L1195.37 1213.27 L1195.96 1213.27 L1196.55 1213.27 L1197.13 1213.27 L1197.72 1213.27 L1198.31 1213.27 L1198.89 1213.27 L1199.48 1213.27 L1200.07 1213.27 L1200.65 1213.27 L1201.24 1213.27 L1201.83 1213.27 L1202.41 1213.27 L1203 1213.27 L1203.58 1213.27 L1204.17 1213.27 L1204.76 1213.27 L1205.34 1213.27 L1205.93 1213.27 L1206.52 1213.27 L1207.1 1213.27 L1207.69 1213.27 L1208.28 1213.27 L1208.86 1213.27 L1209.45 1213.27 L1210.03 1213.27 L1210.62 1213.27 L1211.21 1213.27 L1211.79 1213.27 L1212.38 1213.27 L1212.97 1213.27 L1213.55 1213.27 L1214.14 1213.27 L1214.73 1213.27 L1215.31 1213.27 L1215.9 1213.27 L1216.49 1213.27 L1217.07 1213.27 L1217.66 1213.27 L1218.24 1213.27 L1218.83 1213.27 L1219.42 1213.27 L1220 1213.27 L1220.59 1213.27 L1221.18 1213.27 L1221.76 1213.27 L1222.35 1213.27 L1222.94 1213.27 L1223.52 1213.27 L1224.11 1213.27 L1224.7 1213.27 L1225.28 1213.27 L1225.87 1213.27 L1226.45 1213.27 L1227.04 1213.27 L1227.63 1213.27 L1228.21 1213.27 L1228.8 1213.27 L1229.39 1213.27 L1229.97 1213.27 L1230.56 1213.27 L1231.15 1213.27 L1231.73 1213.27 L1232.32 1213.27 L1232.91 1213.27 L1233.49 1213.27 L1234.08 1213.27 L1234.66 1213.27 L1235.25 1213.27 L1235.84 1213.27 L1236.42 1213.27 L1237.01 1213.27 L1237.6 1213.27 L1238.18 1213.27 L1238.77 1213.27 L1239.36 1213.27 L1239.94 1213.27 L1240.53 1213.27 L1241.11 1213.27 L1241.7 1213.27 L1242.29 1213.27 L1242.87 1213.27 L1243.46 1213.27 L1244.05 1213.27 L1244.63 1213.27 L1245.22 1213.27 L1245.81 1213.27 L1246.39 1213.27 L1246.98 1213.27 L1247.57 1213.27 L1248.15 1213.27 L1248.74 1213.27 L1249.32 1213.27 L1249.91 1213.27 L1250.5 1213.27 L1251.08 1213.27 L1251.67 1213.27 L1252.26 1213.27 L1252.84 1213.27 L1253.43 1213.27 L1254.02 1213.27 L1254.6 1213.27 L1255.19 1213.27 L1255.78 1213.27 L1256.36 1213.27 L1256.95 1213.27 L1257.53 1213.27 L1258.12 1213.27 L1258.71 1213.27 L1259.29 1213.27 L1259.88 1213.27 L1260.47 1213.27 L1261.05 1213.27 L1261.64 1213.27 L1262.23 1213.27 L1262.81 1213.27 L1263.4 1213.27 L1263.98 1213.27 L1264.57 1213.27 L1265.16 1213.27 L1265.74 1213.27 L1266.33 1213.27 L1266.92 1213.27 L1267.5 1213.27 L1268.09 1213.27 L1268.68 1213.27 L1269.26 1213.27 L1269.85 1213.27 L1270.44 1213.27 L1271.02 1213.27 L1271.61 1213.27 L1272.19 1213.27 L1272.78 1213.27 L1273.37 1213.27 L1273.95 1213.27 L1274.54 1213.27 L1275.13 1213.27 L1275.71 1213.27 L1276.3 1213.27 L1276.89 1213.27 L1277.47 1213.27 L1278.06 1213.27 L1278.65 1213.27 L1279.23 1213.27 L1279.82 1213.27 L1280.4 1213.27 L1280.99 1213.27 L1281.58 1213.27 L1282.16 1213.27 L1282.75 1213.27 L1283.34 1213.27 L1283.92 1213.27 L1284.51 1213.27 L1285.1 1213.27 L1285.68 1213.27 L1286.27 1213.27 L1286.86 1213.27 L1287.44 1213.27 L1288.03 1213.27 L1288.61 1213.27 L1289.2 1213.27 L1289.79 1213.27 L1290.37 1213.27 L1290.96 1213.27 L1291.55 1213.27 L1292.13 1213.27 L1292.72 1213.27 L1293.31 1213.27 L1293.89 1213.27 L1294.48 1213.27 L1295.06 1213.27 L1295.65 1213.27 L1296.24 1213.27 L1296.82 1213.27 L1297.41 1213.27 L1298 1213.27 L1298.58 1213.27 L1299.17 1213.27 L1299.76 1213.27 L1300.34 1213.27 L1300.93 1213.27 L1301.52 1213.27 L1302.1 1213.27 L1302.69 1213.27 L1303.27 1213.27 L1303.86 1213.27 L1304.45 1213.27 L1305.03 1213.27 L1305.62 1213.27 L1306.21 1213.27 L1306.79 1213.27 L1307.38 1213.27 L1307.97 1213.27 L1308.55 1213.27 L1309.14 1213.27 L1309.73 1213.27 L1310.31 1213.27 L1310.9 1213.27 L1311.48 1213.27 L1312.07 1213.27 L1312.66 1213.27 L1313.24 1213.27 L1313.83 1213.27 L1314.42 1213.27 L1315 1213.27 L1315.59 1213.27 L1316.18 1213.27 L1316.76 1213.27 L1317.35 1213.27 L1317.93 1213.27 L1318.52 1213.27 L1319.11 1213.27 L1319.69 1213.27 L1320.28 1213.27 L1320.87 1213.27 L1321.45 1213.27 L1322.04 1213.27 L1322.63 1213.27 L1323.21 1213.27 L1323.8 1213.27 L1324.39 1213.27 L1324.97 1213.27 L1325.56 1213.27 L1326.14 1213.27 L1326.73 1213.27 L1327.32 1213.27 L1327.9 1213.27 L1328.49 1213.27 L1329.08 1213.27 L1329.66 1213.27 L1330.25 1213.27 L1330.84 1213.27 L1331.42 1213.27 L1332.01 1213.27 L1332.6 1213.27 L1333.18 1213.27 L1333.77 1213.27 L1334.35 1213.27 L1334.94 1213.27 L1335.53 1213.27 L1336.11 1213.27 L1336.7 1213.27 L1337.29 1213.27 L1337.87 1213.27 L1338.46 1213.27 L1339.05 1213.27 L1339.63 1213.27 L1340.22 1213.27 L1340.8 1213.27 L1341.39 1213.27 L1341.98 1213.27 L1342.56 1213.27 L1343.15 1213.27 L1343.74 1213.27 L1344.32 1213.27 L1344.91 1213.27 L1345.5 1213.27 L1346.08 1213.27 L1346.67 1213.27 L1347.26 1213.27 L1347.84 1213.27 L1348.43 1213.27 L1349.01 1213.27 L1349.6 1213.27 L1350.19 1213.27 L1350.77 1213.27 L1351.36 1213.27 L1351.95 1213.27 L1352.53 1213.27 L1353.12 1213.27 L1353.71 1213.27 L1354.29 1213.27 L1354.88 1213.27 L1355.47 1213.27 L1356.05 1213.27 L1356.64 1213.27 L1357.22 1213.27 L1357.81 1213.27 L1358.4 1213.27 L1358.98 1213.27 L1359.57 1213.27 L1360.16 1213.27 L1360.74 1213.27 L1361.33 1213.27 L1361.92 1213.27 L1362.5 1213.27 L1363.09 1213.27 L1363.68 1213.27 L1364.26 1213.27 L1364.85 1213.27 L1365.43 1213.27 L1366.02 1213.27 L1366.61 1213.27 L1367.19 1213.27 L1367.78 1213.27 L1368.37 1213.27 L1368.95 1213.27 L1369.54 1213.27 L1370.13 1213.27 L1370.71 1213.27 L1371.3 1213.27 L1371.88 1213.27 L1372.47 1213.27 L1373.06 1213.27 L1373.64 1213.27 L1374.23 1213.27 L1374.82 1213.27 L1375.4 1213.27 L1375.99 1213.27 L1376.58 1213.27 L1377.16 1213.27 L1377.75 1213.27 L1378.34 1213.27 L1378.92 1213.27 L1379.51 1213.27 L1380.09 1213.27 L1380.68 1213.27 L1381.27 1213.27 L1381.85 1213.27 L1382.44 1213.27 L1383.03 1213.27 L1383.61 1213.27 L1384.2 1213.27 L1384.79 1213.27 L1385.37 1213.27 L1385.96 1213.27 L1386.55 1213.27 L1387.13 1213.27 L1387.72 1213.27 L1388.3 1213.27 L1388.89 1213.27 L1389.48 1213.27 L1390.06 1213.27 L1390.65 1213.27 L1391.24 1213.27 L1391.82 1213.27 L1392.41 1213.27 L1393 1213.27 L1393.58 1213.27 L1394.17 1213.27 L1394.75 1213.27 L1395.34 1213.27 L1395.93 1213.27 L1396.51 1213.27 L1397.1 1213.27 L1397.69 1213.27 L1398.27 1213.27 L1398.86 1213.27 L1399.45 1213.27 L1400.03 1213.27 L1400.62 1213.27 L1401.21 1213.27 L1401.79 1213.27 L1402.38 1213.27 L1402.96 1213.27 L1403.55 1213.27 L1404.14 1213.27 L1404.72 1213.27 L1405.31 1213.27 L1405.9 1213.27 L1406.48 1213.27 L1407.07 1213.27 L1407.66 1213.27 L1408.24 1213.27 L1408.83 1213.27 L1409.42 1213.27 L1410 1213.27 L1410.59 1213.27 L1411.17 1213.27 L1411.76 1213.27 L1412.35 1213.27 L1412.93 1213.27 L1413.52 1213.27 L1414.11 1213.27 L1414.69 1213.27 L1415.28 1213.27 L1415.87 1213.27 L1416.45 1213.27 L1417.04 1213.27 L1417.63 1213.27 L1418.21 1213.27 L1418.8 1213.27 L1419.38 1213.27 L1419.97 1213.27 L1420.56 1213.27 L1421.14 1213.27 L1421.73 1213.27 L1422.32 1213.27 L1422.9 1213.27 L1423.49 1213.27 L1424.08 1213.27 L1424.66 1213.27 L1425.25 1213.27 L1425.83 1213.27 L1426.42 1213.27 L1427.01 1213.27 L1427.59 1213.27 L1428.18 1213.27 L1428.77 1213.27 L1429.35 1213.27 L1429.94 1213.27 L1430.53 1213.27 L1431.11 1213.27 L1431.7 1213.27 L1432.29 1213.27 L1432.87 1213.27 L1433.46 1213.27 L1434.04 1213.27 L1434.63 1213.27 L1435.22 1213.27 L1435.8 1213.27 L1436.39 1213.27 L1436.98 1213.27 L1437.56 1213.27 L1438.15 1213.27 L1438.74 1213.27 L1439.32 1213.27 L1439.91 1213.27 L1440.5 1213.27 L1441.08 1213.27 L1441.67 1213.27 L1442.25 1213.27 L1442.84 1213.27 L1443.43 1213.27 L1444.01 1213.27 L1444.6 1213.27 L1445.19 1213.27 L1445.77 1213.27 L1446.36 1213.27 L1446.95 1213.27 L1447.53 1213.27 L1448.12 1213.27 L1448.7 1213.27 L1449.29 1213.27 L1449.88 1213.27 L1450.46 1213.27 L1451.05 1213.27 L1451.64 1213.27 L1452.22 1213.27 L1452.81 1213.27 L1453.4 1213.27 L1453.98 1213.27 L1454.57 1213.27 L1455.16 1213.27 L1455.74 1213.27 L1456.33 1213.27 L1456.91 1213.27 L1457.5 1213.27 L1458.09 1213.27 L1458.67 1213.27 L1459.26 1213.27 L1459.85 1213.27 L1460.43 1213.27 L1461.02 1213.27 L1461.61 1213.27 L1462.19 1213.27 L1462.78 1213.27 L1463.37 1213.27 L1463.95 1213.27 L1464.54 1213.27 L1465.12 1213.27 L1465.71 1213.27 L1466.3 1213.27 L1466.88 1213.27 L1467.47 1213.27 L1468.06 1213.27 L1468.64 1213.27 L1469.23 1213.27 L1469.82 1213.27 L1470.4 1213.27 L1470.99 1213.27 L1471.57 1213.27 L1472.16 1213.27 L1472.75 1213.27 L1473.33 1213.27 L1473.92 1213.27 L1474.51 1213.27 L1475.09 1213.27 L1475.68 1213.27 L1476.27 1213.27 L1476.85 1213.27 L1477.44 1213.27 L1478.03 1213.27 L1478.61 1213.27 L1479.2 1213.27 L1479.78 1213.27 L1480.37 1213.27 L1480.96 1213.27 L1481.54 1213.27 L1482.13 1213.27 L1482.72 1213.27 L1483.3 1213.27 L1483.89 1213.27 L1484.48 1213.27 L1485.06 1213.27 L1485.65 1213.27 L1486.24 1213.27 L1486.82 1213.27 L1487.41 1213.27 L1487.99 1213.27 L1488.58 1213.27 L1489.17 1213.27 L1489.75 1213.27 L1490.34 1213.27 L1490.93 1213.27 L1491.51 1213.27 L1492.1 1213.27 L1492.69 1213.27 L1493.27 1213.27 L1493.86 1213.27 L1494.45 1213.27 L1495.03 1213.27 L1495.62 1213.27 L1496.2 1213.27 L1496.79 1213.27 L1497.38 1213.27 L1497.96 1213.27 L1498.55 1213.27 L1499.14 1213.27 L1499.72 1213.27 L1500.31 1213.27 L1500.9 1213.27 L1501.48 1213.27 L1502.07 1213.27 L1502.65 1213.27 L1503.24 1213.27 L1503.83 1213.27 L1504.41 1213.27 L1505 1213.27 L1505.59 1213.27 L1506.17 1213.27 L1506.76 1213.27 L1507.35 1213.27 L1507.93 1213.27 L1508.52 1213.27 L1509.11 1213.27 L1509.69 1213.27 L1510.28 1213.27 L1510.86 1213.27 L1511.45 1213.27 L1512.04 1213.27 L1512.62 1213.27 L1513.21 1213.27 L1513.8 1213.27 L1514.38 1213.27 L1514.97 1213.27 L1515.56 1213.27 L1516.14 1213.27 L1516.73 1213.27 L1517.32 1213.27 L1517.9 1213.27 L1518.49 1213.27 L1519.07 1213.27 L1519.66 1213.27 L1520.25 1213.27 L1520.83 1213.27 L1521.42 1213.27 L1522.01 1213.27 L1522.59 1213.27 L1523.18 1213.27 L1523.77 1213.27 L1524.35 1213.27 L1524.94 1213.27 L1525.52 1213.27 L1526.11 1213.27 L1526.7 1213.27 L1527.28 1213.27 L1527.87 1213.27 L1528.46 1213.27 L1529.04 1213.27 L1529.63 1213.27 L1530.22 1213.27 L1530.8 1213.27 L1531.39 1213.27 L1531.98 1213.27 L1532.56 1213.27 L1533.15 1213.27 L1533.73 1213.27 L1534.32 1213.27 L1534.91 1213.27 L1535.49 1213.27 L1536.08 1213.27 L1536.67 1213.27 L1537.25 1213.27 L1537.84 1213.27 L1538.43 1213.27 L1539.01 1213.27 L1539.6 1213.27 L1540.19 1213.27 L1540.77 1213.27 L1541.36 1213.27 L1541.94 1213.27 L1542.53 1213.27 L1543.12 1213.27 L1543.7 1213.27 L1544.29 1213.27 L1544.88 1213.27 L1545.46 1213.27 L1546.05 1213.27 L1546.64 1213.27 L1547.22 1213.27 L1547.81 1213.27 L1548.4 1213.27 L1548.98 1213.27 L1549.57 1213.27 L1550.15 1213.27 L1550.74 1213.27 L1551.33 1213.27 L1551.91 1213.27 L1552.5 1213.27 L1553.09 1213.27 L1553.67 1213.27 L1554.26 1213.27 L1554.85 1213.27 L1555.43 1213.27 L1556.02 1213.27 L1556.6 1213.27 L1557.19 1213.27 L1557.78 1213.27 L1558.36 1213.27 L1558.95 1213.27 L1559.54 1213.27 L1560.12 1213.27 L1560.71 1213.27 L1561.3 1213.27 L1561.88 1213.27 L1562.47 1213.27 L1563.06 1213.27 L1563.64 1213.27 L1564.23 1213.27 L1564.81 1213.27 L1565.4 1213.27 L1565.99 1213.27 L1566.57 1213.27 L1567.16 1213.27 L1567.75 1213.27 L1568.33 1213.27 L1568.92 1213.27 L1569.51 1213.27 L1570.09 1213.27 L1570.68 1213.27 L1571.27 1213.27 L1571.85 1213.27 L1572.44 1213.27 L1573.02 1213.27 L1573.61 1213.27 L1574.2 1213.27 L1574.78 1213.27 L1575.37 1213.27 L1575.96 1213.27 L1576.54 1213.27 L1577.13 1213.27 L1577.72 1213.27 L1578.3 1213.27 L1578.89 1213.27 L1579.47 1213.27 L1580.06 1213.27 L1580.65 1213.27 L1581.23 1213.27 L1581.82 1213.27 L1582.41 1213.27 L1582.99 1213.27 L1583.58 1213.27 L1584.17 1213.27 L1584.75 1213.27 L1585.34 1213.27 L1585.93 1213.27 L1586.51 1213.27 L1587.1 1213.27 L1587.68 1213.27 L1588.27 1213.27 L1588.86 1213.27 L1589.44 1213.27 L1590.03 1213.27 L1590.62 1213.27 L1591.2 1213.27 L1591.79 1213.27 L1592.38 1213.27 L1592.96 1213.27 L1593.55 1213.27 L1594.14 1213.27 L1594.72 1213.27 L1595.31 1213.27 L1595.89 1213.27 L1596.48 1213.27 L1597.07 1213.27 L1597.65 1213.27 L1598.24 1213.27 L1598.83 1213.27 L1599.41 1213.27 L1600 1213.27 L1600.59 1213.27 L1601.17 1213.27 L1601.76 1213.27 L1602.34 1213.27 L1602.93 1213.27 L1603.52 1213.27 L1604.1 1213.27 L1604.69 1213.27 L1605.28 1213.27 L1605.86 1213.27 L1606.45 1213.27 L1607.04 1213.27 L1607.62 1213.27 L1608.21 1213.27 L1608.8 1213.27 L1609.38 1213.27 L1609.97 1213.27 L1610.55 1213.27 L1611.14 1213.27 L1611.73 1213.27 L1612.31 1213.27 L1612.9 1213.27 L1613.49 1213.27 L1614.07 1213.27 L1614.66 1213.27 L1615.25 1213.27 L1615.83 1213.27 L1616.42 1213.27 L1617.01 1213.27 L1617.59 1213.27 L1618.18 1213.27 L1618.76 1213.27 L1619.35 1213.27 L1619.94 1213.27 L1620.52 1213.27 L1621.11 1213.27 L1621.7 1213.27 L1622.28 1213.27 L1622.87 1213.27 L1623.46 1213.27 L1624.04 1213.27 L1624.63 1213.27 L1625.22 1213.27 L1625.8 1213.27 L1626.39 1213.27 L1626.97 1213.27 L1627.56 1213.27 L1628.15 1213.27 L1628.73 1213.27 L1629.32 1213.27 L1629.91 1213.27 L1630.49 1213.27 L1631.08 1213.27 L1631.67 1213.27 L1632.25 1213.27 L1632.84 1213.27 L1633.42 1213.27 L1634.01 1213.27 L1634.6 1213.27 L1635.18 1213.27 L1635.77 1213.27 L1636.36 1213.27 L1636.94 1213.27 L1637.53 1213.27 L1638.12 1213.27 L1638.7 1213.27 L1639.29 1213.27 L1639.88 1213.27 L1640.46 1213.27 L1641.05 1213.27 L1641.63 1213.27 L1642.22 1213.27 L1642.81 1213.27 L1643.39 1213.27 L1643.98 1213.27 L1644.57 1213.27 L1645.15 1213.27 L1645.74 1213.27 L1646.33 1213.27 L1646.91 1213.27 L1647.5 1213.27 L1648.09 1213.27 L1648.67 1213.27 L1649.26 1213.27 L1649.84 1213.27 L1650.43 1213.27 L1651.02 1213.27 L1651.6 1213.27 L1652.19 1213.27 L1652.78 1213.27 L1653.36 1213.27 L1653.95 1213.27 L1654.54 1213.27 L1655.12 1213.27 L1655.71 1213.27 L1656.29 1213.27 L1656.88 1213.27 L1657.47 1213.27 L1658.05 1213.27 L1658.64 1213.27 L1659.23 1213.27 L1659.81 1213.27 L1660.4 1213.27 L1660.99 1213.27 L1661.57 1213.27 L1662.16 1213.27 L1662.75 1213.27 L1663.33 1213.27 L1663.92 1213.27 L1664.5 1213.27 L1665.09 1213.27 L1665.68 1213.27 L1666.26 1213.27 L1666.85 1213.27 L1667.44 1213.27 L1668.02 1213.27 L1668.61 1213.27 L1669.2 1213.27 L1669.78 1213.27 L1670.37 1213.27 L1670.96 1213.27 L1671.54 1213.27 L1672.13 1213.27 L1672.71 1213.27 L1673.3 1213.27 L1673.89 1213.27 L1674.47 1213.27 L1675.06 1213.27 L1675.65 1213.27 L1676.23 1213.27 L1676.82 1213.27 L1677.41 1213.27 L1677.99 1213.27 L1678.58 1213.27 L1679.17 1213.27 L1679.75 1213.27 L1680.34 1213.27 L1680.92 1213.27 L1681.51 1213.27 L1682.1 1213.27 L1682.68 1213.27 L1683.27 1213.27 L1683.86 1213.27 L1684.44 1213.27 L1685.03 1213.27 L1685.62 1213.27 L1686.2 1213.27 L1686.79 1213.27 L1687.37 1213.27 L1687.96 1213.27 L1688.55 1213.27 L1689.13 1213.27 L1689.72 1213.27 L1690.31 1213.27 L1690.89 1213.27 L1691.48 1213.27 L1692.07 1213.27 L1692.65 1213.27 L1693.24 1213.27 L1693.83 1213.27 L1694.41 1213.27 L1695 1213.27 L1695.58 1213.27 L1696.17 1213.27 L1696.76 1213.27 L1697.34 1213.27 L1697.93 1213.27 L1698.52 1213.27 L1699.1 1213.27 L1699.69 1213.27 L1700.28 1213.27 L1700.86 1213.27 L1701.45 1213.27 L1702.04 1213.27 L1702.62 1213.27 L1703.21 1213.27 L1703.79 1213.27 L1704.38 1213.27 L1704.97 1213.27 L1705.55 1213.27 L1706.14 1213.27 L1706.73 1213.27 L1707.31 1213.27 L1707.9 1213.27 L1708.49 1213.27 L1709.07 1213.27 L1709.66 1213.27 L1710.24 1213.27 L1710.83 1213.27 L1711.42 1213.27 L1712 1213.27 L1712.59 1213.27 L1713.18 1213.27 L1713.76 1213.27 L1714.35 1213.27 L1714.94 1213.27 L1715.52 1213.27 L1716.11 1213.27 L1716.7 1213.27 L1717.28 1213.27 L1717.87 1213.27 L1718.45 1213.27 L1719.04 1213.27 L1719.63 1213.27 L1720.21 1213.27 L1720.8 1213.27 L1721.39 1213.27 L1721.97 1213.27 L1722.56 1213.27 L1723.15 1213.27 L1723.73 1213.27 L1724.32 1213.27 L1724.91 1213.27 L1725.49 1213.27 L1726.08 1213.27 L1726.66 1213.27 L1727.25 1213.27 L1727.84 1213.27 L1728.42 1213.27 L1729.01 1213.27 L1729.6 1213.27 L1730.18 1213.27 L1730.77 1213.27 L1731.36 1213.27 L1731.94 1213.27 L1732.53 1213.27 L1733.11 1213.27 L1733.7 1213.27 L1734.29 1213.27 L1734.87 1213.27 L1735.46 1213.27 L1736.05 1213.27 L1736.63 1213.27 L1737.22 1213.27 L1737.81 1213.27 L1738.39 1213.27 L1738.98 1213.27 L1739.57 1213.27 L1740.15 1213.27 L1740.74 1213.27 L1741.32 1213.27 L1741.91 1213.27 L1742.5 1213.27 L1743.08 1213.27 L1743.67 1213.27 L1744.26 1213.27 L1744.84 1213.27 L1745.43 1213.27 L1746.02 1213.27 L1746.6 1213.27 L1747.19 1213.27 L1747.78 1213.27 L1748.36 1213.27 L1748.95 1213.27 L1749.53 1213.27 L1750.12 1213.27 L1750.71 1213.27 L1751.29 1213.27 L1751.88 1213.27 L1752.47 1213.27 L1753.05 1213.27 L1753.64 1213.27 L1754.23 1213.27 L1754.81 1213.27 L1755.4 1213.27 L1755.99 1213.27 L1756.57 1213.27 L1757.16 1213.27 L1757.74 1213.27 L1758.33 1213.27 L1758.92 1213.27 L1759.5 1213.27 L1760.09 1213.27 L1760.68 1213.27 L1761.26 1213.27 L1761.85 1213.27 L1762.44 1213.27 L1763.02 1213.27 L1763.61 1213.27 L1764.19 1213.27 L1764.78 1213.27 L1765.37 1213.27 L1765.95 1213.27 L1766.54 1213.27 L1767.13 1213.27 L1767.71 1213.27 L1768.3 1213.27 L1768.89 1213.27 L1769.47 1213.27 L1770.06 1213.27 L1770.65 1213.27 L1771.23 1213.27 L1771.82 1213.27 L1772.4 1213.27 L1772.99 1213.27 L1773.58 1213.27 L1774.16 1213.27 L1774.75 1213.27 L1775.34 1213.27 L1775.92 1213.27 L1776.51 1213.27 L1777.1 1213.27 L1777.68 1213.27 L1778.27 1213.27 L1778.86 1213.27 L1779.44 1213.27 L1780.03 1213.27 L1780.61 1213.27 L1781.2 1213.27 L1781.79 1213.27 L1782.37 1213.27 L1782.96 1213.27 L1783.55 1213.27 L1784.13 1213.27 L1784.72 1213.27 L1785.31 1213.27 L1785.89 1213.27 L1786.48 1213.27 L1787.06 1213.27 L1787.65 1213.27 L1788.24 1213.27 L1788.82 1213.27 L1789.41 1213.27 L1790 1213.27 L1790.58 1213.27 L1791.17 1213.27 L1791.76 1213.27 L1792.34 1213.27 L1792.93 1213.27 L1793.52 1213.27 L1794.1 1213.27 L1794.69 1213.27 L1795.27 1213.27 L1795.86 1213.27 L1796.45 1213.27 L1797.03 1213.27 L1797.62 1213.27 L1798.21 1213.27 L1798.79 1213.27 L1799.38 1213.27 L1799.97 1213.27 L1800.55 1213.27 L1801.14 1213.27 L1801.73 1213.27 L1802.31 1213.27 L1802.9 1213.27 L1803.48 1213.27 L1804.07 1213.27 L1804.66 1213.27 L1805.24 1213.27 L1805.83 1213.27 L1806.42 1213.27 L1807 1213.27 L1807.59 1213.27 L1808.18 1213.27 L1808.76 1213.27 L1809.35 1213.27 L1809.94 1213.27 L1810.52 1213.27 L1811.11 1213.27 L1811.69 1213.27 L1812.28 1213.27 L1812.87 1213.27 L1813.45 1213.27 L1814.04 1213.27 L1814.63 1213.27 L1815.21 1213.27 L1815.8 1213.27 L1816.39 1213.27 L1816.97 1213.27 L1817.56 1213.27 L1818.14 1213.27 L1818.73 1213.27 L1819.32 1213.27 L1819.9 1213.27 L1820.49 1213.27 L1821.08 1213.27 L1821.66 1213.27 L1822.25 1213.27 L1822.84 1213.27 L1823.42 1213.27 L1824.01 1213.27 L1824.6 1213.27 L1825.18 1213.27 L1825.77 1213.27 L1826.35 1213.27 L1826.94 1213.27 L1827.53 1213.27 L1828.11 1213.27 L1828.7 1213.27 L1829.29 1213.27 L1829.87 1213.27 L1830.46 1213.27 L1831.05 1213.27 L1831.63 1213.27 L1832.22 1213.27 L1832.81 1213.27 L1833.39 1213.27 L1833.98 1213.27 L1834.56 1213.27 L1835.15 1213.27 L1835.74 1213.27 L1836.32 1213.27 L1836.91 1213.27 L1837.5 1213.27 L1838.08 1213.27 L1838.67 1213.27 L1839.26 1213.27 L1839.84 1213.27 L1840.43 1213.27 L1841.01 1213.27 L1841.6 1213.27 L1842.19 1213.27 L1842.77 1213.27 L1843.36 1213.27 L1843.95 1213.27 L1844.53 1213.27 L1845.12 1213.27 L1845.71 1213.27 L1846.29 1213.27 L1846.88 1213.27 L1847.47 1213.27 L1848.05 1213.27 L1848.64 1213.27 L1849.22 1213.27 L1849.81 1213.27 L1850.4 1213.27 L1850.98 1213.27 L1851.57 1213.27 L1852.16 1213.27 L1852.74 1213.27 L1853.33 1213.27 L1853.92 1213.27 L1854.5 1213.27 L1855.09 1213.27 L1855.68 1213.27 L1856.26 1213.27 L1856.85 1213.27 L1857.43 1213.27 L1858.02 1213.27 L1858.61 1213.27 L1859.19 1213.27 L1859.78 1213.27 L1860.37 1213.27 L1860.95 1213.27 L1861.54 1213.27 L1862.13 1213.27 L1862.71 1213.27 L1863.3 1213.27 L1863.88 1213.27 L1864.47 1213.27 L1865.06 1213.27 L1865.64 1213.27 L1866.23 1213.27 L1866.82 1213.27 L1867.4 1213.27 L1867.99 1213.27 L1868.58 1213.27 L1869.16 1213.27 L1869.75 1213.27 L1870.34 1213.27 L1870.92 1213.27 L1871.51 1213.27 L1872.09 1213.27 L1872.68 1213.27 L1873.27 1213.27 L1873.85 1213.27 L1874.44 1213.27 L1875.03 1213.27 L1875.61 1213.27 L1876.2 1213.27 L1876.79 1213.27 L1877.37 1213.27 L1877.96 1213.27 L1878.55 1213.27 L1879.13 1213.27 L1879.72 1213.27 L1880.3 1213.27 L1880.89 1213.27 L1881.48 1213.27 L1882.06 1213.27 L1882.65 1213.27 L1883.24 1213.27 L1883.82 1213.27 L1884.41 1213.27 L1885 1213.27 L1885.58 1213.27 L1886.17 1213.27 L1886.76 1213.27 L1887.34 1213.27 L1887.93 1213.27 L1888.51 1213.27 L1889.1 1213.27 L1889.69 1213.27 L1890.27 1213.27 L1890.86 1213.27 L1891.45 1213.27 L1892.03 1213.27 L1892.62 1213.27 L1893.21 1213.27 L1893.79 1213.27 L1894.38 1213.27 L1894.96 1213.27 L1895.55 1213.27 L1896.14 1213.27 L1896.72 1213.27 L1897.31 1213.27 L1897.9 1213.27 L1898.48 1213.27 L1899.07 1213.27 L1899.66 1213.27 L1900.24 1213.27 L1900.83 1213.27 L1901.42 1213.27 L1902 1213.27 L1902.59 1213.27 L1903.17 1213.27 L1903.76 1213.27 L1904.35 1213.27 L1904.93 1213.27 L1905.52 1213.27 L1906.11 1213.27 L1906.69 1213.27 L1907.28 1213.27 L1907.87 1213.27 L1908.45 1213.27 L1909.04 1213.27 L1909.63 1213.27 L1910.21 1213.27 L1910.8 1213.27 L1911.38 1213.27 L1911.97 1213.27 L1912.56 1213.27 L1913.14 1213.27 L1913.73 1213.27 L1914.32 1213.27 L1914.9 1213.27 L1915.49 1213.27 L1916.08 1213.27 L1916.66 1213.27 L1917.25 1213.27 L1917.83 1213.27 L1918.42 1213.27 L1919.01 1213.27 L1919.59 1213.27 L1920.18 1213.27 L1920.77 1213.27 L1921.35 1213.27 L1921.94 1213.27 L1922.53 1213.27 L1923.11 1213.27 L1923.7 1213.27 L1924.29 1213.27 L1924.87 1213.27 L1925.46 1213.27 L1926.04 1213.27 L1926.63 1213.27 L1927.22 1213.27 L1927.8 1213.27 L1928.39 1213.27 L1928.98 1213.27 L1929.56 1213.27 L1930.15 1213.27 L1930.74 1213.27 L1931.32 1213.27 L1931.91 1213.27 L1932.5 1213.27 L1933.08 1213.27 L1933.67 1213.27 L1934.25 1213.27 L1934.84 1213.27 L1935.43 1213.27 L1936.01 1213.27 L1936.6 1213.27 L1937.19 1213.27 L1937.77 1213.27 L1938.36 1213.27 L1938.95 1213.27 L1939.53 1213.27 L1940.12 1213.27 L1940.71 1213.27 L1941.29 1213.27 L1941.88 1213.27 L1942.46 1213.27 L1943.05 1213.27 L1943.64 1213.27 L1944.22 1213.27 L1944.81 1213.27 L1945.4 1213.27 L1945.98 1213.27 L1946.57 1213.27 L1947.16 1213.27 L1947.74 1213.27 L1948.33 1213.27 L1948.91 1213.27 L1949.5 1213.27 L1950.09 1213.27 L1950.67 1213.27 L1951.26 1213.27 L1951.85 1213.27 L1952.43 1213.27 L1953.02 1213.27 L1953.61 1213.27 L1954.19 1213.27 L1954.78 1213.27 L1955.37 1213.27 L1955.95 1213.27 L1956.54 1213.27 L1957.12 1213.27 L1957.71 1213.27 L1958.3 1213.27 L1958.88 1213.27 L1959.47 1213.27 L1960.06 1213.27 L1960.64 1213.27 L1961.23 1213.27 L1961.82 1213.27 L1962.4 1213.27 L1962.99 1213.27 L1963.58 1213.27 L1964.16 1213.27 L1964.75 1213.27 L1965.33 1213.27 L1965.92 1213.27 L1966.51 1213.27 L1967.09 1213.27 L1967.68 1213.27 L1968.27 1213.27 L1968.85 1213.27 L1969.44 1213.27 L1970.03 1213.27 L1970.61 1213.27 L1971.2 1213.27 L1971.78 1213.27 L1972.37 1213.27 L1972.96 1213.27 L1973.54 1213.27 L1974.13 1213.27 L1974.72 1213.27 L1975.3 1213.27 L1975.89 1213.27 L1976.48 1213.27 L1977.06 1213.27 L1977.65 1213.27 L1978.24 1213.27 L1978.82 1213.27 L1979.41 1213.27 L1979.99 1213.27 L1980.58 1213.27 L1981.17 1213.27 L1981.75 1213.27 L1982.34 1213.27 L1982.93 1213.27 L1983.51 1213.27 L1984.1 1213.27 L1984.69 1213.27 L1985.27 1213.27 L1985.86 1213.27 L1986.45 1213.27 L1987.03 1213.27 L1987.62 1213.27 L1988.2 1213.27 L1988.79 1213.27 L1989.38 1213.27 L1989.96 1213.27 L1990.55 1213.27 L1991.14 1213.27 L1991.72 1213.27 L1992.31 1213.27 L1992.9 1213.27 L1993.48 1213.27 L1994.07 1213.27 L1994.65 1213.27 L1995.24 1213.27 L1995.83 1213.27 L1996.41 1213.27 L1997 1213.27 L1997.59 1213.27 L1998.17 1213.27 L1998.76 1213.27 L1999.35 1213.27 L1999.93 1213.27 L2000.52 1213.27 L2001.11 1213.27 L2001.69 1213.27 L2002.28 1213.27 L2002.86 1213.27 L2003.45 1213.27 L2004.04 1213.27 L2004.62 1213.27 L2005.21 1213.27 L2005.8 1213.27 L2006.38 1213.27 L2006.97 1213.27 L2007.56 1213.27 L2008.14 1213.27 L2008.73 1213.27 L2009.32 1213.27 L2009.9 1213.27 L2010.49 1213.27 L2011.07 1213.27 L2011.66 1213.27 L2012.25 1213.27 L2012.83 1213.27 L2013.42 1213.27 L2014.01 1213.27 L2014.59 1213.27 L2015.18 1213.27 L2015.77 1213.27 L2016.35 1213.27 L2016.94 1213.27 L2017.53 1213.27 L2018.11 1213.27 L2018.7 1213.27 L2019.28 1213.27 L2019.87 1213.27 L2020.46 1213.27 L2021.04 1213.27 L2021.63 1213.27 L2022.22 1213.27 L2022.8 1213.27 L2023.39 1213.27 L2023.98 1213.27 L2024.56 1213.27 L2025.15 1213.27 L2025.73 1213.27 L2026.32 1213.27 L2026.91 1213.27 L2027.49 1213.27 L2028.08 1213.27 L2028.67 1213.27 L2029.25 1213.27 L2029.84 1213.27 L2030.43 1213.27 L2031.01 1213.27 L2031.6 1213.27 L2032.19 1213.27 L2032.77 1213.27 L2033.36 1213.27 L2033.94 1213.27 L2034.53 1213.27 L2035.12 1213.27 L2035.7 1213.27 L2036.29 1213.27 L2036.88 1213.27 L2037.46 1213.27 L2038.05 1213.27 L2038.64 1213.27 L2039.22 1213.27 L2039.81 1213.27 L2040.4 1213.27 L2040.98 1213.27 L2041.57 1213.27 L2042.15 1213.27 L2042.74 1213.27 L2043.33 1213.27 L2043.91 1213.27 L2044.5 1213.27 L2045.09 1213.27 L2045.67 1213.27 L2046.26 1213.27 L2046.85 1213.27 L2047.43 1213.27 L2048.02 1213.27 L2048.6 1213.27 L2049.19 1213.27 L2049.78 1213.27 L2050.36 1213.27 L2050.95 1213.27 L2051.54 1213.27 L2052.12 1213.27 L2052.71 1213.27 L2053.3 1213.27 L2053.88 1213.27 L2054.47 1213.27 L2055.06 1213.27 L2055.64 1213.27 L2056.23 1213.27 L2056.81 1213.27 L2057.4 1213.27 L2057.99 1213.27 L2058.57 1213.27 L2059.16 1213.27 L2059.75 1213.27 L2060.33 1213.27 L2060.92 1213.27 L2061.51 1213.27 L2062.09 1213.27 L2062.68 1213.27 L2063.27 1213.27 L2063.85 1213.27 L2064.44 1213.27 L2065.02 1213.27 L2065.61 1213.27 L2066.2 1213.27 L2066.78 1213.27 L2067.37 1213.27 L2067.96 1213.27 L2068.54 1213.27 L2069.13 1213.27 L2069.72 1213.27 L2070.3 1213.27 L2070.89 1213.27 L2071.48 1213.27 L2072.06 1213.27 L2072.65 1213.27 L2073.23 1213.27 L2073.82 1213.27 L2074.41 1213.27 L2074.99 1213.27 L2075.58 1213.27 L2076.17 1213.27 L2076.75 1213.27 L2077.34 1213.27 L2077.93 1213.27 L2078.51 1213.27 L2079.1 1213.27 L2079.68 1213.27 L2080.27 1213.27 L2080.86 1213.27 L2081.44 1213.27 L2082.03 1213.27 L2082.62 1213.27 L2083.2 1213.27 L2083.79 1213.27 L2084.38 1213.27 L2084.96 1213.27 L2085.55 1213.27 L2086.14 1213.27 L2086.72 1213.27 L2087.31 1213.27 L2087.89 1213.27 L2088.48 1213.27 L2089.07 1213.27 L2089.65 1213.27 L2090.24 1213.27 L2090.83 1213.27 L2091.41 1213.27 L2092 1213.27 L2092.59 1213.27 L2093.17 1213.27 L2093.76 1213.27 L2094.35 1213.27 L2094.93 1213.27 L2095.52 1213.27 L2096.1 1213.27 L2096.69 1213.27 L2097.28 1213.27 L2097.86 1213.27 L2098.45 1213.27 L2099.04 1213.27 L2099.62 1213.27 L2100.21 1213.27 L2100.8 1213.27 L2101.38 1213.27 L2101.97 1213.27 L2102.55 1213.27 L2103.14 1213.27 L2103.73 1213.27 L2104.31 1213.27 L2104.9 1213.27 L2105.49 1213.27 L2106.07 1213.27 L2106.66 1213.27 L2107.25 1213.27 L2107.83 1213.27 L2108.42 1213.27 L2109.01 1213.27 L2109.59 1213.27 L2110.18 1213.27 L2110.76 1213.27 L2111.35 1213.27 L2111.94 1213.27 L2112.52 1213.27 L2113.11 1213.27 L2113.7 1213.27 L2114.28 1213.27 L2114.87 1213.27 L2115.46 1213.27 L2116.04 1213.27 L2116.63 1213.27 L2117.22 1213.27 L2117.8 1213.27 L2118.39 1213.27 L2118.97 1213.27 L2119.56 1213.27 L2120.15 1213.27 L2120.73 1213.27 L2121.32 1213.27 L2121.91 1213.27 L2122.49 1213.27 L2123.08 1213.27 L2123.67 1213.27 L2124.25 1213.27 L2124.84 1213.27 L2125.42 1213.27 L2126.01 1213.27 L2126.6 1213.27 L2127.18 1213.27 L2127.77 1213.27 L2128.36 1213.27 L2128.94 1213.27 L2129.53 1213.27 L2130.12 1213.27 L2130.7 1213.27 L2131.29 1213.27 L2131.88 1213.27 L2132.46 1213.27 L2133.05 1213.27 L2133.63 1213.27 L2134.22 1213.27 L2134.81 1213.27 L2135.39 1213.27 L2135.98 1213.27 L2136.57 1213.27 L2137.15 1213.27 L2137.74 1213.27 L2138.33 1213.27 L2138.91 1213.27 L2139.5 1213.27 L2140.09 1213.27 L2140.67 1213.27 L2141.26 1213.27 L2141.84 1213.27 L2142.43 1213.27 L2143.02 1213.27 L2143.6 1213.27 L2144.19 1213.27 L2144.78 1213.27 L2145.36 1213.27 L2145.95 1213.27 L2146.54 1213.27 L2147.12 1213.27 L2147.71 1213.27 L2148.3 1213.27 L2148.88 1213.27 L2149.47 1213.27 L2150.05 1213.27 L2150.64 1213.27 L2151.23 1213.27 L2151.81 1213.27 L2152.4 1213.27 L2152.99 1213.27 L2153.57 1213.27 L2154.16 1213.27 L2154.75 1213.27 L2155.33 1213.27 L2155.92 1213.27 L2156.5 1213.27 L2157.09 1213.27 L2157.68 1213.27 L2158.26 1213.27 L2158.26 1213.12 L2157.68 1213.12 L2157.09 1213.12 L2156.5 1213.12 L2155.92 1213.12 L2155.33 1213.12 L2154.75 1213.12 L2154.16 1213.12 L2153.57 1213.12 L2152.99 1213.12 L2152.4 1213.12 L2151.81 1213.12 L2151.23 1213.12 L2150.64 1213.12 L2150.05 1213.12 L2149.47 1213.12 L2148.88 1213.12 L2148.3 1213.12 L2147.71 1213.12 L2147.12 1213.12 L2146.54 1213.12 L2145.95 1213.12 L2145.36 1213.12 L2144.78 1213.12 L2144.19 1213.12 L2143.6 1213.12 L2143.02 1213.12 L2142.43 1213.12 L2141.84 1213.12 L2141.26 1213.12 L2140.67 1213.12 L2140.09 1213.12 L2139.5 1213.12 L2138.91 1213.12 L2138.33 1213.12 L2137.74 1213.12 L2137.15 1213.12 L2136.57 1213.12 L2135.98 1213.12 L2135.39 1213.12 L2134.81 1213.12 L2134.22 1213.12 L2133.63 1213.12 L2133.05 1213.12 L2132.46 1213.12 L2131.88 1213.12 L2131.29 1213.12 L2130.7 1213.12 L2130.12 1213.12 L2129.53 1213.12 L2128.94 1213.12 L2128.36 1213.12 L2127.77 1213.12 L2127.18 1213.12 L2126.6 1213.12 L2126.01 1213.12 L2125.42 1213.12 L2124.84 1213.12 L2124.25 1213.12 L2123.67 1213.12 L2123.08 1213.12 L2122.49 1213.12 L2121.91 1213.12 L2121.32 1213.12 L2120.73 1213.12 L2120.15 1213.12 L2119.56 1213.12 L2118.97 1213.12 L2118.39 1213.12 L2117.8 1213.12 L2117.22 1213.12 L2116.63 1213.12 L2116.04 1213.12 L2115.46 1213.12 L2114.87 1213.12 L2114.28 1213.12 L2113.7 1213.12 L2113.11 1213.12 L2112.52 1213.12 L2111.94 1213.12 L2111.35 1213.12 L2110.76 1213.12 L2110.18 1213.12 L2109.59 1213.12 L2109.01 1213.12 L2108.42 1213.12 L2107.83 1213.12 L2107.25 1213.12 L2106.66 1213.12 L2106.07 1213.12 L2105.49 1213.12 L2104.9 1213.12 L2104.31 1213.12 L2103.73 1213.12 L2103.14 1213.12 L2102.55 1213.12 L2101.97 1213.12 L2101.38 1213.12 L2100.8 1213.12 L2100.21 1213.12 L2099.62 1213.12 L2099.04 1213.12 L2098.45 1213.12 L2097.86 1213.12 L2097.28 1213.12 L2096.69 1213.12 L2096.1 1213.12 L2095.52 1213.12 L2094.93 1213.12 L2094.35 1213.12 L2093.76 1213.12 L2093.17 1213.12 L2092.59 1213.12 L2092 1213.12 L2091.41 1213.12 L2090.83 1213.12 L2090.24 1213.12 L2089.65 1213.12 L2089.07 1213.12 L2088.48 1213.12 L2087.89 1213.12 L2087.31 1213.12 L2086.72 1213.12 L2086.14 1213.12 L2085.55 1213.12 L2084.96 1213.12 L2084.38 1213.12 L2083.79 1213.12 L2083.2 1213.12 L2082.62 1213.12 L2082.03 1213.12 L2081.44 1213.12 L2080.86 1213.12 L2080.27 1213.12 L2079.68 1213.12 L2079.1 1213.12 L2078.51 1213.12 L2077.93 1213.12 L2077.34 1213.12 L2076.75 1213.12 L2076.17 1213.12 L2075.58 1213.12 L2074.99 1213.12 L2074.41 1213.12 L2073.82 1213.12 L2073.23 1213.12 L2072.65 1213.12 L2072.06 1213.12 L2071.48 1213.12 L2070.89 1213.12 L2070.3 1213.12 L2069.72 1213.12 L2069.13 1213.12 L2068.54 1213.12 L2067.96 1213.12 L2067.37 1213.12 L2066.78 1213.12 L2066.2 1213.12 L2065.61 1213.12 L2065.02 1213.12 L2064.44 1213.12 L2063.85 1213.12 L2063.27 1213.12 L2062.68 1213.12 L2062.09 1213.12 L2061.51 1213.12 L2060.92 1213.12 L2060.33 1213.12 L2059.75 1213.12 L2059.16 1213.12 L2058.57 1213.12 L2057.99 1213.12 L2057.4 1213.12 L2056.81 1213.12 L2056.23 1213.12 L2055.64 1213.12 L2055.06 1213.12 L2054.47 1213.12 L2053.88 1213.12 L2053.3 1213.12 L2052.71 1213.12 L2052.12 1213.12 L2051.54 1213.12 L2050.95 1213.12 L2050.36 1213.12 L2049.78 1213.12 L2049.19 1213.12 L2048.6 1213.12 L2048.02 1213.12 L2047.43 1213.12 L2046.85 1213.12 L2046.26 1213.12 L2045.67 1213.12 L2045.09 1213.12 L2044.5 1213.12 L2043.91 1213.12 L2043.33 1213.12 L2042.74 1213.12 L2042.15 1213.12 L2041.57 1213.12 L2040.98 1213.12 L2040.4 1213.12 L2039.81 1213.12 L2039.22 1213.12 L2038.64 1213.12 L2038.05 1213.12 L2037.46 1213.12 L2036.88 1213.12 L2036.29 1213.12 L2035.7 1213.12 L2035.12 1213.12 L2034.53 1213.12 L2033.94 1213.12 L2033.36 1213.12 L2032.77 1213.12 L2032.19 1213.12 L2031.6 1213.12 L2031.01 1213.12 L2030.43 1213.12 L2029.84 1213.12 L2029.25 1213.12 L2028.67 1213.12 L2028.08 1213.12 L2027.49 1213.12 L2026.91 1213.12 L2026.32 1213.12 L2025.73 1213.12 L2025.15 1213.12 L2024.56 1213.12 L2023.98 1213.12 L2023.39 1213.12 L2022.8 1213.12 L2022.22 1213.12 L2021.63 1213.12 L2021.04 1213.12 L2020.46 1213.12 L2019.87 1213.12 L2019.28 1213.12 L2018.7 1213.12 L2018.11 1213.12 L2017.53 1213.12 L2016.94 1213.12 L2016.35 1213.12 L2015.77 1213.12 L2015.18 1213.12 L2014.59 1213.12 L2014.01 1213.12 L2013.42 1213.12 L2012.83 1213.12 L2012.25 1213.12 L2011.66 1213.12 L2011.07 1213.12 L2010.49 1213.12 L2009.9 1213.12 L2009.32 1213.12 L2008.73 1213.12 L2008.14 1213.12 L2007.56 1213.12 L2006.97 1213.12 L2006.38 1213.12 L2005.8 1213.12 L2005.21 1213.12 L2004.62 1213.12 L2004.04 1213.12 L2003.45 1213.12 L2002.86 1213.12 L2002.28 1213.12 L2001.69 1213.12 L2001.11 1213.12 L2000.52 1213.12 L1999.93 1213.12 L1999.35 1213.12 L1998.76 1213.12 L1998.17 1213.12 L1997.59 1213.12 L1997 1213.12 L1996.41 1213.12 L1995.83 1213.12 L1995.24 1213.12 L1994.65 1213.12 L1994.07 1213.12 L1993.48 1213.12 L1992.9 1213.12 L1992.31 1213.12 L1991.72 1213.12 L1991.14 1213.12 L1990.55 1213.12 L1989.96 1213.12 L1989.38 1213.12 L1988.79 1213.12 L1988.2 1213.12 L1987.62 1213.12 L1987.03 1213.12 L1986.45 1213.12 L1985.86 1213.12 L1985.27 1213.12 L1984.69 1213.12 L1984.1 1213.12 L1983.51 1213.12 L1982.93 1213.12 L1982.34 1213.12 L1981.75 1213.12 L1981.17 1213.12 L1980.58 1213.12 L1979.99 1213.12 L1979.41 1213.12 L1978.82 1213.12 L1978.24 1213.12 L1977.65 1213.12 L1977.06 1213.12 L1976.48 1213.12 L1975.89 1213.12 L1975.3 1213.12 L1974.72 1213.12 L1974.13 1213.12 L1973.54 1213.12 L1972.96 1213.12 L1972.37 1213.12 L1971.78 1213.12 L1971.2 1213.12 L1970.61 1213.12 L1970.03 1213.12 L1969.44 1213.12 L1968.85 1213.12 L1968.27 1213.12 L1967.68 1213.12 L1967.09 1213.12 L1966.51 1213.12 L1965.92 1213.12 L1965.33 1213.12 L1964.75 1213.12 L1964.16 1213.12 L1963.58 1213.12 L1962.99 1213.12 L1962.4 1213.12 L1961.82 1213.12 L1961.23 1213.12 L1960.64 1213.12 L1960.06 1213.12 L1959.47 1213.12 L1958.88 1213.12 L1958.3 1213.12 L1957.71 1213.12 L1957.12 1213.12 L1956.54 1213.12 L1955.95 1213.12 L1955.37 1213.12 L1954.78 1213.12 L1954.19 1213.12 L1953.61 1213.12 L1953.02 1213.12 L1952.43 1213.12 L1951.85 1213.12 L1951.26 1213.12 L1950.67 1213.12 L1950.09 1213.12 L1949.5 1213.12 L1948.91 1213.12 L1948.33 1213.12 L1947.74 1213.12 L1947.16 1213.12 L1946.57 1213.12 L1945.98 1213.12 L1945.4 1213.12 L1944.81 1213.12 L1944.22 1213.12 L1943.64 1213.12 L1943.05 1213.12 L1942.46 1213.12 L1941.88 1213.12 L1941.29 1213.12 L1940.71 1213.12 L1940.12 1213.12 L1939.53 1213.12 L1938.95 1213.12 L1938.36 1213.12 L1937.77 1213.12 L1937.19 1213.12 L1936.6 1213.12 L1936.01 1213.12 L1935.43 1213.12 L1934.84 1213.12 L1934.25 1213.12 L1933.67 1213.12 L1933.08 1213.12 L1932.5 1213.12 L1931.91 1213.12 L1931.32 1213.12 L1930.74 1213.12 L1930.15 1213.12 L1929.56 1213.12 L1928.98 1213.12 L1928.39 1213.12 L1927.8 1213.12 L1927.22 1213.12 L1926.63 1213.12 L1926.04 1213.12 L1925.46 1213.12 L1924.87 1213.12 L1924.29 1213.12 L1923.7 1213.12 L1923.11 1213.12 L1922.53 1213.12 L1921.94 1213.12 L1921.35 1213.12 L1920.77 1213.12 L1920.18 1213.12 L1919.59 1213.12 L1919.01 1213.12 L1918.42 1213.12 L1917.83 1213.12 L1917.25 1213.12 L1916.66 1213.12 L1916.08 1213.12 L1915.49 1213.12 L1914.9 1213.12 L1914.32 1213.12 L1913.73 1213.12 L1913.14 1213.12 L1912.56 1213.12 L1911.97 1213.12 L1911.38 1213.12 L1910.8 1213.12 L1910.21 1213.12 L1909.63 1213.12 L1909.04 1213.12 L1908.45 1213.12 L1907.87 1213.12 L1907.28 1213.12 L1906.69 1213.12 L1906.11 1213.12 L1905.52 1213.12 L1904.93 1213.12 L1904.35 1213.12 L1903.76 1213.12 L1903.17 1213.12 L1902.59 1213.12 L1902 1213.12 L1901.42 1213.12 L1900.83 1213.12 L1900.24 1213.12 L1899.66 1213.12 L1899.07 1213.12 L1898.48 1213.12 L1897.9 1213.12 L1897.31 1213.12 L1896.72 1213.12 L1896.14 1213.12 L1895.55 1213.12 L1894.96 1213.12 L1894.38 1213.12 L1893.79 1213.12 L1893.21 1213.12 L1892.62 1213.12 L1892.03 1213.12 L1891.45 1213.12 L1890.86 1213.12 L1890.27 1213.12 L1889.69 1213.12 L1889.1 1213.12 L1888.51 1213.12 L1887.93 1213.12 L1887.34 1213.12 L1886.76 1213.12 L1886.17 1213.12 L1885.58 1213.12 L1885 1213.12 L1884.41 1213.12 L1883.82 1213.12 L1883.24 1213.12 L1882.65 1213.12 L1882.06 1213.12 L1881.48 1213.12 L1880.89 1213.12 L1880.3 1213.12 L1879.72 1213.12 L1879.13 1213.12 L1878.55 1213.12 L1877.96 1213.12 L1877.37 1213.12 L1876.79 1213.12 L1876.2 1213.12 L1875.61 1213.12 L1875.03 1213.12 L1874.44 1213.12 L1873.85 1213.12 L1873.27 1213.12 L1872.68 1213.12 L1872.09 1213.12 L1871.51 1213.12 L1870.92 1213.12 L1870.34 1213.12 L1869.75 1213.12 L1869.16 1213.12 L1868.58 1213.12 L1867.99 1213.12 L1867.4 1213.12 L1866.82 1213.12 L1866.23 1213.12 L1865.64 1213.12 L1865.06 1213.12 L1864.47 1213.12 L1863.88 1213.12 L1863.3 1213.12 L1862.71 1213.12 L1862.13 1213.12 L1861.54 1213.12 L1860.95 1213.12 L1860.37 1213.12 L1859.78 1213.12 L1859.19 1213.12 L1858.61 1213.12 L1858.02 1213.12 L1857.43 1213.12 L1856.85 1213.12 L1856.26 1213.12 L1855.68 1213.12 L1855.09 1213.12 L1854.5 1213.12 L1853.92 1213.12 L1853.33 1213.12 L1852.74 1213.12 L1852.16 1213.12 L1851.57 1213.12 L1850.98 1213.12 L1850.4 1213.12 L1849.81 1213.12 L1849.22 1213.12 L1848.64 1213.12 L1848.05 1213.12 L1847.47 1213.12 L1846.88 1213.12 L1846.29 1213.12 L1845.71 1213.12 L1845.12 1213.12 L1844.53 1213.12 L1843.95 1213.12 L1843.36 1213.12 L1842.77 1213.12 L1842.19 1213.12 L1841.6 1213.12 L1841.01 1213.12 L1840.43 1213.12 L1839.84 1213.12 L1839.26 1213.12 L1838.67 1213.12 L1838.08 1213.12 L1837.5 1213.12 L1836.91 1213.12 L1836.32 1213.12 L1835.74 1213.12 L1835.15 1213.12 L1834.56 1213.12 L1833.98 1213.12 L1833.39 1213.12 L1832.81 1213.12 L1832.22 1213.12 L1831.63 1213.12 L1831.05 1213.12 L1830.46 1213.12 L1829.87 1213.12 L1829.29 1213.12 L1828.7 1213.12 L1828.11 1213.12 L1827.53 1213.12 L1826.94 1213.12 L1826.35 1213.12 L1825.77 1213.12 L1825.18 1213.12 L1824.6 1213.12 L1824.01 1213.12 L1823.42 1213.12 L1822.84 1213.12 L1822.25 1213.12 L1821.66 1213.12 L1821.08 1213.12 L1820.49 1213.12 L1819.9 1213.12 L1819.32 1213.12 L1818.73 1213.12 L1818.14 1213.12 L1817.56 1213.12 L1816.97 1213.12 L1816.39 1213.12 L1815.8 1213.12 L1815.21 1213.12 L1814.63 1213.12 L1814.04 1213.12 L1813.45 1213.12 L1812.87 1213.12 L1812.28 1213.12 L1811.69 1213.12 L1811.11 1213.12 L1810.52 1213.12 L1809.94 1213.12 L1809.35 1213.12 L1808.76 1213.12 L1808.18 1213.12 L1807.59 1213.12 L1807 1213.12 L1806.42 1213.12 L1805.83 1213.12 L1805.24 1213.12 L1804.66 1213.12 L1804.07 1213.12 L1803.48 1213.12 L1802.9 1213.12 L1802.31 1213.12 L1801.73 1213.12 L1801.14 1213.12 L1800.55 1213.12 L1799.97 1213.12 L1799.38 1213.12 L1798.79 1213.12 L1798.21 1213.12 L1797.62 1213.12 L1797.03 1213.12 L1796.45 1213.12 L1795.86 1213.12 L1795.27 1213.12 L1794.69 1213.12 L1794.1 1213.12 L1793.52 1213.12 L1792.93 1213.12 L1792.34 1213.12 L1791.76 1213.12 L1791.17 1213.12 L1790.58 1213.12 L1790 1213.12 L1789.41 1213.12 L1788.82 1213.12 L1788.24 1213.12 L1787.65 1213.12 L1787.06 1213.12 L1786.48 1213.12 L1785.89 1213.12 L1785.31 1213.12 L1784.72 1213.12 L1784.13 1213.12 L1783.55 1213.12 L1782.96 1213.12 L1782.37 1213.12 L1781.79 1213.12 L1781.2 1213.12 L1780.61 1213.12 L1780.03 1213.12 L1779.44 1213.12 L1778.86 1213.12 L1778.27 1213.12 L1777.68 1213.12 L1777.1 1213.12 L1776.51 1213.12 L1775.92 1213.12 L1775.34 1213.12 L1774.75 1213.12 L1774.16 1213.12 L1773.58 1213.12 L1772.99 1213.12 L1772.4 1213.12 L1771.82 1213.12 L1771.23 1213.12 L1770.65 1213.12 L1770.06 1213.12 L1769.47 1213.12 L1768.89 1213.12 L1768.3 1213.12 L1767.71 1213.12 L1767.13 1213.12 L1766.54 1213.12 L1765.95 1213.12 L1765.37 1213.12 L1764.78 1213.12 L1764.19 1213.12 L1763.61 1213.12 L1763.02 1213.12 L1762.44 1213.12 L1761.85 1213.12 L1761.26 1213.12 L1760.68 1213.12 L1760.09 1213.12 L1759.5 1213.12 L1758.92 1213.12 L1758.33 1213.12 L1757.74 1213.12 L1757.16 1213.12 L1756.57 1213.12 L1755.99 1213.12 L1755.4 1213.12 L1754.81 1213.12 L1754.23 1213.12 L1753.64 1213.12 L1753.05 1213.12 L1752.47 1213.12 L1751.88 1213.12 L1751.29 1213.12 L1750.71 1213.12 L1750.12 1213.12 L1749.53 1213.12 L1748.95 1213.12 L1748.36 1213.12 L1747.78 1213.12 L1747.19 1213.12 L1746.6 1213.12 L1746.02 1213.12 L1745.43 1213.12 L1744.84 1213.12 L1744.26 1213.12 L1743.67 1213.12 L1743.08 1213.12 L1742.5 1213.12 L1741.91 1213.12 L1741.32 1213.12 L1740.74 1213.12 L1740.15 1213.12 L1739.57 1213.12 L1738.98 1213.12 L1738.39 1213.12 L1737.81 1213.12 L1737.22 1213.12 L1736.63 1213.12 L1736.05 1213.12 L1735.46 1213.12 L1734.87 1213.12 L1734.29 1213.12 L1733.7 1213.12 L1733.11 1213.12 L1732.53 1213.12 L1731.94 1213.12 L1731.36 1213.12 L1730.77 1213.12 L1730.18 1213.12 L1729.6 1213.12 L1729.01 1213.12 L1728.42 1213.12 L1727.84 1213.12 L1727.25 1213.12 L1726.66 1213.12 L1726.08 1213.12 L1725.49 1213.12 L1724.91 1213.12 L1724.32 1213.12 L1723.73 1213.12 L1723.15 1213.12 L1722.56 1213.12 L1721.97 1213.12 L1721.39 1213.12 L1720.8 1213.12 L1720.21 1213.12 L1719.63 1213.12 L1719.04 1213.12 L1718.45 1213.12 L1717.87 1213.12 L1717.28 1213.12 L1716.7 1213.12 L1716.11 1213.12 L1715.52 1213.12 L1714.94 1213.12 L1714.35 1213.12 L1713.76 1213.12 L1713.18 1213.12 L1712.59 1213.12 L1712 1213.12 L1711.42 1213.12 L1710.83 1213.12 L1710.24 1213.12 L1709.66 1213.12 L1709.07 1213.12 L1708.49 1213.12 L1707.9 1213.12 L1707.31 1213.12 L1706.73 1213.12 L1706.14 1213.12 L1705.55 1213.12 L1704.97 1213.12 L1704.38 1213.12 L1703.79 1213.12 L1703.21 1213.12 L1702.62 1213.12 L1702.04 1213.12 L1701.45 1213.12 L1700.86 1213.12 L1700.28 1213.12 L1699.69 1213.12 L1699.1 1213.12 L1698.52 1213.12 L1697.93 1213.12 L1697.34 1213.12 L1696.76 1213.12 L1696.17 1213.12 L1695.58 1213.12 L1695 1213.12 L1694.41 1213.12 L1693.83 1213.12 L1693.24 1213.12 L1692.65 1213.12 L1692.07 1213.12 L1691.48 1213.12 L1690.89 1213.12 L1690.31 1213.12 L1689.72 1213.12 L1689.13 1213.12 L1688.55 1213.12 L1687.96 1213.12 L1687.37 1213.12 L1686.79 1213.12 L1686.2 1213.12 L1685.62 1213.12 L1685.03 1213.12 L1684.44 1213.12 L1683.86 1213.12 L1683.27 1213.12 L1682.68 1213.12 L1682.1 1213.12 L1681.51 1213.12 L1680.92 1213.12 L1680.34 1213.12 L1679.75 1213.12 L1679.17 1213.12 L1678.58 1213.12 L1677.99 1213.12 L1677.41 1213.12 L1676.82 1213.12 L1676.23 1213.12 L1675.65 1213.12 L1675.06 1213.12 L1674.47 1213.12 L1673.89 1213.12 L1673.3 1213.12 L1672.71 1213.12 L1672.13 1213.12 L1671.54 1213.12 L1670.96 1213.12 L1670.37 1213.12 L1669.78 1213.12 L1669.2 1213.12 L1668.61 1213.12 L1668.02 1213.12 L1667.44 1213.12 L1666.85 1213.12 L1666.26 1213.12 L1665.68 1213.12 L1665.09 1213.12 L1664.5 1213.12 L1663.92 1213.12 L1663.33 1213.12 L1662.75 1213.12 L1662.16 1213.12 L1661.57 1213.12 L1660.99 1213.12 L1660.4 1213.12 L1659.81 1213.12 L1659.23 1213.12 L1658.64 1213.12 L1658.05 1213.12 L1657.47 1213.12 L1656.88 1213.12 L1656.29 1213.12 L1655.71 1213.12 L1655.12 1213.12 L1654.54 1213.12 L1653.95 1213.12 L1653.36 1213.12 L1652.78 1213.12 L1652.19 1213.12 L1651.6 1213.12 L1651.02 1213.12 L1650.43 1213.12 L1649.84 1213.12 L1649.26 1213.12 L1648.67 1213.12 L1648.09 1213.12 L1647.5 1213.12 L1646.91 1213.12 L1646.33 1213.12 L1645.74 1213.12 L1645.15 1213.12 L1644.57 1213.12 L1643.98 1213.12 L1643.39 1213.12 L1642.81 1213.12 L1642.22 1213.12 L1641.63 1213.12 L1641.05 1213.12 L1640.46 1213.12 L1639.88 1213.12 L1639.29 1213.12 L1638.7 1213.12 L1638.12 1213.12 L1637.53 1213.12 L1636.94 1213.12 L1636.36 1213.12 L1635.77 1213.12 L1635.18 1213.12 L1634.6 1213.12 L1634.01 1213.12 L1633.42 1213.12 L1632.84 1213.12 L1632.25 1213.12 L1631.67 1213.12 L1631.08 1213.12 L1630.49 1213.12 L1629.91 1213.12 L1629.32 1213.12 L1628.73 1213.12 L1628.15 1213.12 L1627.56 1213.12 L1626.97 1213.12 L1626.39 1213.12 L1625.8 1213.12 L1625.22 1213.12 L1624.63 1213.12 L1624.04 1213.12 L1623.46 1213.12 L1622.87 1213.12 L1622.28 1213.12 L1621.7 1213.12 L1621.11 1213.12 L1620.52 1213.12 L1619.94 1213.12 L1619.35 1213.12 L1618.76 1213.12 L1618.18 1213.12 L1617.59 1213.12 L1617.01 1213.12 L1616.42 1213.12 L1615.83 1213.12 L1615.25 1213.12 L1614.66 1213.12 L1614.07 1213.12 L1613.49 1213.12 L1612.9 1213.12 L1612.31 1213.12 L1611.73 1213.12 L1611.14 1213.12 L1610.55 1213.12 L1609.97 1213.12 L1609.38 1213.12 L1608.8 1213.12 L1608.21 1213.12 L1607.62 1213.12 L1607.04 1213.12 L1606.45 1213.12 L1605.86 1213.12 L1605.28 1213.12 L1604.69 1213.12 L1604.1 1213.12 L1603.52 1213.12 L1602.93 1213.12 L1602.34 1213.12 L1601.76 1213.12 L1601.17 1213.12 L1600.59 1213.12 L1600 1213.12 L1599.41 1213.12 L1598.83 1213.12 L1598.24 1213.12 L1597.65 1213.12 L1597.07 1213.12 L1596.48 1213.12 L1595.89 1213.12 L1595.31 1213.12 L1594.72 1213.12 L1594.14 1213.12 L1593.55 1213.12 L1592.96 1213.12 L1592.38 1213.12 L1591.79 1213.12 L1591.2 1213.12 L1590.62 1213.12 L1590.03 1213.12 L1589.44 1213.12 L1588.86 1213.12 L1588.27 1213.12 L1587.68 1213.12 L1587.1 1213.12 L1586.51 1213.12 L1585.93 1213.12 L1585.34 1213.12 L1584.75 1213.12 L1584.17 1213.12 L1583.58 1213.12 L1582.99 1213.12 L1582.41 1213.12 L1581.82 1213.12 L1581.23 1213.12 L1580.65 1213.12 L1580.06 1213.12 L1579.47 1213.12 L1578.89 1213.12 L1578.3 1213.12 L1577.72 1213.12 L1577.13 1213.12 L1576.54 1213.12 L1575.96 1213.12 L1575.37 1213.12 L1574.78 1213.12 L1574.2 1213.12 L1573.61 1213.12 L1573.02 1213.12 L1572.44 1213.12 L1571.85 1213.12 L1571.27 1213.12 L1570.68 1213.12 L1570.09 1213.12 L1569.51 1213.12 L1568.92 1213.12 L1568.33 1213.12 L1567.75 1213.12 L1567.16 1213.12 L1566.57 1213.12 L1565.99 1213.12 L1565.4 1213.12 L1564.81 1213.12 L1564.23 1213.12 L1563.64 1213.12 L1563.06 1213.12 L1562.47 1213.12 L1561.88 1213.12 L1561.3 1213.12 L1560.71 1213.12 L1560.12 1213.12 L1559.54 1213.12 L1558.95 1213.12 L1558.36 1213.12 L1557.78 1213.12 L1557.19 1213.12 L1556.6 1213.12 L1556.02 1213.12 L1555.43 1213.12 L1554.85 1213.12 L1554.26 1213.12 L1553.67 1213.12 L1553.09 1213.12 L1552.5 1213.12 L1551.91 1213.12 L1551.33 1213.12 L1550.74 1213.12 L1550.15 1213.12 L1549.57 1213.12 L1548.98 1213.12 L1548.4 1213.12 L1547.81 1213.12 L1547.22 1213.12 L1546.64 1213.12 L1546.05 1213.12 L1545.46 1213.12 L1544.88 1213.12 L1544.29 1213.12 L1543.7 1213.12 L1543.12 1213.12 L1542.53 1213.12 L1541.94 1213.12 L1541.36 1213.12 L1540.77 1213.12 L1540.19 1213.12 L1539.6 1213.12 L1539.01 1213.12 L1538.43 1213.12 L1537.84 1213.12 L1537.25 1213.12 L1536.67 1213.12 L1536.08 1213.12 L1535.49 1213.12 L1534.91 1213.12 L1534.32 1213.12 L1533.73 1213.12 L1533.15 1213.12 L1532.56 1213.12 L1531.98 1213.12 L1531.39 1213.12 L1530.8 1213.12 L1530.22 1213.12 L1529.63 1213.12 L1529.04 1213.12 L1528.46 1213.12 L1527.87 1213.12 L1527.28 1213.12 L1526.7 1213.12 L1526.11 1213.12 L1525.52 1213.12 L1524.94 1213.12 L1524.35 1213.12 L1523.77 1213.12 L1523.18 1213.12 L1522.59 1213.12 L1522.01 1213.12 L1521.42 1213.12 L1520.83 1213.12 L1520.25 1213.12 L1519.66 1213.12 L1519.07 1213.12 L1518.49 1213.12 L1517.9 1213.12 L1517.32 1213.12 L1516.73 1213.12 L1516.14 1213.12 L1515.56 1213.12 L1514.97 1213.12 L1514.38 1213.12 L1513.8 1213.12 L1513.21 1213.12 L1512.62 1213.12 L1512.04 1213.12 L1511.45 1213.12 L1510.86 1213.12 L1510.28 1213.12 L1509.69 1213.12 L1509.11 1213.12 L1508.52 1213.12 L1507.93 1213.12 L1507.35 1213.12 L1506.76 1213.12 L1506.17 1213.12 L1505.59 1213.12 L1505 1213.12 L1504.41 1213.12 L1503.83 1213.12 L1503.24 1213.12 L1502.65 1213.12 L1502.07 1213.12 L1501.48 1213.12 L1500.9 1213.12 L1500.31 1213.12 L1499.72 1213.12 L1499.14 1213.12 L1498.55 1213.12 L1497.96 1213.12 L1497.38 1213.12 L1496.79 1213.12 L1496.2 1213.12 L1495.62 1213.12 L1495.03 1213.12 L1494.45 1213.12 L1493.86 1213.12 L1493.27 1213.12 L1492.69 1213.12 L1492.1 1213.12 L1491.51 1213.12 L1490.93 1213.12 L1490.34 1213.12 L1489.75 1213.12 L1489.17 1213.12 L1488.58 1213.12 L1487.99 1213.12 L1487.41 1213.12 L1486.82 1213.12 L1486.24 1213.12 L1485.65 1213.12 L1485.06 1213.12 L1484.48 1213.12 L1483.89 1213.12 L1483.3 1213.12 L1482.72 1213.12 L1482.13 1213.12 L1481.54 1213.12 L1480.96 1213.12 L1480.37 1213.12 L1479.78 1213.12 L1479.2 1213.12 L1478.61 1213.12 L1478.03 1213.12 L1477.44 1213.12 L1476.85 1213.12 L1476.27 1213.12 L1475.68 1213.12 L1475.09 1213.12 L1474.51 1213.12 L1473.92 1213.12 L1473.33 1213.12 L1472.75 1213.12 L1472.16 1213.12 L1471.57 1213.12 L1470.99 1213.12 L1470.4 1213.12 L1469.82 1213.12 L1469.23 1213.12 L1468.64 1213.12 L1468.06 1213.12 L1467.47 1213.12 L1466.88 1213.12 L1466.3 1213.12 L1465.71 1213.12 L1465.12 1213.12 L1464.54 1213.12 L1463.95 1213.12 L1463.37 1213.12 L1462.78 1213.12 L1462.19 1213.12 L1461.61 1213.12 L1461.02 1213.12 L1460.43 1213.12 L1459.85 1213.12 L1459.26 1213.12 L1458.67 1213.12 L1458.09 1213.12 L1457.5 1213.12 L1456.91 1213.12 L1456.33 1213.12 L1455.74 1213.12 L1455.16 1213.12 L1454.57 1213.12 L1453.98 1213.12 L1453.4 1213.12 L1452.81 1213.12 L1452.22 1213.12 L1451.64 1213.12 L1451.05 1213.12 L1450.46 1213.12 L1449.88 1213.12 L1449.29 1213.12 L1448.7 1213.12 L1448.12 1213.12 L1447.53 1213.12 L1446.95 1213.12 L1446.36 1213.12 L1445.77 1213.12 L1445.19 1213.12 L1444.6 1213.12 L1444.01 1213.12 L1443.43 1213.12 L1442.84 1213.12 L1442.25 1213.12 L1441.67 1213.12 L1441.08 1213.12 L1440.5 1213.12 L1439.91 1213.12 L1439.32 1213.12 L1438.74 1213.12 L1438.15 1213.12 L1437.56 1213.12 L1436.98 1213.12 L1436.39 1213.12 L1435.8 1213.12 L1435.22 1213.12 L1434.63 1213.12 L1434.04 1213.12 L1433.46 1213.12 L1432.87 1213.12 L1432.29 1213.12 L1431.7 1213.12 L1431.11 1213.12 L1430.53 1213.12 L1429.94 1213.12 L1429.35 1213.12 L1428.77 1213.12 L1428.18 1213.12 L1427.59 1213.12 L1427.01 1213.12 L1426.42 1213.12 L1425.83 1213.12 L1425.25 1213.12 L1424.66 1213.12 L1424.08 1213.12 L1423.49 1213.12 L1422.9 1213.12 L1422.32 1213.12 L1421.73 1213.12 L1421.14 1213.12 L1420.56 1213.12 L1419.97 1213.12 L1419.38 1213.12 L1418.8 1213.12 L1418.21 1213.12 L1417.63 1213.12 L1417.04 1213.12 L1416.45 1213.12 L1415.87 1213.12 L1415.28 1213.12 L1414.69 1213.12 L1414.11 1213.12 L1413.52 1213.12 L1412.93 1213.12 L1412.35 1213.12 L1411.76 1213.12 L1411.17 1213.12 L1410.59 1213.12 L1410 1213.12 L1409.42 1213.12 L1408.83 1213.12 L1408.24 1213.12 L1407.66 1213.12 L1407.07 1213.12 L1406.48 1213.12 L1405.9 1213.12 L1405.31 1213.12 L1404.72 1213.12 L1404.14 1213.12 L1403.55 1213.12 L1402.96 1213.12 L1402.38 1213.12 L1401.79 1213.12 L1401.21 1213.12 L1400.62 1213.12 L1400.03 1213.12 L1399.45 1213.12 L1398.86 1213.12 L1398.27 1213.12 L1397.69 1213.12 L1397.1 1213.12 L1396.51 1213.12 L1395.93 1213.12 L1395.34 1213.12 L1394.75 1213.12 L1394.17 1213.12 L1393.58 1213.12 L1393 1213.12 L1392.41 1213.12 L1391.82 1213.12 L1391.24 1213.12 L1390.65 1213.12 L1390.06 1213.12 L1389.48 1213.12 L1388.89 1213.12 L1388.3 1213.12 L1387.72 1213.12 L1387.13 1213.12 L1386.55 1213.12 L1385.96 1213.12 L1385.37 1213.12 L1384.79 1213.12 L1384.2 1213.12 L1383.61 1213.12 L1383.03 1213.12 L1382.44 1213.12 L1381.85 1213.12 L1381.27 1213.12 L1380.68 1213.12 L1380.09 1213.12 L1379.51 1213.12 L1378.92 1213.12 L1378.34 1213.12 L1377.75 1213.12 L1377.16 1213.12 L1376.58 1213.12 L1375.99 1213.12 L1375.4 1213.12 L1374.82 1213.12 L1374.23 1213.12 L1373.64 1213.12 L1373.06 1213.12 L1372.47 1213.12 L1371.88 1213.12 L1371.3 1213.12 L1370.71 1213.12 L1370.13 1213.12 L1369.54 1213.12 L1368.95 1213.12 L1368.37 1213.12 L1367.78 1213.12 L1367.19 1213.12 L1366.61 1213.12 L1366.02 1213.12 L1365.43 1213.12 L1364.85 1213.12 L1364.26 1213.12 L1363.68 1213.12 L1363.09 1213.12 L1362.5 1213.12 L1361.92 1213.12 L1361.33 1213.12 L1360.74 1213.12 L1360.16 1213.12 L1359.57 1213.12 L1358.98 1213.12 L1358.4 1213.12 L1357.81 1213.12 L1357.22 1213.12 L1356.64 1213.12 L1356.05 1213.12 L1355.47 1213.12 L1354.88 1213.12 L1354.29 1213.12 L1353.71 1213.12 L1353.12 1213.12 L1352.53 1213.12 L1351.95 1213.12 L1351.36 1213.12 L1350.77 1213.12 L1350.19 1213.12 L1349.6 1213.12 L1349.01 1213.12 L1348.43 1213.12 L1347.84 1213.12 L1347.26 1213.12 L1346.67 1213.12 L1346.08 1213.12 L1345.5 1213.12 L1344.91 1213.12 L1344.32 1213.12 L1343.74 1213.12 L1343.15 1213.12 L1342.56 1213.12 L1341.98 1213.12 L1341.39 1213.12 L1340.8 1213.12 L1340.22 1213.12 L1339.63 1213.12 L1339.05 1213.12 L1338.46 1213.12 L1337.87 1213.12 L1337.29 1213.12 L1336.7 1213.12 L1336.11 1213.12 L1335.53 1213.12 L1334.94 1213.12 L1334.35 1213.12 L1333.77 1213.12 L1333.18 1213.12 L1332.6 1213.12 L1332.01 1213.12 L1331.42 1213.12 L1330.84 1213.12 L1330.25 1213.12 L1329.66 1213.12 L1329.08 1213.12 L1328.49 1213.12 L1327.9 1213.12 L1327.32 1213.12 L1326.73 1213.12 L1326.14 1213.12 L1325.56 1213.12 L1324.97 1213.12 L1324.39 1213.12 L1323.8 1213.12 L1323.21 1213.12 L1322.63 1213.12 L1322.04 1213.12 L1321.45 1213.12 L1320.87 1213.12 L1320.28 1213.12 L1319.69 1213.12 L1319.11 1213.12 L1318.52 1213.12 L1317.93 1213.12 L1317.35 1213.12 L1316.76 1213.12 L1316.18 1213.12 L1315.59 1213.12 L1315 1213.12 L1314.42 1213.12 L1313.83 1213.12 L1313.24 1213.12 L1312.66 1213.12 L1312.07 1213.12 L1311.48 1213.12 L1310.9 1213.12 L1310.31 1213.12 L1309.73 1213.12 L1309.14 1213.12 L1308.55 1213.12 L1307.97 1213.12 L1307.38 1213.12 L1306.79 1213.12 L1306.21 1213.12 L1305.62 1213.12 L1305.03 1213.12 L1304.45 1213.12 L1303.86 1213.12 L1303.27 1213.12 L1302.69 1213.12 L1302.1 1213.12 L1301.52 1213.12 L1300.93 1213.12 L1300.34 1213.12 L1299.76 1213.12 L1299.17 1213.12 L1298.58 1213.12 L1298 1213.12 L1297.41 1213.12 L1296.82 1213.12 L1296.24 1213.12 L1295.65 1213.12 L1295.06 1213.12 L1294.48 1213.12 L1293.89 1213.12 L1293.31 1213.12 L1292.72 1213.12 L1292.13 1213.12 L1291.55 1213.12 L1290.96 1213.12 L1290.37 1213.12 L1289.79 1213.12 L1289.2 1213.12 L1288.61 1213.12 L1288.03 1213.12 L1287.44 1213.12 L1286.86 1213.12 L1286.27 1213.12 L1285.68 1213.12 L1285.1 1213.12 L1284.51 1213.12 L1283.92 1213.12 L1283.34 1213.12 L1282.75 1213.12 L1282.16 1213.12 L1281.58 1213.12 L1280.99 1213.12 L1280.4 1213.12 L1279.82 1213.12 L1279.23 1213.12 L1278.65 1213.12 L1278.06 1213.12 L1277.47 1213.12 L1276.89 1213.12 L1276.3 1213.12 L1275.71 1213.12 L1275.13 1213.12 L1274.54 1213.12 L1273.95 1213.12 L1273.37 1213.12 L1272.78 1213.12 L1272.19 1213.12 L1271.61 1213.12 L1271.02 1213.12 L1270.44 1213.12 L1269.85 1213.12 L1269.26 1213.12 L1268.68 1213.12 L1268.09 1213.12 L1267.5 1213.12 L1266.92 1213.12 L1266.33 1213.12 L1265.74 1213.12 L1265.16 1213.12 L1264.57 1213.12 L1263.98 1213.12 L1263.4 1213.12 L1262.81 1213.12 L1262.23 1213.12 L1261.64 1213.12 L1261.05 1213.12 L1260.47 1213.12 L1259.88 1213.12 L1259.29 1213.12 L1258.71 1213.12 L1258.12 1213.12 L1257.53 1213.12 L1256.95 1213.12 L1256.36 1213.12 L1255.78 1213.12 L1255.19 1213.12 L1254.6 1213.12 L1254.02 1213.12 L1253.43 1213.12 L1252.84 1213.12 L1252.26 1213.12 L1251.67 1213.12 L1251.08 1213.12 L1250.5 1213.12 L1249.91 1213.12 L1249.32 1213.12 L1248.74 1213.12 L1248.15 1213.12 L1247.57 1213.12 L1246.98 1213.12 L1246.39 1213.12 L1245.81 1213.12 L1245.22 1213.12 L1244.63 1213.12 L1244.05 1213.12 L1243.46 1213.12 L1242.87 1213.12 L1242.29 1213.12 L1241.7 1213.12 L1241.11 1213.12 L1240.53 1213.12 L1239.94 1213.12 L1239.36 1213.12 L1238.77 1213.12 L1238.18 1213.12 L1237.6 1213.12 L1237.01 1213.12 L1236.42 1213.12 L1235.84 1213.12 L1235.25 1213.12 L1234.66 1213.12 L1234.08 1213.12 L1233.49 1213.12 L1232.91 1213.12 L1232.32 1213.12 L1231.73 1213.12 L1231.15 1213.12 L1230.56 1213.12 L1229.97 1213.12 L1229.39 1213.12 L1228.8 1213.12 L1228.21 1213.12 L1227.63 1213.12 L1227.04 1213.12 L1226.45 1213.12 L1225.87 1213.12 L1225.28 1213.12 L1224.7 1213.12 L1224.11 1213.12 L1223.52 1213.12 L1222.94 1213.12 L1222.35 1213.12 L1221.76 1213.12 L1221.18 1213.12 L1220.59 1213.12 L1220 1213.12 L1219.42 1213.12 L1218.83 1213.12 L1218.24 1213.12 L1217.66 1213.12 L1217.07 1213.12 L1216.49 1213.12 L1215.9 1213.12 L1215.31 1213.12 L1214.73 1213.12 L1214.14 1213.12 L1213.55 1213.12 L1212.97 1213.12 L1212.38 1213.12 L1211.79 1213.12 L1211.21 1213.12 L1210.62 1213.12 L1210.03 1213.12 L1209.45 1213.12 L1208.86 1213.12 L1208.28 1213.12 L1207.69 1213.12 L1207.1 1213.12 L1206.52 1213.12 L1205.93 1213.12 L1205.34 1213.12 L1204.76 1213.12 L1204.17 1213.12 L1203.58 1213.12 L1203 1213.12 L1202.41 1213.12 L1201.83 1213.12 L1201.24 1213.12 L1200.65 1213.12 L1200.07 1213.12 L1199.48 1213.12 L1198.89 1213.12 L1198.31 1213.12 L1197.72 1213.12 L1197.13 1213.12 L1196.55 1213.12 L1195.96 1213.12 L1195.37 1213.12 L1194.79 1213.12 L1194.2 1213.12 L1193.62 1213.12 L1193.03 1213.12 L1192.44 1213.12 L1191.86 1213.12 L1191.27 1213.12 L1190.68 1213.12 L1190.1 1213.12 L1189.51 1213.12 L1188.92 1213.12 L1188.34 1213.12 L1187.75 1213.12 L1187.16 1213.12 L1186.58 1213.12 L1185.99 1213.12 L1185.41 1213.12 L1184.82 1213.12 L1184.23 1213.12 L1183.65 1213.12 L1183.06 1213.12 L1182.47 1213.12 L1181.89 1213.12 L1181.3 1213.12 L1180.71 1213.12 L1180.13 1213.12 L1179.54 1213.12 L1178.96 1213.12 L1178.37 1213.12 L1177.78 1213.12 L1177.2 1213.12 L1176.61 1213.12 L1176.02 1213.12 L1175.44 1213.12 L1174.85 1213.12 L1174.26 1213.12 L1173.68 1213.12 L1173.09 1213.12 L1172.5 1213.12 L1171.92 1213.12 L1171.33 1213.12 L1170.75 1213.12 L1170.16 1213.12 L1169.57 1213.12 L1168.99 1213.12 L1168.4 1213.12 L1167.81 1213.12 L1167.23 1213.12 L1166.64 1213.12 L1166.05 1213.12 L1165.47 1213.12 L1164.88 1213.12 L1164.29 1213.12 L1163.71 1213.12 L1163.12 1213.12 L1162.54 1213.12 L1161.95 1213.12 L1161.36 1213.12 L1160.78 1213.12 L1160.19 1213.12 L1159.6 1213.12 L1159.02 1213.12 L1158.43 1213.12 L1157.84 1213.12 L1157.26 1213.12 L1156.67 1213.12 L1156.09 1213.12 L1155.5 1213.12 L1154.91 1213.12 L1154.33 1213.12 L1153.74 1213.12 L1153.15 1213.12 L1152.57 1213.12 L1151.98 1213.12 L1151.39 1213.12 L1150.81 1213.12 L1150.22 1213.12 L1149.63 1213.12 L1149.05 1213.12 L1148.46 1213.12 L1147.88 1213.12 L1147.29 1213.12 L1146.7 1213.12 L1146.12 1213.12 L1145.53 1213.12 L1144.94 1213.12 L1144.36 1213.12 L1143.77 1213.12 L1143.18 1213.12 L1142.6 1213.12 L1142.01 1213.12 L1141.42 1213.12 L1140.84 1213.12 L1140.25 1213.12 L1139.67 1213.12 L1139.08 1213.12 L1138.49 1213.12 L1137.91 1213.12 L1137.32 1213.12 L1136.73 1213.12 L1136.15 1213.12 L1135.56 1213.12 L1134.97 1213.12 L1134.39 1213.12 L1133.8 1213.12 L1133.21 1213.12 L1132.63 1213.12 L1132.04 1213.12 L1131.46 1213.12 L1130.87 1213.12 L1130.28 1213.12 L1129.7 1213.12 L1129.11 1213.12 L1128.52 1213.12 L1127.94 1213.12 L1127.35 1213.12 L1126.76 1213.12 L1126.18 1213.12 L1125.59 1213.12 L1125.01 1213.12 L1124.42 1213.12 L1123.83 1213.12 L1123.25 1213.12 L1122.66 1213.12 L1122.07 1213.12 L1121.49 1213.12 L1120.9 1213.12 L1120.31 1213.12 L1119.73 1213.12 L1119.14 1213.12 L1118.55 1213.12 L1117.97 1213.12 L1117.38 1213.12 L1116.8 1213.12 L1116.21 1213.12 L1115.62 1213.12 L1115.04 1213.12 L1114.45 1213.12 L1113.86 1213.12 L1113.28 1213.12 L1112.69 1213.12 L1112.1 1213.12 L1111.52 1213.12 L1110.93 1213.12 L1110.34 1213.12 L1109.76 1213.12 L1109.17 1213.12 L1108.59 1213.12 L1108 1213.12 L1107.41 1213.12 L1106.83 1213.12 L1106.24 1213.12 L1105.65 1213.12 L1105.07 1213.12 L1104.48 1213.12 L1103.89 1213.12 L1103.31 1213.12 L1102.72 1213.12 L1102.14 1213.12 L1101.55 1213.12 L1100.96 1213.12 L1100.38 1213.12 L1099.79 1213.12 L1099.2 1213.12 L1098.62 1213.12 L1098.03 1213.12 L1097.44 1213.12 L1096.86 1213.12 L1096.27 1213.12 L1095.68 1213.12 L1095.1 1213.12 L1094.51 1213.12 L1093.93 1213.12 L1093.34 1213.12 L1092.75 1213.12 L1092.17 1213.12 L1091.58 1213.12 L1090.99 1213.12 L1090.41 1213.12 L1089.82 1213.12 L1089.23 1213.12 L1088.65 1213.12 L1088.06 1213.12 L1087.47 1213.12 L1086.89 1213.12 L1086.3 1213.12 L1085.72 1213.12 L1085.13 1213.12 L1084.54 1213.12 L1083.96 1213.12 L1083.37 1213.12 L1082.78 1213.12 L1082.2 1213.12 L1081.61 1213.12 L1081.02 1213.12 L1080.44 1213.12 L1079.85 1213.12 L1079.26 1213.12 L1078.68 1213.12 L1078.09 1213.12 L1077.51 1213.12 L1076.92 1213.12 L1076.33 1213.12 L1075.75 1213.12 L1075.16 1213.12 L1074.57 1213.12 L1073.99 1213.12 L1073.4 1213.12 L1072.81 1213.12 L1072.23 1213.12 L1071.64 1213.12 L1071.06 1213.12 L1070.47 1213.12 L1069.88 1213.12 L1069.3 1213.12 L1068.71 1213.12 L1068.12 1213.12 L1067.54 1213.12 L1066.95 1213.12 L1066.36 1213.12 L1065.78 1213.12 L1065.19 1213.12 L1064.6 1213.12 L1064.02 1213.12 L1063.43 1213.12 L1062.85 1213.12 L1062.26 1213.12 L1061.67 1213.12 L1061.09 1213.12 L1060.5 1213.12 L1059.91 1213.12 L1059.33 1213.12 L1058.74 1213.12 L1058.15 1213.12 L1057.57 1213.12 L1056.98 1213.12 L1056.39 1213.12 L1055.81 1213.12 L1055.22 1213.12 L1054.64 1213.12 L1054.05 1213.12 L1053.46 1213.12 L1052.88 1213.12 L1052.29 1213.12 L1051.7 1213.12 L1051.12 1213.12 L1050.53 1213.12 L1049.94 1213.12 L1049.36 1213.12 L1048.77 1213.12 L1048.19 1213.12 L1047.6 1213.12 L1047.01 1213.12 L1046.43 1213.12 L1045.84 1213.12 L1045.25 1213.12 L1044.67 1213.12 L1044.08 1213.12 L1043.49 1213.12 L1042.91 1213.12 L1042.32 1213.12 L1041.73 1213.12 L1041.15 1213.12 L1040.56 1213.12 L1039.98 1213.12 L1039.39 1213.12 L1038.8 1213.12 L1038.22 1213.12 L1037.63 1213.12 L1037.04 1213.12 L1036.46 1213.12 L1035.87 1213.12 L1035.28 1213.12 L1034.7 1213.12 L1034.11 1213.12 L1033.52 1213.12 L1032.94 1213.12 L1032.35 1213.12 L1031.77 1213.12 L1031.18 1213.12 L1030.59 1213.12 L1030.01 1213.12 L1029.42 1213.12 L1028.83 1213.12 L1028.25 1213.12 L1027.66 1213.12 L1027.07 1213.12 L1026.49 1213.12 L1025.9 1213.12 L1025.32 1213.12 L1024.73 1213.12 L1024.14 1213.12 L1023.56 1213.12 L1022.97 1213.12 L1022.38 1213.12 L1021.8 1213.12 L1021.21 1213.12 L1020.62 1213.12 L1020.04 1213.12 L1019.45 1213.12 L1018.86 1213.12 L1018.28 1213.12 L1017.69 1213.12 L1017.11 1213.12 L1016.52 1213.12 L1015.93 1213.12 L1015.35 1213.12 L1014.76 1213.12 L1014.17 1213.12 L1013.59 1213.12 L1013 1213.12 L1012.41 1213.12 L1011.83 1213.12 L1011.24 1213.12 L1010.65 1213.12 L1010.07 1213.12 L1009.48 1213.12 L1008.9 1213.12 L1008.31 1213.12 L1007.72 1213.12 L1007.14 1213.12 L1006.55 1213.12 L1005.96 1213.12 L1005.38 1213.12 L1004.79 1213.12 L1004.2 1213.12 L1003.62 1213.12 L1003.03 1213.12 L1002.44 1213.12 L1001.86 1213.12 L1001.27 1213.12 L1000.69 1213.12 L1000.1 1213.12 L999.513 1213.12 L998.926 1213.12 L998.34 1213.12 L997.754 1213.12 L997.167 1213.12 L996.581 1213.12 L995.994 1213.12 L995.408 1213.12 L994.822 1213.12 L994.235 1213.12 L993.649 1213.12 L993.062 1213.12 L992.476 1213.12 L991.889 1213.12 L991.303 1213.12 L990.717 1213.12 L990.13 1213.12 L989.544 1213.12 L988.957 1213.12 L988.371 1213.12 L987.785 1213.12 L987.198 1213.12 L986.612 1213.12 L986.025 1213.12  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.19 986.612,1213.19 987.198,1213.19 987.785,1213.19 988.371,1213.19 988.957,1213.19 989.544,1213.19 990.13,1213.19 990.717,1213.19 991.303,1213.19 991.889,1213.19 992.476,1213.19 993.062,1213.19 993.649,1213.19 994.235,1213.19 994.822,1213.19 995.408,1213.19 995.994,1213.19 996.581,1213.19 997.167,1213.19 997.754,1213.19 998.34,1213.19 998.926,1213.19 999.513,1213.19 1000.1,1213.19 1000.69,1213.19 1001.27,1213.19 1001.86,1213.19 1002.44,1213.19 1003.03,1213.19 1003.62,1213.19 1004.2,1213.19 1004.79,1213.19 1005.38,1213.19 1005.96,1213.19 1006.55,1213.19 1007.14,1213.19 1007.72,1213.19 1008.31,1213.19 1008.9,1213.19 1009.48,1213.19 1010.07,1213.19 1010.65,1213.19 1011.24,1213.19 1011.83,1213.19 1012.41,1213.19 1013,1213.19 1013.59,1213.19 1014.17,1213.19 1014.76,1213.19 1015.35,1213.19 1015.93,1213.19 1016.52,1213.19 1017.11,1213.19 1017.69,1213.19 1018.28,1213.19 1018.86,1213.19 1019.45,1213.19 1020.04,1213.19 1020.62,1213.19 1021.21,1213.19 1021.8,1213.19 1022.38,1213.19 1022.97,1213.19 1023.56,1213.19 1024.14,1213.19 1024.73,1213.19 1025.32,1213.19 1025.9,1213.19 1026.49,1213.19 1027.07,1213.19 1027.66,1213.19 1028.25,1213.19 1028.83,1213.19 1029.42,1213.19 1030.01,1213.19 1030.59,1213.19 1031.18,1213.19 1031.77,1213.19 1032.35,1213.19 1032.94,1213.19 1033.52,1213.19 1034.11,1213.19 1034.7,1213.19 1035.28,1213.19 1035.87,1213.19 1036.46,1213.19 1037.04,1213.19 1037.63,1213.19 1038.22,1213.19 1038.8,1213.19 1039.39,1213.19 1039.98,1213.19 1040.56,1213.19 1041.15,1213.19 1041.73,1213.19 1042.32,1213.19 1042.91,1213.19 1043.49,1213.19 1044.08,1213.19 1044.67,1213.19 1045.25,1213.19 1045.84,1213.19 1046.43,1213.19 1047.01,1213.19 1047.6,1213.19 1048.19,1213.19 1048.77,1213.19 1049.36,1213.19 1049.94,1213.19 1050.53,1213.19 1051.12,1213.19 1051.7,1213.19 1052.29,1213.19 1052.88,1213.19 1053.46,1213.19 1054.05,1213.19 1054.64,1213.19 1055.22,1213.19 1055.81,1213.19 1056.39,1213.19 1056.98,1213.19 1057.57,1213.19 1058.15,1213.19 1058.74,1213.19 1059.33,1213.19 1059.91,1213.19 1060.5,1213.19 1061.09,1213.19 1061.67,1213.19 1062.26,1213.19 1062.85,1213.19 1063.43,1213.19 1064.02,1213.19 1064.6,1213.19 1065.19,1213.19 1065.78,1213.19 1066.36,1213.19 1066.95,1213.19 1067.54,1213.19 1068.12,1213.19 1068.71,1213.19 1069.3,1213.19 1069.88,1213.19 1070.47,1213.19 1071.06,1213.19 1071.64,1213.19 1072.23,1213.19 1072.81,1213.19 1073.4,1213.19 1073.99,1213.19 1074.57,1213.19 1075.16,1213.19 1075.75,1213.19 1076.33,1213.19 1076.92,1213.19 1077.51,1213.19 1078.09,1213.19 1078.68,1213.19 1079.26,1213.19 1079.85,1213.19 1080.44,1213.19 1081.02,1213.19 1081.61,1213.19 1082.2,1213.19 1082.78,1213.19 1083.37,1213.19 1083.96,1213.19 1084.54,1213.19 1085.13,1213.19 1085.72,1213.19 1086.3,1213.19 1086.89,1213.19 1087.47,1213.19 1088.06,1213.19 1088.65,1213.19 1089.23,1213.19 1089.82,1213.19 1090.41,1213.19 1090.99,1213.19 1091.58,1213.19 1092.17,1213.19 1092.75,1213.19 1093.34,1213.19 1093.93,1213.19 1094.51,1213.19 1095.1,1213.19 1095.68,1213.19 1096.27,1213.19 1096.86,1213.19 1097.44,1213.19 1098.03,1213.19 1098.62,1213.19 1099.2,1213.19 1099.79,1213.19 1100.38,1213.19 1100.96,1213.19 1101.55,1213.19 1102.14,1213.19 1102.72,1213.19 1103.31,1213.19 1103.89,1213.19 1104.48,1213.19 1105.07,1213.19 1105.65,1213.19 1106.24,1213.19 1106.83,1213.19 1107.41,1213.19 1108,1213.19 1108.59,1213.19 1109.17,1213.19 1109.76,1213.19 1110.34,1213.19 1110.93,1213.19 1111.52,1213.19 1112.1,1213.19 1112.69,1213.19 1113.28,1213.19 1113.86,1213.19 1114.45,1213.19 1115.04,1213.19 1115.62,1213.19 1116.21,1213.19 1116.8,1213.19 1117.38,1213.19 1117.97,1213.19 1118.55,1213.19 1119.14,1213.19 1119.73,1213.19 1120.31,1213.19 1120.9,1213.19 1121.49,1213.19 1122.07,1213.19 1122.66,1213.19 1123.25,1213.19 1123.83,1213.19 1124.42,1213.19 1125.01,1213.19 1125.59,1213.19 1126.18,1213.19 1126.76,1213.19 1127.35,1213.19 1127.94,1213.19 1128.52,1213.19 1129.11,1213.19 1129.7,1213.19 1130.28,1213.19 1130.87,1213.19 1131.46,1213.19 1132.04,1213.19 1132.63,1213.19 1133.21,1213.19 1133.8,1213.19 1134.39,1213.19 1134.97,1213.19 1135.56,1213.19 1136.15,1213.19 1136.73,1213.19 1137.32,1213.19 1137.91,1213.19 1138.49,1213.19 1139.08,1213.19 1139.67,1213.19 1140.25,1213.19 1140.84,1213.19 1141.42,1213.19 1142.01,1213.19 1142.6,1213.19 1143.18,1213.19 1143.77,1213.19 1144.36,1213.19 1144.94,1213.19 1145.53,1213.19 1146.12,1213.19 1146.7,1213.19 1147.29,1213.19 1147.88,1213.19 1148.46,1213.19 1149.05,1213.19 1149.63,1213.19 1150.22,1213.19 1150.81,1213.19 1151.39,1213.19 1151.98,1213.19 1152.57,1213.19 1153.15,1213.19 1153.74,1213.19 1154.33,1213.19 1154.91,1213.19 1155.5,1213.19 1156.09,1213.19 1156.67,1213.19 1157.26,1213.19 1157.84,1213.19 1158.43,1213.19 1159.02,1213.19 1159.6,1213.19 1160.19,1213.19 1160.78,1213.19 1161.36,1213.19 1161.95,1213.19 1162.54,1213.19 1163.12,1213.19 1163.71,1213.19 1164.29,1213.19 1164.88,1213.19 1165.47,1213.19 1166.05,1213.19 1166.64,1213.19 1167.23,1213.19 1167.81,1213.19 1168.4,1213.19 1168.99,1213.19 1169.57,1213.19 1170.16,1213.19 1170.75,1213.19 1171.33,1213.19 1171.92,1213.19 1172.5,1213.19 1173.09,1213.19 1173.68,1213.19 1174.26,1213.19 1174.85,1213.19 1175.44,1213.19 1176.02,1213.19 1176.61,1213.19 1177.2,1213.19 1177.78,1213.19 1178.37,1213.19 1178.96,1213.19 1179.54,1213.19 1180.13,1213.19 1180.71,1213.19 1181.3,1213.19 1181.89,1213.19 1182.47,1213.19 1183.06,1213.19 1183.65,1213.19 1184.23,1213.19 1184.82,1213.19 1185.41,1213.19 1185.99,1213.19 1186.58,1213.19 1187.16,1213.19 1187.75,1213.19 1188.34,1213.19 1188.92,1213.19 1189.51,1213.19 1190.1,1213.19 1190.68,1213.19 1191.27,1213.19 1191.86,1213.19 1192.44,1213.19 1193.03,1213.19 1193.62,1213.19 1194.2,1213.19 1194.79,1213.19 1195.37,1213.19 1195.96,1213.19 1196.55,1213.19 1197.13,1213.19 1197.72,1213.19 1198.31,1213.19 1198.89,1213.19 1199.48,1213.19 1200.07,1213.19 1200.65,1213.19 1201.24,1213.19 1201.83,1213.19 1202.41,1213.19 1203,1213.19 1203.58,1213.19 1204.17,1213.19 1204.76,1213.19 1205.34,1213.19 1205.93,1213.19 1206.52,1213.19 1207.1,1213.19 1207.69,1213.19 1208.28,1213.19 1208.86,1213.19 1209.45,1213.19 1210.03,1213.19 1210.62,1213.19 1211.21,1213.19 1211.79,1213.19 1212.38,1213.19 1212.97,1213.19 1213.55,1213.19 1214.14,1213.19 1214.73,1213.19 1215.31,1213.19 1215.9,1213.19 1216.49,1213.19 1217.07,1213.19 1217.66,1213.19 1218.24,1213.19 1218.83,1213.19 1219.42,1213.19 1220,1213.19 1220.59,1213.19 1221.18,1213.19 1221.76,1213.19 1222.35,1213.19 1222.94,1213.19 1223.52,1213.19 1224.11,1213.19 1224.7,1213.19 1225.28,1213.19 1225.87,1213.19 1226.45,1213.19 1227.04,1213.19 1227.63,1213.19 1228.21,1213.19 1228.8,1213.19 1229.39,1213.19 1229.97,1213.19 1230.56,1213.19 1231.15,1213.19 1231.73,1213.19 1232.32,1213.19 1232.91,1213.19 1233.49,1213.19 1234.08,1213.19 1234.66,1213.19 1235.25,1213.19 1235.84,1213.19 1236.42,1213.19 1237.01,1213.19 1237.6,1213.19 1238.18,1213.19 1238.77,1213.19 1239.36,1213.19 1239.94,1213.19 1240.53,1213.19 1241.11,1213.19 1241.7,1213.19 1242.29,1213.19 1242.87,1213.19 1243.46,1213.19 1244.05,1213.19 1244.63,1213.19 1245.22,1213.19 1245.81,1213.19 1246.39,1213.19 1246.98,1213.19 1247.57,1213.19 1248.15,1213.19 1248.74,1213.19 1249.32,1213.19 1249.91,1213.19 1250.5,1213.19 1251.08,1213.19 1251.67,1213.19 1252.26,1213.19 1252.84,1213.19 1253.43,1213.19 1254.02,1213.19 1254.6,1213.19 1255.19,1213.19 1255.78,1213.19 1256.36,1213.19 1256.95,1213.19 1257.53,1213.19 1258.12,1213.19 1258.71,1213.19 1259.29,1213.19 1259.88,1213.19 1260.47,1213.19 1261.05,1213.19 1261.64,1213.19 1262.23,1213.19 1262.81,1213.19 1263.4,1213.19 1263.98,1213.19 1264.57,1213.19 1265.16,1213.19 1265.74,1213.19 1266.33,1213.19 1266.92,1213.19 1267.5,1213.19 1268.09,1213.19 1268.68,1213.19 1269.26,1213.19 1269.85,1213.19 1270.44,1213.19 1271.02,1213.19 1271.61,1213.19 1272.19,1213.19 1272.78,1213.19 1273.37,1213.19 1273.95,1213.19 1274.54,1213.19 1275.13,1213.19 1275.71,1213.19 1276.3,1213.19 1276.89,1213.19 1277.47,1213.19 1278.06,1213.19 1278.65,1213.19 1279.23,1213.19 1279.82,1213.19 1280.4,1213.19 1280.99,1213.19 1281.58,1213.19 1282.16,1213.19 1282.75,1213.19 1283.34,1213.19 1283.92,1213.19 1284.51,1213.19 1285.1,1213.19 1285.68,1213.19 1286.27,1213.19 1286.86,1213.19 1287.44,1213.19 1288.03,1213.19 1288.61,1213.19 1289.2,1213.19 1289.79,1213.19 1290.37,1213.19 1290.96,1213.19 1291.55,1213.19 1292.13,1213.19 1292.72,1213.19 1293.31,1213.19 1293.89,1213.19 1294.48,1213.19 1295.06,1213.19 1295.65,1213.19 1296.24,1213.19 1296.82,1213.19 1297.41,1213.19 1298,1213.19 1298.58,1213.19 1299.17,1213.19 1299.76,1213.19 1300.34,1213.19 1300.93,1213.19 1301.52,1213.19 1302.1,1213.19 1302.69,1213.19 1303.27,1213.19 1303.86,1213.19 1304.45,1213.19 1305.03,1213.19 1305.62,1213.19 1306.21,1213.19 1306.79,1213.19 1307.38,1213.19 1307.97,1213.19 1308.55,1213.19 1309.14,1213.19 1309.73,1213.19 1310.31,1213.19 1310.9,1213.19 1311.48,1213.19 1312.07,1213.19 1312.66,1213.19 1313.24,1213.19 1313.83,1213.19 1314.42,1213.19 1315,1213.19 1315.59,1213.19 1316.18,1213.19 1316.76,1213.19 1317.35,1213.19 1317.93,1213.19 1318.52,1213.19 1319.11,1213.19 1319.69,1213.19 1320.28,1213.19 1320.87,1213.19 1321.45,1213.19 1322.04,1213.19 1322.63,1213.19 1323.21,1213.19 1323.8,1213.19 1324.39,1213.19 1324.97,1213.19 1325.56,1213.19 1326.14,1213.19 1326.73,1213.19 1327.32,1213.19 1327.9,1213.19 1328.49,1213.19 1329.08,1213.19 1329.66,1213.19 1330.25,1213.19 1330.84,1213.19 1331.42,1213.19 1332.01,1213.19 1332.6,1213.19 1333.18,1213.19 1333.77,1213.19 1334.35,1213.19 1334.94,1213.19 1335.53,1213.19 1336.11,1213.19 1336.7,1213.19 1337.29,1213.19 1337.87,1213.19 1338.46,1213.19 1339.05,1213.19 1339.63,1213.19 1340.22,1213.19 1340.8,1213.19 1341.39,1213.19 1341.98,1213.19 1342.56,1213.19 1343.15,1213.19 1343.74,1213.19 1344.32,1213.19 1344.91,1213.19 1345.5,1213.19 1346.08,1213.19 1346.67,1213.19 1347.26,1213.19 1347.84,1213.19 1348.43,1213.19 1349.01,1213.19 1349.6,1213.19 1350.19,1213.19 1350.77,1213.19 1351.36,1213.19 1351.95,1213.19 1352.53,1213.19 1353.12,1213.19 1353.71,1213.19 1354.29,1213.19 1354.88,1213.19 1355.47,1213.19 1356.05,1213.19 1356.64,1213.19 1357.22,1213.19 1357.81,1213.19 1358.4,1213.19 1358.98,1213.19 1359.57,1213.19 1360.16,1213.19 1360.74,1213.19 1361.33,1213.19 1361.92,1213.19 1362.5,1213.19 1363.09,1213.19 1363.68,1213.19 1364.26,1213.19 1364.85,1213.19 1365.43,1213.19 1366.02,1213.19 1366.61,1213.19 1367.19,1213.19 1367.78,1213.19 1368.37,1213.19 1368.95,1213.19 1369.54,1213.19 1370.13,1213.19 1370.71,1213.19 1371.3,1213.19 1371.88,1213.19 1372.47,1213.19 1373.06,1213.19 1373.64,1213.19 1374.23,1213.19 1374.82,1213.19 1375.4,1213.19 1375.99,1213.19 1376.58,1213.19 1377.16,1213.19 1377.75,1213.19 1378.34,1213.19 1378.92,1213.19 1379.51,1213.19 1380.09,1213.19 1380.68,1213.19 1381.27,1213.19 1381.85,1213.19 1382.44,1213.19 1383.03,1213.19 1383.61,1213.19 1384.2,1213.19 1384.79,1213.19 1385.37,1213.19 1385.96,1213.19 1386.55,1213.19 1387.13,1213.19 1387.72,1213.19 1388.3,1213.19 1388.89,1213.19 1389.48,1213.19 1390.06,1213.19 1390.65,1213.19 1391.24,1213.19 1391.82,1213.19 1392.41,1213.19 1393,1213.19 1393.58,1213.19 1394.17,1213.19 1394.75,1213.19 1395.34,1213.19 1395.93,1213.19 1396.51,1213.19 1397.1,1213.19 1397.69,1213.19 1398.27,1213.19 1398.86,1213.19 1399.45,1213.19 1400.03,1213.19 1400.62,1213.19 1401.21,1213.19 1401.79,1213.19 1402.38,1213.19 1402.96,1213.19 1403.55,1213.19 1404.14,1213.19 1404.72,1213.19 1405.31,1213.19 1405.9,1213.19 1406.48,1213.19 1407.07,1213.19 1407.66,1213.19 1408.24,1213.19 1408.83,1213.19 1409.42,1213.19 1410,1213.19 1410.59,1213.19 1411.17,1213.19 1411.76,1213.19 1412.35,1213.19 1412.93,1213.19 1413.52,1213.19 1414.11,1213.19 1414.69,1213.19 1415.28,1213.19 1415.87,1213.19 1416.45,1213.19 1417.04,1213.19 1417.63,1213.19 1418.21,1213.19 1418.8,1213.19 1419.38,1213.19 1419.97,1213.19 1420.56,1213.19 1421.14,1213.19 1421.73,1213.19 1422.32,1213.19 1422.9,1213.19 1423.49,1213.19 1424.08,1213.19 1424.66,1213.19 1425.25,1213.19 1425.83,1213.19 1426.42,1213.19 1427.01,1213.19 1427.59,1213.19 1428.18,1213.19 1428.77,1213.19 1429.35,1213.19 1429.94,1213.19 1430.53,1213.19 1431.11,1213.19 1431.7,1213.19 1432.29,1213.19 1432.87,1213.19 1433.46,1213.19 1434.04,1213.19 1434.63,1213.19 1435.22,1213.19 1435.8,1213.19 1436.39,1213.19 1436.98,1213.19 1437.56,1213.19 1438.15,1213.19 1438.74,1213.19 1439.32,1213.19 1439.91,1213.19 1440.5,1213.19 1441.08,1213.19 1441.67,1213.19 1442.25,1213.19 1442.84,1213.19 1443.43,1213.19 1444.01,1213.19 1444.6,1213.19 1445.19,1213.19 1445.77,1213.19 1446.36,1213.19 1446.95,1213.19 1447.53,1213.19 1448.12,1213.19 1448.7,1213.19 1449.29,1213.19 1449.88,1213.19 1450.46,1213.19 1451.05,1213.19 1451.64,1213.19 1452.22,1213.19 1452.81,1213.19 1453.4,1213.19 1453.98,1213.19 1454.57,1213.19 1455.16,1213.19 1455.74,1213.19 1456.33,1213.19 1456.91,1213.19 1457.5,1213.19 1458.09,1213.19 1458.67,1213.19 1459.26,1213.19 1459.85,1213.19 1460.43,1213.19 1461.02,1213.19 1461.61,1213.19 1462.19,1213.19 1462.78,1213.19 1463.37,1213.19 1463.95,1213.19 1464.54,1213.19 1465.12,1213.19 1465.71,1213.19 1466.3,1213.19 1466.88,1213.19 1467.47,1213.19 1468.06,1213.19 1468.64,1213.19 1469.23,1213.19 1469.82,1213.19 1470.4,1213.19 1470.99,1213.19 1471.57,1213.19 1472.16,1213.19 1472.75,1213.19 1473.33,1213.19 1473.92,1213.19 1474.51,1213.19 1475.09,1213.19 1475.68,1213.19 1476.27,1213.19 1476.85,1213.19 1477.44,1213.19 1478.03,1213.19 1478.61,1213.19 1479.2,1213.19 1479.78,1213.19 1480.37,1213.19 1480.96,1213.19 1481.54,1213.19 1482.13,1213.19 1482.72,1213.19 1483.3,1213.19 1483.89,1213.19 1484.48,1213.19 1485.06,1213.19 1485.65,1213.19 1486.24,1213.19 1486.82,1213.19 1487.41,1213.19 1487.99,1213.19 1488.58,1213.19 1489.17,1213.19 1489.75,1213.19 1490.34,1213.19 1490.93,1213.19 1491.51,1213.19 1492.1,1213.19 1492.69,1213.19 1493.27,1213.19 1493.86,1213.19 1494.45,1213.19 1495.03,1213.19 1495.62,1213.19 1496.2,1213.19 1496.79,1213.19 1497.38,1213.19 1497.96,1213.19 1498.55,1213.19 1499.14,1213.19 1499.72,1213.19 1500.31,1213.19 1500.9,1213.19 1501.48,1213.19 1502.07,1213.19 1502.65,1213.19 1503.24,1213.19 1503.83,1213.19 1504.41,1213.19 1505,1213.19 1505.59,1213.19 1506.17,1213.19 1506.76,1213.19 1507.35,1213.19 1507.93,1213.19 1508.52,1213.19 1509.11,1213.19 1509.69,1213.19 1510.28,1213.19 1510.86,1213.19 1511.45,1213.19 1512.04,1213.19 1512.62,1213.19 1513.21,1213.19 1513.8,1213.19 1514.38,1213.19 1514.97,1213.19 1515.56,1213.19 1516.14,1213.19 1516.73,1213.19 1517.32,1213.19 1517.9,1213.19 1518.49,1213.19 1519.07,1213.19 1519.66,1213.19 1520.25,1213.19 1520.83,1213.19 1521.42,1213.19 1522.01,1213.19 1522.59,1213.19 1523.18,1213.19 1523.77,1213.19 1524.35,1213.19 1524.94,1213.19 1525.52,1213.19 1526.11,1213.19 1526.7,1213.19 1527.28,1213.19 1527.87,1213.19 1528.46,1213.19 1529.04,1213.19 1529.63,1213.19 1530.22,1213.19 1530.8,1213.19 1531.39,1213.19 1531.98,1213.19 1532.56,1213.19 1533.15,1213.19 1533.73,1213.19 1534.32,1213.19 1534.91,1213.19 1535.49,1213.19 1536.08,1213.19 1536.67,1213.19 1537.25,1213.19 1537.84,1213.19 1538.43,1213.19 1539.01,1213.19 1539.6,1213.19 1540.19,1213.19 1540.77,1213.19 1541.36,1213.19 1541.94,1213.19 1542.53,1213.19 1543.12,1213.19 1543.7,1213.19 1544.29,1213.19 1544.88,1213.19 1545.46,1213.19 1546.05,1213.19 1546.64,1213.19 1547.22,1213.19 1547.81,1213.19 1548.4,1213.19 1548.98,1213.19 1549.57,1213.19 1550.15,1213.19 1550.74,1213.19 1551.33,1213.19 1551.91,1213.19 1552.5,1213.19 1553.09,1213.19 1553.67,1213.19 1554.26,1213.19 1554.85,1213.19 1555.43,1213.19 1556.02,1213.19 1556.6,1213.19 1557.19,1213.19 1557.78,1213.19 1558.36,1213.19 1558.95,1213.19 1559.54,1213.19 1560.12,1213.19 1560.71,1213.19 1561.3,1213.19 1561.88,1213.19 1562.47,1213.19 1563.06,1213.19 1563.64,1213.19 1564.23,1213.19 1564.81,1213.19 1565.4,1213.19 1565.99,1213.19 1566.57,1213.19 1567.16,1213.19 1567.75,1213.19 1568.33,1213.19 1568.92,1213.19 1569.51,1213.19 1570.09,1213.19 1570.68,1213.19 1571.27,1213.19 1571.85,1213.19 1572.44,1213.19 1573.02,1213.19 1573.61,1213.19 1574.2,1213.19 1574.78,1213.19 1575.37,1213.19 1575.96,1213.19 1576.54,1213.19 1577.13,1213.19 1577.72,1213.19 1578.3,1213.19 1578.89,1213.19 1579.47,1213.19 1580.06,1213.19 1580.65,1213.19 1581.23,1213.19 1581.82,1213.19 1582.41,1213.19 1582.99,1213.19 1583.58,1213.19 1584.17,1213.19 1584.75,1213.19 1585.34,1213.19 1585.93,1213.19 1586.51,1213.19 1587.1,1213.19 1587.68,1213.19 1588.27,1213.19 1588.86,1213.19 1589.44,1213.19 1590.03,1213.19 1590.62,1213.19 1591.2,1213.19 1591.79,1213.19 1592.38,1213.19 1592.96,1213.19 1593.55,1213.19 1594.14,1213.19 1594.72,1213.19 1595.31,1213.19 1595.89,1213.19 1596.48,1213.19 1597.07,1213.19 1597.65,1213.19 1598.24,1213.19 1598.83,1213.19 1599.41,1213.19 1600,1213.19 1600.59,1213.19 1601.17,1213.19 1601.76,1213.19 1602.34,1213.19 1602.93,1213.19 1603.52,1213.19 1604.1,1213.19 1604.69,1213.19 1605.28,1213.19 1605.86,1213.19 1606.45,1213.19 1607.04,1213.19 1607.62,1213.19 1608.21,1213.19 1608.8,1213.19 1609.38,1213.19 1609.97,1213.19 1610.55,1213.19 1611.14,1213.19 1611.73,1213.19 1612.31,1213.19 1612.9,1213.19 1613.49,1213.19 1614.07,1213.19 1614.66,1213.19 1615.25,1213.19 1615.83,1213.19 1616.42,1213.19 1617.01,1213.19 1617.59,1213.19 1618.18,1213.19 1618.76,1213.19 1619.35,1213.19 1619.94,1213.19 1620.52,1213.19 1621.11,1213.19 1621.7,1213.19 1622.28,1213.19 1622.87,1213.19 1623.46,1213.19 1624.04,1213.19 1624.63,1213.19 1625.22,1213.19 1625.8,1213.19 1626.39,1213.19 1626.97,1213.19 1627.56,1213.19 1628.15,1213.19 1628.73,1213.19 1629.32,1213.19 1629.91,1213.19 1630.49,1213.19 1631.08,1213.19 1631.67,1213.19 1632.25,1213.19 1632.84,1213.19 1633.42,1213.19 1634.01,1213.19 1634.6,1213.19 1635.18,1213.19 1635.77,1213.19 1636.36,1213.19 1636.94,1213.19 1637.53,1213.19 1638.12,1213.19 1638.7,1213.19 1639.29,1213.19 1639.88,1213.19 1640.46,1213.19 1641.05,1213.19 1641.63,1213.19 1642.22,1213.19 1642.81,1213.19 1643.39,1213.19 1643.98,1213.19 1644.57,1213.19 1645.15,1213.19 1645.74,1213.19 1646.33,1213.19 1646.91,1213.19 1647.5,1213.19 1648.09,1213.19 1648.67,1213.19 1649.26,1213.19 1649.84,1213.19 1650.43,1213.19 1651.02,1213.19 1651.6,1213.19 1652.19,1213.19 1652.78,1213.19 1653.36,1213.19 1653.95,1213.19 1654.54,1213.19 1655.12,1213.19 1655.71,1213.19 1656.29,1213.19 1656.88,1213.19 1657.47,1213.19 1658.05,1213.19 1658.64,1213.19 1659.23,1213.19 1659.81,1213.19 1660.4,1213.19 1660.99,1213.19 1661.57,1213.19 1662.16,1213.19 1662.75,1213.19 1663.33,1213.19 1663.92,1213.19 1664.5,1213.19 1665.09,1213.19 1665.68,1213.19 1666.26,1213.19 1666.85,1213.19 1667.44,1213.19 1668.02,1213.19 1668.61,1213.19 1669.2,1213.19 1669.78,1213.19 1670.37,1213.19 1670.96,1213.19 1671.54,1213.19 1672.13,1213.19 1672.71,1213.19 1673.3,1213.19 1673.89,1213.19 1674.47,1213.19 1675.06,1213.19 1675.65,1213.19 1676.23,1213.19 1676.82,1213.19 1677.41,1213.19 1677.99,1213.19 1678.58,1213.19 1679.17,1213.19 1679.75,1213.19 1680.34,1213.19 1680.92,1213.19 1681.51,1213.19 1682.1,1213.19 1682.68,1213.19 1683.27,1213.19 1683.86,1213.19 1684.44,1213.19 1685.03,1213.19 1685.62,1213.19 1686.2,1213.19 1686.79,1213.19 1687.37,1213.19 1687.96,1213.19 1688.55,1213.19 1689.13,1213.19 1689.72,1213.19 1690.31,1213.19 1690.89,1213.19 1691.48,1213.19 1692.07,1213.19 1692.65,1213.19 1693.24,1213.19 1693.83,1213.19 1694.41,1213.19 1695,1213.19 1695.58,1213.19 1696.17,1213.19 1696.76,1213.19 1697.34,1213.19 1697.93,1213.19 1698.52,1213.19 1699.1,1213.19 1699.69,1213.19 1700.28,1213.19 1700.86,1213.19 1701.45,1213.19 1702.04,1213.19 1702.62,1213.19 1703.21,1213.19 1703.79,1213.19 1704.38,1213.19 1704.97,1213.19 1705.55,1213.19 1706.14,1213.19 1706.73,1213.19 1707.31,1213.19 1707.9,1213.19 1708.49,1213.19 1709.07,1213.19 1709.66,1213.19 1710.24,1213.19 1710.83,1213.19 1711.42,1213.19 1712,1213.19 1712.59,1213.19 1713.18,1213.19 1713.76,1213.19 1714.35,1213.19 1714.94,1213.19 1715.52,1213.19 1716.11,1213.19 1716.7,1213.19 1717.28,1213.19 1717.87,1213.19 1718.45,1213.19 1719.04,1213.19 1719.63,1213.19 1720.21,1213.19 1720.8,1213.19 1721.39,1213.19 1721.97,1213.19 1722.56,1213.19 1723.15,1213.19 1723.73,1213.19 1724.32,1213.19 1724.91,1213.19 1725.49,1213.19 1726.08,1213.19 1726.66,1213.19 1727.25,1213.19 1727.84,1213.19 1728.42,1213.19 1729.01,1213.19 1729.6,1213.19 1730.18,1213.19 1730.77,1213.19 1731.36,1213.19 1731.94,1213.19 1732.53,1213.19 1733.11,1213.19 1733.7,1213.19 1734.29,1213.19 1734.87,1213.19 1735.46,1213.19 1736.05,1213.19 1736.63,1213.19 1737.22,1213.19 1737.81,1213.19 1738.39,1213.19 1738.98,1213.19 1739.57,1213.19 1740.15,1213.19 1740.74,1213.19 1741.32,1213.19 1741.91,1213.19 1742.5,1213.19 1743.08,1213.19 1743.67,1213.19 1744.26,1213.19 1744.84,1213.19 1745.43,1213.19 1746.02,1213.19 1746.6,1213.19 1747.19,1213.19 1747.78,1213.19 1748.36,1213.19 1748.95,1213.19 1749.53,1213.19 1750.12,1213.19 1750.71,1213.19 1751.29,1213.19 1751.88,1213.19 1752.47,1213.19 1753.05,1213.19 1753.64,1213.19 1754.23,1213.19 1754.81,1213.19 1755.4,1213.19 1755.99,1213.19 1756.57,1213.19 1757.16,1213.19 1757.74,1213.19 1758.33,1213.19 1758.92,1213.19 1759.5,1213.19 1760.09,1213.19 1760.68,1213.19 1761.26,1213.19 1761.85,1213.19 1762.44,1213.19 1763.02,1213.19 1763.61,1213.19 1764.19,1213.19 1764.78,1213.19 1765.37,1213.19 1765.95,1213.19 1766.54,1213.19 1767.13,1213.19 1767.71,1213.19 1768.3,1213.19 1768.89,1213.19 1769.47,1213.19 1770.06,1213.19 1770.65,1213.19 1771.23,1213.19 1771.82,1213.19 1772.4,1213.19 1772.99,1213.19 1773.58,1213.19 1774.16,1213.19 1774.75,1213.19 1775.34,1213.19 1775.92,1213.19 1776.51,1213.19 1777.1,1213.19 1777.68,1213.19 1778.27,1213.19 1778.86,1213.19 1779.44,1213.19 1780.03,1213.19 1780.61,1213.19 1781.2,1213.19 1781.79,1213.19 1782.37,1213.19 1782.96,1213.19 1783.55,1213.19 1784.13,1213.19 1784.72,1213.19 1785.31,1213.19 1785.89,1213.19 1786.48,1213.19 1787.06,1213.19 1787.65,1213.19 1788.24,1213.19 1788.82,1213.19 1789.41,1213.19 1790,1213.19 1790.58,1213.19 1791.17,1213.19 1791.76,1213.19 1792.34,1213.19 1792.93,1213.19 1793.52,1213.19 1794.1,1213.19 1794.69,1213.19 1795.27,1213.19 1795.86,1213.19 1796.45,1213.19 1797.03,1213.19 1797.62,1213.19 1798.21,1213.19 1798.79,1213.19 1799.38,1213.19 1799.97,1213.19 1800.55,1213.19 1801.14,1213.19 1801.73,1213.19 1802.31,1213.19 1802.9,1213.19 1803.48,1213.19 1804.07,1213.19 1804.66,1213.19 1805.24,1213.19 1805.83,1213.19 1806.42,1213.19 1807,1213.19 1807.59,1213.19 1808.18,1213.19 1808.76,1213.19 1809.35,1213.19 1809.94,1213.19 1810.52,1213.19 1811.11,1213.19 1811.69,1213.19 1812.28,1213.19 1812.87,1213.19 1813.45,1213.19 1814.04,1213.19 1814.63,1213.19 1815.21,1213.19 1815.8,1213.19 1816.39,1213.19 1816.97,1213.19 1817.56,1213.19 1818.14,1213.19 1818.73,1213.19 1819.32,1213.19 1819.9,1213.19 1820.49,1213.19 1821.08,1213.19 1821.66,1213.19 1822.25,1213.19 1822.84,1213.19 1823.42,1213.19 1824.01,1213.19 1824.6,1213.19 1825.18,1213.19 1825.77,1213.19 1826.35,1213.19 1826.94,1213.19 1827.53,1213.19 1828.11,1213.19 1828.7,1213.19 1829.29,1213.19 1829.87,1213.19 1830.46,1213.19 1831.05,1213.19 1831.63,1213.19 1832.22,1213.19 1832.81,1213.19 1833.39,1213.19 1833.98,1213.19 1834.56,1213.19 1835.15,1213.19 1835.74,1213.19 1836.32,1213.19 1836.91,1213.19 1837.5,1213.19 1838.08,1213.19 1838.67,1213.19 1839.26,1213.19 1839.84,1213.19 1840.43,1213.19 1841.01,1213.19 1841.6,1213.19 1842.19,1213.19 1842.77,1213.19 1843.36,1213.19 1843.95,1213.19 1844.53,1213.19 1845.12,1213.19 1845.71,1213.19 1846.29,1213.19 1846.88,1213.19 1847.47,1213.19 1848.05,1213.19 1848.64,1213.19 1849.22,1213.19 1849.81,1213.19 1850.4,1213.19 1850.98,1213.19 1851.57,1213.19 1852.16,1213.19 1852.74,1213.19 1853.33,1213.19 1853.92,1213.19 1854.5,1213.19 1855.09,1213.19 1855.68,1213.19 1856.26,1213.19 1856.85,1213.19 1857.43,1213.19 1858.02,1213.19 1858.61,1213.19 1859.19,1213.19 1859.78,1213.19 1860.37,1213.19 1860.95,1213.19 1861.54,1213.19 1862.13,1213.19 1862.71,1213.19 1863.3,1213.19 1863.88,1213.19 1864.47,1213.19 1865.06,1213.19 1865.64,1213.19 1866.23,1213.19 1866.82,1213.19 1867.4,1213.19 1867.99,1213.19 1868.58,1213.19 1869.16,1213.19 1869.75,1213.19 1870.34,1213.19 1870.92,1213.19 1871.51,1213.19 1872.09,1213.19 1872.68,1213.19 1873.27,1213.19 1873.85,1213.19 1874.44,1213.19 1875.03,1213.19 1875.61,1213.19 1876.2,1213.19 1876.79,1213.19 1877.37,1213.19 1877.96,1213.19 1878.55,1213.19 1879.13,1213.19 1879.72,1213.19 1880.3,1213.19 1880.89,1213.19 1881.48,1213.19 1882.06,1213.19 1882.65,1213.19 1883.24,1213.19 1883.82,1213.19 1884.41,1213.19 1885,1213.19 1885.58,1213.19 1886.17,1213.19 1886.76,1213.19 1887.34,1213.19 1887.93,1213.19 1888.51,1213.19 1889.1,1213.19 1889.69,1213.19 1890.27,1213.19 1890.86,1213.19 1891.45,1213.19 1892.03,1213.19 1892.62,1213.19 1893.21,1213.19 1893.79,1213.19 1894.38,1213.19 1894.96,1213.19 1895.55,1213.19 1896.14,1213.19 1896.72,1213.19 1897.31,1213.19 1897.9,1213.19 1898.48,1213.19 1899.07,1213.19 1899.66,1213.19 1900.24,1213.19 1900.83,1213.19 1901.42,1213.19 1902,1213.19 1902.59,1213.19 1903.17,1213.19 1903.76,1213.19 1904.35,1213.19 1904.93,1213.19 1905.52,1213.19 1906.11,1213.19 1906.69,1213.19 1907.28,1213.19 1907.87,1213.19 1908.45,1213.19 1909.04,1213.19 1909.63,1213.19 1910.21,1213.19 1910.8,1213.19 1911.38,1213.19 1911.97,1213.19 1912.56,1213.19 1913.14,1213.19 1913.73,1213.19 1914.32,1213.19 1914.9,1213.19 1915.49,1213.19 1916.08,1213.19 1916.66,1213.19 1917.25,1213.19 1917.83,1213.19 1918.42,1213.19 1919.01,1213.19 1919.59,1213.19 1920.18,1213.19 1920.77,1213.19 1921.35,1213.19 1921.94,1213.19 1922.53,1213.19 1923.11,1213.19 1923.7,1213.19 1924.29,1213.19 1924.87,1213.19 1925.46,1213.19 1926.04,1213.19 1926.63,1213.19 1927.22,1213.19 1927.8,1213.19 1928.39,1213.19 1928.98,1213.19 1929.56,1213.19 1930.15,1213.19 1930.74,1213.19 1931.32,1213.19 1931.91,1213.19 1932.5,1213.19 1933.08,1213.19 1933.67,1213.19 1934.25,1213.19 1934.84,1213.19 1935.43,1213.19 1936.01,1213.19 1936.6,1213.19 1937.19,1213.19 1937.77,1213.19 1938.36,1213.19 1938.95,1213.19 1939.53,1213.19 1940.12,1213.19 1940.71,1213.19 1941.29,1213.19 1941.88,1213.19 1942.46,1213.19 1943.05,1213.19 1943.64,1213.19 1944.22,1213.19 1944.81,1213.19 1945.4,1213.19 1945.98,1213.19 1946.57,1213.19 1947.16,1213.19 1947.74,1213.19 1948.33,1213.19 1948.91,1213.19 1949.5,1213.19 1950.09,1213.19 1950.67,1213.19 1951.26,1213.19 1951.85,1213.19 1952.43,1213.19 1953.02,1213.19 1953.61,1213.19 1954.19,1213.19 1954.78,1213.19 1955.37,1213.19 1955.95,1213.19 1956.54,1213.19 1957.12,1213.19 1957.71,1213.19 1958.3,1213.19 1958.88,1213.19 1959.47,1213.19 1960.06,1213.19 1960.64,1213.19 1961.23,1213.19 1961.82,1213.19 1962.4,1213.19 1962.99,1213.19 1963.58,1213.19 1964.16,1213.19 1964.75,1213.19 1965.33,1213.19 1965.92,1213.19 1966.51,1213.19 1967.09,1213.19 1967.68,1213.19 1968.27,1213.19 1968.85,1213.19 1969.44,1213.19 1970.03,1213.19 1970.61,1213.19 1971.2,1213.19 1971.78,1213.19 1972.37,1213.19 1972.96,1213.19 1973.54,1213.19 1974.13,1213.19 1974.72,1213.19 1975.3,1213.19 1975.89,1213.19 1976.48,1213.19 1977.06,1213.19 1977.65,1213.19 1978.24,1213.19 1978.82,1213.19 1979.41,1213.19 1979.99,1213.19 1980.58,1213.19 1981.17,1213.19 1981.75,1213.19 1982.34,1213.19 1982.93,1213.19 1983.51,1213.19 1984.1,1213.19 1984.69,1213.19 1985.27,1213.19 1985.86,1213.19 1986.45,1213.19 1987.03,1213.19 1987.62,1213.19 1988.2,1213.19 1988.79,1213.19 1989.38,1213.19 1989.96,1213.19 1990.55,1213.19 1991.14,1213.19 1991.72,1213.19 1992.31,1213.19 1992.9,1213.19 1993.48,1213.19 1994.07,1213.19 1994.65,1213.19 1995.24,1213.19 1995.83,1213.19 1996.41,1213.19 1997,1213.19 1997.59,1213.19 1998.17,1213.19 1998.76,1213.19 1999.35,1213.19 1999.93,1213.19 2000.52,1213.19 2001.11,1213.19 2001.69,1213.19 2002.28,1213.19 2002.86,1213.19 2003.45,1213.19 2004.04,1213.19 2004.62,1213.19 2005.21,1213.19 2005.8,1213.19 2006.38,1213.19 2006.97,1213.19 2007.56,1213.19 2008.14,1213.19 2008.73,1213.19 2009.32,1213.19 2009.9,1213.19 2010.49,1213.19 2011.07,1213.19 2011.66,1213.19 2012.25,1213.19 2012.83,1213.19 2013.42,1213.19 2014.01,1213.19 2014.59,1213.19 2015.18,1213.19 2015.77,1213.19 2016.35,1213.19 2016.94,1213.19 2017.53,1213.19 2018.11,1213.19 2018.7,1213.19 2019.28,1213.19 2019.87,1213.19 2020.46,1213.19 2021.04,1213.19 2021.63,1213.19 2022.22,1213.19 2022.8,1213.19 2023.39,1213.19 2023.98,1213.19 2024.56,1213.19 2025.15,1213.19 2025.73,1213.19 2026.32,1213.19 2026.91,1213.19 2027.49,1213.19 2028.08,1213.19 2028.67,1213.19 2029.25,1213.19 2029.84,1213.19 2030.43,1213.19 2031.01,1213.19 2031.6,1213.19 2032.19,1213.19 2032.77,1213.19 2033.36,1213.19 2033.94,1213.19 2034.53,1213.19 2035.12,1213.19 2035.7,1213.19 2036.29,1213.19 2036.88,1213.19 2037.46,1213.19 2038.05,1213.19 2038.64,1213.19 2039.22,1213.19 2039.81,1213.19 2040.4,1213.19 2040.98,1213.19 2041.57,1213.19 2042.15,1213.19 2042.74,1213.19 2043.33,1213.19 2043.91,1213.19 2044.5,1213.19 2045.09,1213.19 2045.67,1213.19 2046.26,1213.19 2046.85,1213.19 2047.43,1213.19 2048.02,1213.19 2048.6,1213.19 2049.19,1213.19 2049.78,1213.19 2050.36,1213.19 2050.95,1213.19 2051.54,1213.19 2052.12,1213.19 2052.71,1213.19 2053.3,1213.19 2053.88,1213.19 2054.47,1213.19 2055.06,1213.19 2055.64,1213.19 2056.23,1213.19 2056.81,1213.19 2057.4,1213.19 2057.99,1213.19 2058.57,1213.19 2059.16,1213.19 2059.75,1213.19 2060.33,1213.19 2060.92,1213.19 2061.51,1213.19 2062.09,1213.19 2062.68,1213.19 2063.27,1213.19 2063.85,1213.19 2064.44,1213.19 2065.02,1213.19 2065.61,1213.19 2066.2,1213.19 2066.78,1213.19 2067.37,1213.19 2067.96,1213.19 2068.54,1213.19 2069.13,1213.19 2069.72,1213.19 2070.3,1213.19 2070.89,1213.19 2071.48,1213.19 2072.06,1213.19 2072.65,1213.19 2073.23,1213.19 2073.82,1213.19 2074.41,1213.19 2074.99,1213.19 2075.58,1213.19 2076.17,1213.19 2076.75,1213.19 2077.34,1213.19 2077.93,1213.19 2078.51,1213.19 2079.1,1213.19 2079.68,1213.19 2080.27,1213.19 2080.86,1213.19 2081.44,1213.19 2082.03,1213.19 2082.62,1213.19 2083.2,1213.19 2083.79,1213.19 2084.38,1213.19 2084.96,1213.19 2085.55,1213.19 2086.14,1213.19 2086.72,1213.19 2087.31,1213.19 2087.89,1213.19 2088.48,1213.19 2089.07,1213.19 2089.65,1213.19 2090.24,1213.19 2090.83,1213.19 2091.41,1213.19 2092,1213.19 2092.59,1213.19 2093.17,1213.19 2093.76,1213.19 2094.35,1213.19 2094.93,1213.19 2095.52,1213.19 2096.1,1213.19 2096.69,1213.19 2097.28,1213.19 2097.86,1213.19 2098.45,1213.19 2099.04,1213.19 2099.62,1213.19 2100.21,1213.19 2100.8,1213.19 2101.38,1213.19 2101.97,1213.19 2102.55,1213.19 2103.14,1213.19 2103.73,1213.19 2104.31,1213.19 2104.9,1213.19 2105.49,1213.19 2106.07,1213.19 2106.66,1213.19 2107.25,1213.19 2107.83,1213.19 2108.42,1213.19 2109.01,1213.19 2109.59,1213.19 2110.18,1213.19 2110.76,1213.19 2111.35,1213.19 2111.94,1213.19 2112.52,1213.19 2113.11,1213.19 2113.7,1213.19 2114.28,1213.19 2114.87,1213.19 2115.46,1213.19 2116.04,1213.19 2116.63,1213.19 2117.22,1213.19 2117.8,1213.19 2118.39,1213.19 2118.97,1213.19 2119.56,1213.19 2120.15,1213.19 2120.73,1213.19 2121.32,1213.19 2121.91,1213.19 2122.49,1213.19 2123.08,1213.19 2123.67,1213.19 2124.25,1213.19 2124.84,1213.19 2125.42,1213.19 2126.01,1213.19 2126.6,1213.19 2127.18,1213.19 2127.77,1213.19 2128.36,1213.19 2128.94,1213.19 2129.53,1213.19 2130.12,1213.19 2130.7,1213.19 2131.29,1213.19 2131.88,1213.19 2132.46,1213.19 2133.05,1213.19 2133.63,1213.19 2134.22,1213.19 2134.81,1213.19 2135.39,1213.19 2135.98,1213.19 2136.57,1213.19 2137.15,1213.19 2137.74,1213.19 2138.33,1213.19 2138.91,1213.19 2139.5,1213.19 2140.09,1213.19 2140.67,1213.19 2141.26,1213.19 2141.84,1213.19 2142.43,1213.19 2143.02,1213.19 2143.6,1213.19 2144.19,1213.19 2144.78,1213.19 2145.36,1213.19 2145.95,1213.19 2146.54,1213.19 2147.12,1213.19 2147.71,1213.19 2148.3,1213.19 2148.88,1213.19 2149.47,1213.19 2150.05,1213.19 2150.64,1213.19 2151.23,1213.19 2151.81,1213.19 2152.4,1213.19 2152.99,1213.19 2153.57,1213.19 2154.16,1213.19 2154.75,1213.19 2155.33,1213.19 2155.92,1213.19 2156.5,1213.19 2157.09,1213.19 2157.68,1213.19 2158.26,1213.19 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.36,1193.85 1399.16,899.083 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232 985.439,1193.85 2158.26,1193.85 2158.26,1232 985.439,1232 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip120)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip120)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip123\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip123)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2776.15 162.673,-1342.75 163.232,-2579.8 163.792,-3711.13 164.351,-4726.69 164.91,-5699.16 165.469,-6563.19 166.029,-7373.7 166.588,-8073.24 167.147,-8724.27 167.706,-9316.07 168.266,-9847.91 168.825,-10288.4 169.384,-9917.62 169.943,-10329.9 170.503,-10694.5 171.062,-9738.12 171.621,-10092.6 172.18,-10386 172.74,-10123.2 173.299,-9887.93 173.858,-10102.1 174.417,-9883.59 174.977,-10070.4 175.536,-9856.73 176.095,-10002.3 176.655,-9483.04 177.214,-9323.34 177.773,-9449.3 178.332,-9292.55 178.892,-8886.83 179.451,-8978.13 180.01,-9042.29 180.569,-9095.56 181.129,-9122.68 181.688,-9141.6 182.247,-9147.02 182.806,-8620.22 183.366,-8599.55 183.925,-8568.12 184.484,-8237.5 185.043,-8070.99 185.603,-7654.46 186.162,-7371.54 186.721,-7222.33 187.28,-7187.33 187.84,-7140.38 188.399,-6896.72 188.958,-6848.05 189.517,-6683.48 190.077,-6621.62 190.636,-6383.49 191.195,-6161.45 191.754,-6103.91 192.314,-5957.65 192.873,-5741.38 193.432,-5679.29 193.991,-5604.64 194.551,-5471.5 195.11,-5337.96 195.669,-5260.6 196.228,-5185.27 196.788,-5103.04 197.347,-4856.75 197.906,-4566.29 198.465,-4393.37 199.025,-4229.68 199.584,-4164.57 200.143,-4047.6 200.702,-3977.78 201.262,-3902.51 201.821,-3836.52 202.38,-3680.44 202.939,-3568.71 203.499,-3501.98 204.058,-3390.96 204.617,-3283.34 205.176,-3138.27 205.736,-3072.7 206.295,-2897.59 206.854,-2795.83 207.413,-2632.21 207.973,-2504.04 208.532,-2438.01 209.091,-2341.41 209.65,-2276.67 210.21,-2215.57 210.769,-2154.8 211.328,-2069.01 211.887,-1978.02 212.447,-1858.64 213.006,-1718.02 213.565,-1531.09 214.124,-1456.6 214.684,-1380.37 215.243,-1309.47 215.802,-1140.04 216.361,-1024.9 216.921,-918.697 217.48,-856.03 218.039,-776.967 218.598,-698.781 219.158,-573.192 219.717,-548.71 220.276,-525.117 220.835,-476.492 221.395,-427.787 221.954,-382.916 222.513,-230.545 223.072,-237.49 223.632,-175.009 224.191,-91.4051 224.75,-59.372 225.309,-43.6306 225.869,-5.3305 226.428,51.6899 226.987,63.7269 227.546,75.1353 228.106,149.557 228.665,239.679 229.224,245.636 229.783,233.866 230.343,283.904 230.902,330.885 231.461,339.209 232.02,368.854 232.58,373.615 233.139,401.767 233.698,466.459 234.257,472.187 234.817,477.087 235.376,481.729 235.935,490.894 236.494,533.987 237.054,560.694 237.613,587.129 238.172,607.907 238.731,610.746 239.291,649.617 239.85,674.238 240.409,699.07 240.968,717.873 241.528,719.339 242.087,720.433 242.646,722.914 243.205,739.879 243.765,760.7 244.324,761.642 244.883,781.523 245.442,748.993 246.002,790.095 246.561,811.859 247.12,810.016 247.679,844.573 248.239,860.973 248.798,892.372 249.357,894.588 249.916,927.758 250.476,958.97 251.035,1003.51 251.594,975.521 252.153,970.867 252.713,963.85 253.272,944.092 253.831,959.704 254.39,937.126 254.95,948.12 255.509,943.922 256.068,957.265 256.627,952.798 257.187,980.623 257.746,972.388 258.305,928.69 258.864,924.013 259.424,972.188 259.983,986.711 260.542,984.605 261.101,1031.07 261.661,1076.77 262.22,1081.76 262.779,1103.96 263.338,1093.23 263.898,1052.02 264.457,1060.61 265.016,1068.28 265.575,1075.7 266.135,1065.03 266.694,1087.97 267.253,1077.05 267.812,1069.57 268.372,1044.19 268.931,1019.5 269.49,1017.54 270.049,1011.41 270.609,1025.89 271.168,1003.02 271.727,998.674 272.286,1013.64 272.846,1040.21 273.405,1052.36 273.964,1095.51 274.523,1082.89 275.083,1092.18 275.642,1066.47 276.201,1053.99 276.76,1061.45 277.32,1054.69 277.879,1081.18 278.438,1070.97 278.997,1063.13 279.557,1073.86 280.116,1082.97 280.675,1073.24 281.234,1014.89 281.794,1009.67 282.353,1003.05 282.912,1013.59 283.471,1009.56 284.031,981.288 284.59,995.85 285.149,1040.41 285.708,999.592 286.268,993.771 286.827,989.669 287.386,988.997 287.945,982.936 288.505,994.823 289.064,989.019 289.623,984.898 290.182,982.716 290.742,961.633 291.301,973.167 291.86,968.454 292.419,978.204 292.979,973.915 293.538,982.781 294.097,1014.81 294.656,1010.8 295.216,1036.91 295.775,1027.6 296.334,1067.39 296.893,1106.67 297.453,1080.83 298.012,1085.99 298.571,1056.91 299.13,1062.35 299.69,1069.57 300.249,1107.74 300.808,1111.38 301.368,1080.11 301.927,1083.32 302.486,1058.28 303.045,1053.43 303.605,1060.42 304.164,1016.35 304.723,991.3 305.282,969.155 305.842,962.432 306.401,954.693 306.96,915.526 307.519,897.614 308.079,912.593 308.638,926.85 309.197,921.039 309.756,952.324 310.316,934.272 310.875,932.753 311.434,932.008 311.993,927.887 312.553,893.947 313.112,895.098 313.671,892.691 314.23,893.371 314.79,890.435 315.349,905.114 315.908,915.305 316.467,915.552 317.027,929.776 317.586,910.773 318.145,922.204 318.704,905.379 319.264,935.208 319.823,947.435 320.382,940.367 320.941,954.229 321.501,964.606 322.06,923.873 322.619,952.586 323.178,945.564 323.738,939.349 324.297,930.972 324.856,928.659 325.415,943.438 325.975,940.171 326.534,919.558 327.093,900.517 327.652,877.586 328.212,873.391 328.771,854.786 329.33,851.701 329.889,855.058 330.449,853.831 331.008,853.143 331.567,882.105 332.126,880.7 332.686,893.643 333.245,875.233 333.804,858.988 334.363,858.326 334.923,840.71 335.482,840.345 336.041,855.973 336.6,854.626 337.16,858.313 337.719,822.549 338.278,794.741 338.837,766.219 339.397,756.031 339.956,743.712 340.515,780.295 341.074,767.716 341.634,789.497 342.193,791.182 342.752,826.599 343.311,833.315 343.871,845.175 344.43,839.173 344.989,873.287 345.548,864.945 346.108,865.666 346.667,861.446 347.226,859.515 347.785,906.244 348.345,883.241 348.904,896.683 349.463,914.965 350.022,914.496 350.582,910.277 351.141,903.892 351.7,882.495 352.259,861.028 352.819,842.358 353.378,875.173 353.937,870.417 354.496,850.449 355.056,866.111 355.615,879.233 356.174,876.761 356.733,856.287 357.293,869.801 357.852,867.731 358.411,863.196 358.97,878.244 359.53,841.641 360.089,870.359 360.648,883.033 361.207,877.526 361.767,876.367 362.326,872.715 362.885,840.171 363.444,833.866 364.004,881.037 364.563,878.966 365.122,875.612 365.681,887.184 366.241,899.976 366.8,910.766 367.359,886.304 367.918,879.441 368.478,824.458 369.037,825.983 369.596,820.838 370.155,804.664 370.715,773.875 371.274,803.776 371.833,802.212 372.392,830.878 372.952,828.796 373.511,826.436 374.07,843.003 374.629,888.356 375.189,868.567 375.748,866.348 376.307,845.842 376.866,812.118 377.426,811.838 377.985,827.539 378.544,811.738 379.103,814.146 379.663,829.115 380.222,813.61 380.781,779.689 381.34,779.595 381.9,795.059 382.459,831.62 383.018,812.252 383.577,858.102 384.137,874.432 384.696,867.908 385.255,865.157 385.814,877.19 386.374,872.294 386.933,884.044 387.492,896.715 388.051,875.656 388.611,873.636 389.17,868.847 389.729,846.474 390.288,860.002 390.848,854.081 391.407,862.841 391.966,872.002 392.525,885.646 393.085,862.594 393.644,841.999 394.203,854.744 394.762,836.563 395.322,834.069 395.881,831.282 396.44,844.535 396.999,795.628 397.559,797.362 398.118,830.162 398.677,793.843 399.236,812.211 399.796,826.439 400.355,807.929 400.914,802.19 401.473,779.067 402.033,811.39 402.592,825.954 403.151,823.588 403.71,822.275 404.27,817.859 404.829,766.298 405.388,784.881 405.947,802.709 406.507,846.09 407.066,789.582 407.625,805.863 408.184,802.233 408.744,851.483 409.303,814.624 409.862,829.954 410.421,857.907 410.981,849.578 411.54,842.911 412.099,804.58 412.658,799.921 413.218,813.45 413.777,810.361 414.336,791.403 414.895,775.266 415.455,790.855 416.014,754.625 416.573,720.308 417.132,721.242 417.692,724.405 418.251,742.633 418.81,725.087 419.369,726.09 419.929,710.231 420.488,697.209 421.047,685.833 421.606,736.919 422.166,755.543 422.725,787.869 423.284,787.226 423.843,788.004 424.403,784.276 424.962,795.258 425.521,789.38 426.08,847.758 426.64,860.779 427.199,837.967 427.758,849.689 428.318,826.16 428.877,789.216 429.436,773.167 429.995,773.249 430.555,768.702 431.114,749.674 431.673,767.466 432.232,778.682 432.792,794.4 433.351,792.449 433.91,771.222 434.469,772.551 435.029,755.288 435.588,770.468 436.147,785.692 436.706,763.785 437.266,764.793 437.825,733.253 438.384,738.456 438.943,739.074 439.503,738.272 440.062,724.163 440.621,727.834 441.18,726.752 441.74,680.362 442.299,714.8 442.858,717.21 443.417,735.955 443.977,736.547 444.536,768.134 445.095,766.498 445.654,746.721 446.214,728.148 446.773,743.853 447.332,762.124 447.891,763.93 448.451,783.582 449.01,796.194 449.569,825.739 450.128,839.271 450.688,867.82 451.247,861.264 451.806,853.483 452.365,849.152 452.925,846.111 453.484,842.845 454.043,834.621 454.602,830.252 455.162,828.354 455.721,791.331 456.28,821.494 456.839,833.983 457.399,813.055 457.958,839.979 458.517,849.185 459.076,843.581 459.636,821.621 460.195,820.622 460.754,814.137 461.313,842.414 461.873,856.19 462.432,883.42 462.991,905.899 463.55,895.807 464.11,887.24 464.669,880.434 465.228,871.995 465.787,851.508 466.347,843 466.906,822.533 467.465,821.476 468.024,829.195 468.584,840.167 469.143,849.707 469.702,879.924 470.261,877.535 470.821,858.377 471.38,870.44 471.939,896.194 472.498,919.88 473.058,877.737 473.617,890.302 474.176,899.214 474.735,877.169 475.295,886.664 475.854,878.851 476.413,856.063 476.972,883.425 477.532,845.137 478.091,822.127 478.65,852.864 479.209,831.988 479.769,826.916 480.328,821.995 480.887,816.26 481.446,795.499 482.006,808.057 482.565,806.244 483.124,787.648 483.683,801.63 484.243,802.017 484.802,815.088 485.361,825.889 485.92,836.869 486.48,814.468 487.039,794.721 487.598,756.197 488.157,721.482 488.717,721.082 489.276,687.604 489.835,701.119 490.394,720.361 490.954,739.793 491.513,738.538 492.072,708.004 492.631,709.605 493.191,709.747 493.75,707.272 494.309,713.416 494.868,761.792 495.428,775.278 495.987,790.679 496.546,788.509 497.105,780.208 497.665,760.475 498.224,774.472 498.783,788.617 499.342,819.551 499.902,815.573 500.461,776.875 501.02,753.599 501.579,706.092 502.139,660.688 502.698,646.471 503.257,632.811 503.816,604.719 504.376,591.862 504.935,618.465 505.494,624.185 506.053,611.796 506.613,635.41 507.172,620.832 507.731,641.994 508.29,662.551 508.85,666.113 509.409,638.722 509.968,627.252 510.527,646.339 511.087,635.186 511.646,642.446 512.205,663.362 512.764,683.245 513.324,687.659 513.883,705.675 514.442,708.025 515.001,708.662 515.561,724.117 516.12,707.529 516.679,727.888 517.238,729.67 517.798,733.141 518.357,715.128 518.916,699.945 519.475,681.855 520.035,733.162 520.594,715.619 521.153,684.149 521.712,699.305 522.272,666.976 522.831,650.041 523.39,638.258 523.949,626.943 524.509,614.287 525.068,619.853 525.627,640.31 526.186,646.327 526.746,650.576 527.305,636.882 527.864,638.398 528.423,610.012 528.983,634.173 529.542,656.269 530.101,626.237 530.66,618.099 531.22,691.138 531.779,676.19 532.338,681.278 532.897,713.705 533.457,700.358 534.016,686.337 534.575,688.53 535.134,705.348 535.694,708.505 536.253,755.943 536.812,769.568 537.371,799.663 537.931,811.835 538.49,790.28 539.049,805.942 539.608,800.865 540.168,782.439 540.727,780.676 541.286,759.399 541.845,782.876 542.405,811.292 542.964,792.393 543.523,757.048 544.082,803.287 544.642,797.688 545.201,812.11 545.76,822.523 546.319,816 546.879,809.752 547.438,783.978 547.997,809.963 548.556,791.419 549.116,803.21 549.675,796.743 550.234,776.66 550.793,790.331 551.353,785.234 551.912,815.889 552.471,809.221 553.031,787.458 553.59,783.163 554.149,746.597 554.708,760.958 555.268,792.676 555.827,786.606 556.386,752.164 556.945,749.345 557.505,743.138 558.064,739.322 558.623,720.046 559.182,731.832 559.742,730.716 560.301,728.653 560.86,698 561.419,661.898 561.979,645.797 562.538,619.179 563.097,622.289 563.656,610.757 564.216,617.22 564.775,621.4 565.334,594.866 565.893,603.23 566.453,659.587 567.012,658.9 567.571,662.807 568.13,653.778 568.69,640.774 569.249,643.446 569.808,642.412 570.367,617.915 570.927,641.017 571.486,646.792 572.045,668.395 572.604,703.149 573.164,689.133 573.723,687.5 574.282,687.862 574.841,690.683 575.401,690.891 575.96,677.844 576.519,677.405 577.078,662.459 577.638,662.199 578.197,632.294 578.756,651.769 579.315,653.985 579.875,638.913 580.434,641.261 580.993,661.215 581.552,662.513 582.112,632.405 582.671,653.142 583.23,658.175 583.789,690.621 584.349,691.753 584.908,662.485 585.467,682.058 586.026,666.002 586.586,671.038 587.145,671.223 587.704,674.373 588.263,706.798 588.823,690.772 589.382,691.28 589.941,691.385 590.5,676.238 591.06,709.423 591.619,708.62 592.178,741.451 592.737,742.134 593.297,761.508 593.856,777.362 594.415,807.888 594.974,785.801 595.534,831.795 596.093,810.483 596.652,776.012 597.211,771.661 597.771,785.524 598.33,812.61 598.889,838.941 599.448,814.65 600.008,792.784 600.567,788.177 601.126,771.274 601.685,784.087 602.245,763.542 602.804,762.751 603.363,744.914 603.922,773.846 604.482,768.97 605.041,749.069 605.6,744.968 606.159,726.174 606.719,724.394 607.278,720.688 607.837,749.956 608.396,780.289 608.956,775.961 609.515,784.54 610.074,762.033 610.633,723.763 611.193,736.008 611.752,687.691 612.311,738.85 612.87,704.093 613.43,688.071 613.989,674.106 614.548,671.531 615.107,655.261 615.667,641.657 616.226,656.81 616.785,663.645 617.344,665.961 617.904,668.671 618.463,672.395 619.022,691.237 619.581,690.726 620.141,706.745 620.7,702.373 621.259,690.886 621.818,689.288 622.378,674.979 622.937,691.036 623.496,657.925 624.055,633.078 624.615,641.038 625.174,613.044 625.733,614.806 626.292,651.669 626.852,652.315 627.411,654.822 627.97,640.598 628.529,626.749 629.089,612.105 629.648,618.107 630.207,621.545 630.766,609.654 631.326,646.349 631.885,668.223 632.444,685.101 633.003,702.584 633.563,753.283 634.122,764.179 634.681,776.964 635.24,788.129 635.8,764.419 636.359,792.736 636.918,788.855 637.477,782.771 638.037,746.232 638.596,709.501 639.155,758.269 639.714,724.939 640.274,724.945 640.833,705.559 641.392,689.717 641.951,724.774 642.511,738.431 643.07,720.866 643.629,718.974 644.188,686.67 644.748,681.287 645.307,747.451 645.866,746.237 646.425,731.149 646.985,733.507 647.544,719.292 648.103,685.826 648.662,686.052 649.222,683.793 649.781,681.884 650.34,700.038 650.899,685.16 651.459,703.505 652.018,702.777 652.577,701.087 653.136,697.983 653.696,697.613 654.255,695.451 654.814,697.855 655.373,678.954 655.933,731.072 656.492,697.427 657.051,713.562 657.61,747.939 658.17,693.545 658.729,691.886 659.288,677.374 659.847,661.648 660.407,678.861 660.966,682.151 661.525,680.357 662.084,695.126 662.644,679.406 663.203,697.18 663.762,695.032 664.321,673.612 664.881,659.739 665.44,674.538 665.999,690.962 666.558,674.894 667.118,660.337 667.677,694.466 668.236,695.096 668.795,694.958 669.355,709.594 669.914,722.358 670.473,737.889 671.032,752.531 671.592,749.098 672.151,743.86 672.71,707.295 673.269,706.563 673.829,722.894 674.388,690.98 674.947,706.635 675.506,769.974 676.066,737.764 676.625,751.153 677.184,735.834 677.743,703.157 678.303,689.9 678.862,709.615 679.421,708.812 679.981,694.619 680.54,695.709 681.099,681.417 681.658,679.698 682.218,662.229 682.777,668.19 683.336,683.423 683.895,666.64 684.455,662.177 685.014,680.696 685.573,683.544 686.132,700.273 686.692,701.48 687.251,686.538 687.81,637.965 688.369,610.478 688.929,648.485 689.488,671.376 690.047,708.089 690.606,675.344 691.166,678.863 691.725,678.311 692.284,679.826 692.843,697.837 693.403,699.744 693.962,718.111 694.521,712.707 695.08,696.95 695.64,698.191 696.199,699.1 696.758,731.936 697.317,695.509 697.877,661.729 698.436,696.257 698.995,693.872 699.554,678.742 700.114,682.75 700.673,668.095 701.232,670.023 701.791,688.043 702.351,706.755 702.91,703.706 703.469,705.955 704.028,738.765 704.588,737.359 705.147,717.642 705.706,702.173 706.265,680.878 706.825,680.652 707.384,710.337 707.943,711.063 708.502,724.021 709.062,738.608 709.621,719.534 710.18,734.812 710.739,717.344 711.299,682.624 711.858,698.474 712.417,729.41 712.976,680.037 713.536,681.633 714.095,682.988 714.654,668.456 715.213,669.258 715.773,686.213 716.332,673.206 716.891,673.718 717.45,691.974 718.01,726.754 718.569,729.467 719.128,677.999 719.687,646.933 720.247,614.318 720.806,637.97 721.365,657.486 721.924,675.156 722.484,644.668 723.043,615.082 723.602,622.528 724.161,644.23 724.721,663.794 725.28,652.898 725.839,637.666 726.398,660.707 726.958,679.382 727.517,679.655 728.076,666.95 728.635,685.741 729.195,669.074 729.754,670.419 730.313,675.892 730.872,641.504 731.432,611.197 731.991,612.904 732.55,620.298 733.109,640.996 733.669,641.174 734.228,659.714 734.787,678.294 735.346,696.299 735.906,708.774 736.465,724.653 737.024,720.44 737.583,688.787 738.143,689.354 738.702,722.734 739.261,751.163 739.82,744.762 740.38,740.383 740.939,737.678 741.498,735.033 742.057,749.534 742.617,747.662 743.176,759.146 743.735,787.361 744.294,829.338 744.854,855.585 745.413,811.746 745.972,770.083 746.531,752.268 747.091,717.63 747.65,732.674 748.209,728.626 748.768,743.814 749.328,776.111 749.887,767.605 750.446,730.467 751.005,730.518 751.565,712.945 752.124,697.136 752.683,661.93 753.242,663.362 753.802,682.069 754.361,650.225 754.92,632.506 755.479,618.663 756.039,636.327 756.598,657.669 757.157,675.789 757.716,693.738 758.276,710.44 758.835,697.749 759.394,679.307 759.953,697.929 760.513,728.302 761.072,743.193 761.631,756.494 762.19,753.465 762.75,733.355 763.309,713.995 763.868,729.882 764.427,712.706 764.987,712.331 765.546,676.664 766.105,661.917 766.664,662.284 767.224,636.942 767.783,626.49 768.342,644.461 768.901,614.348 769.461,623.057 770.02,611.612 770.579,629.929 771.138,652.916 771.698,634.883 772.257,668.347 772.816,714.07 773.375,712.494 773.935,728.11 774.494,708.364 775.053,705.25 775.612,671.952 776.172,672.112 776.731,693.082 777.29,692.601 777.849,658.856 778.409,627.83 778.968,615.435 779.527,638.37 780.086,657.945 780.646,660.778 781.205,695.586 781.764,698.282 782.323,685.086 782.883,686.984 783.442,686.08 784.001,721.181 784.56,704.293 785.12,720.238 785.679,701.894 786.238,766.885 786.797,796.917 787.357,823.191 787.916,815.651 788.475,811.166 789.034,805.361 789.594,798.443 790.153,821.836 790.712,799.263 791.271,774.589 791.831,798.665 792.39,761.085 792.949,743.317 793.508,722.057 794.068,736.841 794.627,734.567 795.186,735.458 795.745,717.661 796.305,702.062 796.864,668.145 797.423,669.155 797.982,668.395 798.542,648.214 799.101,633.553 799.66,637.321 800.219,623.043 800.779,643.503 801.338,628.672 801.897,662.544 802.456,681.065 803.016,684.798 803.575,686.369 804.134,672.702 804.693,669.519 805.253,670.624 805.812,689.056 806.371,702.181 806.931,688.351 807.49,683.756 808.049,714.933 808.608,723.905 809.168,709.395 809.727,707.233 810.286,687.437 810.845,735.265 811.405,701.227 811.964,720.092 812.523,697.983 813.082,716.919 813.642,701.728 814.201,702.626 814.76,702.076 815.319,685.713 815.879,704.957 816.438,671.458 816.997,689.241 817.556,674.254 818.116,723.577 818.675,738.504 819.234,718.08 819.793,718.492 820.353,699.775 820.912,685.801 821.471,702.171 822.03,746.496 822.59,743.549 823.149,741.829 823.708,708.89 824.267,676.385 824.827,676.497 825.386,661.502 825.945,676.589 826.504,659.231 827.064,641.858 827.623,633.129 828.182,633.819 828.741,621.565 829.301,612.681 829.86,616.922 830.419,635.671 830.978,607.075 831.538,612.957 832.097,601.06 832.656,623.995 833.215,659.503 833.775,692.425 834.334,691.769 834.893,692.109 835.452,656.656 836.012,672.767 836.571,671.681 837.13,670.434 837.689,703.915 838.249,704.064 838.808,719.847 839.367,702.861 839.926,702.74 840.486,718.411 841.045,716.972 841.604,732.62 842.163,682.384 842.723,683.447 843.282,701.716 843.841,702.85 844.4,672.467 844.96,674.543 845.519,663.152 846.078,699.565 846.637,713.844 847.197,691.447 847.756,707.816 848.315,723.34 848.874,752.443 849.434,766.175 849.993,780.47 850.552,745.405 851.111,726.091 851.671,723.125 852.23,717.887 852.789,698.411 853.348,678.629 853.908,645.541 854.467,649.325 855.026,682.685 855.585,718.349 856.145,686.13 856.704,690.24 857.263,676.607 857.822,691.281 858.382,693.223 858.941,710.453 859.5,707.15 860.059,705.864 860.619,689.467 861.178,673.532 861.737,724.146 862.296,736.494 862.856,752.835 863.415,766.611 863.974,763.4 864.533,756.197 865.093,752.752 865.652,780.946 866.211,758.813 866.77,740.075 867.33,738.29 867.889,720.456 868.448,715.457 869.007,697.023 869.567,696.088 870.126,693.568 870.685,661.749 871.244,662.304 871.804,648.982 872.363,647.235 872.922,649.434 873.481,649.595 874.041,632.805 874.6,634.609 875.159,666.03 875.718,679.746 876.278,695.6 876.837,710.752 877.396,693.736 877.955,713.011 878.515,760.521 879.074,758.231 879.633,720.842 880.192,734.868 880.752,699.362 881.311,682.82 881.87,648.755 882.429,651.562 882.989,652.246 883.548,638.088 884.107,642.095 884.666,646.616 885.226,647.681 885.785,665.35 886.344,683.637 886.903,684.568 887.463,674.094 888.022,659.836 888.581,675.345 889.14,678.934 889.7,712.626 890.259,729.699 890.818,727.253 891.377,738.963 891.937,734.331 892.496,765.099 893.055,763.116 893.614,758.96 894.174,806.182 894.733,798.158 895.292,793.831 895.851,821.471 896.411,831.594 896.97,810.286 897.529,757.99 898.088,757.306 898.648,752.434 899.207,733.649 899.766,749.946 900.325,776.137 900.885,755.438 901.444,768.138 902.003,751.409 902.562,749.118 903.122,713.817 903.681,697.173 904.24,732.409 904.799,684.535 905.359,720.541 905.918,719.386 906.477,685.629 907.036,687.748 907.596,674.086 908.155,694.076 908.714,675.958 909.273,661.429 909.833,682.027 910.392,664.855 910.951,667.043 911.51,663.593 912.07,615.714 912.629,605.616 913.188,610.799 913.747,669.443 914.307,669.505 914.866,688.001 915.425,672.51 915.984,706.258 916.544,725.257 917.103,724.446 917.662,720.261 918.221,732.543 918.781,728.26 919.34,742.714 919.899,722.716 920.458,724.408 921.018,723.76 921.577,707.47 922.136,720.522 922.695,717.344 923.255,682.119 923.814,713.731 924.373,740.961 924.932,702.847 925.492,684.148 926.051,718.054 926.61,700.582 927.169,715.872 927.729,728.496 928.288,759.089 928.847,740.62 929.406,741.41 929.966,724.082 930.525,771.615 931.084,769.664 931.644,783.403 932.203,744.852 932.762,725.566 933.321,722.349 933.881,738.744 934.44,737.034 934.999,716.741 935.558,697.075 936.118,677.466 936.677,665.018 937.236,727.348 937.795,745.464 938.355,742.366 938.914,752.33 939.473,734.056 940.032,730.69 940.592,757.26 941.151,755.021 941.71,719.653 942.269,731.053 942.829,696.06 943.388,662.671 943.947,677.777 944.506,707.525 945.066,734.365 945.625,731.318 946.184,662.441 946.743,660.308 947.303,612.384 947.862,648.339 948.421,646.941 948.98,649.039 949.54,650.395 950.099,671.898 950.658,686.098 951.217,670.479 951.777,685.309 952.336,680.611 952.895,645.754 953.454,612.868 954.014,618.144 954.573,641.536 955.132,630.506 955.691,652.033 956.251,653.701 956.81,621.033 957.369,592.283 957.928,580.53 958.488,587.416 959.047,589.768 959.606,594.074 960.165,649.626 960.725,668.55 961.284,672.511 961.843,641.908 962.402,628.869 962.962,616.236 963.521,633.476 964.08,636.277 964.639,627.369 965.199,596.55 965.758,613.604 966.317,632.081 966.876,631.356 967.436,681.581 967.995,679.214 968.554,696.179 969.113,696.81 969.673,697.251 970.232,715.138 970.791,794.842 971.35,772.19 971.91,770.734 972.469,767.719 973.028,779.447 973.587,742.407 974.147,739.017 974.706,768.099 975.265,744.628 975.824,740.877 976.384,720.77 976.943,735.244 977.502,717.79 978.061,696.416 978.621,664.151 979.18,631.779 979.739,648.626 980.298,667.537 980.858,684.652 981.417,703.511 981.976,686.172 982.535,685.852 983.095,683.923 983.654,652.435 984.213,674.269 984.772,692.339 985.332,658.13 985.891,675.168 986.45,627.412 987.009,633.481 987.569,655.943 988.128,672.073 988.687,668.626 989.246,687.823 989.806,689.244 990.365,687.783 990.924,673.175 991.483,641.16 992.043,643.405 992.602,663.537 993.161,683.604 993.72,685.307 994.28,670.764 994.839,702.835 995.398,701.242 995.957,704.651 996.517,686.842 997.076,640.02 997.635,621.917 998.194,657.498 998.754,645.307 999.313,630.831 999.872,630.644 1000.43,603.098 1000.99,558.844 1001.55,598.47 1002.11,636.54 1002.67,607.55 1003.23,613.998 1003.79,634.009 1004.35,635.694 1004.91,636.466 1005.46,685.972 1006.02,651.945 1006.58,652.935 1007.14,699.488 1007.7,714.395 1008.26,679.666 1008.82,696.681 1009.38,663.805 1009.94,662.216 1010.5,647.489 1011.06,649.847 1011.62,669.404 1012.18,656.744 1012.73,657.299 1013.29,657.688 1013.85,676.697 1014.41,677.335 1014.97,662.267 1015.53,648.533 1016.09,637.867 1016.65,638.308 1017.21,626.476 1017.77,662.467 1018.33,666.072 1018.89,665.214 1019.45,678.693 1020.01,693.819 1020.56,694.047 1021.12,676.921 1021.68,689.745 1022.24,703.687 1022.8,686.103 1023.36,699.688 1023.92,684.067 1024.48,716.633 1025.04,716.629 1025.6,697.766 1026.16,715.25 1026.72,743 1027.28,740.48 1027.83,799.01 1028.39,774.694 1028.95,784.673 1029.51,781.384 1030.07,714.091 1030.63,712.894 1031.19,680.383 1031.75,695.201 1032.31,697.04 1032.87,695.67 1033.43,728.872 1033.99,708.269 1034.55,723.353 1035.1,757.184 1035.66,733.439 1036.22,748.526 1036.78,793.342 1037.34,787.772 1037.9,733.957 1038.46,730.247 1039.02,711.382 1039.58,695.347 1040.14,692.486 1040.7,727.655 1041.26,744.01 1041.82,739.834 1042.38,738.594 1042.93,722.984 1043.49,722 1044.05,735.202 1044.61,730.3 1045.17,715.519 1045.73,691.327 1046.29,741.316 1046.85,768.868 1047.41,700.24 1047.97,697.658 1048.53,696.235 1049.09,710.365 1049.65,711.086 1050.2,711.8 1050.76,696.154 1051.32,697.406 1051.88,711.739 1052.44,726.709 1053,774.034 1053.56,753.906 1054.12,749.595 1054.68,744.493 1055.24,707.111 1055.8,688.586 1056.36,688.721 1056.92,687.046 1057.48,673.467 1058.03,656.664 1058.59,643.679 1059.15,643.974 1059.71,663.13 1060.27,650.722 1060.83,654.432 1061.39,675.852 1061.95,689.907 1062.51,706.143 1063.07,686.274 1063.63,699.566 1064.19,665.726 1064.75,681.87 1065.3,681.631 1065.86,681.742 1066.42,667.056 1066.98,653.134 1067.54,701.686 1068.1,732.532 1068.66,726.079 1069.22,739.581 1069.78,740.16 1070.34,703.262 1070.9,685.772 1071.46,700.426 1072.02,715.408 1072.57,733.553 1073.13,747.769 1073.69,742.105 1074.25,722.69 1074.81,719.557 1075.37,734.571 1075.93,716.42 1076.49,696.531 1077.05,680.839 1077.61,681.367 1078.17,681.338 1078.73,662.426 1079.29,677.923 1079.85,708.162 1080.4,678.238 1080.96,663.17 1081.52,616.319 1082.08,672.144 1082.64,641.825 1083.2,644.091 1083.76,678.152 1084.32,682.262 1084.88,697.469 1085.44,710.281 1086,710.385 1086.56,709.642 1087.12,709.661 1087.67,710.676 1088.23,726.396 1088.79,723.012 1089.35,720.93 1089.91,685.509 1090.47,690.185 1091.03,688.446 1091.59,718.409 1092.15,733.087 1092.71,743.4 1093.27,722.622 1093.83,704.859 1094.39,705.582 1094.94,674.909 1095.5,659.591 1096.06,627.965 1096.62,645.254 1097.18,614.557 1097.74,620.002 1098.3,624.514 1098.86,613.565 1099.42,617.587 1099.98,603.309 1100.54,559.409 1101.1,566.182 1101.66,557.039 1102.22,594.964 1102.77,599.431 1103.33,602.886 1103.89,542.093 1104.45,549.847 1105.01,542.217 1105.57,550.533 1106.13,553.821 1106.69,527.724 1107.25,553.22 1107.81,573.071 1108.37,593.167 1108.93,614.509 1109.49,603.962 1110.04,589.079 1110.6,595.22 1111.16,628.23 1111.72,630.83 1112.28,664.352 1112.84,666.864 1113.4,686.973 1113.96,685.133 1114.52,669.52 1115.08,638.317 1115.64,624.303 1116.2,627.407 1116.76,631.211 1117.31,632.478 1117.87,620.511 1118.43,644.905 1118.99,681.01 1119.55,677.792 1120.11,663.658 1120.67,684.138 1121.23,701.992 1121.79,715.73 1122.35,794.65 1122.91,787.239 1123.47,733.548 1124.03,681.21 1124.59,680.356 1125.14,665.64 1125.7,698.058 1126.26,744.081 1126.82,709.488 1127.38,691.927 1127.94,709.016 1128.5,723.132 1129.06,689.496 1129.62,640.092 1130.18,673.654 1130.74,661.632 1131.3,663.659 1131.86,682.361 1132.41,694.792 1132.97,679.2 1133.53,679.344 1134.09,679.221 1134.65,695.272 1135.21,706.676 1135.77,691.453 1136.33,658.772 1136.89,609.448 1137.45,611.589 1138.01,613.231 1138.57,635.038 1139.13,588.255 1139.68,610.51 1140.24,582.938 1140.8,556.116 1141.36,565.178 1141.92,536.842 1142.48,547.285 1143.04,570.986 1143.6,560.888 1144.16,569.528 1144.72,592.225 1145.28,584.818 1145.84,594.278 1146.4,586.328 1146.96,609.057 1147.51,628.993 1148.07,616.027 1148.63,621.006 1149.19,594.616 1149.75,616.281 1150.31,654.607 1150.87,640.334 1151.43,659.553 1151.99,662.061 1152.55,661.221 1153.11,695.568 1153.67,724.295 1154.23,781.986 1154.78,793.935 1155.34,787.542 1155.9,769.296 1156.46,781.794 1157.02,761.393 1157.58,743.519 1158.14,774.293 1158.7,719.176 1159.26,685.802 1159.82,685.52 1160.38,701.214 1160.94,715.625 1161.5,698.481 1162.05,680.238 1162.61,698.121 1163.17,728.06 1163.73,723.319 1164.29,718.143 1164.85,781.228 1165.41,775.694 1165.97,818.769 1166.53,779.077 1167.09,793.305 1167.65,820.573 1168.21,817.419 1168.77,778.927 1169.33,792.991 1169.88,801.832 1170.44,786.924 1171,780.705 1171.56,742.641 1172.12,724.859 1172.68,719.169 1173.24,699.925 1173.8,714.522 1174.36,711.548 1174.92,725.664 1175.48,738.855 1176.04,733.798 1176.6,713.845 1177.15,727.26 1177.71,709.841 1178.27,674.163 1178.83,660.728 1179.39,664.159 1179.95,668.758 1180.51,667.612 1181.07,650.06 1181.63,653.682 1182.19,655.043 1182.75,624.446 1183.31,624.201 1183.87,628.635 1184.43,683.533 1184.98,683.614 1185.54,652.239 1186.1,651.876 1186.66,640.422 1187.22,659.191 1187.78,632.396 1188.34,665.941 1188.9,698.523 1189.46,699.057 1190.02,711.764 1190.58,711.174 1191.14,724.212 1191.7,736.189 1192.25,716.693 1192.81,712.787 1193.37,712.325 1193.93,694.569 1194.49,708.272 1195.05,717.562 1195.61,745.402 1196.17,742.305 1196.73,740.122 1197.29,757.736 1197.85,750.132 1198.41,711.896 1198.97,707.203 1199.52,707.228 1200.08,706.893 1200.64,677.473 1201.2,727.302 1201.76,755.963 1202.32,771.711 1202.88,780.552 1203.44,772.943 1204,748.407 1204.56,764.026 1205.12,725.648 1205.68,723.828 1206.24,657.815 1206.8,675.939 1207.35,660.771 1207.91,659.413 1208.47,646.044 1209.03,630.068 1209.59,617.904 1210.15,638.616 1210.71,642.41 1211.27,676.087 1211.83,677.409 1212.39,677.287 1212.95,697.786 1213.51,744.952 1214.07,725.251 1214.62,707.833 1215.18,690.246 1215.74,688.132 1216.3,655.195 1216.86,658.004 1217.42,660.615 1217.98,646.617 1218.54,713.194 1219.1,716.505 1219.66,712.611 1220.22,756.878 1220.78,769.787 1221.34,763.109 1221.89,792.61 1222.45,797.753 1223.01,741.095 1223.57,752.571 1224.13,682.666 1224.69,683.295 1225.25,668.351 1225.81,668.443 1226.37,670.886 1226.93,702.585 1227.49,717.261 1228.05,716.422 1228.61,718.255 1229.17,715.79 1229.72,730.75 1230.28,694.98 1230.84,680.439 1231.4,683.656 1231.96,652.819 1232.52,685.265 1233.08,637.036 1233.64,658.474 1234.2,674.662 1234.76,644.377 1235.32,645.637 1235.88,646.698 1236.44,680.159 1236.99,666.731 1237.55,633.828 1238.11,649.138 1238.67,631.91 1239.23,616.502 1239.79,637.143 1240.35,657.807 1240.91,644.455 1241.47,677.259 1242.03,693.465 1242.59,741.356 1243.15,739.901 1243.71,703.054 1244.26,687.715 1244.82,704.317 1245.38,704.318 1245.94,702.227 1246.5,715.383 1247.06,713.31 1247.62,758.851 1248.18,739.036 1248.74,735.464 1249.3,700.505 1249.86,666.749 1250.42,652.428 1250.98,668.718 1251.54,684.029 1252.09,698.884 1252.65,714.364 1253.21,730.022 1253.77,714.274 1254.33,713.578 1254.89,710.672 1255.45,725.879 1256.01,724.26 1256.57,721.782 1257.13,720.123 1257.69,718.013 1258.25,729.539 1258.81,726.802 1259.36,725.781 1259.92,775.046 1260.48,738.467 1261.04,704.333 1261.6,719.076 1262.16,715.081 1262.72,697.088 1263.28,682.269 1263.84,712.474 1264.4,712.135 1264.96,676.458 1265.52,659.277 1266.08,596.147 1266.63,598.683 1267.19,665.182 1267.75,683.616 1268.31,699.403 1268.87,682.67 1269.43,654.589 1269.99,628.762 1270.55,667.32 1271.11,651.942 1271.67,653.677 1272.23,653.395 1272.79,606.642 1273.35,611.815 1273.91,599.819 1274.46,617.089 1275.02,641.74 1275.58,624.844 1276.14,627.313 1276.7,615.995 1277.26,632.727 1277.82,637.502 1278.38,671.912 1278.94,655.021 1279.5,642.619 1280.06,661.689 1280.62,743.702 1281.18,725.501 1281.73,739.825 1282.29,705.553 1282.85,690.996 1283.41,723.634 1283.97,731.83 1284.53,726.822 1285.09,734.445 1285.65,749.817 1286.21,743.915 1286.77,753.445 1287.33,749.92 1287.89,749.289 1288.45,748.376 1289,727.407 1289.56,737.945 1290.12,754.152 1290.68,766.558 1291.24,780.417 1291.8,793.902 1292.36,770.761 1292.92,782.972 1293.48,776.742 1294.04,773.49 1294.6,754.298 1295.16,767.95 1295.72,782.756 1296.28,780.401 1296.83,757.815 1297.39,753.281 1297.95,750.824 1298.51,714.619 1299.07,698.225 1299.63,698.083 1300.19,713.724 1300.75,741.479 1301.31,708.214 1301.87,672.738 1302.43,667.475 1302.99,684.553 1303.55,656.433 1304.1,640.386 1304.66,627.771 1305.22,576.887 1305.78,580.339 1306.34,587.359 1306.9,560.085 1307.46,563.51 1308.02,617.561 1308.58,654.559 1309.14,671.45 1309.7,670.782 1310.26,618.445 1310.82,620.208 1311.38,623.309 1311.93,627.407 1312.49,630.654 1313.05,650.908 1313.61,700.039 1314.17,680.145 1314.73,699.026 1315.29,678.824 1315.85,680.401 1316.41,665.101 1316.97,681.195 1317.53,649.209 1318.09,603.444 1318.65,604.719 1319.2,609.266 1319.76,631.623 1320.32,646.778 1320.88,681.964 1321.44,663.402 1322,650.454 1322.56,653.078 1323.12,638.811 1323.68,593.966 1324.24,615.32 1324.8,618.168 1325.36,604.818 1325.92,628.765 1326.47,646.462 1327.03,633.506 1327.59,620.92 1328.15,673.066 1328.71,674.816 1329.27,676.961 1329.83,709.9 1330.39,742.308 1330.95,740.974 1331.51,738.503 1332.07,719.264 1332.63,716.311 1333.19,714.798 1333.75,695.644 1334.3,694.594 1334.86,681.036 1335.42,666.394 1335.98,656.541 1336.54,657.304 1337.1,691.891 1337.66,706.716 1338.22,708.399 1338.78,706.322 1339.34,689.679 1339.9,687.871 1340.46,689.523 1341.02,737.661 1341.57,732.875 1342.13,744.591 1342.69,772.34 1343.25,736.954 1343.81,730.762 1344.37,695.417 1344.93,711.917 1345.49,713.004 1346.05,694.968 1346.61,710.521 1347.17,725.655 1347.73,674.73 1348.29,645.025 1348.84,662.203 1349.4,648.048 1349.96,619.847 1350.52,639.653 1351.08,642.967 1351.64,641.357 1352.2,625.048 1352.76,629.874 1353.32,615.752 1353.88,634.896 1354.44,654.518 1355,670.609 1355.56,669.05 1356.12,667.821 1356.67,668.205 1357.23,684.022 1357.79,700.516 1358.35,685.095 1358.91,682.389 1359.47,697.024 1360.03,697.654 1360.59,715.491 1361.15,696.806 1361.71,696.951 1362.27,728.515 1362.83,727.454 1363.39,709.772 1363.94,723.561 1364.5,676.213 1365.06,641.25 1365.62,610.615 1366.18,599.826 1366.74,603.743 1367.3,608.891 1367.86,609.58 1368.42,614.913 1368.98,617.132 1369.54,598.95 1370.1,639.98 1370.66,644.293 1371.21,628.409 1371.77,632.358 1372.33,634.74 1372.89,621.08 1373.45,628.853 1374.01,597.429 1374.57,584.819 1375.13,575.371 1375.69,543.714 1376.25,585.345 1376.81,608.919 1377.37,646.267 1377.93,633.576 1378.49,625.042 1379.04,626.128 1379.6,647.437 1380.16,665.553 1380.72,695.378 1381.28,710.446 1381.84,660.467 1382.4,727.265 1382.96,696.648 1383.52,645.996 1384.08,647.574 1384.64,649.844 1385.2,652.581 1385.76,669.655 1386.31,686.864 1386.87,683.246 1387.43,714.657 1387.99,713.465 1388.55,711.069 1389.11,695.889 1389.67,679.47 1390.23,663.765 1390.79,664.525 1391.35,661.32 1391.91,679.648 1392.47,662.207 1393.03,705.834 1393.58,732.801 1394.14,715.591 1394.7,719.583 1395.26,734.332 1395.82,718.163 1396.38,718.611 1396.94,701.654 1397.5,716.742 1398.06,683.126 1398.62,666.786 1399.18,669.07 1399.74,669.982 1400.3,703.115 1400.86,720.341 1401.41,684.097 1401.97,714.22 1402.53,728.547 1403.09,709.205 1403.65,708.223 1404.21,694.323 1404.77,712.233 1405.33,696.793 1405.89,683.448 1406.45,715.866 1407.01,727.548 1407.57,688.884 1408.13,655.405 1408.68,655.153 1409.24,672.777 1409.8,671.259 1410.36,686.003 1410.92,718.423 1411.48,685.305 1412.04,733.745 1412.6,715.381 1413.16,696.982 1413.72,694.964 1414.28,690.856 1414.84,691.306 1415.4,658.278 1415.95,656.346 1416.51,638.86 1417.07,670.959 1417.63,687.805 1418.19,671.656 1418.75,700.79 1419.31,685.037 1419.87,700.688 1420.43,702.803 1420.99,701.987 1421.55,699.73 1422.11,700.104 1422.67,698.736 1423.23,715.61 1423.78,699.222 1424.34,696.668 1424.9,710.866 1425.46,724.242 1426.02,739.305 1426.58,705.535 1427.14,718.706 1427.7,685.335 1428.26,682.381 1428.82,716.665 1429.38,702.172 1429.94,699.755 1430.5,711.786 1431.05,710.54 1431.61,713.433 1432.17,744.075 1432.73,757.463 1433.29,720.232 1433.85,700.268 1434.41,652.924 1434.97,691.41 1435.53,742.46 1436.09,741.65 1436.65,751.564 1437.21,748.272 1437.77,747.773 1438.33,776.835 1438.88,774.711 1439.44,769.404 1440,779.136 1440.56,775.328 1441.12,803.475 1441.68,794.795 1442.24,737.583 1442.8,715.357 1443.36,730.081 1443.92,696.111 1444.48,680.178 1445.04,697.765 1445.6,700.917 1446.15,697.417 1446.71,701.071 1447.27,700.635 1447.83,733.236 1448.39,730.313 1448.95,727.526 1449.51,740.703 1450.07,722.617 1450.63,735.514 1451.19,683.197 1451.75,681.977 1452.31,663.781 1452.87,649.6 1453.42,652.152 1453.98,636.546 1454.54,669.641 1455.1,686.911 1455.66,685.05 1456.22,701.834 1456.78,699.217 1457.34,700.134 1457.9,682.453 1458.46,667.811 1459.02,668.28 1459.58,698.115 1460.14,727.937 1460.7,707.695 1461.25,758.02 1461.81,722.808 1462.37,705.506 1462.93,672.48 1463.49,690.963 1464.05,656.764 1464.61,693.862 1465.17,678.792 1465.73,648.326 1466.29,652.433 1466.85,638.529 1467.41,646.368 1467.97,648.402 1468.52,618.443 1469.08,620.033 1469.64,654.961 1470.2,658.169 1470.76,671.379 1471.32,673.303 1471.88,671.178 1472.44,702.804 1473,715.37 1473.56,711.907 1474.12,643.18 1474.68,645.611 1475.24,613.024 1475.79,634.331 1476.35,639.11 1476.91,660.053 1477.47,632.823 1478.03,633.165 1478.59,637.992 1479.15,672.759 1479.71,689.709 1480.27,662.86 1480.83,647.459 1481.39,666.09 1481.95,652.329 1482.51,637.285 1483.07,589.227 1483.62,578.652 1484.18,599.707 1484.74,604.375 1485.3,644.366 1485.86,642.88 1486.42,630.374 1486.98,636.45 1487.54,637.201 1488.1,642.621 1488.66,646.015 1489.22,681.023 1489.78,713.859 1490.34,680.632 1490.89,635.742 1491.45,621.77 1492.01,625.334 1492.57,642.287 1493.13,642.234 1493.69,662.333 1494.25,629.403 1494.81,598.717 1495.37,604.342 1495.93,642.525 1496.49,629.768 1497.05,631.081 1497.61,647.816 1498.16,632.213 1498.72,619.711 1499.28,606.04 1499.84,579.049 1500.4,589.906 1500.96,546.701 1501.52,555.805 1502.08,532.361 1502.64,541.191 1503.2,547.905 1503.76,587.604 1504.32,576.972 1504.88,598.389 1505.44,604.248 1505.99,622.723 1506.55,627.354 1507.11,629.078 1507.67,618.361 1508.23,640.104 1508.79,656.607 1509.35,659.121 1509.91,674.627 1510.47,675.555 1511.03,643.19 1511.59,661.208 1512.15,662.26 1512.71,659.829 1513.26,645.49 1513.82,665.616 1514.38,678.231 1514.94,679.74 1515.5,698.451 1516.06,712.195 1516.62,692.888 1517.18,689.443 1517.74,739.776 1518.3,734.988 1518.86,686.232 1519.42,700.695 1519.98,715.743 1520.53,715.283 1521.09,713.579 1521.65,712.863 1522.21,741.095 1522.77,737.764 1523.33,754.181 1523.89,765.589 1524.45,780.19 1525.01,806.849 1525.57,799.005 1526.13,780.259 1526.69,790.013 1527.25,796.706 1527.81,774.958 1528.36,770.07 1528.92,747.65 1529.48,760.326 1530.04,754.066 1530.6,765.997 1531.16,746.333 1531.72,739.591 1532.28,737.854 1532.84,730.373 1533.4,728.944 1533.96,696.851 1534.52,712.416 1535.08,714.044 1535.63,712.767 1536.19,711.476 1536.75,745.256 1537.31,759.49 1537.87,769.129 1538.43,749.515 1538.99,747.706 1539.55,746.239 1540.11,725.003 1540.67,723.644 1541.23,738.963 1541.79,731.83 1542.35,728.017 1542.9,728.139 1543.46,741.027 1544.02,787.461 1544.58,791.875 1545.14,786.15 1545.7,749.65 1546.26,745.888 1546.82,780.772 1547.38,731.306 1547.94,696.013 1548.5,677.441 1549.06,676.478 1549.62,643.714 1550.18,661.947 1550.73,662.826 1551.29,680.357 1551.85,696.151 1552.41,725.51 1552.97,720.961 1553.53,720.216 1554.09,734.317 1554.65,717.322 1555.21,728.495 1555.77,757.329 1556.33,750.689 1556.89,730.548 1557.45,744.717 1558,772.81 1558.56,753.774 1559.12,750.048 1559.68,711.909 1560.24,725.021 1560.8,757.088 1561.36,736.978 1561.92,749.859 1562.48,732.57 1563.04,697.93 1563.6,652.029 1564.16,653.891 1564.72,639.504 1565.28,639.469 1565.83,656.588 1566.39,626.164 1566.95,664.65 1567.51,666.94 1568.07,687.304 1568.63,654.32 1569.19,643.49 1569.75,647.801 1570.31,667.036 1570.87,665.049 1571.43,698.333 1571.99,678.467 1572.55,659.986 1573.1,679.763 1573.66,712.295 1574.22,696.608 1574.78,713.808 1575.34,714.145 1575.9,710.874 1576.46,680.109 1577.02,696.651 1577.58,747.401 1578.14,794.213 1578.7,773.338 1579.26,768.732 1579.82,765.814 1580.37,809.125 1580.93,789.014 1581.49,800.444 1582.05,764.426 1582.61,748.122 1583.17,745.5 1583.73,709.087 1584.29,724.254 1584.85,738.899 1585.41,736.244 1585.97,748.929 1586.53,760.658 1587.09,703.973 1587.65,715.37 1588.2,712.683 1588.76,696.889 1589.32,684.676 1589.88,702.043 1590.44,665.432 1591,664.534 1591.56,647.658 1592.12,649.364 1592.68,649.671 1593.24,650.861 1593.8,683.141 1594.36,663.196 1594.92,648.134 1595.47,614.147 1596.03,598.911 1596.59,587.604 1597.15,612.531 1597.71,618.165 1598.27,622.273 1598.83,610.4 1599.39,629.226 1599.95,650.673 1600.51,638.114 1601.07,671.713 1601.63,641.515 1602.19,628.359 1602.74,637.541 1603.3,641.8 1603.86,642.283 1604.42,628.579 1604.98,650.995 1605.54,637.144 1606.1,654.332 1606.66,675.851 1607.22,659.806 1607.78,661.863 1608.34,662.457 1608.9,630.641 1609.46,616.066 1610.02,606.901 1610.57,641.328 1611.13,641.036 1611.69,625.625 1612.25,679.785 1612.81,679.83 1613.37,679.517 1613.93,682.047 1614.49,683.399 1615.05,697.137 1615.61,681.523 1616.17,667.344 1616.73,682.304 1617.29,647.47 1617.84,634.216 1618.4,670.089 1618.96,687.937 1619.52,688.629 1620.08,675.048 1620.64,675.861 1621.2,661.801 1621.76,664.08 1622.32,680.778 1622.88,666.548 1623.44,670.371 1624,673.852 1624.56,708.421 1625.11,691.71 1625.67,678.777 1626.23,647.632 1626.79,633.065 1627.35,601.642 1627.91,606.813 1628.47,609.383 1629.03,614.099 1629.59,652.002 1630.15,653.135 1630.71,656.927 1631.27,643.22 1631.83,659.583 1632.39,648.828 1632.94,682.618 1633.5,664.313 1634.06,682.768 1634.62,697.835 1635.18,713.131 1635.74,709.78 1636.3,707.016 1636.86,705.256 1637.42,686.891 1637.98,666.888 1638.54,683.006 1639.1,699.036 1639.66,717.226 1640.21,715.65 1640.77,714.456 1641.33,681.93 1641.89,678.6 1642.45,629.612 1643.01,634.879 1643.57,637.406 1644.13,676.447 1644.69,644.238 1645.25,630.921 1645.81,634.075 1646.37,637.881 1646.93,641.746 1647.48,625.011 1648.04,643.813 1648.6,645.897 1649.16,677.557 1649.72,660.308 1650.28,646.518 1650.84,664.193 1651.4,631.726 1651.96,652.432 1652.52,653.18 1653.08,669.378 1653.64,670.028 1654.2,652.632 1654.76,636.702 1655.31,657.019 1655.87,677.295 1656.43,664.327 1656.99,649.578 1657.55,651.966 1658.11,669.249 1658.67,652.06 1659.23,654.133 1659.79,672.146 1660.35,688.028 1660.91,707.395 1661.47,720.4 1662.03,703.587 1662.58,719.362 1663.14,713.622 1663.7,744.962 1664.26,773.335 1664.82,766.055 1665.38,758.09 1665.94,755.062 1666.5,752.455 1667.06,731.044 1667.62,745.71 1668.18,755.739 1668.74,763.447 1669.3,775.172 1669.85,754.097 1670.41,700.965 1670.97,679.604 1671.53,650.357 1672.09,670.625 1672.65,687.744 1673.21,690.741 1673.77,691.852 1674.33,692.081 1674.89,722.819 1675.45,690.496 1676.01,690.197 1676.57,675.408 1677.13,707.619 1677.68,720.411 1678.24,718.151 1678.8,705.422 1679.36,702.827 1679.92,686.659 1680.48,634.795 1681.04,621.754 1681.6,608.78 1682.16,586.125 1682.72,575.439 1683.28,615.16 1683.84,618.287 1684.4,655.323 1684.95,657.518 1685.51,689.73 1686.07,676.957 1686.63,662.77 1687.19,681.139 1687.75,713.2 1688.31,729.292 1688.87,691.999 1689.43,692.565 1689.99,706.158 1690.55,719.275 1691.11,699.381 1691.67,665.781 1692.23,686.334 1692.78,685.067 1693.34,719.009 1693.9,684.322 1694.46,716.256 1695.02,727.205 1695.58,757.884 1696.14,769.859 1696.7,750.604 1697.26,762.289 1697.82,756.562 1698.38,767.172 1698.94,743.765 1699.5,756.528 1700.05,736.635 1700.61,734.283 1701.17,745.82 1701.73,758.349 1702.29,786.531 1702.85,765.575 1703.41,772.428 1703.97,780.547 1704.53,794.68 1705.09,792.948 1705.65,774.646 1706.21,753.663 1706.77,764.696 1707.32,760.631 1707.88,757.59 1708.44,815.148 1709,808.484 1709.56,767.625 1710.12,746.966 1710.68,729.492 1711.24,710.146 1711.8,707.233 1712.36,708.146 1712.92,706.773 1713.48,725.008 1714.04,688.085 1714.6,706.021 1715.15,692.704 1715.71,724.396 1716.27,738.32 1716.83,718.224 1717.39,733.138 1717.95,727.628 1718.51,661.462 1719.07,695.738 1719.63,711.991 1720.19,678.488 1720.75,677.559 1721.31,678.439 1721.87,695.371 1722.42,691.625 1722.98,704.757 1723.54,718.235 1724.1,736.757 1724.66,720.235 1725.22,717.165 1725.78,748.541 1726.34,760.077 1726.9,753.73 1727.46,688.54 1728.02,689.47 1728.58,704.314 1729.14,701.907 1729.69,698.565 1730.25,664.725 1730.81,685.11 1731.37,682.586 1731.93,635.609 1732.49,620.466 1733.05,622.644 1733.61,640.933 1734.17,643.948 1734.73,661.542 1735.29,664.868 1735.85,681.957 1736.41,668.222 1736.97,684.323 1737.52,681.624 1738.08,681.283 1738.64,679.92 1739.2,698.261 1739.76,680.716 1740.32,680.059 1740.88,665.75 1741.44,668.628 1742,669.767 1742.56,682.044 1743.12,665.528 1743.68,650.767 1744.24,651.285 1744.79,686.874 1745.35,686.668 1745.91,704.657 1746.47,716.957 1747.03,664.275 1747.59,662.438 1748.15,648.682 1748.71,632.716 1749.27,635.414 1749.83,654.005 1750.39,640.763 1750.95,643.565 1751.51,663.493 1752.06,683.587 1752.62,633.49 1753.18,620.716 1753.74,623.488 1754.3,642.529 1754.86,643.351 1755.42,640.44 1755.98,689.68 1756.54,671.538 1757.1,655.315 1757.66,657.347 1758.22,639.392 1758.78,612.308 1759.34,600.03 1759.89,638.279 1760.45,642.524 1761.01,660.265 1761.57,657.416 1762.13,657.605 1762.69,625.042 1763.25,629.333 1763.81,649.522 1764.37,669.663 1764.93,697.119 1765.49,716.103 1766.05,716.363 1766.61,715.761 1767.16,699.705 1767.72,746.99 1768.28,758.637 1768.84,755.515 1769.4,734.291 1769.96,701.824 1770.52,714.559 1771.08,698.419 1771.64,686.746 1772.2,717.583 1772.76,683.008 1773.32,685.187 1773.88,704.615 1774.43,703.679 1774.99,684.386 1775.55,698.537 1776.11,699.783 1776.67,698.113 1777.23,696.889 1777.79,699.564 1778.35,681.367 1778.91,667.963 1779.47,700.977 1780.03,701.715 1780.59,702.907 1781.15,700.423 1781.71,697.674 1782.26,667.007 1782.82,653.364 1783.38,623.945 1783.94,625.086 1784.5,629.032 1785.06,632.588 1785.62,606.139 1786.18,558.251 1786.74,563.393 1787.3,567.994 1787.86,563.398 1788.42,619.317 1788.98,640.395 1789.53,674.312 1790.09,660.028 1790.65,661.584 1791.21,698.332 1791.77,700.334 1792.33,731.695 1792.89,714.993 1793.45,726.238 1794.01,771.657 1794.57,718.875 1795.13,714.081 1795.69,681.282 1796.25,668.197 1796.8,669.122 1797.36,705.173 1797.92,731.318 1798.48,759.091 1799.04,753.34 1799.6,764.612 1800.16,745.564 1800.72,789.34 1801.28,766.392 1801.84,778.668 1802.4,757.799 1802.96,753.363 1803.52,716.543 1804.08,698.759 1804.63,696.578 1805.19,698.33 1805.75,713.928 1806.31,729.886 1806.87,742.828 1807.43,737.538 1807.99,684.869 1808.55,699.363 1809.11,695.232 1809.67,694.051 1810.23,676.741 1810.79,642.122 1811.35,664.282 1811.9,648.63 1812.46,667.491 1813.02,669.487 1813.58,702.368 1814.14,717.593 1814.7,761.49 1815.26,723.697 1815.82,737.195 1816.38,736.734 1816.94,767.48 1817.5,777.658 1818.06,736.423 1818.62,735.636 1819.18,748.621 1819.73,745.605 1820.29,741.77 1820.85,739.701 1821.41,769.136 1821.97,731.359 1822.53,709.474 1823.09,689.655 1823.65,671.72 1824.21,656.293 1824.77,674.82 1825.33,690.475 1825.89,688.561 1826.45,656.133 1827,670.869 1827.56,670.327 1828.12,687.085 1828.68,658.154 1829.24,643.889 1829.8,597.987 1830.36,618.985 1830.92,604.291 1831.48,593.31 1832.04,612.805 1832.6,616.963 1833.16,608.499 1833.72,577.897 1834.27,597.515 1834.83,619.783 1835.39,606.794 1835.95,610.448 1836.51,599.175 1837.07,589.229 1837.63,610.532 1838.19,583.482 \"/>\n<path clip-path=\"url(#clip123)\" d=\"M720.247 692.108 L720.806 692.108 L721.365 692.108 L721.924 692.108 L722.484 692.108 L723.043 692.108 L723.602 692.108 L724.161 692.108 L724.721 692.108 L725.28 692.108 L725.839 692.108 L726.398 692.108 L726.958 692.108 L727.517 692.108 L728.076 692.108 L728.635 692.108 L729.195 692.108 L729.754 692.108 L730.313 692.108 L730.872 692.108 L731.432 692.108 L731.991 692.108 L732.55 692.108 L733.109 692.108 L733.669 692.108 L734.228 692.108 L734.787 692.108 L735.346 692.108 L735.906 692.108 L736.465 692.108 L737.024 692.108 L737.583 692.108 L738.143 692.108 L738.702 692.108 L739.261 692.108 L739.82 692.108 L740.38 692.108 L740.939 692.108 L741.498 692.108 L742.057 692.108 L742.617 692.108 L743.176 692.108 L743.735 692.108 L744.294 692.108 L744.854 692.108 L745.413 692.108 L745.972 692.108 L746.531 692.108 L747.091 692.108 L747.65 692.108 L748.209 692.108 L748.768 692.108 L749.328 692.108 L749.887 692.108 L750.446 692.108 L751.005 692.108 L751.565 692.108 L752.124 692.108 L752.683 692.108 L753.242 692.108 L753.802 692.108 L754.361 692.108 L754.92 692.108 L755.479 692.108 L756.039 692.108 L756.598 692.108 L757.157 692.108 L757.716 692.108 L758.276 692.108 L758.835 692.108 L759.394 692.108 L759.953 692.108 L760.513 692.108 L761.072 692.108 L761.631 692.108 L762.19 692.108 L762.75 692.108 L763.309 692.108 L763.868 692.108 L764.427 692.108 L764.987 692.108 L765.546 692.108 L766.105 692.108 L766.664 692.108 L767.224 692.108 L767.783 692.108 L768.342 692.108 L768.901 692.108 L769.461 692.108 L770.02 692.108 L770.579 692.108 L771.138 692.108 L771.698 692.108 L772.257 692.108 L772.816 692.108 L773.375 692.108 L773.935 692.108 L774.494 692.108 L775.053 692.108 L775.612 692.108 L776.172 692.108 L776.731 692.108 L777.29 692.108 L777.849 692.108 L778.409 692.108 L778.968 692.108 L779.527 692.108 L780.086 692.108 L780.646 692.108 L781.205 692.108 L781.764 692.108 L782.323 692.108 L782.883 692.108 L783.442 692.108 L784.001 692.108 L784.56 692.108 L785.12 692.108 L785.679 692.108 L786.238 692.108 L786.797 692.108 L787.357 692.108 L787.916 692.108 L788.475 692.108 L789.034 692.108 L789.594 692.108 L790.153 692.108 L790.712 692.108 L791.271 692.108 L791.831 692.108 L792.39 692.108 L792.949 692.108 L793.508 692.108 L794.068 692.108 L794.627 692.108 L795.186 692.108 L795.745 692.108 L796.305 692.108 L796.864 692.108 L797.423 692.108 L797.982 692.108 L798.542 692.108 L799.101 692.108 L799.66 692.108 L800.219 692.108 L800.779 692.108 L801.338 692.108 L801.897 692.108 L802.456 692.108 L803.016 692.108 L803.575 692.108 L804.134 692.108 L804.693 692.108 L805.253 692.108 L805.812 692.108 L806.371 692.108 L806.931 692.108 L807.49 692.108 L808.049 692.108 L808.608 692.108 L809.168 692.108 L809.727 692.108 L810.286 692.108 L810.845 692.108 L811.405 692.108 L811.964 692.108 L812.523 692.108 L813.082 692.108 L813.642 692.108 L814.201 692.108 L814.76 692.108 L815.319 692.108 L815.879 692.108 L816.438 692.108 L816.997 692.108 L817.556 692.108 L818.116 692.108 L818.675 692.108 L819.234 692.108 L819.793 692.108 L820.353 692.108 L820.912 692.108 L821.471 692.108 L822.03 692.108 L822.59 692.108 L823.149 692.108 L823.708 692.108 L824.267 692.108 L824.827 692.108 L825.386 692.108 L825.945 692.108 L826.504 692.108 L827.064 692.108 L827.623 692.108 L828.182 692.108 L828.741 692.108 L829.301 692.108 L829.86 692.108 L830.419 692.108 L830.978 692.108 L831.538 692.108 L832.097 692.108 L832.656 692.108 L833.215 692.108 L833.775 692.108 L834.334 692.108 L834.893 692.108 L835.452 692.108 L836.012 692.108 L836.571 692.108 L837.13 692.108 L837.689 692.108 L838.249 692.108 L838.808 692.108 L839.367 692.108 L839.926 692.108 L840.486 692.108 L841.045 692.108 L841.604 692.108 L842.163 692.108 L842.723 692.108 L843.282 692.108 L843.841 692.108 L844.4 692.108 L844.96 692.108 L845.519 692.108 L846.078 692.108 L846.637 692.108 L847.197 692.108 L847.756 692.108 L848.315 692.108 L848.874 692.108 L849.434 692.108 L849.993 692.108 L850.552 692.108 L851.111 692.108 L851.671 692.108 L852.23 692.108 L852.789 692.108 L853.348 692.108 L853.908 692.108 L854.467 692.108 L855.026 692.108 L855.585 692.108 L856.145 692.108 L856.704 692.108 L857.263 692.108 L857.822 692.108 L858.382 692.108 L858.941 692.108 L859.5 692.108 L860.059 692.108 L860.619 692.108 L861.178 692.108 L861.737 692.108 L862.296 692.108 L862.856 692.108 L863.415 692.108 L863.974 692.108 L864.533 692.108 L865.093 692.108 L865.652 692.108 L866.211 692.108 L866.77 692.108 L867.33 692.108 L867.889 692.108 L868.448 692.108 L869.007 692.108 L869.567 692.108 L870.126 692.108 L870.685 692.108 L871.244 692.108 L871.804 692.108 L872.363 692.108 L872.922 692.108 L873.481 692.108 L874.041 692.108 L874.6 692.108 L875.159 692.108 L875.718 692.108 L876.278 692.108 L876.837 692.108 L877.396 692.108 L877.955 692.108 L878.515 692.108 L879.074 692.108 L879.633 692.108 L880.192 692.108 L880.752 692.108 L881.311 692.108 L881.87 692.108 L882.429 692.108 L882.989 692.108 L883.548 692.108 L884.107 692.108 L884.666 692.108 L885.226 692.108 L885.785 692.108 L886.344 692.108 L886.903 692.108 L887.463 692.108 L888.022 692.108 L888.581 692.108 L889.14 692.108 L889.7 692.108 L890.259 692.108 L890.818 692.108 L891.377 692.108 L891.937 692.108 L892.496 692.108 L893.055 692.108 L893.614 692.108 L894.174 692.108 L894.733 692.108 L895.292 692.108 L895.851 692.108 L896.411 692.108 L896.97 692.108 L897.529 692.108 L898.088 692.108 L898.648 692.108 L899.207 692.108 L899.766 692.108 L900.325 692.108 L900.885 692.108 L901.444 692.108 L902.003 692.108 L902.562 692.108 L903.122 692.108 L903.681 692.108 L904.24 692.108 L904.799 692.108 L905.359 692.108 L905.918 692.108 L906.477 692.108 L907.036 692.108 L907.596 692.108 L908.155 692.108 L908.714 692.108 L909.273 692.108 L909.833 692.108 L910.392 692.108 L910.951 692.108 L911.51 692.108 L912.07 692.108 L912.629 692.108 L913.188 692.108 L913.747 692.108 L914.307 692.108 L914.866 692.108 L915.425 692.108 L915.984 692.108 L916.544 692.108 L917.103 692.108 L917.662 692.108 L918.221 692.108 L918.781 692.108 L919.34 692.108 L919.899 692.108 L920.458 692.108 L921.018 692.108 L921.577 692.108 L922.136 692.108 L922.695 692.108 L923.255 692.108 L923.814 692.108 L924.373 692.108 L924.932 692.108 L925.492 692.108 L926.051 692.108 L926.61 692.108 L927.169 692.108 L927.729 692.108 L928.288 692.108 L928.847 692.108 L929.406 692.108 L929.966 692.108 L930.525 692.108 L931.084 692.108 L931.644 692.108 L932.203 692.108 L932.762 692.108 L933.321 692.108 L933.881 692.108 L934.44 692.108 L934.999 692.108 L935.558 692.108 L936.118 692.108 L936.677 692.108 L937.236 692.108 L937.795 692.108 L938.355 692.108 L938.914 692.108 L939.473 692.108 L940.032 692.108 L940.592 692.108 L941.151 692.108 L941.71 692.108 L942.269 692.108 L942.829 692.108 L943.388 692.108 L943.947 692.108 L944.506 692.108 L945.066 692.108 L945.625 692.108 L946.184 692.108 L946.743 692.108 L947.303 692.108 L947.862 692.108 L948.421 692.108 L948.98 692.108 L949.54 692.108 L950.099 692.108 L950.658 692.108 L951.217 692.108 L951.777 692.108 L952.336 692.108 L952.895 692.108 L953.454 692.108 L954.014 692.108 L954.573 692.108 L955.132 692.108 L955.691 692.108 L956.251 692.108 L956.81 692.108 L957.369 692.108 L957.928 692.108 L958.488 692.108 L959.047 692.108 L959.606 692.108 L960.165 692.108 L960.725 692.108 L961.284 692.108 L961.843 692.108 L962.402 692.108 L962.962 692.108 L963.521 692.108 L964.08 692.108 L964.639 692.108 L965.199 692.108 L965.758 692.108 L966.317 692.108 L966.876 692.108 L967.436 692.108 L967.995 692.108 L968.554 692.108 L969.113 692.108 L969.673 692.108 L970.232 692.108 L970.791 692.108 L971.35 692.108 L971.91 692.108 L972.469 692.108 L973.028 692.108 L973.587 692.108 L974.147 692.108 L974.706 692.108 L975.265 692.108 L975.824 692.108 L976.384 692.108 L976.943 692.108 L977.502 692.108 L978.061 692.108 L978.621 692.108 L979.18 692.108 L979.739 692.108 L980.298 692.108 L980.858 692.108 L981.417 692.108 L981.976 692.108 L982.535 692.108 L983.095 692.108 L983.654 692.108 L984.213 692.108 L984.772 692.108 L985.332 692.108 L985.891 692.108 L986.45 692.108 L987.009 692.108 L987.569 692.108 L988.128 692.108 L988.687 692.108 L989.246 692.108 L989.806 692.108 L990.365 692.108 L990.924 692.108 L991.483 692.108 L992.043 692.108 L992.602 692.108 L993.161 692.108 L993.72 692.108 L994.28 692.108 L994.839 692.108 L995.398 692.108 L995.957 692.108 L996.517 692.108 L997.076 692.108 L997.635 692.108 L998.194 692.108 L998.754 692.108 L999.313 692.108 L999.872 692.108 L1000.43 692.108 L1000.99 692.108 L1001.55 692.108 L1002.11 692.108 L1002.67 692.108 L1003.23 692.108 L1003.79 692.108 L1004.35 692.108 L1004.91 692.108 L1005.46 692.108 L1006.02 692.108 L1006.58 692.108 L1007.14 692.108 L1007.7 692.108 L1008.26 692.108 L1008.82 692.108 L1009.38 692.108 L1009.94 692.108 L1010.5 692.108 L1011.06 692.108 L1011.62 692.108 L1012.18 692.108 L1012.73 692.108 L1013.29 692.108 L1013.85 692.108 L1014.41 692.108 L1014.97 692.108 L1015.53 692.108 L1016.09 692.108 L1016.65 692.108 L1017.21 692.108 L1017.77 692.108 L1018.33 692.108 L1018.89 692.108 L1019.45 692.108 L1020.01 692.108 L1020.56 692.108 L1021.12 692.108 L1021.68 692.108 L1022.24 692.108 L1022.8 692.108 L1023.36 692.108 L1023.92 692.108 L1024.48 692.108 L1025.04 692.108 L1025.6 692.108 L1026.16 692.108 L1026.72 692.108 L1027.28 692.108 L1027.83 692.108 L1028.39 692.108 L1028.95 692.108 L1029.51 692.108 L1030.07 692.108 L1030.63 692.108 L1031.19 692.108 L1031.75 692.108 L1032.31 692.108 L1032.87 692.108 L1033.43 692.108 L1033.99 692.108 L1034.55 692.108 L1035.1 692.108 L1035.66 692.108 L1036.22 692.108 L1036.78 692.108 L1037.34 692.108 L1037.9 692.108 L1038.46 692.108 L1039.02 692.108 L1039.58 692.108 L1040.14 692.108 L1040.7 692.108 L1041.26 692.108 L1041.82 692.108 L1042.38 692.108 L1042.93 692.108 L1043.49 692.108 L1044.05 692.108 L1044.61 692.108 L1045.17 692.108 L1045.73 692.108 L1046.29 692.108 L1046.85 692.108 L1047.41 692.108 L1047.97 692.108 L1048.53 692.108 L1049.09 692.108 L1049.65 692.108 L1050.2 692.108 L1050.76 692.108 L1051.32 692.108 L1051.88 692.108 L1052.44 692.108 L1053 692.108 L1053.56 692.108 L1054.12 692.108 L1054.68 692.108 L1055.24 692.108 L1055.8 692.108 L1056.36 692.108 L1056.92 692.108 L1057.48 692.108 L1058.03 692.108 L1058.59 692.108 L1059.15 692.108 L1059.71 692.108 L1060.27 692.108 L1060.83 692.108 L1061.39 692.108 L1061.95 692.108 L1062.51 692.108 L1063.07 692.108 L1063.63 692.108 L1064.19 692.108 L1064.75 692.108 L1065.3 692.108 L1065.86 692.108 L1066.42 692.108 L1066.98 692.108 L1067.54 692.108 L1068.1 692.108 L1068.66 692.108 L1069.22 692.108 L1069.78 692.108 L1070.34 692.108 L1070.9 692.108 L1071.46 692.108 L1072.02 692.108 L1072.57 692.108 L1073.13 692.108 L1073.69 692.108 L1074.25 692.108 L1074.81 692.108 L1075.37 692.108 L1075.93 692.108 L1076.49 692.108 L1077.05 692.108 L1077.61 692.108 L1078.17 692.108 L1078.73 692.108 L1079.29 692.108 L1079.85 692.108 L1080.4 692.108 L1080.96 692.108 L1081.52 692.108 L1082.08 692.108 L1082.64 692.108 L1083.2 692.108 L1083.76 692.108 L1084.32 692.108 L1084.88 692.108 L1085.44 692.108 L1086 692.108 L1086.56 692.108 L1087.12 692.108 L1087.67 692.108 L1088.23 692.108 L1088.79 692.108 L1089.35 692.108 L1089.91 692.108 L1090.47 692.108 L1091.03 692.108 L1091.59 692.108 L1092.15 692.108 L1092.71 692.108 L1093.27 692.108 L1093.83 692.108 L1094.39 692.108 L1094.94 692.108 L1095.5 692.108 L1096.06 692.108 L1096.62 692.108 L1097.18 692.108 L1097.74 692.108 L1098.3 692.108 L1098.86 692.108 L1099.42 692.108 L1099.98 692.108 L1100.54 692.108 L1101.1 692.108 L1101.66 692.108 L1102.22 692.108 L1102.77 692.108 L1103.33 692.108 L1103.89 692.108 L1104.45 692.108 L1105.01 692.108 L1105.57 692.108 L1106.13 692.108 L1106.69 692.108 L1107.25 692.108 L1107.81 692.108 L1108.37 692.108 L1108.93 692.108 L1109.49 692.108 L1110.04 692.108 L1110.6 692.108 L1111.16 692.108 L1111.72 692.108 L1112.28 692.108 L1112.84 692.108 L1113.4 692.108 L1113.96 692.108 L1114.52 692.108 L1115.08 692.108 L1115.64 692.108 L1116.2 692.108 L1116.76 692.108 L1117.31 692.108 L1117.87 692.108 L1118.43 692.108 L1118.99 692.108 L1119.55 692.108 L1120.11 692.108 L1120.67 692.108 L1121.23 692.108 L1121.79 692.108 L1122.35 692.108 L1122.91 692.108 L1123.47 692.108 L1124.03 692.108 L1124.59 692.108 L1125.14 692.108 L1125.7 692.108 L1126.26 692.108 L1126.82 692.108 L1127.38 692.108 L1127.94 692.108 L1128.5 692.108 L1129.06 692.108 L1129.62 692.108 L1130.18 692.108 L1130.74 692.108 L1131.3 692.108 L1131.86 692.108 L1132.41 692.108 L1132.97 692.108 L1133.53 692.108 L1134.09 692.108 L1134.65 692.108 L1135.21 692.108 L1135.77 692.108 L1136.33 692.108 L1136.89 692.108 L1137.45 692.108 L1138.01 692.108 L1138.57 692.108 L1139.13 692.108 L1139.68 692.108 L1140.24 692.108 L1140.8 692.108 L1141.36 692.108 L1141.92 692.108 L1142.48 692.108 L1143.04 692.108 L1143.6 692.108 L1144.16 692.108 L1144.72 692.108 L1145.28 692.108 L1145.84 692.108 L1146.4 692.108 L1146.96 692.108 L1147.51 692.108 L1148.07 692.108 L1148.63 692.108 L1149.19 692.108 L1149.75 692.108 L1150.31 692.108 L1150.87 692.108 L1151.43 692.108 L1151.99 692.108 L1152.55 692.108 L1153.11 692.108 L1153.67 692.108 L1154.23 692.108 L1154.78 692.108 L1155.34 692.108 L1155.9 692.108 L1156.46 692.108 L1157.02 692.108 L1157.58 692.108 L1158.14 692.108 L1158.7 692.108 L1159.26 692.108 L1159.82 692.108 L1160.38 692.108 L1160.94 692.108 L1161.5 692.108 L1162.05 692.108 L1162.61 692.108 L1163.17 692.108 L1163.73 692.108 L1164.29 692.108 L1164.85 692.108 L1165.41 692.108 L1165.97 692.108 L1166.53 692.108 L1167.09 692.108 L1167.65 692.108 L1168.21 692.108 L1168.77 692.108 L1169.33 692.108 L1169.88 692.108 L1170.44 692.108 L1171 692.108 L1171.56 692.108 L1172.12 692.108 L1172.68 692.108 L1173.24 692.108 L1173.8 692.108 L1174.36 692.108 L1174.92 692.108 L1175.48 692.108 L1176.04 692.108 L1176.6 692.108 L1177.15 692.108 L1177.71 692.108 L1178.27 692.108 L1178.83 692.108 L1179.39 692.108 L1179.95 692.108 L1180.51 692.108 L1181.07 692.108 L1181.63 692.108 L1182.19 692.108 L1182.75 692.108 L1183.31 692.108 L1183.87 692.108 L1184.43 692.108 L1184.98 692.108 L1185.54 692.108 L1186.1 692.108 L1186.66 692.108 L1187.22 692.108 L1187.78 692.108 L1188.34 692.108 L1188.9 692.108 L1189.46 692.108 L1190.02 692.108 L1190.58 692.108 L1191.14 692.108 L1191.7 692.108 L1192.25 692.108 L1192.81 692.108 L1193.37 692.108 L1193.93 692.108 L1194.49 692.108 L1195.05 692.108 L1195.61 692.108 L1196.17 692.108 L1196.73 692.108 L1197.29 692.108 L1197.85 692.108 L1198.41 692.108 L1198.97 692.108 L1199.52 692.108 L1200.08 692.108 L1200.64 692.108 L1201.2 692.108 L1201.76 692.108 L1202.32 692.108 L1202.88 692.108 L1203.44 692.108 L1204 692.108 L1204.56 692.108 L1205.12 692.108 L1205.68 692.108 L1206.24 692.108 L1206.8 692.108 L1207.35 692.108 L1207.91 692.108 L1208.47 692.108 L1209.03 692.108 L1209.59 692.108 L1210.15 692.108 L1210.71 692.108 L1211.27 692.108 L1211.83 692.108 L1212.39 692.108 L1212.95 692.108 L1213.51 692.108 L1214.07 692.108 L1214.62 692.108 L1215.18 692.108 L1215.74 692.108 L1216.3 692.108 L1216.86 692.108 L1217.42 692.108 L1217.98 692.108 L1218.54 692.108 L1219.1 692.108 L1219.66 692.108 L1220.22 692.108 L1220.78 692.108 L1221.34 692.108 L1221.89 692.108 L1222.45 692.108 L1223.01 692.108 L1223.57 692.108 L1224.13 692.108 L1224.69 692.108 L1225.25 692.108 L1225.81 692.108 L1226.37 692.108 L1226.93 692.108 L1227.49 692.108 L1228.05 692.108 L1228.61 692.108 L1229.17 692.108 L1229.72 692.108 L1230.28 692.108 L1230.84 692.108 L1231.4 692.108 L1231.96 692.108 L1232.52 692.108 L1233.08 692.108 L1233.64 692.108 L1234.2 692.108 L1234.76 692.108 L1235.32 692.108 L1235.88 692.108 L1236.44 692.108 L1236.99 692.108 L1237.55 692.108 L1238.11 692.108 L1238.67 692.108 L1239.23 692.108 L1239.79 692.108 L1240.35 692.108 L1240.91 692.108 L1241.47 692.108 L1242.03 692.108 L1242.59 692.108 L1243.15 692.108 L1243.71 692.108 L1244.26 692.108 L1244.82 692.108 L1245.38 692.108 L1245.94 692.108 L1246.5 692.108 L1247.06 692.108 L1247.62 692.108 L1248.18 692.108 L1248.74 692.108 L1249.3 692.108 L1249.86 692.108 L1250.42 692.108 L1250.98 692.108 L1251.54 692.108 L1252.09 692.108 L1252.65 692.108 L1253.21 692.108 L1253.77 692.108 L1254.33 692.108 L1254.89 692.108 L1255.45 692.108 L1256.01 692.108 L1256.57 692.108 L1257.13 692.108 L1257.69 692.108 L1258.25 692.108 L1258.81 692.108 L1259.36 692.108 L1259.92 692.108 L1260.48 692.108 L1261.04 692.108 L1261.6 692.108 L1262.16 692.108 L1262.72 692.108 L1263.28 692.108 L1263.84 692.108 L1264.4 692.108 L1264.96 692.108 L1265.52 692.108 L1266.08 692.108 L1266.63 692.108 L1267.19 692.108 L1267.75 692.108 L1268.31 692.108 L1268.87 692.108 L1269.43 692.108 L1269.99 692.108 L1270.55 692.108 L1271.11 692.108 L1271.67 692.108 L1272.23 692.108 L1272.79 692.108 L1273.35 692.108 L1273.91 692.108 L1274.46 692.108 L1275.02 692.108 L1275.58 692.108 L1276.14 692.108 L1276.7 692.108 L1277.26 692.108 L1277.82 692.108 L1278.38 692.108 L1278.94 692.108 L1279.5 692.108 L1280.06 692.108 L1280.62 692.108 L1281.18 692.108 L1281.73 692.108 L1282.29 692.108 L1282.85 692.108 L1283.41 692.108 L1283.97 692.108 L1284.53 692.108 L1285.09 692.108 L1285.65 692.108 L1286.21 692.108 L1286.77 692.108 L1287.33 692.108 L1287.89 692.108 L1288.45 692.108 L1289 692.108 L1289.56 692.108 L1290.12 692.108 L1290.68 692.108 L1291.24 692.108 L1291.8 692.108 L1292.36 692.108 L1292.92 692.108 L1293.48 692.108 L1294.04 692.108 L1294.6 692.108 L1295.16 692.108 L1295.72 692.108 L1296.28 692.108 L1296.83 692.108 L1297.39 692.108 L1297.95 692.108 L1298.51 692.108 L1299.07 692.108 L1299.63 692.108 L1300.19 692.108 L1300.75 692.108 L1301.31 692.108 L1301.87 692.108 L1302.43 692.108 L1302.99 692.108 L1303.55 692.108 L1304.1 692.108 L1304.66 692.108 L1305.22 692.108 L1305.78 692.108 L1306.34 692.108 L1306.9 692.108 L1307.46 692.108 L1308.02 692.108 L1308.58 692.108 L1309.14 692.108 L1309.7 692.108 L1310.26 692.108 L1310.82 692.108 L1311.38 692.108 L1311.93 692.108 L1312.49 692.108 L1313.05 692.108 L1313.61 692.108 L1314.17 692.108 L1314.73 692.108 L1315.29 692.108 L1315.85 692.108 L1316.41 692.108 L1316.97 692.108 L1317.53 692.108 L1318.09 692.108 L1318.65 692.108 L1319.2 692.108 L1319.76 692.108 L1320.32 692.108 L1320.88 692.108 L1321.44 692.108 L1322 692.108 L1322.56 692.108 L1323.12 692.108 L1323.68 692.108 L1324.24 692.108 L1324.8 692.108 L1325.36 692.108 L1325.92 692.108 L1326.47 692.108 L1327.03 692.108 L1327.59 692.108 L1328.15 692.108 L1328.71 692.108 L1329.27 692.108 L1329.83 692.108 L1330.39 692.108 L1330.95 692.108 L1331.51 692.108 L1332.07 692.108 L1332.63 692.108 L1333.19 692.108 L1333.75 692.108 L1334.3 692.108 L1334.86 692.108 L1335.42 692.108 L1335.98 692.108 L1336.54 692.108 L1337.1 692.108 L1337.66 692.108 L1338.22 692.108 L1338.78 692.108 L1339.34 692.108 L1339.9 692.108 L1340.46 692.108 L1341.02 692.108 L1341.57 692.108 L1342.13 692.108 L1342.69 692.108 L1343.25 692.108 L1343.81 692.108 L1344.37 692.108 L1344.93 692.108 L1345.49 692.108 L1346.05 692.108 L1346.61 692.108 L1347.17 692.108 L1347.73 692.108 L1348.29 692.108 L1348.84 692.108 L1349.4 692.108 L1349.96 692.108 L1350.52 692.108 L1351.08 692.108 L1351.64 692.108 L1352.2 692.108 L1352.76 692.108 L1353.32 692.108 L1353.88 692.108 L1354.44 692.108 L1355 692.108 L1355.56 692.108 L1356.12 692.108 L1356.67 692.108 L1357.23 692.108 L1357.79 692.108 L1358.35 692.108 L1358.91 692.108 L1359.47 692.108 L1360.03 692.108 L1360.59 692.108 L1361.15 692.108 L1361.71 692.108 L1362.27 692.108 L1362.83 692.108 L1363.39 692.108 L1363.94 692.108 L1364.5 692.108 L1365.06 692.108 L1365.62 692.108 L1366.18 692.108 L1366.74 692.108 L1367.3 692.108 L1367.86 692.108 L1368.42 692.108 L1368.98 692.108 L1369.54 692.108 L1370.1 692.108 L1370.66 692.108 L1371.21 692.108 L1371.77 692.108 L1372.33 692.108 L1372.89 692.108 L1373.45 692.108 L1374.01 692.108 L1374.57 692.108 L1375.13 692.108 L1375.69 692.108 L1376.25 692.108 L1376.81 692.108 L1377.37 692.108 L1377.93 692.108 L1378.49 692.108 L1379.04 692.108 L1379.6 692.108 L1380.16 692.108 L1380.72 692.108 L1381.28 692.108 L1381.84 692.108 L1382.4 692.108 L1382.96 692.108 L1383.52 692.108 L1384.08 692.108 L1384.64 692.108 L1385.2 692.108 L1385.76 692.108 L1386.31 692.108 L1386.87 692.108 L1387.43 692.108 L1387.99 692.108 L1388.55 692.108 L1389.11 692.108 L1389.67 692.108 L1390.23 692.108 L1390.79 692.108 L1391.35 692.108 L1391.91 692.108 L1392.47 692.108 L1393.03 692.108 L1393.58 692.108 L1394.14 692.108 L1394.7 692.108 L1395.26 692.108 L1395.82 692.108 L1396.38 692.108 L1396.94 692.108 L1397.5 692.108 L1398.06 692.108 L1398.62 692.108 L1399.18 692.108 L1399.74 692.108 L1400.3 692.108 L1400.86 692.108 L1401.41 692.108 L1401.97 692.108 L1402.53 692.108 L1403.09 692.108 L1403.65 692.108 L1404.21 692.108 L1404.77 692.108 L1405.33 692.108 L1405.89 692.108 L1406.45 692.108 L1407.01 692.108 L1407.57 692.108 L1408.13 692.108 L1408.68 692.108 L1409.24 692.108 L1409.8 692.108 L1410.36 692.108 L1410.92 692.108 L1411.48 692.108 L1412.04 692.108 L1412.6 692.108 L1413.16 692.108 L1413.72 692.108 L1414.28 692.108 L1414.84 692.108 L1415.4 692.108 L1415.95 692.108 L1416.51 692.108 L1417.07 692.108 L1417.63 692.108 L1418.19 692.108 L1418.75 692.108 L1419.31 692.108 L1419.87 692.108 L1420.43 692.108 L1420.99 692.108 L1421.55 692.108 L1422.11 692.108 L1422.67 692.108 L1423.23 692.108 L1423.78 692.108 L1424.34 692.108 L1424.9 692.108 L1425.46 692.108 L1426.02 692.108 L1426.58 692.108 L1427.14 692.108 L1427.7 692.108 L1428.26 692.108 L1428.82 692.108 L1429.38 692.108 L1429.94 692.108 L1430.5 692.108 L1431.05 692.108 L1431.61 692.108 L1432.17 692.108 L1432.73 692.108 L1433.29 692.108 L1433.85 692.108 L1434.41 692.108 L1434.97 692.108 L1435.53 692.108 L1436.09 692.108 L1436.65 692.108 L1437.21 692.108 L1437.77 692.108 L1438.33 692.108 L1438.88 692.108 L1439.44 692.108 L1440 692.108 L1440.56 692.108 L1441.12 692.108 L1441.68 692.108 L1442.24 692.108 L1442.8 692.108 L1443.36 692.108 L1443.92 692.108 L1444.48 692.108 L1445.04 692.108 L1445.6 692.108 L1446.15 692.108 L1446.71 692.108 L1447.27 692.108 L1447.83 692.108 L1448.39 692.108 L1448.95 692.108 L1449.51 692.108 L1450.07 692.108 L1450.63 692.108 L1451.19 692.108 L1451.75 692.108 L1452.31 692.108 L1452.87 692.108 L1453.42 692.108 L1453.98 692.108 L1454.54 692.108 L1455.1 692.108 L1455.66 692.108 L1456.22 692.108 L1456.78 692.108 L1457.34 692.108 L1457.9 692.108 L1458.46 692.108 L1459.02 692.108 L1459.58 692.108 L1460.14 692.108 L1460.7 692.108 L1461.25 692.108 L1461.81 692.108 L1462.37 692.108 L1462.93 692.108 L1463.49 692.108 L1464.05 692.108 L1464.61 692.108 L1465.17 692.108 L1465.73 692.108 L1466.29 692.108 L1466.85 692.108 L1467.41 692.108 L1467.97 692.108 L1468.52 692.108 L1469.08 692.108 L1469.64 692.108 L1470.2 692.108 L1470.76 692.108 L1471.32 692.108 L1471.88 692.108 L1472.44 692.108 L1473 692.108 L1473.56 692.108 L1474.12 692.108 L1474.68 692.108 L1475.24 692.108 L1475.79 692.108 L1476.35 692.108 L1476.91 692.108 L1477.47 692.108 L1478.03 692.108 L1478.59 692.108 L1479.15 692.108 L1479.71 692.108 L1480.27 692.108 L1480.83 692.108 L1481.39 692.108 L1481.95 692.108 L1482.51 692.108 L1483.07 692.108 L1483.62 692.108 L1484.18 692.108 L1484.74 692.108 L1485.3 692.108 L1485.86 692.108 L1486.42 692.108 L1486.98 692.108 L1487.54 692.108 L1488.1 692.108 L1488.66 692.108 L1489.22 692.108 L1489.78 692.108 L1490.34 692.108 L1490.89 692.108 L1491.45 692.108 L1492.01 692.108 L1492.57 692.108 L1493.13 692.108 L1493.69 692.108 L1494.25 692.108 L1494.81 692.108 L1495.37 692.108 L1495.93 692.108 L1496.49 692.108 L1497.05 692.108 L1497.61 692.108 L1498.16 692.108 L1498.72 692.108 L1499.28 692.108 L1499.84 692.108 L1500.4 692.108 L1500.96 692.108 L1501.52 692.108 L1502.08 692.108 L1502.64 692.108 L1503.2 692.108 L1503.76 692.108 L1504.32 692.108 L1504.88 692.108 L1505.44 692.108 L1505.99 692.108 L1506.55 692.108 L1507.11 692.108 L1507.67 692.108 L1508.23 692.108 L1508.79 692.108 L1509.35 692.108 L1509.91 692.108 L1510.47 692.108 L1511.03 692.108 L1511.59 692.108 L1512.15 692.108 L1512.71 692.108 L1513.26 692.108 L1513.82 692.108 L1514.38 692.108 L1514.94 692.108 L1515.5 692.108 L1516.06 692.108 L1516.62 692.108 L1517.18 692.108 L1517.74 692.108 L1518.3 692.108 L1518.86 692.108 L1519.42 692.108 L1519.98 692.108 L1520.53 692.108 L1521.09 692.108 L1521.65 692.108 L1522.21 692.108 L1522.77 692.108 L1523.33 692.108 L1523.89 692.108 L1524.45 692.108 L1525.01 692.108 L1525.57 692.108 L1526.13 692.108 L1526.69 692.108 L1527.25 692.108 L1527.81 692.108 L1528.36 692.108 L1528.92 692.108 L1529.48 692.108 L1530.04 692.108 L1530.6 692.108 L1531.16 692.108 L1531.72 692.108 L1532.28 692.108 L1532.84 692.108 L1533.4 692.108 L1533.96 692.108 L1534.52 692.108 L1535.08 692.108 L1535.63 692.108 L1536.19 692.108 L1536.75 692.108 L1537.31 692.108 L1537.87 692.108 L1538.43 692.108 L1538.99 692.108 L1539.55 692.108 L1540.11 692.108 L1540.67 692.108 L1541.23 692.108 L1541.79 692.108 L1542.35 692.108 L1542.9 692.108 L1543.46 692.108 L1544.02 692.108 L1544.58 692.108 L1545.14 692.108 L1545.7 692.108 L1546.26 692.108 L1546.82 692.108 L1547.38 692.108 L1547.94 692.108 L1548.5 692.108 L1549.06 692.108 L1549.62 692.108 L1550.18 692.108 L1550.73 692.108 L1551.29 692.108 L1551.85 692.108 L1552.41 692.108 L1552.97 692.108 L1553.53 692.108 L1554.09 692.108 L1554.65 692.108 L1555.21 692.108 L1555.77 692.108 L1556.33 692.108 L1556.89 692.108 L1557.45 692.108 L1558 692.108 L1558.56 692.108 L1559.12 692.108 L1559.68 692.108 L1560.24 692.108 L1560.8 692.108 L1561.36 692.108 L1561.92 692.108 L1562.48 692.108 L1563.04 692.108 L1563.6 692.108 L1564.16 692.108 L1564.72 692.108 L1565.28 692.108 L1565.83 692.108 L1566.39 692.108 L1566.95 692.108 L1567.51 692.108 L1568.07 692.108 L1568.63 692.108 L1569.19 692.108 L1569.75 692.108 L1570.31 692.108 L1570.87 692.108 L1571.43 692.108 L1571.99 692.108 L1572.55 692.108 L1573.1 692.108 L1573.66 692.108 L1574.22 692.108 L1574.78 692.108 L1575.34 692.108 L1575.9 692.108 L1576.46 692.108 L1577.02 692.108 L1577.58 692.108 L1578.14 692.108 L1578.7 692.108 L1579.26 692.108 L1579.82 692.108 L1580.37 692.108 L1580.93 692.108 L1581.49 692.108 L1582.05 692.108 L1582.61 692.108 L1583.17 692.108 L1583.73 692.108 L1584.29 692.108 L1584.85 692.108 L1585.41 692.108 L1585.97 692.108 L1586.53 692.108 L1587.09 692.108 L1587.65 692.108 L1588.2 692.108 L1588.76 692.108 L1589.32 692.108 L1589.88 692.108 L1590.44 692.108 L1591 692.108 L1591.56 692.108 L1592.12 692.108 L1592.68 692.108 L1593.24 692.108 L1593.8 692.108 L1594.36 692.108 L1594.92 692.108 L1595.47 692.108 L1596.03 692.108 L1596.59 692.108 L1597.15 692.108 L1597.71 692.108 L1598.27 692.108 L1598.83 692.108 L1599.39 692.108 L1599.95 692.108 L1600.51 692.108 L1601.07 692.108 L1601.63 692.108 L1602.19 692.108 L1602.74 692.108 L1603.3 692.108 L1603.86 692.108 L1604.42 692.108 L1604.98 692.108 L1605.54 692.108 L1606.1 692.108 L1606.66 692.108 L1607.22 692.108 L1607.78 692.108 L1608.34 692.108 L1608.9 692.108 L1609.46 692.108 L1610.02 692.108 L1610.57 692.108 L1611.13 692.108 L1611.69 692.108 L1612.25 692.108 L1612.81 692.108 L1613.37 692.108 L1613.93 692.108 L1614.49 692.108 L1615.05 692.108 L1615.61 692.108 L1616.17 692.108 L1616.73 692.108 L1617.29 692.108 L1617.84 692.108 L1618.4 692.108 L1618.96 692.108 L1619.52 692.108 L1620.08 692.108 L1620.64 692.108 L1621.2 692.108 L1621.76 692.108 L1622.32 692.108 L1622.88 692.108 L1623.44 692.108 L1624 692.108 L1624.56 692.108 L1625.11 692.108 L1625.67 692.108 L1626.23 692.108 L1626.79 692.108 L1627.35 692.108 L1627.91 692.108 L1628.47 692.108 L1629.03 692.108 L1629.59 692.108 L1630.15 692.108 L1630.71 692.108 L1631.27 692.108 L1631.83 692.108 L1632.39 692.108 L1632.94 692.108 L1633.5 692.108 L1634.06 692.108 L1634.62 692.108 L1635.18 692.108 L1635.74 692.108 L1636.3 692.108 L1636.86 692.108 L1637.42 692.108 L1637.98 692.108 L1638.54 692.108 L1639.1 692.108 L1639.66 692.108 L1640.21 692.108 L1640.77 692.108 L1641.33 692.108 L1641.89 692.108 L1642.45 692.108 L1643.01 692.108 L1643.57 692.108 L1644.13 692.108 L1644.69 692.108 L1645.25 692.108 L1645.81 692.108 L1646.37 692.108 L1646.93 692.108 L1647.48 692.108 L1648.04 692.108 L1648.6 692.108 L1649.16 692.108 L1649.72 692.108 L1650.28 692.108 L1650.84 692.108 L1651.4 692.108 L1651.96 692.108 L1652.52 692.108 L1653.08 692.108 L1653.64 692.108 L1654.2 692.108 L1654.76 692.108 L1655.31 692.108 L1655.87 692.108 L1656.43 692.108 L1656.99 692.108 L1657.55 692.108 L1658.11 692.108 L1658.67 692.108 L1659.23 692.108 L1659.79 692.108 L1660.35 692.108 L1660.91 692.108 L1661.47 692.108 L1662.03 692.108 L1662.58 692.108 L1663.14 692.108 L1663.7 692.108 L1664.26 692.108 L1664.82 692.108 L1665.38 692.108 L1665.94 692.108 L1666.5 692.108 L1667.06 692.108 L1667.62 692.108 L1668.18 692.108 L1668.74 692.108 L1669.3 692.108 L1669.85 692.108 L1670.41 692.108 L1670.97 692.108 L1671.53 692.108 L1672.09 692.108 L1672.65 692.108 L1673.21 692.108 L1673.77 692.108 L1674.33 692.108 L1674.89 692.108 L1675.45 692.108 L1676.01 692.108 L1676.57 692.108 L1677.13 692.108 L1677.68 692.108 L1678.24 692.108 L1678.8 692.108 L1679.36 692.108 L1679.92 692.108 L1680.48 692.108 L1681.04 692.108 L1681.6 692.108 L1682.16 692.108 L1682.72 692.108 L1683.28 692.108 L1683.84 692.108 L1684.4 692.108 L1684.95 692.108 L1685.51 692.108 L1686.07 692.108 L1686.63 692.108 L1687.19 692.108 L1687.75 692.108 L1688.31 692.108 L1688.87 692.108 L1689.43 692.108 L1689.99 692.108 L1690.55 692.108 L1691.11 692.108 L1691.67 692.108 L1692.23 692.108 L1692.78 692.108 L1693.34 692.108 L1693.9 692.108 L1694.46 692.108 L1695.02 692.108 L1695.58 692.108 L1696.14 692.108 L1696.7 692.108 L1697.26 692.108 L1697.82 692.108 L1698.38 692.108 L1698.94 692.108 L1699.5 692.108 L1700.05 692.108 L1700.61 692.108 L1701.17 692.108 L1701.73 692.108 L1702.29 692.108 L1702.85 692.108 L1703.41 692.108 L1703.97 692.108 L1704.53 692.108 L1705.09 692.108 L1705.65 692.108 L1706.21 692.108 L1706.77 692.108 L1707.32 692.108 L1707.88 692.108 L1708.44 692.108 L1709 692.108 L1709.56 692.108 L1710.12 692.108 L1710.68 692.108 L1711.24 692.108 L1711.8 692.108 L1712.36 692.108 L1712.92 692.108 L1713.48 692.108 L1714.04 692.108 L1714.6 692.108 L1715.15 692.108 L1715.71 692.108 L1716.27 692.108 L1716.83 692.108 L1717.39 692.108 L1717.95 692.108 L1718.51 692.108 L1719.07 692.108 L1719.63 692.108 L1720.19 692.108 L1720.75 692.108 L1721.31 692.108 L1721.87 692.108 L1722.42 692.108 L1722.98 692.108 L1723.54 692.108 L1724.1 692.108 L1724.66 692.108 L1725.22 692.108 L1725.78 692.108 L1726.34 692.108 L1726.9 692.108 L1727.46 692.108 L1728.02 692.108 L1728.58 692.108 L1729.14 692.108 L1729.69 692.108 L1730.25 692.108 L1730.81 692.108 L1731.37 692.108 L1731.93 692.108 L1732.49 692.108 L1733.05 692.108 L1733.61 692.108 L1734.17 692.108 L1734.73 692.108 L1735.29 692.108 L1735.85 692.108 L1736.41 692.108 L1736.97 692.108 L1737.52 692.108 L1738.08 692.108 L1738.64 692.108 L1739.2 692.108 L1739.76 692.108 L1740.32 692.108 L1740.88 692.108 L1741.44 692.108 L1742 692.108 L1742.56 692.108 L1743.12 692.108 L1743.68 692.108 L1744.24 692.108 L1744.79 692.108 L1745.35 692.108 L1745.91 692.108 L1746.47 692.108 L1747.03 692.108 L1747.59 692.108 L1748.15 692.108 L1748.71 692.108 L1749.27 692.108 L1749.83 692.108 L1750.39 692.108 L1750.95 692.108 L1751.51 692.108 L1752.06 692.108 L1752.62 692.108 L1753.18 692.108 L1753.74 692.108 L1754.3 692.108 L1754.86 692.108 L1755.42 692.108 L1755.98 692.108 L1756.54 692.108 L1757.1 692.108 L1757.66 692.108 L1758.22 692.108 L1758.78 692.108 L1759.34 692.108 L1759.89 692.108 L1760.45 692.108 L1761.01 692.108 L1761.57 692.108 L1762.13 692.108 L1762.69 692.108 L1763.25 692.108 L1763.81 692.108 L1764.37 692.108 L1764.93 692.108 L1765.49 692.108 L1766.05 692.108 L1766.61 692.108 L1767.16 692.108 L1767.72 692.108 L1768.28 692.108 L1768.84 692.108 L1769.4 692.108 L1769.96 692.108 L1770.52 692.108 L1771.08 692.108 L1771.64 692.108 L1772.2 692.108 L1772.76 692.108 L1773.32 692.108 L1773.88 692.108 L1774.43 692.108 L1774.99 692.108 L1775.55 692.108 L1776.11 692.108 L1776.67 692.108 L1777.23 692.108 L1777.79 692.108 L1778.35 692.108 L1778.91 692.108 L1779.47 692.108 L1780.03 692.108 L1780.59 692.108 L1781.15 692.108 L1781.71 692.108 L1782.26 692.108 L1782.82 692.108 L1783.38 692.108 L1783.94 692.108 L1784.5 692.108 L1785.06 692.108 L1785.62 692.108 L1786.18 692.108 L1786.74 692.108 L1787.3 692.108 L1787.86 692.108 L1788.42 692.108 L1788.98 692.108 L1789.53 692.108 L1790.09 692.108 L1790.65 692.108 L1791.21 692.108 L1791.77 692.108 L1792.33 692.108 L1792.89 692.108 L1793.45 692.108 L1794.01 692.108 L1794.57 692.108 L1795.13 692.108 L1795.69 692.108 L1796.25 692.108 L1796.8 692.108 L1797.36 692.108 L1797.92 692.108 L1798.48 692.108 L1799.04 692.108 L1799.6 692.108 L1800.16 692.108 L1800.72 692.108 L1801.28 692.108 L1801.84 692.108 L1802.4 692.108 L1802.96 692.108 L1803.52 692.108 L1804.08 692.108 L1804.63 692.108 L1805.19 692.108 L1805.75 692.108 L1806.31 692.108 L1806.87 692.108 L1807.43 692.108 L1807.99 692.108 L1808.55 692.108 L1809.11 692.108 L1809.67 692.108 L1810.23 692.108 L1810.79 692.108 L1811.35 692.108 L1811.9 692.108 L1812.46 692.108 L1813.02 692.108 L1813.58 692.108 L1814.14 692.108 L1814.7 692.108 L1815.26 692.108 L1815.82 692.108 L1816.38 692.108 L1816.94 692.108 L1817.5 692.108 L1818.06 692.108 L1818.62 692.108 L1819.18 692.108 L1819.73 692.108 L1820.29 692.108 L1820.85 692.108 L1821.41 692.108 L1821.97 692.108 L1822.53 692.108 L1823.09 692.108 L1823.65 692.108 L1824.21 692.108 L1824.77 692.108 L1825.33 692.108 L1825.89 692.108 L1826.45 692.108 L1827 692.108 L1827.56 692.108 L1828.12 692.108 L1828.68 692.108 L1829.24 692.108 L1829.8 692.108 L1830.36 692.108 L1830.92 692.108 L1831.48 692.108 L1832.04 692.108 L1832.6 692.108 L1833.16 692.108 L1833.72 692.108 L1834.27 692.108 L1834.83 692.108 L1835.39 692.108 L1835.95 692.108 L1836.51 692.108 L1837.07 692.108 L1837.63 692.108 L1838.19 692.108 L1838.19 684.054 L1837.63 684.054 L1837.07 684.054 L1836.51 684.054 L1835.95 684.054 L1835.39 684.054 L1834.83 684.054 L1834.27 684.054 L1833.72 684.054 L1833.16 684.054 L1832.6 684.054 L1832.04 684.054 L1831.48 684.054 L1830.92 684.054 L1830.36 684.054 L1829.8 684.054 L1829.24 684.054 L1828.68 684.054 L1828.12 684.054 L1827.56 684.054 L1827 684.054 L1826.45 684.054 L1825.89 684.054 L1825.33 684.054 L1824.77 684.054 L1824.21 684.054 L1823.65 684.054 L1823.09 684.054 L1822.53 684.054 L1821.97 684.054 L1821.41 684.054 L1820.85 684.054 L1820.29 684.054 L1819.73 684.054 L1819.18 684.054 L1818.62 684.054 L1818.06 684.054 L1817.5 684.054 L1816.94 684.054 L1816.38 684.054 L1815.82 684.054 L1815.26 684.054 L1814.7 684.054 L1814.14 684.054 L1813.58 684.054 L1813.02 684.054 L1812.46 684.054 L1811.9 684.054 L1811.35 684.054 L1810.79 684.054 L1810.23 684.054 L1809.67 684.054 L1809.11 684.054 L1808.55 684.054 L1807.99 684.054 L1807.43 684.054 L1806.87 684.054 L1806.31 684.054 L1805.75 684.054 L1805.19 684.054 L1804.63 684.054 L1804.08 684.054 L1803.52 684.054 L1802.96 684.054 L1802.4 684.054 L1801.84 684.054 L1801.28 684.054 L1800.72 684.054 L1800.16 684.054 L1799.6 684.054 L1799.04 684.054 L1798.48 684.054 L1797.92 684.054 L1797.36 684.054 L1796.8 684.054 L1796.25 684.054 L1795.69 684.054 L1795.13 684.054 L1794.57 684.054 L1794.01 684.054 L1793.45 684.054 L1792.89 684.054 L1792.33 684.054 L1791.77 684.054 L1791.21 684.054 L1790.65 684.054 L1790.09 684.054 L1789.53 684.054 L1788.98 684.054 L1788.42 684.054 L1787.86 684.054 L1787.3 684.054 L1786.74 684.054 L1786.18 684.054 L1785.62 684.054 L1785.06 684.054 L1784.5 684.054 L1783.94 684.054 L1783.38 684.054 L1782.82 684.054 L1782.26 684.054 L1781.71 684.054 L1781.15 684.054 L1780.59 684.054 L1780.03 684.054 L1779.47 684.054 L1778.91 684.054 L1778.35 684.054 L1777.79 684.054 L1777.23 684.054 L1776.67 684.054 L1776.11 684.054 L1775.55 684.054 L1774.99 684.054 L1774.43 684.054 L1773.88 684.054 L1773.32 684.054 L1772.76 684.054 L1772.2 684.054 L1771.64 684.054 L1771.08 684.054 L1770.52 684.054 L1769.96 684.054 L1769.4 684.054 L1768.84 684.054 L1768.28 684.054 L1767.72 684.054 L1767.16 684.054 L1766.61 684.054 L1766.05 684.054 L1765.49 684.054 L1764.93 684.054 L1764.37 684.054 L1763.81 684.054 L1763.25 684.054 L1762.69 684.054 L1762.13 684.054 L1761.57 684.054 L1761.01 684.054 L1760.45 684.054 L1759.89 684.054 L1759.34 684.054 L1758.78 684.054 L1758.22 684.054 L1757.66 684.054 L1757.1 684.054 L1756.54 684.054 L1755.98 684.054 L1755.42 684.054 L1754.86 684.054 L1754.3 684.054 L1753.74 684.054 L1753.18 684.054 L1752.62 684.054 L1752.06 684.054 L1751.51 684.054 L1750.95 684.054 L1750.39 684.054 L1749.83 684.054 L1749.27 684.054 L1748.71 684.054 L1748.15 684.054 L1747.59 684.054 L1747.03 684.054 L1746.47 684.054 L1745.91 684.054 L1745.35 684.054 L1744.79 684.054 L1744.24 684.054 L1743.68 684.054 L1743.12 684.054 L1742.56 684.054 L1742 684.054 L1741.44 684.054 L1740.88 684.054 L1740.32 684.054 L1739.76 684.054 L1739.2 684.054 L1738.64 684.054 L1738.08 684.054 L1737.52 684.054 L1736.97 684.054 L1736.41 684.054 L1735.85 684.054 L1735.29 684.054 L1734.73 684.054 L1734.17 684.054 L1733.61 684.054 L1733.05 684.054 L1732.49 684.054 L1731.93 684.054 L1731.37 684.054 L1730.81 684.054 L1730.25 684.054 L1729.69 684.054 L1729.14 684.054 L1728.58 684.054 L1728.02 684.054 L1727.46 684.054 L1726.9 684.054 L1726.34 684.054 L1725.78 684.054 L1725.22 684.054 L1724.66 684.054 L1724.1 684.054 L1723.54 684.054 L1722.98 684.054 L1722.42 684.054 L1721.87 684.054 L1721.31 684.054 L1720.75 684.054 L1720.19 684.054 L1719.63 684.054 L1719.07 684.054 L1718.51 684.054 L1717.95 684.054 L1717.39 684.054 L1716.83 684.054 L1716.27 684.054 L1715.71 684.054 L1715.15 684.054 L1714.6 684.054 L1714.04 684.054 L1713.48 684.054 L1712.92 684.054 L1712.36 684.054 L1711.8 684.054 L1711.24 684.054 L1710.68 684.054 L1710.12 684.054 L1709.56 684.054 L1709 684.054 L1708.44 684.054 L1707.88 684.054 L1707.32 684.054 L1706.77 684.054 L1706.21 684.054 L1705.65 684.054 L1705.09 684.054 L1704.53 684.054 L1703.97 684.054 L1703.41 684.054 L1702.85 684.054 L1702.29 684.054 L1701.73 684.054 L1701.17 684.054 L1700.61 684.054 L1700.05 684.054 L1699.5 684.054 L1698.94 684.054 L1698.38 684.054 L1697.82 684.054 L1697.26 684.054 L1696.7 684.054 L1696.14 684.054 L1695.58 684.054 L1695.02 684.054 L1694.46 684.054 L1693.9 684.054 L1693.34 684.054 L1692.78 684.054 L1692.23 684.054 L1691.67 684.054 L1691.11 684.054 L1690.55 684.054 L1689.99 684.054 L1689.43 684.054 L1688.87 684.054 L1688.31 684.054 L1687.75 684.054 L1687.19 684.054 L1686.63 684.054 L1686.07 684.054 L1685.51 684.054 L1684.95 684.054 L1684.4 684.054 L1683.84 684.054 L1683.28 684.054 L1682.72 684.054 L1682.16 684.054 L1681.6 684.054 L1681.04 684.054 L1680.48 684.054 L1679.92 684.054 L1679.36 684.054 L1678.8 684.054 L1678.24 684.054 L1677.68 684.054 L1677.13 684.054 L1676.57 684.054 L1676.01 684.054 L1675.45 684.054 L1674.89 684.054 L1674.33 684.054 L1673.77 684.054 L1673.21 684.054 L1672.65 684.054 L1672.09 684.054 L1671.53 684.054 L1670.97 684.054 L1670.41 684.054 L1669.85 684.054 L1669.3 684.054 L1668.74 684.054 L1668.18 684.054 L1667.62 684.054 L1667.06 684.054 L1666.5 684.054 L1665.94 684.054 L1665.38 684.054 L1664.82 684.054 L1664.26 684.054 L1663.7 684.054 L1663.14 684.054 L1662.58 684.054 L1662.03 684.054 L1661.47 684.054 L1660.91 684.054 L1660.35 684.054 L1659.79 684.054 L1659.23 684.054 L1658.67 684.054 L1658.11 684.054 L1657.55 684.054 L1656.99 684.054 L1656.43 684.054 L1655.87 684.054 L1655.31 684.054 L1654.76 684.054 L1654.2 684.054 L1653.64 684.054 L1653.08 684.054 L1652.52 684.054 L1651.96 684.054 L1651.4 684.054 L1650.84 684.054 L1650.28 684.054 L1649.72 684.054 L1649.16 684.054 L1648.6 684.054 L1648.04 684.054 L1647.48 684.054 L1646.93 684.054 L1646.37 684.054 L1645.81 684.054 L1645.25 684.054 L1644.69 684.054 L1644.13 684.054 L1643.57 684.054 L1643.01 684.054 L1642.45 684.054 L1641.89 684.054 L1641.33 684.054 L1640.77 684.054 L1640.21 684.054 L1639.66 684.054 L1639.1 684.054 L1638.54 684.054 L1637.98 684.054 L1637.42 684.054 L1636.86 684.054 L1636.3 684.054 L1635.74 684.054 L1635.18 684.054 L1634.62 684.054 L1634.06 684.054 L1633.5 684.054 L1632.94 684.054 L1632.39 684.054 L1631.83 684.054 L1631.27 684.054 L1630.71 684.054 L1630.15 684.054 L1629.59 684.054 L1629.03 684.054 L1628.47 684.054 L1627.91 684.054 L1627.35 684.054 L1626.79 684.054 L1626.23 684.054 L1625.67 684.054 L1625.11 684.054 L1624.56 684.054 L1624 684.054 L1623.44 684.054 L1622.88 684.054 L1622.32 684.054 L1621.76 684.054 L1621.2 684.054 L1620.64 684.054 L1620.08 684.054 L1619.52 684.054 L1618.96 684.054 L1618.4 684.054 L1617.84 684.054 L1617.29 684.054 L1616.73 684.054 L1616.17 684.054 L1615.61 684.054 L1615.05 684.054 L1614.49 684.054 L1613.93 684.054 L1613.37 684.054 L1612.81 684.054 L1612.25 684.054 L1611.69 684.054 L1611.13 684.054 L1610.57 684.054 L1610.02 684.054 L1609.46 684.054 L1608.9 684.054 L1608.34 684.054 L1607.78 684.054 L1607.22 684.054 L1606.66 684.054 L1606.1 684.054 L1605.54 684.054 L1604.98 684.054 L1604.42 684.054 L1603.86 684.054 L1603.3 684.054 L1602.74 684.054 L1602.19 684.054 L1601.63 684.054 L1601.07 684.054 L1600.51 684.054 L1599.95 684.054 L1599.39 684.054 L1598.83 684.054 L1598.27 684.054 L1597.71 684.054 L1597.15 684.054 L1596.59 684.054 L1596.03 684.054 L1595.47 684.054 L1594.92 684.054 L1594.36 684.054 L1593.8 684.054 L1593.24 684.054 L1592.68 684.054 L1592.12 684.054 L1591.56 684.054 L1591 684.054 L1590.44 684.054 L1589.88 684.054 L1589.32 684.054 L1588.76 684.054 L1588.2 684.054 L1587.65 684.054 L1587.09 684.054 L1586.53 684.054 L1585.97 684.054 L1585.41 684.054 L1584.85 684.054 L1584.29 684.054 L1583.73 684.054 L1583.17 684.054 L1582.61 684.054 L1582.05 684.054 L1581.49 684.054 L1580.93 684.054 L1580.37 684.054 L1579.82 684.054 L1579.26 684.054 L1578.7 684.054 L1578.14 684.054 L1577.58 684.054 L1577.02 684.054 L1576.46 684.054 L1575.9 684.054 L1575.34 684.054 L1574.78 684.054 L1574.22 684.054 L1573.66 684.054 L1573.1 684.054 L1572.55 684.054 L1571.99 684.054 L1571.43 684.054 L1570.87 684.054 L1570.31 684.054 L1569.75 684.054 L1569.19 684.054 L1568.63 684.054 L1568.07 684.054 L1567.51 684.054 L1566.95 684.054 L1566.39 684.054 L1565.83 684.054 L1565.28 684.054 L1564.72 684.054 L1564.16 684.054 L1563.6 684.054 L1563.04 684.054 L1562.48 684.054 L1561.92 684.054 L1561.36 684.054 L1560.8 684.054 L1560.24 684.054 L1559.68 684.054 L1559.12 684.054 L1558.56 684.054 L1558 684.054 L1557.45 684.054 L1556.89 684.054 L1556.33 684.054 L1555.77 684.054 L1555.21 684.054 L1554.65 684.054 L1554.09 684.054 L1553.53 684.054 L1552.97 684.054 L1552.41 684.054 L1551.85 684.054 L1551.29 684.054 L1550.73 684.054 L1550.18 684.054 L1549.62 684.054 L1549.06 684.054 L1548.5 684.054 L1547.94 684.054 L1547.38 684.054 L1546.82 684.054 L1546.26 684.054 L1545.7 684.054 L1545.14 684.054 L1544.58 684.054 L1544.02 684.054 L1543.46 684.054 L1542.9 684.054 L1542.35 684.054 L1541.79 684.054 L1541.23 684.054 L1540.67 684.054 L1540.11 684.054 L1539.55 684.054 L1538.99 684.054 L1538.43 684.054 L1537.87 684.054 L1537.31 684.054 L1536.75 684.054 L1536.19 684.054 L1535.63 684.054 L1535.08 684.054 L1534.52 684.054 L1533.96 684.054 L1533.4 684.054 L1532.84 684.054 L1532.28 684.054 L1531.72 684.054 L1531.16 684.054 L1530.6 684.054 L1530.04 684.054 L1529.48 684.054 L1528.92 684.054 L1528.36 684.054 L1527.81 684.054 L1527.25 684.054 L1526.69 684.054 L1526.13 684.054 L1525.57 684.054 L1525.01 684.054 L1524.45 684.054 L1523.89 684.054 L1523.33 684.054 L1522.77 684.054 L1522.21 684.054 L1521.65 684.054 L1521.09 684.054 L1520.53 684.054 L1519.98 684.054 L1519.42 684.054 L1518.86 684.054 L1518.3 684.054 L1517.74 684.054 L1517.18 684.054 L1516.62 684.054 L1516.06 684.054 L1515.5 684.054 L1514.94 684.054 L1514.38 684.054 L1513.82 684.054 L1513.26 684.054 L1512.71 684.054 L1512.15 684.054 L1511.59 684.054 L1511.03 684.054 L1510.47 684.054 L1509.91 684.054 L1509.35 684.054 L1508.79 684.054 L1508.23 684.054 L1507.67 684.054 L1507.11 684.054 L1506.55 684.054 L1505.99 684.054 L1505.44 684.054 L1504.88 684.054 L1504.32 684.054 L1503.76 684.054 L1503.2 684.054 L1502.64 684.054 L1502.08 684.054 L1501.52 684.054 L1500.96 684.054 L1500.4 684.054 L1499.84 684.054 L1499.28 684.054 L1498.72 684.054 L1498.16 684.054 L1497.61 684.054 L1497.05 684.054 L1496.49 684.054 L1495.93 684.054 L1495.37 684.054 L1494.81 684.054 L1494.25 684.054 L1493.69 684.054 L1493.13 684.054 L1492.57 684.054 L1492.01 684.054 L1491.45 684.054 L1490.89 684.054 L1490.34 684.054 L1489.78 684.054 L1489.22 684.054 L1488.66 684.054 L1488.1 684.054 L1487.54 684.054 L1486.98 684.054 L1486.42 684.054 L1485.86 684.054 L1485.3 684.054 L1484.74 684.054 L1484.18 684.054 L1483.62 684.054 L1483.07 684.054 L1482.51 684.054 L1481.95 684.054 L1481.39 684.054 L1480.83 684.054 L1480.27 684.054 L1479.71 684.054 L1479.15 684.054 L1478.59 684.054 L1478.03 684.054 L1477.47 684.054 L1476.91 684.054 L1476.35 684.054 L1475.79 684.054 L1475.24 684.054 L1474.68 684.054 L1474.12 684.054 L1473.56 684.054 L1473 684.054 L1472.44 684.054 L1471.88 684.054 L1471.32 684.054 L1470.76 684.054 L1470.2 684.054 L1469.64 684.054 L1469.08 684.054 L1468.52 684.054 L1467.97 684.054 L1467.41 684.054 L1466.85 684.054 L1466.29 684.054 L1465.73 684.054 L1465.17 684.054 L1464.61 684.054 L1464.05 684.054 L1463.49 684.054 L1462.93 684.054 L1462.37 684.054 L1461.81 684.054 L1461.25 684.054 L1460.7 684.054 L1460.14 684.054 L1459.58 684.054 L1459.02 684.054 L1458.46 684.054 L1457.9 684.054 L1457.34 684.054 L1456.78 684.054 L1456.22 684.054 L1455.66 684.054 L1455.1 684.054 L1454.54 684.054 L1453.98 684.054 L1453.42 684.054 L1452.87 684.054 L1452.31 684.054 L1451.75 684.054 L1451.19 684.054 L1450.63 684.054 L1450.07 684.054 L1449.51 684.054 L1448.95 684.054 L1448.39 684.054 L1447.83 684.054 L1447.27 684.054 L1446.71 684.054 L1446.15 684.054 L1445.6 684.054 L1445.04 684.054 L1444.48 684.054 L1443.92 684.054 L1443.36 684.054 L1442.8 684.054 L1442.24 684.054 L1441.68 684.054 L1441.12 684.054 L1440.56 684.054 L1440 684.054 L1439.44 684.054 L1438.88 684.054 L1438.33 684.054 L1437.77 684.054 L1437.21 684.054 L1436.65 684.054 L1436.09 684.054 L1435.53 684.054 L1434.97 684.054 L1434.41 684.054 L1433.85 684.054 L1433.29 684.054 L1432.73 684.054 L1432.17 684.054 L1431.61 684.054 L1431.05 684.054 L1430.5 684.054 L1429.94 684.054 L1429.38 684.054 L1428.82 684.054 L1428.26 684.054 L1427.7 684.054 L1427.14 684.054 L1426.58 684.054 L1426.02 684.054 L1425.46 684.054 L1424.9 684.054 L1424.34 684.054 L1423.78 684.054 L1423.23 684.054 L1422.67 684.054 L1422.11 684.054 L1421.55 684.054 L1420.99 684.054 L1420.43 684.054 L1419.87 684.054 L1419.31 684.054 L1418.75 684.054 L1418.19 684.054 L1417.63 684.054 L1417.07 684.054 L1416.51 684.054 L1415.95 684.054 L1415.4 684.054 L1414.84 684.054 L1414.28 684.054 L1413.72 684.054 L1413.16 684.054 L1412.6 684.054 L1412.04 684.054 L1411.48 684.054 L1410.92 684.054 L1410.36 684.054 L1409.8 684.054 L1409.24 684.054 L1408.68 684.054 L1408.13 684.054 L1407.57 684.054 L1407.01 684.054 L1406.45 684.054 L1405.89 684.054 L1405.33 684.054 L1404.77 684.054 L1404.21 684.054 L1403.65 684.054 L1403.09 684.054 L1402.53 684.054 L1401.97 684.054 L1401.41 684.054 L1400.86 684.054 L1400.3 684.054 L1399.74 684.054 L1399.18 684.054 L1398.62 684.054 L1398.06 684.054 L1397.5 684.054 L1396.94 684.054 L1396.38 684.054 L1395.82 684.054 L1395.26 684.054 L1394.7 684.054 L1394.14 684.054 L1393.58 684.054 L1393.03 684.054 L1392.47 684.054 L1391.91 684.054 L1391.35 684.054 L1390.79 684.054 L1390.23 684.054 L1389.67 684.054 L1389.11 684.054 L1388.55 684.054 L1387.99 684.054 L1387.43 684.054 L1386.87 684.054 L1386.31 684.054 L1385.76 684.054 L1385.2 684.054 L1384.64 684.054 L1384.08 684.054 L1383.52 684.054 L1382.96 684.054 L1382.4 684.054 L1381.84 684.054 L1381.28 684.054 L1380.72 684.054 L1380.16 684.054 L1379.6 684.054 L1379.04 684.054 L1378.49 684.054 L1377.93 684.054 L1377.37 684.054 L1376.81 684.054 L1376.25 684.054 L1375.69 684.054 L1375.13 684.054 L1374.57 684.054 L1374.01 684.054 L1373.45 684.054 L1372.89 684.054 L1372.33 684.054 L1371.77 684.054 L1371.21 684.054 L1370.66 684.054 L1370.1 684.054 L1369.54 684.054 L1368.98 684.054 L1368.42 684.054 L1367.86 684.054 L1367.3 684.054 L1366.74 684.054 L1366.18 684.054 L1365.62 684.054 L1365.06 684.054 L1364.5 684.054 L1363.94 684.054 L1363.39 684.054 L1362.83 684.054 L1362.27 684.054 L1361.71 684.054 L1361.15 684.054 L1360.59 684.054 L1360.03 684.054 L1359.47 684.054 L1358.91 684.054 L1358.35 684.054 L1357.79 684.054 L1357.23 684.054 L1356.67 684.054 L1356.12 684.054 L1355.56 684.054 L1355 684.054 L1354.44 684.054 L1353.88 684.054 L1353.32 684.054 L1352.76 684.054 L1352.2 684.054 L1351.64 684.054 L1351.08 684.054 L1350.52 684.054 L1349.96 684.054 L1349.4 684.054 L1348.84 684.054 L1348.29 684.054 L1347.73 684.054 L1347.17 684.054 L1346.61 684.054 L1346.05 684.054 L1345.49 684.054 L1344.93 684.054 L1344.37 684.054 L1343.81 684.054 L1343.25 684.054 L1342.69 684.054 L1342.13 684.054 L1341.57 684.054 L1341.02 684.054 L1340.46 684.054 L1339.9 684.054 L1339.34 684.054 L1338.78 684.054 L1338.22 684.054 L1337.66 684.054 L1337.1 684.054 L1336.54 684.054 L1335.98 684.054 L1335.42 684.054 L1334.86 684.054 L1334.3 684.054 L1333.75 684.054 L1333.19 684.054 L1332.63 684.054 L1332.07 684.054 L1331.51 684.054 L1330.95 684.054 L1330.39 684.054 L1329.83 684.054 L1329.27 684.054 L1328.71 684.054 L1328.15 684.054 L1327.59 684.054 L1327.03 684.054 L1326.47 684.054 L1325.92 684.054 L1325.36 684.054 L1324.8 684.054 L1324.24 684.054 L1323.68 684.054 L1323.12 684.054 L1322.56 684.054 L1322 684.054 L1321.44 684.054 L1320.88 684.054 L1320.32 684.054 L1319.76 684.054 L1319.2 684.054 L1318.65 684.054 L1318.09 684.054 L1317.53 684.054 L1316.97 684.054 L1316.41 684.054 L1315.85 684.054 L1315.29 684.054 L1314.73 684.054 L1314.17 684.054 L1313.61 684.054 L1313.05 684.054 L1312.49 684.054 L1311.93 684.054 L1311.38 684.054 L1310.82 684.054 L1310.26 684.054 L1309.7 684.054 L1309.14 684.054 L1308.58 684.054 L1308.02 684.054 L1307.46 684.054 L1306.9 684.054 L1306.34 684.054 L1305.78 684.054 L1305.22 684.054 L1304.66 684.054 L1304.1 684.054 L1303.55 684.054 L1302.99 684.054 L1302.43 684.054 L1301.87 684.054 L1301.31 684.054 L1300.75 684.054 L1300.19 684.054 L1299.63 684.054 L1299.07 684.054 L1298.51 684.054 L1297.95 684.054 L1297.39 684.054 L1296.83 684.054 L1296.28 684.054 L1295.72 684.054 L1295.16 684.054 L1294.6 684.054 L1294.04 684.054 L1293.48 684.054 L1292.92 684.054 L1292.36 684.054 L1291.8 684.054 L1291.24 684.054 L1290.68 684.054 L1290.12 684.054 L1289.56 684.054 L1289 684.054 L1288.45 684.054 L1287.89 684.054 L1287.33 684.054 L1286.77 684.054 L1286.21 684.054 L1285.65 684.054 L1285.09 684.054 L1284.53 684.054 L1283.97 684.054 L1283.41 684.054 L1282.85 684.054 L1282.29 684.054 L1281.73 684.054 L1281.18 684.054 L1280.62 684.054 L1280.06 684.054 L1279.5 684.054 L1278.94 684.054 L1278.38 684.054 L1277.82 684.054 L1277.26 684.054 L1276.7 684.054 L1276.14 684.054 L1275.58 684.054 L1275.02 684.054 L1274.46 684.054 L1273.91 684.054 L1273.35 684.054 L1272.79 684.054 L1272.23 684.054 L1271.67 684.054 L1271.11 684.054 L1270.55 684.054 L1269.99 684.054 L1269.43 684.054 L1268.87 684.054 L1268.31 684.054 L1267.75 684.054 L1267.19 684.054 L1266.63 684.054 L1266.08 684.054 L1265.52 684.054 L1264.96 684.054 L1264.4 684.054 L1263.84 684.054 L1263.28 684.054 L1262.72 684.054 L1262.16 684.054 L1261.6 684.054 L1261.04 684.054 L1260.48 684.054 L1259.92 684.054 L1259.36 684.054 L1258.81 684.054 L1258.25 684.054 L1257.69 684.054 L1257.13 684.054 L1256.57 684.054 L1256.01 684.054 L1255.45 684.054 L1254.89 684.054 L1254.33 684.054 L1253.77 684.054 L1253.21 684.054 L1252.65 684.054 L1252.09 684.054 L1251.54 684.054 L1250.98 684.054 L1250.42 684.054 L1249.86 684.054 L1249.3 684.054 L1248.74 684.054 L1248.18 684.054 L1247.62 684.054 L1247.06 684.054 L1246.5 684.054 L1245.94 684.054 L1245.38 684.054 L1244.82 684.054 L1244.26 684.054 L1243.71 684.054 L1243.15 684.054 L1242.59 684.054 L1242.03 684.054 L1241.47 684.054 L1240.91 684.054 L1240.35 684.054 L1239.79 684.054 L1239.23 684.054 L1238.67 684.054 L1238.11 684.054 L1237.55 684.054 L1236.99 684.054 L1236.44 684.054 L1235.88 684.054 L1235.32 684.054 L1234.76 684.054 L1234.2 684.054 L1233.64 684.054 L1233.08 684.054 L1232.52 684.054 L1231.96 684.054 L1231.4 684.054 L1230.84 684.054 L1230.28 684.054 L1229.72 684.054 L1229.17 684.054 L1228.61 684.054 L1228.05 684.054 L1227.49 684.054 L1226.93 684.054 L1226.37 684.054 L1225.81 684.054 L1225.25 684.054 L1224.69 684.054 L1224.13 684.054 L1223.57 684.054 L1223.01 684.054 L1222.45 684.054 L1221.89 684.054 L1221.34 684.054 L1220.78 684.054 L1220.22 684.054 L1219.66 684.054 L1219.1 684.054 L1218.54 684.054 L1217.98 684.054 L1217.42 684.054 L1216.86 684.054 L1216.3 684.054 L1215.74 684.054 L1215.18 684.054 L1214.62 684.054 L1214.07 684.054 L1213.51 684.054 L1212.95 684.054 L1212.39 684.054 L1211.83 684.054 L1211.27 684.054 L1210.71 684.054 L1210.15 684.054 L1209.59 684.054 L1209.03 684.054 L1208.47 684.054 L1207.91 684.054 L1207.35 684.054 L1206.8 684.054 L1206.24 684.054 L1205.68 684.054 L1205.12 684.054 L1204.56 684.054 L1204 684.054 L1203.44 684.054 L1202.88 684.054 L1202.32 684.054 L1201.76 684.054 L1201.2 684.054 L1200.64 684.054 L1200.08 684.054 L1199.52 684.054 L1198.97 684.054 L1198.41 684.054 L1197.85 684.054 L1197.29 684.054 L1196.73 684.054 L1196.17 684.054 L1195.61 684.054 L1195.05 684.054 L1194.49 684.054 L1193.93 684.054 L1193.37 684.054 L1192.81 684.054 L1192.25 684.054 L1191.7 684.054 L1191.14 684.054 L1190.58 684.054 L1190.02 684.054 L1189.46 684.054 L1188.9 684.054 L1188.34 684.054 L1187.78 684.054 L1187.22 684.054 L1186.66 684.054 L1186.1 684.054 L1185.54 684.054 L1184.98 684.054 L1184.43 684.054 L1183.87 684.054 L1183.31 684.054 L1182.75 684.054 L1182.19 684.054 L1181.63 684.054 L1181.07 684.054 L1180.51 684.054 L1179.95 684.054 L1179.39 684.054 L1178.83 684.054 L1178.27 684.054 L1177.71 684.054 L1177.15 684.054 L1176.6 684.054 L1176.04 684.054 L1175.48 684.054 L1174.92 684.054 L1174.36 684.054 L1173.8 684.054 L1173.24 684.054 L1172.68 684.054 L1172.12 684.054 L1171.56 684.054 L1171 684.054 L1170.44 684.054 L1169.88 684.054 L1169.33 684.054 L1168.77 684.054 L1168.21 684.054 L1167.65 684.054 L1167.09 684.054 L1166.53 684.054 L1165.97 684.054 L1165.41 684.054 L1164.85 684.054 L1164.29 684.054 L1163.73 684.054 L1163.17 684.054 L1162.61 684.054 L1162.05 684.054 L1161.5 684.054 L1160.94 684.054 L1160.38 684.054 L1159.82 684.054 L1159.26 684.054 L1158.7 684.054 L1158.14 684.054 L1157.58 684.054 L1157.02 684.054 L1156.46 684.054 L1155.9 684.054 L1155.34 684.054 L1154.78 684.054 L1154.23 684.054 L1153.67 684.054 L1153.11 684.054 L1152.55 684.054 L1151.99 684.054 L1151.43 684.054 L1150.87 684.054 L1150.31 684.054 L1149.75 684.054 L1149.19 684.054 L1148.63 684.054 L1148.07 684.054 L1147.51 684.054 L1146.96 684.054 L1146.4 684.054 L1145.84 684.054 L1145.28 684.054 L1144.72 684.054 L1144.16 684.054 L1143.6 684.054 L1143.04 684.054 L1142.48 684.054 L1141.92 684.054 L1141.36 684.054 L1140.8 684.054 L1140.24 684.054 L1139.68 684.054 L1139.13 684.054 L1138.57 684.054 L1138.01 684.054 L1137.45 684.054 L1136.89 684.054 L1136.33 684.054 L1135.77 684.054 L1135.21 684.054 L1134.65 684.054 L1134.09 684.054 L1133.53 684.054 L1132.97 684.054 L1132.41 684.054 L1131.86 684.054 L1131.3 684.054 L1130.74 684.054 L1130.18 684.054 L1129.62 684.054 L1129.06 684.054 L1128.5 684.054 L1127.94 684.054 L1127.38 684.054 L1126.82 684.054 L1126.26 684.054 L1125.7 684.054 L1125.14 684.054 L1124.59 684.054 L1124.03 684.054 L1123.47 684.054 L1122.91 684.054 L1122.35 684.054 L1121.79 684.054 L1121.23 684.054 L1120.67 684.054 L1120.11 684.054 L1119.55 684.054 L1118.99 684.054 L1118.43 684.054 L1117.87 684.054 L1117.31 684.054 L1116.76 684.054 L1116.2 684.054 L1115.64 684.054 L1115.08 684.054 L1114.52 684.054 L1113.96 684.054 L1113.4 684.054 L1112.84 684.054 L1112.28 684.054 L1111.72 684.054 L1111.16 684.054 L1110.6 684.054 L1110.04 684.054 L1109.49 684.054 L1108.93 684.054 L1108.37 684.054 L1107.81 684.054 L1107.25 684.054 L1106.69 684.054 L1106.13 684.054 L1105.57 684.054 L1105.01 684.054 L1104.45 684.054 L1103.89 684.054 L1103.33 684.054 L1102.77 684.054 L1102.22 684.054 L1101.66 684.054 L1101.1 684.054 L1100.54 684.054 L1099.98 684.054 L1099.42 684.054 L1098.86 684.054 L1098.3 684.054 L1097.74 684.054 L1097.18 684.054 L1096.62 684.054 L1096.06 684.054 L1095.5 684.054 L1094.94 684.054 L1094.39 684.054 L1093.83 684.054 L1093.27 684.054 L1092.71 684.054 L1092.15 684.054 L1091.59 684.054 L1091.03 684.054 L1090.47 684.054 L1089.91 684.054 L1089.35 684.054 L1088.79 684.054 L1088.23 684.054 L1087.67 684.054 L1087.12 684.054 L1086.56 684.054 L1086 684.054 L1085.44 684.054 L1084.88 684.054 L1084.32 684.054 L1083.76 684.054 L1083.2 684.054 L1082.64 684.054 L1082.08 684.054 L1081.52 684.054 L1080.96 684.054 L1080.4 684.054 L1079.85 684.054 L1079.29 684.054 L1078.73 684.054 L1078.17 684.054 L1077.61 684.054 L1077.05 684.054 L1076.49 684.054 L1075.93 684.054 L1075.37 684.054 L1074.81 684.054 L1074.25 684.054 L1073.69 684.054 L1073.13 684.054 L1072.57 684.054 L1072.02 684.054 L1071.46 684.054 L1070.9 684.054 L1070.34 684.054 L1069.78 684.054 L1069.22 684.054 L1068.66 684.054 L1068.1 684.054 L1067.54 684.054 L1066.98 684.054 L1066.42 684.054 L1065.86 684.054 L1065.3 684.054 L1064.75 684.054 L1064.19 684.054 L1063.63 684.054 L1063.07 684.054 L1062.51 684.054 L1061.95 684.054 L1061.39 684.054 L1060.83 684.054 L1060.27 684.054 L1059.71 684.054 L1059.15 684.054 L1058.59 684.054 L1058.03 684.054 L1057.48 684.054 L1056.92 684.054 L1056.36 684.054 L1055.8 684.054 L1055.24 684.054 L1054.68 684.054 L1054.12 684.054 L1053.56 684.054 L1053 684.054 L1052.44 684.054 L1051.88 684.054 L1051.32 684.054 L1050.76 684.054 L1050.2 684.054 L1049.65 684.054 L1049.09 684.054 L1048.53 684.054 L1047.97 684.054 L1047.41 684.054 L1046.85 684.054 L1046.29 684.054 L1045.73 684.054 L1045.17 684.054 L1044.61 684.054 L1044.05 684.054 L1043.49 684.054 L1042.93 684.054 L1042.38 684.054 L1041.82 684.054 L1041.26 684.054 L1040.7 684.054 L1040.14 684.054 L1039.58 684.054 L1039.02 684.054 L1038.46 684.054 L1037.9 684.054 L1037.34 684.054 L1036.78 684.054 L1036.22 684.054 L1035.66 684.054 L1035.1 684.054 L1034.55 684.054 L1033.99 684.054 L1033.43 684.054 L1032.87 684.054 L1032.31 684.054 L1031.75 684.054 L1031.19 684.054 L1030.63 684.054 L1030.07 684.054 L1029.51 684.054 L1028.95 684.054 L1028.39 684.054 L1027.83 684.054 L1027.28 684.054 L1026.72 684.054 L1026.16 684.054 L1025.6 684.054 L1025.04 684.054 L1024.48 684.054 L1023.92 684.054 L1023.36 684.054 L1022.8 684.054 L1022.24 684.054 L1021.68 684.054 L1021.12 684.054 L1020.56 684.054 L1020.01 684.054 L1019.45 684.054 L1018.89 684.054 L1018.33 684.054 L1017.77 684.054 L1017.21 684.054 L1016.65 684.054 L1016.09 684.054 L1015.53 684.054 L1014.97 684.054 L1014.41 684.054 L1013.85 684.054 L1013.29 684.054 L1012.73 684.054 L1012.18 684.054 L1011.62 684.054 L1011.06 684.054 L1010.5 684.054 L1009.94 684.054 L1009.38 684.054 L1008.82 684.054 L1008.26 684.054 L1007.7 684.054 L1007.14 684.054 L1006.58 684.054 L1006.02 684.054 L1005.46 684.054 L1004.91 684.054 L1004.35 684.054 L1003.79 684.054 L1003.23 684.054 L1002.67 684.054 L1002.11 684.054 L1001.55 684.054 L1000.99 684.054 L1000.43 684.054 L999.872 684.054 L999.313 684.054 L998.754 684.054 L998.194 684.054 L997.635 684.054 L997.076 684.054 L996.517 684.054 L995.957 684.054 L995.398 684.054 L994.839 684.054 L994.28 684.054 L993.72 684.054 L993.161 684.054 L992.602 684.054 L992.043 684.054 L991.483 684.054 L990.924 684.054 L990.365 684.054 L989.806 684.054 L989.246 684.054 L988.687 684.054 L988.128 684.054 L987.569 684.054 L987.009 684.054 L986.45 684.054 L985.891 684.054 L985.332 684.054 L984.772 684.054 L984.213 684.054 L983.654 684.054 L983.095 684.054 L982.535 684.054 L981.976 684.054 L981.417 684.054 L980.858 684.054 L980.298 684.054 L979.739 684.054 L979.18 684.054 L978.621 684.054 L978.061 684.054 L977.502 684.054 L976.943 684.054 L976.384 684.054 L975.824 684.054 L975.265 684.054 L974.706 684.054 L974.147 684.054 L973.587 684.054 L973.028 684.054 L972.469 684.054 L971.91 684.054 L971.35 684.054 L970.791 684.054 L970.232 684.054 L969.673 684.054 L969.113 684.054 L968.554 684.054 L967.995 684.054 L967.436 684.054 L966.876 684.054 L966.317 684.054 L965.758 684.054 L965.199 684.054 L964.639 684.054 L964.08 684.054 L963.521 684.054 L962.962 684.054 L962.402 684.054 L961.843 684.054 L961.284 684.054 L960.725 684.054 L960.165 684.054 L959.606 684.054 L959.047 684.054 L958.488 684.054 L957.928 684.054 L957.369 684.054 L956.81 684.054 L956.251 684.054 L955.691 684.054 L955.132 684.054 L954.573 684.054 L954.014 684.054 L953.454 684.054 L952.895 684.054 L952.336 684.054 L951.777 684.054 L951.217 684.054 L950.658 684.054 L950.099 684.054 L949.54 684.054 L948.98 684.054 L948.421 684.054 L947.862 684.054 L947.303 684.054 L946.743 684.054 L946.184 684.054 L945.625 684.054 L945.066 684.054 L944.506 684.054 L943.947 684.054 L943.388 684.054 L942.829 684.054 L942.269 684.054 L941.71 684.054 L941.151 684.054 L940.592 684.054 L940.032 684.054 L939.473 684.054 L938.914 684.054 L938.355 684.054 L937.795 684.054 L937.236 684.054 L936.677 684.054 L936.118 684.054 L935.558 684.054 L934.999 684.054 L934.44 684.054 L933.881 684.054 L933.321 684.054 L932.762 684.054 L932.203 684.054 L931.644 684.054 L931.084 684.054 L930.525 684.054 L929.966 684.054 L929.406 684.054 L928.847 684.054 L928.288 684.054 L927.729 684.054 L927.169 684.054 L926.61 684.054 L926.051 684.054 L925.492 684.054 L924.932 684.054 L924.373 684.054 L923.814 684.054 L923.255 684.054 L922.695 684.054 L922.136 684.054 L921.577 684.054 L921.018 684.054 L920.458 684.054 L919.899 684.054 L919.34 684.054 L918.781 684.054 L918.221 684.054 L917.662 684.054 L917.103 684.054 L916.544 684.054 L915.984 684.054 L915.425 684.054 L914.866 684.054 L914.307 684.054 L913.747 684.054 L913.188 684.054 L912.629 684.054 L912.07 684.054 L911.51 684.054 L910.951 684.054 L910.392 684.054 L909.833 684.054 L909.273 684.054 L908.714 684.054 L908.155 684.054 L907.596 684.054 L907.036 684.054 L906.477 684.054 L905.918 684.054 L905.359 684.054 L904.799 684.054 L904.24 684.054 L903.681 684.054 L903.122 684.054 L902.562 684.054 L902.003 684.054 L901.444 684.054 L900.885 684.054 L900.325 684.054 L899.766 684.054 L899.207 684.054 L898.648 684.054 L898.088 684.054 L897.529 684.054 L896.97 684.054 L896.411 684.054 L895.851 684.054 L895.292 684.054 L894.733 684.054 L894.174 684.054 L893.614 684.054 L893.055 684.054 L892.496 684.054 L891.937 684.054 L891.377 684.054 L890.818 684.054 L890.259 684.054 L889.7 684.054 L889.14 684.054 L888.581 684.054 L888.022 684.054 L887.463 684.054 L886.903 684.054 L886.344 684.054 L885.785 684.054 L885.226 684.054 L884.666 684.054 L884.107 684.054 L883.548 684.054 L882.989 684.054 L882.429 684.054 L881.87 684.054 L881.311 684.054 L880.752 684.054 L880.192 684.054 L879.633 684.054 L879.074 684.054 L878.515 684.054 L877.955 684.054 L877.396 684.054 L876.837 684.054 L876.278 684.054 L875.718 684.054 L875.159 684.054 L874.6 684.054 L874.041 684.054 L873.481 684.054 L872.922 684.054 L872.363 684.054 L871.804 684.054 L871.244 684.054 L870.685 684.054 L870.126 684.054 L869.567 684.054 L869.007 684.054 L868.448 684.054 L867.889 684.054 L867.33 684.054 L866.77 684.054 L866.211 684.054 L865.652 684.054 L865.093 684.054 L864.533 684.054 L863.974 684.054 L863.415 684.054 L862.856 684.054 L862.296 684.054 L861.737 684.054 L861.178 684.054 L860.619 684.054 L860.059 684.054 L859.5 684.054 L858.941 684.054 L858.382 684.054 L857.822 684.054 L857.263 684.054 L856.704 684.054 L856.145 684.054 L855.585 684.054 L855.026 684.054 L854.467 684.054 L853.908 684.054 L853.348 684.054 L852.789 684.054 L852.23 684.054 L851.671 684.054 L851.111 684.054 L850.552 684.054 L849.993 684.054 L849.434 684.054 L848.874 684.054 L848.315 684.054 L847.756 684.054 L847.197 684.054 L846.637 684.054 L846.078 684.054 L845.519 684.054 L844.96 684.054 L844.4 684.054 L843.841 684.054 L843.282 684.054 L842.723 684.054 L842.163 684.054 L841.604 684.054 L841.045 684.054 L840.486 684.054 L839.926 684.054 L839.367 684.054 L838.808 684.054 L838.249 684.054 L837.689 684.054 L837.13 684.054 L836.571 684.054 L836.012 684.054 L835.452 684.054 L834.893 684.054 L834.334 684.054 L833.775 684.054 L833.215 684.054 L832.656 684.054 L832.097 684.054 L831.538 684.054 L830.978 684.054 L830.419 684.054 L829.86 684.054 L829.301 684.054 L828.741 684.054 L828.182 684.054 L827.623 684.054 L827.064 684.054 L826.504 684.054 L825.945 684.054 L825.386 684.054 L824.827 684.054 L824.267 684.054 L823.708 684.054 L823.149 684.054 L822.59 684.054 L822.03 684.054 L821.471 684.054 L820.912 684.054 L820.353 684.054 L819.793 684.054 L819.234 684.054 L818.675 684.054 L818.116 684.054 L817.556 684.054 L816.997 684.054 L816.438 684.054 L815.879 684.054 L815.319 684.054 L814.76 684.054 L814.201 684.054 L813.642 684.054 L813.082 684.054 L812.523 684.054 L811.964 684.054 L811.405 684.054 L810.845 684.054 L810.286 684.054 L809.727 684.054 L809.168 684.054 L808.608 684.054 L808.049 684.054 L807.49 684.054 L806.931 684.054 L806.371 684.054 L805.812 684.054 L805.253 684.054 L804.693 684.054 L804.134 684.054 L803.575 684.054 L803.016 684.054 L802.456 684.054 L801.897 684.054 L801.338 684.054 L800.779 684.054 L800.219 684.054 L799.66 684.054 L799.101 684.054 L798.542 684.054 L797.982 684.054 L797.423 684.054 L796.864 684.054 L796.305 684.054 L795.745 684.054 L795.186 684.054 L794.627 684.054 L794.068 684.054 L793.508 684.054 L792.949 684.054 L792.39 684.054 L791.831 684.054 L791.271 684.054 L790.712 684.054 L790.153 684.054 L789.594 684.054 L789.034 684.054 L788.475 684.054 L787.916 684.054 L787.357 684.054 L786.797 684.054 L786.238 684.054 L785.679 684.054 L785.12 684.054 L784.56 684.054 L784.001 684.054 L783.442 684.054 L782.883 684.054 L782.323 684.054 L781.764 684.054 L781.205 684.054 L780.646 684.054 L780.086 684.054 L779.527 684.054 L778.968 684.054 L778.409 684.054 L777.849 684.054 L777.29 684.054 L776.731 684.054 L776.172 684.054 L775.612 684.054 L775.053 684.054 L774.494 684.054 L773.935 684.054 L773.375 684.054 L772.816 684.054 L772.257 684.054 L771.698 684.054 L771.138 684.054 L770.579 684.054 L770.02 684.054 L769.461 684.054 L768.901 684.054 L768.342 684.054 L767.783 684.054 L767.224 684.054 L766.664 684.054 L766.105 684.054 L765.546 684.054 L764.987 684.054 L764.427 684.054 L763.868 684.054 L763.309 684.054 L762.75 684.054 L762.19 684.054 L761.631 684.054 L761.072 684.054 L760.513 684.054 L759.953 684.054 L759.394 684.054 L758.835 684.054 L758.276 684.054 L757.716 684.054 L757.157 684.054 L756.598 684.054 L756.039 684.054 L755.479 684.054 L754.92 684.054 L754.361 684.054 L753.802 684.054 L753.242 684.054 L752.683 684.054 L752.124 684.054 L751.565 684.054 L751.005 684.054 L750.446 684.054 L749.887 684.054 L749.328 684.054 L748.768 684.054 L748.209 684.054 L747.65 684.054 L747.091 684.054 L746.531 684.054 L745.972 684.054 L745.413 684.054 L744.854 684.054 L744.294 684.054 L743.735 684.054 L743.176 684.054 L742.617 684.054 L742.057 684.054 L741.498 684.054 L740.939 684.054 L740.38 684.054 L739.82 684.054 L739.261 684.054 L738.702 684.054 L738.143 684.054 L737.583 684.054 L737.024 684.054 L736.465 684.054 L735.906 684.054 L735.346 684.054 L734.787 684.054 L734.228 684.054 L733.669 684.054 L733.109 684.054 L732.55 684.054 L731.991 684.054 L731.432 684.054 L730.872 684.054 L730.313 684.054 L729.754 684.054 L729.195 684.054 L728.635 684.054 L728.076 684.054 L727.517 684.054 L726.958 684.054 L726.398 684.054 L725.839 684.054 L725.28 684.054 L724.721 684.054 L724.161 684.054 L723.602 684.054 L723.043 684.054 L722.484 684.054 L721.924 684.054 L721.365 684.054 L720.806 684.054 L720.247 684.054  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.081 720.806,688.081 721.365,688.081 721.924,688.081 722.484,688.081 723.043,688.081 723.602,688.081 724.161,688.081 724.721,688.081 725.28,688.081 725.839,688.081 726.398,688.081 726.958,688.081 727.517,688.081 728.076,688.081 728.635,688.081 729.195,688.081 729.754,688.081 730.313,688.081 730.872,688.081 731.432,688.081 731.991,688.081 732.55,688.081 733.109,688.081 733.669,688.081 734.228,688.081 734.787,688.081 735.346,688.081 735.906,688.081 736.465,688.081 737.024,688.081 737.583,688.081 738.143,688.081 738.702,688.081 739.261,688.081 739.82,688.081 740.38,688.081 740.939,688.081 741.498,688.081 742.057,688.081 742.617,688.081 743.176,688.081 743.735,688.081 744.294,688.081 744.854,688.081 745.413,688.081 745.972,688.081 746.531,688.081 747.091,688.081 747.65,688.081 748.209,688.081 748.768,688.081 749.328,688.081 749.887,688.081 750.446,688.081 751.005,688.081 751.565,688.081 752.124,688.081 752.683,688.081 753.242,688.081 753.802,688.081 754.361,688.081 754.92,688.081 755.479,688.081 756.039,688.081 756.598,688.081 757.157,688.081 757.716,688.081 758.276,688.081 758.835,688.081 759.394,688.081 759.953,688.081 760.513,688.081 761.072,688.081 761.631,688.081 762.19,688.081 762.75,688.081 763.309,688.081 763.868,688.081 764.427,688.081 764.987,688.081 765.546,688.081 766.105,688.081 766.664,688.081 767.224,688.081 767.783,688.081 768.342,688.081 768.901,688.081 769.461,688.081 770.02,688.081 770.579,688.081 771.138,688.081 771.698,688.081 772.257,688.081 772.816,688.081 773.375,688.081 773.935,688.081 774.494,688.081 775.053,688.081 775.612,688.081 776.172,688.081 776.731,688.081 777.29,688.081 777.849,688.081 778.409,688.081 778.968,688.081 779.527,688.081 780.086,688.081 780.646,688.081 781.205,688.081 781.764,688.081 782.323,688.081 782.883,688.081 783.442,688.081 784.001,688.081 784.56,688.081 785.12,688.081 785.679,688.081 786.238,688.081 786.797,688.081 787.357,688.081 787.916,688.081 788.475,688.081 789.034,688.081 789.594,688.081 790.153,688.081 790.712,688.081 791.271,688.081 791.831,688.081 792.39,688.081 792.949,688.081 793.508,688.081 794.068,688.081 794.627,688.081 795.186,688.081 795.745,688.081 796.305,688.081 796.864,688.081 797.423,688.081 797.982,688.081 798.542,688.081 799.101,688.081 799.66,688.081 800.219,688.081 800.779,688.081 801.338,688.081 801.897,688.081 802.456,688.081 803.016,688.081 803.575,688.081 804.134,688.081 804.693,688.081 805.253,688.081 805.812,688.081 806.371,688.081 806.931,688.081 807.49,688.081 808.049,688.081 808.608,688.081 809.168,688.081 809.727,688.081 810.286,688.081 810.845,688.081 811.405,688.081 811.964,688.081 812.523,688.081 813.082,688.081 813.642,688.081 814.201,688.081 814.76,688.081 815.319,688.081 815.879,688.081 816.438,688.081 816.997,688.081 817.556,688.081 818.116,688.081 818.675,688.081 819.234,688.081 819.793,688.081 820.353,688.081 820.912,688.081 821.471,688.081 822.03,688.081 822.59,688.081 823.149,688.081 823.708,688.081 824.267,688.081 824.827,688.081 825.386,688.081 825.945,688.081 826.504,688.081 827.064,688.081 827.623,688.081 828.182,688.081 828.741,688.081 829.301,688.081 829.86,688.081 830.419,688.081 830.978,688.081 831.538,688.081 832.097,688.081 832.656,688.081 833.215,688.081 833.775,688.081 834.334,688.081 834.893,688.081 835.452,688.081 836.012,688.081 836.571,688.081 837.13,688.081 837.689,688.081 838.249,688.081 838.808,688.081 839.367,688.081 839.926,688.081 840.486,688.081 841.045,688.081 841.604,688.081 842.163,688.081 842.723,688.081 843.282,688.081 843.841,688.081 844.4,688.081 844.96,688.081 845.519,688.081 846.078,688.081 846.637,688.081 847.197,688.081 847.756,688.081 848.315,688.081 848.874,688.081 849.434,688.081 849.993,688.081 850.552,688.081 851.111,688.081 851.671,688.081 852.23,688.081 852.789,688.081 853.348,688.081 853.908,688.081 854.467,688.081 855.026,688.081 855.585,688.081 856.145,688.081 856.704,688.081 857.263,688.081 857.822,688.081 858.382,688.081 858.941,688.081 859.5,688.081 860.059,688.081 860.619,688.081 861.178,688.081 861.737,688.081 862.296,688.081 862.856,688.081 863.415,688.081 863.974,688.081 864.533,688.081 865.093,688.081 865.652,688.081 866.211,688.081 866.77,688.081 867.33,688.081 867.889,688.081 868.448,688.081 869.007,688.081 869.567,688.081 870.126,688.081 870.685,688.081 871.244,688.081 871.804,688.081 872.363,688.081 872.922,688.081 873.481,688.081 874.041,688.081 874.6,688.081 875.159,688.081 875.718,688.081 876.278,688.081 876.837,688.081 877.396,688.081 877.955,688.081 878.515,688.081 879.074,688.081 879.633,688.081 880.192,688.081 880.752,688.081 881.311,688.081 881.87,688.081 882.429,688.081 882.989,688.081 883.548,688.081 884.107,688.081 884.666,688.081 885.226,688.081 885.785,688.081 886.344,688.081 886.903,688.081 887.463,688.081 888.022,688.081 888.581,688.081 889.14,688.081 889.7,688.081 890.259,688.081 890.818,688.081 891.377,688.081 891.937,688.081 892.496,688.081 893.055,688.081 893.614,688.081 894.174,688.081 894.733,688.081 895.292,688.081 895.851,688.081 896.411,688.081 896.97,688.081 897.529,688.081 898.088,688.081 898.648,688.081 899.207,688.081 899.766,688.081 900.325,688.081 900.885,688.081 901.444,688.081 902.003,688.081 902.562,688.081 903.122,688.081 903.681,688.081 904.24,688.081 904.799,688.081 905.359,688.081 905.918,688.081 906.477,688.081 907.036,688.081 907.596,688.081 908.155,688.081 908.714,688.081 909.273,688.081 909.833,688.081 910.392,688.081 910.951,688.081 911.51,688.081 912.07,688.081 912.629,688.081 913.188,688.081 913.747,688.081 914.307,688.081 914.866,688.081 915.425,688.081 915.984,688.081 916.544,688.081 917.103,688.081 917.662,688.081 918.221,688.081 918.781,688.081 919.34,688.081 919.899,688.081 920.458,688.081 921.018,688.081 921.577,688.081 922.136,688.081 922.695,688.081 923.255,688.081 923.814,688.081 924.373,688.081 924.932,688.081 925.492,688.081 926.051,688.081 926.61,688.081 927.169,688.081 927.729,688.081 928.288,688.081 928.847,688.081 929.406,688.081 929.966,688.081 930.525,688.081 931.084,688.081 931.644,688.081 932.203,688.081 932.762,688.081 933.321,688.081 933.881,688.081 934.44,688.081 934.999,688.081 935.558,688.081 936.118,688.081 936.677,688.081 937.236,688.081 937.795,688.081 938.355,688.081 938.914,688.081 939.473,688.081 940.032,688.081 940.592,688.081 941.151,688.081 941.71,688.081 942.269,688.081 942.829,688.081 943.388,688.081 943.947,688.081 944.506,688.081 945.066,688.081 945.625,688.081 946.184,688.081 946.743,688.081 947.303,688.081 947.862,688.081 948.421,688.081 948.98,688.081 949.54,688.081 950.099,688.081 950.658,688.081 951.217,688.081 951.777,688.081 952.336,688.081 952.895,688.081 953.454,688.081 954.014,688.081 954.573,688.081 955.132,688.081 955.691,688.081 956.251,688.081 956.81,688.081 957.369,688.081 957.928,688.081 958.488,688.081 959.047,688.081 959.606,688.081 960.165,688.081 960.725,688.081 961.284,688.081 961.843,688.081 962.402,688.081 962.962,688.081 963.521,688.081 964.08,688.081 964.639,688.081 965.199,688.081 965.758,688.081 966.317,688.081 966.876,688.081 967.436,688.081 967.995,688.081 968.554,688.081 969.113,688.081 969.673,688.081 970.232,688.081 970.791,688.081 971.35,688.081 971.91,688.081 972.469,688.081 973.028,688.081 973.587,688.081 974.147,688.081 974.706,688.081 975.265,688.081 975.824,688.081 976.384,688.081 976.943,688.081 977.502,688.081 978.061,688.081 978.621,688.081 979.18,688.081 979.739,688.081 980.298,688.081 980.858,688.081 981.417,688.081 981.976,688.081 982.535,688.081 983.095,688.081 983.654,688.081 984.213,688.081 984.772,688.081 985.332,688.081 985.891,688.081 986.45,688.081 987.009,688.081 987.569,688.081 988.128,688.081 988.687,688.081 989.246,688.081 989.806,688.081 990.365,688.081 990.924,688.081 991.483,688.081 992.043,688.081 992.602,688.081 993.161,688.081 993.72,688.081 994.28,688.081 994.839,688.081 995.398,688.081 995.957,688.081 996.517,688.081 997.076,688.081 997.635,688.081 998.194,688.081 998.754,688.081 999.313,688.081 999.872,688.081 1000.43,688.081 1000.99,688.081 1001.55,688.081 1002.11,688.081 1002.67,688.081 1003.23,688.081 1003.79,688.081 1004.35,688.081 1004.91,688.081 1005.46,688.081 1006.02,688.081 1006.58,688.081 1007.14,688.081 1007.7,688.081 1008.26,688.081 1008.82,688.081 1009.38,688.081 1009.94,688.081 1010.5,688.081 1011.06,688.081 1011.62,688.081 1012.18,688.081 1012.73,688.081 1013.29,688.081 1013.85,688.081 1014.41,688.081 1014.97,688.081 1015.53,688.081 1016.09,688.081 1016.65,688.081 1017.21,688.081 1017.77,688.081 1018.33,688.081 1018.89,688.081 1019.45,688.081 1020.01,688.081 1020.56,688.081 1021.12,688.081 1021.68,688.081 1022.24,688.081 1022.8,688.081 1023.36,688.081 1023.92,688.081 1024.48,688.081 1025.04,688.081 1025.6,688.081 1026.16,688.081 1026.72,688.081 1027.28,688.081 1027.83,688.081 1028.39,688.081 1028.95,688.081 1029.51,688.081 1030.07,688.081 1030.63,688.081 1031.19,688.081 1031.75,688.081 1032.31,688.081 1032.87,688.081 1033.43,688.081 1033.99,688.081 1034.55,688.081 1035.1,688.081 1035.66,688.081 1036.22,688.081 1036.78,688.081 1037.34,688.081 1037.9,688.081 1038.46,688.081 1039.02,688.081 1039.58,688.081 1040.14,688.081 1040.7,688.081 1041.26,688.081 1041.82,688.081 1042.38,688.081 1042.93,688.081 1043.49,688.081 1044.05,688.081 1044.61,688.081 1045.17,688.081 1045.73,688.081 1046.29,688.081 1046.85,688.081 1047.41,688.081 1047.97,688.081 1048.53,688.081 1049.09,688.081 1049.65,688.081 1050.2,688.081 1050.76,688.081 1051.32,688.081 1051.88,688.081 1052.44,688.081 1053,688.081 1053.56,688.081 1054.12,688.081 1054.68,688.081 1055.24,688.081 1055.8,688.081 1056.36,688.081 1056.92,688.081 1057.48,688.081 1058.03,688.081 1058.59,688.081 1059.15,688.081 1059.71,688.081 1060.27,688.081 1060.83,688.081 1061.39,688.081 1061.95,688.081 1062.51,688.081 1063.07,688.081 1063.63,688.081 1064.19,688.081 1064.75,688.081 1065.3,688.081 1065.86,688.081 1066.42,688.081 1066.98,688.081 1067.54,688.081 1068.1,688.081 1068.66,688.081 1069.22,688.081 1069.78,688.081 1070.34,688.081 1070.9,688.081 1071.46,688.081 1072.02,688.081 1072.57,688.081 1073.13,688.081 1073.69,688.081 1074.25,688.081 1074.81,688.081 1075.37,688.081 1075.93,688.081 1076.49,688.081 1077.05,688.081 1077.61,688.081 1078.17,688.081 1078.73,688.081 1079.29,688.081 1079.85,688.081 1080.4,688.081 1080.96,688.081 1081.52,688.081 1082.08,688.081 1082.64,688.081 1083.2,688.081 1083.76,688.081 1084.32,688.081 1084.88,688.081 1085.44,688.081 1086,688.081 1086.56,688.081 1087.12,688.081 1087.67,688.081 1088.23,688.081 1088.79,688.081 1089.35,688.081 1089.91,688.081 1090.47,688.081 1091.03,688.081 1091.59,688.081 1092.15,688.081 1092.71,688.081 1093.27,688.081 1093.83,688.081 1094.39,688.081 1094.94,688.081 1095.5,688.081 1096.06,688.081 1096.62,688.081 1097.18,688.081 1097.74,688.081 1098.3,688.081 1098.86,688.081 1099.42,688.081 1099.98,688.081 1100.54,688.081 1101.1,688.081 1101.66,688.081 1102.22,688.081 1102.77,688.081 1103.33,688.081 1103.89,688.081 1104.45,688.081 1105.01,688.081 1105.57,688.081 1106.13,688.081 1106.69,688.081 1107.25,688.081 1107.81,688.081 1108.37,688.081 1108.93,688.081 1109.49,688.081 1110.04,688.081 1110.6,688.081 1111.16,688.081 1111.72,688.081 1112.28,688.081 1112.84,688.081 1113.4,688.081 1113.96,688.081 1114.52,688.081 1115.08,688.081 1115.64,688.081 1116.2,688.081 1116.76,688.081 1117.31,688.081 1117.87,688.081 1118.43,688.081 1118.99,688.081 1119.55,688.081 1120.11,688.081 1120.67,688.081 1121.23,688.081 1121.79,688.081 1122.35,688.081 1122.91,688.081 1123.47,688.081 1124.03,688.081 1124.59,688.081 1125.14,688.081 1125.7,688.081 1126.26,688.081 1126.82,688.081 1127.38,688.081 1127.94,688.081 1128.5,688.081 1129.06,688.081 1129.62,688.081 1130.18,688.081 1130.74,688.081 1131.3,688.081 1131.86,688.081 1132.41,688.081 1132.97,688.081 1133.53,688.081 1134.09,688.081 1134.65,688.081 1135.21,688.081 1135.77,688.081 1136.33,688.081 1136.89,688.081 1137.45,688.081 1138.01,688.081 1138.57,688.081 1139.13,688.081 1139.68,688.081 1140.24,688.081 1140.8,688.081 1141.36,688.081 1141.92,688.081 1142.48,688.081 1143.04,688.081 1143.6,688.081 1144.16,688.081 1144.72,688.081 1145.28,688.081 1145.84,688.081 1146.4,688.081 1146.96,688.081 1147.51,688.081 1148.07,688.081 1148.63,688.081 1149.19,688.081 1149.75,688.081 1150.31,688.081 1150.87,688.081 1151.43,688.081 1151.99,688.081 1152.55,688.081 1153.11,688.081 1153.67,688.081 1154.23,688.081 1154.78,688.081 1155.34,688.081 1155.9,688.081 1156.46,688.081 1157.02,688.081 1157.58,688.081 1158.14,688.081 1158.7,688.081 1159.26,688.081 1159.82,688.081 1160.38,688.081 1160.94,688.081 1161.5,688.081 1162.05,688.081 1162.61,688.081 1163.17,688.081 1163.73,688.081 1164.29,688.081 1164.85,688.081 1165.41,688.081 1165.97,688.081 1166.53,688.081 1167.09,688.081 1167.65,688.081 1168.21,688.081 1168.77,688.081 1169.33,688.081 1169.88,688.081 1170.44,688.081 1171,688.081 1171.56,688.081 1172.12,688.081 1172.68,688.081 1173.24,688.081 1173.8,688.081 1174.36,688.081 1174.92,688.081 1175.48,688.081 1176.04,688.081 1176.6,688.081 1177.15,688.081 1177.71,688.081 1178.27,688.081 1178.83,688.081 1179.39,688.081 1179.95,688.081 1180.51,688.081 1181.07,688.081 1181.63,688.081 1182.19,688.081 1182.75,688.081 1183.31,688.081 1183.87,688.081 1184.43,688.081 1184.98,688.081 1185.54,688.081 1186.1,688.081 1186.66,688.081 1187.22,688.081 1187.78,688.081 1188.34,688.081 1188.9,688.081 1189.46,688.081 1190.02,688.081 1190.58,688.081 1191.14,688.081 1191.7,688.081 1192.25,688.081 1192.81,688.081 1193.37,688.081 1193.93,688.081 1194.49,688.081 1195.05,688.081 1195.61,688.081 1196.17,688.081 1196.73,688.081 1197.29,688.081 1197.85,688.081 1198.41,688.081 1198.97,688.081 1199.52,688.081 1200.08,688.081 1200.64,688.081 1201.2,688.081 1201.76,688.081 1202.32,688.081 1202.88,688.081 1203.44,688.081 1204,688.081 1204.56,688.081 1205.12,688.081 1205.68,688.081 1206.24,688.081 1206.8,688.081 1207.35,688.081 1207.91,688.081 1208.47,688.081 1209.03,688.081 1209.59,688.081 1210.15,688.081 1210.71,688.081 1211.27,688.081 1211.83,688.081 1212.39,688.081 1212.95,688.081 1213.51,688.081 1214.07,688.081 1214.62,688.081 1215.18,688.081 1215.74,688.081 1216.3,688.081 1216.86,688.081 1217.42,688.081 1217.98,688.081 1218.54,688.081 1219.1,688.081 1219.66,688.081 1220.22,688.081 1220.78,688.081 1221.34,688.081 1221.89,688.081 1222.45,688.081 1223.01,688.081 1223.57,688.081 1224.13,688.081 1224.69,688.081 1225.25,688.081 1225.81,688.081 1226.37,688.081 1226.93,688.081 1227.49,688.081 1228.05,688.081 1228.61,688.081 1229.17,688.081 1229.72,688.081 1230.28,688.081 1230.84,688.081 1231.4,688.081 1231.96,688.081 1232.52,688.081 1233.08,688.081 1233.64,688.081 1234.2,688.081 1234.76,688.081 1235.32,688.081 1235.88,688.081 1236.44,688.081 1236.99,688.081 1237.55,688.081 1238.11,688.081 1238.67,688.081 1239.23,688.081 1239.79,688.081 1240.35,688.081 1240.91,688.081 1241.47,688.081 1242.03,688.081 1242.59,688.081 1243.15,688.081 1243.71,688.081 1244.26,688.081 1244.82,688.081 1245.38,688.081 1245.94,688.081 1246.5,688.081 1247.06,688.081 1247.62,688.081 1248.18,688.081 1248.74,688.081 1249.3,688.081 1249.86,688.081 1250.42,688.081 1250.98,688.081 1251.54,688.081 1252.09,688.081 1252.65,688.081 1253.21,688.081 1253.77,688.081 1254.33,688.081 1254.89,688.081 1255.45,688.081 1256.01,688.081 1256.57,688.081 1257.13,688.081 1257.69,688.081 1258.25,688.081 1258.81,688.081 1259.36,688.081 1259.92,688.081 1260.48,688.081 1261.04,688.081 1261.6,688.081 1262.16,688.081 1262.72,688.081 1263.28,688.081 1263.84,688.081 1264.4,688.081 1264.96,688.081 1265.52,688.081 1266.08,688.081 1266.63,688.081 1267.19,688.081 1267.75,688.081 1268.31,688.081 1268.87,688.081 1269.43,688.081 1269.99,688.081 1270.55,688.081 1271.11,688.081 1271.67,688.081 1272.23,688.081 1272.79,688.081 1273.35,688.081 1273.91,688.081 1274.46,688.081 1275.02,688.081 1275.58,688.081 1276.14,688.081 1276.7,688.081 1277.26,688.081 1277.82,688.081 1278.38,688.081 1278.94,688.081 1279.5,688.081 1280.06,688.081 1280.62,688.081 1281.18,688.081 1281.73,688.081 1282.29,688.081 1282.85,688.081 1283.41,688.081 1283.97,688.081 1284.53,688.081 1285.09,688.081 1285.65,688.081 1286.21,688.081 1286.77,688.081 1287.33,688.081 1287.89,688.081 1288.45,688.081 1289,688.081 1289.56,688.081 1290.12,688.081 1290.68,688.081 1291.24,688.081 1291.8,688.081 1292.36,688.081 1292.92,688.081 1293.48,688.081 1294.04,688.081 1294.6,688.081 1295.16,688.081 1295.72,688.081 1296.28,688.081 1296.83,688.081 1297.39,688.081 1297.95,688.081 1298.51,688.081 1299.07,688.081 1299.63,688.081 1300.19,688.081 1300.75,688.081 1301.31,688.081 1301.87,688.081 1302.43,688.081 1302.99,688.081 1303.55,688.081 1304.1,688.081 1304.66,688.081 1305.22,688.081 1305.78,688.081 1306.34,688.081 1306.9,688.081 1307.46,688.081 1308.02,688.081 1308.58,688.081 1309.14,688.081 1309.7,688.081 1310.26,688.081 1310.82,688.081 1311.38,688.081 1311.93,688.081 1312.49,688.081 1313.05,688.081 1313.61,688.081 1314.17,688.081 1314.73,688.081 1315.29,688.081 1315.85,688.081 1316.41,688.081 1316.97,688.081 1317.53,688.081 1318.09,688.081 1318.65,688.081 1319.2,688.081 1319.76,688.081 1320.32,688.081 1320.88,688.081 1321.44,688.081 1322,688.081 1322.56,688.081 1323.12,688.081 1323.68,688.081 1324.24,688.081 1324.8,688.081 1325.36,688.081 1325.92,688.081 1326.47,688.081 1327.03,688.081 1327.59,688.081 1328.15,688.081 1328.71,688.081 1329.27,688.081 1329.83,688.081 1330.39,688.081 1330.95,688.081 1331.51,688.081 1332.07,688.081 1332.63,688.081 1333.19,688.081 1333.75,688.081 1334.3,688.081 1334.86,688.081 1335.42,688.081 1335.98,688.081 1336.54,688.081 1337.1,688.081 1337.66,688.081 1338.22,688.081 1338.78,688.081 1339.34,688.081 1339.9,688.081 1340.46,688.081 1341.02,688.081 1341.57,688.081 1342.13,688.081 1342.69,688.081 1343.25,688.081 1343.81,688.081 1344.37,688.081 1344.93,688.081 1345.49,688.081 1346.05,688.081 1346.61,688.081 1347.17,688.081 1347.73,688.081 1348.29,688.081 1348.84,688.081 1349.4,688.081 1349.96,688.081 1350.52,688.081 1351.08,688.081 1351.64,688.081 1352.2,688.081 1352.76,688.081 1353.32,688.081 1353.88,688.081 1354.44,688.081 1355,688.081 1355.56,688.081 1356.12,688.081 1356.67,688.081 1357.23,688.081 1357.79,688.081 1358.35,688.081 1358.91,688.081 1359.47,688.081 1360.03,688.081 1360.59,688.081 1361.15,688.081 1361.71,688.081 1362.27,688.081 1362.83,688.081 1363.39,688.081 1363.94,688.081 1364.5,688.081 1365.06,688.081 1365.62,688.081 1366.18,688.081 1366.74,688.081 1367.3,688.081 1367.86,688.081 1368.42,688.081 1368.98,688.081 1369.54,688.081 1370.1,688.081 1370.66,688.081 1371.21,688.081 1371.77,688.081 1372.33,688.081 1372.89,688.081 1373.45,688.081 1374.01,688.081 1374.57,688.081 1375.13,688.081 1375.69,688.081 1376.25,688.081 1376.81,688.081 1377.37,688.081 1377.93,688.081 1378.49,688.081 1379.04,688.081 1379.6,688.081 1380.16,688.081 1380.72,688.081 1381.28,688.081 1381.84,688.081 1382.4,688.081 1382.96,688.081 1383.52,688.081 1384.08,688.081 1384.64,688.081 1385.2,688.081 1385.76,688.081 1386.31,688.081 1386.87,688.081 1387.43,688.081 1387.99,688.081 1388.55,688.081 1389.11,688.081 1389.67,688.081 1390.23,688.081 1390.79,688.081 1391.35,688.081 1391.91,688.081 1392.47,688.081 1393.03,688.081 1393.58,688.081 1394.14,688.081 1394.7,688.081 1395.26,688.081 1395.82,688.081 1396.38,688.081 1396.94,688.081 1397.5,688.081 1398.06,688.081 1398.62,688.081 1399.18,688.081 1399.74,688.081 1400.3,688.081 1400.86,688.081 1401.41,688.081 1401.97,688.081 1402.53,688.081 1403.09,688.081 1403.65,688.081 1404.21,688.081 1404.77,688.081 1405.33,688.081 1405.89,688.081 1406.45,688.081 1407.01,688.081 1407.57,688.081 1408.13,688.081 1408.68,688.081 1409.24,688.081 1409.8,688.081 1410.36,688.081 1410.92,688.081 1411.48,688.081 1412.04,688.081 1412.6,688.081 1413.16,688.081 1413.72,688.081 1414.28,688.081 1414.84,688.081 1415.4,688.081 1415.95,688.081 1416.51,688.081 1417.07,688.081 1417.63,688.081 1418.19,688.081 1418.75,688.081 1419.31,688.081 1419.87,688.081 1420.43,688.081 1420.99,688.081 1421.55,688.081 1422.11,688.081 1422.67,688.081 1423.23,688.081 1423.78,688.081 1424.34,688.081 1424.9,688.081 1425.46,688.081 1426.02,688.081 1426.58,688.081 1427.14,688.081 1427.7,688.081 1428.26,688.081 1428.82,688.081 1429.38,688.081 1429.94,688.081 1430.5,688.081 1431.05,688.081 1431.61,688.081 1432.17,688.081 1432.73,688.081 1433.29,688.081 1433.85,688.081 1434.41,688.081 1434.97,688.081 1435.53,688.081 1436.09,688.081 1436.65,688.081 1437.21,688.081 1437.77,688.081 1438.33,688.081 1438.88,688.081 1439.44,688.081 1440,688.081 1440.56,688.081 1441.12,688.081 1441.68,688.081 1442.24,688.081 1442.8,688.081 1443.36,688.081 1443.92,688.081 1444.48,688.081 1445.04,688.081 1445.6,688.081 1446.15,688.081 1446.71,688.081 1447.27,688.081 1447.83,688.081 1448.39,688.081 1448.95,688.081 1449.51,688.081 1450.07,688.081 1450.63,688.081 1451.19,688.081 1451.75,688.081 1452.31,688.081 1452.87,688.081 1453.42,688.081 1453.98,688.081 1454.54,688.081 1455.1,688.081 1455.66,688.081 1456.22,688.081 1456.78,688.081 1457.34,688.081 1457.9,688.081 1458.46,688.081 1459.02,688.081 1459.58,688.081 1460.14,688.081 1460.7,688.081 1461.25,688.081 1461.81,688.081 1462.37,688.081 1462.93,688.081 1463.49,688.081 1464.05,688.081 1464.61,688.081 1465.17,688.081 1465.73,688.081 1466.29,688.081 1466.85,688.081 1467.41,688.081 1467.97,688.081 1468.52,688.081 1469.08,688.081 1469.64,688.081 1470.2,688.081 1470.76,688.081 1471.32,688.081 1471.88,688.081 1472.44,688.081 1473,688.081 1473.56,688.081 1474.12,688.081 1474.68,688.081 1475.24,688.081 1475.79,688.081 1476.35,688.081 1476.91,688.081 1477.47,688.081 1478.03,688.081 1478.59,688.081 1479.15,688.081 1479.71,688.081 1480.27,688.081 1480.83,688.081 1481.39,688.081 1481.95,688.081 1482.51,688.081 1483.07,688.081 1483.62,688.081 1484.18,688.081 1484.74,688.081 1485.3,688.081 1485.86,688.081 1486.42,688.081 1486.98,688.081 1487.54,688.081 1488.1,688.081 1488.66,688.081 1489.22,688.081 1489.78,688.081 1490.34,688.081 1490.89,688.081 1491.45,688.081 1492.01,688.081 1492.57,688.081 1493.13,688.081 1493.69,688.081 1494.25,688.081 1494.81,688.081 1495.37,688.081 1495.93,688.081 1496.49,688.081 1497.05,688.081 1497.61,688.081 1498.16,688.081 1498.72,688.081 1499.28,688.081 1499.84,688.081 1500.4,688.081 1500.96,688.081 1501.52,688.081 1502.08,688.081 1502.64,688.081 1503.2,688.081 1503.76,688.081 1504.32,688.081 1504.88,688.081 1505.44,688.081 1505.99,688.081 1506.55,688.081 1507.11,688.081 1507.67,688.081 1508.23,688.081 1508.79,688.081 1509.35,688.081 1509.91,688.081 1510.47,688.081 1511.03,688.081 1511.59,688.081 1512.15,688.081 1512.71,688.081 1513.26,688.081 1513.82,688.081 1514.38,688.081 1514.94,688.081 1515.5,688.081 1516.06,688.081 1516.62,688.081 1517.18,688.081 1517.74,688.081 1518.3,688.081 1518.86,688.081 1519.42,688.081 1519.98,688.081 1520.53,688.081 1521.09,688.081 1521.65,688.081 1522.21,688.081 1522.77,688.081 1523.33,688.081 1523.89,688.081 1524.45,688.081 1525.01,688.081 1525.57,688.081 1526.13,688.081 1526.69,688.081 1527.25,688.081 1527.81,688.081 1528.36,688.081 1528.92,688.081 1529.48,688.081 1530.04,688.081 1530.6,688.081 1531.16,688.081 1531.72,688.081 1532.28,688.081 1532.84,688.081 1533.4,688.081 1533.96,688.081 1534.52,688.081 1535.08,688.081 1535.63,688.081 1536.19,688.081 1536.75,688.081 1537.31,688.081 1537.87,688.081 1538.43,688.081 1538.99,688.081 1539.55,688.081 1540.11,688.081 1540.67,688.081 1541.23,688.081 1541.79,688.081 1542.35,688.081 1542.9,688.081 1543.46,688.081 1544.02,688.081 1544.58,688.081 1545.14,688.081 1545.7,688.081 1546.26,688.081 1546.82,688.081 1547.38,688.081 1547.94,688.081 1548.5,688.081 1549.06,688.081 1549.62,688.081 1550.18,688.081 1550.73,688.081 1551.29,688.081 1551.85,688.081 1552.41,688.081 1552.97,688.081 1553.53,688.081 1554.09,688.081 1554.65,688.081 1555.21,688.081 1555.77,688.081 1556.33,688.081 1556.89,688.081 1557.45,688.081 1558,688.081 1558.56,688.081 1559.12,688.081 1559.68,688.081 1560.24,688.081 1560.8,688.081 1561.36,688.081 1561.92,688.081 1562.48,688.081 1563.04,688.081 1563.6,688.081 1564.16,688.081 1564.72,688.081 1565.28,688.081 1565.83,688.081 1566.39,688.081 1566.95,688.081 1567.51,688.081 1568.07,688.081 1568.63,688.081 1569.19,688.081 1569.75,688.081 1570.31,688.081 1570.87,688.081 1571.43,688.081 1571.99,688.081 1572.55,688.081 1573.1,688.081 1573.66,688.081 1574.22,688.081 1574.78,688.081 1575.34,688.081 1575.9,688.081 1576.46,688.081 1577.02,688.081 1577.58,688.081 1578.14,688.081 1578.7,688.081 1579.26,688.081 1579.82,688.081 1580.37,688.081 1580.93,688.081 1581.49,688.081 1582.05,688.081 1582.61,688.081 1583.17,688.081 1583.73,688.081 1584.29,688.081 1584.85,688.081 1585.41,688.081 1585.97,688.081 1586.53,688.081 1587.09,688.081 1587.65,688.081 1588.2,688.081 1588.76,688.081 1589.32,688.081 1589.88,688.081 1590.44,688.081 1591,688.081 1591.56,688.081 1592.12,688.081 1592.68,688.081 1593.24,688.081 1593.8,688.081 1594.36,688.081 1594.92,688.081 1595.47,688.081 1596.03,688.081 1596.59,688.081 1597.15,688.081 1597.71,688.081 1598.27,688.081 1598.83,688.081 1599.39,688.081 1599.95,688.081 1600.51,688.081 1601.07,688.081 1601.63,688.081 1602.19,688.081 1602.74,688.081 1603.3,688.081 1603.86,688.081 1604.42,688.081 1604.98,688.081 1605.54,688.081 1606.1,688.081 1606.66,688.081 1607.22,688.081 1607.78,688.081 1608.34,688.081 1608.9,688.081 1609.46,688.081 1610.02,688.081 1610.57,688.081 1611.13,688.081 1611.69,688.081 1612.25,688.081 1612.81,688.081 1613.37,688.081 1613.93,688.081 1614.49,688.081 1615.05,688.081 1615.61,688.081 1616.17,688.081 1616.73,688.081 1617.29,688.081 1617.84,688.081 1618.4,688.081 1618.96,688.081 1619.52,688.081 1620.08,688.081 1620.64,688.081 1621.2,688.081 1621.76,688.081 1622.32,688.081 1622.88,688.081 1623.44,688.081 1624,688.081 1624.56,688.081 1625.11,688.081 1625.67,688.081 1626.23,688.081 1626.79,688.081 1627.35,688.081 1627.91,688.081 1628.47,688.081 1629.03,688.081 1629.59,688.081 1630.15,688.081 1630.71,688.081 1631.27,688.081 1631.83,688.081 1632.39,688.081 1632.94,688.081 1633.5,688.081 1634.06,688.081 1634.62,688.081 1635.18,688.081 1635.74,688.081 1636.3,688.081 1636.86,688.081 1637.42,688.081 1637.98,688.081 1638.54,688.081 1639.1,688.081 1639.66,688.081 1640.21,688.081 1640.77,688.081 1641.33,688.081 1641.89,688.081 1642.45,688.081 1643.01,688.081 1643.57,688.081 1644.13,688.081 1644.69,688.081 1645.25,688.081 1645.81,688.081 1646.37,688.081 1646.93,688.081 1647.48,688.081 1648.04,688.081 1648.6,688.081 1649.16,688.081 1649.72,688.081 1650.28,688.081 1650.84,688.081 1651.4,688.081 1651.96,688.081 1652.52,688.081 1653.08,688.081 1653.64,688.081 1654.2,688.081 1654.76,688.081 1655.31,688.081 1655.87,688.081 1656.43,688.081 1656.99,688.081 1657.55,688.081 1658.11,688.081 1658.67,688.081 1659.23,688.081 1659.79,688.081 1660.35,688.081 1660.91,688.081 1661.47,688.081 1662.03,688.081 1662.58,688.081 1663.14,688.081 1663.7,688.081 1664.26,688.081 1664.82,688.081 1665.38,688.081 1665.94,688.081 1666.5,688.081 1667.06,688.081 1667.62,688.081 1668.18,688.081 1668.74,688.081 1669.3,688.081 1669.85,688.081 1670.41,688.081 1670.97,688.081 1671.53,688.081 1672.09,688.081 1672.65,688.081 1673.21,688.081 1673.77,688.081 1674.33,688.081 1674.89,688.081 1675.45,688.081 1676.01,688.081 1676.57,688.081 1677.13,688.081 1677.68,688.081 1678.24,688.081 1678.8,688.081 1679.36,688.081 1679.92,688.081 1680.48,688.081 1681.04,688.081 1681.6,688.081 1682.16,688.081 1682.72,688.081 1683.28,688.081 1683.84,688.081 1684.4,688.081 1684.95,688.081 1685.51,688.081 1686.07,688.081 1686.63,688.081 1687.19,688.081 1687.75,688.081 1688.31,688.081 1688.87,688.081 1689.43,688.081 1689.99,688.081 1690.55,688.081 1691.11,688.081 1691.67,688.081 1692.23,688.081 1692.78,688.081 1693.34,688.081 1693.9,688.081 1694.46,688.081 1695.02,688.081 1695.58,688.081 1696.14,688.081 1696.7,688.081 1697.26,688.081 1697.82,688.081 1698.38,688.081 1698.94,688.081 1699.5,688.081 1700.05,688.081 1700.61,688.081 1701.17,688.081 1701.73,688.081 1702.29,688.081 1702.85,688.081 1703.41,688.081 1703.97,688.081 1704.53,688.081 1705.09,688.081 1705.65,688.081 1706.21,688.081 1706.77,688.081 1707.32,688.081 1707.88,688.081 1708.44,688.081 1709,688.081 1709.56,688.081 1710.12,688.081 1710.68,688.081 1711.24,688.081 1711.8,688.081 1712.36,688.081 1712.92,688.081 1713.48,688.081 1714.04,688.081 1714.6,688.081 1715.15,688.081 1715.71,688.081 1716.27,688.081 1716.83,688.081 1717.39,688.081 1717.95,688.081 1718.51,688.081 1719.07,688.081 1719.63,688.081 1720.19,688.081 1720.75,688.081 1721.31,688.081 1721.87,688.081 1722.42,688.081 1722.98,688.081 1723.54,688.081 1724.1,688.081 1724.66,688.081 1725.22,688.081 1725.78,688.081 1726.34,688.081 1726.9,688.081 1727.46,688.081 1728.02,688.081 1728.58,688.081 1729.14,688.081 1729.69,688.081 1730.25,688.081 1730.81,688.081 1731.37,688.081 1731.93,688.081 1732.49,688.081 1733.05,688.081 1733.61,688.081 1734.17,688.081 1734.73,688.081 1735.29,688.081 1735.85,688.081 1736.41,688.081 1736.97,688.081 1737.52,688.081 1738.08,688.081 1738.64,688.081 1739.2,688.081 1739.76,688.081 1740.32,688.081 1740.88,688.081 1741.44,688.081 1742,688.081 1742.56,688.081 1743.12,688.081 1743.68,688.081 1744.24,688.081 1744.79,688.081 1745.35,688.081 1745.91,688.081 1746.47,688.081 1747.03,688.081 1747.59,688.081 1748.15,688.081 1748.71,688.081 1749.27,688.081 1749.83,688.081 1750.39,688.081 1750.95,688.081 1751.51,688.081 1752.06,688.081 1752.62,688.081 1753.18,688.081 1753.74,688.081 1754.3,688.081 1754.86,688.081 1755.42,688.081 1755.98,688.081 1756.54,688.081 1757.1,688.081 1757.66,688.081 1758.22,688.081 1758.78,688.081 1759.34,688.081 1759.89,688.081 1760.45,688.081 1761.01,688.081 1761.57,688.081 1762.13,688.081 1762.69,688.081 1763.25,688.081 1763.81,688.081 1764.37,688.081 1764.93,688.081 1765.49,688.081 1766.05,688.081 1766.61,688.081 1767.16,688.081 1767.72,688.081 1768.28,688.081 1768.84,688.081 1769.4,688.081 1769.96,688.081 1770.52,688.081 1771.08,688.081 1771.64,688.081 1772.2,688.081 1772.76,688.081 1773.32,688.081 1773.88,688.081 1774.43,688.081 1774.99,688.081 1775.55,688.081 1776.11,688.081 1776.67,688.081 1777.23,688.081 1777.79,688.081 1778.35,688.081 1778.91,688.081 1779.47,688.081 1780.03,688.081 1780.59,688.081 1781.15,688.081 1781.71,688.081 1782.26,688.081 1782.82,688.081 1783.38,688.081 1783.94,688.081 1784.5,688.081 1785.06,688.081 1785.62,688.081 1786.18,688.081 1786.74,688.081 1787.3,688.081 1787.86,688.081 1788.42,688.081 1788.98,688.081 1789.53,688.081 1790.09,688.081 1790.65,688.081 1791.21,688.081 1791.77,688.081 1792.33,688.081 1792.89,688.081 1793.45,688.081 1794.01,688.081 1794.57,688.081 1795.13,688.081 1795.69,688.081 1796.25,688.081 1796.8,688.081 1797.36,688.081 1797.92,688.081 1798.48,688.081 1799.04,688.081 1799.6,688.081 1800.16,688.081 1800.72,688.081 1801.28,688.081 1801.84,688.081 1802.4,688.081 1802.96,688.081 1803.52,688.081 1804.08,688.081 1804.63,688.081 1805.19,688.081 1805.75,688.081 1806.31,688.081 1806.87,688.081 1807.43,688.081 1807.99,688.081 1808.55,688.081 1809.11,688.081 1809.67,688.081 1810.23,688.081 1810.79,688.081 1811.35,688.081 1811.9,688.081 1812.46,688.081 1813.02,688.081 1813.58,688.081 1814.14,688.081 1814.7,688.081 1815.26,688.081 1815.82,688.081 1816.38,688.081 1816.94,688.081 1817.5,688.081 1818.06,688.081 1818.62,688.081 1819.18,688.081 1819.73,688.081 1820.29,688.081 1820.85,688.081 1821.41,688.081 1821.97,688.081 1822.53,688.081 1823.09,688.081 1823.65,688.081 1824.21,688.081 1824.77,688.081 1825.33,688.081 1825.89,688.081 1826.45,688.081 1827,688.081 1827.56,688.081 1828.12,688.081 1828.68,688.081 1829.24,688.081 1829.8,688.081 1830.36,688.081 1830.92,688.081 1831.48,688.081 1832.04,688.081 1832.6,688.081 1833.16,688.081 1833.72,688.081 1834.27,688.081 1834.83,688.081 1835.39,688.081 1835.95,688.081 1836.51,688.081 1837.07,688.081 1837.63,688.081 1838.19,688.081 \"/>\n<path clip-path=\"url(#clip123)\" d=\"M720.247 684.554 L720.806 684.554 L721.365 684.554 L721.924 684.554 L722.484 684.554 L723.043 684.554 L723.602 684.554 L724.161 684.554 L724.721 684.554 L725.28 684.554 L725.839 684.554 L726.398 684.554 L726.958 684.554 L727.517 684.554 L728.076 684.554 L728.635 684.554 L729.195 684.554 L729.754 684.554 L730.313 684.554 L730.872 684.554 L731.432 684.554 L731.991 684.554 L732.55 684.554 L733.109 684.554 L733.669 684.554 L734.228 684.554 L734.787 684.554 L735.346 684.554 L735.906 684.554 L736.465 684.554 L737.024 684.554 L737.583 684.554 L738.143 684.554 L738.702 684.554 L739.261 684.554 L739.82 684.554 L740.38 684.554 L740.939 684.554 L741.498 684.554 L742.057 684.554 L742.617 684.554 L743.176 684.554 L743.735 684.554 L744.294 684.554 L744.854 684.554 L745.413 684.554 L745.972 684.554 L746.531 684.554 L747.091 684.554 L747.65 684.554 L748.209 684.554 L748.768 684.554 L749.328 684.554 L749.887 684.554 L750.446 684.554 L751.005 684.554 L751.565 684.554 L752.124 684.554 L752.683 684.554 L753.242 684.554 L753.802 684.554 L754.361 684.554 L754.92 684.554 L755.479 684.554 L756.039 684.554 L756.598 684.554 L757.157 684.554 L757.716 684.554 L758.276 684.554 L758.835 684.554 L759.394 684.554 L759.953 684.554 L760.513 684.554 L761.072 684.554 L761.631 684.554 L762.19 684.554 L762.75 684.554 L763.309 684.554 L763.868 684.554 L764.427 684.554 L764.987 684.554 L765.546 684.554 L766.105 684.554 L766.664 684.554 L767.224 684.554 L767.783 684.554 L768.342 684.554 L768.901 684.554 L769.461 684.554 L770.02 684.554 L770.579 684.554 L771.138 684.554 L771.698 684.554 L772.257 684.554 L772.816 684.554 L773.375 684.554 L773.935 684.554 L774.494 684.554 L775.053 684.554 L775.612 684.554 L776.172 684.554 L776.731 684.554 L777.29 684.554 L777.849 684.554 L778.409 684.554 L778.968 684.554 L779.527 684.554 L780.086 684.554 L780.646 684.554 L781.205 684.554 L781.764 684.554 L782.323 684.554 L782.883 684.554 L783.442 684.554 L784.001 684.554 L784.56 684.554 L785.12 684.554 L785.679 684.554 L786.238 684.554 L786.797 684.554 L787.357 684.554 L787.916 684.554 L788.475 684.554 L789.034 684.554 L789.594 684.554 L790.153 684.554 L790.712 684.554 L791.271 684.554 L791.831 684.554 L792.39 684.554 L792.949 684.554 L793.508 684.554 L794.068 684.554 L794.627 684.554 L795.186 684.554 L795.745 684.554 L796.305 684.554 L796.864 684.554 L797.423 684.554 L797.982 684.554 L798.542 684.554 L799.101 684.554 L799.66 684.554 L800.219 684.554 L800.779 684.554 L801.338 684.554 L801.897 684.554 L802.456 684.554 L803.016 684.554 L803.575 684.554 L804.134 684.554 L804.693 684.554 L805.253 684.554 L805.812 684.554 L806.371 684.554 L806.931 684.554 L807.49 684.554 L808.049 684.554 L808.608 684.554 L809.168 684.554 L809.727 684.554 L810.286 684.554 L810.845 684.554 L811.405 684.554 L811.964 684.554 L812.523 684.554 L813.082 684.554 L813.642 684.554 L814.201 684.554 L814.76 684.554 L815.319 684.554 L815.879 684.554 L816.438 684.554 L816.997 684.554 L817.556 684.554 L818.116 684.554 L818.675 684.554 L819.234 684.554 L819.793 684.554 L820.353 684.554 L820.912 684.554 L821.471 684.554 L822.03 684.554 L822.59 684.554 L823.149 684.554 L823.708 684.554 L824.267 684.554 L824.827 684.554 L825.386 684.554 L825.945 684.554 L826.504 684.554 L827.064 684.554 L827.623 684.554 L828.182 684.554 L828.741 684.554 L829.301 684.554 L829.86 684.554 L830.419 684.554 L830.978 684.554 L831.538 684.554 L832.097 684.554 L832.656 684.554 L833.215 684.554 L833.775 684.554 L834.334 684.554 L834.893 684.554 L835.452 684.554 L836.012 684.554 L836.571 684.554 L837.13 684.554 L837.689 684.554 L838.249 684.554 L838.808 684.554 L839.367 684.554 L839.926 684.554 L840.486 684.554 L841.045 684.554 L841.604 684.554 L842.163 684.554 L842.723 684.554 L843.282 684.554 L843.841 684.554 L844.4 684.554 L844.96 684.554 L845.519 684.554 L846.078 684.554 L846.637 684.554 L847.197 684.554 L847.756 684.554 L848.315 684.554 L848.874 684.554 L849.434 684.554 L849.993 684.554 L850.552 684.554 L851.111 684.554 L851.671 684.554 L852.23 684.554 L852.789 684.554 L853.348 684.554 L853.908 684.554 L854.467 684.554 L855.026 684.554 L855.585 684.554 L856.145 684.554 L856.704 684.554 L857.263 684.554 L857.822 684.554 L858.382 684.554 L858.941 684.554 L859.5 684.554 L860.059 684.554 L860.619 684.554 L861.178 684.554 L861.737 684.554 L862.296 684.554 L862.856 684.554 L863.415 684.554 L863.974 684.554 L864.533 684.554 L865.093 684.554 L865.652 684.554 L866.211 684.554 L866.77 684.554 L867.33 684.554 L867.889 684.554 L868.448 684.554 L869.007 684.554 L869.567 684.554 L870.126 684.554 L870.685 684.554 L871.244 684.554 L871.804 684.554 L872.363 684.554 L872.922 684.554 L873.481 684.554 L874.041 684.554 L874.6 684.554 L875.159 684.554 L875.718 684.554 L876.278 684.554 L876.837 684.554 L877.396 684.554 L877.955 684.554 L878.515 684.554 L879.074 684.554 L879.633 684.554 L880.192 684.554 L880.752 684.554 L881.311 684.554 L881.87 684.554 L882.429 684.554 L882.989 684.554 L883.548 684.554 L884.107 684.554 L884.666 684.554 L885.226 684.554 L885.785 684.554 L886.344 684.554 L886.903 684.554 L887.463 684.554 L888.022 684.554 L888.581 684.554 L889.14 684.554 L889.7 684.554 L890.259 684.554 L890.818 684.554 L891.377 684.554 L891.937 684.554 L892.496 684.554 L893.055 684.554 L893.614 684.554 L894.174 684.554 L894.733 684.554 L895.292 684.554 L895.851 684.554 L896.411 684.554 L896.97 684.554 L897.529 684.554 L898.088 684.554 L898.648 684.554 L899.207 684.554 L899.766 684.554 L900.325 684.554 L900.885 684.554 L901.444 684.554 L902.003 684.554 L902.562 684.554 L903.122 684.554 L903.681 684.554 L904.24 684.554 L904.799 684.554 L905.359 684.554 L905.918 684.554 L906.477 684.554 L907.036 684.554 L907.596 684.554 L908.155 684.554 L908.714 684.554 L909.273 684.554 L909.833 684.554 L910.392 684.554 L910.951 684.554 L911.51 684.554 L912.07 684.554 L912.629 684.554 L913.188 684.554 L913.747 684.554 L914.307 684.554 L914.866 684.554 L915.425 684.554 L915.984 684.554 L916.544 684.554 L917.103 684.554 L917.662 684.554 L918.221 684.554 L918.781 684.554 L919.34 684.554 L919.899 684.554 L920.458 684.554 L921.018 684.554 L921.577 684.554 L922.136 684.554 L922.695 684.554 L923.255 684.554 L923.814 684.554 L924.373 684.554 L924.932 684.554 L925.492 684.554 L926.051 684.554 L926.61 684.554 L927.169 684.554 L927.729 684.554 L928.288 684.554 L928.847 684.554 L929.406 684.554 L929.966 684.554 L930.525 684.554 L931.084 684.554 L931.644 684.554 L932.203 684.554 L932.762 684.554 L933.321 684.554 L933.881 684.554 L934.44 684.554 L934.999 684.554 L935.558 684.554 L936.118 684.554 L936.677 684.554 L937.236 684.554 L937.795 684.554 L938.355 684.554 L938.914 684.554 L939.473 684.554 L940.032 684.554 L940.592 684.554 L941.151 684.554 L941.71 684.554 L942.269 684.554 L942.829 684.554 L943.388 684.554 L943.947 684.554 L944.506 684.554 L945.066 684.554 L945.625 684.554 L946.184 684.554 L946.743 684.554 L947.303 684.554 L947.862 684.554 L948.421 684.554 L948.98 684.554 L949.54 684.554 L950.099 684.554 L950.658 684.554 L951.217 684.554 L951.777 684.554 L952.336 684.554 L952.895 684.554 L953.454 684.554 L954.014 684.554 L954.573 684.554 L955.132 684.554 L955.691 684.554 L956.251 684.554 L956.81 684.554 L957.369 684.554 L957.928 684.554 L958.488 684.554 L959.047 684.554 L959.606 684.554 L960.165 684.554 L960.725 684.554 L961.284 684.554 L961.843 684.554 L962.402 684.554 L962.962 684.554 L963.521 684.554 L964.08 684.554 L964.639 684.554 L965.199 684.554 L965.758 684.554 L966.317 684.554 L966.876 684.554 L967.436 684.554 L967.995 684.554 L968.554 684.554 L969.113 684.554 L969.673 684.554 L970.232 684.554 L970.791 684.554 L971.35 684.554 L971.91 684.554 L972.469 684.554 L973.028 684.554 L973.587 684.554 L974.147 684.554 L974.706 684.554 L975.265 684.554 L975.824 684.554 L976.384 684.554 L976.943 684.554 L977.502 684.554 L978.061 684.554 L978.621 684.554 L979.18 684.554 L979.739 684.554 L980.298 684.554 L980.858 684.554 L981.417 684.554 L981.976 684.554 L982.535 684.554 L983.095 684.554 L983.654 684.554 L984.213 684.554 L984.772 684.554 L985.332 684.554 L985.891 684.554 L986.45 684.554 L987.009 684.554 L987.569 684.554 L988.128 684.554 L988.687 684.554 L989.246 684.554 L989.806 684.554 L990.365 684.554 L990.924 684.554 L991.483 684.554 L992.043 684.554 L992.602 684.554 L993.161 684.554 L993.72 684.554 L994.28 684.554 L994.839 684.554 L995.398 684.554 L995.957 684.554 L996.517 684.554 L997.076 684.554 L997.635 684.554 L998.194 684.554 L998.754 684.554 L999.313 684.554 L999.872 684.554 L1000.43 684.554 L1000.99 684.554 L1001.55 684.554 L1002.11 684.554 L1002.67 684.554 L1003.23 684.554 L1003.79 684.554 L1004.35 684.554 L1004.91 684.554 L1005.46 684.554 L1006.02 684.554 L1006.58 684.554 L1007.14 684.554 L1007.7 684.554 L1008.26 684.554 L1008.82 684.554 L1009.38 684.554 L1009.94 684.554 L1010.5 684.554 L1011.06 684.554 L1011.62 684.554 L1012.18 684.554 L1012.73 684.554 L1013.29 684.554 L1013.85 684.554 L1014.41 684.554 L1014.97 684.554 L1015.53 684.554 L1016.09 684.554 L1016.65 684.554 L1017.21 684.554 L1017.77 684.554 L1018.33 684.554 L1018.89 684.554 L1019.45 684.554 L1020.01 684.554 L1020.56 684.554 L1021.12 684.554 L1021.68 684.554 L1022.24 684.554 L1022.8 684.554 L1023.36 684.554 L1023.92 684.554 L1024.48 684.554 L1025.04 684.554 L1025.6 684.554 L1026.16 684.554 L1026.72 684.554 L1027.28 684.554 L1027.83 684.554 L1028.39 684.554 L1028.95 684.554 L1029.51 684.554 L1030.07 684.554 L1030.63 684.554 L1031.19 684.554 L1031.75 684.554 L1032.31 684.554 L1032.87 684.554 L1033.43 684.554 L1033.99 684.554 L1034.55 684.554 L1035.1 684.554 L1035.66 684.554 L1036.22 684.554 L1036.78 684.554 L1037.34 684.554 L1037.9 684.554 L1038.46 684.554 L1039.02 684.554 L1039.58 684.554 L1040.14 684.554 L1040.7 684.554 L1041.26 684.554 L1041.82 684.554 L1042.38 684.554 L1042.93 684.554 L1043.49 684.554 L1044.05 684.554 L1044.61 684.554 L1045.17 684.554 L1045.73 684.554 L1046.29 684.554 L1046.85 684.554 L1047.41 684.554 L1047.97 684.554 L1048.53 684.554 L1049.09 684.554 L1049.65 684.554 L1050.2 684.554 L1050.76 684.554 L1051.32 684.554 L1051.88 684.554 L1052.44 684.554 L1053 684.554 L1053.56 684.554 L1054.12 684.554 L1054.68 684.554 L1055.24 684.554 L1055.8 684.554 L1056.36 684.554 L1056.92 684.554 L1057.48 684.554 L1058.03 684.554 L1058.59 684.554 L1059.15 684.554 L1059.71 684.554 L1060.27 684.554 L1060.83 684.554 L1061.39 684.554 L1061.95 684.554 L1062.51 684.554 L1063.07 684.554 L1063.63 684.554 L1064.19 684.554 L1064.75 684.554 L1065.3 684.554 L1065.86 684.554 L1066.42 684.554 L1066.98 684.554 L1067.54 684.554 L1068.1 684.554 L1068.66 684.554 L1069.22 684.554 L1069.78 684.554 L1070.34 684.554 L1070.9 684.554 L1071.46 684.554 L1072.02 684.554 L1072.57 684.554 L1073.13 684.554 L1073.69 684.554 L1074.25 684.554 L1074.81 684.554 L1075.37 684.554 L1075.93 684.554 L1076.49 684.554 L1077.05 684.554 L1077.61 684.554 L1078.17 684.554 L1078.73 684.554 L1079.29 684.554 L1079.85 684.554 L1080.4 684.554 L1080.96 684.554 L1081.52 684.554 L1082.08 684.554 L1082.64 684.554 L1083.2 684.554 L1083.76 684.554 L1084.32 684.554 L1084.88 684.554 L1085.44 684.554 L1086 684.554 L1086.56 684.554 L1087.12 684.554 L1087.67 684.554 L1088.23 684.554 L1088.79 684.554 L1089.35 684.554 L1089.91 684.554 L1090.47 684.554 L1091.03 684.554 L1091.59 684.554 L1092.15 684.554 L1092.71 684.554 L1093.27 684.554 L1093.83 684.554 L1094.39 684.554 L1094.94 684.554 L1095.5 684.554 L1096.06 684.554 L1096.62 684.554 L1097.18 684.554 L1097.74 684.554 L1098.3 684.554 L1098.86 684.554 L1099.42 684.554 L1099.98 684.554 L1100.54 684.554 L1101.1 684.554 L1101.66 684.554 L1102.22 684.554 L1102.77 684.554 L1103.33 684.554 L1103.89 684.554 L1104.45 684.554 L1105.01 684.554 L1105.57 684.554 L1106.13 684.554 L1106.69 684.554 L1107.25 684.554 L1107.81 684.554 L1108.37 684.554 L1108.93 684.554 L1109.49 684.554 L1110.04 684.554 L1110.6 684.554 L1111.16 684.554 L1111.72 684.554 L1112.28 684.554 L1112.84 684.554 L1113.4 684.554 L1113.96 684.554 L1114.52 684.554 L1115.08 684.554 L1115.64 684.554 L1116.2 684.554 L1116.76 684.554 L1117.31 684.554 L1117.87 684.554 L1118.43 684.554 L1118.99 684.554 L1119.55 684.554 L1120.11 684.554 L1120.67 684.554 L1121.23 684.554 L1121.79 684.554 L1122.35 684.554 L1122.91 684.554 L1123.47 684.554 L1124.03 684.554 L1124.59 684.554 L1125.14 684.554 L1125.7 684.554 L1126.26 684.554 L1126.82 684.554 L1127.38 684.554 L1127.94 684.554 L1128.5 684.554 L1129.06 684.554 L1129.62 684.554 L1130.18 684.554 L1130.74 684.554 L1131.3 684.554 L1131.86 684.554 L1132.41 684.554 L1132.97 684.554 L1133.53 684.554 L1134.09 684.554 L1134.65 684.554 L1135.21 684.554 L1135.77 684.554 L1136.33 684.554 L1136.89 684.554 L1137.45 684.554 L1138.01 684.554 L1138.57 684.554 L1139.13 684.554 L1139.68 684.554 L1140.24 684.554 L1140.8 684.554 L1141.36 684.554 L1141.92 684.554 L1142.48 684.554 L1143.04 684.554 L1143.6 684.554 L1144.16 684.554 L1144.72 684.554 L1145.28 684.554 L1145.84 684.554 L1146.4 684.554 L1146.96 684.554 L1147.51 684.554 L1148.07 684.554 L1148.63 684.554 L1149.19 684.554 L1149.75 684.554 L1150.31 684.554 L1150.87 684.554 L1151.43 684.554 L1151.99 684.554 L1152.55 684.554 L1153.11 684.554 L1153.67 684.554 L1154.23 684.554 L1154.78 684.554 L1155.34 684.554 L1155.9 684.554 L1156.46 684.554 L1157.02 684.554 L1157.58 684.554 L1158.14 684.554 L1158.7 684.554 L1159.26 684.554 L1159.82 684.554 L1160.38 684.554 L1160.94 684.554 L1161.5 684.554 L1162.05 684.554 L1162.61 684.554 L1163.17 684.554 L1163.73 684.554 L1164.29 684.554 L1164.85 684.554 L1165.41 684.554 L1165.97 684.554 L1166.53 684.554 L1167.09 684.554 L1167.65 684.554 L1168.21 684.554 L1168.77 684.554 L1169.33 684.554 L1169.88 684.554 L1170.44 684.554 L1171 684.554 L1171.56 684.554 L1172.12 684.554 L1172.68 684.554 L1173.24 684.554 L1173.8 684.554 L1174.36 684.554 L1174.92 684.554 L1175.48 684.554 L1176.04 684.554 L1176.6 684.554 L1177.15 684.554 L1177.71 684.554 L1178.27 684.554 L1178.83 684.554 L1179.39 684.554 L1179.95 684.554 L1180.51 684.554 L1181.07 684.554 L1181.63 684.554 L1182.19 684.554 L1182.75 684.554 L1183.31 684.554 L1183.87 684.554 L1184.43 684.554 L1184.98 684.554 L1185.54 684.554 L1186.1 684.554 L1186.66 684.554 L1187.22 684.554 L1187.78 684.554 L1188.34 684.554 L1188.9 684.554 L1189.46 684.554 L1190.02 684.554 L1190.58 684.554 L1191.14 684.554 L1191.7 684.554 L1192.25 684.554 L1192.81 684.554 L1193.37 684.554 L1193.93 684.554 L1194.49 684.554 L1195.05 684.554 L1195.61 684.554 L1196.17 684.554 L1196.73 684.554 L1197.29 684.554 L1197.85 684.554 L1198.41 684.554 L1198.97 684.554 L1199.52 684.554 L1200.08 684.554 L1200.64 684.554 L1201.2 684.554 L1201.76 684.554 L1202.32 684.554 L1202.88 684.554 L1203.44 684.554 L1204 684.554 L1204.56 684.554 L1205.12 684.554 L1205.68 684.554 L1206.24 684.554 L1206.8 684.554 L1207.35 684.554 L1207.91 684.554 L1208.47 684.554 L1209.03 684.554 L1209.59 684.554 L1210.15 684.554 L1210.71 684.554 L1211.27 684.554 L1211.83 684.554 L1212.39 684.554 L1212.95 684.554 L1213.51 684.554 L1214.07 684.554 L1214.62 684.554 L1215.18 684.554 L1215.74 684.554 L1216.3 684.554 L1216.86 684.554 L1217.42 684.554 L1217.98 684.554 L1218.54 684.554 L1219.1 684.554 L1219.66 684.554 L1220.22 684.554 L1220.78 684.554 L1221.34 684.554 L1221.89 684.554 L1222.45 684.554 L1223.01 684.554 L1223.57 684.554 L1224.13 684.554 L1224.69 684.554 L1225.25 684.554 L1225.81 684.554 L1226.37 684.554 L1226.93 684.554 L1227.49 684.554 L1228.05 684.554 L1228.61 684.554 L1229.17 684.554 L1229.72 684.554 L1230.28 684.554 L1230.84 684.554 L1231.4 684.554 L1231.96 684.554 L1232.52 684.554 L1233.08 684.554 L1233.64 684.554 L1234.2 684.554 L1234.76 684.554 L1235.32 684.554 L1235.88 684.554 L1236.44 684.554 L1236.99 684.554 L1237.55 684.554 L1238.11 684.554 L1238.67 684.554 L1239.23 684.554 L1239.79 684.554 L1240.35 684.554 L1240.91 684.554 L1241.47 684.554 L1242.03 684.554 L1242.59 684.554 L1243.15 684.554 L1243.71 684.554 L1244.26 684.554 L1244.82 684.554 L1245.38 684.554 L1245.94 684.554 L1246.5 684.554 L1247.06 684.554 L1247.62 684.554 L1248.18 684.554 L1248.74 684.554 L1249.3 684.554 L1249.86 684.554 L1250.42 684.554 L1250.98 684.554 L1251.54 684.554 L1252.09 684.554 L1252.65 684.554 L1253.21 684.554 L1253.77 684.554 L1254.33 684.554 L1254.89 684.554 L1255.45 684.554 L1256.01 684.554 L1256.57 684.554 L1257.13 684.554 L1257.69 684.554 L1258.25 684.554 L1258.81 684.554 L1259.36 684.554 L1259.92 684.554 L1260.48 684.554 L1261.04 684.554 L1261.6 684.554 L1262.16 684.554 L1262.72 684.554 L1263.28 684.554 L1263.84 684.554 L1264.4 684.554 L1264.96 684.554 L1265.52 684.554 L1266.08 684.554 L1266.63 684.554 L1267.19 684.554 L1267.75 684.554 L1268.31 684.554 L1268.87 684.554 L1269.43 684.554 L1269.99 684.554 L1270.55 684.554 L1271.11 684.554 L1271.67 684.554 L1272.23 684.554 L1272.79 684.554 L1273.35 684.554 L1273.91 684.554 L1274.46 684.554 L1275.02 684.554 L1275.58 684.554 L1276.14 684.554 L1276.7 684.554 L1277.26 684.554 L1277.82 684.554 L1278.38 684.554 L1278.94 684.554 L1279.5 684.554 L1280.06 684.554 L1280.62 684.554 L1281.18 684.554 L1281.73 684.554 L1282.29 684.554 L1282.85 684.554 L1283.41 684.554 L1283.97 684.554 L1284.53 684.554 L1285.09 684.554 L1285.65 684.554 L1286.21 684.554 L1286.77 684.554 L1287.33 684.554 L1287.89 684.554 L1288.45 684.554 L1289 684.554 L1289.56 684.554 L1290.12 684.554 L1290.68 684.554 L1291.24 684.554 L1291.8 684.554 L1292.36 684.554 L1292.92 684.554 L1293.48 684.554 L1294.04 684.554 L1294.6 684.554 L1295.16 684.554 L1295.72 684.554 L1296.28 684.554 L1296.83 684.554 L1297.39 684.554 L1297.95 684.554 L1298.51 684.554 L1299.07 684.554 L1299.63 684.554 L1300.19 684.554 L1300.75 684.554 L1301.31 684.554 L1301.87 684.554 L1302.43 684.554 L1302.99 684.554 L1303.55 684.554 L1304.1 684.554 L1304.66 684.554 L1305.22 684.554 L1305.78 684.554 L1306.34 684.554 L1306.9 684.554 L1307.46 684.554 L1308.02 684.554 L1308.58 684.554 L1309.14 684.554 L1309.7 684.554 L1310.26 684.554 L1310.82 684.554 L1311.38 684.554 L1311.93 684.554 L1312.49 684.554 L1313.05 684.554 L1313.61 684.554 L1314.17 684.554 L1314.73 684.554 L1315.29 684.554 L1315.85 684.554 L1316.41 684.554 L1316.97 684.554 L1317.53 684.554 L1318.09 684.554 L1318.65 684.554 L1319.2 684.554 L1319.76 684.554 L1320.32 684.554 L1320.88 684.554 L1321.44 684.554 L1322 684.554 L1322.56 684.554 L1323.12 684.554 L1323.68 684.554 L1324.24 684.554 L1324.8 684.554 L1325.36 684.554 L1325.92 684.554 L1326.47 684.554 L1327.03 684.554 L1327.59 684.554 L1328.15 684.554 L1328.71 684.554 L1329.27 684.554 L1329.83 684.554 L1330.39 684.554 L1330.95 684.554 L1331.51 684.554 L1332.07 684.554 L1332.63 684.554 L1333.19 684.554 L1333.75 684.554 L1334.3 684.554 L1334.86 684.554 L1335.42 684.554 L1335.98 684.554 L1336.54 684.554 L1337.1 684.554 L1337.66 684.554 L1338.22 684.554 L1338.78 684.554 L1339.34 684.554 L1339.9 684.554 L1340.46 684.554 L1341.02 684.554 L1341.57 684.554 L1342.13 684.554 L1342.69 684.554 L1343.25 684.554 L1343.81 684.554 L1344.37 684.554 L1344.93 684.554 L1345.49 684.554 L1346.05 684.554 L1346.61 684.554 L1347.17 684.554 L1347.73 684.554 L1348.29 684.554 L1348.84 684.554 L1349.4 684.554 L1349.96 684.554 L1350.52 684.554 L1351.08 684.554 L1351.64 684.554 L1352.2 684.554 L1352.76 684.554 L1353.32 684.554 L1353.88 684.554 L1354.44 684.554 L1355 684.554 L1355.56 684.554 L1356.12 684.554 L1356.67 684.554 L1357.23 684.554 L1357.79 684.554 L1358.35 684.554 L1358.91 684.554 L1359.47 684.554 L1360.03 684.554 L1360.59 684.554 L1361.15 684.554 L1361.71 684.554 L1362.27 684.554 L1362.83 684.554 L1363.39 684.554 L1363.94 684.554 L1364.5 684.554 L1365.06 684.554 L1365.62 684.554 L1366.18 684.554 L1366.74 684.554 L1367.3 684.554 L1367.86 684.554 L1368.42 684.554 L1368.98 684.554 L1369.54 684.554 L1370.1 684.554 L1370.66 684.554 L1371.21 684.554 L1371.77 684.554 L1372.33 684.554 L1372.89 684.554 L1373.45 684.554 L1374.01 684.554 L1374.57 684.554 L1375.13 684.554 L1375.69 684.554 L1376.25 684.554 L1376.81 684.554 L1377.37 684.554 L1377.93 684.554 L1378.49 684.554 L1379.04 684.554 L1379.6 684.554 L1380.16 684.554 L1380.72 684.554 L1381.28 684.554 L1381.84 684.554 L1382.4 684.554 L1382.96 684.554 L1383.52 684.554 L1384.08 684.554 L1384.64 684.554 L1385.2 684.554 L1385.76 684.554 L1386.31 684.554 L1386.87 684.554 L1387.43 684.554 L1387.99 684.554 L1388.55 684.554 L1389.11 684.554 L1389.67 684.554 L1390.23 684.554 L1390.79 684.554 L1391.35 684.554 L1391.91 684.554 L1392.47 684.554 L1393.03 684.554 L1393.58 684.554 L1394.14 684.554 L1394.7 684.554 L1395.26 684.554 L1395.82 684.554 L1396.38 684.554 L1396.94 684.554 L1397.5 684.554 L1398.06 684.554 L1398.62 684.554 L1399.18 684.554 L1399.74 684.554 L1400.3 684.554 L1400.86 684.554 L1401.41 684.554 L1401.97 684.554 L1402.53 684.554 L1403.09 684.554 L1403.65 684.554 L1404.21 684.554 L1404.77 684.554 L1405.33 684.554 L1405.89 684.554 L1406.45 684.554 L1407.01 684.554 L1407.57 684.554 L1408.13 684.554 L1408.68 684.554 L1409.24 684.554 L1409.8 684.554 L1410.36 684.554 L1410.92 684.554 L1411.48 684.554 L1412.04 684.554 L1412.6 684.554 L1413.16 684.554 L1413.72 684.554 L1414.28 684.554 L1414.84 684.554 L1415.4 684.554 L1415.95 684.554 L1416.51 684.554 L1417.07 684.554 L1417.63 684.554 L1418.19 684.554 L1418.75 684.554 L1419.31 684.554 L1419.87 684.554 L1420.43 684.554 L1420.99 684.554 L1421.55 684.554 L1422.11 684.554 L1422.67 684.554 L1423.23 684.554 L1423.78 684.554 L1424.34 684.554 L1424.9 684.554 L1425.46 684.554 L1426.02 684.554 L1426.58 684.554 L1427.14 684.554 L1427.7 684.554 L1428.26 684.554 L1428.82 684.554 L1429.38 684.554 L1429.94 684.554 L1430.5 684.554 L1431.05 684.554 L1431.61 684.554 L1432.17 684.554 L1432.73 684.554 L1433.29 684.554 L1433.85 684.554 L1434.41 684.554 L1434.97 684.554 L1435.53 684.554 L1436.09 684.554 L1436.65 684.554 L1437.21 684.554 L1437.77 684.554 L1438.33 684.554 L1438.88 684.554 L1439.44 684.554 L1440 684.554 L1440.56 684.554 L1441.12 684.554 L1441.68 684.554 L1442.24 684.554 L1442.8 684.554 L1443.36 684.554 L1443.92 684.554 L1444.48 684.554 L1445.04 684.554 L1445.6 684.554 L1446.15 684.554 L1446.71 684.554 L1447.27 684.554 L1447.83 684.554 L1448.39 684.554 L1448.95 684.554 L1449.51 684.554 L1450.07 684.554 L1450.63 684.554 L1451.19 684.554 L1451.75 684.554 L1452.31 684.554 L1452.87 684.554 L1453.42 684.554 L1453.98 684.554 L1454.54 684.554 L1455.1 684.554 L1455.66 684.554 L1456.22 684.554 L1456.78 684.554 L1457.34 684.554 L1457.9 684.554 L1458.46 684.554 L1459.02 684.554 L1459.58 684.554 L1460.14 684.554 L1460.7 684.554 L1461.25 684.554 L1461.81 684.554 L1462.37 684.554 L1462.93 684.554 L1463.49 684.554 L1464.05 684.554 L1464.61 684.554 L1465.17 684.554 L1465.73 684.554 L1466.29 684.554 L1466.85 684.554 L1467.41 684.554 L1467.97 684.554 L1468.52 684.554 L1469.08 684.554 L1469.64 684.554 L1470.2 684.554 L1470.76 684.554 L1471.32 684.554 L1471.88 684.554 L1472.44 684.554 L1473 684.554 L1473.56 684.554 L1474.12 684.554 L1474.68 684.554 L1475.24 684.554 L1475.79 684.554 L1476.35 684.554 L1476.91 684.554 L1477.47 684.554 L1478.03 684.554 L1478.59 684.554 L1479.15 684.554 L1479.71 684.554 L1480.27 684.554 L1480.83 684.554 L1481.39 684.554 L1481.95 684.554 L1482.51 684.554 L1483.07 684.554 L1483.62 684.554 L1484.18 684.554 L1484.74 684.554 L1485.3 684.554 L1485.86 684.554 L1486.42 684.554 L1486.98 684.554 L1487.54 684.554 L1488.1 684.554 L1488.66 684.554 L1489.22 684.554 L1489.78 684.554 L1490.34 684.554 L1490.89 684.554 L1491.45 684.554 L1492.01 684.554 L1492.57 684.554 L1493.13 684.554 L1493.69 684.554 L1494.25 684.554 L1494.81 684.554 L1495.37 684.554 L1495.93 684.554 L1496.49 684.554 L1497.05 684.554 L1497.61 684.554 L1498.16 684.554 L1498.72 684.554 L1499.28 684.554 L1499.84 684.554 L1500.4 684.554 L1500.96 684.554 L1501.52 684.554 L1502.08 684.554 L1502.64 684.554 L1503.2 684.554 L1503.76 684.554 L1504.32 684.554 L1504.88 684.554 L1505.44 684.554 L1505.99 684.554 L1506.55 684.554 L1507.11 684.554 L1507.67 684.554 L1508.23 684.554 L1508.79 684.554 L1509.35 684.554 L1509.91 684.554 L1510.47 684.554 L1511.03 684.554 L1511.59 684.554 L1512.15 684.554 L1512.71 684.554 L1513.26 684.554 L1513.82 684.554 L1514.38 684.554 L1514.94 684.554 L1515.5 684.554 L1516.06 684.554 L1516.62 684.554 L1517.18 684.554 L1517.74 684.554 L1518.3 684.554 L1518.86 684.554 L1519.42 684.554 L1519.98 684.554 L1520.53 684.554 L1521.09 684.554 L1521.65 684.554 L1522.21 684.554 L1522.77 684.554 L1523.33 684.554 L1523.89 684.554 L1524.45 684.554 L1525.01 684.554 L1525.57 684.554 L1526.13 684.554 L1526.69 684.554 L1527.25 684.554 L1527.81 684.554 L1528.36 684.554 L1528.92 684.554 L1529.48 684.554 L1530.04 684.554 L1530.6 684.554 L1531.16 684.554 L1531.72 684.554 L1532.28 684.554 L1532.84 684.554 L1533.4 684.554 L1533.96 684.554 L1534.52 684.554 L1535.08 684.554 L1535.63 684.554 L1536.19 684.554 L1536.75 684.554 L1537.31 684.554 L1537.87 684.554 L1538.43 684.554 L1538.99 684.554 L1539.55 684.554 L1540.11 684.554 L1540.67 684.554 L1541.23 684.554 L1541.79 684.554 L1542.35 684.554 L1542.9 684.554 L1543.46 684.554 L1544.02 684.554 L1544.58 684.554 L1545.14 684.554 L1545.7 684.554 L1546.26 684.554 L1546.82 684.554 L1547.38 684.554 L1547.94 684.554 L1548.5 684.554 L1549.06 684.554 L1549.62 684.554 L1550.18 684.554 L1550.73 684.554 L1551.29 684.554 L1551.85 684.554 L1552.41 684.554 L1552.97 684.554 L1553.53 684.554 L1554.09 684.554 L1554.65 684.554 L1555.21 684.554 L1555.77 684.554 L1556.33 684.554 L1556.89 684.554 L1557.45 684.554 L1558 684.554 L1558.56 684.554 L1559.12 684.554 L1559.68 684.554 L1560.24 684.554 L1560.8 684.554 L1561.36 684.554 L1561.92 684.554 L1562.48 684.554 L1563.04 684.554 L1563.6 684.554 L1564.16 684.554 L1564.72 684.554 L1565.28 684.554 L1565.83 684.554 L1566.39 684.554 L1566.95 684.554 L1567.51 684.554 L1568.07 684.554 L1568.63 684.554 L1569.19 684.554 L1569.75 684.554 L1570.31 684.554 L1570.87 684.554 L1571.43 684.554 L1571.99 684.554 L1572.55 684.554 L1573.1 684.554 L1573.66 684.554 L1574.22 684.554 L1574.78 684.554 L1575.34 684.554 L1575.9 684.554 L1576.46 684.554 L1577.02 684.554 L1577.58 684.554 L1578.14 684.554 L1578.7 684.554 L1579.26 684.554 L1579.82 684.554 L1580.37 684.554 L1580.93 684.554 L1581.49 684.554 L1582.05 684.554 L1582.61 684.554 L1583.17 684.554 L1583.73 684.554 L1584.29 684.554 L1584.85 684.554 L1585.41 684.554 L1585.97 684.554 L1586.53 684.554 L1587.09 684.554 L1587.65 684.554 L1588.2 684.554 L1588.76 684.554 L1589.32 684.554 L1589.88 684.554 L1590.44 684.554 L1591 684.554 L1591.56 684.554 L1592.12 684.554 L1592.68 684.554 L1593.24 684.554 L1593.8 684.554 L1594.36 684.554 L1594.92 684.554 L1595.47 684.554 L1596.03 684.554 L1596.59 684.554 L1597.15 684.554 L1597.71 684.554 L1598.27 684.554 L1598.83 684.554 L1599.39 684.554 L1599.95 684.554 L1600.51 684.554 L1601.07 684.554 L1601.63 684.554 L1602.19 684.554 L1602.74 684.554 L1603.3 684.554 L1603.86 684.554 L1604.42 684.554 L1604.98 684.554 L1605.54 684.554 L1606.1 684.554 L1606.66 684.554 L1607.22 684.554 L1607.78 684.554 L1608.34 684.554 L1608.9 684.554 L1609.46 684.554 L1610.02 684.554 L1610.57 684.554 L1611.13 684.554 L1611.69 684.554 L1612.25 684.554 L1612.81 684.554 L1613.37 684.554 L1613.93 684.554 L1614.49 684.554 L1615.05 684.554 L1615.61 684.554 L1616.17 684.554 L1616.73 684.554 L1617.29 684.554 L1617.84 684.554 L1618.4 684.554 L1618.96 684.554 L1619.52 684.554 L1620.08 684.554 L1620.64 684.554 L1621.2 684.554 L1621.76 684.554 L1622.32 684.554 L1622.88 684.554 L1623.44 684.554 L1624 684.554 L1624.56 684.554 L1625.11 684.554 L1625.67 684.554 L1626.23 684.554 L1626.79 684.554 L1627.35 684.554 L1627.91 684.554 L1628.47 684.554 L1629.03 684.554 L1629.59 684.554 L1630.15 684.554 L1630.71 684.554 L1631.27 684.554 L1631.83 684.554 L1632.39 684.554 L1632.94 684.554 L1633.5 684.554 L1634.06 684.554 L1634.62 684.554 L1635.18 684.554 L1635.74 684.554 L1636.3 684.554 L1636.86 684.554 L1637.42 684.554 L1637.98 684.554 L1638.54 684.554 L1639.1 684.554 L1639.66 684.554 L1640.21 684.554 L1640.77 684.554 L1641.33 684.554 L1641.89 684.554 L1642.45 684.554 L1643.01 684.554 L1643.57 684.554 L1644.13 684.554 L1644.69 684.554 L1645.25 684.554 L1645.81 684.554 L1646.37 684.554 L1646.93 684.554 L1647.48 684.554 L1648.04 684.554 L1648.6 684.554 L1649.16 684.554 L1649.72 684.554 L1650.28 684.554 L1650.84 684.554 L1651.4 684.554 L1651.96 684.554 L1652.52 684.554 L1653.08 684.554 L1653.64 684.554 L1654.2 684.554 L1654.76 684.554 L1655.31 684.554 L1655.87 684.554 L1656.43 684.554 L1656.99 684.554 L1657.55 684.554 L1658.11 684.554 L1658.67 684.554 L1659.23 684.554 L1659.79 684.554 L1660.35 684.554 L1660.91 684.554 L1661.47 684.554 L1662.03 684.554 L1662.58 684.554 L1663.14 684.554 L1663.7 684.554 L1664.26 684.554 L1664.82 684.554 L1665.38 684.554 L1665.94 684.554 L1666.5 684.554 L1667.06 684.554 L1667.62 684.554 L1668.18 684.554 L1668.74 684.554 L1669.3 684.554 L1669.85 684.554 L1670.41 684.554 L1670.97 684.554 L1671.53 684.554 L1672.09 684.554 L1672.65 684.554 L1673.21 684.554 L1673.77 684.554 L1674.33 684.554 L1674.89 684.554 L1675.45 684.554 L1676.01 684.554 L1676.57 684.554 L1677.13 684.554 L1677.68 684.554 L1678.24 684.554 L1678.8 684.554 L1679.36 684.554 L1679.92 684.554 L1680.48 684.554 L1681.04 684.554 L1681.6 684.554 L1682.16 684.554 L1682.72 684.554 L1683.28 684.554 L1683.84 684.554 L1684.4 684.554 L1684.95 684.554 L1685.51 684.554 L1686.07 684.554 L1686.63 684.554 L1687.19 684.554 L1687.75 684.554 L1688.31 684.554 L1688.87 684.554 L1689.43 684.554 L1689.99 684.554 L1690.55 684.554 L1691.11 684.554 L1691.67 684.554 L1692.23 684.554 L1692.78 684.554 L1693.34 684.554 L1693.9 684.554 L1694.46 684.554 L1695.02 684.554 L1695.58 684.554 L1696.14 684.554 L1696.7 684.554 L1697.26 684.554 L1697.82 684.554 L1698.38 684.554 L1698.94 684.554 L1699.5 684.554 L1700.05 684.554 L1700.61 684.554 L1701.17 684.554 L1701.73 684.554 L1702.29 684.554 L1702.85 684.554 L1703.41 684.554 L1703.97 684.554 L1704.53 684.554 L1705.09 684.554 L1705.65 684.554 L1706.21 684.554 L1706.77 684.554 L1707.32 684.554 L1707.88 684.554 L1708.44 684.554 L1709 684.554 L1709.56 684.554 L1710.12 684.554 L1710.68 684.554 L1711.24 684.554 L1711.8 684.554 L1712.36 684.554 L1712.92 684.554 L1713.48 684.554 L1714.04 684.554 L1714.6 684.554 L1715.15 684.554 L1715.71 684.554 L1716.27 684.554 L1716.83 684.554 L1717.39 684.554 L1717.95 684.554 L1718.51 684.554 L1719.07 684.554 L1719.63 684.554 L1720.19 684.554 L1720.75 684.554 L1721.31 684.554 L1721.87 684.554 L1722.42 684.554 L1722.98 684.554 L1723.54 684.554 L1724.1 684.554 L1724.66 684.554 L1725.22 684.554 L1725.78 684.554 L1726.34 684.554 L1726.9 684.554 L1727.46 684.554 L1728.02 684.554 L1728.58 684.554 L1729.14 684.554 L1729.69 684.554 L1730.25 684.554 L1730.81 684.554 L1731.37 684.554 L1731.93 684.554 L1732.49 684.554 L1733.05 684.554 L1733.61 684.554 L1734.17 684.554 L1734.73 684.554 L1735.29 684.554 L1735.85 684.554 L1736.41 684.554 L1736.97 684.554 L1737.52 684.554 L1738.08 684.554 L1738.64 684.554 L1739.2 684.554 L1739.76 684.554 L1740.32 684.554 L1740.88 684.554 L1741.44 684.554 L1742 684.554 L1742.56 684.554 L1743.12 684.554 L1743.68 684.554 L1744.24 684.554 L1744.79 684.554 L1745.35 684.554 L1745.91 684.554 L1746.47 684.554 L1747.03 684.554 L1747.59 684.554 L1748.15 684.554 L1748.71 684.554 L1749.27 684.554 L1749.83 684.554 L1750.39 684.554 L1750.95 684.554 L1751.51 684.554 L1752.06 684.554 L1752.62 684.554 L1753.18 684.554 L1753.74 684.554 L1754.3 684.554 L1754.86 684.554 L1755.42 684.554 L1755.98 684.554 L1756.54 684.554 L1757.1 684.554 L1757.66 684.554 L1758.22 684.554 L1758.78 684.554 L1759.34 684.554 L1759.89 684.554 L1760.45 684.554 L1761.01 684.554 L1761.57 684.554 L1762.13 684.554 L1762.69 684.554 L1763.25 684.554 L1763.81 684.554 L1764.37 684.554 L1764.93 684.554 L1765.49 684.554 L1766.05 684.554 L1766.61 684.554 L1767.16 684.554 L1767.72 684.554 L1768.28 684.554 L1768.84 684.554 L1769.4 684.554 L1769.96 684.554 L1770.52 684.554 L1771.08 684.554 L1771.64 684.554 L1772.2 684.554 L1772.76 684.554 L1773.32 684.554 L1773.88 684.554 L1774.43 684.554 L1774.99 684.554 L1775.55 684.554 L1776.11 684.554 L1776.67 684.554 L1777.23 684.554 L1777.79 684.554 L1778.35 684.554 L1778.91 684.554 L1779.47 684.554 L1780.03 684.554 L1780.59 684.554 L1781.15 684.554 L1781.71 684.554 L1782.26 684.554 L1782.82 684.554 L1783.38 684.554 L1783.94 684.554 L1784.5 684.554 L1785.06 684.554 L1785.62 684.554 L1786.18 684.554 L1786.74 684.554 L1787.3 684.554 L1787.86 684.554 L1788.42 684.554 L1788.98 684.554 L1789.53 684.554 L1790.09 684.554 L1790.65 684.554 L1791.21 684.554 L1791.77 684.554 L1792.33 684.554 L1792.89 684.554 L1793.45 684.554 L1794.01 684.554 L1794.57 684.554 L1795.13 684.554 L1795.69 684.554 L1796.25 684.554 L1796.8 684.554 L1797.36 684.554 L1797.92 684.554 L1798.48 684.554 L1799.04 684.554 L1799.6 684.554 L1800.16 684.554 L1800.72 684.554 L1801.28 684.554 L1801.84 684.554 L1802.4 684.554 L1802.96 684.554 L1803.52 684.554 L1804.08 684.554 L1804.63 684.554 L1805.19 684.554 L1805.75 684.554 L1806.31 684.554 L1806.87 684.554 L1807.43 684.554 L1807.99 684.554 L1808.55 684.554 L1809.11 684.554 L1809.67 684.554 L1810.23 684.554 L1810.79 684.554 L1811.35 684.554 L1811.9 684.554 L1812.46 684.554 L1813.02 684.554 L1813.58 684.554 L1814.14 684.554 L1814.7 684.554 L1815.26 684.554 L1815.82 684.554 L1816.38 684.554 L1816.94 684.554 L1817.5 684.554 L1818.06 684.554 L1818.62 684.554 L1819.18 684.554 L1819.73 684.554 L1820.29 684.554 L1820.85 684.554 L1821.41 684.554 L1821.97 684.554 L1822.53 684.554 L1823.09 684.554 L1823.65 684.554 L1824.21 684.554 L1824.77 684.554 L1825.33 684.554 L1825.89 684.554 L1826.45 684.554 L1827 684.554 L1827.56 684.554 L1828.12 684.554 L1828.68 684.554 L1829.24 684.554 L1829.8 684.554 L1830.36 684.554 L1830.92 684.554 L1831.48 684.554 L1832.04 684.554 L1832.6 684.554 L1833.16 684.554 L1833.72 684.554 L1834.27 684.554 L1834.83 684.554 L1835.39 684.554 L1835.95 684.554 L1836.51 684.554 L1837.07 684.554 L1837.63 684.554 L1838.19 684.554 L1838.19 682.847 L1837.63 682.847 L1837.07 682.847 L1836.51 682.847 L1835.95 682.847 L1835.39 682.847 L1834.83 682.847 L1834.27 682.847 L1833.72 682.847 L1833.16 682.847 L1832.6 682.847 L1832.04 682.847 L1831.48 682.847 L1830.92 682.847 L1830.36 682.847 L1829.8 682.847 L1829.24 682.847 L1828.68 682.847 L1828.12 682.847 L1827.56 682.847 L1827 682.847 L1826.45 682.847 L1825.89 682.847 L1825.33 682.847 L1824.77 682.847 L1824.21 682.847 L1823.65 682.847 L1823.09 682.847 L1822.53 682.847 L1821.97 682.847 L1821.41 682.847 L1820.85 682.847 L1820.29 682.847 L1819.73 682.847 L1819.18 682.847 L1818.62 682.847 L1818.06 682.847 L1817.5 682.847 L1816.94 682.847 L1816.38 682.847 L1815.82 682.847 L1815.26 682.847 L1814.7 682.847 L1814.14 682.847 L1813.58 682.847 L1813.02 682.847 L1812.46 682.847 L1811.9 682.847 L1811.35 682.847 L1810.79 682.847 L1810.23 682.847 L1809.67 682.847 L1809.11 682.847 L1808.55 682.847 L1807.99 682.847 L1807.43 682.847 L1806.87 682.847 L1806.31 682.847 L1805.75 682.847 L1805.19 682.847 L1804.63 682.847 L1804.08 682.847 L1803.52 682.847 L1802.96 682.847 L1802.4 682.847 L1801.84 682.847 L1801.28 682.847 L1800.72 682.847 L1800.16 682.847 L1799.6 682.847 L1799.04 682.847 L1798.48 682.847 L1797.92 682.847 L1797.36 682.847 L1796.8 682.847 L1796.25 682.847 L1795.69 682.847 L1795.13 682.847 L1794.57 682.847 L1794.01 682.847 L1793.45 682.847 L1792.89 682.847 L1792.33 682.847 L1791.77 682.847 L1791.21 682.847 L1790.65 682.847 L1790.09 682.847 L1789.53 682.847 L1788.98 682.847 L1788.42 682.847 L1787.86 682.847 L1787.3 682.847 L1786.74 682.847 L1786.18 682.847 L1785.62 682.847 L1785.06 682.847 L1784.5 682.847 L1783.94 682.847 L1783.38 682.847 L1782.82 682.847 L1782.26 682.847 L1781.71 682.847 L1781.15 682.847 L1780.59 682.847 L1780.03 682.847 L1779.47 682.847 L1778.91 682.847 L1778.35 682.847 L1777.79 682.847 L1777.23 682.847 L1776.67 682.847 L1776.11 682.847 L1775.55 682.847 L1774.99 682.847 L1774.43 682.847 L1773.88 682.847 L1773.32 682.847 L1772.76 682.847 L1772.2 682.847 L1771.64 682.847 L1771.08 682.847 L1770.52 682.847 L1769.96 682.847 L1769.4 682.847 L1768.84 682.847 L1768.28 682.847 L1767.72 682.847 L1767.16 682.847 L1766.61 682.847 L1766.05 682.847 L1765.49 682.847 L1764.93 682.847 L1764.37 682.847 L1763.81 682.847 L1763.25 682.847 L1762.69 682.847 L1762.13 682.847 L1761.57 682.847 L1761.01 682.847 L1760.45 682.847 L1759.89 682.847 L1759.34 682.847 L1758.78 682.847 L1758.22 682.847 L1757.66 682.847 L1757.1 682.847 L1756.54 682.847 L1755.98 682.847 L1755.42 682.847 L1754.86 682.847 L1754.3 682.847 L1753.74 682.847 L1753.18 682.847 L1752.62 682.847 L1752.06 682.847 L1751.51 682.847 L1750.95 682.847 L1750.39 682.847 L1749.83 682.847 L1749.27 682.847 L1748.71 682.847 L1748.15 682.847 L1747.59 682.847 L1747.03 682.847 L1746.47 682.847 L1745.91 682.847 L1745.35 682.847 L1744.79 682.847 L1744.24 682.847 L1743.68 682.847 L1743.12 682.847 L1742.56 682.847 L1742 682.847 L1741.44 682.847 L1740.88 682.847 L1740.32 682.847 L1739.76 682.847 L1739.2 682.847 L1738.64 682.847 L1738.08 682.847 L1737.52 682.847 L1736.97 682.847 L1736.41 682.847 L1735.85 682.847 L1735.29 682.847 L1734.73 682.847 L1734.17 682.847 L1733.61 682.847 L1733.05 682.847 L1732.49 682.847 L1731.93 682.847 L1731.37 682.847 L1730.81 682.847 L1730.25 682.847 L1729.69 682.847 L1729.14 682.847 L1728.58 682.847 L1728.02 682.847 L1727.46 682.847 L1726.9 682.847 L1726.34 682.847 L1725.78 682.847 L1725.22 682.847 L1724.66 682.847 L1724.1 682.847 L1723.54 682.847 L1722.98 682.847 L1722.42 682.847 L1721.87 682.847 L1721.31 682.847 L1720.75 682.847 L1720.19 682.847 L1719.63 682.847 L1719.07 682.847 L1718.51 682.847 L1717.95 682.847 L1717.39 682.847 L1716.83 682.847 L1716.27 682.847 L1715.71 682.847 L1715.15 682.847 L1714.6 682.847 L1714.04 682.847 L1713.48 682.847 L1712.92 682.847 L1712.36 682.847 L1711.8 682.847 L1711.24 682.847 L1710.68 682.847 L1710.12 682.847 L1709.56 682.847 L1709 682.847 L1708.44 682.847 L1707.88 682.847 L1707.32 682.847 L1706.77 682.847 L1706.21 682.847 L1705.65 682.847 L1705.09 682.847 L1704.53 682.847 L1703.97 682.847 L1703.41 682.847 L1702.85 682.847 L1702.29 682.847 L1701.73 682.847 L1701.17 682.847 L1700.61 682.847 L1700.05 682.847 L1699.5 682.847 L1698.94 682.847 L1698.38 682.847 L1697.82 682.847 L1697.26 682.847 L1696.7 682.847 L1696.14 682.847 L1695.58 682.847 L1695.02 682.847 L1694.46 682.847 L1693.9 682.847 L1693.34 682.847 L1692.78 682.847 L1692.23 682.847 L1691.67 682.847 L1691.11 682.847 L1690.55 682.847 L1689.99 682.847 L1689.43 682.847 L1688.87 682.847 L1688.31 682.847 L1687.75 682.847 L1687.19 682.847 L1686.63 682.847 L1686.07 682.847 L1685.51 682.847 L1684.95 682.847 L1684.4 682.847 L1683.84 682.847 L1683.28 682.847 L1682.72 682.847 L1682.16 682.847 L1681.6 682.847 L1681.04 682.847 L1680.48 682.847 L1679.92 682.847 L1679.36 682.847 L1678.8 682.847 L1678.24 682.847 L1677.68 682.847 L1677.13 682.847 L1676.57 682.847 L1676.01 682.847 L1675.45 682.847 L1674.89 682.847 L1674.33 682.847 L1673.77 682.847 L1673.21 682.847 L1672.65 682.847 L1672.09 682.847 L1671.53 682.847 L1670.97 682.847 L1670.41 682.847 L1669.85 682.847 L1669.3 682.847 L1668.74 682.847 L1668.18 682.847 L1667.62 682.847 L1667.06 682.847 L1666.5 682.847 L1665.94 682.847 L1665.38 682.847 L1664.82 682.847 L1664.26 682.847 L1663.7 682.847 L1663.14 682.847 L1662.58 682.847 L1662.03 682.847 L1661.47 682.847 L1660.91 682.847 L1660.35 682.847 L1659.79 682.847 L1659.23 682.847 L1658.67 682.847 L1658.11 682.847 L1657.55 682.847 L1656.99 682.847 L1656.43 682.847 L1655.87 682.847 L1655.31 682.847 L1654.76 682.847 L1654.2 682.847 L1653.64 682.847 L1653.08 682.847 L1652.52 682.847 L1651.96 682.847 L1651.4 682.847 L1650.84 682.847 L1650.28 682.847 L1649.72 682.847 L1649.16 682.847 L1648.6 682.847 L1648.04 682.847 L1647.48 682.847 L1646.93 682.847 L1646.37 682.847 L1645.81 682.847 L1645.25 682.847 L1644.69 682.847 L1644.13 682.847 L1643.57 682.847 L1643.01 682.847 L1642.45 682.847 L1641.89 682.847 L1641.33 682.847 L1640.77 682.847 L1640.21 682.847 L1639.66 682.847 L1639.1 682.847 L1638.54 682.847 L1637.98 682.847 L1637.42 682.847 L1636.86 682.847 L1636.3 682.847 L1635.74 682.847 L1635.18 682.847 L1634.62 682.847 L1634.06 682.847 L1633.5 682.847 L1632.94 682.847 L1632.39 682.847 L1631.83 682.847 L1631.27 682.847 L1630.71 682.847 L1630.15 682.847 L1629.59 682.847 L1629.03 682.847 L1628.47 682.847 L1627.91 682.847 L1627.35 682.847 L1626.79 682.847 L1626.23 682.847 L1625.67 682.847 L1625.11 682.847 L1624.56 682.847 L1624 682.847 L1623.44 682.847 L1622.88 682.847 L1622.32 682.847 L1621.76 682.847 L1621.2 682.847 L1620.64 682.847 L1620.08 682.847 L1619.52 682.847 L1618.96 682.847 L1618.4 682.847 L1617.84 682.847 L1617.29 682.847 L1616.73 682.847 L1616.17 682.847 L1615.61 682.847 L1615.05 682.847 L1614.49 682.847 L1613.93 682.847 L1613.37 682.847 L1612.81 682.847 L1612.25 682.847 L1611.69 682.847 L1611.13 682.847 L1610.57 682.847 L1610.02 682.847 L1609.46 682.847 L1608.9 682.847 L1608.34 682.847 L1607.78 682.847 L1607.22 682.847 L1606.66 682.847 L1606.1 682.847 L1605.54 682.847 L1604.98 682.847 L1604.42 682.847 L1603.86 682.847 L1603.3 682.847 L1602.74 682.847 L1602.19 682.847 L1601.63 682.847 L1601.07 682.847 L1600.51 682.847 L1599.95 682.847 L1599.39 682.847 L1598.83 682.847 L1598.27 682.847 L1597.71 682.847 L1597.15 682.847 L1596.59 682.847 L1596.03 682.847 L1595.47 682.847 L1594.92 682.847 L1594.36 682.847 L1593.8 682.847 L1593.24 682.847 L1592.68 682.847 L1592.12 682.847 L1591.56 682.847 L1591 682.847 L1590.44 682.847 L1589.88 682.847 L1589.32 682.847 L1588.76 682.847 L1588.2 682.847 L1587.65 682.847 L1587.09 682.847 L1586.53 682.847 L1585.97 682.847 L1585.41 682.847 L1584.85 682.847 L1584.29 682.847 L1583.73 682.847 L1583.17 682.847 L1582.61 682.847 L1582.05 682.847 L1581.49 682.847 L1580.93 682.847 L1580.37 682.847 L1579.82 682.847 L1579.26 682.847 L1578.7 682.847 L1578.14 682.847 L1577.58 682.847 L1577.02 682.847 L1576.46 682.847 L1575.9 682.847 L1575.34 682.847 L1574.78 682.847 L1574.22 682.847 L1573.66 682.847 L1573.1 682.847 L1572.55 682.847 L1571.99 682.847 L1571.43 682.847 L1570.87 682.847 L1570.31 682.847 L1569.75 682.847 L1569.19 682.847 L1568.63 682.847 L1568.07 682.847 L1567.51 682.847 L1566.95 682.847 L1566.39 682.847 L1565.83 682.847 L1565.28 682.847 L1564.72 682.847 L1564.16 682.847 L1563.6 682.847 L1563.04 682.847 L1562.48 682.847 L1561.92 682.847 L1561.36 682.847 L1560.8 682.847 L1560.24 682.847 L1559.68 682.847 L1559.12 682.847 L1558.56 682.847 L1558 682.847 L1557.45 682.847 L1556.89 682.847 L1556.33 682.847 L1555.77 682.847 L1555.21 682.847 L1554.65 682.847 L1554.09 682.847 L1553.53 682.847 L1552.97 682.847 L1552.41 682.847 L1551.85 682.847 L1551.29 682.847 L1550.73 682.847 L1550.18 682.847 L1549.62 682.847 L1549.06 682.847 L1548.5 682.847 L1547.94 682.847 L1547.38 682.847 L1546.82 682.847 L1546.26 682.847 L1545.7 682.847 L1545.14 682.847 L1544.58 682.847 L1544.02 682.847 L1543.46 682.847 L1542.9 682.847 L1542.35 682.847 L1541.79 682.847 L1541.23 682.847 L1540.67 682.847 L1540.11 682.847 L1539.55 682.847 L1538.99 682.847 L1538.43 682.847 L1537.87 682.847 L1537.31 682.847 L1536.75 682.847 L1536.19 682.847 L1535.63 682.847 L1535.08 682.847 L1534.52 682.847 L1533.96 682.847 L1533.4 682.847 L1532.84 682.847 L1532.28 682.847 L1531.72 682.847 L1531.16 682.847 L1530.6 682.847 L1530.04 682.847 L1529.48 682.847 L1528.92 682.847 L1528.36 682.847 L1527.81 682.847 L1527.25 682.847 L1526.69 682.847 L1526.13 682.847 L1525.57 682.847 L1525.01 682.847 L1524.45 682.847 L1523.89 682.847 L1523.33 682.847 L1522.77 682.847 L1522.21 682.847 L1521.65 682.847 L1521.09 682.847 L1520.53 682.847 L1519.98 682.847 L1519.42 682.847 L1518.86 682.847 L1518.3 682.847 L1517.74 682.847 L1517.18 682.847 L1516.62 682.847 L1516.06 682.847 L1515.5 682.847 L1514.94 682.847 L1514.38 682.847 L1513.82 682.847 L1513.26 682.847 L1512.71 682.847 L1512.15 682.847 L1511.59 682.847 L1511.03 682.847 L1510.47 682.847 L1509.91 682.847 L1509.35 682.847 L1508.79 682.847 L1508.23 682.847 L1507.67 682.847 L1507.11 682.847 L1506.55 682.847 L1505.99 682.847 L1505.44 682.847 L1504.88 682.847 L1504.32 682.847 L1503.76 682.847 L1503.2 682.847 L1502.64 682.847 L1502.08 682.847 L1501.52 682.847 L1500.96 682.847 L1500.4 682.847 L1499.84 682.847 L1499.28 682.847 L1498.72 682.847 L1498.16 682.847 L1497.61 682.847 L1497.05 682.847 L1496.49 682.847 L1495.93 682.847 L1495.37 682.847 L1494.81 682.847 L1494.25 682.847 L1493.69 682.847 L1493.13 682.847 L1492.57 682.847 L1492.01 682.847 L1491.45 682.847 L1490.89 682.847 L1490.34 682.847 L1489.78 682.847 L1489.22 682.847 L1488.66 682.847 L1488.1 682.847 L1487.54 682.847 L1486.98 682.847 L1486.42 682.847 L1485.86 682.847 L1485.3 682.847 L1484.74 682.847 L1484.18 682.847 L1483.62 682.847 L1483.07 682.847 L1482.51 682.847 L1481.95 682.847 L1481.39 682.847 L1480.83 682.847 L1480.27 682.847 L1479.71 682.847 L1479.15 682.847 L1478.59 682.847 L1478.03 682.847 L1477.47 682.847 L1476.91 682.847 L1476.35 682.847 L1475.79 682.847 L1475.24 682.847 L1474.68 682.847 L1474.12 682.847 L1473.56 682.847 L1473 682.847 L1472.44 682.847 L1471.88 682.847 L1471.32 682.847 L1470.76 682.847 L1470.2 682.847 L1469.64 682.847 L1469.08 682.847 L1468.52 682.847 L1467.97 682.847 L1467.41 682.847 L1466.85 682.847 L1466.29 682.847 L1465.73 682.847 L1465.17 682.847 L1464.61 682.847 L1464.05 682.847 L1463.49 682.847 L1462.93 682.847 L1462.37 682.847 L1461.81 682.847 L1461.25 682.847 L1460.7 682.847 L1460.14 682.847 L1459.58 682.847 L1459.02 682.847 L1458.46 682.847 L1457.9 682.847 L1457.34 682.847 L1456.78 682.847 L1456.22 682.847 L1455.66 682.847 L1455.1 682.847 L1454.54 682.847 L1453.98 682.847 L1453.42 682.847 L1452.87 682.847 L1452.31 682.847 L1451.75 682.847 L1451.19 682.847 L1450.63 682.847 L1450.07 682.847 L1449.51 682.847 L1448.95 682.847 L1448.39 682.847 L1447.83 682.847 L1447.27 682.847 L1446.71 682.847 L1446.15 682.847 L1445.6 682.847 L1445.04 682.847 L1444.48 682.847 L1443.92 682.847 L1443.36 682.847 L1442.8 682.847 L1442.24 682.847 L1441.68 682.847 L1441.12 682.847 L1440.56 682.847 L1440 682.847 L1439.44 682.847 L1438.88 682.847 L1438.33 682.847 L1437.77 682.847 L1437.21 682.847 L1436.65 682.847 L1436.09 682.847 L1435.53 682.847 L1434.97 682.847 L1434.41 682.847 L1433.85 682.847 L1433.29 682.847 L1432.73 682.847 L1432.17 682.847 L1431.61 682.847 L1431.05 682.847 L1430.5 682.847 L1429.94 682.847 L1429.38 682.847 L1428.82 682.847 L1428.26 682.847 L1427.7 682.847 L1427.14 682.847 L1426.58 682.847 L1426.02 682.847 L1425.46 682.847 L1424.9 682.847 L1424.34 682.847 L1423.78 682.847 L1423.23 682.847 L1422.67 682.847 L1422.11 682.847 L1421.55 682.847 L1420.99 682.847 L1420.43 682.847 L1419.87 682.847 L1419.31 682.847 L1418.75 682.847 L1418.19 682.847 L1417.63 682.847 L1417.07 682.847 L1416.51 682.847 L1415.95 682.847 L1415.4 682.847 L1414.84 682.847 L1414.28 682.847 L1413.72 682.847 L1413.16 682.847 L1412.6 682.847 L1412.04 682.847 L1411.48 682.847 L1410.92 682.847 L1410.36 682.847 L1409.8 682.847 L1409.24 682.847 L1408.68 682.847 L1408.13 682.847 L1407.57 682.847 L1407.01 682.847 L1406.45 682.847 L1405.89 682.847 L1405.33 682.847 L1404.77 682.847 L1404.21 682.847 L1403.65 682.847 L1403.09 682.847 L1402.53 682.847 L1401.97 682.847 L1401.41 682.847 L1400.86 682.847 L1400.3 682.847 L1399.74 682.847 L1399.18 682.847 L1398.62 682.847 L1398.06 682.847 L1397.5 682.847 L1396.94 682.847 L1396.38 682.847 L1395.82 682.847 L1395.26 682.847 L1394.7 682.847 L1394.14 682.847 L1393.58 682.847 L1393.03 682.847 L1392.47 682.847 L1391.91 682.847 L1391.35 682.847 L1390.79 682.847 L1390.23 682.847 L1389.67 682.847 L1389.11 682.847 L1388.55 682.847 L1387.99 682.847 L1387.43 682.847 L1386.87 682.847 L1386.31 682.847 L1385.76 682.847 L1385.2 682.847 L1384.64 682.847 L1384.08 682.847 L1383.52 682.847 L1382.96 682.847 L1382.4 682.847 L1381.84 682.847 L1381.28 682.847 L1380.72 682.847 L1380.16 682.847 L1379.6 682.847 L1379.04 682.847 L1378.49 682.847 L1377.93 682.847 L1377.37 682.847 L1376.81 682.847 L1376.25 682.847 L1375.69 682.847 L1375.13 682.847 L1374.57 682.847 L1374.01 682.847 L1373.45 682.847 L1372.89 682.847 L1372.33 682.847 L1371.77 682.847 L1371.21 682.847 L1370.66 682.847 L1370.1 682.847 L1369.54 682.847 L1368.98 682.847 L1368.42 682.847 L1367.86 682.847 L1367.3 682.847 L1366.74 682.847 L1366.18 682.847 L1365.62 682.847 L1365.06 682.847 L1364.5 682.847 L1363.94 682.847 L1363.39 682.847 L1362.83 682.847 L1362.27 682.847 L1361.71 682.847 L1361.15 682.847 L1360.59 682.847 L1360.03 682.847 L1359.47 682.847 L1358.91 682.847 L1358.35 682.847 L1357.79 682.847 L1357.23 682.847 L1356.67 682.847 L1356.12 682.847 L1355.56 682.847 L1355 682.847 L1354.44 682.847 L1353.88 682.847 L1353.32 682.847 L1352.76 682.847 L1352.2 682.847 L1351.64 682.847 L1351.08 682.847 L1350.52 682.847 L1349.96 682.847 L1349.4 682.847 L1348.84 682.847 L1348.29 682.847 L1347.73 682.847 L1347.17 682.847 L1346.61 682.847 L1346.05 682.847 L1345.49 682.847 L1344.93 682.847 L1344.37 682.847 L1343.81 682.847 L1343.25 682.847 L1342.69 682.847 L1342.13 682.847 L1341.57 682.847 L1341.02 682.847 L1340.46 682.847 L1339.9 682.847 L1339.34 682.847 L1338.78 682.847 L1338.22 682.847 L1337.66 682.847 L1337.1 682.847 L1336.54 682.847 L1335.98 682.847 L1335.42 682.847 L1334.86 682.847 L1334.3 682.847 L1333.75 682.847 L1333.19 682.847 L1332.63 682.847 L1332.07 682.847 L1331.51 682.847 L1330.95 682.847 L1330.39 682.847 L1329.83 682.847 L1329.27 682.847 L1328.71 682.847 L1328.15 682.847 L1327.59 682.847 L1327.03 682.847 L1326.47 682.847 L1325.92 682.847 L1325.36 682.847 L1324.8 682.847 L1324.24 682.847 L1323.68 682.847 L1323.12 682.847 L1322.56 682.847 L1322 682.847 L1321.44 682.847 L1320.88 682.847 L1320.32 682.847 L1319.76 682.847 L1319.2 682.847 L1318.65 682.847 L1318.09 682.847 L1317.53 682.847 L1316.97 682.847 L1316.41 682.847 L1315.85 682.847 L1315.29 682.847 L1314.73 682.847 L1314.17 682.847 L1313.61 682.847 L1313.05 682.847 L1312.49 682.847 L1311.93 682.847 L1311.38 682.847 L1310.82 682.847 L1310.26 682.847 L1309.7 682.847 L1309.14 682.847 L1308.58 682.847 L1308.02 682.847 L1307.46 682.847 L1306.9 682.847 L1306.34 682.847 L1305.78 682.847 L1305.22 682.847 L1304.66 682.847 L1304.1 682.847 L1303.55 682.847 L1302.99 682.847 L1302.43 682.847 L1301.87 682.847 L1301.31 682.847 L1300.75 682.847 L1300.19 682.847 L1299.63 682.847 L1299.07 682.847 L1298.51 682.847 L1297.95 682.847 L1297.39 682.847 L1296.83 682.847 L1296.28 682.847 L1295.72 682.847 L1295.16 682.847 L1294.6 682.847 L1294.04 682.847 L1293.48 682.847 L1292.92 682.847 L1292.36 682.847 L1291.8 682.847 L1291.24 682.847 L1290.68 682.847 L1290.12 682.847 L1289.56 682.847 L1289 682.847 L1288.45 682.847 L1287.89 682.847 L1287.33 682.847 L1286.77 682.847 L1286.21 682.847 L1285.65 682.847 L1285.09 682.847 L1284.53 682.847 L1283.97 682.847 L1283.41 682.847 L1282.85 682.847 L1282.29 682.847 L1281.73 682.847 L1281.18 682.847 L1280.62 682.847 L1280.06 682.847 L1279.5 682.847 L1278.94 682.847 L1278.38 682.847 L1277.82 682.847 L1277.26 682.847 L1276.7 682.847 L1276.14 682.847 L1275.58 682.847 L1275.02 682.847 L1274.46 682.847 L1273.91 682.847 L1273.35 682.847 L1272.79 682.847 L1272.23 682.847 L1271.67 682.847 L1271.11 682.847 L1270.55 682.847 L1269.99 682.847 L1269.43 682.847 L1268.87 682.847 L1268.31 682.847 L1267.75 682.847 L1267.19 682.847 L1266.63 682.847 L1266.08 682.847 L1265.52 682.847 L1264.96 682.847 L1264.4 682.847 L1263.84 682.847 L1263.28 682.847 L1262.72 682.847 L1262.16 682.847 L1261.6 682.847 L1261.04 682.847 L1260.48 682.847 L1259.92 682.847 L1259.36 682.847 L1258.81 682.847 L1258.25 682.847 L1257.69 682.847 L1257.13 682.847 L1256.57 682.847 L1256.01 682.847 L1255.45 682.847 L1254.89 682.847 L1254.33 682.847 L1253.77 682.847 L1253.21 682.847 L1252.65 682.847 L1252.09 682.847 L1251.54 682.847 L1250.98 682.847 L1250.42 682.847 L1249.86 682.847 L1249.3 682.847 L1248.74 682.847 L1248.18 682.847 L1247.62 682.847 L1247.06 682.847 L1246.5 682.847 L1245.94 682.847 L1245.38 682.847 L1244.82 682.847 L1244.26 682.847 L1243.71 682.847 L1243.15 682.847 L1242.59 682.847 L1242.03 682.847 L1241.47 682.847 L1240.91 682.847 L1240.35 682.847 L1239.79 682.847 L1239.23 682.847 L1238.67 682.847 L1238.11 682.847 L1237.55 682.847 L1236.99 682.847 L1236.44 682.847 L1235.88 682.847 L1235.32 682.847 L1234.76 682.847 L1234.2 682.847 L1233.64 682.847 L1233.08 682.847 L1232.52 682.847 L1231.96 682.847 L1231.4 682.847 L1230.84 682.847 L1230.28 682.847 L1229.72 682.847 L1229.17 682.847 L1228.61 682.847 L1228.05 682.847 L1227.49 682.847 L1226.93 682.847 L1226.37 682.847 L1225.81 682.847 L1225.25 682.847 L1224.69 682.847 L1224.13 682.847 L1223.57 682.847 L1223.01 682.847 L1222.45 682.847 L1221.89 682.847 L1221.34 682.847 L1220.78 682.847 L1220.22 682.847 L1219.66 682.847 L1219.1 682.847 L1218.54 682.847 L1217.98 682.847 L1217.42 682.847 L1216.86 682.847 L1216.3 682.847 L1215.74 682.847 L1215.18 682.847 L1214.62 682.847 L1214.07 682.847 L1213.51 682.847 L1212.95 682.847 L1212.39 682.847 L1211.83 682.847 L1211.27 682.847 L1210.71 682.847 L1210.15 682.847 L1209.59 682.847 L1209.03 682.847 L1208.47 682.847 L1207.91 682.847 L1207.35 682.847 L1206.8 682.847 L1206.24 682.847 L1205.68 682.847 L1205.12 682.847 L1204.56 682.847 L1204 682.847 L1203.44 682.847 L1202.88 682.847 L1202.32 682.847 L1201.76 682.847 L1201.2 682.847 L1200.64 682.847 L1200.08 682.847 L1199.52 682.847 L1198.97 682.847 L1198.41 682.847 L1197.85 682.847 L1197.29 682.847 L1196.73 682.847 L1196.17 682.847 L1195.61 682.847 L1195.05 682.847 L1194.49 682.847 L1193.93 682.847 L1193.37 682.847 L1192.81 682.847 L1192.25 682.847 L1191.7 682.847 L1191.14 682.847 L1190.58 682.847 L1190.02 682.847 L1189.46 682.847 L1188.9 682.847 L1188.34 682.847 L1187.78 682.847 L1187.22 682.847 L1186.66 682.847 L1186.1 682.847 L1185.54 682.847 L1184.98 682.847 L1184.43 682.847 L1183.87 682.847 L1183.31 682.847 L1182.75 682.847 L1182.19 682.847 L1181.63 682.847 L1181.07 682.847 L1180.51 682.847 L1179.95 682.847 L1179.39 682.847 L1178.83 682.847 L1178.27 682.847 L1177.71 682.847 L1177.15 682.847 L1176.6 682.847 L1176.04 682.847 L1175.48 682.847 L1174.92 682.847 L1174.36 682.847 L1173.8 682.847 L1173.24 682.847 L1172.68 682.847 L1172.12 682.847 L1171.56 682.847 L1171 682.847 L1170.44 682.847 L1169.88 682.847 L1169.33 682.847 L1168.77 682.847 L1168.21 682.847 L1167.65 682.847 L1167.09 682.847 L1166.53 682.847 L1165.97 682.847 L1165.41 682.847 L1164.85 682.847 L1164.29 682.847 L1163.73 682.847 L1163.17 682.847 L1162.61 682.847 L1162.05 682.847 L1161.5 682.847 L1160.94 682.847 L1160.38 682.847 L1159.82 682.847 L1159.26 682.847 L1158.7 682.847 L1158.14 682.847 L1157.58 682.847 L1157.02 682.847 L1156.46 682.847 L1155.9 682.847 L1155.34 682.847 L1154.78 682.847 L1154.23 682.847 L1153.67 682.847 L1153.11 682.847 L1152.55 682.847 L1151.99 682.847 L1151.43 682.847 L1150.87 682.847 L1150.31 682.847 L1149.75 682.847 L1149.19 682.847 L1148.63 682.847 L1148.07 682.847 L1147.51 682.847 L1146.96 682.847 L1146.4 682.847 L1145.84 682.847 L1145.28 682.847 L1144.72 682.847 L1144.16 682.847 L1143.6 682.847 L1143.04 682.847 L1142.48 682.847 L1141.92 682.847 L1141.36 682.847 L1140.8 682.847 L1140.24 682.847 L1139.68 682.847 L1139.13 682.847 L1138.57 682.847 L1138.01 682.847 L1137.45 682.847 L1136.89 682.847 L1136.33 682.847 L1135.77 682.847 L1135.21 682.847 L1134.65 682.847 L1134.09 682.847 L1133.53 682.847 L1132.97 682.847 L1132.41 682.847 L1131.86 682.847 L1131.3 682.847 L1130.74 682.847 L1130.18 682.847 L1129.62 682.847 L1129.06 682.847 L1128.5 682.847 L1127.94 682.847 L1127.38 682.847 L1126.82 682.847 L1126.26 682.847 L1125.7 682.847 L1125.14 682.847 L1124.59 682.847 L1124.03 682.847 L1123.47 682.847 L1122.91 682.847 L1122.35 682.847 L1121.79 682.847 L1121.23 682.847 L1120.67 682.847 L1120.11 682.847 L1119.55 682.847 L1118.99 682.847 L1118.43 682.847 L1117.87 682.847 L1117.31 682.847 L1116.76 682.847 L1116.2 682.847 L1115.64 682.847 L1115.08 682.847 L1114.52 682.847 L1113.96 682.847 L1113.4 682.847 L1112.84 682.847 L1112.28 682.847 L1111.72 682.847 L1111.16 682.847 L1110.6 682.847 L1110.04 682.847 L1109.49 682.847 L1108.93 682.847 L1108.37 682.847 L1107.81 682.847 L1107.25 682.847 L1106.69 682.847 L1106.13 682.847 L1105.57 682.847 L1105.01 682.847 L1104.45 682.847 L1103.89 682.847 L1103.33 682.847 L1102.77 682.847 L1102.22 682.847 L1101.66 682.847 L1101.1 682.847 L1100.54 682.847 L1099.98 682.847 L1099.42 682.847 L1098.86 682.847 L1098.3 682.847 L1097.74 682.847 L1097.18 682.847 L1096.62 682.847 L1096.06 682.847 L1095.5 682.847 L1094.94 682.847 L1094.39 682.847 L1093.83 682.847 L1093.27 682.847 L1092.71 682.847 L1092.15 682.847 L1091.59 682.847 L1091.03 682.847 L1090.47 682.847 L1089.91 682.847 L1089.35 682.847 L1088.79 682.847 L1088.23 682.847 L1087.67 682.847 L1087.12 682.847 L1086.56 682.847 L1086 682.847 L1085.44 682.847 L1084.88 682.847 L1084.32 682.847 L1083.76 682.847 L1083.2 682.847 L1082.64 682.847 L1082.08 682.847 L1081.52 682.847 L1080.96 682.847 L1080.4 682.847 L1079.85 682.847 L1079.29 682.847 L1078.73 682.847 L1078.17 682.847 L1077.61 682.847 L1077.05 682.847 L1076.49 682.847 L1075.93 682.847 L1075.37 682.847 L1074.81 682.847 L1074.25 682.847 L1073.69 682.847 L1073.13 682.847 L1072.57 682.847 L1072.02 682.847 L1071.46 682.847 L1070.9 682.847 L1070.34 682.847 L1069.78 682.847 L1069.22 682.847 L1068.66 682.847 L1068.1 682.847 L1067.54 682.847 L1066.98 682.847 L1066.42 682.847 L1065.86 682.847 L1065.3 682.847 L1064.75 682.847 L1064.19 682.847 L1063.63 682.847 L1063.07 682.847 L1062.51 682.847 L1061.95 682.847 L1061.39 682.847 L1060.83 682.847 L1060.27 682.847 L1059.71 682.847 L1059.15 682.847 L1058.59 682.847 L1058.03 682.847 L1057.48 682.847 L1056.92 682.847 L1056.36 682.847 L1055.8 682.847 L1055.24 682.847 L1054.68 682.847 L1054.12 682.847 L1053.56 682.847 L1053 682.847 L1052.44 682.847 L1051.88 682.847 L1051.32 682.847 L1050.76 682.847 L1050.2 682.847 L1049.65 682.847 L1049.09 682.847 L1048.53 682.847 L1047.97 682.847 L1047.41 682.847 L1046.85 682.847 L1046.29 682.847 L1045.73 682.847 L1045.17 682.847 L1044.61 682.847 L1044.05 682.847 L1043.49 682.847 L1042.93 682.847 L1042.38 682.847 L1041.82 682.847 L1041.26 682.847 L1040.7 682.847 L1040.14 682.847 L1039.58 682.847 L1039.02 682.847 L1038.46 682.847 L1037.9 682.847 L1037.34 682.847 L1036.78 682.847 L1036.22 682.847 L1035.66 682.847 L1035.1 682.847 L1034.55 682.847 L1033.99 682.847 L1033.43 682.847 L1032.87 682.847 L1032.31 682.847 L1031.75 682.847 L1031.19 682.847 L1030.63 682.847 L1030.07 682.847 L1029.51 682.847 L1028.95 682.847 L1028.39 682.847 L1027.83 682.847 L1027.28 682.847 L1026.72 682.847 L1026.16 682.847 L1025.6 682.847 L1025.04 682.847 L1024.48 682.847 L1023.92 682.847 L1023.36 682.847 L1022.8 682.847 L1022.24 682.847 L1021.68 682.847 L1021.12 682.847 L1020.56 682.847 L1020.01 682.847 L1019.45 682.847 L1018.89 682.847 L1018.33 682.847 L1017.77 682.847 L1017.21 682.847 L1016.65 682.847 L1016.09 682.847 L1015.53 682.847 L1014.97 682.847 L1014.41 682.847 L1013.85 682.847 L1013.29 682.847 L1012.73 682.847 L1012.18 682.847 L1011.62 682.847 L1011.06 682.847 L1010.5 682.847 L1009.94 682.847 L1009.38 682.847 L1008.82 682.847 L1008.26 682.847 L1007.7 682.847 L1007.14 682.847 L1006.58 682.847 L1006.02 682.847 L1005.46 682.847 L1004.91 682.847 L1004.35 682.847 L1003.79 682.847 L1003.23 682.847 L1002.67 682.847 L1002.11 682.847 L1001.55 682.847 L1000.99 682.847 L1000.43 682.847 L999.872 682.847 L999.313 682.847 L998.754 682.847 L998.194 682.847 L997.635 682.847 L997.076 682.847 L996.517 682.847 L995.957 682.847 L995.398 682.847 L994.839 682.847 L994.28 682.847 L993.72 682.847 L993.161 682.847 L992.602 682.847 L992.043 682.847 L991.483 682.847 L990.924 682.847 L990.365 682.847 L989.806 682.847 L989.246 682.847 L988.687 682.847 L988.128 682.847 L987.569 682.847 L987.009 682.847 L986.45 682.847 L985.891 682.847 L985.332 682.847 L984.772 682.847 L984.213 682.847 L983.654 682.847 L983.095 682.847 L982.535 682.847 L981.976 682.847 L981.417 682.847 L980.858 682.847 L980.298 682.847 L979.739 682.847 L979.18 682.847 L978.621 682.847 L978.061 682.847 L977.502 682.847 L976.943 682.847 L976.384 682.847 L975.824 682.847 L975.265 682.847 L974.706 682.847 L974.147 682.847 L973.587 682.847 L973.028 682.847 L972.469 682.847 L971.91 682.847 L971.35 682.847 L970.791 682.847 L970.232 682.847 L969.673 682.847 L969.113 682.847 L968.554 682.847 L967.995 682.847 L967.436 682.847 L966.876 682.847 L966.317 682.847 L965.758 682.847 L965.199 682.847 L964.639 682.847 L964.08 682.847 L963.521 682.847 L962.962 682.847 L962.402 682.847 L961.843 682.847 L961.284 682.847 L960.725 682.847 L960.165 682.847 L959.606 682.847 L959.047 682.847 L958.488 682.847 L957.928 682.847 L957.369 682.847 L956.81 682.847 L956.251 682.847 L955.691 682.847 L955.132 682.847 L954.573 682.847 L954.014 682.847 L953.454 682.847 L952.895 682.847 L952.336 682.847 L951.777 682.847 L951.217 682.847 L950.658 682.847 L950.099 682.847 L949.54 682.847 L948.98 682.847 L948.421 682.847 L947.862 682.847 L947.303 682.847 L946.743 682.847 L946.184 682.847 L945.625 682.847 L945.066 682.847 L944.506 682.847 L943.947 682.847 L943.388 682.847 L942.829 682.847 L942.269 682.847 L941.71 682.847 L941.151 682.847 L940.592 682.847 L940.032 682.847 L939.473 682.847 L938.914 682.847 L938.355 682.847 L937.795 682.847 L937.236 682.847 L936.677 682.847 L936.118 682.847 L935.558 682.847 L934.999 682.847 L934.44 682.847 L933.881 682.847 L933.321 682.847 L932.762 682.847 L932.203 682.847 L931.644 682.847 L931.084 682.847 L930.525 682.847 L929.966 682.847 L929.406 682.847 L928.847 682.847 L928.288 682.847 L927.729 682.847 L927.169 682.847 L926.61 682.847 L926.051 682.847 L925.492 682.847 L924.932 682.847 L924.373 682.847 L923.814 682.847 L923.255 682.847 L922.695 682.847 L922.136 682.847 L921.577 682.847 L921.018 682.847 L920.458 682.847 L919.899 682.847 L919.34 682.847 L918.781 682.847 L918.221 682.847 L917.662 682.847 L917.103 682.847 L916.544 682.847 L915.984 682.847 L915.425 682.847 L914.866 682.847 L914.307 682.847 L913.747 682.847 L913.188 682.847 L912.629 682.847 L912.07 682.847 L911.51 682.847 L910.951 682.847 L910.392 682.847 L909.833 682.847 L909.273 682.847 L908.714 682.847 L908.155 682.847 L907.596 682.847 L907.036 682.847 L906.477 682.847 L905.918 682.847 L905.359 682.847 L904.799 682.847 L904.24 682.847 L903.681 682.847 L903.122 682.847 L902.562 682.847 L902.003 682.847 L901.444 682.847 L900.885 682.847 L900.325 682.847 L899.766 682.847 L899.207 682.847 L898.648 682.847 L898.088 682.847 L897.529 682.847 L896.97 682.847 L896.411 682.847 L895.851 682.847 L895.292 682.847 L894.733 682.847 L894.174 682.847 L893.614 682.847 L893.055 682.847 L892.496 682.847 L891.937 682.847 L891.377 682.847 L890.818 682.847 L890.259 682.847 L889.7 682.847 L889.14 682.847 L888.581 682.847 L888.022 682.847 L887.463 682.847 L886.903 682.847 L886.344 682.847 L885.785 682.847 L885.226 682.847 L884.666 682.847 L884.107 682.847 L883.548 682.847 L882.989 682.847 L882.429 682.847 L881.87 682.847 L881.311 682.847 L880.752 682.847 L880.192 682.847 L879.633 682.847 L879.074 682.847 L878.515 682.847 L877.955 682.847 L877.396 682.847 L876.837 682.847 L876.278 682.847 L875.718 682.847 L875.159 682.847 L874.6 682.847 L874.041 682.847 L873.481 682.847 L872.922 682.847 L872.363 682.847 L871.804 682.847 L871.244 682.847 L870.685 682.847 L870.126 682.847 L869.567 682.847 L869.007 682.847 L868.448 682.847 L867.889 682.847 L867.33 682.847 L866.77 682.847 L866.211 682.847 L865.652 682.847 L865.093 682.847 L864.533 682.847 L863.974 682.847 L863.415 682.847 L862.856 682.847 L862.296 682.847 L861.737 682.847 L861.178 682.847 L860.619 682.847 L860.059 682.847 L859.5 682.847 L858.941 682.847 L858.382 682.847 L857.822 682.847 L857.263 682.847 L856.704 682.847 L856.145 682.847 L855.585 682.847 L855.026 682.847 L854.467 682.847 L853.908 682.847 L853.348 682.847 L852.789 682.847 L852.23 682.847 L851.671 682.847 L851.111 682.847 L850.552 682.847 L849.993 682.847 L849.434 682.847 L848.874 682.847 L848.315 682.847 L847.756 682.847 L847.197 682.847 L846.637 682.847 L846.078 682.847 L845.519 682.847 L844.96 682.847 L844.4 682.847 L843.841 682.847 L843.282 682.847 L842.723 682.847 L842.163 682.847 L841.604 682.847 L841.045 682.847 L840.486 682.847 L839.926 682.847 L839.367 682.847 L838.808 682.847 L838.249 682.847 L837.689 682.847 L837.13 682.847 L836.571 682.847 L836.012 682.847 L835.452 682.847 L834.893 682.847 L834.334 682.847 L833.775 682.847 L833.215 682.847 L832.656 682.847 L832.097 682.847 L831.538 682.847 L830.978 682.847 L830.419 682.847 L829.86 682.847 L829.301 682.847 L828.741 682.847 L828.182 682.847 L827.623 682.847 L827.064 682.847 L826.504 682.847 L825.945 682.847 L825.386 682.847 L824.827 682.847 L824.267 682.847 L823.708 682.847 L823.149 682.847 L822.59 682.847 L822.03 682.847 L821.471 682.847 L820.912 682.847 L820.353 682.847 L819.793 682.847 L819.234 682.847 L818.675 682.847 L818.116 682.847 L817.556 682.847 L816.997 682.847 L816.438 682.847 L815.879 682.847 L815.319 682.847 L814.76 682.847 L814.201 682.847 L813.642 682.847 L813.082 682.847 L812.523 682.847 L811.964 682.847 L811.405 682.847 L810.845 682.847 L810.286 682.847 L809.727 682.847 L809.168 682.847 L808.608 682.847 L808.049 682.847 L807.49 682.847 L806.931 682.847 L806.371 682.847 L805.812 682.847 L805.253 682.847 L804.693 682.847 L804.134 682.847 L803.575 682.847 L803.016 682.847 L802.456 682.847 L801.897 682.847 L801.338 682.847 L800.779 682.847 L800.219 682.847 L799.66 682.847 L799.101 682.847 L798.542 682.847 L797.982 682.847 L797.423 682.847 L796.864 682.847 L796.305 682.847 L795.745 682.847 L795.186 682.847 L794.627 682.847 L794.068 682.847 L793.508 682.847 L792.949 682.847 L792.39 682.847 L791.831 682.847 L791.271 682.847 L790.712 682.847 L790.153 682.847 L789.594 682.847 L789.034 682.847 L788.475 682.847 L787.916 682.847 L787.357 682.847 L786.797 682.847 L786.238 682.847 L785.679 682.847 L785.12 682.847 L784.56 682.847 L784.001 682.847 L783.442 682.847 L782.883 682.847 L782.323 682.847 L781.764 682.847 L781.205 682.847 L780.646 682.847 L780.086 682.847 L779.527 682.847 L778.968 682.847 L778.409 682.847 L777.849 682.847 L777.29 682.847 L776.731 682.847 L776.172 682.847 L775.612 682.847 L775.053 682.847 L774.494 682.847 L773.935 682.847 L773.375 682.847 L772.816 682.847 L772.257 682.847 L771.698 682.847 L771.138 682.847 L770.579 682.847 L770.02 682.847 L769.461 682.847 L768.901 682.847 L768.342 682.847 L767.783 682.847 L767.224 682.847 L766.664 682.847 L766.105 682.847 L765.546 682.847 L764.987 682.847 L764.427 682.847 L763.868 682.847 L763.309 682.847 L762.75 682.847 L762.19 682.847 L761.631 682.847 L761.072 682.847 L760.513 682.847 L759.953 682.847 L759.394 682.847 L758.835 682.847 L758.276 682.847 L757.716 682.847 L757.157 682.847 L756.598 682.847 L756.039 682.847 L755.479 682.847 L754.92 682.847 L754.361 682.847 L753.802 682.847 L753.242 682.847 L752.683 682.847 L752.124 682.847 L751.565 682.847 L751.005 682.847 L750.446 682.847 L749.887 682.847 L749.328 682.847 L748.768 682.847 L748.209 682.847 L747.65 682.847 L747.091 682.847 L746.531 682.847 L745.972 682.847 L745.413 682.847 L744.854 682.847 L744.294 682.847 L743.735 682.847 L743.176 682.847 L742.617 682.847 L742.057 682.847 L741.498 682.847 L740.939 682.847 L740.38 682.847 L739.82 682.847 L739.261 682.847 L738.702 682.847 L738.143 682.847 L737.583 682.847 L737.024 682.847 L736.465 682.847 L735.906 682.847 L735.346 682.847 L734.787 682.847 L734.228 682.847 L733.669 682.847 L733.109 682.847 L732.55 682.847 L731.991 682.847 L731.432 682.847 L730.872 682.847 L730.313 682.847 L729.754 682.847 L729.195 682.847 L728.635 682.847 L728.076 682.847 L727.517 682.847 L726.958 682.847 L726.398 682.847 L725.839 682.847 L725.28 682.847 L724.721 682.847 L724.161 682.847 L723.602 682.847 L723.043 682.847 L722.484 682.847 L721.924 682.847 L721.365 682.847 L720.806 682.847 L720.247 682.847  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip123)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.678 720.806,683.678 721.365,683.678 721.924,683.678 722.484,683.678 723.043,683.678 723.602,683.678 724.161,683.678 724.721,683.678 725.28,683.678 725.839,683.678 726.398,683.678 726.958,683.678 727.517,683.678 728.076,683.678 728.635,683.678 729.195,683.678 729.754,683.678 730.313,683.678 730.872,683.678 731.432,683.678 731.991,683.678 732.55,683.678 733.109,683.678 733.669,683.678 734.228,683.678 734.787,683.678 735.346,683.678 735.906,683.678 736.465,683.678 737.024,683.678 737.583,683.678 738.143,683.678 738.702,683.678 739.261,683.678 739.82,683.678 740.38,683.678 740.939,683.678 741.498,683.678 742.057,683.678 742.617,683.678 743.176,683.678 743.735,683.678 744.294,683.678 744.854,683.678 745.413,683.678 745.972,683.678 746.531,683.678 747.091,683.678 747.65,683.678 748.209,683.678 748.768,683.678 749.328,683.678 749.887,683.678 750.446,683.678 751.005,683.678 751.565,683.678 752.124,683.678 752.683,683.678 753.242,683.678 753.802,683.678 754.361,683.678 754.92,683.678 755.479,683.678 756.039,683.678 756.598,683.678 757.157,683.678 757.716,683.678 758.276,683.678 758.835,683.678 759.394,683.678 759.953,683.678 760.513,683.678 761.072,683.678 761.631,683.678 762.19,683.678 762.75,683.678 763.309,683.678 763.868,683.678 764.427,683.678 764.987,683.678 765.546,683.678 766.105,683.678 766.664,683.678 767.224,683.678 767.783,683.678 768.342,683.678 768.901,683.678 769.461,683.678 770.02,683.678 770.579,683.678 771.138,683.678 771.698,683.678 772.257,683.678 772.816,683.678 773.375,683.678 773.935,683.678 774.494,683.678 775.053,683.678 775.612,683.678 776.172,683.678 776.731,683.678 777.29,683.678 777.849,683.678 778.409,683.678 778.968,683.678 779.527,683.678 780.086,683.678 780.646,683.678 781.205,683.678 781.764,683.678 782.323,683.678 782.883,683.678 783.442,683.678 784.001,683.678 784.56,683.678 785.12,683.678 785.679,683.678 786.238,683.678 786.797,683.678 787.357,683.678 787.916,683.678 788.475,683.678 789.034,683.678 789.594,683.678 790.153,683.678 790.712,683.678 791.271,683.678 791.831,683.678 792.39,683.678 792.949,683.678 793.508,683.678 794.068,683.678 794.627,683.678 795.186,683.678 795.745,683.678 796.305,683.678 796.864,683.678 797.423,683.678 797.982,683.678 798.542,683.678 799.101,683.678 799.66,683.678 800.219,683.678 800.779,683.678 801.338,683.678 801.897,683.678 802.456,683.678 803.016,683.678 803.575,683.678 804.134,683.678 804.693,683.678 805.253,683.678 805.812,683.678 806.371,683.678 806.931,683.678 807.49,683.678 808.049,683.678 808.608,683.678 809.168,683.678 809.727,683.678 810.286,683.678 810.845,683.678 811.405,683.678 811.964,683.678 812.523,683.678 813.082,683.678 813.642,683.678 814.201,683.678 814.76,683.678 815.319,683.678 815.879,683.678 816.438,683.678 816.997,683.678 817.556,683.678 818.116,683.678 818.675,683.678 819.234,683.678 819.793,683.678 820.353,683.678 820.912,683.678 821.471,683.678 822.03,683.678 822.59,683.678 823.149,683.678 823.708,683.678 824.267,683.678 824.827,683.678 825.386,683.678 825.945,683.678 826.504,683.678 827.064,683.678 827.623,683.678 828.182,683.678 828.741,683.678 829.301,683.678 829.86,683.678 830.419,683.678 830.978,683.678 831.538,683.678 832.097,683.678 832.656,683.678 833.215,683.678 833.775,683.678 834.334,683.678 834.893,683.678 835.452,683.678 836.012,683.678 836.571,683.678 837.13,683.678 837.689,683.678 838.249,683.678 838.808,683.678 839.367,683.678 839.926,683.678 840.486,683.678 841.045,683.678 841.604,683.678 842.163,683.678 842.723,683.678 843.282,683.678 843.841,683.678 844.4,683.678 844.96,683.678 845.519,683.678 846.078,683.678 846.637,683.678 847.197,683.678 847.756,683.678 848.315,683.678 848.874,683.678 849.434,683.678 849.993,683.678 850.552,683.678 851.111,683.678 851.671,683.678 852.23,683.678 852.789,683.678 853.348,683.678 853.908,683.678 854.467,683.678 855.026,683.678 855.585,683.678 856.145,683.678 856.704,683.678 857.263,683.678 857.822,683.678 858.382,683.678 858.941,683.678 859.5,683.678 860.059,683.678 860.619,683.678 861.178,683.678 861.737,683.678 862.296,683.678 862.856,683.678 863.415,683.678 863.974,683.678 864.533,683.678 865.093,683.678 865.652,683.678 866.211,683.678 866.77,683.678 867.33,683.678 867.889,683.678 868.448,683.678 869.007,683.678 869.567,683.678 870.126,683.678 870.685,683.678 871.244,683.678 871.804,683.678 872.363,683.678 872.922,683.678 873.481,683.678 874.041,683.678 874.6,683.678 875.159,683.678 875.718,683.678 876.278,683.678 876.837,683.678 877.396,683.678 877.955,683.678 878.515,683.678 879.074,683.678 879.633,683.678 880.192,683.678 880.752,683.678 881.311,683.678 881.87,683.678 882.429,683.678 882.989,683.678 883.548,683.678 884.107,683.678 884.666,683.678 885.226,683.678 885.785,683.678 886.344,683.678 886.903,683.678 887.463,683.678 888.022,683.678 888.581,683.678 889.14,683.678 889.7,683.678 890.259,683.678 890.818,683.678 891.377,683.678 891.937,683.678 892.496,683.678 893.055,683.678 893.614,683.678 894.174,683.678 894.733,683.678 895.292,683.678 895.851,683.678 896.411,683.678 896.97,683.678 897.529,683.678 898.088,683.678 898.648,683.678 899.207,683.678 899.766,683.678 900.325,683.678 900.885,683.678 901.444,683.678 902.003,683.678 902.562,683.678 903.122,683.678 903.681,683.678 904.24,683.678 904.799,683.678 905.359,683.678 905.918,683.678 906.477,683.678 907.036,683.678 907.596,683.678 908.155,683.678 908.714,683.678 909.273,683.678 909.833,683.678 910.392,683.678 910.951,683.678 911.51,683.678 912.07,683.678 912.629,683.678 913.188,683.678 913.747,683.678 914.307,683.678 914.866,683.678 915.425,683.678 915.984,683.678 916.544,683.678 917.103,683.678 917.662,683.678 918.221,683.678 918.781,683.678 919.34,683.678 919.899,683.678 920.458,683.678 921.018,683.678 921.577,683.678 922.136,683.678 922.695,683.678 923.255,683.678 923.814,683.678 924.373,683.678 924.932,683.678 925.492,683.678 926.051,683.678 926.61,683.678 927.169,683.678 927.729,683.678 928.288,683.678 928.847,683.678 929.406,683.678 929.966,683.678 930.525,683.678 931.084,683.678 931.644,683.678 932.203,683.678 932.762,683.678 933.321,683.678 933.881,683.678 934.44,683.678 934.999,683.678 935.558,683.678 936.118,683.678 936.677,683.678 937.236,683.678 937.795,683.678 938.355,683.678 938.914,683.678 939.473,683.678 940.032,683.678 940.592,683.678 941.151,683.678 941.71,683.678 942.269,683.678 942.829,683.678 943.388,683.678 943.947,683.678 944.506,683.678 945.066,683.678 945.625,683.678 946.184,683.678 946.743,683.678 947.303,683.678 947.862,683.678 948.421,683.678 948.98,683.678 949.54,683.678 950.099,683.678 950.658,683.678 951.217,683.678 951.777,683.678 952.336,683.678 952.895,683.678 953.454,683.678 954.014,683.678 954.573,683.678 955.132,683.678 955.691,683.678 956.251,683.678 956.81,683.678 957.369,683.678 957.928,683.678 958.488,683.678 959.047,683.678 959.606,683.678 960.165,683.678 960.725,683.678 961.284,683.678 961.843,683.678 962.402,683.678 962.962,683.678 963.521,683.678 964.08,683.678 964.639,683.678 965.199,683.678 965.758,683.678 966.317,683.678 966.876,683.678 967.436,683.678 967.995,683.678 968.554,683.678 969.113,683.678 969.673,683.678 970.232,683.678 970.791,683.678 971.35,683.678 971.91,683.678 972.469,683.678 973.028,683.678 973.587,683.678 974.147,683.678 974.706,683.678 975.265,683.678 975.824,683.678 976.384,683.678 976.943,683.678 977.502,683.678 978.061,683.678 978.621,683.678 979.18,683.678 979.739,683.678 980.298,683.678 980.858,683.678 981.417,683.678 981.976,683.678 982.535,683.678 983.095,683.678 983.654,683.678 984.213,683.678 984.772,683.678 985.332,683.678 985.891,683.678 986.45,683.678 987.009,683.678 987.569,683.678 988.128,683.678 988.687,683.678 989.246,683.678 989.806,683.678 990.365,683.678 990.924,683.678 991.483,683.678 992.043,683.678 992.602,683.678 993.161,683.678 993.72,683.678 994.28,683.678 994.839,683.678 995.398,683.678 995.957,683.678 996.517,683.678 997.076,683.678 997.635,683.678 998.194,683.678 998.754,683.678 999.313,683.678 999.872,683.678 1000.43,683.678 1000.99,683.678 1001.55,683.678 1002.11,683.678 1002.67,683.678 1003.23,683.678 1003.79,683.678 1004.35,683.678 1004.91,683.678 1005.46,683.678 1006.02,683.678 1006.58,683.678 1007.14,683.678 1007.7,683.678 1008.26,683.678 1008.82,683.678 1009.38,683.678 1009.94,683.678 1010.5,683.678 1011.06,683.678 1011.62,683.678 1012.18,683.678 1012.73,683.678 1013.29,683.678 1013.85,683.678 1014.41,683.678 1014.97,683.678 1015.53,683.678 1016.09,683.678 1016.65,683.678 1017.21,683.678 1017.77,683.678 1018.33,683.678 1018.89,683.678 1019.45,683.678 1020.01,683.678 1020.56,683.678 1021.12,683.678 1021.68,683.678 1022.24,683.678 1022.8,683.678 1023.36,683.678 1023.92,683.678 1024.48,683.678 1025.04,683.678 1025.6,683.678 1026.16,683.678 1026.72,683.678 1027.28,683.678 1027.83,683.678 1028.39,683.678 1028.95,683.678 1029.51,683.678 1030.07,683.678 1030.63,683.678 1031.19,683.678 1031.75,683.678 1032.31,683.678 1032.87,683.678 1033.43,683.678 1033.99,683.678 1034.55,683.678 1035.1,683.678 1035.66,683.678 1036.22,683.678 1036.78,683.678 1037.34,683.678 1037.9,683.678 1038.46,683.678 1039.02,683.678 1039.58,683.678 1040.14,683.678 1040.7,683.678 1041.26,683.678 1041.82,683.678 1042.38,683.678 1042.93,683.678 1043.49,683.678 1044.05,683.678 1044.61,683.678 1045.17,683.678 1045.73,683.678 1046.29,683.678 1046.85,683.678 1047.41,683.678 1047.97,683.678 1048.53,683.678 1049.09,683.678 1049.65,683.678 1050.2,683.678 1050.76,683.678 1051.32,683.678 1051.88,683.678 1052.44,683.678 1053,683.678 1053.56,683.678 1054.12,683.678 1054.68,683.678 1055.24,683.678 1055.8,683.678 1056.36,683.678 1056.92,683.678 1057.48,683.678 1058.03,683.678 1058.59,683.678 1059.15,683.678 1059.71,683.678 1060.27,683.678 1060.83,683.678 1061.39,683.678 1061.95,683.678 1062.51,683.678 1063.07,683.678 1063.63,683.678 1064.19,683.678 1064.75,683.678 1065.3,683.678 1065.86,683.678 1066.42,683.678 1066.98,683.678 1067.54,683.678 1068.1,683.678 1068.66,683.678 1069.22,683.678 1069.78,683.678 1070.34,683.678 1070.9,683.678 1071.46,683.678 1072.02,683.678 1072.57,683.678 1073.13,683.678 1073.69,683.678 1074.25,683.678 1074.81,683.678 1075.37,683.678 1075.93,683.678 1076.49,683.678 1077.05,683.678 1077.61,683.678 1078.17,683.678 1078.73,683.678 1079.29,683.678 1079.85,683.678 1080.4,683.678 1080.96,683.678 1081.52,683.678 1082.08,683.678 1082.64,683.678 1083.2,683.678 1083.76,683.678 1084.32,683.678 1084.88,683.678 1085.44,683.678 1086,683.678 1086.56,683.678 1087.12,683.678 1087.67,683.678 1088.23,683.678 1088.79,683.678 1089.35,683.678 1089.91,683.678 1090.47,683.678 1091.03,683.678 1091.59,683.678 1092.15,683.678 1092.71,683.678 1093.27,683.678 1093.83,683.678 1094.39,683.678 1094.94,683.678 1095.5,683.678 1096.06,683.678 1096.62,683.678 1097.18,683.678 1097.74,683.678 1098.3,683.678 1098.86,683.678 1099.42,683.678 1099.98,683.678 1100.54,683.678 1101.1,683.678 1101.66,683.678 1102.22,683.678 1102.77,683.678 1103.33,683.678 1103.89,683.678 1104.45,683.678 1105.01,683.678 1105.57,683.678 1106.13,683.678 1106.69,683.678 1107.25,683.678 1107.81,683.678 1108.37,683.678 1108.93,683.678 1109.49,683.678 1110.04,683.678 1110.6,683.678 1111.16,683.678 1111.72,683.678 1112.28,683.678 1112.84,683.678 1113.4,683.678 1113.96,683.678 1114.52,683.678 1115.08,683.678 1115.64,683.678 1116.2,683.678 1116.76,683.678 1117.31,683.678 1117.87,683.678 1118.43,683.678 1118.99,683.678 1119.55,683.678 1120.11,683.678 1120.67,683.678 1121.23,683.678 1121.79,683.678 1122.35,683.678 1122.91,683.678 1123.47,683.678 1124.03,683.678 1124.59,683.678 1125.14,683.678 1125.7,683.678 1126.26,683.678 1126.82,683.678 1127.38,683.678 1127.94,683.678 1128.5,683.678 1129.06,683.678 1129.62,683.678 1130.18,683.678 1130.74,683.678 1131.3,683.678 1131.86,683.678 1132.41,683.678 1132.97,683.678 1133.53,683.678 1134.09,683.678 1134.65,683.678 1135.21,683.678 1135.77,683.678 1136.33,683.678 1136.89,683.678 1137.45,683.678 1138.01,683.678 1138.57,683.678 1139.13,683.678 1139.68,683.678 1140.24,683.678 1140.8,683.678 1141.36,683.678 1141.92,683.678 1142.48,683.678 1143.04,683.678 1143.6,683.678 1144.16,683.678 1144.72,683.678 1145.28,683.678 1145.84,683.678 1146.4,683.678 1146.96,683.678 1147.51,683.678 1148.07,683.678 1148.63,683.678 1149.19,683.678 1149.75,683.678 1150.31,683.678 1150.87,683.678 1151.43,683.678 1151.99,683.678 1152.55,683.678 1153.11,683.678 1153.67,683.678 1154.23,683.678 1154.78,683.678 1155.34,683.678 1155.9,683.678 1156.46,683.678 1157.02,683.678 1157.58,683.678 1158.14,683.678 1158.7,683.678 1159.26,683.678 1159.82,683.678 1160.38,683.678 1160.94,683.678 1161.5,683.678 1162.05,683.678 1162.61,683.678 1163.17,683.678 1163.73,683.678 1164.29,683.678 1164.85,683.678 1165.41,683.678 1165.97,683.678 1166.53,683.678 1167.09,683.678 1167.65,683.678 1168.21,683.678 1168.77,683.678 1169.33,683.678 1169.88,683.678 1170.44,683.678 1171,683.678 1171.56,683.678 1172.12,683.678 1172.68,683.678 1173.24,683.678 1173.8,683.678 1174.36,683.678 1174.92,683.678 1175.48,683.678 1176.04,683.678 1176.6,683.678 1177.15,683.678 1177.71,683.678 1178.27,683.678 1178.83,683.678 1179.39,683.678 1179.95,683.678 1180.51,683.678 1181.07,683.678 1181.63,683.678 1182.19,683.678 1182.75,683.678 1183.31,683.678 1183.87,683.678 1184.43,683.678 1184.98,683.678 1185.54,683.678 1186.1,683.678 1186.66,683.678 1187.22,683.678 1187.78,683.678 1188.34,683.678 1188.9,683.678 1189.46,683.678 1190.02,683.678 1190.58,683.678 1191.14,683.678 1191.7,683.678 1192.25,683.678 1192.81,683.678 1193.37,683.678 1193.93,683.678 1194.49,683.678 1195.05,683.678 1195.61,683.678 1196.17,683.678 1196.73,683.678 1197.29,683.678 1197.85,683.678 1198.41,683.678 1198.97,683.678 1199.52,683.678 1200.08,683.678 1200.64,683.678 1201.2,683.678 1201.76,683.678 1202.32,683.678 1202.88,683.678 1203.44,683.678 1204,683.678 1204.56,683.678 1205.12,683.678 1205.68,683.678 1206.24,683.678 1206.8,683.678 1207.35,683.678 1207.91,683.678 1208.47,683.678 1209.03,683.678 1209.59,683.678 1210.15,683.678 1210.71,683.678 1211.27,683.678 1211.83,683.678 1212.39,683.678 1212.95,683.678 1213.51,683.678 1214.07,683.678 1214.62,683.678 1215.18,683.678 1215.74,683.678 1216.3,683.678 1216.86,683.678 1217.42,683.678 1217.98,683.678 1218.54,683.678 1219.1,683.678 1219.66,683.678 1220.22,683.678 1220.78,683.678 1221.34,683.678 1221.89,683.678 1222.45,683.678 1223.01,683.678 1223.57,683.678 1224.13,683.678 1224.69,683.678 1225.25,683.678 1225.81,683.678 1226.37,683.678 1226.93,683.678 1227.49,683.678 1228.05,683.678 1228.61,683.678 1229.17,683.678 1229.72,683.678 1230.28,683.678 1230.84,683.678 1231.4,683.678 1231.96,683.678 1232.52,683.678 1233.08,683.678 1233.64,683.678 1234.2,683.678 1234.76,683.678 1235.32,683.678 1235.88,683.678 1236.44,683.678 1236.99,683.678 1237.55,683.678 1238.11,683.678 1238.67,683.678 1239.23,683.678 1239.79,683.678 1240.35,683.678 1240.91,683.678 1241.47,683.678 1242.03,683.678 1242.59,683.678 1243.15,683.678 1243.71,683.678 1244.26,683.678 1244.82,683.678 1245.38,683.678 1245.94,683.678 1246.5,683.678 1247.06,683.678 1247.62,683.678 1248.18,683.678 1248.74,683.678 1249.3,683.678 1249.86,683.678 1250.42,683.678 1250.98,683.678 1251.54,683.678 1252.09,683.678 1252.65,683.678 1253.21,683.678 1253.77,683.678 1254.33,683.678 1254.89,683.678 1255.45,683.678 1256.01,683.678 1256.57,683.678 1257.13,683.678 1257.69,683.678 1258.25,683.678 1258.81,683.678 1259.36,683.678 1259.92,683.678 1260.48,683.678 1261.04,683.678 1261.6,683.678 1262.16,683.678 1262.72,683.678 1263.28,683.678 1263.84,683.678 1264.4,683.678 1264.96,683.678 1265.52,683.678 1266.08,683.678 1266.63,683.678 1267.19,683.678 1267.75,683.678 1268.31,683.678 1268.87,683.678 1269.43,683.678 1269.99,683.678 1270.55,683.678 1271.11,683.678 1271.67,683.678 1272.23,683.678 1272.79,683.678 1273.35,683.678 1273.91,683.678 1274.46,683.678 1275.02,683.678 1275.58,683.678 1276.14,683.678 1276.7,683.678 1277.26,683.678 1277.82,683.678 1278.38,683.678 1278.94,683.678 1279.5,683.678 1280.06,683.678 1280.62,683.678 1281.18,683.678 1281.73,683.678 1282.29,683.678 1282.85,683.678 1283.41,683.678 1283.97,683.678 1284.53,683.678 1285.09,683.678 1285.65,683.678 1286.21,683.678 1286.77,683.678 1287.33,683.678 1287.89,683.678 1288.45,683.678 1289,683.678 1289.56,683.678 1290.12,683.678 1290.68,683.678 1291.24,683.678 1291.8,683.678 1292.36,683.678 1292.92,683.678 1293.48,683.678 1294.04,683.678 1294.6,683.678 1295.16,683.678 1295.72,683.678 1296.28,683.678 1296.83,683.678 1297.39,683.678 1297.95,683.678 1298.51,683.678 1299.07,683.678 1299.63,683.678 1300.19,683.678 1300.75,683.678 1301.31,683.678 1301.87,683.678 1302.43,683.678 1302.99,683.678 1303.55,683.678 1304.1,683.678 1304.66,683.678 1305.22,683.678 1305.78,683.678 1306.34,683.678 1306.9,683.678 1307.46,683.678 1308.02,683.678 1308.58,683.678 1309.14,683.678 1309.7,683.678 1310.26,683.678 1310.82,683.678 1311.38,683.678 1311.93,683.678 1312.49,683.678 1313.05,683.678 1313.61,683.678 1314.17,683.678 1314.73,683.678 1315.29,683.678 1315.85,683.678 1316.41,683.678 1316.97,683.678 1317.53,683.678 1318.09,683.678 1318.65,683.678 1319.2,683.678 1319.76,683.678 1320.32,683.678 1320.88,683.678 1321.44,683.678 1322,683.678 1322.56,683.678 1323.12,683.678 1323.68,683.678 1324.24,683.678 1324.8,683.678 1325.36,683.678 1325.92,683.678 1326.47,683.678 1327.03,683.678 1327.59,683.678 1328.15,683.678 1328.71,683.678 1329.27,683.678 1329.83,683.678 1330.39,683.678 1330.95,683.678 1331.51,683.678 1332.07,683.678 1332.63,683.678 1333.19,683.678 1333.75,683.678 1334.3,683.678 1334.86,683.678 1335.42,683.678 1335.98,683.678 1336.54,683.678 1337.1,683.678 1337.66,683.678 1338.22,683.678 1338.78,683.678 1339.34,683.678 1339.9,683.678 1340.46,683.678 1341.02,683.678 1341.57,683.678 1342.13,683.678 1342.69,683.678 1343.25,683.678 1343.81,683.678 1344.37,683.678 1344.93,683.678 1345.49,683.678 1346.05,683.678 1346.61,683.678 1347.17,683.678 1347.73,683.678 1348.29,683.678 1348.84,683.678 1349.4,683.678 1349.96,683.678 1350.52,683.678 1351.08,683.678 1351.64,683.678 1352.2,683.678 1352.76,683.678 1353.32,683.678 1353.88,683.678 1354.44,683.678 1355,683.678 1355.56,683.678 1356.12,683.678 1356.67,683.678 1357.23,683.678 1357.79,683.678 1358.35,683.678 1358.91,683.678 1359.47,683.678 1360.03,683.678 1360.59,683.678 1361.15,683.678 1361.71,683.678 1362.27,683.678 1362.83,683.678 1363.39,683.678 1363.94,683.678 1364.5,683.678 1365.06,683.678 1365.62,683.678 1366.18,683.678 1366.74,683.678 1367.3,683.678 1367.86,683.678 1368.42,683.678 1368.98,683.678 1369.54,683.678 1370.1,683.678 1370.66,683.678 1371.21,683.678 1371.77,683.678 1372.33,683.678 1372.89,683.678 1373.45,683.678 1374.01,683.678 1374.57,683.678 1375.13,683.678 1375.69,683.678 1376.25,683.678 1376.81,683.678 1377.37,683.678 1377.93,683.678 1378.49,683.678 1379.04,683.678 1379.6,683.678 1380.16,683.678 1380.72,683.678 1381.28,683.678 1381.84,683.678 1382.4,683.678 1382.96,683.678 1383.52,683.678 1384.08,683.678 1384.64,683.678 1385.2,683.678 1385.76,683.678 1386.31,683.678 1386.87,683.678 1387.43,683.678 1387.99,683.678 1388.55,683.678 1389.11,683.678 1389.67,683.678 1390.23,683.678 1390.79,683.678 1391.35,683.678 1391.91,683.678 1392.47,683.678 1393.03,683.678 1393.58,683.678 1394.14,683.678 1394.7,683.678 1395.26,683.678 1395.82,683.678 1396.38,683.678 1396.94,683.678 1397.5,683.678 1398.06,683.678 1398.62,683.678 1399.18,683.678 1399.74,683.678 1400.3,683.678 1400.86,683.678 1401.41,683.678 1401.97,683.678 1402.53,683.678 1403.09,683.678 1403.65,683.678 1404.21,683.678 1404.77,683.678 1405.33,683.678 1405.89,683.678 1406.45,683.678 1407.01,683.678 1407.57,683.678 1408.13,683.678 1408.68,683.678 1409.24,683.678 1409.8,683.678 1410.36,683.678 1410.92,683.678 1411.48,683.678 1412.04,683.678 1412.6,683.678 1413.16,683.678 1413.72,683.678 1414.28,683.678 1414.84,683.678 1415.4,683.678 1415.95,683.678 1416.51,683.678 1417.07,683.678 1417.63,683.678 1418.19,683.678 1418.75,683.678 1419.31,683.678 1419.87,683.678 1420.43,683.678 1420.99,683.678 1421.55,683.678 1422.11,683.678 1422.67,683.678 1423.23,683.678 1423.78,683.678 1424.34,683.678 1424.9,683.678 1425.46,683.678 1426.02,683.678 1426.58,683.678 1427.14,683.678 1427.7,683.678 1428.26,683.678 1428.82,683.678 1429.38,683.678 1429.94,683.678 1430.5,683.678 1431.05,683.678 1431.61,683.678 1432.17,683.678 1432.73,683.678 1433.29,683.678 1433.85,683.678 1434.41,683.678 1434.97,683.678 1435.53,683.678 1436.09,683.678 1436.65,683.678 1437.21,683.678 1437.77,683.678 1438.33,683.678 1438.88,683.678 1439.44,683.678 1440,683.678 1440.56,683.678 1441.12,683.678 1441.68,683.678 1442.24,683.678 1442.8,683.678 1443.36,683.678 1443.92,683.678 1444.48,683.678 1445.04,683.678 1445.6,683.678 1446.15,683.678 1446.71,683.678 1447.27,683.678 1447.83,683.678 1448.39,683.678 1448.95,683.678 1449.51,683.678 1450.07,683.678 1450.63,683.678 1451.19,683.678 1451.75,683.678 1452.31,683.678 1452.87,683.678 1453.42,683.678 1453.98,683.678 1454.54,683.678 1455.1,683.678 1455.66,683.678 1456.22,683.678 1456.78,683.678 1457.34,683.678 1457.9,683.678 1458.46,683.678 1459.02,683.678 1459.58,683.678 1460.14,683.678 1460.7,683.678 1461.25,683.678 1461.81,683.678 1462.37,683.678 1462.93,683.678 1463.49,683.678 1464.05,683.678 1464.61,683.678 1465.17,683.678 1465.73,683.678 1466.29,683.678 1466.85,683.678 1467.41,683.678 1467.97,683.678 1468.52,683.678 1469.08,683.678 1469.64,683.678 1470.2,683.678 1470.76,683.678 1471.32,683.678 1471.88,683.678 1472.44,683.678 1473,683.678 1473.56,683.678 1474.12,683.678 1474.68,683.678 1475.24,683.678 1475.79,683.678 1476.35,683.678 1476.91,683.678 1477.47,683.678 1478.03,683.678 1478.59,683.678 1479.15,683.678 1479.71,683.678 1480.27,683.678 1480.83,683.678 1481.39,683.678 1481.95,683.678 1482.51,683.678 1483.07,683.678 1483.62,683.678 1484.18,683.678 1484.74,683.678 1485.3,683.678 1485.86,683.678 1486.42,683.678 1486.98,683.678 1487.54,683.678 1488.1,683.678 1488.66,683.678 1489.22,683.678 1489.78,683.678 1490.34,683.678 1490.89,683.678 1491.45,683.678 1492.01,683.678 1492.57,683.678 1493.13,683.678 1493.69,683.678 1494.25,683.678 1494.81,683.678 1495.37,683.678 1495.93,683.678 1496.49,683.678 1497.05,683.678 1497.61,683.678 1498.16,683.678 1498.72,683.678 1499.28,683.678 1499.84,683.678 1500.4,683.678 1500.96,683.678 1501.52,683.678 1502.08,683.678 1502.64,683.678 1503.2,683.678 1503.76,683.678 1504.32,683.678 1504.88,683.678 1505.44,683.678 1505.99,683.678 1506.55,683.678 1507.11,683.678 1507.67,683.678 1508.23,683.678 1508.79,683.678 1509.35,683.678 1509.91,683.678 1510.47,683.678 1511.03,683.678 1511.59,683.678 1512.15,683.678 1512.71,683.678 1513.26,683.678 1513.82,683.678 1514.38,683.678 1514.94,683.678 1515.5,683.678 1516.06,683.678 1516.62,683.678 1517.18,683.678 1517.74,683.678 1518.3,683.678 1518.86,683.678 1519.42,683.678 1519.98,683.678 1520.53,683.678 1521.09,683.678 1521.65,683.678 1522.21,683.678 1522.77,683.678 1523.33,683.678 1523.89,683.678 1524.45,683.678 1525.01,683.678 1525.57,683.678 1526.13,683.678 1526.69,683.678 1527.25,683.678 1527.81,683.678 1528.36,683.678 1528.92,683.678 1529.48,683.678 1530.04,683.678 1530.6,683.678 1531.16,683.678 1531.72,683.678 1532.28,683.678 1532.84,683.678 1533.4,683.678 1533.96,683.678 1534.52,683.678 1535.08,683.678 1535.63,683.678 1536.19,683.678 1536.75,683.678 1537.31,683.678 1537.87,683.678 1538.43,683.678 1538.99,683.678 1539.55,683.678 1540.11,683.678 1540.67,683.678 1541.23,683.678 1541.79,683.678 1542.35,683.678 1542.9,683.678 1543.46,683.678 1544.02,683.678 1544.58,683.678 1545.14,683.678 1545.7,683.678 1546.26,683.678 1546.82,683.678 1547.38,683.678 1547.94,683.678 1548.5,683.678 1549.06,683.678 1549.62,683.678 1550.18,683.678 1550.73,683.678 1551.29,683.678 1551.85,683.678 1552.41,683.678 1552.97,683.678 1553.53,683.678 1554.09,683.678 1554.65,683.678 1555.21,683.678 1555.77,683.678 1556.33,683.678 1556.89,683.678 1557.45,683.678 1558,683.678 1558.56,683.678 1559.12,683.678 1559.68,683.678 1560.24,683.678 1560.8,683.678 1561.36,683.678 1561.92,683.678 1562.48,683.678 1563.04,683.678 1563.6,683.678 1564.16,683.678 1564.72,683.678 1565.28,683.678 1565.83,683.678 1566.39,683.678 1566.95,683.678 1567.51,683.678 1568.07,683.678 1568.63,683.678 1569.19,683.678 1569.75,683.678 1570.31,683.678 1570.87,683.678 1571.43,683.678 1571.99,683.678 1572.55,683.678 1573.1,683.678 1573.66,683.678 1574.22,683.678 1574.78,683.678 1575.34,683.678 1575.9,683.678 1576.46,683.678 1577.02,683.678 1577.58,683.678 1578.14,683.678 1578.7,683.678 1579.26,683.678 1579.82,683.678 1580.37,683.678 1580.93,683.678 1581.49,683.678 1582.05,683.678 1582.61,683.678 1583.17,683.678 1583.73,683.678 1584.29,683.678 1584.85,683.678 1585.41,683.678 1585.97,683.678 1586.53,683.678 1587.09,683.678 1587.65,683.678 1588.2,683.678 1588.76,683.678 1589.32,683.678 1589.88,683.678 1590.44,683.678 1591,683.678 1591.56,683.678 1592.12,683.678 1592.68,683.678 1593.24,683.678 1593.8,683.678 1594.36,683.678 1594.92,683.678 1595.47,683.678 1596.03,683.678 1596.59,683.678 1597.15,683.678 1597.71,683.678 1598.27,683.678 1598.83,683.678 1599.39,683.678 1599.95,683.678 1600.51,683.678 1601.07,683.678 1601.63,683.678 1602.19,683.678 1602.74,683.678 1603.3,683.678 1603.86,683.678 1604.42,683.678 1604.98,683.678 1605.54,683.678 1606.1,683.678 1606.66,683.678 1607.22,683.678 1607.78,683.678 1608.34,683.678 1608.9,683.678 1609.46,683.678 1610.02,683.678 1610.57,683.678 1611.13,683.678 1611.69,683.678 1612.25,683.678 1612.81,683.678 1613.37,683.678 1613.93,683.678 1614.49,683.678 1615.05,683.678 1615.61,683.678 1616.17,683.678 1616.73,683.678 1617.29,683.678 1617.84,683.678 1618.4,683.678 1618.96,683.678 1619.52,683.678 1620.08,683.678 1620.64,683.678 1621.2,683.678 1621.76,683.678 1622.32,683.678 1622.88,683.678 1623.44,683.678 1624,683.678 1624.56,683.678 1625.11,683.678 1625.67,683.678 1626.23,683.678 1626.79,683.678 1627.35,683.678 1627.91,683.678 1628.47,683.678 1629.03,683.678 1629.59,683.678 1630.15,683.678 1630.71,683.678 1631.27,683.678 1631.83,683.678 1632.39,683.678 1632.94,683.678 1633.5,683.678 1634.06,683.678 1634.62,683.678 1635.18,683.678 1635.74,683.678 1636.3,683.678 1636.86,683.678 1637.42,683.678 1637.98,683.678 1638.54,683.678 1639.1,683.678 1639.66,683.678 1640.21,683.678 1640.77,683.678 1641.33,683.678 1641.89,683.678 1642.45,683.678 1643.01,683.678 1643.57,683.678 1644.13,683.678 1644.69,683.678 1645.25,683.678 1645.81,683.678 1646.37,683.678 1646.93,683.678 1647.48,683.678 1648.04,683.678 1648.6,683.678 1649.16,683.678 1649.72,683.678 1650.28,683.678 1650.84,683.678 1651.4,683.678 1651.96,683.678 1652.52,683.678 1653.08,683.678 1653.64,683.678 1654.2,683.678 1654.76,683.678 1655.31,683.678 1655.87,683.678 1656.43,683.678 1656.99,683.678 1657.55,683.678 1658.11,683.678 1658.67,683.678 1659.23,683.678 1659.79,683.678 1660.35,683.678 1660.91,683.678 1661.47,683.678 1662.03,683.678 1662.58,683.678 1663.14,683.678 1663.7,683.678 1664.26,683.678 1664.82,683.678 1665.38,683.678 1665.94,683.678 1666.5,683.678 1667.06,683.678 1667.62,683.678 1668.18,683.678 1668.74,683.678 1669.3,683.678 1669.85,683.678 1670.41,683.678 1670.97,683.678 1671.53,683.678 1672.09,683.678 1672.65,683.678 1673.21,683.678 1673.77,683.678 1674.33,683.678 1674.89,683.678 1675.45,683.678 1676.01,683.678 1676.57,683.678 1677.13,683.678 1677.68,683.678 1678.24,683.678 1678.8,683.678 1679.36,683.678 1679.92,683.678 1680.48,683.678 1681.04,683.678 1681.6,683.678 1682.16,683.678 1682.72,683.678 1683.28,683.678 1683.84,683.678 1684.4,683.678 1684.95,683.678 1685.51,683.678 1686.07,683.678 1686.63,683.678 1687.19,683.678 1687.75,683.678 1688.31,683.678 1688.87,683.678 1689.43,683.678 1689.99,683.678 1690.55,683.678 1691.11,683.678 1691.67,683.678 1692.23,683.678 1692.78,683.678 1693.34,683.678 1693.9,683.678 1694.46,683.678 1695.02,683.678 1695.58,683.678 1696.14,683.678 1696.7,683.678 1697.26,683.678 1697.82,683.678 1698.38,683.678 1698.94,683.678 1699.5,683.678 1700.05,683.678 1700.61,683.678 1701.17,683.678 1701.73,683.678 1702.29,683.678 1702.85,683.678 1703.41,683.678 1703.97,683.678 1704.53,683.678 1705.09,683.678 1705.65,683.678 1706.21,683.678 1706.77,683.678 1707.32,683.678 1707.88,683.678 1708.44,683.678 1709,683.678 1709.56,683.678 1710.12,683.678 1710.68,683.678 1711.24,683.678 1711.8,683.678 1712.36,683.678 1712.92,683.678 1713.48,683.678 1714.04,683.678 1714.6,683.678 1715.15,683.678 1715.71,683.678 1716.27,683.678 1716.83,683.678 1717.39,683.678 1717.95,683.678 1718.51,683.678 1719.07,683.678 1719.63,683.678 1720.19,683.678 1720.75,683.678 1721.31,683.678 1721.87,683.678 1722.42,683.678 1722.98,683.678 1723.54,683.678 1724.1,683.678 1724.66,683.678 1725.22,683.678 1725.78,683.678 1726.34,683.678 1726.9,683.678 1727.46,683.678 1728.02,683.678 1728.58,683.678 1729.14,683.678 1729.69,683.678 1730.25,683.678 1730.81,683.678 1731.37,683.678 1731.93,683.678 1732.49,683.678 1733.05,683.678 1733.61,683.678 1734.17,683.678 1734.73,683.678 1735.29,683.678 1735.85,683.678 1736.41,683.678 1736.97,683.678 1737.52,683.678 1738.08,683.678 1738.64,683.678 1739.2,683.678 1739.76,683.678 1740.32,683.678 1740.88,683.678 1741.44,683.678 1742,683.678 1742.56,683.678 1743.12,683.678 1743.68,683.678 1744.24,683.678 1744.79,683.678 1745.35,683.678 1745.91,683.678 1746.47,683.678 1747.03,683.678 1747.59,683.678 1748.15,683.678 1748.71,683.678 1749.27,683.678 1749.83,683.678 1750.39,683.678 1750.95,683.678 1751.51,683.678 1752.06,683.678 1752.62,683.678 1753.18,683.678 1753.74,683.678 1754.3,683.678 1754.86,683.678 1755.42,683.678 1755.98,683.678 1756.54,683.678 1757.1,683.678 1757.66,683.678 1758.22,683.678 1758.78,683.678 1759.34,683.678 1759.89,683.678 1760.45,683.678 1761.01,683.678 1761.57,683.678 1762.13,683.678 1762.69,683.678 1763.25,683.678 1763.81,683.678 1764.37,683.678 1764.93,683.678 1765.49,683.678 1766.05,683.678 1766.61,683.678 1767.16,683.678 1767.72,683.678 1768.28,683.678 1768.84,683.678 1769.4,683.678 1769.96,683.678 1770.52,683.678 1771.08,683.678 1771.64,683.678 1772.2,683.678 1772.76,683.678 1773.32,683.678 1773.88,683.678 1774.43,683.678 1774.99,683.678 1775.55,683.678 1776.11,683.678 1776.67,683.678 1777.23,683.678 1777.79,683.678 1778.35,683.678 1778.91,683.678 1779.47,683.678 1780.03,683.678 1780.59,683.678 1781.15,683.678 1781.71,683.678 1782.26,683.678 1782.82,683.678 1783.38,683.678 1783.94,683.678 1784.5,683.678 1785.06,683.678 1785.62,683.678 1786.18,683.678 1786.74,683.678 1787.3,683.678 1787.86,683.678 1788.42,683.678 1788.98,683.678 1789.53,683.678 1790.09,683.678 1790.65,683.678 1791.21,683.678 1791.77,683.678 1792.33,683.678 1792.89,683.678 1793.45,683.678 1794.01,683.678 1794.57,683.678 1795.13,683.678 1795.69,683.678 1796.25,683.678 1796.8,683.678 1797.36,683.678 1797.92,683.678 1798.48,683.678 1799.04,683.678 1799.6,683.678 1800.16,683.678 1800.72,683.678 1801.28,683.678 1801.84,683.678 1802.4,683.678 1802.96,683.678 1803.52,683.678 1804.08,683.678 1804.63,683.678 1805.19,683.678 1805.75,683.678 1806.31,683.678 1806.87,683.678 1807.43,683.678 1807.99,683.678 1808.55,683.678 1809.11,683.678 1809.67,683.678 1810.23,683.678 1810.79,683.678 1811.35,683.678 1811.9,683.678 1812.46,683.678 1813.02,683.678 1813.58,683.678 1814.14,683.678 1814.7,683.678 1815.26,683.678 1815.82,683.678 1816.38,683.678 1816.94,683.678 1817.5,683.678 1818.06,683.678 1818.62,683.678 1819.18,683.678 1819.73,683.678 1820.29,683.678 1820.85,683.678 1821.41,683.678 1821.97,683.678 1822.53,683.678 1823.09,683.678 1823.65,683.678 1824.21,683.678 1824.77,683.678 1825.33,683.678 1825.89,683.678 1826.45,683.678 1827,683.678 1827.56,683.678 1828.12,683.678 1828.68,683.678 1829.24,683.678 1829.8,683.678 1830.36,683.678 1830.92,683.678 1831.48,683.678 1832.04,683.678 1832.6,683.678 1833.16,683.678 1833.72,683.678 1834.27,683.678 1834.83,683.678 1835.39,683.678 1835.95,683.678 1836.51,683.678 1837.07,683.678 1837.63,683.678 1838.19,683.678 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037721357366104 ± 0.020271510978365614\nProjected Energy: -4.0155534964247055 ± (0.004408668039808994, 0.004184753189585777)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.14891</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.7971e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.0888e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5479e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.547e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.594e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3897e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.363124291613344\n -0.7590191922770888\n  0.13584182219622498\n  0.15789998694607377\n  0.8767114411781378\n  1.5305929970973242\n  1.583573261186749\n  3.072870330325869\n  3.125672653951839\n  4.862107221562174\n  6.260694850380596\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
