var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21215781673918843 ± 0.0012561201399675088\n   G2(1) = 0.9165936511472618 ± 0.0007840529191602309\n   G2(2) = 0.9827408401825662 ± 0.0004960491505899739\n   G2(3) = 0.9891732006011554 ± 0.0008600923537732105\n   G2(4) = 0.9827408401825662 ± 0.0004960491505899739\n   G2(5) = 0.9165936511472618 ± 0.0007840529191602309\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.021382582480024 ± 0.12882940517197036\n   Replica 2: -4.067885601418244 ± 0.12634042999708414\n   Replica 3: -3.989880766207527 ± 0.137140165506727\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.38 2211.02,1003.38 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.933 2211.02,745.933 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.487 2211.02,488.487 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.04 2211.02,231.04 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.38 423.181,1003.38 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.933 423.181,745.933 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.487 423.181,488.487 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.04 423.181,231.04 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M290.043 1016.72 L306.363 1016.72 L306.363 1020.66 L284.418 1020.66 L284.418 1016.72 Q287.08 1013.97 291.664 1009.34 Q296.27 1004.69 297.451 1003.35 Q299.696 1000.82 300.576 999.086 Q301.478 997.327 301.478 995.637 Q301.478 992.882 299.534 991.146 Q297.613 989.41 294.511 989.41 Q292.312 989.41 289.858 990.174 Q287.427 990.938 284.65 992.489 L284.65 987.766 Q287.474 986.632 289.927 986.053 Q292.381 985.475 294.418 985.475 Q299.789 985.475 302.983 988.16 Q306.177 990.845 306.177 995.336 Q306.177 997.465 305.367 999.387 Q304.58 1001.28 302.474 1003.88 Q301.895 1004.55 298.793 1007.77 Q295.691 1010.96 290.043 1016.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M316.224 986.1 L334.58 986.1 L334.58 990.035 L320.506 990.035 L320.506 998.507 Q321.524 998.16 322.543 997.998 Q323.562 997.813 324.58 997.813 Q330.367 997.813 333.747 1000.98 Q337.126 1004.16 337.126 1009.57 Q337.126 1015.15 333.654 1018.25 Q330.182 1021.33 323.862 1021.33 Q321.687 1021.33 319.418 1020.96 Q317.173 1020.59 314.765 1019.85 L314.765 1015.15 Q316.849 1016.28 319.071 1016.84 Q321.293 1017.4 323.77 1017.4 Q327.774 1017.4 330.112 1015.29 Q332.45 1013.18 332.45 1009.57 Q332.45 1005.96 330.112 1003.85 Q327.774 1001.75 323.77 1001.75 Q321.895 1001.75 320.02 1002.16 Q318.168 1002.58 316.224 1003.46 L316.224 986.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M356.339 989.178 Q352.728 989.178 350.899 992.743 Q349.094 996.285 349.094 1003.41 Q349.094 1010.52 350.899 1014.09 Q352.728 1017.63 356.339 1017.63 Q359.973 1017.63 361.779 1014.09 Q363.608 1010.52 363.608 1003.41 Q363.608 996.285 361.779 992.743 Q359.973 989.178 356.339 989.178 M356.339 985.475 Q362.149 985.475 365.205 990.081 Q368.284 994.665 368.284 1003.41 Q368.284 1012.14 365.205 1016.75 Q362.149 1021.33 356.339 1021.33 Q350.529 1021.33 347.45 1016.75 Q344.395 1012.14 344.395 1003.41 Q344.395 994.665 347.45 990.081 Q350.529 985.475 356.339 985.475 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M286.062 728.653 L304.418 728.653 L304.418 732.588 L290.344 732.588 L290.344 741.06 Q291.363 740.713 292.381 740.551 Q293.4 740.366 294.418 740.366 Q300.205 740.366 303.585 743.537 Q306.964 746.709 306.964 752.125 Q306.964 757.704 303.492 760.806 Q300.02 763.884 293.701 763.884 Q291.525 763.884 289.256 763.514 Q287.011 763.144 284.603 762.403 L284.603 757.704 Q286.687 758.838 288.909 759.394 Q291.131 759.949 293.608 759.949 Q297.613 759.949 299.951 757.843 Q302.288 755.736 302.288 752.125 Q302.288 748.514 299.951 746.408 Q297.613 744.301 293.608 744.301 Q291.733 744.301 289.858 744.718 Q288.006 745.135 286.062 746.014 L286.062 728.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M326.177 731.732 Q322.566 731.732 320.737 735.297 Q318.932 738.838 318.932 745.968 Q318.932 753.074 320.737 756.639 Q322.566 760.181 326.177 760.181 Q329.811 760.181 331.617 756.639 Q333.446 753.074 333.446 745.968 Q333.446 738.838 331.617 735.297 Q329.811 731.732 326.177 731.732 M326.177 728.028 Q331.987 728.028 335.043 732.635 Q338.122 737.218 338.122 745.968 Q338.122 754.695 335.043 759.301 Q331.987 763.884 326.177 763.884 Q320.367 763.884 317.288 759.301 Q314.233 754.695 314.233 745.968 Q314.233 737.218 317.288 732.635 Q320.367 728.028 326.177 728.028 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M356.339 731.732 Q352.728 731.732 350.899 735.297 Q349.094 738.838 349.094 745.968 Q349.094 753.074 350.899 756.639 Q352.728 760.181 356.339 760.181 Q359.973 760.181 361.779 756.639 Q363.608 753.074 363.608 745.968 Q363.608 738.838 361.779 735.297 Q359.973 731.732 356.339 731.732 M356.339 728.028 Q362.149 728.028 365.205 732.635 Q368.284 737.218 368.284 745.968 Q368.284 754.695 365.205 759.301 Q362.149 763.884 356.339 763.884 Q350.529 763.884 347.45 759.301 Q344.395 754.695 344.395 745.968 Q344.395 737.218 347.45 732.635 Q350.529 728.028 356.339 728.028 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M284.835 471.207 L307.057 471.207 L307.057 473.197 L294.511 505.767 L289.627 505.767 L301.432 475.142 L284.835 475.142 L284.835 471.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M316.224 471.207 L334.58 471.207 L334.58 475.142 L320.506 475.142 L320.506 483.614 Q321.524 483.267 322.543 483.105 Q323.562 482.919 324.58 482.919 Q330.367 482.919 333.747 486.091 Q337.126 489.262 337.126 494.679 Q337.126 500.257 333.654 503.359 Q330.182 506.438 323.862 506.438 Q321.687 506.438 319.418 506.067 Q317.173 505.697 314.765 504.956 L314.765 500.257 Q316.849 501.392 319.071 501.947 Q321.293 502.503 323.77 502.503 Q327.774 502.503 330.112 500.396 Q332.45 498.29 332.45 494.679 Q332.45 491.068 330.112 488.961 Q327.774 486.855 323.77 486.855 Q321.895 486.855 320.02 487.271 Q318.168 487.688 316.224 488.568 L316.224 471.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M356.339 474.285 Q352.728 474.285 350.899 477.85 Q349.094 481.392 349.094 488.521 Q349.094 495.628 350.899 499.192 Q352.728 502.734 356.339 502.734 Q359.973 502.734 361.779 499.192 Q363.608 495.628 363.608 488.521 Q363.608 481.392 361.779 477.85 Q359.973 474.285 356.339 474.285 M356.339 470.582 Q362.149 470.582 365.205 475.188 Q368.284 479.771 368.284 488.521 Q368.284 497.248 365.205 501.854 Q362.149 506.438 356.339 506.438 Q350.529 506.438 347.45 501.854 Q344.395 497.248 344.395 488.521 Q344.395 479.771 347.45 475.188 Q350.529 470.582 356.339 470.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M256.664 244.385 L264.303 244.385 L264.303 218.019 L255.992 219.686 L255.992 215.427 L264.256 213.76 L268.932 213.76 L268.932 244.385 L276.571 244.385 L276.571 248.32 L256.664 248.32 L256.664 244.385 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M296.015 216.839 Q292.404 216.839 290.576 220.403 Q288.77 223.945 288.77 231.075 Q288.77 238.181 290.576 241.746 Q292.404 245.287 296.015 245.287 Q299.65 245.287 301.455 241.746 Q303.284 238.181 303.284 231.075 Q303.284 223.945 301.455 220.403 Q299.65 216.839 296.015 216.839 M296.015 213.135 Q301.826 213.135 304.881 217.741 Q307.96 222.325 307.96 231.075 Q307.96 239.801 304.881 244.408 Q301.826 248.991 296.015 248.991 Q290.205 248.991 287.127 244.408 Q284.071 239.801 284.071 231.075 Q284.071 222.325 287.127 217.741 Q290.205 213.135 296.015 213.135 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M326.177 216.839 Q322.566 216.839 320.737 220.403 Q318.932 223.945 318.932 231.075 Q318.932 238.181 320.737 241.746 Q322.566 245.287 326.177 245.287 Q329.811 245.287 331.617 241.746 Q333.446 238.181 333.446 231.075 Q333.446 223.945 331.617 220.403 Q329.811 216.839 326.177 216.839 M326.177 213.135 Q331.987 213.135 335.043 217.741 Q338.122 222.325 338.122 231.075 Q338.122 239.801 335.043 244.408 Q331.987 248.991 326.177 248.991 Q320.367 248.991 317.288 244.408 Q314.233 239.801 314.233 231.075 Q314.233 222.325 317.288 217.741 Q320.367 213.135 326.177 213.135 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M356.339 216.839 Q352.728 216.839 350.899 220.403 Q349.094 223.945 349.094 231.075 Q349.094 238.181 350.899 241.746 Q352.728 245.287 356.339 245.287 Q359.973 245.287 361.779 241.746 Q363.608 238.181 363.608 231.075 Q363.608 223.945 361.779 220.403 Q359.973 216.839 356.339 216.839 M356.339 213.135 Q362.149 213.135 365.205 217.741 Q368.284 222.325 368.284 231.075 Q368.284 239.801 365.205 244.408 Q362.149 248.991 356.339 248.991 Q350.529 248.991 347.45 244.408 Q344.395 239.801 344.395 231.075 Q344.395 222.325 347.45 217.741 Q350.529 213.135 356.339 213.135 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.04 4017.76,231.04 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1247.61 459.964,1247.09 460.533,1245.48 461.101,1244.85 461.669,1244.14 462.238,1243.33 462.806,1242.45 463.375,1241.47 463.943,1240.41 464.511,1239.24 465.08,1237.95 465.648,1236.57 466.216,1234.05 466.785,1232.43 467.353,1230.73 467.921,1228.89 468.49,1225.87 469.058,1222.72 469.626,1220.41 470.195,1216.9 470.763,1214.26 471.331,1211.46 471.9,1207.43 472.468,1204.22 473.036,1199.83 473.605,1195.27 474.173,1191.52 474.741,1186.52 475.31,1181.23 475.878,1176.81 476.446,1172.22 477.015,1167.44 477.583,1162.41 478.152,1153.01 478.72,1147.47 479.288,1141.6 479.857,1135.62 480.425,1129.42 480.993,1120.97 481.562,1114.26 482.13,1105.29 482.698,1098.26 483.267,1090.05 483.835,1081.4 484.403,1072.69 484.972,1064.79 485.54,1056.78 486.108,1047.46 486.677,1036.05 487.245,1026.63 487.813,1017.08 488.382,1008.43 488.95,999.53 489.518,988.379 490.087,978.428 490.655,968.204 491.224,958.998 491.792,946.339 492.36,933.678 492.929,923.29 493.497,912.827 494.065,902.181 494.634,887.473 495.202,876.125 495.77,865.702 496.339,854.117 496.907,842.886 497.475,833.623 498.044,821.413 498.612,812.356 499.18,802.118 499.749,792.086 500.317,779.962 500.885,770.003 501.454,759.127 502.022,748.219 502.59,737.344 503.159,724.671 503.727,715.187 504.295,703.854 504.864,695.625 505.432,686.489 506.001,678.539 506.569,669.475 507.137,659.428 507.706,649.538 508.274,641.015 508.842,633.467 509.411,624.929 509.979,616.427 510.547,607.026 511.116,598.875 511.684,588.886 512.252,581.991 512.821,573.3 513.389,565.744 513.957,559.342 514.526,550.002 515.094,540.891 515.662,535.081 516.231,529.263 516.799,523.507 517.367,515.756 517.936,510.255 518.504,502.61 519.072,496.357 519.641,488.025 520.209,481.033 520.778,476.185 521.346,472.428 521.914,466.738 522.483,462.2 523.051,455.456 523.619,450.924 524.188,446.487 524.756,442.182 525.324,435.871 525.893,427.684 526.461,421.815 527.029,418.213 527.598,414.57 528.166,409.934 528.734,405.545 529.303,400.254 529.871,395.985 530.439,388.8 531.008,385.998 531.576,384.102 532.144,381.118 532.713,376.422 533.281,371.675 533.85,367.127 534.418,362.51 534.986,358.119 535.555,355.92 536.123,353.802 536.691,349.638 537.26,347.464 537.828,344.484 538.396,342.765 538.965,337.834 539.533,336.289 540.101,332.685 540.67,330.852 541.238,327.165 541.806,324.696 542.375,320.218 542.943,316.918 543.511,315.899 544.08,314.978 544.648,313.944 545.216,310.896 545.785,309.789 546.353,305.836 546.921,305.202 547.49,304.251 548.058,304.289 548.627,302.311 549.195,300.378 549.763,298.653 550.332,299.018 550.9,297.06 551.468,298.186 552.037,296.21 552.605,294.115 553.173,292.6 553.742,291.697 554.31,290.87 554.878,289.289 555.447,289.391 556.015,286.532 556.583,284.972 557.152,283.515 557.72,283.128 558.288,281.289 558.857,281.913 559.425,282.416 559.993,279.623 560.562,279.239 561.13,276.871 561.698,276.606 562.267,274.218 562.835,275.65 563.404,275.09 563.972,273.527 564.54,271.125 565.109,270.587 565.677,270.364 566.245,270.265 566.814,266.78 567.382,266.372 567.95,266.052 568.519,264.856 569.087,263.358 569.655,264.209 570.224,263.88 570.792,262.658 571.36,262.434 571.929,263.213 572.497,262.927 573.065,263.788 573.634,262.254 574.202,261.111 574.77,258.752 575.339,258.525 575.907,259.426 576.476,257.29 577.044,253.132 577.612,253.286 578.181,252.305 578.749,252.336 579.317,251.401 579.886,251.851 580.454,251.152 581.022,251.277 581.591,247.408 582.159,248.024 582.727,249.075 583.296,250.442 583.864,250.84 584.432,250.171 585.001,248.378 585.569,247.634 586.137,249.099 586.706,249.375 587.274,250.573 587.842,249.598 588.411,248.747 588.979,246.742 589.547,246.14 590.116,250.704 590.684,251.591 591.253,253.422 591.821,254.434 592.389,251.905 592.958,251.56 593.526,251.346 594.094,252.156 594.663,251.828 595.231,252.665 595.799,251.24 596.368,251.167 596.936,253.089 597.504,251.588 598.073,251.254 598.641,250.012 599.209,249.817 599.778,249.553 600.346,249.357 600.914,248.974 601.483,249.873 602.051,246.363 602.619,247.458 603.188,246.154 603.756,247.007 604.325,244.774 604.893,239.72 605.461,237.97 606.03,237.296 606.598,237.881 607.166,238.288 607.735,239.898 608.303,240.246 608.871,239.65 609.44,238.149 610.008,237.689 610.576,240.13 611.145,241.503 611.713,244.85 612.281,246.002 612.85,244.7 613.418,245.642 613.986,244.595 614.555,243.47 615.123,241.276 615.691,240.471 616.26,240.719 616.828,239.83 617.396,237.952 617.965,239.116 618.533,238.472 619.102,238.508 619.67,237.774 620.238,236.031 620.807,234.339 621.375,233.827 621.943,235.509 622.512,234.824 623.08,235.273 623.648,235.736 624.217,238.199 624.785,238.402 625.353,239.64 625.922,239.753 626.49,239.042 627.058,238.217 627.627,238.43 628.195,235.798 628.763,237 629.332,236.277 629.9,235.793 630.468,235.134 631.037,234.437 631.605,234.785 632.173,235.237 632.742,236.726 633.31,237.17 633.879,235.24 634.447,235.872 635.015,236.159 635.584,237.534 636.152,237.929 636.72,238.263 637.289,238.508 637.857,239.491 638.425,239.709 638.994,239.79 639.562,239.593 640.13,238.717 640.699,237.832 641.267,239.044 641.835,238.117 642.404,238.509 642.972,236.516 643.54,236.712 644.109,235.963 644.677,236.236 645.245,236.317 645.814,238.646 646.382,238.614 646.951,239.89 647.519,238.704 648.087,238.809 648.656,240.126 649.224,240.225 649.792,240.109 650.361,242.046 650.929,241.729 651.497,243.51 652.066,242.101 652.634,242.986 653.202,242.582 653.771,242.146 654.339,240.719 654.907,239.582 655.476,240.301 656.044,240.244 656.612,239.839 657.181,239.598 657.749,238.419 658.317,238.159 658.886,237.101 659.454,235.952 660.022,236.065 660.591,236.127 661.159,235.205 661.728,236.333 662.296,236.519 662.864,235.563 663.433,234.618 664.001,234.905 664.569,235.158 665.138,234.317 665.706,236.414 666.274,235.286 666.843,234.166 667.411,233.234 667.979,233.538 668.548,231.674 669.116,233.114 669.684,232.803 670.253,233.08 670.821,233.578 671.389,234.955 671.958,234.161 672.526,234.006 673.094,234.938 673.663,236.063 674.231,234.918 674.799,236.138 675.368,237.169 675.936,238.23 676.505,237.063 677.073,236.284 677.641,237.343 678.21,237.324 678.778,238.464 679.346,239.367 679.915,237.13 680.483,233.196 681.051,232.396 681.62,231.853 682.188,231.221 682.756,230.23 683.325,230.693 683.893,232.157 684.461,232.464 685.03,231.732 685.598,231.046 686.166,232.3 686.735,231.52 687.303,232.899 687.871,232.939 688.44,233.35 689.008,232.655 689.577,233.942 690.145,235.11 690.713,235.257 691.282,235.309 691.85,235.492 692.418,234.554 692.987,236.743 693.555,236.654 694.123,236.515 694.692,235.498 695.26,234.285 695.828,235.218 696.397,234.203 696.965,233.263 697.533,232.583 698.102,233.069 698.67,234.302 699.238,234.398 699.807,234.179 700.375,233.39 700.943,230.385 701.512,231.924 702.08,232.211 702.648,232.347 703.217,233.335 703.785,233.566 704.354,235.716 704.922,235.817 705.49,237.768 706.059,236.693 706.627,235.607 707.195,236.63 707.764,235.415 708.332,235.268 708.9,235.192 709.469,235.231 710.037,234.219 710.605,237.248 711.174,238.035 711.742,236.835 712.31,236.427 712.879,238.37 713.447,237.032 714.015,236.83 714.584,236.707 715.152,236.867 715.72,237.812 716.289,238.668 716.857,236.412 717.425,236.23 717.994,236.216 718.562,236.032 719.131,232.987 719.699,233.284 720.267,234.083 720.836,232.306 721.404,233.635 721.972,234.586 722.541,234.565 723.109,232.368 723.677,232.324 724.246,230.422 724.814,232.765 725.382,230.788 725.951,230.998 726.519,231.194 727.087,230.544 727.656,225.641 728.224,225.225 728.792,223.605 729.361,224.24 729.929,224.18 730.497,225.075 731.066,226.721 731.634,225.147 732.203,226.995 732.771,230.762 733.339,231.247 733.908,230.346 734.476,231.444 735.044,230.538 735.613,230.864 736.181,233.382 736.749,232.253 737.318,235.694 737.886,235.655 738.454,236.865 739.023,237.696 739.591,239.438 740.159,240.249 740.728,239.605 741.296,238.304 741.864,236.825 742.433,236.58 743.001,235.45 743.569,236.442 744.138,235.135 744.706,233.095 745.274,233.041 745.843,234.99 746.411,235.962 746.98,235.742 747.548,235.536 748.116,235.519 748.685,234.283 749.253,234.275 749.821,234.05 750.39,234.018 750.958,235.939 751.526,236.673 752.095,238.508 752.663,239.096 753.231,236.482 753.8,236.132 754.368,234.988 754.936,233.839 755.505,234.979 756.073,233.778 756.641,235.927 757.21,235.449 757.778,234.373 758.346,235.237 758.915,235.076 759.483,235.919 760.052,234.57 760.62,234.32 761.188,232.21 761.757,231.116 762.325,230.016 762.893,226.714 763.462,226.224 764.03,225.581 764.598,225.368 765.167,225.957 765.735,227.653 766.303,228.096 766.872,226.397 767.44,228.83 768.008,228.052 768.577,229.425 769.145,228.674 769.713,230.115 770.282,228.161 770.85,229.589 771.418,225.857 771.987,224.235 772.555,223.887 773.123,224.558 773.692,225.082 774.26,225.426 774.829,228.191 775.397,229.606 775.965,229.904 776.534,229.142 777.102,231.671 777.67,233.919 778.239,231.927 778.807,234.424 779.375,233.411 779.944,233.485 780.512,235.661 781.08,233.72 781.649,234.814 782.217,236.841 782.785,235.711 783.354,234.622 783.922,233.464 784.49,232.52 785.059,233.683 785.627,233.567 786.195,232.357 786.764,233.376 787.332,233.537 787.9,233.481 788.469,234.409 789.037,233.369 789.606,234.275 790.174,235.283 790.742,235.11 791.311,235.838 791.879,235.615 792.447,236.566 793.016,234.354 793.584,234.372 794.152,232.003 794.721,232.058 795.289,230.98 795.857,230.214 796.426,234.486 796.994,234.491 797.562,237.352 798.131,239.206 798.699,238.655 799.267,238.295 799.836,238.029 800.404,238.512 800.972,237.995 801.541,236.476 802.109,236.265 802.678,237.03 803.246,236.642 803.814,237.492 804.383,236.907 804.951,236.707 805.519,234.391 806.088,233.111 806.656,233.952 807.224,235.074 807.793,234.593 808.361,233.354 808.929,232.235 809.498,232.257 810.066,234.499 810.634,236.083 811.203,236.657 811.771,234.207 812.339,236.135 812.908,236.79 813.476,239.234 814.044,238.805 814.613,236.09 815.181,236.887 815.749,233.502 816.318,234.279 816.886,232.963 817.455,231.656 818.023,231.627 818.591,231.545 819.16,231.381 819.728,231.179 820.296,231.139 820.865,232.012 821.433,229.765 822.001,230.822 822.57,230.601 823.138,228.396 823.706,230.696 824.275,230.834 824.843,232.015 825.411,232.04 825.98,233.947 826.548,233.689 827.116,232.655 827.685,230.52 828.253,232.69 828.821,231.619 829.39,231.513 829.958,230.539 830.526,228.521 831.095,227.681 831.663,229.839 832.232,231.27 832.8,232.346 833.368,235.496 833.937,235.251 834.505,234.883 835.073,233.544 835.642,231.297 836.21,230.074 836.778,232.369 837.347,231.084 837.915,229.875 838.483,229.781 839.052,229.772 839.62,230.769 840.188,228.838 840.757,225.859 841.325,226.33 841.893,226.494 842.462,226.575 843.03,224.932 843.598,224.201 844.167,224.71 844.735,224.002 845.304,221.518 845.872,224.3 846.44,223.618 847.009,223.948 847.577,225.27 848.145,225.562 848.714,227.258 849.282,228.86 849.85,233.147 850.419,234.109 850.987,234.053 851.555,233.947 852.124,232.739 852.692,232.708 853.26,231.533 853.829,230.592 854.397,229.45 854.965,228.522 855.534,229.863 856.102,229.272 856.67,230.583 857.239,228.715 857.807,230.962 858.375,231.833 858.944,229.787 859.512,231.239 860.081,229.288 860.649,229.445 861.217,232.751 861.786,231.66 862.354,231.771 862.922,231.738 863.491,232.879 864.059,232.983 864.627,230.968 865.196,230.341 865.764,230.524 866.332,230.748 866.901,230.785 867.469,230.001 868.037,229.143 868.606,229.274 869.174,230.268 869.742,229.475 870.311,229.714 870.879,229.805 871.447,232.077 872.016,231.925 872.584,233.751 873.152,232.791 873.721,234.969 874.289,235.757 874.858,236.329 875.426,236.161 875.994,238.041 876.563,237.844 877.131,237.507 877.699,235.97 878.268,236.823 878.836,239.481 879.404,237.904 879.973,236.453 880.541,236.136 881.109,233.788 881.678,234.618 882.246,234.486 882.814,234.321 883.383,234.136 883.951,233.707 884.519,232.501 885.088,231.463 885.656,231.485 886.224,231.372 886.793,231.335 887.361,232.356 887.93,234.352 888.498,233.999 889.066,234.869 889.635,234.726 890.203,234.477 890.771,234.466 891.34,233.405 891.908,234.277 892.476,234.148 893.045,237.099 893.613,234.461 894.181,235.28 894.75,234.073 895.318,232.825 895.886,232.929 896.455,232.815 897.023,233.604 897.591,231.479 898.16,231.28 898.728,234.338 899.296,232.966 899.865,231.757 900.433,235.744 901.001,237.505 901.57,237.14 902.138,234.78 902.707,234.604 903.275,237.207 903.843,235.783 904.412,234.245 904.98,233.991 905.548,233.378 906.117,232.25 906.685,231.138 907.253,230.009 907.822,231.104 908.39,232.106 908.958,230.761 909.527,229.648 910.095,229.362 910.663,229.331 911.232,229.242 911.8,227.049 912.368,227.349 912.937,227.488 913.505,227.675 914.073,226.69 914.642,224.902 915.21,223.158 915.779,224.722 916.347,226.175 916.915,227.545 917.484,228.086 918.052,228.337 918.62,229.586 919.189,227.604 919.757,226.638 920.325,227.947 920.894,227.167 921.462,228.267 922.03,228.599 922.599,228.545 923.167,230.733 923.735,233.85 924.304,230.487 924.872,230.492 925.44,230.402 926.009,230.467 926.577,231.531 927.145,230.394 927.714,231.264 928.282,232.082 928.85,230.218 929.419,231.316 929.987,231.245 930.556,228.364 931.124,227.534 931.692,227.788 932.261,228.024 932.829,227.208 933.397,225.308 933.966,225.72 934.534,226.286 935.102,225.774 935.671,226.255 936.239,227.836 936.807,228.064 937.376,228.565 937.944,227.863 938.512,227.959 939.081,228.148 939.649,228.364 940.217,228.714 940.786,231.022 941.354,233.172 941.922,233.086 942.491,230.999 943.059,231.171 943.627,229.531 944.196,229.732 944.764,229.955 945.333,230.262 945.901,231.475 946.469,231.762 947.038,230.671 947.606,230.98 948.174,230.999 948.743,232.145 949.311,232.014 949.879,232.113 950.448,232.116 951.016,231.111 951.584,231.134 952.153,231.399 952.721,233.503 953.289,232.317 953.858,234.582 954.426,236.608 954.994,237.276 955.563,236.994 956.131,237.859 956.699,235.411 957.268,235.39 957.836,233.98 958.405,232.556 958.973,232.494 959.541,233.412 960.11,231.083 960.678,230.019 961.246,229.102 961.815,229.344 962.383,230.515 962.951,230.717 963.52,231.802 964.088,231.687 964.656,230.641 965.225,231.781 965.793,230.643 966.361,230.709 966.93,231.83 967.498,233.914 968.066,233.858 968.635,232.675 969.203,232.565 969.771,231.434 970.34,230.354 970.908,234.549 971.476,233.37 972.045,233.338 972.613,231.073 973.182,231.136 973.75,233.388 974.318,233.316 974.887,233.145 975.455,231.935 976.023,230.891 976.592,231.831 977.16,231.782 977.728,232.914 978.297,232.747 978.865,231.734 979.433,231.734 980.002,232.804 980.57,232.63 981.138,234.444 981.707,235.256 982.275,234.859 982.843,233.44 983.412,233.217 983.98,234.034 984.548,233.03 985.117,234.926 985.685,233.642 986.253,235.778 986.822,233.306 987.39,233.187 987.959,230.864 988.527,230.738 989.095,229.764 989.664,229.777 990.232,230.875 990.8,231.893 991.369,231.917 991.937,231.749 992.505,232.836 993.074,232.849 993.642,230.849 994.21,230.789 994.779,230.927 995.347,228.031 995.915,228.124 996.484,229.114 997.052,230.353 997.62,230.501 998.189,229.546 998.757,229.565 999.325,231.934 999.894,232.97 1000.46,231.762 1001.03,231.746 1001.6,231.583 1002.17,230.48 1002.74,232.54 1003.3,233.429 1003.87,234.106 1004.44,234.912 1005.01,234.509 1005.58,234.182 1006.15,233.056 1006.71,230.684 1007.28,231.652 1007.85,229.623 1008.42,230.612 1008.99,229.663 1009.56,228.8 1010.12,228.825 1010.69,228.939 1011.26,229.334 1011.83,228.508 1012.4,229.716 1012.97,229.975 1013.53,231.289 1014.1,231.251 1014.67,231.221 1015.24,229.116 1015.81,227.135 1016.38,228.409 1016.94,227.642 1017.51,226.759 1018.08,227.123 1018.65,225.359 1019.22,223.851 1019.79,225.773 1020.35,227.317 1020.92,228.627 1021.49,229.83 1022.06,229.007 1022.63,229.051 1023.2,228.052 1023.76,229.29 1024.33,228.531 1024.9,229.925 1025.47,229.004 1026.04,228.048 1026.61,229.434 1027.17,229.731 1027.74,230.861 1028.31,231.939 1028.88,232.019 1029.45,231.032 1030.02,230.054 1030.58,231.208 1031.15,229.122 1031.72,232.3 1032.29,232.21 1032.86,231.053 1033.43,232.029 1033.99,234.06 1034.56,233.889 1035.13,232.506 1035.7,233.296 1036.27,232.073 1036.84,232.172 1037.4,232.183 1037.97,236.423 1038.54,237.12 1039.11,238.693 1039.68,235.09 1040.25,233.865 1040.81,233.777 1041.38,233.565 1041.95,233.364 1042.52,233.251 1043.09,233.225 1043.66,231.98 1044.22,233.894 1044.79,233.487 1045.36,231.376 1045.93,232.527 1046.5,231.386 1047.07,231.371 1047.63,232.275 1048.2,230.271 1048.77,230.609 1049.34,231.577 1049.91,232.401 1050.48,231.174 1051.05,231.263 1051.61,230.171 1052.18,230.054 1052.75,228.843 1053.32,228.09 1053.89,227.32 1054.46,226.601 1055.02,228.935 1055.59,226.949 1056.16,226.267 1056.73,224.348 1057.3,223.965 1057.87,223.654 1058.43,223.975 1059,222.245 1059.57,222.915 1060.14,223.426 1060.71,223.916 1061.28,227.655 1061.84,226.949 1062.41,225.542 1062.98,227.224 1063.55,228.467 1064.12,228.878 1064.69,229.528 1065.25,230.875 1065.82,229.963 1066.39,230.054 1066.96,225.997 1067.53,228.521 1068.1,230.626 1068.66,230.878 1069.23,233.093 1069.8,234.219 1070.37,232.101 1070.94,234.347 1071.51,234.278 1072.07,235.179 1072.64,234.023 1073.21,230.728 1073.78,230.779 1074.35,231.826 1074.92,231.86 1075.48,229.057 1076.05,229.433 1076.62,229.566 1077.19,226.883 1077.76,227.294 1078.33,228.736 1078.89,228.97 1079.46,228.266 1080.03,228.581 1080.6,226.993 1081.17,228.485 1081.74,229.752 1082.3,231.03 1082.87,232.074 1083.44,233.411 1084.01,234.627 1084.58,234.459 1085.15,233.229 1085.71,235.448 1086.28,234.277 1086.85,234.302 1087.42,234.106 1087.99,233.974 1088.56,233.734 1089.12,233.645 1089.69,231.45 1090.26,233.579 1090.83,234.467 1091.4,235.106 1091.97,235.989 1092.53,233.472 1093.1,233.581 1093.67,233.606 1094.24,234.341 1094.81,234.039 1095.38,235.304 1095.94,235.253 1096.51,233.231 1097.08,233.037 1097.65,230.957 1098.22,232.743 1098.79,231.854 1099.35,232.963 1099.92,234.064 1100.49,235.932 1101.06,234.706 1101.63,237.459 1102.2,237.098 1102.76,237.846 1103.33,237.522 1103.9,236.338 1104.47,235.962 1105.04,232.508 1105.61,232.452 1106.17,231.31 1106.74,233.437 1107.31,232.423 1107.88,232.404 1108.45,232.341 1109.02,233.292 1109.58,233.126 1110.15,231.783 1110.72,232.052 1111.29,232.892 1111.86,231.692 1112.43,231.589 1112.99,233.709 1113.56,233.679 1114.13,232.683 1114.7,233.54 1115.27,232.364 1115.84,231.317 1116.4,231.04 1116.97,234.082 1117.54,233.832 1118.11,233.547 1118.68,230.349 1119.25,229.486 1119.81,228.795 1120.38,228.052 1120.95,228.194 1121.52,228.317 1122.09,226.489 1122.66,224.778 1123.23,226.224 1123.79,226.656 1124.36,223.674 1124.93,221.116 1125.5,222.798 1126.07,224.418 1126.64,226.941 1127.2,226.303 1127.77,229.897 1128.34,227.953 1128.91,232.287 1129.48,231.321 1130.05,231.294 1130.61,232.428 1131.18,234.39 1131.75,236.337 1132.32,238.254 1132.89,237.808 1133.46,233.335 1134.02,234.292 1134.59,234.142 1135.16,235.933 1135.73,238.641 1136.3,236.912 1136.87,235.51 1137.43,235.358 1138,237.092 1138.57,238.718 1139.14,239.244 1139.71,236.691 1140.28,236.203 1140.84,234.957 1141.41,235.527 1141.98,231.985 1142.55,231.795 1143.12,232.678 1143.69,233.372 1144.25,233.023 1144.82,234.84 1145.39,231.586 1145.96,233.455 1146.53,235.221 1147.1,234.69 1147.66,232.478 1148.23,231.994 1148.8,234.823 1149.37,234.285 1149.94,232.998 1150.51,231.629 1151.07,230.642 1151.64,230.434 1152.21,229.288 1152.78,231.316 1153.35,230.028 1153.92,229.73 1154.48,228.641 1155.05,229.774 1155.62,229.72 1156.19,229.623 1156.76,229.75 1157.33,227.863 1157.89,227.043 1158.46,226.044 1159.03,227.215 1159.6,229.574 1160.17,228.417 1160.74,226.625 1161.3,226.838 1161.87,226.935 1162.44,227.063 1163.01,226.945 1163.58,226.076 1164.15,228.388 1164.71,227.587 1165.28,228.753 1165.85,228.841 1166.42,229.993 1166.99,229.05 1167.56,228.185 1168.12,229.281 1168.69,226.498 1169.26,225.824 1169.83,226.437 1170.4,224.795 1170.97,226.363 1171.53,226.79 1172.1,228.209 1172.67,228.538 1173.24,230.982 1173.81,231.896 1174.38,230.818 1174.94,231.955 1175.51,232.007 1176.08,232.761 1176.65,232.643 1177.22,233.607 1177.79,233.484 1178.35,232.417 1178.92,232.304 1179.49,229.369 1180.06,229.639 1180.63,229.712 1181.2,230.76 1181.76,231.806 1182.33,229.719 1182.9,228.811 1183.47,228.96 1184.04,230.12 1184.61,228.261 1185.17,228.504 1185.74,227.813 1186.31,228.057 1186.88,229.528 1187.45,228.446 1188.02,228.764 1188.58,228.093 1189.15,230.18 1189.72,229.114 1190.29,227.198 1190.86,227.23 1191.43,228.526 1192,231.762 1192.56,230.857 1193.13,227.831 1193.7,229.095 1194.27,230.409 1194.84,232.462 1195.41,232.313 1195.97,232.299 1196.54,231.295 1197.11,230.275 1197.68,232.554 1198.25,231.616 1198.82,228.353 1199.38,228.479 1199.95,229.577 1200.52,230.005 1201.09,231.188 1201.66,233.398 1202.23,235.308 1202.79,235.116 1203.36,236.986 1203.93,236.826 1204.5,236.372 1205.07,234.983 1205.64,231.583 1206.2,231.632 1206.77,230.473 1207.34,228.471 1207.91,228.758 1208.48,230.966 1209.05,231.938 1209.61,231.797 1210.18,231.751 1210.75,231.683 1211.32,229.718 1211.89,230.054 1212.46,227.082 1213.02,228.555 1213.59,227.839 1214.16,231.18 1214.73,231.206 1215.3,232.303 1215.87,234.371 1216.43,232.34 1217,234.211 1217.57,231.898 1218.14,230.713 1218.71,230.859 1219.28,232.811 1219.84,233.79 1220.41,232.665 1220.98,231.551 1221.55,230.658 1222.12,230.805 1222.69,231.808 1223.25,232.57 1223.82,231.304 1224.39,231.381 1224.96,231.226 1225.53,234.236 1226.1,235.217 1226.66,234.898 1227.23,236.643 1227.8,235.027 1228.37,234.816 1228.94,236.664 1229.51,239.227 1230.07,235.479 1230.64,234.28 1231.21,234.148 1231.78,229.814 1232.35,231.727 1232.92,232.825 1233.48,233.758 1234.05,234.656 1234.62,235.332 1235.19,234.043 1235.76,233.751 1236.33,234.616 1236.89,233.361 1237.46,234.196 1238.03,233.037 1238.6,232.857 1239.17,234.028 1239.74,233.596 1240.3,232.176 1240.87,233 1241.44,231.77 1242.01,229.647 1242.58,229.718 1243.15,229.832 1243.71,231.841 1244.28,230.653 1244.85,228.443 1245.42,229.617 1245.99,230.647 1246.56,228.852 1247.12,228.984 1247.69,229.197 1248.26,231.138 1248.83,232.255 1249.4,230.149 1249.97,231.236 1250.53,232.179 1251.1,231.943 1251.67,230.86 1252.24,229.655 1252.81,227.561 1253.38,225.737 1253.94,222.069 1254.51,222.518 1255.08,223.041 1255.65,222.47 1256.22,224.142 1256.79,222.51 1257.35,224.295 1257.92,224.599 1258.49,226.36 1259.06,226.778 1259.63,228.249 1260.2,228.428 1260.76,227.787 1261.33,229.143 1261.9,229.033 1262.47,229.064 1263.04,230.332 1263.61,228.308 1264.18,227.379 1264.74,227.762 1265.31,229.9 1265.88,229.267 1266.45,228.578 1267.02,229.024 1267.59,230.328 1268.15,230.153 1268.72,231.236 1269.29,231.188 1269.86,232.407 1270.43,235.521 1271,236.208 1271.56,233.787 1272.13,233.498 1272.7,231.194 1273.27,232.121 1273.84,233.116 1274.41,233.157 1274.97,236.087 1275.54,235.915 1276.11,234.685 1276.68,233.758 1277.25,232.732 1277.82,233.971 1278.38,232.869 1278.95,232.812 1279.52,231.722 1280.09,232.873 1280.66,231.755 1281.23,228.542 1281.79,227.781 1282.36,229.085 1282.93,228.946 1283.5,229.208 1284.07,231.533 1284.64,230.622 1285.2,233.945 1285.77,235.759 1286.34,236.532 1286.91,237.188 1287.48,236.748 1288.05,237.474 1288.61,238.018 1289.18,236.389 1289.75,237.887 1290.32,238.329 1290.89,236.906 1291.46,234.532 1292.02,234.393 1292.59,234.244 1293.16,233.904 1293.73,232.419 1294.3,231.217 1294.87,230.181 1295.43,228.148 1296,225.239 1296.57,227.011 1297.14,229.223 1297.71,229.278 1298.28,228.379 1298.84,227.421 1299.41,228.785 1299.98,227.93 1300.55,228.076 1301.12,226.239 1301.69,226.645 1302.25,228.027 1302.82,230.276 1303.39,231.189 1303.96,232.204 1304.53,231.138 1305.1,232.28 1305.66,231.125 1306.23,231.069 1306.8,231.368 1307.37,232.605 1307.94,232.665 1308.51,233.626 1309.07,232.453 1309.64,230.264 1310.21,229.468 1310.78,230.731 1311.35,231.786 1311.92,232.708 1312.48,235.56 1313.05,236.139 1313.62,234.627 1314.19,236.312 1314.76,236.935 1315.33,236.6 1315.89,235.956 1316.46,234.226 1317.03,234.081 1317.6,232.586 1318.17,232.208 1318.74,231.245 1319.3,231.262 1319.87,232.42 1320.44,233.218 1321.01,233.875 1321.58,233.671 1322.15,232.477 1322.71,231.403 1323.28,230.424 1323.85,229.332 1324.42,231.514 1324.99,231.287 1325.56,231.351 1326.12,231.307 1326.69,232.36 1327.26,229.286 1327.83,230.338 1328.4,232.553 1328.97,232.477 1329.53,232.286 1330.1,233.234 1330.67,231.971 1331.24,230.704 1331.81,226.373 1332.38,226.771 1332.94,225.811 1333.51,225.07 1334.08,224.407 1334.65,223.889 1335.22,225.39 1335.79,224.999 1336.36,224.513 1336.92,226.768 1337.49,227.28 1338.06,225.359 1338.63,225.663 1339.2,226.128 1339.77,225.508 1340.33,224.925 1340.9,226.336 1341.47,225.763 1342.04,226.302 1342.61,226.643 1343.18,226.712 1343.74,226.062 1344.31,224.402 1344.88,225.858 1345.45,226.399 1346.02,228.952 1346.59,230.132 1347.15,230.331 1347.72,230.317 1348.29,230.508 1348.86,228.552 1349.43,230.061 1350,230.137 1350.56,228.341 1351.13,226.644 1351.7,226.986 1352.27,227.277 1352.84,227.563 1353.41,229.935 1353.97,230.202 1354.54,230.315 1355.11,231.479 1355.68,232.62 1356.25,231.112 1356.82,232.155 1357.38,234.458 1357.95,230.933 1358.52,231.184 1359.09,231.406 1359.66,231.412 1360.23,232.458 1360.79,232.531 1361.36,232.671 1361.93,231.807 1362.5,230.659 1363.07,231.796 1363.64,233.999 1364.2,233.737 1364.77,232.749 1365.34,234.773 1365.91,234.695 1366.48,235.599 1367.05,236.32 1367.61,237.117 1368.18,236.642 1368.75,236.205 1369.32,237.838 1369.89,235.405 1370.46,236.367 1371.02,235.832 1371.59,235.459 1372.16,235.159 1372.73,235.816 1373.3,236.571 1373.87,236.253 1374.43,236.914 1375,236.402 1375.57,235.762 1376.14,235.475 1376.71,235.164 1377.28,236.828 1377.84,236.3 1378.41,234.861 1378.98,234.572 1379.55,233.37 1380.12,232.994 1380.69,231.619 1381.25,231.6 1381.82,233.607 1382.39,234.31 1382.96,233.136 1383.53,232.951 1384.1,230.693 1384.66,228.654 1385.23,230.714 1385.8,230.585 1386.37,230.513 1386.94,231.556 1387.51,233.536 1388.07,230.216 1388.64,228.054 1389.21,225.373 1389.78,225.705 1390.35,226.957 1390.92,228.152 1391.48,231.249 1392.05,232.339 1392.62,233.203 1393.19,233.963 1393.76,232.849 1394.33,234.866 1394.89,236.569 1395.46,235.387 1396.03,236.954 1396.6,235.439 1397.17,232.953 1397.74,233.692 1398.3,232.414 1398.87,233.2 1399.44,233.779 1400.01,233.401 1400.58,234.092 1401.15,231.791 1401.71,231.631 1402.28,230.314 1402.85,230.279 1403.42,230.188 1403.99,228.168 1404.56,227.325 1405.13,225.555 1405.69,225.052 1406.26,226.524 1406.83,228.695 1407.4,228.822 1407.97,229.903 1408.54,228.845 1409.1,228.915 1409.67,230.114 1410.24,231.217 1410.81,231.079 1411.38,230.94 1411.95,230.869 1412.51,230.95 1413.08,228.66 1413.65,226.884 1414.22,226.001 1414.79,226.327 1415.36,225.657 1415.92,226.015 1416.49,227.302 1417.06,226.568 1417.63,226.791 1418.2,226.955 1418.77,228.179 1419.33,230.544 1419.9,233.519 1420.47,234.551 1421.04,234.357 1421.61,233.867 1422.18,233.751 1422.74,232.633 1423.31,231.484 1423.88,231.352 1424.45,232.113 1425.02,230.072 1425.59,229.2 1426.15,229.259 1426.72,228.279 1427.29,229.426 1427.86,230.638 1428.43,230.599 1429,230.474 1429.56,229.35 1430.13,229.4 1430.7,229.501 1431.27,229.53 1431.84,228.437 1432.41,230.471 1432.97,232.624 1433.54,231.444 1434.11,231.278 1434.68,233.476 1435.25,233.277 1435.82,231.961 1436.38,232.021 1436.95,232.034 1437.52,232.813 1438.09,231.67 1438.66,231.611 1439.23,232.326 1439.79,233.203 1440.36,232.924 1440.93,234.656 1441.5,235.296 1442.07,234.986 1442.64,234.7 1443.2,234.522 1443.77,233.239 1444.34,232.989 1444.91,232.901 1445.48,231.685 1446.05,232.617 1446.61,230.548 1447.18,230.521 1447.75,231.667 1448.32,232.66 1448.89,231.716 1449.46,232.623 1450.02,231.163 1450.59,231.964 1451.16,231.721 1451.73,230.611 1452.3,230.607 1452.87,230.606 1453.43,231.522 1454,231.347 1454.57,232.302 1455.14,230.905 1455.71,230.74 1456.28,229.808 1456.84,227.907 1457.41,228.337 1457.98,229.448 1458.55,229.648 1459.12,231.737 1459.69,231.593 1460.25,231.672 1460.82,231.378 1461.39,230.167 1461.96,231.347 1462.53,230.233 1463.1,227.969 1463.66,229.188 1464.23,229.143 1464.8,227.077 1465.37,229.53 1465.94,225.391 1466.51,226.778 1467.07,227.983 1467.64,229.228 1468.21,229.38 1468.78,229.533 1469.35,228.537 1469.92,228.536 1470.48,226.7 1471.05,224.969 1471.62,224.517 1472.19,219.895 1472.76,221.86 1473.33,223.611 1473.89,223.363 1474.46,223.902 1475.03,224.343 1475.6,224.854 1476.17,226.324 1476.74,226.741 1477.31,229.132 1477.87,230.236 1478.44,229.341 1479.01,228.626 1479.58,231.042 1480.15,229.099 1480.72,229.28 1481.28,229.479 1481.85,228.821 1482.42,228.084 1482.99,227.46 1483.56,227.801 1484.13,228.222 1484.69,228.603 1485.26,230.801 1485.83,228.806 1486.4,230.199 1486.97,228.405 1487.54,227.718 1488.1,226.933 1488.67,226.435 1489.24,226.69 1489.81,227.023 1490.38,227.819 1490.95,227.081 1491.51,226.63 1492.08,227.174 1492.65,227.697 1493.22,226.004 1493.79,225.445 1494.36,227.25 1494.92,227.893 1495.49,228.237 1496.06,231.733 1496.63,232.912 1497.2,229.992 1497.77,231.307 1498.33,231.539 1498.9,232.674 1499.47,232.667 1500.04,232.891 1500.61,230.794 1501.18,231 1501.74,230.277 1502.31,231.782 1502.88,232.865 1503.45,230.87 1504.02,232.247 1504.59,237.376 1505.15,236.084 1505.72,236.005 1506.29,235.92 1506.86,235.906 1507.43,235.848 1508,237.741 1508.56,236.415 1509.13,234.932 1509.7,235.831 1510.27,235.605 1510.84,235.433 1511.41,235.418 1511.97,235.213 1512.54,237.132 1513.11,235.897 1513.68,235.642 1514.25,236.682 1514.82,237.382 1515.38,239.051 1515.95,238.742 1516.52,239.314 1517.09,240.793 1517.66,240.248 1518.23,237.818 1518.79,238.394 1519.36,239.826 1519.93,240.293 1520.5,239.726 1521.07,239.111 1521.64,238.539 1522.2,237.969 1522.77,235.346 1523.34,233.767 1523.91,232.571 1524.48,234.577 1525.05,234.498 1525.61,234.047 1526.18,233.582 1526.75,235.435 1527.32,235.114 1527.89,236.038 1528.46,234.486 1529.02,233.167 1529.59,232.795 1530.16,232.39 1530.73,233.149 1531.3,231.96 1531.87,231.752 1532.43,230.346 1533,229.229 1533.57,228.248 1534.14,228.44 1534.71,227.54 1535.28,229.821 1535.84,228.883 1536.41,229.078 1536.98,227.919 1537.55,228.145 1538.12,227.251 1538.69,229.355 1539.25,232.552 1539.82,233.501 1540.39,232.137 1540.96,234.291 1541.53,233.863 1542.1,234.513 1542.66,234.153 1543.23,233.935 1543.8,232.598 1544.37,232.457 1544.94,232.408 1545.51,231.151 1546.08,229.022 1546.64,227.961 1547.21,228.164 1547.78,226.201 1548.35,225.335 1548.92,224.658 1549.49,227.275 1550.05,227.279 1550.62,227.367 1551.19,225.375 1551.76,227.621 1552.33,227.665 1552.9,225.983 1553.46,226.468 1554.03,226.702 1554.6,224.675 1555.17,227.173 1555.74,229.319 1556.31,230.528 1556.87,232.6 1557.44,230.775 1558.01,232.843 1558.58,230.614 1559.15,230.694 1559.72,232.695 1560.28,231.668 1560.85,231.537 1561.42,233.526 1561.99,233.174 1562.56,231.916 1563.13,231.003 1563.69,229.024 1564.26,231.451 1564.83,233.434 1565.4,231.956 1565.97,231.694 1566.54,232.547 1567.1,232.205 1567.67,232.933 1568.24,230.975 1568.81,230.033 1569.38,231.324 1569.95,229.315 1570.51,232.404 1571.08,231.239 1571.65,233.19 1572.22,231.86 1572.79,234.949 1573.36,233.675 1573.92,234.515 1574.49,237.227 1575.06,235.81 1575.63,236.413 1576.2,233.917 1576.77,233.672 1577.33,234.619 1577.9,236.348 1578.47,233.861 1579.04,233.634 1579.61,231.186 1580.18,230.048 1580.74,228.984 1581.31,230.237 1581.88,230.315 1582.45,230.24 1583.02,230.031 1583.59,230.926 1584.15,232.89 1584.72,233.736 1585.29,233.408 1585.86,232.161 1586.43,233.02 1587,230.955 1587.56,232.939 1588.13,231.796 1588.7,233.706 1589.27,234.418 1589.84,233.946 1590.41,236.833 1590.97,235.22 1591.54,235.843 1592.11,235.497 1592.68,234.103 1593.25,233.687 1593.82,235.321 1594.38,235.942 1594.95,239.505 1595.52,238.559 1596.09,236.775 1596.66,237.361 1597.23,236.838 1597.79,236.307 1598.36,236.889 1598.93,235 1599.5,232.517 1600.07,232.106 1600.64,228.6 1601.2,228.659 1601.77,228.797 1602.34,228.82 1602.91,228.791 1603.48,229.809 1604.05,229.529 1604.61,230.608 1605.18,230.491 1605.75,231.541 1606.32,231.28 1606.89,229.901 1607.46,229.683 1608.02,228.534 1608.59,228.538 1609.16,228.488 1609.73,228.35 1610.3,226.511 1610.87,227.844 1611.43,226.963 1612,226.292 1612.57,225.332 1613.14,225.558 1613.71,226.887 1614.28,226.056 1614.84,224.042 1615.41,224.22 1615.98,222.411 1616.55,222.712 1617.12,224.321 1617.69,222.867 1618.26,222.293 1618.82,223.865 1619.39,225.363 1619.96,227.745 1620.53,226.112 1621.1,227.506 1621.67,228.686 1622.23,228.826 1622.8,230.868 1623.37,230.788 1623.94,229.714 1624.51,228.859 1625.08,230.05 1625.64,224.925 1626.21,228.62 1626.78,227.656 1627.35,228.955 1627.92,231.178 1628.49,232.153 1629.05,230.183 1629.62,229.39 1630.19,229.509 1630.76,228.72 1631.33,228.686 1631.9,226.934 1632.46,225.389 1633.03,226.782 1633.6,228.11 1634.17,228.246 1634.74,228.472 1635.31,228.655 1635.87,230.897 1636.44,229.005 1637.01,229.037 1637.58,231.302 1638.15,231.349 1638.72,230.529 1639.28,230.632 1639.85,229.588 1640.42,231.772 1640.99,231.731 1641.56,232.512 1642.13,231.297 1642.69,231.346 1643.26,231.131 1643.83,231.235 1644.4,230.379 1644.97,230.599 1645.54,231.851 1646.1,232.638 1646.67,233.409 1647.24,233.421 1647.81,231.141 1648.38,232.119 1648.95,232.24 1649.51,233.045 1650.08,234.05 1650.65,230.768 1651.22,230.777 1651.79,229.58 1652.36,230.618 1652.92,229.581 1653.49,229.843 1654.06,227.994 1654.63,228.274 1655.2,227.6 1655.77,225.732 1656.33,227.158 1656.9,229.499 1657.47,229.675 1658.04,230.974 1658.61,231.033 1659.18,231.881 1659.74,235.14 1660.31,235.741 1660.88,234.35 1661.45,230.962 1662.02,230.038 1662.59,229.163 1663.15,230.532 1663.72,230.715 1664.29,232.869 1664.86,232.766 1665.43,233.785 1666,231.513 1666.56,233.615 1667.13,232.404 1667.7,230.262 1668.27,231.276 1668.84,230.423 1669.41,225.32 1669.97,225.974 1670.54,228.647 1671.11,230.019 1671.68,230.093 1672.25,230.3 1672.82,228.684 1673.38,226.993 1673.95,228.387 1674.52,229.521 1675.09,230.814 1675.66,230.993 1676.23,232.896 1676.79,232.767 1677.36,233.648 1677.93,231.753 1678.5,232.659 1679.07,232.646 1679.64,232.739 1680.2,233.754 1680.77,233.546 1681.34,233.427 1681.91,234.305 1682.48,233.012 1683.05,230.008 1683.61,228.913 1684.18,226.847 1684.75,228.012 1685.32,229.2 1685.89,229.402 1686.46,229.391 1687.02,229.534 1687.59,229.567 1688.16,229.603 1688.73,230.728 1689.3,227.722 1689.87,224.77 1690.44,223.323 1691,222.116 1691.57,222.624 1692.14,222.187 1692.71,229.069 1693.28,229.392 1693.85,229.742 1694.41,230.947 1694.98,229.833 1695.55,229.925 1696.12,231.375 1696.69,231.388 1697.26,231.288 1697.82,230.258 1698.39,229.349 1698.96,230.501 1699.53,233.566 1700.1,233.416 1700.67,233.534 1701.23,235.659 1701.8,238.493 1702.37,239.115 1702.94,237.424 1703.51,238.975 1704.08,238.476 1704.64,237.895 1705.21,236.458 1705.78,236.921 1706.35,236.517 1706.92,235.171 1707.49,236.148 1708.05,234.791 1708.62,235.53 1709.19,234.221 1709.76,233.085 1710.33,232.775 1710.9,231.511 1711.46,230.366 1712.03,231.28 1712.6,229.303 1713.17,230.471 1713.74,229.393 1714.31,228.683 1714.87,228.829 1715.44,228.136 1716.01,228.357 1716.58,231.52 1717.15,231.441 1717.72,231.655 1718.28,233.718 1718.85,233.5 1719.42,233.247 1719.99,233.02 1720.56,230.73 1721.13,229.913 1721.69,233.113 1722.26,230.893 1722.83,229.914 1723.4,226.91 1723.97,227.108 1724.54,227.428 1725.1,226.562 1725.67,227.866 1726.24,230.161 1726.81,229.198 1727.38,229.317 1727.95,233.792 1728.51,233.541 1729.08,233.338 1729.65,235.089 1730.22,233.608 1730.79,231.403 1731.36,232.454 1731.92,229.224 1732.49,228.217 1733.06,229.495 1733.63,226.361 1734.2,227.665 1734.77,228.145 1735.33,226.136 1735.9,228.571 1736.47,224.619 1737.04,227.198 1737.61,228.307 1738.18,226.513 1738.74,228.952 1739.31,229.078 1739.88,227.287 1740.45,229.493 1741.02,228.63 1741.59,226.892 1742.15,229.176 1742.72,229.501 1743.29,232.64 1743.86,231.647 1744.43,232.889 1745,233.865 1745.56,233.593 1746.13,233.672 1746.7,231.659 1747.27,231.811 1747.84,232.726 1748.41,233.655 1748.97,233.388 1749.54,232.064 1750.11,228.93 1750.68,227.227 1751.25,229.588 1751.82,230.902 1752.38,231.109 1752.95,229.17 1753.52,229.222 1754.09,230.519 1754.66,231.778 1755.23,230.724 1755.79,229.748 1756.36,230.764 1756.93,229.783 1757.5,232.982 1758.07,231.845 1758.64,231.793 1759.21,232.742 1759.77,232.656 1760.34,233.667 1760.91,234.423 1761.48,236.254 1762.05,237.011 1762.62,234.613 1763.18,234.345 1763.75,233.875 1764.32,234.695 1764.89,234.368 1765.46,233.117 1766.03,232.973 1766.59,233.706 1767.16,233.452 1767.73,231.292 1768.3,233.293 1768.87,233.094 1769.44,234.816 1770,233.235 1770.57,232.915 1771.14,232.821 1771.71,231.94 1772.28,232.09 1772.85,232.114 1773.41,234.023 1773.98,234.016 1774.55,232.693 1775.12,231.327 1775.69,231.142 1776.26,232.245 1776.82,231.973 1777.39,233.717 1777.96,233.444 1778.53,232.175 1779.1,232.186 1779.67,232.115 1780.23,232.861 1780.8,233.818 1781.37,234.453 1781.94,235.469 1782.51,236.137 1783.08,236.823 1783.64,236.421 1784.21,233.903 1784.78,232.451 1785.35,232.485 1785.92,232.146 1786.49,230.842 1787.05,228.641 1787.62,226.78 1788.19,227.942 1788.76,227.894 1789.33,226.907 1789.9,228.233 1790.46,228.333 1791.03,225.443 1791.6,225.901 1792.17,225.208 1792.74,225.541 1793.31,225.252 1793.87,226.518 1794.44,224.878 1795.01,226.458 1795.58,226.932 1796.15,227.207 1796.72,225.447 1797.28,226.14 1797.85,229.473 1798.42,229.651 1798.99,227.81 1799.56,228.16 1800.13,228.287 1800.69,230.515 1801.26,229.421 1801.83,227.627 1802.4,225.882 1802.97,227.328 1803.54,229.886 1804.1,231.166 1804.67,229.167 1805.24,229.322 1805.81,227.459 1806.38,226.633 1806.95,227.681 1807.51,230.092 1808.08,231.44 1808.65,232.434 1809.22,232.483 1809.79,231.177 1810.36,232.36 1810.92,233.26 1811.49,233.309 1812.06,232.172 1812.63,230.196 1813.2,229.37 1813.77,230.59 1814.33,231.615 1814.9,231.776 1815.47,233.629 1816.04,236.712 1816.61,236.612 1817.18,236.444 1817.74,238.415 1818.31,235.998 1818.88,235.517 1819.45,235.36 1820.02,233.992 1820.59,234.679 1821.15,235.123 1821.72,236.835 1822.29,236.616 1822.86,235.122 1823.43,234.759 1824,233.487 1824.56,233.068 1825.13,231.139 1825.7,232.326 1826.27,232.238 1826.84,231.114 1827.41,227.928 1827.97,229.994 1828.54,230.083 1829.11,232.241 1829.68,231.129 1830.25,230.993 1830.82,231.152 1831.39,233.32 1831.95,231.948 1832.52,232.06 1833.09,229.718 1833.66,231.018 1834.23,227.984 1834.8,229.096 1835.36,229.263 1835.93,226.404 1836.5,228.576 1837.07,228.567 1837.64,228.798 1838.21,228.958 1838.77,230.397 1839.34,231.653 1839.91,234.685 1840.48,236.497 1841.05,235.11 1841.62,234.874 1842.18,234.539 1842.75,231.969 1843.32,231.821 1843.89,230.654 1844.46,231.563 1845.03,231.61 1845.59,232.691 1846.16,231.276 1846.73,230.262 1847.3,230.134 1847.87,230.124 1848.44,230.123 1849,232.235 1849.57,231.174 1850.14,230.233 1850.71,229.165 1851.28,228.233 1851.85,230.332 1852.41,230.459 1852.98,229.396 1853.55,228.732 1854.12,230.995 1854.69,232.118 1855.26,230.195 1855.82,229.32 1856.39,229.368 1856.96,229.466 1857.53,231.542 1858.1,232.605 1858.67,233.628 1859.23,231.411 1859.8,231.379 1860.37,230.352 1860.94,229.487 1861.51,231.561 1862.08,232.423 1862.64,230.164 1863.21,230.196 1863.78,233.395 1864.35,232.245 1864.92,230.988 1865.49,231.878 1866.05,231.616 1866.62,231.497 1867.19,231.482 1867.76,230.312 1868.33,233.455 1868.9,231.037 1869.46,231.799 1870.03,230.574 1870.6,230.634 1871.17,231.625 1871.74,232.441 1872.31,232.521 1872.87,233.162 1873.44,232.907 1874.01,231.845 1874.58,228.862 1875.15,230.042 1875.72,227.982 1876.28,227.225 1876.85,223.405 1877.42,224.854 1877.99,223.124 1878.56,225.654 1879.13,228.101 1879.69,228.055 1880.26,227.466 1880.83,228.893 1881.4,230.042 1881.97,232.239 1882.54,230.025 1883.1,233.184 1883.67,234.127 1884.24,232.948 1884.81,233.945 1885.38,233.689 1885.95,231.606 1886.51,234.525 1887.08,232.358 1887.65,233.413 1888.22,234.187 1888.79,232.79 1889.36,231.829 1889.92,232.887 1890.49,232.606 1891.06,232.552 1891.63,232.401 1892.2,232.229 1892.77,231.23 1893.33,232.479 1893.9,233.084 1894.47,231.978 1895.04,230.715 1895.61,229.517 1896.18,229.464 1896.74,228.591 1897.31,227.797 1897.88,227.984 1898.45,228.107 1899.02,228.264 1899.59,229.546 1900.16,231.47 1900.72,231.452 1901.29,233.387 1901.86,230.077 1902.43,228.046 1903,228.404 1903.57,228.708 1904.13,228.992 1904.7,232.319 1905.27,231.541 1905.84,230.343 1906.41,231.431 1906.98,228.432 1907.54,228.538 1908.11,228.6 1908.68,228.937 1909.25,230.215 1909.82,230.249 1910.39,230.469 1910.95,233.884 1911.52,235.862 1912.09,235.591 1912.66,233.323 1913.23,234.087 1913.8,231.701 1914.36,231.492 1914.93,232.494 1915.5,231.516 1916.07,231.578 1916.64,231.412 1917.21,233.478 1917.77,233.359 1918.34,235.399 1918.91,235.056 1919.48,235.98 1920.05,232.527 1920.62,231.491 1921.18,231.381 1921.75,229.138 1922.32,229.241 1922.89,229.591 1923.46,228.718 1924.03,229.72 1924.59,231.727 1925.16,233.715 1925.73,233.501 1926.3,233.052 1926.87,232.691 1927.44,231.33 1928,231.163 1928.57,231.026 1929.14,229.861 1929.71,229.883 1930.28,231.068 1930.85,229.05 1931.41,231.185 1931.98,230.182 1932.55,229.161 1933.12,229.26 1933.69,228.382 1934.26,227.638 1934.82,227.699 1935.39,228.082 1935.96,229.161 1936.53,230.234 1937.1,228.333 1937.67,228.57 1938.23,227.7 1938.8,230.046 1939.37,230.122 1939.94,231.051 1940.51,231.87 1941.08,231.757 1941.64,237.002 1942.21,235.53 1942.78,234.154 1943.35,234 1943.92,234.92 1944.49,234.633 1945.05,233.565 1945.62,232.236 1946.19,232.174 1946.76,230.046 1947.33,232.099 1947.9,231.789 1948.46,230.514 1949.03,230.528 1949.6,229.502 1950.17,227.674 1950.74,227.762 1951.31,228.785 1951.87,228.909 1952.44,228.933 1953.01,229.202 1953.58,229.28 1954.15,229.35 1954.72,231.422 1955.28,229.318 1955.85,229.331 1956.42,229.217 1956.99,230.442 1957.56,228.73 1958.13,229.015 1958.69,230.434 1959.26,229.435 1959.83,229.37 1960.4,226.364 1960.97,224.482 1961.54,225.031 1962.1,225.388 1962.67,225.817 1963.24,227.082 1963.81,227.309 1964.38,228.84 1964.95,229.317 1965.51,231.808 1966.08,230.691 1966.65,233.729 1967.22,235.623 1967.79,235.256 1968.36,234.14 1968.92,234.147 1969.49,231.575 1970.06,231.707 1970.63,231.888 1971.2,231.947 1971.77,230.763 1972.34,230.862 1972.9,232.96 1973.47,231.791 1974.04,234.925 1974.61,234.773 1975.18,233.486 1975.75,234.43 1976.31,235.282 1976.88,234.988 1977.45,234.854 1978.02,235.544 1978.59,231.977 1979.16,233.774 1979.72,232.552 1980.29,232.483 1980.86,235.608 1981.43,234.192 1982,234.182 1982.57,235.999 1983.13,237.655 1983.7,234.951 1984.27,235.311 1984.84,235.827 1985.41,234.171 1985.98,233.77 1986.54,234.372 1987.11,235.07 1987.68,233.515 1988.25,232.396 1988.82,231.268 1989.39,230.218 1989.95,231.404 1990.52,233.368 1991.09,232.068 1991.66,230.905 1992.23,230.836 1992.8,232.691 1993.36,232.582 1993.93,232.419 1994.5,230.994 1995.07,227.842 1995.64,228.059 1996.21,226.958 1996.77,228.298 1997.34,229.506 1997.91,229.452 1998.48,228.504 1999.05,229.705 1999.62,230.717 2000.18,229.728 2000.75,230.8 2001.32,230.548 2001.89,230.329 2002.46,230.237 2003.03,230.037 2003.59,229.882 2004.16,230.139 2004.73,228.17 2005.3,228.268 2005.87,226.511 2006.44,225.948 2007,226.392 2007.57,225.726 2008.14,226.001 2008.71,226.346 2009.28,228.858 2009.85,230.163 2010.41,230.282 2010.98,230.397 2011.55,229.743 2012.12,227.92 2012.69,227.235 2013.26,227.444 2013.82,226.618 2014.39,227.748 2014.96,229.04 2015.53,230.333 2016.1,227.061 2016.67,227.092 2017.23,226.412 2017.8,228.702 2018.37,228.871 2018.94,228.181 2019.51,226.26 2020.08,228.6 2020.64,230.741 2021.21,230.866 2021.78,234.183 2022.35,234.257 2022.92,234.171 2023.49,233.953 2024.05,234.777 2024.62,237.512 2025.19,236.222 2025.76,236.133 2026.33,237.851 2026.9,237.144 2027.46,235.884 2028.03,235.322 2028.6,236.186 2029.17,235.774 2029.74,234.336 2030.31,234.231 2030.87,234.794 2031.44,233.353 2032.01,233.43 2032.58,234.327 2033.15,235.176 2033.72,235.695 2034.28,236.181 2034.85,234.664 2035.42,235.722 2035.99,233.052 2036.56,230.858 2037.13,230.761 2037.69,230.568 2038.26,228.423 2038.83,229.449 2039.4,229.378 2039.97,228.502 2040.54,229.598 2041.11,230.671 2041.67,230.592 2042.24,229.86 2042.81,228.823 2043.38,225.575 2043.95,223.966 2044.52,225.449 2045.08,224.869 2045.65,225.557 2046.22,223.944 2046.79,223.238 2047.36,224.81 2047.93,227.445 2048.49,228.774 2049.06,231.01 2049.63,229.75 2050.2,228.845 2050.77,227.795 2051.34,231.293 2051.9,231.484 2052.47,232.165 2053.04,233.092 2053.61,235.121 2054.18,236.866 2054.75,233.345 2055.31,233.27 2055.88,233.052 2056.45,233.006 2057.02,232.873 2057.59,233.88 2058.16,234.736 2058.72,234.552 2059.29,234.208 2059.86,236.306 2060.43,235.931 2061,235.562 2061.57,236.135 2062.13,234.876 2062.7,235.525 2063.27,235.089 2063.84,231.73 2064.41,231.765 2064.98,228.741 2065.54,228.799 2066.11,229.087 2066.68,230.106 2067.25,230.256 2067.82,230.278 2068.39,227.259 2068.95,226.591 2069.52,227.846 2070.09,226.991 2070.66,228.224 2071.23,227.18 2071.8,229.313 2072.36,230.386 2072.93,229.215 2073.5,230.17 2074.07,230.439 2074.64,231.49 2075.21,232.71 2075.77,232.719 2076.34,233.601 2076.91,233.386 2077.48,232.274 2078.05,232.336 2078.62,231.099 2079.18,233.157 2079.75,233.233 2080.32,234.008 2080.89,234.826 2081.46,233.425 2082.03,232.325 2082.59,229.041 2083.16,231.256 2083.73,229.964 2084.3,230.036 2084.87,230.053 2085.44,227.756 2086,228.949 2086.57,230.007 2087.14,231.026 2087.71,229.986 2088.28,229.052 2088.85,227.92 2089.41,227.805 2089.98,227.92 2090.55,225.844 2091.12,226.074 2091.69,226.458 2092.26,227.92 2092.82,229.168 2093.39,230.314 2093.96,230.3 2094.53,230.25 2095.1,234.373 2095.67,234.323 2096.23,234.05 2096.8,232.671 2097.37,233.584 2097.94,234.558 2098.51,235.436 2099.08,234.04 2099.64,231.553 2100.21,229.601 2100.78,227.68 2101.35,228.839 2101.92,228.04 2102.49,227.065 2103.05,228.688 2103.62,229.895 2104.19,230.011 2104.76,228.085 2105.33,227.194 2105.9,228.445 2106.46,228.82 2107.03,226.893 2107.6,228.112 2108.17,226.195 2108.74,224.506 2109.31,223.172 2109.87,223.95 2110.44,223.455 2111.01,225.224 2111.58,225.555 2112.15,224.746 2112.72,225.339 2113.29,226.036 2113.85,228.701 2114.42,231.08 2114.99,231.371 2115.56,231.565 2116.13,230.639 2116.7,231.828 2117.26,231.8 2117.83,229.636 2118.4,229.018 2118.97,227.338 2119.54,229.595 2120.11,230.637 2120.67,230.636 2121.24,227.735 2121.81,229.009 2122.38,229.142 2122.95,230.433 2123.52,232.552 2124.08,232.473 2124.65,231.448 2125.22,230.211 2125.79,230.073 2126.36,231.33 2126.93,228.289 2127.49,228.666 2128.06,229.834 2128.63,230.161 2129.2,232.455 2129.77,232.41 2130.34,232.574 2130.9,229.541 2131.47,229.996 2132.04,230.27 2132.61,230.59 2133.18,232.609 2133.75,234.728 2134.31,231.469 2134.88,233.414 2135.45,235.518 2136.02,234.432 2136.59,235.393 2137.16,234.043 2137.72,233.923 2138.29,232.586 2138.86,230.759 2139.43,231.838 2140,231.898 2140.57,231.89 2141.13,232.699 2141.7,233.521 2142.27,235.248 2142.84,233.166 2143.41,234.283 2143.98,234.196 2144.54,232.964 2145.11,232.95 2145.68,232.78 2146.25,235.585 2146.82,235.064 2147.39,234.839 2147.95,233.304 2148.52,234.201 2149.09,233.947 2149.66,233.79 2150.23,233.523 2150.8,232.095 2151.36,229.933 2151.93,229.793 2152.5,229.893 2153.07,230.86 2153.64,230.256 2154.21,232.276 2154.77,232.252 2155.34,233.306 2155.91,235.101 2156.48,235.744 2157.05,231.463 2157.62,229.195 2158.18,229.438 2158.75,229.665 2159.32,229.804 2159.89,231.021 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.023\n  with uncertainty of ± 0.002078652950819322\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01685 ± (0.00225416, 0.00239968) (MC)\n  95% confidence interval: [-4.02143, -4.01236] (MC)\n  linear error propagation: -4.01692 ± 0.00227868\n  |δ_y| = |0.00142932| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0168540816887415, val_l = 0.00457963348620094, val_u = 0.004492057932409921)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip050\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip051\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip052\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.52 2211.02,1151.52 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,998.412 2211.02,998.412 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,845.304 2211.02,845.304 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,692.196 2211.02,692.196 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,539.088 2211.02,539.088 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,385.98 2211.02,385.98 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,232.873 2211.02,232.873 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.52 365.751,1151.52 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,998.412 365.751,998.412 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,845.304 365.751,845.304 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,692.196 365.751,692.196 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,539.088 365.751,539.088 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,385.98 365.751,385.98 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,232.873 365.751,232.873 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M298.909 1137.32 Q295.298 1137.32 293.469 1140.88 Q291.664 1144.42 291.664 1151.55 Q291.664 1158.66 293.469 1162.23 Q295.298 1165.77 298.909 1165.77 Q302.543 1165.77 304.349 1162.23 Q306.177 1158.66 306.177 1151.55 Q306.177 1144.42 304.349 1140.88 Q302.543 1137.32 298.909 1137.32 M298.909 1133.61 Q304.719 1133.61 307.775 1138.22 Q310.853 1142.8 310.853 1151.55 Q310.853 1160.28 307.775 1164.89 Q304.719 1169.47 298.909 1169.47 Q293.099 1169.47 290.02 1164.89 Q286.964 1160.28 286.964 1151.55 Q286.964 1142.8 290.02 1138.22 Q293.099 1133.61 298.909 1133.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M259.557 1011.76 L267.196 1011.76 L267.196 985.391 L258.886 987.057 L258.886 982.798 L267.15 981.132 L271.826 981.132 L271.826 1011.76 L279.465 1011.76 L279.465 1015.69 L259.557 1015.69 L259.557 1011.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 984.21 Q295.298 984.21 293.469 987.775 Q291.664 991.317 291.664 998.446 Q291.664 1005.55 293.469 1009.12 Q295.298 1012.66 298.909 1012.66 Q302.543 1012.66 304.349 1009.12 Q306.177 1005.55 306.177 998.446 Q306.177 991.317 304.349 987.775 Q302.543 984.21 298.909 984.21 M298.909 980.507 Q304.719 980.507 307.775 985.113 Q310.853 989.696 310.853 998.446 Q310.853 1007.17 307.775 1011.78 Q304.719 1016.36 298.909 1016.36 Q293.099 1016.36 290.02 1011.78 Q286.964 1007.17 286.964 998.446 Q286.964 989.696 290.02 985.113 Q293.099 980.507 298.909 980.507 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M262.775 858.649 L279.094 858.649 L279.094 862.584 L257.15 862.584 L257.15 858.649 Q259.812 855.894 264.395 851.264 Q269.002 846.612 270.182 845.269 Q272.428 842.746 273.307 841.01 Q274.21 839.251 274.21 837.561 Q274.21 834.806 272.266 833.07 Q270.344 831.334 267.242 831.334 Q265.043 831.334 262.59 832.098 Q260.159 832.862 257.381 834.413 L257.381 829.69 Q260.205 828.556 262.659 827.977 Q265.113 827.399 267.15 827.399 Q272.52 827.399 275.715 830.084 Q278.909 832.769 278.909 837.26 Q278.909 839.389 278.099 841.311 Q277.312 843.209 275.205 845.801 Q274.627 846.473 271.525 849.69 Q268.423 852.885 262.775 858.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 831.102 Q295.298 831.102 293.469 834.667 Q291.664 838.209 291.664 845.338 Q291.664 852.445 293.469 856.01 Q295.298 859.551 298.909 859.551 Q302.543 859.551 304.349 856.01 Q306.177 852.445 306.177 845.338 Q306.177 838.209 304.349 834.667 Q302.543 831.102 298.909 831.102 M298.909 827.399 Q304.719 827.399 307.775 832.005 Q310.853 836.589 310.853 845.338 Q310.853 854.065 307.775 858.672 Q304.719 863.255 298.909 863.255 Q293.099 863.255 290.02 858.672 Q286.964 854.065 286.964 845.338 Q286.964 836.589 290.02 832.005 Q293.099 827.399 298.909 827.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M272.914 690.842 Q276.27 691.559 278.145 693.828 Q280.043 696.096 280.043 699.43 Q280.043 704.545 276.525 707.346 Q273.006 710.147 266.525 710.147 Q264.349 710.147 262.034 709.707 Q259.742 709.291 257.289 708.434 L257.289 703.92 Q259.233 705.055 261.548 705.633 Q263.863 706.212 266.386 706.212 Q270.784 706.212 273.076 704.476 Q275.39 702.74 275.39 699.43 Q275.39 696.374 273.238 694.661 Q271.108 692.925 267.289 692.925 L263.261 692.925 L263.261 689.083 L267.474 689.083 Q270.923 689.083 272.752 687.717 Q274.58 686.328 274.58 683.735 Q274.58 681.073 272.682 679.661 Q270.807 678.226 267.289 678.226 Q265.367 678.226 263.168 678.643 Q260.969 679.059 258.33 679.939 L258.33 675.772 Q260.992 675.032 263.307 674.661 Q265.645 674.291 267.705 674.291 Q273.029 674.291 276.131 676.721 Q279.233 679.129 279.233 683.249 Q279.233 686.12 277.59 688.11 Q275.946 690.078 272.914 690.842 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 677.995 Q295.298 677.995 293.469 681.559 Q291.664 685.101 291.664 692.231 Q291.664 699.337 293.469 702.902 Q295.298 706.444 298.909 706.444 Q302.543 706.444 304.349 702.902 Q306.177 699.337 306.177 692.231 Q306.177 685.101 304.349 681.559 Q302.543 677.995 298.909 677.995 M298.909 674.291 Q304.719 674.291 307.775 678.897 Q310.853 683.481 310.853 692.231 Q310.853 700.957 307.775 705.564 Q304.719 710.147 298.909 710.147 Q293.099 710.147 290.02 705.564 Q286.964 700.957 286.964 692.231 Q286.964 683.481 290.02 678.897 Q293.099 674.291 298.909 674.291 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M271.594 525.882 L259.789 544.331 L271.594 544.331 L271.594 525.882 M270.367 521.808 L276.247 521.808 L276.247 544.331 L281.177 544.331 L281.177 548.22 L276.247 548.22 L276.247 556.368 L271.594 556.368 L271.594 548.22 L255.992 548.22 L255.992 543.706 L270.367 521.808 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 524.887 Q295.298 524.887 293.469 528.452 Q291.664 531.993 291.664 539.123 Q291.664 546.229 293.469 549.794 Q295.298 553.336 298.909 553.336 Q302.543 553.336 304.349 549.794 Q306.177 546.229 306.177 539.123 Q306.177 531.993 304.349 528.452 Q302.543 524.887 298.909 524.887 M298.909 521.183 Q304.719 521.183 307.775 525.79 Q310.853 530.373 310.853 539.123 Q310.853 547.85 307.775 552.456 Q304.719 557.039 298.909 557.039 Q293.099 557.039 290.02 552.456 Q286.964 547.85 286.964 539.123 Q286.964 530.373 290.02 525.79 Q293.099 521.183 298.909 521.183 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M258.793 368.7 L277.15 368.7 L277.15 372.636 L263.076 372.636 L263.076 381.108 Q264.094 380.76 265.113 380.598 Q266.131 380.413 267.15 380.413 Q272.937 380.413 276.316 383.585 Q279.696 386.756 279.696 392.172 Q279.696 397.751 276.224 400.853 Q272.752 403.932 266.432 403.932 Q264.256 403.932 261.988 403.561 Q259.742 403.191 257.335 402.45 L257.335 397.751 Q259.418 398.885 261.641 399.441 Q263.863 399.996 266.34 399.996 Q270.344 399.996 272.682 397.89 Q275.02 395.784 275.02 392.172 Q275.02 388.561 272.682 386.455 Q270.344 384.348 266.34 384.348 Q264.465 384.348 262.59 384.765 Q260.738 385.182 258.793 386.061 L258.793 368.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 371.779 Q295.298 371.779 293.469 375.344 Q291.664 378.885 291.664 386.015 Q291.664 393.122 293.469 396.686 Q295.298 400.228 298.909 400.228 Q302.543 400.228 304.349 396.686 Q306.177 393.122 306.177 386.015 Q306.177 378.885 304.349 375.344 Q302.543 371.779 298.909 371.779 M298.909 368.075 Q304.719 368.075 307.775 372.682 Q310.853 377.265 310.853 386.015 Q310.853 394.742 307.775 399.348 Q304.719 403.932 298.909 403.932 Q293.099 403.932 290.02 399.348 Q286.964 394.742 286.964 386.015 Q286.964 377.265 290.02 372.682 Q293.099 368.075 298.909 368.075 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M269.326 231.009 Q266.178 231.009 264.326 233.162 Q262.497 235.315 262.497 239.065 Q262.497 242.791 264.326 244.967 Q266.178 247.12 269.326 247.12 Q272.474 247.12 274.303 244.967 Q276.154 242.791 276.154 239.065 Q276.154 235.315 274.303 233.162 Q272.474 231.009 269.326 231.009 M278.608 216.356 L278.608 220.616 Q276.849 219.782 275.043 219.343 Q273.261 218.903 271.502 218.903 Q266.872 218.903 264.418 222.028 Q261.988 225.153 261.641 231.472 Q263.006 229.458 265.066 228.393 Q267.127 227.305 269.603 227.305 Q274.812 227.305 277.821 230.477 Q280.853 233.625 280.853 239.065 Q280.853 244.389 277.705 247.606 Q274.557 250.824 269.326 250.824 Q263.33 250.824 260.159 246.241 Q256.988 241.634 256.988 232.907 Q256.988 224.713 260.877 219.852 Q264.766 214.968 271.316 214.968 Q273.076 214.968 274.858 215.315 Q276.664 215.662 278.608 216.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M298.909 218.671 Q295.298 218.671 293.469 222.236 Q291.664 225.778 291.664 232.907 Q291.664 240.014 293.469 243.579 Q295.298 247.12 298.909 247.12 Q302.543 247.12 304.349 243.579 Q306.177 240.014 306.177 232.907 Q306.177 225.778 304.349 222.236 Q302.543 218.671 298.909 218.671 M298.909 214.968 Q304.719 214.968 307.775 219.574 Q310.853 224.157 310.853 232.907 Q310.853 241.634 307.775 246.241 Q304.719 250.824 298.909 250.824 Q293.099 250.824 290.02 246.241 Q286.964 241.634 286.964 232.907 Q286.964 224.157 290.02 219.574 Q293.099 214.968 298.909 214.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1038.71 400.199,935.063 400.786,839.968 401.372,752.845 401.958,673.164 402.545,600.433 403.131,639.014 403.718,572.074 404.304,512.917 404.891,545.969 405.477,493.265 406.063,445.659 406.65,403.974 407.236,365.529 407.823,331.258 408.409,300.889 408.995,274.167 409.582,252.19 410.168,231.984 410.755,263.751 411.341,247.708 411.927,232.505 412.514,219.895 413.1,247.729 413.687,272.887 414.273,265.652 414.86,290.347 415.446,285.994 416.032,282.921 416.619,306.723 417.205,307.115 417.792,329.333 418.378,350.093 418.964,352.159 419.551,373.121 420.137,394.659 420.724,399.377 421.31,404.541 421.896,410.012 422.483,416.848 423.069,473.275 423.656,480.559 424.242,489.582 424.829,497.883 425.415,506.709 426.001,534.063 426.588,543.777 427.174,570.179 427.761,579.099 428.347,595.425 428.933,613.187 429.52,629.607 430.106,639.306 430.693,648.696 431.279,664.844 431.865,691.38 432.452,705.385 433.038,719.072 433.625,727.345 434.211,736.171 434.798,754.788 435.384,767.034 435.97,779.769 436.557,787.646 437.143,808.914 437.73,829.167 438.316,840.131 438.902,850.944 439.489,862.015 440.075,886.39 440.662,898.943 441.248,908.222 441.835,920.861 442.421,932.136 443.007,937.432 443.594,951.084 444.18,955.713 444.767,963.547 445.353,970.767 445.939,983.389 446.526,990.347 447.112,999.576 447.699,1008.83 448.285,1017.97 448.871,1031.28 449.458,1037.2 450.044,1047.32 450.631,1050.59 451.217,1055.93 451.804,1058.8 452.39,1064.13 452.976,1071.59 453.563,1078.79 454.149,1083.31 454.736,1086 455.322,1090.75 455.908,1095.53 456.495,1102.14 457.081,1106.49 457.668,1114.38 458.254,1116.68 458.84,1122.36 459.427,1126.12 460.013,1127.95 460.6,1135.07 461.186,1141.9 461.773,1143.17 462.359,1144.57 462.945,1145.99 463.532,1150.87 464.118,1152.13 464.705,1157.05 465.291,1159.81 465.877,1166.05 466.464,1170.27 467.05,1171.2 467.637,1170.51 468.223,1172.95 468.809,1173.7 469.396,1177.98 469.982,1178.97 470.569,1179.91 471.155,1180.75 471.742,1184.72 472.328,1191.63 472.914,1195.21 473.501,1195.54 474.087,1196.02 474.674,1198.03 475.26,1199.79 475.846,1202.94 476.433,1204.73 477.019,1210.79 477.606,1210.72 478.192,1209.43 478.778,1209.74 479.365,1212.53 479.951,1215.49 480.538,1218.27 481.124,1221.23 481.711,1223.98 482.297,1223.79 482.883,1223.55 483.47,1226.16 484.056,1226.14 484.643,1227.27 485.229,1226.75 485.815,1230.63 486.402,1230.04 486.988,1232.26 487.575,1232.18 488.161,1234.62 488.748,1235.52 489.334,1239.15 489.92,1241.3 490.507,1240.52 491.093,1239.63 491.68,1238.91 492.266,1240.87 492.852,1240.35 493.439,1243.58 494.025,1242.56 494.612,1241.98 495.198,1240.12 495.784,1240.89 496.371,1241.65 496.957,1242.19 497.544,1240.05 498.13,1240.92 498.717,1237.83 499.303,1238.74 499.889,1239.85 500.476,1240.26 501.062,1239.92 501.649,1239.49 502.235,1240.06 502.821,1238.5 503.408,1240.75 503.994,1241.39 504.581,1241.93 505.167,1241.15 505.753,1242.22 506.34,1240.2 506.926,1238.32 507.513,1240.63 508.099,1239.93 508.686,1241.77 509.272,1240.99 509.858,1242.91 510.445,1240.04 511.031,1239.67 511.618,1240.58 512.204,1242.58 512.79,1242.29 513.377,1241.61 513.963,1240.78 514.55,1244.22 515.136,1243.86 515.722,1243.41 516.309,1244.07 516.895,1245.13 517.482,1243.28 518.068,1242.89 518.655,1243.62 519.241,1243.14 519.827,1241.41 520.414,1240.99 521,1239.14 521.587,1240.27 522.173,1240.94 522.759,1243.16 523.346,1242.78 523.932,1240.99 524.519,1242.97 525.105,1247.5 525.691,1246.78 526.278,1247.46 526.864,1246.91 527.451,1247.56 528.037,1246.51 528.624,1246.87 529.21,1246.24 529.796,1250.53 530.383,1249.38 530.969,1247.67 531.556,1245.55 532.142,1244.59 532.728,1244.94 533.315,1246.7 533.901,1247.2 534.488,1244.99 535.074,1244.22 535.661,1242.3 536.247,1243.04 536.833,1243.64 537.42,1245.69 538.006,1246.05 538.593,1240.06 539.179,1238.49 539.765,1235.73 540.352,1233.93 540.938,1236.51 541.525,1236.43 542.111,1236.2 542.697,1234.71 543.284,1234.61 543.87,1233.08 544.457,1234.32 545.043,1233.92 545.63,1231.06 546.216,1232.39 546.802,1232.31 547.389,1233.36 547.975,1233.15 548.562,1233.02 549.148,1232.82 549.734,1232.85 550.321,1231.31 550.907,1235.19 551.494,1233.47 552.08,1234.69 552.666,1233.27 553.253,1235.64 553.839,1241.51 554.426,1243.44 555.012,1244.1 555.599,1243.23 556.185,1242.57 556.771,1240.43 557.358,1239.8 557.944,1240.31 558.531,1241.93 559.117,1242.33 559.703,1239.18 560.29,1237.28 560.876,1232.93 561.463,1231.18 562.049,1232.42 562.635,1230.93 563.222,1231.87 563.808,1232.93 564.395,1235.32 564.981,1236.06 565.568,1235.54 566.154,1236.39 566.74,1238.48 567.327,1236.89 567.913,1237.49 568.5,1237.26 569.086,1237.98 569.672,1239.95 570.259,1241.89 570.845,1242.44 571.432,1240.32 572.018,1241.05 572.605,1240.41 573.191,1239.75 573.777,1236.63 574.364,1236.21 574.95,1234.52 575.537,1234.18 576.123,1234.84 576.709,1235.66 577.296,1235.22 577.882,1238.26 578.469,1236.68 579.055,1237.42 579.641,1237.89 580.228,1238.58 580.814,1239.33 581.401,1238.82 581.987,1238.18 582.574,1236.27 583.16,1235.59 583.746,1237.8 584.333,1236.93 584.919,1236.46 585.506,1234.66 586.092,1234.02 586.678,1233.45 587.265,1232.98 587.851,1231.6 588.438,1231.13 589.024,1230.82 589.61,1230.86 590.197,1231.72 590.783,1232.62 591.37,1230.98 591.956,1231.92 592.543,1231.27 593.129,1233.53 593.715,1233.16 594.302,1233.94 594.888,1233.49 595.475,1233.26 596.061,1230.29 596.647,1230.15 597.234,1228.41 597.82,1229.65 598.407,1229.34 598.993,1227.54 599.579,1227.2 600.166,1227.13 600.752,1224.53 601.339,1224.66 601.925,1222.22 602.512,1223.65 603.098,1222.3 603.684,1222.51 604.271,1222.77 604.857,1224.25 605.444,1225.41 606.03,1224.33 606.616,1224.18 607.203,1224.45 607.789,1224.54 608.376,1225.77 608.962,1225.92 609.548,1227.04 610.135,1228.29 610.721,1228.04 611.308,1227.84 611.894,1228.85 612.481,1227.37 613.067,1227.02 613.653,1228.05 614.24,1229.1 614.826,1228.66 615.413,1228.26 615.999,1229.19 616.585,1226.56 617.172,1227.8 617.758,1229.07 618.345,1230.12 618.931,1229.7 619.518,1231.91 620.104,1230.14 620.69,1230.47 621.277,1230.09 621.863,1229.44 622.45,1227.7 623.036,1228.58 623.622,1228.69 624.209,1227.49 624.795,1226.02 625.382,1227.3 625.968,1225.72 626.554,1224.34 627.141,1222.9 627.727,1224.15 628.314,1224.96 628.9,1223.54 629.487,1223.41 630.073,1221.87 630.659,1220.59 631.246,1223.12 631.832,1227.77 632.419,1228.69 633.005,1229.32 633.591,1230.07 634.178,1231.26 634.764,1230.72 635.351,1228.95 635.937,1228.55 636.523,1229.41 637.11,1230.22 637.696,1228.7 638.283,1229.62 638.869,1227.93 639.456,1227.84 640.042,1227.29 640.628,1228.08 641.215,1226.48 641.801,1224.99 642.388,1224.71 642.974,1224.55 643.56,1224.23 644.147,1225.26 644.733,1222.51 645.32,1222.48 645.906,1222.52 646.492,1223.63 647.079,1225 647.665,1223.78 648.252,1224.92 648.838,1225.99 649.425,1226.76 650.011,1226.14 650.597,1224.59 651.184,1224.39 651.77,1224.58 652.357,1225.46 652.943,1229.06 653.529,1227.21 654.116,1226.84 654.702,1226.64 655.289,1225.41 655.875,1225.08 656.462,1222.4 657.048,1222.16 657.634,1219.67 658.221,1220.82 658.807,1222.01 659.394,1220.65 659.98,1222 660.566,1222.08 661.153,1222.07 661.739,1221.92 662.326,1223.05 662.912,1219.29 663.498,1218.18 664.085,1219.48 664.671,1219.83 665.258,1217.33 665.844,1218.79 666.431,1218.9 667.017,1218.91 667.603,1218.58 668.19,1217.29 668.776,1216.08 669.363,1218.65 669.949,1218.74 670.535,1218.64 671.122,1218.74 671.708,1222.33 672.295,1221.92 672.881,1220.89 673.467,1222.98 674.054,1221.34 674.64,1220.12 675.227,1220.06 675.813,1222.65 676.4,1222.67 676.986,1224.94 677.572,1222.11 678.159,1224.48 678.745,1224.23 679.332,1223.99 679.918,1224.77 680.504,1230.72 681.091,1231.35 681.677,1233.44 682.264,1232.85 682.85,1233.08 683.436,1232.17 684.023,1230.32 684.609,1232.32 685.196,1230.23 685.782,1225.77 686.369,1225.19 686.955,1226.27 687.541,1224.96 688.128,1226.05 688.714,1225.66 689.301,1222.61 689.887,1223.93 690.473,1219.71 691.06,1219.65 691.646,1218.06 692.233,1216.91 692.819,1214.62 693.405,1213.43 693.992,1214 694.578,1215.38 695.165,1217.01 695.751,1217.17 696.338,1218.42 696.924,1217.11 697.51,1218.57 698.097,1220.95 698.683,1220.97 699.27,1218.55 699.856,1217.27 700.442,1217.42 701.029,1217.56 701.615,1217.48 702.202,1218.88 702.788,1218.81 703.375,1219 703.961,1218.97 704.547,1216.56 705.134,1215.55 705.72,1213.17 706.307,1212.28 706.893,1215.28 707.479,1215.57 708.066,1216.85 708.652,1218.15 709.239,1216.7 709.825,1218.07 710.411,1215.38 710.998,1215.85 711.584,1217.05 712.171,1215.92 712.757,1216.02 713.344,1214.9 713.93,1216.42 714.516,1216.64 715.103,1219.13 715.689,1220.43 716.276,1221.76 716.862,1225.78 717.448,1226.48 718.035,1227.37 718.621,1227.75 719.208,1227.18 719.794,1225.25 720.38,1224.79 720.967,1226.92 721.553,1224.09 722.14,1225.08 722.726,1223.49 723.313,1224.44 723.899,1222.75 724.485,1225.14 725.072,1223.48 725.658,1228.02 726.245,1230.1 726.831,1230.68 727.417,1230.04 728.004,1229.57 728.59,1229.29 729.177,1226.08 729.763,1224.44 730.349,1224.11 730.936,1225.06 731.522,1222.04 732.109,1219.29 732.695,1221.65 733.282,1218.59 733.868,1219.74 734.454,1219.6 735.041,1216.89 735.627,1219.14 736.214,1217.75 736.8,1215.19 737.386,1216.42 737.973,1217.64 738.559,1218.96 739.146,1220.05 739.732,1218.6 740.318,1218.68 740.905,1220.09 741.491,1218.82 742.078,1218.57 742.664,1218.58 743.251,1217.39 743.837,1218.58 744.423,1217.42 745.01,1216.12 745.596,1216.23 746.183,1215.24 746.769,1215.4 747.355,1214.13 747.942,1216.69 748.528,1216.59 749.115,1219.39 749.701,1219.3 750.288,1220.59 750.874,1221.52 751.46,1216.35 752.047,1216.26 752.633,1212.69 753.22,1210.27 753.806,1210.75 754.392,1211.01 754.979,1211.16 755.565,1210.41 756.152,1210.86 756.738,1212.55 757.324,1212.68 757.911,1211.62 758.497,1211.95 759.084,1210.78 759.67,1211.34 760.257,1211.44 760.843,1214.13 761.429,1215.6 762.016,1214.53 762.602,1213.1 763.189,1213.59 763.775,1215.01 764.361,1216.31 764.948,1216.26 765.534,1213.5 766.121,1211.49 766.707,1210.67 767.293,1213.52 767.88,1211.1 768.466,1210.18 769.053,1207.06 769.639,1207.38 770.226,1210.51 770.812,1209.42 771.398,1213.41 771.985,1212.4 772.571,1213.92 773.158,1215.47 773.744,1215.49 774.33,1215.57 774.917,1215.76 775.503,1216 776.09,1216.04 776.676,1214.98 777.262,1217.68 777.849,1216.43 778.435,1216.7 779.022,1219.39 779.608,1216.66 780.195,1216.5 780.781,1215.08 781.367,1215.02 781.954,1212.68 782.54,1212.92 783.127,1214.12 783.713,1216.67 784.299,1214.05 784.886,1215.31 785.472,1215.43 786.059,1216.6 786.645,1219.05 787.232,1220.13 787.818,1217.6 788.404,1215.89 788.991,1214.58 789.577,1210.71 790.164,1210.91 790.75,1211.25 791.336,1212.79 791.923,1215.46 792.509,1216.94 793.096,1214.18 793.682,1215.71 794.268,1217.17 794.855,1217.31 795.441,1217.35 796.028,1216.17 796.614,1218.52 797.201,1222.18 797.787,1221.73 798.373,1221.64 798.96,1221.65 799.546,1223.74 800.133,1224.77 800.719,1224.32 801.305,1225.32 801.892,1228.48 802.478,1225.35 803.065,1226.33 803.651,1226.11 804.237,1224.69 804.824,1224.47 805.41,1222.55 805.997,1220.71 806.583,1215.56 807.17,1214.34 807.756,1214.33 808.342,1214.39 808.929,1215.79 809.515,1215.79 810.102,1217.17 810.688,1218.3 811.274,1219.7 811.861,1220.86 812.447,1219.29 813.034,1220.04 813.62,1218.49 814.206,1220.77 814.793,1218.1 815.379,1217.04 815.966,1219.51 816.552,1217.78 817.139,1220.13 817.725,1219.99 818.311,1216.01 818.898,1217.3 819.484,1217.15 820.071,1217.17 820.657,1215.77 821.243,1215.6 821.83,1218 822.416,1218.76 823.003,1218.56 823.589,1218.3 824.175,1218.26 824.762,1219.21 825.348,1220.28 825.935,1220.17 826.521,1219 827.108,1219.98 827.694,1219.73 828.28,1219.65 828.867,1216.92 829.453,1217.08 830.04,1214.84 830.626,1215.95 831.212,1213.26 831.799,1212.2 832.385,1211.39 832.972,1211.47 833.558,1209.05 834.145,1209.13 834.731,1209.38 835.317,1211.1 835.904,1209.94 836.49,1206.55 837.077,1208.28 837.663,1209.89 838.249,1210.15 838.836,1212.88 839.422,1211.81 840.009,1211.88 840.595,1212 841.181,1212.15 841.768,1212.6 842.354,1214 842.941,1215.22 843.527,1215.19 844.114,1215.31 844.7,1215.35 845.286,1214.11 845.873,1211.65 846.459,1212 847.046,1210.87 847.632,1210.95 848.218,1211.17 848.805,1211.1 849.391,1212.31 849.978,1211.19 850.564,1211.27 851.15,1207.6 851.737,1210.67 852.323,1209.59 852.91,1210.96 853.496,1212.41 854.083,1212.24 854.669,1212.33 855.255,1211.33 855.842,1213.85 856.428,1214.08 857.015,1210.36 857.601,1211.95 858.187,1213.37 858.774,1208.5 859.36,1206.24 859.947,1206.53 860.533,1209.27 861.119,1209.39 861.706,1206.13 862.292,1207.72 862.879,1209.48 863.465,1209.72 864.052,1210.39 864.638,1211.71 865.224,1213.03 865.811,1214.39 866.397,1213.09 866.984,1211.87 867.57,1213.48 868.156,1214.84 868.743,1215.22 869.329,1215.29 869.916,1215.44 870.502,1218.14 871.089,1217.87 871.675,1217.79 872.261,1217.65 872.848,1218.92 873.434,1221.18 874.021,1223.43 874.607,1221.73 875.193,1220.13 875.78,1218.59 876.366,1218.01 876.953,1217.78 877.539,1216.33 878.125,1218.77 878.712,1220.01 879.298,1218.54 879.885,1219.55 880.471,1218.32 881.058,1217.98 881.644,1218.1 882.23,1215.51 882.817,1211.73 883.403,1215.75 883.99,1215.76 884.576,1215.88 885.162,1215.82 885.749,1214.54 886.335,1215.91 886.922,1214.87 887.508,1213.87 888.094,1216.1 888.681,1214.79 889.267,1214.87 889.854,1218.36 890.44,1219.43 891.027,1219.2 891.613,1218.99 892.199,1220.05 892.786,1222.44 893.372,1222.08 893.959,1221.52 894.545,1222.25 895.131,1221.79 895.718,1220 896.304,1219.8 896.891,1219.26 897.477,1220.17 898.063,1220.13 898.65,1219.97 899.236,1219.78 899.823,1219.42 900.409,1216.68 900.996,1214.07 901.582,1214.12 902.168,1216.61 902.755,1216.4 903.341,1218.39 903.928,1218.18 904.514,1217.94 905.1,1217.59 905.687,1216.14 906.273,1215.78 906.86,1217.09 907.446,1216.72 908.032,1216.7 908.619,1215.31 909.205,1215.44 909.792,1215.3 910.378,1215.27 910.965,1216.47 911.551,1216.44 912.137,1216.11 912.724,1213.55 913.31,1214.93 913.897,1212.14 914.483,1209.59 915.069,1208.64 915.656,1208.84 916.242,1207.64 916.829,1210.46 917.415,1210.39 918.002,1212 918.588,1213.66 919.174,1213.7 919.761,1212.55 920.347,1215.32 920.934,1216.61 921.52,1217.75 922.106,1217.5 922.693,1216.12 923.279,1215.89 923.866,1214.58 924.452,1214.7 925.038,1215.95 925.625,1214.58 926.211,1215.94 926.798,1215.87 927.384,1214.52 927.971,1211.97 928.557,1211.97 929.143,1213.34 929.73,1213.43 930.316,1214.77 930.903,1216.07 931.489,1210.99 932.075,1212.34 932.662,1212.33 933.248,1215.02 933.835,1214.95 934.421,1212.21 935.007,1212.24 935.594,1212.39 936.18,1213.81 936.767,1215.06 937.353,1213.92 937.94,1213.96 938.526,1212.57 939.112,1212.73 939.699,1213.92 940.285,1213.9 940.872,1212.58 941.458,1212.75 942.044,1210.51 942.631,1209.44 943.217,1209.82 943.804,1211.46 944.39,1211.67 944.976,1210.63 945.563,1211.78 946.149,1209.42 946.736,1210.89 947.322,1208.23 947.909,1211.13 948.495,1211.22 949.081,1213.99 949.668,1214.14 950.254,1215.33 950.841,1215.35 951.427,1214.05 952.013,1212.81 952.6,1212.76 953.186,1212.95 953.773,1211.61 954.359,1211.55 954.945,1213.94 955.532,1214.01 956.118,1213.85 956.705,1217.36 957.291,1217.32 957.878,1216.19 958.464,1214.74 959.05,1214.58 959.637,1215.74 960.223,1215.76 960.81,1212.92 961.396,1211.64 961.982,1213.06 962.569,1213.06 963.155,1213.24 963.742,1214.57 964.328,1212.08 964.915,1210.97 965.501,1210.09 966.087,1209.03 966.674,1209.43 967.26,1209.75 967.847,1211.04 968.433,1213.87 969.019,1212.71 969.606,1215.15 970.192,1213.99 970.779,1215.15 971.365,1216.23 971.951,1216.25 972.538,1216.16 973.124,1215.73 973.711,1216.77 974.297,1215.37 974.884,1215.09 975.47,1213.52 976.056,1213.56 976.643,1213.59 977.229,1216.14 977.816,1218.58 978.402,1217.14 978.988,1218.13 979.575,1219.27 980.161,1218.94 980.748,1221.16 981.334,1223.11 981.92,1220.96 982.507,1219.22 983.093,1217.73 983.68,1216.33 984.266,1217.35 984.853,1217.35 985.439,1218.61 986.025,1217.18 986.612,1218.14 987.198,1216.51 987.785,1217.65 988.371,1218.86 988.957,1217.25 989.544,1216.93 990.13,1215.59 990.717,1214.29 991.303,1214.17 991.889,1215.34 992.476,1216.53 993.062,1215.15 993.649,1217.68 994.235,1213.87 994.822,1213.95 995.408,1215.32 995.994,1214.14 996.581,1211.65 997.167,1211.78 997.754,1213.4 998.34,1212.4 998.926,1213.83 999.513,1213.69 1000.1,1213.65 1000.69,1208.46 1001.27,1207.48 1001.86,1205.42 1002.44,1209.63 1003.03,1211.02 1003.62,1211.06 1004.2,1211.26 1004.79,1211.44 1005.38,1211.52 1005.96,1211.5 1006.55,1212.96 1007.14,1210.61 1007.72,1211.04 1008.31,1213.55 1008.9,1212.14 1009.48,1213.49 1010.07,1213.5 1010.65,1212.4 1011.24,1214.8 1011.83,1214.41 1012.41,1213.24 1013,1212.23 1013.59,1213.69 1014.17,1213.57 1014.76,1214.89 1015.35,1215.06 1015.93,1216.55 1016.52,1217.51 1017.11,1218.51 1017.69,1219.47 1018.28,1216.75 1018.86,1219.2 1019.45,1220.13 1020.04,1222.55 1020.62,1223.17 1021.21,1223.72 1021.8,1223.5 1022.38,1225.76 1022.97,1225.16 1023.56,1224.73 1024.14,1224.32 1024.73,1219.98 1025.32,1220.91 1025.9,1222.71 1026.49,1220.81 1027.07,1219.4 1027.66,1218.96 1028.25,1218.22 1028.83,1216.63 1029.42,1217.74 1030.01,1217.65 1030.59,1222.58 1031.18,1219.65 1031.77,1217.16 1032.35,1216.87 1032.94,1214.18 1033.52,1212.76 1034.11,1215.26 1034.7,1212.5 1035.28,1212.51 1035.87,1211.34 1036.46,1212.64 1037.04,1216.58 1037.63,1216.52 1038.22,1215.26 1038.8,1215.2 1039.39,1218.58 1039.98,1218.17 1040.56,1218.05 1041.15,1221.33 1041.73,1220.93 1042.32,1219.27 1042.91,1219.05 1043.49,1219.95 1044.08,1219.63 1044.67,1221.61 1045.25,1219.9 1045.84,1218.43 1046.43,1216.91 1047.01,1215.64 1047.6,1213.99 1048.19,1212.46 1048.77,1212.58 1049.36,1213.99 1049.94,1211.24 1050.53,1212.56 1051.12,1212.45 1051.7,1212.61 1052.29,1212.7 1052.88,1212.92 1053.46,1212.97 1054.05,1215.57 1054.64,1212.97 1055.22,1211.83 1055.81,1210.97 1056.39,1209.8 1056.98,1212.75 1057.57,1212.56 1058.15,1212.46 1058.74,1211.51 1059.33,1211.8 1059.91,1210.19 1060.5,1210.15 1061.09,1212.51 1061.67,1212.69 1062.26,1215.17 1062.85,1213 1063.43,1214.04 1064.02,1212.68 1064.6,1211.29 1065.19,1208.94 1065.78,1210.32 1066.36,1206.88 1066.95,1207.17 1067.54,1206.11 1068.12,1206.34 1068.71,1207.63 1069.3,1207.96 1069.88,1212.05 1070.47,1212.08 1071.06,1213.43 1071.64,1210.84 1072.23,1212.02 1072.81,1212.01 1073.4,1212.05 1073.99,1210.87 1074.57,1211.02 1075.16,1212.6 1075.75,1212.25 1076.33,1211.21 1076.92,1212.62 1077.51,1212.73 1078.09,1210.14 1078.68,1210.11 1079.26,1211.26 1079.85,1210.18 1080.44,1211.55 1081.02,1212.79 1081.61,1213.12 1082.2,1209.43 1082.78,1209.66 1083.37,1209.94 1083.96,1213.76 1084.54,1214.82 1085.13,1215.7 1085.72,1216.65 1086.3,1216.55 1086.89,1216.47 1087.47,1218.74 1088.06,1220.91 1088.65,1219.32 1089.23,1218.91 1089.82,1222.61 1090.41,1225.86 1090.99,1224.08 1091.58,1222.32 1092.17,1219.43 1092.75,1220.3 1093.34,1216.07 1093.93,1218.45 1094.51,1213.27 1095.1,1214.41 1095.68,1214.44 1096.27,1213.05 1096.86,1210.63 1097.44,1208.18 1098.03,1205.71 1098.62,1206.09 1099.2,1211.38 1099.79,1210.16 1100.38,1210.26 1100.96,1208.01 1101.55,1204.59 1102.14,1206.52 1102.72,1208.09 1103.31,1208.16 1103.89,1205.95 1104.48,1203.82 1105.07,1202.99 1105.65,1205.91 1106.24,1206.37 1106.83,1207.77 1107.41,1206.98 1108,1211.18 1108.59,1211.39 1109.17,1210.3 1109.76,1209.42 1110.34,1209.79 1110.93,1207.53 1111.52,1211.39 1112.1,1209.11 1112.69,1206.9 1113.28,1207.45 1113.86,1210.05 1114.45,1210.61 1115.04,1207.14 1115.62,1207.71 1116.21,1209.2 1116.8,1210.81 1117.38,1212 1117.97,1212.26 1118.55,1213.66 1119.14,1211.24 1119.73,1212.8 1120.31,1213.19 1120.9,1214.53 1121.49,1213.22 1122.07,1213.31 1122.66,1213.46 1123.25,1213.34 1123.83,1215.66 1124.42,1216.73 1125.01,1218.03 1125.59,1216.73 1126.18,1213.97 1126.76,1215.4 1127.35,1217.63 1127.94,1217.48 1128.52,1217.46 1129.11,1217.41 1129.7,1217.64 1130.28,1218.79 1130.87,1216.11 1131.46,1217.14 1132.04,1215.82 1132.63,1215.76 1133.21,1214.42 1133.8,1215.59 1134.39,1216.68 1134.97,1215.42 1135.56,1218.83 1136.15,1219.75 1136.73,1219.14 1137.32,1221.23 1137.91,1219.48 1138.49,1219.08 1139.08,1217.46 1139.67,1217.13 1140.25,1214.23 1140.84,1213.12 1141.42,1214.41 1142.01,1213.04 1142.6,1212.95 1143.18,1212.01 1143.77,1212.11 1144.36,1210.9 1144.94,1210.99 1145.53,1212.23 1146.12,1212.34 1146.7,1215.87 1147.29,1215.58 1147.88,1215.52 1148.46,1214.28 1149.05,1213.02 1149.63,1215.53 1150.22,1216.67 1150.81,1216.54 1151.39,1215.18 1151.98,1217.46 1152.57,1217.23 1153.15,1218.12 1153.74,1217.91 1154.33,1216.2 1154.91,1217.54 1155.5,1217.22 1156.09,1218.08 1156.67,1215.63 1157.26,1216.94 1157.84,1219.3 1158.43,1219.36 1159.02,1217.88 1159.6,1214.02 1160.19,1215.1 1160.78,1218.77 1161.36,1217.31 1161.95,1215.77 1162.54,1213.29 1163.12,1213.44 1163.71,1213.42 1164.29,1214.61 1164.88,1215.84 1165.47,1213.1 1166.05,1214.2 1166.64,1218.14 1167.23,1218.05 1167.81,1216.78 1168.4,1216.3 1168.99,1214.89 1169.57,1212.2 1170.16,1209.82 1170.75,1209.95 1171.33,1207.58 1171.92,1207.63 1172.5,1208.04 1173.09,1209.61 1173.68,1213.65 1174.26,1213.58 1174.85,1214.97 1175.44,1217.41 1176.02,1217.12 1176.61,1214.5 1177.2,1213.32 1177.78,1213.47 1178.37,1213.51 1178.96,1213.58 1179.54,1215.94 1180.13,1215.57 1180.71,1219.19 1181.3,1217.5 1181.89,1218.43 1182.47,1214.45 1183.06,1214.42 1183.65,1213.08 1184.23,1210.54 1184.82,1212.93 1185.41,1210.62 1185.99,1213.36 1186.58,1214.78 1187.16,1214.61 1187.75,1212.24 1188.34,1211.01 1188.92,1212.31 1189.51,1213.63 1190.1,1214.7 1190.68,1214.53 1191.27,1213.32 1191.86,1212.37 1192.44,1213.87 1193.03,1213.77 1193.62,1213.95 1194.2,1210.29 1194.79,1209.02 1195.37,1209.31 1195.96,1207.09 1196.55,1208.93 1197.13,1209.09 1197.72,1206.75 1198.31,1203.48 1198.89,1207.86 1199.48,1209.22 1200.07,1209.3 1200.65,1214.49 1201.24,1212.2 1201.83,1210.85 1202.41,1209.67 1203,1208.51 1203.58,1207.6 1204.17,1209.07 1204.76,1209.35 1205.34,1208.24 1205.93,1209.68 1206.52,1208.61 1207.1,1209.94 1207.69,1210.11 1208.28,1208.65 1208.86,1209.1 1209.45,1210.77 1210.03,1209.74 1210.62,1211.18 1211.21,1213.74 1211.79,1213.69 1212.38,1213.58 1212.97,1211.18 1213.55,1212.6 1214.14,1215.28 1214.73,1213.92 1215.31,1212.71 1215.9,1214.89 1216.49,1214.79 1217.07,1214.58 1217.66,1212.27 1218.24,1210.91 1218.83,1213.44 1219.42,1212.14 1220,1210.99 1220.59,1211.25 1221.18,1212.54 1221.76,1214.01 1222.35,1216.57 1222.94,1218.86 1223.52,1223.41 1224.11,1223.08 1224.7,1222.65 1225.28,1223.53 1225.87,1221.72 1226.45,1223.85 1227.04,1221.9 1227.63,1221.69 1228.21,1219.72 1228.8,1219.33 1229.39,1217.65 1229.97,1217.5 1230.56,1218.34 1231.15,1216.77 1231.73,1216.95 1232.32,1216.96 1232.91,1215.47 1233.49,1217.94 1234.08,1219.13 1234.66,1218.75 1235.25,1216.24 1235.84,1217.04 1236.42,1217.91 1237.01,1217.43 1237.6,1215.9 1238.18,1216.13 1238.77,1214.83 1239.36,1214.89 1239.94,1213.4 1240.53,1209.58 1241.11,1208.64 1241.7,1211.46 1242.29,1211.75 1242.87,1214.49 1243.46,1213.36 1244.05,1212.13 1244.63,1212.03 1245.22,1208.41 1245.81,1208.5 1246.39,1209.88 1246.98,1210.92 1247.57,1212.1 1248.15,1210.56 1248.74,1211.83 1249.32,1211.85 1249.91,1213.14 1250.5,1211.72 1251.08,1213.04 1251.67,1216.91 1252.26,1217.89 1252.84,1216.39 1253.43,1216.61 1254.02,1216.34 1254.6,1213.57 1255.19,1214.66 1255.78,1210.63 1256.36,1208.35 1256.95,1207.3 1257.53,1206.37 1258.12,1206.76 1258.71,1205.74 1259.29,1204.92 1259.88,1206.74 1260.47,1204.78 1261.05,1204.08 1261.64,1205.64 1262.23,1208.4 1262.81,1208.48 1263.4,1208.58 1263.98,1208.92 1264.57,1210.66 1265.16,1212.09 1265.74,1213.34 1266.33,1215.82 1266.92,1219.4 1267.5,1217.4 1268.09,1214.82 1268.68,1214.8 1269.26,1215.93 1269.85,1217.15 1270.44,1215.59 1271.02,1216.67 1271.61,1216.57 1272.19,1218.86 1272.78,1218.48 1273.37,1216.92 1273.95,1214.27 1274.54,1213.18 1275.13,1211.94 1275.71,1213.21 1276.3,1211.82 1276.89,1213.19 1277.47,1213.26 1278.06,1212.9 1278.65,1211.39 1279.23,1211.27 1279.82,1210.07 1280.4,1211.43 1280.99,1214.05 1281.58,1215.04 1282.16,1213.54 1282.75,1212.27 1283.34,1211.13 1283.92,1207.62 1284.51,1206.81 1285.1,1208.53 1285.68,1206.39 1286.27,1205.51 1286.86,1205.77 1287.44,1206.43 1288.03,1208.42 1288.61,1208.52 1289.2,1210.26 1289.79,1210.69 1290.37,1211.83 1290.96,1211.8 1291.55,1210.39 1292.13,1209.39 1292.72,1208.54 1293.31,1208.72 1293.89,1210.11 1294.48,1211.38 1295.06,1212.55 1295.65,1213.89 1296.24,1211.29 1296.82,1211.55 1297.41,1211.47 1298,1211.51 1298.58,1210.23 1299.17,1213.93 1299.76,1212.69 1300.34,1210.02 1300.93,1210.08 1301.52,1210.28 1302.1,1209.09 1302.69,1210.58 1303.27,1212.09 1303.86,1217.34 1304.45,1216.97 1305.03,1218.23 1305.62,1219.25 1306.21,1220.19 1306.79,1220.97 1307.38,1219.33 1307.97,1219.94 1308.55,1220.67 1309.14,1218.1 1309.73,1217.58 1310.31,1219.99 1310.9,1219.76 1311.48,1219.33 1312.07,1220.19 1312.66,1221.03 1313.24,1219.47 1313.83,1220.27 1314.42,1219.75 1315,1219.45 1315.59,1219.47 1316.18,1220.36 1316.76,1222.48 1317.35,1220.88 1317.93,1220.35 1318.52,1217.37 1319.11,1215.99 1319.69,1215.77 1320.28,1215.8 1320.87,1215.59 1321.45,1217.97 1322.04,1216.2 1322.63,1216.14 1323.21,1218.33 1323.8,1220.45 1324.39,1220.14 1324.97,1219.88 1325.56,1219.63 1326.14,1216.84 1326.73,1216.54 1327.32,1216.42 1327.9,1215.03 1328.49,1213.63 1329.08,1215.43 1329.66,1214.16 1330.25,1211.33 1330.84,1215.53 1331.42,1215.23 1332.01,1214.96 1332.6,1214.94 1333.18,1213.66 1333.77,1213.54 1334.35,1213.34 1334.94,1214.35 1335.53,1215.72 1336.11,1214.35 1336.7,1211.65 1337.29,1211.9 1337.87,1213.04 1338.46,1210.54 1339.05,1210.54 1339.63,1209.36 1340.22,1208.37 1340.8,1207.27 1341.39,1207.7 1341.98,1208.1 1342.56,1205.99 1343.15,1208.79 1343.74,1207.52 1344.32,1208.04 1344.91,1208.38 1345.5,1208.64 1346.08,1207.74 1346.67,1206.71 1347.26,1206.96 1347.84,1206.03 1348.43,1206.52 1349.01,1207.17 1349.6,1207.41 1350.19,1207.68 1350.77,1205.55 1351.36,1206.06 1351.95,1207.69 1352.53,1207.95 1353.12,1209.33 1353.71,1209.73 1354.29,1211.35 1354.88,1211.36 1355.47,1208.91 1356.05,1207.99 1356.64,1209.34 1357.22,1209.52 1357.81,1212.21 1358.4,1214.69 1358.98,1212.25 1359.57,1212.42 1360.16,1212.52 1360.74,1211.26 1361.33,1208.85 1361.92,1212.82 1362.5,1215.46 1363.09,1218.77 1363.68,1218.5 1364.26,1217.11 1364.85,1215.77 1365.43,1212.08 1366.02,1210.75 1366.61,1209.67 1367.19,1208.7 1367.78,1209.98 1368.37,1207.48 1368.95,1205.32 1369.54,1206.63 1370.13,1204.61 1370.71,1206.32 1371.3,1209.24 1371.88,1208.29 1372.47,1209.79 1373.06,1208.8 1373.64,1208.04 1374.23,1208.44 1374.82,1207.54 1375.4,1210.26 1375.99,1210.44 1376.58,1212.02 1377.16,1212.08 1377.75,1212.21 1378.34,1214.68 1378.92,1215.77 1379.51,1217.99 1380.09,1218.73 1380.68,1217.09 1381.27,1214.58 1381.85,1214.48 1382.44,1213.22 1383.03,1214.53 1383.61,1214.5 1384.2,1213.1 1384.79,1211.78 1385.37,1211.94 1385.96,1212.11 1386.55,1212.2 1387.13,1212.11 1387.72,1214.88 1388.3,1217.09 1388.89,1218.25 1389.48,1217.98 1390.06,1218.9 1390.65,1218.59 1391.24,1217.16 1391.82,1218.13 1392.41,1217.97 1393,1217.87 1393.58,1216.49 1394.17,1213.69 1394.75,1210.09 1395.34,1208.78 1395.93,1208.93 1396.51,1209.45 1397.1,1209.52 1397.69,1210.82 1398.27,1212.17 1398.86,1212.32 1399.45,1211.39 1400.03,1213.84 1400.62,1214.92 1401.21,1214.89 1401.79,1216.12 1402.38,1214.8 1402.96,1213.37 1403.55,1213.43 1404.14,1213.59 1404.72,1214.97 1405.31,1214.94 1405.9,1214.86 1406.48,1214.86 1407.07,1216.22 1407.66,1213.82 1408.24,1211.22 1408.83,1212.62 1409.42,1212.81 1410,1210.13 1410.59,1210.31 1411.17,1211.86 1411.76,1211.77 1412.35,1211.73 1412.93,1210.76 1413.52,1212.1 1414.11,1212.16 1414.69,1211.28 1415.28,1210.18 1415.87,1210.47 1416.45,1208.32 1417.04,1207.45 1417.63,1207.73 1418.21,1207.98 1418.8,1208.11 1419.38,1209.59 1419.97,1209.84 1420.56,1209.9 1421.14,1211.33 1421.73,1210.19 1422.32,1212.66 1422.9,1212.7 1423.49,1211.33 1424.08,1210.11 1424.66,1211.21 1425.25,1210.1 1425.83,1211.83 1426.42,1210.86 1427.01,1211.13 1427.59,1212.46 1428.18,1212.48 1428.77,1212.49 1429.35,1211.39 1429.94,1211.59 1430.53,1210.42 1431.11,1212.09 1431.7,1212.29 1432.29,1213.43 1432.87,1215.76 1433.46,1215.31 1434.04,1214.03 1434.63,1213.83 1435.22,1211.32 1435.8,1211.48 1436.39,1211.37 1436.98,1211.72 1437.56,1213.18 1438.15,1211.77 1438.74,1213.11 1439.32,1215.87 1439.91,1214.47 1440.5,1214.57 1441.08,1217.11 1441.67,1214.24 1442.25,1219.28 1442.84,1217.74 1443.43,1216.38 1444.01,1214.95 1444.6,1214.81 1445.19,1214.66 1445.77,1215.9 1446.36,1215.96 1446.95,1218.24 1447.53,1220.43 1448.12,1221.12 1448.7,1226.84 1449.29,1224.74 1449.88,1222.85 1450.46,1223.33 1451.05,1222.86 1451.64,1222.5 1452.22,1222.04 1452.81,1220.41 1453.4,1220.02 1453.98,1217.23 1454.57,1215.94 1455.16,1217.04 1455.74,1217.95 1456.33,1215.08 1456.91,1217.43 1457.5,1217.26 1458.09,1217.06 1458.67,1217.89 1459.26,1218.84 1459.85,1219.66 1460.43,1219.34 1461.02,1218.9 1461.61,1218.51 1462.19,1215.9 1462.78,1218.33 1463.37,1216.69 1463.95,1218.89 1464.54,1219.78 1465.12,1220.81 1465.71,1221.51 1466.3,1221.31 1466.88,1221.01 1467.47,1220.14 1468.06,1221.11 1468.64,1221.75 1469.23,1221.2 1469.82,1220.66 1470.4,1222.78 1470.99,1223.58 1471.57,1221.53 1472.16,1220.84 1472.75,1220.5 1473.33,1216.33 1473.92,1214.88 1474.51,1218.38 1475.09,1216.81 1475.68,1216.52 1476.27,1215.13 1476.85,1215.1 1477.44,1214.79 1478.03,1217.29 1478.61,1217.05 1479.2,1217.93 1479.78,1216.12 1480.37,1214.79 1480.96,1217.16 1481.54,1215.5 1482.13,1209.22 1482.72,1210.65 1483.3,1210.62 1483.89,1210.61 1484.48,1210.51 1485.06,1210.46 1485.65,1208.04 1486.24,1209.5 1486.82,1211.18 1487.41,1209.99 1487.99,1210.15 1488.58,1210.25 1489.17,1210.16 1489.75,1210.31 1490.34,1207.87 1490.93,1209.23 1491.51,1209.43 1492.1,1208.05 1492.69,1207.06 1493.27,1204.87 1493.86,1205.06 1494.45,1204.17 1495.03,1202.17 1495.62,1202.6 1496.2,1205.35 1496.79,1204.48 1497.38,1202.56 1497.96,1201.78 1498.55,1202.25 1499.14,1202.79 1499.72,1203.3 1500.31,1203.82 1500.9,1206.85 1501.48,1208.67 1502.07,1210.06 1502.65,1207.58 1503.24,1207.6 1503.83,1208.06 1504.41,1208.56 1505,1206.24 1505.59,1206.53 1506.17,1205.3 1506.76,1207.08 1507.35,1208.6 1507.93,1209 1508.52,1209.45 1509.11,1208.5 1509.69,1209.89 1510.28,1210.12 1510.86,1211.81 1511.45,1213.18 1512.04,1214.41 1512.62,1214.24 1513.21,1215.39 1513.8,1212.72 1514.38,1213.88 1514.97,1213.7 1515.56,1215.15 1516.14,1214.95 1516.73,1216.1 1517.32,1213.64 1517.9,1209.8 1518.49,1208.61 1519.07,1210.21 1519.66,1207.57 1520.25,1208.01 1520.83,1207.15 1521.42,1207.51 1522.01,1207.7 1522.59,1209.26 1523.18,1209.39 1523.77,1209.41 1524.35,1210.91 1524.94,1213.49 1525.52,1214.82 1526.11,1214.65 1526.7,1217.09 1527.28,1218.25 1527.87,1219.2 1528.46,1216.19 1529.04,1216.28 1529.63,1216.26 1530.22,1218.75 1530.8,1216.17 1531.39,1216.2 1531.98,1218.31 1532.56,1217.85 1533.15,1217.67 1533.73,1220.22 1534.32,1217.36 1534.91,1214.85 1535.49,1213.43 1536.08,1210.93 1536.67,1213.11 1537.25,1210.6 1537.84,1213.26 1538.43,1213.18 1539.01,1210.76 1539.6,1211.96 1540.19,1212.11 1540.77,1209.68 1541.36,1210.05 1541.94,1211.53 1542.53,1212.61 1543.12,1215.01 1543.7,1212.12 1544.29,1209.7 1544.88,1211.44 1545.46,1211.74 1546.05,1210.68 1546.64,1211.06 1547.22,1210.15 1547.81,1212.48 1548.4,1213.63 1548.98,1212.09 1549.57,1214.51 1550.15,1210.81 1550.74,1212.19 1551.33,1209.82 1551.91,1211.38 1552.5,1207.6 1553.09,1209.06 1553.67,1207.98 1554.26,1204.59 1554.85,1206.17 1555.43,1205.32 1556.02,1208.23 1556.6,1208.46 1557.19,1207.25 1557.78,1205.05 1558.36,1207.96 1558.95,1208.17 1559.54,1211.08 1560.12,1212.45 1560.71,1213.77 1561.3,1212.3 1561.88,1212.22 1562.47,1212.33 1563.06,1212.6 1563.64,1211.54 1564.23,1209.16 1564.81,1208.09 1565.4,1208.42 1565.99,1209.88 1566.57,1208.81 1567.16,1211.27 1567.75,1208.86 1568.33,1210.21 1568.92,1207.87 1569.51,1206.94 1570.09,1207.43 1570.68,1203.85 1571.27,1205.67 1571.85,1204.81 1572.44,1205.12 1573.02,1206.71 1573.61,1207.15 1574.2,1205.09 1574.78,1204.24 1575.37,1199.77 1575.96,1200.72 1576.54,1202.72 1577.13,1201.87 1577.72,1202.36 1578.3,1202.87 1578.89,1202.03 1579.47,1204.19 1580.06,1207.12 1580.65,1207.58 1581.23,1211.81 1581.82,1211.8 1582.41,1211.68 1582.99,1211.71 1583.58,1211.8 1584.17,1210.62 1584.75,1210.99 1585.34,1209.72 1585.93,1209.87 1586.51,1208.61 1587.1,1208.91 1587.68,1210.58 1588.27,1210.87 1588.86,1212.29 1589.44,1212.35 1590.03,1212.47 1590.62,1212.7 1591.2,1214.98 1591.79,1213.48 1592.38,1214.62 1592.96,1215.53 1593.55,1216.8 1594.14,1216.66 1594.72,1215.19 1595.31,1216.29 1595.89,1218.84 1596.48,1218.79 1597.07,1221.13 1597.65,1220.97 1598.24,1219.23 1598.83,1221.14 1599.41,1222.02 1600,1220.34 1600.59,1218.7 1601.17,1215.96 1601.76,1218.01 1602.34,1216.44 1602.93,1215.1 1603.52,1214.99 1604.1,1212.57 1604.69,1212.67 1605.28,1213.98 1605.86,1215.04 1606.45,1213.65 1607.04,1219.87 1607.62,1215.55 1608.21,1216.78 1608.8,1215.28 1609.38,1212.64 1609.97,1211.45 1610.55,1213.82 1611.14,1214.8 1611.73,1214.69 1612.31,1215.68 1612.9,1215.78 1613.49,1217.96 1614.07,1219.92 1614.66,1218.37 1615.25,1216.87 1615.83,1216.77 1616.42,1216.56 1617.01,1216.4 1617.59,1213.74 1618.18,1216.04 1618.76,1216.05 1619.35,1213.35 1619.94,1213.29 1620.52,1214.28 1621.11,1214.16 1621.7,1215.44 1622.28,1212.82 1622.87,1212.86 1623.46,1211.89 1624.04,1213.33 1624.63,1213.27 1625.22,1213.52 1625.8,1213.39 1626.39,1214.42 1626.97,1214.17 1627.56,1212.66 1628.15,1211.69 1628.73,1210.71 1629.32,1210.64 1629.91,1213.36 1630.49,1212.17 1631.08,1211.99 1631.67,1210.99 1632.25,1209.72 1632.84,1213.63 1633.42,1213.63 1634.01,1215.09 1634.6,1213.86 1635.18,1215.13 1635.77,1214.85 1636.36,1217.11 1636.94,1216.85 1637.53,1217.73 1638.12,1220.07 1638.7,1218.47 1639.29,1215.73 1639.88,1215.55 1640.46,1214.01 1641.05,1213.94 1641.63,1212.91 1642.22,1208.93 1642.81,1208.1 1643.39,1209.68 1643.98,1213.72 1644.57,1214.84 1645.15,1215.92 1645.74,1214.31 1646.33,1214.1 1646.91,1211.49 1647.5,1211.57 1648.09,1210.29 1648.67,1212.99 1649.26,1210.42 1649.84,1211.84 1650.43,1214.4 1651.02,1213.19 1651.6,1214.22 1652.19,1220.41 1652.78,1219.75 1653.36,1216.64 1653.95,1215.04 1654.54,1214.97 1655.12,1214.74 1655.71,1216.72 1656.29,1218.82 1656.88,1217.23 1657.47,1215.92 1658.05,1214.39 1658.64,1214.18 1659.23,1211.87 1659.81,1211.98 1660.4,1210.87 1660.99,1213.11 1661.57,1211.99 1662.16,1211.97 1662.75,1211.82 1663.33,1210.54 1663.92,1210.73 1664.5,1210.82 1665.09,1209.69 1665.68,1211.19 1666.26,1214.78 1666.85,1216.14 1667.44,1218.68 1668.02,1217.38 1668.61,1216.01 1669.2,1215.81 1669.78,1215.86 1670.37,1215.73 1670.96,1215.72 1671.54,1215.71 1672.13,1214.39 1672.71,1218.03 1673.3,1221.68 1673.89,1223.57 1674.47,1225.2 1675.06,1224.8 1675.65,1225.53 1676.23,1217.43 1676.82,1217.09 1677.41,1216.7 1677.99,1215.27 1678.58,1216.63 1679.17,1216.54 1679.75,1214.81 1680.34,1214.79 1680.92,1214.9 1681.51,1216.15 1682.1,1217.26 1682.68,1215.91 1683.27,1212.2 1683.86,1212.32 1684.44,1212.12 1685.03,1209.48 1685.62,1205.91 1686.2,1204.97 1686.79,1206.84 1687.37,1204.8 1687.96,1205.22 1688.55,1205.75 1689.13,1207.34 1689.72,1206.64 1690.31,1207 1690.89,1208.51 1691.48,1207.22 1692.07,1208.75 1692.65,1207.76 1693.24,1209.25 1693.83,1210.55 1694.41,1210.88 1695,1212.37 1695.58,1213.75 1696.17,1212.66 1696.76,1215.05 1697.34,1213.68 1697.93,1215 1698.52,1215.89 1699.1,1215.77 1699.69,1216.66 1700.28,1216.47 1700.86,1212.7 1701.45,1212.78 1702.04,1212.51 1702.62,1209.99 1703.21,1210.19 1703.79,1210.44 1704.38,1210.66 1704.97,1213.4 1705.55,1214.4 1706.14,1210.54 1706.73,1213.19 1707.31,1214.38 1707.9,1218.04 1708.49,1217.9 1709.07,1217.6 1709.66,1218.74 1710.24,1217.26 1710.83,1214.56 1711.42,1215.75 1712,1215.65 1712.59,1210.26 1713.18,1210.5 1713.76,1210.69 1714.35,1208.5 1714.94,1210.21 1715.52,1212.82 1716.11,1211.54 1716.7,1215.42 1717.28,1216.69 1717.87,1215.2 1718.45,1219.03 1719.04,1217.57 1719.63,1217.07 1720.21,1219.56 1720.8,1216.74 1721.39,1221.57 1721.97,1218.61 1722.56,1217.36 1723.15,1219.59 1723.73,1216.75 1724.32,1216.65 1724.91,1218.86 1725.49,1216.28 1726.08,1217.36 1726.66,1219.52 1727.25,1216.86 1727.84,1216.51 1728.42,1212.74 1729.01,1213.9 1729.6,1212.38 1730.18,1211.15 1730.77,1211.41 1731.36,1211.26 1731.94,1213.64 1732.53,1213.44 1733.11,1212.31 1733.7,1211.14 1734.29,1211.4 1734.87,1212.96 1735.46,1216.73 1736.05,1218.84 1736.63,1216.08 1737.22,1214.52 1737.81,1214.27 1738.39,1216.62 1738.98,1216.6 1739.57,1215.07 1740.15,1213.56 1740.74,1214.82 1741.32,1216.01 1741.91,1214.81 1742.5,1216 1743.08,1212.15 1743.67,1213.49 1744.26,1213.53 1744.84,1212.36 1745.43,1212.42 1746.02,1211.16 1746.6,1210.17 1747.19,1207.86 1747.78,1206.81 1748.36,1209.59 1748.95,1209.84 1749.53,1210.33 1750.12,1209.26 1750.71,1209.57 1751.29,1211.02 1751.88,1211.14 1752.47,1210.2 1753.05,1210.45 1753.64,1213.02 1754.23,1210.58 1754.81,1210.77 1755.4,1208.62 1755.99,1210.46 1756.57,1210.79 1757.16,1210.86 1757.74,1211.89 1758.33,1211.69 1758.92,1211.63 1759.5,1209.29 1760.09,1209.23 1760.68,1210.76 1761.26,1212.38 1761.85,1212.6 1762.44,1211.26 1763.02,1211.56 1763.61,1209.42 1764.19,1209.69 1764.78,1211.17 1765.37,1211.13 1765.95,1211.19 1766.54,1210.26 1767.13,1209.05 1767.71,1208.21 1768.3,1206.89 1768.89,1205.97 1769.47,1205.02 1770.06,1205.37 1770.65,1208.31 1771.23,1210 1771.82,1209.93 1772.4,1210.31 1772.99,1211.86 1773.58,1214.54 1774.16,1216.84 1774.75,1215.54 1775.34,1215.67 1775.92,1216.94 1776.51,1215.43 1777.1,1215.38 1777.68,1218.94 1778.27,1218.52 1778.86,1219.47 1779.44,1219.21 1780.03,1219.69 1780.61,1218.3 1781.2,1220.39 1781.79,1218.62 1782.37,1218.16 1782.96,1217.93 1783.55,1220.14 1784.13,1219.44 1784.72,1215.52 1785.31,1215.35 1785.89,1217.61 1786.48,1217.26 1787.06,1217.17 1787.65,1214.54 1788.24,1215.88 1788.82,1218.09 1789.41,1220.28 1790,1218.66 1790.58,1215.65 1791.17,1214.12 1791.76,1216.54 1792.34,1216.4 1792.93,1218.69 1793.52,1219.78 1794.1,1218.62 1794.69,1215.78 1795.27,1214.16 1795.86,1212.95 1796.45,1212.86 1797.03,1214.41 1797.62,1212.97 1798.21,1211.84 1798.79,1211.73 1799.38,1213.06 1799.97,1215.43 1800.55,1216.45 1801.14,1215.01 1801.73,1213.78 1802.31,1213.57 1802.9,1211.3 1803.48,1207.48 1804.07,1207.47 1804.66,1207.54 1805.24,1205 1805.83,1207.78 1806.42,1208.25 1807,1208.33 1807.59,1209.89 1808.18,1208.99 1808.76,1208.36 1809.35,1206.18 1809.94,1206.3 1810.52,1207.99 1811.11,1208.34 1811.69,1209.8 1812.28,1210.25 1812.87,1212.54 1813.45,1211.1 1814.04,1211.18 1814.63,1212.51 1815.21,1216.37 1815.8,1213.94 1816.39,1213.86 1816.97,1211.26 1817.56,1212.58 1818.14,1212.75 1818.73,1212.55 1819.32,1209.92 1819.9,1211.53 1820.49,1211.37 1821.08,1214.19 1821.66,1212.65 1822.25,1216.32 1822.84,1215.05 1823.42,1214.89 1824.01,1218.39 1824.6,1215.88 1825.18,1215.95 1825.77,1215.73 1826.35,1215.58 1826.94,1213.89 1827.53,1212.38 1828.11,1208.68 1828.7,1206.39 1829.29,1207.95 1829.87,1208.14 1830.46,1208.45 1831.05,1211.49 1831.63,1211.65 1832.22,1213.05 1832.81,1211.96 1833.39,1211.89 1833.98,1210.56 1834.56,1212.24 1835.15,1213.46 1835.74,1213.64 1836.32,1213.67 1836.91,1213.69 1837.5,1211.15 1838.08,1212.41 1838.67,1213.55 1839.26,1214.86 1839.84,1216.04 1840.43,1213.56 1841.01,1213.42 1841.6,1214.73 1842.19,1215.57 1842.77,1212.88 1843.36,1211.52 1843.95,1213.83 1844.53,1214.91 1845.12,1214.89 1845.71,1214.81 1846.29,1212.33 1846.88,1211.03 1847.47,1209.75 1848.05,1212.38 1848.64,1212.41 1849.22,1213.65 1849.81,1214.71 1850.4,1212.23 1850.98,1211.17 1851.57,1213.88 1852.16,1213.87 1852.74,1210 1853.33,1211.34 1853.92,1212.84 1854.5,1211.76 1855.09,1212.06 1855.68,1212.19 1856.26,1212.2 1856.85,1213.61 1857.43,1209.81 1858.02,1212.69 1858.61,1211.76 1859.19,1213.23 1859.78,1213.17 1860.37,1211.98 1860.95,1210.97 1861.54,1210.84 1862.13,1210.03 1862.71,1210.29 1863.3,1211.53 1863.88,1215.13 1864.47,1213.75 1865.06,1216.27 1865.64,1217.26 1866.23,1221.96 1866.82,1220.39 1867.4,1222.62 1867.99,1219.76 1868.58,1216.93 1869.16,1217.06 1869.75,1217.84 1870.34,1216.2 1870.92,1214.86 1871.51,1212.22 1872.09,1214.87 1872.68,1211.06 1873.27,1209.87 1873.85,1211.23 1874.44,1209.97 1875.03,1210.21 1875.61,1212.68 1876.2,1209.12 1876.79,1211.67 1877.37,1210.35 1877.96,1209.36 1878.55,1210.98 1879.13,1212.11 1879.72,1210.8 1880.3,1211.1 1880.89,1211.13 1881.48,1211.27 1882.06,1211.45 1882.65,1212.64 1883.24,1211.12 1883.82,1210.35 1884.41,1211.64 1885,1213.15 1885.58,1214.61 1886.17,1214.71 1886.76,1215.81 1887.34,1216.82 1887.93,1216.67 1888.51,1216.6 1889.1,1216.48 1889.69,1214.99 1890.27,1212.7 1890.86,1212.71 1891.45,1210.35 1892.03,1214.31 1892.62,1216.79 1893.21,1216.43 1893.79,1216.12 1894.38,1215.84 1894.96,1211.85 1895.55,1212.76 1896.14,1214.2 1896.72,1212.9 1897.31,1216.53 1897.9,1216.46 1898.48,1216.45 1899.07,1216.1 1899.66,1214.6 1900.24,1214.58 1900.83,1214.33 1901.42,1210.19 1902,1207.72 1902.59,1207.93 1903.17,1210.58 1903.76,1209.6 1904.35,1212.43 1904.93,1212.67 1905.52,1211.44 1906.11,1212.59 1906.69,1212.5 1907.28,1212.69 1907.87,1210.17 1908.45,1210.26 1909.04,1207.72 1909.63,1208.04 1910.21,1206.82 1910.8,1210.9 1911.38,1212.12 1911.97,1212.24 1912.56,1214.96 1913.14,1214.88 1913.73,1214.49 1914.32,1215.59 1914.9,1214.43 1915.49,1212.03 1916.08,1209.59 1916.66,1209.79 1917.25,1210.28 1917.83,1210.67 1918.42,1212.28 1919.01,1212.48 1919.59,1212.64 1920.18,1214.05 1920.77,1214.06 1921.35,1212.65 1921.94,1215.09 1922.53,1212.55 1923.11,1213.76 1923.7,1215.02 1924.29,1214.95 1924.87,1216.05 1925.46,1217.01 1926.04,1217.02 1926.63,1216.64 1927.22,1215.4 1927.8,1214.15 1928.39,1216.47 1928.98,1216.24 1929.56,1217.36 1930.15,1214.6 1930.74,1214.53 1931.32,1213.42 1931.91,1212.43 1932.5,1212.55 1933.08,1206.14 1933.67,1207.8 1934.25,1209.37 1934.84,1209.48 1935.43,1208.29 1936.01,1208.55 1936.6,1209.76 1937.19,1211.31 1937.77,1211.36 1938.36,1213.92 1938.95,1211.45 1939.53,1211.8 1940.12,1213.33 1940.71,1213.32 1941.29,1214.58 1941.88,1216.83 1942.46,1216.8 1943.05,1215.64 1943.64,1215.55 1944.22,1215.57 1944.81,1215.29 1945.4,1215.24 1945.98,1215.2 1946.57,1212.73 1947.16,1215.27 1947.74,1215.29 1948.33,1215.47 1948.91,1214.03 1949.5,1216.12 1950.09,1215.83 1950.67,1214.16 1951.26,1215.38 1951.85,1215.5 1952.43,1219.18 1953.02,1221.56 1953.61,1221.05 1954.19,1220.76 1954.78,1220.38 1955.37,1218.97 1955.95,1218.79 1956.54,1217.03 1957.12,1216.51 1957.71,1213.53 1958.3,1214.86 1958.88,1211.18 1959.47,1208.81 1960.06,1209.15 1960.64,1210.41 1961.23,1210.33 1961.82,1213.38 1962.4,1213.2 1962.99,1212.97 1963.58,1212.88 1964.16,1214.29 1964.75,1214.18 1965.33,1211.64 1965.92,1213.01 1966.51,1209.18 1967.09,1209.27 1967.68,1210.75 1968.27,1209.54 1968.85,1208.43 1969.44,1208.68 1970.03,1208.75 1970.61,1207.82 1971.2,1212.05 1971.78,1209.85 1972.37,1211.27 1972.96,1211.31 1973.54,1207.48 1974.13,1209.09 1974.72,1209.03 1975.3,1206.74 1975.89,1204.6 1976.48,1207.74 1977.06,1207.21 1977.65,1206.48 1978.24,1208.38 1978.82,1208.8 1979.41,1208 1979.99,1207.07 1980.58,1208.87 1981.17,1210.17 1981.75,1211.5 1982.34,1212.77 1982.93,1211.35 1983.51,1208.96 1984.1,1210.48 1984.69,1211.87 1985.27,1211.96 1985.86,1209.71 1986.45,1209.8 1987.03,1209.96 1987.62,1211.66 1988.2,1215.48 1988.79,1215.29 1989.38,1216.7 1989.96,1215.17 1990.55,1213.78 1991.14,1213.88 1991.72,1215.06 1992.31,1213.67 1992.9,1212.47 1993.48,1213.68 1994.07,1212.41 1994.65,1212.72 1995.24,1213 1995.83,1213.13 1996.41,1213.39 1997,1213.6 1997.59,1213.32 1998.17,1215.72 1998.76,1215.67 1999.35,1217.86 1999.93,1218.65 2000.52,1218.24 2001.11,1219.15 2001.69,1218.94 2002.28,1218.65 2002.86,1215.72 2003.45,1214.19 2004.04,1214.07 2004.62,1213.95 2005.21,1214.76 2005.8,1216.99 2006.38,1217.9 2006.97,1217.73 2007.56,1218.82 2008.14,1217.56 2008.73,1216.07 2009.32,1214.55 2009.9,1218.53 2010.49,1218.59 2011.07,1219.5 2011.66,1216.84 2012.25,1216.69 2012.83,1217.58 2013.42,1219.97 2014.01,1217.25 2014.59,1214.72 2015.18,1214.57 2015.77,1210.55 2016.35,1210.38 2016.94,1210.41 2017.53,1210.6 2018.11,1209.53 2018.7,1206.1 2019.28,1207.52 2019.87,1207.51 2020.46,1205.29 2021.04,1205.99 2021.63,1207.38 2022.22,1207.95 2022.8,1206.8 2023.39,1207.18 2023.98,1208.82 2024.56,1208.86 2025.15,1208.1 2025.73,1209.77 2026.32,1209.62 2026.91,1208.47 2027.49,1207.36 2028.08,1206.63 2028.67,1205.92 2029.25,1207.65 2029.84,1206.27 2030.43,1209.41 2031.01,1212.03 2031.6,1212.15 2032.19,1212.39 2032.77,1215 2033.36,1213.82 2033.94,1213.95 2034.53,1215.05 2035.12,1213.78 2035.7,1212.51 2036.29,1212.62 2036.88,1213.52 2037.46,1214.8 2038.05,1218.78 2038.64,1220.85 2039.22,1219.23 2039.81,1220.06 2040.4,1219.38 2040.98,1221.45 2041.57,1222.47 2042.15,1220.76 2042.74,1217.73 2043.33,1216.2 2043.91,1213.55 2044.5,1215.08 2045.09,1216.2 2045.67,1217.53 2046.26,1213.36 2046.85,1213.13 2047.43,1212.29 2048.02,1211.14 2048.6,1208.62 2049.19,1206.39 2049.78,1210.54 2050.36,1210.58 2050.95,1210.79 2051.54,1210.8 2052.12,1210.92 2052.71,1209.65 2053.3,1208.54 2053.88,1208.67 2054.47,1209.01 2055.06,1206.38 2055.64,1206.71 2056.23,1207.04 2056.81,1206.24 2057.4,1207.65 2057.99,1206.77 2058.57,1207.19 2059.16,1211.18 2059.75,1211.12 2060.33,1214.77 2060.92,1214.75 2061.51,1214.46 2062.09,1213.27 2062.68,1213.11 2063.27,1213.1 2063.85,1216.77 2064.44,1217.67 2065.02,1216.26 2065.61,1217.37 2066.2,1215.97 2066.78,1217.3 2067.37,1214.81 2067.96,1213.56 2068.54,1214.99 2069.13,1213.88 2069.72,1213.57 2070.3,1212.31 2070.89,1210.82 2071.48,1210.77 2072.06,1209.66 2072.65,1209.86 2073.23,1211.15 2073.82,1211.05 2074.41,1212.52 2074.99,1210.02 2075.58,1209.87 2076.17,1208.88 2076.75,1207.81 2077.34,1209.43 2077.93,1210.71 2078.51,1214.66 2079.1,1212.02 2079.68,1213.58 2080.27,1213.52 2080.86,1213.53 2081.44,1216.33 2082.03,1214.96 2082.62,1213.73 2083.2,1212.52 2083.79,1213.78 2084.38,1214.94 2084.96,1216.36 2085.55,1216.57 2086.14,1216.51 2086.72,1219.09 2087.31,1218.94 2087.89,1218.59 2088.48,1216.93 2089.07,1215.49 2089.65,1214.15 2090.24,1214.18 2090.83,1214.26 2091.41,1209.27 2092,1209.25 2092.59,1209.51 2093.17,1211.11 2093.76,1209.97 2094.35,1208.72 2094.93,1207.57 2095.52,1209.16 2096.1,1212.11 2096.69,1214.47 2097.28,1216.83 2097.86,1215.5 2098.45,1216.52 2099.04,1217.77 2099.62,1215.9 2100.21,1214.5 2100.8,1214.39 2101.38,1216.74 2101.97,1217.89 2102.55,1216.47 2103.14,1216.08 2103.73,1218.46 2104.31,1217.08 2104.9,1219.47 2105.49,1221.62 2106.07,1223.39 2106.66,1222.64 2107.25,1223.4 2107.83,1221.45 2108.42,1221.18 2109.01,1222.29 2109.59,1221.72 2110.18,1221.02 2110.76,1217.92 2111.35,1215.09 2111.94,1214.73 2112.52,1214.49 2113.11,1215.6 2113.7,1214.17 2114.28,1214.18 2114.87,1216.79 2115.46,1217.57 2116.04,1219.65 2116.63,1217.01 2117.22,1215.78 2117.8,1215.79 2118.39,1219.31 2118.97,1217.85 2119.56,1217.74 2120.15,1216.22 2120.73,1213.66 2121.32,1213.72 2121.91,1214.93 2122.49,1216.42 2123.08,1216.61 2123.67,1215.11 2124.25,1218.79 2124.84,1218.4 2125.42,1217.04 2126.01,1216.67 2126.6,1213.91 2127.18,1213.93 2127.77,1213.7 2128.36,1217.34 2128.94,1216.82 2129.53,1216.52 2130.12,1216.15 2130.7,1213.71 2131.29,1211.09 2131.88,1214.97 2132.46,1212.59 2133.05,1209.98 2133.63,1211.19 2134.22,1209.94 2134.81,1211.48 2135.39,1211.55 2135.98,1213.11 2136.57,1215.29 2137.15,1213.99 2137.74,1213.9 2138.33,1213.89 2138.91,1212.88 2139.5,1211.85 2140.09,1209.68 2140.67,1212.12 2141.26,1210.71 2141.84,1210.74 2142.43,1212.16 2143.02,1212.13 2143.6,1212.29 2144.19,1208.84 2144.78,1209.36 2145.36,1209.54 2145.95,1211.32 2146.54,1210.17 2147.12,1210.41 2147.71,1210.53 2148.3,1210.79 2148.88,1212.46 2149.47,1215.06 2150.05,1215.26 2150.64,1215.17 2151.23,1214.02 2151.81,1214.76 2152.4,1212.33 2152.99,1212.33 2153.57,1211.02 2154.16,1208.78 2154.75,1207.9 2155.33,1212.99 2155.92,1215.73 2156.5,1215.48 2157.09,1215.24 2157.68,1215.11 2158.26,1213.66 \"/>\n<path clip-path=\"url(#clip052)\" d=\"M986.025 1213.69 L986.612 1213.69 L987.198 1213.69 L987.785 1213.69 L988.371 1213.69 L988.957 1213.69 L989.544 1213.69 L990.13 1213.69 L990.717 1213.69 L991.303 1213.69 L991.889 1213.69 L992.476 1213.69 L993.062 1213.69 L993.649 1213.69 L994.235 1213.69 L994.822 1213.69 L995.408 1213.69 L995.994 1213.69 L996.581 1213.69 L997.167 1213.69 L997.754 1213.69 L998.34 1213.69 L998.926 1213.69 L999.513 1213.69 L1000.1 1213.69 L1000.69 1213.69 L1001.27 1213.69 L1001.86 1213.69 L1002.44 1213.69 L1003.03 1213.69 L1003.62 1213.69 L1004.2 1213.69 L1004.79 1213.69 L1005.38 1213.69 L1005.96 1213.69 L1006.55 1213.69 L1007.14 1213.69 L1007.72 1213.69 L1008.31 1213.69 L1008.9 1213.69 L1009.48 1213.69 L1010.07 1213.69 L1010.65 1213.69 L1011.24 1213.69 L1011.83 1213.69 L1012.41 1213.69 L1013 1213.69 L1013.59 1213.69 L1014.17 1213.69 L1014.76 1213.69 L1015.35 1213.69 L1015.93 1213.69 L1016.52 1213.69 L1017.11 1213.69 L1017.69 1213.69 L1018.28 1213.69 L1018.86 1213.69 L1019.45 1213.69 L1020.04 1213.69 L1020.62 1213.69 L1021.21 1213.69 L1021.8 1213.69 L1022.38 1213.69 L1022.97 1213.69 L1023.56 1213.69 L1024.14 1213.69 L1024.73 1213.69 L1025.32 1213.69 L1025.9 1213.69 L1026.49 1213.69 L1027.07 1213.69 L1027.66 1213.69 L1028.25 1213.69 L1028.83 1213.69 L1029.42 1213.69 L1030.01 1213.69 L1030.59 1213.69 L1031.18 1213.69 L1031.77 1213.69 L1032.35 1213.69 L1032.94 1213.69 L1033.52 1213.69 L1034.11 1213.69 L1034.7 1213.69 L1035.28 1213.69 L1035.87 1213.69 L1036.46 1213.69 L1037.04 1213.69 L1037.63 1213.69 L1038.22 1213.69 L1038.8 1213.69 L1039.39 1213.69 L1039.98 1213.69 L1040.56 1213.69 L1041.15 1213.69 L1041.73 1213.69 L1042.32 1213.69 L1042.91 1213.69 L1043.49 1213.69 L1044.08 1213.69 L1044.67 1213.69 L1045.25 1213.69 L1045.84 1213.69 L1046.43 1213.69 L1047.01 1213.69 L1047.6 1213.69 L1048.19 1213.69 L1048.77 1213.69 L1049.36 1213.69 L1049.94 1213.69 L1050.53 1213.69 L1051.12 1213.69 L1051.7 1213.69 L1052.29 1213.69 L1052.88 1213.69 L1053.46 1213.69 L1054.05 1213.69 L1054.64 1213.69 L1055.22 1213.69 L1055.81 1213.69 L1056.39 1213.69 L1056.98 1213.69 L1057.57 1213.69 L1058.15 1213.69 L1058.74 1213.69 L1059.33 1213.69 L1059.91 1213.69 L1060.5 1213.69 L1061.09 1213.69 L1061.67 1213.69 L1062.26 1213.69 L1062.85 1213.69 L1063.43 1213.69 L1064.02 1213.69 L1064.6 1213.69 L1065.19 1213.69 L1065.78 1213.69 L1066.36 1213.69 L1066.95 1213.69 L1067.54 1213.69 L1068.12 1213.69 L1068.71 1213.69 L1069.3 1213.69 L1069.88 1213.69 L1070.47 1213.69 L1071.06 1213.69 L1071.64 1213.69 L1072.23 1213.69 L1072.81 1213.69 L1073.4 1213.69 L1073.99 1213.69 L1074.57 1213.69 L1075.16 1213.69 L1075.75 1213.69 L1076.33 1213.69 L1076.92 1213.69 L1077.51 1213.69 L1078.09 1213.69 L1078.68 1213.69 L1079.26 1213.69 L1079.85 1213.69 L1080.44 1213.69 L1081.02 1213.69 L1081.61 1213.69 L1082.2 1213.69 L1082.78 1213.69 L1083.37 1213.69 L1083.96 1213.69 L1084.54 1213.69 L1085.13 1213.69 L1085.72 1213.69 L1086.3 1213.69 L1086.89 1213.69 L1087.47 1213.69 L1088.06 1213.69 L1088.65 1213.69 L1089.23 1213.69 L1089.82 1213.69 L1090.41 1213.69 L1090.99 1213.69 L1091.58 1213.69 L1092.17 1213.69 L1092.75 1213.69 L1093.34 1213.69 L1093.93 1213.69 L1094.51 1213.69 L1095.1 1213.69 L1095.68 1213.69 L1096.27 1213.69 L1096.86 1213.69 L1097.44 1213.69 L1098.03 1213.69 L1098.62 1213.69 L1099.2 1213.69 L1099.79 1213.69 L1100.38 1213.69 L1100.96 1213.69 L1101.55 1213.69 L1102.14 1213.69 L1102.72 1213.69 L1103.31 1213.69 L1103.89 1213.69 L1104.48 1213.69 L1105.07 1213.69 L1105.65 1213.69 L1106.24 1213.69 L1106.83 1213.69 L1107.41 1213.69 L1108 1213.69 L1108.59 1213.69 L1109.17 1213.69 L1109.76 1213.69 L1110.34 1213.69 L1110.93 1213.69 L1111.52 1213.69 L1112.1 1213.69 L1112.69 1213.69 L1113.28 1213.69 L1113.86 1213.69 L1114.45 1213.69 L1115.04 1213.69 L1115.62 1213.69 L1116.21 1213.69 L1116.8 1213.69 L1117.38 1213.69 L1117.97 1213.69 L1118.55 1213.69 L1119.14 1213.69 L1119.73 1213.69 L1120.31 1213.69 L1120.9 1213.69 L1121.49 1213.69 L1122.07 1213.69 L1122.66 1213.69 L1123.25 1213.69 L1123.83 1213.69 L1124.42 1213.69 L1125.01 1213.69 L1125.59 1213.69 L1126.18 1213.69 L1126.76 1213.69 L1127.35 1213.69 L1127.94 1213.69 L1128.52 1213.69 L1129.11 1213.69 L1129.7 1213.69 L1130.28 1213.69 L1130.87 1213.69 L1131.46 1213.69 L1132.04 1213.69 L1132.63 1213.69 L1133.21 1213.69 L1133.8 1213.69 L1134.39 1213.69 L1134.97 1213.69 L1135.56 1213.69 L1136.15 1213.69 L1136.73 1213.69 L1137.32 1213.69 L1137.91 1213.69 L1138.49 1213.69 L1139.08 1213.69 L1139.67 1213.69 L1140.25 1213.69 L1140.84 1213.69 L1141.42 1213.69 L1142.01 1213.69 L1142.6 1213.69 L1143.18 1213.69 L1143.77 1213.69 L1144.36 1213.69 L1144.94 1213.69 L1145.53 1213.69 L1146.12 1213.69 L1146.7 1213.69 L1147.29 1213.69 L1147.88 1213.69 L1148.46 1213.69 L1149.05 1213.69 L1149.63 1213.69 L1150.22 1213.69 L1150.81 1213.69 L1151.39 1213.69 L1151.98 1213.69 L1152.57 1213.69 L1153.15 1213.69 L1153.74 1213.69 L1154.33 1213.69 L1154.91 1213.69 L1155.5 1213.69 L1156.09 1213.69 L1156.67 1213.69 L1157.26 1213.69 L1157.84 1213.69 L1158.43 1213.69 L1159.02 1213.69 L1159.6 1213.69 L1160.19 1213.69 L1160.78 1213.69 L1161.36 1213.69 L1161.95 1213.69 L1162.54 1213.69 L1163.12 1213.69 L1163.71 1213.69 L1164.29 1213.69 L1164.88 1213.69 L1165.47 1213.69 L1166.05 1213.69 L1166.64 1213.69 L1167.23 1213.69 L1167.81 1213.69 L1168.4 1213.69 L1168.99 1213.69 L1169.57 1213.69 L1170.16 1213.69 L1170.75 1213.69 L1171.33 1213.69 L1171.92 1213.69 L1172.5 1213.69 L1173.09 1213.69 L1173.68 1213.69 L1174.26 1213.69 L1174.85 1213.69 L1175.44 1213.69 L1176.02 1213.69 L1176.61 1213.69 L1177.2 1213.69 L1177.78 1213.69 L1178.37 1213.69 L1178.96 1213.69 L1179.54 1213.69 L1180.13 1213.69 L1180.71 1213.69 L1181.3 1213.69 L1181.89 1213.69 L1182.47 1213.69 L1183.06 1213.69 L1183.65 1213.69 L1184.23 1213.69 L1184.82 1213.69 L1185.41 1213.69 L1185.99 1213.69 L1186.58 1213.69 L1187.16 1213.69 L1187.75 1213.69 L1188.34 1213.69 L1188.92 1213.69 L1189.51 1213.69 L1190.1 1213.69 L1190.68 1213.69 L1191.27 1213.69 L1191.86 1213.69 L1192.44 1213.69 L1193.03 1213.69 L1193.62 1213.69 L1194.2 1213.69 L1194.79 1213.69 L1195.37 1213.69 L1195.96 1213.69 L1196.55 1213.69 L1197.13 1213.69 L1197.72 1213.69 L1198.31 1213.69 L1198.89 1213.69 L1199.48 1213.69 L1200.07 1213.69 L1200.65 1213.69 L1201.24 1213.69 L1201.83 1213.69 L1202.41 1213.69 L1203 1213.69 L1203.58 1213.69 L1204.17 1213.69 L1204.76 1213.69 L1205.34 1213.69 L1205.93 1213.69 L1206.52 1213.69 L1207.1 1213.69 L1207.69 1213.69 L1208.28 1213.69 L1208.86 1213.69 L1209.45 1213.69 L1210.03 1213.69 L1210.62 1213.69 L1211.21 1213.69 L1211.79 1213.69 L1212.38 1213.69 L1212.97 1213.69 L1213.55 1213.69 L1214.14 1213.69 L1214.73 1213.69 L1215.31 1213.69 L1215.9 1213.69 L1216.49 1213.69 L1217.07 1213.69 L1217.66 1213.69 L1218.24 1213.69 L1218.83 1213.69 L1219.42 1213.69 L1220 1213.69 L1220.59 1213.69 L1221.18 1213.69 L1221.76 1213.69 L1222.35 1213.69 L1222.94 1213.69 L1223.52 1213.69 L1224.11 1213.69 L1224.7 1213.69 L1225.28 1213.69 L1225.87 1213.69 L1226.45 1213.69 L1227.04 1213.69 L1227.63 1213.69 L1228.21 1213.69 L1228.8 1213.69 L1229.39 1213.69 L1229.97 1213.69 L1230.56 1213.69 L1231.15 1213.69 L1231.73 1213.69 L1232.32 1213.69 L1232.91 1213.69 L1233.49 1213.69 L1234.08 1213.69 L1234.66 1213.69 L1235.25 1213.69 L1235.84 1213.69 L1236.42 1213.69 L1237.01 1213.69 L1237.6 1213.69 L1238.18 1213.69 L1238.77 1213.69 L1239.36 1213.69 L1239.94 1213.69 L1240.53 1213.69 L1241.11 1213.69 L1241.7 1213.69 L1242.29 1213.69 L1242.87 1213.69 L1243.46 1213.69 L1244.05 1213.69 L1244.63 1213.69 L1245.22 1213.69 L1245.81 1213.69 L1246.39 1213.69 L1246.98 1213.69 L1247.57 1213.69 L1248.15 1213.69 L1248.74 1213.69 L1249.32 1213.69 L1249.91 1213.69 L1250.5 1213.69 L1251.08 1213.69 L1251.67 1213.69 L1252.26 1213.69 L1252.84 1213.69 L1253.43 1213.69 L1254.02 1213.69 L1254.6 1213.69 L1255.19 1213.69 L1255.78 1213.69 L1256.36 1213.69 L1256.95 1213.69 L1257.53 1213.69 L1258.12 1213.69 L1258.71 1213.69 L1259.29 1213.69 L1259.88 1213.69 L1260.47 1213.69 L1261.05 1213.69 L1261.64 1213.69 L1262.23 1213.69 L1262.81 1213.69 L1263.4 1213.69 L1263.98 1213.69 L1264.57 1213.69 L1265.16 1213.69 L1265.74 1213.69 L1266.33 1213.69 L1266.92 1213.69 L1267.5 1213.69 L1268.09 1213.69 L1268.68 1213.69 L1269.26 1213.69 L1269.85 1213.69 L1270.44 1213.69 L1271.02 1213.69 L1271.61 1213.69 L1272.19 1213.69 L1272.78 1213.69 L1273.37 1213.69 L1273.95 1213.69 L1274.54 1213.69 L1275.13 1213.69 L1275.71 1213.69 L1276.3 1213.69 L1276.89 1213.69 L1277.47 1213.69 L1278.06 1213.69 L1278.65 1213.69 L1279.23 1213.69 L1279.82 1213.69 L1280.4 1213.69 L1280.99 1213.69 L1281.58 1213.69 L1282.16 1213.69 L1282.75 1213.69 L1283.34 1213.69 L1283.92 1213.69 L1284.51 1213.69 L1285.1 1213.69 L1285.68 1213.69 L1286.27 1213.69 L1286.86 1213.69 L1287.44 1213.69 L1288.03 1213.69 L1288.61 1213.69 L1289.2 1213.69 L1289.79 1213.69 L1290.37 1213.69 L1290.96 1213.69 L1291.55 1213.69 L1292.13 1213.69 L1292.72 1213.69 L1293.31 1213.69 L1293.89 1213.69 L1294.48 1213.69 L1295.06 1213.69 L1295.65 1213.69 L1296.24 1213.69 L1296.82 1213.69 L1297.41 1213.69 L1298 1213.69 L1298.58 1213.69 L1299.17 1213.69 L1299.76 1213.69 L1300.34 1213.69 L1300.93 1213.69 L1301.52 1213.69 L1302.1 1213.69 L1302.69 1213.69 L1303.27 1213.69 L1303.86 1213.69 L1304.45 1213.69 L1305.03 1213.69 L1305.62 1213.69 L1306.21 1213.69 L1306.79 1213.69 L1307.38 1213.69 L1307.97 1213.69 L1308.55 1213.69 L1309.14 1213.69 L1309.73 1213.69 L1310.31 1213.69 L1310.9 1213.69 L1311.48 1213.69 L1312.07 1213.69 L1312.66 1213.69 L1313.24 1213.69 L1313.83 1213.69 L1314.42 1213.69 L1315 1213.69 L1315.59 1213.69 L1316.18 1213.69 L1316.76 1213.69 L1317.35 1213.69 L1317.93 1213.69 L1318.52 1213.69 L1319.11 1213.69 L1319.69 1213.69 L1320.28 1213.69 L1320.87 1213.69 L1321.45 1213.69 L1322.04 1213.69 L1322.63 1213.69 L1323.21 1213.69 L1323.8 1213.69 L1324.39 1213.69 L1324.97 1213.69 L1325.56 1213.69 L1326.14 1213.69 L1326.73 1213.69 L1327.32 1213.69 L1327.9 1213.69 L1328.49 1213.69 L1329.08 1213.69 L1329.66 1213.69 L1330.25 1213.69 L1330.84 1213.69 L1331.42 1213.69 L1332.01 1213.69 L1332.6 1213.69 L1333.18 1213.69 L1333.77 1213.69 L1334.35 1213.69 L1334.94 1213.69 L1335.53 1213.69 L1336.11 1213.69 L1336.7 1213.69 L1337.29 1213.69 L1337.87 1213.69 L1338.46 1213.69 L1339.05 1213.69 L1339.63 1213.69 L1340.22 1213.69 L1340.8 1213.69 L1341.39 1213.69 L1341.98 1213.69 L1342.56 1213.69 L1343.15 1213.69 L1343.74 1213.69 L1344.32 1213.69 L1344.91 1213.69 L1345.5 1213.69 L1346.08 1213.69 L1346.67 1213.69 L1347.26 1213.69 L1347.84 1213.69 L1348.43 1213.69 L1349.01 1213.69 L1349.6 1213.69 L1350.19 1213.69 L1350.77 1213.69 L1351.36 1213.69 L1351.95 1213.69 L1352.53 1213.69 L1353.12 1213.69 L1353.71 1213.69 L1354.29 1213.69 L1354.88 1213.69 L1355.47 1213.69 L1356.05 1213.69 L1356.64 1213.69 L1357.22 1213.69 L1357.81 1213.69 L1358.4 1213.69 L1358.98 1213.69 L1359.57 1213.69 L1360.16 1213.69 L1360.74 1213.69 L1361.33 1213.69 L1361.92 1213.69 L1362.5 1213.69 L1363.09 1213.69 L1363.68 1213.69 L1364.26 1213.69 L1364.85 1213.69 L1365.43 1213.69 L1366.02 1213.69 L1366.61 1213.69 L1367.19 1213.69 L1367.78 1213.69 L1368.37 1213.69 L1368.95 1213.69 L1369.54 1213.69 L1370.13 1213.69 L1370.71 1213.69 L1371.3 1213.69 L1371.88 1213.69 L1372.47 1213.69 L1373.06 1213.69 L1373.64 1213.69 L1374.23 1213.69 L1374.82 1213.69 L1375.4 1213.69 L1375.99 1213.69 L1376.58 1213.69 L1377.16 1213.69 L1377.75 1213.69 L1378.34 1213.69 L1378.92 1213.69 L1379.51 1213.69 L1380.09 1213.69 L1380.68 1213.69 L1381.27 1213.69 L1381.85 1213.69 L1382.44 1213.69 L1383.03 1213.69 L1383.61 1213.69 L1384.2 1213.69 L1384.79 1213.69 L1385.37 1213.69 L1385.96 1213.69 L1386.55 1213.69 L1387.13 1213.69 L1387.72 1213.69 L1388.3 1213.69 L1388.89 1213.69 L1389.48 1213.69 L1390.06 1213.69 L1390.65 1213.69 L1391.24 1213.69 L1391.82 1213.69 L1392.41 1213.69 L1393 1213.69 L1393.58 1213.69 L1394.17 1213.69 L1394.75 1213.69 L1395.34 1213.69 L1395.93 1213.69 L1396.51 1213.69 L1397.1 1213.69 L1397.69 1213.69 L1398.27 1213.69 L1398.86 1213.69 L1399.45 1213.69 L1400.03 1213.69 L1400.62 1213.69 L1401.21 1213.69 L1401.79 1213.69 L1402.38 1213.69 L1402.96 1213.69 L1403.55 1213.69 L1404.14 1213.69 L1404.72 1213.69 L1405.31 1213.69 L1405.9 1213.69 L1406.48 1213.69 L1407.07 1213.69 L1407.66 1213.69 L1408.24 1213.69 L1408.83 1213.69 L1409.42 1213.69 L1410 1213.69 L1410.59 1213.69 L1411.17 1213.69 L1411.76 1213.69 L1412.35 1213.69 L1412.93 1213.69 L1413.52 1213.69 L1414.11 1213.69 L1414.69 1213.69 L1415.28 1213.69 L1415.87 1213.69 L1416.45 1213.69 L1417.04 1213.69 L1417.63 1213.69 L1418.21 1213.69 L1418.8 1213.69 L1419.38 1213.69 L1419.97 1213.69 L1420.56 1213.69 L1421.14 1213.69 L1421.73 1213.69 L1422.32 1213.69 L1422.9 1213.69 L1423.49 1213.69 L1424.08 1213.69 L1424.66 1213.69 L1425.25 1213.69 L1425.83 1213.69 L1426.42 1213.69 L1427.01 1213.69 L1427.59 1213.69 L1428.18 1213.69 L1428.77 1213.69 L1429.35 1213.69 L1429.94 1213.69 L1430.53 1213.69 L1431.11 1213.69 L1431.7 1213.69 L1432.29 1213.69 L1432.87 1213.69 L1433.46 1213.69 L1434.04 1213.69 L1434.63 1213.69 L1435.22 1213.69 L1435.8 1213.69 L1436.39 1213.69 L1436.98 1213.69 L1437.56 1213.69 L1438.15 1213.69 L1438.74 1213.69 L1439.32 1213.69 L1439.91 1213.69 L1440.5 1213.69 L1441.08 1213.69 L1441.67 1213.69 L1442.25 1213.69 L1442.84 1213.69 L1443.43 1213.69 L1444.01 1213.69 L1444.6 1213.69 L1445.19 1213.69 L1445.77 1213.69 L1446.36 1213.69 L1446.95 1213.69 L1447.53 1213.69 L1448.12 1213.69 L1448.7 1213.69 L1449.29 1213.69 L1449.88 1213.69 L1450.46 1213.69 L1451.05 1213.69 L1451.64 1213.69 L1452.22 1213.69 L1452.81 1213.69 L1453.4 1213.69 L1453.98 1213.69 L1454.57 1213.69 L1455.16 1213.69 L1455.74 1213.69 L1456.33 1213.69 L1456.91 1213.69 L1457.5 1213.69 L1458.09 1213.69 L1458.67 1213.69 L1459.26 1213.69 L1459.85 1213.69 L1460.43 1213.69 L1461.02 1213.69 L1461.61 1213.69 L1462.19 1213.69 L1462.78 1213.69 L1463.37 1213.69 L1463.95 1213.69 L1464.54 1213.69 L1465.12 1213.69 L1465.71 1213.69 L1466.3 1213.69 L1466.88 1213.69 L1467.47 1213.69 L1468.06 1213.69 L1468.64 1213.69 L1469.23 1213.69 L1469.82 1213.69 L1470.4 1213.69 L1470.99 1213.69 L1471.57 1213.69 L1472.16 1213.69 L1472.75 1213.69 L1473.33 1213.69 L1473.92 1213.69 L1474.51 1213.69 L1475.09 1213.69 L1475.68 1213.69 L1476.27 1213.69 L1476.85 1213.69 L1477.44 1213.69 L1478.03 1213.69 L1478.61 1213.69 L1479.2 1213.69 L1479.78 1213.69 L1480.37 1213.69 L1480.96 1213.69 L1481.54 1213.69 L1482.13 1213.69 L1482.72 1213.69 L1483.3 1213.69 L1483.89 1213.69 L1484.48 1213.69 L1485.06 1213.69 L1485.65 1213.69 L1486.24 1213.69 L1486.82 1213.69 L1487.41 1213.69 L1487.99 1213.69 L1488.58 1213.69 L1489.17 1213.69 L1489.75 1213.69 L1490.34 1213.69 L1490.93 1213.69 L1491.51 1213.69 L1492.1 1213.69 L1492.69 1213.69 L1493.27 1213.69 L1493.86 1213.69 L1494.45 1213.69 L1495.03 1213.69 L1495.62 1213.69 L1496.2 1213.69 L1496.79 1213.69 L1497.38 1213.69 L1497.96 1213.69 L1498.55 1213.69 L1499.14 1213.69 L1499.72 1213.69 L1500.31 1213.69 L1500.9 1213.69 L1501.48 1213.69 L1502.07 1213.69 L1502.65 1213.69 L1503.24 1213.69 L1503.83 1213.69 L1504.41 1213.69 L1505 1213.69 L1505.59 1213.69 L1506.17 1213.69 L1506.76 1213.69 L1507.35 1213.69 L1507.93 1213.69 L1508.52 1213.69 L1509.11 1213.69 L1509.69 1213.69 L1510.28 1213.69 L1510.86 1213.69 L1511.45 1213.69 L1512.04 1213.69 L1512.62 1213.69 L1513.21 1213.69 L1513.8 1213.69 L1514.38 1213.69 L1514.97 1213.69 L1515.56 1213.69 L1516.14 1213.69 L1516.73 1213.69 L1517.32 1213.69 L1517.9 1213.69 L1518.49 1213.69 L1519.07 1213.69 L1519.66 1213.69 L1520.25 1213.69 L1520.83 1213.69 L1521.42 1213.69 L1522.01 1213.69 L1522.59 1213.69 L1523.18 1213.69 L1523.77 1213.69 L1524.35 1213.69 L1524.94 1213.69 L1525.52 1213.69 L1526.11 1213.69 L1526.7 1213.69 L1527.28 1213.69 L1527.87 1213.69 L1528.46 1213.69 L1529.04 1213.69 L1529.63 1213.69 L1530.22 1213.69 L1530.8 1213.69 L1531.39 1213.69 L1531.98 1213.69 L1532.56 1213.69 L1533.15 1213.69 L1533.73 1213.69 L1534.32 1213.69 L1534.91 1213.69 L1535.49 1213.69 L1536.08 1213.69 L1536.67 1213.69 L1537.25 1213.69 L1537.84 1213.69 L1538.43 1213.69 L1539.01 1213.69 L1539.6 1213.69 L1540.19 1213.69 L1540.77 1213.69 L1541.36 1213.69 L1541.94 1213.69 L1542.53 1213.69 L1543.12 1213.69 L1543.7 1213.69 L1544.29 1213.69 L1544.88 1213.69 L1545.46 1213.69 L1546.05 1213.69 L1546.64 1213.69 L1547.22 1213.69 L1547.81 1213.69 L1548.4 1213.69 L1548.98 1213.69 L1549.57 1213.69 L1550.15 1213.69 L1550.74 1213.69 L1551.33 1213.69 L1551.91 1213.69 L1552.5 1213.69 L1553.09 1213.69 L1553.67 1213.69 L1554.26 1213.69 L1554.85 1213.69 L1555.43 1213.69 L1556.02 1213.69 L1556.6 1213.69 L1557.19 1213.69 L1557.78 1213.69 L1558.36 1213.69 L1558.95 1213.69 L1559.54 1213.69 L1560.12 1213.69 L1560.71 1213.69 L1561.3 1213.69 L1561.88 1213.69 L1562.47 1213.69 L1563.06 1213.69 L1563.64 1213.69 L1564.23 1213.69 L1564.81 1213.69 L1565.4 1213.69 L1565.99 1213.69 L1566.57 1213.69 L1567.16 1213.69 L1567.75 1213.69 L1568.33 1213.69 L1568.92 1213.69 L1569.51 1213.69 L1570.09 1213.69 L1570.68 1213.69 L1571.27 1213.69 L1571.85 1213.69 L1572.44 1213.69 L1573.02 1213.69 L1573.61 1213.69 L1574.2 1213.69 L1574.78 1213.69 L1575.37 1213.69 L1575.96 1213.69 L1576.54 1213.69 L1577.13 1213.69 L1577.72 1213.69 L1578.3 1213.69 L1578.89 1213.69 L1579.47 1213.69 L1580.06 1213.69 L1580.65 1213.69 L1581.23 1213.69 L1581.82 1213.69 L1582.41 1213.69 L1582.99 1213.69 L1583.58 1213.69 L1584.17 1213.69 L1584.75 1213.69 L1585.34 1213.69 L1585.93 1213.69 L1586.51 1213.69 L1587.1 1213.69 L1587.68 1213.69 L1588.27 1213.69 L1588.86 1213.69 L1589.44 1213.69 L1590.03 1213.69 L1590.62 1213.69 L1591.2 1213.69 L1591.79 1213.69 L1592.38 1213.69 L1592.96 1213.69 L1593.55 1213.69 L1594.14 1213.69 L1594.72 1213.69 L1595.31 1213.69 L1595.89 1213.69 L1596.48 1213.69 L1597.07 1213.69 L1597.65 1213.69 L1598.24 1213.69 L1598.83 1213.69 L1599.41 1213.69 L1600 1213.69 L1600.59 1213.69 L1601.17 1213.69 L1601.76 1213.69 L1602.34 1213.69 L1602.93 1213.69 L1603.52 1213.69 L1604.1 1213.69 L1604.69 1213.69 L1605.28 1213.69 L1605.86 1213.69 L1606.45 1213.69 L1607.04 1213.69 L1607.62 1213.69 L1608.21 1213.69 L1608.8 1213.69 L1609.38 1213.69 L1609.97 1213.69 L1610.55 1213.69 L1611.14 1213.69 L1611.73 1213.69 L1612.31 1213.69 L1612.9 1213.69 L1613.49 1213.69 L1614.07 1213.69 L1614.66 1213.69 L1615.25 1213.69 L1615.83 1213.69 L1616.42 1213.69 L1617.01 1213.69 L1617.59 1213.69 L1618.18 1213.69 L1618.76 1213.69 L1619.35 1213.69 L1619.94 1213.69 L1620.52 1213.69 L1621.11 1213.69 L1621.7 1213.69 L1622.28 1213.69 L1622.87 1213.69 L1623.46 1213.69 L1624.04 1213.69 L1624.63 1213.69 L1625.22 1213.69 L1625.8 1213.69 L1626.39 1213.69 L1626.97 1213.69 L1627.56 1213.69 L1628.15 1213.69 L1628.73 1213.69 L1629.32 1213.69 L1629.91 1213.69 L1630.49 1213.69 L1631.08 1213.69 L1631.67 1213.69 L1632.25 1213.69 L1632.84 1213.69 L1633.42 1213.69 L1634.01 1213.69 L1634.6 1213.69 L1635.18 1213.69 L1635.77 1213.69 L1636.36 1213.69 L1636.94 1213.69 L1637.53 1213.69 L1638.12 1213.69 L1638.7 1213.69 L1639.29 1213.69 L1639.88 1213.69 L1640.46 1213.69 L1641.05 1213.69 L1641.63 1213.69 L1642.22 1213.69 L1642.81 1213.69 L1643.39 1213.69 L1643.98 1213.69 L1644.57 1213.69 L1645.15 1213.69 L1645.74 1213.69 L1646.33 1213.69 L1646.91 1213.69 L1647.5 1213.69 L1648.09 1213.69 L1648.67 1213.69 L1649.26 1213.69 L1649.84 1213.69 L1650.43 1213.69 L1651.02 1213.69 L1651.6 1213.69 L1652.19 1213.69 L1652.78 1213.69 L1653.36 1213.69 L1653.95 1213.69 L1654.54 1213.69 L1655.12 1213.69 L1655.71 1213.69 L1656.29 1213.69 L1656.88 1213.69 L1657.47 1213.69 L1658.05 1213.69 L1658.64 1213.69 L1659.23 1213.69 L1659.81 1213.69 L1660.4 1213.69 L1660.99 1213.69 L1661.57 1213.69 L1662.16 1213.69 L1662.75 1213.69 L1663.33 1213.69 L1663.92 1213.69 L1664.5 1213.69 L1665.09 1213.69 L1665.68 1213.69 L1666.26 1213.69 L1666.85 1213.69 L1667.44 1213.69 L1668.02 1213.69 L1668.61 1213.69 L1669.2 1213.69 L1669.78 1213.69 L1670.37 1213.69 L1670.96 1213.69 L1671.54 1213.69 L1672.13 1213.69 L1672.71 1213.69 L1673.3 1213.69 L1673.89 1213.69 L1674.47 1213.69 L1675.06 1213.69 L1675.65 1213.69 L1676.23 1213.69 L1676.82 1213.69 L1677.41 1213.69 L1677.99 1213.69 L1678.58 1213.69 L1679.17 1213.69 L1679.75 1213.69 L1680.34 1213.69 L1680.92 1213.69 L1681.51 1213.69 L1682.1 1213.69 L1682.68 1213.69 L1683.27 1213.69 L1683.86 1213.69 L1684.44 1213.69 L1685.03 1213.69 L1685.62 1213.69 L1686.2 1213.69 L1686.79 1213.69 L1687.37 1213.69 L1687.96 1213.69 L1688.55 1213.69 L1689.13 1213.69 L1689.72 1213.69 L1690.31 1213.69 L1690.89 1213.69 L1691.48 1213.69 L1692.07 1213.69 L1692.65 1213.69 L1693.24 1213.69 L1693.83 1213.69 L1694.41 1213.69 L1695 1213.69 L1695.58 1213.69 L1696.17 1213.69 L1696.76 1213.69 L1697.34 1213.69 L1697.93 1213.69 L1698.52 1213.69 L1699.1 1213.69 L1699.69 1213.69 L1700.28 1213.69 L1700.86 1213.69 L1701.45 1213.69 L1702.04 1213.69 L1702.62 1213.69 L1703.21 1213.69 L1703.79 1213.69 L1704.38 1213.69 L1704.97 1213.69 L1705.55 1213.69 L1706.14 1213.69 L1706.73 1213.69 L1707.31 1213.69 L1707.9 1213.69 L1708.49 1213.69 L1709.07 1213.69 L1709.66 1213.69 L1710.24 1213.69 L1710.83 1213.69 L1711.42 1213.69 L1712 1213.69 L1712.59 1213.69 L1713.18 1213.69 L1713.76 1213.69 L1714.35 1213.69 L1714.94 1213.69 L1715.52 1213.69 L1716.11 1213.69 L1716.7 1213.69 L1717.28 1213.69 L1717.87 1213.69 L1718.45 1213.69 L1719.04 1213.69 L1719.63 1213.69 L1720.21 1213.69 L1720.8 1213.69 L1721.39 1213.69 L1721.97 1213.69 L1722.56 1213.69 L1723.15 1213.69 L1723.73 1213.69 L1724.32 1213.69 L1724.91 1213.69 L1725.49 1213.69 L1726.08 1213.69 L1726.66 1213.69 L1727.25 1213.69 L1727.84 1213.69 L1728.42 1213.69 L1729.01 1213.69 L1729.6 1213.69 L1730.18 1213.69 L1730.77 1213.69 L1731.36 1213.69 L1731.94 1213.69 L1732.53 1213.69 L1733.11 1213.69 L1733.7 1213.69 L1734.29 1213.69 L1734.87 1213.69 L1735.46 1213.69 L1736.05 1213.69 L1736.63 1213.69 L1737.22 1213.69 L1737.81 1213.69 L1738.39 1213.69 L1738.98 1213.69 L1739.57 1213.69 L1740.15 1213.69 L1740.74 1213.69 L1741.32 1213.69 L1741.91 1213.69 L1742.5 1213.69 L1743.08 1213.69 L1743.67 1213.69 L1744.26 1213.69 L1744.84 1213.69 L1745.43 1213.69 L1746.02 1213.69 L1746.6 1213.69 L1747.19 1213.69 L1747.78 1213.69 L1748.36 1213.69 L1748.95 1213.69 L1749.53 1213.69 L1750.12 1213.69 L1750.71 1213.69 L1751.29 1213.69 L1751.88 1213.69 L1752.47 1213.69 L1753.05 1213.69 L1753.64 1213.69 L1754.23 1213.69 L1754.81 1213.69 L1755.4 1213.69 L1755.99 1213.69 L1756.57 1213.69 L1757.16 1213.69 L1757.74 1213.69 L1758.33 1213.69 L1758.92 1213.69 L1759.5 1213.69 L1760.09 1213.69 L1760.68 1213.69 L1761.26 1213.69 L1761.85 1213.69 L1762.44 1213.69 L1763.02 1213.69 L1763.61 1213.69 L1764.19 1213.69 L1764.78 1213.69 L1765.37 1213.69 L1765.95 1213.69 L1766.54 1213.69 L1767.13 1213.69 L1767.71 1213.69 L1768.3 1213.69 L1768.89 1213.69 L1769.47 1213.69 L1770.06 1213.69 L1770.65 1213.69 L1771.23 1213.69 L1771.82 1213.69 L1772.4 1213.69 L1772.99 1213.69 L1773.58 1213.69 L1774.16 1213.69 L1774.75 1213.69 L1775.34 1213.69 L1775.92 1213.69 L1776.51 1213.69 L1777.1 1213.69 L1777.68 1213.69 L1778.27 1213.69 L1778.86 1213.69 L1779.44 1213.69 L1780.03 1213.69 L1780.61 1213.69 L1781.2 1213.69 L1781.79 1213.69 L1782.37 1213.69 L1782.96 1213.69 L1783.55 1213.69 L1784.13 1213.69 L1784.72 1213.69 L1785.31 1213.69 L1785.89 1213.69 L1786.48 1213.69 L1787.06 1213.69 L1787.65 1213.69 L1788.24 1213.69 L1788.82 1213.69 L1789.41 1213.69 L1790 1213.69 L1790.58 1213.69 L1791.17 1213.69 L1791.76 1213.69 L1792.34 1213.69 L1792.93 1213.69 L1793.52 1213.69 L1794.1 1213.69 L1794.69 1213.69 L1795.27 1213.69 L1795.86 1213.69 L1796.45 1213.69 L1797.03 1213.69 L1797.62 1213.69 L1798.21 1213.69 L1798.79 1213.69 L1799.38 1213.69 L1799.97 1213.69 L1800.55 1213.69 L1801.14 1213.69 L1801.73 1213.69 L1802.31 1213.69 L1802.9 1213.69 L1803.48 1213.69 L1804.07 1213.69 L1804.66 1213.69 L1805.24 1213.69 L1805.83 1213.69 L1806.42 1213.69 L1807 1213.69 L1807.59 1213.69 L1808.18 1213.69 L1808.76 1213.69 L1809.35 1213.69 L1809.94 1213.69 L1810.52 1213.69 L1811.11 1213.69 L1811.69 1213.69 L1812.28 1213.69 L1812.87 1213.69 L1813.45 1213.69 L1814.04 1213.69 L1814.63 1213.69 L1815.21 1213.69 L1815.8 1213.69 L1816.39 1213.69 L1816.97 1213.69 L1817.56 1213.69 L1818.14 1213.69 L1818.73 1213.69 L1819.32 1213.69 L1819.9 1213.69 L1820.49 1213.69 L1821.08 1213.69 L1821.66 1213.69 L1822.25 1213.69 L1822.84 1213.69 L1823.42 1213.69 L1824.01 1213.69 L1824.6 1213.69 L1825.18 1213.69 L1825.77 1213.69 L1826.35 1213.69 L1826.94 1213.69 L1827.53 1213.69 L1828.11 1213.69 L1828.7 1213.69 L1829.29 1213.69 L1829.87 1213.69 L1830.46 1213.69 L1831.05 1213.69 L1831.63 1213.69 L1832.22 1213.69 L1832.81 1213.69 L1833.39 1213.69 L1833.98 1213.69 L1834.56 1213.69 L1835.15 1213.69 L1835.74 1213.69 L1836.32 1213.69 L1836.91 1213.69 L1837.5 1213.69 L1838.08 1213.69 L1838.67 1213.69 L1839.26 1213.69 L1839.84 1213.69 L1840.43 1213.69 L1841.01 1213.69 L1841.6 1213.69 L1842.19 1213.69 L1842.77 1213.69 L1843.36 1213.69 L1843.95 1213.69 L1844.53 1213.69 L1845.12 1213.69 L1845.71 1213.69 L1846.29 1213.69 L1846.88 1213.69 L1847.47 1213.69 L1848.05 1213.69 L1848.64 1213.69 L1849.22 1213.69 L1849.81 1213.69 L1850.4 1213.69 L1850.98 1213.69 L1851.57 1213.69 L1852.16 1213.69 L1852.74 1213.69 L1853.33 1213.69 L1853.92 1213.69 L1854.5 1213.69 L1855.09 1213.69 L1855.68 1213.69 L1856.26 1213.69 L1856.85 1213.69 L1857.43 1213.69 L1858.02 1213.69 L1858.61 1213.69 L1859.19 1213.69 L1859.78 1213.69 L1860.37 1213.69 L1860.95 1213.69 L1861.54 1213.69 L1862.13 1213.69 L1862.71 1213.69 L1863.3 1213.69 L1863.88 1213.69 L1864.47 1213.69 L1865.06 1213.69 L1865.64 1213.69 L1866.23 1213.69 L1866.82 1213.69 L1867.4 1213.69 L1867.99 1213.69 L1868.58 1213.69 L1869.16 1213.69 L1869.75 1213.69 L1870.34 1213.69 L1870.92 1213.69 L1871.51 1213.69 L1872.09 1213.69 L1872.68 1213.69 L1873.27 1213.69 L1873.85 1213.69 L1874.44 1213.69 L1875.03 1213.69 L1875.61 1213.69 L1876.2 1213.69 L1876.79 1213.69 L1877.37 1213.69 L1877.96 1213.69 L1878.55 1213.69 L1879.13 1213.69 L1879.72 1213.69 L1880.3 1213.69 L1880.89 1213.69 L1881.48 1213.69 L1882.06 1213.69 L1882.65 1213.69 L1883.24 1213.69 L1883.82 1213.69 L1884.41 1213.69 L1885 1213.69 L1885.58 1213.69 L1886.17 1213.69 L1886.76 1213.69 L1887.34 1213.69 L1887.93 1213.69 L1888.51 1213.69 L1889.1 1213.69 L1889.69 1213.69 L1890.27 1213.69 L1890.86 1213.69 L1891.45 1213.69 L1892.03 1213.69 L1892.62 1213.69 L1893.21 1213.69 L1893.79 1213.69 L1894.38 1213.69 L1894.96 1213.69 L1895.55 1213.69 L1896.14 1213.69 L1896.72 1213.69 L1897.31 1213.69 L1897.9 1213.69 L1898.48 1213.69 L1899.07 1213.69 L1899.66 1213.69 L1900.24 1213.69 L1900.83 1213.69 L1901.42 1213.69 L1902 1213.69 L1902.59 1213.69 L1903.17 1213.69 L1903.76 1213.69 L1904.35 1213.69 L1904.93 1213.69 L1905.52 1213.69 L1906.11 1213.69 L1906.69 1213.69 L1907.28 1213.69 L1907.87 1213.69 L1908.45 1213.69 L1909.04 1213.69 L1909.63 1213.69 L1910.21 1213.69 L1910.8 1213.69 L1911.38 1213.69 L1911.97 1213.69 L1912.56 1213.69 L1913.14 1213.69 L1913.73 1213.69 L1914.32 1213.69 L1914.9 1213.69 L1915.49 1213.69 L1916.08 1213.69 L1916.66 1213.69 L1917.25 1213.69 L1917.83 1213.69 L1918.42 1213.69 L1919.01 1213.69 L1919.59 1213.69 L1920.18 1213.69 L1920.77 1213.69 L1921.35 1213.69 L1921.94 1213.69 L1922.53 1213.69 L1923.11 1213.69 L1923.7 1213.69 L1924.29 1213.69 L1924.87 1213.69 L1925.46 1213.69 L1926.04 1213.69 L1926.63 1213.69 L1927.22 1213.69 L1927.8 1213.69 L1928.39 1213.69 L1928.98 1213.69 L1929.56 1213.69 L1930.15 1213.69 L1930.74 1213.69 L1931.32 1213.69 L1931.91 1213.69 L1932.5 1213.69 L1933.08 1213.69 L1933.67 1213.69 L1934.25 1213.69 L1934.84 1213.69 L1935.43 1213.69 L1936.01 1213.69 L1936.6 1213.69 L1937.19 1213.69 L1937.77 1213.69 L1938.36 1213.69 L1938.95 1213.69 L1939.53 1213.69 L1940.12 1213.69 L1940.71 1213.69 L1941.29 1213.69 L1941.88 1213.69 L1942.46 1213.69 L1943.05 1213.69 L1943.64 1213.69 L1944.22 1213.69 L1944.81 1213.69 L1945.4 1213.69 L1945.98 1213.69 L1946.57 1213.69 L1947.16 1213.69 L1947.74 1213.69 L1948.33 1213.69 L1948.91 1213.69 L1949.5 1213.69 L1950.09 1213.69 L1950.67 1213.69 L1951.26 1213.69 L1951.85 1213.69 L1952.43 1213.69 L1953.02 1213.69 L1953.61 1213.69 L1954.19 1213.69 L1954.78 1213.69 L1955.37 1213.69 L1955.95 1213.69 L1956.54 1213.69 L1957.12 1213.69 L1957.71 1213.69 L1958.3 1213.69 L1958.88 1213.69 L1959.47 1213.69 L1960.06 1213.69 L1960.64 1213.69 L1961.23 1213.69 L1961.82 1213.69 L1962.4 1213.69 L1962.99 1213.69 L1963.58 1213.69 L1964.16 1213.69 L1964.75 1213.69 L1965.33 1213.69 L1965.92 1213.69 L1966.51 1213.69 L1967.09 1213.69 L1967.68 1213.69 L1968.27 1213.69 L1968.85 1213.69 L1969.44 1213.69 L1970.03 1213.69 L1970.61 1213.69 L1971.2 1213.69 L1971.78 1213.69 L1972.37 1213.69 L1972.96 1213.69 L1973.54 1213.69 L1974.13 1213.69 L1974.72 1213.69 L1975.3 1213.69 L1975.89 1213.69 L1976.48 1213.69 L1977.06 1213.69 L1977.65 1213.69 L1978.24 1213.69 L1978.82 1213.69 L1979.41 1213.69 L1979.99 1213.69 L1980.58 1213.69 L1981.17 1213.69 L1981.75 1213.69 L1982.34 1213.69 L1982.93 1213.69 L1983.51 1213.69 L1984.1 1213.69 L1984.69 1213.69 L1985.27 1213.69 L1985.86 1213.69 L1986.45 1213.69 L1987.03 1213.69 L1987.62 1213.69 L1988.2 1213.69 L1988.79 1213.69 L1989.38 1213.69 L1989.96 1213.69 L1990.55 1213.69 L1991.14 1213.69 L1991.72 1213.69 L1992.31 1213.69 L1992.9 1213.69 L1993.48 1213.69 L1994.07 1213.69 L1994.65 1213.69 L1995.24 1213.69 L1995.83 1213.69 L1996.41 1213.69 L1997 1213.69 L1997.59 1213.69 L1998.17 1213.69 L1998.76 1213.69 L1999.35 1213.69 L1999.93 1213.69 L2000.52 1213.69 L2001.11 1213.69 L2001.69 1213.69 L2002.28 1213.69 L2002.86 1213.69 L2003.45 1213.69 L2004.04 1213.69 L2004.62 1213.69 L2005.21 1213.69 L2005.8 1213.69 L2006.38 1213.69 L2006.97 1213.69 L2007.56 1213.69 L2008.14 1213.69 L2008.73 1213.69 L2009.32 1213.69 L2009.9 1213.69 L2010.49 1213.69 L2011.07 1213.69 L2011.66 1213.69 L2012.25 1213.69 L2012.83 1213.69 L2013.42 1213.69 L2014.01 1213.69 L2014.59 1213.69 L2015.18 1213.69 L2015.77 1213.69 L2016.35 1213.69 L2016.94 1213.69 L2017.53 1213.69 L2018.11 1213.69 L2018.7 1213.69 L2019.28 1213.69 L2019.87 1213.69 L2020.46 1213.69 L2021.04 1213.69 L2021.63 1213.69 L2022.22 1213.69 L2022.8 1213.69 L2023.39 1213.69 L2023.98 1213.69 L2024.56 1213.69 L2025.15 1213.69 L2025.73 1213.69 L2026.32 1213.69 L2026.91 1213.69 L2027.49 1213.69 L2028.08 1213.69 L2028.67 1213.69 L2029.25 1213.69 L2029.84 1213.69 L2030.43 1213.69 L2031.01 1213.69 L2031.6 1213.69 L2032.19 1213.69 L2032.77 1213.69 L2033.36 1213.69 L2033.94 1213.69 L2034.53 1213.69 L2035.12 1213.69 L2035.7 1213.69 L2036.29 1213.69 L2036.88 1213.69 L2037.46 1213.69 L2038.05 1213.69 L2038.64 1213.69 L2039.22 1213.69 L2039.81 1213.69 L2040.4 1213.69 L2040.98 1213.69 L2041.57 1213.69 L2042.15 1213.69 L2042.74 1213.69 L2043.33 1213.69 L2043.91 1213.69 L2044.5 1213.69 L2045.09 1213.69 L2045.67 1213.69 L2046.26 1213.69 L2046.85 1213.69 L2047.43 1213.69 L2048.02 1213.69 L2048.6 1213.69 L2049.19 1213.69 L2049.78 1213.69 L2050.36 1213.69 L2050.95 1213.69 L2051.54 1213.69 L2052.12 1213.69 L2052.71 1213.69 L2053.3 1213.69 L2053.88 1213.69 L2054.47 1213.69 L2055.06 1213.69 L2055.64 1213.69 L2056.23 1213.69 L2056.81 1213.69 L2057.4 1213.69 L2057.99 1213.69 L2058.57 1213.69 L2059.16 1213.69 L2059.75 1213.69 L2060.33 1213.69 L2060.92 1213.69 L2061.51 1213.69 L2062.09 1213.69 L2062.68 1213.69 L2063.27 1213.69 L2063.85 1213.69 L2064.44 1213.69 L2065.02 1213.69 L2065.61 1213.69 L2066.2 1213.69 L2066.78 1213.69 L2067.37 1213.69 L2067.96 1213.69 L2068.54 1213.69 L2069.13 1213.69 L2069.72 1213.69 L2070.3 1213.69 L2070.89 1213.69 L2071.48 1213.69 L2072.06 1213.69 L2072.65 1213.69 L2073.23 1213.69 L2073.82 1213.69 L2074.41 1213.69 L2074.99 1213.69 L2075.58 1213.69 L2076.17 1213.69 L2076.75 1213.69 L2077.34 1213.69 L2077.93 1213.69 L2078.51 1213.69 L2079.1 1213.69 L2079.68 1213.69 L2080.27 1213.69 L2080.86 1213.69 L2081.44 1213.69 L2082.03 1213.69 L2082.62 1213.69 L2083.2 1213.69 L2083.79 1213.69 L2084.38 1213.69 L2084.96 1213.69 L2085.55 1213.69 L2086.14 1213.69 L2086.72 1213.69 L2087.31 1213.69 L2087.89 1213.69 L2088.48 1213.69 L2089.07 1213.69 L2089.65 1213.69 L2090.24 1213.69 L2090.83 1213.69 L2091.41 1213.69 L2092 1213.69 L2092.59 1213.69 L2093.17 1213.69 L2093.76 1213.69 L2094.35 1213.69 L2094.93 1213.69 L2095.52 1213.69 L2096.1 1213.69 L2096.69 1213.69 L2097.28 1213.69 L2097.86 1213.69 L2098.45 1213.69 L2099.04 1213.69 L2099.62 1213.69 L2100.21 1213.69 L2100.8 1213.69 L2101.38 1213.69 L2101.97 1213.69 L2102.55 1213.69 L2103.14 1213.69 L2103.73 1213.69 L2104.31 1213.69 L2104.9 1213.69 L2105.49 1213.69 L2106.07 1213.69 L2106.66 1213.69 L2107.25 1213.69 L2107.83 1213.69 L2108.42 1213.69 L2109.01 1213.69 L2109.59 1213.69 L2110.18 1213.69 L2110.76 1213.69 L2111.35 1213.69 L2111.94 1213.69 L2112.52 1213.69 L2113.11 1213.69 L2113.7 1213.69 L2114.28 1213.69 L2114.87 1213.69 L2115.46 1213.69 L2116.04 1213.69 L2116.63 1213.69 L2117.22 1213.69 L2117.8 1213.69 L2118.39 1213.69 L2118.97 1213.69 L2119.56 1213.69 L2120.15 1213.69 L2120.73 1213.69 L2121.32 1213.69 L2121.91 1213.69 L2122.49 1213.69 L2123.08 1213.69 L2123.67 1213.69 L2124.25 1213.69 L2124.84 1213.69 L2125.42 1213.69 L2126.01 1213.69 L2126.6 1213.69 L2127.18 1213.69 L2127.77 1213.69 L2128.36 1213.69 L2128.94 1213.69 L2129.53 1213.69 L2130.12 1213.69 L2130.7 1213.69 L2131.29 1213.69 L2131.88 1213.69 L2132.46 1213.69 L2133.05 1213.69 L2133.63 1213.69 L2134.22 1213.69 L2134.81 1213.69 L2135.39 1213.69 L2135.98 1213.69 L2136.57 1213.69 L2137.15 1213.69 L2137.74 1213.69 L2138.33 1213.69 L2138.91 1213.69 L2139.5 1213.69 L2140.09 1213.69 L2140.67 1213.69 L2141.26 1213.69 L2141.84 1213.69 L2142.43 1213.69 L2143.02 1213.69 L2143.6 1213.69 L2144.19 1213.69 L2144.78 1213.69 L2145.36 1213.69 L2145.95 1213.69 L2146.54 1213.69 L2147.12 1213.69 L2147.71 1213.69 L2148.3 1213.69 L2148.88 1213.69 L2149.47 1213.69 L2150.05 1213.69 L2150.64 1213.69 L2151.23 1213.69 L2151.81 1213.69 L2152.4 1213.69 L2152.99 1213.69 L2153.57 1213.69 L2154.16 1213.69 L2154.75 1213.69 L2155.33 1213.69 L2155.92 1213.69 L2156.5 1213.69 L2157.09 1213.69 L2157.68 1213.69 L2158.26 1213.69 L2158.26 1212.98 L2157.68 1212.98 L2157.09 1212.98 L2156.5 1212.98 L2155.92 1212.98 L2155.33 1212.98 L2154.75 1212.98 L2154.16 1212.98 L2153.57 1212.98 L2152.99 1212.98 L2152.4 1212.98 L2151.81 1212.98 L2151.23 1212.98 L2150.64 1212.98 L2150.05 1212.98 L2149.47 1212.98 L2148.88 1212.98 L2148.3 1212.98 L2147.71 1212.98 L2147.12 1212.98 L2146.54 1212.98 L2145.95 1212.98 L2145.36 1212.98 L2144.78 1212.98 L2144.19 1212.98 L2143.6 1212.98 L2143.02 1212.98 L2142.43 1212.98 L2141.84 1212.98 L2141.26 1212.98 L2140.67 1212.98 L2140.09 1212.98 L2139.5 1212.98 L2138.91 1212.98 L2138.33 1212.98 L2137.74 1212.98 L2137.15 1212.98 L2136.57 1212.98 L2135.98 1212.98 L2135.39 1212.98 L2134.81 1212.98 L2134.22 1212.98 L2133.63 1212.98 L2133.05 1212.98 L2132.46 1212.98 L2131.88 1212.98 L2131.29 1212.98 L2130.7 1212.98 L2130.12 1212.98 L2129.53 1212.98 L2128.94 1212.98 L2128.36 1212.98 L2127.77 1212.98 L2127.18 1212.98 L2126.6 1212.98 L2126.01 1212.98 L2125.42 1212.98 L2124.84 1212.98 L2124.25 1212.98 L2123.67 1212.98 L2123.08 1212.98 L2122.49 1212.98 L2121.91 1212.98 L2121.32 1212.98 L2120.73 1212.98 L2120.15 1212.98 L2119.56 1212.98 L2118.97 1212.98 L2118.39 1212.98 L2117.8 1212.98 L2117.22 1212.98 L2116.63 1212.98 L2116.04 1212.98 L2115.46 1212.98 L2114.87 1212.98 L2114.28 1212.98 L2113.7 1212.98 L2113.11 1212.98 L2112.52 1212.98 L2111.94 1212.98 L2111.35 1212.98 L2110.76 1212.98 L2110.18 1212.98 L2109.59 1212.98 L2109.01 1212.98 L2108.42 1212.98 L2107.83 1212.98 L2107.25 1212.98 L2106.66 1212.98 L2106.07 1212.98 L2105.49 1212.98 L2104.9 1212.98 L2104.31 1212.98 L2103.73 1212.98 L2103.14 1212.98 L2102.55 1212.98 L2101.97 1212.98 L2101.38 1212.98 L2100.8 1212.98 L2100.21 1212.98 L2099.62 1212.98 L2099.04 1212.98 L2098.45 1212.98 L2097.86 1212.98 L2097.28 1212.98 L2096.69 1212.98 L2096.1 1212.98 L2095.52 1212.98 L2094.93 1212.98 L2094.35 1212.98 L2093.76 1212.98 L2093.17 1212.98 L2092.59 1212.98 L2092 1212.98 L2091.41 1212.98 L2090.83 1212.98 L2090.24 1212.98 L2089.65 1212.98 L2089.07 1212.98 L2088.48 1212.98 L2087.89 1212.98 L2087.31 1212.98 L2086.72 1212.98 L2086.14 1212.98 L2085.55 1212.98 L2084.96 1212.98 L2084.38 1212.98 L2083.79 1212.98 L2083.2 1212.98 L2082.62 1212.98 L2082.03 1212.98 L2081.44 1212.98 L2080.86 1212.98 L2080.27 1212.98 L2079.68 1212.98 L2079.1 1212.98 L2078.51 1212.98 L2077.93 1212.98 L2077.34 1212.98 L2076.75 1212.98 L2076.17 1212.98 L2075.58 1212.98 L2074.99 1212.98 L2074.41 1212.98 L2073.82 1212.98 L2073.23 1212.98 L2072.65 1212.98 L2072.06 1212.98 L2071.48 1212.98 L2070.89 1212.98 L2070.3 1212.98 L2069.72 1212.98 L2069.13 1212.98 L2068.54 1212.98 L2067.96 1212.98 L2067.37 1212.98 L2066.78 1212.98 L2066.2 1212.98 L2065.61 1212.98 L2065.02 1212.98 L2064.44 1212.98 L2063.85 1212.98 L2063.27 1212.98 L2062.68 1212.98 L2062.09 1212.98 L2061.51 1212.98 L2060.92 1212.98 L2060.33 1212.98 L2059.75 1212.98 L2059.16 1212.98 L2058.57 1212.98 L2057.99 1212.98 L2057.4 1212.98 L2056.81 1212.98 L2056.23 1212.98 L2055.64 1212.98 L2055.06 1212.98 L2054.47 1212.98 L2053.88 1212.98 L2053.3 1212.98 L2052.71 1212.98 L2052.12 1212.98 L2051.54 1212.98 L2050.95 1212.98 L2050.36 1212.98 L2049.78 1212.98 L2049.19 1212.98 L2048.6 1212.98 L2048.02 1212.98 L2047.43 1212.98 L2046.85 1212.98 L2046.26 1212.98 L2045.67 1212.98 L2045.09 1212.98 L2044.5 1212.98 L2043.91 1212.98 L2043.33 1212.98 L2042.74 1212.98 L2042.15 1212.98 L2041.57 1212.98 L2040.98 1212.98 L2040.4 1212.98 L2039.81 1212.98 L2039.22 1212.98 L2038.64 1212.98 L2038.05 1212.98 L2037.46 1212.98 L2036.88 1212.98 L2036.29 1212.98 L2035.7 1212.98 L2035.12 1212.98 L2034.53 1212.98 L2033.94 1212.98 L2033.36 1212.98 L2032.77 1212.98 L2032.19 1212.98 L2031.6 1212.98 L2031.01 1212.98 L2030.43 1212.98 L2029.84 1212.98 L2029.25 1212.98 L2028.67 1212.98 L2028.08 1212.98 L2027.49 1212.98 L2026.91 1212.98 L2026.32 1212.98 L2025.73 1212.98 L2025.15 1212.98 L2024.56 1212.98 L2023.98 1212.98 L2023.39 1212.98 L2022.8 1212.98 L2022.22 1212.98 L2021.63 1212.98 L2021.04 1212.98 L2020.46 1212.98 L2019.87 1212.98 L2019.28 1212.98 L2018.7 1212.98 L2018.11 1212.98 L2017.53 1212.98 L2016.94 1212.98 L2016.35 1212.98 L2015.77 1212.98 L2015.18 1212.98 L2014.59 1212.98 L2014.01 1212.98 L2013.42 1212.98 L2012.83 1212.98 L2012.25 1212.98 L2011.66 1212.98 L2011.07 1212.98 L2010.49 1212.98 L2009.9 1212.98 L2009.32 1212.98 L2008.73 1212.98 L2008.14 1212.98 L2007.56 1212.98 L2006.97 1212.98 L2006.38 1212.98 L2005.8 1212.98 L2005.21 1212.98 L2004.62 1212.98 L2004.04 1212.98 L2003.45 1212.98 L2002.86 1212.98 L2002.28 1212.98 L2001.69 1212.98 L2001.11 1212.98 L2000.52 1212.98 L1999.93 1212.98 L1999.35 1212.98 L1998.76 1212.98 L1998.17 1212.98 L1997.59 1212.98 L1997 1212.98 L1996.41 1212.98 L1995.83 1212.98 L1995.24 1212.98 L1994.65 1212.98 L1994.07 1212.98 L1993.48 1212.98 L1992.9 1212.98 L1992.31 1212.98 L1991.72 1212.98 L1991.14 1212.98 L1990.55 1212.98 L1989.96 1212.98 L1989.38 1212.98 L1988.79 1212.98 L1988.2 1212.98 L1987.62 1212.98 L1987.03 1212.98 L1986.45 1212.98 L1985.86 1212.98 L1985.27 1212.98 L1984.69 1212.98 L1984.1 1212.98 L1983.51 1212.98 L1982.93 1212.98 L1982.34 1212.98 L1981.75 1212.98 L1981.17 1212.98 L1980.58 1212.98 L1979.99 1212.98 L1979.41 1212.98 L1978.82 1212.98 L1978.24 1212.98 L1977.65 1212.98 L1977.06 1212.98 L1976.48 1212.98 L1975.89 1212.98 L1975.3 1212.98 L1974.72 1212.98 L1974.13 1212.98 L1973.54 1212.98 L1972.96 1212.98 L1972.37 1212.98 L1971.78 1212.98 L1971.2 1212.98 L1970.61 1212.98 L1970.03 1212.98 L1969.44 1212.98 L1968.85 1212.98 L1968.27 1212.98 L1967.68 1212.98 L1967.09 1212.98 L1966.51 1212.98 L1965.92 1212.98 L1965.33 1212.98 L1964.75 1212.98 L1964.16 1212.98 L1963.58 1212.98 L1962.99 1212.98 L1962.4 1212.98 L1961.82 1212.98 L1961.23 1212.98 L1960.64 1212.98 L1960.06 1212.98 L1959.47 1212.98 L1958.88 1212.98 L1958.3 1212.98 L1957.71 1212.98 L1957.12 1212.98 L1956.54 1212.98 L1955.95 1212.98 L1955.37 1212.98 L1954.78 1212.98 L1954.19 1212.98 L1953.61 1212.98 L1953.02 1212.98 L1952.43 1212.98 L1951.85 1212.98 L1951.26 1212.98 L1950.67 1212.98 L1950.09 1212.98 L1949.5 1212.98 L1948.91 1212.98 L1948.33 1212.98 L1947.74 1212.98 L1947.16 1212.98 L1946.57 1212.98 L1945.98 1212.98 L1945.4 1212.98 L1944.81 1212.98 L1944.22 1212.98 L1943.64 1212.98 L1943.05 1212.98 L1942.46 1212.98 L1941.88 1212.98 L1941.29 1212.98 L1940.71 1212.98 L1940.12 1212.98 L1939.53 1212.98 L1938.95 1212.98 L1938.36 1212.98 L1937.77 1212.98 L1937.19 1212.98 L1936.6 1212.98 L1936.01 1212.98 L1935.43 1212.98 L1934.84 1212.98 L1934.25 1212.98 L1933.67 1212.98 L1933.08 1212.98 L1932.5 1212.98 L1931.91 1212.98 L1931.32 1212.98 L1930.74 1212.98 L1930.15 1212.98 L1929.56 1212.98 L1928.98 1212.98 L1928.39 1212.98 L1927.8 1212.98 L1927.22 1212.98 L1926.63 1212.98 L1926.04 1212.98 L1925.46 1212.98 L1924.87 1212.98 L1924.29 1212.98 L1923.7 1212.98 L1923.11 1212.98 L1922.53 1212.98 L1921.94 1212.98 L1921.35 1212.98 L1920.77 1212.98 L1920.18 1212.98 L1919.59 1212.98 L1919.01 1212.98 L1918.42 1212.98 L1917.83 1212.98 L1917.25 1212.98 L1916.66 1212.98 L1916.08 1212.98 L1915.49 1212.98 L1914.9 1212.98 L1914.32 1212.98 L1913.73 1212.98 L1913.14 1212.98 L1912.56 1212.98 L1911.97 1212.98 L1911.38 1212.98 L1910.8 1212.98 L1910.21 1212.98 L1909.63 1212.98 L1909.04 1212.98 L1908.45 1212.98 L1907.87 1212.98 L1907.28 1212.98 L1906.69 1212.98 L1906.11 1212.98 L1905.52 1212.98 L1904.93 1212.98 L1904.35 1212.98 L1903.76 1212.98 L1903.17 1212.98 L1902.59 1212.98 L1902 1212.98 L1901.42 1212.98 L1900.83 1212.98 L1900.24 1212.98 L1899.66 1212.98 L1899.07 1212.98 L1898.48 1212.98 L1897.9 1212.98 L1897.31 1212.98 L1896.72 1212.98 L1896.14 1212.98 L1895.55 1212.98 L1894.96 1212.98 L1894.38 1212.98 L1893.79 1212.98 L1893.21 1212.98 L1892.62 1212.98 L1892.03 1212.98 L1891.45 1212.98 L1890.86 1212.98 L1890.27 1212.98 L1889.69 1212.98 L1889.1 1212.98 L1888.51 1212.98 L1887.93 1212.98 L1887.34 1212.98 L1886.76 1212.98 L1886.17 1212.98 L1885.58 1212.98 L1885 1212.98 L1884.41 1212.98 L1883.82 1212.98 L1883.24 1212.98 L1882.65 1212.98 L1882.06 1212.98 L1881.48 1212.98 L1880.89 1212.98 L1880.3 1212.98 L1879.72 1212.98 L1879.13 1212.98 L1878.55 1212.98 L1877.96 1212.98 L1877.37 1212.98 L1876.79 1212.98 L1876.2 1212.98 L1875.61 1212.98 L1875.03 1212.98 L1874.44 1212.98 L1873.85 1212.98 L1873.27 1212.98 L1872.68 1212.98 L1872.09 1212.98 L1871.51 1212.98 L1870.92 1212.98 L1870.34 1212.98 L1869.75 1212.98 L1869.16 1212.98 L1868.58 1212.98 L1867.99 1212.98 L1867.4 1212.98 L1866.82 1212.98 L1866.23 1212.98 L1865.64 1212.98 L1865.06 1212.98 L1864.47 1212.98 L1863.88 1212.98 L1863.3 1212.98 L1862.71 1212.98 L1862.13 1212.98 L1861.54 1212.98 L1860.95 1212.98 L1860.37 1212.98 L1859.78 1212.98 L1859.19 1212.98 L1858.61 1212.98 L1858.02 1212.98 L1857.43 1212.98 L1856.85 1212.98 L1856.26 1212.98 L1855.68 1212.98 L1855.09 1212.98 L1854.5 1212.98 L1853.92 1212.98 L1853.33 1212.98 L1852.74 1212.98 L1852.16 1212.98 L1851.57 1212.98 L1850.98 1212.98 L1850.4 1212.98 L1849.81 1212.98 L1849.22 1212.98 L1848.64 1212.98 L1848.05 1212.98 L1847.47 1212.98 L1846.88 1212.98 L1846.29 1212.98 L1845.71 1212.98 L1845.12 1212.98 L1844.53 1212.98 L1843.95 1212.98 L1843.36 1212.98 L1842.77 1212.98 L1842.19 1212.98 L1841.6 1212.98 L1841.01 1212.98 L1840.43 1212.98 L1839.84 1212.98 L1839.26 1212.98 L1838.67 1212.98 L1838.08 1212.98 L1837.5 1212.98 L1836.91 1212.98 L1836.32 1212.98 L1835.74 1212.98 L1835.15 1212.98 L1834.56 1212.98 L1833.98 1212.98 L1833.39 1212.98 L1832.81 1212.98 L1832.22 1212.98 L1831.63 1212.98 L1831.05 1212.98 L1830.46 1212.98 L1829.87 1212.98 L1829.29 1212.98 L1828.7 1212.98 L1828.11 1212.98 L1827.53 1212.98 L1826.94 1212.98 L1826.35 1212.98 L1825.77 1212.98 L1825.18 1212.98 L1824.6 1212.98 L1824.01 1212.98 L1823.42 1212.98 L1822.84 1212.98 L1822.25 1212.98 L1821.66 1212.98 L1821.08 1212.98 L1820.49 1212.98 L1819.9 1212.98 L1819.32 1212.98 L1818.73 1212.98 L1818.14 1212.98 L1817.56 1212.98 L1816.97 1212.98 L1816.39 1212.98 L1815.8 1212.98 L1815.21 1212.98 L1814.63 1212.98 L1814.04 1212.98 L1813.45 1212.98 L1812.87 1212.98 L1812.28 1212.98 L1811.69 1212.98 L1811.11 1212.98 L1810.52 1212.98 L1809.94 1212.98 L1809.35 1212.98 L1808.76 1212.98 L1808.18 1212.98 L1807.59 1212.98 L1807 1212.98 L1806.42 1212.98 L1805.83 1212.98 L1805.24 1212.98 L1804.66 1212.98 L1804.07 1212.98 L1803.48 1212.98 L1802.9 1212.98 L1802.31 1212.98 L1801.73 1212.98 L1801.14 1212.98 L1800.55 1212.98 L1799.97 1212.98 L1799.38 1212.98 L1798.79 1212.98 L1798.21 1212.98 L1797.62 1212.98 L1797.03 1212.98 L1796.45 1212.98 L1795.86 1212.98 L1795.27 1212.98 L1794.69 1212.98 L1794.1 1212.98 L1793.52 1212.98 L1792.93 1212.98 L1792.34 1212.98 L1791.76 1212.98 L1791.17 1212.98 L1790.58 1212.98 L1790 1212.98 L1789.41 1212.98 L1788.82 1212.98 L1788.24 1212.98 L1787.65 1212.98 L1787.06 1212.98 L1786.48 1212.98 L1785.89 1212.98 L1785.31 1212.98 L1784.72 1212.98 L1784.13 1212.98 L1783.55 1212.98 L1782.96 1212.98 L1782.37 1212.98 L1781.79 1212.98 L1781.2 1212.98 L1780.61 1212.98 L1780.03 1212.98 L1779.44 1212.98 L1778.86 1212.98 L1778.27 1212.98 L1777.68 1212.98 L1777.1 1212.98 L1776.51 1212.98 L1775.92 1212.98 L1775.34 1212.98 L1774.75 1212.98 L1774.16 1212.98 L1773.58 1212.98 L1772.99 1212.98 L1772.4 1212.98 L1771.82 1212.98 L1771.23 1212.98 L1770.65 1212.98 L1770.06 1212.98 L1769.47 1212.98 L1768.89 1212.98 L1768.3 1212.98 L1767.71 1212.98 L1767.13 1212.98 L1766.54 1212.98 L1765.95 1212.98 L1765.37 1212.98 L1764.78 1212.98 L1764.19 1212.98 L1763.61 1212.98 L1763.02 1212.98 L1762.44 1212.98 L1761.85 1212.98 L1761.26 1212.98 L1760.68 1212.98 L1760.09 1212.98 L1759.5 1212.98 L1758.92 1212.98 L1758.33 1212.98 L1757.74 1212.98 L1757.16 1212.98 L1756.57 1212.98 L1755.99 1212.98 L1755.4 1212.98 L1754.81 1212.98 L1754.23 1212.98 L1753.64 1212.98 L1753.05 1212.98 L1752.47 1212.98 L1751.88 1212.98 L1751.29 1212.98 L1750.71 1212.98 L1750.12 1212.98 L1749.53 1212.98 L1748.95 1212.98 L1748.36 1212.98 L1747.78 1212.98 L1747.19 1212.98 L1746.6 1212.98 L1746.02 1212.98 L1745.43 1212.98 L1744.84 1212.98 L1744.26 1212.98 L1743.67 1212.98 L1743.08 1212.98 L1742.5 1212.98 L1741.91 1212.98 L1741.32 1212.98 L1740.74 1212.98 L1740.15 1212.98 L1739.57 1212.98 L1738.98 1212.98 L1738.39 1212.98 L1737.81 1212.98 L1737.22 1212.98 L1736.63 1212.98 L1736.05 1212.98 L1735.46 1212.98 L1734.87 1212.98 L1734.29 1212.98 L1733.7 1212.98 L1733.11 1212.98 L1732.53 1212.98 L1731.94 1212.98 L1731.36 1212.98 L1730.77 1212.98 L1730.18 1212.98 L1729.6 1212.98 L1729.01 1212.98 L1728.42 1212.98 L1727.84 1212.98 L1727.25 1212.98 L1726.66 1212.98 L1726.08 1212.98 L1725.49 1212.98 L1724.91 1212.98 L1724.32 1212.98 L1723.73 1212.98 L1723.15 1212.98 L1722.56 1212.98 L1721.97 1212.98 L1721.39 1212.98 L1720.8 1212.98 L1720.21 1212.98 L1719.63 1212.98 L1719.04 1212.98 L1718.45 1212.98 L1717.87 1212.98 L1717.28 1212.98 L1716.7 1212.98 L1716.11 1212.98 L1715.52 1212.98 L1714.94 1212.98 L1714.35 1212.98 L1713.76 1212.98 L1713.18 1212.98 L1712.59 1212.98 L1712 1212.98 L1711.42 1212.98 L1710.83 1212.98 L1710.24 1212.98 L1709.66 1212.98 L1709.07 1212.98 L1708.49 1212.98 L1707.9 1212.98 L1707.31 1212.98 L1706.73 1212.98 L1706.14 1212.98 L1705.55 1212.98 L1704.97 1212.98 L1704.38 1212.98 L1703.79 1212.98 L1703.21 1212.98 L1702.62 1212.98 L1702.04 1212.98 L1701.45 1212.98 L1700.86 1212.98 L1700.28 1212.98 L1699.69 1212.98 L1699.1 1212.98 L1698.52 1212.98 L1697.93 1212.98 L1697.34 1212.98 L1696.76 1212.98 L1696.17 1212.98 L1695.58 1212.98 L1695 1212.98 L1694.41 1212.98 L1693.83 1212.98 L1693.24 1212.98 L1692.65 1212.98 L1692.07 1212.98 L1691.48 1212.98 L1690.89 1212.98 L1690.31 1212.98 L1689.72 1212.98 L1689.13 1212.98 L1688.55 1212.98 L1687.96 1212.98 L1687.37 1212.98 L1686.79 1212.98 L1686.2 1212.98 L1685.62 1212.98 L1685.03 1212.98 L1684.44 1212.98 L1683.86 1212.98 L1683.27 1212.98 L1682.68 1212.98 L1682.1 1212.98 L1681.51 1212.98 L1680.92 1212.98 L1680.34 1212.98 L1679.75 1212.98 L1679.17 1212.98 L1678.58 1212.98 L1677.99 1212.98 L1677.41 1212.98 L1676.82 1212.98 L1676.23 1212.98 L1675.65 1212.98 L1675.06 1212.98 L1674.47 1212.98 L1673.89 1212.98 L1673.3 1212.98 L1672.71 1212.98 L1672.13 1212.98 L1671.54 1212.98 L1670.96 1212.98 L1670.37 1212.98 L1669.78 1212.98 L1669.2 1212.98 L1668.61 1212.98 L1668.02 1212.98 L1667.44 1212.98 L1666.85 1212.98 L1666.26 1212.98 L1665.68 1212.98 L1665.09 1212.98 L1664.5 1212.98 L1663.92 1212.98 L1663.33 1212.98 L1662.75 1212.98 L1662.16 1212.98 L1661.57 1212.98 L1660.99 1212.98 L1660.4 1212.98 L1659.81 1212.98 L1659.23 1212.98 L1658.64 1212.98 L1658.05 1212.98 L1657.47 1212.98 L1656.88 1212.98 L1656.29 1212.98 L1655.71 1212.98 L1655.12 1212.98 L1654.54 1212.98 L1653.95 1212.98 L1653.36 1212.98 L1652.78 1212.98 L1652.19 1212.98 L1651.6 1212.98 L1651.02 1212.98 L1650.43 1212.98 L1649.84 1212.98 L1649.26 1212.98 L1648.67 1212.98 L1648.09 1212.98 L1647.5 1212.98 L1646.91 1212.98 L1646.33 1212.98 L1645.74 1212.98 L1645.15 1212.98 L1644.57 1212.98 L1643.98 1212.98 L1643.39 1212.98 L1642.81 1212.98 L1642.22 1212.98 L1641.63 1212.98 L1641.05 1212.98 L1640.46 1212.98 L1639.88 1212.98 L1639.29 1212.98 L1638.7 1212.98 L1638.12 1212.98 L1637.53 1212.98 L1636.94 1212.98 L1636.36 1212.98 L1635.77 1212.98 L1635.18 1212.98 L1634.6 1212.98 L1634.01 1212.98 L1633.42 1212.98 L1632.84 1212.98 L1632.25 1212.98 L1631.67 1212.98 L1631.08 1212.98 L1630.49 1212.98 L1629.91 1212.98 L1629.32 1212.98 L1628.73 1212.98 L1628.15 1212.98 L1627.56 1212.98 L1626.97 1212.98 L1626.39 1212.98 L1625.8 1212.98 L1625.22 1212.98 L1624.63 1212.98 L1624.04 1212.98 L1623.46 1212.98 L1622.87 1212.98 L1622.28 1212.98 L1621.7 1212.98 L1621.11 1212.98 L1620.52 1212.98 L1619.94 1212.98 L1619.35 1212.98 L1618.76 1212.98 L1618.18 1212.98 L1617.59 1212.98 L1617.01 1212.98 L1616.42 1212.98 L1615.83 1212.98 L1615.25 1212.98 L1614.66 1212.98 L1614.07 1212.98 L1613.49 1212.98 L1612.9 1212.98 L1612.31 1212.98 L1611.73 1212.98 L1611.14 1212.98 L1610.55 1212.98 L1609.97 1212.98 L1609.38 1212.98 L1608.8 1212.98 L1608.21 1212.98 L1607.62 1212.98 L1607.04 1212.98 L1606.45 1212.98 L1605.86 1212.98 L1605.28 1212.98 L1604.69 1212.98 L1604.1 1212.98 L1603.52 1212.98 L1602.93 1212.98 L1602.34 1212.98 L1601.76 1212.98 L1601.17 1212.98 L1600.59 1212.98 L1600 1212.98 L1599.41 1212.98 L1598.83 1212.98 L1598.24 1212.98 L1597.65 1212.98 L1597.07 1212.98 L1596.48 1212.98 L1595.89 1212.98 L1595.31 1212.98 L1594.72 1212.98 L1594.14 1212.98 L1593.55 1212.98 L1592.96 1212.98 L1592.38 1212.98 L1591.79 1212.98 L1591.2 1212.98 L1590.62 1212.98 L1590.03 1212.98 L1589.44 1212.98 L1588.86 1212.98 L1588.27 1212.98 L1587.68 1212.98 L1587.1 1212.98 L1586.51 1212.98 L1585.93 1212.98 L1585.34 1212.98 L1584.75 1212.98 L1584.17 1212.98 L1583.58 1212.98 L1582.99 1212.98 L1582.41 1212.98 L1581.82 1212.98 L1581.23 1212.98 L1580.65 1212.98 L1580.06 1212.98 L1579.47 1212.98 L1578.89 1212.98 L1578.3 1212.98 L1577.72 1212.98 L1577.13 1212.98 L1576.54 1212.98 L1575.96 1212.98 L1575.37 1212.98 L1574.78 1212.98 L1574.2 1212.98 L1573.61 1212.98 L1573.02 1212.98 L1572.44 1212.98 L1571.85 1212.98 L1571.27 1212.98 L1570.68 1212.98 L1570.09 1212.98 L1569.51 1212.98 L1568.92 1212.98 L1568.33 1212.98 L1567.75 1212.98 L1567.16 1212.98 L1566.57 1212.98 L1565.99 1212.98 L1565.4 1212.98 L1564.81 1212.98 L1564.23 1212.98 L1563.64 1212.98 L1563.06 1212.98 L1562.47 1212.98 L1561.88 1212.98 L1561.3 1212.98 L1560.71 1212.98 L1560.12 1212.98 L1559.54 1212.98 L1558.95 1212.98 L1558.36 1212.98 L1557.78 1212.98 L1557.19 1212.98 L1556.6 1212.98 L1556.02 1212.98 L1555.43 1212.98 L1554.85 1212.98 L1554.26 1212.98 L1553.67 1212.98 L1553.09 1212.98 L1552.5 1212.98 L1551.91 1212.98 L1551.33 1212.98 L1550.74 1212.98 L1550.15 1212.98 L1549.57 1212.98 L1548.98 1212.98 L1548.4 1212.98 L1547.81 1212.98 L1547.22 1212.98 L1546.64 1212.98 L1546.05 1212.98 L1545.46 1212.98 L1544.88 1212.98 L1544.29 1212.98 L1543.7 1212.98 L1543.12 1212.98 L1542.53 1212.98 L1541.94 1212.98 L1541.36 1212.98 L1540.77 1212.98 L1540.19 1212.98 L1539.6 1212.98 L1539.01 1212.98 L1538.43 1212.98 L1537.84 1212.98 L1537.25 1212.98 L1536.67 1212.98 L1536.08 1212.98 L1535.49 1212.98 L1534.91 1212.98 L1534.32 1212.98 L1533.73 1212.98 L1533.15 1212.98 L1532.56 1212.98 L1531.98 1212.98 L1531.39 1212.98 L1530.8 1212.98 L1530.22 1212.98 L1529.63 1212.98 L1529.04 1212.98 L1528.46 1212.98 L1527.87 1212.98 L1527.28 1212.98 L1526.7 1212.98 L1526.11 1212.98 L1525.52 1212.98 L1524.94 1212.98 L1524.35 1212.98 L1523.77 1212.98 L1523.18 1212.98 L1522.59 1212.98 L1522.01 1212.98 L1521.42 1212.98 L1520.83 1212.98 L1520.25 1212.98 L1519.66 1212.98 L1519.07 1212.98 L1518.49 1212.98 L1517.9 1212.98 L1517.32 1212.98 L1516.73 1212.98 L1516.14 1212.98 L1515.56 1212.98 L1514.97 1212.98 L1514.38 1212.98 L1513.8 1212.98 L1513.21 1212.98 L1512.62 1212.98 L1512.04 1212.98 L1511.45 1212.98 L1510.86 1212.98 L1510.28 1212.98 L1509.69 1212.98 L1509.11 1212.98 L1508.52 1212.98 L1507.93 1212.98 L1507.35 1212.98 L1506.76 1212.98 L1506.17 1212.98 L1505.59 1212.98 L1505 1212.98 L1504.41 1212.98 L1503.83 1212.98 L1503.24 1212.98 L1502.65 1212.98 L1502.07 1212.98 L1501.48 1212.98 L1500.9 1212.98 L1500.31 1212.98 L1499.72 1212.98 L1499.14 1212.98 L1498.55 1212.98 L1497.96 1212.98 L1497.38 1212.98 L1496.79 1212.98 L1496.2 1212.98 L1495.62 1212.98 L1495.03 1212.98 L1494.45 1212.98 L1493.86 1212.98 L1493.27 1212.98 L1492.69 1212.98 L1492.1 1212.98 L1491.51 1212.98 L1490.93 1212.98 L1490.34 1212.98 L1489.75 1212.98 L1489.17 1212.98 L1488.58 1212.98 L1487.99 1212.98 L1487.41 1212.98 L1486.82 1212.98 L1486.24 1212.98 L1485.65 1212.98 L1485.06 1212.98 L1484.48 1212.98 L1483.89 1212.98 L1483.3 1212.98 L1482.72 1212.98 L1482.13 1212.98 L1481.54 1212.98 L1480.96 1212.98 L1480.37 1212.98 L1479.78 1212.98 L1479.2 1212.98 L1478.61 1212.98 L1478.03 1212.98 L1477.44 1212.98 L1476.85 1212.98 L1476.27 1212.98 L1475.68 1212.98 L1475.09 1212.98 L1474.51 1212.98 L1473.92 1212.98 L1473.33 1212.98 L1472.75 1212.98 L1472.16 1212.98 L1471.57 1212.98 L1470.99 1212.98 L1470.4 1212.98 L1469.82 1212.98 L1469.23 1212.98 L1468.64 1212.98 L1468.06 1212.98 L1467.47 1212.98 L1466.88 1212.98 L1466.3 1212.98 L1465.71 1212.98 L1465.12 1212.98 L1464.54 1212.98 L1463.95 1212.98 L1463.37 1212.98 L1462.78 1212.98 L1462.19 1212.98 L1461.61 1212.98 L1461.02 1212.98 L1460.43 1212.98 L1459.85 1212.98 L1459.26 1212.98 L1458.67 1212.98 L1458.09 1212.98 L1457.5 1212.98 L1456.91 1212.98 L1456.33 1212.98 L1455.74 1212.98 L1455.16 1212.98 L1454.57 1212.98 L1453.98 1212.98 L1453.4 1212.98 L1452.81 1212.98 L1452.22 1212.98 L1451.64 1212.98 L1451.05 1212.98 L1450.46 1212.98 L1449.88 1212.98 L1449.29 1212.98 L1448.7 1212.98 L1448.12 1212.98 L1447.53 1212.98 L1446.95 1212.98 L1446.36 1212.98 L1445.77 1212.98 L1445.19 1212.98 L1444.6 1212.98 L1444.01 1212.98 L1443.43 1212.98 L1442.84 1212.98 L1442.25 1212.98 L1441.67 1212.98 L1441.08 1212.98 L1440.5 1212.98 L1439.91 1212.98 L1439.32 1212.98 L1438.74 1212.98 L1438.15 1212.98 L1437.56 1212.98 L1436.98 1212.98 L1436.39 1212.98 L1435.8 1212.98 L1435.22 1212.98 L1434.63 1212.98 L1434.04 1212.98 L1433.46 1212.98 L1432.87 1212.98 L1432.29 1212.98 L1431.7 1212.98 L1431.11 1212.98 L1430.53 1212.98 L1429.94 1212.98 L1429.35 1212.98 L1428.77 1212.98 L1428.18 1212.98 L1427.59 1212.98 L1427.01 1212.98 L1426.42 1212.98 L1425.83 1212.98 L1425.25 1212.98 L1424.66 1212.98 L1424.08 1212.98 L1423.49 1212.98 L1422.9 1212.98 L1422.32 1212.98 L1421.73 1212.98 L1421.14 1212.98 L1420.56 1212.98 L1419.97 1212.98 L1419.38 1212.98 L1418.8 1212.98 L1418.21 1212.98 L1417.63 1212.98 L1417.04 1212.98 L1416.45 1212.98 L1415.87 1212.98 L1415.28 1212.98 L1414.69 1212.98 L1414.11 1212.98 L1413.52 1212.98 L1412.93 1212.98 L1412.35 1212.98 L1411.76 1212.98 L1411.17 1212.98 L1410.59 1212.98 L1410 1212.98 L1409.42 1212.98 L1408.83 1212.98 L1408.24 1212.98 L1407.66 1212.98 L1407.07 1212.98 L1406.48 1212.98 L1405.9 1212.98 L1405.31 1212.98 L1404.72 1212.98 L1404.14 1212.98 L1403.55 1212.98 L1402.96 1212.98 L1402.38 1212.98 L1401.79 1212.98 L1401.21 1212.98 L1400.62 1212.98 L1400.03 1212.98 L1399.45 1212.98 L1398.86 1212.98 L1398.27 1212.98 L1397.69 1212.98 L1397.1 1212.98 L1396.51 1212.98 L1395.93 1212.98 L1395.34 1212.98 L1394.75 1212.98 L1394.17 1212.98 L1393.58 1212.98 L1393 1212.98 L1392.41 1212.98 L1391.82 1212.98 L1391.24 1212.98 L1390.65 1212.98 L1390.06 1212.98 L1389.48 1212.98 L1388.89 1212.98 L1388.3 1212.98 L1387.72 1212.98 L1387.13 1212.98 L1386.55 1212.98 L1385.96 1212.98 L1385.37 1212.98 L1384.79 1212.98 L1384.2 1212.98 L1383.61 1212.98 L1383.03 1212.98 L1382.44 1212.98 L1381.85 1212.98 L1381.27 1212.98 L1380.68 1212.98 L1380.09 1212.98 L1379.51 1212.98 L1378.92 1212.98 L1378.34 1212.98 L1377.75 1212.98 L1377.16 1212.98 L1376.58 1212.98 L1375.99 1212.98 L1375.4 1212.98 L1374.82 1212.98 L1374.23 1212.98 L1373.64 1212.98 L1373.06 1212.98 L1372.47 1212.98 L1371.88 1212.98 L1371.3 1212.98 L1370.71 1212.98 L1370.13 1212.98 L1369.54 1212.98 L1368.95 1212.98 L1368.37 1212.98 L1367.78 1212.98 L1367.19 1212.98 L1366.61 1212.98 L1366.02 1212.98 L1365.43 1212.98 L1364.85 1212.98 L1364.26 1212.98 L1363.68 1212.98 L1363.09 1212.98 L1362.5 1212.98 L1361.92 1212.98 L1361.33 1212.98 L1360.74 1212.98 L1360.16 1212.98 L1359.57 1212.98 L1358.98 1212.98 L1358.4 1212.98 L1357.81 1212.98 L1357.22 1212.98 L1356.64 1212.98 L1356.05 1212.98 L1355.47 1212.98 L1354.88 1212.98 L1354.29 1212.98 L1353.71 1212.98 L1353.12 1212.98 L1352.53 1212.98 L1351.95 1212.98 L1351.36 1212.98 L1350.77 1212.98 L1350.19 1212.98 L1349.6 1212.98 L1349.01 1212.98 L1348.43 1212.98 L1347.84 1212.98 L1347.26 1212.98 L1346.67 1212.98 L1346.08 1212.98 L1345.5 1212.98 L1344.91 1212.98 L1344.32 1212.98 L1343.74 1212.98 L1343.15 1212.98 L1342.56 1212.98 L1341.98 1212.98 L1341.39 1212.98 L1340.8 1212.98 L1340.22 1212.98 L1339.63 1212.98 L1339.05 1212.98 L1338.46 1212.98 L1337.87 1212.98 L1337.29 1212.98 L1336.7 1212.98 L1336.11 1212.98 L1335.53 1212.98 L1334.94 1212.98 L1334.35 1212.98 L1333.77 1212.98 L1333.18 1212.98 L1332.6 1212.98 L1332.01 1212.98 L1331.42 1212.98 L1330.84 1212.98 L1330.25 1212.98 L1329.66 1212.98 L1329.08 1212.98 L1328.49 1212.98 L1327.9 1212.98 L1327.32 1212.98 L1326.73 1212.98 L1326.14 1212.98 L1325.56 1212.98 L1324.97 1212.98 L1324.39 1212.98 L1323.8 1212.98 L1323.21 1212.98 L1322.63 1212.98 L1322.04 1212.98 L1321.45 1212.98 L1320.87 1212.98 L1320.28 1212.98 L1319.69 1212.98 L1319.11 1212.98 L1318.52 1212.98 L1317.93 1212.98 L1317.35 1212.98 L1316.76 1212.98 L1316.18 1212.98 L1315.59 1212.98 L1315 1212.98 L1314.42 1212.98 L1313.83 1212.98 L1313.24 1212.98 L1312.66 1212.98 L1312.07 1212.98 L1311.48 1212.98 L1310.9 1212.98 L1310.31 1212.98 L1309.73 1212.98 L1309.14 1212.98 L1308.55 1212.98 L1307.97 1212.98 L1307.38 1212.98 L1306.79 1212.98 L1306.21 1212.98 L1305.62 1212.98 L1305.03 1212.98 L1304.45 1212.98 L1303.86 1212.98 L1303.27 1212.98 L1302.69 1212.98 L1302.1 1212.98 L1301.52 1212.98 L1300.93 1212.98 L1300.34 1212.98 L1299.76 1212.98 L1299.17 1212.98 L1298.58 1212.98 L1298 1212.98 L1297.41 1212.98 L1296.82 1212.98 L1296.24 1212.98 L1295.65 1212.98 L1295.06 1212.98 L1294.48 1212.98 L1293.89 1212.98 L1293.31 1212.98 L1292.72 1212.98 L1292.13 1212.98 L1291.55 1212.98 L1290.96 1212.98 L1290.37 1212.98 L1289.79 1212.98 L1289.2 1212.98 L1288.61 1212.98 L1288.03 1212.98 L1287.44 1212.98 L1286.86 1212.98 L1286.27 1212.98 L1285.68 1212.98 L1285.1 1212.98 L1284.51 1212.98 L1283.92 1212.98 L1283.34 1212.98 L1282.75 1212.98 L1282.16 1212.98 L1281.58 1212.98 L1280.99 1212.98 L1280.4 1212.98 L1279.82 1212.98 L1279.23 1212.98 L1278.65 1212.98 L1278.06 1212.98 L1277.47 1212.98 L1276.89 1212.98 L1276.3 1212.98 L1275.71 1212.98 L1275.13 1212.98 L1274.54 1212.98 L1273.95 1212.98 L1273.37 1212.98 L1272.78 1212.98 L1272.19 1212.98 L1271.61 1212.98 L1271.02 1212.98 L1270.44 1212.98 L1269.85 1212.98 L1269.26 1212.98 L1268.68 1212.98 L1268.09 1212.98 L1267.5 1212.98 L1266.92 1212.98 L1266.33 1212.98 L1265.74 1212.98 L1265.16 1212.98 L1264.57 1212.98 L1263.98 1212.98 L1263.4 1212.98 L1262.81 1212.98 L1262.23 1212.98 L1261.64 1212.98 L1261.05 1212.98 L1260.47 1212.98 L1259.88 1212.98 L1259.29 1212.98 L1258.71 1212.98 L1258.12 1212.98 L1257.53 1212.98 L1256.95 1212.98 L1256.36 1212.98 L1255.78 1212.98 L1255.19 1212.98 L1254.6 1212.98 L1254.02 1212.98 L1253.43 1212.98 L1252.84 1212.98 L1252.26 1212.98 L1251.67 1212.98 L1251.08 1212.98 L1250.5 1212.98 L1249.91 1212.98 L1249.32 1212.98 L1248.74 1212.98 L1248.15 1212.98 L1247.57 1212.98 L1246.98 1212.98 L1246.39 1212.98 L1245.81 1212.98 L1245.22 1212.98 L1244.63 1212.98 L1244.05 1212.98 L1243.46 1212.98 L1242.87 1212.98 L1242.29 1212.98 L1241.7 1212.98 L1241.11 1212.98 L1240.53 1212.98 L1239.94 1212.98 L1239.36 1212.98 L1238.77 1212.98 L1238.18 1212.98 L1237.6 1212.98 L1237.01 1212.98 L1236.42 1212.98 L1235.84 1212.98 L1235.25 1212.98 L1234.66 1212.98 L1234.08 1212.98 L1233.49 1212.98 L1232.91 1212.98 L1232.32 1212.98 L1231.73 1212.98 L1231.15 1212.98 L1230.56 1212.98 L1229.97 1212.98 L1229.39 1212.98 L1228.8 1212.98 L1228.21 1212.98 L1227.63 1212.98 L1227.04 1212.98 L1226.45 1212.98 L1225.87 1212.98 L1225.28 1212.98 L1224.7 1212.98 L1224.11 1212.98 L1223.52 1212.98 L1222.94 1212.98 L1222.35 1212.98 L1221.76 1212.98 L1221.18 1212.98 L1220.59 1212.98 L1220 1212.98 L1219.42 1212.98 L1218.83 1212.98 L1218.24 1212.98 L1217.66 1212.98 L1217.07 1212.98 L1216.49 1212.98 L1215.9 1212.98 L1215.31 1212.98 L1214.73 1212.98 L1214.14 1212.98 L1213.55 1212.98 L1212.97 1212.98 L1212.38 1212.98 L1211.79 1212.98 L1211.21 1212.98 L1210.62 1212.98 L1210.03 1212.98 L1209.45 1212.98 L1208.86 1212.98 L1208.28 1212.98 L1207.69 1212.98 L1207.1 1212.98 L1206.52 1212.98 L1205.93 1212.98 L1205.34 1212.98 L1204.76 1212.98 L1204.17 1212.98 L1203.58 1212.98 L1203 1212.98 L1202.41 1212.98 L1201.83 1212.98 L1201.24 1212.98 L1200.65 1212.98 L1200.07 1212.98 L1199.48 1212.98 L1198.89 1212.98 L1198.31 1212.98 L1197.72 1212.98 L1197.13 1212.98 L1196.55 1212.98 L1195.96 1212.98 L1195.37 1212.98 L1194.79 1212.98 L1194.2 1212.98 L1193.62 1212.98 L1193.03 1212.98 L1192.44 1212.98 L1191.86 1212.98 L1191.27 1212.98 L1190.68 1212.98 L1190.1 1212.98 L1189.51 1212.98 L1188.92 1212.98 L1188.34 1212.98 L1187.75 1212.98 L1187.16 1212.98 L1186.58 1212.98 L1185.99 1212.98 L1185.41 1212.98 L1184.82 1212.98 L1184.23 1212.98 L1183.65 1212.98 L1183.06 1212.98 L1182.47 1212.98 L1181.89 1212.98 L1181.3 1212.98 L1180.71 1212.98 L1180.13 1212.98 L1179.54 1212.98 L1178.96 1212.98 L1178.37 1212.98 L1177.78 1212.98 L1177.2 1212.98 L1176.61 1212.98 L1176.02 1212.98 L1175.44 1212.98 L1174.85 1212.98 L1174.26 1212.98 L1173.68 1212.98 L1173.09 1212.98 L1172.5 1212.98 L1171.92 1212.98 L1171.33 1212.98 L1170.75 1212.98 L1170.16 1212.98 L1169.57 1212.98 L1168.99 1212.98 L1168.4 1212.98 L1167.81 1212.98 L1167.23 1212.98 L1166.64 1212.98 L1166.05 1212.98 L1165.47 1212.98 L1164.88 1212.98 L1164.29 1212.98 L1163.71 1212.98 L1163.12 1212.98 L1162.54 1212.98 L1161.95 1212.98 L1161.36 1212.98 L1160.78 1212.98 L1160.19 1212.98 L1159.6 1212.98 L1159.02 1212.98 L1158.43 1212.98 L1157.84 1212.98 L1157.26 1212.98 L1156.67 1212.98 L1156.09 1212.98 L1155.5 1212.98 L1154.91 1212.98 L1154.33 1212.98 L1153.74 1212.98 L1153.15 1212.98 L1152.57 1212.98 L1151.98 1212.98 L1151.39 1212.98 L1150.81 1212.98 L1150.22 1212.98 L1149.63 1212.98 L1149.05 1212.98 L1148.46 1212.98 L1147.88 1212.98 L1147.29 1212.98 L1146.7 1212.98 L1146.12 1212.98 L1145.53 1212.98 L1144.94 1212.98 L1144.36 1212.98 L1143.77 1212.98 L1143.18 1212.98 L1142.6 1212.98 L1142.01 1212.98 L1141.42 1212.98 L1140.84 1212.98 L1140.25 1212.98 L1139.67 1212.98 L1139.08 1212.98 L1138.49 1212.98 L1137.91 1212.98 L1137.32 1212.98 L1136.73 1212.98 L1136.15 1212.98 L1135.56 1212.98 L1134.97 1212.98 L1134.39 1212.98 L1133.8 1212.98 L1133.21 1212.98 L1132.63 1212.98 L1132.04 1212.98 L1131.46 1212.98 L1130.87 1212.98 L1130.28 1212.98 L1129.7 1212.98 L1129.11 1212.98 L1128.52 1212.98 L1127.94 1212.98 L1127.35 1212.98 L1126.76 1212.98 L1126.18 1212.98 L1125.59 1212.98 L1125.01 1212.98 L1124.42 1212.98 L1123.83 1212.98 L1123.25 1212.98 L1122.66 1212.98 L1122.07 1212.98 L1121.49 1212.98 L1120.9 1212.98 L1120.31 1212.98 L1119.73 1212.98 L1119.14 1212.98 L1118.55 1212.98 L1117.97 1212.98 L1117.38 1212.98 L1116.8 1212.98 L1116.21 1212.98 L1115.62 1212.98 L1115.04 1212.98 L1114.45 1212.98 L1113.86 1212.98 L1113.28 1212.98 L1112.69 1212.98 L1112.1 1212.98 L1111.52 1212.98 L1110.93 1212.98 L1110.34 1212.98 L1109.76 1212.98 L1109.17 1212.98 L1108.59 1212.98 L1108 1212.98 L1107.41 1212.98 L1106.83 1212.98 L1106.24 1212.98 L1105.65 1212.98 L1105.07 1212.98 L1104.48 1212.98 L1103.89 1212.98 L1103.31 1212.98 L1102.72 1212.98 L1102.14 1212.98 L1101.55 1212.98 L1100.96 1212.98 L1100.38 1212.98 L1099.79 1212.98 L1099.2 1212.98 L1098.62 1212.98 L1098.03 1212.98 L1097.44 1212.98 L1096.86 1212.98 L1096.27 1212.98 L1095.68 1212.98 L1095.1 1212.98 L1094.51 1212.98 L1093.93 1212.98 L1093.34 1212.98 L1092.75 1212.98 L1092.17 1212.98 L1091.58 1212.98 L1090.99 1212.98 L1090.41 1212.98 L1089.82 1212.98 L1089.23 1212.98 L1088.65 1212.98 L1088.06 1212.98 L1087.47 1212.98 L1086.89 1212.98 L1086.3 1212.98 L1085.72 1212.98 L1085.13 1212.98 L1084.54 1212.98 L1083.96 1212.98 L1083.37 1212.98 L1082.78 1212.98 L1082.2 1212.98 L1081.61 1212.98 L1081.02 1212.98 L1080.44 1212.98 L1079.85 1212.98 L1079.26 1212.98 L1078.68 1212.98 L1078.09 1212.98 L1077.51 1212.98 L1076.92 1212.98 L1076.33 1212.98 L1075.75 1212.98 L1075.16 1212.98 L1074.57 1212.98 L1073.99 1212.98 L1073.4 1212.98 L1072.81 1212.98 L1072.23 1212.98 L1071.64 1212.98 L1071.06 1212.98 L1070.47 1212.98 L1069.88 1212.98 L1069.3 1212.98 L1068.71 1212.98 L1068.12 1212.98 L1067.54 1212.98 L1066.95 1212.98 L1066.36 1212.98 L1065.78 1212.98 L1065.19 1212.98 L1064.6 1212.98 L1064.02 1212.98 L1063.43 1212.98 L1062.85 1212.98 L1062.26 1212.98 L1061.67 1212.98 L1061.09 1212.98 L1060.5 1212.98 L1059.91 1212.98 L1059.33 1212.98 L1058.74 1212.98 L1058.15 1212.98 L1057.57 1212.98 L1056.98 1212.98 L1056.39 1212.98 L1055.81 1212.98 L1055.22 1212.98 L1054.64 1212.98 L1054.05 1212.98 L1053.46 1212.98 L1052.88 1212.98 L1052.29 1212.98 L1051.7 1212.98 L1051.12 1212.98 L1050.53 1212.98 L1049.94 1212.98 L1049.36 1212.98 L1048.77 1212.98 L1048.19 1212.98 L1047.6 1212.98 L1047.01 1212.98 L1046.43 1212.98 L1045.84 1212.98 L1045.25 1212.98 L1044.67 1212.98 L1044.08 1212.98 L1043.49 1212.98 L1042.91 1212.98 L1042.32 1212.98 L1041.73 1212.98 L1041.15 1212.98 L1040.56 1212.98 L1039.98 1212.98 L1039.39 1212.98 L1038.8 1212.98 L1038.22 1212.98 L1037.63 1212.98 L1037.04 1212.98 L1036.46 1212.98 L1035.87 1212.98 L1035.28 1212.98 L1034.7 1212.98 L1034.11 1212.98 L1033.52 1212.98 L1032.94 1212.98 L1032.35 1212.98 L1031.77 1212.98 L1031.18 1212.98 L1030.59 1212.98 L1030.01 1212.98 L1029.42 1212.98 L1028.83 1212.98 L1028.25 1212.98 L1027.66 1212.98 L1027.07 1212.98 L1026.49 1212.98 L1025.9 1212.98 L1025.32 1212.98 L1024.73 1212.98 L1024.14 1212.98 L1023.56 1212.98 L1022.97 1212.98 L1022.38 1212.98 L1021.8 1212.98 L1021.21 1212.98 L1020.62 1212.98 L1020.04 1212.98 L1019.45 1212.98 L1018.86 1212.98 L1018.28 1212.98 L1017.69 1212.98 L1017.11 1212.98 L1016.52 1212.98 L1015.93 1212.98 L1015.35 1212.98 L1014.76 1212.98 L1014.17 1212.98 L1013.59 1212.98 L1013 1212.98 L1012.41 1212.98 L1011.83 1212.98 L1011.24 1212.98 L1010.65 1212.98 L1010.07 1212.98 L1009.48 1212.98 L1008.9 1212.98 L1008.31 1212.98 L1007.72 1212.98 L1007.14 1212.98 L1006.55 1212.98 L1005.96 1212.98 L1005.38 1212.98 L1004.79 1212.98 L1004.2 1212.98 L1003.62 1212.98 L1003.03 1212.98 L1002.44 1212.98 L1001.86 1212.98 L1001.27 1212.98 L1000.69 1212.98 L1000.1 1212.98 L999.513 1212.98 L998.926 1212.98 L998.34 1212.98 L997.754 1212.98 L997.167 1212.98 L996.581 1212.98 L995.994 1212.98 L995.408 1212.98 L994.822 1212.98 L994.235 1212.98 L993.649 1212.98 L993.062 1212.98 L992.476 1212.98 L991.889 1212.98 L991.303 1212.98 L990.717 1212.98 L990.13 1212.98 L989.544 1212.98 L988.957 1212.98 L988.371 1212.98 L987.785 1212.98 L987.198 1212.98 L986.612 1212.98 L986.025 1212.98  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.33 986.612,1213.33 987.198,1213.33 987.785,1213.33 988.371,1213.33 988.957,1213.33 989.544,1213.33 990.13,1213.33 990.717,1213.33 991.303,1213.33 991.889,1213.33 992.476,1213.33 993.062,1213.33 993.649,1213.33 994.235,1213.33 994.822,1213.33 995.408,1213.33 995.994,1213.33 996.581,1213.33 997.167,1213.33 997.754,1213.33 998.34,1213.33 998.926,1213.33 999.513,1213.33 1000.1,1213.33 1000.69,1213.33 1001.27,1213.33 1001.86,1213.33 1002.44,1213.33 1003.03,1213.33 1003.62,1213.33 1004.2,1213.33 1004.79,1213.33 1005.38,1213.33 1005.96,1213.33 1006.55,1213.33 1007.14,1213.33 1007.72,1213.33 1008.31,1213.33 1008.9,1213.33 1009.48,1213.33 1010.07,1213.33 1010.65,1213.33 1011.24,1213.33 1011.83,1213.33 1012.41,1213.33 1013,1213.33 1013.59,1213.33 1014.17,1213.33 1014.76,1213.33 1015.35,1213.33 1015.93,1213.33 1016.52,1213.33 1017.11,1213.33 1017.69,1213.33 1018.28,1213.33 1018.86,1213.33 1019.45,1213.33 1020.04,1213.33 1020.62,1213.33 1021.21,1213.33 1021.8,1213.33 1022.38,1213.33 1022.97,1213.33 1023.56,1213.33 1024.14,1213.33 1024.73,1213.33 1025.32,1213.33 1025.9,1213.33 1026.49,1213.33 1027.07,1213.33 1027.66,1213.33 1028.25,1213.33 1028.83,1213.33 1029.42,1213.33 1030.01,1213.33 1030.59,1213.33 1031.18,1213.33 1031.77,1213.33 1032.35,1213.33 1032.94,1213.33 1033.52,1213.33 1034.11,1213.33 1034.7,1213.33 1035.28,1213.33 1035.87,1213.33 1036.46,1213.33 1037.04,1213.33 1037.63,1213.33 1038.22,1213.33 1038.8,1213.33 1039.39,1213.33 1039.98,1213.33 1040.56,1213.33 1041.15,1213.33 1041.73,1213.33 1042.32,1213.33 1042.91,1213.33 1043.49,1213.33 1044.08,1213.33 1044.67,1213.33 1045.25,1213.33 1045.84,1213.33 1046.43,1213.33 1047.01,1213.33 1047.6,1213.33 1048.19,1213.33 1048.77,1213.33 1049.36,1213.33 1049.94,1213.33 1050.53,1213.33 1051.12,1213.33 1051.7,1213.33 1052.29,1213.33 1052.88,1213.33 1053.46,1213.33 1054.05,1213.33 1054.64,1213.33 1055.22,1213.33 1055.81,1213.33 1056.39,1213.33 1056.98,1213.33 1057.57,1213.33 1058.15,1213.33 1058.74,1213.33 1059.33,1213.33 1059.91,1213.33 1060.5,1213.33 1061.09,1213.33 1061.67,1213.33 1062.26,1213.33 1062.85,1213.33 1063.43,1213.33 1064.02,1213.33 1064.6,1213.33 1065.19,1213.33 1065.78,1213.33 1066.36,1213.33 1066.95,1213.33 1067.54,1213.33 1068.12,1213.33 1068.71,1213.33 1069.3,1213.33 1069.88,1213.33 1070.47,1213.33 1071.06,1213.33 1071.64,1213.33 1072.23,1213.33 1072.81,1213.33 1073.4,1213.33 1073.99,1213.33 1074.57,1213.33 1075.16,1213.33 1075.75,1213.33 1076.33,1213.33 1076.92,1213.33 1077.51,1213.33 1078.09,1213.33 1078.68,1213.33 1079.26,1213.33 1079.85,1213.33 1080.44,1213.33 1081.02,1213.33 1081.61,1213.33 1082.2,1213.33 1082.78,1213.33 1083.37,1213.33 1083.96,1213.33 1084.54,1213.33 1085.13,1213.33 1085.72,1213.33 1086.3,1213.33 1086.89,1213.33 1087.47,1213.33 1088.06,1213.33 1088.65,1213.33 1089.23,1213.33 1089.82,1213.33 1090.41,1213.33 1090.99,1213.33 1091.58,1213.33 1092.17,1213.33 1092.75,1213.33 1093.34,1213.33 1093.93,1213.33 1094.51,1213.33 1095.1,1213.33 1095.68,1213.33 1096.27,1213.33 1096.86,1213.33 1097.44,1213.33 1098.03,1213.33 1098.62,1213.33 1099.2,1213.33 1099.79,1213.33 1100.38,1213.33 1100.96,1213.33 1101.55,1213.33 1102.14,1213.33 1102.72,1213.33 1103.31,1213.33 1103.89,1213.33 1104.48,1213.33 1105.07,1213.33 1105.65,1213.33 1106.24,1213.33 1106.83,1213.33 1107.41,1213.33 1108,1213.33 1108.59,1213.33 1109.17,1213.33 1109.76,1213.33 1110.34,1213.33 1110.93,1213.33 1111.52,1213.33 1112.1,1213.33 1112.69,1213.33 1113.28,1213.33 1113.86,1213.33 1114.45,1213.33 1115.04,1213.33 1115.62,1213.33 1116.21,1213.33 1116.8,1213.33 1117.38,1213.33 1117.97,1213.33 1118.55,1213.33 1119.14,1213.33 1119.73,1213.33 1120.31,1213.33 1120.9,1213.33 1121.49,1213.33 1122.07,1213.33 1122.66,1213.33 1123.25,1213.33 1123.83,1213.33 1124.42,1213.33 1125.01,1213.33 1125.59,1213.33 1126.18,1213.33 1126.76,1213.33 1127.35,1213.33 1127.94,1213.33 1128.52,1213.33 1129.11,1213.33 1129.7,1213.33 1130.28,1213.33 1130.87,1213.33 1131.46,1213.33 1132.04,1213.33 1132.63,1213.33 1133.21,1213.33 1133.8,1213.33 1134.39,1213.33 1134.97,1213.33 1135.56,1213.33 1136.15,1213.33 1136.73,1213.33 1137.32,1213.33 1137.91,1213.33 1138.49,1213.33 1139.08,1213.33 1139.67,1213.33 1140.25,1213.33 1140.84,1213.33 1141.42,1213.33 1142.01,1213.33 1142.6,1213.33 1143.18,1213.33 1143.77,1213.33 1144.36,1213.33 1144.94,1213.33 1145.53,1213.33 1146.12,1213.33 1146.7,1213.33 1147.29,1213.33 1147.88,1213.33 1148.46,1213.33 1149.05,1213.33 1149.63,1213.33 1150.22,1213.33 1150.81,1213.33 1151.39,1213.33 1151.98,1213.33 1152.57,1213.33 1153.15,1213.33 1153.74,1213.33 1154.33,1213.33 1154.91,1213.33 1155.5,1213.33 1156.09,1213.33 1156.67,1213.33 1157.26,1213.33 1157.84,1213.33 1158.43,1213.33 1159.02,1213.33 1159.6,1213.33 1160.19,1213.33 1160.78,1213.33 1161.36,1213.33 1161.95,1213.33 1162.54,1213.33 1163.12,1213.33 1163.71,1213.33 1164.29,1213.33 1164.88,1213.33 1165.47,1213.33 1166.05,1213.33 1166.64,1213.33 1167.23,1213.33 1167.81,1213.33 1168.4,1213.33 1168.99,1213.33 1169.57,1213.33 1170.16,1213.33 1170.75,1213.33 1171.33,1213.33 1171.92,1213.33 1172.5,1213.33 1173.09,1213.33 1173.68,1213.33 1174.26,1213.33 1174.85,1213.33 1175.44,1213.33 1176.02,1213.33 1176.61,1213.33 1177.2,1213.33 1177.78,1213.33 1178.37,1213.33 1178.96,1213.33 1179.54,1213.33 1180.13,1213.33 1180.71,1213.33 1181.3,1213.33 1181.89,1213.33 1182.47,1213.33 1183.06,1213.33 1183.65,1213.33 1184.23,1213.33 1184.82,1213.33 1185.41,1213.33 1185.99,1213.33 1186.58,1213.33 1187.16,1213.33 1187.75,1213.33 1188.34,1213.33 1188.92,1213.33 1189.51,1213.33 1190.1,1213.33 1190.68,1213.33 1191.27,1213.33 1191.86,1213.33 1192.44,1213.33 1193.03,1213.33 1193.62,1213.33 1194.2,1213.33 1194.79,1213.33 1195.37,1213.33 1195.96,1213.33 1196.55,1213.33 1197.13,1213.33 1197.72,1213.33 1198.31,1213.33 1198.89,1213.33 1199.48,1213.33 1200.07,1213.33 1200.65,1213.33 1201.24,1213.33 1201.83,1213.33 1202.41,1213.33 1203,1213.33 1203.58,1213.33 1204.17,1213.33 1204.76,1213.33 1205.34,1213.33 1205.93,1213.33 1206.52,1213.33 1207.1,1213.33 1207.69,1213.33 1208.28,1213.33 1208.86,1213.33 1209.45,1213.33 1210.03,1213.33 1210.62,1213.33 1211.21,1213.33 1211.79,1213.33 1212.38,1213.33 1212.97,1213.33 1213.55,1213.33 1214.14,1213.33 1214.73,1213.33 1215.31,1213.33 1215.9,1213.33 1216.49,1213.33 1217.07,1213.33 1217.66,1213.33 1218.24,1213.33 1218.83,1213.33 1219.42,1213.33 1220,1213.33 1220.59,1213.33 1221.18,1213.33 1221.76,1213.33 1222.35,1213.33 1222.94,1213.33 1223.52,1213.33 1224.11,1213.33 1224.7,1213.33 1225.28,1213.33 1225.87,1213.33 1226.45,1213.33 1227.04,1213.33 1227.63,1213.33 1228.21,1213.33 1228.8,1213.33 1229.39,1213.33 1229.97,1213.33 1230.56,1213.33 1231.15,1213.33 1231.73,1213.33 1232.32,1213.33 1232.91,1213.33 1233.49,1213.33 1234.08,1213.33 1234.66,1213.33 1235.25,1213.33 1235.84,1213.33 1236.42,1213.33 1237.01,1213.33 1237.6,1213.33 1238.18,1213.33 1238.77,1213.33 1239.36,1213.33 1239.94,1213.33 1240.53,1213.33 1241.11,1213.33 1241.7,1213.33 1242.29,1213.33 1242.87,1213.33 1243.46,1213.33 1244.05,1213.33 1244.63,1213.33 1245.22,1213.33 1245.81,1213.33 1246.39,1213.33 1246.98,1213.33 1247.57,1213.33 1248.15,1213.33 1248.74,1213.33 1249.32,1213.33 1249.91,1213.33 1250.5,1213.33 1251.08,1213.33 1251.67,1213.33 1252.26,1213.33 1252.84,1213.33 1253.43,1213.33 1254.02,1213.33 1254.6,1213.33 1255.19,1213.33 1255.78,1213.33 1256.36,1213.33 1256.95,1213.33 1257.53,1213.33 1258.12,1213.33 1258.71,1213.33 1259.29,1213.33 1259.88,1213.33 1260.47,1213.33 1261.05,1213.33 1261.64,1213.33 1262.23,1213.33 1262.81,1213.33 1263.4,1213.33 1263.98,1213.33 1264.57,1213.33 1265.16,1213.33 1265.74,1213.33 1266.33,1213.33 1266.92,1213.33 1267.5,1213.33 1268.09,1213.33 1268.68,1213.33 1269.26,1213.33 1269.85,1213.33 1270.44,1213.33 1271.02,1213.33 1271.61,1213.33 1272.19,1213.33 1272.78,1213.33 1273.37,1213.33 1273.95,1213.33 1274.54,1213.33 1275.13,1213.33 1275.71,1213.33 1276.3,1213.33 1276.89,1213.33 1277.47,1213.33 1278.06,1213.33 1278.65,1213.33 1279.23,1213.33 1279.82,1213.33 1280.4,1213.33 1280.99,1213.33 1281.58,1213.33 1282.16,1213.33 1282.75,1213.33 1283.34,1213.33 1283.92,1213.33 1284.51,1213.33 1285.1,1213.33 1285.68,1213.33 1286.27,1213.33 1286.86,1213.33 1287.44,1213.33 1288.03,1213.33 1288.61,1213.33 1289.2,1213.33 1289.79,1213.33 1290.37,1213.33 1290.96,1213.33 1291.55,1213.33 1292.13,1213.33 1292.72,1213.33 1293.31,1213.33 1293.89,1213.33 1294.48,1213.33 1295.06,1213.33 1295.65,1213.33 1296.24,1213.33 1296.82,1213.33 1297.41,1213.33 1298,1213.33 1298.58,1213.33 1299.17,1213.33 1299.76,1213.33 1300.34,1213.33 1300.93,1213.33 1301.52,1213.33 1302.1,1213.33 1302.69,1213.33 1303.27,1213.33 1303.86,1213.33 1304.45,1213.33 1305.03,1213.33 1305.62,1213.33 1306.21,1213.33 1306.79,1213.33 1307.38,1213.33 1307.97,1213.33 1308.55,1213.33 1309.14,1213.33 1309.73,1213.33 1310.31,1213.33 1310.9,1213.33 1311.48,1213.33 1312.07,1213.33 1312.66,1213.33 1313.24,1213.33 1313.83,1213.33 1314.42,1213.33 1315,1213.33 1315.59,1213.33 1316.18,1213.33 1316.76,1213.33 1317.35,1213.33 1317.93,1213.33 1318.52,1213.33 1319.11,1213.33 1319.69,1213.33 1320.28,1213.33 1320.87,1213.33 1321.45,1213.33 1322.04,1213.33 1322.63,1213.33 1323.21,1213.33 1323.8,1213.33 1324.39,1213.33 1324.97,1213.33 1325.56,1213.33 1326.14,1213.33 1326.73,1213.33 1327.32,1213.33 1327.9,1213.33 1328.49,1213.33 1329.08,1213.33 1329.66,1213.33 1330.25,1213.33 1330.84,1213.33 1331.42,1213.33 1332.01,1213.33 1332.6,1213.33 1333.18,1213.33 1333.77,1213.33 1334.35,1213.33 1334.94,1213.33 1335.53,1213.33 1336.11,1213.33 1336.7,1213.33 1337.29,1213.33 1337.87,1213.33 1338.46,1213.33 1339.05,1213.33 1339.63,1213.33 1340.22,1213.33 1340.8,1213.33 1341.39,1213.33 1341.98,1213.33 1342.56,1213.33 1343.15,1213.33 1343.74,1213.33 1344.32,1213.33 1344.91,1213.33 1345.5,1213.33 1346.08,1213.33 1346.67,1213.33 1347.26,1213.33 1347.84,1213.33 1348.43,1213.33 1349.01,1213.33 1349.6,1213.33 1350.19,1213.33 1350.77,1213.33 1351.36,1213.33 1351.95,1213.33 1352.53,1213.33 1353.12,1213.33 1353.71,1213.33 1354.29,1213.33 1354.88,1213.33 1355.47,1213.33 1356.05,1213.33 1356.64,1213.33 1357.22,1213.33 1357.81,1213.33 1358.4,1213.33 1358.98,1213.33 1359.57,1213.33 1360.16,1213.33 1360.74,1213.33 1361.33,1213.33 1361.92,1213.33 1362.5,1213.33 1363.09,1213.33 1363.68,1213.33 1364.26,1213.33 1364.85,1213.33 1365.43,1213.33 1366.02,1213.33 1366.61,1213.33 1367.19,1213.33 1367.78,1213.33 1368.37,1213.33 1368.95,1213.33 1369.54,1213.33 1370.13,1213.33 1370.71,1213.33 1371.3,1213.33 1371.88,1213.33 1372.47,1213.33 1373.06,1213.33 1373.64,1213.33 1374.23,1213.33 1374.82,1213.33 1375.4,1213.33 1375.99,1213.33 1376.58,1213.33 1377.16,1213.33 1377.75,1213.33 1378.34,1213.33 1378.92,1213.33 1379.51,1213.33 1380.09,1213.33 1380.68,1213.33 1381.27,1213.33 1381.85,1213.33 1382.44,1213.33 1383.03,1213.33 1383.61,1213.33 1384.2,1213.33 1384.79,1213.33 1385.37,1213.33 1385.96,1213.33 1386.55,1213.33 1387.13,1213.33 1387.72,1213.33 1388.3,1213.33 1388.89,1213.33 1389.48,1213.33 1390.06,1213.33 1390.65,1213.33 1391.24,1213.33 1391.82,1213.33 1392.41,1213.33 1393,1213.33 1393.58,1213.33 1394.17,1213.33 1394.75,1213.33 1395.34,1213.33 1395.93,1213.33 1396.51,1213.33 1397.1,1213.33 1397.69,1213.33 1398.27,1213.33 1398.86,1213.33 1399.45,1213.33 1400.03,1213.33 1400.62,1213.33 1401.21,1213.33 1401.79,1213.33 1402.38,1213.33 1402.96,1213.33 1403.55,1213.33 1404.14,1213.33 1404.72,1213.33 1405.31,1213.33 1405.9,1213.33 1406.48,1213.33 1407.07,1213.33 1407.66,1213.33 1408.24,1213.33 1408.83,1213.33 1409.42,1213.33 1410,1213.33 1410.59,1213.33 1411.17,1213.33 1411.76,1213.33 1412.35,1213.33 1412.93,1213.33 1413.52,1213.33 1414.11,1213.33 1414.69,1213.33 1415.28,1213.33 1415.87,1213.33 1416.45,1213.33 1417.04,1213.33 1417.63,1213.33 1418.21,1213.33 1418.8,1213.33 1419.38,1213.33 1419.97,1213.33 1420.56,1213.33 1421.14,1213.33 1421.73,1213.33 1422.32,1213.33 1422.9,1213.33 1423.49,1213.33 1424.08,1213.33 1424.66,1213.33 1425.25,1213.33 1425.83,1213.33 1426.42,1213.33 1427.01,1213.33 1427.59,1213.33 1428.18,1213.33 1428.77,1213.33 1429.35,1213.33 1429.94,1213.33 1430.53,1213.33 1431.11,1213.33 1431.7,1213.33 1432.29,1213.33 1432.87,1213.33 1433.46,1213.33 1434.04,1213.33 1434.63,1213.33 1435.22,1213.33 1435.8,1213.33 1436.39,1213.33 1436.98,1213.33 1437.56,1213.33 1438.15,1213.33 1438.74,1213.33 1439.32,1213.33 1439.91,1213.33 1440.5,1213.33 1441.08,1213.33 1441.67,1213.33 1442.25,1213.33 1442.84,1213.33 1443.43,1213.33 1444.01,1213.33 1444.6,1213.33 1445.19,1213.33 1445.77,1213.33 1446.36,1213.33 1446.95,1213.33 1447.53,1213.33 1448.12,1213.33 1448.7,1213.33 1449.29,1213.33 1449.88,1213.33 1450.46,1213.33 1451.05,1213.33 1451.64,1213.33 1452.22,1213.33 1452.81,1213.33 1453.4,1213.33 1453.98,1213.33 1454.57,1213.33 1455.16,1213.33 1455.74,1213.33 1456.33,1213.33 1456.91,1213.33 1457.5,1213.33 1458.09,1213.33 1458.67,1213.33 1459.26,1213.33 1459.85,1213.33 1460.43,1213.33 1461.02,1213.33 1461.61,1213.33 1462.19,1213.33 1462.78,1213.33 1463.37,1213.33 1463.95,1213.33 1464.54,1213.33 1465.12,1213.33 1465.71,1213.33 1466.3,1213.33 1466.88,1213.33 1467.47,1213.33 1468.06,1213.33 1468.64,1213.33 1469.23,1213.33 1469.82,1213.33 1470.4,1213.33 1470.99,1213.33 1471.57,1213.33 1472.16,1213.33 1472.75,1213.33 1473.33,1213.33 1473.92,1213.33 1474.51,1213.33 1475.09,1213.33 1475.68,1213.33 1476.27,1213.33 1476.85,1213.33 1477.44,1213.33 1478.03,1213.33 1478.61,1213.33 1479.2,1213.33 1479.78,1213.33 1480.37,1213.33 1480.96,1213.33 1481.54,1213.33 1482.13,1213.33 1482.72,1213.33 1483.3,1213.33 1483.89,1213.33 1484.48,1213.33 1485.06,1213.33 1485.65,1213.33 1486.24,1213.33 1486.82,1213.33 1487.41,1213.33 1487.99,1213.33 1488.58,1213.33 1489.17,1213.33 1489.75,1213.33 1490.34,1213.33 1490.93,1213.33 1491.51,1213.33 1492.1,1213.33 1492.69,1213.33 1493.27,1213.33 1493.86,1213.33 1494.45,1213.33 1495.03,1213.33 1495.62,1213.33 1496.2,1213.33 1496.79,1213.33 1497.38,1213.33 1497.96,1213.33 1498.55,1213.33 1499.14,1213.33 1499.72,1213.33 1500.31,1213.33 1500.9,1213.33 1501.48,1213.33 1502.07,1213.33 1502.65,1213.33 1503.24,1213.33 1503.83,1213.33 1504.41,1213.33 1505,1213.33 1505.59,1213.33 1506.17,1213.33 1506.76,1213.33 1507.35,1213.33 1507.93,1213.33 1508.52,1213.33 1509.11,1213.33 1509.69,1213.33 1510.28,1213.33 1510.86,1213.33 1511.45,1213.33 1512.04,1213.33 1512.62,1213.33 1513.21,1213.33 1513.8,1213.33 1514.38,1213.33 1514.97,1213.33 1515.56,1213.33 1516.14,1213.33 1516.73,1213.33 1517.32,1213.33 1517.9,1213.33 1518.49,1213.33 1519.07,1213.33 1519.66,1213.33 1520.25,1213.33 1520.83,1213.33 1521.42,1213.33 1522.01,1213.33 1522.59,1213.33 1523.18,1213.33 1523.77,1213.33 1524.35,1213.33 1524.94,1213.33 1525.52,1213.33 1526.11,1213.33 1526.7,1213.33 1527.28,1213.33 1527.87,1213.33 1528.46,1213.33 1529.04,1213.33 1529.63,1213.33 1530.22,1213.33 1530.8,1213.33 1531.39,1213.33 1531.98,1213.33 1532.56,1213.33 1533.15,1213.33 1533.73,1213.33 1534.32,1213.33 1534.91,1213.33 1535.49,1213.33 1536.08,1213.33 1536.67,1213.33 1537.25,1213.33 1537.84,1213.33 1538.43,1213.33 1539.01,1213.33 1539.6,1213.33 1540.19,1213.33 1540.77,1213.33 1541.36,1213.33 1541.94,1213.33 1542.53,1213.33 1543.12,1213.33 1543.7,1213.33 1544.29,1213.33 1544.88,1213.33 1545.46,1213.33 1546.05,1213.33 1546.64,1213.33 1547.22,1213.33 1547.81,1213.33 1548.4,1213.33 1548.98,1213.33 1549.57,1213.33 1550.15,1213.33 1550.74,1213.33 1551.33,1213.33 1551.91,1213.33 1552.5,1213.33 1553.09,1213.33 1553.67,1213.33 1554.26,1213.33 1554.85,1213.33 1555.43,1213.33 1556.02,1213.33 1556.6,1213.33 1557.19,1213.33 1557.78,1213.33 1558.36,1213.33 1558.95,1213.33 1559.54,1213.33 1560.12,1213.33 1560.71,1213.33 1561.3,1213.33 1561.88,1213.33 1562.47,1213.33 1563.06,1213.33 1563.64,1213.33 1564.23,1213.33 1564.81,1213.33 1565.4,1213.33 1565.99,1213.33 1566.57,1213.33 1567.16,1213.33 1567.75,1213.33 1568.33,1213.33 1568.92,1213.33 1569.51,1213.33 1570.09,1213.33 1570.68,1213.33 1571.27,1213.33 1571.85,1213.33 1572.44,1213.33 1573.02,1213.33 1573.61,1213.33 1574.2,1213.33 1574.78,1213.33 1575.37,1213.33 1575.96,1213.33 1576.54,1213.33 1577.13,1213.33 1577.72,1213.33 1578.3,1213.33 1578.89,1213.33 1579.47,1213.33 1580.06,1213.33 1580.65,1213.33 1581.23,1213.33 1581.82,1213.33 1582.41,1213.33 1582.99,1213.33 1583.58,1213.33 1584.17,1213.33 1584.75,1213.33 1585.34,1213.33 1585.93,1213.33 1586.51,1213.33 1587.1,1213.33 1587.68,1213.33 1588.27,1213.33 1588.86,1213.33 1589.44,1213.33 1590.03,1213.33 1590.62,1213.33 1591.2,1213.33 1591.79,1213.33 1592.38,1213.33 1592.96,1213.33 1593.55,1213.33 1594.14,1213.33 1594.72,1213.33 1595.31,1213.33 1595.89,1213.33 1596.48,1213.33 1597.07,1213.33 1597.65,1213.33 1598.24,1213.33 1598.83,1213.33 1599.41,1213.33 1600,1213.33 1600.59,1213.33 1601.17,1213.33 1601.76,1213.33 1602.34,1213.33 1602.93,1213.33 1603.52,1213.33 1604.1,1213.33 1604.69,1213.33 1605.28,1213.33 1605.86,1213.33 1606.45,1213.33 1607.04,1213.33 1607.62,1213.33 1608.21,1213.33 1608.8,1213.33 1609.38,1213.33 1609.97,1213.33 1610.55,1213.33 1611.14,1213.33 1611.73,1213.33 1612.31,1213.33 1612.9,1213.33 1613.49,1213.33 1614.07,1213.33 1614.66,1213.33 1615.25,1213.33 1615.83,1213.33 1616.42,1213.33 1617.01,1213.33 1617.59,1213.33 1618.18,1213.33 1618.76,1213.33 1619.35,1213.33 1619.94,1213.33 1620.52,1213.33 1621.11,1213.33 1621.7,1213.33 1622.28,1213.33 1622.87,1213.33 1623.46,1213.33 1624.04,1213.33 1624.63,1213.33 1625.22,1213.33 1625.8,1213.33 1626.39,1213.33 1626.97,1213.33 1627.56,1213.33 1628.15,1213.33 1628.73,1213.33 1629.32,1213.33 1629.91,1213.33 1630.49,1213.33 1631.08,1213.33 1631.67,1213.33 1632.25,1213.33 1632.84,1213.33 1633.42,1213.33 1634.01,1213.33 1634.6,1213.33 1635.18,1213.33 1635.77,1213.33 1636.36,1213.33 1636.94,1213.33 1637.53,1213.33 1638.12,1213.33 1638.7,1213.33 1639.29,1213.33 1639.88,1213.33 1640.46,1213.33 1641.05,1213.33 1641.63,1213.33 1642.22,1213.33 1642.81,1213.33 1643.39,1213.33 1643.98,1213.33 1644.57,1213.33 1645.15,1213.33 1645.74,1213.33 1646.33,1213.33 1646.91,1213.33 1647.5,1213.33 1648.09,1213.33 1648.67,1213.33 1649.26,1213.33 1649.84,1213.33 1650.43,1213.33 1651.02,1213.33 1651.6,1213.33 1652.19,1213.33 1652.78,1213.33 1653.36,1213.33 1653.95,1213.33 1654.54,1213.33 1655.12,1213.33 1655.71,1213.33 1656.29,1213.33 1656.88,1213.33 1657.47,1213.33 1658.05,1213.33 1658.64,1213.33 1659.23,1213.33 1659.81,1213.33 1660.4,1213.33 1660.99,1213.33 1661.57,1213.33 1662.16,1213.33 1662.75,1213.33 1663.33,1213.33 1663.92,1213.33 1664.5,1213.33 1665.09,1213.33 1665.68,1213.33 1666.26,1213.33 1666.85,1213.33 1667.44,1213.33 1668.02,1213.33 1668.61,1213.33 1669.2,1213.33 1669.78,1213.33 1670.37,1213.33 1670.96,1213.33 1671.54,1213.33 1672.13,1213.33 1672.71,1213.33 1673.3,1213.33 1673.89,1213.33 1674.47,1213.33 1675.06,1213.33 1675.65,1213.33 1676.23,1213.33 1676.82,1213.33 1677.41,1213.33 1677.99,1213.33 1678.58,1213.33 1679.17,1213.33 1679.75,1213.33 1680.34,1213.33 1680.92,1213.33 1681.51,1213.33 1682.1,1213.33 1682.68,1213.33 1683.27,1213.33 1683.86,1213.33 1684.44,1213.33 1685.03,1213.33 1685.62,1213.33 1686.2,1213.33 1686.79,1213.33 1687.37,1213.33 1687.96,1213.33 1688.55,1213.33 1689.13,1213.33 1689.72,1213.33 1690.31,1213.33 1690.89,1213.33 1691.48,1213.33 1692.07,1213.33 1692.65,1213.33 1693.24,1213.33 1693.83,1213.33 1694.41,1213.33 1695,1213.33 1695.58,1213.33 1696.17,1213.33 1696.76,1213.33 1697.34,1213.33 1697.93,1213.33 1698.52,1213.33 1699.1,1213.33 1699.69,1213.33 1700.28,1213.33 1700.86,1213.33 1701.45,1213.33 1702.04,1213.33 1702.62,1213.33 1703.21,1213.33 1703.79,1213.33 1704.38,1213.33 1704.97,1213.33 1705.55,1213.33 1706.14,1213.33 1706.73,1213.33 1707.31,1213.33 1707.9,1213.33 1708.49,1213.33 1709.07,1213.33 1709.66,1213.33 1710.24,1213.33 1710.83,1213.33 1711.42,1213.33 1712,1213.33 1712.59,1213.33 1713.18,1213.33 1713.76,1213.33 1714.35,1213.33 1714.94,1213.33 1715.52,1213.33 1716.11,1213.33 1716.7,1213.33 1717.28,1213.33 1717.87,1213.33 1718.45,1213.33 1719.04,1213.33 1719.63,1213.33 1720.21,1213.33 1720.8,1213.33 1721.39,1213.33 1721.97,1213.33 1722.56,1213.33 1723.15,1213.33 1723.73,1213.33 1724.32,1213.33 1724.91,1213.33 1725.49,1213.33 1726.08,1213.33 1726.66,1213.33 1727.25,1213.33 1727.84,1213.33 1728.42,1213.33 1729.01,1213.33 1729.6,1213.33 1730.18,1213.33 1730.77,1213.33 1731.36,1213.33 1731.94,1213.33 1732.53,1213.33 1733.11,1213.33 1733.7,1213.33 1734.29,1213.33 1734.87,1213.33 1735.46,1213.33 1736.05,1213.33 1736.63,1213.33 1737.22,1213.33 1737.81,1213.33 1738.39,1213.33 1738.98,1213.33 1739.57,1213.33 1740.15,1213.33 1740.74,1213.33 1741.32,1213.33 1741.91,1213.33 1742.5,1213.33 1743.08,1213.33 1743.67,1213.33 1744.26,1213.33 1744.84,1213.33 1745.43,1213.33 1746.02,1213.33 1746.6,1213.33 1747.19,1213.33 1747.78,1213.33 1748.36,1213.33 1748.95,1213.33 1749.53,1213.33 1750.12,1213.33 1750.71,1213.33 1751.29,1213.33 1751.88,1213.33 1752.47,1213.33 1753.05,1213.33 1753.64,1213.33 1754.23,1213.33 1754.81,1213.33 1755.4,1213.33 1755.99,1213.33 1756.57,1213.33 1757.16,1213.33 1757.74,1213.33 1758.33,1213.33 1758.92,1213.33 1759.5,1213.33 1760.09,1213.33 1760.68,1213.33 1761.26,1213.33 1761.85,1213.33 1762.44,1213.33 1763.02,1213.33 1763.61,1213.33 1764.19,1213.33 1764.78,1213.33 1765.37,1213.33 1765.95,1213.33 1766.54,1213.33 1767.13,1213.33 1767.71,1213.33 1768.3,1213.33 1768.89,1213.33 1769.47,1213.33 1770.06,1213.33 1770.65,1213.33 1771.23,1213.33 1771.82,1213.33 1772.4,1213.33 1772.99,1213.33 1773.58,1213.33 1774.16,1213.33 1774.75,1213.33 1775.34,1213.33 1775.92,1213.33 1776.51,1213.33 1777.1,1213.33 1777.68,1213.33 1778.27,1213.33 1778.86,1213.33 1779.44,1213.33 1780.03,1213.33 1780.61,1213.33 1781.2,1213.33 1781.79,1213.33 1782.37,1213.33 1782.96,1213.33 1783.55,1213.33 1784.13,1213.33 1784.72,1213.33 1785.31,1213.33 1785.89,1213.33 1786.48,1213.33 1787.06,1213.33 1787.65,1213.33 1788.24,1213.33 1788.82,1213.33 1789.41,1213.33 1790,1213.33 1790.58,1213.33 1791.17,1213.33 1791.76,1213.33 1792.34,1213.33 1792.93,1213.33 1793.52,1213.33 1794.1,1213.33 1794.69,1213.33 1795.27,1213.33 1795.86,1213.33 1796.45,1213.33 1797.03,1213.33 1797.62,1213.33 1798.21,1213.33 1798.79,1213.33 1799.38,1213.33 1799.97,1213.33 1800.55,1213.33 1801.14,1213.33 1801.73,1213.33 1802.31,1213.33 1802.9,1213.33 1803.48,1213.33 1804.07,1213.33 1804.66,1213.33 1805.24,1213.33 1805.83,1213.33 1806.42,1213.33 1807,1213.33 1807.59,1213.33 1808.18,1213.33 1808.76,1213.33 1809.35,1213.33 1809.94,1213.33 1810.52,1213.33 1811.11,1213.33 1811.69,1213.33 1812.28,1213.33 1812.87,1213.33 1813.45,1213.33 1814.04,1213.33 1814.63,1213.33 1815.21,1213.33 1815.8,1213.33 1816.39,1213.33 1816.97,1213.33 1817.56,1213.33 1818.14,1213.33 1818.73,1213.33 1819.32,1213.33 1819.9,1213.33 1820.49,1213.33 1821.08,1213.33 1821.66,1213.33 1822.25,1213.33 1822.84,1213.33 1823.42,1213.33 1824.01,1213.33 1824.6,1213.33 1825.18,1213.33 1825.77,1213.33 1826.35,1213.33 1826.94,1213.33 1827.53,1213.33 1828.11,1213.33 1828.7,1213.33 1829.29,1213.33 1829.87,1213.33 1830.46,1213.33 1831.05,1213.33 1831.63,1213.33 1832.22,1213.33 1832.81,1213.33 1833.39,1213.33 1833.98,1213.33 1834.56,1213.33 1835.15,1213.33 1835.74,1213.33 1836.32,1213.33 1836.91,1213.33 1837.5,1213.33 1838.08,1213.33 1838.67,1213.33 1839.26,1213.33 1839.84,1213.33 1840.43,1213.33 1841.01,1213.33 1841.6,1213.33 1842.19,1213.33 1842.77,1213.33 1843.36,1213.33 1843.95,1213.33 1844.53,1213.33 1845.12,1213.33 1845.71,1213.33 1846.29,1213.33 1846.88,1213.33 1847.47,1213.33 1848.05,1213.33 1848.64,1213.33 1849.22,1213.33 1849.81,1213.33 1850.4,1213.33 1850.98,1213.33 1851.57,1213.33 1852.16,1213.33 1852.74,1213.33 1853.33,1213.33 1853.92,1213.33 1854.5,1213.33 1855.09,1213.33 1855.68,1213.33 1856.26,1213.33 1856.85,1213.33 1857.43,1213.33 1858.02,1213.33 1858.61,1213.33 1859.19,1213.33 1859.78,1213.33 1860.37,1213.33 1860.95,1213.33 1861.54,1213.33 1862.13,1213.33 1862.71,1213.33 1863.3,1213.33 1863.88,1213.33 1864.47,1213.33 1865.06,1213.33 1865.64,1213.33 1866.23,1213.33 1866.82,1213.33 1867.4,1213.33 1867.99,1213.33 1868.58,1213.33 1869.16,1213.33 1869.75,1213.33 1870.34,1213.33 1870.92,1213.33 1871.51,1213.33 1872.09,1213.33 1872.68,1213.33 1873.27,1213.33 1873.85,1213.33 1874.44,1213.33 1875.03,1213.33 1875.61,1213.33 1876.2,1213.33 1876.79,1213.33 1877.37,1213.33 1877.96,1213.33 1878.55,1213.33 1879.13,1213.33 1879.72,1213.33 1880.3,1213.33 1880.89,1213.33 1881.48,1213.33 1882.06,1213.33 1882.65,1213.33 1883.24,1213.33 1883.82,1213.33 1884.41,1213.33 1885,1213.33 1885.58,1213.33 1886.17,1213.33 1886.76,1213.33 1887.34,1213.33 1887.93,1213.33 1888.51,1213.33 1889.1,1213.33 1889.69,1213.33 1890.27,1213.33 1890.86,1213.33 1891.45,1213.33 1892.03,1213.33 1892.62,1213.33 1893.21,1213.33 1893.79,1213.33 1894.38,1213.33 1894.96,1213.33 1895.55,1213.33 1896.14,1213.33 1896.72,1213.33 1897.31,1213.33 1897.9,1213.33 1898.48,1213.33 1899.07,1213.33 1899.66,1213.33 1900.24,1213.33 1900.83,1213.33 1901.42,1213.33 1902,1213.33 1902.59,1213.33 1903.17,1213.33 1903.76,1213.33 1904.35,1213.33 1904.93,1213.33 1905.52,1213.33 1906.11,1213.33 1906.69,1213.33 1907.28,1213.33 1907.87,1213.33 1908.45,1213.33 1909.04,1213.33 1909.63,1213.33 1910.21,1213.33 1910.8,1213.33 1911.38,1213.33 1911.97,1213.33 1912.56,1213.33 1913.14,1213.33 1913.73,1213.33 1914.32,1213.33 1914.9,1213.33 1915.49,1213.33 1916.08,1213.33 1916.66,1213.33 1917.25,1213.33 1917.83,1213.33 1918.42,1213.33 1919.01,1213.33 1919.59,1213.33 1920.18,1213.33 1920.77,1213.33 1921.35,1213.33 1921.94,1213.33 1922.53,1213.33 1923.11,1213.33 1923.7,1213.33 1924.29,1213.33 1924.87,1213.33 1925.46,1213.33 1926.04,1213.33 1926.63,1213.33 1927.22,1213.33 1927.8,1213.33 1928.39,1213.33 1928.98,1213.33 1929.56,1213.33 1930.15,1213.33 1930.74,1213.33 1931.32,1213.33 1931.91,1213.33 1932.5,1213.33 1933.08,1213.33 1933.67,1213.33 1934.25,1213.33 1934.84,1213.33 1935.43,1213.33 1936.01,1213.33 1936.6,1213.33 1937.19,1213.33 1937.77,1213.33 1938.36,1213.33 1938.95,1213.33 1939.53,1213.33 1940.12,1213.33 1940.71,1213.33 1941.29,1213.33 1941.88,1213.33 1942.46,1213.33 1943.05,1213.33 1943.64,1213.33 1944.22,1213.33 1944.81,1213.33 1945.4,1213.33 1945.98,1213.33 1946.57,1213.33 1947.16,1213.33 1947.74,1213.33 1948.33,1213.33 1948.91,1213.33 1949.5,1213.33 1950.09,1213.33 1950.67,1213.33 1951.26,1213.33 1951.85,1213.33 1952.43,1213.33 1953.02,1213.33 1953.61,1213.33 1954.19,1213.33 1954.78,1213.33 1955.37,1213.33 1955.95,1213.33 1956.54,1213.33 1957.12,1213.33 1957.71,1213.33 1958.3,1213.33 1958.88,1213.33 1959.47,1213.33 1960.06,1213.33 1960.64,1213.33 1961.23,1213.33 1961.82,1213.33 1962.4,1213.33 1962.99,1213.33 1963.58,1213.33 1964.16,1213.33 1964.75,1213.33 1965.33,1213.33 1965.92,1213.33 1966.51,1213.33 1967.09,1213.33 1967.68,1213.33 1968.27,1213.33 1968.85,1213.33 1969.44,1213.33 1970.03,1213.33 1970.61,1213.33 1971.2,1213.33 1971.78,1213.33 1972.37,1213.33 1972.96,1213.33 1973.54,1213.33 1974.13,1213.33 1974.72,1213.33 1975.3,1213.33 1975.89,1213.33 1976.48,1213.33 1977.06,1213.33 1977.65,1213.33 1978.24,1213.33 1978.82,1213.33 1979.41,1213.33 1979.99,1213.33 1980.58,1213.33 1981.17,1213.33 1981.75,1213.33 1982.34,1213.33 1982.93,1213.33 1983.51,1213.33 1984.1,1213.33 1984.69,1213.33 1985.27,1213.33 1985.86,1213.33 1986.45,1213.33 1987.03,1213.33 1987.62,1213.33 1988.2,1213.33 1988.79,1213.33 1989.38,1213.33 1989.96,1213.33 1990.55,1213.33 1991.14,1213.33 1991.72,1213.33 1992.31,1213.33 1992.9,1213.33 1993.48,1213.33 1994.07,1213.33 1994.65,1213.33 1995.24,1213.33 1995.83,1213.33 1996.41,1213.33 1997,1213.33 1997.59,1213.33 1998.17,1213.33 1998.76,1213.33 1999.35,1213.33 1999.93,1213.33 2000.52,1213.33 2001.11,1213.33 2001.69,1213.33 2002.28,1213.33 2002.86,1213.33 2003.45,1213.33 2004.04,1213.33 2004.62,1213.33 2005.21,1213.33 2005.8,1213.33 2006.38,1213.33 2006.97,1213.33 2007.56,1213.33 2008.14,1213.33 2008.73,1213.33 2009.32,1213.33 2009.9,1213.33 2010.49,1213.33 2011.07,1213.33 2011.66,1213.33 2012.25,1213.33 2012.83,1213.33 2013.42,1213.33 2014.01,1213.33 2014.59,1213.33 2015.18,1213.33 2015.77,1213.33 2016.35,1213.33 2016.94,1213.33 2017.53,1213.33 2018.11,1213.33 2018.7,1213.33 2019.28,1213.33 2019.87,1213.33 2020.46,1213.33 2021.04,1213.33 2021.63,1213.33 2022.22,1213.33 2022.8,1213.33 2023.39,1213.33 2023.98,1213.33 2024.56,1213.33 2025.15,1213.33 2025.73,1213.33 2026.32,1213.33 2026.91,1213.33 2027.49,1213.33 2028.08,1213.33 2028.67,1213.33 2029.25,1213.33 2029.84,1213.33 2030.43,1213.33 2031.01,1213.33 2031.6,1213.33 2032.19,1213.33 2032.77,1213.33 2033.36,1213.33 2033.94,1213.33 2034.53,1213.33 2035.12,1213.33 2035.7,1213.33 2036.29,1213.33 2036.88,1213.33 2037.46,1213.33 2038.05,1213.33 2038.64,1213.33 2039.22,1213.33 2039.81,1213.33 2040.4,1213.33 2040.98,1213.33 2041.57,1213.33 2042.15,1213.33 2042.74,1213.33 2043.33,1213.33 2043.91,1213.33 2044.5,1213.33 2045.09,1213.33 2045.67,1213.33 2046.26,1213.33 2046.85,1213.33 2047.43,1213.33 2048.02,1213.33 2048.6,1213.33 2049.19,1213.33 2049.78,1213.33 2050.36,1213.33 2050.95,1213.33 2051.54,1213.33 2052.12,1213.33 2052.71,1213.33 2053.3,1213.33 2053.88,1213.33 2054.47,1213.33 2055.06,1213.33 2055.64,1213.33 2056.23,1213.33 2056.81,1213.33 2057.4,1213.33 2057.99,1213.33 2058.57,1213.33 2059.16,1213.33 2059.75,1213.33 2060.33,1213.33 2060.92,1213.33 2061.51,1213.33 2062.09,1213.33 2062.68,1213.33 2063.27,1213.33 2063.85,1213.33 2064.44,1213.33 2065.02,1213.33 2065.61,1213.33 2066.2,1213.33 2066.78,1213.33 2067.37,1213.33 2067.96,1213.33 2068.54,1213.33 2069.13,1213.33 2069.72,1213.33 2070.3,1213.33 2070.89,1213.33 2071.48,1213.33 2072.06,1213.33 2072.65,1213.33 2073.23,1213.33 2073.82,1213.33 2074.41,1213.33 2074.99,1213.33 2075.58,1213.33 2076.17,1213.33 2076.75,1213.33 2077.34,1213.33 2077.93,1213.33 2078.51,1213.33 2079.1,1213.33 2079.68,1213.33 2080.27,1213.33 2080.86,1213.33 2081.44,1213.33 2082.03,1213.33 2082.62,1213.33 2083.2,1213.33 2083.79,1213.33 2084.38,1213.33 2084.96,1213.33 2085.55,1213.33 2086.14,1213.33 2086.72,1213.33 2087.31,1213.33 2087.89,1213.33 2088.48,1213.33 2089.07,1213.33 2089.65,1213.33 2090.24,1213.33 2090.83,1213.33 2091.41,1213.33 2092,1213.33 2092.59,1213.33 2093.17,1213.33 2093.76,1213.33 2094.35,1213.33 2094.93,1213.33 2095.52,1213.33 2096.1,1213.33 2096.69,1213.33 2097.28,1213.33 2097.86,1213.33 2098.45,1213.33 2099.04,1213.33 2099.62,1213.33 2100.21,1213.33 2100.8,1213.33 2101.38,1213.33 2101.97,1213.33 2102.55,1213.33 2103.14,1213.33 2103.73,1213.33 2104.31,1213.33 2104.9,1213.33 2105.49,1213.33 2106.07,1213.33 2106.66,1213.33 2107.25,1213.33 2107.83,1213.33 2108.42,1213.33 2109.01,1213.33 2109.59,1213.33 2110.18,1213.33 2110.76,1213.33 2111.35,1213.33 2111.94,1213.33 2112.52,1213.33 2113.11,1213.33 2113.7,1213.33 2114.28,1213.33 2114.87,1213.33 2115.46,1213.33 2116.04,1213.33 2116.63,1213.33 2117.22,1213.33 2117.8,1213.33 2118.39,1213.33 2118.97,1213.33 2119.56,1213.33 2120.15,1213.33 2120.73,1213.33 2121.32,1213.33 2121.91,1213.33 2122.49,1213.33 2123.08,1213.33 2123.67,1213.33 2124.25,1213.33 2124.84,1213.33 2125.42,1213.33 2126.01,1213.33 2126.6,1213.33 2127.18,1213.33 2127.77,1213.33 2128.36,1213.33 2128.94,1213.33 2129.53,1213.33 2130.12,1213.33 2130.7,1213.33 2131.29,1213.33 2131.88,1213.33 2132.46,1213.33 2133.05,1213.33 2133.63,1213.33 2134.22,1213.33 2134.81,1213.33 2135.39,1213.33 2135.98,1213.33 2136.57,1213.33 2137.15,1213.33 2137.74,1213.33 2138.33,1213.33 2138.91,1213.33 2139.5,1213.33 2140.09,1213.33 2140.67,1213.33 2141.26,1213.33 2141.84,1213.33 2142.43,1213.33 2143.02,1213.33 2143.6,1213.33 2144.19,1213.33 2144.78,1213.33 2145.36,1213.33 2145.95,1213.33 2146.54,1213.33 2147.12,1213.33 2147.71,1213.33 2148.3,1213.33 2148.88,1213.33 2149.47,1213.33 2150.05,1213.33 2150.64,1213.33 2151.23,1213.33 2151.81,1213.33 2152.4,1213.33 2152.99,1213.33 2153.57,1213.33 2154.16,1213.33 2154.75,1213.33 2155.33,1213.33 2155.92,1213.33 2156.5,1213.33 2157.09,1213.33 2157.68,1213.33 2158.26,1213.33 \"/>\n<path clip-path=\"url(#clip052)\" d=\"M986.025 1213.09 L986.612 1213.09 L987.198 1213.09 L987.785 1213.09 L988.371 1213.09 L988.957 1213.09 L989.544 1213.09 L990.13 1213.09 L990.717 1213.09 L991.303 1213.09 L991.889 1213.09 L992.476 1213.09 L993.062 1213.09 L993.649 1213.09 L994.235 1213.09 L994.822 1213.09 L995.408 1213.09 L995.994 1213.09 L996.581 1213.09 L997.167 1213.09 L997.754 1213.09 L998.34 1213.09 L998.926 1213.09 L999.513 1213.09 L1000.1 1213.09 L1000.69 1213.09 L1001.27 1213.09 L1001.86 1213.09 L1002.44 1213.09 L1003.03 1213.09 L1003.62 1213.09 L1004.2 1213.09 L1004.79 1213.09 L1005.38 1213.09 L1005.96 1213.09 L1006.55 1213.09 L1007.14 1213.09 L1007.72 1213.09 L1008.31 1213.09 L1008.9 1213.09 L1009.48 1213.09 L1010.07 1213.09 L1010.65 1213.09 L1011.24 1213.09 L1011.83 1213.09 L1012.41 1213.09 L1013 1213.09 L1013.59 1213.09 L1014.17 1213.09 L1014.76 1213.09 L1015.35 1213.09 L1015.93 1213.09 L1016.52 1213.09 L1017.11 1213.09 L1017.69 1213.09 L1018.28 1213.09 L1018.86 1213.09 L1019.45 1213.09 L1020.04 1213.09 L1020.62 1213.09 L1021.21 1213.09 L1021.8 1213.09 L1022.38 1213.09 L1022.97 1213.09 L1023.56 1213.09 L1024.14 1213.09 L1024.73 1213.09 L1025.32 1213.09 L1025.9 1213.09 L1026.49 1213.09 L1027.07 1213.09 L1027.66 1213.09 L1028.25 1213.09 L1028.83 1213.09 L1029.42 1213.09 L1030.01 1213.09 L1030.59 1213.09 L1031.18 1213.09 L1031.77 1213.09 L1032.35 1213.09 L1032.94 1213.09 L1033.52 1213.09 L1034.11 1213.09 L1034.7 1213.09 L1035.28 1213.09 L1035.87 1213.09 L1036.46 1213.09 L1037.04 1213.09 L1037.63 1213.09 L1038.22 1213.09 L1038.8 1213.09 L1039.39 1213.09 L1039.98 1213.09 L1040.56 1213.09 L1041.15 1213.09 L1041.73 1213.09 L1042.32 1213.09 L1042.91 1213.09 L1043.49 1213.09 L1044.08 1213.09 L1044.67 1213.09 L1045.25 1213.09 L1045.84 1213.09 L1046.43 1213.09 L1047.01 1213.09 L1047.6 1213.09 L1048.19 1213.09 L1048.77 1213.09 L1049.36 1213.09 L1049.94 1213.09 L1050.53 1213.09 L1051.12 1213.09 L1051.7 1213.09 L1052.29 1213.09 L1052.88 1213.09 L1053.46 1213.09 L1054.05 1213.09 L1054.64 1213.09 L1055.22 1213.09 L1055.81 1213.09 L1056.39 1213.09 L1056.98 1213.09 L1057.57 1213.09 L1058.15 1213.09 L1058.74 1213.09 L1059.33 1213.09 L1059.91 1213.09 L1060.5 1213.09 L1061.09 1213.09 L1061.67 1213.09 L1062.26 1213.09 L1062.85 1213.09 L1063.43 1213.09 L1064.02 1213.09 L1064.6 1213.09 L1065.19 1213.09 L1065.78 1213.09 L1066.36 1213.09 L1066.95 1213.09 L1067.54 1213.09 L1068.12 1213.09 L1068.71 1213.09 L1069.3 1213.09 L1069.88 1213.09 L1070.47 1213.09 L1071.06 1213.09 L1071.64 1213.09 L1072.23 1213.09 L1072.81 1213.09 L1073.4 1213.09 L1073.99 1213.09 L1074.57 1213.09 L1075.16 1213.09 L1075.75 1213.09 L1076.33 1213.09 L1076.92 1213.09 L1077.51 1213.09 L1078.09 1213.09 L1078.68 1213.09 L1079.26 1213.09 L1079.85 1213.09 L1080.44 1213.09 L1081.02 1213.09 L1081.61 1213.09 L1082.2 1213.09 L1082.78 1213.09 L1083.37 1213.09 L1083.96 1213.09 L1084.54 1213.09 L1085.13 1213.09 L1085.72 1213.09 L1086.3 1213.09 L1086.89 1213.09 L1087.47 1213.09 L1088.06 1213.09 L1088.65 1213.09 L1089.23 1213.09 L1089.82 1213.09 L1090.41 1213.09 L1090.99 1213.09 L1091.58 1213.09 L1092.17 1213.09 L1092.75 1213.09 L1093.34 1213.09 L1093.93 1213.09 L1094.51 1213.09 L1095.1 1213.09 L1095.68 1213.09 L1096.27 1213.09 L1096.86 1213.09 L1097.44 1213.09 L1098.03 1213.09 L1098.62 1213.09 L1099.2 1213.09 L1099.79 1213.09 L1100.38 1213.09 L1100.96 1213.09 L1101.55 1213.09 L1102.14 1213.09 L1102.72 1213.09 L1103.31 1213.09 L1103.89 1213.09 L1104.48 1213.09 L1105.07 1213.09 L1105.65 1213.09 L1106.24 1213.09 L1106.83 1213.09 L1107.41 1213.09 L1108 1213.09 L1108.59 1213.09 L1109.17 1213.09 L1109.76 1213.09 L1110.34 1213.09 L1110.93 1213.09 L1111.52 1213.09 L1112.1 1213.09 L1112.69 1213.09 L1113.28 1213.09 L1113.86 1213.09 L1114.45 1213.09 L1115.04 1213.09 L1115.62 1213.09 L1116.21 1213.09 L1116.8 1213.09 L1117.38 1213.09 L1117.97 1213.09 L1118.55 1213.09 L1119.14 1213.09 L1119.73 1213.09 L1120.31 1213.09 L1120.9 1213.09 L1121.49 1213.09 L1122.07 1213.09 L1122.66 1213.09 L1123.25 1213.09 L1123.83 1213.09 L1124.42 1213.09 L1125.01 1213.09 L1125.59 1213.09 L1126.18 1213.09 L1126.76 1213.09 L1127.35 1213.09 L1127.94 1213.09 L1128.52 1213.09 L1129.11 1213.09 L1129.7 1213.09 L1130.28 1213.09 L1130.87 1213.09 L1131.46 1213.09 L1132.04 1213.09 L1132.63 1213.09 L1133.21 1213.09 L1133.8 1213.09 L1134.39 1213.09 L1134.97 1213.09 L1135.56 1213.09 L1136.15 1213.09 L1136.73 1213.09 L1137.32 1213.09 L1137.91 1213.09 L1138.49 1213.09 L1139.08 1213.09 L1139.67 1213.09 L1140.25 1213.09 L1140.84 1213.09 L1141.42 1213.09 L1142.01 1213.09 L1142.6 1213.09 L1143.18 1213.09 L1143.77 1213.09 L1144.36 1213.09 L1144.94 1213.09 L1145.53 1213.09 L1146.12 1213.09 L1146.7 1213.09 L1147.29 1213.09 L1147.88 1213.09 L1148.46 1213.09 L1149.05 1213.09 L1149.63 1213.09 L1150.22 1213.09 L1150.81 1213.09 L1151.39 1213.09 L1151.98 1213.09 L1152.57 1213.09 L1153.15 1213.09 L1153.74 1213.09 L1154.33 1213.09 L1154.91 1213.09 L1155.5 1213.09 L1156.09 1213.09 L1156.67 1213.09 L1157.26 1213.09 L1157.84 1213.09 L1158.43 1213.09 L1159.02 1213.09 L1159.6 1213.09 L1160.19 1213.09 L1160.78 1213.09 L1161.36 1213.09 L1161.95 1213.09 L1162.54 1213.09 L1163.12 1213.09 L1163.71 1213.09 L1164.29 1213.09 L1164.88 1213.09 L1165.47 1213.09 L1166.05 1213.09 L1166.64 1213.09 L1167.23 1213.09 L1167.81 1213.09 L1168.4 1213.09 L1168.99 1213.09 L1169.57 1213.09 L1170.16 1213.09 L1170.75 1213.09 L1171.33 1213.09 L1171.92 1213.09 L1172.5 1213.09 L1173.09 1213.09 L1173.68 1213.09 L1174.26 1213.09 L1174.85 1213.09 L1175.44 1213.09 L1176.02 1213.09 L1176.61 1213.09 L1177.2 1213.09 L1177.78 1213.09 L1178.37 1213.09 L1178.96 1213.09 L1179.54 1213.09 L1180.13 1213.09 L1180.71 1213.09 L1181.3 1213.09 L1181.89 1213.09 L1182.47 1213.09 L1183.06 1213.09 L1183.65 1213.09 L1184.23 1213.09 L1184.82 1213.09 L1185.41 1213.09 L1185.99 1213.09 L1186.58 1213.09 L1187.16 1213.09 L1187.75 1213.09 L1188.34 1213.09 L1188.92 1213.09 L1189.51 1213.09 L1190.1 1213.09 L1190.68 1213.09 L1191.27 1213.09 L1191.86 1213.09 L1192.44 1213.09 L1193.03 1213.09 L1193.62 1213.09 L1194.2 1213.09 L1194.79 1213.09 L1195.37 1213.09 L1195.96 1213.09 L1196.55 1213.09 L1197.13 1213.09 L1197.72 1213.09 L1198.31 1213.09 L1198.89 1213.09 L1199.48 1213.09 L1200.07 1213.09 L1200.65 1213.09 L1201.24 1213.09 L1201.83 1213.09 L1202.41 1213.09 L1203 1213.09 L1203.58 1213.09 L1204.17 1213.09 L1204.76 1213.09 L1205.34 1213.09 L1205.93 1213.09 L1206.52 1213.09 L1207.1 1213.09 L1207.69 1213.09 L1208.28 1213.09 L1208.86 1213.09 L1209.45 1213.09 L1210.03 1213.09 L1210.62 1213.09 L1211.21 1213.09 L1211.79 1213.09 L1212.38 1213.09 L1212.97 1213.09 L1213.55 1213.09 L1214.14 1213.09 L1214.73 1213.09 L1215.31 1213.09 L1215.9 1213.09 L1216.49 1213.09 L1217.07 1213.09 L1217.66 1213.09 L1218.24 1213.09 L1218.83 1213.09 L1219.42 1213.09 L1220 1213.09 L1220.59 1213.09 L1221.18 1213.09 L1221.76 1213.09 L1222.35 1213.09 L1222.94 1213.09 L1223.52 1213.09 L1224.11 1213.09 L1224.7 1213.09 L1225.28 1213.09 L1225.87 1213.09 L1226.45 1213.09 L1227.04 1213.09 L1227.63 1213.09 L1228.21 1213.09 L1228.8 1213.09 L1229.39 1213.09 L1229.97 1213.09 L1230.56 1213.09 L1231.15 1213.09 L1231.73 1213.09 L1232.32 1213.09 L1232.91 1213.09 L1233.49 1213.09 L1234.08 1213.09 L1234.66 1213.09 L1235.25 1213.09 L1235.84 1213.09 L1236.42 1213.09 L1237.01 1213.09 L1237.6 1213.09 L1238.18 1213.09 L1238.77 1213.09 L1239.36 1213.09 L1239.94 1213.09 L1240.53 1213.09 L1241.11 1213.09 L1241.7 1213.09 L1242.29 1213.09 L1242.87 1213.09 L1243.46 1213.09 L1244.05 1213.09 L1244.63 1213.09 L1245.22 1213.09 L1245.81 1213.09 L1246.39 1213.09 L1246.98 1213.09 L1247.57 1213.09 L1248.15 1213.09 L1248.74 1213.09 L1249.32 1213.09 L1249.91 1213.09 L1250.5 1213.09 L1251.08 1213.09 L1251.67 1213.09 L1252.26 1213.09 L1252.84 1213.09 L1253.43 1213.09 L1254.02 1213.09 L1254.6 1213.09 L1255.19 1213.09 L1255.78 1213.09 L1256.36 1213.09 L1256.95 1213.09 L1257.53 1213.09 L1258.12 1213.09 L1258.71 1213.09 L1259.29 1213.09 L1259.88 1213.09 L1260.47 1213.09 L1261.05 1213.09 L1261.64 1213.09 L1262.23 1213.09 L1262.81 1213.09 L1263.4 1213.09 L1263.98 1213.09 L1264.57 1213.09 L1265.16 1213.09 L1265.74 1213.09 L1266.33 1213.09 L1266.92 1213.09 L1267.5 1213.09 L1268.09 1213.09 L1268.68 1213.09 L1269.26 1213.09 L1269.85 1213.09 L1270.44 1213.09 L1271.02 1213.09 L1271.61 1213.09 L1272.19 1213.09 L1272.78 1213.09 L1273.37 1213.09 L1273.95 1213.09 L1274.54 1213.09 L1275.13 1213.09 L1275.71 1213.09 L1276.3 1213.09 L1276.89 1213.09 L1277.47 1213.09 L1278.06 1213.09 L1278.65 1213.09 L1279.23 1213.09 L1279.82 1213.09 L1280.4 1213.09 L1280.99 1213.09 L1281.58 1213.09 L1282.16 1213.09 L1282.75 1213.09 L1283.34 1213.09 L1283.92 1213.09 L1284.51 1213.09 L1285.1 1213.09 L1285.68 1213.09 L1286.27 1213.09 L1286.86 1213.09 L1287.44 1213.09 L1288.03 1213.09 L1288.61 1213.09 L1289.2 1213.09 L1289.79 1213.09 L1290.37 1213.09 L1290.96 1213.09 L1291.55 1213.09 L1292.13 1213.09 L1292.72 1213.09 L1293.31 1213.09 L1293.89 1213.09 L1294.48 1213.09 L1295.06 1213.09 L1295.65 1213.09 L1296.24 1213.09 L1296.82 1213.09 L1297.41 1213.09 L1298 1213.09 L1298.58 1213.09 L1299.17 1213.09 L1299.76 1213.09 L1300.34 1213.09 L1300.93 1213.09 L1301.52 1213.09 L1302.1 1213.09 L1302.69 1213.09 L1303.27 1213.09 L1303.86 1213.09 L1304.45 1213.09 L1305.03 1213.09 L1305.62 1213.09 L1306.21 1213.09 L1306.79 1213.09 L1307.38 1213.09 L1307.97 1213.09 L1308.55 1213.09 L1309.14 1213.09 L1309.73 1213.09 L1310.31 1213.09 L1310.9 1213.09 L1311.48 1213.09 L1312.07 1213.09 L1312.66 1213.09 L1313.24 1213.09 L1313.83 1213.09 L1314.42 1213.09 L1315 1213.09 L1315.59 1213.09 L1316.18 1213.09 L1316.76 1213.09 L1317.35 1213.09 L1317.93 1213.09 L1318.52 1213.09 L1319.11 1213.09 L1319.69 1213.09 L1320.28 1213.09 L1320.87 1213.09 L1321.45 1213.09 L1322.04 1213.09 L1322.63 1213.09 L1323.21 1213.09 L1323.8 1213.09 L1324.39 1213.09 L1324.97 1213.09 L1325.56 1213.09 L1326.14 1213.09 L1326.73 1213.09 L1327.32 1213.09 L1327.9 1213.09 L1328.49 1213.09 L1329.08 1213.09 L1329.66 1213.09 L1330.25 1213.09 L1330.84 1213.09 L1331.42 1213.09 L1332.01 1213.09 L1332.6 1213.09 L1333.18 1213.09 L1333.77 1213.09 L1334.35 1213.09 L1334.94 1213.09 L1335.53 1213.09 L1336.11 1213.09 L1336.7 1213.09 L1337.29 1213.09 L1337.87 1213.09 L1338.46 1213.09 L1339.05 1213.09 L1339.63 1213.09 L1340.22 1213.09 L1340.8 1213.09 L1341.39 1213.09 L1341.98 1213.09 L1342.56 1213.09 L1343.15 1213.09 L1343.74 1213.09 L1344.32 1213.09 L1344.91 1213.09 L1345.5 1213.09 L1346.08 1213.09 L1346.67 1213.09 L1347.26 1213.09 L1347.84 1213.09 L1348.43 1213.09 L1349.01 1213.09 L1349.6 1213.09 L1350.19 1213.09 L1350.77 1213.09 L1351.36 1213.09 L1351.95 1213.09 L1352.53 1213.09 L1353.12 1213.09 L1353.71 1213.09 L1354.29 1213.09 L1354.88 1213.09 L1355.47 1213.09 L1356.05 1213.09 L1356.64 1213.09 L1357.22 1213.09 L1357.81 1213.09 L1358.4 1213.09 L1358.98 1213.09 L1359.57 1213.09 L1360.16 1213.09 L1360.74 1213.09 L1361.33 1213.09 L1361.92 1213.09 L1362.5 1213.09 L1363.09 1213.09 L1363.68 1213.09 L1364.26 1213.09 L1364.85 1213.09 L1365.43 1213.09 L1366.02 1213.09 L1366.61 1213.09 L1367.19 1213.09 L1367.78 1213.09 L1368.37 1213.09 L1368.95 1213.09 L1369.54 1213.09 L1370.13 1213.09 L1370.71 1213.09 L1371.3 1213.09 L1371.88 1213.09 L1372.47 1213.09 L1373.06 1213.09 L1373.64 1213.09 L1374.23 1213.09 L1374.82 1213.09 L1375.4 1213.09 L1375.99 1213.09 L1376.58 1213.09 L1377.16 1213.09 L1377.75 1213.09 L1378.34 1213.09 L1378.92 1213.09 L1379.51 1213.09 L1380.09 1213.09 L1380.68 1213.09 L1381.27 1213.09 L1381.85 1213.09 L1382.44 1213.09 L1383.03 1213.09 L1383.61 1213.09 L1384.2 1213.09 L1384.79 1213.09 L1385.37 1213.09 L1385.96 1213.09 L1386.55 1213.09 L1387.13 1213.09 L1387.72 1213.09 L1388.3 1213.09 L1388.89 1213.09 L1389.48 1213.09 L1390.06 1213.09 L1390.65 1213.09 L1391.24 1213.09 L1391.82 1213.09 L1392.41 1213.09 L1393 1213.09 L1393.58 1213.09 L1394.17 1213.09 L1394.75 1213.09 L1395.34 1213.09 L1395.93 1213.09 L1396.51 1213.09 L1397.1 1213.09 L1397.69 1213.09 L1398.27 1213.09 L1398.86 1213.09 L1399.45 1213.09 L1400.03 1213.09 L1400.62 1213.09 L1401.21 1213.09 L1401.79 1213.09 L1402.38 1213.09 L1402.96 1213.09 L1403.55 1213.09 L1404.14 1213.09 L1404.72 1213.09 L1405.31 1213.09 L1405.9 1213.09 L1406.48 1213.09 L1407.07 1213.09 L1407.66 1213.09 L1408.24 1213.09 L1408.83 1213.09 L1409.42 1213.09 L1410 1213.09 L1410.59 1213.09 L1411.17 1213.09 L1411.76 1213.09 L1412.35 1213.09 L1412.93 1213.09 L1413.52 1213.09 L1414.11 1213.09 L1414.69 1213.09 L1415.28 1213.09 L1415.87 1213.09 L1416.45 1213.09 L1417.04 1213.09 L1417.63 1213.09 L1418.21 1213.09 L1418.8 1213.09 L1419.38 1213.09 L1419.97 1213.09 L1420.56 1213.09 L1421.14 1213.09 L1421.73 1213.09 L1422.32 1213.09 L1422.9 1213.09 L1423.49 1213.09 L1424.08 1213.09 L1424.66 1213.09 L1425.25 1213.09 L1425.83 1213.09 L1426.42 1213.09 L1427.01 1213.09 L1427.59 1213.09 L1428.18 1213.09 L1428.77 1213.09 L1429.35 1213.09 L1429.94 1213.09 L1430.53 1213.09 L1431.11 1213.09 L1431.7 1213.09 L1432.29 1213.09 L1432.87 1213.09 L1433.46 1213.09 L1434.04 1213.09 L1434.63 1213.09 L1435.22 1213.09 L1435.8 1213.09 L1436.39 1213.09 L1436.98 1213.09 L1437.56 1213.09 L1438.15 1213.09 L1438.74 1213.09 L1439.32 1213.09 L1439.91 1213.09 L1440.5 1213.09 L1441.08 1213.09 L1441.67 1213.09 L1442.25 1213.09 L1442.84 1213.09 L1443.43 1213.09 L1444.01 1213.09 L1444.6 1213.09 L1445.19 1213.09 L1445.77 1213.09 L1446.36 1213.09 L1446.95 1213.09 L1447.53 1213.09 L1448.12 1213.09 L1448.7 1213.09 L1449.29 1213.09 L1449.88 1213.09 L1450.46 1213.09 L1451.05 1213.09 L1451.64 1213.09 L1452.22 1213.09 L1452.81 1213.09 L1453.4 1213.09 L1453.98 1213.09 L1454.57 1213.09 L1455.16 1213.09 L1455.74 1213.09 L1456.33 1213.09 L1456.91 1213.09 L1457.5 1213.09 L1458.09 1213.09 L1458.67 1213.09 L1459.26 1213.09 L1459.85 1213.09 L1460.43 1213.09 L1461.02 1213.09 L1461.61 1213.09 L1462.19 1213.09 L1462.78 1213.09 L1463.37 1213.09 L1463.95 1213.09 L1464.54 1213.09 L1465.12 1213.09 L1465.71 1213.09 L1466.3 1213.09 L1466.88 1213.09 L1467.47 1213.09 L1468.06 1213.09 L1468.64 1213.09 L1469.23 1213.09 L1469.82 1213.09 L1470.4 1213.09 L1470.99 1213.09 L1471.57 1213.09 L1472.16 1213.09 L1472.75 1213.09 L1473.33 1213.09 L1473.92 1213.09 L1474.51 1213.09 L1475.09 1213.09 L1475.68 1213.09 L1476.27 1213.09 L1476.85 1213.09 L1477.44 1213.09 L1478.03 1213.09 L1478.61 1213.09 L1479.2 1213.09 L1479.78 1213.09 L1480.37 1213.09 L1480.96 1213.09 L1481.54 1213.09 L1482.13 1213.09 L1482.72 1213.09 L1483.3 1213.09 L1483.89 1213.09 L1484.48 1213.09 L1485.06 1213.09 L1485.65 1213.09 L1486.24 1213.09 L1486.82 1213.09 L1487.41 1213.09 L1487.99 1213.09 L1488.58 1213.09 L1489.17 1213.09 L1489.75 1213.09 L1490.34 1213.09 L1490.93 1213.09 L1491.51 1213.09 L1492.1 1213.09 L1492.69 1213.09 L1493.27 1213.09 L1493.86 1213.09 L1494.45 1213.09 L1495.03 1213.09 L1495.62 1213.09 L1496.2 1213.09 L1496.79 1213.09 L1497.38 1213.09 L1497.96 1213.09 L1498.55 1213.09 L1499.14 1213.09 L1499.72 1213.09 L1500.31 1213.09 L1500.9 1213.09 L1501.48 1213.09 L1502.07 1213.09 L1502.65 1213.09 L1503.24 1213.09 L1503.83 1213.09 L1504.41 1213.09 L1505 1213.09 L1505.59 1213.09 L1506.17 1213.09 L1506.76 1213.09 L1507.35 1213.09 L1507.93 1213.09 L1508.52 1213.09 L1509.11 1213.09 L1509.69 1213.09 L1510.28 1213.09 L1510.86 1213.09 L1511.45 1213.09 L1512.04 1213.09 L1512.62 1213.09 L1513.21 1213.09 L1513.8 1213.09 L1514.38 1213.09 L1514.97 1213.09 L1515.56 1213.09 L1516.14 1213.09 L1516.73 1213.09 L1517.32 1213.09 L1517.9 1213.09 L1518.49 1213.09 L1519.07 1213.09 L1519.66 1213.09 L1520.25 1213.09 L1520.83 1213.09 L1521.42 1213.09 L1522.01 1213.09 L1522.59 1213.09 L1523.18 1213.09 L1523.77 1213.09 L1524.35 1213.09 L1524.94 1213.09 L1525.52 1213.09 L1526.11 1213.09 L1526.7 1213.09 L1527.28 1213.09 L1527.87 1213.09 L1528.46 1213.09 L1529.04 1213.09 L1529.63 1213.09 L1530.22 1213.09 L1530.8 1213.09 L1531.39 1213.09 L1531.98 1213.09 L1532.56 1213.09 L1533.15 1213.09 L1533.73 1213.09 L1534.32 1213.09 L1534.91 1213.09 L1535.49 1213.09 L1536.08 1213.09 L1536.67 1213.09 L1537.25 1213.09 L1537.84 1213.09 L1538.43 1213.09 L1539.01 1213.09 L1539.6 1213.09 L1540.19 1213.09 L1540.77 1213.09 L1541.36 1213.09 L1541.94 1213.09 L1542.53 1213.09 L1543.12 1213.09 L1543.7 1213.09 L1544.29 1213.09 L1544.88 1213.09 L1545.46 1213.09 L1546.05 1213.09 L1546.64 1213.09 L1547.22 1213.09 L1547.81 1213.09 L1548.4 1213.09 L1548.98 1213.09 L1549.57 1213.09 L1550.15 1213.09 L1550.74 1213.09 L1551.33 1213.09 L1551.91 1213.09 L1552.5 1213.09 L1553.09 1213.09 L1553.67 1213.09 L1554.26 1213.09 L1554.85 1213.09 L1555.43 1213.09 L1556.02 1213.09 L1556.6 1213.09 L1557.19 1213.09 L1557.78 1213.09 L1558.36 1213.09 L1558.95 1213.09 L1559.54 1213.09 L1560.12 1213.09 L1560.71 1213.09 L1561.3 1213.09 L1561.88 1213.09 L1562.47 1213.09 L1563.06 1213.09 L1563.64 1213.09 L1564.23 1213.09 L1564.81 1213.09 L1565.4 1213.09 L1565.99 1213.09 L1566.57 1213.09 L1567.16 1213.09 L1567.75 1213.09 L1568.33 1213.09 L1568.92 1213.09 L1569.51 1213.09 L1570.09 1213.09 L1570.68 1213.09 L1571.27 1213.09 L1571.85 1213.09 L1572.44 1213.09 L1573.02 1213.09 L1573.61 1213.09 L1574.2 1213.09 L1574.78 1213.09 L1575.37 1213.09 L1575.96 1213.09 L1576.54 1213.09 L1577.13 1213.09 L1577.72 1213.09 L1578.3 1213.09 L1578.89 1213.09 L1579.47 1213.09 L1580.06 1213.09 L1580.65 1213.09 L1581.23 1213.09 L1581.82 1213.09 L1582.41 1213.09 L1582.99 1213.09 L1583.58 1213.09 L1584.17 1213.09 L1584.75 1213.09 L1585.34 1213.09 L1585.93 1213.09 L1586.51 1213.09 L1587.1 1213.09 L1587.68 1213.09 L1588.27 1213.09 L1588.86 1213.09 L1589.44 1213.09 L1590.03 1213.09 L1590.62 1213.09 L1591.2 1213.09 L1591.79 1213.09 L1592.38 1213.09 L1592.96 1213.09 L1593.55 1213.09 L1594.14 1213.09 L1594.72 1213.09 L1595.31 1213.09 L1595.89 1213.09 L1596.48 1213.09 L1597.07 1213.09 L1597.65 1213.09 L1598.24 1213.09 L1598.83 1213.09 L1599.41 1213.09 L1600 1213.09 L1600.59 1213.09 L1601.17 1213.09 L1601.76 1213.09 L1602.34 1213.09 L1602.93 1213.09 L1603.52 1213.09 L1604.1 1213.09 L1604.69 1213.09 L1605.28 1213.09 L1605.86 1213.09 L1606.45 1213.09 L1607.04 1213.09 L1607.62 1213.09 L1608.21 1213.09 L1608.8 1213.09 L1609.38 1213.09 L1609.97 1213.09 L1610.55 1213.09 L1611.14 1213.09 L1611.73 1213.09 L1612.31 1213.09 L1612.9 1213.09 L1613.49 1213.09 L1614.07 1213.09 L1614.66 1213.09 L1615.25 1213.09 L1615.83 1213.09 L1616.42 1213.09 L1617.01 1213.09 L1617.59 1213.09 L1618.18 1213.09 L1618.76 1213.09 L1619.35 1213.09 L1619.94 1213.09 L1620.52 1213.09 L1621.11 1213.09 L1621.7 1213.09 L1622.28 1213.09 L1622.87 1213.09 L1623.46 1213.09 L1624.04 1213.09 L1624.63 1213.09 L1625.22 1213.09 L1625.8 1213.09 L1626.39 1213.09 L1626.97 1213.09 L1627.56 1213.09 L1628.15 1213.09 L1628.73 1213.09 L1629.32 1213.09 L1629.91 1213.09 L1630.49 1213.09 L1631.08 1213.09 L1631.67 1213.09 L1632.25 1213.09 L1632.84 1213.09 L1633.42 1213.09 L1634.01 1213.09 L1634.6 1213.09 L1635.18 1213.09 L1635.77 1213.09 L1636.36 1213.09 L1636.94 1213.09 L1637.53 1213.09 L1638.12 1213.09 L1638.7 1213.09 L1639.29 1213.09 L1639.88 1213.09 L1640.46 1213.09 L1641.05 1213.09 L1641.63 1213.09 L1642.22 1213.09 L1642.81 1213.09 L1643.39 1213.09 L1643.98 1213.09 L1644.57 1213.09 L1645.15 1213.09 L1645.74 1213.09 L1646.33 1213.09 L1646.91 1213.09 L1647.5 1213.09 L1648.09 1213.09 L1648.67 1213.09 L1649.26 1213.09 L1649.84 1213.09 L1650.43 1213.09 L1651.02 1213.09 L1651.6 1213.09 L1652.19 1213.09 L1652.78 1213.09 L1653.36 1213.09 L1653.95 1213.09 L1654.54 1213.09 L1655.12 1213.09 L1655.71 1213.09 L1656.29 1213.09 L1656.88 1213.09 L1657.47 1213.09 L1658.05 1213.09 L1658.64 1213.09 L1659.23 1213.09 L1659.81 1213.09 L1660.4 1213.09 L1660.99 1213.09 L1661.57 1213.09 L1662.16 1213.09 L1662.75 1213.09 L1663.33 1213.09 L1663.92 1213.09 L1664.5 1213.09 L1665.09 1213.09 L1665.68 1213.09 L1666.26 1213.09 L1666.85 1213.09 L1667.44 1213.09 L1668.02 1213.09 L1668.61 1213.09 L1669.2 1213.09 L1669.78 1213.09 L1670.37 1213.09 L1670.96 1213.09 L1671.54 1213.09 L1672.13 1213.09 L1672.71 1213.09 L1673.3 1213.09 L1673.89 1213.09 L1674.47 1213.09 L1675.06 1213.09 L1675.65 1213.09 L1676.23 1213.09 L1676.82 1213.09 L1677.41 1213.09 L1677.99 1213.09 L1678.58 1213.09 L1679.17 1213.09 L1679.75 1213.09 L1680.34 1213.09 L1680.92 1213.09 L1681.51 1213.09 L1682.1 1213.09 L1682.68 1213.09 L1683.27 1213.09 L1683.86 1213.09 L1684.44 1213.09 L1685.03 1213.09 L1685.62 1213.09 L1686.2 1213.09 L1686.79 1213.09 L1687.37 1213.09 L1687.96 1213.09 L1688.55 1213.09 L1689.13 1213.09 L1689.72 1213.09 L1690.31 1213.09 L1690.89 1213.09 L1691.48 1213.09 L1692.07 1213.09 L1692.65 1213.09 L1693.24 1213.09 L1693.83 1213.09 L1694.41 1213.09 L1695 1213.09 L1695.58 1213.09 L1696.17 1213.09 L1696.76 1213.09 L1697.34 1213.09 L1697.93 1213.09 L1698.52 1213.09 L1699.1 1213.09 L1699.69 1213.09 L1700.28 1213.09 L1700.86 1213.09 L1701.45 1213.09 L1702.04 1213.09 L1702.62 1213.09 L1703.21 1213.09 L1703.79 1213.09 L1704.38 1213.09 L1704.97 1213.09 L1705.55 1213.09 L1706.14 1213.09 L1706.73 1213.09 L1707.31 1213.09 L1707.9 1213.09 L1708.49 1213.09 L1709.07 1213.09 L1709.66 1213.09 L1710.24 1213.09 L1710.83 1213.09 L1711.42 1213.09 L1712 1213.09 L1712.59 1213.09 L1713.18 1213.09 L1713.76 1213.09 L1714.35 1213.09 L1714.94 1213.09 L1715.52 1213.09 L1716.11 1213.09 L1716.7 1213.09 L1717.28 1213.09 L1717.87 1213.09 L1718.45 1213.09 L1719.04 1213.09 L1719.63 1213.09 L1720.21 1213.09 L1720.8 1213.09 L1721.39 1213.09 L1721.97 1213.09 L1722.56 1213.09 L1723.15 1213.09 L1723.73 1213.09 L1724.32 1213.09 L1724.91 1213.09 L1725.49 1213.09 L1726.08 1213.09 L1726.66 1213.09 L1727.25 1213.09 L1727.84 1213.09 L1728.42 1213.09 L1729.01 1213.09 L1729.6 1213.09 L1730.18 1213.09 L1730.77 1213.09 L1731.36 1213.09 L1731.94 1213.09 L1732.53 1213.09 L1733.11 1213.09 L1733.7 1213.09 L1734.29 1213.09 L1734.87 1213.09 L1735.46 1213.09 L1736.05 1213.09 L1736.63 1213.09 L1737.22 1213.09 L1737.81 1213.09 L1738.39 1213.09 L1738.98 1213.09 L1739.57 1213.09 L1740.15 1213.09 L1740.74 1213.09 L1741.32 1213.09 L1741.91 1213.09 L1742.5 1213.09 L1743.08 1213.09 L1743.67 1213.09 L1744.26 1213.09 L1744.84 1213.09 L1745.43 1213.09 L1746.02 1213.09 L1746.6 1213.09 L1747.19 1213.09 L1747.78 1213.09 L1748.36 1213.09 L1748.95 1213.09 L1749.53 1213.09 L1750.12 1213.09 L1750.71 1213.09 L1751.29 1213.09 L1751.88 1213.09 L1752.47 1213.09 L1753.05 1213.09 L1753.64 1213.09 L1754.23 1213.09 L1754.81 1213.09 L1755.4 1213.09 L1755.99 1213.09 L1756.57 1213.09 L1757.16 1213.09 L1757.74 1213.09 L1758.33 1213.09 L1758.92 1213.09 L1759.5 1213.09 L1760.09 1213.09 L1760.68 1213.09 L1761.26 1213.09 L1761.85 1213.09 L1762.44 1213.09 L1763.02 1213.09 L1763.61 1213.09 L1764.19 1213.09 L1764.78 1213.09 L1765.37 1213.09 L1765.95 1213.09 L1766.54 1213.09 L1767.13 1213.09 L1767.71 1213.09 L1768.3 1213.09 L1768.89 1213.09 L1769.47 1213.09 L1770.06 1213.09 L1770.65 1213.09 L1771.23 1213.09 L1771.82 1213.09 L1772.4 1213.09 L1772.99 1213.09 L1773.58 1213.09 L1774.16 1213.09 L1774.75 1213.09 L1775.34 1213.09 L1775.92 1213.09 L1776.51 1213.09 L1777.1 1213.09 L1777.68 1213.09 L1778.27 1213.09 L1778.86 1213.09 L1779.44 1213.09 L1780.03 1213.09 L1780.61 1213.09 L1781.2 1213.09 L1781.79 1213.09 L1782.37 1213.09 L1782.96 1213.09 L1783.55 1213.09 L1784.13 1213.09 L1784.72 1213.09 L1785.31 1213.09 L1785.89 1213.09 L1786.48 1213.09 L1787.06 1213.09 L1787.65 1213.09 L1788.24 1213.09 L1788.82 1213.09 L1789.41 1213.09 L1790 1213.09 L1790.58 1213.09 L1791.17 1213.09 L1791.76 1213.09 L1792.34 1213.09 L1792.93 1213.09 L1793.52 1213.09 L1794.1 1213.09 L1794.69 1213.09 L1795.27 1213.09 L1795.86 1213.09 L1796.45 1213.09 L1797.03 1213.09 L1797.62 1213.09 L1798.21 1213.09 L1798.79 1213.09 L1799.38 1213.09 L1799.97 1213.09 L1800.55 1213.09 L1801.14 1213.09 L1801.73 1213.09 L1802.31 1213.09 L1802.9 1213.09 L1803.48 1213.09 L1804.07 1213.09 L1804.66 1213.09 L1805.24 1213.09 L1805.83 1213.09 L1806.42 1213.09 L1807 1213.09 L1807.59 1213.09 L1808.18 1213.09 L1808.76 1213.09 L1809.35 1213.09 L1809.94 1213.09 L1810.52 1213.09 L1811.11 1213.09 L1811.69 1213.09 L1812.28 1213.09 L1812.87 1213.09 L1813.45 1213.09 L1814.04 1213.09 L1814.63 1213.09 L1815.21 1213.09 L1815.8 1213.09 L1816.39 1213.09 L1816.97 1213.09 L1817.56 1213.09 L1818.14 1213.09 L1818.73 1213.09 L1819.32 1213.09 L1819.9 1213.09 L1820.49 1213.09 L1821.08 1213.09 L1821.66 1213.09 L1822.25 1213.09 L1822.84 1213.09 L1823.42 1213.09 L1824.01 1213.09 L1824.6 1213.09 L1825.18 1213.09 L1825.77 1213.09 L1826.35 1213.09 L1826.94 1213.09 L1827.53 1213.09 L1828.11 1213.09 L1828.7 1213.09 L1829.29 1213.09 L1829.87 1213.09 L1830.46 1213.09 L1831.05 1213.09 L1831.63 1213.09 L1832.22 1213.09 L1832.81 1213.09 L1833.39 1213.09 L1833.98 1213.09 L1834.56 1213.09 L1835.15 1213.09 L1835.74 1213.09 L1836.32 1213.09 L1836.91 1213.09 L1837.5 1213.09 L1838.08 1213.09 L1838.67 1213.09 L1839.26 1213.09 L1839.84 1213.09 L1840.43 1213.09 L1841.01 1213.09 L1841.6 1213.09 L1842.19 1213.09 L1842.77 1213.09 L1843.36 1213.09 L1843.95 1213.09 L1844.53 1213.09 L1845.12 1213.09 L1845.71 1213.09 L1846.29 1213.09 L1846.88 1213.09 L1847.47 1213.09 L1848.05 1213.09 L1848.64 1213.09 L1849.22 1213.09 L1849.81 1213.09 L1850.4 1213.09 L1850.98 1213.09 L1851.57 1213.09 L1852.16 1213.09 L1852.74 1213.09 L1853.33 1213.09 L1853.92 1213.09 L1854.5 1213.09 L1855.09 1213.09 L1855.68 1213.09 L1856.26 1213.09 L1856.85 1213.09 L1857.43 1213.09 L1858.02 1213.09 L1858.61 1213.09 L1859.19 1213.09 L1859.78 1213.09 L1860.37 1213.09 L1860.95 1213.09 L1861.54 1213.09 L1862.13 1213.09 L1862.71 1213.09 L1863.3 1213.09 L1863.88 1213.09 L1864.47 1213.09 L1865.06 1213.09 L1865.64 1213.09 L1866.23 1213.09 L1866.82 1213.09 L1867.4 1213.09 L1867.99 1213.09 L1868.58 1213.09 L1869.16 1213.09 L1869.75 1213.09 L1870.34 1213.09 L1870.92 1213.09 L1871.51 1213.09 L1872.09 1213.09 L1872.68 1213.09 L1873.27 1213.09 L1873.85 1213.09 L1874.44 1213.09 L1875.03 1213.09 L1875.61 1213.09 L1876.2 1213.09 L1876.79 1213.09 L1877.37 1213.09 L1877.96 1213.09 L1878.55 1213.09 L1879.13 1213.09 L1879.72 1213.09 L1880.3 1213.09 L1880.89 1213.09 L1881.48 1213.09 L1882.06 1213.09 L1882.65 1213.09 L1883.24 1213.09 L1883.82 1213.09 L1884.41 1213.09 L1885 1213.09 L1885.58 1213.09 L1886.17 1213.09 L1886.76 1213.09 L1887.34 1213.09 L1887.93 1213.09 L1888.51 1213.09 L1889.1 1213.09 L1889.69 1213.09 L1890.27 1213.09 L1890.86 1213.09 L1891.45 1213.09 L1892.03 1213.09 L1892.62 1213.09 L1893.21 1213.09 L1893.79 1213.09 L1894.38 1213.09 L1894.96 1213.09 L1895.55 1213.09 L1896.14 1213.09 L1896.72 1213.09 L1897.31 1213.09 L1897.9 1213.09 L1898.48 1213.09 L1899.07 1213.09 L1899.66 1213.09 L1900.24 1213.09 L1900.83 1213.09 L1901.42 1213.09 L1902 1213.09 L1902.59 1213.09 L1903.17 1213.09 L1903.76 1213.09 L1904.35 1213.09 L1904.93 1213.09 L1905.52 1213.09 L1906.11 1213.09 L1906.69 1213.09 L1907.28 1213.09 L1907.87 1213.09 L1908.45 1213.09 L1909.04 1213.09 L1909.63 1213.09 L1910.21 1213.09 L1910.8 1213.09 L1911.38 1213.09 L1911.97 1213.09 L1912.56 1213.09 L1913.14 1213.09 L1913.73 1213.09 L1914.32 1213.09 L1914.9 1213.09 L1915.49 1213.09 L1916.08 1213.09 L1916.66 1213.09 L1917.25 1213.09 L1917.83 1213.09 L1918.42 1213.09 L1919.01 1213.09 L1919.59 1213.09 L1920.18 1213.09 L1920.77 1213.09 L1921.35 1213.09 L1921.94 1213.09 L1922.53 1213.09 L1923.11 1213.09 L1923.7 1213.09 L1924.29 1213.09 L1924.87 1213.09 L1925.46 1213.09 L1926.04 1213.09 L1926.63 1213.09 L1927.22 1213.09 L1927.8 1213.09 L1928.39 1213.09 L1928.98 1213.09 L1929.56 1213.09 L1930.15 1213.09 L1930.74 1213.09 L1931.32 1213.09 L1931.91 1213.09 L1932.5 1213.09 L1933.08 1213.09 L1933.67 1213.09 L1934.25 1213.09 L1934.84 1213.09 L1935.43 1213.09 L1936.01 1213.09 L1936.6 1213.09 L1937.19 1213.09 L1937.77 1213.09 L1938.36 1213.09 L1938.95 1213.09 L1939.53 1213.09 L1940.12 1213.09 L1940.71 1213.09 L1941.29 1213.09 L1941.88 1213.09 L1942.46 1213.09 L1943.05 1213.09 L1943.64 1213.09 L1944.22 1213.09 L1944.81 1213.09 L1945.4 1213.09 L1945.98 1213.09 L1946.57 1213.09 L1947.16 1213.09 L1947.74 1213.09 L1948.33 1213.09 L1948.91 1213.09 L1949.5 1213.09 L1950.09 1213.09 L1950.67 1213.09 L1951.26 1213.09 L1951.85 1213.09 L1952.43 1213.09 L1953.02 1213.09 L1953.61 1213.09 L1954.19 1213.09 L1954.78 1213.09 L1955.37 1213.09 L1955.95 1213.09 L1956.54 1213.09 L1957.12 1213.09 L1957.71 1213.09 L1958.3 1213.09 L1958.88 1213.09 L1959.47 1213.09 L1960.06 1213.09 L1960.64 1213.09 L1961.23 1213.09 L1961.82 1213.09 L1962.4 1213.09 L1962.99 1213.09 L1963.58 1213.09 L1964.16 1213.09 L1964.75 1213.09 L1965.33 1213.09 L1965.92 1213.09 L1966.51 1213.09 L1967.09 1213.09 L1967.68 1213.09 L1968.27 1213.09 L1968.85 1213.09 L1969.44 1213.09 L1970.03 1213.09 L1970.61 1213.09 L1971.2 1213.09 L1971.78 1213.09 L1972.37 1213.09 L1972.96 1213.09 L1973.54 1213.09 L1974.13 1213.09 L1974.72 1213.09 L1975.3 1213.09 L1975.89 1213.09 L1976.48 1213.09 L1977.06 1213.09 L1977.65 1213.09 L1978.24 1213.09 L1978.82 1213.09 L1979.41 1213.09 L1979.99 1213.09 L1980.58 1213.09 L1981.17 1213.09 L1981.75 1213.09 L1982.34 1213.09 L1982.93 1213.09 L1983.51 1213.09 L1984.1 1213.09 L1984.69 1213.09 L1985.27 1213.09 L1985.86 1213.09 L1986.45 1213.09 L1987.03 1213.09 L1987.62 1213.09 L1988.2 1213.09 L1988.79 1213.09 L1989.38 1213.09 L1989.96 1213.09 L1990.55 1213.09 L1991.14 1213.09 L1991.72 1213.09 L1992.31 1213.09 L1992.9 1213.09 L1993.48 1213.09 L1994.07 1213.09 L1994.65 1213.09 L1995.24 1213.09 L1995.83 1213.09 L1996.41 1213.09 L1997 1213.09 L1997.59 1213.09 L1998.17 1213.09 L1998.76 1213.09 L1999.35 1213.09 L1999.93 1213.09 L2000.52 1213.09 L2001.11 1213.09 L2001.69 1213.09 L2002.28 1213.09 L2002.86 1213.09 L2003.45 1213.09 L2004.04 1213.09 L2004.62 1213.09 L2005.21 1213.09 L2005.8 1213.09 L2006.38 1213.09 L2006.97 1213.09 L2007.56 1213.09 L2008.14 1213.09 L2008.73 1213.09 L2009.32 1213.09 L2009.9 1213.09 L2010.49 1213.09 L2011.07 1213.09 L2011.66 1213.09 L2012.25 1213.09 L2012.83 1213.09 L2013.42 1213.09 L2014.01 1213.09 L2014.59 1213.09 L2015.18 1213.09 L2015.77 1213.09 L2016.35 1213.09 L2016.94 1213.09 L2017.53 1213.09 L2018.11 1213.09 L2018.7 1213.09 L2019.28 1213.09 L2019.87 1213.09 L2020.46 1213.09 L2021.04 1213.09 L2021.63 1213.09 L2022.22 1213.09 L2022.8 1213.09 L2023.39 1213.09 L2023.98 1213.09 L2024.56 1213.09 L2025.15 1213.09 L2025.73 1213.09 L2026.32 1213.09 L2026.91 1213.09 L2027.49 1213.09 L2028.08 1213.09 L2028.67 1213.09 L2029.25 1213.09 L2029.84 1213.09 L2030.43 1213.09 L2031.01 1213.09 L2031.6 1213.09 L2032.19 1213.09 L2032.77 1213.09 L2033.36 1213.09 L2033.94 1213.09 L2034.53 1213.09 L2035.12 1213.09 L2035.7 1213.09 L2036.29 1213.09 L2036.88 1213.09 L2037.46 1213.09 L2038.05 1213.09 L2038.64 1213.09 L2039.22 1213.09 L2039.81 1213.09 L2040.4 1213.09 L2040.98 1213.09 L2041.57 1213.09 L2042.15 1213.09 L2042.74 1213.09 L2043.33 1213.09 L2043.91 1213.09 L2044.5 1213.09 L2045.09 1213.09 L2045.67 1213.09 L2046.26 1213.09 L2046.85 1213.09 L2047.43 1213.09 L2048.02 1213.09 L2048.6 1213.09 L2049.19 1213.09 L2049.78 1213.09 L2050.36 1213.09 L2050.95 1213.09 L2051.54 1213.09 L2052.12 1213.09 L2052.71 1213.09 L2053.3 1213.09 L2053.88 1213.09 L2054.47 1213.09 L2055.06 1213.09 L2055.64 1213.09 L2056.23 1213.09 L2056.81 1213.09 L2057.4 1213.09 L2057.99 1213.09 L2058.57 1213.09 L2059.16 1213.09 L2059.75 1213.09 L2060.33 1213.09 L2060.92 1213.09 L2061.51 1213.09 L2062.09 1213.09 L2062.68 1213.09 L2063.27 1213.09 L2063.85 1213.09 L2064.44 1213.09 L2065.02 1213.09 L2065.61 1213.09 L2066.2 1213.09 L2066.78 1213.09 L2067.37 1213.09 L2067.96 1213.09 L2068.54 1213.09 L2069.13 1213.09 L2069.72 1213.09 L2070.3 1213.09 L2070.89 1213.09 L2071.48 1213.09 L2072.06 1213.09 L2072.65 1213.09 L2073.23 1213.09 L2073.82 1213.09 L2074.41 1213.09 L2074.99 1213.09 L2075.58 1213.09 L2076.17 1213.09 L2076.75 1213.09 L2077.34 1213.09 L2077.93 1213.09 L2078.51 1213.09 L2079.1 1213.09 L2079.68 1213.09 L2080.27 1213.09 L2080.86 1213.09 L2081.44 1213.09 L2082.03 1213.09 L2082.62 1213.09 L2083.2 1213.09 L2083.79 1213.09 L2084.38 1213.09 L2084.96 1213.09 L2085.55 1213.09 L2086.14 1213.09 L2086.72 1213.09 L2087.31 1213.09 L2087.89 1213.09 L2088.48 1213.09 L2089.07 1213.09 L2089.65 1213.09 L2090.24 1213.09 L2090.83 1213.09 L2091.41 1213.09 L2092 1213.09 L2092.59 1213.09 L2093.17 1213.09 L2093.76 1213.09 L2094.35 1213.09 L2094.93 1213.09 L2095.52 1213.09 L2096.1 1213.09 L2096.69 1213.09 L2097.28 1213.09 L2097.86 1213.09 L2098.45 1213.09 L2099.04 1213.09 L2099.62 1213.09 L2100.21 1213.09 L2100.8 1213.09 L2101.38 1213.09 L2101.97 1213.09 L2102.55 1213.09 L2103.14 1213.09 L2103.73 1213.09 L2104.31 1213.09 L2104.9 1213.09 L2105.49 1213.09 L2106.07 1213.09 L2106.66 1213.09 L2107.25 1213.09 L2107.83 1213.09 L2108.42 1213.09 L2109.01 1213.09 L2109.59 1213.09 L2110.18 1213.09 L2110.76 1213.09 L2111.35 1213.09 L2111.94 1213.09 L2112.52 1213.09 L2113.11 1213.09 L2113.7 1213.09 L2114.28 1213.09 L2114.87 1213.09 L2115.46 1213.09 L2116.04 1213.09 L2116.63 1213.09 L2117.22 1213.09 L2117.8 1213.09 L2118.39 1213.09 L2118.97 1213.09 L2119.56 1213.09 L2120.15 1213.09 L2120.73 1213.09 L2121.32 1213.09 L2121.91 1213.09 L2122.49 1213.09 L2123.08 1213.09 L2123.67 1213.09 L2124.25 1213.09 L2124.84 1213.09 L2125.42 1213.09 L2126.01 1213.09 L2126.6 1213.09 L2127.18 1213.09 L2127.77 1213.09 L2128.36 1213.09 L2128.94 1213.09 L2129.53 1213.09 L2130.12 1213.09 L2130.7 1213.09 L2131.29 1213.09 L2131.88 1213.09 L2132.46 1213.09 L2133.05 1213.09 L2133.63 1213.09 L2134.22 1213.09 L2134.81 1213.09 L2135.39 1213.09 L2135.98 1213.09 L2136.57 1213.09 L2137.15 1213.09 L2137.74 1213.09 L2138.33 1213.09 L2138.91 1213.09 L2139.5 1213.09 L2140.09 1213.09 L2140.67 1213.09 L2141.26 1213.09 L2141.84 1213.09 L2142.43 1213.09 L2143.02 1213.09 L2143.6 1213.09 L2144.19 1213.09 L2144.78 1213.09 L2145.36 1213.09 L2145.95 1213.09 L2146.54 1213.09 L2147.12 1213.09 L2147.71 1213.09 L2148.3 1213.09 L2148.88 1213.09 L2149.47 1213.09 L2150.05 1213.09 L2150.64 1213.09 L2151.23 1213.09 L2151.81 1213.09 L2152.4 1213.09 L2152.99 1213.09 L2153.57 1213.09 L2154.16 1213.09 L2154.75 1213.09 L2155.33 1213.09 L2155.92 1213.09 L2156.5 1213.09 L2157.09 1213.09 L2157.68 1213.09 L2158.26 1213.09 L2158.26 1212.95 L2157.68 1212.95 L2157.09 1212.95 L2156.5 1212.95 L2155.92 1212.95 L2155.33 1212.95 L2154.75 1212.95 L2154.16 1212.95 L2153.57 1212.95 L2152.99 1212.95 L2152.4 1212.95 L2151.81 1212.95 L2151.23 1212.95 L2150.64 1212.95 L2150.05 1212.95 L2149.47 1212.95 L2148.88 1212.95 L2148.3 1212.95 L2147.71 1212.95 L2147.12 1212.95 L2146.54 1212.95 L2145.95 1212.95 L2145.36 1212.95 L2144.78 1212.95 L2144.19 1212.95 L2143.6 1212.95 L2143.02 1212.95 L2142.43 1212.95 L2141.84 1212.95 L2141.26 1212.95 L2140.67 1212.95 L2140.09 1212.95 L2139.5 1212.95 L2138.91 1212.95 L2138.33 1212.95 L2137.74 1212.95 L2137.15 1212.95 L2136.57 1212.95 L2135.98 1212.95 L2135.39 1212.95 L2134.81 1212.95 L2134.22 1212.95 L2133.63 1212.95 L2133.05 1212.95 L2132.46 1212.95 L2131.88 1212.95 L2131.29 1212.95 L2130.7 1212.95 L2130.12 1212.95 L2129.53 1212.95 L2128.94 1212.95 L2128.36 1212.95 L2127.77 1212.95 L2127.18 1212.95 L2126.6 1212.95 L2126.01 1212.95 L2125.42 1212.95 L2124.84 1212.95 L2124.25 1212.95 L2123.67 1212.95 L2123.08 1212.95 L2122.49 1212.95 L2121.91 1212.95 L2121.32 1212.95 L2120.73 1212.95 L2120.15 1212.95 L2119.56 1212.95 L2118.97 1212.95 L2118.39 1212.95 L2117.8 1212.95 L2117.22 1212.95 L2116.63 1212.95 L2116.04 1212.95 L2115.46 1212.95 L2114.87 1212.95 L2114.28 1212.95 L2113.7 1212.95 L2113.11 1212.95 L2112.52 1212.95 L2111.94 1212.95 L2111.35 1212.95 L2110.76 1212.95 L2110.18 1212.95 L2109.59 1212.95 L2109.01 1212.95 L2108.42 1212.95 L2107.83 1212.95 L2107.25 1212.95 L2106.66 1212.95 L2106.07 1212.95 L2105.49 1212.95 L2104.9 1212.95 L2104.31 1212.95 L2103.73 1212.95 L2103.14 1212.95 L2102.55 1212.95 L2101.97 1212.95 L2101.38 1212.95 L2100.8 1212.95 L2100.21 1212.95 L2099.62 1212.95 L2099.04 1212.95 L2098.45 1212.95 L2097.86 1212.95 L2097.28 1212.95 L2096.69 1212.95 L2096.1 1212.95 L2095.52 1212.95 L2094.93 1212.95 L2094.35 1212.95 L2093.76 1212.95 L2093.17 1212.95 L2092.59 1212.95 L2092 1212.95 L2091.41 1212.95 L2090.83 1212.95 L2090.24 1212.95 L2089.65 1212.95 L2089.07 1212.95 L2088.48 1212.95 L2087.89 1212.95 L2087.31 1212.95 L2086.72 1212.95 L2086.14 1212.95 L2085.55 1212.95 L2084.96 1212.95 L2084.38 1212.95 L2083.79 1212.95 L2083.2 1212.95 L2082.62 1212.95 L2082.03 1212.95 L2081.44 1212.95 L2080.86 1212.95 L2080.27 1212.95 L2079.68 1212.95 L2079.1 1212.95 L2078.51 1212.95 L2077.93 1212.95 L2077.34 1212.95 L2076.75 1212.95 L2076.17 1212.95 L2075.58 1212.95 L2074.99 1212.95 L2074.41 1212.95 L2073.82 1212.95 L2073.23 1212.95 L2072.65 1212.95 L2072.06 1212.95 L2071.48 1212.95 L2070.89 1212.95 L2070.3 1212.95 L2069.72 1212.95 L2069.13 1212.95 L2068.54 1212.95 L2067.96 1212.95 L2067.37 1212.95 L2066.78 1212.95 L2066.2 1212.95 L2065.61 1212.95 L2065.02 1212.95 L2064.44 1212.95 L2063.85 1212.95 L2063.27 1212.95 L2062.68 1212.95 L2062.09 1212.95 L2061.51 1212.95 L2060.92 1212.95 L2060.33 1212.95 L2059.75 1212.95 L2059.16 1212.95 L2058.57 1212.95 L2057.99 1212.95 L2057.4 1212.95 L2056.81 1212.95 L2056.23 1212.95 L2055.64 1212.95 L2055.06 1212.95 L2054.47 1212.95 L2053.88 1212.95 L2053.3 1212.95 L2052.71 1212.95 L2052.12 1212.95 L2051.54 1212.95 L2050.95 1212.95 L2050.36 1212.95 L2049.78 1212.95 L2049.19 1212.95 L2048.6 1212.95 L2048.02 1212.95 L2047.43 1212.95 L2046.85 1212.95 L2046.26 1212.95 L2045.67 1212.95 L2045.09 1212.95 L2044.5 1212.95 L2043.91 1212.95 L2043.33 1212.95 L2042.74 1212.95 L2042.15 1212.95 L2041.57 1212.95 L2040.98 1212.95 L2040.4 1212.95 L2039.81 1212.95 L2039.22 1212.95 L2038.64 1212.95 L2038.05 1212.95 L2037.46 1212.95 L2036.88 1212.95 L2036.29 1212.95 L2035.7 1212.95 L2035.12 1212.95 L2034.53 1212.95 L2033.94 1212.95 L2033.36 1212.95 L2032.77 1212.95 L2032.19 1212.95 L2031.6 1212.95 L2031.01 1212.95 L2030.43 1212.95 L2029.84 1212.95 L2029.25 1212.95 L2028.67 1212.95 L2028.08 1212.95 L2027.49 1212.95 L2026.91 1212.95 L2026.32 1212.95 L2025.73 1212.95 L2025.15 1212.95 L2024.56 1212.95 L2023.98 1212.95 L2023.39 1212.95 L2022.8 1212.95 L2022.22 1212.95 L2021.63 1212.95 L2021.04 1212.95 L2020.46 1212.95 L2019.87 1212.95 L2019.28 1212.95 L2018.7 1212.95 L2018.11 1212.95 L2017.53 1212.95 L2016.94 1212.95 L2016.35 1212.95 L2015.77 1212.95 L2015.18 1212.95 L2014.59 1212.95 L2014.01 1212.95 L2013.42 1212.95 L2012.83 1212.95 L2012.25 1212.95 L2011.66 1212.95 L2011.07 1212.95 L2010.49 1212.95 L2009.9 1212.95 L2009.32 1212.95 L2008.73 1212.95 L2008.14 1212.95 L2007.56 1212.95 L2006.97 1212.95 L2006.38 1212.95 L2005.8 1212.95 L2005.21 1212.95 L2004.62 1212.95 L2004.04 1212.95 L2003.45 1212.95 L2002.86 1212.95 L2002.28 1212.95 L2001.69 1212.95 L2001.11 1212.95 L2000.52 1212.95 L1999.93 1212.95 L1999.35 1212.95 L1998.76 1212.95 L1998.17 1212.95 L1997.59 1212.95 L1997 1212.95 L1996.41 1212.95 L1995.83 1212.95 L1995.24 1212.95 L1994.65 1212.95 L1994.07 1212.95 L1993.48 1212.95 L1992.9 1212.95 L1992.31 1212.95 L1991.72 1212.95 L1991.14 1212.95 L1990.55 1212.95 L1989.96 1212.95 L1989.38 1212.95 L1988.79 1212.95 L1988.2 1212.95 L1987.62 1212.95 L1987.03 1212.95 L1986.45 1212.95 L1985.86 1212.95 L1985.27 1212.95 L1984.69 1212.95 L1984.1 1212.95 L1983.51 1212.95 L1982.93 1212.95 L1982.34 1212.95 L1981.75 1212.95 L1981.17 1212.95 L1980.58 1212.95 L1979.99 1212.95 L1979.41 1212.95 L1978.82 1212.95 L1978.24 1212.95 L1977.65 1212.95 L1977.06 1212.95 L1976.48 1212.95 L1975.89 1212.95 L1975.3 1212.95 L1974.72 1212.95 L1974.13 1212.95 L1973.54 1212.95 L1972.96 1212.95 L1972.37 1212.95 L1971.78 1212.95 L1971.2 1212.95 L1970.61 1212.95 L1970.03 1212.95 L1969.44 1212.95 L1968.85 1212.95 L1968.27 1212.95 L1967.68 1212.95 L1967.09 1212.95 L1966.51 1212.95 L1965.92 1212.95 L1965.33 1212.95 L1964.75 1212.95 L1964.16 1212.95 L1963.58 1212.95 L1962.99 1212.95 L1962.4 1212.95 L1961.82 1212.95 L1961.23 1212.95 L1960.64 1212.95 L1960.06 1212.95 L1959.47 1212.95 L1958.88 1212.95 L1958.3 1212.95 L1957.71 1212.95 L1957.12 1212.95 L1956.54 1212.95 L1955.95 1212.95 L1955.37 1212.95 L1954.78 1212.95 L1954.19 1212.95 L1953.61 1212.95 L1953.02 1212.95 L1952.43 1212.95 L1951.85 1212.95 L1951.26 1212.95 L1950.67 1212.95 L1950.09 1212.95 L1949.5 1212.95 L1948.91 1212.95 L1948.33 1212.95 L1947.74 1212.95 L1947.16 1212.95 L1946.57 1212.95 L1945.98 1212.95 L1945.4 1212.95 L1944.81 1212.95 L1944.22 1212.95 L1943.64 1212.95 L1943.05 1212.95 L1942.46 1212.95 L1941.88 1212.95 L1941.29 1212.95 L1940.71 1212.95 L1940.12 1212.95 L1939.53 1212.95 L1938.95 1212.95 L1938.36 1212.95 L1937.77 1212.95 L1937.19 1212.95 L1936.6 1212.95 L1936.01 1212.95 L1935.43 1212.95 L1934.84 1212.95 L1934.25 1212.95 L1933.67 1212.95 L1933.08 1212.95 L1932.5 1212.95 L1931.91 1212.95 L1931.32 1212.95 L1930.74 1212.95 L1930.15 1212.95 L1929.56 1212.95 L1928.98 1212.95 L1928.39 1212.95 L1927.8 1212.95 L1927.22 1212.95 L1926.63 1212.95 L1926.04 1212.95 L1925.46 1212.95 L1924.87 1212.95 L1924.29 1212.95 L1923.7 1212.95 L1923.11 1212.95 L1922.53 1212.95 L1921.94 1212.95 L1921.35 1212.95 L1920.77 1212.95 L1920.18 1212.95 L1919.59 1212.95 L1919.01 1212.95 L1918.42 1212.95 L1917.83 1212.95 L1917.25 1212.95 L1916.66 1212.95 L1916.08 1212.95 L1915.49 1212.95 L1914.9 1212.95 L1914.32 1212.95 L1913.73 1212.95 L1913.14 1212.95 L1912.56 1212.95 L1911.97 1212.95 L1911.38 1212.95 L1910.8 1212.95 L1910.21 1212.95 L1909.63 1212.95 L1909.04 1212.95 L1908.45 1212.95 L1907.87 1212.95 L1907.28 1212.95 L1906.69 1212.95 L1906.11 1212.95 L1905.52 1212.95 L1904.93 1212.95 L1904.35 1212.95 L1903.76 1212.95 L1903.17 1212.95 L1902.59 1212.95 L1902 1212.95 L1901.42 1212.95 L1900.83 1212.95 L1900.24 1212.95 L1899.66 1212.95 L1899.07 1212.95 L1898.48 1212.95 L1897.9 1212.95 L1897.31 1212.95 L1896.72 1212.95 L1896.14 1212.95 L1895.55 1212.95 L1894.96 1212.95 L1894.38 1212.95 L1893.79 1212.95 L1893.21 1212.95 L1892.62 1212.95 L1892.03 1212.95 L1891.45 1212.95 L1890.86 1212.95 L1890.27 1212.95 L1889.69 1212.95 L1889.1 1212.95 L1888.51 1212.95 L1887.93 1212.95 L1887.34 1212.95 L1886.76 1212.95 L1886.17 1212.95 L1885.58 1212.95 L1885 1212.95 L1884.41 1212.95 L1883.82 1212.95 L1883.24 1212.95 L1882.65 1212.95 L1882.06 1212.95 L1881.48 1212.95 L1880.89 1212.95 L1880.3 1212.95 L1879.72 1212.95 L1879.13 1212.95 L1878.55 1212.95 L1877.96 1212.95 L1877.37 1212.95 L1876.79 1212.95 L1876.2 1212.95 L1875.61 1212.95 L1875.03 1212.95 L1874.44 1212.95 L1873.85 1212.95 L1873.27 1212.95 L1872.68 1212.95 L1872.09 1212.95 L1871.51 1212.95 L1870.92 1212.95 L1870.34 1212.95 L1869.75 1212.95 L1869.16 1212.95 L1868.58 1212.95 L1867.99 1212.95 L1867.4 1212.95 L1866.82 1212.95 L1866.23 1212.95 L1865.64 1212.95 L1865.06 1212.95 L1864.47 1212.95 L1863.88 1212.95 L1863.3 1212.95 L1862.71 1212.95 L1862.13 1212.95 L1861.54 1212.95 L1860.95 1212.95 L1860.37 1212.95 L1859.78 1212.95 L1859.19 1212.95 L1858.61 1212.95 L1858.02 1212.95 L1857.43 1212.95 L1856.85 1212.95 L1856.26 1212.95 L1855.68 1212.95 L1855.09 1212.95 L1854.5 1212.95 L1853.92 1212.95 L1853.33 1212.95 L1852.74 1212.95 L1852.16 1212.95 L1851.57 1212.95 L1850.98 1212.95 L1850.4 1212.95 L1849.81 1212.95 L1849.22 1212.95 L1848.64 1212.95 L1848.05 1212.95 L1847.47 1212.95 L1846.88 1212.95 L1846.29 1212.95 L1845.71 1212.95 L1845.12 1212.95 L1844.53 1212.95 L1843.95 1212.95 L1843.36 1212.95 L1842.77 1212.95 L1842.19 1212.95 L1841.6 1212.95 L1841.01 1212.95 L1840.43 1212.95 L1839.84 1212.95 L1839.26 1212.95 L1838.67 1212.95 L1838.08 1212.95 L1837.5 1212.95 L1836.91 1212.95 L1836.32 1212.95 L1835.74 1212.95 L1835.15 1212.95 L1834.56 1212.95 L1833.98 1212.95 L1833.39 1212.95 L1832.81 1212.95 L1832.22 1212.95 L1831.63 1212.95 L1831.05 1212.95 L1830.46 1212.95 L1829.87 1212.95 L1829.29 1212.95 L1828.7 1212.95 L1828.11 1212.95 L1827.53 1212.95 L1826.94 1212.95 L1826.35 1212.95 L1825.77 1212.95 L1825.18 1212.95 L1824.6 1212.95 L1824.01 1212.95 L1823.42 1212.95 L1822.84 1212.95 L1822.25 1212.95 L1821.66 1212.95 L1821.08 1212.95 L1820.49 1212.95 L1819.9 1212.95 L1819.32 1212.95 L1818.73 1212.95 L1818.14 1212.95 L1817.56 1212.95 L1816.97 1212.95 L1816.39 1212.95 L1815.8 1212.95 L1815.21 1212.95 L1814.63 1212.95 L1814.04 1212.95 L1813.45 1212.95 L1812.87 1212.95 L1812.28 1212.95 L1811.69 1212.95 L1811.11 1212.95 L1810.52 1212.95 L1809.94 1212.95 L1809.35 1212.95 L1808.76 1212.95 L1808.18 1212.95 L1807.59 1212.95 L1807 1212.95 L1806.42 1212.95 L1805.83 1212.95 L1805.24 1212.95 L1804.66 1212.95 L1804.07 1212.95 L1803.48 1212.95 L1802.9 1212.95 L1802.31 1212.95 L1801.73 1212.95 L1801.14 1212.95 L1800.55 1212.95 L1799.97 1212.95 L1799.38 1212.95 L1798.79 1212.95 L1798.21 1212.95 L1797.62 1212.95 L1797.03 1212.95 L1796.45 1212.95 L1795.86 1212.95 L1795.27 1212.95 L1794.69 1212.95 L1794.1 1212.95 L1793.52 1212.95 L1792.93 1212.95 L1792.34 1212.95 L1791.76 1212.95 L1791.17 1212.95 L1790.58 1212.95 L1790 1212.95 L1789.41 1212.95 L1788.82 1212.95 L1788.24 1212.95 L1787.65 1212.95 L1787.06 1212.95 L1786.48 1212.95 L1785.89 1212.95 L1785.31 1212.95 L1784.72 1212.95 L1784.13 1212.95 L1783.55 1212.95 L1782.96 1212.95 L1782.37 1212.95 L1781.79 1212.95 L1781.2 1212.95 L1780.61 1212.95 L1780.03 1212.95 L1779.44 1212.95 L1778.86 1212.95 L1778.27 1212.95 L1777.68 1212.95 L1777.1 1212.95 L1776.51 1212.95 L1775.92 1212.95 L1775.34 1212.95 L1774.75 1212.95 L1774.16 1212.95 L1773.58 1212.95 L1772.99 1212.95 L1772.4 1212.95 L1771.82 1212.95 L1771.23 1212.95 L1770.65 1212.95 L1770.06 1212.95 L1769.47 1212.95 L1768.89 1212.95 L1768.3 1212.95 L1767.71 1212.95 L1767.13 1212.95 L1766.54 1212.95 L1765.95 1212.95 L1765.37 1212.95 L1764.78 1212.95 L1764.19 1212.95 L1763.61 1212.95 L1763.02 1212.95 L1762.44 1212.95 L1761.85 1212.95 L1761.26 1212.95 L1760.68 1212.95 L1760.09 1212.95 L1759.5 1212.95 L1758.92 1212.95 L1758.33 1212.95 L1757.74 1212.95 L1757.16 1212.95 L1756.57 1212.95 L1755.99 1212.95 L1755.4 1212.95 L1754.81 1212.95 L1754.23 1212.95 L1753.64 1212.95 L1753.05 1212.95 L1752.47 1212.95 L1751.88 1212.95 L1751.29 1212.95 L1750.71 1212.95 L1750.12 1212.95 L1749.53 1212.95 L1748.95 1212.95 L1748.36 1212.95 L1747.78 1212.95 L1747.19 1212.95 L1746.6 1212.95 L1746.02 1212.95 L1745.43 1212.95 L1744.84 1212.95 L1744.26 1212.95 L1743.67 1212.95 L1743.08 1212.95 L1742.5 1212.95 L1741.91 1212.95 L1741.32 1212.95 L1740.74 1212.95 L1740.15 1212.95 L1739.57 1212.95 L1738.98 1212.95 L1738.39 1212.95 L1737.81 1212.95 L1737.22 1212.95 L1736.63 1212.95 L1736.05 1212.95 L1735.46 1212.95 L1734.87 1212.95 L1734.29 1212.95 L1733.7 1212.95 L1733.11 1212.95 L1732.53 1212.95 L1731.94 1212.95 L1731.36 1212.95 L1730.77 1212.95 L1730.18 1212.95 L1729.6 1212.95 L1729.01 1212.95 L1728.42 1212.95 L1727.84 1212.95 L1727.25 1212.95 L1726.66 1212.95 L1726.08 1212.95 L1725.49 1212.95 L1724.91 1212.95 L1724.32 1212.95 L1723.73 1212.95 L1723.15 1212.95 L1722.56 1212.95 L1721.97 1212.95 L1721.39 1212.95 L1720.8 1212.95 L1720.21 1212.95 L1719.63 1212.95 L1719.04 1212.95 L1718.45 1212.95 L1717.87 1212.95 L1717.28 1212.95 L1716.7 1212.95 L1716.11 1212.95 L1715.52 1212.95 L1714.94 1212.95 L1714.35 1212.95 L1713.76 1212.95 L1713.18 1212.95 L1712.59 1212.95 L1712 1212.95 L1711.42 1212.95 L1710.83 1212.95 L1710.24 1212.95 L1709.66 1212.95 L1709.07 1212.95 L1708.49 1212.95 L1707.9 1212.95 L1707.31 1212.95 L1706.73 1212.95 L1706.14 1212.95 L1705.55 1212.95 L1704.97 1212.95 L1704.38 1212.95 L1703.79 1212.95 L1703.21 1212.95 L1702.62 1212.95 L1702.04 1212.95 L1701.45 1212.95 L1700.86 1212.95 L1700.28 1212.95 L1699.69 1212.95 L1699.1 1212.95 L1698.52 1212.95 L1697.93 1212.95 L1697.34 1212.95 L1696.76 1212.95 L1696.17 1212.95 L1695.58 1212.95 L1695 1212.95 L1694.41 1212.95 L1693.83 1212.95 L1693.24 1212.95 L1692.65 1212.95 L1692.07 1212.95 L1691.48 1212.95 L1690.89 1212.95 L1690.31 1212.95 L1689.72 1212.95 L1689.13 1212.95 L1688.55 1212.95 L1687.96 1212.95 L1687.37 1212.95 L1686.79 1212.95 L1686.2 1212.95 L1685.62 1212.95 L1685.03 1212.95 L1684.44 1212.95 L1683.86 1212.95 L1683.27 1212.95 L1682.68 1212.95 L1682.1 1212.95 L1681.51 1212.95 L1680.92 1212.95 L1680.34 1212.95 L1679.75 1212.95 L1679.17 1212.95 L1678.58 1212.95 L1677.99 1212.95 L1677.41 1212.95 L1676.82 1212.95 L1676.23 1212.95 L1675.65 1212.95 L1675.06 1212.95 L1674.47 1212.95 L1673.89 1212.95 L1673.3 1212.95 L1672.71 1212.95 L1672.13 1212.95 L1671.54 1212.95 L1670.96 1212.95 L1670.37 1212.95 L1669.78 1212.95 L1669.2 1212.95 L1668.61 1212.95 L1668.02 1212.95 L1667.44 1212.95 L1666.85 1212.95 L1666.26 1212.95 L1665.68 1212.95 L1665.09 1212.95 L1664.5 1212.95 L1663.92 1212.95 L1663.33 1212.95 L1662.75 1212.95 L1662.16 1212.95 L1661.57 1212.95 L1660.99 1212.95 L1660.4 1212.95 L1659.81 1212.95 L1659.23 1212.95 L1658.64 1212.95 L1658.05 1212.95 L1657.47 1212.95 L1656.88 1212.95 L1656.29 1212.95 L1655.71 1212.95 L1655.12 1212.95 L1654.54 1212.95 L1653.95 1212.95 L1653.36 1212.95 L1652.78 1212.95 L1652.19 1212.95 L1651.6 1212.95 L1651.02 1212.95 L1650.43 1212.95 L1649.84 1212.95 L1649.26 1212.95 L1648.67 1212.95 L1648.09 1212.95 L1647.5 1212.95 L1646.91 1212.95 L1646.33 1212.95 L1645.74 1212.95 L1645.15 1212.95 L1644.57 1212.95 L1643.98 1212.95 L1643.39 1212.95 L1642.81 1212.95 L1642.22 1212.95 L1641.63 1212.95 L1641.05 1212.95 L1640.46 1212.95 L1639.88 1212.95 L1639.29 1212.95 L1638.7 1212.95 L1638.12 1212.95 L1637.53 1212.95 L1636.94 1212.95 L1636.36 1212.95 L1635.77 1212.95 L1635.18 1212.95 L1634.6 1212.95 L1634.01 1212.95 L1633.42 1212.95 L1632.84 1212.95 L1632.25 1212.95 L1631.67 1212.95 L1631.08 1212.95 L1630.49 1212.95 L1629.91 1212.95 L1629.32 1212.95 L1628.73 1212.95 L1628.15 1212.95 L1627.56 1212.95 L1626.97 1212.95 L1626.39 1212.95 L1625.8 1212.95 L1625.22 1212.95 L1624.63 1212.95 L1624.04 1212.95 L1623.46 1212.95 L1622.87 1212.95 L1622.28 1212.95 L1621.7 1212.95 L1621.11 1212.95 L1620.52 1212.95 L1619.94 1212.95 L1619.35 1212.95 L1618.76 1212.95 L1618.18 1212.95 L1617.59 1212.95 L1617.01 1212.95 L1616.42 1212.95 L1615.83 1212.95 L1615.25 1212.95 L1614.66 1212.95 L1614.07 1212.95 L1613.49 1212.95 L1612.9 1212.95 L1612.31 1212.95 L1611.73 1212.95 L1611.14 1212.95 L1610.55 1212.95 L1609.97 1212.95 L1609.38 1212.95 L1608.8 1212.95 L1608.21 1212.95 L1607.62 1212.95 L1607.04 1212.95 L1606.45 1212.95 L1605.86 1212.95 L1605.28 1212.95 L1604.69 1212.95 L1604.1 1212.95 L1603.52 1212.95 L1602.93 1212.95 L1602.34 1212.95 L1601.76 1212.95 L1601.17 1212.95 L1600.59 1212.95 L1600 1212.95 L1599.41 1212.95 L1598.83 1212.95 L1598.24 1212.95 L1597.65 1212.95 L1597.07 1212.95 L1596.48 1212.95 L1595.89 1212.95 L1595.31 1212.95 L1594.72 1212.95 L1594.14 1212.95 L1593.55 1212.95 L1592.96 1212.95 L1592.38 1212.95 L1591.79 1212.95 L1591.2 1212.95 L1590.62 1212.95 L1590.03 1212.95 L1589.44 1212.95 L1588.86 1212.95 L1588.27 1212.95 L1587.68 1212.95 L1587.1 1212.95 L1586.51 1212.95 L1585.93 1212.95 L1585.34 1212.95 L1584.75 1212.95 L1584.17 1212.95 L1583.58 1212.95 L1582.99 1212.95 L1582.41 1212.95 L1581.82 1212.95 L1581.23 1212.95 L1580.65 1212.95 L1580.06 1212.95 L1579.47 1212.95 L1578.89 1212.95 L1578.3 1212.95 L1577.72 1212.95 L1577.13 1212.95 L1576.54 1212.95 L1575.96 1212.95 L1575.37 1212.95 L1574.78 1212.95 L1574.2 1212.95 L1573.61 1212.95 L1573.02 1212.95 L1572.44 1212.95 L1571.85 1212.95 L1571.27 1212.95 L1570.68 1212.95 L1570.09 1212.95 L1569.51 1212.95 L1568.92 1212.95 L1568.33 1212.95 L1567.75 1212.95 L1567.16 1212.95 L1566.57 1212.95 L1565.99 1212.95 L1565.4 1212.95 L1564.81 1212.95 L1564.23 1212.95 L1563.64 1212.95 L1563.06 1212.95 L1562.47 1212.95 L1561.88 1212.95 L1561.3 1212.95 L1560.71 1212.95 L1560.12 1212.95 L1559.54 1212.95 L1558.95 1212.95 L1558.36 1212.95 L1557.78 1212.95 L1557.19 1212.95 L1556.6 1212.95 L1556.02 1212.95 L1555.43 1212.95 L1554.85 1212.95 L1554.26 1212.95 L1553.67 1212.95 L1553.09 1212.95 L1552.5 1212.95 L1551.91 1212.95 L1551.33 1212.95 L1550.74 1212.95 L1550.15 1212.95 L1549.57 1212.95 L1548.98 1212.95 L1548.4 1212.95 L1547.81 1212.95 L1547.22 1212.95 L1546.64 1212.95 L1546.05 1212.95 L1545.46 1212.95 L1544.88 1212.95 L1544.29 1212.95 L1543.7 1212.95 L1543.12 1212.95 L1542.53 1212.95 L1541.94 1212.95 L1541.36 1212.95 L1540.77 1212.95 L1540.19 1212.95 L1539.6 1212.95 L1539.01 1212.95 L1538.43 1212.95 L1537.84 1212.95 L1537.25 1212.95 L1536.67 1212.95 L1536.08 1212.95 L1535.49 1212.95 L1534.91 1212.95 L1534.32 1212.95 L1533.73 1212.95 L1533.15 1212.95 L1532.56 1212.95 L1531.98 1212.95 L1531.39 1212.95 L1530.8 1212.95 L1530.22 1212.95 L1529.63 1212.95 L1529.04 1212.95 L1528.46 1212.95 L1527.87 1212.95 L1527.28 1212.95 L1526.7 1212.95 L1526.11 1212.95 L1525.52 1212.95 L1524.94 1212.95 L1524.35 1212.95 L1523.77 1212.95 L1523.18 1212.95 L1522.59 1212.95 L1522.01 1212.95 L1521.42 1212.95 L1520.83 1212.95 L1520.25 1212.95 L1519.66 1212.95 L1519.07 1212.95 L1518.49 1212.95 L1517.9 1212.95 L1517.32 1212.95 L1516.73 1212.95 L1516.14 1212.95 L1515.56 1212.95 L1514.97 1212.95 L1514.38 1212.95 L1513.8 1212.95 L1513.21 1212.95 L1512.62 1212.95 L1512.04 1212.95 L1511.45 1212.95 L1510.86 1212.95 L1510.28 1212.95 L1509.69 1212.95 L1509.11 1212.95 L1508.52 1212.95 L1507.93 1212.95 L1507.35 1212.95 L1506.76 1212.95 L1506.17 1212.95 L1505.59 1212.95 L1505 1212.95 L1504.41 1212.95 L1503.83 1212.95 L1503.24 1212.95 L1502.65 1212.95 L1502.07 1212.95 L1501.48 1212.95 L1500.9 1212.95 L1500.31 1212.95 L1499.72 1212.95 L1499.14 1212.95 L1498.55 1212.95 L1497.96 1212.95 L1497.38 1212.95 L1496.79 1212.95 L1496.2 1212.95 L1495.62 1212.95 L1495.03 1212.95 L1494.45 1212.95 L1493.86 1212.95 L1493.27 1212.95 L1492.69 1212.95 L1492.1 1212.95 L1491.51 1212.95 L1490.93 1212.95 L1490.34 1212.95 L1489.75 1212.95 L1489.17 1212.95 L1488.58 1212.95 L1487.99 1212.95 L1487.41 1212.95 L1486.82 1212.95 L1486.24 1212.95 L1485.65 1212.95 L1485.06 1212.95 L1484.48 1212.95 L1483.89 1212.95 L1483.3 1212.95 L1482.72 1212.95 L1482.13 1212.95 L1481.54 1212.95 L1480.96 1212.95 L1480.37 1212.95 L1479.78 1212.95 L1479.2 1212.95 L1478.61 1212.95 L1478.03 1212.95 L1477.44 1212.95 L1476.85 1212.95 L1476.27 1212.95 L1475.68 1212.95 L1475.09 1212.95 L1474.51 1212.95 L1473.92 1212.95 L1473.33 1212.95 L1472.75 1212.95 L1472.16 1212.95 L1471.57 1212.95 L1470.99 1212.95 L1470.4 1212.95 L1469.82 1212.95 L1469.23 1212.95 L1468.64 1212.95 L1468.06 1212.95 L1467.47 1212.95 L1466.88 1212.95 L1466.3 1212.95 L1465.71 1212.95 L1465.12 1212.95 L1464.54 1212.95 L1463.95 1212.95 L1463.37 1212.95 L1462.78 1212.95 L1462.19 1212.95 L1461.61 1212.95 L1461.02 1212.95 L1460.43 1212.95 L1459.85 1212.95 L1459.26 1212.95 L1458.67 1212.95 L1458.09 1212.95 L1457.5 1212.95 L1456.91 1212.95 L1456.33 1212.95 L1455.74 1212.95 L1455.16 1212.95 L1454.57 1212.95 L1453.98 1212.95 L1453.4 1212.95 L1452.81 1212.95 L1452.22 1212.95 L1451.64 1212.95 L1451.05 1212.95 L1450.46 1212.95 L1449.88 1212.95 L1449.29 1212.95 L1448.7 1212.95 L1448.12 1212.95 L1447.53 1212.95 L1446.95 1212.95 L1446.36 1212.95 L1445.77 1212.95 L1445.19 1212.95 L1444.6 1212.95 L1444.01 1212.95 L1443.43 1212.95 L1442.84 1212.95 L1442.25 1212.95 L1441.67 1212.95 L1441.08 1212.95 L1440.5 1212.95 L1439.91 1212.95 L1439.32 1212.95 L1438.74 1212.95 L1438.15 1212.95 L1437.56 1212.95 L1436.98 1212.95 L1436.39 1212.95 L1435.8 1212.95 L1435.22 1212.95 L1434.63 1212.95 L1434.04 1212.95 L1433.46 1212.95 L1432.87 1212.95 L1432.29 1212.95 L1431.7 1212.95 L1431.11 1212.95 L1430.53 1212.95 L1429.94 1212.95 L1429.35 1212.95 L1428.77 1212.95 L1428.18 1212.95 L1427.59 1212.95 L1427.01 1212.95 L1426.42 1212.95 L1425.83 1212.95 L1425.25 1212.95 L1424.66 1212.95 L1424.08 1212.95 L1423.49 1212.95 L1422.9 1212.95 L1422.32 1212.95 L1421.73 1212.95 L1421.14 1212.95 L1420.56 1212.95 L1419.97 1212.95 L1419.38 1212.95 L1418.8 1212.95 L1418.21 1212.95 L1417.63 1212.95 L1417.04 1212.95 L1416.45 1212.95 L1415.87 1212.95 L1415.28 1212.95 L1414.69 1212.95 L1414.11 1212.95 L1413.52 1212.95 L1412.93 1212.95 L1412.35 1212.95 L1411.76 1212.95 L1411.17 1212.95 L1410.59 1212.95 L1410 1212.95 L1409.42 1212.95 L1408.83 1212.95 L1408.24 1212.95 L1407.66 1212.95 L1407.07 1212.95 L1406.48 1212.95 L1405.9 1212.95 L1405.31 1212.95 L1404.72 1212.95 L1404.14 1212.95 L1403.55 1212.95 L1402.96 1212.95 L1402.38 1212.95 L1401.79 1212.95 L1401.21 1212.95 L1400.62 1212.95 L1400.03 1212.95 L1399.45 1212.95 L1398.86 1212.95 L1398.27 1212.95 L1397.69 1212.95 L1397.1 1212.95 L1396.51 1212.95 L1395.93 1212.95 L1395.34 1212.95 L1394.75 1212.95 L1394.17 1212.95 L1393.58 1212.95 L1393 1212.95 L1392.41 1212.95 L1391.82 1212.95 L1391.24 1212.95 L1390.65 1212.95 L1390.06 1212.95 L1389.48 1212.95 L1388.89 1212.95 L1388.3 1212.95 L1387.72 1212.95 L1387.13 1212.95 L1386.55 1212.95 L1385.96 1212.95 L1385.37 1212.95 L1384.79 1212.95 L1384.2 1212.95 L1383.61 1212.95 L1383.03 1212.95 L1382.44 1212.95 L1381.85 1212.95 L1381.27 1212.95 L1380.68 1212.95 L1380.09 1212.95 L1379.51 1212.95 L1378.92 1212.95 L1378.34 1212.95 L1377.75 1212.95 L1377.16 1212.95 L1376.58 1212.95 L1375.99 1212.95 L1375.4 1212.95 L1374.82 1212.95 L1374.23 1212.95 L1373.64 1212.95 L1373.06 1212.95 L1372.47 1212.95 L1371.88 1212.95 L1371.3 1212.95 L1370.71 1212.95 L1370.13 1212.95 L1369.54 1212.95 L1368.95 1212.95 L1368.37 1212.95 L1367.78 1212.95 L1367.19 1212.95 L1366.61 1212.95 L1366.02 1212.95 L1365.43 1212.95 L1364.85 1212.95 L1364.26 1212.95 L1363.68 1212.95 L1363.09 1212.95 L1362.5 1212.95 L1361.92 1212.95 L1361.33 1212.95 L1360.74 1212.95 L1360.16 1212.95 L1359.57 1212.95 L1358.98 1212.95 L1358.4 1212.95 L1357.81 1212.95 L1357.22 1212.95 L1356.64 1212.95 L1356.05 1212.95 L1355.47 1212.95 L1354.88 1212.95 L1354.29 1212.95 L1353.71 1212.95 L1353.12 1212.95 L1352.53 1212.95 L1351.95 1212.95 L1351.36 1212.95 L1350.77 1212.95 L1350.19 1212.95 L1349.6 1212.95 L1349.01 1212.95 L1348.43 1212.95 L1347.84 1212.95 L1347.26 1212.95 L1346.67 1212.95 L1346.08 1212.95 L1345.5 1212.95 L1344.91 1212.95 L1344.32 1212.95 L1343.74 1212.95 L1343.15 1212.95 L1342.56 1212.95 L1341.98 1212.95 L1341.39 1212.95 L1340.8 1212.95 L1340.22 1212.95 L1339.63 1212.95 L1339.05 1212.95 L1338.46 1212.95 L1337.87 1212.95 L1337.29 1212.95 L1336.7 1212.95 L1336.11 1212.95 L1335.53 1212.95 L1334.94 1212.95 L1334.35 1212.95 L1333.77 1212.95 L1333.18 1212.95 L1332.6 1212.95 L1332.01 1212.95 L1331.42 1212.95 L1330.84 1212.95 L1330.25 1212.95 L1329.66 1212.95 L1329.08 1212.95 L1328.49 1212.95 L1327.9 1212.95 L1327.32 1212.95 L1326.73 1212.95 L1326.14 1212.95 L1325.56 1212.95 L1324.97 1212.95 L1324.39 1212.95 L1323.8 1212.95 L1323.21 1212.95 L1322.63 1212.95 L1322.04 1212.95 L1321.45 1212.95 L1320.87 1212.95 L1320.28 1212.95 L1319.69 1212.95 L1319.11 1212.95 L1318.52 1212.95 L1317.93 1212.95 L1317.35 1212.95 L1316.76 1212.95 L1316.18 1212.95 L1315.59 1212.95 L1315 1212.95 L1314.42 1212.95 L1313.83 1212.95 L1313.24 1212.95 L1312.66 1212.95 L1312.07 1212.95 L1311.48 1212.95 L1310.9 1212.95 L1310.31 1212.95 L1309.73 1212.95 L1309.14 1212.95 L1308.55 1212.95 L1307.97 1212.95 L1307.38 1212.95 L1306.79 1212.95 L1306.21 1212.95 L1305.62 1212.95 L1305.03 1212.95 L1304.45 1212.95 L1303.86 1212.95 L1303.27 1212.95 L1302.69 1212.95 L1302.1 1212.95 L1301.52 1212.95 L1300.93 1212.95 L1300.34 1212.95 L1299.76 1212.95 L1299.17 1212.95 L1298.58 1212.95 L1298 1212.95 L1297.41 1212.95 L1296.82 1212.95 L1296.24 1212.95 L1295.65 1212.95 L1295.06 1212.95 L1294.48 1212.95 L1293.89 1212.95 L1293.31 1212.95 L1292.72 1212.95 L1292.13 1212.95 L1291.55 1212.95 L1290.96 1212.95 L1290.37 1212.95 L1289.79 1212.95 L1289.2 1212.95 L1288.61 1212.95 L1288.03 1212.95 L1287.44 1212.95 L1286.86 1212.95 L1286.27 1212.95 L1285.68 1212.95 L1285.1 1212.95 L1284.51 1212.95 L1283.92 1212.95 L1283.34 1212.95 L1282.75 1212.95 L1282.16 1212.95 L1281.58 1212.95 L1280.99 1212.95 L1280.4 1212.95 L1279.82 1212.95 L1279.23 1212.95 L1278.65 1212.95 L1278.06 1212.95 L1277.47 1212.95 L1276.89 1212.95 L1276.3 1212.95 L1275.71 1212.95 L1275.13 1212.95 L1274.54 1212.95 L1273.95 1212.95 L1273.37 1212.95 L1272.78 1212.95 L1272.19 1212.95 L1271.61 1212.95 L1271.02 1212.95 L1270.44 1212.95 L1269.85 1212.95 L1269.26 1212.95 L1268.68 1212.95 L1268.09 1212.95 L1267.5 1212.95 L1266.92 1212.95 L1266.33 1212.95 L1265.74 1212.95 L1265.16 1212.95 L1264.57 1212.95 L1263.98 1212.95 L1263.4 1212.95 L1262.81 1212.95 L1262.23 1212.95 L1261.64 1212.95 L1261.05 1212.95 L1260.47 1212.95 L1259.88 1212.95 L1259.29 1212.95 L1258.71 1212.95 L1258.12 1212.95 L1257.53 1212.95 L1256.95 1212.95 L1256.36 1212.95 L1255.78 1212.95 L1255.19 1212.95 L1254.6 1212.95 L1254.02 1212.95 L1253.43 1212.95 L1252.84 1212.95 L1252.26 1212.95 L1251.67 1212.95 L1251.08 1212.95 L1250.5 1212.95 L1249.91 1212.95 L1249.32 1212.95 L1248.74 1212.95 L1248.15 1212.95 L1247.57 1212.95 L1246.98 1212.95 L1246.39 1212.95 L1245.81 1212.95 L1245.22 1212.95 L1244.63 1212.95 L1244.05 1212.95 L1243.46 1212.95 L1242.87 1212.95 L1242.29 1212.95 L1241.7 1212.95 L1241.11 1212.95 L1240.53 1212.95 L1239.94 1212.95 L1239.36 1212.95 L1238.77 1212.95 L1238.18 1212.95 L1237.6 1212.95 L1237.01 1212.95 L1236.42 1212.95 L1235.84 1212.95 L1235.25 1212.95 L1234.66 1212.95 L1234.08 1212.95 L1233.49 1212.95 L1232.91 1212.95 L1232.32 1212.95 L1231.73 1212.95 L1231.15 1212.95 L1230.56 1212.95 L1229.97 1212.95 L1229.39 1212.95 L1228.8 1212.95 L1228.21 1212.95 L1227.63 1212.95 L1227.04 1212.95 L1226.45 1212.95 L1225.87 1212.95 L1225.28 1212.95 L1224.7 1212.95 L1224.11 1212.95 L1223.52 1212.95 L1222.94 1212.95 L1222.35 1212.95 L1221.76 1212.95 L1221.18 1212.95 L1220.59 1212.95 L1220 1212.95 L1219.42 1212.95 L1218.83 1212.95 L1218.24 1212.95 L1217.66 1212.95 L1217.07 1212.95 L1216.49 1212.95 L1215.9 1212.95 L1215.31 1212.95 L1214.73 1212.95 L1214.14 1212.95 L1213.55 1212.95 L1212.97 1212.95 L1212.38 1212.95 L1211.79 1212.95 L1211.21 1212.95 L1210.62 1212.95 L1210.03 1212.95 L1209.45 1212.95 L1208.86 1212.95 L1208.28 1212.95 L1207.69 1212.95 L1207.1 1212.95 L1206.52 1212.95 L1205.93 1212.95 L1205.34 1212.95 L1204.76 1212.95 L1204.17 1212.95 L1203.58 1212.95 L1203 1212.95 L1202.41 1212.95 L1201.83 1212.95 L1201.24 1212.95 L1200.65 1212.95 L1200.07 1212.95 L1199.48 1212.95 L1198.89 1212.95 L1198.31 1212.95 L1197.72 1212.95 L1197.13 1212.95 L1196.55 1212.95 L1195.96 1212.95 L1195.37 1212.95 L1194.79 1212.95 L1194.2 1212.95 L1193.62 1212.95 L1193.03 1212.95 L1192.44 1212.95 L1191.86 1212.95 L1191.27 1212.95 L1190.68 1212.95 L1190.1 1212.95 L1189.51 1212.95 L1188.92 1212.95 L1188.34 1212.95 L1187.75 1212.95 L1187.16 1212.95 L1186.58 1212.95 L1185.99 1212.95 L1185.41 1212.95 L1184.82 1212.95 L1184.23 1212.95 L1183.65 1212.95 L1183.06 1212.95 L1182.47 1212.95 L1181.89 1212.95 L1181.3 1212.95 L1180.71 1212.95 L1180.13 1212.95 L1179.54 1212.95 L1178.96 1212.95 L1178.37 1212.95 L1177.78 1212.95 L1177.2 1212.95 L1176.61 1212.95 L1176.02 1212.95 L1175.44 1212.95 L1174.85 1212.95 L1174.26 1212.95 L1173.68 1212.95 L1173.09 1212.95 L1172.5 1212.95 L1171.92 1212.95 L1171.33 1212.95 L1170.75 1212.95 L1170.16 1212.95 L1169.57 1212.95 L1168.99 1212.95 L1168.4 1212.95 L1167.81 1212.95 L1167.23 1212.95 L1166.64 1212.95 L1166.05 1212.95 L1165.47 1212.95 L1164.88 1212.95 L1164.29 1212.95 L1163.71 1212.95 L1163.12 1212.95 L1162.54 1212.95 L1161.95 1212.95 L1161.36 1212.95 L1160.78 1212.95 L1160.19 1212.95 L1159.6 1212.95 L1159.02 1212.95 L1158.43 1212.95 L1157.84 1212.95 L1157.26 1212.95 L1156.67 1212.95 L1156.09 1212.95 L1155.5 1212.95 L1154.91 1212.95 L1154.33 1212.95 L1153.74 1212.95 L1153.15 1212.95 L1152.57 1212.95 L1151.98 1212.95 L1151.39 1212.95 L1150.81 1212.95 L1150.22 1212.95 L1149.63 1212.95 L1149.05 1212.95 L1148.46 1212.95 L1147.88 1212.95 L1147.29 1212.95 L1146.7 1212.95 L1146.12 1212.95 L1145.53 1212.95 L1144.94 1212.95 L1144.36 1212.95 L1143.77 1212.95 L1143.18 1212.95 L1142.6 1212.95 L1142.01 1212.95 L1141.42 1212.95 L1140.84 1212.95 L1140.25 1212.95 L1139.67 1212.95 L1139.08 1212.95 L1138.49 1212.95 L1137.91 1212.95 L1137.32 1212.95 L1136.73 1212.95 L1136.15 1212.95 L1135.56 1212.95 L1134.97 1212.95 L1134.39 1212.95 L1133.8 1212.95 L1133.21 1212.95 L1132.63 1212.95 L1132.04 1212.95 L1131.46 1212.95 L1130.87 1212.95 L1130.28 1212.95 L1129.7 1212.95 L1129.11 1212.95 L1128.52 1212.95 L1127.94 1212.95 L1127.35 1212.95 L1126.76 1212.95 L1126.18 1212.95 L1125.59 1212.95 L1125.01 1212.95 L1124.42 1212.95 L1123.83 1212.95 L1123.25 1212.95 L1122.66 1212.95 L1122.07 1212.95 L1121.49 1212.95 L1120.9 1212.95 L1120.31 1212.95 L1119.73 1212.95 L1119.14 1212.95 L1118.55 1212.95 L1117.97 1212.95 L1117.38 1212.95 L1116.8 1212.95 L1116.21 1212.95 L1115.62 1212.95 L1115.04 1212.95 L1114.45 1212.95 L1113.86 1212.95 L1113.28 1212.95 L1112.69 1212.95 L1112.1 1212.95 L1111.52 1212.95 L1110.93 1212.95 L1110.34 1212.95 L1109.76 1212.95 L1109.17 1212.95 L1108.59 1212.95 L1108 1212.95 L1107.41 1212.95 L1106.83 1212.95 L1106.24 1212.95 L1105.65 1212.95 L1105.07 1212.95 L1104.48 1212.95 L1103.89 1212.95 L1103.31 1212.95 L1102.72 1212.95 L1102.14 1212.95 L1101.55 1212.95 L1100.96 1212.95 L1100.38 1212.95 L1099.79 1212.95 L1099.2 1212.95 L1098.62 1212.95 L1098.03 1212.95 L1097.44 1212.95 L1096.86 1212.95 L1096.27 1212.95 L1095.68 1212.95 L1095.1 1212.95 L1094.51 1212.95 L1093.93 1212.95 L1093.34 1212.95 L1092.75 1212.95 L1092.17 1212.95 L1091.58 1212.95 L1090.99 1212.95 L1090.41 1212.95 L1089.82 1212.95 L1089.23 1212.95 L1088.65 1212.95 L1088.06 1212.95 L1087.47 1212.95 L1086.89 1212.95 L1086.3 1212.95 L1085.72 1212.95 L1085.13 1212.95 L1084.54 1212.95 L1083.96 1212.95 L1083.37 1212.95 L1082.78 1212.95 L1082.2 1212.95 L1081.61 1212.95 L1081.02 1212.95 L1080.44 1212.95 L1079.85 1212.95 L1079.26 1212.95 L1078.68 1212.95 L1078.09 1212.95 L1077.51 1212.95 L1076.92 1212.95 L1076.33 1212.95 L1075.75 1212.95 L1075.16 1212.95 L1074.57 1212.95 L1073.99 1212.95 L1073.4 1212.95 L1072.81 1212.95 L1072.23 1212.95 L1071.64 1212.95 L1071.06 1212.95 L1070.47 1212.95 L1069.88 1212.95 L1069.3 1212.95 L1068.71 1212.95 L1068.12 1212.95 L1067.54 1212.95 L1066.95 1212.95 L1066.36 1212.95 L1065.78 1212.95 L1065.19 1212.95 L1064.6 1212.95 L1064.02 1212.95 L1063.43 1212.95 L1062.85 1212.95 L1062.26 1212.95 L1061.67 1212.95 L1061.09 1212.95 L1060.5 1212.95 L1059.91 1212.95 L1059.33 1212.95 L1058.74 1212.95 L1058.15 1212.95 L1057.57 1212.95 L1056.98 1212.95 L1056.39 1212.95 L1055.81 1212.95 L1055.22 1212.95 L1054.64 1212.95 L1054.05 1212.95 L1053.46 1212.95 L1052.88 1212.95 L1052.29 1212.95 L1051.7 1212.95 L1051.12 1212.95 L1050.53 1212.95 L1049.94 1212.95 L1049.36 1212.95 L1048.77 1212.95 L1048.19 1212.95 L1047.6 1212.95 L1047.01 1212.95 L1046.43 1212.95 L1045.84 1212.95 L1045.25 1212.95 L1044.67 1212.95 L1044.08 1212.95 L1043.49 1212.95 L1042.91 1212.95 L1042.32 1212.95 L1041.73 1212.95 L1041.15 1212.95 L1040.56 1212.95 L1039.98 1212.95 L1039.39 1212.95 L1038.8 1212.95 L1038.22 1212.95 L1037.63 1212.95 L1037.04 1212.95 L1036.46 1212.95 L1035.87 1212.95 L1035.28 1212.95 L1034.7 1212.95 L1034.11 1212.95 L1033.52 1212.95 L1032.94 1212.95 L1032.35 1212.95 L1031.77 1212.95 L1031.18 1212.95 L1030.59 1212.95 L1030.01 1212.95 L1029.42 1212.95 L1028.83 1212.95 L1028.25 1212.95 L1027.66 1212.95 L1027.07 1212.95 L1026.49 1212.95 L1025.9 1212.95 L1025.32 1212.95 L1024.73 1212.95 L1024.14 1212.95 L1023.56 1212.95 L1022.97 1212.95 L1022.38 1212.95 L1021.8 1212.95 L1021.21 1212.95 L1020.62 1212.95 L1020.04 1212.95 L1019.45 1212.95 L1018.86 1212.95 L1018.28 1212.95 L1017.69 1212.95 L1017.11 1212.95 L1016.52 1212.95 L1015.93 1212.95 L1015.35 1212.95 L1014.76 1212.95 L1014.17 1212.95 L1013.59 1212.95 L1013 1212.95 L1012.41 1212.95 L1011.83 1212.95 L1011.24 1212.95 L1010.65 1212.95 L1010.07 1212.95 L1009.48 1212.95 L1008.9 1212.95 L1008.31 1212.95 L1007.72 1212.95 L1007.14 1212.95 L1006.55 1212.95 L1005.96 1212.95 L1005.38 1212.95 L1004.79 1212.95 L1004.2 1212.95 L1003.62 1212.95 L1003.03 1212.95 L1002.44 1212.95 L1001.86 1212.95 L1001.27 1212.95 L1000.69 1212.95 L1000.1 1212.95 L999.513 1212.95 L998.926 1212.95 L998.34 1212.95 L997.754 1212.95 L997.167 1212.95 L996.581 1212.95 L995.994 1212.95 L995.408 1212.95 L994.822 1212.95 L994.235 1212.95 L993.649 1212.95 L993.062 1212.95 L992.476 1212.95 L991.889 1212.95 L991.303 1212.95 L990.717 1212.95 L990.13 1212.95 L989.544 1212.95 L988.957 1212.95 L988.371 1212.95 L987.785 1212.95 L987.198 1212.95 L986.612 1212.95 L986.025 1212.95  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.02 986.612,1213.02 987.198,1213.02 987.785,1213.02 988.371,1213.02 988.957,1213.02 989.544,1213.02 990.13,1213.02 990.717,1213.02 991.303,1213.02 991.889,1213.02 992.476,1213.02 993.062,1213.02 993.649,1213.02 994.235,1213.02 994.822,1213.02 995.408,1213.02 995.994,1213.02 996.581,1213.02 997.167,1213.02 997.754,1213.02 998.34,1213.02 998.926,1213.02 999.513,1213.02 1000.1,1213.02 1000.69,1213.02 1001.27,1213.02 1001.86,1213.02 1002.44,1213.02 1003.03,1213.02 1003.62,1213.02 1004.2,1213.02 1004.79,1213.02 1005.38,1213.02 1005.96,1213.02 1006.55,1213.02 1007.14,1213.02 1007.72,1213.02 1008.31,1213.02 1008.9,1213.02 1009.48,1213.02 1010.07,1213.02 1010.65,1213.02 1011.24,1213.02 1011.83,1213.02 1012.41,1213.02 1013,1213.02 1013.59,1213.02 1014.17,1213.02 1014.76,1213.02 1015.35,1213.02 1015.93,1213.02 1016.52,1213.02 1017.11,1213.02 1017.69,1213.02 1018.28,1213.02 1018.86,1213.02 1019.45,1213.02 1020.04,1213.02 1020.62,1213.02 1021.21,1213.02 1021.8,1213.02 1022.38,1213.02 1022.97,1213.02 1023.56,1213.02 1024.14,1213.02 1024.73,1213.02 1025.32,1213.02 1025.9,1213.02 1026.49,1213.02 1027.07,1213.02 1027.66,1213.02 1028.25,1213.02 1028.83,1213.02 1029.42,1213.02 1030.01,1213.02 1030.59,1213.02 1031.18,1213.02 1031.77,1213.02 1032.35,1213.02 1032.94,1213.02 1033.52,1213.02 1034.11,1213.02 1034.7,1213.02 1035.28,1213.02 1035.87,1213.02 1036.46,1213.02 1037.04,1213.02 1037.63,1213.02 1038.22,1213.02 1038.8,1213.02 1039.39,1213.02 1039.98,1213.02 1040.56,1213.02 1041.15,1213.02 1041.73,1213.02 1042.32,1213.02 1042.91,1213.02 1043.49,1213.02 1044.08,1213.02 1044.67,1213.02 1045.25,1213.02 1045.84,1213.02 1046.43,1213.02 1047.01,1213.02 1047.6,1213.02 1048.19,1213.02 1048.77,1213.02 1049.36,1213.02 1049.94,1213.02 1050.53,1213.02 1051.12,1213.02 1051.7,1213.02 1052.29,1213.02 1052.88,1213.02 1053.46,1213.02 1054.05,1213.02 1054.64,1213.02 1055.22,1213.02 1055.81,1213.02 1056.39,1213.02 1056.98,1213.02 1057.57,1213.02 1058.15,1213.02 1058.74,1213.02 1059.33,1213.02 1059.91,1213.02 1060.5,1213.02 1061.09,1213.02 1061.67,1213.02 1062.26,1213.02 1062.85,1213.02 1063.43,1213.02 1064.02,1213.02 1064.6,1213.02 1065.19,1213.02 1065.78,1213.02 1066.36,1213.02 1066.95,1213.02 1067.54,1213.02 1068.12,1213.02 1068.71,1213.02 1069.3,1213.02 1069.88,1213.02 1070.47,1213.02 1071.06,1213.02 1071.64,1213.02 1072.23,1213.02 1072.81,1213.02 1073.4,1213.02 1073.99,1213.02 1074.57,1213.02 1075.16,1213.02 1075.75,1213.02 1076.33,1213.02 1076.92,1213.02 1077.51,1213.02 1078.09,1213.02 1078.68,1213.02 1079.26,1213.02 1079.85,1213.02 1080.44,1213.02 1081.02,1213.02 1081.61,1213.02 1082.2,1213.02 1082.78,1213.02 1083.37,1213.02 1083.96,1213.02 1084.54,1213.02 1085.13,1213.02 1085.72,1213.02 1086.3,1213.02 1086.89,1213.02 1087.47,1213.02 1088.06,1213.02 1088.65,1213.02 1089.23,1213.02 1089.82,1213.02 1090.41,1213.02 1090.99,1213.02 1091.58,1213.02 1092.17,1213.02 1092.75,1213.02 1093.34,1213.02 1093.93,1213.02 1094.51,1213.02 1095.1,1213.02 1095.68,1213.02 1096.27,1213.02 1096.86,1213.02 1097.44,1213.02 1098.03,1213.02 1098.62,1213.02 1099.2,1213.02 1099.79,1213.02 1100.38,1213.02 1100.96,1213.02 1101.55,1213.02 1102.14,1213.02 1102.72,1213.02 1103.31,1213.02 1103.89,1213.02 1104.48,1213.02 1105.07,1213.02 1105.65,1213.02 1106.24,1213.02 1106.83,1213.02 1107.41,1213.02 1108,1213.02 1108.59,1213.02 1109.17,1213.02 1109.76,1213.02 1110.34,1213.02 1110.93,1213.02 1111.52,1213.02 1112.1,1213.02 1112.69,1213.02 1113.28,1213.02 1113.86,1213.02 1114.45,1213.02 1115.04,1213.02 1115.62,1213.02 1116.21,1213.02 1116.8,1213.02 1117.38,1213.02 1117.97,1213.02 1118.55,1213.02 1119.14,1213.02 1119.73,1213.02 1120.31,1213.02 1120.9,1213.02 1121.49,1213.02 1122.07,1213.02 1122.66,1213.02 1123.25,1213.02 1123.83,1213.02 1124.42,1213.02 1125.01,1213.02 1125.59,1213.02 1126.18,1213.02 1126.76,1213.02 1127.35,1213.02 1127.94,1213.02 1128.52,1213.02 1129.11,1213.02 1129.7,1213.02 1130.28,1213.02 1130.87,1213.02 1131.46,1213.02 1132.04,1213.02 1132.63,1213.02 1133.21,1213.02 1133.8,1213.02 1134.39,1213.02 1134.97,1213.02 1135.56,1213.02 1136.15,1213.02 1136.73,1213.02 1137.32,1213.02 1137.91,1213.02 1138.49,1213.02 1139.08,1213.02 1139.67,1213.02 1140.25,1213.02 1140.84,1213.02 1141.42,1213.02 1142.01,1213.02 1142.6,1213.02 1143.18,1213.02 1143.77,1213.02 1144.36,1213.02 1144.94,1213.02 1145.53,1213.02 1146.12,1213.02 1146.7,1213.02 1147.29,1213.02 1147.88,1213.02 1148.46,1213.02 1149.05,1213.02 1149.63,1213.02 1150.22,1213.02 1150.81,1213.02 1151.39,1213.02 1151.98,1213.02 1152.57,1213.02 1153.15,1213.02 1153.74,1213.02 1154.33,1213.02 1154.91,1213.02 1155.5,1213.02 1156.09,1213.02 1156.67,1213.02 1157.26,1213.02 1157.84,1213.02 1158.43,1213.02 1159.02,1213.02 1159.6,1213.02 1160.19,1213.02 1160.78,1213.02 1161.36,1213.02 1161.95,1213.02 1162.54,1213.02 1163.12,1213.02 1163.71,1213.02 1164.29,1213.02 1164.88,1213.02 1165.47,1213.02 1166.05,1213.02 1166.64,1213.02 1167.23,1213.02 1167.81,1213.02 1168.4,1213.02 1168.99,1213.02 1169.57,1213.02 1170.16,1213.02 1170.75,1213.02 1171.33,1213.02 1171.92,1213.02 1172.5,1213.02 1173.09,1213.02 1173.68,1213.02 1174.26,1213.02 1174.85,1213.02 1175.44,1213.02 1176.02,1213.02 1176.61,1213.02 1177.2,1213.02 1177.78,1213.02 1178.37,1213.02 1178.96,1213.02 1179.54,1213.02 1180.13,1213.02 1180.71,1213.02 1181.3,1213.02 1181.89,1213.02 1182.47,1213.02 1183.06,1213.02 1183.65,1213.02 1184.23,1213.02 1184.82,1213.02 1185.41,1213.02 1185.99,1213.02 1186.58,1213.02 1187.16,1213.02 1187.75,1213.02 1188.34,1213.02 1188.92,1213.02 1189.51,1213.02 1190.1,1213.02 1190.68,1213.02 1191.27,1213.02 1191.86,1213.02 1192.44,1213.02 1193.03,1213.02 1193.62,1213.02 1194.2,1213.02 1194.79,1213.02 1195.37,1213.02 1195.96,1213.02 1196.55,1213.02 1197.13,1213.02 1197.72,1213.02 1198.31,1213.02 1198.89,1213.02 1199.48,1213.02 1200.07,1213.02 1200.65,1213.02 1201.24,1213.02 1201.83,1213.02 1202.41,1213.02 1203,1213.02 1203.58,1213.02 1204.17,1213.02 1204.76,1213.02 1205.34,1213.02 1205.93,1213.02 1206.52,1213.02 1207.1,1213.02 1207.69,1213.02 1208.28,1213.02 1208.86,1213.02 1209.45,1213.02 1210.03,1213.02 1210.62,1213.02 1211.21,1213.02 1211.79,1213.02 1212.38,1213.02 1212.97,1213.02 1213.55,1213.02 1214.14,1213.02 1214.73,1213.02 1215.31,1213.02 1215.9,1213.02 1216.49,1213.02 1217.07,1213.02 1217.66,1213.02 1218.24,1213.02 1218.83,1213.02 1219.42,1213.02 1220,1213.02 1220.59,1213.02 1221.18,1213.02 1221.76,1213.02 1222.35,1213.02 1222.94,1213.02 1223.52,1213.02 1224.11,1213.02 1224.7,1213.02 1225.28,1213.02 1225.87,1213.02 1226.45,1213.02 1227.04,1213.02 1227.63,1213.02 1228.21,1213.02 1228.8,1213.02 1229.39,1213.02 1229.97,1213.02 1230.56,1213.02 1231.15,1213.02 1231.73,1213.02 1232.32,1213.02 1232.91,1213.02 1233.49,1213.02 1234.08,1213.02 1234.66,1213.02 1235.25,1213.02 1235.84,1213.02 1236.42,1213.02 1237.01,1213.02 1237.6,1213.02 1238.18,1213.02 1238.77,1213.02 1239.36,1213.02 1239.94,1213.02 1240.53,1213.02 1241.11,1213.02 1241.7,1213.02 1242.29,1213.02 1242.87,1213.02 1243.46,1213.02 1244.05,1213.02 1244.63,1213.02 1245.22,1213.02 1245.81,1213.02 1246.39,1213.02 1246.98,1213.02 1247.57,1213.02 1248.15,1213.02 1248.74,1213.02 1249.32,1213.02 1249.91,1213.02 1250.5,1213.02 1251.08,1213.02 1251.67,1213.02 1252.26,1213.02 1252.84,1213.02 1253.43,1213.02 1254.02,1213.02 1254.6,1213.02 1255.19,1213.02 1255.78,1213.02 1256.36,1213.02 1256.95,1213.02 1257.53,1213.02 1258.12,1213.02 1258.71,1213.02 1259.29,1213.02 1259.88,1213.02 1260.47,1213.02 1261.05,1213.02 1261.64,1213.02 1262.23,1213.02 1262.81,1213.02 1263.4,1213.02 1263.98,1213.02 1264.57,1213.02 1265.16,1213.02 1265.74,1213.02 1266.33,1213.02 1266.92,1213.02 1267.5,1213.02 1268.09,1213.02 1268.68,1213.02 1269.26,1213.02 1269.85,1213.02 1270.44,1213.02 1271.02,1213.02 1271.61,1213.02 1272.19,1213.02 1272.78,1213.02 1273.37,1213.02 1273.95,1213.02 1274.54,1213.02 1275.13,1213.02 1275.71,1213.02 1276.3,1213.02 1276.89,1213.02 1277.47,1213.02 1278.06,1213.02 1278.65,1213.02 1279.23,1213.02 1279.82,1213.02 1280.4,1213.02 1280.99,1213.02 1281.58,1213.02 1282.16,1213.02 1282.75,1213.02 1283.34,1213.02 1283.92,1213.02 1284.51,1213.02 1285.1,1213.02 1285.68,1213.02 1286.27,1213.02 1286.86,1213.02 1287.44,1213.02 1288.03,1213.02 1288.61,1213.02 1289.2,1213.02 1289.79,1213.02 1290.37,1213.02 1290.96,1213.02 1291.55,1213.02 1292.13,1213.02 1292.72,1213.02 1293.31,1213.02 1293.89,1213.02 1294.48,1213.02 1295.06,1213.02 1295.65,1213.02 1296.24,1213.02 1296.82,1213.02 1297.41,1213.02 1298,1213.02 1298.58,1213.02 1299.17,1213.02 1299.76,1213.02 1300.34,1213.02 1300.93,1213.02 1301.52,1213.02 1302.1,1213.02 1302.69,1213.02 1303.27,1213.02 1303.86,1213.02 1304.45,1213.02 1305.03,1213.02 1305.62,1213.02 1306.21,1213.02 1306.79,1213.02 1307.38,1213.02 1307.97,1213.02 1308.55,1213.02 1309.14,1213.02 1309.73,1213.02 1310.31,1213.02 1310.9,1213.02 1311.48,1213.02 1312.07,1213.02 1312.66,1213.02 1313.24,1213.02 1313.83,1213.02 1314.42,1213.02 1315,1213.02 1315.59,1213.02 1316.18,1213.02 1316.76,1213.02 1317.35,1213.02 1317.93,1213.02 1318.52,1213.02 1319.11,1213.02 1319.69,1213.02 1320.28,1213.02 1320.87,1213.02 1321.45,1213.02 1322.04,1213.02 1322.63,1213.02 1323.21,1213.02 1323.8,1213.02 1324.39,1213.02 1324.97,1213.02 1325.56,1213.02 1326.14,1213.02 1326.73,1213.02 1327.32,1213.02 1327.9,1213.02 1328.49,1213.02 1329.08,1213.02 1329.66,1213.02 1330.25,1213.02 1330.84,1213.02 1331.42,1213.02 1332.01,1213.02 1332.6,1213.02 1333.18,1213.02 1333.77,1213.02 1334.35,1213.02 1334.94,1213.02 1335.53,1213.02 1336.11,1213.02 1336.7,1213.02 1337.29,1213.02 1337.87,1213.02 1338.46,1213.02 1339.05,1213.02 1339.63,1213.02 1340.22,1213.02 1340.8,1213.02 1341.39,1213.02 1341.98,1213.02 1342.56,1213.02 1343.15,1213.02 1343.74,1213.02 1344.32,1213.02 1344.91,1213.02 1345.5,1213.02 1346.08,1213.02 1346.67,1213.02 1347.26,1213.02 1347.84,1213.02 1348.43,1213.02 1349.01,1213.02 1349.6,1213.02 1350.19,1213.02 1350.77,1213.02 1351.36,1213.02 1351.95,1213.02 1352.53,1213.02 1353.12,1213.02 1353.71,1213.02 1354.29,1213.02 1354.88,1213.02 1355.47,1213.02 1356.05,1213.02 1356.64,1213.02 1357.22,1213.02 1357.81,1213.02 1358.4,1213.02 1358.98,1213.02 1359.57,1213.02 1360.16,1213.02 1360.74,1213.02 1361.33,1213.02 1361.92,1213.02 1362.5,1213.02 1363.09,1213.02 1363.68,1213.02 1364.26,1213.02 1364.85,1213.02 1365.43,1213.02 1366.02,1213.02 1366.61,1213.02 1367.19,1213.02 1367.78,1213.02 1368.37,1213.02 1368.95,1213.02 1369.54,1213.02 1370.13,1213.02 1370.71,1213.02 1371.3,1213.02 1371.88,1213.02 1372.47,1213.02 1373.06,1213.02 1373.64,1213.02 1374.23,1213.02 1374.82,1213.02 1375.4,1213.02 1375.99,1213.02 1376.58,1213.02 1377.16,1213.02 1377.75,1213.02 1378.34,1213.02 1378.92,1213.02 1379.51,1213.02 1380.09,1213.02 1380.68,1213.02 1381.27,1213.02 1381.85,1213.02 1382.44,1213.02 1383.03,1213.02 1383.61,1213.02 1384.2,1213.02 1384.79,1213.02 1385.37,1213.02 1385.96,1213.02 1386.55,1213.02 1387.13,1213.02 1387.72,1213.02 1388.3,1213.02 1388.89,1213.02 1389.48,1213.02 1390.06,1213.02 1390.65,1213.02 1391.24,1213.02 1391.82,1213.02 1392.41,1213.02 1393,1213.02 1393.58,1213.02 1394.17,1213.02 1394.75,1213.02 1395.34,1213.02 1395.93,1213.02 1396.51,1213.02 1397.1,1213.02 1397.69,1213.02 1398.27,1213.02 1398.86,1213.02 1399.45,1213.02 1400.03,1213.02 1400.62,1213.02 1401.21,1213.02 1401.79,1213.02 1402.38,1213.02 1402.96,1213.02 1403.55,1213.02 1404.14,1213.02 1404.72,1213.02 1405.31,1213.02 1405.9,1213.02 1406.48,1213.02 1407.07,1213.02 1407.66,1213.02 1408.24,1213.02 1408.83,1213.02 1409.42,1213.02 1410,1213.02 1410.59,1213.02 1411.17,1213.02 1411.76,1213.02 1412.35,1213.02 1412.93,1213.02 1413.52,1213.02 1414.11,1213.02 1414.69,1213.02 1415.28,1213.02 1415.87,1213.02 1416.45,1213.02 1417.04,1213.02 1417.63,1213.02 1418.21,1213.02 1418.8,1213.02 1419.38,1213.02 1419.97,1213.02 1420.56,1213.02 1421.14,1213.02 1421.73,1213.02 1422.32,1213.02 1422.9,1213.02 1423.49,1213.02 1424.08,1213.02 1424.66,1213.02 1425.25,1213.02 1425.83,1213.02 1426.42,1213.02 1427.01,1213.02 1427.59,1213.02 1428.18,1213.02 1428.77,1213.02 1429.35,1213.02 1429.94,1213.02 1430.53,1213.02 1431.11,1213.02 1431.7,1213.02 1432.29,1213.02 1432.87,1213.02 1433.46,1213.02 1434.04,1213.02 1434.63,1213.02 1435.22,1213.02 1435.8,1213.02 1436.39,1213.02 1436.98,1213.02 1437.56,1213.02 1438.15,1213.02 1438.74,1213.02 1439.32,1213.02 1439.91,1213.02 1440.5,1213.02 1441.08,1213.02 1441.67,1213.02 1442.25,1213.02 1442.84,1213.02 1443.43,1213.02 1444.01,1213.02 1444.6,1213.02 1445.19,1213.02 1445.77,1213.02 1446.36,1213.02 1446.95,1213.02 1447.53,1213.02 1448.12,1213.02 1448.7,1213.02 1449.29,1213.02 1449.88,1213.02 1450.46,1213.02 1451.05,1213.02 1451.64,1213.02 1452.22,1213.02 1452.81,1213.02 1453.4,1213.02 1453.98,1213.02 1454.57,1213.02 1455.16,1213.02 1455.74,1213.02 1456.33,1213.02 1456.91,1213.02 1457.5,1213.02 1458.09,1213.02 1458.67,1213.02 1459.26,1213.02 1459.85,1213.02 1460.43,1213.02 1461.02,1213.02 1461.61,1213.02 1462.19,1213.02 1462.78,1213.02 1463.37,1213.02 1463.95,1213.02 1464.54,1213.02 1465.12,1213.02 1465.71,1213.02 1466.3,1213.02 1466.88,1213.02 1467.47,1213.02 1468.06,1213.02 1468.64,1213.02 1469.23,1213.02 1469.82,1213.02 1470.4,1213.02 1470.99,1213.02 1471.57,1213.02 1472.16,1213.02 1472.75,1213.02 1473.33,1213.02 1473.92,1213.02 1474.51,1213.02 1475.09,1213.02 1475.68,1213.02 1476.27,1213.02 1476.85,1213.02 1477.44,1213.02 1478.03,1213.02 1478.61,1213.02 1479.2,1213.02 1479.78,1213.02 1480.37,1213.02 1480.96,1213.02 1481.54,1213.02 1482.13,1213.02 1482.72,1213.02 1483.3,1213.02 1483.89,1213.02 1484.48,1213.02 1485.06,1213.02 1485.65,1213.02 1486.24,1213.02 1486.82,1213.02 1487.41,1213.02 1487.99,1213.02 1488.58,1213.02 1489.17,1213.02 1489.75,1213.02 1490.34,1213.02 1490.93,1213.02 1491.51,1213.02 1492.1,1213.02 1492.69,1213.02 1493.27,1213.02 1493.86,1213.02 1494.45,1213.02 1495.03,1213.02 1495.62,1213.02 1496.2,1213.02 1496.79,1213.02 1497.38,1213.02 1497.96,1213.02 1498.55,1213.02 1499.14,1213.02 1499.72,1213.02 1500.31,1213.02 1500.9,1213.02 1501.48,1213.02 1502.07,1213.02 1502.65,1213.02 1503.24,1213.02 1503.83,1213.02 1504.41,1213.02 1505,1213.02 1505.59,1213.02 1506.17,1213.02 1506.76,1213.02 1507.35,1213.02 1507.93,1213.02 1508.52,1213.02 1509.11,1213.02 1509.69,1213.02 1510.28,1213.02 1510.86,1213.02 1511.45,1213.02 1512.04,1213.02 1512.62,1213.02 1513.21,1213.02 1513.8,1213.02 1514.38,1213.02 1514.97,1213.02 1515.56,1213.02 1516.14,1213.02 1516.73,1213.02 1517.32,1213.02 1517.9,1213.02 1518.49,1213.02 1519.07,1213.02 1519.66,1213.02 1520.25,1213.02 1520.83,1213.02 1521.42,1213.02 1522.01,1213.02 1522.59,1213.02 1523.18,1213.02 1523.77,1213.02 1524.35,1213.02 1524.94,1213.02 1525.52,1213.02 1526.11,1213.02 1526.7,1213.02 1527.28,1213.02 1527.87,1213.02 1528.46,1213.02 1529.04,1213.02 1529.63,1213.02 1530.22,1213.02 1530.8,1213.02 1531.39,1213.02 1531.98,1213.02 1532.56,1213.02 1533.15,1213.02 1533.73,1213.02 1534.32,1213.02 1534.91,1213.02 1535.49,1213.02 1536.08,1213.02 1536.67,1213.02 1537.25,1213.02 1537.84,1213.02 1538.43,1213.02 1539.01,1213.02 1539.6,1213.02 1540.19,1213.02 1540.77,1213.02 1541.36,1213.02 1541.94,1213.02 1542.53,1213.02 1543.12,1213.02 1543.7,1213.02 1544.29,1213.02 1544.88,1213.02 1545.46,1213.02 1546.05,1213.02 1546.64,1213.02 1547.22,1213.02 1547.81,1213.02 1548.4,1213.02 1548.98,1213.02 1549.57,1213.02 1550.15,1213.02 1550.74,1213.02 1551.33,1213.02 1551.91,1213.02 1552.5,1213.02 1553.09,1213.02 1553.67,1213.02 1554.26,1213.02 1554.85,1213.02 1555.43,1213.02 1556.02,1213.02 1556.6,1213.02 1557.19,1213.02 1557.78,1213.02 1558.36,1213.02 1558.95,1213.02 1559.54,1213.02 1560.12,1213.02 1560.71,1213.02 1561.3,1213.02 1561.88,1213.02 1562.47,1213.02 1563.06,1213.02 1563.64,1213.02 1564.23,1213.02 1564.81,1213.02 1565.4,1213.02 1565.99,1213.02 1566.57,1213.02 1567.16,1213.02 1567.75,1213.02 1568.33,1213.02 1568.92,1213.02 1569.51,1213.02 1570.09,1213.02 1570.68,1213.02 1571.27,1213.02 1571.85,1213.02 1572.44,1213.02 1573.02,1213.02 1573.61,1213.02 1574.2,1213.02 1574.78,1213.02 1575.37,1213.02 1575.96,1213.02 1576.54,1213.02 1577.13,1213.02 1577.72,1213.02 1578.3,1213.02 1578.89,1213.02 1579.47,1213.02 1580.06,1213.02 1580.65,1213.02 1581.23,1213.02 1581.82,1213.02 1582.41,1213.02 1582.99,1213.02 1583.58,1213.02 1584.17,1213.02 1584.75,1213.02 1585.34,1213.02 1585.93,1213.02 1586.51,1213.02 1587.1,1213.02 1587.68,1213.02 1588.27,1213.02 1588.86,1213.02 1589.44,1213.02 1590.03,1213.02 1590.62,1213.02 1591.2,1213.02 1591.79,1213.02 1592.38,1213.02 1592.96,1213.02 1593.55,1213.02 1594.14,1213.02 1594.72,1213.02 1595.31,1213.02 1595.89,1213.02 1596.48,1213.02 1597.07,1213.02 1597.65,1213.02 1598.24,1213.02 1598.83,1213.02 1599.41,1213.02 1600,1213.02 1600.59,1213.02 1601.17,1213.02 1601.76,1213.02 1602.34,1213.02 1602.93,1213.02 1603.52,1213.02 1604.1,1213.02 1604.69,1213.02 1605.28,1213.02 1605.86,1213.02 1606.45,1213.02 1607.04,1213.02 1607.62,1213.02 1608.21,1213.02 1608.8,1213.02 1609.38,1213.02 1609.97,1213.02 1610.55,1213.02 1611.14,1213.02 1611.73,1213.02 1612.31,1213.02 1612.9,1213.02 1613.49,1213.02 1614.07,1213.02 1614.66,1213.02 1615.25,1213.02 1615.83,1213.02 1616.42,1213.02 1617.01,1213.02 1617.59,1213.02 1618.18,1213.02 1618.76,1213.02 1619.35,1213.02 1619.94,1213.02 1620.52,1213.02 1621.11,1213.02 1621.7,1213.02 1622.28,1213.02 1622.87,1213.02 1623.46,1213.02 1624.04,1213.02 1624.63,1213.02 1625.22,1213.02 1625.8,1213.02 1626.39,1213.02 1626.97,1213.02 1627.56,1213.02 1628.15,1213.02 1628.73,1213.02 1629.32,1213.02 1629.91,1213.02 1630.49,1213.02 1631.08,1213.02 1631.67,1213.02 1632.25,1213.02 1632.84,1213.02 1633.42,1213.02 1634.01,1213.02 1634.6,1213.02 1635.18,1213.02 1635.77,1213.02 1636.36,1213.02 1636.94,1213.02 1637.53,1213.02 1638.12,1213.02 1638.7,1213.02 1639.29,1213.02 1639.88,1213.02 1640.46,1213.02 1641.05,1213.02 1641.63,1213.02 1642.22,1213.02 1642.81,1213.02 1643.39,1213.02 1643.98,1213.02 1644.57,1213.02 1645.15,1213.02 1645.74,1213.02 1646.33,1213.02 1646.91,1213.02 1647.5,1213.02 1648.09,1213.02 1648.67,1213.02 1649.26,1213.02 1649.84,1213.02 1650.43,1213.02 1651.02,1213.02 1651.6,1213.02 1652.19,1213.02 1652.78,1213.02 1653.36,1213.02 1653.95,1213.02 1654.54,1213.02 1655.12,1213.02 1655.71,1213.02 1656.29,1213.02 1656.88,1213.02 1657.47,1213.02 1658.05,1213.02 1658.64,1213.02 1659.23,1213.02 1659.81,1213.02 1660.4,1213.02 1660.99,1213.02 1661.57,1213.02 1662.16,1213.02 1662.75,1213.02 1663.33,1213.02 1663.92,1213.02 1664.5,1213.02 1665.09,1213.02 1665.68,1213.02 1666.26,1213.02 1666.85,1213.02 1667.44,1213.02 1668.02,1213.02 1668.61,1213.02 1669.2,1213.02 1669.78,1213.02 1670.37,1213.02 1670.96,1213.02 1671.54,1213.02 1672.13,1213.02 1672.71,1213.02 1673.3,1213.02 1673.89,1213.02 1674.47,1213.02 1675.06,1213.02 1675.65,1213.02 1676.23,1213.02 1676.82,1213.02 1677.41,1213.02 1677.99,1213.02 1678.58,1213.02 1679.17,1213.02 1679.75,1213.02 1680.34,1213.02 1680.92,1213.02 1681.51,1213.02 1682.1,1213.02 1682.68,1213.02 1683.27,1213.02 1683.86,1213.02 1684.44,1213.02 1685.03,1213.02 1685.62,1213.02 1686.2,1213.02 1686.79,1213.02 1687.37,1213.02 1687.96,1213.02 1688.55,1213.02 1689.13,1213.02 1689.72,1213.02 1690.31,1213.02 1690.89,1213.02 1691.48,1213.02 1692.07,1213.02 1692.65,1213.02 1693.24,1213.02 1693.83,1213.02 1694.41,1213.02 1695,1213.02 1695.58,1213.02 1696.17,1213.02 1696.76,1213.02 1697.34,1213.02 1697.93,1213.02 1698.52,1213.02 1699.1,1213.02 1699.69,1213.02 1700.28,1213.02 1700.86,1213.02 1701.45,1213.02 1702.04,1213.02 1702.62,1213.02 1703.21,1213.02 1703.79,1213.02 1704.38,1213.02 1704.97,1213.02 1705.55,1213.02 1706.14,1213.02 1706.73,1213.02 1707.31,1213.02 1707.9,1213.02 1708.49,1213.02 1709.07,1213.02 1709.66,1213.02 1710.24,1213.02 1710.83,1213.02 1711.42,1213.02 1712,1213.02 1712.59,1213.02 1713.18,1213.02 1713.76,1213.02 1714.35,1213.02 1714.94,1213.02 1715.52,1213.02 1716.11,1213.02 1716.7,1213.02 1717.28,1213.02 1717.87,1213.02 1718.45,1213.02 1719.04,1213.02 1719.63,1213.02 1720.21,1213.02 1720.8,1213.02 1721.39,1213.02 1721.97,1213.02 1722.56,1213.02 1723.15,1213.02 1723.73,1213.02 1724.32,1213.02 1724.91,1213.02 1725.49,1213.02 1726.08,1213.02 1726.66,1213.02 1727.25,1213.02 1727.84,1213.02 1728.42,1213.02 1729.01,1213.02 1729.6,1213.02 1730.18,1213.02 1730.77,1213.02 1731.36,1213.02 1731.94,1213.02 1732.53,1213.02 1733.11,1213.02 1733.7,1213.02 1734.29,1213.02 1734.87,1213.02 1735.46,1213.02 1736.05,1213.02 1736.63,1213.02 1737.22,1213.02 1737.81,1213.02 1738.39,1213.02 1738.98,1213.02 1739.57,1213.02 1740.15,1213.02 1740.74,1213.02 1741.32,1213.02 1741.91,1213.02 1742.5,1213.02 1743.08,1213.02 1743.67,1213.02 1744.26,1213.02 1744.84,1213.02 1745.43,1213.02 1746.02,1213.02 1746.6,1213.02 1747.19,1213.02 1747.78,1213.02 1748.36,1213.02 1748.95,1213.02 1749.53,1213.02 1750.12,1213.02 1750.71,1213.02 1751.29,1213.02 1751.88,1213.02 1752.47,1213.02 1753.05,1213.02 1753.64,1213.02 1754.23,1213.02 1754.81,1213.02 1755.4,1213.02 1755.99,1213.02 1756.57,1213.02 1757.16,1213.02 1757.74,1213.02 1758.33,1213.02 1758.92,1213.02 1759.5,1213.02 1760.09,1213.02 1760.68,1213.02 1761.26,1213.02 1761.85,1213.02 1762.44,1213.02 1763.02,1213.02 1763.61,1213.02 1764.19,1213.02 1764.78,1213.02 1765.37,1213.02 1765.95,1213.02 1766.54,1213.02 1767.13,1213.02 1767.71,1213.02 1768.3,1213.02 1768.89,1213.02 1769.47,1213.02 1770.06,1213.02 1770.65,1213.02 1771.23,1213.02 1771.82,1213.02 1772.4,1213.02 1772.99,1213.02 1773.58,1213.02 1774.16,1213.02 1774.75,1213.02 1775.34,1213.02 1775.92,1213.02 1776.51,1213.02 1777.1,1213.02 1777.68,1213.02 1778.27,1213.02 1778.86,1213.02 1779.44,1213.02 1780.03,1213.02 1780.61,1213.02 1781.2,1213.02 1781.79,1213.02 1782.37,1213.02 1782.96,1213.02 1783.55,1213.02 1784.13,1213.02 1784.72,1213.02 1785.31,1213.02 1785.89,1213.02 1786.48,1213.02 1787.06,1213.02 1787.65,1213.02 1788.24,1213.02 1788.82,1213.02 1789.41,1213.02 1790,1213.02 1790.58,1213.02 1791.17,1213.02 1791.76,1213.02 1792.34,1213.02 1792.93,1213.02 1793.52,1213.02 1794.1,1213.02 1794.69,1213.02 1795.27,1213.02 1795.86,1213.02 1796.45,1213.02 1797.03,1213.02 1797.62,1213.02 1798.21,1213.02 1798.79,1213.02 1799.38,1213.02 1799.97,1213.02 1800.55,1213.02 1801.14,1213.02 1801.73,1213.02 1802.31,1213.02 1802.9,1213.02 1803.48,1213.02 1804.07,1213.02 1804.66,1213.02 1805.24,1213.02 1805.83,1213.02 1806.42,1213.02 1807,1213.02 1807.59,1213.02 1808.18,1213.02 1808.76,1213.02 1809.35,1213.02 1809.94,1213.02 1810.52,1213.02 1811.11,1213.02 1811.69,1213.02 1812.28,1213.02 1812.87,1213.02 1813.45,1213.02 1814.04,1213.02 1814.63,1213.02 1815.21,1213.02 1815.8,1213.02 1816.39,1213.02 1816.97,1213.02 1817.56,1213.02 1818.14,1213.02 1818.73,1213.02 1819.32,1213.02 1819.9,1213.02 1820.49,1213.02 1821.08,1213.02 1821.66,1213.02 1822.25,1213.02 1822.84,1213.02 1823.42,1213.02 1824.01,1213.02 1824.6,1213.02 1825.18,1213.02 1825.77,1213.02 1826.35,1213.02 1826.94,1213.02 1827.53,1213.02 1828.11,1213.02 1828.7,1213.02 1829.29,1213.02 1829.87,1213.02 1830.46,1213.02 1831.05,1213.02 1831.63,1213.02 1832.22,1213.02 1832.81,1213.02 1833.39,1213.02 1833.98,1213.02 1834.56,1213.02 1835.15,1213.02 1835.74,1213.02 1836.32,1213.02 1836.91,1213.02 1837.5,1213.02 1838.08,1213.02 1838.67,1213.02 1839.26,1213.02 1839.84,1213.02 1840.43,1213.02 1841.01,1213.02 1841.6,1213.02 1842.19,1213.02 1842.77,1213.02 1843.36,1213.02 1843.95,1213.02 1844.53,1213.02 1845.12,1213.02 1845.71,1213.02 1846.29,1213.02 1846.88,1213.02 1847.47,1213.02 1848.05,1213.02 1848.64,1213.02 1849.22,1213.02 1849.81,1213.02 1850.4,1213.02 1850.98,1213.02 1851.57,1213.02 1852.16,1213.02 1852.74,1213.02 1853.33,1213.02 1853.92,1213.02 1854.5,1213.02 1855.09,1213.02 1855.68,1213.02 1856.26,1213.02 1856.85,1213.02 1857.43,1213.02 1858.02,1213.02 1858.61,1213.02 1859.19,1213.02 1859.78,1213.02 1860.37,1213.02 1860.95,1213.02 1861.54,1213.02 1862.13,1213.02 1862.71,1213.02 1863.3,1213.02 1863.88,1213.02 1864.47,1213.02 1865.06,1213.02 1865.64,1213.02 1866.23,1213.02 1866.82,1213.02 1867.4,1213.02 1867.99,1213.02 1868.58,1213.02 1869.16,1213.02 1869.75,1213.02 1870.34,1213.02 1870.92,1213.02 1871.51,1213.02 1872.09,1213.02 1872.68,1213.02 1873.27,1213.02 1873.85,1213.02 1874.44,1213.02 1875.03,1213.02 1875.61,1213.02 1876.2,1213.02 1876.79,1213.02 1877.37,1213.02 1877.96,1213.02 1878.55,1213.02 1879.13,1213.02 1879.72,1213.02 1880.3,1213.02 1880.89,1213.02 1881.48,1213.02 1882.06,1213.02 1882.65,1213.02 1883.24,1213.02 1883.82,1213.02 1884.41,1213.02 1885,1213.02 1885.58,1213.02 1886.17,1213.02 1886.76,1213.02 1887.34,1213.02 1887.93,1213.02 1888.51,1213.02 1889.1,1213.02 1889.69,1213.02 1890.27,1213.02 1890.86,1213.02 1891.45,1213.02 1892.03,1213.02 1892.62,1213.02 1893.21,1213.02 1893.79,1213.02 1894.38,1213.02 1894.96,1213.02 1895.55,1213.02 1896.14,1213.02 1896.72,1213.02 1897.31,1213.02 1897.9,1213.02 1898.48,1213.02 1899.07,1213.02 1899.66,1213.02 1900.24,1213.02 1900.83,1213.02 1901.42,1213.02 1902,1213.02 1902.59,1213.02 1903.17,1213.02 1903.76,1213.02 1904.35,1213.02 1904.93,1213.02 1905.52,1213.02 1906.11,1213.02 1906.69,1213.02 1907.28,1213.02 1907.87,1213.02 1908.45,1213.02 1909.04,1213.02 1909.63,1213.02 1910.21,1213.02 1910.8,1213.02 1911.38,1213.02 1911.97,1213.02 1912.56,1213.02 1913.14,1213.02 1913.73,1213.02 1914.32,1213.02 1914.9,1213.02 1915.49,1213.02 1916.08,1213.02 1916.66,1213.02 1917.25,1213.02 1917.83,1213.02 1918.42,1213.02 1919.01,1213.02 1919.59,1213.02 1920.18,1213.02 1920.77,1213.02 1921.35,1213.02 1921.94,1213.02 1922.53,1213.02 1923.11,1213.02 1923.7,1213.02 1924.29,1213.02 1924.87,1213.02 1925.46,1213.02 1926.04,1213.02 1926.63,1213.02 1927.22,1213.02 1927.8,1213.02 1928.39,1213.02 1928.98,1213.02 1929.56,1213.02 1930.15,1213.02 1930.74,1213.02 1931.32,1213.02 1931.91,1213.02 1932.5,1213.02 1933.08,1213.02 1933.67,1213.02 1934.25,1213.02 1934.84,1213.02 1935.43,1213.02 1936.01,1213.02 1936.6,1213.02 1937.19,1213.02 1937.77,1213.02 1938.36,1213.02 1938.95,1213.02 1939.53,1213.02 1940.12,1213.02 1940.71,1213.02 1941.29,1213.02 1941.88,1213.02 1942.46,1213.02 1943.05,1213.02 1943.64,1213.02 1944.22,1213.02 1944.81,1213.02 1945.4,1213.02 1945.98,1213.02 1946.57,1213.02 1947.16,1213.02 1947.74,1213.02 1948.33,1213.02 1948.91,1213.02 1949.5,1213.02 1950.09,1213.02 1950.67,1213.02 1951.26,1213.02 1951.85,1213.02 1952.43,1213.02 1953.02,1213.02 1953.61,1213.02 1954.19,1213.02 1954.78,1213.02 1955.37,1213.02 1955.95,1213.02 1956.54,1213.02 1957.12,1213.02 1957.71,1213.02 1958.3,1213.02 1958.88,1213.02 1959.47,1213.02 1960.06,1213.02 1960.64,1213.02 1961.23,1213.02 1961.82,1213.02 1962.4,1213.02 1962.99,1213.02 1963.58,1213.02 1964.16,1213.02 1964.75,1213.02 1965.33,1213.02 1965.92,1213.02 1966.51,1213.02 1967.09,1213.02 1967.68,1213.02 1968.27,1213.02 1968.85,1213.02 1969.44,1213.02 1970.03,1213.02 1970.61,1213.02 1971.2,1213.02 1971.78,1213.02 1972.37,1213.02 1972.96,1213.02 1973.54,1213.02 1974.13,1213.02 1974.72,1213.02 1975.3,1213.02 1975.89,1213.02 1976.48,1213.02 1977.06,1213.02 1977.65,1213.02 1978.24,1213.02 1978.82,1213.02 1979.41,1213.02 1979.99,1213.02 1980.58,1213.02 1981.17,1213.02 1981.75,1213.02 1982.34,1213.02 1982.93,1213.02 1983.51,1213.02 1984.1,1213.02 1984.69,1213.02 1985.27,1213.02 1985.86,1213.02 1986.45,1213.02 1987.03,1213.02 1987.62,1213.02 1988.2,1213.02 1988.79,1213.02 1989.38,1213.02 1989.96,1213.02 1990.55,1213.02 1991.14,1213.02 1991.72,1213.02 1992.31,1213.02 1992.9,1213.02 1993.48,1213.02 1994.07,1213.02 1994.65,1213.02 1995.24,1213.02 1995.83,1213.02 1996.41,1213.02 1997,1213.02 1997.59,1213.02 1998.17,1213.02 1998.76,1213.02 1999.35,1213.02 1999.93,1213.02 2000.52,1213.02 2001.11,1213.02 2001.69,1213.02 2002.28,1213.02 2002.86,1213.02 2003.45,1213.02 2004.04,1213.02 2004.62,1213.02 2005.21,1213.02 2005.8,1213.02 2006.38,1213.02 2006.97,1213.02 2007.56,1213.02 2008.14,1213.02 2008.73,1213.02 2009.32,1213.02 2009.9,1213.02 2010.49,1213.02 2011.07,1213.02 2011.66,1213.02 2012.25,1213.02 2012.83,1213.02 2013.42,1213.02 2014.01,1213.02 2014.59,1213.02 2015.18,1213.02 2015.77,1213.02 2016.35,1213.02 2016.94,1213.02 2017.53,1213.02 2018.11,1213.02 2018.7,1213.02 2019.28,1213.02 2019.87,1213.02 2020.46,1213.02 2021.04,1213.02 2021.63,1213.02 2022.22,1213.02 2022.8,1213.02 2023.39,1213.02 2023.98,1213.02 2024.56,1213.02 2025.15,1213.02 2025.73,1213.02 2026.32,1213.02 2026.91,1213.02 2027.49,1213.02 2028.08,1213.02 2028.67,1213.02 2029.25,1213.02 2029.84,1213.02 2030.43,1213.02 2031.01,1213.02 2031.6,1213.02 2032.19,1213.02 2032.77,1213.02 2033.36,1213.02 2033.94,1213.02 2034.53,1213.02 2035.12,1213.02 2035.7,1213.02 2036.29,1213.02 2036.88,1213.02 2037.46,1213.02 2038.05,1213.02 2038.64,1213.02 2039.22,1213.02 2039.81,1213.02 2040.4,1213.02 2040.98,1213.02 2041.57,1213.02 2042.15,1213.02 2042.74,1213.02 2043.33,1213.02 2043.91,1213.02 2044.5,1213.02 2045.09,1213.02 2045.67,1213.02 2046.26,1213.02 2046.85,1213.02 2047.43,1213.02 2048.02,1213.02 2048.6,1213.02 2049.19,1213.02 2049.78,1213.02 2050.36,1213.02 2050.95,1213.02 2051.54,1213.02 2052.12,1213.02 2052.71,1213.02 2053.3,1213.02 2053.88,1213.02 2054.47,1213.02 2055.06,1213.02 2055.64,1213.02 2056.23,1213.02 2056.81,1213.02 2057.4,1213.02 2057.99,1213.02 2058.57,1213.02 2059.16,1213.02 2059.75,1213.02 2060.33,1213.02 2060.92,1213.02 2061.51,1213.02 2062.09,1213.02 2062.68,1213.02 2063.27,1213.02 2063.85,1213.02 2064.44,1213.02 2065.02,1213.02 2065.61,1213.02 2066.2,1213.02 2066.78,1213.02 2067.37,1213.02 2067.96,1213.02 2068.54,1213.02 2069.13,1213.02 2069.72,1213.02 2070.3,1213.02 2070.89,1213.02 2071.48,1213.02 2072.06,1213.02 2072.65,1213.02 2073.23,1213.02 2073.82,1213.02 2074.41,1213.02 2074.99,1213.02 2075.58,1213.02 2076.17,1213.02 2076.75,1213.02 2077.34,1213.02 2077.93,1213.02 2078.51,1213.02 2079.1,1213.02 2079.68,1213.02 2080.27,1213.02 2080.86,1213.02 2081.44,1213.02 2082.03,1213.02 2082.62,1213.02 2083.2,1213.02 2083.79,1213.02 2084.38,1213.02 2084.96,1213.02 2085.55,1213.02 2086.14,1213.02 2086.72,1213.02 2087.31,1213.02 2087.89,1213.02 2088.48,1213.02 2089.07,1213.02 2089.65,1213.02 2090.24,1213.02 2090.83,1213.02 2091.41,1213.02 2092,1213.02 2092.59,1213.02 2093.17,1213.02 2093.76,1213.02 2094.35,1213.02 2094.93,1213.02 2095.52,1213.02 2096.1,1213.02 2096.69,1213.02 2097.28,1213.02 2097.86,1213.02 2098.45,1213.02 2099.04,1213.02 2099.62,1213.02 2100.21,1213.02 2100.8,1213.02 2101.38,1213.02 2101.97,1213.02 2102.55,1213.02 2103.14,1213.02 2103.73,1213.02 2104.31,1213.02 2104.9,1213.02 2105.49,1213.02 2106.07,1213.02 2106.66,1213.02 2107.25,1213.02 2107.83,1213.02 2108.42,1213.02 2109.01,1213.02 2109.59,1213.02 2110.18,1213.02 2110.76,1213.02 2111.35,1213.02 2111.94,1213.02 2112.52,1213.02 2113.11,1213.02 2113.7,1213.02 2114.28,1213.02 2114.87,1213.02 2115.46,1213.02 2116.04,1213.02 2116.63,1213.02 2117.22,1213.02 2117.8,1213.02 2118.39,1213.02 2118.97,1213.02 2119.56,1213.02 2120.15,1213.02 2120.73,1213.02 2121.32,1213.02 2121.91,1213.02 2122.49,1213.02 2123.08,1213.02 2123.67,1213.02 2124.25,1213.02 2124.84,1213.02 2125.42,1213.02 2126.01,1213.02 2126.6,1213.02 2127.18,1213.02 2127.77,1213.02 2128.36,1213.02 2128.94,1213.02 2129.53,1213.02 2130.12,1213.02 2130.7,1213.02 2131.29,1213.02 2131.88,1213.02 2132.46,1213.02 2133.05,1213.02 2133.63,1213.02 2134.22,1213.02 2134.81,1213.02 2135.39,1213.02 2135.98,1213.02 2136.57,1213.02 2137.15,1213.02 2137.74,1213.02 2138.33,1213.02 2138.91,1213.02 2139.5,1213.02 2140.09,1213.02 2140.67,1213.02 2141.26,1213.02 2141.84,1213.02 2142.43,1213.02 2143.02,1213.02 2143.6,1213.02 2144.19,1213.02 2144.78,1213.02 2145.36,1213.02 2145.95,1213.02 2146.54,1213.02 2147.12,1213.02 2147.71,1213.02 2148.3,1213.02 2148.88,1213.02 2149.47,1213.02 2150.05,1213.02 2150.64,1213.02 2151.23,1213.02 2151.81,1213.02 2152.4,1213.02 2152.99,1213.02 2153.57,1213.02 2154.16,1213.02 2154.75,1213.02 2155.33,1213.02 2155.92,1213.02 2156.5,1213.02 2157.09,1213.02 2157.68,1213.02 2158.26,1213.02 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.58,1195.92 1399.2,899.083 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.6 985.439,1195.92 2158.26,1195.92 2158.26,1229.6 985.439,1229.6 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip053\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip053)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-7631.25 165.469,-8398.71 166.029,-7969.91 166.588,-8653.65 167.147,-9271.27 167.706,-9812.05 168.266,-10310.8 168.825,-10755.4 169.384,-11149.4 169.943,-11496.1 170.503,-11781.2 171.062,-12043.3 171.621,-11631.2 172.18,-11839.3 172.74,-12036.6 173.299,-12200.2 173.858,-11839.1 174.417,-11512.7 174.977,-11606.5 175.536,-11286.2 176.095,-11342.6 176.655,-11382.5 177.214,-11073.7 177.773,-11068.6 178.332,-10780.4 178.892,-10511.1 179.451,-10484.3 180.01,-10212.3 180.569,-9932.9 181.129,-9871.69 181.688,-9804.7 182.247,-9733.73 182.806,-9645.04 183.366,-8913 183.925,-8818.5 184.484,-8701.44 185.043,-8593.75 185.603,-8479.24 186.162,-8124.37 186.721,-7998.36 187.28,-7655.83 187.84,-7540.1 188.399,-7328.31 188.958,-7097.88 189.517,-6884.86 190.077,-6759.03 190.636,-6637.2 191.195,-6427.72 191.754,-6083.45 192.314,-5901.77 192.873,-5724.2 193.432,-5616.87 193.991,-5502.37 194.551,-5260.84 195.11,-5101.98 195.669,-4936.76 196.228,-4834.57 196.788,-4558.66 197.347,-4295.91 197.906,-4153.67 198.465,-4013.38 199.025,-3869.76 199.584,-3553.53 200.143,-3390.68 200.702,-3270.3 201.262,-3106.34 201.821,-2960.06 202.38,-2891.35 202.939,-2714.24 203.499,-2654.19 204.058,-2552.55 204.617,-2458.89 205.176,-2295.13 205.736,-2204.88 206.295,-2085.15 206.854,-1965.07 207.413,-1846.5 207.973,-1673.83 208.532,-1597.06 209.091,-1465.72 209.65,-1423.33 210.21,-1354.08 210.769,-1316.84 211.328,-1247.67 211.887,-1150.89 212.447,-1057.46 213.006,-998.784 213.565,-963.934 214.124,-902.35 214.684,-840.27 215.243,-754.515 215.802,-698.077 216.361,-595.757 216.921,-565.962 217.48,-492.221 218.039,-443.443 218.598,-419.769 219.158,-327.401 219.717,-238.787 220.276,-222.265 220.835,-204.053 221.395,-185.67 221.954,-122.355 222.513,-105.977 223.072,-42.2468 223.632,-6.40079 224.191,74.6103 224.75,129.364 225.309,141.429 225.869,132.443 226.428,164.118 226.987,173.874 227.546,229.38 228.106,242.217 228.665,254.442 229.224,265.289 229.783,316.837 230.343,406.42 230.902,452.862 231.461,457.177 232.02,463.352 232.58,489.522 233.139,512.263 233.698,553.209 234.257,576.373 234.817,654.985 235.376,654.148 235.935,637.396 236.494,641.333 237.054,677.576 237.613,715.956 238.172,751.997 238.731,790.461 239.291,826.083 239.85,823.67 240.409,820.478 240.968,854.373 241.528,854.116 242.087,868.774 242.646,862.065 243.205,912.386 243.765,904.703 244.324,933.494 244.883,932.439 245.442,964.18 246.002,975.833 246.561,1022.88 247.12,1050.87 247.679,1040.68 248.239,1029.14 248.798,1019.83 249.357,1045.23 249.916,1038.46 250.476,1080.41 251.035,1067.2 251.594,1059.57 252.153,1035.49 252.713,1045.52 253.272,1055.38 253.831,1062.32 254.39,1034.58 254.95,1045.84 255.509,1005.83 256.068,1017.64 256.627,1032.03 257.187,1037.33 257.746,1032.85 258.305,1027.38 258.864,1034.75 259.424,1014.55 259.983,1043.63 260.542,1051.96 261.101,1059.05 261.661,1048.84 262.22,1062.8 262.779,1036.58 263.338,1012.14 263.898,1042.08 264.457,1033.07 265.016,1056.88 265.575,1046.78 266.135,1071.67 266.694,1034.52 267.253,1029.66 267.812,1041.45 268.372,1067.44 268.931,1063.63 269.49,1054.84 270.049,1044.07 270.609,1088.66 271.168,1084.08 271.727,1078.2 272.286,1086.69 272.846,1100.44 273.405,1076.47 273.964,1071.4 274.523,1080.96 275.083,1074.69 275.642,1052.21 276.201,1046.76 276.76,1022.77 277.32,1037.42 277.879,1046.19 278.438,1074.97 278.997,1069.96 279.557,1046.79 280.116,1072.44 280.675,1131.26 281.234,1121.88 281.794,1130.71 282.353,1123.59 282.912,1131.97 283.471,1118.4 284.031,1123.13 284.59,1114.86 285.149,1170.54 285.708,1155.59 286.268,1133.48 286.827,1105.96 287.386,1093.53 287.945,1098.09 288.505,1120.86 289.064,1127.37 289.623,1098.74 290.182,1088.71 290.742,1063.78 291.301,1073.34 291.86,1081.19 292.419,1107.75 292.979,1112.49 293.538,1034.74 294.097,1014.36 294.656,978.52 295.216,955.252 295.775,988.624 296.334,987.665 296.893,984.698 297.453,965.368 298.012,964.039 298.571,944.109 299.13,960.257 299.69,955.132 300.249,917.98 300.808,935.223 301.368,934.183 301.927,947.804 302.486,945.027 303.045,943.407 303.605,940.782 304.164,941.222 304.723,921.224 305.282,971.534 305.842,949.266 306.401,965.013 306.96,946.683 307.519,977.376 308.079,1053.53 308.638,1078.59 309.197,1087.12 309.756,1075.91 310.316,1067.35 310.875,1039.57 311.434,1031.29 311.993,1037.91 312.553,1059.04 313.112,1064.13 313.671,1023.35 314.23,998.718 314.79,942.164 315.349,919.488 315.908,935.613 316.467,916.33 317.027,928.507 317.586,942.227 318.145,973.281 318.704,982.896 319.264,976.04 319.823,987.155 320.382,1014.22 320.941,993.615 321.501,1001.34 322.06,998.459 322.619,1007.79 323.178,1033.29 323.738,1058.49 324.297,1065.54 324.856,1038.12 325.415,1047.56 325.975,1039.29 326.534,1030.66 327.093,990.225 327.652,984.789 328.212,962.872 328.771,958.403 329.33,966.985 329.889,977.597 330.449,971.989 331.008,1011.38 331.567,990.894 332.126,1000.48 332.686,1006.52 333.245,1015.47 333.804,1025.21 334.363,1018.66 334.923,1010.37 335.482,985.513 336.041,976.723 336.6,1005.36 337.16,994.066 337.719,988.043 338.278,964.683 338.837,956.423 339.397,948.995 339.956,942.881 340.515,924.967 341.074,918.888 341.634,914.919 342.193,915.328 342.752,926.579 343.311,938.227 343.871,916.912 344.43,929.13 344.989,920.716 345.548,949.978 346.108,945.185 346.667,955.274 347.226,949.431 347.785,946.547 348.345,908.021 348.904,906.171 349.463,883.587 350.022,899.667 350.582,895.617 351.141,872.308 351.7,867.922 352.259,866.924 352.819,833.316 353.378,834.955 353.937,803.275 354.496,821.849 355.056,804.326 355.615,807.04 356.174,810.403 356.733,829.653 357.293,844.695 357.852,830.646 358.411,828.677 358.97,832.245 359.53,833.343 360.089,849.403 360.648,851.229 361.207,865.786 361.767,882.092 362.326,878.779 362.885,876.256 363.444,889.25 364.004,870.126 364.563,865.556 365.122,878.977 365.681,892.515 366.241,886.863 366.8,881.682 367.359,893.691 367.918,859.527 368.478,875.71 369.037,892.089 369.596,905.821 370.155,900.344 370.715,928.967 371.274,906.063 371.833,910.336 372.392,905.419 372.952,896.93 373.511,874.416 374.07,885.743 374.629,887.219 375.189,871.593 375.748,852.6 376.307,869.151 376.866,848.656 377.426,830.771 377.985,812.064 378.544,828.324 379.103,838.776 379.663,820.392 380.222,818.754 380.781,798.745 381.34,782.111 381.9,814.994 382.459,875.272 383.018,887.227 383.577,895.355 384.137,905.062 384.696,920.593 385.255,913.57 385.814,890.616 386.374,885.444 386.933,896.534 387.492,907.126 388.051,887.369 388.611,899.263 389.17,877.382 389.729,876.182 390.288,869.122 390.848,879.358 391.407,858.564 391.966,839.212 392.525,835.638 393.085,833.51 393.644,829.297 394.203,842.744 394.762,807.039 395.322,806.686 395.881,807.149 396.44,821.536 396.999,839.332 397.559,823.586 398.118,838.32 398.677,852.189 399.236,862.221 399.796,854.082 400.355,833.998 400.914,831.476 401.473,833.897 402.033,845.37 402.592,891.978 403.151,867.967 403.71,863.168 404.27,860.654 404.829,844.675 405.388,840.327 405.947,805.589 406.507,802.546 407.066,770.19 407.625,785.131 408.184,800.545 408.744,782.959 409.303,800.449 409.862,801.421 410.421,801.302 410.981,799.401 411.54,814.098 412.099,765.223 412.658,750.835 413.218,767.678 413.777,772.332 414.336,739.903 414.895,758.825 415.455,760.163 416.014,760.324 416.573,756.027 417.132,739.266 417.692,723.598 418.251,756.973 418.81,758.195 419.369,756.811 419.929,758.12 420.488,804.656 421.047,799.368 421.606,786.072 422.166,813.158 422.725,791.804 423.284,775.987 423.843,775.229 424.403,808.799 424.962,809.085 425.521,838.628 426.08,801.921 426.64,832.54 427.199,829.305 427.758,826.233 428.318,836.417 428.877,913.524 429.436,921.688 429.995,948.815 430.555,941.178 431.114,944.207 431.673,932.323 432.232,908.379 432.792,934.359 433.351,907.218 433.91,849.303 434.469,841.759 435.029,855.869 435.588,838.806 436.147,852.938 436.706,847.965 437.266,808.341 437.825,825.425 438.384,770.731 438.943,769.902 439.503,749.333 440.062,734.375 440.621,704.69 441.18,689.217 441.74,696.589 442.299,714.571 442.858,735.751 443.417,737.829 443.977,753.988 444.536,736.945 445.095,755.94 445.654,786.868 446.214,787.093 446.773,755.703 447.332,739.124 447.891,741.073 448.451,742.887 449.01,741.76 449.569,759.901 450.128,759.024 450.688,761.572 451.247,761.153 451.806,729.873 452.365,716.751 452.925,685.938 453.484,674.301 454.043,713.216 454.602,717.069 455.162,733.59 455.721,750.512 456.28,731.641 456.839,749.389 457.399,714.583 457.958,720.636 458.517,736.275 459.076,721.588 459.636,722.834 460.195,708.262 460.754,728.074 461.313,730.931 461.873,763.192 462.432,780.067 462.991,797.351 463.55,849.498 464.11,858.519 464.669,870.071 465.228,875.085 465.787,867.603 466.347,842.583 466.906,836.683 467.465,864.222 468.024,827.485 468.584,840.382 469.143,819.738 469.702,832.041 470.261,810.122 470.821,841.113 471.38,819.57 471.939,878.569 472.498,905.538 473.058,913.082 473.617,904.781 474.176,898.586 474.735,895.03 475.295,853.419 475.854,832.071 476.413,827.828 476.972,840.158 477.532,800.952 478.091,765.317 478.65,795.839 479.209,756.185 479.769,771.125 480.328,769.23 480.887,734.107 481.446,763.335 482.006,745.237 482.565,712.018 483.124,728.086 483.683,743.86 484.243,761.023 484.802,775.163 485.361,756.364 485.92,757.388 486.48,775.686 487.039,759.211 487.598,755.939 488.157,756.061 488.717,740.656 489.276,756.034 489.835,741.006 490.394,724.092 490.954,725.513 491.513,712.744 492.072,714.784 492.631,698.335 493.191,731.58 493.75,730.271 494.309,766.602 494.868,765.449 495.428,782.105 495.987,794.169 496.546,727.101 497.105,725.96 497.665,679.645 498.224,648.313 498.783,654.509 499.342,657.858 499.902,659.827 500.461,650.007 501.02,655.886 501.579,677.797 502.139,679.456 502.698,665.721 503.257,670.019 503.816,654.816 504.376,662.087 504.935,663.441 505.494,698.298 506.053,717.46 506.613,703.549 507.172,684.926 507.731,691.284 508.29,709.736 508.85,726.67 509.409,725.96 509.968,690.215 510.527,664.105 511.087,653.47 511.646,690.446 512.205,659.011 512.764,647.066 513.324,606.563 513.883,610.822 514.442,651.424 515.001,637.237 515.561,688.932 516.12,675.909 516.679,695.668 517.238,715.663 517.798,715.942 518.357,717.04 518.916,719.467 519.475,722.555 520.035,723.141 520.594,709.355 521.153,744.425 521.712,728.182 522.272,731.725 522.831,766.517 523.39,731.181 523.949,729.115 524.509,710.594 525.068,709.9 525.627,679.514 526.186,682.694 526.746,698.182 527.305,731.305 527.864,697.285 528.423,713.646 528.983,715.15 529.542,730.324 530.101,762.197 530.66,776.15 531.22,743.293 531.779,721.152 532.338,704.132 532.897,654.025 533.457,656.51 534.016,661.031 534.575,680.972 535.134,715.62 535.694,734.783 536.253,698.955 536.812,718.773 537.371,737.78 537.931,739.616 538.49,740.149 539.049,724.855 539.608,755.302 540.168,802.702 540.727,796.912 541.286,795.789 541.845,795.928 542.405,823.023 542.964,836.346 543.523,830.487 544.082,843.508 544.642,884.46 545.201,843.93 545.76,856.665 546.319,853.788 546.879,835.293 547.438,832.507 547.997,807.614 548.556,783.644 549.116,716.832 549.675,701.009 550.234,700.943 550.793,701.685 551.353,719.844 551.912,719.801 552.471,737.797 553.031,752.467 553.59,770.555 554.149,785.624 554.708,765.326 555.268,774.98 555.827,754.922 556.386,784.413 556.945,749.811 557.505,736.123 558.064,768.078 558.623,745.619 559.182,776.231 559.742,774.312 560.301,722.768 560.86,739.424 561.419,737.49 561.979,737.788 562.538,719.584 563.097,717.377 563.656,748.515 564.216,758.409 564.775,755.75 565.334,752.385 565.893,751.892 566.453,764.293 567.012,778.103 567.571,776.638 568.13,761.554 568.69,774.259 569.249,770.985 569.808,769.957 570.367,734.582 570.927,736.661 571.486,707.6 572.045,721.893 572.604,686.987 573.164,673.306 573.723,662.807 574.282,663.826 574.841,632.483 575.401,633.44 575.96,636.661 576.519,658.985 577.078,643.968 577.638,600.051 578.197,622.445 578.756,643.286 579.315,646.634 579.875,682.145 580.434,668.205 580.993,669.182 581.552,670.721 582.112,672.631 582.671,678.444 583.23,696.628 583.789,712.532 584.349,712.057 584.908,713.699 585.467,714.174 586.026,698.013 586.586,666.117 587.145,670.662 587.704,656.009 588.263,657.092 588.823,659.873 589.382,658.985 589.941,674.67 590.5,660.178 591.06,661.224 591.619,613.606 592.178,653.434 592.737,639.448 593.297,657.206 593.856,675.954 594.415,673.752 594.974,674.976 595.534,661.985 596.093,694.687 596.652,697.688 597.211,649.396 597.771,670.021 598.33,688.484 598.889,625.333 599.448,596.013 600.008,599.796 600.567,635.227 601.126,636.848 601.685,594.58 602.245,615.215 602.804,638.053 603.363,641.07 603.922,649.824 604.482,666.89 605.041,684.025 605.6,701.752 606.159,684.857 606.719,669.059 607.278,689.893 607.837,707.495 608.396,712.408 608.956,713.412 609.515,715.343 610.074,750.319 610.633,746.847 611.193,745.799 611.752,743.956 612.311,760.438 612.87,789.789 613.43,818.936 613.989,796.913 614.548,776.112 615.107,756.129 615.667,748.716 616.226,745.681 616.785,726.903 617.344,758.477 617.904,774.672 618.463,755.507 619.022,768.688 619.581,752.623 620.141,748.272 620.7,749.877 621.259,716.251 621.818,667.232 622.378,719.352 622.937,719.431 623.496,721.024 624.055,720.2 624.615,703.631 625.174,721.377 625.733,707.878 626.292,694.924 626.852,723.944 627.411,706.922 627.97,707.964 628.529,753.177 629.089,767.028 629.648,764.136 630.207,761.433 630.766,775.164 631.326,806.098 631.885,801.42 632.444,794.19 633.003,803.676 633.563,797.759 634.122,774.447 634.681,771.86 635.24,764.904 635.8,776.689 636.359,776.158 636.918,774.141 637.477,771.65 638.037,766.976 638.596,731.414 639.155,697.543 639.714,698.244 640.274,730.482 640.833,727.786 641.392,753.542 641.951,750.85 642.511,747.743 643.07,743.251 643.629,724.402 644.188,719.75 644.748,736.7 645.307,731.962 645.866,731.675 646.425,713.637 646.985,715.356 647.544,713.495 648.103,713.127 648.662,728.624 649.222,728.236 649.781,724.037 650.34,690.768 650.899,708.696 651.459,672.576 652.018,639.453 652.577,627.153 653.136,629.681 653.696,614.142 654.255,650.768 654.814,649.75 655.373,670.684 655.933,692.237 656.492,692.747 657.051,677.814 657.61,713.778 658.17,730.511 658.729,745.24 659.288,742.038 659.847,724.149 660.407,721.129 660.966,704.139 661.525,705.725 662.084,721.994 662.644,704.169 663.203,721.845 663.762,720.94 664.321,703.382 664.881,670.29 665.44,670.277 665.999,688.072 666.558,689.305 667.118,706.647 667.677,723.525 668.236,657.62 668.795,675.145 669.355,674.923 669.914,709.899 670.473,708.905 671.032,673.387 671.592,673.789 672.151,675.794 672.71,694.206 673.269,710.376 673.829,695.625 674.388,696.155 674.947,678.075 675.506,680.136 676.066,695.567 676.625,695.355 677.184,678.273 677.743,680.469 678.303,651.364 678.862,637.477 679.421,642.452 679.981,663.677 680.54,666.448 681.099,652.886 681.658,667.798 682.218,637.257 682.777,656.335 683.336,621.783 683.895,659.361 684.455,660.547 685.014,696.471 685.573,698.504 686.132,713.922 686.692,714.108 687.251,697.228 687.81,681.251 688.369,680.615 688.929,682.988 689.488,665.643 690.047,664.872 690.606,695.819 691.166,696.828 691.725,694.734 692.284,740.28 692.843,739.75 693.403,725.097 693.962,706.225 694.521,704.109 695.08,719.277 695.64,719.454 696.199,682.619 696.758,666.026 697.317,684.463 697.877,684.498 698.436,686.848 698.995,704.032 699.554,671.772 700.114,657.283 700.673,645.858 701.232,632.18 701.791,637.352 702.351,641.453 702.91,658.24 703.469,694.991 704.028,679.861 704.588,711.585 705.147,696.478 705.706,711.526 706.265,725.51 706.825,725.81 707.384,724.712 707.943,719.143 708.502,732.644 709.062,714.454 709.621,710.784 710.18,690.434 710.739,690.965 711.299,691.366 711.858,724.411 712.417,756.096 712.976,737.32 713.536,750.159 714.095,765.062 714.654,760.671 715.213,789.505 715.773,814.85 716.332,786.986 716.891,764.408 717.45,745.007 718.01,726.841 718.569,740.148 719.128,740.088 719.687,756.392 720.247,737.864 720.806,750.33 721.365,729.199 721.924,744.021 722.484,759.65 723.043,738.814 723.602,734.636 724.161,717.276 724.721,700.345 725.28,698.82 725.839,714.047 726.398,729.443 726.958,711.591 727.517,744.341 728.076,694.922 728.635,695.957 729.195,713.813 729.754,698.437 730.313,666.105 730.872,667.873 731.432,688.8 731.991,675.901 732.55,694.476 733.109,692.609 733.669,692.087 734.228,624.786 734.787,612.083 735.346,585.283 735.906,639.931 736.465,658.039 737.024,658.547 737.583,661.053 738.143,663.431 738.702,664.498 739.261,664.233 739.82,683.183 740.38,652.704 740.939,658.244 741.498,690.767 742.057,672.534 742.617,690.048 743.176,690.171 743.735,675.829 744.294,706.997 744.854,701.923 745.413,686.811 745.972,673.673 746.531,692.567 747.091,691.125 747.65,708.247 748.209,710.355 748.768,729.692 749.328,742.194 749.887,755.184 750.446,767.591 751.005,732.336 751.565,764.156 752.124,776.11 752.683,807.611 753.242,815.659 753.802,822.688 754.361,819.946 754.92,849.146 755.479,841.383 756.039,835.909 756.598,830.584 757.157,774.228 757.716,786.34 758.276,809.641 758.835,784.979 759.394,766.651 759.953,760.997 760.513,751.447 761.072,730.73 761.631,745.122 762.19,744.029 762.75,807.994 763.309,769.966 763.868,737.665 764.427,733.83 764.987,698.977 765.546,680.572 766.105,712.994 766.664,677.246 767.224,677.318 767.783,662.084 768.342,679.053 768.901,730.071 769.461,729.36 770.02,712.952 770.579,712.174 771.138,756.018 771.698,750.726 772.257,749.128 772.816,791.687 773.375,786.535 773.935,765.053 774.494,762.096 775.053,773.784 775.612,769.698 776.172,795.36 776.731,773.2 777.29,754.08 777.849,734.383 778.409,717.943 778.968,696.552 779.527,676.62 780.086,678.158 780.646,696.52 781.205,660.803 781.764,677.934 782.323,676.546 782.883,678.635 783.442,679.77 784.001,682.652 784.56,683.216 785.12,717.021 785.679,683.324 786.238,668.531 786.797,657.369 787.357,642.156 787.916,680.381 788.475,677.92 789.034,676.729 789.594,664.343 790.153,668.091 790.712,647.187 791.271,646.663 791.831,677.288 792.39,679.675 792.949,711.822 793.508,683.708 794.068,697.199 794.627,679.464 795.186,661.501 795.745,631.057 796.305,648.912 796.864,604.234 797.423,607.972 797.982,594.243 798.542,597.268 799.101,614.007 799.66,618.32 800.219,671.334 800.779,671.762 801.338,689.311 801.897,655.704 802.456,670.954 803.016,670.833 803.575,671.403 804.134,656.008 804.693,657.922 805.253,678.449 805.812,673.981 806.371,660.436 806.931,678.773 807.49,680.186 808.049,646.604 808.608,646.241 809.168,661.135 809.727,647.11 810.286,664.896 810.845,680.978 811.405,685.253 811.964,637.3 812.523,640.297 813.082,643.935 813.642,693.539 814.201,707.324 814.76,718.662 815.319,731.013 815.879,729.711 816.438,728.654 816.997,758.163 817.556,786.348 818.116,765.645 818.675,760.358 819.234,808.38 819.793,850.57 820.353,827.379 820.912,804.592 821.471,767.117 822.03,778.384 822.59,723.436 823.149,754.33 823.708,687.121 824.267,701.959 824.827,702.291 825.386,684.353 825.945,652.968 826.504,621.16 827.064,589.158 827.623,594 828.182,662.621 828.741,646.799 829.301,648.172 829.86,618.904 830.419,574.518 830.978,599.544 831.538,619.912 832.097,620.926 832.656,592.161 833.215,564.52 833.775,553.799 834.334,591.721 834.893,597.69 835.452,615.79 836.012,605.571 836.571,660.073 837.13,662.786 837.689,648.64 838.249,637.182 838.808,641.976 839.367,612.674 839.926,662.831 840.486,633.193 841.045,604.57 841.604,611.669 842.163,645.441 842.723,652.619 843.282,607.695 843.841,615.017 844.4,634.334 844.96,655.298 845.519,670.657 846.078,674.053 846.637,692.252 847.197,660.892 847.756,681.069 848.315,686.071 848.874,703.577 849.434,686.522 849.993,687.757 850.552,689.695 851.111,688.137 851.671,718.167 852.23,732.015 852.789,748.891 853.348,732.075 853.908,696.221 854.467,714.845 855.026,743.765 855.585,741.787 856.145,741.567 856.704,740.826 857.263,743.897 857.822,758.772 858.382,724.047 858.941,737.428 859.5,720.192 860.059,719.514 860.619,702.087 861.178,717.244 861.737,731.44 862.296,715.094 862.856,759.315 863.415,771.264 863.974,763.27 864.533,790.397 865.093,767.777 865.652,762.524 866.211,741.576 866.77,737.274 867.33,699.625 867.889,685.257 868.448,701.969 869.007,684.136 869.567,683.028 870.126,670.848 870.685,672.183 871.244,656.475 871.804,657.629 872.363,673.695 872.922,675.048 873.481,720.855 874.041,717.122 874.6,716.407 875.159,700.327 875.718,683.952 876.278,716.549 876.837,731.223 877.396,729.572 877.955,711.981 878.515,741.476 879.074,738.521 879.633,750.137 880.192,747.306 880.752,725.127 881.311,742.583 881.87,738.402 882.429,749.628 882.989,717.752 883.548,734.765 884.107,765.439 884.666,766.12 885.226,746.962 885.785,696.84 886.344,710.872 886.903,758.468 887.463,739.618 888.022,719.57 888.581,687.437 889.14,689.334 889.7,689.169 890.259,704.594 890.818,720.567 891.377,684.922 891.937,699.224 892.496,750.363 893.055,749.207 893.614,732.744 894.174,726.47 894.733,708.173 895.292,673.31 895.851,642.423 896.411,644.128 896.97,613.301 897.529,613.986 898.088,619.381 898.648,639.685 899.207,692.097 899.766,691.168 900.325,709.227 900.885,740.859 901.444,737.146 902.003,703.135 902.562,687.848 903.122,689.804 903.681,690.296 904.24,691.138 904.799,721.861 905.359,716.99 905.918,763.95 906.477,742.054 907.036,754.067 907.596,702.541 908.155,702.087 908.714,684.763 909.273,651.746 909.833,682.76 910.392,652.842 910.951,688.345 911.51,706.729 912.07,704.531 912.629,673.838 913.188,657.859 913.747,674.745 914.307,691.807 914.866,705.695 915.425,703.5 915.984,687.778 916.544,675.535 917.103,695.016 917.662,693.721 918.221,696.048 918.781,648.549 919.34,632.056 919.899,635.799 920.458,607.018 921.018,630.834 921.577,632.939 922.136,602.554 922.695,560.205 923.255,617.013 923.814,634.582 924.373,635.674 924.932,702.982 925.492,673.26 926.051,655.746 926.61,640.475 927.169,625.46 927.729,613.661 928.288,632.704 928.847,636.376 929.406,621.887 929.966,640.586 930.525,626.688 931.084,644 931.644,646.226 932.203,627.188 932.762,633.084 933.321,654.682 933.881,641.353 934.44,660.121 934.999,693.299 935.558,692.625 936.118,691.236 936.677,659.997 937.236,678.448 937.795,713.297 938.355,695.66 938.914,679.906 939.473,708.233 940.032,706.842 940.592,704.13 941.151,674.163 941.71,656.555 942.269,689.326 942.829,672.493 943.388,657.593 943.947,660.948 944.506,677.722 945.066,696.738 945.625,730.035 946.184,759.699 946.743,818.672 947.303,814.415 947.862,808.873 948.421,820.242 948.98,796.764 949.54,824.376 950.099,799.108 950.658,796.425 951.217,770.848 951.777,765.736 952.336,743.976 952.895,742.023 953.454,752.891 954.014,732.593 954.573,734.913 955.132,735.05 955.691,715.72 956.251,747.737 956.81,763.16 957.369,758.288 957.928,725.706 958.488,736.018 959.047,747.378 959.606,741.144 960.165,721.26 960.725,724.228 961.284,707.462 961.843,708.162 962.402,688.914 962.962,639.333 963.521,627.097 964.08,663.75 964.639,667.457 965.199,703.011 965.758,688.354 966.317,672.344 966.876,671.054 967.436,624.125 967.995,625.279 968.554,643.211 969.113,656.721 969.673,672.057 970.232,651.993 970.791,668.469 971.35,668.803 971.91,685.432 972.469,667.094 973.028,684.144 973.587,734.447 974.147,747.161 974.706,727.686 975.265,730.477 975.824,727.011 976.384,691.003 976.943,705.189 977.502,652.949 978.061,623.402 978.621,609.718 979.18,597.631 979.739,602.688 980.298,589.425 980.858,578.821 981.417,602.457 981.976,577.071 982.535,567.951 983.095,588.241 983.654,623.954 984.213,625.071 984.772,626.385 985.332,630.766 985.891,653.3 986.45,671.805 987.009,688.06 987.569,720.261 988.128,766.738 988.687,740.773 989.246,707.292 989.806,706.996 990.365,721.648 990.924,737.515 991.483,717.217 992.043,731.336 992.602,730.007 993.161,759.713 993.72,754.829 994.28,734.509 994.839,700.106 995.398,685.977 995.957,669.941 996.517,686.382 997.076,668.357 997.635,686.173 998.194,687.017 998.754,682.31 999.313,662.724 999.872,661.286 1000.43,645.636 1000.99,663.336 1001.55,697.351 1002.11,710.106 1002.67,690.731 1003.23,674.215 1003.79,659.46 1004.35,613.926 1004.91,603.373 1005.46,625.684 1006.02,597.939 1006.58,586.453 1007.14,589.926 1007.7,598.406 1008.26,624.21 1008.82,625.516 1009.38,648.167 1009.94,653.648 1010.5,668.444 1011.06,668.119 1011.62,649.816 1012.18,636.799 1012.73,625.763 1013.29,628.1 1013.85,646.128 1014.41,662.592 1014.97,677.893 1015.53,695.257 1016.09,661.45 1016.65,664.881 1017.21,663.801 1017.77,664.395 1018.33,647.733 1018.89,695.695 1019.45,679.688 1020.01,645.028 1020.56,645.761 1021.12,648.332 1021.68,633.008 1022.24,652.235 1022.8,671.891 1023.36,739.996 1023.92,735.192 1024.48,751.555 1025.04,764.765 1025.6,776.976 1026.16,787.114 1026.72,765.83 1027.28,773.692 1027.83,783.147 1028.39,749.846 1028.95,743.143 1029.51,774.395 1030.07,771.387 1030.63,765.754 1031.19,776.985 1031.75,787.804 1032.31,767.595 1032.87,778.022 1033.43,771.202 1033.99,767.32 1034.55,767.583 1035.1,779.111 1035.66,806.628 1036.22,785.872 1036.78,778.994 1037.34,740.369 1037.9,722.47 1038.46,719.625 1039.02,720.058 1039.58,717.28 1040.14,748.179 1040.7,725.234 1041.26,724.342 1041.82,752.839 1042.38,780.295 1042.93,776.292 1043.49,772.967 1044.05,769.641 1044.61,733.464 1045.17,729.615 1045.73,728.096 1046.29,709.993 1046.85,691.876 1047.41,715.144 1047.97,698.705 1048.53,662.026 1049.09,716.544 1049.65,712.619 1050.2,709.087 1050.76,708.88 1051.32,692.283 1051.88,690.691 1052.44,688.022 1053,701.14 1053.56,718.976 1054.12,701.189 1054.68,666.22 1055.24,669.444 1055.8,684.198 1056.36,651.725 1056.92,651.807 1057.48,636.383 1058.03,623.572 1058.59,609.327 1059.15,614.962 1059.71,620.145 1060.27,592.699 1060.83,629.091 1061.39,612.534 1061.95,619.352 1062.51,623.756 1063.07,627.137 1063.63,615.471 1064.19,602.057 1064.75,605.372 1065.3,593.298 1065.86,599.587 1066.42,608.054 1066.98,611.123 1067.54,614.671 1068.1,587.074 1068.66,593.649 1069.22,614.767 1069.78,618.153 1070.34,636.03 1070.9,641.239 1071.46,662.299 1072.02,662.425 1072.57,630.621 1073.13,618.72 1073.69,636.241 1074.25,638.512 1074.81,673.479 1075.37,705.647 1075.93,673.998 1076.49,676.129 1077.05,677.402 1077.61,661.145 1078.17,629.774 1078.73,681.302 1079.29,715.526 1079.85,758.463 1080.4,755.019 1080.96,737.033 1081.52,719.554 1082.08,671.753 1082.64,654.532 1083.2,640.501 1083.76,627.849 1084.32,644.515 1084.88,612.119 1085.44,584.019 1086,600.99 1086.56,574.858 1087.12,597 1087.67,634.884 1088.23,622.63 1088.79,641.968 1089.35,629.155 1089.91,619.356 1090.47,624.475 1091.03,612.83 1091.59,648.171 1092.15,650.466 1092.71,671.011 1093.27,671.784 1093.83,673.455 1094.39,705.455 1094.94,719.566 1095.5,748.443 1096.06,757.994 1096.62,736.793 1097.18,704.132 1097.74,702.861 1098.3,686.556 1098.86,703.527 1099.42,703.11 1099.98,684.922 1100.54,667.843 1101.1,669.963 1101.66,672.148 1102.22,673.297 1102.77,672.07 1103.33,708.1 1103.89,736.695 1104.45,751.803 1105.01,748.254 1105.57,760.202 1106.13,756.248 1106.69,737.629 1107.25,750.279 1107.81,748.165 1108.37,746.897 1108.93,728.962 1109.49,692.681 1110.04,645.958 1110.6,628.9 1111.16,630.891 1111.72,637.597 1112.28,638.548 1112.84,655.341 1113.4,672.951 1113.96,674.898 1114.52,662.818 1115.08,694.606 1115.64,708.61 1116.2,708.254 1116.76,724.204 1117.31,707.033 1117.87,688.469 1118.43,689.215 1118.99,691.312 1119.55,709.167 1120.11,708.896 1120.67,707.806 1121.23,707.835 1121.79,725.459 1122.35,694.3 1122.91,660.577 1123.47,678.676 1124.03,681.165 1124.59,646.444 1125.14,648.835 1125.7,668.888 1126.26,667.666 1126.82,667.147 1127.38,654.562 1127.94,672.036 1128.5,672.761 1129.06,661.32 1129.62,647.1 1130.18,650.834 1130.74,622.912 1131.3,611.684 1131.86,615.279 1132.41,618.562 1132.97,620.247 1133.53,639.416 1134.09,642.688 1134.65,643.477 1135.21,662.061 1135.77,647.171 1136.33,679.264 1136.89,679.839 1137.45,661.964 1138.01,646.127 1138.57,660.509 1139.13,646 1139.68,668.511 1140.24,655.86 1140.8,659.405 1141.36,676.664 1141.92,676.864 1142.48,677.012 1143.04,662.733 1143.6,665.326 1144.16,650.191 1144.72,671.804 1145.28,674.451 1145.84,689.2 1146.4,719.437 1146.96,713.656 1147.51,697.032 1148.07,694.377 1148.63,661.933 1149.19,663.994 1149.75,662.57 1150.31,667.012 1150.87,685.956 1151.43,667.657 1151.99,685.101 1152.55,720.912 1153.11,702.719 1153.67,703.995 1154.23,737.008 1154.78,699.721 1155.34,765.102 1155.9,745.12 1156.46,727.542 1157.02,708.923 1157.58,707.102 1158.14,705.198 1158.7,721.313 1159.26,722.106 1159.82,751.683 1160.38,780.114 1160.94,789.058 1161.5,863.19 1162.05,835.987 1162.61,811.477 1163.17,817.624 1163.73,811.57 1164.29,806.863 1164.85,800.94 1165.41,779.82 1165.97,774.74 1166.53,738.547 1167.09,721.782 1167.65,736.098 1168.21,747.851 1168.77,710.61 1169.33,741.164 1169.88,738.93 1170.44,736.334 1171,747.165 1171.56,759.412 1172.12,770.111 1172.68,765.861 1173.24,760.262 1173.8,755.144 1174.36,721.352 1174.92,752.79 1175.48,731.584 1176.04,760.03 1176.6,771.621 1177.15,784.958 1177.71,794.03 1178.27,791.446 1178.83,787.569 1179.39,776.313 1179.95,788.884 1180.51,797.169 1181.07,790.006 1181.63,782.99 1182.19,810.569 1182.75,820.872 1183.31,794.314 1183.87,785.384 1184.43,780.966 1184.98,726.86 1185.54,708.057 1186.1,753.465 1186.66,733.099 1187.22,729.351 1187.78,711.316 1188.34,710.925 1188.9,706.898 1189.46,739.359 1190.02,736.19 1190.58,747.569 1191.14,724.118 1191.7,706.83 1192.25,737.693 1192.81,716.054 1193.37,634.661 1193.93,653.143 1194.49,652.831 1195.05,652.637 1195.61,651.357 1196.17,650.763 1196.73,619.323 1197.29,638.242 1197.85,660.024 1198.41,644.606 1198.97,646.704 1199.52,648.012 1200.08,646.88 1200.64,648.774 1201.2,617.125 1201.76,634.784 1202.32,637.31 1202.88,619.429 1203.44,606.605 1204,578.182 1204.56,580.603 1205.12,569.148 1205.68,543.106 1206.24,548.737 1206.8,584.424 1207.35,573.191 1207.91,548.21 1208.47,538.06 1209.03,544.204 1209.59,551.275 1210.15,557.836 1210.71,564.548 1211.27,603.908 1211.83,627.514 1212.39,645.549 1212.95,613.41 1213.51,613.566 1214.07,619.62 1214.62,626.034 1215.18,595.976 1215.74,599.691 1216.3,583.836 1216.86,606.808 1217.42,626.558 1217.98,631.766 1218.54,637.606 1219.1,625.231 1219.66,643.328 1220.22,646.317 1220.78,668.219 1221.34,686.004 1221.89,701.96 1222.45,699.808 1223.01,714.733 1223.57,679.996 1224.13,695.107 1224.69,692.709 1225.25,711.505 1225.81,708.93 1226.37,723.841 1226.93,691.987 1227.49,642.192 1228.05,626.753 1228.61,647.501 1229.17,613.19 1229.72,618.934 1230.28,607.798 1230.84,612.413 1231.4,614.888 1231.96,635.089 1232.52,636.826 1233.08,637.157 1233.64,656.547 1234.2,689.985 1234.76,707.266 1235.32,705.024 1235.88,736.696 1236.44,751.746 1236.99,764.095 1237.55,725.07 1238.11,726.169 1238.67,725.948 1239.23,758.288 1239.79,724.829 1240.35,725.206 1240.91,752.611 1241.47,746.563 1242.03,744.306 1242.59,777.373 1243.15,740.221 1243.71,707.721 1244.26,689.241 1244.82,656.779 1245.38,685.036 1245.94,652.535 1246.5,687.093 1247.06,685.959 1247.62,654.557 1248.18,670.232 1248.74,672.098 1249.3,640.591 1249.86,645.374 1250.42,664.54 1250.98,678.657 1251.54,709.777 1252.09,672.238 1252.65,640.848 1253.21,663.414 1253.77,667.262 1254.33,653.606 1254.89,658.543 1255.45,646.705 1256.01,676.957 1256.57,691.8 1257.13,671.802 1257.69,703.311 1258.25,655.227 1258.81,673.156 1259.36,642.362 1259.92,662.661 1260.48,613.678 1261.04,632.577 1261.6,618.498 1262.16,574.545 1262.72,595.055 1263.28,584.045 1263.84,621.826 1264.4,624.793 1264.96,609.026 1265.52,580.597 1266.08,618.25 1266.63,620.967 1267.19,658.736 1267.75,676.595 1268.31,693.622 1268.87,674.563 1269.43,673.584 1269.99,674.993 1270.55,678.529 1271.11,664.753 1271.67,633.852 1272.23,619.937 1272.79,624.283 1273.35,643.214 1273.91,629.316 1274.46,661.239 1275.02,630.01 1275.58,647.435 1276.14,617.091 1276.7,605.038 1277.26,611.434 1277.82,564.915 1278.38,588.629 1278.94,577.481 1279.5,581.472 1280.06,602.111 1280.62,607.736 1281.18,581.114 1281.73,569.969 1282.29,512.001 1282.85,524.381 1283.41,550.319 1283.97,539.267 1284.53,545.593 1285.09,552.201 1285.65,541.361 1286.21,569.425 1286.77,607.38 1287.33,613.406 1287.89,668.212 1288.45,668.051 1289,666.606 1289.56,666.937 1290.12,668.077 1290.68,652.786 1291.24,657.557 1291.8,641.064 1292.36,643.027 1292.92,626.67 1293.48,630.625 1294.04,652.245 1294.6,656.035 1295.16,674.505 1295.72,675.202 1296.28,676.77 1296.83,679.726 1297.39,709.397 1297.95,689.881 1298.51,704.684 1299.07,716.456 1299.63,732.949 1300.19,731.166 1300.75,712.038 1301.31,726.347 1301.87,759.387 1302.43,758.76 1302.99,789.123 1303.55,787.064 1304.1,764.495 1304.66,789.278 1305.22,800.744 1305.78,778.879 1306.34,757.661 1306.9,722.081 1307.46,748.699 1308.02,728.363 1308.58,710.927 1309.14,709.45 1309.7,678.041 1310.26,679.344 1310.82,696.322 1311.38,710.16 1311.93,692.115 1312.49,772.814 1313.05,716.776 1313.61,732.653 1314.17,713.304 1314.73,678.982 1315.29,663.596 1315.85,694.254 1316.41,706.984 1316.97,705.625 1317.53,718.49 1318.09,719.748 1318.65,747.958 1319.2,773.431 1319.76,753.339 1320.32,733.83 1320.88,732.6 1321.44,729.912 1322,727.83 1322.56,693.319 1323.12,723.101 1323.68,723.239 1324.24,688.227 1324.8,687.405 1325.36,700.213 1325.92,698.752 1326.47,715.295 1327.03,681.382 1327.59,681.807 1328.15,669.292 1328.71,687.973 1329.27,687.124 1329.83,690.409 1330.39,688.747 1330.95,702.149 1331.51,698.897 1332.07,679.317 1332.63,666.664 1333.19,654.023 1333.75,653.1 1334.3,688.299 1334.86,672.852 1335.42,670.614 1335.98,657.565 1336.54,641.09 1337.1,691.879 1337.66,691.826 1338.22,710.724 1338.78,694.854 1339.34,711.295 1339.9,707.618 1340.46,737.035 1341.02,733.575 1341.57,745.006 1342.13,775.343 1342.69,754.626 1343.25,719.084 1343.81,716.786 1344.37,696.782 1344.93,695.865 1345.49,682.513 1346.05,630.842 1346.61,620.071 1347.17,640.592 1347.73,692.983 1348.29,707.547 1348.84,721.603 1349.4,700.658 1349.96,697.933 1350.52,664.118 1351.08,665.177 1351.64,648.56 1352.2,683.535 1352.76,650.252 1353.32,668.559 1353.88,701.854 1354.44,686.144 1355,699.489 1355.56,779.748 1356.12,771.276 1356.67,730.905 1357.23,710.084 1357.79,709.241 1358.35,706.281 1358.91,731.91 1359.47,759.164 1360.03,738.545 1360.59,721.553 1361.15,701.685 1361.71,698.937 1362.27,668.962 1362.83,670.426 1363.39,656.001 1363.94,685.074 1364.5,670.577 1365.06,670.274 1365.62,668.308 1366.18,651.78 1366.74,654.225 1367.3,655.333 1367.86,640.732 1368.42,660.127 1368.98,706.825 1369.54,724.347 1370.1,757.416 1370.66,740.438 1371.21,722.712 1371.77,720.112 1372.33,720.792 1372.89,719.048 1373.45,718.991 1374.01,718.881 1374.57,701.64 1375.13,748.958 1375.69,796.237 1376.25,820.777 1376.81,842.005 1377.37,836.819 1377.93,846.218 1378.49,741.185 1379.04,736.727 1379.6,731.726 1380.16,713.172 1380.72,730.724 1381.28,729.658 1381.84,707.175 1382.4,706.879 1382.96,708.343 1383.52,724.476 1384.08,738.998 1384.64,721.409 1385.2,673.288 1385.76,674.877 1386.31,672.274 1386.87,637.95 1387.43,591.654 1387.99,579.479 1388.55,603.774 1389.11,577.228 1389.67,582.681 1390.23,589.577 1390.79,610.204 1391.35,601.206 1391.91,605.777 1392.47,625.374 1393.03,608.64 1393.58,628.511 1394.14,615.674 1394.7,634.977 1395.26,651.917 1395.82,656.166 1396.38,675.546 1396.94,693.417 1397.5,679.247 1398.06,710.271 1398.62,692.442 1399.18,709.563 1399.74,721.225 1400.3,719.665 1400.86,731.217 1401.41,728.655 1401.97,679.739 1402.53,680.847 1403.09,677.349 1403.65,644.63 1404.21,647.251 1404.77,650.477 1405.33,653.376 1405.89,688.837 1406.45,701.777 1407.01,651.737 1407.57,686.079 1408.13,701.525 1408.68,749.022 1409.24,747.19 1409.8,743.392 1410.36,758.083 1410.92,739.001 1411.48,703.942 1412.04,719.344 1412.6,718.042 1413.16,648.096 1413.72,651.213 1414.28,653.638 1414.84,625.289 1415.4,647.427 1415.95,681.383 1416.51,664.711 1417.07,715.106 1417.63,731.484 1418.19,712.273 1418.75,761.93 1419.31,742.934 1419.87,736.44 1420.43,768.833 1420.99,732.144 1421.55,794.853 1422.11,756.433 1422.67,740.209 1423.23,769.191 1423.78,732.325 1424.34,730.991 1424.9,759.703 1425.46,726.235 1426.02,740.26 1426.58,768.28 1427.14,733.703 1427.7,729.17 1428.26,680.236 1428.82,695.396 1429.38,675.638 1429.94,659.664 1430.5,663.088 1431.05,661.049 1431.61,691.974 1432.17,689.388 1432.73,674.723 1433.29,659.56 1433.85,662.958 1434.41,683.106 1434.97,732.097 1435.53,759.473 1436.09,723.587 1436.65,703.368 1437.21,700.139 1437.77,730.617 1438.33,730.374 1438.88,710.542 1439.44,690.89 1440,707.259 1440.56,722.702 1441.12,707.118 1441.68,722.629 1442.24,672.654 1442.8,689.981 1443.36,690.551 1443.92,675.365 1444.48,676.184 1445.04,659.747 1445.6,646.994 1446.15,617.005 1446.71,603.419 1447.27,639.486 1447.83,642.625 1448.39,649.019 1448.95,635.187 1449.51,639.219 1450.07,657.947 1450.63,659.562 1451.19,647.403 1451.75,650.595 1452.31,683.895 1452.87,652.283 1453.42,654.722 1453.98,626.91 1454.54,650.699 1455.1,655.063 1455.66,655.967 1456.22,669.301 1456.78,666.662 1457.34,665.949 1457.9,635.515 1458.46,634.709 1459.02,654.652 1459.58,675.671 1460.14,678.489 1460.7,661.094 1461.25,664.998 1461.81,637.21 1462.37,640.702 1462.93,659.954 1463.49,659.433 1464.05,660.206 1464.61,648.114 1465.17,632.456 1465.73,621.565 1466.29,604.455 1466.85,592.53 1467.41,580.098 1467.97,584.669 1468.52,622.794 1469.08,644.807 1469.64,643.835 1470.2,648.731 1470.76,668.928 1471.32,703.585 1471.88,733.517 1472.44,716.616 1473,718.325 1473.56,734.763 1474.12,715.237 1474.68,714.53 1475.24,760.681 1475.79,755.233 1476.35,767.663 1476.91,764.236 1477.47,770.456 1478.03,752.412 1478.59,779.479 1479.15,756.634 1479.71,750.628 1480.27,747.578 1480.83,776.325 1481.39,767.193 1481.95,716.418 1482.51,714.101 1483.07,743.433 1483.62,738.944 1484.18,737.829 1484.74,703.667 1485.3,721.031 1485.86,749.698 1486.42,778.103 1486.98,757.035 1487.54,718.011 1488.1,698.226 1488.66,729.625 1489.22,727.766 1489.78,757.549 1490.34,771.592 1490.89,756.528 1491.45,719.692 1492.01,698.769 1492.57,682.99 1493.13,681.791 1493.69,701.904 1494.25,683.231 1494.81,668.637 1495.37,667.173 1495.93,684.398 1496.49,715.165 1497.05,728.4 1497.61,709.744 1498.16,693.749 1498.72,691.024 1499.28,661.59 1499.84,612.07 1500.4,611.893 1500.96,612.835 1501.52,579.947 1502.08,615.926 1502.64,622 1503.2,623.093 1503.76,643.37 1504.32,631.613 1504.88,623.469 1505.44,595.135 1505.99,596.798 1506.55,618.696 1507.11,623.176 1507.67,642.112 1508.23,647.966 1508.79,677.727 1509.35,659.004 1509.91,659.998 1510.47,677.315 1511.03,727.372 1511.59,695.876 1512.15,694.794 1512.71,661.124 1513.26,678.273 1513.82,680.384 1514.38,677.894 1514.94,643.697 1515.5,664.618 1516.06,662.577 1516.62,699.116 1517.18,679.079 1517.74,726.773 1518.3,710.245 1518.86,708.222 1519.42,753.635 1519.98,720.995 1520.53,721.894 1521.09,719.024 1521.65,717.196 1522.21,695.224 1522.77,675.648 1523.33,627.642 1523.89,597.87 1524.45,618.109 1525.01,620.584 1525.57,624.689 1526.13,664.145 1526.69,666.185 1527.25,684.316 1527.81,670.131 1528.36,669.232 1528.92,652.021 1529.48,673.798 1530.04,689.694 1530.6,691.941 1531.16,692.379 1531.72,692.682 1532.28,659.705 1532.84,676.06 1533.4,690.813 1533.96,707.857 1534.52,723.061 1535.08,690.953 1535.63,689.166 1536.19,706.059 1536.75,717 1537.31,682.141 1537.87,664.465 1538.43,694.403 1538.99,708.42 1539.55,708.195 1540.11,707.163 1540.67,674.994 1541.23,658.089 1541.79,641.484 1542.35,675.615 1542.9,676.014 1543.46,692.068 1544.02,705.874 1544.58,673.737 1545.14,659.992 1545.7,695.135 1546.26,694.902 1546.82,644.769 1547.38,662.166 1547.94,681.602 1548.5,667.592 1549.06,671.469 1549.62,673.16 1550.18,673.257 1550.73,691.532 1551.29,642.248 1551.85,679.602 1552.41,667.608 1552.97,686.65 1553.53,685.853 1554.09,670.38 1554.65,657.343 1555.21,655.647 1555.77,645.086 1556.33,648.454 1556.89,664.62 1557.45,711.283 1558,693.418 1558.56,726.08 1559.12,738.896 1559.68,799.861 1560.24,779.565 1560.8,808.504 1561.36,771.367 1561.92,734.67 1562.48,736.302 1563.04,746.465 1563.6,725.159 1564.16,707.771 1564.72,673.497 1565.28,707.975 1565.83,658.537 1566.39,643.002 1566.95,660.644 1567.51,644.319 1568.07,647.467 1568.63,679.486 1569.19,633.27 1569.75,666.387 1570.31,649.336 1570.87,636.404 1571.43,657.466 1571.99,672.064 1572.55,655.143 1573.1,659.008 1573.66,659.384 1574.22,661.291 1574.78,663.573 1575.34,678.942 1575.9,659.216 1576.46,649.23 1577.02,666.029 1577.58,685.629 1578.14,704.573 1578.7,705.873 1579.26,720.067 1579.82,733.283 1580.37,731.346 1580.93,730.362 1581.49,728.803 1582.05,709.522 1582.61,679.717 1583.17,679.863 1583.73,649.244 1584.29,700.658 1584.85,732.852 1585.41,728.163 1585.97,724.192 1586.53,720.454 1587.09,668.741 1587.65,680.592 1588.2,699.296 1588.76,682.388 1589.32,729.422 1589.88,728.559 1590.44,728.367 1591,723.826 1591.56,704.385 1592.12,704.107 1592.68,700.886 1593.24,647.255 1593.8,615.131 1594.36,617.911 1594.92,652.328 1595.47,639.566 1596.03,676.24 1596.59,679.326 1597.15,663.413 1597.71,678.363 1598.27,677.238 1598.83,679.687 1599.39,647.019 1599.95,648.133 1600.51,615.204 1601.07,619.273 1601.63,603.432 1602.19,656.421 1602.74,672.286 1603.3,673.871 1603.86,709.047 1604.42,708.02 1604.98,703.065 1605.54,717.239 1606.1,702.197 1606.66,671.03 1607.22,639.481 1607.78,642.03 1608.34,648.344 1608.9,653.417 1609.46,674.352 1610.02,676.891 1610.57,679.008 1611.13,697.347 1611.69,697.362 1612.25,679.077 1612.81,710.804 1613.37,677.84 1613.93,693.577 1614.49,709.883 1615.05,708.918 1615.61,723.243 1616.17,735.751 1616.73,735.836 1617.29,730.852 1617.84,714.832 1618.4,698.544 1618.96,728.651 1619.52,725.766 1620.08,740.191 1620.64,704.364 1621.2,703.476 1621.76,689.149 1622.32,676.251 1622.88,677.777 1623.44,594.725 1624,616.168 1624.56,636.515 1625.11,637.988 1625.67,622.547 1626.23,625.884 1626.79,641.63 1627.35,661.805 1627.91,662.41 1628.47,695.556 1629.03,663.552 1629.59,668.107 1630.15,687.945 1630.71,687.884 1631.27,704.18 1631.83,733.345 1632.39,733.012 1632.94,717.96 1633.5,716.706 1634.06,716.996 1634.62,713.412 1635.18,712.757 1635.74,712.195 1636.3,680.118 1636.86,713.107 1637.42,713.432 1637.98,715.74 1638.54,697.055 1639.1,724.149 1639.66,720.381 1640.21,698.696 1640.77,714.595 1641.33,716.11 1641.89,763.786 1642.45,794.688 1643.01,788.118 1643.57,784.38 1644.13,779.396 1644.69,761.182 1645.25,758.843 1645.81,735.976 1646.37,729.149 1646.93,690.499 1647.48,707.837 1648.04,660.078 1648.6,629.342 1649.16,633.711 1649.72,650.037 1650.28,648.977 1650.84,688.564 1651.4,686.315 1651.96,683.269 1652.52,682.075 1653.08,700.438 1653.64,698.961 1654.2,665.972 1654.76,683.792 1655.31,634.134 1655.87,635.323 1656.43,654.488 1656.99,638.828 1657.55,624.324 1658.11,627.658 1658.67,628.557 1659.23,616.47 1659.79,671.374 1660.35,642.743 1660.91,661.173 1661.47,661.798 1662.03,612.025 1662.58,632.975 1663.14,632.162 1663.7,602.475 1664.26,574.731 1664.82,615.466 1665.38,608.561 1665.94,599.08 1666.5,623.764 1667.06,629.134 1667.62,618.785 1668.18,606.737 1668.74,630.038 1669.3,646.917 1669.85,664.26 1670.41,680.721 1670.97,662.302 1671.53,631.242 1672.09,651.02 1672.65,669.012 1673.21,670.139 1673.77,640.986 1674.33,642.191 1674.89,644.282 1675.45,666.311 1676.01,715.86 1676.57,713.438 1677.13,731.617 1677.68,711.858 1678.24,693.726 1678.8,695.049 1679.36,710.433 1679.92,692.337 1680.48,676.846 1681.04,692.488 1681.6,676.039 1682.16,680.085 1682.72,683.683 1683.28,685.347 1683.84,688.732 1684.4,691.478 1684.95,687.804 1685.51,719.002 1686.07,718.353 1686.63,746.762 1687.19,756.983 1687.75,751.597 1688.31,763.461 1688.87,760.778 1689.43,756.938 1689.99,718.971 1690.55,699.136 1691.11,697.538 1691.67,695.957 1692.23,706.445 1692.78,735.469 1693.34,747.179 1693.9,745.066 1694.46,759.126 1695.02,742.767 1695.58,723.512 1696.14,703.801 1696.7,755.397 1697.26,756.13 1697.82,768.012 1698.38,733.51 1698.94,731.585 1699.5,743.084 1700.05,774.094 1700.61,738.854 1701.17,705.952 1701.73,704.075 1702.29,651.859 1702.85,649.712 1703.41,650.084 1703.97,652.547 1704.53,638.634 1705.09,594.218 1705.65,612.629 1706.21,612.448 1706.77,583.675 1707.32,592.753 1707.88,610.81 1708.44,618.199 1709,603.2 1709.56,608.137 1710.12,629.389 1710.68,630.025 1711.24,620.143 1711.8,641.732 1712.36,639.812 1712.92,624.908 1713.48,610.486 1714.04,600.999 1714.6,591.878 1715.15,614.267 1715.71,596.423 1716.27,637.132 1716.83,671.082 1717.39,672.664 1717.95,675.787 1718.51,709.647 1719.07,694.337 1719.63,695.932 1720.19,710.207 1720.75,693.775 1721.31,677.348 1721.87,678.694 1722.42,690.357 1722.98,707.005 1723.54,758.634 1724.1,785.487 1724.66,764.463 1725.22,775.258 1725.78,766.392 1726.34,793.309 1726.9,806.526 1727.46,784.352 1728.02,744.993 1728.58,725.234 1729.14,690.773 1729.69,710.601 1730.25,725.228 1730.81,742.38 1731.37,688.403 1731.93,685.318 1732.49,674.463 1733.05,659.499 1733.61,626.835 1734.17,597.967 1734.73,651.808 1735.29,652.278 1735.85,655.029 1736.41,655.133 1736.97,656.626 1737.52,640.171 1738.08,625.772 1738.64,627.54 1739.2,631.882 1739.76,597.752 1740.32,602.045 1740.88,606.369 1741.44,595.911 1742,614.232 1742.56,602.791 1743.12,608.301 1743.68,660.033 1744.24,659.274 1744.79,706.606 1745.35,706.403 1745.91,702.569 1746.47,687.159 1747.03,685.091 1747.59,684.99 1748.15,732.641 1748.71,744.276 1749.27,725.955 1749.83,740.359 1750.39,722.255 1750.95,739.502 1751.51,707.207 1752.06,690.872 1752.62,709.491 1753.18,695.045 1753.74,691.077 1754.3,674.716 1754.86,655.362 1755.42,654.705 1755.98,640.279 1756.54,642.874 1757.1,659.677 1757.66,658.318 1758.22,677.4 1758.78,644.962 1759.34,643.109 1759.89,630.197 1760.45,616.375 1761.01,637.309 1761.57,653.923 1762.13,705.199 1762.69,670.981 1763.25,691.239 1763.81,690.446 1764.37,690.482 1764.93,726.859 1765.49,709.154 1766.05,693.163 1766.61,677.457 1767.16,693.825 1767.72,708.823 1768.28,727.204 1768.84,729.97 1769.4,729.165 1769.96,762.676 1770.52,760.675 1771.08,756.175 1771.64,734.674 1772.2,716.03 1772.76,698.601 1773.32,699.035 1773.88,700.052 1774.43,635.328 1774.99,635.08 1775.55,638.374 1776.11,659.202 1776.67,644.297 1777.23,628.138 1777.79,613.173 1778.35,633.867 1778.91,672.152 1779.47,702.708 1780.03,733.305 1780.59,716.15 1781.15,729.383 1781.71,745.598 1782.26,721.347 1782.82,703.113 1783.38,701.642 1783.94,732.217 1784.5,747.108 1785.06,728.654 1785.62,723.576 1786.18,754.495 1786.74,736.651 1787.3,767.608 1787.86,795.537 1788.42,818.399 1788.98,808.668 1789.53,818.573 1790.09,793.245 1790.65,789.852 1791.21,804.212 1791.77,796.856 1792.33,787.697 1792.89,747.44 1793.45,710.76 1794.01,706.177 1794.57,703.013 1795.13,717.435 1795.69,698.838 1796.25,699.027 1796.8,732.845 1797.36,742.999 1797.92,769.988 1798.48,735.688 1799.04,719.756 1799.6,719.885 1800.16,765.585 1800.72,746.607 1801.28,745.151 1801.84,725.434 1802.4,692.261 1802.96,693.035 1803.52,708.745 1804.08,728.074 1804.63,730.506 1805.19,711.024 1805.75,758.743 1806.31,753.668 1806.87,736.046 1807.43,731.281 1807.99,695.429 1808.55,695.709 1809.11,692.702 1809.67,739.965 1810.23,733.27 1810.79,729.294 1811.35,724.489 1811.9,692.83 1812.46,658.918 1813.02,709.164 1813.58,678.379 1814.14,644.426 1814.7,660.193 1815.26,643.97 1815.82,663.946 1816.38,664.906 1816.94,685.113 1817.5,713.411 1818.06,696.5 1818.62,695.308 1819.18,695.168 1819.73,682.162 1820.29,668.692 1820.85,640.65 1821.41,672.224 1821.97,653.933 1822.53,654.31 1823.09,672.767 1823.65,672.39 1824.21,674.491 1824.77,629.662 1825.33,636.5 1825.89,638.801 1826.45,661.867 1827,647.006 1827.56,650.039 1828.12,651.612 1828.68,654.985 1829.24,676.728 1829.8,710.426 1830.36,712.972 1830.92,711.78 1831.48,696.929 1832.04,706.48 1832.6,674.93 1833.16,674.931 1833.72,657.93 1834.27,628.886 1834.83,617.472 1835.39,683.57 1835.95,719.107 1836.51,715.852 1837.07,712.784 1837.63,711.023 1838.19,692.26 \"/>\n<path clip-path=\"url(#clip053)\" d=\"M720.247 692.571 L720.806 692.571 L721.365 692.571 L721.924 692.571 L722.484 692.571 L723.043 692.571 L723.602 692.571 L724.161 692.571 L724.721 692.571 L725.28 692.571 L725.839 692.571 L726.398 692.571 L726.958 692.571 L727.517 692.571 L728.076 692.571 L728.635 692.571 L729.195 692.571 L729.754 692.571 L730.313 692.571 L730.872 692.571 L731.432 692.571 L731.991 692.571 L732.55 692.571 L733.109 692.571 L733.669 692.571 L734.228 692.571 L734.787 692.571 L735.346 692.571 L735.906 692.571 L736.465 692.571 L737.024 692.571 L737.583 692.571 L738.143 692.571 L738.702 692.571 L739.261 692.571 L739.82 692.571 L740.38 692.571 L740.939 692.571 L741.498 692.571 L742.057 692.571 L742.617 692.571 L743.176 692.571 L743.735 692.571 L744.294 692.571 L744.854 692.571 L745.413 692.571 L745.972 692.571 L746.531 692.571 L747.091 692.571 L747.65 692.571 L748.209 692.571 L748.768 692.571 L749.328 692.571 L749.887 692.571 L750.446 692.571 L751.005 692.571 L751.565 692.571 L752.124 692.571 L752.683 692.571 L753.242 692.571 L753.802 692.571 L754.361 692.571 L754.92 692.571 L755.479 692.571 L756.039 692.571 L756.598 692.571 L757.157 692.571 L757.716 692.571 L758.276 692.571 L758.835 692.571 L759.394 692.571 L759.953 692.571 L760.513 692.571 L761.072 692.571 L761.631 692.571 L762.19 692.571 L762.75 692.571 L763.309 692.571 L763.868 692.571 L764.427 692.571 L764.987 692.571 L765.546 692.571 L766.105 692.571 L766.664 692.571 L767.224 692.571 L767.783 692.571 L768.342 692.571 L768.901 692.571 L769.461 692.571 L770.02 692.571 L770.579 692.571 L771.138 692.571 L771.698 692.571 L772.257 692.571 L772.816 692.571 L773.375 692.571 L773.935 692.571 L774.494 692.571 L775.053 692.571 L775.612 692.571 L776.172 692.571 L776.731 692.571 L777.29 692.571 L777.849 692.571 L778.409 692.571 L778.968 692.571 L779.527 692.571 L780.086 692.571 L780.646 692.571 L781.205 692.571 L781.764 692.571 L782.323 692.571 L782.883 692.571 L783.442 692.571 L784.001 692.571 L784.56 692.571 L785.12 692.571 L785.679 692.571 L786.238 692.571 L786.797 692.571 L787.357 692.571 L787.916 692.571 L788.475 692.571 L789.034 692.571 L789.594 692.571 L790.153 692.571 L790.712 692.571 L791.271 692.571 L791.831 692.571 L792.39 692.571 L792.949 692.571 L793.508 692.571 L794.068 692.571 L794.627 692.571 L795.186 692.571 L795.745 692.571 L796.305 692.571 L796.864 692.571 L797.423 692.571 L797.982 692.571 L798.542 692.571 L799.101 692.571 L799.66 692.571 L800.219 692.571 L800.779 692.571 L801.338 692.571 L801.897 692.571 L802.456 692.571 L803.016 692.571 L803.575 692.571 L804.134 692.571 L804.693 692.571 L805.253 692.571 L805.812 692.571 L806.371 692.571 L806.931 692.571 L807.49 692.571 L808.049 692.571 L808.608 692.571 L809.168 692.571 L809.727 692.571 L810.286 692.571 L810.845 692.571 L811.405 692.571 L811.964 692.571 L812.523 692.571 L813.082 692.571 L813.642 692.571 L814.201 692.571 L814.76 692.571 L815.319 692.571 L815.879 692.571 L816.438 692.571 L816.997 692.571 L817.556 692.571 L818.116 692.571 L818.675 692.571 L819.234 692.571 L819.793 692.571 L820.353 692.571 L820.912 692.571 L821.471 692.571 L822.03 692.571 L822.59 692.571 L823.149 692.571 L823.708 692.571 L824.267 692.571 L824.827 692.571 L825.386 692.571 L825.945 692.571 L826.504 692.571 L827.064 692.571 L827.623 692.571 L828.182 692.571 L828.741 692.571 L829.301 692.571 L829.86 692.571 L830.419 692.571 L830.978 692.571 L831.538 692.571 L832.097 692.571 L832.656 692.571 L833.215 692.571 L833.775 692.571 L834.334 692.571 L834.893 692.571 L835.452 692.571 L836.012 692.571 L836.571 692.571 L837.13 692.571 L837.689 692.571 L838.249 692.571 L838.808 692.571 L839.367 692.571 L839.926 692.571 L840.486 692.571 L841.045 692.571 L841.604 692.571 L842.163 692.571 L842.723 692.571 L843.282 692.571 L843.841 692.571 L844.4 692.571 L844.96 692.571 L845.519 692.571 L846.078 692.571 L846.637 692.571 L847.197 692.571 L847.756 692.571 L848.315 692.571 L848.874 692.571 L849.434 692.571 L849.993 692.571 L850.552 692.571 L851.111 692.571 L851.671 692.571 L852.23 692.571 L852.789 692.571 L853.348 692.571 L853.908 692.571 L854.467 692.571 L855.026 692.571 L855.585 692.571 L856.145 692.571 L856.704 692.571 L857.263 692.571 L857.822 692.571 L858.382 692.571 L858.941 692.571 L859.5 692.571 L860.059 692.571 L860.619 692.571 L861.178 692.571 L861.737 692.571 L862.296 692.571 L862.856 692.571 L863.415 692.571 L863.974 692.571 L864.533 692.571 L865.093 692.571 L865.652 692.571 L866.211 692.571 L866.77 692.571 L867.33 692.571 L867.889 692.571 L868.448 692.571 L869.007 692.571 L869.567 692.571 L870.126 692.571 L870.685 692.571 L871.244 692.571 L871.804 692.571 L872.363 692.571 L872.922 692.571 L873.481 692.571 L874.041 692.571 L874.6 692.571 L875.159 692.571 L875.718 692.571 L876.278 692.571 L876.837 692.571 L877.396 692.571 L877.955 692.571 L878.515 692.571 L879.074 692.571 L879.633 692.571 L880.192 692.571 L880.752 692.571 L881.311 692.571 L881.87 692.571 L882.429 692.571 L882.989 692.571 L883.548 692.571 L884.107 692.571 L884.666 692.571 L885.226 692.571 L885.785 692.571 L886.344 692.571 L886.903 692.571 L887.463 692.571 L888.022 692.571 L888.581 692.571 L889.14 692.571 L889.7 692.571 L890.259 692.571 L890.818 692.571 L891.377 692.571 L891.937 692.571 L892.496 692.571 L893.055 692.571 L893.614 692.571 L894.174 692.571 L894.733 692.571 L895.292 692.571 L895.851 692.571 L896.411 692.571 L896.97 692.571 L897.529 692.571 L898.088 692.571 L898.648 692.571 L899.207 692.571 L899.766 692.571 L900.325 692.571 L900.885 692.571 L901.444 692.571 L902.003 692.571 L902.562 692.571 L903.122 692.571 L903.681 692.571 L904.24 692.571 L904.799 692.571 L905.359 692.571 L905.918 692.571 L906.477 692.571 L907.036 692.571 L907.596 692.571 L908.155 692.571 L908.714 692.571 L909.273 692.571 L909.833 692.571 L910.392 692.571 L910.951 692.571 L911.51 692.571 L912.07 692.571 L912.629 692.571 L913.188 692.571 L913.747 692.571 L914.307 692.571 L914.866 692.571 L915.425 692.571 L915.984 692.571 L916.544 692.571 L917.103 692.571 L917.662 692.571 L918.221 692.571 L918.781 692.571 L919.34 692.571 L919.899 692.571 L920.458 692.571 L921.018 692.571 L921.577 692.571 L922.136 692.571 L922.695 692.571 L923.255 692.571 L923.814 692.571 L924.373 692.571 L924.932 692.571 L925.492 692.571 L926.051 692.571 L926.61 692.571 L927.169 692.571 L927.729 692.571 L928.288 692.571 L928.847 692.571 L929.406 692.571 L929.966 692.571 L930.525 692.571 L931.084 692.571 L931.644 692.571 L932.203 692.571 L932.762 692.571 L933.321 692.571 L933.881 692.571 L934.44 692.571 L934.999 692.571 L935.558 692.571 L936.118 692.571 L936.677 692.571 L937.236 692.571 L937.795 692.571 L938.355 692.571 L938.914 692.571 L939.473 692.571 L940.032 692.571 L940.592 692.571 L941.151 692.571 L941.71 692.571 L942.269 692.571 L942.829 692.571 L943.388 692.571 L943.947 692.571 L944.506 692.571 L945.066 692.571 L945.625 692.571 L946.184 692.571 L946.743 692.571 L947.303 692.571 L947.862 692.571 L948.421 692.571 L948.98 692.571 L949.54 692.571 L950.099 692.571 L950.658 692.571 L951.217 692.571 L951.777 692.571 L952.336 692.571 L952.895 692.571 L953.454 692.571 L954.014 692.571 L954.573 692.571 L955.132 692.571 L955.691 692.571 L956.251 692.571 L956.81 692.571 L957.369 692.571 L957.928 692.571 L958.488 692.571 L959.047 692.571 L959.606 692.571 L960.165 692.571 L960.725 692.571 L961.284 692.571 L961.843 692.571 L962.402 692.571 L962.962 692.571 L963.521 692.571 L964.08 692.571 L964.639 692.571 L965.199 692.571 L965.758 692.571 L966.317 692.571 L966.876 692.571 L967.436 692.571 L967.995 692.571 L968.554 692.571 L969.113 692.571 L969.673 692.571 L970.232 692.571 L970.791 692.571 L971.35 692.571 L971.91 692.571 L972.469 692.571 L973.028 692.571 L973.587 692.571 L974.147 692.571 L974.706 692.571 L975.265 692.571 L975.824 692.571 L976.384 692.571 L976.943 692.571 L977.502 692.571 L978.061 692.571 L978.621 692.571 L979.18 692.571 L979.739 692.571 L980.298 692.571 L980.858 692.571 L981.417 692.571 L981.976 692.571 L982.535 692.571 L983.095 692.571 L983.654 692.571 L984.213 692.571 L984.772 692.571 L985.332 692.571 L985.891 692.571 L986.45 692.571 L987.009 692.571 L987.569 692.571 L988.128 692.571 L988.687 692.571 L989.246 692.571 L989.806 692.571 L990.365 692.571 L990.924 692.571 L991.483 692.571 L992.043 692.571 L992.602 692.571 L993.161 692.571 L993.72 692.571 L994.28 692.571 L994.839 692.571 L995.398 692.571 L995.957 692.571 L996.517 692.571 L997.076 692.571 L997.635 692.571 L998.194 692.571 L998.754 692.571 L999.313 692.571 L999.872 692.571 L1000.43 692.571 L1000.99 692.571 L1001.55 692.571 L1002.11 692.571 L1002.67 692.571 L1003.23 692.571 L1003.79 692.571 L1004.35 692.571 L1004.91 692.571 L1005.46 692.571 L1006.02 692.571 L1006.58 692.571 L1007.14 692.571 L1007.7 692.571 L1008.26 692.571 L1008.82 692.571 L1009.38 692.571 L1009.94 692.571 L1010.5 692.571 L1011.06 692.571 L1011.62 692.571 L1012.18 692.571 L1012.73 692.571 L1013.29 692.571 L1013.85 692.571 L1014.41 692.571 L1014.97 692.571 L1015.53 692.571 L1016.09 692.571 L1016.65 692.571 L1017.21 692.571 L1017.77 692.571 L1018.33 692.571 L1018.89 692.571 L1019.45 692.571 L1020.01 692.571 L1020.56 692.571 L1021.12 692.571 L1021.68 692.571 L1022.24 692.571 L1022.8 692.571 L1023.36 692.571 L1023.92 692.571 L1024.48 692.571 L1025.04 692.571 L1025.6 692.571 L1026.16 692.571 L1026.72 692.571 L1027.28 692.571 L1027.83 692.571 L1028.39 692.571 L1028.95 692.571 L1029.51 692.571 L1030.07 692.571 L1030.63 692.571 L1031.19 692.571 L1031.75 692.571 L1032.31 692.571 L1032.87 692.571 L1033.43 692.571 L1033.99 692.571 L1034.55 692.571 L1035.1 692.571 L1035.66 692.571 L1036.22 692.571 L1036.78 692.571 L1037.34 692.571 L1037.9 692.571 L1038.46 692.571 L1039.02 692.571 L1039.58 692.571 L1040.14 692.571 L1040.7 692.571 L1041.26 692.571 L1041.82 692.571 L1042.38 692.571 L1042.93 692.571 L1043.49 692.571 L1044.05 692.571 L1044.61 692.571 L1045.17 692.571 L1045.73 692.571 L1046.29 692.571 L1046.85 692.571 L1047.41 692.571 L1047.97 692.571 L1048.53 692.571 L1049.09 692.571 L1049.65 692.571 L1050.2 692.571 L1050.76 692.571 L1051.32 692.571 L1051.88 692.571 L1052.44 692.571 L1053 692.571 L1053.56 692.571 L1054.12 692.571 L1054.68 692.571 L1055.24 692.571 L1055.8 692.571 L1056.36 692.571 L1056.92 692.571 L1057.48 692.571 L1058.03 692.571 L1058.59 692.571 L1059.15 692.571 L1059.71 692.571 L1060.27 692.571 L1060.83 692.571 L1061.39 692.571 L1061.95 692.571 L1062.51 692.571 L1063.07 692.571 L1063.63 692.571 L1064.19 692.571 L1064.75 692.571 L1065.3 692.571 L1065.86 692.571 L1066.42 692.571 L1066.98 692.571 L1067.54 692.571 L1068.1 692.571 L1068.66 692.571 L1069.22 692.571 L1069.78 692.571 L1070.34 692.571 L1070.9 692.571 L1071.46 692.571 L1072.02 692.571 L1072.57 692.571 L1073.13 692.571 L1073.69 692.571 L1074.25 692.571 L1074.81 692.571 L1075.37 692.571 L1075.93 692.571 L1076.49 692.571 L1077.05 692.571 L1077.61 692.571 L1078.17 692.571 L1078.73 692.571 L1079.29 692.571 L1079.85 692.571 L1080.4 692.571 L1080.96 692.571 L1081.52 692.571 L1082.08 692.571 L1082.64 692.571 L1083.2 692.571 L1083.76 692.571 L1084.32 692.571 L1084.88 692.571 L1085.44 692.571 L1086 692.571 L1086.56 692.571 L1087.12 692.571 L1087.67 692.571 L1088.23 692.571 L1088.79 692.571 L1089.35 692.571 L1089.91 692.571 L1090.47 692.571 L1091.03 692.571 L1091.59 692.571 L1092.15 692.571 L1092.71 692.571 L1093.27 692.571 L1093.83 692.571 L1094.39 692.571 L1094.94 692.571 L1095.5 692.571 L1096.06 692.571 L1096.62 692.571 L1097.18 692.571 L1097.74 692.571 L1098.3 692.571 L1098.86 692.571 L1099.42 692.571 L1099.98 692.571 L1100.54 692.571 L1101.1 692.571 L1101.66 692.571 L1102.22 692.571 L1102.77 692.571 L1103.33 692.571 L1103.89 692.571 L1104.45 692.571 L1105.01 692.571 L1105.57 692.571 L1106.13 692.571 L1106.69 692.571 L1107.25 692.571 L1107.81 692.571 L1108.37 692.571 L1108.93 692.571 L1109.49 692.571 L1110.04 692.571 L1110.6 692.571 L1111.16 692.571 L1111.72 692.571 L1112.28 692.571 L1112.84 692.571 L1113.4 692.571 L1113.96 692.571 L1114.52 692.571 L1115.08 692.571 L1115.64 692.571 L1116.2 692.571 L1116.76 692.571 L1117.31 692.571 L1117.87 692.571 L1118.43 692.571 L1118.99 692.571 L1119.55 692.571 L1120.11 692.571 L1120.67 692.571 L1121.23 692.571 L1121.79 692.571 L1122.35 692.571 L1122.91 692.571 L1123.47 692.571 L1124.03 692.571 L1124.59 692.571 L1125.14 692.571 L1125.7 692.571 L1126.26 692.571 L1126.82 692.571 L1127.38 692.571 L1127.94 692.571 L1128.5 692.571 L1129.06 692.571 L1129.62 692.571 L1130.18 692.571 L1130.74 692.571 L1131.3 692.571 L1131.86 692.571 L1132.41 692.571 L1132.97 692.571 L1133.53 692.571 L1134.09 692.571 L1134.65 692.571 L1135.21 692.571 L1135.77 692.571 L1136.33 692.571 L1136.89 692.571 L1137.45 692.571 L1138.01 692.571 L1138.57 692.571 L1139.13 692.571 L1139.68 692.571 L1140.24 692.571 L1140.8 692.571 L1141.36 692.571 L1141.92 692.571 L1142.48 692.571 L1143.04 692.571 L1143.6 692.571 L1144.16 692.571 L1144.72 692.571 L1145.28 692.571 L1145.84 692.571 L1146.4 692.571 L1146.96 692.571 L1147.51 692.571 L1148.07 692.571 L1148.63 692.571 L1149.19 692.571 L1149.75 692.571 L1150.31 692.571 L1150.87 692.571 L1151.43 692.571 L1151.99 692.571 L1152.55 692.571 L1153.11 692.571 L1153.67 692.571 L1154.23 692.571 L1154.78 692.571 L1155.34 692.571 L1155.9 692.571 L1156.46 692.571 L1157.02 692.571 L1157.58 692.571 L1158.14 692.571 L1158.7 692.571 L1159.26 692.571 L1159.82 692.571 L1160.38 692.571 L1160.94 692.571 L1161.5 692.571 L1162.05 692.571 L1162.61 692.571 L1163.17 692.571 L1163.73 692.571 L1164.29 692.571 L1164.85 692.571 L1165.41 692.571 L1165.97 692.571 L1166.53 692.571 L1167.09 692.571 L1167.65 692.571 L1168.21 692.571 L1168.77 692.571 L1169.33 692.571 L1169.88 692.571 L1170.44 692.571 L1171 692.571 L1171.56 692.571 L1172.12 692.571 L1172.68 692.571 L1173.24 692.571 L1173.8 692.571 L1174.36 692.571 L1174.92 692.571 L1175.48 692.571 L1176.04 692.571 L1176.6 692.571 L1177.15 692.571 L1177.71 692.571 L1178.27 692.571 L1178.83 692.571 L1179.39 692.571 L1179.95 692.571 L1180.51 692.571 L1181.07 692.571 L1181.63 692.571 L1182.19 692.571 L1182.75 692.571 L1183.31 692.571 L1183.87 692.571 L1184.43 692.571 L1184.98 692.571 L1185.54 692.571 L1186.1 692.571 L1186.66 692.571 L1187.22 692.571 L1187.78 692.571 L1188.34 692.571 L1188.9 692.571 L1189.46 692.571 L1190.02 692.571 L1190.58 692.571 L1191.14 692.571 L1191.7 692.571 L1192.25 692.571 L1192.81 692.571 L1193.37 692.571 L1193.93 692.571 L1194.49 692.571 L1195.05 692.571 L1195.61 692.571 L1196.17 692.571 L1196.73 692.571 L1197.29 692.571 L1197.85 692.571 L1198.41 692.571 L1198.97 692.571 L1199.52 692.571 L1200.08 692.571 L1200.64 692.571 L1201.2 692.571 L1201.76 692.571 L1202.32 692.571 L1202.88 692.571 L1203.44 692.571 L1204 692.571 L1204.56 692.571 L1205.12 692.571 L1205.68 692.571 L1206.24 692.571 L1206.8 692.571 L1207.35 692.571 L1207.91 692.571 L1208.47 692.571 L1209.03 692.571 L1209.59 692.571 L1210.15 692.571 L1210.71 692.571 L1211.27 692.571 L1211.83 692.571 L1212.39 692.571 L1212.95 692.571 L1213.51 692.571 L1214.07 692.571 L1214.62 692.571 L1215.18 692.571 L1215.74 692.571 L1216.3 692.571 L1216.86 692.571 L1217.42 692.571 L1217.98 692.571 L1218.54 692.571 L1219.1 692.571 L1219.66 692.571 L1220.22 692.571 L1220.78 692.571 L1221.34 692.571 L1221.89 692.571 L1222.45 692.571 L1223.01 692.571 L1223.57 692.571 L1224.13 692.571 L1224.69 692.571 L1225.25 692.571 L1225.81 692.571 L1226.37 692.571 L1226.93 692.571 L1227.49 692.571 L1228.05 692.571 L1228.61 692.571 L1229.17 692.571 L1229.72 692.571 L1230.28 692.571 L1230.84 692.571 L1231.4 692.571 L1231.96 692.571 L1232.52 692.571 L1233.08 692.571 L1233.64 692.571 L1234.2 692.571 L1234.76 692.571 L1235.32 692.571 L1235.88 692.571 L1236.44 692.571 L1236.99 692.571 L1237.55 692.571 L1238.11 692.571 L1238.67 692.571 L1239.23 692.571 L1239.79 692.571 L1240.35 692.571 L1240.91 692.571 L1241.47 692.571 L1242.03 692.571 L1242.59 692.571 L1243.15 692.571 L1243.71 692.571 L1244.26 692.571 L1244.82 692.571 L1245.38 692.571 L1245.94 692.571 L1246.5 692.571 L1247.06 692.571 L1247.62 692.571 L1248.18 692.571 L1248.74 692.571 L1249.3 692.571 L1249.86 692.571 L1250.42 692.571 L1250.98 692.571 L1251.54 692.571 L1252.09 692.571 L1252.65 692.571 L1253.21 692.571 L1253.77 692.571 L1254.33 692.571 L1254.89 692.571 L1255.45 692.571 L1256.01 692.571 L1256.57 692.571 L1257.13 692.571 L1257.69 692.571 L1258.25 692.571 L1258.81 692.571 L1259.36 692.571 L1259.92 692.571 L1260.48 692.571 L1261.04 692.571 L1261.6 692.571 L1262.16 692.571 L1262.72 692.571 L1263.28 692.571 L1263.84 692.571 L1264.4 692.571 L1264.96 692.571 L1265.52 692.571 L1266.08 692.571 L1266.63 692.571 L1267.19 692.571 L1267.75 692.571 L1268.31 692.571 L1268.87 692.571 L1269.43 692.571 L1269.99 692.571 L1270.55 692.571 L1271.11 692.571 L1271.67 692.571 L1272.23 692.571 L1272.79 692.571 L1273.35 692.571 L1273.91 692.571 L1274.46 692.571 L1275.02 692.571 L1275.58 692.571 L1276.14 692.571 L1276.7 692.571 L1277.26 692.571 L1277.82 692.571 L1278.38 692.571 L1278.94 692.571 L1279.5 692.571 L1280.06 692.571 L1280.62 692.571 L1281.18 692.571 L1281.73 692.571 L1282.29 692.571 L1282.85 692.571 L1283.41 692.571 L1283.97 692.571 L1284.53 692.571 L1285.09 692.571 L1285.65 692.571 L1286.21 692.571 L1286.77 692.571 L1287.33 692.571 L1287.89 692.571 L1288.45 692.571 L1289 692.571 L1289.56 692.571 L1290.12 692.571 L1290.68 692.571 L1291.24 692.571 L1291.8 692.571 L1292.36 692.571 L1292.92 692.571 L1293.48 692.571 L1294.04 692.571 L1294.6 692.571 L1295.16 692.571 L1295.72 692.571 L1296.28 692.571 L1296.83 692.571 L1297.39 692.571 L1297.95 692.571 L1298.51 692.571 L1299.07 692.571 L1299.63 692.571 L1300.19 692.571 L1300.75 692.571 L1301.31 692.571 L1301.87 692.571 L1302.43 692.571 L1302.99 692.571 L1303.55 692.571 L1304.1 692.571 L1304.66 692.571 L1305.22 692.571 L1305.78 692.571 L1306.34 692.571 L1306.9 692.571 L1307.46 692.571 L1308.02 692.571 L1308.58 692.571 L1309.14 692.571 L1309.7 692.571 L1310.26 692.571 L1310.82 692.571 L1311.38 692.571 L1311.93 692.571 L1312.49 692.571 L1313.05 692.571 L1313.61 692.571 L1314.17 692.571 L1314.73 692.571 L1315.29 692.571 L1315.85 692.571 L1316.41 692.571 L1316.97 692.571 L1317.53 692.571 L1318.09 692.571 L1318.65 692.571 L1319.2 692.571 L1319.76 692.571 L1320.32 692.571 L1320.88 692.571 L1321.44 692.571 L1322 692.571 L1322.56 692.571 L1323.12 692.571 L1323.68 692.571 L1324.24 692.571 L1324.8 692.571 L1325.36 692.571 L1325.92 692.571 L1326.47 692.571 L1327.03 692.571 L1327.59 692.571 L1328.15 692.571 L1328.71 692.571 L1329.27 692.571 L1329.83 692.571 L1330.39 692.571 L1330.95 692.571 L1331.51 692.571 L1332.07 692.571 L1332.63 692.571 L1333.19 692.571 L1333.75 692.571 L1334.3 692.571 L1334.86 692.571 L1335.42 692.571 L1335.98 692.571 L1336.54 692.571 L1337.1 692.571 L1337.66 692.571 L1338.22 692.571 L1338.78 692.571 L1339.34 692.571 L1339.9 692.571 L1340.46 692.571 L1341.02 692.571 L1341.57 692.571 L1342.13 692.571 L1342.69 692.571 L1343.25 692.571 L1343.81 692.571 L1344.37 692.571 L1344.93 692.571 L1345.49 692.571 L1346.05 692.571 L1346.61 692.571 L1347.17 692.571 L1347.73 692.571 L1348.29 692.571 L1348.84 692.571 L1349.4 692.571 L1349.96 692.571 L1350.52 692.571 L1351.08 692.571 L1351.64 692.571 L1352.2 692.571 L1352.76 692.571 L1353.32 692.571 L1353.88 692.571 L1354.44 692.571 L1355 692.571 L1355.56 692.571 L1356.12 692.571 L1356.67 692.571 L1357.23 692.571 L1357.79 692.571 L1358.35 692.571 L1358.91 692.571 L1359.47 692.571 L1360.03 692.571 L1360.59 692.571 L1361.15 692.571 L1361.71 692.571 L1362.27 692.571 L1362.83 692.571 L1363.39 692.571 L1363.94 692.571 L1364.5 692.571 L1365.06 692.571 L1365.62 692.571 L1366.18 692.571 L1366.74 692.571 L1367.3 692.571 L1367.86 692.571 L1368.42 692.571 L1368.98 692.571 L1369.54 692.571 L1370.1 692.571 L1370.66 692.571 L1371.21 692.571 L1371.77 692.571 L1372.33 692.571 L1372.89 692.571 L1373.45 692.571 L1374.01 692.571 L1374.57 692.571 L1375.13 692.571 L1375.69 692.571 L1376.25 692.571 L1376.81 692.571 L1377.37 692.571 L1377.93 692.571 L1378.49 692.571 L1379.04 692.571 L1379.6 692.571 L1380.16 692.571 L1380.72 692.571 L1381.28 692.571 L1381.84 692.571 L1382.4 692.571 L1382.96 692.571 L1383.52 692.571 L1384.08 692.571 L1384.64 692.571 L1385.2 692.571 L1385.76 692.571 L1386.31 692.571 L1386.87 692.571 L1387.43 692.571 L1387.99 692.571 L1388.55 692.571 L1389.11 692.571 L1389.67 692.571 L1390.23 692.571 L1390.79 692.571 L1391.35 692.571 L1391.91 692.571 L1392.47 692.571 L1393.03 692.571 L1393.58 692.571 L1394.14 692.571 L1394.7 692.571 L1395.26 692.571 L1395.82 692.571 L1396.38 692.571 L1396.94 692.571 L1397.5 692.571 L1398.06 692.571 L1398.62 692.571 L1399.18 692.571 L1399.74 692.571 L1400.3 692.571 L1400.86 692.571 L1401.41 692.571 L1401.97 692.571 L1402.53 692.571 L1403.09 692.571 L1403.65 692.571 L1404.21 692.571 L1404.77 692.571 L1405.33 692.571 L1405.89 692.571 L1406.45 692.571 L1407.01 692.571 L1407.57 692.571 L1408.13 692.571 L1408.68 692.571 L1409.24 692.571 L1409.8 692.571 L1410.36 692.571 L1410.92 692.571 L1411.48 692.571 L1412.04 692.571 L1412.6 692.571 L1413.16 692.571 L1413.72 692.571 L1414.28 692.571 L1414.84 692.571 L1415.4 692.571 L1415.95 692.571 L1416.51 692.571 L1417.07 692.571 L1417.63 692.571 L1418.19 692.571 L1418.75 692.571 L1419.31 692.571 L1419.87 692.571 L1420.43 692.571 L1420.99 692.571 L1421.55 692.571 L1422.11 692.571 L1422.67 692.571 L1423.23 692.571 L1423.78 692.571 L1424.34 692.571 L1424.9 692.571 L1425.46 692.571 L1426.02 692.571 L1426.58 692.571 L1427.14 692.571 L1427.7 692.571 L1428.26 692.571 L1428.82 692.571 L1429.38 692.571 L1429.94 692.571 L1430.5 692.571 L1431.05 692.571 L1431.61 692.571 L1432.17 692.571 L1432.73 692.571 L1433.29 692.571 L1433.85 692.571 L1434.41 692.571 L1434.97 692.571 L1435.53 692.571 L1436.09 692.571 L1436.65 692.571 L1437.21 692.571 L1437.77 692.571 L1438.33 692.571 L1438.88 692.571 L1439.44 692.571 L1440 692.571 L1440.56 692.571 L1441.12 692.571 L1441.68 692.571 L1442.24 692.571 L1442.8 692.571 L1443.36 692.571 L1443.92 692.571 L1444.48 692.571 L1445.04 692.571 L1445.6 692.571 L1446.15 692.571 L1446.71 692.571 L1447.27 692.571 L1447.83 692.571 L1448.39 692.571 L1448.95 692.571 L1449.51 692.571 L1450.07 692.571 L1450.63 692.571 L1451.19 692.571 L1451.75 692.571 L1452.31 692.571 L1452.87 692.571 L1453.42 692.571 L1453.98 692.571 L1454.54 692.571 L1455.1 692.571 L1455.66 692.571 L1456.22 692.571 L1456.78 692.571 L1457.34 692.571 L1457.9 692.571 L1458.46 692.571 L1459.02 692.571 L1459.58 692.571 L1460.14 692.571 L1460.7 692.571 L1461.25 692.571 L1461.81 692.571 L1462.37 692.571 L1462.93 692.571 L1463.49 692.571 L1464.05 692.571 L1464.61 692.571 L1465.17 692.571 L1465.73 692.571 L1466.29 692.571 L1466.85 692.571 L1467.41 692.571 L1467.97 692.571 L1468.52 692.571 L1469.08 692.571 L1469.64 692.571 L1470.2 692.571 L1470.76 692.571 L1471.32 692.571 L1471.88 692.571 L1472.44 692.571 L1473 692.571 L1473.56 692.571 L1474.12 692.571 L1474.68 692.571 L1475.24 692.571 L1475.79 692.571 L1476.35 692.571 L1476.91 692.571 L1477.47 692.571 L1478.03 692.571 L1478.59 692.571 L1479.15 692.571 L1479.71 692.571 L1480.27 692.571 L1480.83 692.571 L1481.39 692.571 L1481.95 692.571 L1482.51 692.571 L1483.07 692.571 L1483.62 692.571 L1484.18 692.571 L1484.74 692.571 L1485.3 692.571 L1485.86 692.571 L1486.42 692.571 L1486.98 692.571 L1487.54 692.571 L1488.1 692.571 L1488.66 692.571 L1489.22 692.571 L1489.78 692.571 L1490.34 692.571 L1490.89 692.571 L1491.45 692.571 L1492.01 692.571 L1492.57 692.571 L1493.13 692.571 L1493.69 692.571 L1494.25 692.571 L1494.81 692.571 L1495.37 692.571 L1495.93 692.571 L1496.49 692.571 L1497.05 692.571 L1497.61 692.571 L1498.16 692.571 L1498.72 692.571 L1499.28 692.571 L1499.84 692.571 L1500.4 692.571 L1500.96 692.571 L1501.52 692.571 L1502.08 692.571 L1502.64 692.571 L1503.2 692.571 L1503.76 692.571 L1504.32 692.571 L1504.88 692.571 L1505.44 692.571 L1505.99 692.571 L1506.55 692.571 L1507.11 692.571 L1507.67 692.571 L1508.23 692.571 L1508.79 692.571 L1509.35 692.571 L1509.91 692.571 L1510.47 692.571 L1511.03 692.571 L1511.59 692.571 L1512.15 692.571 L1512.71 692.571 L1513.26 692.571 L1513.82 692.571 L1514.38 692.571 L1514.94 692.571 L1515.5 692.571 L1516.06 692.571 L1516.62 692.571 L1517.18 692.571 L1517.74 692.571 L1518.3 692.571 L1518.86 692.571 L1519.42 692.571 L1519.98 692.571 L1520.53 692.571 L1521.09 692.571 L1521.65 692.571 L1522.21 692.571 L1522.77 692.571 L1523.33 692.571 L1523.89 692.571 L1524.45 692.571 L1525.01 692.571 L1525.57 692.571 L1526.13 692.571 L1526.69 692.571 L1527.25 692.571 L1527.81 692.571 L1528.36 692.571 L1528.92 692.571 L1529.48 692.571 L1530.04 692.571 L1530.6 692.571 L1531.16 692.571 L1531.72 692.571 L1532.28 692.571 L1532.84 692.571 L1533.4 692.571 L1533.96 692.571 L1534.52 692.571 L1535.08 692.571 L1535.63 692.571 L1536.19 692.571 L1536.75 692.571 L1537.31 692.571 L1537.87 692.571 L1538.43 692.571 L1538.99 692.571 L1539.55 692.571 L1540.11 692.571 L1540.67 692.571 L1541.23 692.571 L1541.79 692.571 L1542.35 692.571 L1542.9 692.571 L1543.46 692.571 L1544.02 692.571 L1544.58 692.571 L1545.14 692.571 L1545.7 692.571 L1546.26 692.571 L1546.82 692.571 L1547.38 692.571 L1547.94 692.571 L1548.5 692.571 L1549.06 692.571 L1549.62 692.571 L1550.18 692.571 L1550.73 692.571 L1551.29 692.571 L1551.85 692.571 L1552.41 692.571 L1552.97 692.571 L1553.53 692.571 L1554.09 692.571 L1554.65 692.571 L1555.21 692.571 L1555.77 692.571 L1556.33 692.571 L1556.89 692.571 L1557.45 692.571 L1558 692.571 L1558.56 692.571 L1559.12 692.571 L1559.68 692.571 L1560.24 692.571 L1560.8 692.571 L1561.36 692.571 L1561.92 692.571 L1562.48 692.571 L1563.04 692.571 L1563.6 692.571 L1564.16 692.571 L1564.72 692.571 L1565.28 692.571 L1565.83 692.571 L1566.39 692.571 L1566.95 692.571 L1567.51 692.571 L1568.07 692.571 L1568.63 692.571 L1569.19 692.571 L1569.75 692.571 L1570.31 692.571 L1570.87 692.571 L1571.43 692.571 L1571.99 692.571 L1572.55 692.571 L1573.1 692.571 L1573.66 692.571 L1574.22 692.571 L1574.78 692.571 L1575.34 692.571 L1575.9 692.571 L1576.46 692.571 L1577.02 692.571 L1577.58 692.571 L1578.14 692.571 L1578.7 692.571 L1579.26 692.571 L1579.82 692.571 L1580.37 692.571 L1580.93 692.571 L1581.49 692.571 L1582.05 692.571 L1582.61 692.571 L1583.17 692.571 L1583.73 692.571 L1584.29 692.571 L1584.85 692.571 L1585.41 692.571 L1585.97 692.571 L1586.53 692.571 L1587.09 692.571 L1587.65 692.571 L1588.2 692.571 L1588.76 692.571 L1589.32 692.571 L1589.88 692.571 L1590.44 692.571 L1591 692.571 L1591.56 692.571 L1592.12 692.571 L1592.68 692.571 L1593.24 692.571 L1593.8 692.571 L1594.36 692.571 L1594.92 692.571 L1595.47 692.571 L1596.03 692.571 L1596.59 692.571 L1597.15 692.571 L1597.71 692.571 L1598.27 692.571 L1598.83 692.571 L1599.39 692.571 L1599.95 692.571 L1600.51 692.571 L1601.07 692.571 L1601.63 692.571 L1602.19 692.571 L1602.74 692.571 L1603.3 692.571 L1603.86 692.571 L1604.42 692.571 L1604.98 692.571 L1605.54 692.571 L1606.1 692.571 L1606.66 692.571 L1607.22 692.571 L1607.78 692.571 L1608.34 692.571 L1608.9 692.571 L1609.46 692.571 L1610.02 692.571 L1610.57 692.571 L1611.13 692.571 L1611.69 692.571 L1612.25 692.571 L1612.81 692.571 L1613.37 692.571 L1613.93 692.571 L1614.49 692.571 L1615.05 692.571 L1615.61 692.571 L1616.17 692.571 L1616.73 692.571 L1617.29 692.571 L1617.84 692.571 L1618.4 692.571 L1618.96 692.571 L1619.52 692.571 L1620.08 692.571 L1620.64 692.571 L1621.2 692.571 L1621.76 692.571 L1622.32 692.571 L1622.88 692.571 L1623.44 692.571 L1624 692.571 L1624.56 692.571 L1625.11 692.571 L1625.67 692.571 L1626.23 692.571 L1626.79 692.571 L1627.35 692.571 L1627.91 692.571 L1628.47 692.571 L1629.03 692.571 L1629.59 692.571 L1630.15 692.571 L1630.71 692.571 L1631.27 692.571 L1631.83 692.571 L1632.39 692.571 L1632.94 692.571 L1633.5 692.571 L1634.06 692.571 L1634.62 692.571 L1635.18 692.571 L1635.74 692.571 L1636.3 692.571 L1636.86 692.571 L1637.42 692.571 L1637.98 692.571 L1638.54 692.571 L1639.1 692.571 L1639.66 692.571 L1640.21 692.571 L1640.77 692.571 L1641.33 692.571 L1641.89 692.571 L1642.45 692.571 L1643.01 692.571 L1643.57 692.571 L1644.13 692.571 L1644.69 692.571 L1645.25 692.571 L1645.81 692.571 L1646.37 692.571 L1646.93 692.571 L1647.48 692.571 L1648.04 692.571 L1648.6 692.571 L1649.16 692.571 L1649.72 692.571 L1650.28 692.571 L1650.84 692.571 L1651.4 692.571 L1651.96 692.571 L1652.52 692.571 L1653.08 692.571 L1653.64 692.571 L1654.2 692.571 L1654.76 692.571 L1655.31 692.571 L1655.87 692.571 L1656.43 692.571 L1656.99 692.571 L1657.55 692.571 L1658.11 692.571 L1658.67 692.571 L1659.23 692.571 L1659.79 692.571 L1660.35 692.571 L1660.91 692.571 L1661.47 692.571 L1662.03 692.571 L1662.58 692.571 L1663.14 692.571 L1663.7 692.571 L1664.26 692.571 L1664.82 692.571 L1665.38 692.571 L1665.94 692.571 L1666.5 692.571 L1667.06 692.571 L1667.62 692.571 L1668.18 692.571 L1668.74 692.571 L1669.3 692.571 L1669.85 692.571 L1670.41 692.571 L1670.97 692.571 L1671.53 692.571 L1672.09 692.571 L1672.65 692.571 L1673.21 692.571 L1673.77 692.571 L1674.33 692.571 L1674.89 692.571 L1675.45 692.571 L1676.01 692.571 L1676.57 692.571 L1677.13 692.571 L1677.68 692.571 L1678.24 692.571 L1678.8 692.571 L1679.36 692.571 L1679.92 692.571 L1680.48 692.571 L1681.04 692.571 L1681.6 692.571 L1682.16 692.571 L1682.72 692.571 L1683.28 692.571 L1683.84 692.571 L1684.4 692.571 L1684.95 692.571 L1685.51 692.571 L1686.07 692.571 L1686.63 692.571 L1687.19 692.571 L1687.75 692.571 L1688.31 692.571 L1688.87 692.571 L1689.43 692.571 L1689.99 692.571 L1690.55 692.571 L1691.11 692.571 L1691.67 692.571 L1692.23 692.571 L1692.78 692.571 L1693.34 692.571 L1693.9 692.571 L1694.46 692.571 L1695.02 692.571 L1695.58 692.571 L1696.14 692.571 L1696.7 692.571 L1697.26 692.571 L1697.82 692.571 L1698.38 692.571 L1698.94 692.571 L1699.5 692.571 L1700.05 692.571 L1700.61 692.571 L1701.17 692.571 L1701.73 692.571 L1702.29 692.571 L1702.85 692.571 L1703.41 692.571 L1703.97 692.571 L1704.53 692.571 L1705.09 692.571 L1705.65 692.571 L1706.21 692.571 L1706.77 692.571 L1707.32 692.571 L1707.88 692.571 L1708.44 692.571 L1709 692.571 L1709.56 692.571 L1710.12 692.571 L1710.68 692.571 L1711.24 692.571 L1711.8 692.571 L1712.36 692.571 L1712.92 692.571 L1713.48 692.571 L1714.04 692.571 L1714.6 692.571 L1715.15 692.571 L1715.71 692.571 L1716.27 692.571 L1716.83 692.571 L1717.39 692.571 L1717.95 692.571 L1718.51 692.571 L1719.07 692.571 L1719.63 692.571 L1720.19 692.571 L1720.75 692.571 L1721.31 692.571 L1721.87 692.571 L1722.42 692.571 L1722.98 692.571 L1723.54 692.571 L1724.1 692.571 L1724.66 692.571 L1725.22 692.571 L1725.78 692.571 L1726.34 692.571 L1726.9 692.571 L1727.46 692.571 L1728.02 692.571 L1728.58 692.571 L1729.14 692.571 L1729.69 692.571 L1730.25 692.571 L1730.81 692.571 L1731.37 692.571 L1731.93 692.571 L1732.49 692.571 L1733.05 692.571 L1733.61 692.571 L1734.17 692.571 L1734.73 692.571 L1735.29 692.571 L1735.85 692.571 L1736.41 692.571 L1736.97 692.571 L1737.52 692.571 L1738.08 692.571 L1738.64 692.571 L1739.2 692.571 L1739.76 692.571 L1740.32 692.571 L1740.88 692.571 L1741.44 692.571 L1742 692.571 L1742.56 692.571 L1743.12 692.571 L1743.68 692.571 L1744.24 692.571 L1744.79 692.571 L1745.35 692.571 L1745.91 692.571 L1746.47 692.571 L1747.03 692.571 L1747.59 692.571 L1748.15 692.571 L1748.71 692.571 L1749.27 692.571 L1749.83 692.571 L1750.39 692.571 L1750.95 692.571 L1751.51 692.571 L1752.06 692.571 L1752.62 692.571 L1753.18 692.571 L1753.74 692.571 L1754.3 692.571 L1754.86 692.571 L1755.42 692.571 L1755.98 692.571 L1756.54 692.571 L1757.1 692.571 L1757.66 692.571 L1758.22 692.571 L1758.78 692.571 L1759.34 692.571 L1759.89 692.571 L1760.45 692.571 L1761.01 692.571 L1761.57 692.571 L1762.13 692.571 L1762.69 692.571 L1763.25 692.571 L1763.81 692.571 L1764.37 692.571 L1764.93 692.571 L1765.49 692.571 L1766.05 692.571 L1766.61 692.571 L1767.16 692.571 L1767.72 692.571 L1768.28 692.571 L1768.84 692.571 L1769.4 692.571 L1769.96 692.571 L1770.52 692.571 L1771.08 692.571 L1771.64 692.571 L1772.2 692.571 L1772.76 692.571 L1773.32 692.571 L1773.88 692.571 L1774.43 692.571 L1774.99 692.571 L1775.55 692.571 L1776.11 692.571 L1776.67 692.571 L1777.23 692.571 L1777.79 692.571 L1778.35 692.571 L1778.91 692.571 L1779.47 692.571 L1780.03 692.571 L1780.59 692.571 L1781.15 692.571 L1781.71 692.571 L1782.26 692.571 L1782.82 692.571 L1783.38 692.571 L1783.94 692.571 L1784.5 692.571 L1785.06 692.571 L1785.62 692.571 L1786.18 692.571 L1786.74 692.571 L1787.3 692.571 L1787.86 692.571 L1788.42 692.571 L1788.98 692.571 L1789.53 692.571 L1790.09 692.571 L1790.65 692.571 L1791.21 692.571 L1791.77 692.571 L1792.33 692.571 L1792.89 692.571 L1793.45 692.571 L1794.01 692.571 L1794.57 692.571 L1795.13 692.571 L1795.69 692.571 L1796.25 692.571 L1796.8 692.571 L1797.36 692.571 L1797.92 692.571 L1798.48 692.571 L1799.04 692.571 L1799.6 692.571 L1800.16 692.571 L1800.72 692.571 L1801.28 692.571 L1801.84 692.571 L1802.4 692.571 L1802.96 692.571 L1803.52 692.571 L1804.08 692.571 L1804.63 692.571 L1805.19 692.571 L1805.75 692.571 L1806.31 692.571 L1806.87 692.571 L1807.43 692.571 L1807.99 692.571 L1808.55 692.571 L1809.11 692.571 L1809.67 692.571 L1810.23 692.571 L1810.79 692.571 L1811.35 692.571 L1811.9 692.571 L1812.46 692.571 L1813.02 692.571 L1813.58 692.571 L1814.14 692.571 L1814.7 692.571 L1815.26 692.571 L1815.82 692.571 L1816.38 692.571 L1816.94 692.571 L1817.5 692.571 L1818.06 692.571 L1818.62 692.571 L1819.18 692.571 L1819.73 692.571 L1820.29 692.571 L1820.85 692.571 L1821.41 692.571 L1821.97 692.571 L1822.53 692.571 L1823.09 692.571 L1823.65 692.571 L1824.21 692.571 L1824.77 692.571 L1825.33 692.571 L1825.89 692.571 L1826.45 692.571 L1827 692.571 L1827.56 692.571 L1828.12 692.571 L1828.68 692.571 L1829.24 692.571 L1829.8 692.571 L1830.36 692.571 L1830.92 692.571 L1831.48 692.571 L1832.04 692.571 L1832.6 692.571 L1833.16 692.571 L1833.72 692.571 L1834.27 692.571 L1834.83 692.571 L1835.39 692.571 L1835.95 692.571 L1836.51 692.571 L1837.07 692.571 L1837.63 692.571 L1838.19 692.571 L1838.19 683.45 L1837.63 683.45 L1837.07 683.45 L1836.51 683.45 L1835.95 683.45 L1835.39 683.45 L1834.83 683.45 L1834.27 683.45 L1833.72 683.45 L1833.16 683.45 L1832.6 683.45 L1832.04 683.45 L1831.48 683.45 L1830.92 683.45 L1830.36 683.45 L1829.8 683.45 L1829.24 683.45 L1828.68 683.45 L1828.12 683.45 L1827.56 683.45 L1827 683.45 L1826.45 683.45 L1825.89 683.45 L1825.33 683.45 L1824.77 683.45 L1824.21 683.45 L1823.65 683.45 L1823.09 683.45 L1822.53 683.45 L1821.97 683.45 L1821.41 683.45 L1820.85 683.45 L1820.29 683.45 L1819.73 683.45 L1819.18 683.45 L1818.62 683.45 L1818.06 683.45 L1817.5 683.45 L1816.94 683.45 L1816.38 683.45 L1815.82 683.45 L1815.26 683.45 L1814.7 683.45 L1814.14 683.45 L1813.58 683.45 L1813.02 683.45 L1812.46 683.45 L1811.9 683.45 L1811.35 683.45 L1810.79 683.45 L1810.23 683.45 L1809.67 683.45 L1809.11 683.45 L1808.55 683.45 L1807.99 683.45 L1807.43 683.45 L1806.87 683.45 L1806.31 683.45 L1805.75 683.45 L1805.19 683.45 L1804.63 683.45 L1804.08 683.45 L1803.52 683.45 L1802.96 683.45 L1802.4 683.45 L1801.84 683.45 L1801.28 683.45 L1800.72 683.45 L1800.16 683.45 L1799.6 683.45 L1799.04 683.45 L1798.48 683.45 L1797.92 683.45 L1797.36 683.45 L1796.8 683.45 L1796.25 683.45 L1795.69 683.45 L1795.13 683.45 L1794.57 683.45 L1794.01 683.45 L1793.45 683.45 L1792.89 683.45 L1792.33 683.45 L1791.77 683.45 L1791.21 683.45 L1790.65 683.45 L1790.09 683.45 L1789.53 683.45 L1788.98 683.45 L1788.42 683.45 L1787.86 683.45 L1787.3 683.45 L1786.74 683.45 L1786.18 683.45 L1785.62 683.45 L1785.06 683.45 L1784.5 683.45 L1783.94 683.45 L1783.38 683.45 L1782.82 683.45 L1782.26 683.45 L1781.71 683.45 L1781.15 683.45 L1780.59 683.45 L1780.03 683.45 L1779.47 683.45 L1778.91 683.45 L1778.35 683.45 L1777.79 683.45 L1777.23 683.45 L1776.67 683.45 L1776.11 683.45 L1775.55 683.45 L1774.99 683.45 L1774.43 683.45 L1773.88 683.45 L1773.32 683.45 L1772.76 683.45 L1772.2 683.45 L1771.64 683.45 L1771.08 683.45 L1770.52 683.45 L1769.96 683.45 L1769.4 683.45 L1768.84 683.45 L1768.28 683.45 L1767.72 683.45 L1767.16 683.45 L1766.61 683.45 L1766.05 683.45 L1765.49 683.45 L1764.93 683.45 L1764.37 683.45 L1763.81 683.45 L1763.25 683.45 L1762.69 683.45 L1762.13 683.45 L1761.57 683.45 L1761.01 683.45 L1760.45 683.45 L1759.89 683.45 L1759.34 683.45 L1758.78 683.45 L1758.22 683.45 L1757.66 683.45 L1757.1 683.45 L1756.54 683.45 L1755.98 683.45 L1755.42 683.45 L1754.86 683.45 L1754.3 683.45 L1753.74 683.45 L1753.18 683.45 L1752.62 683.45 L1752.06 683.45 L1751.51 683.45 L1750.95 683.45 L1750.39 683.45 L1749.83 683.45 L1749.27 683.45 L1748.71 683.45 L1748.15 683.45 L1747.59 683.45 L1747.03 683.45 L1746.47 683.45 L1745.91 683.45 L1745.35 683.45 L1744.79 683.45 L1744.24 683.45 L1743.68 683.45 L1743.12 683.45 L1742.56 683.45 L1742 683.45 L1741.44 683.45 L1740.88 683.45 L1740.32 683.45 L1739.76 683.45 L1739.2 683.45 L1738.64 683.45 L1738.08 683.45 L1737.52 683.45 L1736.97 683.45 L1736.41 683.45 L1735.85 683.45 L1735.29 683.45 L1734.73 683.45 L1734.17 683.45 L1733.61 683.45 L1733.05 683.45 L1732.49 683.45 L1731.93 683.45 L1731.37 683.45 L1730.81 683.45 L1730.25 683.45 L1729.69 683.45 L1729.14 683.45 L1728.58 683.45 L1728.02 683.45 L1727.46 683.45 L1726.9 683.45 L1726.34 683.45 L1725.78 683.45 L1725.22 683.45 L1724.66 683.45 L1724.1 683.45 L1723.54 683.45 L1722.98 683.45 L1722.42 683.45 L1721.87 683.45 L1721.31 683.45 L1720.75 683.45 L1720.19 683.45 L1719.63 683.45 L1719.07 683.45 L1718.51 683.45 L1717.95 683.45 L1717.39 683.45 L1716.83 683.45 L1716.27 683.45 L1715.71 683.45 L1715.15 683.45 L1714.6 683.45 L1714.04 683.45 L1713.48 683.45 L1712.92 683.45 L1712.36 683.45 L1711.8 683.45 L1711.24 683.45 L1710.68 683.45 L1710.12 683.45 L1709.56 683.45 L1709 683.45 L1708.44 683.45 L1707.88 683.45 L1707.32 683.45 L1706.77 683.45 L1706.21 683.45 L1705.65 683.45 L1705.09 683.45 L1704.53 683.45 L1703.97 683.45 L1703.41 683.45 L1702.85 683.45 L1702.29 683.45 L1701.73 683.45 L1701.17 683.45 L1700.61 683.45 L1700.05 683.45 L1699.5 683.45 L1698.94 683.45 L1698.38 683.45 L1697.82 683.45 L1697.26 683.45 L1696.7 683.45 L1696.14 683.45 L1695.58 683.45 L1695.02 683.45 L1694.46 683.45 L1693.9 683.45 L1693.34 683.45 L1692.78 683.45 L1692.23 683.45 L1691.67 683.45 L1691.11 683.45 L1690.55 683.45 L1689.99 683.45 L1689.43 683.45 L1688.87 683.45 L1688.31 683.45 L1687.75 683.45 L1687.19 683.45 L1686.63 683.45 L1686.07 683.45 L1685.51 683.45 L1684.95 683.45 L1684.4 683.45 L1683.84 683.45 L1683.28 683.45 L1682.72 683.45 L1682.16 683.45 L1681.6 683.45 L1681.04 683.45 L1680.48 683.45 L1679.92 683.45 L1679.36 683.45 L1678.8 683.45 L1678.24 683.45 L1677.68 683.45 L1677.13 683.45 L1676.57 683.45 L1676.01 683.45 L1675.45 683.45 L1674.89 683.45 L1674.33 683.45 L1673.77 683.45 L1673.21 683.45 L1672.65 683.45 L1672.09 683.45 L1671.53 683.45 L1670.97 683.45 L1670.41 683.45 L1669.85 683.45 L1669.3 683.45 L1668.74 683.45 L1668.18 683.45 L1667.62 683.45 L1667.06 683.45 L1666.5 683.45 L1665.94 683.45 L1665.38 683.45 L1664.82 683.45 L1664.26 683.45 L1663.7 683.45 L1663.14 683.45 L1662.58 683.45 L1662.03 683.45 L1661.47 683.45 L1660.91 683.45 L1660.35 683.45 L1659.79 683.45 L1659.23 683.45 L1658.67 683.45 L1658.11 683.45 L1657.55 683.45 L1656.99 683.45 L1656.43 683.45 L1655.87 683.45 L1655.31 683.45 L1654.76 683.45 L1654.2 683.45 L1653.64 683.45 L1653.08 683.45 L1652.52 683.45 L1651.96 683.45 L1651.4 683.45 L1650.84 683.45 L1650.28 683.45 L1649.72 683.45 L1649.16 683.45 L1648.6 683.45 L1648.04 683.45 L1647.48 683.45 L1646.93 683.45 L1646.37 683.45 L1645.81 683.45 L1645.25 683.45 L1644.69 683.45 L1644.13 683.45 L1643.57 683.45 L1643.01 683.45 L1642.45 683.45 L1641.89 683.45 L1641.33 683.45 L1640.77 683.45 L1640.21 683.45 L1639.66 683.45 L1639.1 683.45 L1638.54 683.45 L1637.98 683.45 L1637.42 683.45 L1636.86 683.45 L1636.3 683.45 L1635.74 683.45 L1635.18 683.45 L1634.62 683.45 L1634.06 683.45 L1633.5 683.45 L1632.94 683.45 L1632.39 683.45 L1631.83 683.45 L1631.27 683.45 L1630.71 683.45 L1630.15 683.45 L1629.59 683.45 L1629.03 683.45 L1628.47 683.45 L1627.91 683.45 L1627.35 683.45 L1626.79 683.45 L1626.23 683.45 L1625.67 683.45 L1625.11 683.45 L1624.56 683.45 L1624 683.45 L1623.44 683.45 L1622.88 683.45 L1622.32 683.45 L1621.76 683.45 L1621.2 683.45 L1620.64 683.45 L1620.08 683.45 L1619.52 683.45 L1618.96 683.45 L1618.4 683.45 L1617.84 683.45 L1617.29 683.45 L1616.73 683.45 L1616.17 683.45 L1615.61 683.45 L1615.05 683.45 L1614.49 683.45 L1613.93 683.45 L1613.37 683.45 L1612.81 683.45 L1612.25 683.45 L1611.69 683.45 L1611.13 683.45 L1610.57 683.45 L1610.02 683.45 L1609.46 683.45 L1608.9 683.45 L1608.34 683.45 L1607.78 683.45 L1607.22 683.45 L1606.66 683.45 L1606.1 683.45 L1605.54 683.45 L1604.98 683.45 L1604.42 683.45 L1603.86 683.45 L1603.3 683.45 L1602.74 683.45 L1602.19 683.45 L1601.63 683.45 L1601.07 683.45 L1600.51 683.45 L1599.95 683.45 L1599.39 683.45 L1598.83 683.45 L1598.27 683.45 L1597.71 683.45 L1597.15 683.45 L1596.59 683.45 L1596.03 683.45 L1595.47 683.45 L1594.92 683.45 L1594.36 683.45 L1593.8 683.45 L1593.24 683.45 L1592.68 683.45 L1592.12 683.45 L1591.56 683.45 L1591 683.45 L1590.44 683.45 L1589.88 683.45 L1589.32 683.45 L1588.76 683.45 L1588.2 683.45 L1587.65 683.45 L1587.09 683.45 L1586.53 683.45 L1585.97 683.45 L1585.41 683.45 L1584.85 683.45 L1584.29 683.45 L1583.73 683.45 L1583.17 683.45 L1582.61 683.45 L1582.05 683.45 L1581.49 683.45 L1580.93 683.45 L1580.37 683.45 L1579.82 683.45 L1579.26 683.45 L1578.7 683.45 L1578.14 683.45 L1577.58 683.45 L1577.02 683.45 L1576.46 683.45 L1575.9 683.45 L1575.34 683.45 L1574.78 683.45 L1574.22 683.45 L1573.66 683.45 L1573.1 683.45 L1572.55 683.45 L1571.99 683.45 L1571.43 683.45 L1570.87 683.45 L1570.31 683.45 L1569.75 683.45 L1569.19 683.45 L1568.63 683.45 L1568.07 683.45 L1567.51 683.45 L1566.95 683.45 L1566.39 683.45 L1565.83 683.45 L1565.28 683.45 L1564.72 683.45 L1564.16 683.45 L1563.6 683.45 L1563.04 683.45 L1562.48 683.45 L1561.92 683.45 L1561.36 683.45 L1560.8 683.45 L1560.24 683.45 L1559.68 683.45 L1559.12 683.45 L1558.56 683.45 L1558 683.45 L1557.45 683.45 L1556.89 683.45 L1556.33 683.45 L1555.77 683.45 L1555.21 683.45 L1554.65 683.45 L1554.09 683.45 L1553.53 683.45 L1552.97 683.45 L1552.41 683.45 L1551.85 683.45 L1551.29 683.45 L1550.73 683.45 L1550.18 683.45 L1549.62 683.45 L1549.06 683.45 L1548.5 683.45 L1547.94 683.45 L1547.38 683.45 L1546.82 683.45 L1546.26 683.45 L1545.7 683.45 L1545.14 683.45 L1544.58 683.45 L1544.02 683.45 L1543.46 683.45 L1542.9 683.45 L1542.35 683.45 L1541.79 683.45 L1541.23 683.45 L1540.67 683.45 L1540.11 683.45 L1539.55 683.45 L1538.99 683.45 L1538.43 683.45 L1537.87 683.45 L1537.31 683.45 L1536.75 683.45 L1536.19 683.45 L1535.63 683.45 L1535.08 683.45 L1534.52 683.45 L1533.96 683.45 L1533.4 683.45 L1532.84 683.45 L1532.28 683.45 L1531.72 683.45 L1531.16 683.45 L1530.6 683.45 L1530.04 683.45 L1529.48 683.45 L1528.92 683.45 L1528.36 683.45 L1527.81 683.45 L1527.25 683.45 L1526.69 683.45 L1526.13 683.45 L1525.57 683.45 L1525.01 683.45 L1524.45 683.45 L1523.89 683.45 L1523.33 683.45 L1522.77 683.45 L1522.21 683.45 L1521.65 683.45 L1521.09 683.45 L1520.53 683.45 L1519.98 683.45 L1519.42 683.45 L1518.86 683.45 L1518.3 683.45 L1517.74 683.45 L1517.18 683.45 L1516.62 683.45 L1516.06 683.45 L1515.5 683.45 L1514.94 683.45 L1514.38 683.45 L1513.82 683.45 L1513.26 683.45 L1512.71 683.45 L1512.15 683.45 L1511.59 683.45 L1511.03 683.45 L1510.47 683.45 L1509.91 683.45 L1509.35 683.45 L1508.79 683.45 L1508.23 683.45 L1507.67 683.45 L1507.11 683.45 L1506.55 683.45 L1505.99 683.45 L1505.44 683.45 L1504.88 683.45 L1504.32 683.45 L1503.76 683.45 L1503.2 683.45 L1502.64 683.45 L1502.08 683.45 L1501.52 683.45 L1500.96 683.45 L1500.4 683.45 L1499.84 683.45 L1499.28 683.45 L1498.72 683.45 L1498.16 683.45 L1497.61 683.45 L1497.05 683.45 L1496.49 683.45 L1495.93 683.45 L1495.37 683.45 L1494.81 683.45 L1494.25 683.45 L1493.69 683.45 L1493.13 683.45 L1492.57 683.45 L1492.01 683.45 L1491.45 683.45 L1490.89 683.45 L1490.34 683.45 L1489.78 683.45 L1489.22 683.45 L1488.66 683.45 L1488.1 683.45 L1487.54 683.45 L1486.98 683.45 L1486.42 683.45 L1485.86 683.45 L1485.3 683.45 L1484.74 683.45 L1484.18 683.45 L1483.62 683.45 L1483.07 683.45 L1482.51 683.45 L1481.95 683.45 L1481.39 683.45 L1480.83 683.45 L1480.27 683.45 L1479.71 683.45 L1479.15 683.45 L1478.59 683.45 L1478.03 683.45 L1477.47 683.45 L1476.91 683.45 L1476.35 683.45 L1475.79 683.45 L1475.24 683.45 L1474.68 683.45 L1474.12 683.45 L1473.56 683.45 L1473 683.45 L1472.44 683.45 L1471.88 683.45 L1471.32 683.45 L1470.76 683.45 L1470.2 683.45 L1469.64 683.45 L1469.08 683.45 L1468.52 683.45 L1467.97 683.45 L1467.41 683.45 L1466.85 683.45 L1466.29 683.45 L1465.73 683.45 L1465.17 683.45 L1464.61 683.45 L1464.05 683.45 L1463.49 683.45 L1462.93 683.45 L1462.37 683.45 L1461.81 683.45 L1461.25 683.45 L1460.7 683.45 L1460.14 683.45 L1459.58 683.45 L1459.02 683.45 L1458.46 683.45 L1457.9 683.45 L1457.34 683.45 L1456.78 683.45 L1456.22 683.45 L1455.66 683.45 L1455.1 683.45 L1454.54 683.45 L1453.98 683.45 L1453.42 683.45 L1452.87 683.45 L1452.31 683.45 L1451.75 683.45 L1451.19 683.45 L1450.63 683.45 L1450.07 683.45 L1449.51 683.45 L1448.95 683.45 L1448.39 683.45 L1447.83 683.45 L1447.27 683.45 L1446.71 683.45 L1446.15 683.45 L1445.6 683.45 L1445.04 683.45 L1444.48 683.45 L1443.92 683.45 L1443.36 683.45 L1442.8 683.45 L1442.24 683.45 L1441.68 683.45 L1441.12 683.45 L1440.56 683.45 L1440 683.45 L1439.44 683.45 L1438.88 683.45 L1438.33 683.45 L1437.77 683.45 L1437.21 683.45 L1436.65 683.45 L1436.09 683.45 L1435.53 683.45 L1434.97 683.45 L1434.41 683.45 L1433.85 683.45 L1433.29 683.45 L1432.73 683.45 L1432.17 683.45 L1431.61 683.45 L1431.05 683.45 L1430.5 683.45 L1429.94 683.45 L1429.38 683.45 L1428.82 683.45 L1428.26 683.45 L1427.7 683.45 L1427.14 683.45 L1426.58 683.45 L1426.02 683.45 L1425.46 683.45 L1424.9 683.45 L1424.34 683.45 L1423.78 683.45 L1423.23 683.45 L1422.67 683.45 L1422.11 683.45 L1421.55 683.45 L1420.99 683.45 L1420.43 683.45 L1419.87 683.45 L1419.31 683.45 L1418.75 683.45 L1418.19 683.45 L1417.63 683.45 L1417.07 683.45 L1416.51 683.45 L1415.95 683.45 L1415.4 683.45 L1414.84 683.45 L1414.28 683.45 L1413.72 683.45 L1413.16 683.45 L1412.6 683.45 L1412.04 683.45 L1411.48 683.45 L1410.92 683.45 L1410.36 683.45 L1409.8 683.45 L1409.24 683.45 L1408.68 683.45 L1408.13 683.45 L1407.57 683.45 L1407.01 683.45 L1406.45 683.45 L1405.89 683.45 L1405.33 683.45 L1404.77 683.45 L1404.21 683.45 L1403.65 683.45 L1403.09 683.45 L1402.53 683.45 L1401.97 683.45 L1401.41 683.45 L1400.86 683.45 L1400.3 683.45 L1399.74 683.45 L1399.18 683.45 L1398.62 683.45 L1398.06 683.45 L1397.5 683.45 L1396.94 683.45 L1396.38 683.45 L1395.82 683.45 L1395.26 683.45 L1394.7 683.45 L1394.14 683.45 L1393.58 683.45 L1393.03 683.45 L1392.47 683.45 L1391.91 683.45 L1391.35 683.45 L1390.79 683.45 L1390.23 683.45 L1389.67 683.45 L1389.11 683.45 L1388.55 683.45 L1387.99 683.45 L1387.43 683.45 L1386.87 683.45 L1386.31 683.45 L1385.76 683.45 L1385.2 683.45 L1384.64 683.45 L1384.08 683.45 L1383.52 683.45 L1382.96 683.45 L1382.4 683.45 L1381.84 683.45 L1381.28 683.45 L1380.72 683.45 L1380.16 683.45 L1379.6 683.45 L1379.04 683.45 L1378.49 683.45 L1377.93 683.45 L1377.37 683.45 L1376.81 683.45 L1376.25 683.45 L1375.69 683.45 L1375.13 683.45 L1374.57 683.45 L1374.01 683.45 L1373.45 683.45 L1372.89 683.45 L1372.33 683.45 L1371.77 683.45 L1371.21 683.45 L1370.66 683.45 L1370.1 683.45 L1369.54 683.45 L1368.98 683.45 L1368.42 683.45 L1367.86 683.45 L1367.3 683.45 L1366.74 683.45 L1366.18 683.45 L1365.62 683.45 L1365.06 683.45 L1364.5 683.45 L1363.94 683.45 L1363.39 683.45 L1362.83 683.45 L1362.27 683.45 L1361.71 683.45 L1361.15 683.45 L1360.59 683.45 L1360.03 683.45 L1359.47 683.45 L1358.91 683.45 L1358.35 683.45 L1357.79 683.45 L1357.23 683.45 L1356.67 683.45 L1356.12 683.45 L1355.56 683.45 L1355 683.45 L1354.44 683.45 L1353.88 683.45 L1353.32 683.45 L1352.76 683.45 L1352.2 683.45 L1351.64 683.45 L1351.08 683.45 L1350.52 683.45 L1349.96 683.45 L1349.4 683.45 L1348.84 683.45 L1348.29 683.45 L1347.73 683.45 L1347.17 683.45 L1346.61 683.45 L1346.05 683.45 L1345.49 683.45 L1344.93 683.45 L1344.37 683.45 L1343.81 683.45 L1343.25 683.45 L1342.69 683.45 L1342.13 683.45 L1341.57 683.45 L1341.02 683.45 L1340.46 683.45 L1339.9 683.45 L1339.34 683.45 L1338.78 683.45 L1338.22 683.45 L1337.66 683.45 L1337.1 683.45 L1336.54 683.45 L1335.98 683.45 L1335.42 683.45 L1334.86 683.45 L1334.3 683.45 L1333.75 683.45 L1333.19 683.45 L1332.63 683.45 L1332.07 683.45 L1331.51 683.45 L1330.95 683.45 L1330.39 683.45 L1329.83 683.45 L1329.27 683.45 L1328.71 683.45 L1328.15 683.45 L1327.59 683.45 L1327.03 683.45 L1326.47 683.45 L1325.92 683.45 L1325.36 683.45 L1324.8 683.45 L1324.24 683.45 L1323.68 683.45 L1323.12 683.45 L1322.56 683.45 L1322 683.45 L1321.44 683.45 L1320.88 683.45 L1320.32 683.45 L1319.76 683.45 L1319.2 683.45 L1318.65 683.45 L1318.09 683.45 L1317.53 683.45 L1316.97 683.45 L1316.41 683.45 L1315.85 683.45 L1315.29 683.45 L1314.73 683.45 L1314.17 683.45 L1313.61 683.45 L1313.05 683.45 L1312.49 683.45 L1311.93 683.45 L1311.38 683.45 L1310.82 683.45 L1310.26 683.45 L1309.7 683.45 L1309.14 683.45 L1308.58 683.45 L1308.02 683.45 L1307.46 683.45 L1306.9 683.45 L1306.34 683.45 L1305.78 683.45 L1305.22 683.45 L1304.66 683.45 L1304.1 683.45 L1303.55 683.45 L1302.99 683.45 L1302.43 683.45 L1301.87 683.45 L1301.31 683.45 L1300.75 683.45 L1300.19 683.45 L1299.63 683.45 L1299.07 683.45 L1298.51 683.45 L1297.95 683.45 L1297.39 683.45 L1296.83 683.45 L1296.28 683.45 L1295.72 683.45 L1295.16 683.45 L1294.6 683.45 L1294.04 683.45 L1293.48 683.45 L1292.92 683.45 L1292.36 683.45 L1291.8 683.45 L1291.24 683.45 L1290.68 683.45 L1290.12 683.45 L1289.56 683.45 L1289 683.45 L1288.45 683.45 L1287.89 683.45 L1287.33 683.45 L1286.77 683.45 L1286.21 683.45 L1285.65 683.45 L1285.09 683.45 L1284.53 683.45 L1283.97 683.45 L1283.41 683.45 L1282.85 683.45 L1282.29 683.45 L1281.73 683.45 L1281.18 683.45 L1280.62 683.45 L1280.06 683.45 L1279.5 683.45 L1278.94 683.45 L1278.38 683.45 L1277.82 683.45 L1277.26 683.45 L1276.7 683.45 L1276.14 683.45 L1275.58 683.45 L1275.02 683.45 L1274.46 683.45 L1273.91 683.45 L1273.35 683.45 L1272.79 683.45 L1272.23 683.45 L1271.67 683.45 L1271.11 683.45 L1270.55 683.45 L1269.99 683.45 L1269.43 683.45 L1268.87 683.45 L1268.31 683.45 L1267.75 683.45 L1267.19 683.45 L1266.63 683.45 L1266.08 683.45 L1265.52 683.45 L1264.96 683.45 L1264.4 683.45 L1263.84 683.45 L1263.28 683.45 L1262.72 683.45 L1262.16 683.45 L1261.6 683.45 L1261.04 683.45 L1260.48 683.45 L1259.92 683.45 L1259.36 683.45 L1258.81 683.45 L1258.25 683.45 L1257.69 683.45 L1257.13 683.45 L1256.57 683.45 L1256.01 683.45 L1255.45 683.45 L1254.89 683.45 L1254.33 683.45 L1253.77 683.45 L1253.21 683.45 L1252.65 683.45 L1252.09 683.45 L1251.54 683.45 L1250.98 683.45 L1250.42 683.45 L1249.86 683.45 L1249.3 683.45 L1248.74 683.45 L1248.18 683.45 L1247.62 683.45 L1247.06 683.45 L1246.5 683.45 L1245.94 683.45 L1245.38 683.45 L1244.82 683.45 L1244.26 683.45 L1243.71 683.45 L1243.15 683.45 L1242.59 683.45 L1242.03 683.45 L1241.47 683.45 L1240.91 683.45 L1240.35 683.45 L1239.79 683.45 L1239.23 683.45 L1238.67 683.45 L1238.11 683.45 L1237.55 683.45 L1236.99 683.45 L1236.44 683.45 L1235.88 683.45 L1235.32 683.45 L1234.76 683.45 L1234.2 683.45 L1233.64 683.45 L1233.08 683.45 L1232.52 683.45 L1231.96 683.45 L1231.4 683.45 L1230.84 683.45 L1230.28 683.45 L1229.72 683.45 L1229.17 683.45 L1228.61 683.45 L1228.05 683.45 L1227.49 683.45 L1226.93 683.45 L1226.37 683.45 L1225.81 683.45 L1225.25 683.45 L1224.69 683.45 L1224.13 683.45 L1223.57 683.45 L1223.01 683.45 L1222.45 683.45 L1221.89 683.45 L1221.34 683.45 L1220.78 683.45 L1220.22 683.45 L1219.66 683.45 L1219.1 683.45 L1218.54 683.45 L1217.98 683.45 L1217.42 683.45 L1216.86 683.45 L1216.3 683.45 L1215.74 683.45 L1215.18 683.45 L1214.62 683.45 L1214.07 683.45 L1213.51 683.45 L1212.95 683.45 L1212.39 683.45 L1211.83 683.45 L1211.27 683.45 L1210.71 683.45 L1210.15 683.45 L1209.59 683.45 L1209.03 683.45 L1208.47 683.45 L1207.91 683.45 L1207.35 683.45 L1206.8 683.45 L1206.24 683.45 L1205.68 683.45 L1205.12 683.45 L1204.56 683.45 L1204 683.45 L1203.44 683.45 L1202.88 683.45 L1202.32 683.45 L1201.76 683.45 L1201.2 683.45 L1200.64 683.45 L1200.08 683.45 L1199.52 683.45 L1198.97 683.45 L1198.41 683.45 L1197.85 683.45 L1197.29 683.45 L1196.73 683.45 L1196.17 683.45 L1195.61 683.45 L1195.05 683.45 L1194.49 683.45 L1193.93 683.45 L1193.37 683.45 L1192.81 683.45 L1192.25 683.45 L1191.7 683.45 L1191.14 683.45 L1190.58 683.45 L1190.02 683.45 L1189.46 683.45 L1188.9 683.45 L1188.34 683.45 L1187.78 683.45 L1187.22 683.45 L1186.66 683.45 L1186.1 683.45 L1185.54 683.45 L1184.98 683.45 L1184.43 683.45 L1183.87 683.45 L1183.31 683.45 L1182.75 683.45 L1182.19 683.45 L1181.63 683.45 L1181.07 683.45 L1180.51 683.45 L1179.95 683.45 L1179.39 683.45 L1178.83 683.45 L1178.27 683.45 L1177.71 683.45 L1177.15 683.45 L1176.6 683.45 L1176.04 683.45 L1175.48 683.45 L1174.92 683.45 L1174.36 683.45 L1173.8 683.45 L1173.24 683.45 L1172.68 683.45 L1172.12 683.45 L1171.56 683.45 L1171 683.45 L1170.44 683.45 L1169.88 683.45 L1169.33 683.45 L1168.77 683.45 L1168.21 683.45 L1167.65 683.45 L1167.09 683.45 L1166.53 683.45 L1165.97 683.45 L1165.41 683.45 L1164.85 683.45 L1164.29 683.45 L1163.73 683.45 L1163.17 683.45 L1162.61 683.45 L1162.05 683.45 L1161.5 683.45 L1160.94 683.45 L1160.38 683.45 L1159.82 683.45 L1159.26 683.45 L1158.7 683.45 L1158.14 683.45 L1157.58 683.45 L1157.02 683.45 L1156.46 683.45 L1155.9 683.45 L1155.34 683.45 L1154.78 683.45 L1154.23 683.45 L1153.67 683.45 L1153.11 683.45 L1152.55 683.45 L1151.99 683.45 L1151.43 683.45 L1150.87 683.45 L1150.31 683.45 L1149.75 683.45 L1149.19 683.45 L1148.63 683.45 L1148.07 683.45 L1147.51 683.45 L1146.96 683.45 L1146.4 683.45 L1145.84 683.45 L1145.28 683.45 L1144.72 683.45 L1144.16 683.45 L1143.6 683.45 L1143.04 683.45 L1142.48 683.45 L1141.92 683.45 L1141.36 683.45 L1140.8 683.45 L1140.24 683.45 L1139.68 683.45 L1139.13 683.45 L1138.57 683.45 L1138.01 683.45 L1137.45 683.45 L1136.89 683.45 L1136.33 683.45 L1135.77 683.45 L1135.21 683.45 L1134.65 683.45 L1134.09 683.45 L1133.53 683.45 L1132.97 683.45 L1132.41 683.45 L1131.86 683.45 L1131.3 683.45 L1130.74 683.45 L1130.18 683.45 L1129.62 683.45 L1129.06 683.45 L1128.5 683.45 L1127.94 683.45 L1127.38 683.45 L1126.82 683.45 L1126.26 683.45 L1125.7 683.45 L1125.14 683.45 L1124.59 683.45 L1124.03 683.45 L1123.47 683.45 L1122.91 683.45 L1122.35 683.45 L1121.79 683.45 L1121.23 683.45 L1120.67 683.45 L1120.11 683.45 L1119.55 683.45 L1118.99 683.45 L1118.43 683.45 L1117.87 683.45 L1117.31 683.45 L1116.76 683.45 L1116.2 683.45 L1115.64 683.45 L1115.08 683.45 L1114.52 683.45 L1113.96 683.45 L1113.4 683.45 L1112.84 683.45 L1112.28 683.45 L1111.72 683.45 L1111.16 683.45 L1110.6 683.45 L1110.04 683.45 L1109.49 683.45 L1108.93 683.45 L1108.37 683.45 L1107.81 683.45 L1107.25 683.45 L1106.69 683.45 L1106.13 683.45 L1105.57 683.45 L1105.01 683.45 L1104.45 683.45 L1103.89 683.45 L1103.33 683.45 L1102.77 683.45 L1102.22 683.45 L1101.66 683.45 L1101.1 683.45 L1100.54 683.45 L1099.98 683.45 L1099.42 683.45 L1098.86 683.45 L1098.3 683.45 L1097.74 683.45 L1097.18 683.45 L1096.62 683.45 L1096.06 683.45 L1095.5 683.45 L1094.94 683.45 L1094.39 683.45 L1093.83 683.45 L1093.27 683.45 L1092.71 683.45 L1092.15 683.45 L1091.59 683.45 L1091.03 683.45 L1090.47 683.45 L1089.91 683.45 L1089.35 683.45 L1088.79 683.45 L1088.23 683.45 L1087.67 683.45 L1087.12 683.45 L1086.56 683.45 L1086 683.45 L1085.44 683.45 L1084.88 683.45 L1084.32 683.45 L1083.76 683.45 L1083.2 683.45 L1082.64 683.45 L1082.08 683.45 L1081.52 683.45 L1080.96 683.45 L1080.4 683.45 L1079.85 683.45 L1079.29 683.45 L1078.73 683.45 L1078.17 683.45 L1077.61 683.45 L1077.05 683.45 L1076.49 683.45 L1075.93 683.45 L1075.37 683.45 L1074.81 683.45 L1074.25 683.45 L1073.69 683.45 L1073.13 683.45 L1072.57 683.45 L1072.02 683.45 L1071.46 683.45 L1070.9 683.45 L1070.34 683.45 L1069.78 683.45 L1069.22 683.45 L1068.66 683.45 L1068.1 683.45 L1067.54 683.45 L1066.98 683.45 L1066.42 683.45 L1065.86 683.45 L1065.3 683.45 L1064.75 683.45 L1064.19 683.45 L1063.63 683.45 L1063.07 683.45 L1062.51 683.45 L1061.95 683.45 L1061.39 683.45 L1060.83 683.45 L1060.27 683.45 L1059.71 683.45 L1059.15 683.45 L1058.59 683.45 L1058.03 683.45 L1057.48 683.45 L1056.92 683.45 L1056.36 683.45 L1055.8 683.45 L1055.24 683.45 L1054.68 683.45 L1054.12 683.45 L1053.56 683.45 L1053 683.45 L1052.44 683.45 L1051.88 683.45 L1051.32 683.45 L1050.76 683.45 L1050.2 683.45 L1049.65 683.45 L1049.09 683.45 L1048.53 683.45 L1047.97 683.45 L1047.41 683.45 L1046.85 683.45 L1046.29 683.45 L1045.73 683.45 L1045.17 683.45 L1044.61 683.45 L1044.05 683.45 L1043.49 683.45 L1042.93 683.45 L1042.38 683.45 L1041.82 683.45 L1041.26 683.45 L1040.7 683.45 L1040.14 683.45 L1039.58 683.45 L1039.02 683.45 L1038.46 683.45 L1037.9 683.45 L1037.34 683.45 L1036.78 683.45 L1036.22 683.45 L1035.66 683.45 L1035.1 683.45 L1034.55 683.45 L1033.99 683.45 L1033.43 683.45 L1032.87 683.45 L1032.31 683.45 L1031.75 683.45 L1031.19 683.45 L1030.63 683.45 L1030.07 683.45 L1029.51 683.45 L1028.95 683.45 L1028.39 683.45 L1027.83 683.45 L1027.28 683.45 L1026.72 683.45 L1026.16 683.45 L1025.6 683.45 L1025.04 683.45 L1024.48 683.45 L1023.92 683.45 L1023.36 683.45 L1022.8 683.45 L1022.24 683.45 L1021.68 683.45 L1021.12 683.45 L1020.56 683.45 L1020.01 683.45 L1019.45 683.45 L1018.89 683.45 L1018.33 683.45 L1017.77 683.45 L1017.21 683.45 L1016.65 683.45 L1016.09 683.45 L1015.53 683.45 L1014.97 683.45 L1014.41 683.45 L1013.85 683.45 L1013.29 683.45 L1012.73 683.45 L1012.18 683.45 L1011.62 683.45 L1011.06 683.45 L1010.5 683.45 L1009.94 683.45 L1009.38 683.45 L1008.82 683.45 L1008.26 683.45 L1007.7 683.45 L1007.14 683.45 L1006.58 683.45 L1006.02 683.45 L1005.46 683.45 L1004.91 683.45 L1004.35 683.45 L1003.79 683.45 L1003.23 683.45 L1002.67 683.45 L1002.11 683.45 L1001.55 683.45 L1000.99 683.45 L1000.43 683.45 L999.872 683.45 L999.313 683.45 L998.754 683.45 L998.194 683.45 L997.635 683.45 L997.076 683.45 L996.517 683.45 L995.957 683.45 L995.398 683.45 L994.839 683.45 L994.28 683.45 L993.72 683.45 L993.161 683.45 L992.602 683.45 L992.043 683.45 L991.483 683.45 L990.924 683.45 L990.365 683.45 L989.806 683.45 L989.246 683.45 L988.687 683.45 L988.128 683.45 L987.569 683.45 L987.009 683.45 L986.45 683.45 L985.891 683.45 L985.332 683.45 L984.772 683.45 L984.213 683.45 L983.654 683.45 L983.095 683.45 L982.535 683.45 L981.976 683.45 L981.417 683.45 L980.858 683.45 L980.298 683.45 L979.739 683.45 L979.18 683.45 L978.621 683.45 L978.061 683.45 L977.502 683.45 L976.943 683.45 L976.384 683.45 L975.824 683.45 L975.265 683.45 L974.706 683.45 L974.147 683.45 L973.587 683.45 L973.028 683.45 L972.469 683.45 L971.91 683.45 L971.35 683.45 L970.791 683.45 L970.232 683.45 L969.673 683.45 L969.113 683.45 L968.554 683.45 L967.995 683.45 L967.436 683.45 L966.876 683.45 L966.317 683.45 L965.758 683.45 L965.199 683.45 L964.639 683.45 L964.08 683.45 L963.521 683.45 L962.962 683.45 L962.402 683.45 L961.843 683.45 L961.284 683.45 L960.725 683.45 L960.165 683.45 L959.606 683.45 L959.047 683.45 L958.488 683.45 L957.928 683.45 L957.369 683.45 L956.81 683.45 L956.251 683.45 L955.691 683.45 L955.132 683.45 L954.573 683.45 L954.014 683.45 L953.454 683.45 L952.895 683.45 L952.336 683.45 L951.777 683.45 L951.217 683.45 L950.658 683.45 L950.099 683.45 L949.54 683.45 L948.98 683.45 L948.421 683.45 L947.862 683.45 L947.303 683.45 L946.743 683.45 L946.184 683.45 L945.625 683.45 L945.066 683.45 L944.506 683.45 L943.947 683.45 L943.388 683.45 L942.829 683.45 L942.269 683.45 L941.71 683.45 L941.151 683.45 L940.592 683.45 L940.032 683.45 L939.473 683.45 L938.914 683.45 L938.355 683.45 L937.795 683.45 L937.236 683.45 L936.677 683.45 L936.118 683.45 L935.558 683.45 L934.999 683.45 L934.44 683.45 L933.881 683.45 L933.321 683.45 L932.762 683.45 L932.203 683.45 L931.644 683.45 L931.084 683.45 L930.525 683.45 L929.966 683.45 L929.406 683.45 L928.847 683.45 L928.288 683.45 L927.729 683.45 L927.169 683.45 L926.61 683.45 L926.051 683.45 L925.492 683.45 L924.932 683.45 L924.373 683.45 L923.814 683.45 L923.255 683.45 L922.695 683.45 L922.136 683.45 L921.577 683.45 L921.018 683.45 L920.458 683.45 L919.899 683.45 L919.34 683.45 L918.781 683.45 L918.221 683.45 L917.662 683.45 L917.103 683.45 L916.544 683.45 L915.984 683.45 L915.425 683.45 L914.866 683.45 L914.307 683.45 L913.747 683.45 L913.188 683.45 L912.629 683.45 L912.07 683.45 L911.51 683.45 L910.951 683.45 L910.392 683.45 L909.833 683.45 L909.273 683.45 L908.714 683.45 L908.155 683.45 L907.596 683.45 L907.036 683.45 L906.477 683.45 L905.918 683.45 L905.359 683.45 L904.799 683.45 L904.24 683.45 L903.681 683.45 L903.122 683.45 L902.562 683.45 L902.003 683.45 L901.444 683.45 L900.885 683.45 L900.325 683.45 L899.766 683.45 L899.207 683.45 L898.648 683.45 L898.088 683.45 L897.529 683.45 L896.97 683.45 L896.411 683.45 L895.851 683.45 L895.292 683.45 L894.733 683.45 L894.174 683.45 L893.614 683.45 L893.055 683.45 L892.496 683.45 L891.937 683.45 L891.377 683.45 L890.818 683.45 L890.259 683.45 L889.7 683.45 L889.14 683.45 L888.581 683.45 L888.022 683.45 L887.463 683.45 L886.903 683.45 L886.344 683.45 L885.785 683.45 L885.226 683.45 L884.666 683.45 L884.107 683.45 L883.548 683.45 L882.989 683.45 L882.429 683.45 L881.87 683.45 L881.311 683.45 L880.752 683.45 L880.192 683.45 L879.633 683.45 L879.074 683.45 L878.515 683.45 L877.955 683.45 L877.396 683.45 L876.837 683.45 L876.278 683.45 L875.718 683.45 L875.159 683.45 L874.6 683.45 L874.041 683.45 L873.481 683.45 L872.922 683.45 L872.363 683.45 L871.804 683.45 L871.244 683.45 L870.685 683.45 L870.126 683.45 L869.567 683.45 L869.007 683.45 L868.448 683.45 L867.889 683.45 L867.33 683.45 L866.77 683.45 L866.211 683.45 L865.652 683.45 L865.093 683.45 L864.533 683.45 L863.974 683.45 L863.415 683.45 L862.856 683.45 L862.296 683.45 L861.737 683.45 L861.178 683.45 L860.619 683.45 L860.059 683.45 L859.5 683.45 L858.941 683.45 L858.382 683.45 L857.822 683.45 L857.263 683.45 L856.704 683.45 L856.145 683.45 L855.585 683.45 L855.026 683.45 L854.467 683.45 L853.908 683.45 L853.348 683.45 L852.789 683.45 L852.23 683.45 L851.671 683.45 L851.111 683.45 L850.552 683.45 L849.993 683.45 L849.434 683.45 L848.874 683.45 L848.315 683.45 L847.756 683.45 L847.197 683.45 L846.637 683.45 L846.078 683.45 L845.519 683.45 L844.96 683.45 L844.4 683.45 L843.841 683.45 L843.282 683.45 L842.723 683.45 L842.163 683.45 L841.604 683.45 L841.045 683.45 L840.486 683.45 L839.926 683.45 L839.367 683.45 L838.808 683.45 L838.249 683.45 L837.689 683.45 L837.13 683.45 L836.571 683.45 L836.012 683.45 L835.452 683.45 L834.893 683.45 L834.334 683.45 L833.775 683.45 L833.215 683.45 L832.656 683.45 L832.097 683.45 L831.538 683.45 L830.978 683.45 L830.419 683.45 L829.86 683.45 L829.301 683.45 L828.741 683.45 L828.182 683.45 L827.623 683.45 L827.064 683.45 L826.504 683.45 L825.945 683.45 L825.386 683.45 L824.827 683.45 L824.267 683.45 L823.708 683.45 L823.149 683.45 L822.59 683.45 L822.03 683.45 L821.471 683.45 L820.912 683.45 L820.353 683.45 L819.793 683.45 L819.234 683.45 L818.675 683.45 L818.116 683.45 L817.556 683.45 L816.997 683.45 L816.438 683.45 L815.879 683.45 L815.319 683.45 L814.76 683.45 L814.201 683.45 L813.642 683.45 L813.082 683.45 L812.523 683.45 L811.964 683.45 L811.405 683.45 L810.845 683.45 L810.286 683.45 L809.727 683.45 L809.168 683.45 L808.608 683.45 L808.049 683.45 L807.49 683.45 L806.931 683.45 L806.371 683.45 L805.812 683.45 L805.253 683.45 L804.693 683.45 L804.134 683.45 L803.575 683.45 L803.016 683.45 L802.456 683.45 L801.897 683.45 L801.338 683.45 L800.779 683.45 L800.219 683.45 L799.66 683.45 L799.101 683.45 L798.542 683.45 L797.982 683.45 L797.423 683.45 L796.864 683.45 L796.305 683.45 L795.745 683.45 L795.186 683.45 L794.627 683.45 L794.068 683.45 L793.508 683.45 L792.949 683.45 L792.39 683.45 L791.831 683.45 L791.271 683.45 L790.712 683.45 L790.153 683.45 L789.594 683.45 L789.034 683.45 L788.475 683.45 L787.916 683.45 L787.357 683.45 L786.797 683.45 L786.238 683.45 L785.679 683.45 L785.12 683.45 L784.56 683.45 L784.001 683.45 L783.442 683.45 L782.883 683.45 L782.323 683.45 L781.764 683.45 L781.205 683.45 L780.646 683.45 L780.086 683.45 L779.527 683.45 L778.968 683.45 L778.409 683.45 L777.849 683.45 L777.29 683.45 L776.731 683.45 L776.172 683.45 L775.612 683.45 L775.053 683.45 L774.494 683.45 L773.935 683.45 L773.375 683.45 L772.816 683.45 L772.257 683.45 L771.698 683.45 L771.138 683.45 L770.579 683.45 L770.02 683.45 L769.461 683.45 L768.901 683.45 L768.342 683.45 L767.783 683.45 L767.224 683.45 L766.664 683.45 L766.105 683.45 L765.546 683.45 L764.987 683.45 L764.427 683.45 L763.868 683.45 L763.309 683.45 L762.75 683.45 L762.19 683.45 L761.631 683.45 L761.072 683.45 L760.513 683.45 L759.953 683.45 L759.394 683.45 L758.835 683.45 L758.276 683.45 L757.716 683.45 L757.157 683.45 L756.598 683.45 L756.039 683.45 L755.479 683.45 L754.92 683.45 L754.361 683.45 L753.802 683.45 L753.242 683.45 L752.683 683.45 L752.124 683.45 L751.565 683.45 L751.005 683.45 L750.446 683.45 L749.887 683.45 L749.328 683.45 L748.768 683.45 L748.209 683.45 L747.65 683.45 L747.091 683.45 L746.531 683.45 L745.972 683.45 L745.413 683.45 L744.854 683.45 L744.294 683.45 L743.735 683.45 L743.176 683.45 L742.617 683.45 L742.057 683.45 L741.498 683.45 L740.939 683.45 L740.38 683.45 L739.82 683.45 L739.261 683.45 L738.702 683.45 L738.143 683.45 L737.583 683.45 L737.024 683.45 L736.465 683.45 L735.906 683.45 L735.346 683.45 L734.787 683.45 L734.228 683.45 L733.669 683.45 L733.109 683.45 L732.55 683.45 L731.991 683.45 L731.432 683.45 L730.872 683.45 L730.313 683.45 L729.754 683.45 L729.195 683.45 L728.635 683.45 L728.076 683.45 L727.517 683.45 L726.958 683.45 L726.398 683.45 L725.839 683.45 L725.28 683.45 L724.721 683.45 L724.161 683.45 L723.602 683.45 L723.043 683.45 L722.484 683.45 L721.924 683.45 L721.365 683.45 L720.806 683.45 L720.247 683.45  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.011 720.806,688.011 721.365,688.011 721.924,688.011 722.484,688.011 723.043,688.011 723.602,688.011 724.161,688.011 724.721,688.011 725.28,688.011 725.839,688.011 726.398,688.011 726.958,688.011 727.517,688.011 728.076,688.011 728.635,688.011 729.195,688.011 729.754,688.011 730.313,688.011 730.872,688.011 731.432,688.011 731.991,688.011 732.55,688.011 733.109,688.011 733.669,688.011 734.228,688.011 734.787,688.011 735.346,688.011 735.906,688.011 736.465,688.011 737.024,688.011 737.583,688.011 738.143,688.011 738.702,688.011 739.261,688.011 739.82,688.011 740.38,688.011 740.939,688.011 741.498,688.011 742.057,688.011 742.617,688.011 743.176,688.011 743.735,688.011 744.294,688.011 744.854,688.011 745.413,688.011 745.972,688.011 746.531,688.011 747.091,688.011 747.65,688.011 748.209,688.011 748.768,688.011 749.328,688.011 749.887,688.011 750.446,688.011 751.005,688.011 751.565,688.011 752.124,688.011 752.683,688.011 753.242,688.011 753.802,688.011 754.361,688.011 754.92,688.011 755.479,688.011 756.039,688.011 756.598,688.011 757.157,688.011 757.716,688.011 758.276,688.011 758.835,688.011 759.394,688.011 759.953,688.011 760.513,688.011 761.072,688.011 761.631,688.011 762.19,688.011 762.75,688.011 763.309,688.011 763.868,688.011 764.427,688.011 764.987,688.011 765.546,688.011 766.105,688.011 766.664,688.011 767.224,688.011 767.783,688.011 768.342,688.011 768.901,688.011 769.461,688.011 770.02,688.011 770.579,688.011 771.138,688.011 771.698,688.011 772.257,688.011 772.816,688.011 773.375,688.011 773.935,688.011 774.494,688.011 775.053,688.011 775.612,688.011 776.172,688.011 776.731,688.011 777.29,688.011 777.849,688.011 778.409,688.011 778.968,688.011 779.527,688.011 780.086,688.011 780.646,688.011 781.205,688.011 781.764,688.011 782.323,688.011 782.883,688.011 783.442,688.011 784.001,688.011 784.56,688.011 785.12,688.011 785.679,688.011 786.238,688.011 786.797,688.011 787.357,688.011 787.916,688.011 788.475,688.011 789.034,688.011 789.594,688.011 790.153,688.011 790.712,688.011 791.271,688.011 791.831,688.011 792.39,688.011 792.949,688.011 793.508,688.011 794.068,688.011 794.627,688.011 795.186,688.011 795.745,688.011 796.305,688.011 796.864,688.011 797.423,688.011 797.982,688.011 798.542,688.011 799.101,688.011 799.66,688.011 800.219,688.011 800.779,688.011 801.338,688.011 801.897,688.011 802.456,688.011 803.016,688.011 803.575,688.011 804.134,688.011 804.693,688.011 805.253,688.011 805.812,688.011 806.371,688.011 806.931,688.011 807.49,688.011 808.049,688.011 808.608,688.011 809.168,688.011 809.727,688.011 810.286,688.011 810.845,688.011 811.405,688.011 811.964,688.011 812.523,688.011 813.082,688.011 813.642,688.011 814.201,688.011 814.76,688.011 815.319,688.011 815.879,688.011 816.438,688.011 816.997,688.011 817.556,688.011 818.116,688.011 818.675,688.011 819.234,688.011 819.793,688.011 820.353,688.011 820.912,688.011 821.471,688.011 822.03,688.011 822.59,688.011 823.149,688.011 823.708,688.011 824.267,688.011 824.827,688.011 825.386,688.011 825.945,688.011 826.504,688.011 827.064,688.011 827.623,688.011 828.182,688.011 828.741,688.011 829.301,688.011 829.86,688.011 830.419,688.011 830.978,688.011 831.538,688.011 832.097,688.011 832.656,688.011 833.215,688.011 833.775,688.011 834.334,688.011 834.893,688.011 835.452,688.011 836.012,688.011 836.571,688.011 837.13,688.011 837.689,688.011 838.249,688.011 838.808,688.011 839.367,688.011 839.926,688.011 840.486,688.011 841.045,688.011 841.604,688.011 842.163,688.011 842.723,688.011 843.282,688.011 843.841,688.011 844.4,688.011 844.96,688.011 845.519,688.011 846.078,688.011 846.637,688.011 847.197,688.011 847.756,688.011 848.315,688.011 848.874,688.011 849.434,688.011 849.993,688.011 850.552,688.011 851.111,688.011 851.671,688.011 852.23,688.011 852.789,688.011 853.348,688.011 853.908,688.011 854.467,688.011 855.026,688.011 855.585,688.011 856.145,688.011 856.704,688.011 857.263,688.011 857.822,688.011 858.382,688.011 858.941,688.011 859.5,688.011 860.059,688.011 860.619,688.011 861.178,688.011 861.737,688.011 862.296,688.011 862.856,688.011 863.415,688.011 863.974,688.011 864.533,688.011 865.093,688.011 865.652,688.011 866.211,688.011 866.77,688.011 867.33,688.011 867.889,688.011 868.448,688.011 869.007,688.011 869.567,688.011 870.126,688.011 870.685,688.011 871.244,688.011 871.804,688.011 872.363,688.011 872.922,688.011 873.481,688.011 874.041,688.011 874.6,688.011 875.159,688.011 875.718,688.011 876.278,688.011 876.837,688.011 877.396,688.011 877.955,688.011 878.515,688.011 879.074,688.011 879.633,688.011 880.192,688.011 880.752,688.011 881.311,688.011 881.87,688.011 882.429,688.011 882.989,688.011 883.548,688.011 884.107,688.011 884.666,688.011 885.226,688.011 885.785,688.011 886.344,688.011 886.903,688.011 887.463,688.011 888.022,688.011 888.581,688.011 889.14,688.011 889.7,688.011 890.259,688.011 890.818,688.011 891.377,688.011 891.937,688.011 892.496,688.011 893.055,688.011 893.614,688.011 894.174,688.011 894.733,688.011 895.292,688.011 895.851,688.011 896.411,688.011 896.97,688.011 897.529,688.011 898.088,688.011 898.648,688.011 899.207,688.011 899.766,688.011 900.325,688.011 900.885,688.011 901.444,688.011 902.003,688.011 902.562,688.011 903.122,688.011 903.681,688.011 904.24,688.011 904.799,688.011 905.359,688.011 905.918,688.011 906.477,688.011 907.036,688.011 907.596,688.011 908.155,688.011 908.714,688.011 909.273,688.011 909.833,688.011 910.392,688.011 910.951,688.011 911.51,688.011 912.07,688.011 912.629,688.011 913.188,688.011 913.747,688.011 914.307,688.011 914.866,688.011 915.425,688.011 915.984,688.011 916.544,688.011 917.103,688.011 917.662,688.011 918.221,688.011 918.781,688.011 919.34,688.011 919.899,688.011 920.458,688.011 921.018,688.011 921.577,688.011 922.136,688.011 922.695,688.011 923.255,688.011 923.814,688.011 924.373,688.011 924.932,688.011 925.492,688.011 926.051,688.011 926.61,688.011 927.169,688.011 927.729,688.011 928.288,688.011 928.847,688.011 929.406,688.011 929.966,688.011 930.525,688.011 931.084,688.011 931.644,688.011 932.203,688.011 932.762,688.011 933.321,688.011 933.881,688.011 934.44,688.011 934.999,688.011 935.558,688.011 936.118,688.011 936.677,688.011 937.236,688.011 937.795,688.011 938.355,688.011 938.914,688.011 939.473,688.011 940.032,688.011 940.592,688.011 941.151,688.011 941.71,688.011 942.269,688.011 942.829,688.011 943.388,688.011 943.947,688.011 944.506,688.011 945.066,688.011 945.625,688.011 946.184,688.011 946.743,688.011 947.303,688.011 947.862,688.011 948.421,688.011 948.98,688.011 949.54,688.011 950.099,688.011 950.658,688.011 951.217,688.011 951.777,688.011 952.336,688.011 952.895,688.011 953.454,688.011 954.014,688.011 954.573,688.011 955.132,688.011 955.691,688.011 956.251,688.011 956.81,688.011 957.369,688.011 957.928,688.011 958.488,688.011 959.047,688.011 959.606,688.011 960.165,688.011 960.725,688.011 961.284,688.011 961.843,688.011 962.402,688.011 962.962,688.011 963.521,688.011 964.08,688.011 964.639,688.011 965.199,688.011 965.758,688.011 966.317,688.011 966.876,688.011 967.436,688.011 967.995,688.011 968.554,688.011 969.113,688.011 969.673,688.011 970.232,688.011 970.791,688.011 971.35,688.011 971.91,688.011 972.469,688.011 973.028,688.011 973.587,688.011 974.147,688.011 974.706,688.011 975.265,688.011 975.824,688.011 976.384,688.011 976.943,688.011 977.502,688.011 978.061,688.011 978.621,688.011 979.18,688.011 979.739,688.011 980.298,688.011 980.858,688.011 981.417,688.011 981.976,688.011 982.535,688.011 983.095,688.011 983.654,688.011 984.213,688.011 984.772,688.011 985.332,688.011 985.891,688.011 986.45,688.011 987.009,688.011 987.569,688.011 988.128,688.011 988.687,688.011 989.246,688.011 989.806,688.011 990.365,688.011 990.924,688.011 991.483,688.011 992.043,688.011 992.602,688.011 993.161,688.011 993.72,688.011 994.28,688.011 994.839,688.011 995.398,688.011 995.957,688.011 996.517,688.011 997.076,688.011 997.635,688.011 998.194,688.011 998.754,688.011 999.313,688.011 999.872,688.011 1000.43,688.011 1000.99,688.011 1001.55,688.011 1002.11,688.011 1002.67,688.011 1003.23,688.011 1003.79,688.011 1004.35,688.011 1004.91,688.011 1005.46,688.011 1006.02,688.011 1006.58,688.011 1007.14,688.011 1007.7,688.011 1008.26,688.011 1008.82,688.011 1009.38,688.011 1009.94,688.011 1010.5,688.011 1011.06,688.011 1011.62,688.011 1012.18,688.011 1012.73,688.011 1013.29,688.011 1013.85,688.011 1014.41,688.011 1014.97,688.011 1015.53,688.011 1016.09,688.011 1016.65,688.011 1017.21,688.011 1017.77,688.011 1018.33,688.011 1018.89,688.011 1019.45,688.011 1020.01,688.011 1020.56,688.011 1021.12,688.011 1021.68,688.011 1022.24,688.011 1022.8,688.011 1023.36,688.011 1023.92,688.011 1024.48,688.011 1025.04,688.011 1025.6,688.011 1026.16,688.011 1026.72,688.011 1027.28,688.011 1027.83,688.011 1028.39,688.011 1028.95,688.011 1029.51,688.011 1030.07,688.011 1030.63,688.011 1031.19,688.011 1031.75,688.011 1032.31,688.011 1032.87,688.011 1033.43,688.011 1033.99,688.011 1034.55,688.011 1035.1,688.011 1035.66,688.011 1036.22,688.011 1036.78,688.011 1037.34,688.011 1037.9,688.011 1038.46,688.011 1039.02,688.011 1039.58,688.011 1040.14,688.011 1040.7,688.011 1041.26,688.011 1041.82,688.011 1042.38,688.011 1042.93,688.011 1043.49,688.011 1044.05,688.011 1044.61,688.011 1045.17,688.011 1045.73,688.011 1046.29,688.011 1046.85,688.011 1047.41,688.011 1047.97,688.011 1048.53,688.011 1049.09,688.011 1049.65,688.011 1050.2,688.011 1050.76,688.011 1051.32,688.011 1051.88,688.011 1052.44,688.011 1053,688.011 1053.56,688.011 1054.12,688.011 1054.68,688.011 1055.24,688.011 1055.8,688.011 1056.36,688.011 1056.92,688.011 1057.48,688.011 1058.03,688.011 1058.59,688.011 1059.15,688.011 1059.71,688.011 1060.27,688.011 1060.83,688.011 1061.39,688.011 1061.95,688.011 1062.51,688.011 1063.07,688.011 1063.63,688.011 1064.19,688.011 1064.75,688.011 1065.3,688.011 1065.86,688.011 1066.42,688.011 1066.98,688.011 1067.54,688.011 1068.1,688.011 1068.66,688.011 1069.22,688.011 1069.78,688.011 1070.34,688.011 1070.9,688.011 1071.46,688.011 1072.02,688.011 1072.57,688.011 1073.13,688.011 1073.69,688.011 1074.25,688.011 1074.81,688.011 1075.37,688.011 1075.93,688.011 1076.49,688.011 1077.05,688.011 1077.61,688.011 1078.17,688.011 1078.73,688.011 1079.29,688.011 1079.85,688.011 1080.4,688.011 1080.96,688.011 1081.52,688.011 1082.08,688.011 1082.64,688.011 1083.2,688.011 1083.76,688.011 1084.32,688.011 1084.88,688.011 1085.44,688.011 1086,688.011 1086.56,688.011 1087.12,688.011 1087.67,688.011 1088.23,688.011 1088.79,688.011 1089.35,688.011 1089.91,688.011 1090.47,688.011 1091.03,688.011 1091.59,688.011 1092.15,688.011 1092.71,688.011 1093.27,688.011 1093.83,688.011 1094.39,688.011 1094.94,688.011 1095.5,688.011 1096.06,688.011 1096.62,688.011 1097.18,688.011 1097.74,688.011 1098.3,688.011 1098.86,688.011 1099.42,688.011 1099.98,688.011 1100.54,688.011 1101.1,688.011 1101.66,688.011 1102.22,688.011 1102.77,688.011 1103.33,688.011 1103.89,688.011 1104.45,688.011 1105.01,688.011 1105.57,688.011 1106.13,688.011 1106.69,688.011 1107.25,688.011 1107.81,688.011 1108.37,688.011 1108.93,688.011 1109.49,688.011 1110.04,688.011 1110.6,688.011 1111.16,688.011 1111.72,688.011 1112.28,688.011 1112.84,688.011 1113.4,688.011 1113.96,688.011 1114.52,688.011 1115.08,688.011 1115.64,688.011 1116.2,688.011 1116.76,688.011 1117.31,688.011 1117.87,688.011 1118.43,688.011 1118.99,688.011 1119.55,688.011 1120.11,688.011 1120.67,688.011 1121.23,688.011 1121.79,688.011 1122.35,688.011 1122.91,688.011 1123.47,688.011 1124.03,688.011 1124.59,688.011 1125.14,688.011 1125.7,688.011 1126.26,688.011 1126.82,688.011 1127.38,688.011 1127.94,688.011 1128.5,688.011 1129.06,688.011 1129.62,688.011 1130.18,688.011 1130.74,688.011 1131.3,688.011 1131.86,688.011 1132.41,688.011 1132.97,688.011 1133.53,688.011 1134.09,688.011 1134.65,688.011 1135.21,688.011 1135.77,688.011 1136.33,688.011 1136.89,688.011 1137.45,688.011 1138.01,688.011 1138.57,688.011 1139.13,688.011 1139.68,688.011 1140.24,688.011 1140.8,688.011 1141.36,688.011 1141.92,688.011 1142.48,688.011 1143.04,688.011 1143.6,688.011 1144.16,688.011 1144.72,688.011 1145.28,688.011 1145.84,688.011 1146.4,688.011 1146.96,688.011 1147.51,688.011 1148.07,688.011 1148.63,688.011 1149.19,688.011 1149.75,688.011 1150.31,688.011 1150.87,688.011 1151.43,688.011 1151.99,688.011 1152.55,688.011 1153.11,688.011 1153.67,688.011 1154.23,688.011 1154.78,688.011 1155.34,688.011 1155.9,688.011 1156.46,688.011 1157.02,688.011 1157.58,688.011 1158.14,688.011 1158.7,688.011 1159.26,688.011 1159.82,688.011 1160.38,688.011 1160.94,688.011 1161.5,688.011 1162.05,688.011 1162.61,688.011 1163.17,688.011 1163.73,688.011 1164.29,688.011 1164.85,688.011 1165.41,688.011 1165.97,688.011 1166.53,688.011 1167.09,688.011 1167.65,688.011 1168.21,688.011 1168.77,688.011 1169.33,688.011 1169.88,688.011 1170.44,688.011 1171,688.011 1171.56,688.011 1172.12,688.011 1172.68,688.011 1173.24,688.011 1173.8,688.011 1174.36,688.011 1174.92,688.011 1175.48,688.011 1176.04,688.011 1176.6,688.011 1177.15,688.011 1177.71,688.011 1178.27,688.011 1178.83,688.011 1179.39,688.011 1179.95,688.011 1180.51,688.011 1181.07,688.011 1181.63,688.011 1182.19,688.011 1182.75,688.011 1183.31,688.011 1183.87,688.011 1184.43,688.011 1184.98,688.011 1185.54,688.011 1186.1,688.011 1186.66,688.011 1187.22,688.011 1187.78,688.011 1188.34,688.011 1188.9,688.011 1189.46,688.011 1190.02,688.011 1190.58,688.011 1191.14,688.011 1191.7,688.011 1192.25,688.011 1192.81,688.011 1193.37,688.011 1193.93,688.011 1194.49,688.011 1195.05,688.011 1195.61,688.011 1196.17,688.011 1196.73,688.011 1197.29,688.011 1197.85,688.011 1198.41,688.011 1198.97,688.011 1199.52,688.011 1200.08,688.011 1200.64,688.011 1201.2,688.011 1201.76,688.011 1202.32,688.011 1202.88,688.011 1203.44,688.011 1204,688.011 1204.56,688.011 1205.12,688.011 1205.68,688.011 1206.24,688.011 1206.8,688.011 1207.35,688.011 1207.91,688.011 1208.47,688.011 1209.03,688.011 1209.59,688.011 1210.15,688.011 1210.71,688.011 1211.27,688.011 1211.83,688.011 1212.39,688.011 1212.95,688.011 1213.51,688.011 1214.07,688.011 1214.62,688.011 1215.18,688.011 1215.74,688.011 1216.3,688.011 1216.86,688.011 1217.42,688.011 1217.98,688.011 1218.54,688.011 1219.1,688.011 1219.66,688.011 1220.22,688.011 1220.78,688.011 1221.34,688.011 1221.89,688.011 1222.45,688.011 1223.01,688.011 1223.57,688.011 1224.13,688.011 1224.69,688.011 1225.25,688.011 1225.81,688.011 1226.37,688.011 1226.93,688.011 1227.49,688.011 1228.05,688.011 1228.61,688.011 1229.17,688.011 1229.72,688.011 1230.28,688.011 1230.84,688.011 1231.4,688.011 1231.96,688.011 1232.52,688.011 1233.08,688.011 1233.64,688.011 1234.2,688.011 1234.76,688.011 1235.32,688.011 1235.88,688.011 1236.44,688.011 1236.99,688.011 1237.55,688.011 1238.11,688.011 1238.67,688.011 1239.23,688.011 1239.79,688.011 1240.35,688.011 1240.91,688.011 1241.47,688.011 1242.03,688.011 1242.59,688.011 1243.15,688.011 1243.71,688.011 1244.26,688.011 1244.82,688.011 1245.38,688.011 1245.94,688.011 1246.5,688.011 1247.06,688.011 1247.62,688.011 1248.18,688.011 1248.74,688.011 1249.3,688.011 1249.86,688.011 1250.42,688.011 1250.98,688.011 1251.54,688.011 1252.09,688.011 1252.65,688.011 1253.21,688.011 1253.77,688.011 1254.33,688.011 1254.89,688.011 1255.45,688.011 1256.01,688.011 1256.57,688.011 1257.13,688.011 1257.69,688.011 1258.25,688.011 1258.81,688.011 1259.36,688.011 1259.92,688.011 1260.48,688.011 1261.04,688.011 1261.6,688.011 1262.16,688.011 1262.72,688.011 1263.28,688.011 1263.84,688.011 1264.4,688.011 1264.96,688.011 1265.52,688.011 1266.08,688.011 1266.63,688.011 1267.19,688.011 1267.75,688.011 1268.31,688.011 1268.87,688.011 1269.43,688.011 1269.99,688.011 1270.55,688.011 1271.11,688.011 1271.67,688.011 1272.23,688.011 1272.79,688.011 1273.35,688.011 1273.91,688.011 1274.46,688.011 1275.02,688.011 1275.58,688.011 1276.14,688.011 1276.7,688.011 1277.26,688.011 1277.82,688.011 1278.38,688.011 1278.94,688.011 1279.5,688.011 1280.06,688.011 1280.62,688.011 1281.18,688.011 1281.73,688.011 1282.29,688.011 1282.85,688.011 1283.41,688.011 1283.97,688.011 1284.53,688.011 1285.09,688.011 1285.65,688.011 1286.21,688.011 1286.77,688.011 1287.33,688.011 1287.89,688.011 1288.45,688.011 1289,688.011 1289.56,688.011 1290.12,688.011 1290.68,688.011 1291.24,688.011 1291.8,688.011 1292.36,688.011 1292.92,688.011 1293.48,688.011 1294.04,688.011 1294.6,688.011 1295.16,688.011 1295.72,688.011 1296.28,688.011 1296.83,688.011 1297.39,688.011 1297.95,688.011 1298.51,688.011 1299.07,688.011 1299.63,688.011 1300.19,688.011 1300.75,688.011 1301.31,688.011 1301.87,688.011 1302.43,688.011 1302.99,688.011 1303.55,688.011 1304.1,688.011 1304.66,688.011 1305.22,688.011 1305.78,688.011 1306.34,688.011 1306.9,688.011 1307.46,688.011 1308.02,688.011 1308.58,688.011 1309.14,688.011 1309.7,688.011 1310.26,688.011 1310.82,688.011 1311.38,688.011 1311.93,688.011 1312.49,688.011 1313.05,688.011 1313.61,688.011 1314.17,688.011 1314.73,688.011 1315.29,688.011 1315.85,688.011 1316.41,688.011 1316.97,688.011 1317.53,688.011 1318.09,688.011 1318.65,688.011 1319.2,688.011 1319.76,688.011 1320.32,688.011 1320.88,688.011 1321.44,688.011 1322,688.011 1322.56,688.011 1323.12,688.011 1323.68,688.011 1324.24,688.011 1324.8,688.011 1325.36,688.011 1325.92,688.011 1326.47,688.011 1327.03,688.011 1327.59,688.011 1328.15,688.011 1328.71,688.011 1329.27,688.011 1329.83,688.011 1330.39,688.011 1330.95,688.011 1331.51,688.011 1332.07,688.011 1332.63,688.011 1333.19,688.011 1333.75,688.011 1334.3,688.011 1334.86,688.011 1335.42,688.011 1335.98,688.011 1336.54,688.011 1337.1,688.011 1337.66,688.011 1338.22,688.011 1338.78,688.011 1339.34,688.011 1339.9,688.011 1340.46,688.011 1341.02,688.011 1341.57,688.011 1342.13,688.011 1342.69,688.011 1343.25,688.011 1343.81,688.011 1344.37,688.011 1344.93,688.011 1345.49,688.011 1346.05,688.011 1346.61,688.011 1347.17,688.011 1347.73,688.011 1348.29,688.011 1348.84,688.011 1349.4,688.011 1349.96,688.011 1350.52,688.011 1351.08,688.011 1351.64,688.011 1352.2,688.011 1352.76,688.011 1353.32,688.011 1353.88,688.011 1354.44,688.011 1355,688.011 1355.56,688.011 1356.12,688.011 1356.67,688.011 1357.23,688.011 1357.79,688.011 1358.35,688.011 1358.91,688.011 1359.47,688.011 1360.03,688.011 1360.59,688.011 1361.15,688.011 1361.71,688.011 1362.27,688.011 1362.83,688.011 1363.39,688.011 1363.94,688.011 1364.5,688.011 1365.06,688.011 1365.62,688.011 1366.18,688.011 1366.74,688.011 1367.3,688.011 1367.86,688.011 1368.42,688.011 1368.98,688.011 1369.54,688.011 1370.1,688.011 1370.66,688.011 1371.21,688.011 1371.77,688.011 1372.33,688.011 1372.89,688.011 1373.45,688.011 1374.01,688.011 1374.57,688.011 1375.13,688.011 1375.69,688.011 1376.25,688.011 1376.81,688.011 1377.37,688.011 1377.93,688.011 1378.49,688.011 1379.04,688.011 1379.6,688.011 1380.16,688.011 1380.72,688.011 1381.28,688.011 1381.84,688.011 1382.4,688.011 1382.96,688.011 1383.52,688.011 1384.08,688.011 1384.64,688.011 1385.2,688.011 1385.76,688.011 1386.31,688.011 1386.87,688.011 1387.43,688.011 1387.99,688.011 1388.55,688.011 1389.11,688.011 1389.67,688.011 1390.23,688.011 1390.79,688.011 1391.35,688.011 1391.91,688.011 1392.47,688.011 1393.03,688.011 1393.58,688.011 1394.14,688.011 1394.7,688.011 1395.26,688.011 1395.82,688.011 1396.38,688.011 1396.94,688.011 1397.5,688.011 1398.06,688.011 1398.62,688.011 1399.18,688.011 1399.74,688.011 1400.3,688.011 1400.86,688.011 1401.41,688.011 1401.97,688.011 1402.53,688.011 1403.09,688.011 1403.65,688.011 1404.21,688.011 1404.77,688.011 1405.33,688.011 1405.89,688.011 1406.45,688.011 1407.01,688.011 1407.57,688.011 1408.13,688.011 1408.68,688.011 1409.24,688.011 1409.8,688.011 1410.36,688.011 1410.92,688.011 1411.48,688.011 1412.04,688.011 1412.6,688.011 1413.16,688.011 1413.72,688.011 1414.28,688.011 1414.84,688.011 1415.4,688.011 1415.95,688.011 1416.51,688.011 1417.07,688.011 1417.63,688.011 1418.19,688.011 1418.75,688.011 1419.31,688.011 1419.87,688.011 1420.43,688.011 1420.99,688.011 1421.55,688.011 1422.11,688.011 1422.67,688.011 1423.23,688.011 1423.78,688.011 1424.34,688.011 1424.9,688.011 1425.46,688.011 1426.02,688.011 1426.58,688.011 1427.14,688.011 1427.7,688.011 1428.26,688.011 1428.82,688.011 1429.38,688.011 1429.94,688.011 1430.5,688.011 1431.05,688.011 1431.61,688.011 1432.17,688.011 1432.73,688.011 1433.29,688.011 1433.85,688.011 1434.41,688.011 1434.97,688.011 1435.53,688.011 1436.09,688.011 1436.65,688.011 1437.21,688.011 1437.77,688.011 1438.33,688.011 1438.88,688.011 1439.44,688.011 1440,688.011 1440.56,688.011 1441.12,688.011 1441.68,688.011 1442.24,688.011 1442.8,688.011 1443.36,688.011 1443.92,688.011 1444.48,688.011 1445.04,688.011 1445.6,688.011 1446.15,688.011 1446.71,688.011 1447.27,688.011 1447.83,688.011 1448.39,688.011 1448.95,688.011 1449.51,688.011 1450.07,688.011 1450.63,688.011 1451.19,688.011 1451.75,688.011 1452.31,688.011 1452.87,688.011 1453.42,688.011 1453.98,688.011 1454.54,688.011 1455.1,688.011 1455.66,688.011 1456.22,688.011 1456.78,688.011 1457.34,688.011 1457.9,688.011 1458.46,688.011 1459.02,688.011 1459.58,688.011 1460.14,688.011 1460.7,688.011 1461.25,688.011 1461.81,688.011 1462.37,688.011 1462.93,688.011 1463.49,688.011 1464.05,688.011 1464.61,688.011 1465.17,688.011 1465.73,688.011 1466.29,688.011 1466.85,688.011 1467.41,688.011 1467.97,688.011 1468.52,688.011 1469.08,688.011 1469.64,688.011 1470.2,688.011 1470.76,688.011 1471.32,688.011 1471.88,688.011 1472.44,688.011 1473,688.011 1473.56,688.011 1474.12,688.011 1474.68,688.011 1475.24,688.011 1475.79,688.011 1476.35,688.011 1476.91,688.011 1477.47,688.011 1478.03,688.011 1478.59,688.011 1479.15,688.011 1479.71,688.011 1480.27,688.011 1480.83,688.011 1481.39,688.011 1481.95,688.011 1482.51,688.011 1483.07,688.011 1483.62,688.011 1484.18,688.011 1484.74,688.011 1485.3,688.011 1485.86,688.011 1486.42,688.011 1486.98,688.011 1487.54,688.011 1488.1,688.011 1488.66,688.011 1489.22,688.011 1489.78,688.011 1490.34,688.011 1490.89,688.011 1491.45,688.011 1492.01,688.011 1492.57,688.011 1493.13,688.011 1493.69,688.011 1494.25,688.011 1494.81,688.011 1495.37,688.011 1495.93,688.011 1496.49,688.011 1497.05,688.011 1497.61,688.011 1498.16,688.011 1498.72,688.011 1499.28,688.011 1499.84,688.011 1500.4,688.011 1500.96,688.011 1501.52,688.011 1502.08,688.011 1502.64,688.011 1503.2,688.011 1503.76,688.011 1504.32,688.011 1504.88,688.011 1505.44,688.011 1505.99,688.011 1506.55,688.011 1507.11,688.011 1507.67,688.011 1508.23,688.011 1508.79,688.011 1509.35,688.011 1509.91,688.011 1510.47,688.011 1511.03,688.011 1511.59,688.011 1512.15,688.011 1512.71,688.011 1513.26,688.011 1513.82,688.011 1514.38,688.011 1514.94,688.011 1515.5,688.011 1516.06,688.011 1516.62,688.011 1517.18,688.011 1517.74,688.011 1518.3,688.011 1518.86,688.011 1519.42,688.011 1519.98,688.011 1520.53,688.011 1521.09,688.011 1521.65,688.011 1522.21,688.011 1522.77,688.011 1523.33,688.011 1523.89,688.011 1524.45,688.011 1525.01,688.011 1525.57,688.011 1526.13,688.011 1526.69,688.011 1527.25,688.011 1527.81,688.011 1528.36,688.011 1528.92,688.011 1529.48,688.011 1530.04,688.011 1530.6,688.011 1531.16,688.011 1531.72,688.011 1532.28,688.011 1532.84,688.011 1533.4,688.011 1533.96,688.011 1534.52,688.011 1535.08,688.011 1535.63,688.011 1536.19,688.011 1536.75,688.011 1537.31,688.011 1537.87,688.011 1538.43,688.011 1538.99,688.011 1539.55,688.011 1540.11,688.011 1540.67,688.011 1541.23,688.011 1541.79,688.011 1542.35,688.011 1542.9,688.011 1543.46,688.011 1544.02,688.011 1544.58,688.011 1545.14,688.011 1545.7,688.011 1546.26,688.011 1546.82,688.011 1547.38,688.011 1547.94,688.011 1548.5,688.011 1549.06,688.011 1549.62,688.011 1550.18,688.011 1550.73,688.011 1551.29,688.011 1551.85,688.011 1552.41,688.011 1552.97,688.011 1553.53,688.011 1554.09,688.011 1554.65,688.011 1555.21,688.011 1555.77,688.011 1556.33,688.011 1556.89,688.011 1557.45,688.011 1558,688.011 1558.56,688.011 1559.12,688.011 1559.68,688.011 1560.24,688.011 1560.8,688.011 1561.36,688.011 1561.92,688.011 1562.48,688.011 1563.04,688.011 1563.6,688.011 1564.16,688.011 1564.72,688.011 1565.28,688.011 1565.83,688.011 1566.39,688.011 1566.95,688.011 1567.51,688.011 1568.07,688.011 1568.63,688.011 1569.19,688.011 1569.75,688.011 1570.31,688.011 1570.87,688.011 1571.43,688.011 1571.99,688.011 1572.55,688.011 1573.1,688.011 1573.66,688.011 1574.22,688.011 1574.78,688.011 1575.34,688.011 1575.9,688.011 1576.46,688.011 1577.02,688.011 1577.58,688.011 1578.14,688.011 1578.7,688.011 1579.26,688.011 1579.82,688.011 1580.37,688.011 1580.93,688.011 1581.49,688.011 1582.05,688.011 1582.61,688.011 1583.17,688.011 1583.73,688.011 1584.29,688.011 1584.85,688.011 1585.41,688.011 1585.97,688.011 1586.53,688.011 1587.09,688.011 1587.65,688.011 1588.2,688.011 1588.76,688.011 1589.32,688.011 1589.88,688.011 1590.44,688.011 1591,688.011 1591.56,688.011 1592.12,688.011 1592.68,688.011 1593.24,688.011 1593.8,688.011 1594.36,688.011 1594.92,688.011 1595.47,688.011 1596.03,688.011 1596.59,688.011 1597.15,688.011 1597.71,688.011 1598.27,688.011 1598.83,688.011 1599.39,688.011 1599.95,688.011 1600.51,688.011 1601.07,688.011 1601.63,688.011 1602.19,688.011 1602.74,688.011 1603.3,688.011 1603.86,688.011 1604.42,688.011 1604.98,688.011 1605.54,688.011 1606.1,688.011 1606.66,688.011 1607.22,688.011 1607.78,688.011 1608.34,688.011 1608.9,688.011 1609.46,688.011 1610.02,688.011 1610.57,688.011 1611.13,688.011 1611.69,688.011 1612.25,688.011 1612.81,688.011 1613.37,688.011 1613.93,688.011 1614.49,688.011 1615.05,688.011 1615.61,688.011 1616.17,688.011 1616.73,688.011 1617.29,688.011 1617.84,688.011 1618.4,688.011 1618.96,688.011 1619.52,688.011 1620.08,688.011 1620.64,688.011 1621.2,688.011 1621.76,688.011 1622.32,688.011 1622.88,688.011 1623.44,688.011 1624,688.011 1624.56,688.011 1625.11,688.011 1625.67,688.011 1626.23,688.011 1626.79,688.011 1627.35,688.011 1627.91,688.011 1628.47,688.011 1629.03,688.011 1629.59,688.011 1630.15,688.011 1630.71,688.011 1631.27,688.011 1631.83,688.011 1632.39,688.011 1632.94,688.011 1633.5,688.011 1634.06,688.011 1634.62,688.011 1635.18,688.011 1635.74,688.011 1636.3,688.011 1636.86,688.011 1637.42,688.011 1637.98,688.011 1638.54,688.011 1639.1,688.011 1639.66,688.011 1640.21,688.011 1640.77,688.011 1641.33,688.011 1641.89,688.011 1642.45,688.011 1643.01,688.011 1643.57,688.011 1644.13,688.011 1644.69,688.011 1645.25,688.011 1645.81,688.011 1646.37,688.011 1646.93,688.011 1647.48,688.011 1648.04,688.011 1648.6,688.011 1649.16,688.011 1649.72,688.011 1650.28,688.011 1650.84,688.011 1651.4,688.011 1651.96,688.011 1652.52,688.011 1653.08,688.011 1653.64,688.011 1654.2,688.011 1654.76,688.011 1655.31,688.011 1655.87,688.011 1656.43,688.011 1656.99,688.011 1657.55,688.011 1658.11,688.011 1658.67,688.011 1659.23,688.011 1659.79,688.011 1660.35,688.011 1660.91,688.011 1661.47,688.011 1662.03,688.011 1662.58,688.011 1663.14,688.011 1663.7,688.011 1664.26,688.011 1664.82,688.011 1665.38,688.011 1665.94,688.011 1666.5,688.011 1667.06,688.011 1667.62,688.011 1668.18,688.011 1668.74,688.011 1669.3,688.011 1669.85,688.011 1670.41,688.011 1670.97,688.011 1671.53,688.011 1672.09,688.011 1672.65,688.011 1673.21,688.011 1673.77,688.011 1674.33,688.011 1674.89,688.011 1675.45,688.011 1676.01,688.011 1676.57,688.011 1677.13,688.011 1677.68,688.011 1678.24,688.011 1678.8,688.011 1679.36,688.011 1679.92,688.011 1680.48,688.011 1681.04,688.011 1681.6,688.011 1682.16,688.011 1682.72,688.011 1683.28,688.011 1683.84,688.011 1684.4,688.011 1684.95,688.011 1685.51,688.011 1686.07,688.011 1686.63,688.011 1687.19,688.011 1687.75,688.011 1688.31,688.011 1688.87,688.011 1689.43,688.011 1689.99,688.011 1690.55,688.011 1691.11,688.011 1691.67,688.011 1692.23,688.011 1692.78,688.011 1693.34,688.011 1693.9,688.011 1694.46,688.011 1695.02,688.011 1695.58,688.011 1696.14,688.011 1696.7,688.011 1697.26,688.011 1697.82,688.011 1698.38,688.011 1698.94,688.011 1699.5,688.011 1700.05,688.011 1700.61,688.011 1701.17,688.011 1701.73,688.011 1702.29,688.011 1702.85,688.011 1703.41,688.011 1703.97,688.011 1704.53,688.011 1705.09,688.011 1705.65,688.011 1706.21,688.011 1706.77,688.011 1707.32,688.011 1707.88,688.011 1708.44,688.011 1709,688.011 1709.56,688.011 1710.12,688.011 1710.68,688.011 1711.24,688.011 1711.8,688.011 1712.36,688.011 1712.92,688.011 1713.48,688.011 1714.04,688.011 1714.6,688.011 1715.15,688.011 1715.71,688.011 1716.27,688.011 1716.83,688.011 1717.39,688.011 1717.95,688.011 1718.51,688.011 1719.07,688.011 1719.63,688.011 1720.19,688.011 1720.75,688.011 1721.31,688.011 1721.87,688.011 1722.42,688.011 1722.98,688.011 1723.54,688.011 1724.1,688.011 1724.66,688.011 1725.22,688.011 1725.78,688.011 1726.34,688.011 1726.9,688.011 1727.46,688.011 1728.02,688.011 1728.58,688.011 1729.14,688.011 1729.69,688.011 1730.25,688.011 1730.81,688.011 1731.37,688.011 1731.93,688.011 1732.49,688.011 1733.05,688.011 1733.61,688.011 1734.17,688.011 1734.73,688.011 1735.29,688.011 1735.85,688.011 1736.41,688.011 1736.97,688.011 1737.52,688.011 1738.08,688.011 1738.64,688.011 1739.2,688.011 1739.76,688.011 1740.32,688.011 1740.88,688.011 1741.44,688.011 1742,688.011 1742.56,688.011 1743.12,688.011 1743.68,688.011 1744.24,688.011 1744.79,688.011 1745.35,688.011 1745.91,688.011 1746.47,688.011 1747.03,688.011 1747.59,688.011 1748.15,688.011 1748.71,688.011 1749.27,688.011 1749.83,688.011 1750.39,688.011 1750.95,688.011 1751.51,688.011 1752.06,688.011 1752.62,688.011 1753.18,688.011 1753.74,688.011 1754.3,688.011 1754.86,688.011 1755.42,688.011 1755.98,688.011 1756.54,688.011 1757.1,688.011 1757.66,688.011 1758.22,688.011 1758.78,688.011 1759.34,688.011 1759.89,688.011 1760.45,688.011 1761.01,688.011 1761.57,688.011 1762.13,688.011 1762.69,688.011 1763.25,688.011 1763.81,688.011 1764.37,688.011 1764.93,688.011 1765.49,688.011 1766.05,688.011 1766.61,688.011 1767.16,688.011 1767.72,688.011 1768.28,688.011 1768.84,688.011 1769.4,688.011 1769.96,688.011 1770.52,688.011 1771.08,688.011 1771.64,688.011 1772.2,688.011 1772.76,688.011 1773.32,688.011 1773.88,688.011 1774.43,688.011 1774.99,688.011 1775.55,688.011 1776.11,688.011 1776.67,688.011 1777.23,688.011 1777.79,688.011 1778.35,688.011 1778.91,688.011 1779.47,688.011 1780.03,688.011 1780.59,688.011 1781.15,688.011 1781.71,688.011 1782.26,688.011 1782.82,688.011 1783.38,688.011 1783.94,688.011 1784.5,688.011 1785.06,688.011 1785.62,688.011 1786.18,688.011 1786.74,688.011 1787.3,688.011 1787.86,688.011 1788.42,688.011 1788.98,688.011 1789.53,688.011 1790.09,688.011 1790.65,688.011 1791.21,688.011 1791.77,688.011 1792.33,688.011 1792.89,688.011 1793.45,688.011 1794.01,688.011 1794.57,688.011 1795.13,688.011 1795.69,688.011 1796.25,688.011 1796.8,688.011 1797.36,688.011 1797.92,688.011 1798.48,688.011 1799.04,688.011 1799.6,688.011 1800.16,688.011 1800.72,688.011 1801.28,688.011 1801.84,688.011 1802.4,688.011 1802.96,688.011 1803.52,688.011 1804.08,688.011 1804.63,688.011 1805.19,688.011 1805.75,688.011 1806.31,688.011 1806.87,688.011 1807.43,688.011 1807.99,688.011 1808.55,688.011 1809.11,688.011 1809.67,688.011 1810.23,688.011 1810.79,688.011 1811.35,688.011 1811.9,688.011 1812.46,688.011 1813.02,688.011 1813.58,688.011 1814.14,688.011 1814.7,688.011 1815.26,688.011 1815.82,688.011 1816.38,688.011 1816.94,688.011 1817.5,688.011 1818.06,688.011 1818.62,688.011 1819.18,688.011 1819.73,688.011 1820.29,688.011 1820.85,688.011 1821.41,688.011 1821.97,688.011 1822.53,688.011 1823.09,688.011 1823.65,688.011 1824.21,688.011 1824.77,688.011 1825.33,688.011 1825.89,688.011 1826.45,688.011 1827,688.011 1827.56,688.011 1828.12,688.011 1828.68,688.011 1829.24,688.011 1829.8,688.011 1830.36,688.011 1830.92,688.011 1831.48,688.011 1832.04,688.011 1832.6,688.011 1833.16,688.011 1833.72,688.011 1834.27,688.011 1834.83,688.011 1835.39,688.011 1835.95,688.011 1836.51,688.011 1837.07,688.011 1837.63,688.011 1838.19,688.011 \"/>\n<path clip-path=\"url(#clip053)\" d=\"M720.247 684.846 L720.806 684.846 L721.365 684.846 L721.924 684.846 L722.484 684.846 L723.043 684.846 L723.602 684.846 L724.161 684.846 L724.721 684.846 L725.28 684.846 L725.839 684.846 L726.398 684.846 L726.958 684.846 L727.517 684.846 L728.076 684.846 L728.635 684.846 L729.195 684.846 L729.754 684.846 L730.313 684.846 L730.872 684.846 L731.432 684.846 L731.991 684.846 L732.55 684.846 L733.109 684.846 L733.669 684.846 L734.228 684.846 L734.787 684.846 L735.346 684.846 L735.906 684.846 L736.465 684.846 L737.024 684.846 L737.583 684.846 L738.143 684.846 L738.702 684.846 L739.261 684.846 L739.82 684.846 L740.38 684.846 L740.939 684.846 L741.498 684.846 L742.057 684.846 L742.617 684.846 L743.176 684.846 L743.735 684.846 L744.294 684.846 L744.854 684.846 L745.413 684.846 L745.972 684.846 L746.531 684.846 L747.091 684.846 L747.65 684.846 L748.209 684.846 L748.768 684.846 L749.328 684.846 L749.887 684.846 L750.446 684.846 L751.005 684.846 L751.565 684.846 L752.124 684.846 L752.683 684.846 L753.242 684.846 L753.802 684.846 L754.361 684.846 L754.92 684.846 L755.479 684.846 L756.039 684.846 L756.598 684.846 L757.157 684.846 L757.716 684.846 L758.276 684.846 L758.835 684.846 L759.394 684.846 L759.953 684.846 L760.513 684.846 L761.072 684.846 L761.631 684.846 L762.19 684.846 L762.75 684.846 L763.309 684.846 L763.868 684.846 L764.427 684.846 L764.987 684.846 L765.546 684.846 L766.105 684.846 L766.664 684.846 L767.224 684.846 L767.783 684.846 L768.342 684.846 L768.901 684.846 L769.461 684.846 L770.02 684.846 L770.579 684.846 L771.138 684.846 L771.698 684.846 L772.257 684.846 L772.816 684.846 L773.375 684.846 L773.935 684.846 L774.494 684.846 L775.053 684.846 L775.612 684.846 L776.172 684.846 L776.731 684.846 L777.29 684.846 L777.849 684.846 L778.409 684.846 L778.968 684.846 L779.527 684.846 L780.086 684.846 L780.646 684.846 L781.205 684.846 L781.764 684.846 L782.323 684.846 L782.883 684.846 L783.442 684.846 L784.001 684.846 L784.56 684.846 L785.12 684.846 L785.679 684.846 L786.238 684.846 L786.797 684.846 L787.357 684.846 L787.916 684.846 L788.475 684.846 L789.034 684.846 L789.594 684.846 L790.153 684.846 L790.712 684.846 L791.271 684.846 L791.831 684.846 L792.39 684.846 L792.949 684.846 L793.508 684.846 L794.068 684.846 L794.627 684.846 L795.186 684.846 L795.745 684.846 L796.305 684.846 L796.864 684.846 L797.423 684.846 L797.982 684.846 L798.542 684.846 L799.101 684.846 L799.66 684.846 L800.219 684.846 L800.779 684.846 L801.338 684.846 L801.897 684.846 L802.456 684.846 L803.016 684.846 L803.575 684.846 L804.134 684.846 L804.693 684.846 L805.253 684.846 L805.812 684.846 L806.371 684.846 L806.931 684.846 L807.49 684.846 L808.049 684.846 L808.608 684.846 L809.168 684.846 L809.727 684.846 L810.286 684.846 L810.845 684.846 L811.405 684.846 L811.964 684.846 L812.523 684.846 L813.082 684.846 L813.642 684.846 L814.201 684.846 L814.76 684.846 L815.319 684.846 L815.879 684.846 L816.438 684.846 L816.997 684.846 L817.556 684.846 L818.116 684.846 L818.675 684.846 L819.234 684.846 L819.793 684.846 L820.353 684.846 L820.912 684.846 L821.471 684.846 L822.03 684.846 L822.59 684.846 L823.149 684.846 L823.708 684.846 L824.267 684.846 L824.827 684.846 L825.386 684.846 L825.945 684.846 L826.504 684.846 L827.064 684.846 L827.623 684.846 L828.182 684.846 L828.741 684.846 L829.301 684.846 L829.86 684.846 L830.419 684.846 L830.978 684.846 L831.538 684.846 L832.097 684.846 L832.656 684.846 L833.215 684.846 L833.775 684.846 L834.334 684.846 L834.893 684.846 L835.452 684.846 L836.012 684.846 L836.571 684.846 L837.13 684.846 L837.689 684.846 L838.249 684.846 L838.808 684.846 L839.367 684.846 L839.926 684.846 L840.486 684.846 L841.045 684.846 L841.604 684.846 L842.163 684.846 L842.723 684.846 L843.282 684.846 L843.841 684.846 L844.4 684.846 L844.96 684.846 L845.519 684.846 L846.078 684.846 L846.637 684.846 L847.197 684.846 L847.756 684.846 L848.315 684.846 L848.874 684.846 L849.434 684.846 L849.993 684.846 L850.552 684.846 L851.111 684.846 L851.671 684.846 L852.23 684.846 L852.789 684.846 L853.348 684.846 L853.908 684.846 L854.467 684.846 L855.026 684.846 L855.585 684.846 L856.145 684.846 L856.704 684.846 L857.263 684.846 L857.822 684.846 L858.382 684.846 L858.941 684.846 L859.5 684.846 L860.059 684.846 L860.619 684.846 L861.178 684.846 L861.737 684.846 L862.296 684.846 L862.856 684.846 L863.415 684.846 L863.974 684.846 L864.533 684.846 L865.093 684.846 L865.652 684.846 L866.211 684.846 L866.77 684.846 L867.33 684.846 L867.889 684.846 L868.448 684.846 L869.007 684.846 L869.567 684.846 L870.126 684.846 L870.685 684.846 L871.244 684.846 L871.804 684.846 L872.363 684.846 L872.922 684.846 L873.481 684.846 L874.041 684.846 L874.6 684.846 L875.159 684.846 L875.718 684.846 L876.278 684.846 L876.837 684.846 L877.396 684.846 L877.955 684.846 L878.515 684.846 L879.074 684.846 L879.633 684.846 L880.192 684.846 L880.752 684.846 L881.311 684.846 L881.87 684.846 L882.429 684.846 L882.989 684.846 L883.548 684.846 L884.107 684.846 L884.666 684.846 L885.226 684.846 L885.785 684.846 L886.344 684.846 L886.903 684.846 L887.463 684.846 L888.022 684.846 L888.581 684.846 L889.14 684.846 L889.7 684.846 L890.259 684.846 L890.818 684.846 L891.377 684.846 L891.937 684.846 L892.496 684.846 L893.055 684.846 L893.614 684.846 L894.174 684.846 L894.733 684.846 L895.292 684.846 L895.851 684.846 L896.411 684.846 L896.97 684.846 L897.529 684.846 L898.088 684.846 L898.648 684.846 L899.207 684.846 L899.766 684.846 L900.325 684.846 L900.885 684.846 L901.444 684.846 L902.003 684.846 L902.562 684.846 L903.122 684.846 L903.681 684.846 L904.24 684.846 L904.799 684.846 L905.359 684.846 L905.918 684.846 L906.477 684.846 L907.036 684.846 L907.596 684.846 L908.155 684.846 L908.714 684.846 L909.273 684.846 L909.833 684.846 L910.392 684.846 L910.951 684.846 L911.51 684.846 L912.07 684.846 L912.629 684.846 L913.188 684.846 L913.747 684.846 L914.307 684.846 L914.866 684.846 L915.425 684.846 L915.984 684.846 L916.544 684.846 L917.103 684.846 L917.662 684.846 L918.221 684.846 L918.781 684.846 L919.34 684.846 L919.899 684.846 L920.458 684.846 L921.018 684.846 L921.577 684.846 L922.136 684.846 L922.695 684.846 L923.255 684.846 L923.814 684.846 L924.373 684.846 L924.932 684.846 L925.492 684.846 L926.051 684.846 L926.61 684.846 L927.169 684.846 L927.729 684.846 L928.288 684.846 L928.847 684.846 L929.406 684.846 L929.966 684.846 L930.525 684.846 L931.084 684.846 L931.644 684.846 L932.203 684.846 L932.762 684.846 L933.321 684.846 L933.881 684.846 L934.44 684.846 L934.999 684.846 L935.558 684.846 L936.118 684.846 L936.677 684.846 L937.236 684.846 L937.795 684.846 L938.355 684.846 L938.914 684.846 L939.473 684.846 L940.032 684.846 L940.592 684.846 L941.151 684.846 L941.71 684.846 L942.269 684.846 L942.829 684.846 L943.388 684.846 L943.947 684.846 L944.506 684.846 L945.066 684.846 L945.625 684.846 L946.184 684.846 L946.743 684.846 L947.303 684.846 L947.862 684.846 L948.421 684.846 L948.98 684.846 L949.54 684.846 L950.099 684.846 L950.658 684.846 L951.217 684.846 L951.777 684.846 L952.336 684.846 L952.895 684.846 L953.454 684.846 L954.014 684.846 L954.573 684.846 L955.132 684.846 L955.691 684.846 L956.251 684.846 L956.81 684.846 L957.369 684.846 L957.928 684.846 L958.488 684.846 L959.047 684.846 L959.606 684.846 L960.165 684.846 L960.725 684.846 L961.284 684.846 L961.843 684.846 L962.402 684.846 L962.962 684.846 L963.521 684.846 L964.08 684.846 L964.639 684.846 L965.199 684.846 L965.758 684.846 L966.317 684.846 L966.876 684.846 L967.436 684.846 L967.995 684.846 L968.554 684.846 L969.113 684.846 L969.673 684.846 L970.232 684.846 L970.791 684.846 L971.35 684.846 L971.91 684.846 L972.469 684.846 L973.028 684.846 L973.587 684.846 L974.147 684.846 L974.706 684.846 L975.265 684.846 L975.824 684.846 L976.384 684.846 L976.943 684.846 L977.502 684.846 L978.061 684.846 L978.621 684.846 L979.18 684.846 L979.739 684.846 L980.298 684.846 L980.858 684.846 L981.417 684.846 L981.976 684.846 L982.535 684.846 L983.095 684.846 L983.654 684.846 L984.213 684.846 L984.772 684.846 L985.332 684.846 L985.891 684.846 L986.45 684.846 L987.009 684.846 L987.569 684.846 L988.128 684.846 L988.687 684.846 L989.246 684.846 L989.806 684.846 L990.365 684.846 L990.924 684.846 L991.483 684.846 L992.043 684.846 L992.602 684.846 L993.161 684.846 L993.72 684.846 L994.28 684.846 L994.839 684.846 L995.398 684.846 L995.957 684.846 L996.517 684.846 L997.076 684.846 L997.635 684.846 L998.194 684.846 L998.754 684.846 L999.313 684.846 L999.872 684.846 L1000.43 684.846 L1000.99 684.846 L1001.55 684.846 L1002.11 684.846 L1002.67 684.846 L1003.23 684.846 L1003.79 684.846 L1004.35 684.846 L1004.91 684.846 L1005.46 684.846 L1006.02 684.846 L1006.58 684.846 L1007.14 684.846 L1007.7 684.846 L1008.26 684.846 L1008.82 684.846 L1009.38 684.846 L1009.94 684.846 L1010.5 684.846 L1011.06 684.846 L1011.62 684.846 L1012.18 684.846 L1012.73 684.846 L1013.29 684.846 L1013.85 684.846 L1014.41 684.846 L1014.97 684.846 L1015.53 684.846 L1016.09 684.846 L1016.65 684.846 L1017.21 684.846 L1017.77 684.846 L1018.33 684.846 L1018.89 684.846 L1019.45 684.846 L1020.01 684.846 L1020.56 684.846 L1021.12 684.846 L1021.68 684.846 L1022.24 684.846 L1022.8 684.846 L1023.36 684.846 L1023.92 684.846 L1024.48 684.846 L1025.04 684.846 L1025.6 684.846 L1026.16 684.846 L1026.72 684.846 L1027.28 684.846 L1027.83 684.846 L1028.39 684.846 L1028.95 684.846 L1029.51 684.846 L1030.07 684.846 L1030.63 684.846 L1031.19 684.846 L1031.75 684.846 L1032.31 684.846 L1032.87 684.846 L1033.43 684.846 L1033.99 684.846 L1034.55 684.846 L1035.1 684.846 L1035.66 684.846 L1036.22 684.846 L1036.78 684.846 L1037.34 684.846 L1037.9 684.846 L1038.46 684.846 L1039.02 684.846 L1039.58 684.846 L1040.14 684.846 L1040.7 684.846 L1041.26 684.846 L1041.82 684.846 L1042.38 684.846 L1042.93 684.846 L1043.49 684.846 L1044.05 684.846 L1044.61 684.846 L1045.17 684.846 L1045.73 684.846 L1046.29 684.846 L1046.85 684.846 L1047.41 684.846 L1047.97 684.846 L1048.53 684.846 L1049.09 684.846 L1049.65 684.846 L1050.2 684.846 L1050.76 684.846 L1051.32 684.846 L1051.88 684.846 L1052.44 684.846 L1053 684.846 L1053.56 684.846 L1054.12 684.846 L1054.68 684.846 L1055.24 684.846 L1055.8 684.846 L1056.36 684.846 L1056.92 684.846 L1057.48 684.846 L1058.03 684.846 L1058.59 684.846 L1059.15 684.846 L1059.71 684.846 L1060.27 684.846 L1060.83 684.846 L1061.39 684.846 L1061.95 684.846 L1062.51 684.846 L1063.07 684.846 L1063.63 684.846 L1064.19 684.846 L1064.75 684.846 L1065.3 684.846 L1065.86 684.846 L1066.42 684.846 L1066.98 684.846 L1067.54 684.846 L1068.1 684.846 L1068.66 684.846 L1069.22 684.846 L1069.78 684.846 L1070.34 684.846 L1070.9 684.846 L1071.46 684.846 L1072.02 684.846 L1072.57 684.846 L1073.13 684.846 L1073.69 684.846 L1074.25 684.846 L1074.81 684.846 L1075.37 684.846 L1075.93 684.846 L1076.49 684.846 L1077.05 684.846 L1077.61 684.846 L1078.17 684.846 L1078.73 684.846 L1079.29 684.846 L1079.85 684.846 L1080.4 684.846 L1080.96 684.846 L1081.52 684.846 L1082.08 684.846 L1082.64 684.846 L1083.2 684.846 L1083.76 684.846 L1084.32 684.846 L1084.88 684.846 L1085.44 684.846 L1086 684.846 L1086.56 684.846 L1087.12 684.846 L1087.67 684.846 L1088.23 684.846 L1088.79 684.846 L1089.35 684.846 L1089.91 684.846 L1090.47 684.846 L1091.03 684.846 L1091.59 684.846 L1092.15 684.846 L1092.71 684.846 L1093.27 684.846 L1093.83 684.846 L1094.39 684.846 L1094.94 684.846 L1095.5 684.846 L1096.06 684.846 L1096.62 684.846 L1097.18 684.846 L1097.74 684.846 L1098.3 684.846 L1098.86 684.846 L1099.42 684.846 L1099.98 684.846 L1100.54 684.846 L1101.1 684.846 L1101.66 684.846 L1102.22 684.846 L1102.77 684.846 L1103.33 684.846 L1103.89 684.846 L1104.45 684.846 L1105.01 684.846 L1105.57 684.846 L1106.13 684.846 L1106.69 684.846 L1107.25 684.846 L1107.81 684.846 L1108.37 684.846 L1108.93 684.846 L1109.49 684.846 L1110.04 684.846 L1110.6 684.846 L1111.16 684.846 L1111.72 684.846 L1112.28 684.846 L1112.84 684.846 L1113.4 684.846 L1113.96 684.846 L1114.52 684.846 L1115.08 684.846 L1115.64 684.846 L1116.2 684.846 L1116.76 684.846 L1117.31 684.846 L1117.87 684.846 L1118.43 684.846 L1118.99 684.846 L1119.55 684.846 L1120.11 684.846 L1120.67 684.846 L1121.23 684.846 L1121.79 684.846 L1122.35 684.846 L1122.91 684.846 L1123.47 684.846 L1124.03 684.846 L1124.59 684.846 L1125.14 684.846 L1125.7 684.846 L1126.26 684.846 L1126.82 684.846 L1127.38 684.846 L1127.94 684.846 L1128.5 684.846 L1129.06 684.846 L1129.62 684.846 L1130.18 684.846 L1130.74 684.846 L1131.3 684.846 L1131.86 684.846 L1132.41 684.846 L1132.97 684.846 L1133.53 684.846 L1134.09 684.846 L1134.65 684.846 L1135.21 684.846 L1135.77 684.846 L1136.33 684.846 L1136.89 684.846 L1137.45 684.846 L1138.01 684.846 L1138.57 684.846 L1139.13 684.846 L1139.68 684.846 L1140.24 684.846 L1140.8 684.846 L1141.36 684.846 L1141.92 684.846 L1142.48 684.846 L1143.04 684.846 L1143.6 684.846 L1144.16 684.846 L1144.72 684.846 L1145.28 684.846 L1145.84 684.846 L1146.4 684.846 L1146.96 684.846 L1147.51 684.846 L1148.07 684.846 L1148.63 684.846 L1149.19 684.846 L1149.75 684.846 L1150.31 684.846 L1150.87 684.846 L1151.43 684.846 L1151.99 684.846 L1152.55 684.846 L1153.11 684.846 L1153.67 684.846 L1154.23 684.846 L1154.78 684.846 L1155.34 684.846 L1155.9 684.846 L1156.46 684.846 L1157.02 684.846 L1157.58 684.846 L1158.14 684.846 L1158.7 684.846 L1159.26 684.846 L1159.82 684.846 L1160.38 684.846 L1160.94 684.846 L1161.5 684.846 L1162.05 684.846 L1162.61 684.846 L1163.17 684.846 L1163.73 684.846 L1164.29 684.846 L1164.85 684.846 L1165.41 684.846 L1165.97 684.846 L1166.53 684.846 L1167.09 684.846 L1167.65 684.846 L1168.21 684.846 L1168.77 684.846 L1169.33 684.846 L1169.88 684.846 L1170.44 684.846 L1171 684.846 L1171.56 684.846 L1172.12 684.846 L1172.68 684.846 L1173.24 684.846 L1173.8 684.846 L1174.36 684.846 L1174.92 684.846 L1175.48 684.846 L1176.04 684.846 L1176.6 684.846 L1177.15 684.846 L1177.71 684.846 L1178.27 684.846 L1178.83 684.846 L1179.39 684.846 L1179.95 684.846 L1180.51 684.846 L1181.07 684.846 L1181.63 684.846 L1182.19 684.846 L1182.75 684.846 L1183.31 684.846 L1183.87 684.846 L1184.43 684.846 L1184.98 684.846 L1185.54 684.846 L1186.1 684.846 L1186.66 684.846 L1187.22 684.846 L1187.78 684.846 L1188.34 684.846 L1188.9 684.846 L1189.46 684.846 L1190.02 684.846 L1190.58 684.846 L1191.14 684.846 L1191.7 684.846 L1192.25 684.846 L1192.81 684.846 L1193.37 684.846 L1193.93 684.846 L1194.49 684.846 L1195.05 684.846 L1195.61 684.846 L1196.17 684.846 L1196.73 684.846 L1197.29 684.846 L1197.85 684.846 L1198.41 684.846 L1198.97 684.846 L1199.52 684.846 L1200.08 684.846 L1200.64 684.846 L1201.2 684.846 L1201.76 684.846 L1202.32 684.846 L1202.88 684.846 L1203.44 684.846 L1204 684.846 L1204.56 684.846 L1205.12 684.846 L1205.68 684.846 L1206.24 684.846 L1206.8 684.846 L1207.35 684.846 L1207.91 684.846 L1208.47 684.846 L1209.03 684.846 L1209.59 684.846 L1210.15 684.846 L1210.71 684.846 L1211.27 684.846 L1211.83 684.846 L1212.39 684.846 L1212.95 684.846 L1213.51 684.846 L1214.07 684.846 L1214.62 684.846 L1215.18 684.846 L1215.74 684.846 L1216.3 684.846 L1216.86 684.846 L1217.42 684.846 L1217.98 684.846 L1218.54 684.846 L1219.1 684.846 L1219.66 684.846 L1220.22 684.846 L1220.78 684.846 L1221.34 684.846 L1221.89 684.846 L1222.45 684.846 L1223.01 684.846 L1223.57 684.846 L1224.13 684.846 L1224.69 684.846 L1225.25 684.846 L1225.81 684.846 L1226.37 684.846 L1226.93 684.846 L1227.49 684.846 L1228.05 684.846 L1228.61 684.846 L1229.17 684.846 L1229.72 684.846 L1230.28 684.846 L1230.84 684.846 L1231.4 684.846 L1231.96 684.846 L1232.52 684.846 L1233.08 684.846 L1233.64 684.846 L1234.2 684.846 L1234.76 684.846 L1235.32 684.846 L1235.88 684.846 L1236.44 684.846 L1236.99 684.846 L1237.55 684.846 L1238.11 684.846 L1238.67 684.846 L1239.23 684.846 L1239.79 684.846 L1240.35 684.846 L1240.91 684.846 L1241.47 684.846 L1242.03 684.846 L1242.59 684.846 L1243.15 684.846 L1243.71 684.846 L1244.26 684.846 L1244.82 684.846 L1245.38 684.846 L1245.94 684.846 L1246.5 684.846 L1247.06 684.846 L1247.62 684.846 L1248.18 684.846 L1248.74 684.846 L1249.3 684.846 L1249.86 684.846 L1250.42 684.846 L1250.98 684.846 L1251.54 684.846 L1252.09 684.846 L1252.65 684.846 L1253.21 684.846 L1253.77 684.846 L1254.33 684.846 L1254.89 684.846 L1255.45 684.846 L1256.01 684.846 L1256.57 684.846 L1257.13 684.846 L1257.69 684.846 L1258.25 684.846 L1258.81 684.846 L1259.36 684.846 L1259.92 684.846 L1260.48 684.846 L1261.04 684.846 L1261.6 684.846 L1262.16 684.846 L1262.72 684.846 L1263.28 684.846 L1263.84 684.846 L1264.4 684.846 L1264.96 684.846 L1265.52 684.846 L1266.08 684.846 L1266.63 684.846 L1267.19 684.846 L1267.75 684.846 L1268.31 684.846 L1268.87 684.846 L1269.43 684.846 L1269.99 684.846 L1270.55 684.846 L1271.11 684.846 L1271.67 684.846 L1272.23 684.846 L1272.79 684.846 L1273.35 684.846 L1273.91 684.846 L1274.46 684.846 L1275.02 684.846 L1275.58 684.846 L1276.14 684.846 L1276.7 684.846 L1277.26 684.846 L1277.82 684.846 L1278.38 684.846 L1278.94 684.846 L1279.5 684.846 L1280.06 684.846 L1280.62 684.846 L1281.18 684.846 L1281.73 684.846 L1282.29 684.846 L1282.85 684.846 L1283.41 684.846 L1283.97 684.846 L1284.53 684.846 L1285.09 684.846 L1285.65 684.846 L1286.21 684.846 L1286.77 684.846 L1287.33 684.846 L1287.89 684.846 L1288.45 684.846 L1289 684.846 L1289.56 684.846 L1290.12 684.846 L1290.68 684.846 L1291.24 684.846 L1291.8 684.846 L1292.36 684.846 L1292.92 684.846 L1293.48 684.846 L1294.04 684.846 L1294.6 684.846 L1295.16 684.846 L1295.72 684.846 L1296.28 684.846 L1296.83 684.846 L1297.39 684.846 L1297.95 684.846 L1298.51 684.846 L1299.07 684.846 L1299.63 684.846 L1300.19 684.846 L1300.75 684.846 L1301.31 684.846 L1301.87 684.846 L1302.43 684.846 L1302.99 684.846 L1303.55 684.846 L1304.1 684.846 L1304.66 684.846 L1305.22 684.846 L1305.78 684.846 L1306.34 684.846 L1306.9 684.846 L1307.46 684.846 L1308.02 684.846 L1308.58 684.846 L1309.14 684.846 L1309.7 684.846 L1310.26 684.846 L1310.82 684.846 L1311.38 684.846 L1311.93 684.846 L1312.49 684.846 L1313.05 684.846 L1313.61 684.846 L1314.17 684.846 L1314.73 684.846 L1315.29 684.846 L1315.85 684.846 L1316.41 684.846 L1316.97 684.846 L1317.53 684.846 L1318.09 684.846 L1318.65 684.846 L1319.2 684.846 L1319.76 684.846 L1320.32 684.846 L1320.88 684.846 L1321.44 684.846 L1322 684.846 L1322.56 684.846 L1323.12 684.846 L1323.68 684.846 L1324.24 684.846 L1324.8 684.846 L1325.36 684.846 L1325.92 684.846 L1326.47 684.846 L1327.03 684.846 L1327.59 684.846 L1328.15 684.846 L1328.71 684.846 L1329.27 684.846 L1329.83 684.846 L1330.39 684.846 L1330.95 684.846 L1331.51 684.846 L1332.07 684.846 L1332.63 684.846 L1333.19 684.846 L1333.75 684.846 L1334.3 684.846 L1334.86 684.846 L1335.42 684.846 L1335.98 684.846 L1336.54 684.846 L1337.1 684.846 L1337.66 684.846 L1338.22 684.846 L1338.78 684.846 L1339.34 684.846 L1339.9 684.846 L1340.46 684.846 L1341.02 684.846 L1341.57 684.846 L1342.13 684.846 L1342.69 684.846 L1343.25 684.846 L1343.81 684.846 L1344.37 684.846 L1344.93 684.846 L1345.49 684.846 L1346.05 684.846 L1346.61 684.846 L1347.17 684.846 L1347.73 684.846 L1348.29 684.846 L1348.84 684.846 L1349.4 684.846 L1349.96 684.846 L1350.52 684.846 L1351.08 684.846 L1351.64 684.846 L1352.2 684.846 L1352.76 684.846 L1353.32 684.846 L1353.88 684.846 L1354.44 684.846 L1355 684.846 L1355.56 684.846 L1356.12 684.846 L1356.67 684.846 L1357.23 684.846 L1357.79 684.846 L1358.35 684.846 L1358.91 684.846 L1359.47 684.846 L1360.03 684.846 L1360.59 684.846 L1361.15 684.846 L1361.71 684.846 L1362.27 684.846 L1362.83 684.846 L1363.39 684.846 L1363.94 684.846 L1364.5 684.846 L1365.06 684.846 L1365.62 684.846 L1366.18 684.846 L1366.74 684.846 L1367.3 684.846 L1367.86 684.846 L1368.42 684.846 L1368.98 684.846 L1369.54 684.846 L1370.1 684.846 L1370.66 684.846 L1371.21 684.846 L1371.77 684.846 L1372.33 684.846 L1372.89 684.846 L1373.45 684.846 L1374.01 684.846 L1374.57 684.846 L1375.13 684.846 L1375.69 684.846 L1376.25 684.846 L1376.81 684.846 L1377.37 684.846 L1377.93 684.846 L1378.49 684.846 L1379.04 684.846 L1379.6 684.846 L1380.16 684.846 L1380.72 684.846 L1381.28 684.846 L1381.84 684.846 L1382.4 684.846 L1382.96 684.846 L1383.52 684.846 L1384.08 684.846 L1384.64 684.846 L1385.2 684.846 L1385.76 684.846 L1386.31 684.846 L1386.87 684.846 L1387.43 684.846 L1387.99 684.846 L1388.55 684.846 L1389.11 684.846 L1389.67 684.846 L1390.23 684.846 L1390.79 684.846 L1391.35 684.846 L1391.91 684.846 L1392.47 684.846 L1393.03 684.846 L1393.58 684.846 L1394.14 684.846 L1394.7 684.846 L1395.26 684.846 L1395.82 684.846 L1396.38 684.846 L1396.94 684.846 L1397.5 684.846 L1398.06 684.846 L1398.62 684.846 L1399.18 684.846 L1399.74 684.846 L1400.3 684.846 L1400.86 684.846 L1401.41 684.846 L1401.97 684.846 L1402.53 684.846 L1403.09 684.846 L1403.65 684.846 L1404.21 684.846 L1404.77 684.846 L1405.33 684.846 L1405.89 684.846 L1406.45 684.846 L1407.01 684.846 L1407.57 684.846 L1408.13 684.846 L1408.68 684.846 L1409.24 684.846 L1409.8 684.846 L1410.36 684.846 L1410.92 684.846 L1411.48 684.846 L1412.04 684.846 L1412.6 684.846 L1413.16 684.846 L1413.72 684.846 L1414.28 684.846 L1414.84 684.846 L1415.4 684.846 L1415.95 684.846 L1416.51 684.846 L1417.07 684.846 L1417.63 684.846 L1418.19 684.846 L1418.75 684.846 L1419.31 684.846 L1419.87 684.846 L1420.43 684.846 L1420.99 684.846 L1421.55 684.846 L1422.11 684.846 L1422.67 684.846 L1423.23 684.846 L1423.78 684.846 L1424.34 684.846 L1424.9 684.846 L1425.46 684.846 L1426.02 684.846 L1426.58 684.846 L1427.14 684.846 L1427.7 684.846 L1428.26 684.846 L1428.82 684.846 L1429.38 684.846 L1429.94 684.846 L1430.5 684.846 L1431.05 684.846 L1431.61 684.846 L1432.17 684.846 L1432.73 684.846 L1433.29 684.846 L1433.85 684.846 L1434.41 684.846 L1434.97 684.846 L1435.53 684.846 L1436.09 684.846 L1436.65 684.846 L1437.21 684.846 L1437.77 684.846 L1438.33 684.846 L1438.88 684.846 L1439.44 684.846 L1440 684.846 L1440.56 684.846 L1441.12 684.846 L1441.68 684.846 L1442.24 684.846 L1442.8 684.846 L1443.36 684.846 L1443.92 684.846 L1444.48 684.846 L1445.04 684.846 L1445.6 684.846 L1446.15 684.846 L1446.71 684.846 L1447.27 684.846 L1447.83 684.846 L1448.39 684.846 L1448.95 684.846 L1449.51 684.846 L1450.07 684.846 L1450.63 684.846 L1451.19 684.846 L1451.75 684.846 L1452.31 684.846 L1452.87 684.846 L1453.42 684.846 L1453.98 684.846 L1454.54 684.846 L1455.1 684.846 L1455.66 684.846 L1456.22 684.846 L1456.78 684.846 L1457.34 684.846 L1457.9 684.846 L1458.46 684.846 L1459.02 684.846 L1459.58 684.846 L1460.14 684.846 L1460.7 684.846 L1461.25 684.846 L1461.81 684.846 L1462.37 684.846 L1462.93 684.846 L1463.49 684.846 L1464.05 684.846 L1464.61 684.846 L1465.17 684.846 L1465.73 684.846 L1466.29 684.846 L1466.85 684.846 L1467.41 684.846 L1467.97 684.846 L1468.52 684.846 L1469.08 684.846 L1469.64 684.846 L1470.2 684.846 L1470.76 684.846 L1471.32 684.846 L1471.88 684.846 L1472.44 684.846 L1473 684.846 L1473.56 684.846 L1474.12 684.846 L1474.68 684.846 L1475.24 684.846 L1475.79 684.846 L1476.35 684.846 L1476.91 684.846 L1477.47 684.846 L1478.03 684.846 L1478.59 684.846 L1479.15 684.846 L1479.71 684.846 L1480.27 684.846 L1480.83 684.846 L1481.39 684.846 L1481.95 684.846 L1482.51 684.846 L1483.07 684.846 L1483.62 684.846 L1484.18 684.846 L1484.74 684.846 L1485.3 684.846 L1485.86 684.846 L1486.42 684.846 L1486.98 684.846 L1487.54 684.846 L1488.1 684.846 L1488.66 684.846 L1489.22 684.846 L1489.78 684.846 L1490.34 684.846 L1490.89 684.846 L1491.45 684.846 L1492.01 684.846 L1492.57 684.846 L1493.13 684.846 L1493.69 684.846 L1494.25 684.846 L1494.81 684.846 L1495.37 684.846 L1495.93 684.846 L1496.49 684.846 L1497.05 684.846 L1497.61 684.846 L1498.16 684.846 L1498.72 684.846 L1499.28 684.846 L1499.84 684.846 L1500.4 684.846 L1500.96 684.846 L1501.52 684.846 L1502.08 684.846 L1502.64 684.846 L1503.2 684.846 L1503.76 684.846 L1504.32 684.846 L1504.88 684.846 L1505.44 684.846 L1505.99 684.846 L1506.55 684.846 L1507.11 684.846 L1507.67 684.846 L1508.23 684.846 L1508.79 684.846 L1509.35 684.846 L1509.91 684.846 L1510.47 684.846 L1511.03 684.846 L1511.59 684.846 L1512.15 684.846 L1512.71 684.846 L1513.26 684.846 L1513.82 684.846 L1514.38 684.846 L1514.94 684.846 L1515.5 684.846 L1516.06 684.846 L1516.62 684.846 L1517.18 684.846 L1517.74 684.846 L1518.3 684.846 L1518.86 684.846 L1519.42 684.846 L1519.98 684.846 L1520.53 684.846 L1521.09 684.846 L1521.65 684.846 L1522.21 684.846 L1522.77 684.846 L1523.33 684.846 L1523.89 684.846 L1524.45 684.846 L1525.01 684.846 L1525.57 684.846 L1526.13 684.846 L1526.69 684.846 L1527.25 684.846 L1527.81 684.846 L1528.36 684.846 L1528.92 684.846 L1529.48 684.846 L1530.04 684.846 L1530.6 684.846 L1531.16 684.846 L1531.72 684.846 L1532.28 684.846 L1532.84 684.846 L1533.4 684.846 L1533.96 684.846 L1534.52 684.846 L1535.08 684.846 L1535.63 684.846 L1536.19 684.846 L1536.75 684.846 L1537.31 684.846 L1537.87 684.846 L1538.43 684.846 L1538.99 684.846 L1539.55 684.846 L1540.11 684.846 L1540.67 684.846 L1541.23 684.846 L1541.79 684.846 L1542.35 684.846 L1542.9 684.846 L1543.46 684.846 L1544.02 684.846 L1544.58 684.846 L1545.14 684.846 L1545.7 684.846 L1546.26 684.846 L1546.82 684.846 L1547.38 684.846 L1547.94 684.846 L1548.5 684.846 L1549.06 684.846 L1549.62 684.846 L1550.18 684.846 L1550.73 684.846 L1551.29 684.846 L1551.85 684.846 L1552.41 684.846 L1552.97 684.846 L1553.53 684.846 L1554.09 684.846 L1554.65 684.846 L1555.21 684.846 L1555.77 684.846 L1556.33 684.846 L1556.89 684.846 L1557.45 684.846 L1558 684.846 L1558.56 684.846 L1559.12 684.846 L1559.68 684.846 L1560.24 684.846 L1560.8 684.846 L1561.36 684.846 L1561.92 684.846 L1562.48 684.846 L1563.04 684.846 L1563.6 684.846 L1564.16 684.846 L1564.72 684.846 L1565.28 684.846 L1565.83 684.846 L1566.39 684.846 L1566.95 684.846 L1567.51 684.846 L1568.07 684.846 L1568.63 684.846 L1569.19 684.846 L1569.75 684.846 L1570.31 684.846 L1570.87 684.846 L1571.43 684.846 L1571.99 684.846 L1572.55 684.846 L1573.1 684.846 L1573.66 684.846 L1574.22 684.846 L1574.78 684.846 L1575.34 684.846 L1575.9 684.846 L1576.46 684.846 L1577.02 684.846 L1577.58 684.846 L1578.14 684.846 L1578.7 684.846 L1579.26 684.846 L1579.82 684.846 L1580.37 684.846 L1580.93 684.846 L1581.49 684.846 L1582.05 684.846 L1582.61 684.846 L1583.17 684.846 L1583.73 684.846 L1584.29 684.846 L1584.85 684.846 L1585.41 684.846 L1585.97 684.846 L1586.53 684.846 L1587.09 684.846 L1587.65 684.846 L1588.2 684.846 L1588.76 684.846 L1589.32 684.846 L1589.88 684.846 L1590.44 684.846 L1591 684.846 L1591.56 684.846 L1592.12 684.846 L1592.68 684.846 L1593.24 684.846 L1593.8 684.846 L1594.36 684.846 L1594.92 684.846 L1595.47 684.846 L1596.03 684.846 L1596.59 684.846 L1597.15 684.846 L1597.71 684.846 L1598.27 684.846 L1598.83 684.846 L1599.39 684.846 L1599.95 684.846 L1600.51 684.846 L1601.07 684.846 L1601.63 684.846 L1602.19 684.846 L1602.74 684.846 L1603.3 684.846 L1603.86 684.846 L1604.42 684.846 L1604.98 684.846 L1605.54 684.846 L1606.1 684.846 L1606.66 684.846 L1607.22 684.846 L1607.78 684.846 L1608.34 684.846 L1608.9 684.846 L1609.46 684.846 L1610.02 684.846 L1610.57 684.846 L1611.13 684.846 L1611.69 684.846 L1612.25 684.846 L1612.81 684.846 L1613.37 684.846 L1613.93 684.846 L1614.49 684.846 L1615.05 684.846 L1615.61 684.846 L1616.17 684.846 L1616.73 684.846 L1617.29 684.846 L1617.84 684.846 L1618.4 684.846 L1618.96 684.846 L1619.52 684.846 L1620.08 684.846 L1620.64 684.846 L1621.2 684.846 L1621.76 684.846 L1622.32 684.846 L1622.88 684.846 L1623.44 684.846 L1624 684.846 L1624.56 684.846 L1625.11 684.846 L1625.67 684.846 L1626.23 684.846 L1626.79 684.846 L1627.35 684.846 L1627.91 684.846 L1628.47 684.846 L1629.03 684.846 L1629.59 684.846 L1630.15 684.846 L1630.71 684.846 L1631.27 684.846 L1631.83 684.846 L1632.39 684.846 L1632.94 684.846 L1633.5 684.846 L1634.06 684.846 L1634.62 684.846 L1635.18 684.846 L1635.74 684.846 L1636.3 684.846 L1636.86 684.846 L1637.42 684.846 L1637.98 684.846 L1638.54 684.846 L1639.1 684.846 L1639.66 684.846 L1640.21 684.846 L1640.77 684.846 L1641.33 684.846 L1641.89 684.846 L1642.45 684.846 L1643.01 684.846 L1643.57 684.846 L1644.13 684.846 L1644.69 684.846 L1645.25 684.846 L1645.81 684.846 L1646.37 684.846 L1646.93 684.846 L1647.48 684.846 L1648.04 684.846 L1648.6 684.846 L1649.16 684.846 L1649.72 684.846 L1650.28 684.846 L1650.84 684.846 L1651.4 684.846 L1651.96 684.846 L1652.52 684.846 L1653.08 684.846 L1653.64 684.846 L1654.2 684.846 L1654.76 684.846 L1655.31 684.846 L1655.87 684.846 L1656.43 684.846 L1656.99 684.846 L1657.55 684.846 L1658.11 684.846 L1658.67 684.846 L1659.23 684.846 L1659.79 684.846 L1660.35 684.846 L1660.91 684.846 L1661.47 684.846 L1662.03 684.846 L1662.58 684.846 L1663.14 684.846 L1663.7 684.846 L1664.26 684.846 L1664.82 684.846 L1665.38 684.846 L1665.94 684.846 L1666.5 684.846 L1667.06 684.846 L1667.62 684.846 L1668.18 684.846 L1668.74 684.846 L1669.3 684.846 L1669.85 684.846 L1670.41 684.846 L1670.97 684.846 L1671.53 684.846 L1672.09 684.846 L1672.65 684.846 L1673.21 684.846 L1673.77 684.846 L1674.33 684.846 L1674.89 684.846 L1675.45 684.846 L1676.01 684.846 L1676.57 684.846 L1677.13 684.846 L1677.68 684.846 L1678.24 684.846 L1678.8 684.846 L1679.36 684.846 L1679.92 684.846 L1680.48 684.846 L1681.04 684.846 L1681.6 684.846 L1682.16 684.846 L1682.72 684.846 L1683.28 684.846 L1683.84 684.846 L1684.4 684.846 L1684.95 684.846 L1685.51 684.846 L1686.07 684.846 L1686.63 684.846 L1687.19 684.846 L1687.75 684.846 L1688.31 684.846 L1688.87 684.846 L1689.43 684.846 L1689.99 684.846 L1690.55 684.846 L1691.11 684.846 L1691.67 684.846 L1692.23 684.846 L1692.78 684.846 L1693.34 684.846 L1693.9 684.846 L1694.46 684.846 L1695.02 684.846 L1695.58 684.846 L1696.14 684.846 L1696.7 684.846 L1697.26 684.846 L1697.82 684.846 L1698.38 684.846 L1698.94 684.846 L1699.5 684.846 L1700.05 684.846 L1700.61 684.846 L1701.17 684.846 L1701.73 684.846 L1702.29 684.846 L1702.85 684.846 L1703.41 684.846 L1703.97 684.846 L1704.53 684.846 L1705.09 684.846 L1705.65 684.846 L1706.21 684.846 L1706.77 684.846 L1707.32 684.846 L1707.88 684.846 L1708.44 684.846 L1709 684.846 L1709.56 684.846 L1710.12 684.846 L1710.68 684.846 L1711.24 684.846 L1711.8 684.846 L1712.36 684.846 L1712.92 684.846 L1713.48 684.846 L1714.04 684.846 L1714.6 684.846 L1715.15 684.846 L1715.71 684.846 L1716.27 684.846 L1716.83 684.846 L1717.39 684.846 L1717.95 684.846 L1718.51 684.846 L1719.07 684.846 L1719.63 684.846 L1720.19 684.846 L1720.75 684.846 L1721.31 684.846 L1721.87 684.846 L1722.42 684.846 L1722.98 684.846 L1723.54 684.846 L1724.1 684.846 L1724.66 684.846 L1725.22 684.846 L1725.78 684.846 L1726.34 684.846 L1726.9 684.846 L1727.46 684.846 L1728.02 684.846 L1728.58 684.846 L1729.14 684.846 L1729.69 684.846 L1730.25 684.846 L1730.81 684.846 L1731.37 684.846 L1731.93 684.846 L1732.49 684.846 L1733.05 684.846 L1733.61 684.846 L1734.17 684.846 L1734.73 684.846 L1735.29 684.846 L1735.85 684.846 L1736.41 684.846 L1736.97 684.846 L1737.52 684.846 L1738.08 684.846 L1738.64 684.846 L1739.2 684.846 L1739.76 684.846 L1740.32 684.846 L1740.88 684.846 L1741.44 684.846 L1742 684.846 L1742.56 684.846 L1743.12 684.846 L1743.68 684.846 L1744.24 684.846 L1744.79 684.846 L1745.35 684.846 L1745.91 684.846 L1746.47 684.846 L1747.03 684.846 L1747.59 684.846 L1748.15 684.846 L1748.71 684.846 L1749.27 684.846 L1749.83 684.846 L1750.39 684.846 L1750.95 684.846 L1751.51 684.846 L1752.06 684.846 L1752.62 684.846 L1753.18 684.846 L1753.74 684.846 L1754.3 684.846 L1754.86 684.846 L1755.42 684.846 L1755.98 684.846 L1756.54 684.846 L1757.1 684.846 L1757.66 684.846 L1758.22 684.846 L1758.78 684.846 L1759.34 684.846 L1759.89 684.846 L1760.45 684.846 L1761.01 684.846 L1761.57 684.846 L1762.13 684.846 L1762.69 684.846 L1763.25 684.846 L1763.81 684.846 L1764.37 684.846 L1764.93 684.846 L1765.49 684.846 L1766.05 684.846 L1766.61 684.846 L1767.16 684.846 L1767.72 684.846 L1768.28 684.846 L1768.84 684.846 L1769.4 684.846 L1769.96 684.846 L1770.52 684.846 L1771.08 684.846 L1771.64 684.846 L1772.2 684.846 L1772.76 684.846 L1773.32 684.846 L1773.88 684.846 L1774.43 684.846 L1774.99 684.846 L1775.55 684.846 L1776.11 684.846 L1776.67 684.846 L1777.23 684.846 L1777.79 684.846 L1778.35 684.846 L1778.91 684.846 L1779.47 684.846 L1780.03 684.846 L1780.59 684.846 L1781.15 684.846 L1781.71 684.846 L1782.26 684.846 L1782.82 684.846 L1783.38 684.846 L1783.94 684.846 L1784.5 684.846 L1785.06 684.846 L1785.62 684.846 L1786.18 684.846 L1786.74 684.846 L1787.3 684.846 L1787.86 684.846 L1788.42 684.846 L1788.98 684.846 L1789.53 684.846 L1790.09 684.846 L1790.65 684.846 L1791.21 684.846 L1791.77 684.846 L1792.33 684.846 L1792.89 684.846 L1793.45 684.846 L1794.01 684.846 L1794.57 684.846 L1795.13 684.846 L1795.69 684.846 L1796.25 684.846 L1796.8 684.846 L1797.36 684.846 L1797.92 684.846 L1798.48 684.846 L1799.04 684.846 L1799.6 684.846 L1800.16 684.846 L1800.72 684.846 L1801.28 684.846 L1801.84 684.846 L1802.4 684.846 L1802.96 684.846 L1803.52 684.846 L1804.08 684.846 L1804.63 684.846 L1805.19 684.846 L1805.75 684.846 L1806.31 684.846 L1806.87 684.846 L1807.43 684.846 L1807.99 684.846 L1808.55 684.846 L1809.11 684.846 L1809.67 684.846 L1810.23 684.846 L1810.79 684.846 L1811.35 684.846 L1811.9 684.846 L1812.46 684.846 L1813.02 684.846 L1813.58 684.846 L1814.14 684.846 L1814.7 684.846 L1815.26 684.846 L1815.82 684.846 L1816.38 684.846 L1816.94 684.846 L1817.5 684.846 L1818.06 684.846 L1818.62 684.846 L1819.18 684.846 L1819.73 684.846 L1820.29 684.846 L1820.85 684.846 L1821.41 684.846 L1821.97 684.846 L1822.53 684.846 L1823.09 684.846 L1823.65 684.846 L1824.21 684.846 L1824.77 684.846 L1825.33 684.846 L1825.89 684.846 L1826.45 684.846 L1827 684.846 L1827.56 684.846 L1828.12 684.846 L1828.68 684.846 L1829.24 684.846 L1829.8 684.846 L1830.36 684.846 L1830.92 684.846 L1831.48 684.846 L1832.04 684.846 L1832.6 684.846 L1833.16 684.846 L1833.72 684.846 L1834.27 684.846 L1834.83 684.846 L1835.39 684.846 L1835.95 684.846 L1836.51 684.846 L1837.07 684.846 L1837.63 684.846 L1838.19 684.846 L1838.19 683.044 L1837.63 683.044 L1837.07 683.044 L1836.51 683.044 L1835.95 683.044 L1835.39 683.044 L1834.83 683.044 L1834.27 683.044 L1833.72 683.044 L1833.16 683.044 L1832.6 683.044 L1832.04 683.044 L1831.48 683.044 L1830.92 683.044 L1830.36 683.044 L1829.8 683.044 L1829.24 683.044 L1828.68 683.044 L1828.12 683.044 L1827.56 683.044 L1827 683.044 L1826.45 683.044 L1825.89 683.044 L1825.33 683.044 L1824.77 683.044 L1824.21 683.044 L1823.65 683.044 L1823.09 683.044 L1822.53 683.044 L1821.97 683.044 L1821.41 683.044 L1820.85 683.044 L1820.29 683.044 L1819.73 683.044 L1819.18 683.044 L1818.62 683.044 L1818.06 683.044 L1817.5 683.044 L1816.94 683.044 L1816.38 683.044 L1815.82 683.044 L1815.26 683.044 L1814.7 683.044 L1814.14 683.044 L1813.58 683.044 L1813.02 683.044 L1812.46 683.044 L1811.9 683.044 L1811.35 683.044 L1810.79 683.044 L1810.23 683.044 L1809.67 683.044 L1809.11 683.044 L1808.55 683.044 L1807.99 683.044 L1807.43 683.044 L1806.87 683.044 L1806.31 683.044 L1805.75 683.044 L1805.19 683.044 L1804.63 683.044 L1804.08 683.044 L1803.52 683.044 L1802.96 683.044 L1802.4 683.044 L1801.84 683.044 L1801.28 683.044 L1800.72 683.044 L1800.16 683.044 L1799.6 683.044 L1799.04 683.044 L1798.48 683.044 L1797.92 683.044 L1797.36 683.044 L1796.8 683.044 L1796.25 683.044 L1795.69 683.044 L1795.13 683.044 L1794.57 683.044 L1794.01 683.044 L1793.45 683.044 L1792.89 683.044 L1792.33 683.044 L1791.77 683.044 L1791.21 683.044 L1790.65 683.044 L1790.09 683.044 L1789.53 683.044 L1788.98 683.044 L1788.42 683.044 L1787.86 683.044 L1787.3 683.044 L1786.74 683.044 L1786.18 683.044 L1785.62 683.044 L1785.06 683.044 L1784.5 683.044 L1783.94 683.044 L1783.38 683.044 L1782.82 683.044 L1782.26 683.044 L1781.71 683.044 L1781.15 683.044 L1780.59 683.044 L1780.03 683.044 L1779.47 683.044 L1778.91 683.044 L1778.35 683.044 L1777.79 683.044 L1777.23 683.044 L1776.67 683.044 L1776.11 683.044 L1775.55 683.044 L1774.99 683.044 L1774.43 683.044 L1773.88 683.044 L1773.32 683.044 L1772.76 683.044 L1772.2 683.044 L1771.64 683.044 L1771.08 683.044 L1770.52 683.044 L1769.96 683.044 L1769.4 683.044 L1768.84 683.044 L1768.28 683.044 L1767.72 683.044 L1767.16 683.044 L1766.61 683.044 L1766.05 683.044 L1765.49 683.044 L1764.93 683.044 L1764.37 683.044 L1763.81 683.044 L1763.25 683.044 L1762.69 683.044 L1762.13 683.044 L1761.57 683.044 L1761.01 683.044 L1760.45 683.044 L1759.89 683.044 L1759.34 683.044 L1758.78 683.044 L1758.22 683.044 L1757.66 683.044 L1757.1 683.044 L1756.54 683.044 L1755.98 683.044 L1755.42 683.044 L1754.86 683.044 L1754.3 683.044 L1753.74 683.044 L1753.18 683.044 L1752.62 683.044 L1752.06 683.044 L1751.51 683.044 L1750.95 683.044 L1750.39 683.044 L1749.83 683.044 L1749.27 683.044 L1748.71 683.044 L1748.15 683.044 L1747.59 683.044 L1747.03 683.044 L1746.47 683.044 L1745.91 683.044 L1745.35 683.044 L1744.79 683.044 L1744.24 683.044 L1743.68 683.044 L1743.12 683.044 L1742.56 683.044 L1742 683.044 L1741.44 683.044 L1740.88 683.044 L1740.32 683.044 L1739.76 683.044 L1739.2 683.044 L1738.64 683.044 L1738.08 683.044 L1737.52 683.044 L1736.97 683.044 L1736.41 683.044 L1735.85 683.044 L1735.29 683.044 L1734.73 683.044 L1734.17 683.044 L1733.61 683.044 L1733.05 683.044 L1732.49 683.044 L1731.93 683.044 L1731.37 683.044 L1730.81 683.044 L1730.25 683.044 L1729.69 683.044 L1729.14 683.044 L1728.58 683.044 L1728.02 683.044 L1727.46 683.044 L1726.9 683.044 L1726.34 683.044 L1725.78 683.044 L1725.22 683.044 L1724.66 683.044 L1724.1 683.044 L1723.54 683.044 L1722.98 683.044 L1722.42 683.044 L1721.87 683.044 L1721.31 683.044 L1720.75 683.044 L1720.19 683.044 L1719.63 683.044 L1719.07 683.044 L1718.51 683.044 L1717.95 683.044 L1717.39 683.044 L1716.83 683.044 L1716.27 683.044 L1715.71 683.044 L1715.15 683.044 L1714.6 683.044 L1714.04 683.044 L1713.48 683.044 L1712.92 683.044 L1712.36 683.044 L1711.8 683.044 L1711.24 683.044 L1710.68 683.044 L1710.12 683.044 L1709.56 683.044 L1709 683.044 L1708.44 683.044 L1707.88 683.044 L1707.32 683.044 L1706.77 683.044 L1706.21 683.044 L1705.65 683.044 L1705.09 683.044 L1704.53 683.044 L1703.97 683.044 L1703.41 683.044 L1702.85 683.044 L1702.29 683.044 L1701.73 683.044 L1701.17 683.044 L1700.61 683.044 L1700.05 683.044 L1699.5 683.044 L1698.94 683.044 L1698.38 683.044 L1697.82 683.044 L1697.26 683.044 L1696.7 683.044 L1696.14 683.044 L1695.58 683.044 L1695.02 683.044 L1694.46 683.044 L1693.9 683.044 L1693.34 683.044 L1692.78 683.044 L1692.23 683.044 L1691.67 683.044 L1691.11 683.044 L1690.55 683.044 L1689.99 683.044 L1689.43 683.044 L1688.87 683.044 L1688.31 683.044 L1687.75 683.044 L1687.19 683.044 L1686.63 683.044 L1686.07 683.044 L1685.51 683.044 L1684.95 683.044 L1684.4 683.044 L1683.84 683.044 L1683.28 683.044 L1682.72 683.044 L1682.16 683.044 L1681.6 683.044 L1681.04 683.044 L1680.48 683.044 L1679.92 683.044 L1679.36 683.044 L1678.8 683.044 L1678.24 683.044 L1677.68 683.044 L1677.13 683.044 L1676.57 683.044 L1676.01 683.044 L1675.45 683.044 L1674.89 683.044 L1674.33 683.044 L1673.77 683.044 L1673.21 683.044 L1672.65 683.044 L1672.09 683.044 L1671.53 683.044 L1670.97 683.044 L1670.41 683.044 L1669.85 683.044 L1669.3 683.044 L1668.74 683.044 L1668.18 683.044 L1667.62 683.044 L1667.06 683.044 L1666.5 683.044 L1665.94 683.044 L1665.38 683.044 L1664.82 683.044 L1664.26 683.044 L1663.7 683.044 L1663.14 683.044 L1662.58 683.044 L1662.03 683.044 L1661.47 683.044 L1660.91 683.044 L1660.35 683.044 L1659.79 683.044 L1659.23 683.044 L1658.67 683.044 L1658.11 683.044 L1657.55 683.044 L1656.99 683.044 L1656.43 683.044 L1655.87 683.044 L1655.31 683.044 L1654.76 683.044 L1654.2 683.044 L1653.64 683.044 L1653.08 683.044 L1652.52 683.044 L1651.96 683.044 L1651.4 683.044 L1650.84 683.044 L1650.28 683.044 L1649.72 683.044 L1649.16 683.044 L1648.6 683.044 L1648.04 683.044 L1647.48 683.044 L1646.93 683.044 L1646.37 683.044 L1645.81 683.044 L1645.25 683.044 L1644.69 683.044 L1644.13 683.044 L1643.57 683.044 L1643.01 683.044 L1642.45 683.044 L1641.89 683.044 L1641.33 683.044 L1640.77 683.044 L1640.21 683.044 L1639.66 683.044 L1639.1 683.044 L1638.54 683.044 L1637.98 683.044 L1637.42 683.044 L1636.86 683.044 L1636.3 683.044 L1635.74 683.044 L1635.18 683.044 L1634.62 683.044 L1634.06 683.044 L1633.5 683.044 L1632.94 683.044 L1632.39 683.044 L1631.83 683.044 L1631.27 683.044 L1630.71 683.044 L1630.15 683.044 L1629.59 683.044 L1629.03 683.044 L1628.47 683.044 L1627.91 683.044 L1627.35 683.044 L1626.79 683.044 L1626.23 683.044 L1625.67 683.044 L1625.11 683.044 L1624.56 683.044 L1624 683.044 L1623.44 683.044 L1622.88 683.044 L1622.32 683.044 L1621.76 683.044 L1621.2 683.044 L1620.64 683.044 L1620.08 683.044 L1619.52 683.044 L1618.96 683.044 L1618.4 683.044 L1617.84 683.044 L1617.29 683.044 L1616.73 683.044 L1616.17 683.044 L1615.61 683.044 L1615.05 683.044 L1614.49 683.044 L1613.93 683.044 L1613.37 683.044 L1612.81 683.044 L1612.25 683.044 L1611.69 683.044 L1611.13 683.044 L1610.57 683.044 L1610.02 683.044 L1609.46 683.044 L1608.9 683.044 L1608.34 683.044 L1607.78 683.044 L1607.22 683.044 L1606.66 683.044 L1606.1 683.044 L1605.54 683.044 L1604.98 683.044 L1604.42 683.044 L1603.86 683.044 L1603.3 683.044 L1602.74 683.044 L1602.19 683.044 L1601.63 683.044 L1601.07 683.044 L1600.51 683.044 L1599.95 683.044 L1599.39 683.044 L1598.83 683.044 L1598.27 683.044 L1597.71 683.044 L1597.15 683.044 L1596.59 683.044 L1596.03 683.044 L1595.47 683.044 L1594.92 683.044 L1594.36 683.044 L1593.8 683.044 L1593.24 683.044 L1592.68 683.044 L1592.12 683.044 L1591.56 683.044 L1591 683.044 L1590.44 683.044 L1589.88 683.044 L1589.32 683.044 L1588.76 683.044 L1588.2 683.044 L1587.65 683.044 L1587.09 683.044 L1586.53 683.044 L1585.97 683.044 L1585.41 683.044 L1584.85 683.044 L1584.29 683.044 L1583.73 683.044 L1583.17 683.044 L1582.61 683.044 L1582.05 683.044 L1581.49 683.044 L1580.93 683.044 L1580.37 683.044 L1579.82 683.044 L1579.26 683.044 L1578.7 683.044 L1578.14 683.044 L1577.58 683.044 L1577.02 683.044 L1576.46 683.044 L1575.9 683.044 L1575.34 683.044 L1574.78 683.044 L1574.22 683.044 L1573.66 683.044 L1573.1 683.044 L1572.55 683.044 L1571.99 683.044 L1571.43 683.044 L1570.87 683.044 L1570.31 683.044 L1569.75 683.044 L1569.19 683.044 L1568.63 683.044 L1568.07 683.044 L1567.51 683.044 L1566.95 683.044 L1566.39 683.044 L1565.83 683.044 L1565.28 683.044 L1564.72 683.044 L1564.16 683.044 L1563.6 683.044 L1563.04 683.044 L1562.48 683.044 L1561.92 683.044 L1561.36 683.044 L1560.8 683.044 L1560.24 683.044 L1559.68 683.044 L1559.12 683.044 L1558.56 683.044 L1558 683.044 L1557.45 683.044 L1556.89 683.044 L1556.33 683.044 L1555.77 683.044 L1555.21 683.044 L1554.65 683.044 L1554.09 683.044 L1553.53 683.044 L1552.97 683.044 L1552.41 683.044 L1551.85 683.044 L1551.29 683.044 L1550.73 683.044 L1550.18 683.044 L1549.62 683.044 L1549.06 683.044 L1548.5 683.044 L1547.94 683.044 L1547.38 683.044 L1546.82 683.044 L1546.26 683.044 L1545.7 683.044 L1545.14 683.044 L1544.58 683.044 L1544.02 683.044 L1543.46 683.044 L1542.9 683.044 L1542.35 683.044 L1541.79 683.044 L1541.23 683.044 L1540.67 683.044 L1540.11 683.044 L1539.55 683.044 L1538.99 683.044 L1538.43 683.044 L1537.87 683.044 L1537.31 683.044 L1536.75 683.044 L1536.19 683.044 L1535.63 683.044 L1535.08 683.044 L1534.52 683.044 L1533.96 683.044 L1533.4 683.044 L1532.84 683.044 L1532.28 683.044 L1531.72 683.044 L1531.16 683.044 L1530.6 683.044 L1530.04 683.044 L1529.48 683.044 L1528.92 683.044 L1528.36 683.044 L1527.81 683.044 L1527.25 683.044 L1526.69 683.044 L1526.13 683.044 L1525.57 683.044 L1525.01 683.044 L1524.45 683.044 L1523.89 683.044 L1523.33 683.044 L1522.77 683.044 L1522.21 683.044 L1521.65 683.044 L1521.09 683.044 L1520.53 683.044 L1519.98 683.044 L1519.42 683.044 L1518.86 683.044 L1518.3 683.044 L1517.74 683.044 L1517.18 683.044 L1516.62 683.044 L1516.06 683.044 L1515.5 683.044 L1514.94 683.044 L1514.38 683.044 L1513.82 683.044 L1513.26 683.044 L1512.71 683.044 L1512.15 683.044 L1511.59 683.044 L1511.03 683.044 L1510.47 683.044 L1509.91 683.044 L1509.35 683.044 L1508.79 683.044 L1508.23 683.044 L1507.67 683.044 L1507.11 683.044 L1506.55 683.044 L1505.99 683.044 L1505.44 683.044 L1504.88 683.044 L1504.32 683.044 L1503.76 683.044 L1503.2 683.044 L1502.64 683.044 L1502.08 683.044 L1501.52 683.044 L1500.96 683.044 L1500.4 683.044 L1499.84 683.044 L1499.28 683.044 L1498.72 683.044 L1498.16 683.044 L1497.61 683.044 L1497.05 683.044 L1496.49 683.044 L1495.93 683.044 L1495.37 683.044 L1494.81 683.044 L1494.25 683.044 L1493.69 683.044 L1493.13 683.044 L1492.57 683.044 L1492.01 683.044 L1491.45 683.044 L1490.89 683.044 L1490.34 683.044 L1489.78 683.044 L1489.22 683.044 L1488.66 683.044 L1488.1 683.044 L1487.54 683.044 L1486.98 683.044 L1486.42 683.044 L1485.86 683.044 L1485.3 683.044 L1484.74 683.044 L1484.18 683.044 L1483.62 683.044 L1483.07 683.044 L1482.51 683.044 L1481.95 683.044 L1481.39 683.044 L1480.83 683.044 L1480.27 683.044 L1479.71 683.044 L1479.15 683.044 L1478.59 683.044 L1478.03 683.044 L1477.47 683.044 L1476.91 683.044 L1476.35 683.044 L1475.79 683.044 L1475.24 683.044 L1474.68 683.044 L1474.12 683.044 L1473.56 683.044 L1473 683.044 L1472.44 683.044 L1471.88 683.044 L1471.32 683.044 L1470.76 683.044 L1470.2 683.044 L1469.64 683.044 L1469.08 683.044 L1468.52 683.044 L1467.97 683.044 L1467.41 683.044 L1466.85 683.044 L1466.29 683.044 L1465.73 683.044 L1465.17 683.044 L1464.61 683.044 L1464.05 683.044 L1463.49 683.044 L1462.93 683.044 L1462.37 683.044 L1461.81 683.044 L1461.25 683.044 L1460.7 683.044 L1460.14 683.044 L1459.58 683.044 L1459.02 683.044 L1458.46 683.044 L1457.9 683.044 L1457.34 683.044 L1456.78 683.044 L1456.22 683.044 L1455.66 683.044 L1455.1 683.044 L1454.54 683.044 L1453.98 683.044 L1453.42 683.044 L1452.87 683.044 L1452.31 683.044 L1451.75 683.044 L1451.19 683.044 L1450.63 683.044 L1450.07 683.044 L1449.51 683.044 L1448.95 683.044 L1448.39 683.044 L1447.83 683.044 L1447.27 683.044 L1446.71 683.044 L1446.15 683.044 L1445.6 683.044 L1445.04 683.044 L1444.48 683.044 L1443.92 683.044 L1443.36 683.044 L1442.8 683.044 L1442.24 683.044 L1441.68 683.044 L1441.12 683.044 L1440.56 683.044 L1440 683.044 L1439.44 683.044 L1438.88 683.044 L1438.33 683.044 L1437.77 683.044 L1437.21 683.044 L1436.65 683.044 L1436.09 683.044 L1435.53 683.044 L1434.97 683.044 L1434.41 683.044 L1433.85 683.044 L1433.29 683.044 L1432.73 683.044 L1432.17 683.044 L1431.61 683.044 L1431.05 683.044 L1430.5 683.044 L1429.94 683.044 L1429.38 683.044 L1428.82 683.044 L1428.26 683.044 L1427.7 683.044 L1427.14 683.044 L1426.58 683.044 L1426.02 683.044 L1425.46 683.044 L1424.9 683.044 L1424.34 683.044 L1423.78 683.044 L1423.23 683.044 L1422.67 683.044 L1422.11 683.044 L1421.55 683.044 L1420.99 683.044 L1420.43 683.044 L1419.87 683.044 L1419.31 683.044 L1418.75 683.044 L1418.19 683.044 L1417.63 683.044 L1417.07 683.044 L1416.51 683.044 L1415.95 683.044 L1415.4 683.044 L1414.84 683.044 L1414.28 683.044 L1413.72 683.044 L1413.16 683.044 L1412.6 683.044 L1412.04 683.044 L1411.48 683.044 L1410.92 683.044 L1410.36 683.044 L1409.8 683.044 L1409.24 683.044 L1408.68 683.044 L1408.13 683.044 L1407.57 683.044 L1407.01 683.044 L1406.45 683.044 L1405.89 683.044 L1405.33 683.044 L1404.77 683.044 L1404.21 683.044 L1403.65 683.044 L1403.09 683.044 L1402.53 683.044 L1401.97 683.044 L1401.41 683.044 L1400.86 683.044 L1400.3 683.044 L1399.74 683.044 L1399.18 683.044 L1398.62 683.044 L1398.06 683.044 L1397.5 683.044 L1396.94 683.044 L1396.38 683.044 L1395.82 683.044 L1395.26 683.044 L1394.7 683.044 L1394.14 683.044 L1393.58 683.044 L1393.03 683.044 L1392.47 683.044 L1391.91 683.044 L1391.35 683.044 L1390.79 683.044 L1390.23 683.044 L1389.67 683.044 L1389.11 683.044 L1388.55 683.044 L1387.99 683.044 L1387.43 683.044 L1386.87 683.044 L1386.31 683.044 L1385.76 683.044 L1385.2 683.044 L1384.64 683.044 L1384.08 683.044 L1383.52 683.044 L1382.96 683.044 L1382.4 683.044 L1381.84 683.044 L1381.28 683.044 L1380.72 683.044 L1380.16 683.044 L1379.6 683.044 L1379.04 683.044 L1378.49 683.044 L1377.93 683.044 L1377.37 683.044 L1376.81 683.044 L1376.25 683.044 L1375.69 683.044 L1375.13 683.044 L1374.57 683.044 L1374.01 683.044 L1373.45 683.044 L1372.89 683.044 L1372.33 683.044 L1371.77 683.044 L1371.21 683.044 L1370.66 683.044 L1370.1 683.044 L1369.54 683.044 L1368.98 683.044 L1368.42 683.044 L1367.86 683.044 L1367.3 683.044 L1366.74 683.044 L1366.18 683.044 L1365.62 683.044 L1365.06 683.044 L1364.5 683.044 L1363.94 683.044 L1363.39 683.044 L1362.83 683.044 L1362.27 683.044 L1361.71 683.044 L1361.15 683.044 L1360.59 683.044 L1360.03 683.044 L1359.47 683.044 L1358.91 683.044 L1358.35 683.044 L1357.79 683.044 L1357.23 683.044 L1356.67 683.044 L1356.12 683.044 L1355.56 683.044 L1355 683.044 L1354.44 683.044 L1353.88 683.044 L1353.32 683.044 L1352.76 683.044 L1352.2 683.044 L1351.64 683.044 L1351.08 683.044 L1350.52 683.044 L1349.96 683.044 L1349.4 683.044 L1348.84 683.044 L1348.29 683.044 L1347.73 683.044 L1347.17 683.044 L1346.61 683.044 L1346.05 683.044 L1345.49 683.044 L1344.93 683.044 L1344.37 683.044 L1343.81 683.044 L1343.25 683.044 L1342.69 683.044 L1342.13 683.044 L1341.57 683.044 L1341.02 683.044 L1340.46 683.044 L1339.9 683.044 L1339.34 683.044 L1338.78 683.044 L1338.22 683.044 L1337.66 683.044 L1337.1 683.044 L1336.54 683.044 L1335.98 683.044 L1335.42 683.044 L1334.86 683.044 L1334.3 683.044 L1333.75 683.044 L1333.19 683.044 L1332.63 683.044 L1332.07 683.044 L1331.51 683.044 L1330.95 683.044 L1330.39 683.044 L1329.83 683.044 L1329.27 683.044 L1328.71 683.044 L1328.15 683.044 L1327.59 683.044 L1327.03 683.044 L1326.47 683.044 L1325.92 683.044 L1325.36 683.044 L1324.8 683.044 L1324.24 683.044 L1323.68 683.044 L1323.12 683.044 L1322.56 683.044 L1322 683.044 L1321.44 683.044 L1320.88 683.044 L1320.32 683.044 L1319.76 683.044 L1319.2 683.044 L1318.65 683.044 L1318.09 683.044 L1317.53 683.044 L1316.97 683.044 L1316.41 683.044 L1315.85 683.044 L1315.29 683.044 L1314.73 683.044 L1314.17 683.044 L1313.61 683.044 L1313.05 683.044 L1312.49 683.044 L1311.93 683.044 L1311.38 683.044 L1310.82 683.044 L1310.26 683.044 L1309.7 683.044 L1309.14 683.044 L1308.58 683.044 L1308.02 683.044 L1307.46 683.044 L1306.9 683.044 L1306.34 683.044 L1305.78 683.044 L1305.22 683.044 L1304.66 683.044 L1304.1 683.044 L1303.55 683.044 L1302.99 683.044 L1302.43 683.044 L1301.87 683.044 L1301.31 683.044 L1300.75 683.044 L1300.19 683.044 L1299.63 683.044 L1299.07 683.044 L1298.51 683.044 L1297.95 683.044 L1297.39 683.044 L1296.83 683.044 L1296.28 683.044 L1295.72 683.044 L1295.16 683.044 L1294.6 683.044 L1294.04 683.044 L1293.48 683.044 L1292.92 683.044 L1292.36 683.044 L1291.8 683.044 L1291.24 683.044 L1290.68 683.044 L1290.12 683.044 L1289.56 683.044 L1289 683.044 L1288.45 683.044 L1287.89 683.044 L1287.33 683.044 L1286.77 683.044 L1286.21 683.044 L1285.65 683.044 L1285.09 683.044 L1284.53 683.044 L1283.97 683.044 L1283.41 683.044 L1282.85 683.044 L1282.29 683.044 L1281.73 683.044 L1281.18 683.044 L1280.62 683.044 L1280.06 683.044 L1279.5 683.044 L1278.94 683.044 L1278.38 683.044 L1277.82 683.044 L1277.26 683.044 L1276.7 683.044 L1276.14 683.044 L1275.58 683.044 L1275.02 683.044 L1274.46 683.044 L1273.91 683.044 L1273.35 683.044 L1272.79 683.044 L1272.23 683.044 L1271.67 683.044 L1271.11 683.044 L1270.55 683.044 L1269.99 683.044 L1269.43 683.044 L1268.87 683.044 L1268.31 683.044 L1267.75 683.044 L1267.19 683.044 L1266.63 683.044 L1266.08 683.044 L1265.52 683.044 L1264.96 683.044 L1264.4 683.044 L1263.84 683.044 L1263.28 683.044 L1262.72 683.044 L1262.16 683.044 L1261.6 683.044 L1261.04 683.044 L1260.48 683.044 L1259.92 683.044 L1259.36 683.044 L1258.81 683.044 L1258.25 683.044 L1257.69 683.044 L1257.13 683.044 L1256.57 683.044 L1256.01 683.044 L1255.45 683.044 L1254.89 683.044 L1254.33 683.044 L1253.77 683.044 L1253.21 683.044 L1252.65 683.044 L1252.09 683.044 L1251.54 683.044 L1250.98 683.044 L1250.42 683.044 L1249.86 683.044 L1249.3 683.044 L1248.74 683.044 L1248.18 683.044 L1247.62 683.044 L1247.06 683.044 L1246.5 683.044 L1245.94 683.044 L1245.38 683.044 L1244.82 683.044 L1244.26 683.044 L1243.71 683.044 L1243.15 683.044 L1242.59 683.044 L1242.03 683.044 L1241.47 683.044 L1240.91 683.044 L1240.35 683.044 L1239.79 683.044 L1239.23 683.044 L1238.67 683.044 L1238.11 683.044 L1237.55 683.044 L1236.99 683.044 L1236.44 683.044 L1235.88 683.044 L1235.32 683.044 L1234.76 683.044 L1234.2 683.044 L1233.64 683.044 L1233.08 683.044 L1232.52 683.044 L1231.96 683.044 L1231.4 683.044 L1230.84 683.044 L1230.28 683.044 L1229.72 683.044 L1229.17 683.044 L1228.61 683.044 L1228.05 683.044 L1227.49 683.044 L1226.93 683.044 L1226.37 683.044 L1225.81 683.044 L1225.25 683.044 L1224.69 683.044 L1224.13 683.044 L1223.57 683.044 L1223.01 683.044 L1222.45 683.044 L1221.89 683.044 L1221.34 683.044 L1220.78 683.044 L1220.22 683.044 L1219.66 683.044 L1219.1 683.044 L1218.54 683.044 L1217.98 683.044 L1217.42 683.044 L1216.86 683.044 L1216.3 683.044 L1215.74 683.044 L1215.18 683.044 L1214.62 683.044 L1214.07 683.044 L1213.51 683.044 L1212.95 683.044 L1212.39 683.044 L1211.83 683.044 L1211.27 683.044 L1210.71 683.044 L1210.15 683.044 L1209.59 683.044 L1209.03 683.044 L1208.47 683.044 L1207.91 683.044 L1207.35 683.044 L1206.8 683.044 L1206.24 683.044 L1205.68 683.044 L1205.12 683.044 L1204.56 683.044 L1204 683.044 L1203.44 683.044 L1202.88 683.044 L1202.32 683.044 L1201.76 683.044 L1201.2 683.044 L1200.64 683.044 L1200.08 683.044 L1199.52 683.044 L1198.97 683.044 L1198.41 683.044 L1197.85 683.044 L1197.29 683.044 L1196.73 683.044 L1196.17 683.044 L1195.61 683.044 L1195.05 683.044 L1194.49 683.044 L1193.93 683.044 L1193.37 683.044 L1192.81 683.044 L1192.25 683.044 L1191.7 683.044 L1191.14 683.044 L1190.58 683.044 L1190.02 683.044 L1189.46 683.044 L1188.9 683.044 L1188.34 683.044 L1187.78 683.044 L1187.22 683.044 L1186.66 683.044 L1186.1 683.044 L1185.54 683.044 L1184.98 683.044 L1184.43 683.044 L1183.87 683.044 L1183.31 683.044 L1182.75 683.044 L1182.19 683.044 L1181.63 683.044 L1181.07 683.044 L1180.51 683.044 L1179.95 683.044 L1179.39 683.044 L1178.83 683.044 L1178.27 683.044 L1177.71 683.044 L1177.15 683.044 L1176.6 683.044 L1176.04 683.044 L1175.48 683.044 L1174.92 683.044 L1174.36 683.044 L1173.8 683.044 L1173.24 683.044 L1172.68 683.044 L1172.12 683.044 L1171.56 683.044 L1171 683.044 L1170.44 683.044 L1169.88 683.044 L1169.33 683.044 L1168.77 683.044 L1168.21 683.044 L1167.65 683.044 L1167.09 683.044 L1166.53 683.044 L1165.97 683.044 L1165.41 683.044 L1164.85 683.044 L1164.29 683.044 L1163.73 683.044 L1163.17 683.044 L1162.61 683.044 L1162.05 683.044 L1161.5 683.044 L1160.94 683.044 L1160.38 683.044 L1159.82 683.044 L1159.26 683.044 L1158.7 683.044 L1158.14 683.044 L1157.58 683.044 L1157.02 683.044 L1156.46 683.044 L1155.9 683.044 L1155.34 683.044 L1154.78 683.044 L1154.23 683.044 L1153.67 683.044 L1153.11 683.044 L1152.55 683.044 L1151.99 683.044 L1151.43 683.044 L1150.87 683.044 L1150.31 683.044 L1149.75 683.044 L1149.19 683.044 L1148.63 683.044 L1148.07 683.044 L1147.51 683.044 L1146.96 683.044 L1146.4 683.044 L1145.84 683.044 L1145.28 683.044 L1144.72 683.044 L1144.16 683.044 L1143.6 683.044 L1143.04 683.044 L1142.48 683.044 L1141.92 683.044 L1141.36 683.044 L1140.8 683.044 L1140.24 683.044 L1139.68 683.044 L1139.13 683.044 L1138.57 683.044 L1138.01 683.044 L1137.45 683.044 L1136.89 683.044 L1136.33 683.044 L1135.77 683.044 L1135.21 683.044 L1134.65 683.044 L1134.09 683.044 L1133.53 683.044 L1132.97 683.044 L1132.41 683.044 L1131.86 683.044 L1131.3 683.044 L1130.74 683.044 L1130.18 683.044 L1129.62 683.044 L1129.06 683.044 L1128.5 683.044 L1127.94 683.044 L1127.38 683.044 L1126.82 683.044 L1126.26 683.044 L1125.7 683.044 L1125.14 683.044 L1124.59 683.044 L1124.03 683.044 L1123.47 683.044 L1122.91 683.044 L1122.35 683.044 L1121.79 683.044 L1121.23 683.044 L1120.67 683.044 L1120.11 683.044 L1119.55 683.044 L1118.99 683.044 L1118.43 683.044 L1117.87 683.044 L1117.31 683.044 L1116.76 683.044 L1116.2 683.044 L1115.64 683.044 L1115.08 683.044 L1114.52 683.044 L1113.96 683.044 L1113.4 683.044 L1112.84 683.044 L1112.28 683.044 L1111.72 683.044 L1111.16 683.044 L1110.6 683.044 L1110.04 683.044 L1109.49 683.044 L1108.93 683.044 L1108.37 683.044 L1107.81 683.044 L1107.25 683.044 L1106.69 683.044 L1106.13 683.044 L1105.57 683.044 L1105.01 683.044 L1104.45 683.044 L1103.89 683.044 L1103.33 683.044 L1102.77 683.044 L1102.22 683.044 L1101.66 683.044 L1101.1 683.044 L1100.54 683.044 L1099.98 683.044 L1099.42 683.044 L1098.86 683.044 L1098.3 683.044 L1097.74 683.044 L1097.18 683.044 L1096.62 683.044 L1096.06 683.044 L1095.5 683.044 L1094.94 683.044 L1094.39 683.044 L1093.83 683.044 L1093.27 683.044 L1092.71 683.044 L1092.15 683.044 L1091.59 683.044 L1091.03 683.044 L1090.47 683.044 L1089.91 683.044 L1089.35 683.044 L1088.79 683.044 L1088.23 683.044 L1087.67 683.044 L1087.12 683.044 L1086.56 683.044 L1086 683.044 L1085.44 683.044 L1084.88 683.044 L1084.32 683.044 L1083.76 683.044 L1083.2 683.044 L1082.64 683.044 L1082.08 683.044 L1081.52 683.044 L1080.96 683.044 L1080.4 683.044 L1079.85 683.044 L1079.29 683.044 L1078.73 683.044 L1078.17 683.044 L1077.61 683.044 L1077.05 683.044 L1076.49 683.044 L1075.93 683.044 L1075.37 683.044 L1074.81 683.044 L1074.25 683.044 L1073.69 683.044 L1073.13 683.044 L1072.57 683.044 L1072.02 683.044 L1071.46 683.044 L1070.9 683.044 L1070.34 683.044 L1069.78 683.044 L1069.22 683.044 L1068.66 683.044 L1068.1 683.044 L1067.54 683.044 L1066.98 683.044 L1066.42 683.044 L1065.86 683.044 L1065.3 683.044 L1064.75 683.044 L1064.19 683.044 L1063.63 683.044 L1063.07 683.044 L1062.51 683.044 L1061.95 683.044 L1061.39 683.044 L1060.83 683.044 L1060.27 683.044 L1059.71 683.044 L1059.15 683.044 L1058.59 683.044 L1058.03 683.044 L1057.48 683.044 L1056.92 683.044 L1056.36 683.044 L1055.8 683.044 L1055.24 683.044 L1054.68 683.044 L1054.12 683.044 L1053.56 683.044 L1053 683.044 L1052.44 683.044 L1051.88 683.044 L1051.32 683.044 L1050.76 683.044 L1050.2 683.044 L1049.65 683.044 L1049.09 683.044 L1048.53 683.044 L1047.97 683.044 L1047.41 683.044 L1046.85 683.044 L1046.29 683.044 L1045.73 683.044 L1045.17 683.044 L1044.61 683.044 L1044.05 683.044 L1043.49 683.044 L1042.93 683.044 L1042.38 683.044 L1041.82 683.044 L1041.26 683.044 L1040.7 683.044 L1040.14 683.044 L1039.58 683.044 L1039.02 683.044 L1038.46 683.044 L1037.9 683.044 L1037.34 683.044 L1036.78 683.044 L1036.22 683.044 L1035.66 683.044 L1035.1 683.044 L1034.55 683.044 L1033.99 683.044 L1033.43 683.044 L1032.87 683.044 L1032.31 683.044 L1031.75 683.044 L1031.19 683.044 L1030.63 683.044 L1030.07 683.044 L1029.51 683.044 L1028.95 683.044 L1028.39 683.044 L1027.83 683.044 L1027.28 683.044 L1026.72 683.044 L1026.16 683.044 L1025.6 683.044 L1025.04 683.044 L1024.48 683.044 L1023.92 683.044 L1023.36 683.044 L1022.8 683.044 L1022.24 683.044 L1021.68 683.044 L1021.12 683.044 L1020.56 683.044 L1020.01 683.044 L1019.45 683.044 L1018.89 683.044 L1018.33 683.044 L1017.77 683.044 L1017.21 683.044 L1016.65 683.044 L1016.09 683.044 L1015.53 683.044 L1014.97 683.044 L1014.41 683.044 L1013.85 683.044 L1013.29 683.044 L1012.73 683.044 L1012.18 683.044 L1011.62 683.044 L1011.06 683.044 L1010.5 683.044 L1009.94 683.044 L1009.38 683.044 L1008.82 683.044 L1008.26 683.044 L1007.7 683.044 L1007.14 683.044 L1006.58 683.044 L1006.02 683.044 L1005.46 683.044 L1004.91 683.044 L1004.35 683.044 L1003.79 683.044 L1003.23 683.044 L1002.67 683.044 L1002.11 683.044 L1001.55 683.044 L1000.99 683.044 L1000.43 683.044 L999.872 683.044 L999.313 683.044 L998.754 683.044 L998.194 683.044 L997.635 683.044 L997.076 683.044 L996.517 683.044 L995.957 683.044 L995.398 683.044 L994.839 683.044 L994.28 683.044 L993.72 683.044 L993.161 683.044 L992.602 683.044 L992.043 683.044 L991.483 683.044 L990.924 683.044 L990.365 683.044 L989.806 683.044 L989.246 683.044 L988.687 683.044 L988.128 683.044 L987.569 683.044 L987.009 683.044 L986.45 683.044 L985.891 683.044 L985.332 683.044 L984.772 683.044 L984.213 683.044 L983.654 683.044 L983.095 683.044 L982.535 683.044 L981.976 683.044 L981.417 683.044 L980.858 683.044 L980.298 683.044 L979.739 683.044 L979.18 683.044 L978.621 683.044 L978.061 683.044 L977.502 683.044 L976.943 683.044 L976.384 683.044 L975.824 683.044 L975.265 683.044 L974.706 683.044 L974.147 683.044 L973.587 683.044 L973.028 683.044 L972.469 683.044 L971.91 683.044 L971.35 683.044 L970.791 683.044 L970.232 683.044 L969.673 683.044 L969.113 683.044 L968.554 683.044 L967.995 683.044 L967.436 683.044 L966.876 683.044 L966.317 683.044 L965.758 683.044 L965.199 683.044 L964.639 683.044 L964.08 683.044 L963.521 683.044 L962.962 683.044 L962.402 683.044 L961.843 683.044 L961.284 683.044 L960.725 683.044 L960.165 683.044 L959.606 683.044 L959.047 683.044 L958.488 683.044 L957.928 683.044 L957.369 683.044 L956.81 683.044 L956.251 683.044 L955.691 683.044 L955.132 683.044 L954.573 683.044 L954.014 683.044 L953.454 683.044 L952.895 683.044 L952.336 683.044 L951.777 683.044 L951.217 683.044 L950.658 683.044 L950.099 683.044 L949.54 683.044 L948.98 683.044 L948.421 683.044 L947.862 683.044 L947.303 683.044 L946.743 683.044 L946.184 683.044 L945.625 683.044 L945.066 683.044 L944.506 683.044 L943.947 683.044 L943.388 683.044 L942.829 683.044 L942.269 683.044 L941.71 683.044 L941.151 683.044 L940.592 683.044 L940.032 683.044 L939.473 683.044 L938.914 683.044 L938.355 683.044 L937.795 683.044 L937.236 683.044 L936.677 683.044 L936.118 683.044 L935.558 683.044 L934.999 683.044 L934.44 683.044 L933.881 683.044 L933.321 683.044 L932.762 683.044 L932.203 683.044 L931.644 683.044 L931.084 683.044 L930.525 683.044 L929.966 683.044 L929.406 683.044 L928.847 683.044 L928.288 683.044 L927.729 683.044 L927.169 683.044 L926.61 683.044 L926.051 683.044 L925.492 683.044 L924.932 683.044 L924.373 683.044 L923.814 683.044 L923.255 683.044 L922.695 683.044 L922.136 683.044 L921.577 683.044 L921.018 683.044 L920.458 683.044 L919.899 683.044 L919.34 683.044 L918.781 683.044 L918.221 683.044 L917.662 683.044 L917.103 683.044 L916.544 683.044 L915.984 683.044 L915.425 683.044 L914.866 683.044 L914.307 683.044 L913.747 683.044 L913.188 683.044 L912.629 683.044 L912.07 683.044 L911.51 683.044 L910.951 683.044 L910.392 683.044 L909.833 683.044 L909.273 683.044 L908.714 683.044 L908.155 683.044 L907.596 683.044 L907.036 683.044 L906.477 683.044 L905.918 683.044 L905.359 683.044 L904.799 683.044 L904.24 683.044 L903.681 683.044 L903.122 683.044 L902.562 683.044 L902.003 683.044 L901.444 683.044 L900.885 683.044 L900.325 683.044 L899.766 683.044 L899.207 683.044 L898.648 683.044 L898.088 683.044 L897.529 683.044 L896.97 683.044 L896.411 683.044 L895.851 683.044 L895.292 683.044 L894.733 683.044 L894.174 683.044 L893.614 683.044 L893.055 683.044 L892.496 683.044 L891.937 683.044 L891.377 683.044 L890.818 683.044 L890.259 683.044 L889.7 683.044 L889.14 683.044 L888.581 683.044 L888.022 683.044 L887.463 683.044 L886.903 683.044 L886.344 683.044 L885.785 683.044 L885.226 683.044 L884.666 683.044 L884.107 683.044 L883.548 683.044 L882.989 683.044 L882.429 683.044 L881.87 683.044 L881.311 683.044 L880.752 683.044 L880.192 683.044 L879.633 683.044 L879.074 683.044 L878.515 683.044 L877.955 683.044 L877.396 683.044 L876.837 683.044 L876.278 683.044 L875.718 683.044 L875.159 683.044 L874.6 683.044 L874.041 683.044 L873.481 683.044 L872.922 683.044 L872.363 683.044 L871.804 683.044 L871.244 683.044 L870.685 683.044 L870.126 683.044 L869.567 683.044 L869.007 683.044 L868.448 683.044 L867.889 683.044 L867.33 683.044 L866.77 683.044 L866.211 683.044 L865.652 683.044 L865.093 683.044 L864.533 683.044 L863.974 683.044 L863.415 683.044 L862.856 683.044 L862.296 683.044 L861.737 683.044 L861.178 683.044 L860.619 683.044 L860.059 683.044 L859.5 683.044 L858.941 683.044 L858.382 683.044 L857.822 683.044 L857.263 683.044 L856.704 683.044 L856.145 683.044 L855.585 683.044 L855.026 683.044 L854.467 683.044 L853.908 683.044 L853.348 683.044 L852.789 683.044 L852.23 683.044 L851.671 683.044 L851.111 683.044 L850.552 683.044 L849.993 683.044 L849.434 683.044 L848.874 683.044 L848.315 683.044 L847.756 683.044 L847.197 683.044 L846.637 683.044 L846.078 683.044 L845.519 683.044 L844.96 683.044 L844.4 683.044 L843.841 683.044 L843.282 683.044 L842.723 683.044 L842.163 683.044 L841.604 683.044 L841.045 683.044 L840.486 683.044 L839.926 683.044 L839.367 683.044 L838.808 683.044 L838.249 683.044 L837.689 683.044 L837.13 683.044 L836.571 683.044 L836.012 683.044 L835.452 683.044 L834.893 683.044 L834.334 683.044 L833.775 683.044 L833.215 683.044 L832.656 683.044 L832.097 683.044 L831.538 683.044 L830.978 683.044 L830.419 683.044 L829.86 683.044 L829.301 683.044 L828.741 683.044 L828.182 683.044 L827.623 683.044 L827.064 683.044 L826.504 683.044 L825.945 683.044 L825.386 683.044 L824.827 683.044 L824.267 683.044 L823.708 683.044 L823.149 683.044 L822.59 683.044 L822.03 683.044 L821.471 683.044 L820.912 683.044 L820.353 683.044 L819.793 683.044 L819.234 683.044 L818.675 683.044 L818.116 683.044 L817.556 683.044 L816.997 683.044 L816.438 683.044 L815.879 683.044 L815.319 683.044 L814.76 683.044 L814.201 683.044 L813.642 683.044 L813.082 683.044 L812.523 683.044 L811.964 683.044 L811.405 683.044 L810.845 683.044 L810.286 683.044 L809.727 683.044 L809.168 683.044 L808.608 683.044 L808.049 683.044 L807.49 683.044 L806.931 683.044 L806.371 683.044 L805.812 683.044 L805.253 683.044 L804.693 683.044 L804.134 683.044 L803.575 683.044 L803.016 683.044 L802.456 683.044 L801.897 683.044 L801.338 683.044 L800.779 683.044 L800.219 683.044 L799.66 683.044 L799.101 683.044 L798.542 683.044 L797.982 683.044 L797.423 683.044 L796.864 683.044 L796.305 683.044 L795.745 683.044 L795.186 683.044 L794.627 683.044 L794.068 683.044 L793.508 683.044 L792.949 683.044 L792.39 683.044 L791.831 683.044 L791.271 683.044 L790.712 683.044 L790.153 683.044 L789.594 683.044 L789.034 683.044 L788.475 683.044 L787.916 683.044 L787.357 683.044 L786.797 683.044 L786.238 683.044 L785.679 683.044 L785.12 683.044 L784.56 683.044 L784.001 683.044 L783.442 683.044 L782.883 683.044 L782.323 683.044 L781.764 683.044 L781.205 683.044 L780.646 683.044 L780.086 683.044 L779.527 683.044 L778.968 683.044 L778.409 683.044 L777.849 683.044 L777.29 683.044 L776.731 683.044 L776.172 683.044 L775.612 683.044 L775.053 683.044 L774.494 683.044 L773.935 683.044 L773.375 683.044 L772.816 683.044 L772.257 683.044 L771.698 683.044 L771.138 683.044 L770.579 683.044 L770.02 683.044 L769.461 683.044 L768.901 683.044 L768.342 683.044 L767.783 683.044 L767.224 683.044 L766.664 683.044 L766.105 683.044 L765.546 683.044 L764.987 683.044 L764.427 683.044 L763.868 683.044 L763.309 683.044 L762.75 683.044 L762.19 683.044 L761.631 683.044 L761.072 683.044 L760.513 683.044 L759.953 683.044 L759.394 683.044 L758.835 683.044 L758.276 683.044 L757.716 683.044 L757.157 683.044 L756.598 683.044 L756.039 683.044 L755.479 683.044 L754.92 683.044 L754.361 683.044 L753.802 683.044 L753.242 683.044 L752.683 683.044 L752.124 683.044 L751.565 683.044 L751.005 683.044 L750.446 683.044 L749.887 683.044 L749.328 683.044 L748.768 683.044 L748.209 683.044 L747.65 683.044 L747.091 683.044 L746.531 683.044 L745.972 683.044 L745.413 683.044 L744.854 683.044 L744.294 683.044 L743.735 683.044 L743.176 683.044 L742.617 683.044 L742.057 683.044 L741.498 683.044 L740.939 683.044 L740.38 683.044 L739.82 683.044 L739.261 683.044 L738.702 683.044 L738.143 683.044 L737.583 683.044 L737.024 683.044 L736.465 683.044 L735.906 683.044 L735.346 683.044 L734.787 683.044 L734.228 683.044 L733.669 683.044 L733.109 683.044 L732.55 683.044 L731.991 683.044 L731.432 683.044 L730.872 683.044 L730.313 683.044 L729.754 683.044 L729.195 683.044 L728.635 683.044 L728.076 683.044 L727.517 683.044 L726.958 683.044 L726.398 683.044 L725.839 683.044 L725.28 683.044 L724.721 683.044 L724.161 683.044 L723.602 683.044 L723.043 683.044 L722.484 683.044 L721.924 683.044 L721.365 683.044 L720.806 683.044 L720.247 683.044  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip053)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.936 720.806,683.936 721.365,683.936 721.924,683.936 722.484,683.936 723.043,683.936 723.602,683.936 724.161,683.936 724.721,683.936 725.28,683.936 725.839,683.936 726.398,683.936 726.958,683.936 727.517,683.936 728.076,683.936 728.635,683.936 729.195,683.936 729.754,683.936 730.313,683.936 730.872,683.936 731.432,683.936 731.991,683.936 732.55,683.936 733.109,683.936 733.669,683.936 734.228,683.936 734.787,683.936 735.346,683.936 735.906,683.936 736.465,683.936 737.024,683.936 737.583,683.936 738.143,683.936 738.702,683.936 739.261,683.936 739.82,683.936 740.38,683.936 740.939,683.936 741.498,683.936 742.057,683.936 742.617,683.936 743.176,683.936 743.735,683.936 744.294,683.936 744.854,683.936 745.413,683.936 745.972,683.936 746.531,683.936 747.091,683.936 747.65,683.936 748.209,683.936 748.768,683.936 749.328,683.936 749.887,683.936 750.446,683.936 751.005,683.936 751.565,683.936 752.124,683.936 752.683,683.936 753.242,683.936 753.802,683.936 754.361,683.936 754.92,683.936 755.479,683.936 756.039,683.936 756.598,683.936 757.157,683.936 757.716,683.936 758.276,683.936 758.835,683.936 759.394,683.936 759.953,683.936 760.513,683.936 761.072,683.936 761.631,683.936 762.19,683.936 762.75,683.936 763.309,683.936 763.868,683.936 764.427,683.936 764.987,683.936 765.546,683.936 766.105,683.936 766.664,683.936 767.224,683.936 767.783,683.936 768.342,683.936 768.901,683.936 769.461,683.936 770.02,683.936 770.579,683.936 771.138,683.936 771.698,683.936 772.257,683.936 772.816,683.936 773.375,683.936 773.935,683.936 774.494,683.936 775.053,683.936 775.612,683.936 776.172,683.936 776.731,683.936 777.29,683.936 777.849,683.936 778.409,683.936 778.968,683.936 779.527,683.936 780.086,683.936 780.646,683.936 781.205,683.936 781.764,683.936 782.323,683.936 782.883,683.936 783.442,683.936 784.001,683.936 784.56,683.936 785.12,683.936 785.679,683.936 786.238,683.936 786.797,683.936 787.357,683.936 787.916,683.936 788.475,683.936 789.034,683.936 789.594,683.936 790.153,683.936 790.712,683.936 791.271,683.936 791.831,683.936 792.39,683.936 792.949,683.936 793.508,683.936 794.068,683.936 794.627,683.936 795.186,683.936 795.745,683.936 796.305,683.936 796.864,683.936 797.423,683.936 797.982,683.936 798.542,683.936 799.101,683.936 799.66,683.936 800.219,683.936 800.779,683.936 801.338,683.936 801.897,683.936 802.456,683.936 803.016,683.936 803.575,683.936 804.134,683.936 804.693,683.936 805.253,683.936 805.812,683.936 806.371,683.936 806.931,683.936 807.49,683.936 808.049,683.936 808.608,683.936 809.168,683.936 809.727,683.936 810.286,683.936 810.845,683.936 811.405,683.936 811.964,683.936 812.523,683.936 813.082,683.936 813.642,683.936 814.201,683.936 814.76,683.936 815.319,683.936 815.879,683.936 816.438,683.936 816.997,683.936 817.556,683.936 818.116,683.936 818.675,683.936 819.234,683.936 819.793,683.936 820.353,683.936 820.912,683.936 821.471,683.936 822.03,683.936 822.59,683.936 823.149,683.936 823.708,683.936 824.267,683.936 824.827,683.936 825.386,683.936 825.945,683.936 826.504,683.936 827.064,683.936 827.623,683.936 828.182,683.936 828.741,683.936 829.301,683.936 829.86,683.936 830.419,683.936 830.978,683.936 831.538,683.936 832.097,683.936 832.656,683.936 833.215,683.936 833.775,683.936 834.334,683.936 834.893,683.936 835.452,683.936 836.012,683.936 836.571,683.936 837.13,683.936 837.689,683.936 838.249,683.936 838.808,683.936 839.367,683.936 839.926,683.936 840.486,683.936 841.045,683.936 841.604,683.936 842.163,683.936 842.723,683.936 843.282,683.936 843.841,683.936 844.4,683.936 844.96,683.936 845.519,683.936 846.078,683.936 846.637,683.936 847.197,683.936 847.756,683.936 848.315,683.936 848.874,683.936 849.434,683.936 849.993,683.936 850.552,683.936 851.111,683.936 851.671,683.936 852.23,683.936 852.789,683.936 853.348,683.936 853.908,683.936 854.467,683.936 855.026,683.936 855.585,683.936 856.145,683.936 856.704,683.936 857.263,683.936 857.822,683.936 858.382,683.936 858.941,683.936 859.5,683.936 860.059,683.936 860.619,683.936 861.178,683.936 861.737,683.936 862.296,683.936 862.856,683.936 863.415,683.936 863.974,683.936 864.533,683.936 865.093,683.936 865.652,683.936 866.211,683.936 866.77,683.936 867.33,683.936 867.889,683.936 868.448,683.936 869.007,683.936 869.567,683.936 870.126,683.936 870.685,683.936 871.244,683.936 871.804,683.936 872.363,683.936 872.922,683.936 873.481,683.936 874.041,683.936 874.6,683.936 875.159,683.936 875.718,683.936 876.278,683.936 876.837,683.936 877.396,683.936 877.955,683.936 878.515,683.936 879.074,683.936 879.633,683.936 880.192,683.936 880.752,683.936 881.311,683.936 881.87,683.936 882.429,683.936 882.989,683.936 883.548,683.936 884.107,683.936 884.666,683.936 885.226,683.936 885.785,683.936 886.344,683.936 886.903,683.936 887.463,683.936 888.022,683.936 888.581,683.936 889.14,683.936 889.7,683.936 890.259,683.936 890.818,683.936 891.377,683.936 891.937,683.936 892.496,683.936 893.055,683.936 893.614,683.936 894.174,683.936 894.733,683.936 895.292,683.936 895.851,683.936 896.411,683.936 896.97,683.936 897.529,683.936 898.088,683.936 898.648,683.936 899.207,683.936 899.766,683.936 900.325,683.936 900.885,683.936 901.444,683.936 902.003,683.936 902.562,683.936 903.122,683.936 903.681,683.936 904.24,683.936 904.799,683.936 905.359,683.936 905.918,683.936 906.477,683.936 907.036,683.936 907.596,683.936 908.155,683.936 908.714,683.936 909.273,683.936 909.833,683.936 910.392,683.936 910.951,683.936 911.51,683.936 912.07,683.936 912.629,683.936 913.188,683.936 913.747,683.936 914.307,683.936 914.866,683.936 915.425,683.936 915.984,683.936 916.544,683.936 917.103,683.936 917.662,683.936 918.221,683.936 918.781,683.936 919.34,683.936 919.899,683.936 920.458,683.936 921.018,683.936 921.577,683.936 922.136,683.936 922.695,683.936 923.255,683.936 923.814,683.936 924.373,683.936 924.932,683.936 925.492,683.936 926.051,683.936 926.61,683.936 927.169,683.936 927.729,683.936 928.288,683.936 928.847,683.936 929.406,683.936 929.966,683.936 930.525,683.936 931.084,683.936 931.644,683.936 932.203,683.936 932.762,683.936 933.321,683.936 933.881,683.936 934.44,683.936 934.999,683.936 935.558,683.936 936.118,683.936 936.677,683.936 937.236,683.936 937.795,683.936 938.355,683.936 938.914,683.936 939.473,683.936 940.032,683.936 940.592,683.936 941.151,683.936 941.71,683.936 942.269,683.936 942.829,683.936 943.388,683.936 943.947,683.936 944.506,683.936 945.066,683.936 945.625,683.936 946.184,683.936 946.743,683.936 947.303,683.936 947.862,683.936 948.421,683.936 948.98,683.936 949.54,683.936 950.099,683.936 950.658,683.936 951.217,683.936 951.777,683.936 952.336,683.936 952.895,683.936 953.454,683.936 954.014,683.936 954.573,683.936 955.132,683.936 955.691,683.936 956.251,683.936 956.81,683.936 957.369,683.936 957.928,683.936 958.488,683.936 959.047,683.936 959.606,683.936 960.165,683.936 960.725,683.936 961.284,683.936 961.843,683.936 962.402,683.936 962.962,683.936 963.521,683.936 964.08,683.936 964.639,683.936 965.199,683.936 965.758,683.936 966.317,683.936 966.876,683.936 967.436,683.936 967.995,683.936 968.554,683.936 969.113,683.936 969.673,683.936 970.232,683.936 970.791,683.936 971.35,683.936 971.91,683.936 972.469,683.936 973.028,683.936 973.587,683.936 974.147,683.936 974.706,683.936 975.265,683.936 975.824,683.936 976.384,683.936 976.943,683.936 977.502,683.936 978.061,683.936 978.621,683.936 979.18,683.936 979.739,683.936 980.298,683.936 980.858,683.936 981.417,683.936 981.976,683.936 982.535,683.936 983.095,683.936 983.654,683.936 984.213,683.936 984.772,683.936 985.332,683.936 985.891,683.936 986.45,683.936 987.009,683.936 987.569,683.936 988.128,683.936 988.687,683.936 989.246,683.936 989.806,683.936 990.365,683.936 990.924,683.936 991.483,683.936 992.043,683.936 992.602,683.936 993.161,683.936 993.72,683.936 994.28,683.936 994.839,683.936 995.398,683.936 995.957,683.936 996.517,683.936 997.076,683.936 997.635,683.936 998.194,683.936 998.754,683.936 999.313,683.936 999.872,683.936 1000.43,683.936 1000.99,683.936 1001.55,683.936 1002.11,683.936 1002.67,683.936 1003.23,683.936 1003.79,683.936 1004.35,683.936 1004.91,683.936 1005.46,683.936 1006.02,683.936 1006.58,683.936 1007.14,683.936 1007.7,683.936 1008.26,683.936 1008.82,683.936 1009.38,683.936 1009.94,683.936 1010.5,683.936 1011.06,683.936 1011.62,683.936 1012.18,683.936 1012.73,683.936 1013.29,683.936 1013.85,683.936 1014.41,683.936 1014.97,683.936 1015.53,683.936 1016.09,683.936 1016.65,683.936 1017.21,683.936 1017.77,683.936 1018.33,683.936 1018.89,683.936 1019.45,683.936 1020.01,683.936 1020.56,683.936 1021.12,683.936 1021.68,683.936 1022.24,683.936 1022.8,683.936 1023.36,683.936 1023.92,683.936 1024.48,683.936 1025.04,683.936 1025.6,683.936 1026.16,683.936 1026.72,683.936 1027.28,683.936 1027.83,683.936 1028.39,683.936 1028.95,683.936 1029.51,683.936 1030.07,683.936 1030.63,683.936 1031.19,683.936 1031.75,683.936 1032.31,683.936 1032.87,683.936 1033.43,683.936 1033.99,683.936 1034.55,683.936 1035.1,683.936 1035.66,683.936 1036.22,683.936 1036.78,683.936 1037.34,683.936 1037.9,683.936 1038.46,683.936 1039.02,683.936 1039.58,683.936 1040.14,683.936 1040.7,683.936 1041.26,683.936 1041.82,683.936 1042.38,683.936 1042.93,683.936 1043.49,683.936 1044.05,683.936 1044.61,683.936 1045.17,683.936 1045.73,683.936 1046.29,683.936 1046.85,683.936 1047.41,683.936 1047.97,683.936 1048.53,683.936 1049.09,683.936 1049.65,683.936 1050.2,683.936 1050.76,683.936 1051.32,683.936 1051.88,683.936 1052.44,683.936 1053,683.936 1053.56,683.936 1054.12,683.936 1054.68,683.936 1055.24,683.936 1055.8,683.936 1056.36,683.936 1056.92,683.936 1057.48,683.936 1058.03,683.936 1058.59,683.936 1059.15,683.936 1059.71,683.936 1060.27,683.936 1060.83,683.936 1061.39,683.936 1061.95,683.936 1062.51,683.936 1063.07,683.936 1063.63,683.936 1064.19,683.936 1064.75,683.936 1065.3,683.936 1065.86,683.936 1066.42,683.936 1066.98,683.936 1067.54,683.936 1068.1,683.936 1068.66,683.936 1069.22,683.936 1069.78,683.936 1070.34,683.936 1070.9,683.936 1071.46,683.936 1072.02,683.936 1072.57,683.936 1073.13,683.936 1073.69,683.936 1074.25,683.936 1074.81,683.936 1075.37,683.936 1075.93,683.936 1076.49,683.936 1077.05,683.936 1077.61,683.936 1078.17,683.936 1078.73,683.936 1079.29,683.936 1079.85,683.936 1080.4,683.936 1080.96,683.936 1081.52,683.936 1082.08,683.936 1082.64,683.936 1083.2,683.936 1083.76,683.936 1084.32,683.936 1084.88,683.936 1085.44,683.936 1086,683.936 1086.56,683.936 1087.12,683.936 1087.67,683.936 1088.23,683.936 1088.79,683.936 1089.35,683.936 1089.91,683.936 1090.47,683.936 1091.03,683.936 1091.59,683.936 1092.15,683.936 1092.71,683.936 1093.27,683.936 1093.83,683.936 1094.39,683.936 1094.94,683.936 1095.5,683.936 1096.06,683.936 1096.62,683.936 1097.18,683.936 1097.74,683.936 1098.3,683.936 1098.86,683.936 1099.42,683.936 1099.98,683.936 1100.54,683.936 1101.1,683.936 1101.66,683.936 1102.22,683.936 1102.77,683.936 1103.33,683.936 1103.89,683.936 1104.45,683.936 1105.01,683.936 1105.57,683.936 1106.13,683.936 1106.69,683.936 1107.25,683.936 1107.81,683.936 1108.37,683.936 1108.93,683.936 1109.49,683.936 1110.04,683.936 1110.6,683.936 1111.16,683.936 1111.72,683.936 1112.28,683.936 1112.84,683.936 1113.4,683.936 1113.96,683.936 1114.52,683.936 1115.08,683.936 1115.64,683.936 1116.2,683.936 1116.76,683.936 1117.31,683.936 1117.87,683.936 1118.43,683.936 1118.99,683.936 1119.55,683.936 1120.11,683.936 1120.67,683.936 1121.23,683.936 1121.79,683.936 1122.35,683.936 1122.91,683.936 1123.47,683.936 1124.03,683.936 1124.59,683.936 1125.14,683.936 1125.7,683.936 1126.26,683.936 1126.82,683.936 1127.38,683.936 1127.94,683.936 1128.5,683.936 1129.06,683.936 1129.62,683.936 1130.18,683.936 1130.74,683.936 1131.3,683.936 1131.86,683.936 1132.41,683.936 1132.97,683.936 1133.53,683.936 1134.09,683.936 1134.65,683.936 1135.21,683.936 1135.77,683.936 1136.33,683.936 1136.89,683.936 1137.45,683.936 1138.01,683.936 1138.57,683.936 1139.13,683.936 1139.68,683.936 1140.24,683.936 1140.8,683.936 1141.36,683.936 1141.92,683.936 1142.48,683.936 1143.04,683.936 1143.6,683.936 1144.16,683.936 1144.72,683.936 1145.28,683.936 1145.84,683.936 1146.4,683.936 1146.96,683.936 1147.51,683.936 1148.07,683.936 1148.63,683.936 1149.19,683.936 1149.75,683.936 1150.31,683.936 1150.87,683.936 1151.43,683.936 1151.99,683.936 1152.55,683.936 1153.11,683.936 1153.67,683.936 1154.23,683.936 1154.78,683.936 1155.34,683.936 1155.9,683.936 1156.46,683.936 1157.02,683.936 1157.58,683.936 1158.14,683.936 1158.7,683.936 1159.26,683.936 1159.82,683.936 1160.38,683.936 1160.94,683.936 1161.5,683.936 1162.05,683.936 1162.61,683.936 1163.17,683.936 1163.73,683.936 1164.29,683.936 1164.85,683.936 1165.41,683.936 1165.97,683.936 1166.53,683.936 1167.09,683.936 1167.65,683.936 1168.21,683.936 1168.77,683.936 1169.33,683.936 1169.88,683.936 1170.44,683.936 1171,683.936 1171.56,683.936 1172.12,683.936 1172.68,683.936 1173.24,683.936 1173.8,683.936 1174.36,683.936 1174.92,683.936 1175.48,683.936 1176.04,683.936 1176.6,683.936 1177.15,683.936 1177.71,683.936 1178.27,683.936 1178.83,683.936 1179.39,683.936 1179.95,683.936 1180.51,683.936 1181.07,683.936 1181.63,683.936 1182.19,683.936 1182.75,683.936 1183.31,683.936 1183.87,683.936 1184.43,683.936 1184.98,683.936 1185.54,683.936 1186.1,683.936 1186.66,683.936 1187.22,683.936 1187.78,683.936 1188.34,683.936 1188.9,683.936 1189.46,683.936 1190.02,683.936 1190.58,683.936 1191.14,683.936 1191.7,683.936 1192.25,683.936 1192.81,683.936 1193.37,683.936 1193.93,683.936 1194.49,683.936 1195.05,683.936 1195.61,683.936 1196.17,683.936 1196.73,683.936 1197.29,683.936 1197.85,683.936 1198.41,683.936 1198.97,683.936 1199.52,683.936 1200.08,683.936 1200.64,683.936 1201.2,683.936 1201.76,683.936 1202.32,683.936 1202.88,683.936 1203.44,683.936 1204,683.936 1204.56,683.936 1205.12,683.936 1205.68,683.936 1206.24,683.936 1206.8,683.936 1207.35,683.936 1207.91,683.936 1208.47,683.936 1209.03,683.936 1209.59,683.936 1210.15,683.936 1210.71,683.936 1211.27,683.936 1211.83,683.936 1212.39,683.936 1212.95,683.936 1213.51,683.936 1214.07,683.936 1214.62,683.936 1215.18,683.936 1215.74,683.936 1216.3,683.936 1216.86,683.936 1217.42,683.936 1217.98,683.936 1218.54,683.936 1219.1,683.936 1219.66,683.936 1220.22,683.936 1220.78,683.936 1221.34,683.936 1221.89,683.936 1222.45,683.936 1223.01,683.936 1223.57,683.936 1224.13,683.936 1224.69,683.936 1225.25,683.936 1225.81,683.936 1226.37,683.936 1226.93,683.936 1227.49,683.936 1228.05,683.936 1228.61,683.936 1229.17,683.936 1229.72,683.936 1230.28,683.936 1230.84,683.936 1231.4,683.936 1231.96,683.936 1232.52,683.936 1233.08,683.936 1233.64,683.936 1234.2,683.936 1234.76,683.936 1235.32,683.936 1235.88,683.936 1236.44,683.936 1236.99,683.936 1237.55,683.936 1238.11,683.936 1238.67,683.936 1239.23,683.936 1239.79,683.936 1240.35,683.936 1240.91,683.936 1241.47,683.936 1242.03,683.936 1242.59,683.936 1243.15,683.936 1243.71,683.936 1244.26,683.936 1244.82,683.936 1245.38,683.936 1245.94,683.936 1246.5,683.936 1247.06,683.936 1247.62,683.936 1248.18,683.936 1248.74,683.936 1249.3,683.936 1249.86,683.936 1250.42,683.936 1250.98,683.936 1251.54,683.936 1252.09,683.936 1252.65,683.936 1253.21,683.936 1253.77,683.936 1254.33,683.936 1254.89,683.936 1255.45,683.936 1256.01,683.936 1256.57,683.936 1257.13,683.936 1257.69,683.936 1258.25,683.936 1258.81,683.936 1259.36,683.936 1259.92,683.936 1260.48,683.936 1261.04,683.936 1261.6,683.936 1262.16,683.936 1262.72,683.936 1263.28,683.936 1263.84,683.936 1264.4,683.936 1264.96,683.936 1265.52,683.936 1266.08,683.936 1266.63,683.936 1267.19,683.936 1267.75,683.936 1268.31,683.936 1268.87,683.936 1269.43,683.936 1269.99,683.936 1270.55,683.936 1271.11,683.936 1271.67,683.936 1272.23,683.936 1272.79,683.936 1273.35,683.936 1273.91,683.936 1274.46,683.936 1275.02,683.936 1275.58,683.936 1276.14,683.936 1276.7,683.936 1277.26,683.936 1277.82,683.936 1278.38,683.936 1278.94,683.936 1279.5,683.936 1280.06,683.936 1280.62,683.936 1281.18,683.936 1281.73,683.936 1282.29,683.936 1282.85,683.936 1283.41,683.936 1283.97,683.936 1284.53,683.936 1285.09,683.936 1285.65,683.936 1286.21,683.936 1286.77,683.936 1287.33,683.936 1287.89,683.936 1288.45,683.936 1289,683.936 1289.56,683.936 1290.12,683.936 1290.68,683.936 1291.24,683.936 1291.8,683.936 1292.36,683.936 1292.92,683.936 1293.48,683.936 1294.04,683.936 1294.6,683.936 1295.16,683.936 1295.72,683.936 1296.28,683.936 1296.83,683.936 1297.39,683.936 1297.95,683.936 1298.51,683.936 1299.07,683.936 1299.63,683.936 1300.19,683.936 1300.75,683.936 1301.31,683.936 1301.87,683.936 1302.43,683.936 1302.99,683.936 1303.55,683.936 1304.1,683.936 1304.66,683.936 1305.22,683.936 1305.78,683.936 1306.34,683.936 1306.9,683.936 1307.46,683.936 1308.02,683.936 1308.58,683.936 1309.14,683.936 1309.7,683.936 1310.26,683.936 1310.82,683.936 1311.38,683.936 1311.93,683.936 1312.49,683.936 1313.05,683.936 1313.61,683.936 1314.17,683.936 1314.73,683.936 1315.29,683.936 1315.85,683.936 1316.41,683.936 1316.97,683.936 1317.53,683.936 1318.09,683.936 1318.65,683.936 1319.2,683.936 1319.76,683.936 1320.32,683.936 1320.88,683.936 1321.44,683.936 1322,683.936 1322.56,683.936 1323.12,683.936 1323.68,683.936 1324.24,683.936 1324.8,683.936 1325.36,683.936 1325.92,683.936 1326.47,683.936 1327.03,683.936 1327.59,683.936 1328.15,683.936 1328.71,683.936 1329.27,683.936 1329.83,683.936 1330.39,683.936 1330.95,683.936 1331.51,683.936 1332.07,683.936 1332.63,683.936 1333.19,683.936 1333.75,683.936 1334.3,683.936 1334.86,683.936 1335.42,683.936 1335.98,683.936 1336.54,683.936 1337.1,683.936 1337.66,683.936 1338.22,683.936 1338.78,683.936 1339.34,683.936 1339.9,683.936 1340.46,683.936 1341.02,683.936 1341.57,683.936 1342.13,683.936 1342.69,683.936 1343.25,683.936 1343.81,683.936 1344.37,683.936 1344.93,683.936 1345.49,683.936 1346.05,683.936 1346.61,683.936 1347.17,683.936 1347.73,683.936 1348.29,683.936 1348.84,683.936 1349.4,683.936 1349.96,683.936 1350.52,683.936 1351.08,683.936 1351.64,683.936 1352.2,683.936 1352.76,683.936 1353.32,683.936 1353.88,683.936 1354.44,683.936 1355,683.936 1355.56,683.936 1356.12,683.936 1356.67,683.936 1357.23,683.936 1357.79,683.936 1358.35,683.936 1358.91,683.936 1359.47,683.936 1360.03,683.936 1360.59,683.936 1361.15,683.936 1361.71,683.936 1362.27,683.936 1362.83,683.936 1363.39,683.936 1363.94,683.936 1364.5,683.936 1365.06,683.936 1365.62,683.936 1366.18,683.936 1366.74,683.936 1367.3,683.936 1367.86,683.936 1368.42,683.936 1368.98,683.936 1369.54,683.936 1370.1,683.936 1370.66,683.936 1371.21,683.936 1371.77,683.936 1372.33,683.936 1372.89,683.936 1373.45,683.936 1374.01,683.936 1374.57,683.936 1375.13,683.936 1375.69,683.936 1376.25,683.936 1376.81,683.936 1377.37,683.936 1377.93,683.936 1378.49,683.936 1379.04,683.936 1379.6,683.936 1380.16,683.936 1380.72,683.936 1381.28,683.936 1381.84,683.936 1382.4,683.936 1382.96,683.936 1383.52,683.936 1384.08,683.936 1384.64,683.936 1385.2,683.936 1385.76,683.936 1386.31,683.936 1386.87,683.936 1387.43,683.936 1387.99,683.936 1388.55,683.936 1389.11,683.936 1389.67,683.936 1390.23,683.936 1390.79,683.936 1391.35,683.936 1391.91,683.936 1392.47,683.936 1393.03,683.936 1393.58,683.936 1394.14,683.936 1394.7,683.936 1395.26,683.936 1395.82,683.936 1396.38,683.936 1396.94,683.936 1397.5,683.936 1398.06,683.936 1398.62,683.936 1399.18,683.936 1399.74,683.936 1400.3,683.936 1400.86,683.936 1401.41,683.936 1401.97,683.936 1402.53,683.936 1403.09,683.936 1403.65,683.936 1404.21,683.936 1404.77,683.936 1405.33,683.936 1405.89,683.936 1406.45,683.936 1407.01,683.936 1407.57,683.936 1408.13,683.936 1408.68,683.936 1409.24,683.936 1409.8,683.936 1410.36,683.936 1410.92,683.936 1411.48,683.936 1412.04,683.936 1412.6,683.936 1413.16,683.936 1413.72,683.936 1414.28,683.936 1414.84,683.936 1415.4,683.936 1415.95,683.936 1416.51,683.936 1417.07,683.936 1417.63,683.936 1418.19,683.936 1418.75,683.936 1419.31,683.936 1419.87,683.936 1420.43,683.936 1420.99,683.936 1421.55,683.936 1422.11,683.936 1422.67,683.936 1423.23,683.936 1423.78,683.936 1424.34,683.936 1424.9,683.936 1425.46,683.936 1426.02,683.936 1426.58,683.936 1427.14,683.936 1427.7,683.936 1428.26,683.936 1428.82,683.936 1429.38,683.936 1429.94,683.936 1430.5,683.936 1431.05,683.936 1431.61,683.936 1432.17,683.936 1432.73,683.936 1433.29,683.936 1433.85,683.936 1434.41,683.936 1434.97,683.936 1435.53,683.936 1436.09,683.936 1436.65,683.936 1437.21,683.936 1437.77,683.936 1438.33,683.936 1438.88,683.936 1439.44,683.936 1440,683.936 1440.56,683.936 1441.12,683.936 1441.68,683.936 1442.24,683.936 1442.8,683.936 1443.36,683.936 1443.92,683.936 1444.48,683.936 1445.04,683.936 1445.6,683.936 1446.15,683.936 1446.71,683.936 1447.27,683.936 1447.83,683.936 1448.39,683.936 1448.95,683.936 1449.51,683.936 1450.07,683.936 1450.63,683.936 1451.19,683.936 1451.75,683.936 1452.31,683.936 1452.87,683.936 1453.42,683.936 1453.98,683.936 1454.54,683.936 1455.1,683.936 1455.66,683.936 1456.22,683.936 1456.78,683.936 1457.34,683.936 1457.9,683.936 1458.46,683.936 1459.02,683.936 1459.58,683.936 1460.14,683.936 1460.7,683.936 1461.25,683.936 1461.81,683.936 1462.37,683.936 1462.93,683.936 1463.49,683.936 1464.05,683.936 1464.61,683.936 1465.17,683.936 1465.73,683.936 1466.29,683.936 1466.85,683.936 1467.41,683.936 1467.97,683.936 1468.52,683.936 1469.08,683.936 1469.64,683.936 1470.2,683.936 1470.76,683.936 1471.32,683.936 1471.88,683.936 1472.44,683.936 1473,683.936 1473.56,683.936 1474.12,683.936 1474.68,683.936 1475.24,683.936 1475.79,683.936 1476.35,683.936 1476.91,683.936 1477.47,683.936 1478.03,683.936 1478.59,683.936 1479.15,683.936 1479.71,683.936 1480.27,683.936 1480.83,683.936 1481.39,683.936 1481.95,683.936 1482.51,683.936 1483.07,683.936 1483.62,683.936 1484.18,683.936 1484.74,683.936 1485.3,683.936 1485.86,683.936 1486.42,683.936 1486.98,683.936 1487.54,683.936 1488.1,683.936 1488.66,683.936 1489.22,683.936 1489.78,683.936 1490.34,683.936 1490.89,683.936 1491.45,683.936 1492.01,683.936 1492.57,683.936 1493.13,683.936 1493.69,683.936 1494.25,683.936 1494.81,683.936 1495.37,683.936 1495.93,683.936 1496.49,683.936 1497.05,683.936 1497.61,683.936 1498.16,683.936 1498.72,683.936 1499.28,683.936 1499.84,683.936 1500.4,683.936 1500.96,683.936 1501.52,683.936 1502.08,683.936 1502.64,683.936 1503.2,683.936 1503.76,683.936 1504.32,683.936 1504.88,683.936 1505.44,683.936 1505.99,683.936 1506.55,683.936 1507.11,683.936 1507.67,683.936 1508.23,683.936 1508.79,683.936 1509.35,683.936 1509.91,683.936 1510.47,683.936 1511.03,683.936 1511.59,683.936 1512.15,683.936 1512.71,683.936 1513.26,683.936 1513.82,683.936 1514.38,683.936 1514.94,683.936 1515.5,683.936 1516.06,683.936 1516.62,683.936 1517.18,683.936 1517.74,683.936 1518.3,683.936 1518.86,683.936 1519.42,683.936 1519.98,683.936 1520.53,683.936 1521.09,683.936 1521.65,683.936 1522.21,683.936 1522.77,683.936 1523.33,683.936 1523.89,683.936 1524.45,683.936 1525.01,683.936 1525.57,683.936 1526.13,683.936 1526.69,683.936 1527.25,683.936 1527.81,683.936 1528.36,683.936 1528.92,683.936 1529.48,683.936 1530.04,683.936 1530.6,683.936 1531.16,683.936 1531.72,683.936 1532.28,683.936 1532.84,683.936 1533.4,683.936 1533.96,683.936 1534.52,683.936 1535.08,683.936 1535.63,683.936 1536.19,683.936 1536.75,683.936 1537.31,683.936 1537.87,683.936 1538.43,683.936 1538.99,683.936 1539.55,683.936 1540.11,683.936 1540.67,683.936 1541.23,683.936 1541.79,683.936 1542.35,683.936 1542.9,683.936 1543.46,683.936 1544.02,683.936 1544.58,683.936 1545.14,683.936 1545.7,683.936 1546.26,683.936 1546.82,683.936 1547.38,683.936 1547.94,683.936 1548.5,683.936 1549.06,683.936 1549.62,683.936 1550.18,683.936 1550.73,683.936 1551.29,683.936 1551.85,683.936 1552.41,683.936 1552.97,683.936 1553.53,683.936 1554.09,683.936 1554.65,683.936 1555.21,683.936 1555.77,683.936 1556.33,683.936 1556.89,683.936 1557.45,683.936 1558,683.936 1558.56,683.936 1559.12,683.936 1559.68,683.936 1560.24,683.936 1560.8,683.936 1561.36,683.936 1561.92,683.936 1562.48,683.936 1563.04,683.936 1563.6,683.936 1564.16,683.936 1564.72,683.936 1565.28,683.936 1565.83,683.936 1566.39,683.936 1566.95,683.936 1567.51,683.936 1568.07,683.936 1568.63,683.936 1569.19,683.936 1569.75,683.936 1570.31,683.936 1570.87,683.936 1571.43,683.936 1571.99,683.936 1572.55,683.936 1573.1,683.936 1573.66,683.936 1574.22,683.936 1574.78,683.936 1575.34,683.936 1575.9,683.936 1576.46,683.936 1577.02,683.936 1577.58,683.936 1578.14,683.936 1578.7,683.936 1579.26,683.936 1579.82,683.936 1580.37,683.936 1580.93,683.936 1581.49,683.936 1582.05,683.936 1582.61,683.936 1583.17,683.936 1583.73,683.936 1584.29,683.936 1584.85,683.936 1585.41,683.936 1585.97,683.936 1586.53,683.936 1587.09,683.936 1587.65,683.936 1588.2,683.936 1588.76,683.936 1589.32,683.936 1589.88,683.936 1590.44,683.936 1591,683.936 1591.56,683.936 1592.12,683.936 1592.68,683.936 1593.24,683.936 1593.8,683.936 1594.36,683.936 1594.92,683.936 1595.47,683.936 1596.03,683.936 1596.59,683.936 1597.15,683.936 1597.71,683.936 1598.27,683.936 1598.83,683.936 1599.39,683.936 1599.95,683.936 1600.51,683.936 1601.07,683.936 1601.63,683.936 1602.19,683.936 1602.74,683.936 1603.3,683.936 1603.86,683.936 1604.42,683.936 1604.98,683.936 1605.54,683.936 1606.1,683.936 1606.66,683.936 1607.22,683.936 1607.78,683.936 1608.34,683.936 1608.9,683.936 1609.46,683.936 1610.02,683.936 1610.57,683.936 1611.13,683.936 1611.69,683.936 1612.25,683.936 1612.81,683.936 1613.37,683.936 1613.93,683.936 1614.49,683.936 1615.05,683.936 1615.61,683.936 1616.17,683.936 1616.73,683.936 1617.29,683.936 1617.84,683.936 1618.4,683.936 1618.96,683.936 1619.52,683.936 1620.08,683.936 1620.64,683.936 1621.2,683.936 1621.76,683.936 1622.32,683.936 1622.88,683.936 1623.44,683.936 1624,683.936 1624.56,683.936 1625.11,683.936 1625.67,683.936 1626.23,683.936 1626.79,683.936 1627.35,683.936 1627.91,683.936 1628.47,683.936 1629.03,683.936 1629.59,683.936 1630.15,683.936 1630.71,683.936 1631.27,683.936 1631.83,683.936 1632.39,683.936 1632.94,683.936 1633.5,683.936 1634.06,683.936 1634.62,683.936 1635.18,683.936 1635.74,683.936 1636.3,683.936 1636.86,683.936 1637.42,683.936 1637.98,683.936 1638.54,683.936 1639.1,683.936 1639.66,683.936 1640.21,683.936 1640.77,683.936 1641.33,683.936 1641.89,683.936 1642.45,683.936 1643.01,683.936 1643.57,683.936 1644.13,683.936 1644.69,683.936 1645.25,683.936 1645.81,683.936 1646.37,683.936 1646.93,683.936 1647.48,683.936 1648.04,683.936 1648.6,683.936 1649.16,683.936 1649.72,683.936 1650.28,683.936 1650.84,683.936 1651.4,683.936 1651.96,683.936 1652.52,683.936 1653.08,683.936 1653.64,683.936 1654.2,683.936 1654.76,683.936 1655.31,683.936 1655.87,683.936 1656.43,683.936 1656.99,683.936 1657.55,683.936 1658.11,683.936 1658.67,683.936 1659.23,683.936 1659.79,683.936 1660.35,683.936 1660.91,683.936 1661.47,683.936 1662.03,683.936 1662.58,683.936 1663.14,683.936 1663.7,683.936 1664.26,683.936 1664.82,683.936 1665.38,683.936 1665.94,683.936 1666.5,683.936 1667.06,683.936 1667.62,683.936 1668.18,683.936 1668.74,683.936 1669.3,683.936 1669.85,683.936 1670.41,683.936 1670.97,683.936 1671.53,683.936 1672.09,683.936 1672.65,683.936 1673.21,683.936 1673.77,683.936 1674.33,683.936 1674.89,683.936 1675.45,683.936 1676.01,683.936 1676.57,683.936 1677.13,683.936 1677.68,683.936 1678.24,683.936 1678.8,683.936 1679.36,683.936 1679.92,683.936 1680.48,683.936 1681.04,683.936 1681.6,683.936 1682.16,683.936 1682.72,683.936 1683.28,683.936 1683.84,683.936 1684.4,683.936 1684.95,683.936 1685.51,683.936 1686.07,683.936 1686.63,683.936 1687.19,683.936 1687.75,683.936 1688.31,683.936 1688.87,683.936 1689.43,683.936 1689.99,683.936 1690.55,683.936 1691.11,683.936 1691.67,683.936 1692.23,683.936 1692.78,683.936 1693.34,683.936 1693.9,683.936 1694.46,683.936 1695.02,683.936 1695.58,683.936 1696.14,683.936 1696.7,683.936 1697.26,683.936 1697.82,683.936 1698.38,683.936 1698.94,683.936 1699.5,683.936 1700.05,683.936 1700.61,683.936 1701.17,683.936 1701.73,683.936 1702.29,683.936 1702.85,683.936 1703.41,683.936 1703.97,683.936 1704.53,683.936 1705.09,683.936 1705.65,683.936 1706.21,683.936 1706.77,683.936 1707.32,683.936 1707.88,683.936 1708.44,683.936 1709,683.936 1709.56,683.936 1710.12,683.936 1710.68,683.936 1711.24,683.936 1711.8,683.936 1712.36,683.936 1712.92,683.936 1713.48,683.936 1714.04,683.936 1714.6,683.936 1715.15,683.936 1715.71,683.936 1716.27,683.936 1716.83,683.936 1717.39,683.936 1717.95,683.936 1718.51,683.936 1719.07,683.936 1719.63,683.936 1720.19,683.936 1720.75,683.936 1721.31,683.936 1721.87,683.936 1722.42,683.936 1722.98,683.936 1723.54,683.936 1724.1,683.936 1724.66,683.936 1725.22,683.936 1725.78,683.936 1726.34,683.936 1726.9,683.936 1727.46,683.936 1728.02,683.936 1728.58,683.936 1729.14,683.936 1729.69,683.936 1730.25,683.936 1730.81,683.936 1731.37,683.936 1731.93,683.936 1732.49,683.936 1733.05,683.936 1733.61,683.936 1734.17,683.936 1734.73,683.936 1735.29,683.936 1735.85,683.936 1736.41,683.936 1736.97,683.936 1737.52,683.936 1738.08,683.936 1738.64,683.936 1739.2,683.936 1739.76,683.936 1740.32,683.936 1740.88,683.936 1741.44,683.936 1742,683.936 1742.56,683.936 1743.12,683.936 1743.68,683.936 1744.24,683.936 1744.79,683.936 1745.35,683.936 1745.91,683.936 1746.47,683.936 1747.03,683.936 1747.59,683.936 1748.15,683.936 1748.71,683.936 1749.27,683.936 1749.83,683.936 1750.39,683.936 1750.95,683.936 1751.51,683.936 1752.06,683.936 1752.62,683.936 1753.18,683.936 1753.74,683.936 1754.3,683.936 1754.86,683.936 1755.42,683.936 1755.98,683.936 1756.54,683.936 1757.1,683.936 1757.66,683.936 1758.22,683.936 1758.78,683.936 1759.34,683.936 1759.89,683.936 1760.45,683.936 1761.01,683.936 1761.57,683.936 1762.13,683.936 1762.69,683.936 1763.25,683.936 1763.81,683.936 1764.37,683.936 1764.93,683.936 1765.49,683.936 1766.05,683.936 1766.61,683.936 1767.16,683.936 1767.72,683.936 1768.28,683.936 1768.84,683.936 1769.4,683.936 1769.96,683.936 1770.52,683.936 1771.08,683.936 1771.64,683.936 1772.2,683.936 1772.76,683.936 1773.32,683.936 1773.88,683.936 1774.43,683.936 1774.99,683.936 1775.55,683.936 1776.11,683.936 1776.67,683.936 1777.23,683.936 1777.79,683.936 1778.35,683.936 1778.91,683.936 1779.47,683.936 1780.03,683.936 1780.59,683.936 1781.15,683.936 1781.71,683.936 1782.26,683.936 1782.82,683.936 1783.38,683.936 1783.94,683.936 1784.5,683.936 1785.06,683.936 1785.62,683.936 1786.18,683.936 1786.74,683.936 1787.3,683.936 1787.86,683.936 1788.42,683.936 1788.98,683.936 1789.53,683.936 1790.09,683.936 1790.65,683.936 1791.21,683.936 1791.77,683.936 1792.33,683.936 1792.89,683.936 1793.45,683.936 1794.01,683.936 1794.57,683.936 1795.13,683.936 1795.69,683.936 1796.25,683.936 1796.8,683.936 1797.36,683.936 1797.92,683.936 1798.48,683.936 1799.04,683.936 1799.6,683.936 1800.16,683.936 1800.72,683.936 1801.28,683.936 1801.84,683.936 1802.4,683.936 1802.96,683.936 1803.52,683.936 1804.08,683.936 1804.63,683.936 1805.19,683.936 1805.75,683.936 1806.31,683.936 1806.87,683.936 1807.43,683.936 1807.99,683.936 1808.55,683.936 1809.11,683.936 1809.67,683.936 1810.23,683.936 1810.79,683.936 1811.35,683.936 1811.9,683.936 1812.46,683.936 1813.02,683.936 1813.58,683.936 1814.14,683.936 1814.7,683.936 1815.26,683.936 1815.82,683.936 1816.38,683.936 1816.94,683.936 1817.5,683.936 1818.06,683.936 1818.62,683.936 1819.18,683.936 1819.73,683.936 1820.29,683.936 1820.85,683.936 1821.41,683.936 1821.97,683.936 1822.53,683.936 1823.09,683.936 1823.65,683.936 1824.21,683.936 1824.77,683.936 1825.33,683.936 1825.89,683.936 1826.45,683.936 1827,683.936 1827.56,683.936 1828.12,683.936 1828.68,683.936 1829.24,683.936 1829.8,683.936 1830.36,683.936 1830.92,683.936 1831.48,683.936 1832.04,683.936 1832.6,683.936 1833.16,683.936 1833.72,683.936 1834.27,683.936 1834.83,683.936 1835.39,683.936 1835.95,683.936 1836.51,683.936 1837.07,683.936 1837.63,683.936 1838.19,683.936 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037366458095231 ± 0.022959472271241007\nProjected Energy: -4.0168540816887415 ± (0.00457963348620094, 0.004492057932409921)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.11776</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4474e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.5308e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5329e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.527e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.903e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4006e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.3631242916133584\n -0.7590191922770817\n  0.1358418221962321\n  0.1578999869460791\n  0.8767114411781307\n  1.5305929970973189\n  1.5835732611867464\n  3.0728703303258618\n  3.12567265395184\n  4.8621072215621695\n  6.2606948503805935\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{AbstractDVec}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
