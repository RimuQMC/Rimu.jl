var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20984735382764397 ± 0.001305472606138388\n   G2(1) = 0.9186177067528342 ± 0.0007594759953988115\n   G2(2) = 0.9818444786290472 ± 0.0007289557776897303\n   G2(3) = 0.9892282754085934 ± 0.0008788360933734747\n   G2(4) = 0.9818444786290472 ± 0.0007289557776897303\n   G2(5) = 0.9186177067528342 ± 0.0007594759953988115\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0303911779008 ± 0.17376512825917803\n   Replica 2: -3.9688804075424007 ± 0.12715701136854687\n   Replica 3: -3.9990527874026607 ± 0.15027587787350602\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip770\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip770)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip771\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip770)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip772\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.15 2211.02,1003.15 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.469 2211.02,745.469 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.786 2211.02,487.786 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.102 2211.02,230.102 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.15 423.181,1003.15 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.469 423.181,745.469 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.786 423.181,487.786 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.102 423.181,230.102 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M290.043 1016.5 L306.363 1016.5 L306.363 1020.43 L284.418 1020.43 L284.418 1016.5 Q287.08 1013.74 291.664 1009.11 Q296.27 1004.46 297.451 1003.12 Q299.696 1000.59 300.576 998.859 Q301.478 997.099 301.478 995.409 Q301.478 992.655 299.534 990.919 Q297.613 989.183 294.511 989.183 Q292.312 989.183 289.858 989.947 Q287.427 990.71 284.65 992.261 L284.65 987.539 Q287.474 986.405 289.927 985.826 Q292.381 985.247 294.418 985.247 Q299.789 985.247 302.983 987.933 Q306.177 990.618 306.177 995.109 Q306.177 997.238 305.367 999.159 Q304.58 1001.06 302.474 1003.65 Q301.895 1004.32 298.793 1007.54 Q295.691 1010.73 290.043 1016.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M316.224 985.872 L334.58 985.872 L334.58 989.808 L320.506 989.808 L320.506 998.28 Q321.524 997.933 322.543 997.771 Q323.562 997.585 324.58 997.585 Q330.367 997.585 333.747 1000.76 Q337.126 1003.93 337.126 1009.34 Q337.126 1014.92 333.654 1018.03 Q330.182 1021.1 323.862 1021.1 Q321.687 1021.1 319.418 1020.73 Q317.173 1020.36 314.765 1019.62 L314.765 1014.92 Q316.849 1016.06 319.071 1016.61 Q321.293 1017.17 323.77 1017.17 Q327.774 1017.17 330.112 1015.06 Q332.45 1012.96 332.45 1009.34 Q332.45 1005.73 330.112 1003.63 Q327.774 1001.52 323.77 1001.52 Q321.895 1001.52 320.02 1001.94 Q318.168 1002.35 316.224 1003.23 L316.224 985.872 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 988.951 Q352.728 988.951 350.899 992.516 Q349.094 996.058 349.094 1003.19 Q349.094 1010.29 350.899 1013.86 Q352.728 1017.4 356.339 1017.4 Q359.973 1017.4 361.779 1013.86 Q363.608 1010.29 363.608 1003.19 Q363.608 996.058 361.779 992.516 Q359.973 988.951 356.339 988.951 M356.339 985.247 Q362.149 985.247 365.205 989.854 Q368.284 994.437 368.284 1003.19 Q368.284 1011.91 365.205 1016.52 Q362.149 1021.1 356.339 1021.1 Q350.529 1021.1 347.45 1016.52 Q344.395 1011.91 344.395 1003.19 Q344.395 994.437 347.45 989.854 Q350.529 985.247 356.339 985.247 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M286.062 728.189 L304.418 728.189 L304.418 732.124 L290.344 732.124 L290.344 740.596 Q291.363 740.249 292.381 740.087 Q293.4 739.902 294.418 739.902 Q300.205 739.902 303.585 743.073 Q306.964 746.245 306.964 751.661 Q306.964 757.24 303.492 760.342 Q300.02 763.42 293.701 763.42 Q291.525 763.42 289.256 763.05 Q287.011 762.68 284.603 761.939 L284.603 757.24 Q286.687 758.374 288.909 758.93 Q291.131 759.485 293.608 759.485 Q297.613 759.485 299.951 757.379 Q302.288 755.272 302.288 751.661 Q302.288 748.05 299.951 745.944 Q297.613 743.837 293.608 743.837 Q291.733 743.837 289.858 744.254 Q288.006 744.67 286.062 745.55 L286.062 728.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M326.177 731.268 Q322.566 731.268 320.737 734.833 Q318.932 738.374 318.932 745.504 Q318.932 752.61 320.737 756.175 Q322.566 759.717 326.177 759.717 Q329.811 759.717 331.617 756.175 Q333.446 752.61 333.446 745.504 Q333.446 738.374 331.617 734.833 Q329.811 731.268 326.177 731.268 M326.177 727.564 Q331.987 727.564 335.043 732.171 Q338.122 736.754 338.122 745.504 Q338.122 754.231 335.043 758.837 Q331.987 763.42 326.177 763.42 Q320.367 763.42 317.288 758.837 Q314.233 754.231 314.233 745.504 Q314.233 736.754 317.288 732.171 Q320.367 727.564 326.177 727.564 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 731.268 Q352.728 731.268 350.899 734.833 Q349.094 738.374 349.094 745.504 Q349.094 752.61 350.899 756.175 Q352.728 759.717 356.339 759.717 Q359.973 759.717 361.779 756.175 Q363.608 752.61 363.608 745.504 Q363.608 738.374 361.779 734.833 Q359.973 731.268 356.339 731.268 M356.339 727.564 Q362.149 727.564 365.205 732.171 Q368.284 736.754 368.284 745.504 Q368.284 754.231 365.205 758.837 Q362.149 763.42 356.339 763.42 Q350.529 763.42 347.45 758.837 Q344.395 754.231 344.395 745.504 Q344.395 736.754 347.45 732.171 Q350.529 727.564 356.339 727.564 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M284.835 470.506 L307.057 470.506 L307.057 472.496 L294.511 505.066 L289.627 505.066 L301.432 474.441 L284.835 474.441 L284.835 470.506 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M316.224 470.506 L334.58 470.506 L334.58 474.441 L320.506 474.441 L320.506 482.913 Q321.524 482.566 322.543 482.404 Q323.562 482.219 324.58 482.219 Q330.367 482.219 333.747 485.39 Q337.126 488.561 337.126 493.978 Q337.126 499.556 333.654 502.658 Q330.182 505.737 323.862 505.737 Q321.687 505.737 319.418 505.367 Q317.173 504.996 314.765 504.255 L314.765 499.556 Q316.849 500.691 319.071 501.246 Q321.293 501.802 323.77 501.802 Q327.774 501.802 330.112 499.695 Q332.45 497.589 332.45 493.978 Q332.45 490.367 330.112 488.26 Q327.774 486.154 323.77 486.154 Q321.895 486.154 320.02 486.57 Q318.168 486.987 316.224 487.867 L316.224 470.506 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 473.584 Q352.728 473.584 350.899 477.149 Q349.094 480.691 349.094 487.82 Q349.094 494.927 350.899 498.492 Q352.728 502.033 356.339 502.033 Q359.973 502.033 361.779 498.492 Q363.608 494.927 363.608 487.82 Q363.608 480.691 361.779 477.149 Q359.973 473.584 356.339 473.584 M356.339 469.881 Q362.149 469.881 365.205 474.487 Q368.284 479.07 368.284 487.82 Q368.284 496.547 365.205 501.154 Q362.149 505.737 356.339 505.737 Q350.529 505.737 347.45 501.154 Q344.395 496.547 344.395 487.82 Q344.395 479.07 347.45 474.487 Q350.529 469.881 356.339 469.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M256.664 243.447 L264.303 243.447 L264.303 217.081 L255.992 218.748 L255.992 214.489 L264.256 212.822 L268.932 212.822 L268.932 243.447 L276.571 243.447 L276.571 247.382 L256.664 247.382 L256.664 243.447 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M296.015 215.901 Q292.404 215.901 290.576 219.466 Q288.77 223.007 288.77 230.137 Q288.77 237.243 290.576 240.808 Q292.404 244.35 296.015 244.35 Q299.65 244.35 301.455 240.808 Q303.284 237.243 303.284 230.137 Q303.284 223.007 301.455 219.466 Q299.65 215.901 296.015 215.901 M296.015 212.197 Q301.826 212.197 304.881 216.804 Q307.96 221.387 307.96 230.137 Q307.96 238.864 304.881 243.47 Q301.826 248.054 296.015 248.054 Q290.205 248.054 287.127 243.47 Q284.071 238.864 284.071 230.137 Q284.071 221.387 287.127 216.804 Q290.205 212.197 296.015 212.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M326.177 215.901 Q322.566 215.901 320.737 219.466 Q318.932 223.007 318.932 230.137 Q318.932 237.243 320.737 240.808 Q322.566 244.35 326.177 244.35 Q329.811 244.35 331.617 240.808 Q333.446 237.243 333.446 230.137 Q333.446 223.007 331.617 219.466 Q329.811 215.901 326.177 215.901 M326.177 212.197 Q331.987 212.197 335.043 216.804 Q338.122 221.387 338.122 230.137 Q338.122 238.864 335.043 243.47 Q331.987 248.054 326.177 248.054 Q320.367 248.054 317.288 243.47 Q314.233 238.864 314.233 230.137 Q314.233 221.387 317.288 216.804 Q320.367 212.197 326.177 212.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 215.901 Q352.728 215.901 350.899 219.466 Q349.094 223.007 349.094 230.137 Q349.094 237.243 350.899 240.808 Q352.728 244.35 356.339 244.35 Q359.973 244.35 361.779 240.808 Q363.608 237.243 363.608 230.137 Q363.608 223.007 361.779 219.466 Q359.973 215.901 356.339 215.901 M356.339 212.197 Q362.149 212.197 365.205 216.804 Q368.284 221.387 368.284 230.137 Q368.284 238.864 365.205 243.47 Q362.149 248.054 356.339 248.054 Q350.529 248.054 347.45 243.47 Q344.395 238.864 344.395 230.137 Q344.395 221.387 347.45 216.804 Q350.529 212.197 356.339 212.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip772)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.102 4017.76,230.102 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.32 457.123,1249.13 457.691,1248.9 458.259,1248.61 458.828,1248.22 459.396,1247.78 459.964,1247.27 460.533,1246.67 461.101,1244.98 461.669,1243.25 462.238,1242.51 462.806,1241.66 463.375,1240.73 463.943,1239.69 464.511,1237.55 465.08,1236.33 465.648,1235 466.216,1233.57 466.785,1232.01 467.353,1230.31 467.921,1227.48 468.49,1225.51 469.058,1223.39 469.626,1221.11 470.195,1217.69 470.763,1215.13 471.331,1212.38 471.9,1208.44 472.468,1204.3 473.036,1201 473.605,1197.53 474.173,1193.84 474.741,1189.93 475.31,1185.85 475.878,1181.53 476.446,1177 477.015,1171.2 477.583,1165.2 478.152,1158.94 478.72,1151.4 479.288,1143.63 479.857,1137.74 480.425,1131.66 480.993,1124.26 481.562,1117.62 482.13,1110.71 482.698,1103.68 483.267,1095.35 483.835,1087.84 484.403,1077 484.972,1069.15 485.54,1061.17 486.108,1051.93 486.677,1042.5 487.245,1032.76 487.813,1020.72 488.382,1010.56 488.95,1001.36 489.518,991.135 490.087,980.63 490.655,971.242 491.224,961.692 491.792,948.925 492.36,938.374 492.929,928.689 493.497,918.818 494.065,907.947 494.634,893.919 495.202,883.115 495.77,872.19 496.339,858.207 496.907,847.442 497.475,835.695 498.044,824.143 498.612,813.508 499.18,803.827 499.749,792.344 500.317,780.808 500.885,767.421 501.454,756.121 502.022,747.118 502.59,736.883 503.159,724.887 503.727,714.932 504.295,705.113 504.864,693.502 505.432,684.028 506.001,674.608 506.569,663.093 507.137,654.018 507.706,645.96 508.274,637.037 508.842,630.292 509.411,620.259 509.979,611.614 510.547,603.014 511.116,595.543 511.684,586.228 512.252,579.14 512.821,570.929 513.389,562.989 513.957,553.305 514.526,545.857 515.094,539.554 515.662,532.269 516.231,524.116 516.799,517.142 517.367,509.278 517.936,501.703 518.504,496.385 519.072,490.03 519.641,484.837 520.209,477.657 520.778,472.657 521.346,464.453 521.914,459.718 522.483,455.099 523.051,449.286 523.619,443.804 524.188,438.527 524.756,433.401 525.324,426.147 525.893,421.192 526.461,415.316 527.029,409.683 527.598,405.15 528.166,400.889 528.734,395.817 529.303,393.002 529.871,387.818 530.439,384.021 531.008,378.256 531.576,373.644 532.144,372.262 532.713,368.636 533.281,365.385 533.85,362.083 534.418,358.853 534.986,356.648 535.555,354.575 536.123,353.529 536.691,350.438 537.26,348.165 537.828,346.092 538.396,342.974 538.965,339.821 539.533,337.973 540.101,335.047 540.67,333.142 541.238,329.3 541.806,326.586 542.375,324.045 542.943,320.524 543.511,319.093 544.08,316.398 544.648,314.05 545.216,311.829 545.785,308.585 546.353,306.5 546.921,304.402 547.49,303.327 548.058,300.04 548.627,301.288 549.195,299.167 549.763,297.904 550.332,296.998 550.9,295.878 551.468,294.002 552.037,291.956 552.605,290.944 553.173,288.072 553.742,285.245 554.31,282.687 554.878,279.317 555.447,279.198 556.015,278.827 556.583,278.452 557.152,276.944 557.72,275.577 558.288,275.248 558.857,275.963 559.425,273.496 559.993,271.371 560.562,272.506 561.13,272.406 561.698,272.129 562.267,269.953 562.835,265.439 563.404,266.71 563.972,263.598 564.54,263.649 565.109,263.891 565.677,264.034 566.245,263.188 566.814,264.359 567.382,265.344 567.95,265.468 568.519,262.13 569.087,261.166 569.655,260.322 570.224,261.47 570.792,261.491 571.36,262.44 571.929,262.405 572.497,262.155 573.065,260.747 573.634,258.693 574.202,258.571 574.77,257.468 575.339,255.422 575.907,254.49 576.476,252.797 577.044,252.063 577.612,251.112 578.181,250.152 578.749,250.655 579.317,251.004 579.886,251.278 580.454,250.476 581.022,249.723 581.591,249.03 582.159,250.49 582.727,252.578 583.296,249.493 583.864,249.759 584.432,249.922 585.001,245.043 585.569,243.371 586.137,241.054 586.706,244.689 587.274,244.168 587.842,241.661 588.411,242.249 588.979,242.913 589.547,243.645 590.116,244.194 590.684,244.857 591.253,245.265 591.821,245.699 592.389,244.947 592.958,243.395 593.526,243.699 594.094,245.136 594.663,244.416 595.231,244.853 595.799,245.174 596.368,245.51 596.936,247.7 597.504,247.747 598.073,246.155 598.641,246.327 599.209,246.646 599.778,246.801 600.346,245.685 600.914,244.819 601.483,245.949 602.051,246.112 602.619,246.366 603.188,243.376 603.756,243.644 604.325,243.625 604.893,245.01 605.461,246.12 606.03,246.151 606.598,247.16 607.166,247.116 607.735,249.127 608.303,247.763 608.871,248.841 609.44,246.353 610.008,247.201 610.576,246.028 611.145,245.923 611.713,244.659 612.281,243.487 612.85,243.438 613.418,244.441 613.986,244.263 614.555,246.162 615.123,245.939 615.691,243.459 616.26,243.315 616.828,242.318 617.396,242.311 617.965,241.327 618.533,239.437 619.102,239.379 619.67,239.628 620.238,240.654 620.807,240.881 621.375,240.97 621.943,238.956 622.512,237.886 623.08,238.368 623.648,238.679 624.217,239.074 624.785,240.183 625.353,240.131 625.922,238.245 626.49,238.558 627.058,238.396 627.627,238.342 628.195,238.404 628.763,237.569 629.332,237.848 629.9,234.866 630.468,233.111 631.037,234.669 631.605,236.159 632.173,237.698 632.742,234.689 633.31,237.189 633.879,238.472 634.447,235.403 635.015,235.917 635.584,236.344 636.152,235.515 636.72,237.935 637.289,238.118 637.857,236.227 638.425,238.472 638.994,239.573 639.562,238.777 640.13,236.704 640.699,235.938 641.267,236.15 641.835,237.459 642.404,236.657 642.972,237.798 643.54,238.99 644.109,241.972 644.677,241.583 645.245,240.29 645.814,243.429 646.382,242.995 646.951,242.8 647.519,241.315 648.087,242.002 648.656,241.744 649.224,242.23 649.792,241.825 650.361,240.387 650.929,240.038 651.497,239.817 652.066,239.532 652.634,239.134 653.202,237.779 653.771,237.539 654.339,236.414 654.907,238.442 655.476,238.457 656.044,236.447 656.612,235.217 657.181,235.432 657.749,234.509 658.317,234.6 658.886,233.89 659.454,233.898 660.022,234.961 660.591,233.827 661.159,234.17 661.728,233.153 662.296,229.03 662.864,229.63 663.433,229.178 664.001,230.652 664.569,230.314 665.138,229.718 665.706,229.429 666.274,230.816 666.843,232.099 667.411,233.501 667.979,232.574 668.548,232.552 669.116,230.645 669.684,232.072 670.253,231.35 670.821,229.615 671.389,230.135 671.958,229.257 672.526,231.628 673.094,233.124 673.663,233.468 674.231,233.811 674.799,232.988 675.368,233.476 675.936,233.79 676.505,234.104 677.073,233.134 677.641,235.398 678.21,237.629 678.778,236.372 679.346,235.466 679.915,233.413 680.483,232.602 681.051,230.039 681.62,231.433 682.188,230.679 682.756,232.865 683.325,233.316 683.893,234.663 684.461,235.847 685.03,234.803 685.598,235.925 686.166,235.909 686.735,232.607 687.303,234.907 687.871,235.126 688.44,235.147 689.008,233.24 689.577,233.457 690.145,233.806 690.713,232.808 691.282,234.09 691.85,234.032 692.418,233.026 692.987,231.963 693.555,233.095 694.123,232.053 694.692,233.312 695.26,233.536 695.828,231.66 696.397,231.919 696.965,231.29 697.533,231.484 698.102,230.085 698.67,230.348 699.238,230.751 699.807,231.122 700.375,231.48 700.943,230.974 701.512,231.4 702.08,229.664 702.648,231.374 703.217,229.813 703.785,230.146 704.354,229.394 704.922,228.882 705.49,227.54 706.059,230.043 706.627,231.544 707.195,232.732 707.764,232.945 708.332,234.266 708.9,233.461 709.469,233.291 710.037,233.441 710.605,235.675 711.174,236.715 711.742,235.484 712.31,235.504 712.879,234.493 713.447,234.798 714.015,235.138 714.584,236.422 715.152,236.219 715.72,235.13 716.289,234.976 716.857,234.82 717.425,234.886 717.994,233.757 718.562,232.896 719.131,233.11 719.699,234.388 720.267,234.346 720.836,235.549 721.404,234.453 721.972,237.67 722.541,237.353 723.109,236.084 723.677,235.783 724.246,236.501 724.814,238.364 725.382,237.103 725.951,239.031 726.519,239.788 727.087,239.253 727.656,236.086 728.224,233.242 728.792,234.172 729.361,233.964 729.929,231.903 730.497,232.997 731.066,233.037 731.634,234.162 732.203,232.958 732.771,230.918 733.339,232.179 733.908,235.388 734.476,236.283 735.044,235.044 735.613,233.839 736.181,233.919 736.749,232.613 737.318,232.663 737.886,232.709 738.454,233.772 739.023,233.607 739.591,231.576 740.159,233.774 740.728,233.503 741.296,234.098 741.864,236.028 742.433,234.719 743.001,233.73 743.569,233.66 744.138,235.515 744.706,236.306 745.274,239.095 745.843,238.522 746.411,237.953 746.98,237.556 747.548,234.929 748.116,231.525 748.685,233.404 749.253,231.193 749.821,234.212 750.39,234.754 750.958,233.475 751.526,231.351 752.095,231.418 752.663,230.428 753.231,230.479 753.8,231.468 754.368,231.452 754.936,231.457 755.505,231.335 756.073,230.379 756.641,232.495 757.21,232.363 757.778,231.297 758.346,229.032 758.915,230.061 759.483,231.273 760.052,228.446 760.62,227.678 761.188,227.78 761.757,227.144 762.325,228.517 762.893,227.534 763.462,227.704 764.03,229.244 764.598,228.539 765.167,226.757 765.735,226.302 766.303,224.57 766.872,225.174 767.44,226.761 768.008,228.176 768.577,228.679 769.145,226.981 769.713,227.248 770.282,226.727 770.85,227.165 771.418,227.406 771.987,228.634 772.555,228.748 773.123,230.149 773.692,229.13 774.26,231.363 774.829,236.535 775.397,236.385 775.965,236.11 776.534,234.672 777.102,235.46 777.67,236.338 778.239,237.015 778.807,235.733 779.375,234.556 779.944,233.194 780.512,231.921 781.08,231.801 781.649,232.678 782.217,233.662 782.785,235.45 783.354,238.363 783.922,241.05 784.49,240.368 785.059,238.751 785.627,238.451 786.195,235.758 786.764,235.239 787.332,233.74 787.9,233.496 788.469,233.263 789.037,237.236 789.606,238.872 790.174,238.124 790.742,236.395 791.311,236 791.879,236.732 792.447,238.177 793.016,237.559 793.584,236.049 794.152,235.818 794.721,235.656 795.289,238.254 795.857,237.765 796.426,238.08 796.994,235.589 797.562,235.14 798.131,236.676 798.699,237.014 799.267,235.321 799.836,234.919 800.404,234.455 800.972,232.738 801.541,231.307 802.109,231.1 802.678,229.834 803.246,228.749 803.814,228.68 804.383,225.732 804.951,226.063 805.519,226.333 806.088,227.338 806.656,229.597 807.224,227.472 807.793,227.707 808.361,227.903 808.929,226.909 809.498,225.096 810.066,224.41 810.634,226.652 811.203,224.842 811.771,225.217 812.339,224.407 812.908,224.892 813.476,224.063 814.044,223.633 814.613,226.461 815.181,228.015 815.749,228.279 816.318,227.493 816.886,227.681 817.455,227.874 818.023,228.987 818.591,229.036 819.16,228.112 819.728,226.09 820.296,225.408 820.865,224.882 821.433,225.258 822.001,224.638 822.57,223.884 823.138,225.405 823.706,225.831 824.275,224.975 824.843,224.552 825.411,224.094 825.98,223.469 826.548,224.204 827.116,222.686 827.685,224.21 828.253,226.67 828.821,227.05 829.39,227.46 829.958,228.735 830.526,231.108 831.095,230.319 831.663,229.227 832.232,227.554 832.8,228.735 833.368,230.956 833.937,231.098 834.505,231.928 835.073,231.993 835.642,232.917 836.21,232.017 836.778,229.934 837.347,230.154 837.915,230.348 838.483,230.424 839.052,230.369 839.62,230.734 840.188,231.828 840.757,231.888 841.325,234.139 841.893,234.301 842.462,234.46 843.03,233.271 843.598,234.338 844.167,233.107 844.735,233.061 845.304,233.01 845.872,234.903 846.44,234.48 847.009,233.124 847.577,234.932 848.145,230.633 848.714,231.754 849.282,232.704 849.85,230.616 850.419,230.646 850.987,231.878 851.555,232.905 852.124,230.815 852.692,231.222 853.26,230.246 853.829,230.174 854.397,230.301 854.965,231.415 855.534,230.355 856.102,230.27 856.67,228.157 857.239,226.432 857.807,223.844 858.375,224.492 858.944,225.1 859.512,223.525 860.081,225.368 860.649,226.041 861.217,224.454 861.786,223.124 862.354,223.962 862.922,223.764 863.491,223.563 864.059,225.508 864.627,229.482 865.196,228.593 865.764,226.884 866.332,227.375 866.901,226.948 867.469,227.425 868.037,228.825 868.606,229.197 869.174,229.709 869.742,232.138 870.311,231.071 870.879,230.267 871.447,231.235 872.016,233.472 872.584,233.586 873.152,232.651 873.721,231.787 874.289,231.742 874.858,232.836 875.426,233.747 875.994,234.971 876.563,234.85 877.131,237.546 877.699,236.103 878.268,235.871 878.836,236.683 879.404,239.778 879.973,241.341 880.541,239.502 881.109,237.936 881.678,237.271 882.246,237.825 882.814,238.197 883.383,237.554 883.951,237.011 884.519,237.719 885.088,237.239 885.656,236.947 886.224,236.542 886.793,239.081 887.361,237.445 887.93,235.856 888.498,233.631 889.066,233.264 889.635,234.987 890.203,235.553 890.771,235.081 891.34,235.616 891.908,237.309 892.476,235.943 893.045,236.571 893.613,234.936 894.181,235.476 894.75,236.193 895.318,236.655 895.886,237.432 896.455,235.777 897.023,234.443 897.591,234.86 898.16,234.485 898.728,235.167 899.296,232.752 899.865,231.42 900.433,232.075 901.001,232.006 901.57,231.523 902.138,231.36 902.707,231.48 903.275,230.114 903.843,228.851 904.412,228.786 904.98,227.85 905.548,227.988 906.117,229.016 906.685,229.088 907.253,228.987 907.822,228.878 908.39,229.047 908.958,229.048 909.527,230.163 910.095,231.264 910.663,231.043 911.232,230.926 911.8,230.909 912.368,230.785 912.937,231.562 913.505,232.42 914.073,233.178 914.642,231.711 915.21,230.451 915.779,230.155 916.347,230.197 916.915,228.131 917.484,228.222 918.052,224.105 918.62,223.49 919.189,223.9 919.757,225.355 920.325,224.698 920.894,225.082 921.462,225.427 922.03,224.865 922.599,226.162 923.167,226.189 923.735,227.754 924.304,228.706 924.872,232.096 925.44,230.978 926.009,232.093 926.577,231.985 927.145,231.598 927.714,231.505 928.282,230.421 928.85,230.107 929.419,230.155 929.987,229.02 930.556,228.132 931.124,228.031 931.692,228.212 932.261,228.45 932.829,227.582 933.397,227.734 933.966,225.687 934.534,226.212 935.102,227.38 935.671,226.385 936.239,223.61 936.807,224.108 937.376,225.693 937.944,228.02 938.512,231.498 939.081,230.515 939.649,230.818 940.217,230.939 940.786,229.836 941.354,228.002 941.922,228.295 942.491,227.463 943.059,226.889 943.627,227.184 944.196,228.6 944.764,229.703 945.333,229.932 945.901,231.988 946.469,229.679 947.038,228.759 947.606,228.947 948.174,230.232 948.743,229.31 949.311,230.38 949.879,229.248 950.448,228.233 951.016,230.604 951.584,230.389 952.153,229.248 952.721,232.534 953.289,232.167 953.858,234.087 954.426,233.089 954.994,231.879 955.563,230.776 956.131,229.844 956.699,231.006 957.268,230.996 957.836,229.944 958.405,228.972 958.973,226.774 959.541,224.042 960.11,223.438 960.678,225.005 961.246,227.495 961.815,228.77 962.383,226.819 962.951,229.022 963.52,230.333 964.088,230.52 964.656,229.426 965.225,230.323 965.793,232.456 966.361,229.339 966.93,229.36 967.498,230.474 968.066,231.445 968.635,233.381 969.203,233.324 969.771,234.191 970.34,234.038 970.908,232.822 971.476,230.853 972.045,231.017 972.613,230.057 973.182,228.983 973.75,231.147 974.318,231.054 974.887,232.079 975.455,228.968 976.023,230.14 976.592,230.161 977.16,230.393 977.728,225.206 978.297,226.582 978.865,224.874 979.433,227.575 980.002,229.754 980.57,229.871 981.138,232.168 981.707,231.109 982.275,231.157 982.843,232.155 983.412,233.132 983.98,228.836 984.548,228.814 985.117,229.09 985.685,229.422 986.253,227.432 986.822,228.778 987.39,230.065 987.959,231.186 988.527,232.332 989.095,231.244 989.664,233.119 990.232,231.972 990.8,233.021 991.369,232.901 991.937,232.953 992.505,230.562 993.074,231.529 993.642,230.586 994.21,230.569 994.779,231.623 995.347,232.815 995.915,232.727 996.484,236.826 997.052,236.523 997.62,235.933 998.189,235.618 998.757,235.197 999.325,235.853 999.894,235.417 1000.46,235.03 1001.03,233.624 1001.6,234.292 1002.17,233.904 1002.74,232.451 1003.3,232.219 1003.87,234.886 1004.44,234.223 1005.01,231.9 1005.58,230.764 1006.15,230.766 1006.71,230.567 1007.28,230.674 1007.85,231.405 1008.42,231.417 1008.99,232.464 1009.56,232.268 1010.12,234.343 1010.69,232.962 1011.26,233.742 1011.83,233.504 1012.4,233.209 1012.97,231.863 1013.53,232.675 1014.1,233.462 1014.67,235.102 1015.24,232.661 1015.81,230.24 1016.38,230.14 1016.94,230.052 1017.51,228.852 1018.08,226.861 1018.65,228.894 1019.22,230.036 1019.79,229.786 1020.35,229.767 1020.92,229.826 1021.49,230.699 1022.06,230.563 1022.63,230.557 1023.2,230.396 1023.76,230.494 1024.33,232.422 1024.9,232.166 1025.47,233.257 1026.04,230.89 1026.61,228.927 1027.17,230.97 1027.74,229.836 1028.31,230.601 1028.88,229.346 1029.45,230.456 1030.02,231.12 1030.58,230.073 1031.15,232.032 1031.72,234.019 1032.29,234.677 1032.86,236.262 1033.43,234.618 1033.99,234.189 1034.56,231.625 1035.13,231.595 1035.7,229.422 1036.27,229.26 1036.84,229.232 1037.4,228.183 1037.97,229.183 1038.54,226.104 1039.11,226.185 1039.68,226.208 1040.25,227.576 1040.81,227.791 1041.38,228.081 1041.95,226.206 1042.52,226.56 1043.09,227.74 1043.66,228.684 1044.22,226.662 1044.79,225.706 1045.36,223.821 1045.93,224.384 1046.5,224.571 1047.07,223.775 1047.63,224.208 1048.2,223.763 1048.77,226.407 1049.34,226.534 1049.91,224.907 1050.48,225.15 1051.05,225.399 1051.61,224.846 1052.18,226.319 1052.75,226.64 1053.32,227.866 1053.89,228.081 1054.46,227.346 1055.02,227.546 1055.59,226.969 1056.16,227.425 1056.73,229.74 1057.3,227.727 1057.87,227.657 1058.43,227.012 1059,228.249 1059.57,228.354 1060.14,227.669 1060.71,229.88 1061.28,230.866 1061.84,230.863 1062.41,231.967 1062.98,228.947 1063.55,233.221 1064.12,233.078 1064.69,232.83 1065.25,231.74 1065.82,231.706 1066.39,231.366 1066.96,230.284 1067.53,230.267 1068.1,230.534 1068.66,227.535 1069.23,228.557 1069.8,229.794 1070.37,230.067 1070.94,230.258 1071.51,232.482 1072.07,232.459 1072.64,231.386 1073.21,232.373 1073.78,232.346 1074.35,234.233 1074.92,234.19 1075.48,233.803 1076.05,233.503 1076.62,232.426 1077.19,234.39 1077.76,234.141 1078.33,234.776 1078.89,233.38 1079.46,232.156 1080.03,231.973 1080.6,232.122 1081.17,232.004 1081.74,231.851 1082.3,232.822 1082.87,232.56 1083.44,233.504 1084.01,232.227 1084.58,232.019 1085.15,232.843 1085.71,230.723 1086.28,229.587 1086.85,229.627 1087.42,227.685 1087.99,225.923 1088.56,226.295 1089.12,226.589 1089.69,225.404 1090.26,225.619 1090.83,225.973 1091.4,227.226 1091.97,226.715 1092.53,229.896 1093.1,227.841 1093.67,233.246 1094.24,231.87 1094.81,232.621 1095.38,234.556 1095.94,233.174 1096.51,230.131 1097.08,228.214 1097.65,228.35 1098.22,227.587 1098.79,228.686 1099.35,228.803 1099.92,229.094 1100.49,227.074 1101.06,229.565 1101.63,228.655 1102.2,229.789 1102.76,229.601 1103.33,230.633 1103.9,231.522 1104.47,232.392 1105.04,232.223 1105.61,233.272 1106.17,233.924 1106.74,233.699 1107.31,234.695 1107.88,236.26 1108.45,234.709 1109.02,232.345 1109.58,232.423 1110.15,231.143 1110.72,230.977 1111.29,229.861 1111.86,227.961 1112.43,228.171 1112.99,227.446 1113.56,227.623 1114.13,226.681 1114.7,226.639 1115.27,229.03 1115.84,227.951 1116.4,231.074 1116.97,230.909 1117.54,231.723 1118.11,232.672 1118.68,233.601 1119.25,234.402 1119.81,234.274 1120.38,231.978 1120.95,231.023 1121.52,230.037 1122.09,231.962 1122.66,233.061 1123.23,233.92 1123.79,234.531 1124.36,234.021 1124.93,233.587 1125.5,233.227 1126.07,231.24 1126.64,234.47 1127.2,235.032 1127.77,232.252 1128.34,232.223 1128.91,232.784 1129.48,232.637 1130.05,233.272 1130.61,232.138 1131.18,230.03 1131.75,231.052 1132.32,231.029 1132.89,233.148 1133.46,232.801 1134.02,233.325 1134.59,234.971 1135.16,234.484 1135.73,233.223 1136.3,231.873 1136.87,229.616 1137.43,228.459 1138,227.353 1138.57,226.49 1139.14,228.712 1139.71,228.664 1140.28,228.683 1140.84,228.529 1141.41,230.603 1141.98,232.498 1142.55,232.332 1143.12,231.868 1143.69,230.676 1144.25,231.328 1144.82,231.581 1145.39,231.405 1145.96,229.284 1146.53,230.409 1147.1,231.415 1147.66,231.397 1148.23,229.341 1148.8,227.32 1149.37,226.486 1149.94,227.586 1150.51,227.471 1151.07,228.553 1151.64,225.47 1152.21,223.496 1152.78,223.826 1153.35,226.329 1153.92,225.307 1154.48,226.43 1155.05,226.564 1155.62,226.576 1156.19,228.694 1156.76,228.834 1157.33,228.845 1157.89,227.584 1158.46,230.822 1159.03,229.756 1159.6,228.829 1160.17,227.948 1160.74,227.836 1161.3,226.995 1161.87,223.968 1162.44,222.351 1163.01,221.646 1163.58,222.322 1164.15,224.934 1164.71,225.223 1165.28,226.628 1165.85,227.906 1166.42,228.963 1166.99,228.035 1167.56,227.164 1168.12,227.769 1168.69,225.918 1169.26,227.453 1169.83,228.368 1170.4,229.743 1170.97,230.716 1171.53,230.661 1172.1,229.51 1172.67,228.436 1173.24,227.473 1173.81,226.717 1174.38,227.746 1174.94,226.944 1175.51,227.125 1176.08,230.382 1176.65,228.28 1177.22,229.694 1177.79,230.915 1178.35,229.819 1178.92,229.9 1179.49,230.047 1180.06,229.167 1180.63,231.523 1181.2,231.487 1181.76,230.395 1182.33,232.627 1182.9,230.674 1183.47,229.705 1184.04,231.766 1184.61,233.763 1185.17,233.683 1185.74,232.67 1186.31,232.343 1186.88,232.224 1187.45,231.103 1188.02,231.03 1188.58,232.206 1189.15,233.213 1189.72,233.23 1190.29,234.195 1190.86,232.827 1191.43,233.668 1192,233.585 1192.56,233.461 1193.13,232.35 1193.7,232.232 1194.27,232.152 1194.84,231.236 1195.41,229.378 1195.97,228.56 1196.54,227.559 1197.11,227.806 1197.68,229.047 1198.25,230.009 1198.82,229.177 1199.38,230.386 1199.95,231.334 1200.52,230.451 1201.09,232.9 1201.66,234.94 1202.23,235.698 1202.79,235.198 1203.36,233.52 1203.93,232.223 1204.5,231.116 1205.07,231.023 1205.64,231.077 1206.2,230.993 1206.77,231.886 1207.34,232.909 1207.91,231.709 1208.48,229.569 1209.05,229.362 1209.61,230.438 1210.18,231.282 1210.75,231.015 1211.32,229.865 1211.89,228.956 1212.46,228.947 1213.02,229.959 1213.59,229.829 1214.16,230.683 1214.73,230.605 1215.3,230.565 1215.87,229.47 1216.43,230.627 1217,228.568 1217.57,231.816 1218.14,229.781 1218.71,231.82 1219.28,232.44 1219.84,233.293 1220.41,232.871 1220.98,231.472 1221.55,229.401 1222.12,229.545 1222.69,229.779 1223.25,229.875 1223.82,228.743 1224.39,228.808 1224.96,225.701 1225.53,223.933 1226.1,225.373 1226.66,226.806 1227.23,226.148 1227.8,225.471 1228.37,225.585 1228.94,223.833 1229.51,223.197 1230.07,224.689 1230.64,223.27 1231.21,224.995 1231.78,225.656 1232.35,221.956 1232.92,222.617 1233.48,225.143 1234.05,226.728 1234.62,224.011 1235.19,222.337 1235.76,224.604 1236.33,226.035 1236.89,228.384 1237.46,229.769 1238.03,230.356 1238.6,231.386 1239.17,230.417 1239.74,229.396 1240.3,230.674 1240.87,230.582 1241.44,231.703 1242.01,231.569 1242.58,231.797 1243.15,229.854 1243.71,231.863 1244.28,231.734 1244.85,232.759 1245.42,230.545 1245.99,230.654 1246.56,230.919 1247.12,230.895 1247.69,229.846 1248.26,230.021 1248.83,230.061 1249.4,230.119 1249.97,228.077 1250.53,226.224 1251.1,224.599 1251.67,225.022 1252.24,225.292 1252.81,225.756 1253.38,221.951 1253.94,225.774 1254.51,227.119 1255.08,227.528 1255.65,228.707 1256.22,231 1256.79,231.087 1257.35,230.81 1257.92,231.077 1258.49,234.525 1259.06,233.237 1259.63,234.137 1260.2,232.937 1260.76,232.724 1261.33,232.459 1261.9,232.493 1262.47,232.463 1263.04,232.49 1263.61,231.466 1264.18,234.684 1264.74,233.266 1265.31,233.228 1265.88,234.168 1266.45,233.885 1267.02,235.839 1267.59,235.53 1268.15,237.416 1268.72,234.907 1269.29,233.761 1269.86,233.691 1270.43,233.376 1271,233.202 1271.56,233.091 1272.13,233.635 1272.7,233.562 1273.27,237.53 1273.84,239.134 1274.41,237.279 1274.97,238.662 1275.54,237.23 1276.11,235.608 1276.68,234.193 1277.25,231.952 1277.82,231.783 1278.38,230.709 1278.95,231.595 1279.52,231.569 1280.09,232.53 1280.66,231.032 1281.23,230.117 1281.79,228.171 1282.36,227.372 1282.93,226.45 1283.5,226.784 1284.07,228.136 1284.64,228.32 1285.2,227.503 1285.77,228.518 1286.34,227.833 1286.91,228.05 1287.48,229.177 1288.05,230.393 1288.61,229.566 1289.18,229.582 1289.75,230.615 1290.32,230.635 1290.89,228.635 1291.46,227.84 1292.02,228.1 1292.59,228.197 1293.16,228.324 1293.73,228.335 1294.3,226.506 1294.87,226.75 1295.43,227.958 1296,229.25 1296.57,228.218 1297.14,228.349 1297.71,228.577 1298.28,228.717 1298.84,228.776 1299.41,229.766 1299.98,230.769 1300.55,232.91 1301.12,233.475 1301.69,234.188 1302.25,234.882 1302.82,234.407 1303.39,236.057 1303.96,232.646 1304.53,233.741 1305.1,232.255 1305.66,231.049 1306.23,233.178 1306.8,234.198 1307.37,233.929 1307.94,233.348 1308.51,234.151 1309.07,236.9 1309.64,235.177 1310.21,233.677 1310.78,233.364 1311.35,233.201 1311.92,231.976 1312.48,231.815 1313.05,231.637 1313.62,228.297 1314.19,228.224 1314.76,229.23 1315.33,229.228 1315.89,229.243 1316.46,229.97 1317.03,228.789 1317.6,229.908 1318.17,230.867 1318.74,227.489 1319.3,226.399 1319.87,224.521 1320.44,223.842 1321.01,224.23 1321.58,224.644 1322.15,225.183 1322.71,226.781 1323.28,225.843 1323.85,226.121 1324.42,226.535 1324.99,223.627 1325.56,225.249 1326.12,223.59 1326.69,224.932 1327.26,225.321 1327.83,224.488 1328.4,224.886 1328.97,225.387 1329.53,224.643 1330.1,227.936 1330.67,228.034 1331.24,229.281 1331.81,230.293 1332.38,228.31 1332.94,227.521 1333.51,226.821 1334.08,228.372 1334.65,229.545 1335.22,228.747 1335.79,228.07 1336.36,226.063 1336.92,228.507 1337.49,231.97 1338.06,231.753 1338.63,230.889 1339.2,229.774 1339.77,229.636 1340.33,231.631 1340.9,232.689 1341.47,233.642 1342.04,232.311 1342.61,232.122 1343.18,232.09 1343.74,231.833 1344.31,234.777 1344.88,234.324 1345.45,231.97 1346.02,231.944 1346.59,231.899 1347.15,228.723 1347.72,228.864 1348.29,230.971 1348.86,233.223 1349.43,234.233 1350,235.044 1350.56,232.713 1351.13,233.584 1351.7,233.462 1352.27,232.037 1352.84,232.804 1353.41,235.466 1353.97,233.975 1354.54,233.592 1355.11,232.086 1355.68,231.079 1356.25,228.847 1356.82,228.048 1357.38,229.365 1357.95,230.237 1358.52,228.316 1359.09,225.437 1359.66,226.662 1360.23,225.82 1360.79,226.243 1361.36,226.585 1361.93,224.607 1362.5,225.213 1363.07,226.588 1363.64,226.789 1364.2,224.967 1364.77,227.299 1365.34,228.59 1365.91,230.824 1366.48,231.953 1367.05,231.985 1367.61,230.946 1368.18,230.155 1368.75,231.441 1369.32,231.523 1369.89,230.509 1370.46,230.523 1371.02,232.528 1371.59,234.501 1372.16,232.954 1372.73,233.67 1373.3,232.389 1373.87,232.494 1374.43,229.366 1375,230.414 1375.57,230.598 1376.14,230.56 1376.71,229.671 1377.28,231.912 1377.84,232.969 1378.41,232.776 1378.98,232.688 1379.55,230.24 1380.12,229.147 1380.69,229.041 1381.25,226.917 1381.82,225.161 1382.39,225.64 1382.96,225.088 1383.53,224.354 1384.1,223.95 1384.66,225.614 1385.23,224.055 1385.8,222.432 1386.37,224.21 1386.94,224.887 1387.51,225.436 1388.07,224.68 1388.64,227.388 1389.21,227.618 1389.78,226.696 1390.35,226.094 1390.92,228.802 1391.48,229.064 1392.05,230.315 1392.62,232.305 1393.19,233.003 1393.76,232.922 1394.33,230.839 1394.89,231.902 1395.46,232.796 1396.03,231.605 1396.6,233.66 1397.17,235.534 1397.74,233.084 1398.3,232.039 1398.87,231.731 1399.44,229.648 1400.01,228.852 1400.58,227.899 1401.15,228.085 1401.71,226.993 1402.28,226.378 1402.85,225.771 1403.42,227.213 1403.99,227.578 1404.56,225.807 1405.13,226.123 1405.69,222.328 1406.26,223.195 1406.83,226.996 1407.4,229.564 1407.97,229.598 1408.54,229.837 1409.1,230.594 1409.67,230.627 1410.24,230.472 1410.81,231.59 1411.38,231.783 1411.95,231.617 1412.51,232.525 1413.08,231.341 1413.65,231.574 1414.22,232.635 1414.79,230.816 1415.36,232.066 1415.92,233.937 1416.49,235.94 1417.06,236.669 1417.63,237.453 1418.2,239.316 1418.77,239.9 1419.33,241.304 1419.9,238.444 1420.47,238.786 1421.04,238.165 1421.61,237.69 1422.18,236.235 1422.74,235.883 1423.31,234.543 1423.88,235.494 1424.45,238.183 1425.02,237.392 1425.59,236.803 1426.15,238.165 1426.72,237.443 1427.29,237.993 1427.86,238.504 1428.43,237.71 1429,236.092 1429.56,236.764 1430.13,234.171 1430.7,235.857 1431.27,233.527 1431.84,232.292 1432.41,230.888 1432.97,230.64 1433.54,230.423 1434.11,231.216 1434.68,231.006 1435.25,231.823 1435.82,232.503 1436.38,232.895 1436.95,233.528 1437.52,234.204 1438.09,234.73 1438.66,234.315 1439.23,232.96 1439.79,234.809 1440.36,234.065 1440.93,232.655 1441.5,232.209 1442.07,231.95 1442.64,231.763 1443.2,230.598 1443.77,230.614 1444.34,233.627 1444.91,229.088 1445.48,229.774 1446.05,228.373 1446.61,230.408 1447.18,229.127 1447.75,228.917 1448.32,229.853 1448.89,228.575 1449.46,228.453 1450.02,229.542 1450.59,232.244 1451.16,229.851 1451.73,230.552 1452.3,233.298 1452.87,230.663 1453.43,229.506 1454,228.501 1454.57,227.546 1455.14,226.651 1455.71,229.041 1456.28,228.119 1456.84,228.2 1457.41,228.13 1457.98,228.12 1458.55,227.089 1459.12,226.157 1459.69,225.276 1460.25,225.532 1460.82,225.596 1461.39,226.637 1461.96,225.74 1462.53,225.858 1463.1,227.173 1463.66,227.364 1464.23,228.481 1464.8,226.468 1465.37,225.866 1465.94,226.094 1466.51,224.304 1467.07,223.583 1467.64,224.029 1468.21,224.463 1468.78,223.646 1469.35,224.09 1469.92,225.491 1470.48,227.953 1471.05,228.089 1471.62,227.226 1472.19,228.403 1472.76,229.414 1473.33,232.408 1473.89,232.119 1474.46,232.141 1475.03,230.252 1475.6,231.187 1476.17,232.025 1476.74,225.651 1477.31,225.952 1477.87,226.232 1478.44,226.28 1479.01,227.515 1479.58,227.781 1480.15,228.087 1480.72,229.193 1481.28,229.156 1481.85,230.479 1482.42,231.539 1482.99,229.252 1483.56,229.255 1484.13,229.427 1484.69,225.205 1485.26,221.398 1485.83,221.973 1486.4,223.399 1486.97,221.875 1487.54,223.599 1488.1,225.068 1488.67,226.309 1489.24,226.389 1489.81,227.611 1490.38,228.762 1490.95,230.135 1491.51,228.173 1492.08,227.192 1492.65,228.464 1493.22,229.806 1493.79,226.929 1494.36,228.334 1494.92,229.58 1495.49,228.673 1496.06,226.598 1496.63,227.913 1497.2,228.137 1497.77,230.379 1498.33,231.576 1498.9,232.361 1499.47,232.176 1500.04,233.395 1500.61,234.268 1501.18,234.476 1501.74,236.392 1502.31,237.001 1502.88,237.351 1503.45,237.787 1504.02,234.798 1504.59,234.698 1505.15,232.477 1505.72,233.385 1506.29,234.277 1506.86,234.226 1507.43,231.886 1508,230.475 1508.56,228.722 1509.13,228.648 1509.7,229.662 1510.27,229.655 1510.84,229.616 1511.41,231.936 1511.97,231.625 1512.54,229.514 1513.11,230.371 1513.68,229.376 1514.25,228.437 1514.82,227.703 1515.38,225.808 1515.95,226.046 1516.52,227.236 1517.09,224.395 1517.66,222.668 1518.23,223.312 1518.79,225.828 1519.36,227.168 1519.93,226.322 1520.5,228.745 1521.07,230.01 1521.64,228.048 1522.2,228.344 1522.77,228.43 1523.34,229.729 1523.91,227.885 1524.48,230.097 1525.05,230.131 1525.61,231.131 1526.18,233.043 1526.75,233.013 1527.32,233.922 1527.89,234.861 1528.46,234.64 1529.02,234.307 1529.59,234.181 1530.16,234.041 1530.73,232.934 1531.3,232.739 1531.87,232.307 1532.43,231.83 1533,231.766 1533.57,231.563 1534.14,231.593 1534.71,232.51 1535.28,232.448 1535.84,232.376 1536.41,233.529 1536.98,234.376 1537.55,234.023 1538.12,232.683 1538.69,231.728 1539.25,230.573 1539.82,228.536 1540.39,226.627 1540.96,226.654 1541.53,229.07 1542.1,230.026 1542.66,229.99 1543.23,229.934 1543.8,230.024 1544.37,231.038 1544.94,232.024 1545.51,232.015 1546.08,235.112 1546.64,234.941 1547.21,235.364 1547.78,236.005 1548.35,234.566 1548.92,234.011 1549.49,234.934 1550.05,235.504 1550.62,234.937 1551.19,234.462 1551.76,233.998 1552.33,233.579 1552.9,233.219 1553.46,231.809 1554.03,233.665 1554.6,232.301 1555.17,232.832 1555.74,233.729 1556.31,233.563 1556.87,233.22 1557.44,232.71 1558.01,229.519 1558.58,226.368 1559.15,226.592 1559.72,226.044 1560.28,229.374 1560.85,227.31 1561.42,225.348 1561.99,225.777 1562.56,223.797 1563.13,223.352 1563.69,224.712 1564.26,224.911 1564.83,225.291 1565.4,226.4 1565.97,227.832 1566.54,226.769 1567.1,226.879 1567.67,227.993 1568.24,228.25 1568.81,229.444 1569.38,230.495 1569.95,229.348 1570.51,229.29 1571.08,228.298 1571.65,228.499 1572.22,229.341 1572.79,228.31 1573.36,227.07 1573.92,227.202 1574.49,231.599 1575.06,232.273 1575.63,232.064 1576.2,231.807 1576.77,232.715 1577.33,232.457 1577.9,232.257 1578.47,232.379 1579.04,230.139 1579.61,229.981 1580.18,228.997 1580.74,228.805 1581.31,228.853 1581.88,229.937 1582.45,230.935 1583.02,230.949 1583.59,230.897 1584.15,230.827 1584.72,230.588 1585.29,228.485 1585.86,227.476 1586.43,226.725 1587,228.248 1587.56,229.472 1588.13,230.465 1588.7,232.415 1589.27,233.496 1589.84,233.392 1590.41,234.079 1590.97,235.61 1591.54,235.268 1592.11,232.936 1592.68,231.624 1593.25,230.424 1593.82,231.311 1594.38,230.113 1594.95,231.15 1595.52,228.025 1596.09,226.066 1596.66,229.217 1597.23,229.119 1597.79,228.171 1598.36,227.295 1598.93,226.489 1599.5,227.946 1600.07,227.224 1600.64,225.217 1601.2,224.481 1601.77,223.74 1602.34,223.117 1602.91,222.691 1603.48,223.325 1604.05,224.072 1604.61,224.396 1605.18,225.907 1605.75,226.183 1606.32,225.562 1606.89,225.87 1607.46,227.16 1608.02,229.439 1608.59,229.613 1609.16,228.603 1609.73,228.698 1610.3,229.814 1610.87,233.139 1611.43,233.193 1612,232.968 1612.57,233.901 1613.14,232.756 1613.71,232.498 1614.28,232.569 1614.84,229.374 1615.41,230.431 1615.98,230.685 1616.55,228.901 1617.12,230.225 1617.69,229.295 1618.26,228.301 1618.82,228.399 1619.39,225.447 1619.96,226.85 1620.53,227.218 1621.1,226.419 1621.67,229.971 1622.23,231.001 1622.8,231.998 1623.37,231.613 1623.94,231.537 1624.51,231.616 1625.08,233.843 1625.64,233.604 1626.21,231.357 1626.78,233.426 1627.35,233.313 1627.92,235.17 1628.49,234.192 1629.05,234.962 1629.62,234.557 1630.19,233.134 1630.76,232.02 1631.33,231.9 1631.9,231.857 1632.46,233.811 1633.03,234.788 1633.6,232.774 1634.17,233.638 1634.74,232.281 1635.31,232.059 1635.87,235.012 1636.44,232.72 1637.01,230.395 1637.58,230.566 1638.15,231.431 1638.72,233.368 1639.28,232.196 1639.85,231.025 1640.42,229.949 1640.99,226.749 1641.56,229.97 1642.13,230.965 1642.69,234.221 1643.26,231.726 1643.83,232.404 1644.4,228.949 1644.97,233.174 1645.54,232.827 1646.1,233.618 1646.67,232.372 1647.24,232.263 1647.81,229.977 1648.38,229.833 1648.95,229.868 1649.51,229.468 1650.08,229.542 1650.65,229.711 1651.22,229.946 1651.79,229.954 1652.36,231.912 1652.92,231.671 1653.49,231.456 1654.06,231.566 1654.63,231.349 1655.2,231.178 1655.77,230.81 1656.33,230.515 1656.9,231.504 1657.47,233.475 1658.04,231.879 1658.61,231.539 1659.18,230.258 1659.74,230.103 1660.31,228.992 1660.88,228.812 1661.45,227.787 1662.02,226.766 1662.59,227.835 1663.15,228.996 1663.72,230.985 1664.29,231.65 1664.86,229.488 1665.43,230.32 1666,228.228 1666.56,228.605 1667.13,231.881 1667.7,232.823 1668.27,234.682 1668.84,232.082 1669.41,233.939 1669.97,235.747 1670.54,233.079 1671.11,232.709 1671.68,231.425 1672.25,233.392 1672.82,233.015 1673.38,234.648 1673.95,233.082 1674.52,232.846 1675.09,231.258 1675.66,227.993 1676.23,224.196 1676.79,224.241 1677.36,223.502 1677.93,223.803 1678.5,224.157 1679.07,224.497 1679.64,223.765 1680.2,223.254 1680.77,224.83 1681.34,225.265 1681.91,225.37 1682.48,225.537 1683.05,226.896 1683.61,224.877 1684.18,225.249 1684.75,224.562 1685.32,224.664 1685.89,225.06 1686.46,225.515 1687.02,222.61 1687.59,223.127 1688.16,225.786 1688.73,225.028 1689.3,225.522 1689.87,225.627 1690.44,228.003 1691,225.927 1691.57,224.183 1692.14,224.843 1692.71,225.202 1693.28,227.583 1693.85,228.813 1694.41,231.007 1694.98,231.866 1695.55,232.749 1696.12,232.837 1696.69,231.56 1697.26,233.376 1697.82,232.15 1698.39,233.222 1698.96,232.982 1699.53,231.768 1700.1,230.737 1700.67,232.051 1701.23,232.002 1701.8,234.018 1702.37,233.683 1702.94,233.667 1703.51,236.556 1704.08,233.912 1704.64,232.716 1705.21,234.358 1705.78,232.122 1706.35,231.776 1706.92,230.729 1707.49,231.734 1708.05,230.65 1708.62,232.741 1709.19,232.803 1709.76,231.733 1710.33,230.742 1710.9,230.472 1711.46,232.441 1712.03,232.329 1712.6,230.014 1713.17,231.893 1713.74,229.682 1714.31,227.632 1714.87,224.584 1715.44,224.269 1716.01,224.761 1716.58,225.236 1717.15,227.608 1717.72,227.816 1718.28,227.109 1718.85,228.415 1719.42,228.781 1719.99,226.997 1720.56,227.203 1721.13,225.521 1721.69,223.97 1722.26,224.683 1722.83,223.938 1723.4,226.662 1723.97,226.811 1724.54,226.236 1725.1,227.371 1725.67,226.62 1726.24,227.892 1726.81,229.128 1727.38,229.25 1727.95,230.432 1728.51,229.494 1729.08,229.543 1729.65,226.643 1730.22,228.951 1730.79,230.083 1731.36,226.088 1731.92,226.684 1732.49,226.006 1733.06,227.398 1733.63,227.815 1734.2,229.18 1734.77,230.209 1735.33,230.323 1735.9,230.383 1736.47,233.412 1737.04,233.295 1737.61,230.844 1738.18,230.725 1738.74,231.832 1739.31,230.677 1739.88,232.949 1740.45,231.72 1741.02,230.568 1741.59,229.747 1742.15,228.777 1742.72,231.041 1743.29,229.868 1743.86,229.973 1744.43,229.898 1745,229.159 1745.56,229.231 1746.13,227.454 1746.7,230.896 1747.27,230.758 1747.84,230.766 1748.41,228.681 1748.97,229.096 1749.54,229.367 1750.11,227.448 1750.68,227.705 1751.25,226.032 1751.82,226.371 1752.38,224.634 1752.95,223.448 1753.52,226.948 1754.09,228.213 1754.66,227.327 1755.23,230.815 1755.79,229.906 1756.36,228.997 1756.93,231.601 1757.5,232.784 1758.07,231.667 1758.64,231.761 1759.21,230.979 1759.77,231.234 1760.34,233.16 1760.91,233.176 1761.48,232.931 1762.05,235.856 1762.62,235.531 1763.18,235.533 1763.75,235.002 1764.32,235.852 1764.89,235.352 1765.46,236.202 1766.03,235.599 1766.59,237.241 1767.16,238.152 1767.73,238.626 1768.3,238.848 1768.87,238.309 1769.44,239.952 1770,239.179 1770.57,240.734 1771.14,239.974 1771.71,239.419 1772.28,239.607 1772.85,236.726 1773.41,237.241 1773.98,235.579 1774.55,233.011 1775.12,233.697 1775.69,232.204 1776.26,231.826 1776.82,232.677 1777.39,232.4 1777.96,232.24 1778.53,235.13 1779.1,235.761 1779.67,237.238 1780.23,234.525 1780.8,233.166 1781.37,233.919 1781.94,232.377 1782.51,232.19 1783.08,233.894 1783.64,233.516 1784.21,230.033 1784.78,230.9 1785.35,232.889 1785.92,232.614 1786.49,232.231 1787.05,232.125 1787.62,229.77 1788.19,230.605 1788.76,231.649 1789.33,231.426 1789.9,232.294 1790.46,231.763 1791.03,229.657 1791.6,228.458 1792.17,227.477 1792.74,226.264 1793.31,225.496 1793.87,224.817 1794.44,224.312 1795.01,223.573 1795.58,222.884 1796.15,222.105 1796.72,223.596 1797.28,223.961 1797.85,224.387 1798.42,222.728 1798.99,224.287 1799.56,225.569 1800.13,224.93 1800.69,224.407 1801.26,223.682 1801.83,224.018 1802.4,223.293 1802.97,223.718 1803.54,223.149 1804.1,221.286 1804.67,219.895 1805.24,221.485 1805.81,222.07 1806.38,224.647 1806.95,227.912 1807.51,227.082 1808.08,226.407 1808.65,225.732 1809.22,227.11 1809.79,229.589 1810.36,228.748 1810.92,231.016 1811.49,233.276 1812.06,234.26 1812.63,234.043 1813.2,232.687 1813.77,231.513 1814.33,231.287 1814.9,231.109 1815.47,232.178 1816.04,232.206 1816.61,230.822 1817.18,230.712 1817.74,229.773 1818.31,230.843 1818.88,230.888 1819.45,231.186 1820.02,233.096 1820.59,229.865 1821.15,232.026 1821.72,231.957 1822.29,229.739 1822.86,230.93 1823.43,230 1824,231.006 1824.56,231.91 1825.13,230.946 1825.7,234.069 1826.27,233.843 1826.84,232.628 1827.41,231.49 1827.97,227.219 1828.54,226.339 1829.11,226.62 1829.68,226.93 1830.25,227.096 1830.82,227.383 1831.39,225.495 1831.95,226.807 1832.52,225.917 1833.09,225.235 1833.66,224.564 1834.23,226.083 1834.8,227.314 1835.36,230.688 1835.93,232.619 1836.5,232.538 1837.07,232.405 1837.64,229.253 1838.21,228.48 1838.77,230.67 1839.34,231.746 1839.91,232.674 1840.48,232.629 1841.05,232.559 1841.62,232.364 1842.18,234.196 1842.75,233.869 1843.32,233.727 1843.89,233.709 1844.46,233.52 1845.03,233.263 1845.59,233.012 1846.16,232.575 1846.73,232.545 1847.3,231.5 1847.87,230.372 1848.44,231.431 1849,229.2 1849.57,230.531 1850.14,229.351 1850.71,229.453 1851.28,230.567 1851.85,230.485 1852.41,229.618 1852.98,231.529 1853.55,231.344 1854.12,230.398 1854.69,231.475 1855.26,233.584 1855.82,233.067 1856.39,230.868 1856.96,231.201 1857.53,231.34 1858.1,231.127 1858.67,229.962 1859.23,232.092 1859.8,232.884 1860.37,230.582 1860.94,230.581 1861.51,229.446 1862.08,230.29 1862.64,230.248 1863.21,231.097 1863.78,231.061 1864.35,231 1864.92,231.995 1865.49,232.073 1866.05,232.76 1866.62,231.474 1867.19,230.081 1867.76,230.098 1868.33,232.098 1868.9,231.035 1869.46,231.062 1870.03,230.927 1870.6,230.766 1871.17,226.508 1871.74,227.799 1872.31,227.926 1872.87,226.97 1873.44,228.15 1874.01,228.271 1874.58,229.402 1875.15,228.528 1875.72,227.706 1876.28,227.77 1876.85,227.125 1877.42,228.242 1877.99,230.427 1878.56,230.345 1879.13,230.367 1879.69,227.22 1880.26,227.331 1880.83,227.574 1881.4,229.734 1881.97,230.744 1882.54,230.662 1883.1,230.409 1883.67,228.407 1884.24,227.419 1884.81,228.557 1885.38,228.725 1885.95,228.929 1886.51,231.1 1887.08,228.758 1887.65,229.721 1888.22,228.685 1888.79,229.687 1889.36,229.661 1889.92,231.784 1890.49,233.928 1891.06,232.306 1891.63,231.953 1892.2,233.895 1892.77,232.844 1893.33,233.63 1893.9,232.334 1894.47,234.218 1895.04,233.939 1895.61,232.849 1896.18,231.621 1896.74,232.665 1897.31,234.496 1897.88,233.014 1898.45,233.731 1899.02,234.403 1899.59,233.949 1900.16,233.469 1900.72,234.315 1901.29,234.779 1901.86,235.113 1902.43,234.715 1903,233.249 1903.57,229.713 1904.13,227.415 1904.7,227.289 1905.27,228.487 1905.84,229.563 1906.41,228.472 1906.98,229.352 1907.54,229.199 1908.11,228.127 1908.68,229.398 1909.25,230.329 1909.82,228.076 1910.39,229.124 1910.95,226.123 1911.52,228.493 1912.09,227.328 1912.66,226.644 1913.23,226.905 1913.8,229.121 1914.36,227.008 1914.93,226.873 1915.5,227.268 1916.07,226.643 1916.64,230.11 1917.21,230.9 1917.77,229.732 1918.34,230.671 1918.91,230.475 1919.48,229.431 1920.05,228.561 1920.62,228.856 1921.18,227.824 1921.75,226.865 1922.32,228.348 1922.89,228.458 1923.46,228.451 1924.03,227.577 1924.59,227.874 1925.16,229.104 1925.73,231.304 1926.3,230.024 1926.87,229.909 1927.44,228.661 1928,227.714 1928.57,228.708 1929.14,228.607 1929.71,229.856 1930.28,230.957 1930.85,231.973 1931.41,230.824 1931.98,230.709 1932.55,230.712 1933.12,231.856 1933.69,232.654 1934.26,231.383 1934.82,233.252 1935.39,231.887 1935.96,229.463 1936.53,229.595 1937.1,229.619 1937.67,231.823 1938.23,228.608 1938.8,228.928 1939.37,228.03 1939.94,227.282 1940.51,228.421 1941.08,225.467 1941.64,223.88 1942.21,224.485 1942.78,227.021 1943.35,227.356 1943.92,227.297 1944.49,229.479 1945.05,228.561 1945.62,225.585 1946.19,226.064 1946.76,226.266 1947.33,228.774 1947.9,229.84 1948.46,229.837 1949.03,229.891 1949.6,229.884 1950.17,226.961 1950.74,225.225 1951.31,224.347 1951.87,224.66 1952.44,226.234 1953.01,226.617 1953.58,227.987 1954.15,227.306 1954.72,227.453 1955.28,228.009 1955.85,226.088 1956.42,226.61 1956.99,225.834 1957.56,227.236 1958.13,227.699 1958.69,228.065 1959.26,229.431 1959.83,228.615 1960.4,228.961 1960.97,229.912 1961.54,230.122 1962.1,231.489 1962.67,231.467 1963.24,230.596 1963.81,230.608 1964.38,229.598 1964.95,227.694 1965.51,228.847 1966.08,231.122 1966.65,232.34 1967.22,229.98 1967.79,230.194 1968.36,229.099 1968.92,230.326 1969.49,232.46 1970.06,233.436 1970.63,231.066 1971.2,233.175 1971.77,232.978 1972.34,232.022 1972.9,233.031 1973.47,230.756 1974.04,229.638 1974.61,229.676 1975.18,228.798 1975.75,229.002 1976.31,228.985 1976.88,226.008 1977.45,224.245 1978.02,225.783 1978.59,225.173 1979.16,226.363 1979.72,230.887 1980.29,231.037 1980.86,230.263 1981.43,228.239 1982,228.551 1982.57,227.838 1983.13,228.044 1983.7,229.301 1984.27,228.591 1984.84,226.832 1985.41,229.103 1985.98,231.294 1986.54,230.282 1987.11,228.462 1987.68,228.785 1988.25,232.19 1988.82,233.212 1989.39,233.026 1989.95,232.969 1990.52,234.049 1991.09,232.916 1991.66,233.968 1992.23,234.664 1992.8,235.519 1993.36,234.198 1993.93,236.003 1994.5,236.655 1995.07,236.275 1995.64,237.935 1996.21,237.38 1996.77,234.747 1997.34,233.492 1997.91,233.57 1998.48,233.277 1999.05,235.137 1999.62,237.027 2000.18,236.337 2000.75,235.63 2001.32,235.193 2001.89,235.112 2002.46,234.879 2003.03,233.743 2003.59,231.248 2004.16,230.475 2004.73,229.518 2005.3,229.568 2005.87,229.479 2006.44,229.415 2007,227.467 2007.57,227.967 2008.14,226.091 2008.71,226.368 2009.28,225.401 2009.85,225.823 2010.41,225.174 2010.98,224.419 2011.55,227.882 2012.12,227.98 2012.69,229.158 2013.26,229.043 2013.82,228.936 2014.39,229.021 2014.96,228.066 2015.53,227.338 2016.1,225.612 2016.67,227.851 2017.23,227.068 2017.8,227.622 2018.37,227.628 2018.94,223.479 2019.51,222.934 2020.08,225.566 2020.64,226.969 2021.21,230.346 2021.78,227.51 2022.35,227.682 2022.92,227.897 2023.49,229.184 2024.05,228.324 2024.62,229.506 2025.19,231.673 2025.76,233.542 2026.33,233.333 2026.9,233.179 2027.46,233.863 2028.03,235.616 2028.6,236.378 2029.17,236.059 2029.74,233.436 2030.31,231.338 2030.87,231.333 2031.44,230.31 2032.01,229.323 2032.58,228.578 2033.15,233.911 2033.72,232.682 2034.28,234.871 2034.85,235.799 2035.42,235.461 2035.99,239.02 2036.56,235.324 2037.13,236.863 2037.69,237.369 2038.26,237.892 2038.83,238.512 2039.4,238.96 2039.97,240.337 2040.54,240.502 2041.11,239.508 2041.67,239.807 2042.24,237.834 2042.81,234.986 2043.38,235.586 2043.95,237.049 2044.52,237.512 2045.08,237.028 2045.65,235.262 2046.22,234.76 2046.79,233.192 2047.36,233.025 2047.93,232.865 2048.49,231.578 2049.06,230.184 2049.63,228.855 2050.2,230.761 2050.77,232.482 2051.34,233.161 2051.9,232.592 2052.47,232.396 2053.04,229.831 2053.61,229.459 2054.18,229.273 2054.75,229.25 2055.31,227.246 2055.88,227.15 2056.45,227.261 2057.02,227.402 2057.59,228.582 2058.16,228.619 2058.72,228.576 2059.29,227.44 2059.86,227.479 2060.43,225.293 2061,225.623 2061.57,225.07 2062.13,226.341 2062.7,228.699 2063.27,228.687 2063.84,226.712 2064.41,224.543 2064.98,224.714 2065.54,224.886 2066.11,224.247 2066.68,225.745 2067.25,226.963 2067.82,227.116 2068.39,226.291 2068.95,226.822 2069.52,227.072 2070.09,225.299 2070.66,225.733 2071.23,226.085 2071.8,224.37 2072.36,223.807 2072.93,224.451 2073.5,225.018 2074.07,226.474 2074.64,226.626 2075.21,227.014 2075.77,227.292 2076.34,226.654 2076.91,227.885 2077.48,227.128 2078.05,226.42 2078.62,225.632 2079.18,224.044 2079.75,223.717 2080.32,221.086 2080.89,220.666 2081.46,224.665 2082.03,222.898 2082.59,224.509 2083.16,222.785 2083.73,222.599 2084.3,221.29 2084.87,221.007 2085.44,225.768 2086,226.311 2086.57,225.587 2087.14,228.087 2087.71,229.535 2088.28,226.726 2088.85,227.229 2089.41,228.658 2089.98,228.627 2090.55,229.832 2091.12,227.246 2091.69,228.634 2092.26,232.053 2092.82,234.04 2093.39,236.01 2093.96,234.975 2094.53,236.684 2095.1,237.293 2095.67,235.865 2096.23,233.645 2096.8,236.719 2097.37,238.488 2097.94,239.834 2098.51,239.332 2099.08,241.874 2099.64,240.98 2100.21,241.386 2100.78,242.591 2101.35,240.58 2101.92,242.061 2102.49,242.207 2103.05,239.318 2103.62,241.081 2104.19,236.805 2104.76,237.282 2105.33,238.673 2105.9,238.969 2106.46,238.2 2107.03,237.683 2107.6,235.878 2108.17,236.441 2108.74,238.075 2109.31,238.287 2109.87,238.476 2110.44,240.65 2111.01,239.641 2111.58,239.826 2112.15,238.953 2112.72,233.018 2113.29,232.621 2113.85,231.182 2114.42,230.915 2114.99,229.551 2115.56,228.409 2116.13,229.448 2116.7,228.041 2117.26,225.727 2117.83,224.805 2118.4,226.963 2118.97,227.91 2119.54,227.873 2120.11,228.775 2120.67,230.626 2121.24,230.025 2121.81,227.886 2122.38,232.313 2122.95,231.698 2123.52,232.382 2124.08,231.15 2124.65,231.8 2125.22,229.059 2125.79,227.942 2126.36,225.827 2126.93,225.018 2127.49,225.225 2128.06,225.205 2128.63,225.494 2129.2,226.709 2129.77,227.907 2130.34,228.005 2130.9,226.859 2131.47,226.029 2132.04,225.14 2132.61,225.223 2133.18,226.426 2133.75,228.55 2134.31,228.627 2134.88,229.575 2135.45,228.617 2136.02,227.517 2136.59,231.78 2137.16,230.519 2137.72,230.588 2138.29,230.533 2138.86,229.461 2139.43,229.175 2140,226.712 2140.57,225.757 2141.13,227.221 2141.7,229.42 2142.27,231.611 2142.84,231.297 2143.41,230.086 2143.98,227.823 2144.54,230.036 2145.11,229.787 2145.68,227.51 2146.25,227.833 2146.82,228.699 2147.39,229.573 2147.95,227.415 2148.52,227.238 2149.09,227.293 2149.66,226.477 2150.23,227.597 2150.8,227.619 2151.36,228.727 2151.93,228.638 2152.5,226.587 2153.07,228.783 2153.64,227.797 2154.21,227.834 2154.77,227.79 2155.34,228.073 2155.91,230.061 2156.48,229.207 2157.05,229.297 2157.62,229.461 2158.18,229.375 2158.75,229.507 2159.32,230.817 2159.89,230.668 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip770)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.028\n  with uncertainty of ± 0.0025034977968666355\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01282 ± (0.0034682, 0.00357099) (MC)\n  95% confidence interval: [-4.02011, -4.00601] (MC)\n  linear error propagation: -4.01297 ± 0.00359472\n  |δ_y| = |0.00300512| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012818805304997, val_l = 0.00729445081566471, val_u = 0.0068122894890469965)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip800\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip801\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip802\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.03 2211.02,1143.03 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,984.134 2211.02,984.134 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,825.242 2211.02,825.242 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,666.35 2211.02,666.35 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,507.458 2211.02,507.458 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,348.566 2211.02,348.566 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,189.674 2211.02,189.674 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.03 365.751,1143.03 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,984.134 365.751,984.134 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,825.242 365.751,825.242 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,666.35 365.751,666.35 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,507.458 365.751,507.458 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,348.566 365.751,348.566 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,189.674 365.751,189.674 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M298.909 1128.82 Q295.298 1128.82 293.469 1132.39 Q291.664 1135.93 291.664 1143.06 Q291.664 1150.17 293.469 1153.73 Q295.298 1157.27 298.909 1157.27 Q302.543 1157.27 304.349 1153.73 Q306.177 1150.17 306.177 1143.06 Q306.177 1135.93 304.349 1132.39 Q302.543 1128.82 298.909 1128.82 M298.909 1125.12 Q304.719 1125.12 307.775 1129.73 Q310.853 1134.31 310.853 1143.06 Q310.853 1151.79 307.775 1156.39 Q304.719 1160.98 298.909 1160.98 Q293.099 1160.98 290.02 1156.39 Q286.964 1151.79 286.964 1143.06 Q286.964 1134.31 290.02 1129.73 Q293.099 1125.12 298.909 1125.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M259.557 997.478 L267.196 997.478 L267.196 971.113 L258.886 972.78 L258.886 968.52 L267.15 966.854 L271.826 966.854 L271.826 997.478 L279.465 997.478 L279.465 1001.41 L259.557 1001.41 L259.557 997.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 969.932 Q295.298 969.932 293.469 973.497 Q291.664 977.039 291.664 984.168 Q291.664 991.275 293.469 994.84 Q295.298 998.381 298.909 998.381 Q302.543 998.381 304.349 994.84 Q306.177 991.275 306.177 984.168 Q306.177 977.039 304.349 973.497 Q302.543 969.932 298.909 969.932 M298.909 966.229 Q304.719 966.229 307.775 970.835 Q310.853 975.418 310.853 984.168 Q310.853 992.895 307.775 997.502 Q304.719 1002.08 298.909 1002.08 Q293.099 1002.08 290.02 997.502 Q286.964 992.895 286.964 984.168 Q286.964 975.418 290.02 970.835 Q293.099 966.229 298.909 966.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M262.775 838.587 L279.094 838.587 L279.094 842.522 L257.15 842.522 L257.15 838.587 Q259.812 835.832 264.395 831.202 Q269.002 826.55 270.182 825.207 Q272.428 822.684 273.307 820.948 Q274.21 819.189 274.21 817.499 Q274.21 814.744 272.266 813.008 Q270.344 811.272 267.242 811.272 Q265.043 811.272 262.59 812.036 Q260.159 812.8 257.381 814.351 L257.381 809.628 Q260.205 808.494 262.659 807.915 Q265.113 807.337 267.15 807.337 Q272.52 807.337 275.715 810.022 Q278.909 812.707 278.909 817.198 Q278.909 819.327 278.099 821.249 Q277.312 823.147 275.205 825.739 Q274.627 826.411 271.525 829.628 Q268.423 832.823 262.775 838.587 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 811.04 Q295.298 811.04 293.469 814.605 Q291.664 818.147 291.664 825.276 Q291.664 832.383 293.469 835.948 Q295.298 839.489 298.909 839.489 Q302.543 839.489 304.349 835.948 Q306.177 832.383 306.177 825.276 Q306.177 818.147 304.349 814.605 Q302.543 811.04 298.909 811.04 M298.909 807.337 Q304.719 807.337 307.775 811.943 Q310.853 816.527 310.853 825.276 Q310.853 834.003 307.775 838.61 Q304.719 843.193 298.909 843.193 Q293.099 843.193 290.02 838.61 Q286.964 834.003 286.964 825.276 Q286.964 816.527 290.02 811.943 Q293.099 807.337 298.909 807.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M272.914 664.996 Q276.27 665.713 278.145 667.982 Q280.043 670.25 280.043 673.584 Q280.043 678.699 276.525 681.5 Q273.006 684.301 266.525 684.301 Q264.349 684.301 262.034 683.861 Q259.742 683.445 257.289 682.588 L257.289 678.074 Q259.233 679.209 261.548 679.787 Q263.863 680.366 266.386 680.366 Q270.784 680.366 273.076 678.63 Q275.39 676.894 275.39 673.584 Q275.39 670.528 273.238 668.815 Q271.108 667.079 267.289 667.079 L263.261 667.079 L263.261 663.236 L267.474 663.236 Q270.923 663.236 272.752 661.871 Q274.58 660.482 274.58 657.889 Q274.58 655.227 272.682 653.815 Q270.807 652.38 267.289 652.38 Q265.367 652.38 263.168 652.797 Q260.969 653.213 258.33 654.093 L258.33 649.926 Q260.992 649.186 263.307 648.815 Q265.645 648.445 267.705 648.445 Q273.029 648.445 276.131 650.875 Q279.233 653.283 279.233 657.403 Q279.233 660.274 277.59 662.264 Q275.946 664.232 272.914 664.996 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 652.149 Q295.298 652.149 293.469 655.713 Q291.664 659.255 291.664 666.385 Q291.664 673.491 293.469 677.056 Q295.298 680.597 298.909 680.597 Q302.543 680.597 304.349 677.056 Q306.177 673.491 306.177 666.385 Q306.177 659.255 304.349 655.713 Q302.543 652.149 298.909 652.149 M298.909 648.445 Q304.719 648.445 307.775 653.051 Q310.853 657.635 310.853 666.385 Q310.853 675.111 307.775 679.718 Q304.719 684.301 298.909 684.301 Q293.099 684.301 290.02 679.718 Q286.964 675.111 286.964 666.385 Q286.964 657.635 290.02 653.051 Q293.099 648.445 298.909 648.445 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M271.594 494.252 L259.789 512.701 L271.594 512.701 L271.594 494.252 M270.367 490.178 L276.247 490.178 L276.247 512.701 L281.177 512.701 L281.177 516.59 L276.247 516.59 L276.247 524.738 L271.594 524.738 L271.594 516.59 L255.992 516.59 L255.992 512.076 L270.367 490.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 493.257 Q295.298 493.257 293.469 496.821 Q291.664 500.363 291.664 507.493 Q291.664 514.599 293.469 518.164 Q295.298 521.706 298.909 521.706 Q302.543 521.706 304.349 518.164 Q306.177 514.599 306.177 507.493 Q306.177 500.363 304.349 496.821 Q302.543 493.257 298.909 493.257 M298.909 489.553 Q304.719 489.553 307.775 494.159 Q310.853 498.743 310.853 507.493 Q310.853 516.22 307.775 520.826 Q304.719 525.409 298.909 525.409 Q293.099 525.409 290.02 520.826 Q286.964 516.22 286.964 507.493 Q286.964 498.743 290.02 494.159 Q293.099 489.553 298.909 489.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M258.793 331.286 L277.15 331.286 L277.15 335.221 L263.076 335.221 L263.076 343.693 Q264.094 343.346 265.113 343.184 Q266.131 342.999 267.15 342.999 Q272.937 342.999 276.316 346.17 Q279.696 349.342 279.696 354.758 Q279.696 360.337 276.224 363.439 Q272.752 366.517 266.432 366.517 Q264.256 366.517 261.988 366.147 Q259.742 365.777 257.335 365.036 L257.335 360.337 Q259.418 361.471 261.641 362.027 Q263.863 362.582 266.34 362.582 Q270.344 362.582 272.682 360.476 Q275.02 358.369 275.02 354.758 Q275.02 351.147 272.682 349.041 Q270.344 346.934 266.34 346.934 Q264.465 346.934 262.59 347.351 Q260.738 347.767 258.793 348.647 L258.793 331.286 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 334.365 Q295.298 334.365 293.469 337.93 Q291.664 341.471 291.664 348.601 Q291.664 355.707 293.469 359.272 Q295.298 362.814 298.909 362.814 Q302.543 362.814 304.349 359.272 Q306.177 355.707 306.177 348.601 Q306.177 341.471 304.349 337.93 Q302.543 334.365 298.909 334.365 M298.909 330.661 Q304.719 330.661 307.775 335.268 Q310.853 339.851 310.853 348.601 Q310.853 357.328 307.775 361.934 Q304.719 366.517 298.909 366.517 Q293.099 366.517 290.02 361.934 Q286.964 357.328 286.964 348.601 Q286.964 339.851 290.02 335.268 Q293.099 330.661 298.909 330.661 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M269.326 187.811 Q266.178 187.811 264.326 189.964 Q262.497 192.116 262.497 195.866 Q262.497 199.593 264.326 201.769 Q266.178 203.922 269.326 203.922 Q272.474 203.922 274.303 201.769 Q276.154 199.593 276.154 195.866 Q276.154 192.116 274.303 189.964 Q272.474 187.811 269.326 187.811 M278.608 173.158 L278.608 177.417 Q276.849 176.584 275.043 176.144 Q273.261 175.704 271.502 175.704 Q266.872 175.704 264.418 178.829 Q261.988 181.954 261.641 188.274 Q263.006 186.26 265.066 185.195 Q267.127 184.107 269.603 184.107 Q274.812 184.107 277.821 187.278 Q280.853 190.427 280.853 195.866 Q280.853 201.19 277.705 204.408 Q274.557 207.625 269.326 207.625 Q263.33 207.625 260.159 203.042 Q256.988 198.436 256.988 189.709 Q256.988 181.515 260.877 176.653 Q264.766 171.769 271.316 171.769 Q273.076 171.769 274.858 172.116 Q276.664 172.464 278.608 173.158 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 175.473 Q295.298 175.473 293.469 179.038 Q291.664 182.579 291.664 189.709 Q291.664 196.815 293.469 200.38 Q295.298 203.922 298.909 203.922 Q302.543 203.922 304.349 200.38 Q306.177 196.815 306.177 189.709 Q306.177 182.579 304.349 179.038 Q302.543 175.473 298.909 175.473 M298.909 171.769 Q304.719 171.769 307.775 176.376 Q310.853 180.959 310.853 189.709 Q310.853 198.436 307.775 203.042 Q304.719 207.625 298.909 207.625 Q293.099 207.625 290.02 203.042 Q286.964 198.436 286.964 189.709 Q286.964 180.959 290.02 176.376 Q293.099 171.769 298.909 171.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip802)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1025.95 400.199,1041.1 400.786,938.188 401.372,845.437 401.958,756.893 402.545,673.959 403.131,602.084 403.718,534.563 404.304,473.219 404.891,419.38 405.477,456.137 406.063,484.932 406.65,434.838 407.236,390.804 407.823,351.359 408.409,316.204 408.995,342.637 409.582,312.463 410.168,285.903 410.755,262.005 411.341,242.018 411.927,224.968 412.514,250.674 413.1,237.738 413.687,227.756 414.273,219.895 414.86,244.248 415.446,238.434 416.032,235.006 416.619,258.567 417.205,281.337 417.792,281.068 418.378,281.744 418.964,284.311 419.551,288.326 420.137,292.853 420.724,298.966 421.31,305.713 421.896,328.692 422.483,350.638 423.069,372.355 423.656,406.108 424.242,438.032 424.829,446.335 425.415,454.79 426.001,474.18 426.588,484.396 427.174,495.29 427.761,505.687 428.347,524.827 428.933,535.871 429.52,569.246 430.106,579.627 430.693,589.789 431.279,606.703 431.865,623.339 432.452,640.493 433.038,668.859 433.625,685.529 434.211,696.341 434.798,711.408 435.384,726.867 435.97,736.481 436.557,746.275 437.143,769.008 437.73,781.755 438.316,790.581 438.902,799.761 439.489,812.285 440.075,835.579 440.662,846.945 441.248,858.395 441.835,879.426 442.421,889.74 443.007,902.842 443.594,915.088 444.18,924.453 444.767,930.993 445.353,942.491 445.939,953.984 446.526,970.219 447.112,980.85 447.699,985.621 448.285,993.495 448.871,1005.64 449.458,1012.88 450.044,1019.83 450.631,1030.94 451.217,1037.23 451.804,1043.48 452.39,1054.35 452.976,1060.04 453.563,1063.67 454.149,1069.22 454.736,1070.4 455.322,1078.37 455.908,1083.66 456.495,1088.97 457.081,1092.2 457.668,1099.09 458.254,1101.87 458.84,1106.88 459.427,1111.51 460.013,1119.46 460.6,1123.48 461.186,1125.56 461.773,1129.51 462.359,1135.12 462.945,1138.8 463.532,1144.14 464.118,1149.11 464.705,1150.39 465.291,1153.52 465.877,1154.84 466.464,1159.56 467.05,1160.83 467.637,1167.44 468.223,1168.57 468.809,1169.61 469.396,1172.67 469.982,1175.32 470.569,1177.76 471.155,1180.08 471.742,1185.81 472.328,1188.12 472.914,1191.95 473.501,1195.52 474.087,1197.54 474.674,1199.25 475.26,1202.27 475.846,1202.03 476.433,1205.38 477.019,1206.78 477.606,1211.17 478.192,1213.98 478.778,1212.18 479.365,1213.69 479.951,1214.74 480.538,1215.93 481.124,1217.1 481.711,1216.87 482.297,1216.51 482.883,1214.74 483.47,1215.9 484.056,1215.98 484.643,1215.83 485.229,1217.21 485.815,1218.7 486.402,1218.44 486.988,1219.74 487.575,1219.67 488.161,1222.35 488.748,1223.55 489.334,1224.58 489.92,1227.01 490.507,1226.65 491.093,1228.06 491.68,1229.05 492.266,1229.93 492.852,1232.26 493.439,1233.08 494.025,1233.97 494.612,1233.52 495.198,1236.09 495.784,1232.62 496.371,1233.66 496.957,1233.6 497.544,1233.09 498.13,1232.89 498.717,1233.73 499.303,1234.85 499.889,1234.63 500.476,1236.91 501.062,1239.21 501.649,1241.2 502.235,1244.33 502.821,1243.24 503.408,1242.49 503.994,1241.76 504.581,1242.52 505.167,1243.14 505.753,1242.43 506.34,1240.35 506.926,1242.44 507.513,1244.13 508.099,1241.6 508.686,1240.66 509.272,1239.96 509.858,1241.75 510.445,1246.65 511.031,1244.1 511.618,1247.24 512.204,1246.33 512.79,1245.17 513.377,1244.14 513.963,1244.39 514.55,1242.04 515.136,1239.9 515.722,1238.85 516.309,1242.3 516.895,1242.75 517.482,1243.07 518.068,1240.82 518.655,1240.01 519.241,1237.99 519.827,1237.23 520.414,1236.74 521,1237.76 521.587,1239.66 522.173,1239.1 522.759,1239.81 523.346,1241.77 523.932,1242.34 524.519,1243.91 525.105,1244.29 525.691,1244.96 526.278,1245.67 526.864,1244.53 527.451,1243.57 528.037,1242.69 528.624,1243.2 529.21,1243.65 529.796,1244.05 530.383,1241.71 530.969,1238.52 531.556,1241.92 532.142,1241.1 532.728,1240.4 533.315,1246.15 533.901,1247.91 534.488,1250.53 535.074,1245.63 535.661,1245.93 536.247,1248.77 536.833,1247.74 537.42,1246.59 538.006,1245.34 538.593,1244.3 539.179,1243.11 539.765,1242.22 540.352,1241.29 540.938,1241.86 541.525,1243.47 542.111,1242.76 542.697,1240.59 543.284,1241.13 543.87,1240.22 544.457,1239.44 545.043,1238.64 545.63,1235.46 546.216,1234.96 546.802,1236.55 547.389,1235.94 547.975,1235.13 548.562,1234.52 549.148,1235.53 549.734,1236.24 550.321,1234.44 550.907,1233.83 551.494,1233.11 552.08,1236.52 552.666,1235.85 553.253,1235.54 553.839,1233.44 554.426,1231.65 555.012,1231.21 555.599,1229.52 556.185,1229.16 556.771,1226.16 557.358,1227.43 557.944,1225.61 558.531,1228.33 559.117,1226.84 559.703,1227.91 560.29,1227.65 560.876,1228.87 561.463,1230 562.049,1229.74 562.635,1228.13 563.222,1228 563.808,1225.22 564.395,1225.11 564.981,1227.88 565.568,1227.73 566.154,1228.67 566.74,1228.38 567.327,1229.33 567.913,1231.45 568.5,1231.29 569.086,1230.75 569.672,1229.21 570.259,1228.66 570.845,1228.28 571.432,1230.56 572.018,1231.7 572.605,1230.9 573.191,1230.3 573.777,1229.58 574.364,1227.95 574.95,1227.77 575.537,1229.92 576.123,1229.32 576.709,1229.31 577.296,1229.18 577.882,1228.89 578.469,1229.75 579.055,1229.21 579.641,1232.79 580.228,1234.89 580.814,1232.85 581.401,1230.85 581.987,1228.75 582.574,1232.37 583.16,1229.09 583.746,1227.29 584.333,1230.97 584.919,1230.19 585.506,1229.51 586.092,1230.4 586.678,1227.2 587.265,1226.78 587.851,1228.97 588.438,1225.98 589.024,1224.38 589.61,1225.15 590.197,1227.56 590.783,1228.37 591.37,1227.96 591.956,1226.15 592.543,1226.98 593.129,1225.37 593.715,1223.67 594.302,1219.66 594.888,1219.86 595.475,1221.22 596.061,1216.98 596.647,1217.2 597.234,1217.13 597.82,1218.7 598.407,1217.55 598.993,1217.58 599.579,1216.68 600.166,1216.89 600.752,1218.43 601.339,1218.62 601.925,1218.65 602.512,1218.77 603.098,1219.04 603.684,1220.54 604.271,1220.65 604.857,1221.89 605.444,1219.17 606.03,1218.94 606.616,1221.28 607.203,1222.68 607.789,1222.28 608.376,1223.32 608.962,1223.09 609.548,1223.88 610.135,1223.77 610.721,1222.34 611.308,1223.65 611.894,1223.12 612.481,1224.31 613.067,1229.42 613.653,1228.7 614.24,1229.28 614.826,1227.44 615.413,1227.86 615.999,1228.6 616.585,1228.97 617.172,1227.25 617.758,1225.61 618.345,1223.79 618.931,1224.88 619.518,1224.85 620.104,1227.19 620.69,1225.38 621.277,1226.24 621.863,1228.39 622.45,1227.75 623.036,1228.85 623.622,1225.89 624.209,1223.97 624.795,1223.46 625.382,1222.94 625.968,1223.89 626.554,1223.2 627.141,1222.72 627.727,1222.23 628.314,1223.36 628.9,1220.43 629.487,1217.47 630.073,1218.88 630.659,1219.87 631.246,1222.33 631.832,1223.27 632.419,1226.44 633.005,1224.68 633.591,1225.6 634.178,1222.83 634.764,1222.19 635.351,1220.41 635.937,1218.8 636.523,1219.98 637.11,1218.45 637.696,1218.32 638.283,1222.35 638.869,1219.38 639.456,1218.99 640.042,1218.84 640.628,1221.12 641.215,1220.77 641.801,1220.25 642.388,1221.41 642.974,1219.73 643.56,1219.7 644.147,1220.88 644.733,1222.14 645.32,1220.67 645.906,1221.91 646.492,1220.28 647.079,1219.91 647.665,1222.19 648.252,1221.83 648.838,1222.58 649.425,1222.3 650.011,1224.03 650.597,1223.7 651.184,1223.19 651.77,1222.7 652.357,1222.23 652.943,1222.83 653.529,1222.27 654.116,1224.43 654.702,1222.28 655.289,1224.22 655.875,1223.81 656.462,1224.75 657.048,1225.41 657.634,1227.13 658.221,1224.05 658.807,1222.16 659.394,1220.62 659.98,1220.29 660.566,1218.55 661.153,1219.47 661.739,1219.6 662.326,1219.33 662.912,1216.42 663.498,1214.97 664.085,1216.37 664.671,1216.21 665.258,1217.35 665.844,1216.86 666.431,1216.31 667.017,1214.56 667.603,1214.66 668.19,1215.89 668.776,1215.96 669.363,1216.04 669.949,1215.84 670.535,1217.14 671.122,1218.14 671.708,1217.8 672.295,1216.11 672.881,1216.06 673.467,1214.43 674.054,1215.69 674.64,1211.51 675.227,1211.72 675.813,1213.15 676.4,1213.38 676.986,1212.33 677.572,1209.81 678.159,1211.21 678.745,1208.59 679.332,1207.41 679.918,1207.85 680.504,1211.63 681.091,1215.08 681.677,1213.83 682.264,1213.99 682.85,1216.49 683.436,1215.07 684.023,1214.95 684.609,1213.46 685.196,1214.88 685.782,1217.38 686.369,1215.77 686.955,1211.66 687.541,1210.4 688.128,1211.82 688.714,1213.22 689.301,1213.02 689.887,1214.58 690.473,1214.45 691.06,1214.33 691.646,1212.92 692.233,1213.04 692.819,1215.52 693.405,1212.71 693.992,1212.96 694.578,1212.12 695.165,1209.59 695.751,1211.09 696.338,1212.23 696.924,1212.23 697.51,1209.8 698.097,1208.66 698.683,1204.97 699.27,1205.48 699.856,1205.99 700.442,1206.3 701.029,1209.44 701.615,1213.62 702.202,1211.21 702.788,1213.92 703.375,1210.08 703.961,1209.3 704.547,1210.8 705.134,1213.39 705.72,1213.28 706.307,1214.49 706.893,1214.42 707.479,1213.16 708.066,1213.15 708.652,1213.11 709.239,1213.23 709.825,1214.4 710.411,1211.73 710.998,1211.84 711.584,1213.13 712.171,1215.95 712.757,1214.68 713.344,1213.15 713.93,1216.68 714.516,1217.69 715.103,1217.62 715.689,1218.47 716.276,1216.82 716.862,1218.1 717.448,1217.95 718.035,1216.07 718.621,1216.98 719.208,1219.25 719.794,1219.91 720.38,1222.17 720.967,1221.55 721.553,1219.68 722.14,1217.99 722.726,1217.4 723.313,1219.57 723.899,1219.31 724.485,1220.03 725.072,1219.57 725.658,1219.34 726.245,1217.86 726.831,1217.76 727.417,1216.03 728.004,1217.31 728.59,1214.52 729.177,1207.96 729.763,1207.99 730.349,1208.19 730.936,1209.85 731.522,1208.75 732.109,1207.5 732.695,1206.49 733.282,1207.94 733.868,1209.29 734.454,1210.9 735.041,1212.43 735.627,1212.54 736.214,1211.39 736.8,1210.08 737.386,1207.74 737.973,1203.92 738.559,1200.3 739.146,1200.89 739.732,1202.69 740.318,1202.86 740.905,1206.06 741.491,1206.58 742.078,1208.35 742.664,1208.56 743.251,1208.78 743.837,1203.67 744.423,1201.42 745.01,1202.16 745.596,1204.15 746.183,1204.49 746.769,1203.42 747.355,1201.42 747.942,1202.01 748.528,1203.73 749.115,1203.88 749.701,1203.94 750.288,1200.52 750.874,1200.93 751.46,1200.34 752.047,1203.3 752.633,1203.73 753.22,1201.67 753.806,1201.07 754.392,1203.05 754.979,1203.42 755.565,1203.89 756.152,1205.95 756.738,1207.69 757.324,1207.92 757.911,1209.49 758.497,1210.86 759.084,1210.98 759.67,1214.71 760.257,1214.41 760.843,1214.17 761.429,1213 762.016,1210.23 762.602,1212.91 763.189,1212.68 763.775,1212.49 764.361,1213.8 764.948,1216.15 765.534,1217.13 766.121,1214.46 766.707,1216.81 767.293,1216.47 767.88,1217.61 768.466,1217.14 769.053,1218.3 769.639,1218.99 770.226,1215.61 770.812,1213.75 771.398,1213.47 771.985,1214.5 772.571,1214.33 773.158,1214.15 773.744,1212.81 774.33,1212.77 774.917,1213.96 775.503,1216.54 776.09,1217.5 776.676,1218.27 777.262,1217.93 777.849,1218.82 778.435,1219.9 779.022,1218.15 779.608,1217.73 780.195,1218.91 780.781,1219.57 781.367,1220.27 781.954,1221.2 782.54,1220.45 783.127,1222.49 783.713,1220.77 784.299,1217.83 784.886,1217.44 785.472,1217 786.059,1215.47 786.645,1212.51 787.232,1213.48 787.818,1214.85 788.404,1216.97 788.991,1215.55 789.577,1212.79 790.164,1212.59 790.75,1211.52 791.336,1211.4 791.923,1210.19 792.509,1211.25 793.096,1213.83 793.682,1213.55 794.268,1213.31 794.855,1213.21 795.441,1213.27 796.028,1212.8 796.614,1211.41 797.201,1211.29 797.787,1208.41 798.373,1208.1 798.96,1207.8 799.546,1209.19 800.133,1207.76 800.719,1209.21 801.305,1209.2 801.892,1209.19 802.478,1206.73 803.065,1207.14 803.651,1208.75 804.237,1206.39 804.824,1211.69 805.41,1210.27 805.997,1209.03 806.583,1211.6 807.17,1211.54 807.756,1209.98 808.342,1208.64 808.929,1211.2 809.515,1210.67 810.102,1211.88 810.688,1211.96 811.274,1211.8 811.861,1210.39 812.447,1211.7 813.034,1211.8 813.62,1214.45 814.206,1216.66 814.793,1219.99 815.379,1219.33 815.966,1218.71 816.552,1220.8 817.139,1218.66 817.725,1217.93 818.311,1220.02 818.898,1221.82 819.484,1220.95 820.071,1221.35 820.657,1221.75 821.243,1219.48 821.83,1214.61 822.416,1215.74 823.003,1217.92 823.589,1217.38 824.175,1217.99 824.762,1217.47 825.348,1215.77 825.935,1215.34 826.521,1214.72 827.108,1211.67 827.694,1212.96 828.28,1213.95 828.867,1212.73 829.453,1209.88 830.04,1209.65 830.626,1210.75 831.212,1211.77 831.799,1211.79 832.385,1210.37 832.972,1209.15 833.558,1207.52 834.145,1207.55 834.731,1204.02 835.317,1205.66 835.904,1205.81 836.49,1204.64 837.077,1200.55 837.663,1198.32 838.249,1200.38 838.836,1202.14 839.422,1202.78 840.009,1201.91 840.595,1201.24 841.181,1201.86 841.768,1202.36 842.354,1201.29 842.941,1201.71 843.527,1201.9 844.114,1202.25 844.7,1198.87 845.286,1200.72 845.873,1202.55 846.459,1205.22 847.046,1205.6 847.632,1203.34 848.218,1202.51 848.805,1202.97 849.391,1202.17 849.978,1199.89 850.564,1201.44 851.15,1200.5 851.737,1202.41 852.323,1201.61 852.91,1200.57 853.496,1199.83 854.083,1198.69 854.669,1200.6 855.255,1202.15 855.842,1201.51 856.428,1201.87 857.015,1200.9 857.601,1203.82 858.187,1205.44 858.774,1204.58 859.36,1204.62 859.947,1205.18 860.533,1205.35 861.119,1205.17 861.706,1206.85 862.292,1208.44 862.879,1208.55 863.465,1209.76 864.052,1209.64 864.638,1208.4 865.224,1208.34 865.811,1208.49 866.397,1208.65 866.984,1208.47 867.57,1208.5 868.156,1207.12 868.743,1205.73 869.329,1205.98 869.916,1206.11 870.502,1206.11 871.089,1206.24 871.675,1205.25 872.261,1204.13 872.848,1203.12 873.434,1204.89 874.021,1206.44 874.607,1206.8 875.193,1206.75 875.78,1209.34 876.366,1209.28 876.953,1214.48 877.539,1215.4 878.125,1215.05 878.712,1213.38 879.298,1214.32 879.885,1213.97 880.471,1213.66 881.058,1214.48 881.644,1212.99 882.23,1213.05 882.817,1211.18 883.403,1210.05 883.99,1205.82 884.576,1207.17 885.162,1205.75 885.749,1205.84 886.335,1206.28 886.922,1206.36 887.508,1207.69 888.094,1208.08 888.681,1208.01 889.267,1209.44 889.854,1210.58 890.44,1210.76 891.027,1210.58 891.613,1210.33 892.199,1211.46 892.786,1211.33 893.372,1213.96 893.959,1213.41 894.545,1212.04 895.131,1213.35 895.718,1216.92 896.304,1216.45 896.891,1214.62 897.477,1211.81 898.063,1207.49 898.65,1208.69 899.236,1208.3 899.823,1208.13 900.409,1209.49 900.996,1211.81 901.582,1211.49 902.168,1212.58 902.755,1213.36 903.341,1213.07 903.928,1211.37 904.514,1210.02 905.1,1209.74 905.687,1207.16 906.273,1210.02 906.86,1211.18 907.446,1210.98 908.032,1209.39 908.619,1210.55 909.205,1209.22 909.792,1210.64 910.378,1211.93 910.965,1209 911.551,1209.26 912.137,1210.69 912.724,1206.57 913.31,1206.97 913.897,1204.5 914.483,1205.66 915.069,1207.11 915.656,1208.46 916.242,1209.61 916.829,1208.16 917.415,1208.15 918.002,1209.45 918.588,1210.68 919.174,1213.46 919.761,1216.97 920.347,1217.87 920.934,1216.07 921.52,1213.08 922.106,1211.54 922.693,1214.02 923.279,1211.34 923.866,1209.72 924.452,1209.48 925.038,1210.84 925.625,1209.73 926.211,1207.04 926.798,1210.91 927.384,1210.9 927.971,1209.51 928.557,1208.28 929.143,1205.81 929.73,1205.8 930.316,1204.63 930.903,1204.72 931.489,1206.16 932.075,1208.57 932.662,1208.34 933.248,1209.53 933.835,1210.88 934.421,1208.19 935.007,1208.28 935.594,1206.96 936.18,1210.83 936.767,1209.38 937.353,1209.36 937.94,1209.06 938.526,1215.57 939.112,1213.96 939.699,1216.19 940.285,1212.93 940.872,1210.26 941.458,1210.12 942.044,1207.23 942.631,1208.52 943.217,1208.43 943.804,1207.15 944.39,1205.87 944.976,1211.2 945.563,1211.26 946.149,1210.94 946.736,1210.55 947.322,1213.07 947.909,1211.44 948.495,1209.86 949.081,1208.45 949.668,1206.98 950.254,1208.29 950.841,1205.9 951.427,1207.27 952.013,1205.9 952.6,1205.98 953.186,1205.85 953.773,1208.79 954.359,1207.56 954.945,1208.71 955.532,1208.72 956.118,1207.38 956.705,1205.84 957.291,1205.89 957.878,1200.64 958.464,1200.86 959.05,1201.45 959.637,1201.7 960.223,1202.1 960.81,1201.14 961.396,1201.55 961.982,1201.91 962.569,1203.56 963.155,1202.63 963.742,1203.02 964.328,1204.76 964.915,1204.99 965.501,1201.58 966.087,1202.3 966.674,1205.12 967.26,1206.51 967.847,1206.49 968.433,1206.72 969.019,1206.58 969.606,1205.65 970.192,1205.6 970.779,1204.25 971.365,1204.43 971.951,1201.76 972.538,1203.4 973.124,1202.35 973.711,1202.56 974.297,1202.85 974.884,1204.47 975.47,1203.4 976.056,1202.34 976.643,1200.19 977.229,1203.15 977.816,1206.13 978.402,1206.25 978.988,1206.36 979.575,1207.87 980.161,1210.4 980.748,1207.93 981.334,1206.53 981.92,1206.84 982.507,1206.87 983.093,1206.81 983.68,1205.72 984.266,1205.87 984.853,1205.87 985.439,1206.06 986.025,1205.93 986.612,1203.49 987.198,1203.76 987.785,1202.33 988.371,1205.24 988.957,1207.69 989.544,1205.14 990.13,1206.55 990.717,1205.59 991.303,1207.16 991.889,1205.78 992.476,1204.94 993.062,1206.23 993.649,1203.77 994.235,1201.21 994.822,1200.28 995.408,1198.17 995.994,1200.09 996.581,1200.52 997.167,1203.65 997.754,1203.66 998.34,1206.35 998.926,1206.57 999.513,1206.63 1000.1,1207.97 1000.69,1206.76 1001.27,1210.65 1001.86,1210.64 1002.44,1210.71 1003.03,1209.09 1003.62,1208.88 1004.2,1208.58 1004.79,1210.98 1005.38,1210.63 1005.96,1209.24 1006.55,1208.11 1007.14,1210.68 1007.72,1211.97 1008.31,1214.43 1008.9,1213.88 1009.48,1213.79 1010.07,1214.92 1010.65,1214.54 1011.24,1215.24 1011.83,1212.08 1012.41,1212.01 1013,1214.14 1013.59,1213.96 1014.17,1213.77 1014.76,1214.58 1015.35,1212.87 1015.93,1212.56 1016.52,1211.11 1017.11,1210.89 1017.69,1211.86 1018.28,1211.68 1018.86,1212.47 1019.45,1211.97 1020.04,1209.13 1020.62,1211.67 1021.21,1211.81 1021.8,1212.68 1022.38,1211.21 1022.97,1211.12 1023.56,1212.02 1024.14,1209.31 1024.73,1208.07 1025.32,1208.06 1025.9,1206.65 1026.49,1210.4 1027.07,1205.05 1027.66,1205.15 1028.25,1205.39 1028.83,1206.7 1029.42,1206.7 1030.01,1207.09 1030.59,1208.42 1031.18,1208.44 1031.77,1208.1 1032.35,1211.85 1032.94,1210.63 1033.52,1209.12 1034.11,1208.78 1034.7,1208.54 1035.28,1205.74 1035.87,1205.71 1036.46,1207 1037.04,1205.73 1037.63,1205.7 1038.22,1203.27 1038.8,1203.22 1039.39,1203.61 1039.98,1203.89 1040.56,1205.17 1041.15,1202.63 1041.73,1202.84 1042.32,1201.94 1042.91,1203.59 1043.49,1205.05 1044.08,1205.23 1044.67,1205 1045.25,1205.1 1045.84,1205.24 1046.43,1203.97 1047.01,1204.24 1047.6,1202.99 1048.19,1204.51 1048.77,1204.72 1049.36,1203.63 1049.94,1206.24 1050.53,1207.65 1051.12,1207.61 1051.7,1210.07 1052.29,1212.34 1052.88,1211.97 1053.46,1211.7 1054.05,1213.27 1054.64,1213.12 1055.22,1212.78 1055.81,1211.31 1056.39,1212.02 1056.98,1208.11 1057.57,1210.7 1058.15,1203.95 1058.74,1205.61 1059.33,1204.62 1059.91,1202.12 1060.5,1203.75 1061.09,1207.51 1061.67,1209.92 1062.26,1209.79 1062.85,1210.79 1063.43,1209.48 1064.02,1209.36 1064.6,1209.03 1065.19,1211.59 1065.78,1208.54 1066.36,1209.69 1066.95,1208.31 1067.54,1208.55 1068.12,1207.26 1068.71,1206.13 1069.3,1205 1069.88,1205.16 1070.47,1203.78 1071.06,1202.88 1071.64,1203.07 1072.23,1201.72 1072.81,1199.63 1073.4,1201.44 1073.99,1204.31 1074.57,1204.16 1075.16,1205.71 1075.75,1205.89 1076.33,1207.28 1076.92,1209.67 1077.51,1209.46 1078.09,1210.42 1078.68,1210.26 1079.26,1211.5 1079.85,1211.64 1080.44,1208.72 1081.02,1210.11 1081.61,1206.23 1082.2,1206.42 1082.78,1205.37 1083.37,1204.13 1083.96,1202.9 1084.54,1201.8 1085.13,1201.86 1085.72,1204.65 1086.3,1205.81 1086.89,1207.03 1087.47,1204.6 1088.06,1203.17 1088.65,1202.01 1089.23,1201.15 1089.82,1201.68 1090.41,1202.13 1090.99,1202.5 1091.58,1204.93 1092.17,1200.83 1092.75,1200.01 1093.34,1203.4 1093.93,1203.38 1094.51,1202.62 1095.1,1202.74 1095.68,1201.88 1096.27,1203.23 1096.86,1205.83 1097.44,1204.55 1098.03,1204.55 1098.62,1201.86 1099.2,1202.22 1099.79,1201.49 1100.38,1199.34 1100.96,1199.83 1101.55,1201.31 1102.14,1202.94 1102.72,1205.74 1103.31,1207.2 1103.89,1208.63 1104.48,1209.78 1105.07,1207.08 1105.65,1207.18 1106.24,1207.19 1106.83,1207.42 1107.41,1204.85 1108,1202.45 1108.59,1202.6 1109.17,1203.13 1109.76,1204.59 1110.34,1203.75 1110.93,1203.4 1111.52,1203.59 1112.1,1206.22 1112.69,1204.83 1113.28,1203.55 1113.86,1203.54 1114.45,1206.1 1115.04,1208.66 1115.62,1209.77 1116.21,1208.48 1116.8,1208.69 1117.38,1207.39 1117.97,1211.3 1118.55,1213.88 1119.14,1213.63 1119.73,1210.65 1120.31,1212.03 1120.9,1210.74 1121.49,1210.66 1122.07,1210.73 1122.66,1208.16 1123.25,1208.02 1123.83,1208.04 1124.42,1209.65 1125.01,1205.64 1125.59,1206.97 1126.18,1208.14 1126.76,1209.28 1127.35,1209.47 1127.94,1210.58 1128.52,1214.45 1129.11,1216.62 1129.7,1217.69 1130.28,1217.06 1130.87,1213.98 1131.46,1213.75 1132.04,1212.11 1132.63,1210.59 1133.21,1209.32 1133.8,1210.51 1134.39,1211.65 1134.97,1210.97 1135.56,1213.35 1136.15,1211.52 1136.73,1210.44 1137.32,1208.75 1137.91,1207.54 1138.49,1207.59 1139.08,1209.03 1139.67,1210.39 1140.25,1211.64 1140.84,1212.65 1141.42,1211.45 1142.01,1212.51 1142.6,1212.36 1143.18,1208.34 1143.77,1210.98 1144.36,1209.25 1144.94,1207.72 1145.53,1209.08 1146.12,1208.99 1146.7,1208.81 1147.29,1209.91 1147.88,1206.97 1148.46,1206.98 1149.05,1208.32 1149.63,1205.5 1150.22,1207.9 1150.81,1209.11 1151.39,1206.52 1151.98,1203.96 1152.57,1203.97 1153.15,1205.16 1153.74,1205.51 1154.33,1205.61 1154.91,1206.97 1155.5,1207.03 1156.09,1205.53 1156.67,1204.21 1157.26,1204.11 1157.84,1202.81 1158.43,1204.44 1159.02,1203.31 1159.6,1203.33 1160.19,1203.4 1160.78,1204.72 1161.36,1204.81 1161.95,1204.86 1162.54,1205.96 1163.12,1208.27 1163.71,1209.32 1164.29,1210.61 1164.88,1210.36 1165.47,1208.86 1166.05,1207.68 1166.64,1208.73 1167.23,1207.23 1167.81,1206.03 1168.4,1207.11 1168.99,1204.02 1169.57,1201.37 1170.16,1200.29 1170.75,1200.79 1171.33,1202.78 1171.92,1204.33 1172.5,1205.68 1173.09,1205.77 1173.68,1205.68 1174.26,1205.76 1174.85,1204.61 1175.44,1203.28 1176.02,1204.72 1176.61,1207.38 1177.2,1207.65 1177.78,1206.31 1178.37,1205.24 1178.96,1205.55 1179.54,1206.97 1180.13,1208.12 1180.71,1208.16 1181.3,1206.92 1181.89,1207.09 1182.47,1206.02 1183.06,1206.1 1183.65,1206.14 1184.23,1207.51 1184.82,1206.07 1185.41,1208.64 1185.99,1204.59 1186.58,1207.11 1187.16,1204.55 1187.75,1203.73 1188.34,1202.6 1188.92,1203.05 1189.51,1204.75 1190.1,1207.32 1190.68,1207.15 1191.27,1206.87 1191.86,1206.76 1192.44,1208.19 1193.03,1208.14 1193.62,1212.07 1194.2,1214.39 1194.79,1212.74 1195.37,1211.06 1195.96,1211.97 1196.55,1212.91 1197.13,1212.88 1197.72,1215.19 1198.31,1216.14 1198.89,1214.44 1199.48,1216.35 1200.07,1214.36 1200.65,1213.66 1201.24,1218.39 1201.83,1217.77 1202.41,1214.79 1203,1212.93 1203.58,1216.41 1204.17,1218.66 1204.76,1216.01 1205.34,1214.36 1205.93,1211.51 1206.52,1209.81 1207.1,1209.08 1207.69,1207.78 1208.28,1208.97 1208.86,1210.24 1209.45,1208.65 1210.03,1208.76 1210.62,1207.33 1211.21,1207.46 1211.79,1207.14 1212.38,1209.54 1212.97,1207.02 1213.55,1207.14 1214.14,1205.81 1214.73,1208.53 1215.31,1208.38 1215.9,1208.03 1216.49,1208.04 1217.07,1209.34 1217.66,1209.13 1218.24,1209.08 1218.83,1209.01 1219.42,1211.58 1220,1213.95 1220.59,1216.08 1221.18,1215.69 1221.76,1215.47 1222.35,1215.01 1222.94,1219.88 1223.52,1215.3 1224.11,1213.72 1224.7,1213.28 1225.28,1211.86 1225.87,1209.01 1226.45,1208.88 1227.04,1209.2 1227.63,1208.85 1228.21,1204.48 1228.8,1205.99 1229.39,1204.78 1229.97,1206.19 1230.56,1206.39 1231.15,1206.66 1231.73,1206.56 1232.32,1206.54 1232.91,1206.45 1233.49,1207.68 1234.08,1203.59 1234.66,1205.26 1235.25,1205.23 1235.84,1203.97 1236.42,1204.23 1237.01,1201.66 1237.6,1201.91 1238.18,1199.39 1238.77,1202.38 1239.36,1203.71 1239.94,1203.71 1240.53,1204.02 1241.11,1204.16 1241.7,1204.22 1242.29,1203.46 1242.87,1203.47 1243.46,1198.36 1244.05,1196.15 1244.63,1198.27 1245.22,1196.34 1245.81,1197.95 1246.39,1199.82 1246.98,1201.48 1247.57,1204.2 1248.15,1204.37 1248.74,1205.68 1249.32,1204.55 1249.91,1204.54 1250.5,1203.3 1251.08,1205.13 1251.67,1206.25 1252.26,1208.7 1252.84,1209.75 1253.43,1210.97 1254.02,1210.64 1254.6,1209.03 1255.19,1208.85 1255.78,1209.92 1256.36,1208.71 1256.95,1209.61 1257.53,1209.39 1258.12,1208.02 1258.71,1206.52 1259.29,1207.55 1259.88,1207.54 1260.47,1206.26 1261.05,1206.22 1261.64,1208.72 1262.23,1209.75 1262.81,1209.48 1263.4,1209.41 1263.98,1209.3 1264.57,1209.33 1265.16,1211.67 1265.74,1211.45 1266.33,1210.02 1266.92,1208.45 1267.5,1209.76 1268.09,1209.65 1268.68,1209.4 1269.26,1209.27 1269.85,1209.23 1270.44,1208.01 1271.02,1206.76 1271.61,1204.05 1272.19,1203.26 1272.78,1202.28 1273.37,1201.3 1273.95,1201.78 1274.54,1199.59 1275.13,1203.75 1275.71,1202.31 1276.3,1204.09 1276.89,1205.56 1277.47,1202.85 1278.06,1201.49 1278.65,1201.73 1279.23,1202.37 1279.82,1201.27 1280.4,1197.7 1280.99,1199.71 1281.58,1201.48 1282.16,1201.78 1282.75,1201.91 1283.34,1203.38 1283.92,1203.53 1284.51,1203.72 1285.1,1207.88 1285.68,1208.02 1286.27,1206.8 1286.86,1206.82 1287.44,1206.82 1288.03,1205.93 1288.61,1207.42 1289.2,1206.05 1289.79,1204.84 1290.37,1209.07 1290.96,1210.5 1291.55,1212.94 1292.13,1213.93 1292.72,1213.6 1293.31,1213.23 1293.89,1212.69 1294.48,1210.8 1295.06,1212.06 1295.65,1211.82 1296.24,1211.4 1296.82,1215.13 1297.41,1213.26 1298,1215.45 1298.58,1213.93 1299.17,1213.57 1299.76,1214.73 1300.34,1214.37 1300.93,1213.87 1301.52,1214.92 1302.1,1210.93 1302.69,1210.86 1303.27,1209.34 1303.86,1208.09 1304.45,1210.58 1305.03,1211.61 1305.62,1212.55 1306.21,1210.69 1306.79,1209.26 1307.38,1210.27 1307.97,1211.16 1308.55,1213.73 1309.14,1210.76 1309.73,1206.44 1310.31,1206.67 1310.9,1207.72 1311.48,1209.1 1312.07,1209.28 1312.66,1206.78 1313.24,1205.41 1313.83,1204.14 1314.42,1205.74 1315,1205.92 1315.59,1205.91 1316.18,1206.18 1316.76,1202.43 1317.35,1202.88 1317.93,1205.75 1318.52,1205.74 1319.11,1205.75 1319.69,1209.7 1320.28,1209.56 1320.87,1206.94 1321.45,1204.08 1322.04,1202.72 1322.63,1201.6 1323.21,1204.42 1323.8,1203.26 1324.39,1203.32 1324.97,1205.04 1325.56,1204.02 1326.14,1200.59 1326.73,1202.35 1327.32,1202.73 1327.9,1204.55 1328.49,1205.77 1329.08,1208.55 1329.66,1209.58 1330.25,1207.98 1330.84,1206.9 1331.42,1209.31 1332.01,1212.97 1332.6,1211.55 1333.18,1212.69 1333.77,1212.26 1334.35,1211.93 1334.94,1214.49 1335.53,1213.87 1336.11,1212.27 1336.7,1212.1 1337.29,1214.47 1337.87,1211.67 1338.46,1210.12 1339.05,1207.35 1339.63,1205.91 1340.22,1205.82 1340.8,1207.08 1341.39,1208.06 1341.98,1206.44 1342.56,1206.3 1343.15,1207.54 1343.74,1207.52 1344.32,1204.98 1344.91,1202.43 1345.5,1204.27 1346.08,1203.3 1346.67,1204.83 1347.26,1204.64 1347.84,1208.52 1348.43,1207.22 1349.01,1206.98 1349.6,1207.01 1350.19,1208.12 1350.77,1205.31 1351.36,1203.93 1351.95,1204.11 1352.53,1204.15 1353.12,1207.17 1353.71,1208.54 1354.29,1208.7 1354.88,1211.39 1355.47,1213.67 1356.05,1213.19 1356.64,1213.99 1357.22,1215.03 1357.81,1215.68 1358.4,1213.75 1358.98,1215.81 1359.57,1217.99 1360.16,1215.95 1360.74,1215.25 1361.33,1214.69 1361.92,1215.75 1362.5,1212.49 1363.09,1212.27 1363.68,1213.49 1364.26,1214.33 1364.85,1211.03 1365.43,1210.73 1366.02,1209.19 1366.61,1206.67 1367.19,1205.74 1367.78,1205.77 1368.37,1208.33 1368.95,1206.97 1369.54,1205.8 1370.13,1207.23 1370.71,1204.6 1371.3,1202.15 1371.88,1205.11 1372.47,1206.35 1373.06,1206.69 1373.64,1209.27 1374.23,1210.28 1374.82,1211.51 1375.4,1211.33 1375.99,1212.75 1376.58,1213.6 1377.16,1214.45 1377.75,1212.75 1378.34,1212.37 1378.92,1214.65 1379.51,1214.36 1380.09,1219.2 1380.68,1218.31 1381.27,1213.72 1381.85,1210.57 1382.44,1210.55 1383.03,1210.26 1383.61,1209.31 1384.2,1209.26 1384.79,1209.44 1385.37,1208.02 1385.96,1207.74 1386.55,1207.91 1387.13,1206.73 1387.72,1208.16 1388.3,1207.84 1388.89,1206.46 1389.48,1208.69 1390.06,1207.1 1390.65,1204.69 1391.24,1202.07 1391.82,1201 1392.41,1199.84 1393,1197.3 1393.58,1196.33 1394.17,1194.3 1394.75,1197.66 1395.34,1197.02 1395.93,1197.59 1396.51,1197.99 1397.1,1199.65 1397.69,1199.94 1398.27,1201.49 1398.86,1200.18 1399.45,1196.64 1400.03,1197.44 1400.62,1198.01 1401.21,1196.12 1401.79,1196.83 1402.38,1195.95 1402.96,1195.11 1403.55,1195.91 1404.14,1197.77 1404.72,1196.77 1405.31,1199.88 1405.9,1197.65 1406.48,1200.45 1407.07,1201.93 1407.66,1203.64 1408.24,1203.93 1408.83,1204.19 1409.42,1203.19 1410,1203.43 1410.59,1202.37 1411.17,1201.47 1411.76,1200.92 1412.35,1200.05 1412.93,1199.12 1413.52,1198.35 1414.11,1198.76 1414.69,1200.37 1415.28,1197.96 1415.87,1198.78 1416.45,1200.46 1417.04,1200.96 1417.63,1201.24 1418.21,1201.43 1418.8,1202.85 1419.38,1202.82 1419.97,1199.01 1420.56,1204.64 1421.14,1203.8 1421.73,1205.57 1422.32,1203.06 1422.9,1204.66 1423.49,1204.95 1424.08,1203.8 1424.66,1205.41 1425.25,1205.6 1425.83,1204.28 1426.42,1200.89 1427.01,1203.85 1427.59,1202.97 1428.18,1199.5 1428.77,1202.74 1429.35,1204.19 1429.94,1205.46 1430.53,1206.7 1431.11,1207.89 1431.7,1204.97 1432.29,1206.16 1432.87,1206.1 1433.46,1206.24 1434.04,1206.3 1434.63,1207.64 1435.22,1208.88 1435.8,1210.09 1436.39,1209.88 1436.98,1209.92 1437.56,1208.72 1438.15,1209.93 1438.74,1209.89 1439.32,1208.35 1439.91,1208.18 1440.5,1206.85 1441.08,1209.41 1441.67,1210.25 1442.25,1210.07 1442.84,1212.41 1443.43,1213.46 1444.01,1213.06 1444.6,1212.67 1445.19,1213.83 1445.77,1213.43 1446.36,1211.82 1446.95,1208.85 1447.53,1208.73 1448.12,1209.87 1448.7,1208.46 1449.29,1207.23 1449.88,1203.48 1450.46,1203.79 1451.05,1203.71 1451.64,1206.04 1452.22,1204.86 1452.81,1203.77 1453.4,1211.74 1453.98,1211.47 1454.57,1211.22 1455.16,1211.25 1455.74,1209.8 1456.33,1209.53 1456.91,1209.2 1457.5,1207.86 1458.09,1207.93 1458.67,1206.29 1459.26,1204.95 1459.85,1207.79 1460.43,1207.81 1461.02,1207.61 1461.61,1212.93 1462.19,1217.8 1462.78,1217.3 1463.37,1215.72 1463.95,1217.79 1464.54,1215.83 1465.12,1214.16 1465.71,1212.73 1466.3,1212.72 1466.88,1211.28 1467.47,1209.89 1468.06,1208.2 1468.64,1210.67 1469.23,1211.95 1469.82,1210.42 1470.4,1208.78 1470.99,1212.4 1471.57,1210.71 1472.16,1209.19 1472.75,1210.34 1473.33,1212.98 1473.92,1211.42 1474.51,1211.19 1475.09,1208.42 1475.68,1206.91 1476.27,1205.88 1476.85,1206.06 1477.44,1204.47 1478.03,1203.29 1478.61,1202.92 1479.2,1200.39 1479.78,1199.46 1480.37,1198.85 1480.96,1198.12 1481.54,1201.71 1482.13,1201.72 1482.72,1204.41 1483.3,1203.21 1483.89,1202 1484.48,1201.96 1485.06,1204.81 1485.65,1206.54 1486.24,1208.74 1486.82,1208.86 1487.41,1207.62 1487.99,1207.65 1488.58,1207.71 1489.17,1204.8 1489.75,1205.14 1490.34,1207.76 1490.93,1206.7 1491.51,1207.94 1492.1,1209.14 1492.69,1210.1 1493.27,1212.54 1493.86,1212.35 1494.45,1210.95 1495.03,1214.58 1495.62,1216.88 1496.2,1216.26 1496.79,1213.28 1497.38,1211.7 1497.96,1212.84 1498.55,1209.89 1499.14,1208.33 1499.72,1210.8 1500.31,1210.48 1500.9,1210.42 1501.48,1208.83 1502.07,1211.15 1502.65,1208.43 1503.24,1208.38 1503.83,1207.12 1504.41,1204.69 1505,1204.65 1505.59,1203.44 1506.17,1202.15 1506.76,1202.32 1507.35,1202.62 1507.93,1202.68 1508.52,1202.76 1509.11,1204.06 1509.69,1204.23 1510.28,1204.71 1510.86,1205.26 1511.45,1205.3 1512.04,1205.51 1512.62,1205.44 1513.21,1204.24 1513.8,1204.26 1514.38,1204.3 1514.97,1202.79 1515.56,1201.63 1516.14,1201.97 1516.73,1203.57 1517.32,1204.71 1517.9,1206.12 1518.49,1208.67 1519.07,1211.1 1519.66,1211.15 1520.25,1208.21 1520.83,1207.03 1521.42,1207.08 1522.01,1207.15 1522.59,1207.04 1523.18,1205.77 1523.77,1204.5 1524.35,1204.47 1524.94,1200.51 1525.52,1200.6 1526.11,1199.95 1526.7,1199.01 1527.28,1200.68 1527.87,1201.27 1528.46,1200.01 1529.04,1199.17 1529.63,1199.75 1530.22,1200.23 1530.8,1200.71 1531.39,1201.14 1531.98,1201.51 1532.56,1203.21 1533.15,1200.83 1533.73,1202.46 1534.32,1201.74 1534.91,1200.54 1535.49,1200.66 1536.08,1201.01 1536.67,1201.57 1537.25,1205.53 1537.84,1209.5 1538.43,1209.31 1539.01,1210.08 1539.6,1206 1540.19,1208.61 1540.77,1211.14 1541.36,1210.72 1541.94,1213.3 1542.53,1214.02 1543.12,1212.48 1543.7,1212.36 1544.29,1212.02 1544.88,1210.74 1545.46,1209.04 1546.05,1210.43 1546.64,1210.37 1547.22,1209.06 1547.81,1208.78 1548.4,1207.33 1548.98,1206.03 1549.57,1207.46 1550.15,1207.55 1550.74,1208.82 1551.33,1208.61 1551.91,1207.59 1552.5,1208.9 1553.09,1210.5 1553.67,1210.41 1554.26,1204.96 1554.85,1204.07 1555.43,1204.28 1556.02,1204.56 1556.6,1203.37 1557.19,1203.63 1557.78,1203.82 1558.36,1203.62 1558.95,1206.38 1559.54,1206.58 1560.12,1207.82 1560.71,1208.09 1561.3,1208.06 1561.88,1206.73 1562.47,1205.48 1563.06,1205.44 1563.64,1205.48 1564.23,1205.55 1564.81,1205.83 1565.4,1208.47 1565.99,1209.77 1566.57,1210.78 1567.16,1208.95 1567.75,1207.46 1568.33,1206.23 1568.92,1203.76 1569.51,1202.34 1570.09,1202.39 1570.68,1201.44 1571.27,1199.41 1571.85,1199.7 1572.44,1202.52 1573.02,1204.1 1573.61,1205.58 1574.2,1204.45 1574.78,1205.93 1575.37,1204.62 1575.96,1208.53 1576.54,1211.04 1577.13,1207.18 1577.72,1207.33 1578.3,1208.54 1578.89,1209.69 1579.47,1210.77 1580.06,1209.03 1580.65,1209.99 1581.23,1212.57 1581.82,1213.61 1582.41,1214.68 1582.99,1215.61 1583.58,1216.32 1584.17,1215.71 1584.75,1214.94 1585.34,1214.69 1585.93,1212.93 1586.51,1212.69 1587.1,1213.57 1587.68,1213.29 1588.27,1211.78 1588.86,1208.99 1589.44,1208.79 1590.03,1210.07 1590.62,1209.99 1591.2,1208.62 1591.79,1204.44 1592.38,1204.29 1592.96,1204.5 1593.55,1203.25 1594.14,1204.6 1594.72,1204.86 1595.31,1204.71 1595.89,1208.68 1596.48,1207.36 1597.07,1207.04 1597.65,1209.27 1598.24,1207.63 1598.83,1208.8 1599.41,1210.07 1600,1209.99 1600.59,1213.73 1601.17,1212.09 1601.76,1211.71 1602.34,1212.78 1602.93,1208.41 1603.52,1207.12 1604.1,1205.84 1604.69,1206.28 1605.28,1206.34 1605.86,1206.2 1606.45,1203.36 1607.04,1203.56 1607.62,1206.31 1608.21,1203.67 1608.8,1203.73 1609.38,1201.31 1609.97,1202.42 1610.55,1201.34 1611.14,1201.74 1611.73,1203.42 1612.31,1204.75 1612.9,1204.86 1613.49,1204.87 1614.07,1202.36 1614.66,1201.03 1615.25,1203.46 1615.83,1202.3 1616.42,1203.93 1617.01,1204.15 1617.59,1200.38 1618.18,1203.15 1618.76,1206.01 1619.35,1205.79 1619.94,1204.69 1620.52,1202.22 1621.11,1203.61 1621.7,1205.04 1622.28,1206.37 1622.87,1210.39 1623.46,1206.43 1624.04,1205.18 1624.63,1201.05 1625.22,1204.1 1625.8,1203.2 1626.39,1207.5 1626.97,1202.21 1627.56,1202.57 1628.15,1201.5 1628.73,1202.99 1629.32,1203.07 1629.91,1205.89 1630.49,1206.08 1631.08,1206.04 1631.67,1206.55 1632.25,1206.47 1632.84,1206.27 1633.42,1205.99 1634.01,1205.98 1634.6,1203.52 1635.18,1203.78 1635.77,1204.01 1636.36,1203.84 1636.94,1204.08 1637.53,1204.26 1638.12,1204.7 1638.7,1205.05 1639.29,1203.8 1639.88,1201.28 1640.46,1203.2 1641.05,1203.59 1641.63,1205.17 1642.22,1205.36 1642.81,1206.75 1643.39,1207.01 1643.98,1208.33 1644.57,1209.66 1645.15,1208.4 1645.74,1207 1646.33,1204.53 1646.91,1203.67 1647.5,1206.35 1648.09,1205.32 1648.67,1207.94 1649.26,1207.52 1649.84,1203.43 1650.43,1202.2 1651.02,1199.79 1651.6,1202.96 1652.19,1200.56 1652.78,1198.18 1653.36,1201.42 1653.95,1201.81 1654.54,1203.36 1655.12,1200.85 1655.71,1201.24 1656.29,1199.11 1656.88,1200.97 1657.47,1201.2 1658.05,1203.13 1658.64,1207.21 1659.23,1212.02 1659.81,1212.11 1660.4,1213.18 1660.99,1212.96 1661.57,1212.67 1662.16,1212.4 1662.75,1213.45 1663.33,1214.24 1663.92,1212.44 1664.5,1212.03 1665.09,1212.01 1665.68,1211.92 1666.26,1210.33 1666.85,1212.94 1667.44,1212.6 1668.02,1213.58 1668.61,1213.59 1669.2,1213.23 1669.78,1212.78 1670.37,1216.53 1670.96,1216.07 1671.54,1212.91 1672.13,1213.97 1672.71,1213.47 1673.3,1213.45 1673.89,1210.58 1674.47,1213.24 1675.06,1215.53 1675.65,1214.85 1676.23,1214.53 1676.82,1211.66 1677.41,1210.18 1677.99,1207.45 1678.58,1206.35 1679.17,1205.19 1679.75,1205.02 1680.34,1206.56 1680.92,1204.23 1681.51,1205.7 1682.1,1204.29 1682.68,1204.52 1683.27,1205.98 1683.86,1207.24 1684.44,1205.57 1685.03,1205.58 1685.62,1202.99 1686.2,1203.32 1686.79,1203.25 1687.37,1199.51 1687.96,1202.69 1688.55,1204.1 1689.13,1201.97 1689.72,1204.68 1690.31,1205.07 1690.89,1206.35 1691.48,1205.07 1692.07,1206.39 1692.65,1203.74 1693.24,1203.6 1693.83,1204.88 1694.41,1206.09 1695,1206.41 1695.58,1203.92 1696.17,1204.01 1696.76,1206.87 1697.34,1204.5 1697.93,1207.24 1698.52,1209.83 1699.1,1213.71 1699.69,1214.24 1700.28,1213.77 1700.86,1213.3 1701.45,1210.45 1702.04,1210.25 1702.62,1211.19 1703.21,1209.63 1703.79,1209.21 1704.38,1211.48 1704.97,1211.3 1705.55,1213.48 1706.14,1215.53 1706.73,1214.79 1707.31,1215.86 1707.9,1212.6 1708.49,1212.5 1709.07,1213.3 1709.66,1211.97 1710.24,1212.98 1710.83,1211.47 1711.42,1209.97 1712,1209.84 1712.59,1208.38 1713.18,1209.55 1713.76,1209.5 1714.35,1213.16 1714.94,1210.35 1715.52,1208.95 1716.11,1213.97 1716.7,1213.32 1717.28,1214.25 1717.87,1212.61 1718.45,1212.15 1719.04,1210.49 1719.63,1209.22 1720.21,1209.08 1720.8,1208.99 1721.39,1205.17 1721.97,1205.24 1722.56,1208.25 1723.15,1208.38 1723.73,1206.97 1724.32,1208.38 1724.91,1205.5 1725.49,1206.98 1726.08,1208.39 1726.66,1209.42 1727.25,1210.64 1727.84,1207.83 1728.42,1209.28 1729.01,1209.15 1729.6,1209.25 1730.18,1210.19 1730.77,1210.12 1731.36,1212.37 1731.94,1208.11 1732.53,1208.27 1733.11,1208.24 1733.7,1210.85 1734.29,1210.36 1734.87,1210.04 1735.46,1212.47 1736.05,1212.21 1736.63,1214.37 1737.22,1214.05 1737.81,1216.31 1738.39,1217.93 1738.98,1213.71 1739.57,1212.2 1740.15,1213.36 1740.74,1209.05 1741.32,1210.17 1741.91,1211.32 1742.5,1208.07 1743.08,1206.54 1743.67,1207.89 1744.26,1207.73 1744.84,1208.67 1745.43,1208.33 1746.02,1205.87 1746.6,1205.78 1747.19,1206.01 1747.78,1202.25 1748.36,1202.52 1748.95,1202.38 1749.53,1202.92 1750.12,1201.72 1750.71,1202.21 1751.29,1201 1751.88,1201.62 1752.47,1199.4 1753.05,1198.07 1753.64,1197.27 1754.23,1196.78 1754.81,1197.24 1755.4,1194.96 1755.99,1195.69 1756.57,1193.49 1757.16,1194.2 1757.74,1194.66 1758.33,1194.19 1758.92,1197.6 1759.5,1196.79 1760.09,1198.71 1760.68,1201.82 1761.26,1200.89 1761.85,1202.68 1762.44,1203.1 1763.02,1201.99 1763.61,1202.27 1764.19,1202.42 1764.78,1198.72 1765.37,1197.8 1765.95,1195.79 1766.54,1199.04 1767.13,1200.65 1767.71,1199.62 1768.3,1201.47 1768.89,1201.65 1769.47,1199.45 1770.06,1199.84 1770.65,1204.14 1771.23,1203.05 1771.82,1200.52 1772.4,1200.8 1772.99,1201.22 1773.58,1201.3 1774.16,1204.22 1774.75,1203.18 1775.34,1201.85 1775.92,1202.09 1776.51,1200.97 1777.1,1201.58 1777.68,1204.19 1778.27,1205.71 1778.86,1206.98 1779.44,1208.57 1780.03,1209.62 1780.61,1210.59 1781.2,1211.35 1781.79,1212.42 1782.37,1213.44 1782.96,1214.59 1783.55,1212.92 1784.13,1212.62 1784.72,1212.24 1785.31,1214.46 1785.89,1212.69 1786.48,1211.23 1787.06,1212.14 1787.65,1212.92 1788.24,1213.97 1788.82,1213.71 1789.41,1214.76 1790,1214.4 1790.58,1215.27 1791.17,1217.76 1791.76,1219.71 1792.34,1217.98 1792.93,1217.46 1793.52,1214.44 1794.1,1210.48 1794.69,1211.58 1795.27,1212.5 1795.86,1213.44 1796.45,1211.82 1797.03,1208.78 1797.62,1209.85 1798.21,1207.03 1798.79,1204.16 1799.38,1202.84 1799.97,1203.01 1800.55,1204.62 1801.14,1206.04 1801.73,1206.29 1802.31,1206.48 1802.9,1205.11 1803.48,1205.02 1804.07,1206.71 1804.66,1206.83 1805.24,1208 1805.83,1206.66 1806.42,1206.59 1807,1206.19 1807.59,1203.76 1808.18,1207.76 1808.76,1205.04 1809.35,1205.08 1809.94,1207.83 1810.52,1206.34 1811.11,1207.49 1811.69,1206.22 1812.28,1205.06 1812.87,1206.23 1813.45,1202.27 1814.04,1202.46 1814.63,1203.9 1815.21,1205.27 1815.8,1210.61 1816.39,1211.78 1816.97,1211.52 1817.56,1211.22 1818.14,1211.09 1818.73,1210.8 1819.32,1213.24 1819.9,1211.71 1820.49,1212.9 1821.08,1213.86 1821.66,1214.82 1822.25,1213.05 1822.84,1211.61 1823.42,1207.44 1824.01,1204.99 1824.6,1205.03 1825.18,1205.14 1825.77,1209.05 1826.35,1210.04 1826.94,1207.33 1827.53,1205.96 1828.11,1204.75 1828.7,1204.74 1829.29,1204.77 1829.87,1204.95 1830.46,1202.59 1831.05,1202.9 1831.63,1202.98 1832.22,1202.92 1832.81,1203.07 1833.39,1203.31 1833.98,1203.55 1834.56,1204.02 1835.15,1204 1835.74,1205.26 1836.32,1206.64 1836.91,1205.3 1837.5,1208.08 1838.08,1206.43 1838.67,1207.9 1839.26,1207.79 1839.84,1206.4 1840.43,1206.5 1841.01,1207.58 1841.6,1205.18 1842.19,1205.38 1842.77,1206.54 1843.36,1205.18 1843.95,1202.49 1844.53,1203.05 1845.12,1205.75 1845.71,1205.31 1846.29,1205.11 1846.88,1205.35 1847.47,1206.79 1848.05,1204.11 1848.64,1203.06 1849.22,1205.89 1849.81,1205.88 1850.4,1207.3 1850.98,1206.25 1851.57,1206.3 1852.16,1205.23 1852.74,1205.25 1853.33,1205.3 1853.92,1204.03 1854.5,1203.88 1855.09,1202.97 1855.68,1204.52 1856.26,1206.24 1856.85,1206.22 1857.43,1203.7 1858.02,1204.99 1858.61,1204.94 1859.19,1205.08 1859.78,1205.27 1860.37,1210.6 1860.95,1209.07 1861.54,1208.97 1862.13,1210.22 1862.71,1208.81 1863.3,1208.71 1863.88,1207.33 1864.47,1208.45 1865.06,1209.52 1865.64,1209.5 1866.23,1210.37 1866.82,1209.04 1867.4,1206.34 1867.99,1206.43 1868.58,1206.4 1869.16,1210.35 1869.75,1210.28 1870.34,1210.04 1870.92,1207.39 1871.51,1206.13 1872.09,1206.22 1872.68,1206.52 1873.27,1209.03 1873.85,1210.31 1874.44,1208.95 1875.03,1208.78 1875.61,1208.55 1876.2,1205.85 1876.79,1208.77 1877.37,1207.6 1877.96,1208.91 1878.55,1207.68 1879.13,1207.72 1879.72,1205.06 1880.3,1202.32 1880.89,1204.27 1881.48,1204.66 1882.06,1202.16 1882.65,1203.4 1883.24,1202.34 1883.82,1203.89 1884.41,1201.45 1885,1201.7 1885.58,1202.99 1886.17,1204.47 1886.76,1203.11 1887.34,1200.74 1887.93,1202.5 1888.51,1201.52 1889.1,1200.59 1889.69,1201.05 1890.27,1201.56 1890.86,1200.41 1891.45,1199.72 1892.03,1199.18 1892.62,1199.56 1893.21,1201.3 1893.79,1205.68 1894.38,1208.57 1894.96,1208.8 1895.55,1207.36 1896.14,1206.05 1896.72,1207.43 1897.31,1206.37 1897.9,1206.58 1898.48,1207.95 1899.07,1206.4 1899.66,1205.25 1900.24,1208.07 1900.83,1206.81 1901.42,1210.6 1902,1207.72 1902.59,1209.22 1903.17,1210.15 1903.76,1209.91 1904.35,1207.2 1904.93,1209.88 1905.52,1210.13 1906.11,1209.71 1906.69,1210.56 1907.28,1206.29 1907.87,1205.3 1908.45,1206.75 1909.04,1205.58 1909.63,1205.81 1910.21,1207.12 1910.8,1208.22 1911.38,1207.89 1911.97,1209.22 1912.56,1210.48 1913.14,1208.7 1913.73,1208.6 1914.32,1208.65 1914.9,1209.79 1915.49,1209.48 1916.08,1207.99 1916.66,1205.24 1917.25,1206.83 1917.83,1206.97 1918.42,1208.55 1919.01,1209.77 1919.59,1208.58 1920.18,1208.74 1920.77,1207.21 1921.35,1205.83 1921.94,1204.53 1922.53,1205.93 1923.11,1206.06 1923.7,1206.04 1924.29,1204.58 1924.87,1203.53 1925.46,1205.07 1926.04,1202.69 1926.63,1204.33 1927.22,1207.34 1927.8,1207.19 1928.39,1207.17 1928.98,1204.41 1929.56,1208.41 1930.15,1208.04 1930.74,1209.2 1931.32,1210.19 1931.91,1208.83 1932.5,1212.57 1933.08,1214.67 1933.67,1214.07 1934.25,1211.03 1934.84,1210.69 1935.43,1210.83 1936.01,1208.16 1936.6,1209.33 1937.19,1213.1 1937.77,1212.61 1938.36,1212.46 1938.95,1209.4 1939.53,1208.1 1940.12,1208.11 1940.71,1208.04 1941.29,1208.06 1941.88,1211.74 1942.46,1213.99 1943.05,1215.21 1943.64,1214.96 1944.22,1213.12 1944.81,1212.74 1945.4,1211.1 1945.98,1212.01 1946.57,1211.89 1947.16,1211.26 1947.74,1213.72 1948.33,1213.17 1948.91,1214.22 1949.5,1212.57 1950.09,1212.06 1950.67,1211.66 1951.26,1210 1951.85,1211.04 1952.43,1210.64 1953.02,1209.47 1953.61,1209.21 1954.19,1207.49 1954.78,1207.49 1955.37,1208.55 1955.95,1208.52 1956.54,1209.78 1957.12,1212.18 1957.71,1210.79 1958.3,1207.96 1958.88,1206.4 1959.47,1209.32 1960.06,1209.05 1960.64,1210.43 1961.23,1208.91 1961.82,1206.22 1962.4,1204.93 1962.99,1207.83 1963.58,1205.15 1964.16,1205.32 1964.75,1206.46 1965.33,1205.14 1965.92,1207.93 1966.51,1209.32 1967.09,1209.29 1967.68,1210.4 1968.27,1210.18 1968.85,1210.23 1969.44,1213.99 1970.03,1216.3 1970.61,1214.52 1971.2,1215.39 1971.78,1214.02 1972.37,1208.43 1972.96,1208.22 1973.54,1209.17 1974.13,1211.71 1974.72,1211.36 1975.3,1212.3 1975.89,1212.09 1976.48,1210.56 1977.06,1211.48 1977.65,1213.72 1978.24,1210.95 1978.82,1208.22 1979.41,1209.46 1979.99,1211.75 1980.58,1211.38 1981.17,1207.13 1981.75,1205.79 1982.34,1205.95 1982.93,1205.95 1983.51,1204.51 1984.1,1205.84 1984.69,1204.45 1985.27,1203.47 1985.86,1202.28 1986.45,1203.82 1987.03,1201.43 1987.62,1200.46 1988.2,1200.78 1988.79,1198.53 1989.38,1199.03 1989.96,1202.19 1990.55,1203.66 1991.14,1203.47 1991.72,1203.76 1992.31,1201.33 1992.9,1198.81 1993.48,1199.52 1994.07,1200.26 1994.65,1200.67 1995.24,1200.65 1995.83,1200.82 1996.41,1202.14 1997,1205.19 1997.59,1206.14 1998.17,1207.33 1998.76,1207.28 1999.35,1207.41 1999.93,1207.5 2000.52,1209.97 2001.11,1209.41 2001.69,1211.81 2002.28,1211.56 2002.86,1212.86 2003.45,1212.45 2004.04,1213.37 2004.62,1214.44 2005.21,1210.24 2005.8,1210.17 2006.38,1208.74 2006.97,1208.91 2007.56,1209.07 2008.14,1208.99 2008.73,1210.22 2009.32,1211.18 2009.9,1213.41 2010.49,1210.72 2011.07,1211.75 2011.66,1211.13 2012.25,1211.19 2012.83,1216.44 2013.42,1217.29 2014.01,1214.17 2014.59,1212.53 2015.18,1208.36 2015.77,1211.92 2016.35,1211.77 2016.94,1211.56 2017.53,1209.99 2018.11,1211.1 2018.7,1209.66 2019.28,1206.94 2019.87,1204.55 2020.46,1204.73 2021.04,1204.84 2021.63,1203.9 2022.22,1201.59 2022.8,1200.49 2023.39,1200.74 2023.98,1203.91 2024.56,1206.47 2025.15,1206.45 2025.73,1207.7 2026.32,1208.94 2026.91,1209.9 2027.49,1203.22 2028.08,1204.67 2028.67,1201.85 2029.25,1200.56 2029.84,1200.84 2030.43,1196.2 2031.01,1200.66 2031.6,1198.59 2032.19,1197.78 2032.77,1196.94 2033.36,1195.96 2033.94,1195.18 2034.53,1193.21 2035.12,1192.75 2035.7,1193.75 2036.29,1193.14 2036.88,1195.4 2037.46,1198.82 2038.05,1197.94 2038.64,1195.95 2039.22,1195.19 2039.81,1195.62 2040.4,1197.68 2040.98,1198.19 2041.57,1200.06 2042.15,1200.19 2042.74,1200.32 2043.33,1201.87 2043.91,1203.59 2044.5,1205.26 2045.09,1202.9 2045.67,1200.71 2046.26,1199.8 2046.85,1200.44 2047.43,1200.62 2048.02,1203.8 2048.6,1204.27 2049.19,1204.52 2049.78,1204.57 2050.36,1207.11 2050.95,1207.3 2051.54,1207.23 2052.12,1207.12 2052.71,1205.71 2053.3,1205.7 2053.88,1205.79 2054.47,1207.25 2055.06,1207.27 2055.64,1210.08 2056.23,1209.78 2056.81,1210.58 2057.4,1209.12 2057.99,1206.25 2058.57,1206.3 2059.16,1208.81 2059.75,1211.61 2060.33,1211.54 2060.92,1211.45 2061.51,1212.38 2062.09,1210.65 2062.68,1209.23 2063.27,1209.12 2063.85,1210.22 2064.44,1209.65 2065.02,1209.42 2065.61,1211.72 2066.2,1211.29 2066.78,1210.96 2067.37,1213.2 2067.96,1214.05 2068.54,1213.4 2069.13,1212.83 2069.72,1211.13 2070.3,1211.03 2070.89,1210.63 2071.48,1210.35 2072.06,1211.22 2072.65,1209.76 2073.23,1210.77 2073.82,1211.73 2074.41,1212.81 2074.99,1214.9 2075.58,1215.46 2076.17,1218.9 2076.75,1219.65 2077.34,1214.89 2077.93,1217.23 2078.51,1215.39 2079.1,1217.68 2079.68,1218.1 2080.27,1219.92 2080.86,1220.48 2081.44,1214.76 2082.03,1214.18 2082.62,1215.18 2083.2,1212.16 2083.79,1210.39 2084.38,1213.93 2084.96,1213.38 2085.55,1211.66 2086.14,1211.74 2086.72,1210.26 2087.31,1213.51 2087.89,1211.84 2088.48,1207.58 2089.07,1205.02 2089.65,1202.43 2090.24,1203.6 2090.83,1201.31 2091.41,1200.38 2092,1202.01 2092.59,1204.67 2093.17,1200.7 2093.76,1198.29 2094.35,1196.38 2094.93,1196.77 2095.52,1193.31 2096.1,1194.16 2096.69,1193.37 2097.28,1191.56 2097.86,1193.81 2098.45,1191.66 2099.04,1191.18 2099.62,1194.55 2100.21,1192.09 2100.8,1197.24 2101.38,1196.47 2101.97,1194.53 2102.55,1193.94 2103.14,1194.7 2103.73,1195.15 2104.31,1197.25 2104.9,1196.39 2105.49,1194.17 2106.07,1193.7 2106.66,1193.26 2107.25,1190.29 2107.83,1191.31 2108.42,1190.84 2109.01,1191.71 2109.59,1199 2110.18,1199.42 2110.76,1201.18 2111.35,1201.49 2111.94,1203.18 2112.52,1204.63 2113.11,1203.37 2113.7,1205.15 2114.28,1208.1 2114.87,1209.36 2115.46,1206.79 2116.04,1205.68 2116.63,1205.78 2117.22,1204.7 2117.8,1202.41 2118.39,1203.15 2118.97,1205.84 2119.56,1200.33 2120.15,1201.05 2120.73,1200.15 2121.32,1201.64 2121.91,1200.8 2122.49,1204.21 2123.08,1205.63 2123.67,1208.34 2124.25,1209.46 2124.84,1209.32 2125.42,1209.47 2126.01,1209.23 2126.6,1207.82 2127.18,1206.4 2127.77,1206.33 2128.36,1207.82 2128.94,1208.94 2129.53,1210.15 2130.12,1210.17 2130.7,1208.78 2131.29,1206.21 2131.88,1206.15 2132.46,1205 2133.05,1206.21 2133.63,1207.63 2134.22,1202.33 2134.81,1203.88 2135.39,1203.78 2135.98,1203.84 2136.57,1205.18 2137.15,1205.55 2137.74,1208.67 2138.33,1209.95 2138.91,1208.22 2139.5,1205.53 2140.09,1202.79 2140.67,1203.15 2141.26,1204.64 2141.84,1207.49 2142.43,1204.76 2143.02,1205.08 2143.6,1207.94 2144.19,1207.6 2144.78,1206.57 2145.36,1205.51 2145.95,1208.23 2146.54,1208.52 2147.12,1208.52 2147.71,1209.61 2148.3,1208.3 2148.88,1208.33 2149.47,1207 2150.05,1207.15 2150.64,1209.76 2151.23,1207.09 2151.81,1208.36 2152.4,1208.37 2152.99,1208.48 2153.57,1208.18 2154.16,1205.73 2154.75,1206.81 2155.33,1206.72 2155.92,1206.53 2156.5,1206.66 2157.09,1206.51 2157.68,1204.87 2158.26,1205.04 \"/>\n<path clip-path=\"url(#clip802)\" d=\"M986.025 1207.43 L986.612 1207.43 L987.198 1207.43 L987.785 1207.43 L988.371 1207.43 L988.957 1207.43 L989.544 1207.43 L990.13 1207.43 L990.717 1207.43 L991.303 1207.43 L991.889 1207.43 L992.476 1207.43 L993.062 1207.43 L993.649 1207.43 L994.235 1207.43 L994.822 1207.43 L995.408 1207.43 L995.994 1207.43 L996.581 1207.43 L997.167 1207.43 L997.754 1207.43 L998.34 1207.43 L998.926 1207.43 L999.513 1207.43 L1000.1 1207.43 L1000.69 1207.43 L1001.27 1207.43 L1001.86 1207.43 L1002.44 1207.43 L1003.03 1207.43 L1003.62 1207.43 L1004.2 1207.43 L1004.79 1207.43 L1005.38 1207.43 L1005.96 1207.43 L1006.55 1207.43 L1007.14 1207.43 L1007.72 1207.43 L1008.31 1207.43 L1008.9 1207.43 L1009.48 1207.43 L1010.07 1207.43 L1010.65 1207.43 L1011.24 1207.43 L1011.83 1207.43 L1012.41 1207.43 L1013 1207.43 L1013.59 1207.43 L1014.17 1207.43 L1014.76 1207.43 L1015.35 1207.43 L1015.93 1207.43 L1016.52 1207.43 L1017.11 1207.43 L1017.69 1207.43 L1018.28 1207.43 L1018.86 1207.43 L1019.45 1207.43 L1020.04 1207.43 L1020.62 1207.43 L1021.21 1207.43 L1021.8 1207.43 L1022.38 1207.43 L1022.97 1207.43 L1023.56 1207.43 L1024.14 1207.43 L1024.73 1207.43 L1025.32 1207.43 L1025.9 1207.43 L1026.49 1207.43 L1027.07 1207.43 L1027.66 1207.43 L1028.25 1207.43 L1028.83 1207.43 L1029.42 1207.43 L1030.01 1207.43 L1030.59 1207.43 L1031.18 1207.43 L1031.77 1207.43 L1032.35 1207.43 L1032.94 1207.43 L1033.52 1207.43 L1034.11 1207.43 L1034.7 1207.43 L1035.28 1207.43 L1035.87 1207.43 L1036.46 1207.43 L1037.04 1207.43 L1037.63 1207.43 L1038.22 1207.43 L1038.8 1207.43 L1039.39 1207.43 L1039.98 1207.43 L1040.56 1207.43 L1041.15 1207.43 L1041.73 1207.43 L1042.32 1207.43 L1042.91 1207.43 L1043.49 1207.43 L1044.08 1207.43 L1044.67 1207.43 L1045.25 1207.43 L1045.84 1207.43 L1046.43 1207.43 L1047.01 1207.43 L1047.6 1207.43 L1048.19 1207.43 L1048.77 1207.43 L1049.36 1207.43 L1049.94 1207.43 L1050.53 1207.43 L1051.12 1207.43 L1051.7 1207.43 L1052.29 1207.43 L1052.88 1207.43 L1053.46 1207.43 L1054.05 1207.43 L1054.64 1207.43 L1055.22 1207.43 L1055.81 1207.43 L1056.39 1207.43 L1056.98 1207.43 L1057.57 1207.43 L1058.15 1207.43 L1058.74 1207.43 L1059.33 1207.43 L1059.91 1207.43 L1060.5 1207.43 L1061.09 1207.43 L1061.67 1207.43 L1062.26 1207.43 L1062.85 1207.43 L1063.43 1207.43 L1064.02 1207.43 L1064.6 1207.43 L1065.19 1207.43 L1065.78 1207.43 L1066.36 1207.43 L1066.95 1207.43 L1067.54 1207.43 L1068.12 1207.43 L1068.71 1207.43 L1069.3 1207.43 L1069.88 1207.43 L1070.47 1207.43 L1071.06 1207.43 L1071.64 1207.43 L1072.23 1207.43 L1072.81 1207.43 L1073.4 1207.43 L1073.99 1207.43 L1074.57 1207.43 L1075.16 1207.43 L1075.75 1207.43 L1076.33 1207.43 L1076.92 1207.43 L1077.51 1207.43 L1078.09 1207.43 L1078.68 1207.43 L1079.26 1207.43 L1079.85 1207.43 L1080.44 1207.43 L1081.02 1207.43 L1081.61 1207.43 L1082.2 1207.43 L1082.78 1207.43 L1083.37 1207.43 L1083.96 1207.43 L1084.54 1207.43 L1085.13 1207.43 L1085.72 1207.43 L1086.3 1207.43 L1086.89 1207.43 L1087.47 1207.43 L1088.06 1207.43 L1088.65 1207.43 L1089.23 1207.43 L1089.82 1207.43 L1090.41 1207.43 L1090.99 1207.43 L1091.58 1207.43 L1092.17 1207.43 L1092.75 1207.43 L1093.34 1207.43 L1093.93 1207.43 L1094.51 1207.43 L1095.1 1207.43 L1095.68 1207.43 L1096.27 1207.43 L1096.86 1207.43 L1097.44 1207.43 L1098.03 1207.43 L1098.62 1207.43 L1099.2 1207.43 L1099.79 1207.43 L1100.38 1207.43 L1100.96 1207.43 L1101.55 1207.43 L1102.14 1207.43 L1102.72 1207.43 L1103.31 1207.43 L1103.89 1207.43 L1104.48 1207.43 L1105.07 1207.43 L1105.65 1207.43 L1106.24 1207.43 L1106.83 1207.43 L1107.41 1207.43 L1108 1207.43 L1108.59 1207.43 L1109.17 1207.43 L1109.76 1207.43 L1110.34 1207.43 L1110.93 1207.43 L1111.52 1207.43 L1112.1 1207.43 L1112.69 1207.43 L1113.28 1207.43 L1113.86 1207.43 L1114.45 1207.43 L1115.04 1207.43 L1115.62 1207.43 L1116.21 1207.43 L1116.8 1207.43 L1117.38 1207.43 L1117.97 1207.43 L1118.55 1207.43 L1119.14 1207.43 L1119.73 1207.43 L1120.31 1207.43 L1120.9 1207.43 L1121.49 1207.43 L1122.07 1207.43 L1122.66 1207.43 L1123.25 1207.43 L1123.83 1207.43 L1124.42 1207.43 L1125.01 1207.43 L1125.59 1207.43 L1126.18 1207.43 L1126.76 1207.43 L1127.35 1207.43 L1127.94 1207.43 L1128.52 1207.43 L1129.11 1207.43 L1129.7 1207.43 L1130.28 1207.43 L1130.87 1207.43 L1131.46 1207.43 L1132.04 1207.43 L1132.63 1207.43 L1133.21 1207.43 L1133.8 1207.43 L1134.39 1207.43 L1134.97 1207.43 L1135.56 1207.43 L1136.15 1207.43 L1136.73 1207.43 L1137.32 1207.43 L1137.91 1207.43 L1138.49 1207.43 L1139.08 1207.43 L1139.67 1207.43 L1140.25 1207.43 L1140.84 1207.43 L1141.42 1207.43 L1142.01 1207.43 L1142.6 1207.43 L1143.18 1207.43 L1143.77 1207.43 L1144.36 1207.43 L1144.94 1207.43 L1145.53 1207.43 L1146.12 1207.43 L1146.7 1207.43 L1147.29 1207.43 L1147.88 1207.43 L1148.46 1207.43 L1149.05 1207.43 L1149.63 1207.43 L1150.22 1207.43 L1150.81 1207.43 L1151.39 1207.43 L1151.98 1207.43 L1152.57 1207.43 L1153.15 1207.43 L1153.74 1207.43 L1154.33 1207.43 L1154.91 1207.43 L1155.5 1207.43 L1156.09 1207.43 L1156.67 1207.43 L1157.26 1207.43 L1157.84 1207.43 L1158.43 1207.43 L1159.02 1207.43 L1159.6 1207.43 L1160.19 1207.43 L1160.78 1207.43 L1161.36 1207.43 L1161.95 1207.43 L1162.54 1207.43 L1163.12 1207.43 L1163.71 1207.43 L1164.29 1207.43 L1164.88 1207.43 L1165.47 1207.43 L1166.05 1207.43 L1166.64 1207.43 L1167.23 1207.43 L1167.81 1207.43 L1168.4 1207.43 L1168.99 1207.43 L1169.57 1207.43 L1170.16 1207.43 L1170.75 1207.43 L1171.33 1207.43 L1171.92 1207.43 L1172.5 1207.43 L1173.09 1207.43 L1173.68 1207.43 L1174.26 1207.43 L1174.85 1207.43 L1175.44 1207.43 L1176.02 1207.43 L1176.61 1207.43 L1177.2 1207.43 L1177.78 1207.43 L1178.37 1207.43 L1178.96 1207.43 L1179.54 1207.43 L1180.13 1207.43 L1180.71 1207.43 L1181.3 1207.43 L1181.89 1207.43 L1182.47 1207.43 L1183.06 1207.43 L1183.65 1207.43 L1184.23 1207.43 L1184.82 1207.43 L1185.41 1207.43 L1185.99 1207.43 L1186.58 1207.43 L1187.16 1207.43 L1187.75 1207.43 L1188.34 1207.43 L1188.92 1207.43 L1189.51 1207.43 L1190.1 1207.43 L1190.68 1207.43 L1191.27 1207.43 L1191.86 1207.43 L1192.44 1207.43 L1193.03 1207.43 L1193.62 1207.43 L1194.2 1207.43 L1194.79 1207.43 L1195.37 1207.43 L1195.96 1207.43 L1196.55 1207.43 L1197.13 1207.43 L1197.72 1207.43 L1198.31 1207.43 L1198.89 1207.43 L1199.48 1207.43 L1200.07 1207.43 L1200.65 1207.43 L1201.24 1207.43 L1201.83 1207.43 L1202.41 1207.43 L1203 1207.43 L1203.58 1207.43 L1204.17 1207.43 L1204.76 1207.43 L1205.34 1207.43 L1205.93 1207.43 L1206.52 1207.43 L1207.1 1207.43 L1207.69 1207.43 L1208.28 1207.43 L1208.86 1207.43 L1209.45 1207.43 L1210.03 1207.43 L1210.62 1207.43 L1211.21 1207.43 L1211.79 1207.43 L1212.38 1207.43 L1212.97 1207.43 L1213.55 1207.43 L1214.14 1207.43 L1214.73 1207.43 L1215.31 1207.43 L1215.9 1207.43 L1216.49 1207.43 L1217.07 1207.43 L1217.66 1207.43 L1218.24 1207.43 L1218.83 1207.43 L1219.42 1207.43 L1220 1207.43 L1220.59 1207.43 L1221.18 1207.43 L1221.76 1207.43 L1222.35 1207.43 L1222.94 1207.43 L1223.52 1207.43 L1224.11 1207.43 L1224.7 1207.43 L1225.28 1207.43 L1225.87 1207.43 L1226.45 1207.43 L1227.04 1207.43 L1227.63 1207.43 L1228.21 1207.43 L1228.8 1207.43 L1229.39 1207.43 L1229.97 1207.43 L1230.56 1207.43 L1231.15 1207.43 L1231.73 1207.43 L1232.32 1207.43 L1232.91 1207.43 L1233.49 1207.43 L1234.08 1207.43 L1234.66 1207.43 L1235.25 1207.43 L1235.84 1207.43 L1236.42 1207.43 L1237.01 1207.43 L1237.6 1207.43 L1238.18 1207.43 L1238.77 1207.43 L1239.36 1207.43 L1239.94 1207.43 L1240.53 1207.43 L1241.11 1207.43 L1241.7 1207.43 L1242.29 1207.43 L1242.87 1207.43 L1243.46 1207.43 L1244.05 1207.43 L1244.63 1207.43 L1245.22 1207.43 L1245.81 1207.43 L1246.39 1207.43 L1246.98 1207.43 L1247.57 1207.43 L1248.15 1207.43 L1248.74 1207.43 L1249.32 1207.43 L1249.91 1207.43 L1250.5 1207.43 L1251.08 1207.43 L1251.67 1207.43 L1252.26 1207.43 L1252.84 1207.43 L1253.43 1207.43 L1254.02 1207.43 L1254.6 1207.43 L1255.19 1207.43 L1255.78 1207.43 L1256.36 1207.43 L1256.95 1207.43 L1257.53 1207.43 L1258.12 1207.43 L1258.71 1207.43 L1259.29 1207.43 L1259.88 1207.43 L1260.47 1207.43 L1261.05 1207.43 L1261.64 1207.43 L1262.23 1207.43 L1262.81 1207.43 L1263.4 1207.43 L1263.98 1207.43 L1264.57 1207.43 L1265.16 1207.43 L1265.74 1207.43 L1266.33 1207.43 L1266.92 1207.43 L1267.5 1207.43 L1268.09 1207.43 L1268.68 1207.43 L1269.26 1207.43 L1269.85 1207.43 L1270.44 1207.43 L1271.02 1207.43 L1271.61 1207.43 L1272.19 1207.43 L1272.78 1207.43 L1273.37 1207.43 L1273.95 1207.43 L1274.54 1207.43 L1275.13 1207.43 L1275.71 1207.43 L1276.3 1207.43 L1276.89 1207.43 L1277.47 1207.43 L1278.06 1207.43 L1278.65 1207.43 L1279.23 1207.43 L1279.82 1207.43 L1280.4 1207.43 L1280.99 1207.43 L1281.58 1207.43 L1282.16 1207.43 L1282.75 1207.43 L1283.34 1207.43 L1283.92 1207.43 L1284.51 1207.43 L1285.1 1207.43 L1285.68 1207.43 L1286.27 1207.43 L1286.86 1207.43 L1287.44 1207.43 L1288.03 1207.43 L1288.61 1207.43 L1289.2 1207.43 L1289.79 1207.43 L1290.37 1207.43 L1290.96 1207.43 L1291.55 1207.43 L1292.13 1207.43 L1292.72 1207.43 L1293.31 1207.43 L1293.89 1207.43 L1294.48 1207.43 L1295.06 1207.43 L1295.65 1207.43 L1296.24 1207.43 L1296.82 1207.43 L1297.41 1207.43 L1298 1207.43 L1298.58 1207.43 L1299.17 1207.43 L1299.76 1207.43 L1300.34 1207.43 L1300.93 1207.43 L1301.52 1207.43 L1302.1 1207.43 L1302.69 1207.43 L1303.27 1207.43 L1303.86 1207.43 L1304.45 1207.43 L1305.03 1207.43 L1305.62 1207.43 L1306.21 1207.43 L1306.79 1207.43 L1307.38 1207.43 L1307.97 1207.43 L1308.55 1207.43 L1309.14 1207.43 L1309.73 1207.43 L1310.31 1207.43 L1310.9 1207.43 L1311.48 1207.43 L1312.07 1207.43 L1312.66 1207.43 L1313.24 1207.43 L1313.83 1207.43 L1314.42 1207.43 L1315 1207.43 L1315.59 1207.43 L1316.18 1207.43 L1316.76 1207.43 L1317.35 1207.43 L1317.93 1207.43 L1318.52 1207.43 L1319.11 1207.43 L1319.69 1207.43 L1320.28 1207.43 L1320.87 1207.43 L1321.45 1207.43 L1322.04 1207.43 L1322.63 1207.43 L1323.21 1207.43 L1323.8 1207.43 L1324.39 1207.43 L1324.97 1207.43 L1325.56 1207.43 L1326.14 1207.43 L1326.73 1207.43 L1327.32 1207.43 L1327.9 1207.43 L1328.49 1207.43 L1329.08 1207.43 L1329.66 1207.43 L1330.25 1207.43 L1330.84 1207.43 L1331.42 1207.43 L1332.01 1207.43 L1332.6 1207.43 L1333.18 1207.43 L1333.77 1207.43 L1334.35 1207.43 L1334.94 1207.43 L1335.53 1207.43 L1336.11 1207.43 L1336.7 1207.43 L1337.29 1207.43 L1337.87 1207.43 L1338.46 1207.43 L1339.05 1207.43 L1339.63 1207.43 L1340.22 1207.43 L1340.8 1207.43 L1341.39 1207.43 L1341.98 1207.43 L1342.56 1207.43 L1343.15 1207.43 L1343.74 1207.43 L1344.32 1207.43 L1344.91 1207.43 L1345.5 1207.43 L1346.08 1207.43 L1346.67 1207.43 L1347.26 1207.43 L1347.84 1207.43 L1348.43 1207.43 L1349.01 1207.43 L1349.6 1207.43 L1350.19 1207.43 L1350.77 1207.43 L1351.36 1207.43 L1351.95 1207.43 L1352.53 1207.43 L1353.12 1207.43 L1353.71 1207.43 L1354.29 1207.43 L1354.88 1207.43 L1355.47 1207.43 L1356.05 1207.43 L1356.64 1207.43 L1357.22 1207.43 L1357.81 1207.43 L1358.4 1207.43 L1358.98 1207.43 L1359.57 1207.43 L1360.16 1207.43 L1360.74 1207.43 L1361.33 1207.43 L1361.92 1207.43 L1362.5 1207.43 L1363.09 1207.43 L1363.68 1207.43 L1364.26 1207.43 L1364.85 1207.43 L1365.43 1207.43 L1366.02 1207.43 L1366.61 1207.43 L1367.19 1207.43 L1367.78 1207.43 L1368.37 1207.43 L1368.95 1207.43 L1369.54 1207.43 L1370.13 1207.43 L1370.71 1207.43 L1371.3 1207.43 L1371.88 1207.43 L1372.47 1207.43 L1373.06 1207.43 L1373.64 1207.43 L1374.23 1207.43 L1374.82 1207.43 L1375.4 1207.43 L1375.99 1207.43 L1376.58 1207.43 L1377.16 1207.43 L1377.75 1207.43 L1378.34 1207.43 L1378.92 1207.43 L1379.51 1207.43 L1380.09 1207.43 L1380.68 1207.43 L1381.27 1207.43 L1381.85 1207.43 L1382.44 1207.43 L1383.03 1207.43 L1383.61 1207.43 L1384.2 1207.43 L1384.79 1207.43 L1385.37 1207.43 L1385.96 1207.43 L1386.55 1207.43 L1387.13 1207.43 L1387.72 1207.43 L1388.3 1207.43 L1388.89 1207.43 L1389.48 1207.43 L1390.06 1207.43 L1390.65 1207.43 L1391.24 1207.43 L1391.82 1207.43 L1392.41 1207.43 L1393 1207.43 L1393.58 1207.43 L1394.17 1207.43 L1394.75 1207.43 L1395.34 1207.43 L1395.93 1207.43 L1396.51 1207.43 L1397.1 1207.43 L1397.69 1207.43 L1398.27 1207.43 L1398.86 1207.43 L1399.45 1207.43 L1400.03 1207.43 L1400.62 1207.43 L1401.21 1207.43 L1401.79 1207.43 L1402.38 1207.43 L1402.96 1207.43 L1403.55 1207.43 L1404.14 1207.43 L1404.72 1207.43 L1405.31 1207.43 L1405.9 1207.43 L1406.48 1207.43 L1407.07 1207.43 L1407.66 1207.43 L1408.24 1207.43 L1408.83 1207.43 L1409.42 1207.43 L1410 1207.43 L1410.59 1207.43 L1411.17 1207.43 L1411.76 1207.43 L1412.35 1207.43 L1412.93 1207.43 L1413.52 1207.43 L1414.11 1207.43 L1414.69 1207.43 L1415.28 1207.43 L1415.87 1207.43 L1416.45 1207.43 L1417.04 1207.43 L1417.63 1207.43 L1418.21 1207.43 L1418.8 1207.43 L1419.38 1207.43 L1419.97 1207.43 L1420.56 1207.43 L1421.14 1207.43 L1421.73 1207.43 L1422.32 1207.43 L1422.9 1207.43 L1423.49 1207.43 L1424.08 1207.43 L1424.66 1207.43 L1425.25 1207.43 L1425.83 1207.43 L1426.42 1207.43 L1427.01 1207.43 L1427.59 1207.43 L1428.18 1207.43 L1428.77 1207.43 L1429.35 1207.43 L1429.94 1207.43 L1430.53 1207.43 L1431.11 1207.43 L1431.7 1207.43 L1432.29 1207.43 L1432.87 1207.43 L1433.46 1207.43 L1434.04 1207.43 L1434.63 1207.43 L1435.22 1207.43 L1435.8 1207.43 L1436.39 1207.43 L1436.98 1207.43 L1437.56 1207.43 L1438.15 1207.43 L1438.74 1207.43 L1439.32 1207.43 L1439.91 1207.43 L1440.5 1207.43 L1441.08 1207.43 L1441.67 1207.43 L1442.25 1207.43 L1442.84 1207.43 L1443.43 1207.43 L1444.01 1207.43 L1444.6 1207.43 L1445.19 1207.43 L1445.77 1207.43 L1446.36 1207.43 L1446.95 1207.43 L1447.53 1207.43 L1448.12 1207.43 L1448.7 1207.43 L1449.29 1207.43 L1449.88 1207.43 L1450.46 1207.43 L1451.05 1207.43 L1451.64 1207.43 L1452.22 1207.43 L1452.81 1207.43 L1453.4 1207.43 L1453.98 1207.43 L1454.57 1207.43 L1455.16 1207.43 L1455.74 1207.43 L1456.33 1207.43 L1456.91 1207.43 L1457.5 1207.43 L1458.09 1207.43 L1458.67 1207.43 L1459.26 1207.43 L1459.85 1207.43 L1460.43 1207.43 L1461.02 1207.43 L1461.61 1207.43 L1462.19 1207.43 L1462.78 1207.43 L1463.37 1207.43 L1463.95 1207.43 L1464.54 1207.43 L1465.12 1207.43 L1465.71 1207.43 L1466.3 1207.43 L1466.88 1207.43 L1467.47 1207.43 L1468.06 1207.43 L1468.64 1207.43 L1469.23 1207.43 L1469.82 1207.43 L1470.4 1207.43 L1470.99 1207.43 L1471.57 1207.43 L1472.16 1207.43 L1472.75 1207.43 L1473.33 1207.43 L1473.92 1207.43 L1474.51 1207.43 L1475.09 1207.43 L1475.68 1207.43 L1476.27 1207.43 L1476.85 1207.43 L1477.44 1207.43 L1478.03 1207.43 L1478.61 1207.43 L1479.2 1207.43 L1479.78 1207.43 L1480.37 1207.43 L1480.96 1207.43 L1481.54 1207.43 L1482.13 1207.43 L1482.72 1207.43 L1483.3 1207.43 L1483.89 1207.43 L1484.48 1207.43 L1485.06 1207.43 L1485.65 1207.43 L1486.24 1207.43 L1486.82 1207.43 L1487.41 1207.43 L1487.99 1207.43 L1488.58 1207.43 L1489.17 1207.43 L1489.75 1207.43 L1490.34 1207.43 L1490.93 1207.43 L1491.51 1207.43 L1492.1 1207.43 L1492.69 1207.43 L1493.27 1207.43 L1493.86 1207.43 L1494.45 1207.43 L1495.03 1207.43 L1495.62 1207.43 L1496.2 1207.43 L1496.79 1207.43 L1497.38 1207.43 L1497.96 1207.43 L1498.55 1207.43 L1499.14 1207.43 L1499.72 1207.43 L1500.31 1207.43 L1500.9 1207.43 L1501.48 1207.43 L1502.07 1207.43 L1502.65 1207.43 L1503.24 1207.43 L1503.83 1207.43 L1504.41 1207.43 L1505 1207.43 L1505.59 1207.43 L1506.17 1207.43 L1506.76 1207.43 L1507.35 1207.43 L1507.93 1207.43 L1508.52 1207.43 L1509.11 1207.43 L1509.69 1207.43 L1510.28 1207.43 L1510.86 1207.43 L1511.45 1207.43 L1512.04 1207.43 L1512.62 1207.43 L1513.21 1207.43 L1513.8 1207.43 L1514.38 1207.43 L1514.97 1207.43 L1515.56 1207.43 L1516.14 1207.43 L1516.73 1207.43 L1517.32 1207.43 L1517.9 1207.43 L1518.49 1207.43 L1519.07 1207.43 L1519.66 1207.43 L1520.25 1207.43 L1520.83 1207.43 L1521.42 1207.43 L1522.01 1207.43 L1522.59 1207.43 L1523.18 1207.43 L1523.77 1207.43 L1524.35 1207.43 L1524.94 1207.43 L1525.52 1207.43 L1526.11 1207.43 L1526.7 1207.43 L1527.28 1207.43 L1527.87 1207.43 L1528.46 1207.43 L1529.04 1207.43 L1529.63 1207.43 L1530.22 1207.43 L1530.8 1207.43 L1531.39 1207.43 L1531.98 1207.43 L1532.56 1207.43 L1533.15 1207.43 L1533.73 1207.43 L1534.32 1207.43 L1534.91 1207.43 L1535.49 1207.43 L1536.08 1207.43 L1536.67 1207.43 L1537.25 1207.43 L1537.84 1207.43 L1538.43 1207.43 L1539.01 1207.43 L1539.6 1207.43 L1540.19 1207.43 L1540.77 1207.43 L1541.36 1207.43 L1541.94 1207.43 L1542.53 1207.43 L1543.12 1207.43 L1543.7 1207.43 L1544.29 1207.43 L1544.88 1207.43 L1545.46 1207.43 L1546.05 1207.43 L1546.64 1207.43 L1547.22 1207.43 L1547.81 1207.43 L1548.4 1207.43 L1548.98 1207.43 L1549.57 1207.43 L1550.15 1207.43 L1550.74 1207.43 L1551.33 1207.43 L1551.91 1207.43 L1552.5 1207.43 L1553.09 1207.43 L1553.67 1207.43 L1554.26 1207.43 L1554.85 1207.43 L1555.43 1207.43 L1556.02 1207.43 L1556.6 1207.43 L1557.19 1207.43 L1557.78 1207.43 L1558.36 1207.43 L1558.95 1207.43 L1559.54 1207.43 L1560.12 1207.43 L1560.71 1207.43 L1561.3 1207.43 L1561.88 1207.43 L1562.47 1207.43 L1563.06 1207.43 L1563.64 1207.43 L1564.23 1207.43 L1564.81 1207.43 L1565.4 1207.43 L1565.99 1207.43 L1566.57 1207.43 L1567.16 1207.43 L1567.75 1207.43 L1568.33 1207.43 L1568.92 1207.43 L1569.51 1207.43 L1570.09 1207.43 L1570.68 1207.43 L1571.27 1207.43 L1571.85 1207.43 L1572.44 1207.43 L1573.02 1207.43 L1573.61 1207.43 L1574.2 1207.43 L1574.78 1207.43 L1575.37 1207.43 L1575.96 1207.43 L1576.54 1207.43 L1577.13 1207.43 L1577.72 1207.43 L1578.3 1207.43 L1578.89 1207.43 L1579.47 1207.43 L1580.06 1207.43 L1580.65 1207.43 L1581.23 1207.43 L1581.82 1207.43 L1582.41 1207.43 L1582.99 1207.43 L1583.58 1207.43 L1584.17 1207.43 L1584.75 1207.43 L1585.34 1207.43 L1585.93 1207.43 L1586.51 1207.43 L1587.1 1207.43 L1587.68 1207.43 L1588.27 1207.43 L1588.86 1207.43 L1589.44 1207.43 L1590.03 1207.43 L1590.62 1207.43 L1591.2 1207.43 L1591.79 1207.43 L1592.38 1207.43 L1592.96 1207.43 L1593.55 1207.43 L1594.14 1207.43 L1594.72 1207.43 L1595.31 1207.43 L1595.89 1207.43 L1596.48 1207.43 L1597.07 1207.43 L1597.65 1207.43 L1598.24 1207.43 L1598.83 1207.43 L1599.41 1207.43 L1600 1207.43 L1600.59 1207.43 L1601.17 1207.43 L1601.76 1207.43 L1602.34 1207.43 L1602.93 1207.43 L1603.52 1207.43 L1604.1 1207.43 L1604.69 1207.43 L1605.28 1207.43 L1605.86 1207.43 L1606.45 1207.43 L1607.04 1207.43 L1607.62 1207.43 L1608.21 1207.43 L1608.8 1207.43 L1609.38 1207.43 L1609.97 1207.43 L1610.55 1207.43 L1611.14 1207.43 L1611.73 1207.43 L1612.31 1207.43 L1612.9 1207.43 L1613.49 1207.43 L1614.07 1207.43 L1614.66 1207.43 L1615.25 1207.43 L1615.83 1207.43 L1616.42 1207.43 L1617.01 1207.43 L1617.59 1207.43 L1618.18 1207.43 L1618.76 1207.43 L1619.35 1207.43 L1619.94 1207.43 L1620.52 1207.43 L1621.11 1207.43 L1621.7 1207.43 L1622.28 1207.43 L1622.87 1207.43 L1623.46 1207.43 L1624.04 1207.43 L1624.63 1207.43 L1625.22 1207.43 L1625.8 1207.43 L1626.39 1207.43 L1626.97 1207.43 L1627.56 1207.43 L1628.15 1207.43 L1628.73 1207.43 L1629.32 1207.43 L1629.91 1207.43 L1630.49 1207.43 L1631.08 1207.43 L1631.67 1207.43 L1632.25 1207.43 L1632.84 1207.43 L1633.42 1207.43 L1634.01 1207.43 L1634.6 1207.43 L1635.18 1207.43 L1635.77 1207.43 L1636.36 1207.43 L1636.94 1207.43 L1637.53 1207.43 L1638.12 1207.43 L1638.7 1207.43 L1639.29 1207.43 L1639.88 1207.43 L1640.46 1207.43 L1641.05 1207.43 L1641.63 1207.43 L1642.22 1207.43 L1642.81 1207.43 L1643.39 1207.43 L1643.98 1207.43 L1644.57 1207.43 L1645.15 1207.43 L1645.74 1207.43 L1646.33 1207.43 L1646.91 1207.43 L1647.5 1207.43 L1648.09 1207.43 L1648.67 1207.43 L1649.26 1207.43 L1649.84 1207.43 L1650.43 1207.43 L1651.02 1207.43 L1651.6 1207.43 L1652.19 1207.43 L1652.78 1207.43 L1653.36 1207.43 L1653.95 1207.43 L1654.54 1207.43 L1655.12 1207.43 L1655.71 1207.43 L1656.29 1207.43 L1656.88 1207.43 L1657.47 1207.43 L1658.05 1207.43 L1658.64 1207.43 L1659.23 1207.43 L1659.81 1207.43 L1660.4 1207.43 L1660.99 1207.43 L1661.57 1207.43 L1662.16 1207.43 L1662.75 1207.43 L1663.33 1207.43 L1663.92 1207.43 L1664.5 1207.43 L1665.09 1207.43 L1665.68 1207.43 L1666.26 1207.43 L1666.85 1207.43 L1667.44 1207.43 L1668.02 1207.43 L1668.61 1207.43 L1669.2 1207.43 L1669.78 1207.43 L1670.37 1207.43 L1670.96 1207.43 L1671.54 1207.43 L1672.13 1207.43 L1672.71 1207.43 L1673.3 1207.43 L1673.89 1207.43 L1674.47 1207.43 L1675.06 1207.43 L1675.65 1207.43 L1676.23 1207.43 L1676.82 1207.43 L1677.41 1207.43 L1677.99 1207.43 L1678.58 1207.43 L1679.17 1207.43 L1679.75 1207.43 L1680.34 1207.43 L1680.92 1207.43 L1681.51 1207.43 L1682.1 1207.43 L1682.68 1207.43 L1683.27 1207.43 L1683.86 1207.43 L1684.44 1207.43 L1685.03 1207.43 L1685.62 1207.43 L1686.2 1207.43 L1686.79 1207.43 L1687.37 1207.43 L1687.96 1207.43 L1688.55 1207.43 L1689.13 1207.43 L1689.72 1207.43 L1690.31 1207.43 L1690.89 1207.43 L1691.48 1207.43 L1692.07 1207.43 L1692.65 1207.43 L1693.24 1207.43 L1693.83 1207.43 L1694.41 1207.43 L1695 1207.43 L1695.58 1207.43 L1696.17 1207.43 L1696.76 1207.43 L1697.34 1207.43 L1697.93 1207.43 L1698.52 1207.43 L1699.1 1207.43 L1699.69 1207.43 L1700.28 1207.43 L1700.86 1207.43 L1701.45 1207.43 L1702.04 1207.43 L1702.62 1207.43 L1703.21 1207.43 L1703.79 1207.43 L1704.38 1207.43 L1704.97 1207.43 L1705.55 1207.43 L1706.14 1207.43 L1706.73 1207.43 L1707.31 1207.43 L1707.9 1207.43 L1708.49 1207.43 L1709.07 1207.43 L1709.66 1207.43 L1710.24 1207.43 L1710.83 1207.43 L1711.42 1207.43 L1712 1207.43 L1712.59 1207.43 L1713.18 1207.43 L1713.76 1207.43 L1714.35 1207.43 L1714.94 1207.43 L1715.52 1207.43 L1716.11 1207.43 L1716.7 1207.43 L1717.28 1207.43 L1717.87 1207.43 L1718.45 1207.43 L1719.04 1207.43 L1719.63 1207.43 L1720.21 1207.43 L1720.8 1207.43 L1721.39 1207.43 L1721.97 1207.43 L1722.56 1207.43 L1723.15 1207.43 L1723.73 1207.43 L1724.32 1207.43 L1724.91 1207.43 L1725.49 1207.43 L1726.08 1207.43 L1726.66 1207.43 L1727.25 1207.43 L1727.84 1207.43 L1728.42 1207.43 L1729.01 1207.43 L1729.6 1207.43 L1730.18 1207.43 L1730.77 1207.43 L1731.36 1207.43 L1731.94 1207.43 L1732.53 1207.43 L1733.11 1207.43 L1733.7 1207.43 L1734.29 1207.43 L1734.87 1207.43 L1735.46 1207.43 L1736.05 1207.43 L1736.63 1207.43 L1737.22 1207.43 L1737.81 1207.43 L1738.39 1207.43 L1738.98 1207.43 L1739.57 1207.43 L1740.15 1207.43 L1740.74 1207.43 L1741.32 1207.43 L1741.91 1207.43 L1742.5 1207.43 L1743.08 1207.43 L1743.67 1207.43 L1744.26 1207.43 L1744.84 1207.43 L1745.43 1207.43 L1746.02 1207.43 L1746.6 1207.43 L1747.19 1207.43 L1747.78 1207.43 L1748.36 1207.43 L1748.95 1207.43 L1749.53 1207.43 L1750.12 1207.43 L1750.71 1207.43 L1751.29 1207.43 L1751.88 1207.43 L1752.47 1207.43 L1753.05 1207.43 L1753.64 1207.43 L1754.23 1207.43 L1754.81 1207.43 L1755.4 1207.43 L1755.99 1207.43 L1756.57 1207.43 L1757.16 1207.43 L1757.74 1207.43 L1758.33 1207.43 L1758.92 1207.43 L1759.5 1207.43 L1760.09 1207.43 L1760.68 1207.43 L1761.26 1207.43 L1761.85 1207.43 L1762.44 1207.43 L1763.02 1207.43 L1763.61 1207.43 L1764.19 1207.43 L1764.78 1207.43 L1765.37 1207.43 L1765.95 1207.43 L1766.54 1207.43 L1767.13 1207.43 L1767.71 1207.43 L1768.3 1207.43 L1768.89 1207.43 L1769.47 1207.43 L1770.06 1207.43 L1770.65 1207.43 L1771.23 1207.43 L1771.82 1207.43 L1772.4 1207.43 L1772.99 1207.43 L1773.58 1207.43 L1774.16 1207.43 L1774.75 1207.43 L1775.34 1207.43 L1775.92 1207.43 L1776.51 1207.43 L1777.1 1207.43 L1777.68 1207.43 L1778.27 1207.43 L1778.86 1207.43 L1779.44 1207.43 L1780.03 1207.43 L1780.61 1207.43 L1781.2 1207.43 L1781.79 1207.43 L1782.37 1207.43 L1782.96 1207.43 L1783.55 1207.43 L1784.13 1207.43 L1784.72 1207.43 L1785.31 1207.43 L1785.89 1207.43 L1786.48 1207.43 L1787.06 1207.43 L1787.65 1207.43 L1788.24 1207.43 L1788.82 1207.43 L1789.41 1207.43 L1790 1207.43 L1790.58 1207.43 L1791.17 1207.43 L1791.76 1207.43 L1792.34 1207.43 L1792.93 1207.43 L1793.52 1207.43 L1794.1 1207.43 L1794.69 1207.43 L1795.27 1207.43 L1795.86 1207.43 L1796.45 1207.43 L1797.03 1207.43 L1797.62 1207.43 L1798.21 1207.43 L1798.79 1207.43 L1799.38 1207.43 L1799.97 1207.43 L1800.55 1207.43 L1801.14 1207.43 L1801.73 1207.43 L1802.31 1207.43 L1802.9 1207.43 L1803.48 1207.43 L1804.07 1207.43 L1804.66 1207.43 L1805.24 1207.43 L1805.83 1207.43 L1806.42 1207.43 L1807 1207.43 L1807.59 1207.43 L1808.18 1207.43 L1808.76 1207.43 L1809.35 1207.43 L1809.94 1207.43 L1810.52 1207.43 L1811.11 1207.43 L1811.69 1207.43 L1812.28 1207.43 L1812.87 1207.43 L1813.45 1207.43 L1814.04 1207.43 L1814.63 1207.43 L1815.21 1207.43 L1815.8 1207.43 L1816.39 1207.43 L1816.97 1207.43 L1817.56 1207.43 L1818.14 1207.43 L1818.73 1207.43 L1819.32 1207.43 L1819.9 1207.43 L1820.49 1207.43 L1821.08 1207.43 L1821.66 1207.43 L1822.25 1207.43 L1822.84 1207.43 L1823.42 1207.43 L1824.01 1207.43 L1824.6 1207.43 L1825.18 1207.43 L1825.77 1207.43 L1826.35 1207.43 L1826.94 1207.43 L1827.53 1207.43 L1828.11 1207.43 L1828.7 1207.43 L1829.29 1207.43 L1829.87 1207.43 L1830.46 1207.43 L1831.05 1207.43 L1831.63 1207.43 L1832.22 1207.43 L1832.81 1207.43 L1833.39 1207.43 L1833.98 1207.43 L1834.56 1207.43 L1835.15 1207.43 L1835.74 1207.43 L1836.32 1207.43 L1836.91 1207.43 L1837.5 1207.43 L1838.08 1207.43 L1838.67 1207.43 L1839.26 1207.43 L1839.84 1207.43 L1840.43 1207.43 L1841.01 1207.43 L1841.6 1207.43 L1842.19 1207.43 L1842.77 1207.43 L1843.36 1207.43 L1843.95 1207.43 L1844.53 1207.43 L1845.12 1207.43 L1845.71 1207.43 L1846.29 1207.43 L1846.88 1207.43 L1847.47 1207.43 L1848.05 1207.43 L1848.64 1207.43 L1849.22 1207.43 L1849.81 1207.43 L1850.4 1207.43 L1850.98 1207.43 L1851.57 1207.43 L1852.16 1207.43 L1852.74 1207.43 L1853.33 1207.43 L1853.92 1207.43 L1854.5 1207.43 L1855.09 1207.43 L1855.68 1207.43 L1856.26 1207.43 L1856.85 1207.43 L1857.43 1207.43 L1858.02 1207.43 L1858.61 1207.43 L1859.19 1207.43 L1859.78 1207.43 L1860.37 1207.43 L1860.95 1207.43 L1861.54 1207.43 L1862.13 1207.43 L1862.71 1207.43 L1863.3 1207.43 L1863.88 1207.43 L1864.47 1207.43 L1865.06 1207.43 L1865.64 1207.43 L1866.23 1207.43 L1866.82 1207.43 L1867.4 1207.43 L1867.99 1207.43 L1868.58 1207.43 L1869.16 1207.43 L1869.75 1207.43 L1870.34 1207.43 L1870.92 1207.43 L1871.51 1207.43 L1872.09 1207.43 L1872.68 1207.43 L1873.27 1207.43 L1873.85 1207.43 L1874.44 1207.43 L1875.03 1207.43 L1875.61 1207.43 L1876.2 1207.43 L1876.79 1207.43 L1877.37 1207.43 L1877.96 1207.43 L1878.55 1207.43 L1879.13 1207.43 L1879.72 1207.43 L1880.3 1207.43 L1880.89 1207.43 L1881.48 1207.43 L1882.06 1207.43 L1882.65 1207.43 L1883.24 1207.43 L1883.82 1207.43 L1884.41 1207.43 L1885 1207.43 L1885.58 1207.43 L1886.17 1207.43 L1886.76 1207.43 L1887.34 1207.43 L1887.93 1207.43 L1888.51 1207.43 L1889.1 1207.43 L1889.69 1207.43 L1890.27 1207.43 L1890.86 1207.43 L1891.45 1207.43 L1892.03 1207.43 L1892.62 1207.43 L1893.21 1207.43 L1893.79 1207.43 L1894.38 1207.43 L1894.96 1207.43 L1895.55 1207.43 L1896.14 1207.43 L1896.72 1207.43 L1897.31 1207.43 L1897.9 1207.43 L1898.48 1207.43 L1899.07 1207.43 L1899.66 1207.43 L1900.24 1207.43 L1900.83 1207.43 L1901.42 1207.43 L1902 1207.43 L1902.59 1207.43 L1903.17 1207.43 L1903.76 1207.43 L1904.35 1207.43 L1904.93 1207.43 L1905.52 1207.43 L1906.11 1207.43 L1906.69 1207.43 L1907.28 1207.43 L1907.87 1207.43 L1908.45 1207.43 L1909.04 1207.43 L1909.63 1207.43 L1910.21 1207.43 L1910.8 1207.43 L1911.38 1207.43 L1911.97 1207.43 L1912.56 1207.43 L1913.14 1207.43 L1913.73 1207.43 L1914.32 1207.43 L1914.9 1207.43 L1915.49 1207.43 L1916.08 1207.43 L1916.66 1207.43 L1917.25 1207.43 L1917.83 1207.43 L1918.42 1207.43 L1919.01 1207.43 L1919.59 1207.43 L1920.18 1207.43 L1920.77 1207.43 L1921.35 1207.43 L1921.94 1207.43 L1922.53 1207.43 L1923.11 1207.43 L1923.7 1207.43 L1924.29 1207.43 L1924.87 1207.43 L1925.46 1207.43 L1926.04 1207.43 L1926.63 1207.43 L1927.22 1207.43 L1927.8 1207.43 L1928.39 1207.43 L1928.98 1207.43 L1929.56 1207.43 L1930.15 1207.43 L1930.74 1207.43 L1931.32 1207.43 L1931.91 1207.43 L1932.5 1207.43 L1933.08 1207.43 L1933.67 1207.43 L1934.25 1207.43 L1934.84 1207.43 L1935.43 1207.43 L1936.01 1207.43 L1936.6 1207.43 L1937.19 1207.43 L1937.77 1207.43 L1938.36 1207.43 L1938.95 1207.43 L1939.53 1207.43 L1940.12 1207.43 L1940.71 1207.43 L1941.29 1207.43 L1941.88 1207.43 L1942.46 1207.43 L1943.05 1207.43 L1943.64 1207.43 L1944.22 1207.43 L1944.81 1207.43 L1945.4 1207.43 L1945.98 1207.43 L1946.57 1207.43 L1947.16 1207.43 L1947.74 1207.43 L1948.33 1207.43 L1948.91 1207.43 L1949.5 1207.43 L1950.09 1207.43 L1950.67 1207.43 L1951.26 1207.43 L1951.85 1207.43 L1952.43 1207.43 L1953.02 1207.43 L1953.61 1207.43 L1954.19 1207.43 L1954.78 1207.43 L1955.37 1207.43 L1955.95 1207.43 L1956.54 1207.43 L1957.12 1207.43 L1957.71 1207.43 L1958.3 1207.43 L1958.88 1207.43 L1959.47 1207.43 L1960.06 1207.43 L1960.64 1207.43 L1961.23 1207.43 L1961.82 1207.43 L1962.4 1207.43 L1962.99 1207.43 L1963.58 1207.43 L1964.16 1207.43 L1964.75 1207.43 L1965.33 1207.43 L1965.92 1207.43 L1966.51 1207.43 L1967.09 1207.43 L1967.68 1207.43 L1968.27 1207.43 L1968.85 1207.43 L1969.44 1207.43 L1970.03 1207.43 L1970.61 1207.43 L1971.2 1207.43 L1971.78 1207.43 L1972.37 1207.43 L1972.96 1207.43 L1973.54 1207.43 L1974.13 1207.43 L1974.72 1207.43 L1975.3 1207.43 L1975.89 1207.43 L1976.48 1207.43 L1977.06 1207.43 L1977.65 1207.43 L1978.24 1207.43 L1978.82 1207.43 L1979.41 1207.43 L1979.99 1207.43 L1980.58 1207.43 L1981.17 1207.43 L1981.75 1207.43 L1982.34 1207.43 L1982.93 1207.43 L1983.51 1207.43 L1984.1 1207.43 L1984.69 1207.43 L1985.27 1207.43 L1985.86 1207.43 L1986.45 1207.43 L1987.03 1207.43 L1987.62 1207.43 L1988.2 1207.43 L1988.79 1207.43 L1989.38 1207.43 L1989.96 1207.43 L1990.55 1207.43 L1991.14 1207.43 L1991.72 1207.43 L1992.31 1207.43 L1992.9 1207.43 L1993.48 1207.43 L1994.07 1207.43 L1994.65 1207.43 L1995.24 1207.43 L1995.83 1207.43 L1996.41 1207.43 L1997 1207.43 L1997.59 1207.43 L1998.17 1207.43 L1998.76 1207.43 L1999.35 1207.43 L1999.93 1207.43 L2000.52 1207.43 L2001.11 1207.43 L2001.69 1207.43 L2002.28 1207.43 L2002.86 1207.43 L2003.45 1207.43 L2004.04 1207.43 L2004.62 1207.43 L2005.21 1207.43 L2005.8 1207.43 L2006.38 1207.43 L2006.97 1207.43 L2007.56 1207.43 L2008.14 1207.43 L2008.73 1207.43 L2009.32 1207.43 L2009.9 1207.43 L2010.49 1207.43 L2011.07 1207.43 L2011.66 1207.43 L2012.25 1207.43 L2012.83 1207.43 L2013.42 1207.43 L2014.01 1207.43 L2014.59 1207.43 L2015.18 1207.43 L2015.77 1207.43 L2016.35 1207.43 L2016.94 1207.43 L2017.53 1207.43 L2018.11 1207.43 L2018.7 1207.43 L2019.28 1207.43 L2019.87 1207.43 L2020.46 1207.43 L2021.04 1207.43 L2021.63 1207.43 L2022.22 1207.43 L2022.8 1207.43 L2023.39 1207.43 L2023.98 1207.43 L2024.56 1207.43 L2025.15 1207.43 L2025.73 1207.43 L2026.32 1207.43 L2026.91 1207.43 L2027.49 1207.43 L2028.08 1207.43 L2028.67 1207.43 L2029.25 1207.43 L2029.84 1207.43 L2030.43 1207.43 L2031.01 1207.43 L2031.6 1207.43 L2032.19 1207.43 L2032.77 1207.43 L2033.36 1207.43 L2033.94 1207.43 L2034.53 1207.43 L2035.12 1207.43 L2035.7 1207.43 L2036.29 1207.43 L2036.88 1207.43 L2037.46 1207.43 L2038.05 1207.43 L2038.64 1207.43 L2039.22 1207.43 L2039.81 1207.43 L2040.4 1207.43 L2040.98 1207.43 L2041.57 1207.43 L2042.15 1207.43 L2042.74 1207.43 L2043.33 1207.43 L2043.91 1207.43 L2044.5 1207.43 L2045.09 1207.43 L2045.67 1207.43 L2046.26 1207.43 L2046.85 1207.43 L2047.43 1207.43 L2048.02 1207.43 L2048.6 1207.43 L2049.19 1207.43 L2049.78 1207.43 L2050.36 1207.43 L2050.95 1207.43 L2051.54 1207.43 L2052.12 1207.43 L2052.71 1207.43 L2053.3 1207.43 L2053.88 1207.43 L2054.47 1207.43 L2055.06 1207.43 L2055.64 1207.43 L2056.23 1207.43 L2056.81 1207.43 L2057.4 1207.43 L2057.99 1207.43 L2058.57 1207.43 L2059.16 1207.43 L2059.75 1207.43 L2060.33 1207.43 L2060.92 1207.43 L2061.51 1207.43 L2062.09 1207.43 L2062.68 1207.43 L2063.27 1207.43 L2063.85 1207.43 L2064.44 1207.43 L2065.02 1207.43 L2065.61 1207.43 L2066.2 1207.43 L2066.78 1207.43 L2067.37 1207.43 L2067.96 1207.43 L2068.54 1207.43 L2069.13 1207.43 L2069.72 1207.43 L2070.3 1207.43 L2070.89 1207.43 L2071.48 1207.43 L2072.06 1207.43 L2072.65 1207.43 L2073.23 1207.43 L2073.82 1207.43 L2074.41 1207.43 L2074.99 1207.43 L2075.58 1207.43 L2076.17 1207.43 L2076.75 1207.43 L2077.34 1207.43 L2077.93 1207.43 L2078.51 1207.43 L2079.1 1207.43 L2079.68 1207.43 L2080.27 1207.43 L2080.86 1207.43 L2081.44 1207.43 L2082.03 1207.43 L2082.62 1207.43 L2083.2 1207.43 L2083.79 1207.43 L2084.38 1207.43 L2084.96 1207.43 L2085.55 1207.43 L2086.14 1207.43 L2086.72 1207.43 L2087.31 1207.43 L2087.89 1207.43 L2088.48 1207.43 L2089.07 1207.43 L2089.65 1207.43 L2090.24 1207.43 L2090.83 1207.43 L2091.41 1207.43 L2092 1207.43 L2092.59 1207.43 L2093.17 1207.43 L2093.76 1207.43 L2094.35 1207.43 L2094.93 1207.43 L2095.52 1207.43 L2096.1 1207.43 L2096.69 1207.43 L2097.28 1207.43 L2097.86 1207.43 L2098.45 1207.43 L2099.04 1207.43 L2099.62 1207.43 L2100.21 1207.43 L2100.8 1207.43 L2101.38 1207.43 L2101.97 1207.43 L2102.55 1207.43 L2103.14 1207.43 L2103.73 1207.43 L2104.31 1207.43 L2104.9 1207.43 L2105.49 1207.43 L2106.07 1207.43 L2106.66 1207.43 L2107.25 1207.43 L2107.83 1207.43 L2108.42 1207.43 L2109.01 1207.43 L2109.59 1207.43 L2110.18 1207.43 L2110.76 1207.43 L2111.35 1207.43 L2111.94 1207.43 L2112.52 1207.43 L2113.11 1207.43 L2113.7 1207.43 L2114.28 1207.43 L2114.87 1207.43 L2115.46 1207.43 L2116.04 1207.43 L2116.63 1207.43 L2117.22 1207.43 L2117.8 1207.43 L2118.39 1207.43 L2118.97 1207.43 L2119.56 1207.43 L2120.15 1207.43 L2120.73 1207.43 L2121.32 1207.43 L2121.91 1207.43 L2122.49 1207.43 L2123.08 1207.43 L2123.67 1207.43 L2124.25 1207.43 L2124.84 1207.43 L2125.42 1207.43 L2126.01 1207.43 L2126.6 1207.43 L2127.18 1207.43 L2127.77 1207.43 L2128.36 1207.43 L2128.94 1207.43 L2129.53 1207.43 L2130.12 1207.43 L2130.7 1207.43 L2131.29 1207.43 L2131.88 1207.43 L2132.46 1207.43 L2133.05 1207.43 L2133.63 1207.43 L2134.22 1207.43 L2134.81 1207.43 L2135.39 1207.43 L2135.98 1207.43 L2136.57 1207.43 L2137.15 1207.43 L2137.74 1207.43 L2138.33 1207.43 L2138.91 1207.43 L2139.5 1207.43 L2140.09 1207.43 L2140.67 1207.43 L2141.26 1207.43 L2141.84 1207.43 L2142.43 1207.43 L2143.02 1207.43 L2143.6 1207.43 L2144.19 1207.43 L2144.78 1207.43 L2145.36 1207.43 L2145.95 1207.43 L2146.54 1207.43 L2147.12 1207.43 L2147.71 1207.43 L2148.3 1207.43 L2148.88 1207.43 L2149.47 1207.43 L2150.05 1207.43 L2150.64 1207.43 L2151.23 1207.43 L2151.81 1207.43 L2152.4 1207.43 L2152.99 1207.43 L2153.57 1207.43 L2154.16 1207.43 L2154.75 1207.43 L2155.33 1207.43 L2155.92 1207.43 L2156.5 1207.43 L2157.09 1207.43 L2157.68 1207.43 L2158.26 1207.43 L2158.26 1206.55 L2157.68 1206.55 L2157.09 1206.55 L2156.5 1206.55 L2155.92 1206.55 L2155.33 1206.55 L2154.75 1206.55 L2154.16 1206.55 L2153.57 1206.55 L2152.99 1206.55 L2152.4 1206.55 L2151.81 1206.55 L2151.23 1206.55 L2150.64 1206.55 L2150.05 1206.55 L2149.47 1206.55 L2148.88 1206.55 L2148.3 1206.55 L2147.71 1206.55 L2147.12 1206.55 L2146.54 1206.55 L2145.95 1206.55 L2145.36 1206.55 L2144.78 1206.55 L2144.19 1206.55 L2143.6 1206.55 L2143.02 1206.55 L2142.43 1206.55 L2141.84 1206.55 L2141.26 1206.55 L2140.67 1206.55 L2140.09 1206.55 L2139.5 1206.55 L2138.91 1206.55 L2138.33 1206.55 L2137.74 1206.55 L2137.15 1206.55 L2136.57 1206.55 L2135.98 1206.55 L2135.39 1206.55 L2134.81 1206.55 L2134.22 1206.55 L2133.63 1206.55 L2133.05 1206.55 L2132.46 1206.55 L2131.88 1206.55 L2131.29 1206.55 L2130.7 1206.55 L2130.12 1206.55 L2129.53 1206.55 L2128.94 1206.55 L2128.36 1206.55 L2127.77 1206.55 L2127.18 1206.55 L2126.6 1206.55 L2126.01 1206.55 L2125.42 1206.55 L2124.84 1206.55 L2124.25 1206.55 L2123.67 1206.55 L2123.08 1206.55 L2122.49 1206.55 L2121.91 1206.55 L2121.32 1206.55 L2120.73 1206.55 L2120.15 1206.55 L2119.56 1206.55 L2118.97 1206.55 L2118.39 1206.55 L2117.8 1206.55 L2117.22 1206.55 L2116.63 1206.55 L2116.04 1206.55 L2115.46 1206.55 L2114.87 1206.55 L2114.28 1206.55 L2113.7 1206.55 L2113.11 1206.55 L2112.52 1206.55 L2111.94 1206.55 L2111.35 1206.55 L2110.76 1206.55 L2110.18 1206.55 L2109.59 1206.55 L2109.01 1206.55 L2108.42 1206.55 L2107.83 1206.55 L2107.25 1206.55 L2106.66 1206.55 L2106.07 1206.55 L2105.49 1206.55 L2104.9 1206.55 L2104.31 1206.55 L2103.73 1206.55 L2103.14 1206.55 L2102.55 1206.55 L2101.97 1206.55 L2101.38 1206.55 L2100.8 1206.55 L2100.21 1206.55 L2099.62 1206.55 L2099.04 1206.55 L2098.45 1206.55 L2097.86 1206.55 L2097.28 1206.55 L2096.69 1206.55 L2096.1 1206.55 L2095.52 1206.55 L2094.93 1206.55 L2094.35 1206.55 L2093.76 1206.55 L2093.17 1206.55 L2092.59 1206.55 L2092 1206.55 L2091.41 1206.55 L2090.83 1206.55 L2090.24 1206.55 L2089.65 1206.55 L2089.07 1206.55 L2088.48 1206.55 L2087.89 1206.55 L2087.31 1206.55 L2086.72 1206.55 L2086.14 1206.55 L2085.55 1206.55 L2084.96 1206.55 L2084.38 1206.55 L2083.79 1206.55 L2083.2 1206.55 L2082.62 1206.55 L2082.03 1206.55 L2081.44 1206.55 L2080.86 1206.55 L2080.27 1206.55 L2079.68 1206.55 L2079.1 1206.55 L2078.51 1206.55 L2077.93 1206.55 L2077.34 1206.55 L2076.75 1206.55 L2076.17 1206.55 L2075.58 1206.55 L2074.99 1206.55 L2074.41 1206.55 L2073.82 1206.55 L2073.23 1206.55 L2072.65 1206.55 L2072.06 1206.55 L2071.48 1206.55 L2070.89 1206.55 L2070.3 1206.55 L2069.72 1206.55 L2069.13 1206.55 L2068.54 1206.55 L2067.96 1206.55 L2067.37 1206.55 L2066.78 1206.55 L2066.2 1206.55 L2065.61 1206.55 L2065.02 1206.55 L2064.44 1206.55 L2063.85 1206.55 L2063.27 1206.55 L2062.68 1206.55 L2062.09 1206.55 L2061.51 1206.55 L2060.92 1206.55 L2060.33 1206.55 L2059.75 1206.55 L2059.16 1206.55 L2058.57 1206.55 L2057.99 1206.55 L2057.4 1206.55 L2056.81 1206.55 L2056.23 1206.55 L2055.64 1206.55 L2055.06 1206.55 L2054.47 1206.55 L2053.88 1206.55 L2053.3 1206.55 L2052.71 1206.55 L2052.12 1206.55 L2051.54 1206.55 L2050.95 1206.55 L2050.36 1206.55 L2049.78 1206.55 L2049.19 1206.55 L2048.6 1206.55 L2048.02 1206.55 L2047.43 1206.55 L2046.85 1206.55 L2046.26 1206.55 L2045.67 1206.55 L2045.09 1206.55 L2044.5 1206.55 L2043.91 1206.55 L2043.33 1206.55 L2042.74 1206.55 L2042.15 1206.55 L2041.57 1206.55 L2040.98 1206.55 L2040.4 1206.55 L2039.81 1206.55 L2039.22 1206.55 L2038.64 1206.55 L2038.05 1206.55 L2037.46 1206.55 L2036.88 1206.55 L2036.29 1206.55 L2035.7 1206.55 L2035.12 1206.55 L2034.53 1206.55 L2033.94 1206.55 L2033.36 1206.55 L2032.77 1206.55 L2032.19 1206.55 L2031.6 1206.55 L2031.01 1206.55 L2030.43 1206.55 L2029.84 1206.55 L2029.25 1206.55 L2028.67 1206.55 L2028.08 1206.55 L2027.49 1206.55 L2026.91 1206.55 L2026.32 1206.55 L2025.73 1206.55 L2025.15 1206.55 L2024.56 1206.55 L2023.98 1206.55 L2023.39 1206.55 L2022.8 1206.55 L2022.22 1206.55 L2021.63 1206.55 L2021.04 1206.55 L2020.46 1206.55 L2019.87 1206.55 L2019.28 1206.55 L2018.7 1206.55 L2018.11 1206.55 L2017.53 1206.55 L2016.94 1206.55 L2016.35 1206.55 L2015.77 1206.55 L2015.18 1206.55 L2014.59 1206.55 L2014.01 1206.55 L2013.42 1206.55 L2012.83 1206.55 L2012.25 1206.55 L2011.66 1206.55 L2011.07 1206.55 L2010.49 1206.55 L2009.9 1206.55 L2009.32 1206.55 L2008.73 1206.55 L2008.14 1206.55 L2007.56 1206.55 L2006.97 1206.55 L2006.38 1206.55 L2005.8 1206.55 L2005.21 1206.55 L2004.62 1206.55 L2004.04 1206.55 L2003.45 1206.55 L2002.86 1206.55 L2002.28 1206.55 L2001.69 1206.55 L2001.11 1206.55 L2000.52 1206.55 L1999.93 1206.55 L1999.35 1206.55 L1998.76 1206.55 L1998.17 1206.55 L1997.59 1206.55 L1997 1206.55 L1996.41 1206.55 L1995.83 1206.55 L1995.24 1206.55 L1994.65 1206.55 L1994.07 1206.55 L1993.48 1206.55 L1992.9 1206.55 L1992.31 1206.55 L1991.72 1206.55 L1991.14 1206.55 L1990.55 1206.55 L1989.96 1206.55 L1989.38 1206.55 L1988.79 1206.55 L1988.2 1206.55 L1987.62 1206.55 L1987.03 1206.55 L1986.45 1206.55 L1985.86 1206.55 L1985.27 1206.55 L1984.69 1206.55 L1984.1 1206.55 L1983.51 1206.55 L1982.93 1206.55 L1982.34 1206.55 L1981.75 1206.55 L1981.17 1206.55 L1980.58 1206.55 L1979.99 1206.55 L1979.41 1206.55 L1978.82 1206.55 L1978.24 1206.55 L1977.65 1206.55 L1977.06 1206.55 L1976.48 1206.55 L1975.89 1206.55 L1975.3 1206.55 L1974.72 1206.55 L1974.13 1206.55 L1973.54 1206.55 L1972.96 1206.55 L1972.37 1206.55 L1971.78 1206.55 L1971.2 1206.55 L1970.61 1206.55 L1970.03 1206.55 L1969.44 1206.55 L1968.85 1206.55 L1968.27 1206.55 L1967.68 1206.55 L1967.09 1206.55 L1966.51 1206.55 L1965.92 1206.55 L1965.33 1206.55 L1964.75 1206.55 L1964.16 1206.55 L1963.58 1206.55 L1962.99 1206.55 L1962.4 1206.55 L1961.82 1206.55 L1961.23 1206.55 L1960.64 1206.55 L1960.06 1206.55 L1959.47 1206.55 L1958.88 1206.55 L1958.3 1206.55 L1957.71 1206.55 L1957.12 1206.55 L1956.54 1206.55 L1955.95 1206.55 L1955.37 1206.55 L1954.78 1206.55 L1954.19 1206.55 L1953.61 1206.55 L1953.02 1206.55 L1952.43 1206.55 L1951.85 1206.55 L1951.26 1206.55 L1950.67 1206.55 L1950.09 1206.55 L1949.5 1206.55 L1948.91 1206.55 L1948.33 1206.55 L1947.74 1206.55 L1947.16 1206.55 L1946.57 1206.55 L1945.98 1206.55 L1945.4 1206.55 L1944.81 1206.55 L1944.22 1206.55 L1943.64 1206.55 L1943.05 1206.55 L1942.46 1206.55 L1941.88 1206.55 L1941.29 1206.55 L1940.71 1206.55 L1940.12 1206.55 L1939.53 1206.55 L1938.95 1206.55 L1938.36 1206.55 L1937.77 1206.55 L1937.19 1206.55 L1936.6 1206.55 L1936.01 1206.55 L1935.43 1206.55 L1934.84 1206.55 L1934.25 1206.55 L1933.67 1206.55 L1933.08 1206.55 L1932.5 1206.55 L1931.91 1206.55 L1931.32 1206.55 L1930.74 1206.55 L1930.15 1206.55 L1929.56 1206.55 L1928.98 1206.55 L1928.39 1206.55 L1927.8 1206.55 L1927.22 1206.55 L1926.63 1206.55 L1926.04 1206.55 L1925.46 1206.55 L1924.87 1206.55 L1924.29 1206.55 L1923.7 1206.55 L1923.11 1206.55 L1922.53 1206.55 L1921.94 1206.55 L1921.35 1206.55 L1920.77 1206.55 L1920.18 1206.55 L1919.59 1206.55 L1919.01 1206.55 L1918.42 1206.55 L1917.83 1206.55 L1917.25 1206.55 L1916.66 1206.55 L1916.08 1206.55 L1915.49 1206.55 L1914.9 1206.55 L1914.32 1206.55 L1913.73 1206.55 L1913.14 1206.55 L1912.56 1206.55 L1911.97 1206.55 L1911.38 1206.55 L1910.8 1206.55 L1910.21 1206.55 L1909.63 1206.55 L1909.04 1206.55 L1908.45 1206.55 L1907.87 1206.55 L1907.28 1206.55 L1906.69 1206.55 L1906.11 1206.55 L1905.52 1206.55 L1904.93 1206.55 L1904.35 1206.55 L1903.76 1206.55 L1903.17 1206.55 L1902.59 1206.55 L1902 1206.55 L1901.42 1206.55 L1900.83 1206.55 L1900.24 1206.55 L1899.66 1206.55 L1899.07 1206.55 L1898.48 1206.55 L1897.9 1206.55 L1897.31 1206.55 L1896.72 1206.55 L1896.14 1206.55 L1895.55 1206.55 L1894.96 1206.55 L1894.38 1206.55 L1893.79 1206.55 L1893.21 1206.55 L1892.62 1206.55 L1892.03 1206.55 L1891.45 1206.55 L1890.86 1206.55 L1890.27 1206.55 L1889.69 1206.55 L1889.1 1206.55 L1888.51 1206.55 L1887.93 1206.55 L1887.34 1206.55 L1886.76 1206.55 L1886.17 1206.55 L1885.58 1206.55 L1885 1206.55 L1884.41 1206.55 L1883.82 1206.55 L1883.24 1206.55 L1882.65 1206.55 L1882.06 1206.55 L1881.48 1206.55 L1880.89 1206.55 L1880.3 1206.55 L1879.72 1206.55 L1879.13 1206.55 L1878.55 1206.55 L1877.96 1206.55 L1877.37 1206.55 L1876.79 1206.55 L1876.2 1206.55 L1875.61 1206.55 L1875.03 1206.55 L1874.44 1206.55 L1873.85 1206.55 L1873.27 1206.55 L1872.68 1206.55 L1872.09 1206.55 L1871.51 1206.55 L1870.92 1206.55 L1870.34 1206.55 L1869.75 1206.55 L1869.16 1206.55 L1868.58 1206.55 L1867.99 1206.55 L1867.4 1206.55 L1866.82 1206.55 L1866.23 1206.55 L1865.64 1206.55 L1865.06 1206.55 L1864.47 1206.55 L1863.88 1206.55 L1863.3 1206.55 L1862.71 1206.55 L1862.13 1206.55 L1861.54 1206.55 L1860.95 1206.55 L1860.37 1206.55 L1859.78 1206.55 L1859.19 1206.55 L1858.61 1206.55 L1858.02 1206.55 L1857.43 1206.55 L1856.85 1206.55 L1856.26 1206.55 L1855.68 1206.55 L1855.09 1206.55 L1854.5 1206.55 L1853.92 1206.55 L1853.33 1206.55 L1852.74 1206.55 L1852.16 1206.55 L1851.57 1206.55 L1850.98 1206.55 L1850.4 1206.55 L1849.81 1206.55 L1849.22 1206.55 L1848.64 1206.55 L1848.05 1206.55 L1847.47 1206.55 L1846.88 1206.55 L1846.29 1206.55 L1845.71 1206.55 L1845.12 1206.55 L1844.53 1206.55 L1843.95 1206.55 L1843.36 1206.55 L1842.77 1206.55 L1842.19 1206.55 L1841.6 1206.55 L1841.01 1206.55 L1840.43 1206.55 L1839.84 1206.55 L1839.26 1206.55 L1838.67 1206.55 L1838.08 1206.55 L1837.5 1206.55 L1836.91 1206.55 L1836.32 1206.55 L1835.74 1206.55 L1835.15 1206.55 L1834.56 1206.55 L1833.98 1206.55 L1833.39 1206.55 L1832.81 1206.55 L1832.22 1206.55 L1831.63 1206.55 L1831.05 1206.55 L1830.46 1206.55 L1829.87 1206.55 L1829.29 1206.55 L1828.7 1206.55 L1828.11 1206.55 L1827.53 1206.55 L1826.94 1206.55 L1826.35 1206.55 L1825.77 1206.55 L1825.18 1206.55 L1824.6 1206.55 L1824.01 1206.55 L1823.42 1206.55 L1822.84 1206.55 L1822.25 1206.55 L1821.66 1206.55 L1821.08 1206.55 L1820.49 1206.55 L1819.9 1206.55 L1819.32 1206.55 L1818.73 1206.55 L1818.14 1206.55 L1817.56 1206.55 L1816.97 1206.55 L1816.39 1206.55 L1815.8 1206.55 L1815.21 1206.55 L1814.63 1206.55 L1814.04 1206.55 L1813.45 1206.55 L1812.87 1206.55 L1812.28 1206.55 L1811.69 1206.55 L1811.11 1206.55 L1810.52 1206.55 L1809.94 1206.55 L1809.35 1206.55 L1808.76 1206.55 L1808.18 1206.55 L1807.59 1206.55 L1807 1206.55 L1806.42 1206.55 L1805.83 1206.55 L1805.24 1206.55 L1804.66 1206.55 L1804.07 1206.55 L1803.48 1206.55 L1802.9 1206.55 L1802.31 1206.55 L1801.73 1206.55 L1801.14 1206.55 L1800.55 1206.55 L1799.97 1206.55 L1799.38 1206.55 L1798.79 1206.55 L1798.21 1206.55 L1797.62 1206.55 L1797.03 1206.55 L1796.45 1206.55 L1795.86 1206.55 L1795.27 1206.55 L1794.69 1206.55 L1794.1 1206.55 L1793.52 1206.55 L1792.93 1206.55 L1792.34 1206.55 L1791.76 1206.55 L1791.17 1206.55 L1790.58 1206.55 L1790 1206.55 L1789.41 1206.55 L1788.82 1206.55 L1788.24 1206.55 L1787.65 1206.55 L1787.06 1206.55 L1786.48 1206.55 L1785.89 1206.55 L1785.31 1206.55 L1784.72 1206.55 L1784.13 1206.55 L1783.55 1206.55 L1782.96 1206.55 L1782.37 1206.55 L1781.79 1206.55 L1781.2 1206.55 L1780.61 1206.55 L1780.03 1206.55 L1779.44 1206.55 L1778.86 1206.55 L1778.27 1206.55 L1777.68 1206.55 L1777.1 1206.55 L1776.51 1206.55 L1775.92 1206.55 L1775.34 1206.55 L1774.75 1206.55 L1774.16 1206.55 L1773.58 1206.55 L1772.99 1206.55 L1772.4 1206.55 L1771.82 1206.55 L1771.23 1206.55 L1770.65 1206.55 L1770.06 1206.55 L1769.47 1206.55 L1768.89 1206.55 L1768.3 1206.55 L1767.71 1206.55 L1767.13 1206.55 L1766.54 1206.55 L1765.95 1206.55 L1765.37 1206.55 L1764.78 1206.55 L1764.19 1206.55 L1763.61 1206.55 L1763.02 1206.55 L1762.44 1206.55 L1761.85 1206.55 L1761.26 1206.55 L1760.68 1206.55 L1760.09 1206.55 L1759.5 1206.55 L1758.92 1206.55 L1758.33 1206.55 L1757.74 1206.55 L1757.16 1206.55 L1756.57 1206.55 L1755.99 1206.55 L1755.4 1206.55 L1754.81 1206.55 L1754.23 1206.55 L1753.64 1206.55 L1753.05 1206.55 L1752.47 1206.55 L1751.88 1206.55 L1751.29 1206.55 L1750.71 1206.55 L1750.12 1206.55 L1749.53 1206.55 L1748.95 1206.55 L1748.36 1206.55 L1747.78 1206.55 L1747.19 1206.55 L1746.6 1206.55 L1746.02 1206.55 L1745.43 1206.55 L1744.84 1206.55 L1744.26 1206.55 L1743.67 1206.55 L1743.08 1206.55 L1742.5 1206.55 L1741.91 1206.55 L1741.32 1206.55 L1740.74 1206.55 L1740.15 1206.55 L1739.57 1206.55 L1738.98 1206.55 L1738.39 1206.55 L1737.81 1206.55 L1737.22 1206.55 L1736.63 1206.55 L1736.05 1206.55 L1735.46 1206.55 L1734.87 1206.55 L1734.29 1206.55 L1733.7 1206.55 L1733.11 1206.55 L1732.53 1206.55 L1731.94 1206.55 L1731.36 1206.55 L1730.77 1206.55 L1730.18 1206.55 L1729.6 1206.55 L1729.01 1206.55 L1728.42 1206.55 L1727.84 1206.55 L1727.25 1206.55 L1726.66 1206.55 L1726.08 1206.55 L1725.49 1206.55 L1724.91 1206.55 L1724.32 1206.55 L1723.73 1206.55 L1723.15 1206.55 L1722.56 1206.55 L1721.97 1206.55 L1721.39 1206.55 L1720.8 1206.55 L1720.21 1206.55 L1719.63 1206.55 L1719.04 1206.55 L1718.45 1206.55 L1717.87 1206.55 L1717.28 1206.55 L1716.7 1206.55 L1716.11 1206.55 L1715.52 1206.55 L1714.94 1206.55 L1714.35 1206.55 L1713.76 1206.55 L1713.18 1206.55 L1712.59 1206.55 L1712 1206.55 L1711.42 1206.55 L1710.83 1206.55 L1710.24 1206.55 L1709.66 1206.55 L1709.07 1206.55 L1708.49 1206.55 L1707.9 1206.55 L1707.31 1206.55 L1706.73 1206.55 L1706.14 1206.55 L1705.55 1206.55 L1704.97 1206.55 L1704.38 1206.55 L1703.79 1206.55 L1703.21 1206.55 L1702.62 1206.55 L1702.04 1206.55 L1701.45 1206.55 L1700.86 1206.55 L1700.28 1206.55 L1699.69 1206.55 L1699.1 1206.55 L1698.52 1206.55 L1697.93 1206.55 L1697.34 1206.55 L1696.76 1206.55 L1696.17 1206.55 L1695.58 1206.55 L1695 1206.55 L1694.41 1206.55 L1693.83 1206.55 L1693.24 1206.55 L1692.65 1206.55 L1692.07 1206.55 L1691.48 1206.55 L1690.89 1206.55 L1690.31 1206.55 L1689.72 1206.55 L1689.13 1206.55 L1688.55 1206.55 L1687.96 1206.55 L1687.37 1206.55 L1686.79 1206.55 L1686.2 1206.55 L1685.62 1206.55 L1685.03 1206.55 L1684.44 1206.55 L1683.86 1206.55 L1683.27 1206.55 L1682.68 1206.55 L1682.1 1206.55 L1681.51 1206.55 L1680.92 1206.55 L1680.34 1206.55 L1679.75 1206.55 L1679.17 1206.55 L1678.58 1206.55 L1677.99 1206.55 L1677.41 1206.55 L1676.82 1206.55 L1676.23 1206.55 L1675.65 1206.55 L1675.06 1206.55 L1674.47 1206.55 L1673.89 1206.55 L1673.3 1206.55 L1672.71 1206.55 L1672.13 1206.55 L1671.54 1206.55 L1670.96 1206.55 L1670.37 1206.55 L1669.78 1206.55 L1669.2 1206.55 L1668.61 1206.55 L1668.02 1206.55 L1667.44 1206.55 L1666.85 1206.55 L1666.26 1206.55 L1665.68 1206.55 L1665.09 1206.55 L1664.5 1206.55 L1663.92 1206.55 L1663.33 1206.55 L1662.75 1206.55 L1662.16 1206.55 L1661.57 1206.55 L1660.99 1206.55 L1660.4 1206.55 L1659.81 1206.55 L1659.23 1206.55 L1658.64 1206.55 L1658.05 1206.55 L1657.47 1206.55 L1656.88 1206.55 L1656.29 1206.55 L1655.71 1206.55 L1655.12 1206.55 L1654.54 1206.55 L1653.95 1206.55 L1653.36 1206.55 L1652.78 1206.55 L1652.19 1206.55 L1651.6 1206.55 L1651.02 1206.55 L1650.43 1206.55 L1649.84 1206.55 L1649.26 1206.55 L1648.67 1206.55 L1648.09 1206.55 L1647.5 1206.55 L1646.91 1206.55 L1646.33 1206.55 L1645.74 1206.55 L1645.15 1206.55 L1644.57 1206.55 L1643.98 1206.55 L1643.39 1206.55 L1642.81 1206.55 L1642.22 1206.55 L1641.63 1206.55 L1641.05 1206.55 L1640.46 1206.55 L1639.88 1206.55 L1639.29 1206.55 L1638.7 1206.55 L1638.12 1206.55 L1637.53 1206.55 L1636.94 1206.55 L1636.36 1206.55 L1635.77 1206.55 L1635.18 1206.55 L1634.6 1206.55 L1634.01 1206.55 L1633.42 1206.55 L1632.84 1206.55 L1632.25 1206.55 L1631.67 1206.55 L1631.08 1206.55 L1630.49 1206.55 L1629.91 1206.55 L1629.32 1206.55 L1628.73 1206.55 L1628.15 1206.55 L1627.56 1206.55 L1626.97 1206.55 L1626.39 1206.55 L1625.8 1206.55 L1625.22 1206.55 L1624.63 1206.55 L1624.04 1206.55 L1623.46 1206.55 L1622.87 1206.55 L1622.28 1206.55 L1621.7 1206.55 L1621.11 1206.55 L1620.52 1206.55 L1619.94 1206.55 L1619.35 1206.55 L1618.76 1206.55 L1618.18 1206.55 L1617.59 1206.55 L1617.01 1206.55 L1616.42 1206.55 L1615.83 1206.55 L1615.25 1206.55 L1614.66 1206.55 L1614.07 1206.55 L1613.49 1206.55 L1612.9 1206.55 L1612.31 1206.55 L1611.73 1206.55 L1611.14 1206.55 L1610.55 1206.55 L1609.97 1206.55 L1609.38 1206.55 L1608.8 1206.55 L1608.21 1206.55 L1607.62 1206.55 L1607.04 1206.55 L1606.45 1206.55 L1605.86 1206.55 L1605.28 1206.55 L1604.69 1206.55 L1604.1 1206.55 L1603.52 1206.55 L1602.93 1206.55 L1602.34 1206.55 L1601.76 1206.55 L1601.17 1206.55 L1600.59 1206.55 L1600 1206.55 L1599.41 1206.55 L1598.83 1206.55 L1598.24 1206.55 L1597.65 1206.55 L1597.07 1206.55 L1596.48 1206.55 L1595.89 1206.55 L1595.31 1206.55 L1594.72 1206.55 L1594.14 1206.55 L1593.55 1206.55 L1592.96 1206.55 L1592.38 1206.55 L1591.79 1206.55 L1591.2 1206.55 L1590.62 1206.55 L1590.03 1206.55 L1589.44 1206.55 L1588.86 1206.55 L1588.27 1206.55 L1587.68 1206.55 L1587.1 1206.55 L1586.51 1206.55 L1585.93 1206.55 L1585.34 1206.55 L1584.75 1206.55 L1584.17 1206.55 L1583.58 1206.55 L1582.99 1206.55 L1582.41 1206.55 L1581.82 1206.55 L1581.23 1206.55 L1580.65 1206.55 L1580.06 1206.55 L1579.47 1206.55 L1578.89 1206.55 L1578.3 1206.55 L1577.72 1206.55 L1577.13 1206.55 L1576.54 1206.55 L1575.96 1206.55 L1575.37 1206.55 L1574.78 1206.55 L1574.2 1206.55 L1573.61 1206.55 L1573.02 1206.55 L1572.44 1206.55 L1571.85 1206.55 L1571.27 1206.55 L1570.68 1206.55 L1570.09 1206.55 L1569.51 1206.55 L1568.92 1206.55 L1568.33 1206.55 L1567.75 1206.55 L1567.16 1206.55 L1566.57 1206.55 L1565.99 1206.55 L1565.4 1206.55 L1564.81 1206.55 L1564.23 1206.55 L1563.64 1206.55 L1563.06 1206.55 L1562.47 1206.55 L1561.88 1206.55 L1561.3 1206.55 L1560.71 1206.55 L1560.12 1206.55 L1559.54 1206.55 L1558.95 1206.55 L1558.36 1206.55 L1557.78 1206.55 L1557.19 1206.55 L1556.6 1206.55 L1556.02 1206.55 L1555.43 1206.55 L1554.85 1206.55 L1554.26 1206.55 L1553.67 1206.55 L1553.09 1206.55 L1552.5 1206.55 L1551.91 1206.55 L1551.33 1206.55 L1550.74 1206.55 L1550.15 1206.55 L1549.57 1206.55 L1548.98 1206.55 L1548.4 1206.55 L1547.81 1206.55 L1547.22 1206.55 L1546.64 1206.55 L1546.05 1206.55 L1545.46 1206.55 L1544.88 1206.55 L1544.29 1206.55 L1543.7 1206.55 L1543.12 1206.55 L1542.53 1206.55 L1541.94 1206.55 L1541.36 1206.55 L1540.77 1206.55 L1540.19 1206.55 L1539.6 1206.55 L1539.01 1206.55 L1538.43 1206.55 L1537.84 1206.55 L1537.25 1206.55 L1536.67 1206.55 L1536.08 1206.55 L1535.49 1206.55 L1534.91 1206.55 L1534.32 1206.55 L1533.73 1206.55 L1533.15 1206.55 L1532.56 1206.55 L1531.98 1206.55 L1531.39 1206.55 L1530.8 1206.55 L1530.22 1206.55 L1529.63 1206.55 L1529.04 1206.55 L1528.46 1206.55 L1527.87 1206.55 L1527.28 1206.55 L1526.7 1206.55 L1526.11 1206.55 L1525.52 1206.55 L1524.94 1206.55 L1524.35 1206.55 L1523.77 1206.55 L1523.18 1206.55 L1522.59 1206.55 L1522.01 1206.55 L1521.42 1206.55 L1520.83 1206.55 L1520.25 1206.55 L1519.66 1206.55 L1519.07 1206.55 L1518.49 1206.55 L1517.9 1206.55 L1517.32 1206.55 L1516.73 1206.55 L1516.14 1206.55 L1515.56 1206.55 L1514.97 1206.55 L1514.38 1206.55 L1513.8 1206.55 L1513.21 1206.55 L1512.62 1206.55 L1512.04 1206.55 L1511.45 1206.55 L1510.86 1206.55 L1510.28 1206.55 L1509.69 1206.55 L1509.11 1206.55 L1508.52 1206.55 L1507.93 1206.55 L1507.35 1206.55 L1506.76 1206.55 L1506.17 1206.55 L1505.59 1206.55 L1505 1206.55 L1504.41 1206.55 L1503.83 1206.55 L1503.24 1206.55 L1502.65 1206.55 L1502.07 1206.55 L1501.48 1206.55 L1500.9 1206.55 L1500.31 1206.55 L1499.72 1206.55 L1499.14 1206.55 L1498.55 1206.55 L1497.96 1206.55 L1497.38 1206.55 L1496.79 1206.55 L1496.2 1206.55 L1495.62 1206.55 L1495.03 1206.55 L1494.45 1206.55 L1493.86 1206.55 L1493.27 1206.55 L1492.69 1206.55 L1492.1 1206.55 L1491.51 1206.55 L1490.93 1206.55 L1490.34 1206.55 L1489.75 1206.55 L1489.17 1206.55 L1488.58 1206.55 L1487.99 1206.55 L1487.41 1206.55 L1486.82 1206.55 L1486.24 1206.55 L1485.65 1206.55 L1485.06 1206.55 L1484.48 1206.55 L1483.89 1206.55 L1483.3 1206.55 L1482.72 1206.55 L1482.13 1206.55 L1481.54 1206.55 L1480.96 1206.55 L1480.37 1206.55 L1479.78 1206.55 L1479.2 1206.55 L1478.61 1206.55 L1478.03 1206.55 L1477.44 1206.55 L1476.85 1206.55 L1476.27 1206.55 L1475.68 1206.55 L1475.09 1206.55 L1474.51 1206.55 L1473.92 1206.55 L1473.33 1206.55 L1472.75 1206.55 L1472.16 1206.55 L1471.57 1206.55 L1470.99 1206.55 L1470.4 1206.55 L1469.82 1206.55 L1469.23 1206.55 L1468.64 1206.55 L1468.06 1206.55 L1467.47 1206.55 L1466.88 1206.55 L1466.3 1206.55 L1465.71 1206.55 L1465.12 1206.55 L1464.54 1206.55 L1463.95 1206.55 L1463.37 1206.55 L1462.78 1206.55 L1462.19 1206.55 L1461.61 1206.55 L1461.02 1206.55 L1460.43 1206.55 L1459.85 1206.55 L1459.26 1206.55 L1458.67 1206.55 L1458.09 1206.55 L1457.5 1206.55 L1456.91 1206.55 L1456.33 1206.55 L1455.74 1206.55 L1455.16 1206.55 L1454.57 1206.55 L1453.98 1206.55 L1453.4 1206.55 L1452.81 1206.55 L1452.22 1206.55 L1451.64 1206.55 L1451.05 1206.55 L1450.46 1206.55 L1449.88 1206.55 L1449.29 1206.55 L1448.7 1206.55 L1448.12 1206.55 L1447.53 1206.55 L1446.95 1206.55 L1446.36 1206.55 L1445.77 1206.55 L1445.19 1206.55 L1444.6 1206.55 L1444.01 1206.55 L1443.43 1206.55 L1442.84 1206.55 L1442.25 1206.55 L1441.67 1206.55 L1441.08 1206.55 L1440.5 1206.55 L1439.91 1206.55 L1439.32 1206.55 L1438.74 1206.55 L1438.15 1206.55 L1437.56 1206.55 L1436.98 1206.55 L1436.39 1206.55 L1435.8 1206.55 L1435.22 1206.55 L1434.63 1206.55 L1434.04 1206.55 L1433.46 1206.55 L1432.87 1206.55 L1432.29 1206.55 L1431.7 1206.55 L1431.11 1206.55 L1430.53 1206.55 L1429.94 1206.55 L1429.35 1206.55 L1428.77 1206.55 L1428.18 1206.55 L1427.59 1206.55 L1427.01 1206.55 L1426.42 1206.55 L1425.83 1206.55 L1425.25 1206.55 L1424.66 1206.55 L1424.08 1206.55 L1423.49 1206.55 L1422.9 1206.55 L1422.32 1206.55 L1421.73 1206.55 L1421.14 1206.55 L1420.56 1206.55 L1419.97 1206.55 L1419.38 1206.55 L1418.8 1206.55 L1418.21 1206.55 L1417.63 1206.55 L1417.04 1206.55 L1416.45 1206.55 L1415.87 1206.55 L1415.28 1206.55 L1414.69 1206.55 L1414.11 1206.55 L1413.52 1206.55 L1412.93 1206.55 L1412.35 1206.55 L1411.76 1206.55 L1411.17 1206.55 L1410.59 1206.55 L1410 1206.55 L1409.42 1206.55 L1408.83 1206.55 L1408.24 1206.55 L1407.66 1206.55 L1407.07 1206.55 L1406.48 1206.55 L1405.9 1206.55 L1405.31 1206.55 L1404.72 1206.55 L1404.14 1206.55 L1403.55 1206.55 L1402.96 1206.55 L1402.38 1206.55 L1401.79 1206.55 L1401.21 1206.55 L1400.62 1206.55 L1400.03 1206.55 L1399.45 1206.55 L1398.86 1206.55 L1398.27 1206.55 L1397.69 1206.55 L1397.1 1206.55 L1396.51 1206.55 L1395.93 1206.55 L1395.34 1206.55 L1394.75 1206.55 L1394.17 1206.55 L1393.58 1206.55 L1393 1206.55 L1392.41 1206.55 L1391.82 1206.55 L1391.24 1206.55 L1390.65 1206.55 L1390.06 1206.55 L1389.48 1206.55 L1388.89 1206.55 L1388.3 1206.55 L1387.72 1206.55 L1387.13 1206.55 L1386.55 1206.55 L1385.96 1206.55 L1385.37 1206.55 L1384.79 1206.55 L1384.2 1206.55 L1383.61 1206.55 L1383.03 1206.55 L1382.44 1206.55 L1381.85 1206.55 L1381.27 1206.55 L1380.68 1206.55 L1380.09 1206.55 L1379.51 1206.55 L1378.92 1206.55 L1378.34 1206.55 L1377.75 1206.55 L1377.16 1206.55 L1376.58 1206.55 L1375.99 1206.55 L1375.4 1206.55 L1374.82 1206.55 L1374.23 1206.55 L1373.64 1206.55 L1373.06 1206.55 L1372.47 1206.55 L1371.88 1206.55 L1371.3 1206.55 L1370.71 1206.55 L1370.13 1206.55 L1369.54 1206.55 L1368.95 1206.55 L1368.37 1206.55 L1367.78 1206.55 L1367.19 1206.55 L1366.61 1206.55 L1366.02 1206.55 L1365.43 1206.55 L1364.85 1206.55 L1364.26 1206.55 L1363.68 1206.55 L1363.09 1206.55 L1362.5 1206.55 L1361.92 1206.55 L1361.33 1206.55 L1360.74 1206.55 L1360.16 1206.55 L1359.57 1206.55 L1358.98 1206.55 L1358.4 1206.55 L1357.81 1206.55 L1357.22 1206.55 L1356.64 1206.55 L1356.05 1206.55 L1355.47 1206.55 L1354.88 1206.55 L1354.29 1206.55 L1353.71 1206.55 L1353.12 1206.55 L1352.53 1206.55 L1351.95 1206.55 L1351.36 1206.55 L1350.77 1206.55 L1350.19 1206.55 L1349.6 1206.55 L1349.01 1206.55 L1348.43 1206.55 L1347.84 1206.55 L1347.26 1206.55 L1346.67 1206.55 L1346.08 1206.55 L1345.5 1206.55 L1344.91 1206.55 L1344.32 1206.55 L1343.74 1206.55 L1343.15 1206.55 L1342.56 1206.55 L1341.98 1206.55 L1341.39 1206.55 L1340.8 1206.55 L1340.22 1206.55 L1339.63 1206.55 L1339.05 1206.55 L1338.46 1206.55 L1337.87 1206.55 L1337.29 1206.55 L1336.7 1206.55 L1336.11 1206.55 L1335.53 1206.55 L1334.94 1206.55 L1334.35 1206.55 L1333.77 1206.55 L1333.18 1206.55 L1332.6 1206.55 L1332.01 1206.55 L1331.42 1206.55 L1330.84 1206.55 L1330.25 1206.55 L1329.66 1206.55 L1329.08 1206.55 L1328.49 1206.55 L1327.9 1206.55 L1327.32 1206.55 L1326.73 1206.55 L1326.14 1206.55 L1325.56 1206.55 L1324.97 1206.55 L1324.39 1206.55 L1323.8 1206.55 L1323.21 1206.55 L1322.63 1206.55 L1322.04 1206.55 L1321.45 1206.55 L1320.87 1206.55 L1320.28 1206.55 L1319.69 1206.55 L1319.11 1206.55 L1318.52 1206.55 L1317.93 1206.55 L1317.35 1206.55 L1316.76 1206.55 L1316.18 1206.55 L1315.59 1206.55 L1315 1206.55 L1314.42 1206.55 L1313.83 1206.55 L1313.24 1206.55 L1312.66 1206.55 L1312.07 1206.55 L1311.48 1206.55 L1310.9 1206.55 L1310.31 1206.55 L1309.73 1206.55 L1309.14 1206.55 L1308.55 1206.55 L1307.97 1206.55 L1307.38 1206.55 L1306.79 1206.55 L1306.21 1206.55 L1305.62 1206.55 L1305.03 1206.55 L1304.45 1206.55 L1303.86 1206.55 L1303.27 1206.55 L1302.69 1206.55 L1302.1 1206.55 L1301.52 1206.55 L1300.93 1206.55 L1300.34 1206.55 L1299.76 1206.55 L1299.17 1206.55 L1298.58 1206.55 L1298 1206.55 L1297.41 1206.55 L1296.82 1206.55 L1296.24 1206.55 L1295.65 1206.55 L1295.06 1206.55 L1294.48 1206.55 L1293.89 1206.55 L1293.31 1206.55 L1292.72 1206.55 L1292.13 1206.55 L1291.55 1206.55 L1290.96 1206.55 L1290.37 1206.55 L1289.79 1206.55 L1289.2 1206.55 L1288.61 1206.55 L1288.03 1206.55 L1287.44 1206.55 L1286.86 1206.55 L1286.27 1206.55 L1285.68 1206.55 L1285.1 1206.55 L1284.51 1206.55 L1283.92 1206.55 L1283.34 1206.55 L1282.75 1206.55 L1282.16 1206.55 L1281.58 1206.55 L1280.99 1206.55 L1280.4 1206.55 L1279.82 1206.55 L1279.23 1206.55 L1278.65 1206.55 L1278.06 1206.55 L1277.47 1206.55 L1276.89 1206.55 L1276.3 1206.55 L1275.71 1206.55 L1275.13 1206.55 L1274.54 1206.55 L1273.95 1206.55 L1273.37 1206.55 L1272.78 1206.55 L1272.19 1206.55 L1271.61 1206.55 L1271.02 1206.55 L1270.44 1206.55 L1269.85 1206.55 L1269.26 1206.55 L1268.68 1206.55 L1268.09 1206.55 L1267.5 1206.55 L1266.92 1206.55 L1266.33 1206.55 L1265.74 1206.55 L1265.16 1206.55 L1264.57 1206.55 L1263.98 1206.55 L1263.4 1206.55 L1262.81 1206.55 L1262.23 1206.55 L1261.64 1206.55 L1261.05 1206.55 L1260.47 1206.55 L1259.88 1206.55 L1259.29 1206.55 L1258.71 1206.55 L1258.12 1206.55 L1257.53 1206.55 L1256.95 1206.55 L1256.36 1206.55 L1255.78 1206.55 L1255.19 1206.55 L1254.6 1206.55 L1254.02 1206.55 L1253.43 1206.55 L1252.84 1206.55 L1252.26 1206.55 L1251.67 1206.55 L1251.08 1206.55 L1250.5 1206.55 L1249.91 1206.55 L1249.32 1206.55 L1248.74 1206.55 L1248.15 1206.55 L1247.57 1206.55 L1246.98 1206.55 L1246.39 1206.55 L1245.81 1206.55 L1245.22 1206.55 L1244.63 1206.55 L1244.05 1206.55 L1243.46 1206.55 L1242.87 1206.55 L1242.29 1206.55 L1241.7 1206.55 L1241.11 1206.55 L1240.53 1206.55 L1239.94 1206.55 L1239.36 1206.55 L1238.77 1206.55 L1238.18 1206.55 L1237.6 1206.55 L1237.01 1206.55 L1236.42 1206.55 L1235.84 1206.55 L1235.25 1206.55 L1234.66 1206.55 L1234.08 1206.55 L1233.49 1206.55 L1232.91 1206.55 L1232.32 1206.55 L1231.73 1206.55 L1231.15 1206.55 L1230.56 1206.55 L1229.97 1206.55 L1229.39 1206.55 L1228.8 1206.55 L1228.21 1206.55 L1227.63 1206.55 L1227.04 1206.55 L1226.45 1206.55 L1225.87 1206.55 L1225.28 1206.55 L1224.7 1206.55 L1224.11 1206.55 L1223.52 1206.55 L1222.94 1206.55 L1222.35 1206.55 L1221.76 1206.55 L1221.18 1206.55 L1220.59 1206.55 L1220 1206.55 L1219.42 1206.55 L1218.83 1206.55 L1218.24 1206.55 L1217.66 1206.55 L1217.07 1206.55 L1216.49 1206.55 L1215.9 1206.55 L1215.31 1206.55 L1214.73 1206.55 L1214.14 1206.55 L1213.55 1206.55 L1212.97 1206.55 L1212.38 1206.55 L1211.79 1206.55 L1211.21 1206.55 L1210.62 1206.55 L1210.03 1206.55 L1209.45 1206.55 L1208.86 1206.55 L1208.28 1206.55 L1207.69 1206.55 L1207.1 1206.55 L1206.52 1206.55 L1205.93 1206.55 L1205.34 1206.55 L1204.76 1206.55 L1204.17 1206.55 L1203.58 1206.55 L1203 1206.55 L1202.41 1206.55 L1201.83 1206.55 L1201.24 1206.55 L1200.65 1206.55 L1200.07 1206.55 L1199.48 1206.55 L1198.89 1206.55 L1198.31 1206.55 L1197.72 1206.55 L1197.13 1206.55 L1196.55 1206.55 L1195.96 1206.55 L1195.37 1206.55 L1194.79 1206.55 L1194.2 1206.55 L1193.62 1206.55 L1193.03 1206.55 L1192.44 1206.55 L1191.86 1206.55 L1191.27 1206.55 L1190.68 1206.55 L1190.1 1206.55 L1189.51 1206.55 L1188.92 1206.55 L1188.34 1206.55 L1187.75 1206.55 L1187.16 1206.55 L1186.58 1206.55 L1185.99 1206.55 L1185.41 1206.55 L1184.82 1206.55 L1184.23 1206.55 L1183.65 1206.55 L1183.06 1206.55 L1182.47 1206.55 L1181.89 1206.55 L1181.3 1206.55 L1180.71 1206.55 L1180.13 1206.55 L1179.54 1206.55 L1178.96 1206.55 L1178.37 1206.55 L1177.78 1206.55 L1177.2 1206.55 L1176.61 1206.55 L1176.02 1206.55 L1175.44 1206.55 L1174.85 1206.55 L1174.26 1206.55 L1173.68 1206.55 L1173.09 1206.55 L1172.5 1206.55 L1171.92 1206.55 L1171.33 1206.55 L1170.75 1206.55 L1170.16 1206.55 L1169.57 1206.55 L1168.99 1206.55 L1168.4 1206.55 L1167.81 1206.55 L1167.23 1206.55 L1166.64 1206.55 L1166.05 1206.55 L1165.47 1206.55 L1164.88 1206.55 L1164.29 1206.55 L1163.71 1206.55 L1163.12 1206.55 L1162.54 1206.55 L1161.95 1206.55 L1161.36 1206.55 L1160.78 1206.55 L1160.19 1206.55 L1159.6 1206.55 L1159.02 1206.55 L1158.43 1206.55 L1157.84 1206.55 L1157.26 1206.55 L1156.67 1206.55 L1156.09 1206.55 L1155.5 1206.55 L1154.91 1206.55 L1154.33 1206.55 L1153.74 1206.55 L1153.15 1206.55 L1152.57 1206.55 L1151.98 1206.55 L1151.39 1206.55 L1150.81 1206.55 L1150.22 1206.55 L1149.63 1206.55 L1149.05 1206.55 L1148.46 1206.55 L1147.88 1206.55 L1147.29 1206.55 L1146.7 1206.55 L1146.12 1206.55 L1145.53 1206.55 L1144.94 1206.55 L1144.36 1206.55 L1143.77 1206.55 L1143.18 1206.55 L1142.6 1206.55 L1142.01 1206.55 L1141.42 1206.55 L1140.84 1206.55 L1140.25 1206.55 L1139.67 1206.55 L1139.08 1206.55 L1138.49 1206.55 L1137.91 1206.55 L1137.32 1206.55 L1136.73 1206.55 L1136.15 1206.55 L1135.56 1206.55 L1134.97 1206.55 L1134.39 1206.55 L1133.8 1206.55 L1133.21 1206.55 L1132.63 1206.55 L1132.04 1206.55 L1131.46 1206.55 L1130.87 1206.55 L1130.28 1206.55 L1129.7 1206.55 L1129.11 1206.55 L1128.52 1206.55 L1127.94 1206.55 L1127.35 1206.55 L1126.76 1206.55 L1126.18 1206.55 L1125.59 1206.55 L1125.01 1206.55 L1124.42 1206.55 L1123.83 1206.55 L1123.25 1206.55 L1122.66 1206.55 L1122.07 1206.55 L1121.49 1206.55 L1120.9 1206.55 L1120.31 1206.55 L1119.73 1206.55 L1119.14 1206.55 L1118.55 1206.55 L1117.97 1206.55 L1117.38 1206.55 L1116.8 1206.55 L1116.21 1206.55 L1115.62 1206.55 L1115.04 1206.55 L1114.45 1206.55 L1113.86 1206.55 L1113.28 1206.55 L1112.69 1206.55 L1112.1 1206.55 L1111.52 1206.55 L1110.93 1206.55 L1110.34 1206.55 L1109.76 1206.55 L1109.17 1206.55 L1108.59 1206.55 L1108 1206.55 L1107.41 1206.55 L1106.83 1206.55 L1106.24 1206.55 L1105.65 1206.55 L1105.07 1206.55 L1104.48 1206.55 L1103.89 1206.55 L1103.31 1206.55 L1102.72 1206.55 L1102.14 1206.55 L1101.55 1206.55 L1100.96 1206.55 L1100.38 1206.55 L1099.79 1206.55 L1099.2 1206.55 L1098.62 1206.55 L1098.03 1206.55 L1097.44 1206.55 L1096.86 1206.55 L1096.27 1206.55 L1095.68 1206.55 L1095.1 1206.55 L1094.51 1206.55 L1093.93 1206.55 L1093.34 1206.55 L1092.75 1206.55 L1092.17 1206.55 L1091.58 1206.55 L1090.99 1206.55 L1090.41 1206.55 L1089.82 1206.55 L1089.23 1206.55 L1088.65 1206.55 L1088.06 1206.55 L1087.47 1206.55 L1086.89 1206.55 L1086.3 1206.55 L1085.72 1206.55 L1085.13 1206.55 L1084.54 1206.55 L1083.96 1206.55 L1083.37 1206.55 L1082.78 1206.55 L1082.2 1206.55 L1081.61 1206.55 L1081.02 1206.55 L1080.44 1206.55 L1079.85 1206.55 L1079.26 1206.55 L1078.68 1206.55 L1078.09 1206.55 L1077.51 1206.55 L1076.92 1206.55 L1076.33 1206.55 L1075.75 1206.55 L1075.16 1206.55 L1074.57 1206.55 L1073.99 1206.55 L1073.4 1206.55 L1072.81 1206.55 L1072.23 1206.55 L1071.64 1206.55 L1071.06 1206.55 L1070.47 1206.55 L1069.88 1206.55 L1069.3 1206.55 L1068.71 1206.55 L1068.12 1206.55 L1067.54 1206.55 L1066.95 1206.55 L1066.36 1206.55 L1065.78 1206.55 L1065.19 1206.55 L1064.6 1206.55 L1064.02 1206.55 L1063.43 1206.55 L1062.85 1206.55 L1062.26 1206.55 L1061.67 1206.55 L1061.09 1206.55 L1060.5 1206.55 L1059.91 1206.55 L1059.33 1206.55 L1058.74 1206.55 L1058.15 1206.55 L1057.57 1206.55 L1056.98 1206.55 L1056.39 1206.55 L1055.81 1206.55 L1055.22 1206.55 L1054.64 1206.55 L1054.05 1206.55 L1053.46 1206.55 L1052.88 1206.55 L1052.29 1206.55 L1051.7 1206.55 L1051.12 1206.55 L1050.53 1206.55 L1049.94 1206.55 L1049.36 1206.55 L1048.77 1206.55 L1048.19 1206.55 L1047.6 1206.55 L1047.01 1206.55 L1046.43 1206.55 L1045.84 1206.55 L1045.25 1206.55 L1044.67 1206.55 L1044.08 1206.55 L1043.49 1206.55 L1042.91 1206.55 L1042.32 1206.55 L1041.73 1206.55 L1041.15 1206.55 L1040.56 1206.55 L1039.98 1206.55 L1039.39 1206.55 L1038.8 1206.55 L1038.22 1206.55 L1037.63 1206.55 L1037.04 1206.55 L1036.46 1206.55 L1035.87 1206.55 L1035.28 1206.55 L1034.7 1206.55 L1034.11 1206.55 L1033.52 1206.55 L1032.94 1206.55 L1032.35 1206.55 L1031.77 1206.55 L1031.18 1206.55 L1030.59 1206.55 L1030.01 1206.55 L1029.42 1206.55 L1028.83 1206.55 L1028.25 1206.55 L1027.66 1206.55 L1027.07 1206.55 L1026.49 1206.55 L1025.9 1206.55 L1025.32 1206.55 L1024.73 1206.55 L1024.14 1206.55 L1023.56 1206.55 L1022.97 1206.55 L1022.38 1206.55 L1021.8 1206.55 L1021.21 1206.55 L1020.62 1206.55 L1020.04 1206.55 L1019.45 1206.55 L1018.86 1206.55 L1018.28 1206.55 L1017.69 1206.55 L1017.11 1206.55 L1016.52 1206.55 L1015.93 1206.55 L1015.35 1206.55 L1014.76 1206.55 L1014.17 1206.55 L1013.59 1206.55 L1013 1206.55 L1012.41 1206.55 L1011.83 1206.55 L1011.24 1206.55 L1010.65 1206.55 L1010.07 1206.55 L1009.48 1206.55 L1008.9 1206.55 L1008.31 1206.55 L1007.72 1206.55 L1007.14 1206.55 L1006.55 1206.55 L1005.96 1206.55 L1005.38 1206.55 L1004.79 1206.55 L1004.2 1206.55 L1003.62 1206.55 L1003.03 1206.55 L1002.44 1206.55 L1001.86 1206.55 L1001.27 1206.55 L1000.69 1206.55 L1000.1 1206.55 L999.513 1206.55 L998.926 1206.55 L998.34 1206.55 L997.754 1206.55 L997.167 1206.55 L996.581 1206.55 L995.994 1206.55 L995.408 1206.55 L994.822 1206.55 L994.235 1206.55 L993.649 1206.55 L993.062 1206.55 L992.476 1206.55 L991.889 1206.55 L991.303 1206.55 L990.717 1206.55 L990.13 1206.55 L989.544 1206.55 L988.957 1206.55 L988.371 1206.55 L987.785 1206.55 L987.198 1206.55 L986.612 1206.55 L986.025 1206.55  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.99 986.612,1206.99 987.198,1206.99 987.785,1206.99 988.371,1206.99 988.957,1206.99 989.544,1206.99 990.13,1206.99 990.717,1206.99 991.303,1206.99 991.889,1206.99 992.476,1206.99 993.062,1206.99 993.649,1206.99 994.235,1206.99 994.822,1206.99 995.408,1206.99 995.994,1206.99 996.581,1206.99 997.167,1206.99 997.754,1206.99 998.34,1206.99 998.926,1206.99 999.513,1206.99 1000.1,1206.99 1000.69,1206.99 1001.27,1206.99 1001.86,1206.99 1002.44,1206.99 1003.03,1206.99 1003.62,1206.99 1004.2,1206.99 1004.79,1206.99 1005.38,1206.99 1005.96,1206.99 1006.55,1206.99 1007.14,1206.99 1007.72,1206.99 1008.31,1206.99 1008.9,1206.99 1009.48,1206.99 1010.07,1206.99 1010.65,1206.99 1011.24,1206.99 1011.83,1206.99 1012.41,1206.99 1013,1206.99 1013.59,1206.99 1014.17,1206.99 1014.76,1206.99 1015.35,1206.99 1015.93,1206.99 1016.52,1206.99 1017.11,1206.99 1017.69,1206.99 1018.28,1206.99 1018.86,1206.99 1019.45,1206.99 1020.04,1206.99 1020.62,1206.99 1021.21,1206.99 1021.8,1206.99 1022.38,1206.99 1022.97,1206.99 1023.56,1206.99 1024.14,1206.99 1024.73,1206.99 1025.32,1206.99 1025.9,1206.99 1026.49,1206.99 1027.07,1206.99 1027.66,1206.99 1028.25,1206.99 1028.83,1206.99 1029.42,1206.99 1030.01,1206.99 1030.59,1206.99 1031.18,1206.99 1031.77,1206.99 1032.35,1206.99 1032.94,1206.99 1033.52,1206.99 1034.11,1206.99 1034.7,1206.99 1035.28,1206.99 1035.87,1206.99 1036.46,1206.99 1037.04,1206.99 1037.63,1206.99 1038.22,1206.99 1038.8,1206.99 1039.39,1206.99 1039.98,1206.99 1040.56,1206.99 1041.15,1206.99 1041.73,1206.99 1042.32,1206.99 1042.91,1206.99 1043.49,1206.99 1044.08,1206.99 1044.67,1206.99 1045.25,1206.99 1045.84,1206.99 1046.43,1206.99 1047.01,1206.99 1047.6,1206.99 1048.19,1206.99 1048.77,1206.99 1049.36,1206.99 1049.94,1206.99 1050.53,1206.99 1051.12,1206.99 1051.7,1206.99 1052.29,1206.99 1052.88,1206.99 1053.46,1206.99 1054.05,1206.99 1054.64,1206.99 1055.22,1206.99 1055.81,1206.99 1056.39,1206.99 1056.98,1206.99 1057.57,1206.99 1058.15,1206.99 1058.74,1206.99 1059.33,1206.99 1059.91,1206.99 1060.5,1206.99 1061.09,1206.99 1061.67,1206.99 1062.26,1206.99 1062.85,1206.99 1063.43,1206.99 1064.02,1206.99 1064.6,1206.99 1065.19,1206.99 1065.78,1206.99 1066.36,1206.99 1066.95,1206.99 1067.54,1206.99 1068.12,1206.99 1068.71,1206.99 1069.3,1206.99 1069.88,1206.99 1070.47,1206.99 1071.06,1206.99 1071.64,1206.99 1072.23,1206.99 1072.81,1206.99 1073.4,1206.99 1073.99,1206.99 1074.57,1206.99 1075.16,1206.99 1075.75,1206.99 1076.33,1206.99 1076.92,1206.99 1077.51,1206.99 1078.09,1206.99 1078.68,1206.99 1079.26,1206.99 1079.85,1206.99 1080.44,1206.99 1081.02,1206.99 1081.61,1206.99 1082.2,1206.99 1082.78,1206.99 1083.37,1206.99 1083.96,1206.99 1084.54,1206.99 1085.13,1206.99 1085.72,1206.99 1086.3,1206.99 1086.89,1206.99 1087.47,1206.99 1088.06,1206.99 1088.65,1206.99 1089.23,1206.99 1089.82,1206.99 1090.41,1206.99 1090.99,1206.99 1091.58,1206.99 1092.17,1206.99 1092.75,1206.99 1093.34,1206.99 1093.93,1206.99 1094.51,1206.99 1095.1,1206.99 1095.68,1206.99 1096.27,1206.99 1096.86,1206.99 1097.44,1206.99 1098.03,1206.99 1098.62,1206.99 1099.2,1206.99 1099.79,1206.99 1100.38,1206.99 1100.96,1206.99 1101.55,1206.99 1102.14,1206.99 1102.72,1206.99 1103.31,1206.99 1103.89,1206.99 1104.48,1206.99 1105.07,1206.99 1105.65,1206.99 1106.24,1206.99 1106.83,1206.99 1107.41,1206.99 1108,1206.99 1108.59,1206.99 1109.17,1206.99 1109.76,1206.99 1110.34,1206.99 1110.93,1206.99 1111.52,1206.99 1112.1,1206.99 1112.69,1206.99 1113.28,1206.99 1113.86,1206.99 1114.45,1206.99 1115.04,1206.99 1115.62,1206.99 1116.21,1206.99 1116.8,1206.99 1117.38,1206.99 1117.97,1206.99 1118.55,1206.99 1119.14,1206.99 1119.73,1206.99 1120.31,1206.99 1120.9,1206.99 1121.49,1206.99 1122.07,1206.99 1122.66,1206.99 1123.25,1206.99 1123.83,1206.99 1124.42,1206.99 1125.01,1206.99 1125.59,1206.99 1126.18,1206.99 1126.76,1206.99 1127.35,1206.99 1127.94,1206.99 1128.52,1206.99 1129.11,1206.99 1129.7,1206.99 1130.28,1206.99 1130.87,1206.99 1131.46,1206.99 1132.04,1206.99 1132.63,1206.99 1133.21,1206.99 1133.8,1206.99 1134.39,1206.99 1134.97,1206.99 1135.56,1206.99 1136.15,1206.99 1136.73,1206.99 1137.32,1206.99 1137.91,1206.99 1138.49,1206.99 1139.08,1206.99 1139.67,1206.99 1140.25,1206.99 1140.84,1206.99 1141.42,1206.99 1142.01,1206.99 1142.6,1206.99 1143.18,1206.99 1143.77,1206.99 1144.36,1206.99 1144.94,1206.99 1145.53,1206.99 1146.12,1206.99 1146.7,1206.99 1147.29,1206.99 1147.88,1206.99 1148.46,1206.99 1149.05,1206.99 1149.63,1206.99 1150.22,1206.99 1150.81,1206.99 1151.39,1206.99 1151.98,1206.99 1152.57,1206.99 1153.15,1206.99 1153.74,1206.99 1154.33,1206.99 1154.91,1206.99 1155.5,1206.99 1156.09,1206.99 1156.67,1206.99 1157.26,1206.99 1157.84,1206.99 1158.43,1206.99 1159.02,1206.99 1159.6,1206.99 1160.19,1206.99 1160.78,1206.99 1161.36,1206.99 1161.95,1206.99 1162.54,1206.99 1163.12,1206.99 1163.71,1206.99 1164.29,1206.99 1164.88,1206.99 1165.47,1206.99 1166.05,1206.99 1166.64,1206.99 1167.23,1206.99 1167.81,1206.99 1168.4,1206.99 1168.99,1206.99 1169.57,1206.99 1170.16,1206.99 1170.75,1206.99 1171.33,1206.99 1171.92,1206.99 1172.5,1206.99 1173.09,1206.99 1173.68,1206.99 1174.26,1206.99 1174.85,1206.99 1175.44,1206.99 1176.02,1206.99 1176.61,1206.99 1177.2,1206.99 1177.78,1206.99 1178.37,1206.99 1178.96,1206.99 1179.54,1206.99 1180.13,1206.99 1180.71,1206.99 1181.3,1206.99 1181.89,1206.99 1182.47,1206.99 1183.06,1206.99 1183.65,1206.99 1184.23,1206.99 1184.82,1206.99 1185.41,1206.99 1185.99,1206.99 1186.58,1206.99 1187.16,1206.99 1187.75,1206.99 1188.34,1206.99 1188.92,1206.99 1189.51,1206.99 1190.1,1206.99 1190.68,1206.99 1191.27,1206.99 1191.86,1206.99 1192.44,1206.99 1193.03,1206.99 1193.62,1206.99 1194.2,1206.99 1194.79,1206.99 1195.37,1206.99 1195.96,1206.99 1196.55,1206.99 1197.13,1206.99 1197.72,1206.99 1198.31,1206.99 1198.89,1206.99 1199.48,1206.99 1200.07,1206.99 1200.65,1206.99 1201.24,1206.99 1201.83,1206.99 1202.41,1206.99 1203,1206.99 1203.58,1206.99 1204.17,1206.99 1204.76,1206.99 1205.34,1206.99 1205.93,1206.99 1206.52,1206.99 1207.1,1206.99 1207.69,1206.99 1208.28,1206.99 1208.86,1206.99 1209.45,1206.99 1210.03,1206.99 1210.62,1206.99 1211.21,1206.99 1211.79,1206.99 1212.38,1206.99 1212.97,1206.99 1213.55,1206.99 1214.14,1206.99 1214.73,1206.99 1215.31,1206.99 1215.9,1206.99 1216.49,1206.99 1217.07,1206.99 1217.66,1206.99 1218.24,1206.99 1218.83,1206.99 1219.42,1206.99 1220,1206.99 1220.59,1206.99 1221.18,1206.99 1221.76,1206.99 1222.35,1206.99 1222.94,1206.99 1223.52,1206.99 1224.11,1206.99 1224.7,1206.99 1225.28,1206.99 1225.87,1206.99 1226.45,1206.99 1227.04,1206.99 1227.63,1206.99 1228.21,1206.99 1228.8,1206.99 1229.39,1206.99 1229.97,1206.99 1230.56,1206.99 1231.15,1206.99 1231.73,1206.99 1232.32,1206.99 1232.91,1206.99 1233.49,1206.99 1234.08,1206.99 1234.66,1206.99 1235.25,1206.99 1235.84,1206.99 1236.42,1206.99 1237.01,1206.99 1237.6,1206.99 1238.18,1206.99 1238.77,1206.99 1239.36,1206.99 1239.94,1206.99 1240.53,1206.99 1241.11,1206.99 1241.7,1206.99 1242.29,1206.99 1242.87,1206.99 1243.46,1206.99 1244.05,1206.99 1244.63,1206.99 1245.22,1206.99 1245.81,1206.99 1246.39,1206.99 1246.98,1206.99 1247.57,1206.99 1248.15,1206.99 1248.74,1206.99 1249.32,1206.99 1249.91,1206.99 1250.5,1206.99 1251.08,1206.99 1251.67,1206.99 1252.26,1206.99 1252.84,1206.99 1253.43,1206.99 1254.02,1206.99 1254.6,1206.99 1255.19,1206.99 1255.78,1206.99 1256.36,1206.99 1256.95,1206.99 1257.53,1206.99 1258.12,1206.99 1258.71,1206.99 1259.29,1206.99 1259.88,1206.99 1260.47,1206.99 1261.05,1206.99 1261.64,1206.99 1262.23,1206.99 1262.81,1206.99 1263.4,1206.99 1263.98,1206.99 1264.57,1206.99 1265.16,1206.99 1265.74,1206.99 1266.33,1206.99 1266.92,1206.99 1267.5,1206.99 1268.09,1206.99 1268.68,1206.99 1269.26,1206.99 1269.85,1206.99 1270.44,1206.99 1271.02,1206.99 1271.61,1206.99 1272.19,1206.99 1272.78,1206.99 1273.37,1206.99 1273.95,1206.99 1274.54,1206.99 1275.13,1206.99 1275.71,1206.99 1276.3,1206.99 1276.89,1206.99 1277.47,1206.99 1278.06,1206.99 1278.65,1206.99 1279.23,1206.99 1279.82,1206.99 1280.4,1206.99 1280.99,1206.99 1281.58,1206.99 1282.16,1206.99 1282.75,1206.99 1283.34,1206.99 1283.92,1206.99 1284.51,1206.99 1285.1,1206.99 1285.68,1206.99 1286.27,1206.99 1286.86,1206.99 1287.44,1206.99 1288.03,1206.99 1288.61,1206.99 1289.2,1206.99 1289.79,1206.99 1290.37,1206.99 1290.96,1206.99 1291.55,1206.99 1292.13,1206.99 1292.72,1206.99 1293.31,1206.99 1293.89,1206.99 1294.48,1206.99 1295.06,1206.99 1295.65,1206.99 1296.24,1206.99 1296.82,1206.99 1297.41,1206.99 1298,1206.99 1298.58,1206.99 1299.17,1206.99 1299.76,1206.99 1300.34,1206.99 1300.93,1206.99 1301.52,1206.99 1302.1,1206.99 1302.69,1206.99 1303.27,1206.99 1303.86,1206.99 1304.45,1206.99 1305.03,1206.99 1305.62,1206.99 1306.21,1206.99 1306.79,1206.99 1307.38,1206.99 1307.97,1206.99 1308.55,1206.99 1309.14,1206.99 1309.73,1206.99 1310.31,1206.99 1310.9,1206.99 1311.48,1206.99 1312.07,1206.99 1312.66,1206.99 1313.24,1206.99 1313.83,1206.99 1314.42,1206.99 1315,1206.99 1315.59,1206.99 1316.18,1206.99 1316.76,1206.99 1317.35,1206.99 1317.93,1206.99 1318.52,1206.99 1319.11,1206.99 1319.69,1206.99 1320.28,1206.99 1320.87,1206.99 1321.45,1206.99 1322.04,1206.99 1322.63,1206.99 1323.21,1206.99 1323.8,1206.99 1324.39,1206.99 1324.97,1206.99 1325.56,1206.99 1326.14,1206.99 1326.73,1206.99 1327.32,1206.99 1327.9,1206.99 1328.49,1206.99 1329.08,1206.99 1329.66,1206.99 1330.25,1206.99 1330.84,1206.99 1331.42,1206.99 1332.01,1206.99 1332.6,1206.99 1333.18,1206.99 1333.77,1206.99 1334.35,1206.99 1334.94,1206.99 1335.53,1206.99 1336.11,1206.99 1336.7,1206.99 1337.29,1206.99 1337.87,1206.99 1338.46,1206.99 1339.05,1206.99 1339.63,1206.99 1340.22,1206.99 1340.8,1206.99 1341.39,1206.99 1341.98,1206.99 1342.56,1206.99 1343.15,1206.99 1343.74,1206.99 1344.32,1206.99 1344.91,1206.99 1345.5,1206.99 1346.08,1206.99 1346.67,1206.99 1347.26,1206.99 1347.84,1206.99 1348.43,1206.99 1349.01,1206.99 1349.6,1206.99 1350.19,1206.99 1350.77,1206.99 1351.36,1206.99 1351.95,1206.99 1352.53,1206.99 1353.12,1206.99 1353.71,1206.99 1354.29,1206.99 1354.88,1206.99 1355.47,1206.99 1356.05,1206.99 1356.64,1206.99 1357.22,1206.99 1357.81,1206.99 1358.4,1206.99 1358.98,1206.99 1359.57,1206.99 1360.16,1206.99 1360.74,1206.99 1361.33,1206.99 1361.92,1206.99 1362.5,1206.99 1363.09,1206.99 1363.68,1206.99 1364.26,1206.99 1364.85,1206.99 1365.43,1206.99 1366.02,1206.99 1366.61,1206.99 1367.19,1206.99 1367.78,1206.99 1368.37,1206.99 1368.95,1206.99 1369.54,1206.99 1370.13,1206.99 1370.71,1206.99 1371.3,1206.99 1371.88,1206.99 1372.47,1206.99 1373.06,1206.99 1373.64,1206.99 1374.23,1206.99 1374.82,1206.99 1375.4,1206.99 1375.99,1206.99 1376.58,1206.99 1377.16,1206.99 1377.75,1206.99 1378.34,1206.99 1378.92,1206.99 1379.51,1206.99 1380.09,1206.99 1380.68,1206.99 1381.27,1206.99 1381.85,1206.99 1382.44,1206.99 1383.03,1206.99 1383.61,1206.99 1384.2,1206.99 1384.79,1206.99 1385.37,1206.99 1385.96,1206.99 1386.55,1206.99 1387.13,1206.99 1387.72,1206.99 1388.3,1206.99 1388.89,1206.99 1389.48,1206.99 1390.06,1206.99 1390.65,1206.99 1391.24,1206.99 1391.82,1206.99 1392.41,1206.99 1393,1206.99 1393.58,1206.99 1394.17,1206.99 1394.75,1206.99 1395.34,1206.99 1395.93,1206.99 1396.51,1206.99 1397.1,1206.99 1397.69,1206.99 1398.27,1206.99 1398.86,1206.99 1399.45,1206.99 1400.03,1206.99 1400.62,1206.99 1401.21,1206.99 1401.79,1206.99 1402.38,1206.99 1402.96,1206.99 1403.55,1206.99 1404.14,1206.99 1404.72,1206.99 1405.31,1206.99 1405.9,1206.99 1406.48,1206.99 1407.07,1206.99 1407.66,1206.99 1408.24,1206.99 1408.83,1206.99 1409.42,1206.99 1410,1206.99 1410.59,1206.99 1411.17,1206.99 1411.76,1206.99 1412.35,1206.99 1412.93,1206.99 1413.52,1206.99 1414.11,1206.99 1414.69,1206.99 1415.28,1206.99 1415.87,1206.99 1416.45,1206.99 1417.04,1206.99 1417.63,1206.99 1418.21,1206.99 1418.8,1206.99 1419.38,1206.99 1419.97,1206.99 1420.56,1206.99 1421.14,1206.99 1421.73,1206.99 1422.32,1206.99 1422.9,1206.99 1423.49,1206.99 1424.08,1206.99 1424.66,1206.99 1425.25,1206.99 1425.83,1206.99 1426.42,1206.99 1427.01,1206.99 1427.59,1206.99 1428.18,1206.99 1428.77,1206.99 1429.35,1206.99 1429.94,1206.99 1430.53,1206.99 1431.11,1206.99 1431.7,1206.99 1432.29,1206.99 1432.87,1206.99 1433.46,1206.99 1434.04,1206.99 1434.63,1206.99 1435.22,1206.99 1435.8,1206.99 1436.39,1206.99 1436.98,1206.99 1437.56,1206.99 1438.15,1206.99 1438.74,1206.99 1439.32,1206.99 1439.91,1206.99 1440.5,1206.99 1441.08,1206.99 1441.67,1206.99 1442.25,1206.99 1442.84,1206.99 1443.43,1206.99 1444.01,1206.99 1444.6,1206.99 1445.19,1206.99 1445.77,1206.99 1446.36,1206.99 1446.95,1206.99 1447.53,1206.99 1448.12,1206.99 1448.7,1206.99 1449.29,1206.99 1449.88,1206.99 1450.46,1206.99 1451.05,1206.99 1451.64,1206.99 1452.22,1206.99 1452.81,1206.99 1453.4,1206.99 1453.98,1206.99 1454.57,1206.99 1455.16,1206.99 1455.74,1206.99 1456.33,1206.99 1456.91,1206.99 1457.5,1206.99 1458.09,1206.99 1458.67,1206.99 1459.26,1206.99 1459.85,1206.99 1460.43,1206.99 1461.02,1206.99 1461.61,1206.99 1462.19,1206.99 1462.78,1206.99 1463.37,1206.99 1463.95,1206.99 1464.54,1206.99 1465.12,1206.99 1465.71,1206.99 1466.3,1206.99 1466.88,1206.99 1467.47,1206.99 1468.06,1206.99 1468.64,1206.99 1469.23,1206.99 1469.82,1206.99 1470.4,1206.99 1470.99,1206.99 1471.57,1206.99 1472.16,1206.99 1472.75,1206.99 1473.33,1206.99 1473.92,1206.99 1474.51,1206.99 1475.09,1206.99 1475.68,1206.99 1476.27,1206.99 1476.85,1206.99 1477.44,1206.99 1478.03,1206.99 1478.61,1206.99 1479.2,1206.99 1479.78,1206.99 1480.37,1206.99 1480.96,1206.99 1481.54,1206.99 1482.13,1206.99 1482.72,1206.99 1483.3,1206.99 1483.89,1206.99 1484.48,1206.99 1485.06,1206.99 1485.65,1206.99 1486.24,1206.99 1486.82,1206.99 1487.41,1206.99 1487.99,1206.99 1488.58,1206.99 1489.17,1206.99 1489.75,1206.99 1490.34,1206.99 1490.93,1206.99 1491.51,1206.99 1492.1,1206.99 1492.69,1206.99 1493.27,1206.99 1493.86,1206.99 1494.45,1206.99 1495.03,1206.99 1495.62,1206.99 1496.2,1206.99 1496.79,1206.99 1497.38,1206.99 1497.96,1206.99 1498.55,1206.99 1499.14,1206.99 1499.72,1206.99 1500.31,1206.99 1500.9,1206.99 1501.48,1206.99 1502.07,1206.99 1502.65,1206.99 1503.24,1206.99 1503.83,1206.99 1504.41,1206.99 1505,1206.99 1505.59,1206.99 1506.17,1206.99 1506.76,1206.99 1507.35,1206.99 1507.93,1206.99 1508.52,1206.99 1509.11,1206.99 1509.69,1206.99 1510.28,1206.99 1510.86,1206.99 1511.45,1206.99 1512.04,1206.99 1512.62,1206.99 1513.21,1206.99 1513.8,1206.99 1514.38,1206.99 1514.97,1206.99 1515.56,1206.99 1516.14,1206.99 1516.73,1206.99 1517.32,1206.99 1517.9,1206.99 1518.49,1206.99 1519.07,1206.99 1519.66,1206.99 1520.25,1206.99 1520.83,1206.99 1521.42,1206.99 1522.01,1206.99 1522.59,1206.99 1523.18,1206.99 1523.77,1206.99 1524.35,1206.99 1524.94,1206.99 1525.52,1206.99 1526.11,1206.99 1526.7,1206.99 1527.28,1206.99 1527.87,1206.99 1528.46,1206.99 1529.04,1206.99 1529.63,1206.99 1530.22,1206.99 1530.8,1206.99 1531.39,1206.99 1531.98,1206.99 1532.56,1206.99 1533.15,1206.99 1533.73,1206.99 1534.32,1206.99 1534.91,1206.99 1535.49,1206.99 1536.08,1206.99 1536.67,1206.99 1537.25,1206.99 1537.84,1206.99 1538.43,1206.99 1539.01,1206.99 1539.6,1206.99 1540.19,1206.99 1540.77,1206.99 1541.36,1206.99 1541.94,1206.99 1542.53,1206.99 1543.12,1206.99 1543.7,1206.99 1544.29,1206.99 1544.88,1206.99 1545.46,1206.99 1546.05,1206.99 1546.64,1206.99 1547.22,1206.99 1547.81,1206.99 1548.4,1206.99 1548.98,1206.99 1549.57,1206.99 1550.15,1206.99 1550.74,1206.99 1551.33,1206.99 1551.91,1206.99 1552.5,1206.99 1553.09,1206.99 1553.67,1206.99 1554.26,1206.99 1554.85,1206.99 1555.43,1206.99 1556.02,1206.99 1556.6,1206.99 1557.19,1206.99 1557.78,1206.99 1558.36,1206.99 1558.95,1206.99 1559.54,1206.99 1560.12,1206.99 1560.71,1206.99 1561.3,1206.99 1561.88,1206.99 1562.47,1206.99 1563.06,1206.99 1563.64,1206.99 1564.23,1206.99 1564.81,1206.99 1565.4,1206.99 1565.99,1206.99 1566.57,1206.99 1567.16,1206.99 1567.75,1206.99 1568.33,1206.99 1568.92,1206.99 1569.51,1206.99 1570.09,1206.99 1570.68,1206.99 1571.27,1206.99 1571.85,1206.99 1572.44,1206.99 1573.02,1206.99 1573.61,1206.99 1574.2,1206.99 1574.78,1206.99 1575.37,1206.99 1575.96,1206.99 1576.54,1206.99 1577.13,1206.99 1577.72,1206.99 1578.3,1206.99 1578.89,1206.99 1579.47,1206.99 1580.06,1206.99 1580.65,1206.99 1581.23,1206.99 1581.82,1206.99 1582.41,1206.99 1582.99,1206.99 1583.58,1206.99 1584.17,1206.99 1584.75,1206.99 1585.34,1206.99 1585.93,1206.99 1586.51,1206.99 1587.1,1206.99 1587.68,1206.99 1588.27,1206.99 1588.86,1206.99 1589.44,1206.99 1590.03,1206.99 1590.62,1206.99 1591.2,1206.99 1591.79,1206.99 1592.38,1206.99 1592.96,1206.99 1593.55,1206.99 1594.14,1206.99 1594.72,1206.99 1595.31,1206.99 1595.89,1206.99 1596.48,1206.99 1597.07,1206.99 1597.65,1206.99 1598.24,1206.99 1598.83,1206.99 1599.41,1206.99 1600,1206.99 1600.59,1206.99 1601.17,1206.99 1601.76,1206.99 1602.34,1206.99 1602.93,1206.99 1603.52,1206.99 1604.1,1206.99 1604.69,1206.99 1605.28,1206.99 1605.86,1206.99 1606.45,1206.99 1607.04,1206.99 1607.62,1206.99 1608.21,1206.99 1608.8,1206.99 1609.38,1206.99 1609.97,1206.99 1610.55,1206.99 1611.14,1206.99 1611.73,1206.99 1612.31,1206.99 1612.9,1206.99 1613.49,1206.99 1614.07,1206.99 1614.66,1206.99 1615.25,1206.99 1615.83,1206.99 1616.42,1206.99 1617.01,1206.99 1617.59,1206.99 1618.18,1206.99 1618.76,1206.99 1619.35,1206.99 1619.94,1206.99 1620.52,1206.99 1621.11,1206.99 1621.7,1206.99 1622.28,1206.99 1622.87,1206.99 1623.46,1206.99 1624.04,1206.99 1624.63,1206.99 1625.22,1206.99 1625.8,1206.99 1626.39,1206.99 1626.97,1206.99 1627.56,1206.99 1628.15,1206.99 1628.73,1206.99 1629.32,1206.99 1629.91,1206.99 1630.49,1206.99 1631.08,1206.99 1631.67,1206.99 1632.25,1206.99 1632.84,1206.99 1633.42,1206.99 1634.01,1206.99 1634.6,1206.99 1635.18,1206.99 1635.77,1206.99 1636.36,1206.99 1636.94,1206.99 1637.53,1206.99 1638.12,1206.99 1638.7,1206.99 1639.29,1206.99 1639.88,1206.99 1640.46,1206.99 1641.05,1206.99 1641.63,1206.99 1642.22,1206.99 1642.81,1206.99 1643.39,1206.99 1643.98,1206.99 1644.57,1206.99 1645.15,1206.99 1645.74,1206.99 1646.33,1206.99 1646.91,1206.99 1647.5,1206.99 1648.09,1206.99 1648.67,1206.99 1649.26,1206.99 1649.84,1206.99 1650.43,1206.99 1651.02,1206.99 1651.6,1206.99 1652.19,1206.99 1652.78,1206.99 1653.36,1206.99 1653.95,1206.99 1654.54,1206.99 1655.12,1206.99 1655.71,1206.99 1656.29,1206.99 1656.88,1206.99 1657.47,1206.99 1658.05,1206.99 1658.64,1206.99 1659.23,1206.99 1659.81,1206.99 1660.4,1206.99 1660.99,1206.99 1661.57,1206.99 1662.16,1206.99 1662.75,1206.99 1663.33,1206.99 1663.92,1206.99 1664.5,1206.99 1665.09,1206.99 1665.68,1206.99 1666.26,1206.99 1666.85,1206.99 1667.44,1206.99 1668.02,1206.99 1668.61,1206.99 1669.2,1206.99 1669.78,1206.99 1670.37,1206.99 1670.96,1206.99 1671.54,1206.99 1672.13,1206.99 1672.71,1206.99 1673.3,1206.99 1673.89,1206.99 1674.47,1206.99 1675.06,1206.99 1675.65,1206.99 1676.23,1206.99 1676.82,1206.99 1677.41,1206.99 1677.99,1206.99 1678.58,1206.99 1679.17,1206.99 1679.75,1206.99 1680.34,1206.99 1680.92,1206.99 1681.51,1206.99 1682.1,1206.99 1682.68,1206.99 1683.27,1206.99 1683.86,1206.99 1684.44,1206.99 1685.03,1206.99 1685.62,1206.99 1686.2,1206.99 1686.79,1206.99 1687.37,1206.99 1687.96,1206.99 1688.55,1206.99 1689.13,1206.99 1689.72,1206.99 1690.31,1206.99 1690.89,1206.99 1691.48,1206.99 1692.07,1206.99 1692.65,1206.99 1693.24,1206.99 1693.83,1206.99 1694.41,1206.99 1695,1206.99 1695.58,1206.99 1696.17,1206.99 1696.76,1206.99 1697.34,1206.99 1697.93,1206.99 1698.52,1206.99 1699.1,1206.99 1699.69,1206.99 1700.28,1206.99 1700.86,1206.99 1701.45,1206.99 1702.04,1206.99 1702.62,1206.99 1703.21,1206.99 1703.79,1206.99 1704.38,1206.99 1704.97,1206.99 1705.55,1206.99 1706.14,1206.99 1706.73,1206.99 1707.31,1206.99 1707.9,1206.99 1708.49,1206.99 1709.07,1206.99 1709.66,1206.99 1710.24,1206.99 1710.83,1206.99 1711.42,1206.99 1712,1206.99 1712.59,1206.99 1713.18,1206.99 1713.76,1206.99 1714.35,1206.99 1714.94,1206.99 1715.52,1206.99 1716.11,1206.99 1716.7,1206.99 1717.28,1206.99 1717.87,1206.99 1718.45,1206.99 1719.04,1206.99 1719.63,1206.99 1720.21,1206.99 1720.8,1206.99 1721.39,1206.99 1721.97,1206.99 1722.56,1206.99 1723.15,1206.99 1723.73,1206.99 1724.32,1206.99 1724.91,1206.99 1725.49,1206.99 1726.08,1206.99 1726.66,1206.99 1727.25,1206.99 1727.84,1206.99 1728.42,1206.99 1729.01,1206.99 1729.6,1206.99 1730.18,1206.99 1730.77,1206.99 1731.36,1206.99 1731.94,1206.99 1732.53,1206.99 1733.11,1206.99 1733.7,1206.99 1734.29,1206.99 1734.87,1206.99 1735.46,1206.99 1736.05,1206.99 1736.63,1206.99 1737.22,1206.99 1737.81,1206.99 1738.39,1206.99 1738.98,1206.99 1739.57,1206.99 1740.15,1206.99 1740.74,1206.99 1741.32,1206.99 1741.91,1206.99 1742.5,1206.99 1743.08,1206.99 1743.67,1206.99 1744.26,1206.99 1744.84,1206.99 1745.43,1206.99 1746.02,1206.99 1746.6,1206.99 1747.19,1206.99 1747.78,1206.99 1748.36,1206.99 1748.95,1206.99 1749.53,1206.99 1750.12,1206.99 1750.71,1206.99 1751.29,1206.99 1751.88,1206.99 1752.47,1206.99 1753.05,1206.99 1753.64,1206.99 1754.23,1206.99 1754.81,1206.99 1755.4,1206.99 1755.99,1206.99 1756.57,1206.99 1757.16,1206.99 1757.74,1206.99 1758.33,1206.99 1758.92,1206.99 1759.5,1206.99 1760.09,1206.99 1760.68,1206.99 1761.26,1206.99 1761.85,1206.99 1762.44,1206.99 1763.02,1206.99 1763.61,1206.99 1764.19,1206.99 1764.78,1206.99 1765.37,1206.99 1765.95,1206.99 1766.54,1206.99 1767.13,1206.99 1767.71,1206.99 1768.3,1206.99 1768.89,1206.99 1769.47,1206.99 1770.06,1206.99 1770.65,1206.99 1771.23,1206.99 1771.82,1206.99 1772.4,1206.99 1772.99,1206.99 1773.58,1206.99 1774.16,1206.99 1774.75,1206.99 1775.34,1206.99 1775.92,1206.99 1776.51,1206.99 1777.1,1206.99 1777.68,1206.99 1778.27,1206.99 1778.86,1206.99 1779.44,1206.99 1780.03,1206.99 1780.61,1206.99 1781.2,1206.99 1781.79,1206.99 1782.37,1206.99 1782.96,1206.99 1783.55,1206.99 1784.13,1206.99 1784.72,1206.99 1785.31,1206.99 1785.89,1206.99 1786.48,1206.99 1787.06,1206.99 1787.65,1206.99 1788.24,1206.99 1788.82,1206.99 1789.41,1206.99 1790,1206.99 1790.58,1206.99 1791.17,1206.99 1791.76,1206.99 1792.34,1206.99 1792.93,1206.99 1793.52,1206.99 1794.1,1206.99 1794.69,1206.99 1795.27,1206.99 1795.86,1206.99 1796.45,1206.99 1797.03,1206.99 1797.62,1206.99 1798.21,1206.99 1798.79,1206.99 1799.38,1206.99 1799.97,1206.99 1800.55,1206.99 1801.14,1206.99 1801.73,1206.99 1802.31,1206.99 1802.9,1206.99 1803.48,1206.99 1804.07,1206.99 1804.66,1206.99 1805.24,1206.99 1805.83,1206.99 1806.42,1206.99 1807,1206.99 1807.59,1206.99 1808.18,1206.99 1808.76,1206.99 1809.35,1206.99 1809.94,1206.99 1810.52,1206.99 1811.11,1206.99 1811.69,1206.99 1812.28,1206.99 1812.87,1206.99 1813.45,1206.99 1814.04,1206.99 1814.63,1206.99 1815.21,1206.99 1815.8,1206.99 1816.39,1206.99 1816.97,1206.99 1817.56,1206.99 1818.14,1206.99 1818.73,1206.99 1819.32,1206.99 1819.9,1206.99 1820.49,1206.99 1821.08,1206.99 1821.66,1206.99 1822.25,1206.99 1822.84,1206.99 1823.42,1206.99 1824.01,1206.99 1824.6,1206.99 1825.18,1206.99 1825.77,1206.99 1826.35,1206.99 1826.94,1206.99 1827.53,1206.99 1828.11,1206.99 1828.7,1206.99 1829.29,1206.99 1829.87,1206.99 1830.46,1206.99 1831.05,1206.99 1831.63,1206.99 1832.22,1206.99 1832.81,1206.99 1833.39,1206.99 1833.98,1206.99 1834.56,1206.99 1835.15,1206.99 1835.74,1206.99 1836.32,1206.99 1836.91,1206.99 1837.5,1206.99 1838.08,1206.99 1838.67,1206.99 1839.26,1206.99 1839.84,1206.99 1840.43,1206.99 1841.01,1206.99 1841.6,1206.99 1842.19,1206.99 1842.77,1206.99 1843.36,1206.99 1843.95,1206.99 1844.53,1206.99 1845.12,1206.99 1845.71,1206.99 1846.29,1206.99 1846.88,1206.99 1847.47,1206.99 1848.05,1206.99 1848.64,1206.99 1849.22,1206.99 1849.81,1206.99 1850.4,1206.99 1850.98,1206.99 1851.57,1206.99 1852.16,1206.99 1852.74,1206.99 1853.33,1206.99 1853.92,1206.99 1854.5,1206.99 1855.09,1206.99 1855.68,1206.99 1856.26,1206.99 1856.85,1206.99 1857.43,1206.99 1858.02,1206.99 1858.61,1206.99 1859.19,1206.99 1859.78,1206.99 1860.37,1206.99 1860.95,1206.99 1861.54,1206.99 1862.13,1206.99 1862.71,1206.99 1863.3,1206.99 1863.88,1206.99 1864.47,1206.99 1865.06,1206.99 1865.64,1206.99 1866.23,1206.99 1866.82,1206.99 1867.4,1206.99 1867.99,1206.99 1868.58,1206.99 1869.16,1206.99 1869.75,1206.99 1870.34,1206.99 1870.92,1206.99 1871.51,1206.99 1872.09,1206.99 1872.68,1206.99 1873.27,1206.99 1873.85,1206.99 1874.44,1206.99 1875.03,1206.99 1875.61,1206.99 1876.2,1206.99 1876.79,1206.99 1877.37,1206.99 1877.96,1206.99 1878.55,1206.99 1879.13,1206.99 1879.72,1206.99 1880.3,1206.99 1880.89,1206.99 1881.48,1206.99 1882.06,1206.99 1882.65,1206.99 1883.24,1206.99 1883.82,1206.99 1884.41,1206.99 1885,1206.99 1885.58,1206.99 1886.17,1206.99 1886.76,1206.99 1887.34,1206.99 1887.93,1206.99 1888.51,1206.99 1889.1,1206.99 1889.69,1206.99 1890.27,1206.99 1890.86,1206.99 1891.45,1206.99 1892.03,1206.99 1892.62,1206.99 1893.21,1206.99 1893.79,1206.99 1894.38,1206.99 1894.96,1206.99 1895.55,1206.99 1896.14,1206.99 1896.72,1206.99 1897.31,1206.99 1897.9,1206.99 1898.48,1206.99 1899.07,1206.99 1899.66,1206.99 1900.24,1206.99 1900.83,1206.99 1901.42,1206.99 1902,1206.99 1902.59,1206.99 1903.17,1206.99 1903.76,1206.99 1904.35,1206.99 1904.93,1206.99 1905.52,1206.99 1906.11,1206.99 1906.69,1206.99 1907.28,1206.99 1907.87,1206.99 1908.45,1206.99 1909.04,1206.99 1909.63,1206.99 1910.21,1206.99 1910.8,1206.99 1911.38,1206.99 1911.97,1206.99 1912.56,1206.99 1913.14,1206.99 1913.73,1206.99 1914.32,1206.99 1914.9,1206.99 1915.49,1206.99 1916.08,1206.99 1916.66,1206.99 1917.25,1206.99 1917.83,1206.99 1918.42,1206.99 1919.01,1206.99 1919.59,1206.99 1920.18,1206.99 1920.77,1206.99 1921.35,1206.99 1921.94,1206.99 1922.53,1206.99 1923.11,1206.99 1923.7,1206.99 1924.29,1206.99 1924.87,1206.99 1925.46,1206.99 1926.04,1206.99 1926.63,1206.99 1927.22,1206.99 1927.8,1206.99 1928.39,1206.99 1928.98,1206.99 1929.56,1206.99 1930.15,1206.99 1930.74,1206.99 1931.32,1206.99 1931.91,1206.99 1932.5,1206.99 1933.08,1206.99 1933.67,1206.99 1934.25,1206.99 1934.84,1206.99 1935.43,1206.99 1936.01,1206.99 1936.6,1206.99 1937.19,1206.99 1937.77,1206.99 1938.36,1206.99 1938.95,1206.99 1939.53,1206.99 1940.12,1206.99 1940.71,1206.99 1941.29,1206.99 1941.88,1206.99 1942.46,1206.99 1943.05,1206.99 1943.64,1206.99 1944.22,1206.99 1944.81,1206.99 1945.4,1206.99 1945.98,1206.99 1946.57,1206.99 1947.16,1206.99 1947.74,1206.99 1948.33,1206.99 1948.91,1206.99 1949.5,1206.99 1950.09,1206.99 1950.67,1206.99 1951.26,1206.99 1951.85,1206.99 1952.43,1206.99 1953.02,1206.99 1953.61,1206.99 1954.19,1206.99 1954.78,1206.99 1955.37,1206.99 1955.95,1206.99 1956.54,1206.99 1957.12,1206.99 1957.71,1206.99 1958.3,1206.99 1958.88,1206.99 1959.47,1206.99 1960.06,1206.99 1960.64,1206.99 1961.23,1206.99 1961.82,1206.99 1962.4,1206.99 1962.99,1206.99 1963.58,1206.99 1964.16,1206.99 1964.75,1206.99 1965.33,1206.99 1965.92,1206.99 1966.51,1206.99 1967.09,1206.99 1967.68,1206.99 1968.27,1206.99 1968.85,1206.99 1969.44,1206.99 1970.03,1206.99 1970.61,1206.99 1971.2,1206.99 1971.78,1206.99 1972.37,1206.99 1972.96,1206.99 1973.54,1206.99 1974.13,1206.99 1974.72,1206.99 1975.3,1206.99 1975.89,1206.99 1976.48,1206.99 1977.06,1206.99 1977.65,1206.99 1978.24,1206.99 1978.82,1206.99 1979.41,1206.99 1979.99,1206.99 1980.58,1206.99 1981.17,1206.99 1981.75,1206.99 1982.34,1206.99 1982.93,1206.99 1983.51,1206.99 1984.1,1206.99 1984.69,1206.99 1985.27,1206.99 1985.86,1206.99 1986.45,1206.99 1987.03,1206.99 1987.62,1206.99 1988.2,1206.99 1988.79,1206.99 1989.38,1206.99 1989.96,1206.99 1990.55,1206.99 1991.14,1206.99 1991.72,1206.99 1992.31,1206.99 1992.9,1206.99 1993.48,1206.99 1994.07,1206.99 1994.65,1206.99 1995.24,1206.99 1995.83,1206.99 1996.41,1206.99 1997,1206.99 1997.59,1206.99 1998.17,1206.99 1998.76,1206.99 1999.35,1206.99 1999.93,1206.99 2000.52,1206.99 2001.11,1206.99 2001.69,1206.99 2002.28,1206.99 2002.86,1206.99 2003.45,1206.99 2004.04,1206.99 2004.62,1206.99 2005.21,1206.99 2005.8,1206.99 2006.38,1206.99 2006.97,1206.99 2007.56,1206.99 2008.14,1206.99 2008.73,1206.99 2009.32,1206.99 2009.9,1206.99 2010.49,1206.99 2011.07,1206.99 2011.66,1206.99 2012.25,1206.99 2012.83,1206.99 2013.42,1206.99 2014.01,1206.99 2014.59,1206.99 2015.18,1206.99 2015.77,1206.99 2016.35,1206.99 2016.94,1206.99 2017.53,1206.99 2018.11,1206.99 2018.7,1206.99 2019.28,1206.99 2019.87,1206.99 2020.46,1206.99 2021.04,1206.99 2021.63,1206.99 2022.22,1206.99 2022.8,1206.99 2023.39,1206.99 2023.98,1206.99 2024.56,1206.99 2025.15,1206.99 2025.73,1206.99 2026.32,1206.99 2026.91,1206.99 2027.49,1206.99 2028.08,1206.99 2028.67,1206.99 2029.25,1206.99 2029.84,1206.99 2030.43,1206.99 2031.01,1206.99 2031.6,1206.99 2032.19,1206.99 2032.77,1206.99 2033.36,1206.99 2033.94,1206.99 2034.53,1206.99 2035.12,1206.99 2035.7,1206.99 2036.29,1206.99 2036.88,1206.99 2037.46,1206.99 2038.05,1206.99 2038.64,1206.99 2039.22,1206.99 2039.81,1206.99 2040.4,1206.99 2040.98,1206.99 2041.57,1206.99 2042.15,1206.99 2042.74,1206.99 2043.33,1206.99 2043.91,1206.99 2044.5,1206.99 2045.09,1206.99 2045.67,1206.99 2046.26,1206.99 2046.85,1206.99 2047.43,1206.99 2048.02,1206.99 2048.6,1206.99 2049.19,1206.99 2049.78,1206.99 2050.36,1206.99 2050.95,1206.99 2051.54,1206.99 2052.12,1206.99 2052.71,1206.99 2053.3,1206.99 2053.88,1206.99 2054.47,1206.99 2055.06,1206.99 2055.64,1206.99 2056.23,1206.99 2056.81,1206.99 2057.4,1206.99 2057.99,1206.99 2058.57,1206.99 2059.16,1206.99 2059.75,1206.99 2060.33,1206.99 2060.92,1206.99 2061.51,1206.99 2062.09,1206.99 2062.68,1206.99 2063.27,1206.99 2063.85,1206.99 2064.44,1206.99 2065.02,1206.99 2065.61,1206.99 2066.2,1206.99 2066.78,1206.99 2067.37,1206.99 2067.96,1206.99 2068.54,1206.99 2069.13,1206.99 2069.72,1206.99 2070.3,1206.99 2070.89,1206.99 2071.48,1206.99 2072.06,1206.99 2072.65,1206.99 2073.23,1206.99 2073.82,1206.99 2074.41,1206.99 2074.99,1206.99 2075.58,1206.99 2076.17,1206.99 2076.75,1206.99 2077.34,1206.99 2077.93,1206.99 2078.51,1206.99 2079.1,1206.99 2079.68,1206.99 2080.27,1206.99 2080.86,1206.99 2081.44,1206.99 2082.03,1206.99 2082.62,1206.99 2083.2,1206.99 2083.79,1206.99 2084.38,1206.99 2084.96,1206.99 2085.55,1206.99 2086.14,1206.99 2086.72,1206.99 2087.31,1206.99 2087.89,1206.99 2088.48,1206.99 2089.07,1206.99 2089.65,1206.99 2090.24,1206.99 2090.83,1206.99 2091.41,1206.99 2092,1206.99 2092.59,1206.99 2093.17,1206.99 2093.76,1206.99 2094.35,1206.99 2094.93,1206.99 2095.52,1206.99 2096.1,1206.99 2096.69,1206.99 2097.28,1206.99 2097.86,1206.99 2098.45,1206.99 2099.04,1206.99 2099.62,1206.99 2100.21,1206.99 2100.8,1206.99 2101.38,1206.99 2101.97,1206.99 2102.55,1206.99 2103.14,1206.99 2103.73,1206.99 2104.31,1206.99 2104.9,1206.99 2105.49,1206.99 2106.07,1206.99 2106.66,1206.99 2107.25,1206.99 2107.83,1206.99 2108.42,1206.99 2109.01,1206.99 2109.59,1206.99 2110.18,1206.99 2110.76,1206.99 2111.35,1206.99 2111.94,1206.99 2112.52,1206.99 2113.11,1206.99 2113.7,1206.99 2114.28,1206.99 2114.87,1206.99 2115.46,1206.99 2116.04,1206.99 2116.63,1206.99 2117.22,1206.99 2117.8,1206.99 2118.39,1206.99 2118.97,1206.99 2119.56,1206.99 2120.15,1206.99 2120.73,1206.99 2121.32,1206.99 2121.91,1206.99 2122.49,1206.99 2123.08,1206.99 2123.67,1206.99 2124.25,1206.99 2124.84,1206.99 2125.42,1206.99 2126.01,1206.99 2126.6,1206.99 2127.18,1206.99 2127.77,1206.99 2128.36,1206.99 2128.94,1206.99 2129.53,1206.99 2130.12,1206.99 2130.7,1206.99 2131.29,1206.99 2131.88,1206.99 2132.46,1206.99 2133.05,1206.99 2133.63,1206.99 2134.22,1206.99 2134.81,1206.99 2135.39,1206.99 2135.98,1206.99 2136.57,1206.99 2137.15,1206.99 2137.74,1206.99 2138.33,1206.99 2138.91,1206.99 2139.5,1206.99 2140.09,1206.99 2140.67,1206.99 2141.26,1206.99 2141.84,1206.99 2142.43,1206.99 2143.02,1206.99 2143.6,1206.99 2144.19,1206.99 2144.78,1206.99 2145.36,1206.99 2145.95,1206.99 2146.54,1206.99 2147.12,1206.99 2147.71,1206.99 2148.3,1206.99 2148.88,1206.99 2149.47,1206.99 2150.05,1206.99 2150.64,1206.99 2151.23,1206.99 2151.81,1206.99 2152.4,1206.99 2152.99,1206.99 2153.57,1206.99 2154.16,1206.99 2154.75,1206.99 2155.33,1206.99 2155.92,1206.99 2156.5,1206.99 2157.09,1206.99 2157.68,1206.99 2158.26,1206.99 \"/>\n<path clip-path=\"url(#clip802)\" d=\"M986.025 1206.9 L986.612 1206.9 L987.198 1206.9 L987.785 1206.9 L988.371 1206.9 L988.957 1206.9 L989.544 1206.9 L990.13 1206.9 L990.717 1206.9 L991.303 1206.9 L991.889 1206.9 L992.476 1206.9 L993.062 1206.9 L993.649 1206.9 L994.235 1206.9 L994.822 1206.9 L995.408 1206.9 L995.994 1206.9 L996.581 1206.9 L997.167 1206.9 L997.754 1206.9 L998.34 1206.9 L998.926 1206.9 L999.513 1206.9 L1000.1 1206.9 L1000.69 1206.9 L1001.27 1206.9 L1001.86 1206.9 L1002.44 1206.9 L1003.03 1206.9 L1003.62 1206.9 L1004.2 1206.9 L1004.79 1206.9 L1005.38 1206.9 L1005.96 1206.9 L1006.55 1206.9 L1007.14 1206.9 L1007.72 1206.9 L1008.31 1206.9 L1008.9 1206.9 L1009.48 1206.9 L1010.07 1206.9 L1010.65 1206.9 L1011.24 1206.9 L1011.83 1206.9 L1012.41 1206.9 L1013 1206.9 L1013.59 1206.9 L1014.17 1206.9 L1014.76 1206.9 L1015.35 1206.9 L1015.93 1206.9 L1016.52 1206.9 L1017.11 1206.9 L1017.69 1206.9 L1018.28 1206.9 L1018.86 1206.9 L1019.45 1206.9 L1020.04 1206.9 L1020.62 1206.9 L1021.21 1206.9 L1021.8 1206.9 L1022.38 1206.9 L1022.97 1206.9 L1023.56 1206.9 L1024.14 1206.9 L1024.73 1206.9 L1025.32 1206.9 L1025.9 1206.9 L1026.49 1206.9 L1027.07 1206.9 L1027.66 1206.9 L1028.25 1206.9 L1028.83 1206.9 L1029.42 1206.9 L1030.01 1206.9 L1030.59 1206.9 L1031.18 1206.9 L1031.77 1206.9 L1032.35 1206.9 L1032.94 1206.9 L1033.52 1206.9 L1034.11 1206.9 L1034.7 1206.9 L1035.28 1206.9 L1035.87 1206.9 L1036.46 1206.9 L1037.04 1206.9 L1037.63 1206.9 L1038.22 1206.9 L1038.8 1206.9 L1039.39 1206.9 L1039.98 1206.9 L1040.56 1206.9 L1041.15 1206.9 L1041.73 1206.9 L1042.32 1206.9 L1042.91 1206.9 L1043.49 1206.9 L1044.08 1206.9 L1044.67 1206.9 L1045.25 1206.9 L1045.84 1206.9 L1046.43 1206.9 L1047.01 1206.9 L1047.6 1206.9 L1048.19 1206.9 L1048.77 1206.9 L1049.36 1206.9 L1049.94 1206.9 L1050.53 1206.9 L1051.12 1206.9 L1051.7 1206.9 L1052.29 1206.9 L1052.88 1206.9 L1053.46 1206.9 L1054.05 1206.9 L1054.64 1206.9 L1055.22 1206.9 L1055.81 1206.9 L1056.39 1206.9 L1056.98 1206.9 L1057.57 1206.9 L1058.15 1206.9 L1058.74 1206.9 L1059.33 1206.9 L1059.91 1206.9 L1060.5 1206.9 L1061.09 1206.9 L1061.67 1206.9 L1062.26 1206.9 L1062.85 1206.9 L1063.43 1206.9 L1064.02 1206.9 L1064.6 1206.9 L1065.19 1206.9 L1065.78 1206.9 L1066.36 1206.9 L1066.95 1206.9 L1067.54 1206.9 L1068.12 1206.9 L1068.71 1206.9 L1069.3 1206.9 L1069.88 1206.9 L1070.47 1206.9 L1071.06 1206.9 L1071.64 1206.9 L1072.23 1206.9 L1072.81 1206.9 L1073.4 1206.9 L1073.99 1206.9 L1074.57 1206.9 L1075.16 1206.9 L1075.75 1206.9 L1076.33 1206.9 L1076.92 1206.9 L1077.51 1206.9 L1078.09 1206.9 L1078.68 1206.9 L1079.26 1206.9 L1079.85 1206.9 L1080.44 1206.9 L1081.02 1206.9 L1081.61 1206.9 L1082.2 1206.9 L1082.78 1206.9 L1083.37 1206.9 L1083.96 1206.9 L1084.54 1206.9 L1085.13 1206.9 L1085.72 1206.9 L1086.3 1206.9 L1086.89 1206.9 L1087.47 1206.9 L1088.06 1206.9 L1088.65 1206.9 L1089.23 1206.9 L1089.82 1206.9 L1090.41 1206.9 L1090.99 1206.9 L1091.58 1206.9 L1092.17 1206.9 L1092.75 1206.9 L1093.34 1206.9 L1093.93 1206.9 L1094.51 1206.9 L1095.1 1206.9 L1095.68 1206.9 L1096.27 1206.9 L1096.86 1206.9 L1097.44 1206.9 L1098.03 1206.9 L1098.62 1206.9 L1099.2 1206.9 L1099.79 1206.9 L1100.38 1206.9 L1100.96 1206.9 L1101.55 1206.9 L1102.14 1206.9 L1102.72 1206.9 L1103.31 1206.9 L1103.89 1206.9 L1104.48 1206.9 L1105.07 1206.9 L1105.65 1206.9 L1106.24 1206.9 L1106.83 1206.9 L1107.41 1206.9 L1108 1206.9 L1108.59 1206.9 L1109.17 1206.9 L1109.76 1206.9 L1110.34 1206.9 L1110.93 1206.9 L1111.52 1206.9 L1112.1 1206.9 L1112.69 1206.9 L1113.28 1206.9 L1113.86 1206.9 L1114.45 1206.9 L1115.04 1206.9 L1115.62 1206.9 L1116.21 1206.9 L1116.8 1206.9 L1117.38 1206.9 L1117.97 1206.9 L1118.55 1206.9 L1119.14 1206.9 L1119.73 1206.9 L1120.31 1206.9 L1120.9 1206.9 L1121.49 1206.9 L1122.07 1206.9 L1122.66 1206.9 L1123.25 1206.9 L1123.83 1206.9 L1124.42 1206.9 L1125.01 1206.9 L1125.59 1206.9 L1126.18 1206.9 L1126.76 1206.9 L1127.35 1206.9 L1127.94 1206.9 L1128.52 1206.9 L1129.11 1206.9 L1129.7 1206.9 L1130.28 1206.9 L1130.87 1206.9 L1131.46 1206.9 L1132.04 1206.9 L1132.63 1206.9 L1133.21 1206.9 L1133.8 1206.9 L1134.39 1206.9 L1134.97 1206.9 L1135.56 1206.9 L1136.15 1206.9 L1136.73 1206.9 L1137.32 1206.9 L1137.91 1206.9 L1138.49 1206.9 L1139.08 1206.9 L1139.67 1206.9 L1140.25 1206.9 L1140.84 1206.9 L1141.42 1206.9 L1142.01 1206.9 L1142.6 1206.9 L1143.18 1206.9 L1143.77 1206.9 L1144.36 1206.9 L1144.94 1206.9 L1145.53 1206.9 L1146.12 1206.9 L1146.7 1206.9 L1147.29 1206.9 L1147.88 1206.9 L1148.46 1206.9 L1149.05 1206.9 L1149.63 1206.9 L1150.22 1206.9 L1150.81 1206.9 L1151.39 1206.9 L1151.98 1206.9 L1152.57 1206.9 L1153.15 1206.9 L1153.74 1206.9 L1154.33 1206.9 L1154.91 1206.9 L1155.5 1206.9 L1156.09 1206.9 L1156.67 1206.9 L1157.26 1206.9 L1157.84 1206.9 L1158.43 1206.9 L1159.02 1206.9 L1159.6 1206.9 L1160.19 1206.9 L1160.78 1206.9 L1161.36 1206.9 L1161.95 1206.9 L1162.54 1206.9 L1163.12 1206.9 L1163.71 1206.9 L1164.29 1206.9 L1164.88 1206.9 L1165.47 1206.9 L1166.05 1206.9 L1166.64 1206.9 L1167.23 1206.9 L1167.81 1206.9 L1168.4 1206.9 L1168.99 1206.9 L1169.57 1206.9 L1170.16 1206.9 L1170.75 1206.9 L1171.33 1206.9 L1171.92 1206.9 L1172.5 1206.9 L1173.09 1206.9 L1173.68 1206.9 L1174.26 1206.9 L1174.85 1206.9 L1175.44 1206.9 L1176.02 1206.9 L1176.61 1206.9 L1177.2 1206.9 L1177.78 1206.9 L1178.37 1206.9 L1178.96 1206.9 L1179.54 1206.9 L1180.13 1206.9 L1180.71 1206.9 L1181.3 1206.9 L1181.89 1206.9 L1182.47 1206.9 L1183.06 1206.9 L1183.65 1206.9 L1184.23 1206.9 L1184.82 1206.9 L1185.41 1206.9 L1185.99 1206.9 L1186.58 1206.9 L1187.16 1206.9 L1187.75 1206.9 L1188.34 1206.9 L1188.92 1206.9 L1189.51 1206.9 L1190.1 1206.9 L1190.68 1206.9 L1191.27 1206.9 L1191.86 1206.9 L1192.44 1206.9 L1193.03 1206.9 L1193.62 1206.9 L1194.2 1206.9 L1194.79 1206.9 L1195.37 1206.9 L1195.96 1206.9 L1196.55 1206.9 L1197.13 1206.9 L1197.72 1206.9 L1198.31 1206.9 L1198.89 1206.9 L1199.48 1206.9 L1200.07 1206.9 L1200.65 1206.9 L1201.24 1206.9 L1201.83 1206.9 L1202.41 1206.9 L1203 1206.9 L1203.58 1206.9 L1204.17 1206.9 L1204.76 1206.9 L1205.34 1206.9 L1205.93 1206.9 L1206.52 1206.9 L1207.1 1206.9 L1207.69 1206.9 L1208.28 1206.9 L1208.86 1206.9 L1209.45 1206.9 L1210.03 1206.9 L1210.62 1206.9 L1211.21 1206.9 L1211.79 1206.9 L1212.38 1206.9 L1212.97 1206.9 L1213.55 1206.9 L1214.14 1206.9 L1214.73 1206.9 L1215.31 1206.9 L1215.9 1206.9 L1216.49 1206.9 L1217.07 1206.9 L1217.66 1206.9 L1218.24 1206.9 L1218.83 1206.9 L1219.42 1206.9 L1220 1206.9 L1220.59 1206.9 L1221.18 1206.9 L1221.76 1206.9 L1222.35 1206.9 L1222.94 1206.9 L1223.52 1206.9 L1224.11 1206.9 L1224.7 1206.9 L1225.28 1206.9 L1225.87 1206.9 L1226.45 1206.9 L1227.04 1206.9 L1227.63 1206.9 L1228.21 1206.9 L1228.8 1206.9 L1229.39 1206.9 L1229.97 1206.9 L1230.56 1206.9 L1231.15 1206.9 L1231.73 1206.9 L1232.32 1206.9 L1232.91 1206.9 L1233.49 1206.9 L1234.08 1206.9 L1234.66 1206.9 L1235.25 1206.9 L1235.84 1206.9 L1236.42 1206.9 L1237.01 1206.9 L1237.6 1206.9 L1238.18 1206.9 L1238.77 1206.9 L1239.36 1206.9 L1239.94 1206.9 L1240.53 1206.9 L1241.11 1206.9 L1241.7 1206.9 L1242.29 1206.9 L1242.87 1206.9 L1243.46 1206.9 L1244.05 1206.9 L1244.63 1206.9 L1245.22 1206.9 L1245.81 1206.9 L1246.39 1206.9 L1246.98 1206.9 L1247.57 1206.9 L1248.15 1206.9 L1248.74 1206.9 L1249.32 1206.9 L1249.91 1206.9 L1250.5 1206.9 L1251.08 1206.9 L1251.67 1206.9 L1252.26 1206.9 L1252.84 1206.9 L1253.43 1206.9 L1254.02 1206.9 L1254.6 1206.9 L1255.19 1206.9 L1255.78 1206.9 L1256.36 1206.9 L1256.95 1206.9 L1257.53 1206.9 L1258.12 1206.9 L1258.71 1206.9 L1259.29 1206.9 L1259.88 1206.9 L1260.47 1206.9 L1261.05 1206.9 L1261.64 1206.9 L1262.23 1206.9 L1262.81 1206.9 L1263.4 1206.9 L1263.98 1206.9 L1264.57 1206.9 L1265.16 1206.9 L1265.74 1206.9 L1266.33 1206.9 L1266.92 1206.9 L1267.5 1206.9 L1268.09 1206.9 L1268.68 1206.9 L1269.26 1206.9 L1269.85 1206.9 L1270.44 1206.9 L1271.02 1206.9 L1271.61 1206.9 L1272.19 1206.9 L1272.78 1206.9 L1273.37 1206.9 L1273.95 1206.9 L1274.54 1206.9 L1275.13 1206.9 L1275.71 1206.9 L1276.3 1206.9 L1276.89 1206.9 L1277.47 1206.9 L1278.06 1206.9 L1278.65 1206.9 L1279.23 1206.9 L1279.82 1206.9 L1280.4 1206.9 L1280.99 1206.9 L1281.58 1206.9 L1282.16 1206.9 L1282.75 1206.9 L1283.34 1206.9 L1283.92 1206.9 L1284.51 1206.9 L1285.1 1206.9 L1285.68 1206.9 L1286.27 1206.9 L1286.86 1206.9 L1287.44 1206.9 L1288.03 1206.9 L1288.61 1206.9 L1289.2 1206.9 L1289.79 1206.9 L1290.37 1206.9 L1290.96 1206.9 L1291.55 1206.9 L1292.13 1206.9 L1292.72 1206.9 L1293.31 1206.9 L1293.89 1206.9 L1294.48 1206.9 L1295.06 1206.9 L1295.65 1206.9 L1296.24 1206.9 L1296.82 1206.9 L1297.41 1206.9 L1298 1206.9 L1298.58 1206.9 L1299.17 1206.9 L1299.76 1206.9 L1300.34 1206.9 L1300.93 1206.9 L1301.52 1206.9 L1302.1 1206.9 L1302.69 1206.9 L1303.27 1206.9 L1303.86 1206.9 L1304.45 1206.9 L1305.03 1206.9 L1305.62 1206.9 L1306.21 1206.9 L1306.79 1206.9 L1307.38 1206.9 L1307.97 1206.9 L1308.55 1206.9 L1309.14 1206.9 L1309.73 1206.9 L1310.31 1206.9 L1310.9 1206.9 L1311.48 1206.9 L1312.07 1206.9 L1312.66 1206.9 L1313.24 1206.9 L1313.83 1206.9 L1314.42 1206.9 L1315 1206.9 L1315.59 1206.9 L1316.18 1206.9 L1316.76 1206.9 L1317.35 1206.9 L1317.93 1206.9 L1318.52 1206.9 L1319.11 1206.9 L1319.69 1206.9 L1320.28 1206.9 L1320.87 1206.9 L1321.45 1206.9 L1322.04 1206.9 L1322.63 1206.9 L1323.21 1206.9 L1323.8 1206.9 L1324.39 1206.9 L1324.97 1206.9 L1325.56 1206.9 L1326.14 1206.9 L1326.73 1206.9 L1327.32 1206.9 L1327.9 1206.9 L1328.49 1206.9 L1329.08 1206.9 L1329.66 1206.9 L1330.25 1206.9 L1330.84 1206.9 L1331.42 1206.9 L1332.01 1206.9 L1332.6 1206.9 L1333.18 1206.9 L1333.77 1206.9 L1334.35 1206.9 L1334.94 1206.9 L1335.53 1206.9 L1336.11 1206.9 L1336.7 1206.9 L1337.29 1206.9 L1337.87 1206.9 L1338.46 1206.9 L1339.05 1206.9 L1339.63 1206.9 L1340.22 1206.9 L1340.8 1206.9 L1341.39 1206.9 L1341.98 1206.9 L1342.56 1206.9 L1343.15 1206.9 L1343.74 1206.9 L1344.32 1206.9 L1344.91 1206.9 L1345.5 1206.9 L1346.08 1206.9 L1346.67 1206.9 L1347.26 1206.9 L1347.84 1206.9 L1348.43 1206.9 L1349.01 1206.9 L1349.6 1206.9 L1350.19 1206.9 L1350.77 1206.9 L1351.36 1206.9 L1351.95 1206.9 L1352.53 1206.9 L1353.12 1206.9 L1353.71 1206.9 L1354.29 1206.9 L1354.88 1206.9 L1355.47 1206.9 L1356.05 1206.9 L1356.64 1206.9 L1357.22 1206.9 L1357.81 1206.9 L1358.4 1206.9 L1358.98 1206.9 L1359.57 1206.9 L1360.16 1206.9 L1360.74 1206.9 L1361.33 1206.9 L1361.92 1206.9 L1362.5 1206.9 L1363.09 1206.9 L1363.68 1206.9 L1364.26 1206.9 L1364.85 1206.9 L1365.43 1206.9 L1366.02 1206.9 L1366.61 1206.9 L1367.19 1206.9 L1367.78 1206.9 L1368.37 1206.9 L1368.95 1206.9 L1369.54 1206.9 L1370.13 1206.9 L1370.71 1206.9 L1371.3 1206.9 L1371.88 1206.9 L1372.47 1206.9 L1373.06 1206.9 L1373.64 1206.9 L1374.23 1206.9 L1374.82 1206.9 L1375.4 1206.9 L1375.99 1206.9 L1376.58 1206.9 L1377.16 1206.9 L1377.75 1206.9 L1378.34 1206.9 L1378.92 1206.9 L1379.51 1206.9 L1380.09 1206.9 L1380.68 1206.9 L1381.27 1206.9 L1381.85 1206.9 L1382.44 1206.9 L1383.03 1206.9 L1383.61 1206.9 L1384.2 1206.9 L1384.79 1206.9 L1385.37 1206.9 L1385.96 1206.9 L1386.55 1206.9 L1387.13 1206.9 L1387.72 1206.9 L1388.3 1206.9 L1388.89 1206.9 L1389.48 1206.9 L1390.06 1206.9 L1390.65 1206.9 L1391.24 1206.9 L1391.82 1206.9 L1392.41 1206.9 L1393 1206.9 L1393.58 1206.9 L1394.17 1206.9 L1394.75 1206.9 L1395.34 1206.9 L1395.93 1206.9 L1396.51 1206.9 L1397.1 1206.9 L1397.69 1206.9 L1398.27 1206.9 L1398.86 1206.9 L1399.45 1206.9 L1400.03 1206.9 L1400.62 1206.9 L1401.21 1206.9 L1401.79 1206.9 L1402.38 1206.9 L1402.96 1206.9 L1403.55 1206.9 L1404.14 1206.9 L1404.72 1206.9 L1405.31 1206.9 L1405.9 1206.9 L1406.48 1206.9 L1407.07 1206.9 L1407.66 1206.9 L1408.24 1206.9 L1408.83 1206.9 L1409.42 1206.9 L1410 1206.9 L1410.59 1206.9 L1411.17 1206.9 L1411.76 1206.9 L1412.35 1206.9 L1412.93 1206.9 L1413.52 1206.9 L1414.11 1206.9 L1414.69 1206.9 L1415.28 1206.9 L1415.87 1206.9 L1416.45 1206.9 L1417.04 1206.9 L1417.63 1206.9 L1418.21 1206.9 L1418.8 1206.9 L1419.38 1206.9 L1419.97 1206.9 L1420.56 1206.9 L1421.14 1206.9 L1421.73 1206.9 L1422.32 1206.9 L1422.9 1206.9 L1423.49 1206.9 L1424.08 1206.9 L1424.66 1206.9 L1425.25 1206.9 L1425.83 1206.9 L1426.42 1206.9 L1427.01 1206.9 L1427.59 1206.9 L1428.18 1206.9 L1428.77 1206.9 L1429.35 1206.9 L1429.94 1206.9 L1430.53 1206.9 L1431.11 1206.9 L1431.7 1206.9 L1432.29 1206.9 L1432.87 1206.9 L1433.46 1206.9 L1434.04 1206.9 L1434.63 1206.9 L1435.22 1206.9 L1435.8 1206.9 L1436.39 1206.9 L1436.98 1206.9 L1437.56 1206.9 L1438.15 1206.9 L1438.74 1206.9 L1439.32 1206.9 L1439.91 1206.9 L1440.5 1206.9 L1441.08 1206.9 L1441.67 1206.9 L1442.25 1206.9 L1442.84 1206.9 L1443.43 1206.9 L1444.01 1206.9 L1444.6 1206.9 L1445.19 1206.9 L1445.77 1206.9 L1446.36 1206.9 L1446.95 1206.9 L1447.53 1206.9 L1448.12 1206.9 L1448.7 1206.9 L1449.29 1206.9 L1449.88 1206.9 L1450.46 1206.9 L1451.05 1206.9 L1451.64 1206.9 L1452.22 1206.9 L1452.81 1206.9 L1453.4 1206.9 L1453.98 1206.9 L1454.57 1206.9 L1455.16 1206.9 L1455.74 1206.9 L1456.33 1206.9 L1456.91 1206.9 L1457.5 1206.9 L1458.09 1206.9 L1458.67 1206.9 L1459.26 1206.9 L1459.85 1206.9 L1460.43 1206.9 L1461.02 1206.9 L1461.61 1206.9 L1462.19 1206.9 L1462.78 1206.9 L1463.37 1206.9 L1463.95 1206.9 L1464.54 1206.9 L1465.12 1206.9 L1465.71 1206.9 L1466.3 1206.9 L1466.88 1206.9 L1467.47 1206.9 L1468.06 1206.9 L1468.64 1206.9 L1469.23 1206.9 L1469.82 1206.9 L1470.4 1206.9 L1470.99 1206.9 L1471.57 1206.9 L1472.16 1206.9 L1472.75 1206.9 L1473.33 1206.9 L1473.92 1206.9 L1474.51 1206.9 L1475.09 1206.9 L1475.68 1206.9 L1476.27 1206.9 L1476.85 1206.9 L1477.44 1206.9 L1478.03 1206.9 L1478.61 1206.9 L1479.2 1206.9 L1479.78 1206.9 L1480.37 1206.9 L1480.96 1206.9 L1481.54 1206.9 L1482.13 1206.9 L1482.72 1206.9 L1483.3 1206.9 L1483.89 1206.9 L1484.48 1206.9 L1485.06 1206.9 L1485.65 1206.9 L1486.24 1206.9 L1486.82 1206.9 L1487.41 1206.9 L1487.99 1206.9 L1488.58 1206.9 L1489.17 1206.9 L1489.75 1206.9 L1490.34 1206.9 L1490.93 1206.9 L1491.51 1206.9 L1492.1 1206.9 L1492.69 1206.9 L1493.27 1206.9 L1493.86 1206.9 L1494.45 1206.9 L1495.03 1206.9 L1495.62 1206.9 L1496.2 1206.9 L1496.79 1206.9 L1497.38 1206.9 L1497.96 1206.9 L1498.55 1206.9 L1499.14 1206.9 L1499.72 1206.9 L1500.31 1206.9 L1500.9 1206.9 L1501.48 1206.9 L1502.07 1206.9 L1502.65 1206.9 L1503.24 1206.9 L1503.83 1206.9 L1504.41 1206.9 L1505 1206.9 L1505.59 1206.9 L1506.17 1206.9 L1506.76 1206.9 L1507.35 1206.9 L1507.93 1206.9 L1508.52 1206.9 L1509.11 1206.9 L1509.69 1206.9 L1510.28 1206.9 L1510.86 1206.9 L1511.45 1206.9 L1512.04 1206.9 L1512.62 1206.9 L1513.21 1206.9 L1513.8 1206.9 L1514.38 1206.9 L1514.97 1206.9 L1515.56 1206.9 L1516.14 1206.9 L1516.73 1206.9 L1517.32 1206.9 L1517.9 1206.9 L1518.49 1206.9 L1519.07 1206.9 L1519.66 1206.9 L1520.25 1206.9 L1520.83 1206.9 L1521.42 1206.9 L1522.01 1206.9 L1522.59 1206.9 L1523.18 1206.9 L1523.77 1206.9 L1524.35 1206.9 L1524.94 1206.9 L1525.52 1206.9 L1526.11 1206.9 L1526.7 1206.9 L1527.28 1206.9 L1527.87 1206.9 L1528.46 1206.9 L1529.04 1206.9 L1529.63 1206.9 L1530.22 1206.9 L1530.8 1206.9 L1531.39 1206.9 L1531.98 1206.9 L1532.56 1206.9 L1533.15 1206.9 L1533.73 1206.9 L1534.32 1206.9 L1534.91 1206.9 L1535.49 1206.9 L1536.08 1206.9 L1536.67 1206.9 L1537.25 1206.9 L1537.84 1206.9 L1538.43 1206.9 L1539.01 1206.9 L1539.6 1206.9 L1540.19 1206.9 L1540.77 1206.9 L1541.36 1206.9 L1541.94 1206.9 L1542.53 1206.9 L1543.12 1206.9 L1543.7 1206.9 L1544.29 1206.9 L1544.88 1206.9 L1545.46 1206.9 L1546.05 1206.9 L1546.64 1206.9 L1547.22 1206.9 L1547.81 1206.9 L1548.4 1206.9 L1548.98 1206.9 L1549.57 1206.9 L1550.15 1206.9 L1550.74 1206.9 L1551.33 1206.9 L1551.91 1206.9 L1552.5 1206.9 L1553.09 1206.9 L1553.67 1206.9 L1554.26 1206.9 L1554.85 1206.9 L1555.43 1206.9 L1556.02 1206.9 L1556.6 1206.9 L1557.19 1206.9 L1557.78 1206.9 L1558.36 1206.9 L1558.95 1206.9 L1559.54 1206.9 L1560.12 1206.9 L1560.71 1206.9 L1561.3 1206.9 L1561.88 1206.9 L1562.47 1206.9 L1563.06 1206.9 L1563.64 1206.9 L1564.23 1206.9 L1564.81 1206.9 L1565.4 1206.9 L1565.99 1206.9 L1566.57 1206.9 L1567.16 1206.9 L1567.75 1206.9 L1568.33 1206.9 L1568.92 1206.9 L1569.51 1206.9 L1570.09 1206.9 L1570.68 1206.9 L1571.27 1206.9 L1571.85 1206.9 L1572.44 1206.9 L1573.02 1206.9 L1573.61 1206.9 L1574.2 1206.9 L1574.78 1206.9 L1575.37 1206.9 L1575.96 1206.9 L1576.54 1206.9 L1577.13 1206.9 L1577.72 1206.9 L1578.3 1206.9 L1578.89 1206.9 L1579.47 1206.9 L1580.06 1206.9 L1580.65 1206.9 L1581.23 1206.9 L1581.82 1206.9 L1582.41 1206.9 L1582.99 1206.9 L1583.58 1206.9 L1584.17 1206.9 L1584.75 1206.9 L1585.34 1206.9 L1585.93 1206.9 L1586.51 1206.9 L1587.1 1206.9 L1587.68 1206.9 L1588.27 1206.9 L1588.86 1206.9 L1589.44 1206.9 L1590.03 1206.9 L1590.62 1206.9 L1591.2 1206.9 L1591.79 1206.9 L1592.38 1206.9 L1592.96 1206.9 L1593.55 1206.9 L1594.14 1206.9 L1594.72 1206.9 L1595.31 1206.9 L1595.89 1206.9 L1596.48 1206.9 L1597.07 1206.9 L1597.65 1206.9 L1598.24 1206.9 L1598.83 1206.9 L1599.41 1206.9 L1600 1206.9 L1600.59 1206.9 L1601.17 1206.9 L1601.76 1206.9 L1602.34 1206.9 L1602.93 1206.9 L1603.52 1206.9 L1604.1 1206.9 L1604.69 1206.9 L1605.28 1206.9 L1605.86 1206.9 L1606.45 1206.9 L1607.04 1206.9 L1607.62 1206.9 L1608.21 1206.9 L1608.8 1206.9 L1609.38 1206.9 L1609.97 1206.9 L1610.55 1206.9 L1611.14 1206.9 L1611.73 1206.9 L1612.31 1206.9 L1612.9 1206.9 L1613.49 1206.9 L1614.07 1206.9 L1614.66 1206.9 L1615.25 1206.9 L1615.83 1206.9 L1616.42 1206.9 L1617.01 1206.9 L1617.59 1206.9 L1618.18 1206.9 L1618.76 1206.9 L1619.35 1206.9 L1619.94 1206.9 L1620.52 1206.9 L1621.11 1206.9 L1621.7 1206.9 L1622.28 1206.9 L1622.87 1206.9 L1623.46 1206.9 L1624.04 1206.9 L1624.63 1206.9 L1625.22 1206.9 L1625.8 1206.9 L1626.39 1206.9 L1626.97 1206.9 L1627.56 1206.9 L1628.15 1206.9 L1628.73 1206.9 L1629.32 1206.9 L1629.91 1206.9 L1630.49 1206.9 L1631.08 1206.9 L1631.67 1206.9 L1632.25 1206.9 L1632.84 1206.9 L1633.42 1206.9 L1634.01 1206.9 L1634.6 1206.9 L1635.18 1206.9 L1635.77 1206.9 L1636.36 1206.9 L1636.94 1206.9 L1637.53 1206.9 L1638.12 1206.9 L1638.7 1206.9 L1639.29 1206.9 L1639.88 1206.9 L1640.46 1206.9 L1641.05 1206.9 L1641.63 1206.9 L1642.22 1206.9 L1642.81 1206.9 L1643.39 1206.9 L1643.98 1206.9 L1644.57 1206.9 L1645.15 1206.9 L1645.74 1206.9 L1646.33 1206.9 L1646.91 1206.9 L1647.5 1206.9 L1648.09 1206.9 L1648.67 1206.9 L1649.26 1206.9 L1649.84 1206.9 L1650.43 1206.9 L1651.02 1206.9 L1651.6 1206.9 L1652.19 1206.9 L1652.78 1206.9 L1653.36 1206.9 L1653.95 1206.9 L1654.54 1206.9 L1655.12 1206.9 L1655.71 1206.9 L1656.29 1206.9 L1656.88 1206.9 L1657.47 1206.9 L1658.05 1206.9 L1658.64 1206.9 L1659.23 1206.9 L1659.81 1206.9 L1660.4 1206.9 L1660.99 1206.9 L1661.57 1206.9 L1662.16 1206.9 L1662.75 1206.9 L1663.33 1206.9 L1663.92 1206.9 L1664.5 1206.9 L1665.09 1206.9 L1665.68 1206.9 L1666.26 1206.9 L1666.85 1206.9 L1667.44 1206.9 L1668.02 1206.9 L1668.61 1206.9 L1669.2 1206.9 L1669.78 1206.9 L1670.37 1206.9 L1670.96 1206.9 L1671.54 1206.9 L1672.13 1206.9 L1672.71 1206.9 L1673.3 1206.9 L1673.89 1206.9 L1674.47 1206.9 L1675.06 1206.9 L1675.65 1206.9 L1676.23 1206.9 L1676.82 1206.9 L1677.41 1206.9 L1677.99 1206.9 L1678.58 1206.9 L1679.17 1206.9 L1679.75 1206.9 L1680.34 1206.9 L1680.92 1206.9 L1681.51 1206.9 L1682.1 1206.9 L1682.68 1206.9 L1683.27 1206.9 L1683.86 1206.9 L1684.44 1206.9 L1685.03 1206.9 L1685.62 1206.9 L1686.2 1206.9 L1686.79 1206.9 L1687.37 1206.9 L1687.96 1206.9 L1688.55 1206.9 L1689.13 1206.9 L1689.72 1206.9 L1690.31 1206.9 L1690.89 1206.9 L1691.48 1206.9 L1692.07 1206.9 L1692.65 1206.9 L1693.24 1206.9 L1693.83 1206.9 L1694.41 1206.9 L1695 1206.9 L1695.58 1206.9 L1696.17 1206.9 L1696.76 1206.9 L1697.34 1206.9 L1697.93 1206.9 L1698.52 1206.9 L1699.1 1206.9 L1699.69 1206.9 L1700.28 1206.9 L1700.86 1206.9 L1701.45 1206.9 L1702.04 1206.9 L1702.62 1206.9 L1703.21 1206.9 L1703.79 1206.9 L1704.38 1206.9 L1704.97 1206.9 L1705.55 1206.9 L1706.14 1206.9 L1706.73 1206.9 L1707.31 1206.9 L1707.9 1206.9 L1708.49 1206.9 L1709.07 1206.9 L1709.66 1206.9 L1710.24 1206.9 L1710.83 1206.9 L1711.42 1206.9 L1712 1206.9 L1712.59 1206.9 L1713.18 1206.9 L1713.76 1206.9 L1714.35 1206.9 L1714.94 1206.9 L1715.52 1206.9 L1716.11 1206.9 L1716.7 1206.9 L1717.28 1206.9 L1717.87 1206.9 L1718.45 1206.9 L1719.04 1206.9 L1719.63 1206.9 L1720.21 1206.9 L1720.8 1206.9 L1721.39 1206.9 L1721.97 1206.9 L1722.56 1206.9 L1723.15 1206.9 L1723.73 1206.9 L1724.32 1206.9 L1724.91 1206.9 L1725.49 1206.9 L1726.08 1206.9 L1726.66 1206.9 L1727.25 1206.9 L1727.84 1206.9 L1728.42 1206.9 L1729.01 1206.9 L1729.6 1206.9 L1730.18 1206.9 L1730.77 1206.9 L1731.36 1206.9 L1731.94 1206.9 L1732.53 1206.9 L1733.11 1206.9 L1733.7 1206.9 L1734.29 1206.9 L1734.87 1206.9 L1735.46 1206.9 L1736.05 1206.9 L1736.63 1206.9 L1737.22 1206.9 L1737.81 1206.9 L1738.39 1206.9 L1738.98 1206.9 L1739.57 1206.9 L1740.15 1206.9 L1740.74 1206.9 L1741.32 1206.9 L1741.91 1206.9 L1742.5 1206.9 L1743.08 1206.9 L1743.67 1206.9 L1744.26 1206.9 L1744.84 1206.9 L1745.43 1206.9 L1746.02 1206.9 L1746.6 1206.9 L1747.19 1206.9 L1747.78 1206.9 L1748.36 1206.9 L1748.95 1206.9 L1749.53 1206.9 L1750.12 1206.9 L1750.71 1206.9 L1751.29 1206.9 L1751.88 1206.9 L1752.47 1206.9 L1753.05 1206.9 L1753.64 1206.9 L1754.23 1206.9 L1754.81 1206.9 L1755.4 1206.9 L1755.99 1206.9 L1756.57 1206.9 L1757.16 1206.9 L1757.74 1206.9 L1758.33 1206.9 L1758.92 1206.9 L1759.5 1206.9 L1760.09 1206.9 L1760.68 1206.9 L1761.26 1206.9 L1761.85 1206.9 L1762.44 1206.9 L1763.02 1206.9 L1763.61 1206.9 L1764.19 1206.9 L1764.78 1206.9 L1765.37 1206.9 L1765.95 1206.9 L1766.54 1206.9 L1767.13 1206.9 L1767.71 1206.9 L1768.3 1206.9 L1768.89 1206.9 L1769.47 1206.9 L1770.06 1206.9 L1770.65 1206.9 L1771.23 1206.9 L1771.82 1206.9 L1772.4 1206.9 L1772.99 1206.9 L1773.58 1206.9 L1774.16 1206.9 L1774.75 1206.9 L1775.34 1206.9 L1775.92 1206.9 L1776.51 1206.9 L1777.1 1206.9 L1777.68 1206.9 L1778.27 1206.9 L1778.86 1206.9 L1779.44 1206.9 L1780.03 1206.9 L1780.61 1206.9 L1781.2 1206.9 L1781.79 1206.9 L1782.37 1206.9 L1782.96 1206.9 L1783.55 1206.9 L1784.13 1206.9 L1784.72 1206.9 L1785.31 1206.9 L1785.89 1206.9 L1786.48 1206.9 L1787.06 1206.9 L1787.65 1206.9 L1788.24 1206.9 L1788.82 1206.9 L1789.41 1206.9 L1790 1206.9 L1790.58 1206.9 L1791.17 1206.9 L1791.76 1206.9 L1792.34 1206.9 L1792.93 1206.9 L1793.52 1206.9 L1794.1 1206.9 L1794.69 1206.9 L1795.27 1206.9 L1795.86 1206.9 L1796.45 1206.9 L1797.03 1206.9 L1797.62 1206.9 L1798.21 1206.9 L1798.79 1206.9 L1799.38 1206.9 L1799.97 1206.9 L1800.55 1206.9 L1801.14 1206.9 L1801.73 1206.9 L1802.31 1206.9 L1802.9 1206.9 L1803.48 1206.9 L1804.07 1206.9 L1804.66 1206.9 L1805.24 1206.9 L1805.83 1206.9 L1806.42 1206.9 L1807 1206.9 L1807.59 1206.9 L1808.18 1206.9 L1808.76 1206.9 L1809.35 1206.9 L1809.94 1206.9 L1810.52 1206.9 L1811.11 1206.9 L1811.69 1206.9 L1812.28 1206.9 L1812.87 1206.9 L1813.45 1206.9 L1814.04 1206.9 L1814.63 1206.9 L1815.21 1206.9 L1815.8 1206.9 L1816.39 1206.9 L1816.97 1206.9 L1817.56 1206.9 L1818.14 1206.9 L1818.73 1206.9 L1819.32 1206.9 L1819.9 1206.9 L1820.49 1206.9 L1821.08 1206.9 L1821.66 1206.9 L1822.25 1206.9 L1822.84 1206.9 L1823.42 1206.9 L1824.01 1206.9 L1824.6 1206.9 L1825.18 1206.9 L1825.77 1206.9 L1826.35 1206.9 L1826.94 1206.9 L1827.53 1206.9 L1828.11 1206.9 L1828.7 1206.9 L1829.29 1206.9 L1829.87 1206.9 L1830.46 1206.9 L1831.05 1206.9 L1831.63 1206.9 L1832.22 1206.9 L1832.81 1206.9 L1833.39 1206.9 L1833.98 1206.9 L1834.56 1206.9 L1835.15 1206.9 L1835.74 1206.9 L1836.32 1206.9 L1836.91 1206.9 L1837.5 1206.9 L1838.08 1206.9 L1838.67 1206.9 L1839.26 1206.9 L1839.84 1206.9 L1840.43 1206.9 L1841.01 1206.9 L1841.6 1206.9 L1842.19 1206.9 L1842.77 1206.9 L1843.36 1206.9 L1843.95 1206.9 L1844.53 1206.9 L1845.12 1206.9 L1845.71 1206.9 L1846.29 1206.9 L1846.88 1206.9 L1847.47 1206.9 L1848.05 1206.9 L1848.64 1206.9 L1849.22 1206.9 L1849.81 1206.9 L1850.4 1206.9 L1850.98 1206.9 L1851.57 1206.9 L1852.16 1206.9 L1852.74 1206.9 L1853.33 1206.9 L1853.92 1206.9 L1854.5 1206.9 L1855.09 1206.9 L1855.68 1206.9 L1856.26 1206.9 L1856.85 1206.9 L1857.43 1206.9 L1858.02 1206.9 L1858.61 1206.9 L1859.19 1206.9 L1859.78 1206.9 L1860.37 1206.9 L1860.95 1206.9 L1861.54 1206.9 L1862.13 1206.9 L1862.71 1206.9 L1863.3 1206.9 L1863.88 1206.9 L1864.47 1206.9 L1865.06 1206.9 L1865.64 1206.9 L1866.23 1206.9 L1866.82 1206.9 L1867.4 1206.9 L1867.99 1206.9 L1868.58 1206.9 L1869.16 1206.9 L1869.75 1206.9 L1870.34 1206.9 L1870.92 1206.9 L1871.51 1206.9 L1872.09 1206.9 L1872.68 1206.9 L1873.27 1206.9 L1873.85 1206.9 L1874.44 1206.9 L1875.03 1206.9 L1875.61 1206.9 L1876.2 1206.9 L1876.79 1206.9 L1877.37 1206.9 L1877.96 1206.9 L1878.55 1206.9 L1879.13 1206.9 L1879.72 1206.9 L1880.3 1206.9 L1880.89 1206.9 L1881.48 1206.9 L1882.06 1206.9 L1882.65 1206.9 L1883.24 1206.9 L1883.82 1206.9 L1884.41 1206.9 L1885 1206.9 L1885.58 1206.9 L1886.17 1206.9 L1886.76 1206.9 L1887.34 1206.9 L1887.93 1206.9 L1888.51 1206.9 L1889.1 1206.9 L1889.69 1206.9 L1890.27 1206.9 L1890.86 1206.9 L1891.45 1206.9 L1892.03 1206.9 L1892.62 1206.9 L1893.21 1206.9 L1893.79 1206.9 L1894.38 1206.9 L1894.96 1206.9 L1895.55 1206.9 L1896.14 1206.9 L1896.72 1206.9 L1897.31 1206.9 L1897.9 1206.9 L1898.48 1206.9 L1899.07 1206.9 L1899.66 1206.9 L1900.24 1206.9 L1900.83 1206.9 L1901.42 1206.9 L1902 1206.9 L1902.59 1206.9 L1903.17 1206.9 L1903.76 1206.9 L1904.35 1206.9 L1904.93 1206.9 L1905.52 1206.9 L1906.11 1206.9 L1906.69 1206.9 L1907.28 1206.9 L1907.87 1206.9 L1908.45 1206.9 L1909.04 1206.9 L1909.63 1206.9 L1910.21 1206.9 L1910.8 1206.9 L1911.38 1206.9 L1911.97 1206.9 L1912.56 1206.9 L1913.14 1206.9 L1913.73 1206.9 L1914.32 1206.9 L1914.9 1206.9 L1915.49 1206.9 L1916.08 1206.9 L1916.66 1206.9 L1917.25 1206.9 L1917.83 1206.9 L1918.42 1206.9 L1919.01 1206.9 L1919.59 1206.9 L1920.18 1206.9 L1920.77 1206.9 L1921.35 1206.9 L1921.94 1206.9 L1922.53 1206.9 L1923.11 1206.9 L1923.7 1206.9 L1924.29 1206.9 L1924.87 1206.9 L1925.46 1206.9 L1926.04 1206.9 L1926.63 1206.9 L1927.22 1206.9 L1927.8 1206.9 L1928.39 1206.9 L1928.98 1206.9 L1929.56 1206.9 L1930.15 1206.9 L1930.74 1206.9 L1931.32 1206.9 L1931.91 1206.9 L1932.5 1206.9 L1933.08 1206.9 L1933.67 1206.9 L1934.25 1206.9 L1934.84 1206.9 L1935.43 1206.9 L1936.01 1206.9 L1936.6 1206.9 L1937.19 1206.9 L1937.77 1206.9 L1938.36 1206.9 L1938.95 1206.9 L1939.53 1206.9 L1940.12 1206.9 L1940.71 1206.9 L1941.29 1206.9 L1941.88 1206.9 L1942.46 1206.9 L1943.05 1206.9 L1943.64 1206.9 L1944.22 1206.9 L1944.81 1206.9 L1945.4 1206.9 L1945.98 1206.9 L1946.57 1206.9 L1947.16 1206.9 L1947.74 1206.9 L1948.33 1206.9 L1948.91 1206.9 L1949.5 1206.9 L1950.09 1206.9 L1950.67 1206.9 L1951.26 1206.9 L1951.85 1206.9 L1952.43 1206.9 L1953.02 1206.9 L1953.61 1206.9 L1954.19 1206.9 L1954.78 1206.9 L1955.37 1206.9 L1955.95 1206.9 L1956.54 1206.9 L1957.12 1206.9 L1957.71 1206.9 L1958.3 1206.9 L1958.88 1206.9 L1959.47 1206.9 L1960.06 1206.9 L1960.64 1206.9 L1961.23 1206.9 L1961.82 1206.9 L1962.4 1206.9 L1962.99 1206.9 L1963.58 1206.9 L1964.16 1206.9 L1964.75 1206.9 L1965.33 1206.9 L1965.92 1206.9 L1966.51 1206.9 L1967.09 1206.9 L1967.68 1206.9 L1968.27 1206.9 L1968.85 1206.9 L1969.44 1206.9 L1970.03 1206.9 L1970.61 1206.9 L1971.2 1206.9 L1971.78 1206.9 L1972.37 1206.9 L1972.96 1206.9 L1973.54 1206.9 L1974.13 1206.9 L1974.72 1206.9 L1975.3 1206.9 L1975.89 1206.9 L1976.48 1206.9 L1977.06 1206.9 L1977.65 1206.9 L1978.24 1206.9 L1978.82 1206.9 L1979.41 1206.9 L1979.99 1206.9 L1980.58 1206.9 L1981.17 1206.9 L1981.75 1206.9 L1982.34 1206.9 L1982.93 1206.9 L1983.51 1206.9 L1984.1 1206.9 L1984.69 1206.9 L1985.27 1206.9 L1985.86 1206.9 L1986.45 1206.9 L1987.03 1206.9 L1987.62 1206.9 L1988.2 1206.9 L1988.79 1206.9 L1989.38 1206.9 L1989.96 1206.9 L1990.55 1206.9 L1991.14 1206.9 L1991.72 1206.9 L1992.31 1206.9 L1992.9 1206.9 L1993.48 1206.9 L1994.07 1206.9 L1994.65 1206.9 L1995.24 1206.9 L1995.83 1206.9 L1996.41 1206.9 L1997 1206.9 L1997.59 1206.9 L1998.17 1206.9 L1998.76 1206.9 L1999.35 1206.9 L1999.93 1206.9 L2000.52 1206.9 L2001.11 1206.9 L2001.69 1206.9 L2002.28 1206.9 L2002.86 1206.9 L2003.45 1206.9 L2004.04 1206.9 L2004.62 1206.9 L2005.21 1206.9 L2005.8 1206.9 L2006.38 1206.9 L2006.97 1206.9 L2007.56 1206.9 L2008.14 1206.9 L2008.73 1206.9 L2009.32 1206.9 L2009.9 1206.9 L2010.49 1206.9 L2011.07 1206.9 L2011.66 1206.9 L2012.25 1206.9 L2012.83 1206.9 L2013.42 1206.9 L2014.01 1206.9 L2014.59 1206.9 L2015.18 1206.9 L2015.77 1206.9 L2016.35 1206.9 L2016.94 1206.9 L2017.53 1206.9 L2018.11 1206.9 L2018.7 1206.9 L2019.28 1206.9 L2019.87 1206.9 L2020.46 1206.9 L2021.04 1206.9 L2021.63 1206.9 L2022.22 1206.9 L2022.8 1206.9 L2023.39 1206.9 L2023.98 1206.9 L2024.56 1206.9 L2025.15 1206.9 L2025.73 1206.9 L2026.32 1206.9 L2026.91 1206.9 L2027.49 1206.9 L2028.08 1206.9 L2028.67 1206.9 L2029.25 1206.9 L2029.84 1206.9 L2030.43 1206.9 L2031.01 1206.9 L2031.6 1206.9 L2032.19 1206.9 L2032.77 1206.9 L2033.36 1206.9 L2033.94 1206.9 L2034.53 1206.9 L2035.12 1206.9 L2035.7 1206.9 L2036.29 1206.9 L2036.88 1206.9 L2037.46 1206.9 L2038.05 1206.9 L2038.64 1206.9 L2039.22 1206.9 L2039.81 1206.9 L2040.4 1206.9 L2040.98 1206.9 L2041.57 1206.9 L2042.15 1206.9 L2042.74 1206.9 L2043.33 1206.9 L2043.91 1206.9 L2044.5 1206.9 L2045.09 1206.9 L2045.67 1206.9 L2046.26 1206.9 L2046.85 1206.9 L2047.43 1206.9 L2048.02 1206.9 L2048.6 1206.9 L2049.19 1206.9 L2049.78 1206.9 L2050.36 1206.9 L2050.95 1206.9 L2051.54 1206.9 L2052.12 1206.9 L2052.71 1206.9 L2053.3 1206.9 L2053.88 1206.9 L2054.47 1206.9 L2055.06 1206.9 L2055.64 1206.9 L2056.23 1206.9 L2056.81 1206.9 L2057.4 1206.9 L2057.99 1206.9 L2058.57 1206.9 L2059.16 1206.9 L2059.75 1206.9 L2060.33 1206.9 L2060.92 1206.9 L2061.51 1206.9 L2062.09 1206.9 L2062.68 1206.9 L2063.27 1206.9 L2063.85 1206.9 L2064.44 1206.9 L2065.02 1206.9 L2065.61 1206.9 L2066.2 1206.9 L2066.78 1206.9 L2067.37 1206.9 L2067.96 1206.9 L2068.54 1206.9 L2069.13 1206.9 L2069.72 1206.9 L2070.3 1206.9 L2070.89 1206.9 L2071.48 1206.9 L2072.06 1206.9 L2072.65 1206.9 L2073.23 1206.9 L2073.82 1206.9 L2074.41 1206.9 L2074.99 1206.9 L2075.58 1206.9 L2076.17 1206.9 L2076.75 1206.9 L2077.34 1206.9 L2077.93 1206.9 L2078.51 1206.9 L2079.1 1206.9 L2079.68 1206.9 L2080.27 1206.9 L2080.86 1206.9 L2081.44 1206.9 L2082.03 1206.9 L2082.62 1206.9 L2083.2 1206.9 L2083.79 1206.9 L2084.38 1206.9 L2084.96 1206.9 L2085.55 1206.9 L2086.14 1206.9 L2086.72 1206.9 L2087.31 1206.9 L2087.89 1206.9 L2088.48 1206.9 L2089.07 1206.9 L2089.65 1206.9 L2090.24 1206.9 L2090.83 1206.9 L2091.41 1206.9 L2092 1206.9 L2092.59 1206.9 L2093.17 1206.9 L2093.76 1206.9 L2094.35 1206.9 L2094.93 1206.9 L2095.52 1206.9 L2096.1 1206.9 L2096.69 1206.9 L2097.28 1206.9 L2097.86 1206.9 L2098.45 1206.9 L2099.04 1206.9 L2099.62 1206.9 L2100.21 1206.9 L2100.8 1206.9 L2101.38 1206.9 L2101.97 1206.9 L2102.55 1206.9 L2103.14 1206.9 L2103.73 1206.9 L2104.31 1206.9 L2104.9 1206.9 L2105.49 1206.9 L2106.07 1206.9 L2106.66 1206.9 L2107.25 1206.9 L2107.83 1206.9 L2108.42 1206.9 L2109.01 1206.9 L2109.59 1206.9 L2110.18 1206.9 L2110.76 1206.9 L2111.35 1206.9 L2111.94 1206.9 L2112.52 1206.9 L2113.11 1206.9 L2113.7 1206.9 L2114.28 1206.9 L2114.87 1206.9 L2115.46 1206.9 L2116.04 1206.9 L2116.63 1206.9 L2117.22 1206.9 L2117.8 1206.9 L2118.39 1206.9 L2118.97 1206.9 L2119.56 1206.9 L2120.15 1206.9 L2120.73 1206.9 L2121.32 1206.9 L2121.91 1206.9 L2122.49 1206.9 L2123.08 1206.9 L2123.67 1206.9 L2124.25 1206.9 L2124.84 1206.9 L2125.42 1206.9 L2126.01 1206.9 L2126.6 1206.9 L2127.18 1206.9 L2127.77 1206.9 L2128.36 1206.9 L2128.94 1206.9 L2129.53 1206.9 L2130.12 1206.9 L2130.7 1206.9 L2131.29 1206.9 L2131.88 1206.9 L2132.46 1206.9 L2133.05 1206.9 L2133.63 1206.9 L2134.22 1206.9 L2134.81 1206.9 L2135.39 1206.9 L2135.98 1206.9 L2136.57 1206.9 L2137.15 1206.9 L2137.74 1206.9 L2138.33 1206.9 L2138.91 1206.9 L2139.5 1206.9 L2140.09 1206.9 L2140.67 1206.9 L2141.26 1206.9 L2141.84 1206.9 L2142.43 1206.9 L2143.02 1206.9 L2143.6 1206.9 L2144.19 1206.9 L2144.78 1206.9 L2145.36 1206.9 L2145.95 1206.9 L2146.54 1206.9 L2147.12 1206.9 L2147.71 1206.9 L2148.3 1206.9 L2148.88 1206.9 L2149.47 1206.9 L2150.05 1206.9 L2150.64 1206.9 L2151.23 1206.9 L2151.81 1206.9 L2152.4 1206.9 L2152.99 1206.9 L2153.57 1206.9 L2154.16 1206.9 L2154.75 1206.9 L2155.33 1206.9 L2155.92 1206.9 L2156.5 1206.9 L2157.09 1206.9 L2157.68 1206.9 L2158.26 1206.9 L2158.26 1206.68 L2157.68 1206.68 L2157.09 1206.68 L2156.5 1206.68 L2155.92 1206.68 L2155.33 1206.68 L2154.75 1206.68 L2154.16 1206.68 L2153.57 1206.68 L2152.99 1206.68 L2152.4 1206.68 L2151.81 1206.68 L2151.23 1206.68 L2150.64 1206.68 L2150.05 1206.68 L2149.47 1206.68 L2148.88 1206.68 L2148.3 1206.68 L2147.71 1206.68 L2147.12 1206.68 L2146.54 1206.68 L2145.95 1206.68 L2145.36 1206.68 L2144.78 1206.68 L2144.19 1206.68 L2143.6 1206.68 L2143.02 1206.68 L2142.43 1206.68 L2141.84 1206.68 L2141.26 1206.68 L2140.67 1206.68 L2140.09 1206.68 L2139.5 1206.68 L2138.91 1206.68 L2138.33 1206.68 L2137.74 1206.68 L2137.15 1206.68 L2136.57 1206.68 L2135.98 1206.68 L2135.39 1206.68 L2134.81 1206.68 L2134.22 1206.68 L2133.63 1206.68 L2133.05 1206.68 L2132.46 1206.68 L2131.88 1206.68 L2131.29 1206.68 L2130.7 1206.68 L2130.12 1206.68 L2129.53 1206.68 L2128.94 1206.68 L2128.36 1206.68 L2127.77 1206.68 L2127.18 1206.68 L2126.6 1206.68 L2126.01 1206.68 L2125.42 1206.68 L2124.84 1206.68 L2124.25 1206.68 L2123.67 1206.68 L2123.08 1206.68 L2122.49 1206.68 L2121.91 1206.68 L2121.32 1206.68 L2120.73 1206.68 L2120.15 1206.68 L2119.56 1206.68 L2118.97 1206.68 L2118.39 1206.68 L2117.8 1206.68 L2117.22 1206.68 L2116.63 1206.68 L2116.04 1206.68 L2115.46 1206.68 L2114.87 1206.68 L2114.28 1206.68 L2113.7 1206.68 L2113.11 1206.68 L2112.52 1206.68 L2111.94 1206.68 L2111.35 1206.68 L2110.76 1206.68 L2110.18 1206.68 L2109.59 1206.68 L2109.01 1206.68 L2108.42 1206.68 L2107.83 1206.68 L2107.25 1206.68 L2106.66 1206.68 L2106.07 1206.68 L2105.49 1206.68 L2104.9 1206.68 L2104.31 1206.68 L2103.73 1206.68 L2103.14 1206.68 L2102.55 1206.68 L2101.97 1206.68 L2101.38 1206.68 L2100.8 1206.68 L2100.21 1206.68 L2099.62 1206.68 L2099.04 1206.68 L2098.45 1206.68 L2097.86 1206.68 L2097.28 1206.68 L2096.69 1206.68 L2096.1 1206.68 L2095.52 1206.68 L2094.93 1206.68 L2094.35 1206.68 L2093.76 1206.68 L2093.17 1206.68 L2092.59 1206.68 L2092 1206.68 L2091.41 1206.68 L2090.83 1206.68 L2090.24 1206.68 L2089.65 1206.68 L2089.07 1206.68 L2088.48 1206.68 L2087.89 1206.68 L2087.31 1206.68 L2086.72 1206.68 L2086.14 1206.68 L2085.55 1206.68 L2084.96 1206.68 L2084.38 1206.68 L2083.79 1206.68 L2083.2 1206.68 L2082.62 1206.68 L2082.03 1206.68 L2081.44 1206.68 L2080.86 1206.68 L2080.27 1206.68 L2079.68 1206.68 L2079.1 1206.68 L2078.51 1206.68 L2077.93 1206.68 L2077.34 1206.68 L2076.75 1206.68 L2076.17 1206.68 L2075.58 1206.68 L2074.99 1206.68 L2074.41 1206.68 L2073.82 1206.68 L2073.23 1206.68 L2072.65 1206.68 L2072.06 1206.68 L2071.48 1206.68 L2070.89 1206.68 L2070.3 1206.68 L2069.72 1206.68 L2069.13 1206.68 L2068.54 1206.68 L2067.96 1206.68 L2067.37 1206.68 L2066.78 1206.68 L2066.2 1206.68 L2065.61 1206.68 L2065.02 1206.68 L2064.44 1206.68 L2063.85 1206.68 L2063.27 1206.68 L2062.68 1206.68 L2062.09 1206.68 L2061.51 1206.68 L2060.92 1206.68 L2060.33 1206.68 L2059.75 1206.68 L2059.16 1206.68 L2058.57 1206.68 L2057.99 1206.68 L2057.4 1206.68 L2056.81 1206.68 L2056.23 1206.68 L2055.64 1206.68 L2055.06 1206.68 L2054.47 1206.68 L2053.88 1206.68 L2053.3 1206.68 L2052.71 1206.68 L2052.12 1206.68 L2051.54 1206.68 L2050.95 1206.68 L2050.36 1206.68 L2049.78 1206.68 L2049.19 1206.68 L2048.6 1206.68 L2048.02 1206.68 L2047.43 1206.68 L2046.85 1206.68 L2046.26 1206.68 L2045.67 1206.68 L2045.09 1206.68 L2044.5 1206.68 L2043.91 1206.68 L2043.33 1206.68 L2042.74 1206.68 L2042.15 1206.68 L2041.57 1206.68 L2040.98 1206.68 L2040.4 1206.68 L2039.81 1206.68 L2039.22 1206.68 L2038.64 1206.68 L2038.05 1206.68 L2037.46 1206.68 L2036.88 1206.68 L2036.29 1206.68 L2035.7 1206.68 L2035.12 1206.68 L2034.53 1206.68 L2033.94 1206.68 L2033.36 1206.68 L2032.77 1206.68 L2032.19 1206.68 L2031.6 1206.68 L2031.01 1206.68 L2030.43 1206.68 L2029.84 1206.68 L2029.25 1206.68 L2028.67 1206.68 L2028.08 1206.68 L2027.49 1206.68 L2026.91 1206.68 L2026.32 1206.68 L2025.73 1206.68 L2025.15 1206.68 L2024.56 1206.68 L2023.98 1206.68 L2023.39 1206.68 L2022.8 1206.68 L2022.22 1206.68 L2021.63 1206.68 L2021.04 1206.68 L2020.46 1206.68 L2019.87 1206.68 L2019.28 1206.68 L2018.7 1206.68 L2018.11 1206.68 L2017.53 1206.68 L2016.94 1206.68 L2016.35 1206.68 L2015.77 1206.68 L2015.18 1206.68 L2014.59 1206.68 L2014.01 1206.68 L2013.42 1206.68 L2012.83 1206.68 L2012.25 1206.68 L2011.66 1206.68 L2011.07 1206.68 L2010.49 1206.68 L2009.9 1206.68 L2009.32 1206.68 L2008.73 1206.68 L2008.14 1206.68 L2007.56 1206.68 L2006.97 1206.68 L2006.38 1206.68 L2005.8 1206.68 L2005.21 1206.68 L2004.62 1206.68 L2004.04 1206.68 L2003.45 1206.68 L2002.86 1206.68 L2002.28 1206.68 L2001.69 1206.68 L2001.11 1206.68 L2000.52 1206.68 L1999.93 1206.68 L1999.35 1206.68 L1998.76 1206.68 L1998.17 1206.68 L1997.59 1206.68 L1997 1206.68 L1996.41 1206.68 L1995.83 1206.68 L1995.24 1206.68 L1994.65 1206.68 L1994.07 1206.68 L1993.48 1206.68 L1992.9 1206.68 L1992.31 1206.68 L1991.72 1206.68 L1991.14 1206.68 L1990.55 1206.68 L1989.96 1206.68 L1989.38 1206.68 L1988.79 1206.68 L1988.2 1206.68 L1987.62 1206.68 L1987.03 1206.68 L1986.45 1206.68 L1985.86 1206.68 L1985.27 1206.68 L1984.69 1206.68 L1984.1 1206.68 L1983.51 1206.68 L1982.93 1206.68 L1982.34 1206.68 L1981.75 1206.68 L1981.17 1206.68 L1980.58 1206.68 L1979.99 1206.68 L1979.41 1206.68 L1978.82 1206.68 L1978.24 1206.68 L1977.65 1206.68 L1977.06 1206.68 L1976.48 1206.68 L1975.89 1206.68 L1975.3 1206.68 L1974.72 1206.68 L1974.13 1206.68 L1973.54 1206.68 L1972.96 1206.68 L1972.37 1206.68 L1971.78 1206.68 L1971.2 1206.68 L1970.61 1206.68 L1970.03 1206.68 L1969.44 1206.68 L1968.85 1206.68 L1968.27 1206.68 L1967.68 1206.68 L1967.09 1206.68 L1966.51 1206.68 L1965.92 1206.68 L1965.33 1206.68 L1964.75 1206.68 L1964.16 1206.68 L1963.58 1206.68 L1962.99 1206.68 L1962.4 1206.68 L1961.82 1206.68 L1961.23 1206.68 L1960.64 1206.68 L1960.06 1206.68 L1959.47 1206.68 L1958.88 1206.68 L1958.3 1206.68 L1957.71 1206.68 L1957.12 1206.68 L1956.54 1206.68 L1955.95 1206.68 L1955.37 1206.68 L1954.78 1206.68 L1954.19 1206.68 L1953.61 1206.68 L1953.02 1206.68 L1952.43 1206.68 L1951.85 1206.68 L1951.26 1206.68 L1950.67 1206.68 L1950.09 1206.68 L1949.5 1206.68 L1948.91 1206.68 L1948.33 1206.68 L1947.74 1206.68 L1947.16 1206.68 L1946.57 1206.68 L1945.98 1206.68 L1945.4 1206.68 L1944.81 1206.68 L1944.22 1206.68 L1943.64 1206.68 L1943.05 1206.68 L1942.46 1206.68 L1941.88 1206.68 L1941.29 1206.68 L1940.71 1206.68 L1940.12 1206.68 L1939.53 1206.68 L1938.95 1206.68 L1938.36 1206.68 L1937.77 1206.68 L1937.19 1206.68 L1936.6 1206.68 L1936.01 1206.68 L1935.43 1206.68 L1934.84 1206.68 L1934.25 1206.68 L1933.67 1206.68 L1933.08 1206.68 L1932.5 1206.68 L1931.91 1206.68 L1931.32 1206.68 L1930.74 1206.68 L1930.15 1206.68 L1929.56 1206.68 L1928.98 1206.68 L1928.39 1206.68 L1927.8 1206.68 L1927.22 1206.68 L1926.63 1206.68 L1926.04 1206.68 L1925.46 1206.68 L1924.87 1206.68 L1924.29 1206.68 L1923.7 1206.68 L1923.11 1206.68 L1922.53 1206.68 L1921.94 1206.68 L1921.35 1206.68 L1920.77 1206.68 L1920.18 1206.68 L1919.59 1206.68 L1919.01 1206.68 L1918.42 1206.68 L1917.83 1206.68 L1917.25 1206.68 L1916.66 1206.68 L1916.08 1206.68 L1915.49 1206.68 L1914.9 1206.68 L1914.32 1206.68 L1913.73 1206.68 L1913.14 1206.68 L1912.56 1206.68 L1911.97 1206.68 L1911.38 1206.68 L1910.8 1206.68 L1910.21 1206.68 L1909.63 1206.68 L1909.04 1206.68 L1908.45 1206.68 L1907.87 1206.68 L1907.28 1206.68 L1906.69 1206.68 L1906.11 1206.68 L1905.52 1206.68 L1904.93 1206.68 L1904.35 1206.68 L1903.76 1206.68 L1903.17 1206.68 L1902.59 1206.68 L1902 1206.68 L1901.42 1206.68 L1900.83 1206.68 L1900.24 1206.68 L1899.66 1206.68 L1899.07 1206.68 L1898.48 1206.68 L1897.9 1206.68 L1897.31 1206.68 L1896.72 1206.68 L1896.14 1206.68 L1895.55 1206.68 L1894.96 1206.68 L1894.38 1206.68 L1893.79 1206.68 L1893.21 1206.68 L1892.62 1206.68 L1892.03 1206.68 L1891.45 1206.68 L1890.86 1206.68 L1890.27 1206.68 L1889.69 1206.68 L1889.1 1206.68 L1888.51 1206.68 L1887.93 1206.68 L1887.34 1206.68 L1886.76 1206.68 L1886.17 1206.68 L1885.58 1206.68 L1885 1206.68 L1884.41 1206.68 L1883.82 1206.68 L1883.24 1206.68 L1882.65 1206.68 L1882.06 1206.68 L1881.48 1206.68 L1880.89 1206.68 L1880.3 1206.68 L1879.72 1206.68 L1879.13 1206.68 L1878.55 1206.68 L1877.96 1206.68 L1877.37 1206.68 L1876.79 1206.68 L1876.2 1206.68 L1875.61 1206.68 L1875.03 1206.68 L1874.44 1206.68 L1873.85 1206.68 L1873.27 1206.68 L1872.68 1206.68 L1872.09 1206.68 L1871.51 1206.68 L1870.92 1206.68 L1870.34 1206.68 L1869.75 1206.68 L1869.16 1206.68 L1868.58 1206.68 L1867.99 1206.68 L1867.4 1206.68 L1866.82 1206.68 L1866.23 1206.68 L1865.64 1206.68 L1865.06 1206.68 L1864.47 1206.68 L1863.88 1206.68 L1863.3 1206.68 L1862.71 1206.68 L1862.13 1206.68 L1861.54 1206.68 L1860.95 1206.68 L1860.37 1206.68 L1859.78 1206.68 L1859.19 1206.68 L1858.61 1206.68 L1858.02 1206.68 L1857.43 1206.68 L1856.85 1206.68 L1856.26 1206.68 L1855.68 1206.68 L1855.09 1206.68 L1854.5 1206.68 L1853.92 1206.68 L1853.33 1206.68 L1852.74 1206.68 L1852.16 1206.68 L1851.57 1206.68 L1850.98 1206.68 L1850.4 1206.68 L1849.81 1206.68 L1849.22 1206.68 L1848.64 1206.68 L1848.05 1206.68 L1847.47 1206.68 L1846.88 1206.68 L1846.29 1206.68 L1845.71 1206.68 L1845.12 1206.68 L1844.53 1206.68 L1843.95 1206.68 L1843.36 1206.68 L1842.77 1206.68 L1842.19 1206.68 L1841.6 1206.68 L1841.01 1206.68 L1840.43 1206.68 L1839.84 1206.68 L1839.26 1206.68 L1838.67 1206.68 L1838.08 1206.68 L1837.5 1206.68 L1836.91 1206.68 L1836.32 1206.68 L1835.74 1206.68 L1835.15 1206.68 L1834.56 1206.68 L1833.98 1206.68 L1833.39 1206.68 L1832.81 1206.68 L1832.22 1206.68 L1831.63 1206.68 L1831.05 1206.68 L1830.46 1206.68 L1829.87 1206.68 L1829.29 1206.68 L1828.7 1206.68 L1828.11 1206.68 L1827.53 1206.68 L1826.94 1206.68 L1826.35 1206.68 L1825.77 1206.68 L1825.18 1206.68 L1824.6 1206.68 L1824.01 1206.68 L1823.42 1206.68 L1822.84 1206.68 L1822.25 1206.68 L1821.66 1206.68 L1821.08 1206.68 L1820.49 1206.68 L1819.9 1206.68 L1819.32 1206.68 L1818.73 1206.68 L1818.14 1206.68 L1817.56 1206.68 L1816.97 1206.68 L1816.39 1206.68 L1815.8 1206.68 L1815.21 1206.68 L1814.63 1206.68 L1814.04 1206.68 L1813.45 1206.68 L1812.87 1206.68 L1812.28 1206.68 L1811.69 1206.68 L1811.11 1206.68 L1810.52 1206.68 L1809.94 1206.68 L1809.35 1206.68 L1808.76 1206.68 L1808.18 1206.68 L1807.59 1206.68 L1807 1206.68 L1806.42 1206.68 L1805.83 1206.68 L1805.24 1206.68 L1804.66 1206.68 L1804.07 1206.68 L1803.48 1206.68 L1802.9 1206.68 L1802.31 1206.68 L1801.73 1206.68 L1801.14 1206.68 L1800.55 1206.68 L1799.97 1206.68 L1799.38 1206.68 L1798.79 1206.68 L1798.21 1206.68 L1797.62 1206.68 L1797.03 1206.68 L1796.45 1206.68 L1795.86 1206.68 L1795.27 1206.68 L1794.69 1206.68 L1794.1 1206.68 L1793.52 1206.68 L1792.93 1206.68 L1792.34 1206.68 L1791.76 1206.68 L1791.17 1206.68 L1790.58 1206.68 L1790 1206.68 L1789.41 1206.68 L1788.82 1206.68 L1788.24 1206.68 L1787.65 1206.68 L1787.06 1206.68 L1786.48 1206.68 L1785.89 1206.68 L1785.31 1206.68 L1784.72 1206.68 L1784.13 1206.68 L1783.55 1206.68 L1782.96 1206.68 L1782.37 1206.68 L1781.79 1206.68 L1781.2 1206.68 L1780.61 1206.68 L1780.03 1206.68 L1779.44 1206.68 L1778.86 1206.68 L1778.27 1206.68 L1777.68 1206.68 L1777.1 1206.68 L1776.51 1206.68 L1775.92 1206.68 L1775.34 1206.68 L1774.75 1206.68 L1774.16 1206.68 L1773.58 1206.68 L1772.99 1206.68 L1772.4 1206.68 L1771.82 1206.68 L1771.23 1206.68 L1770.65 1206.68 L1770.06 1206.68 L1769.47 1206.68 L1768.89 1206.68 L1768.3 1206.68 L1767.71 1206.68 L1767.13 1206.68 L1766.54 1206.68 L1765.95 1206.68 L1765.37 1206.68 L1764.78 1206.68 L1764.19 1206.68 L1763.61 1206.68 L1763.02 1206.68 L1762.44 1206.68 L1761.85 1206.68 L1761.26 1206.68 L1760.68 1206.68 L1760.09 1206.68 L1759.5 1206.68 L1758.92 1206.68 L1758.33 1206.68 L1757.74 1206.68 L1757.16 1206.68 L1756.57 1206.68 L1755.99 1206.68 L1755.4 1206.68 L1754.81 1206.68 L1754.23 1206.68 L1753.64 1206.68 L1753.05 1206.68 L1752.47 1206.68 L1751.88 1206.68 L1751.29 1206.68 L1750.71 1206.68 L1750.12 1206.68 L1749.53 1206.68 L1748.95 1206.68 L1748.36 1206.68 L1747.78 1206.68 L1747.19 1206.68 L1746.6 1206.68 L1746.02 1206.68 L1745.43 1206.68 L1744.84 1206.68 L1744.26 1206.68 L1743.67 1206.68 L1743.08 1206.68 L1742.5 1206.68 L1741.91 1206.68 L1741.32 1206.68 L1740.74 1206.68 L1740.15 1206.68 L1739.57 1206.68 L1738.98 1206.68 L1738.39 1206.68 L1737.81 1206.68 L1737.22 1206.68 L1736.63 1206.68 L1736.05 1206.68 L1735.46 1206.68 L1734.87 1206.68 L1734.29 1206.68 L1733.7 1206.68 L1733.11 1206.68 L1732.53 1206.68 L1731.94 1206.68 L1731.36 1206.68 L1730.77 1206.68 L1730.18 1206.68 L1729.6 1206.68 L1729.01 1206.68 L1728.42 1206.68 L1727.84 1206.68 L1727.25 1206.68 L1726.66 1206.68 L1726.08 1206.68 L1725.49 1206.68 L1724.91 1206.68 L1724.32 1206.68 L1723.73 1206.68 L1723.15 1206.68 L1722.56 1206.68 L1721.97 1206.68 L1721.39 1206.68 L1720.8 1206.68 L1720.21 1206.68 L1719.63 1206.68 L1719.04 1206.68 L1718.45 1206.68 L1717.87 1206.68 L1717.28 1206.68 L1716.7 1206.68 L1716.11 1206.68 L1715.52 1206.68 L1714.94 1206.68 L1714.35 1206.68 L1713.76 1206.68 L1713.18 1206.68 L1712.59 1206.68 L1712 1206.68 L1711.42 1206.68 L1710.83 1206.68 L1710.24 1206.68 L1709.66 1206.68 L1709.07 1206.68 L1708.49 1206.68 L1707.9 1206.68 L1707.31 1206.68 L1706.73 1206.68 L1706.14 1206.68 L1705.55 1206.68 L1704.97 1206.68 L1704.38 1206.68 L1703.79 1206.68 L1703.21 1206.68 L1702.62 1206.68 L1702.04 1206.68 L1701.45 1206.68 L1700.86 1206.68 L1700.28 1206.68 L1699.69 1206.68 L1699.1 1206.68 L1698.52 1206.68 L1697.93 1206.68 L1697.34 1206.68 L1696.76 1206.68 L1696.17 1206.68 L1695.58 1206.68 L1695 1206.68 L1694.41 1206.68 L1693.83 1206.68 L1693.24 1206.68 L1692.65 1206.68 L1692.07 1206.68 L1691.48 1206.68 L1690.89 1206.68 L1690.31 1206.68 L1689.72 1206.68 L1689.13 1206.68 L1688.55 1206.68 L1687.96 1206.68 L1687.37 1206.68 L1686.79 1206.68 L1686.2 1206.68 L1685.62 1206.68 L1685.03 1206.68 L1684.44 1206.68 L1683.86 1206.68 L1683.27 1206.68 L1682.68 1206.68 L1682.1 1206.68 L1681.51 1206.68 L1680.92 1206.68 L1680.34 1206.68 L1679.75 1206.68 L1679.17 1206.68 L1678.58 1206.68 L1677.99 1206.68 L1677.41 1206.68 L1676.82 1206.68 L1676.23 1206.68 L1675.65 1206.68 L1675.06 1206.68 L1674.47 1206.68 L1673.89 1206.68 L1673.3 1206.68 L1672.71 1206.68 L1672.13 1206.68 L1671.54 1206.68 L1670.96 1206.68 L1670.37 1206.68 L1669.78 1206.68 L1669.2 1206.68 L1668.61 1206.68 L1668.02 1206.68 L1667.44 1206.68 L1666.85 1206.68 L1666.26 1206.68 L1665.68 1206.68 L1665.09 1206.68 L1664.5 1206.68 L1663.92 1206.68 L1663.33 1206.68 L1662.75 1206.68 L1662.16 1206.68 L1661.57 1206.68 L1660.99 1206.68 L1660.4 1206.68 L1659.81 1206.68 L1659.23 1206.68 L1658.64 1206.68 L1658.05 1206.68 L1657.47 1206.68 L1656.88 1206.68 L1656.29 1206.68 L1655.71 1206.68 L1655.12 1206.68 L1654.54 1206.68 L1653.95 1206.68 L1653.36 1206.68 L1652.78 1206.68 L1652.19 1206.68 L1651.6 1206.68 L1651.02 1206.68 L1650.43 1206.68 L1649.84 1206.68 L1649.26 1206.68 L1648.67 1206.68 L1648.09 1206.68 L1647.5 1206.68 L1646.91 1206.68 L1646.33 1206.68 L1645.74 1206.68 L1645.15 1206.68 L1644.57 1206.68 L1643.98 1206.68 L1643.39 1206.68 L1642.81 1206.68 L1642.22 1206.68 L1641.63 1206.68 L1641.05 1206.68 L1640.46 1206.68 L1639.88 1206.68 L1639.29 1206.68 L1638.7 1206.68 L1638.12 1206.68 L1637.53 1206.68 L1636.94 1206.68 L1636.36 1206.68 L1635.77 1206.68 L1635.18 1206.68 L1634.6 1206.68 L1634.01 1206.68 L1633.42 1206.68 L1632.84 1206.68 L1632.25 1206.68 L1631.67 1206.68 L1631.08 1206.68 L1630.49 1206.68 L1629.91 1206.68 L1629.32 1206.68 L1628.73 1206.68 L1628.15 1206.68 L1627.56 1206.68 L1626.97 1206.68 L1626.39 1206.68 L1625.8 1206.68 L1625.22 1206.68 L1624.63 1206.68 L1624.04 1206.68 L1623.46 1206.68 L1622.87 1206.68 L1622.28 1206.68 L1621.7 1206.68 L1621.11 1206.68 L1620.52 1206.68 L1619.94 1206.68 L1619.35 1206.68 L1618.76 1206.68 L1618.18 1206.68 L1617.59 1206.68 L1617.01 1206.68 L1616.42 1206.68 L1615.83 1206.68 L1615.25 1206.68 L1614.66 1206.68 L1614.07 1206.68 L1613.49 1206.68 L1612.9 1206.68 L1612.31 1206.68 L1611.73 1206.68 L1611.14 1206.68 L1610.55 1206.68 L1609.97 1206.68 L1609.38 1206.68 L1608.8 1206.68 L1608.21 1206.68 L1607.62 1206.68 L1607.04 1206.68 L1606.45 1206.68 L1605.86 1206.68 L1605.28 1206.68 L1604.69 1206.68 L1604.1 1206.68 L1603.52 1206.68 L1602.93 1206.68 L1602.34 1206.68 L1601.76 1206.68 L1601.17 1206.68 L1600.59 1206.68 L1600 1206.68 L1599.41 1206.68 L1598.83 1206.68 L1598.24 1206.68 L1597.65 1206.68 L1597.07 1206.68 L1596.48 1206.68 L1595.89 1206.68 L1595.31 1206.68 L1594.72 1206.68 L1594.14 1206.68 L1593.55 1206.68 L1592.96 1206.68 L1592.38 1206.68 L1591.79 1206.68 L1591.2 1206.68 L1590.62 1206.68 L1590.03 1206.68 L1589.44 1206.68 L1588.86 1206.68 L1588.27 1206.68 L1587.68 1206.68 L1587.1 1206.68 L1586.51 1206.68 L1585.93 1206.68 L1585.34 1206.68 L1584.75 1206.68 L1584.17 1206.68 L1583.58 1206.68 L1582.99 1206.68 L1582.41 1206.68 L1581.82 1206.68 L1581.23 1206.68 L1580.65 1206.68 L1580.06 1206.68 L1579.47 1206.68 L1578.89 1206.68 L1578.3 1206.68 L1577.72 1206.68 L1577.13 1206.68 L1576.54 1206.68 L1575.96 1206.68 L1575.37 1206.68 L1574.78 1206.68 L1574.2 1206.68 L1573.61 1206.68 L1573.02 1206.68 L1572.44 1206.68 L1571.85 1206.68 L1571.27 1206.68 L1570.68 1206.68 L1570.09 1206.68 L1569.51 1206.68 L1568.92 1206.68 L1568.33 1206.68 L1567.75 1206.68 L1567.16 1206.68 L1566.57 1206.68 L1565.99 1206.68 L1565.4 1206.68 L1564.81 1206.68 L1564.23 1206.68 L1563.64 1206.68 L1563.06 1206.68 L1562.47 1206.68 L1561.88 1206.68 L1561.3 1206.68 L1560.71 1206.68 L1560.12 1206.68 L1559.54 1206.68 L1558.95 1206.68 L1558.36 1206.68 L1557.78 1206.68 L1557.19 1206.68 L1556.6 1206.68 L1556.02 1206.68 L1555.43 1206.68 L1554.85 1206.68 L1554.26 1206.68 L1553.67 1206.68 L1553.09 1206.68 L1552.5 1206.68 L1551.91 1206.68 L1551.33 1206.68 L1550.74 1206.68 L1550.15 1206.68 L1549.57 1206.68 L1548.98 1206.68 L1548.4 1206.68 L1547.81 1206.68 L1547.22 1206.68 L1546.64 1206.68 L1546.05 1206.68 L1545.46 1206.68 L1544.88 1206.68 L1544.29 1206.68 L1543.7 1206.68 L1543.12 1206.68 L1542.53 1206.68 L1541.94 1206.68 L1541.36 1206.68 L1540.77 1206.68 L1540.19 1206.68 L1539.6 1206.68 L1539.01 1206.68 L1538.43 1206.68 L1537.84 1206.68 L1537.25 1206.68 L1536.67 1206.68 L1536.08 1206.68 L1535.49 1206.68 L1534.91 1206.68 L1534.32 1206.68 L1533.73 1206.68 L1533.15 1206.68 L1532.56 1206.68 L1531.98 1206.68 L1531.39 1206.68 L1530.8 1206.68 L1530.22 1206.68 L1529.63 1206.68 L1529.04 1206.68 L1528.46 1206.68 L1527.87 1206.68 L1527.28 1206.68 L1526.7 1206.68 L1526.11 1206.68 L1525.52 1206.68 L1524.94 1206.68 L1524.35 1206.68 L1523.77 1206.68 L1523.18 1206.68 L1522.59 1206.68 L1522.01 1206.68 L1521.42 1206.68 L1520.83 1206.68 L1520.25 1206.68 L1519.66 1206.68 L1519.07 1206.68 L1518.49 1206.68 L1517.9 1206.68 L1517.32 1206.68 L1516.73 1206.68 L1516.14 1206.68 L1515.56 1206.68 L1514.97 1206.68 L1514.38 1206.68 L1513.8 1206.68 L1513.21 1206.68 L1512.62 1206.68 L1512.04 1206.68 L1511.45 1206.68 L1510.86 1206.68 L1510.28 1206.68 L1509.69 1206.68 L1509.11 1206.68 L1508.52 1206.68 L1507.93 1206.68 L1507.35 1206.68 L1506.76 1206.68 L1506.17 1206.68 L1505.59 1206.68 L1505 1206.68 L1504.41 1206.68 L1503.83 1206.68 L1503.24 1206.68 L1502.65 1206.68 L1502.07 1206.68 L1501.48 1206.68 L1500.9 1206.68 L1500.31 1206.68 L1499.72 1206.68 L1499.14 1206.68 L1498.55 1206.68 L1497.96 1206.68 L1497.38 1206.68 L1496.79 1206.68 L1496.2 1206.68 L1495.62 1206.68 L1495.03 1206.68 L1494.45 1206.68 L1493.86 1206.68 L1493.27 1206.68 L1492.69 1206.68 L1492.1 1206.68 L1491.51 1206.68 L1490.93 1206.68 L1490.34 1206.68 L1489.75 1206.68 L1489.17 1206.68 L1488.58 1206.68 L1487.99 1206.68 L1487.41 1206.68 L1486.82 1206.68 L1486.24 1206.68 L1485.65 1206.68 L1485.06 1206.68 L1484.48 1206.68 L1483.89 1206.68 L1483.3 1206.68 L1482.72 1206.68 L1482.13 1206.68 L1481.54 1206.68 L1480.96 1206.68 L1480.37 1206.68 L1479.78 1206.68 L1479.2 1206.68 L1478.61 1206.68 L1478.03 1206.68 L1477.44 1206.68 L1476.85 1206.68 L1476.27 1206.68 L1475.68 1206.68 L1475.09 1206.68 L1474.51 1206.68 L1473.92 1206.68 L1473.33 1206.68 L1472.75 1206.68 L1472.16 1206.68 L1471.57 1206.68 L1470.99 1206.68 L1470.4 1206.68 L1469.82 1206.68 L1469.23 1206.68 L1468.64 1206.68 L1468.06 1206.68 L1467.47 1206.68 L1466.88 1206.68 L1466.3 1206.68 L1465.71 1206.68 L1465.12 1206.68 L1464.54 1206.68 L1463.95 1206.68 L1463.37 1206.68 L1462.78 1206.68 L1462.19 1206.68 L1461.61 1206.68 L1461.02 1206.68 L1460.43 1206.68 L1459.85 1206.68 L1459.26 1206.68 L1458.67 1206.68 L1458.09 1206.68 L1457.5 1206.68 L1456.91 1206.68 L1456.33 1206.68 L1455.74 1206.68 L1455.16 1206.68 L1454.57 1206.68 L1453.98 1206.68 L1453.4 1206.68 L1452.81 1206.68 L1452.22 1206.68 L1451.64 1206.68 L1451.05 1206.68 L1450.46 1206.68 L1449.88 1206.68 L1449.29 1206.68 L1448.7 1206.68 L1448.12 1206.68 L1447.53 1206.68 L1446.95 1206.68 L1446.36 1206.68 L1445.77 1206.68 L1445.19 1206.68 L1444.6 1206.68 L1444.01 1206.68 L1443.43 1206.68 L1442.84 1206.68 L1442.25 1206.68 L1441.67 1206.68 L1441.08 1206.68 L1440.5 1206.68 L1439.91 1206.68 L1439.32 1206.68 L1438.74 1206.68 L1438.15 1206.68 L1437.56 1206.68 L1436.98 1206.68 L1436.39 1206.68 L1435.8 1206.68 L1435.22 1206.68 L1434.63 1206.68 L1434.04 1206.68 L1433.46 1206.68 L1432.87 1206.68 L1432.29 1206.68 L1431.7 1206.68 L1431.11 1206.68 L1430.53 1206.68 L1429.94 1206.68 L1429.35 1206.68 L1428.77 1206.68 L1428.18 1206.68 L1427.59 1206.68 L1427.01 1206.68 L1426.42 1206.68 L1425.83 1206.68 L1425.25 1206.68 L1424.66 1206.68 L1424.08 1206.68 L1423.49 1206.68 L1422.9 1206.68 L1422.32 1206.68 L1421.73 1206.68 L1421.14 1206.68 L1420.56 1206.68 L1419.97 1206.68 L1419.38 1206.68 L1418.8 1206.68 L1418.21 1206.68 L1417.63 1206.68 L1417.04 1206.68 L1416.45 1206.68 L1415.87 1206.68 L1415.28 1206.68 L1414.69 1206.68 L1414.11 1206.68 L1413.52 1206.68 L1412.93 1206.68 L1412.35 1206.68 L1411.76 1206.68 L1411.17 1206.68 L1410.59 1206.68 L1410 1206.68 L1409.42 1206.68 L1408.83 1206.68 L1408.24 1206.68 L1407.66 1206.68 L1407.07 1206.68 L1406.48 1206.68 L1405.9 1206.68 L1405.31 1206.68 L1404.72 1206.68 L1404.14 1206.68 L1403.55 1206.68 L1402.96 1206.68 L1402.38 1206.68 L1401.79 1206.68 L1401.21 1206.68 L1400.62 1206.68 L1400.03 1206.68 L1399.45 1206.68 L1398.86 1206.68 L1398.27 1206.68 L1397.69 1206.68 L1397.1 1206.68 L1396.51 1206.68 L1395.93 1206.68 L1395.34 1206.68 L1394.75 1206.68 L1394.17 1206.68 L1393.58 1206.68 L1393 1206.68 L1392.41 1206.68 L1391.82 1206.68 L1391.24 1206.68 L1390.65 1206.68 L1390.06 1206.68 L1389.48 1206.68 L1388.89 1206.68 L1388.3 1206.68 L1387.72 1206.68 L1387.13 1206.68 L1386.55 1206.68 L1385.96 1206.68 L1385.37 1206.68 L1384.79 1206.68 L1384.2 1206.68 L1383.61 1206.68 L1383.03 1206.68 L1382.44 1206.68 L1381.85 1206.68 L1381.27 1206.68 L1380.68 1206.68 L1380.09 1206.68 L1379.51 1206.68 L1378.92 1206.68 L1378.34 1206.68 L1377.75 1206.68 L1377.16 1206.68 L1376.58 1206.68 L1375.99 1206.68 L1375.4 1206.68 L1374.82 1206.68 L1374.23 1206.68 L1373.64 1206.68 L1373.06 1206.68 L1372.47 1206.68 L1371.88 1206.68 L1371.3 1206.68 L1370.71 1206.68 L1370.13 1206.68 L1369.54 1206.68 L1368.95 1206.68 L1368.37 1206.68 L1367.78 1206.68 L1367.19 1206.68 L1366.61 1206.68 L1366.02 1206.68 L1365.43 1206.68 L1364.85 1206.68 L1364.26 1206.68 L1363.68 1206.68 L1363.09 1206.68 L1362.5 1206.68 L1361.92 1206.68 L1361.33 1206.68 L1360.74 1206.68 L1360.16 1206.68 L1359.57 1206.68 L1358.98 1206.68 L1358.4 1206.68 L1357.81 1206.68 L1357.22 1206.68 L1356.64 1206.68 L1356.05 1206.68 L1355.47 1206.68 L1354.88 1206.68 L1354.29 1206.68 L1353.71 1206.68 L1353.12 1206.68 L1352.53 1206.68 L1351.95 1206.68 L1351.36 1206.68 L1350.77 1206.68 L1350.19 1206.68 L1349.6 1206.68 L1349.01 1206.68 L1348.43 1206.68 L1347.84 1206.68 L1347.26 1206.68 L1346.67 1206.68 L1346.08 1206.68 L1345.5 1206.68 L1344.91 1206.68 L1344.32 1206.68 L1343.74 1206.68 L1343.15 1206.68 L1342.56 1206.68 L1341.98 1206.68 L1341.39 1206.68 L1340.8 1206.68 L1340.22 1206.68 L1339.63 1206.68 L1339.05 1206.68 L1338.46 1206.68 L1337.87 1206.68 L1337.29 1206.68 L1336.7 1206.68 L1336.11 1206.68 L1335.53 1206.68 L1334.94 1206.68 L1334.35 1206.68 L1333.77 1206.68 L1333.18 1206.68 L1332.6 1206.68 L1332.01 1206.68 L1331.42 1206.68 L1330.84 1206.68 L1330.25 1206.68 L1329.66 1206.68 L1329.08 1206.68 L1328.49 1206.68 L1327.9 1206.68 L1327.32 1206.68 L1326.73 1206.68 L1326.14 1206.68 L1325.56 1206.68 L1324.97 1206.68 L1324.39 1206.68 L1323.8 1206.68 L1323.21 1206.68 L1322.63 1206.68 L1322.04 1206.68 L1321.45 1206.68 L1320.87 1206.68 L1320.28 1206.68 L1319.69 1206.68 L1319.11 1206.68 L1318.52 1206.68 L1317.93 1206.68 L1317.35 1206.68 L1316.76 1206.68 L1316.18 1206.68 L1315.59 1206.68 L1315 1206.68 L1314.42 1206.68 L1313.83 1206.68 L1313.24 1206.68 L1312.66 1206.68 L1312.07 1206.68 L1311.48 1206.68 L1310.9 1206.68 L1310.31 1206.68 L1309.73 1206.68 L1309.14 1206.68 L1308.55 1206.68 L1307.97 1206.68 L1307.38 1206.68 L1306.79 1206.68 L1306.21 1206.68 L1305.62 1206.68 L1305.03 1206.68 L1304.45 1206.68 L1303.86 1206.68 L1303.27 1206.68 L1302.69 1206.68 L1302.1 1206.68 L1301.52 1206.68 L1300.93 1206.68 L1300.34 1206.68 L1299.76 1206.68 L1299.17 1206.68 L1298.58 1206.68 L1298 1206.68 L1297.41 1206.68 L1296.82 1206.68 L1296.24 1206.68 L1295.65 1206.68 L1295.06 1206.68 L1294.48 1206.68 L1293.89 1206.68 L1293.31 1206.68 L1292.72 1206.68 L1292.13 1206.68 L1291.55 1206.68 L1290.96 1206.68 L1290.37 1206.68 L1289.79 1206.68 L1289.2 1206.68 L1288.61 1206.68 L1288.03 1206.68 L1287.44 1206.68 L1286.86 1206.68 L1286.27 1206.68 L1285.68 1206.68 L1285.1 1206.68 L1284.51 1206.68 L1283.92 1206.68 L1283.34 1206.68 L1282.75 1206.68 L1282.16 1206.68 L1281.58 1206.68 L1280.99 1206.68 L1280.4 1206.68 L1279.82 1206.68 L1279.23 1206.68 L1278.65 1206.68 L1278.06 1206.68 L1277.47 1206.68 L1276.89 1206.68 L1276.3 1206.68 L1275.71 1206.68 L1275.13 1206.68 L1274.54 1206.68 L1273.95 1206.68 L1273.37 1206.68 L1272.78 1206.68 L1272.19 1206.68 L1271.61 1206.68 L1271.02 1206.68 L1270.44 1206.68 L1269.85 1206.68 L1269.26 1206.68 L1268.68 1206.68 L1268.09 1206.68 L1267.5 1206.68 L1266.92 1206.68 L1266.33 1206.68 L1265.74 1206.68 L1265.16 1206.68 L1264.57 1206.68 L1263.98 1206.68 L1263.4 1206.68 L1262.81 1206.68 L1262.23 1206.68 L1261.64 1206.68 L1261.05 1206.68 L1260.47 1206.68 L1259.88 1206.68 L1259.29 1206.68 L1258.71 1206.68 L1258.12 1206.68 L1257.53 1206.68 L1256.95 1206.68 L1256.36 1206.68 L1255.78 1206.68 L1255.19 1206.68 L1254.6 1206.68 L1254.02 1206.68 L1253.43 1206.68 L1252.84 1206.68 L1252.26 1206.68 L1251.67 1206.68 L1251.08 1206.68 L1250.5 1206.68 L1249.91 1206.68 L1249.32 1206.68 L1248.74 1206.68 L1248.15 1206.68 L1247.57 1206.68 L1246.98 1206.68 L1246.39 1206.68 L1245.81 1206.68 L1245.22 1206.68 L1244.63 1206.68 L1244.05 1206.68 L1243.46 1206.68 L1242.87 1206.68 L1242.29 1206.68 L1241.7 1206.68 L1241.11 1206.68 L1240.53 1206.68 L1239.94 1206.68 L1239.36 1206.68 L1238.77 1206.68 L1238.18 1206.68 L1237.6 1206.68 L1237.01 1206.68 L1236.42 1206.68 L1235.84 1206.68 L1235.25 1206.68 L1234.66 1206.68 L1234.08 1206.68 L1233.49 1206.68 L1232.91 1206.68 L1232.32 1206.68 L1231.73 1206.68 L1231.15 1206.68 L1230.56 1206.68 L1229.97 1206.68 L1229.39 1206.68 L1228.8 1206.68 L1228.21 1206.68 L1227.63 1206.68 L1227.04 1206.68 L1226.45 1206.68 L1225.87 1206.68 L1225.28 1206.68 L1224.7 1206.68 L1224.11 1206.68 L1223.52 1206.68 L1222.94 1206.68 L1222.35 1206.68 L1221.76 1206.68 L1221.18 1206.68 L1220.59 1206.68 L1220 1206.68 L1219.42 1206.68 L1218.83 1206.68 L1218.24 1206.68 L1217.66 1206.68 L1217.07 1206.68 L1216.49 1206.68 L1215.9 1206.68 L1215.31 1206.68 L1214.73 1206.68 L1214.14 1206.68 L1213.55 1206.68 L1212.97 1206.68 L1212.38 1206.68 L1211.79 1206.68 L1211.21 1206.68 L1210.62 1206.68 L1210.03 1206.68 L1209.45 1206.68 L1208.86 1206.68 L1208.28 1206.68 L1207.69 1206.68 L1207.1 1206.68 L1206.52 1206.68 L1205.93 1206.68 L1205.34 1206.68 L1204.76 1206.68 L1204.17 1206.68 L1203.58 1206.68 L1203 1206.68 L1202.41 1206.68 L1201.83 1206.68 L1201.24 1206.68 L1200.65 1206.68 L1200.07 1206.68 L1199.48 1206.68 L1198.89 1206.68 L1198.31 1206.68 L1197.72 1206.68 L1197.13 1206.68 L1196.55 1206.68 L1195.96 1206.68 L1195.37 1206.68 L1194.79 1206.68 L1194.2 1206.68 L1193.62 1206.68 L1193.03 1206.68 L1192.44 1206.68 L1191.86 1206.68 L1191.27 1206.68 L1190.68 1206.68 L1190.1 1206.68 L1189.51 1206.68 L1188.92 1206.68 L1188.34 1206.68 L1187.75 1206.68 L1187.16 1206.68 L1186.58 1206.68 L1185.99 1206.68 L1185.41 1206.68 L1184.82 1206.68 L1184.23 1206.68 L1183.65 1206.68 L1183.06 1206.68 L1182.47 1206.68 L1181.89 1206.68 L1181.3 1206.68 L1180.71 1206.68 L1180.13 1206.68 L1179.54 1206.68 L1178.96 1206.68 L1178.37 1206.68 L1177.78 1206.68 L1177.2 1206.68 L1176.61 1206.68 L1176.02 1206.68 L1175.44 1206.68 L1174.85 1206.68 L1174.26 1206.68 L1173.68 1206.68 L1173.09 1206.68 L1172.5 1206.68 L1171.92 1206.68 L1171.33 1206.68 L1170.75 1206.68 L1170.16 1206.68 L1169.57 1206.68 L1168.99 1206.68 L1168.4 1206.68 L1167.81 1206.68 L1167.23 1206.68 L1166.64 1206.68 L1166.05 1206.68 L1165.47 1206.68 L1164.88 1206.68 L1164.29 1206.68 L1163.71 1206.68 L1163.12 1206.68 L1162.54 1206.68 L1161.95 1206.68 L1161.36 1206.68 L1160.78 1206.68 L1160.19 1206.68 L1159.6 1206.68 L1159.02 1206.68 L1158.43 1206.68 L1157.84 1206.68 L1157.26 1206.68 L1156.67 1206.68 L1156.09 1206.68 L1155.5 1206.68 L1154.91 1206.68 L1154.33 1206.68 L1153.74 1206.68 L1153.15 1206.68 L1152.57 1206.68 L1151.98 1206.68 L1151.39 1206.68 L1150.81 1206.68 L1150.22 1206.68 L1149.63 1206.68 L1149.05 1206.68 L1148.46 1206.68 L1147.88 1206.68 L1147.29 1206.68 L1146.7 1206.68 L1146.12 1206.68 L1145.53 1206.68 L1144.94 1206.68 L1144.36 1206.68 L1143.77 1206.68 L1143.18 1206.68 L1142.6 1206.68 L1142.01 1206.68 L1141.42 1206.68 L1140.84 1206.68 L1140.25 1206.68 L1139.67 1206.68 L1139.08 1206.68 L1138.49 1206.68 L1137.91 1206.68 L1137.32 1206.68 L1136.73 1206.68 L1136.15 1206.68 L1135.56 1206.68 L1134.97 1206.68 L1134.39 1206.68 L1133.8 1206.68 L1133.21 1206.68 L1132.63 1206.68 L1132.04 1206.68 L1131.46 1206.68 L1130.87 1206.68 L1130.28 1206.68 L1129.7 1206.68 L1129.11 1206.68 L1128.52 1206.68 L1127.94 1206.68 L1127.35 1206.68 L1126.76 1206.68 L1126.18 1206.68 L1125.59 1206.68 L1125.01 1206.68 L1124.42 1206.68 L1123.83 1206.68 L1123.25 1206.68 L1122.66 1206.68 L1122.07 1206.68 L1121.49 1206.68 L1120.9 1206.68 L1120.31 1206.68 L1119.73 1206.68 L1119.14 1206.68 L1118.55 1206.68 L1117.97 1206.68 L1117.38 1206.68 L1116.8 1206.68 L1116.21 1206.68 L1115.62 1206.68 L1115.04 1206.68 L1114.45 1206.68 L1113.86 1206.68 L1113.28 1206.68 L1112.69 1206.68 L1112.1 1206.68 L1111.52 1206.68 L1110.93 1206.68 L1110.34 1206.68 L1109.76 1206.68 L1109.17 1206.68 L1108.59 1206.68 L1108 1206.68 L1107.41 1206.68 L1106.83 1206.68 L1106.24 1206.68 L1105.65 1206.68 L1105.07 1206.68 L1104.48 1206.68 L1103.89 1206.68 L1103.31 1206.68 L1102.72 1206.68 L1102.14 1206.68 L1101.55 1206.68 L1100.96 1206.68 L1100.38 1206.68 L1099.79 1206.68 L1099.2 1206.68 L1098.62 1206.68 L1098.03 1206.68 L1097.44 1206.68 L1096.86 1206.68 L1096.27 1206.68 L1095.68 1206.68 L1095.1 1206.68 L1094.51 1206.68 L1093.93 1206.68 L1093.34 1206.68 L1092.75 1206.68 L1092.17 1206.68 L1091.58 1206.68 L1090.99 1206.68 L1090.41 1206.68 L1089.82 1206.68 L1089.23 1206.68 L1088.65 1206.68 L1088.06 1206.68 L1087.47 1206.68 L1086.89 1206.68 L1086.3 1206.68 L1085.72 1206.68 L1085.13 1206.68 L1084.54 1206.68 L1083.96 1206.68 L1083.37 1206.68 L1082.78 1206.68 L1082.2 1206.68 L1081.61 1206.68 L1081.02 1206.68 L1080.44 1206.68 L1079.85 1206.68 L1079.26 1206.68 L1078.68 1206.68 L1078.09 1206.68 L1077.51 1206.68 L1076.92 1206.68 L1076.33 1206.68 L1075.75 1206.68 L1075.16 1206.68 L1074.57 1206.68 L1073.99 1206.68 L1073.4 1206.68 L1072.81 1206.68 L1072.23 1206.68 L1071.64 1206.68 L1071.06 1206.68 L1070.47 1206.68 L1069.88 1206.68 L1069.3 1206.68 L1068.71 1206.68 L1068.12 1206.68 L1067.54 1206.68 L1066.95 1206.68 L1066.36 1206.68 L1065.78 1206.68 L1065.19 1206.68 L1064.6 1206.68 L1064.02 1206.68 L1063.43 1206.68 L1062.85 1206.68 L1062.26 1206.68 L1061.67 1206.68 L1061.09 1206.68 L1060.5 1206.68 L1059.91 1206.68 L1059.33 1206.68 L1058.74 1206.68 L1058.15 1206.68 L1057.57 1206.68 L1056.98 1206.68 L1056.39 1206.68 L1055.81 1206.68 L1055.22 1206.68 L1054.64 1206.68 L1054.05 1206.68 L1053.46 1206.68 L1052.88 1206.68 L1052.29 1206.68 L1051.7 1206.68 L1051.12 1206.68 L1050.53 1206.68 L1049.94 1206.68 L1049.36 1206.68 L1048.77 1206.68 L1048.19 1206.68 L1047.6 1206.68 L1047.01 1206.68 L1046.43 1206.68 L1045.84 1206.68 L1045.25 1206.68 L1044.67 1206.68 L1044.08 1206.68 L1043.49 1206.68 L1042.91 1206.68 L1042.32 1206.68 L1041.73 1206.68 L1041.15 1206.68 L1040.56 1206.68 L1039.98 1206.68 L1039.39 1206.68 L1038.8 1206.68 L1038.22 1206.68 L1037.63 1206.68 L1037.04 1206.68 L1036.46 1206.68 L1035.87 1206.68 L1035.28 1206.68 L1034.7 1206.68 L1034.11 1206.68 L1033.52 1206.68 L1032.94 1206.68 L1032.35 1206.68 L1031.77 1206.68 L1031.18 1206.68 L1030.59 1206.68 L1030.01 1206.68 L1029.42 1206.68 L1028.83 1206.68 L1028.25 1206.68 L1027.66 1206.68 L1027.07 1206.68 L1026.49 1206.68 L1025.9 1206.68 L1025.32 1206.68 L1024.73 1206.68 L1024.14 1206.68 L1023.56 1206.68 L1022.97 1206.68 L1022.38 1206.68 L1021.8 1206.68 L1021.21 1206.68 L1020.62 1206.68 L1020.04 1206.68 L1019.45 1206.68 L1018.86 1206.68 L1018.28 1206.68 L1017.69 1206.68 L1017.11 1206.68 L1016.52 1206.68 L1015.93 1206.68 L1015.35 1206.68 L1014.76 1206.68 L1014.17 1206.68 L1013.59 1206.68 L1013 1206.68 L1012.41 1206.68 L1011.83 1206.68 L1011.24 1206.68 L1010.65 1206.68 L1010.07 1206.68 L1009.48 1206.68 L1008.9 1206.68 L1008.31 1206.68 L1007.72 1206.68 L1007.14 1206.68 L1006.55 1206.68 L1005.96 1206.68 L1005.38 1206.68 L1004.79 1206.68 L1004.2 1206.68 L1003.62 1206.68 L1003.03 1206.68 L1002.44 1206.68 L1001.86 1206.68 L1001.27 1206.68 L1000.69 1206.68 L1000.1 1206.68 L999.513 1206.68 L998.926 1206.68 L998.34 1206.68 L997.754 1206.68 L997.167 1206.68 L996.581 1206.68 L995.994 1206.68 L995.408 1206.68 L994.822 1206.68 L994.235 1206.68 L993.649 1206.68 L993.062 1206.68 L992.476 1206.68 L991.889 1206.68 L991.303 1206.68 L990.717 1206.68 L990.13 1206.68 L989.544 1206.68 L988.957 1206.68 L988.371 1206.68 L987.785 1206.68 L987.198 1206.68 L986.612 1206.68 L986.025 1206.68  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.79 986.612,1206.79 987.198,1206.79 987.785,1206.79 988.371,1206.79 988.957,1206.79 989.544,1206.79 990.13,1206.79 990.717,1206.79 991.303,1206.79 991.889,1206.79 992.476,1206.79 993.062,1206.79 993.649,1206.79 994.235,1206.79 994.822,1206.79 995.408,1206.79 995.994,1206.79 996.581,1206.79 997.167,1206.79 997.754,1206.79 998.34,1206.79 998.926,1206.79 999.513,1206.79 1000.1,1206.79 1000.69,1206.79 1001.27,1206.79 1001.86,1206.79 1002.44,1206.79 1003.03,1206.79 1003.62,1206.79 1004.2,1206.79 1004.79,1206.79 1005.38,1206.79 1005.96,1206.79 1006.55,1206.79 1007.14,1206.79 1007.72,1206.79 1008.31,1206.79 1008.9,1206.79 1009.48,1206.79 1010.07,1206.79 1010.65,1206.79 1011.24,1206.79 1011.83,1206.79 1012.41,1206.79 1013,1206.79 1013.59,1206.79 1014.17,1206.79 1014.76,1206.79 1015.35,1206.79 1015.93,1206.79 1016.52,1206.79 1017.11,1206.79 1017.69,1206.79 1018.28,1206.79 1018.86,1206.79 1019.45,1206.79 1020.04,1206.79 1020.62,1206.79 1021.21,1206.79 1021.8,1206.79 1022.38,1206.79 1022.97,1206.79 1023.56,1206.79 1024.14,1206.79 1024.73,1206.79 1025.32,1206.79 1025.9,1206.79 1026.49,1206.79 1027.07,1206.79 1027.66,1206.79 1028.25,1206.79 1028.83,1206.79 1029.42,1206.79 1030.01,1206.79 1030.59,1206.79 1031.18,1206.79 1031.77,1206.79 1032.35,1206.79 1032.94,1206.79 1033.52,1206.79 1034.11,1206.79 1034.7,1206.79 1035.28,1206.79 1035.87,1206.79 1036.46,1206.79 1037.04,1206.79 1037.63,1206.79 1038.22,1206.79 1038.8,1206.79 1039.39,1206.79 1039.98,1206.79 1040.56,1206.79 1041.15,1206.79 1041.73,1206.79 1042.32,1206.79 1042.91,1206.79 1043.49,1206.79 1044.08,1206.79 1044.67,1206.79 1045.25,1206.79 1045.84,1206.79 1046.43,1206.79 1047.01,1206.79 1047.6,1206.79 1048.19,1206.79 1048.77,1206.79 1049.36,1206.79 1049.94,1206.79 1050.53,1206.79 1051.12,1206.79 1051.7,1206.79 1052.29,1206.79 1052.88,1206.79 1053.46,1206.79 1054.05,1206.79 1054.64,1206.79 1055.22,1206.79 1055.81,1206.79 1056.39,1206.79 1056.98,1206.79 1057.57,1206.79 1058.15,1206.79 1058.74,1206.79 1059.33,1206.79 1059.91,1206.79 1060.5,1206.79 1061.09,1206.79 1061.67,1206.79 1062.26,1206.79 1062.85,1206.79 1063.43,1206.79 1064.02,1206.79 1064.6,1206.79 1065.19,1206.79 1065.78,1206.79 1066.36,1206.79 1066.95,1206.79 1067.54,1206.79 1068.12,1206.79 1068.71,1206.79 1069.3,1206.79 1069.88,1206.79 1070.47,1206.79 1071.06,1206.79 1071.64,1206.79 1072.23,1206.79 1072.81,1206.79 1073.4,1206.79 1073.99,1206.79 1074.57,1206.79 1075.16,1206.79 1075.75,1206.79 1076.33,1206.79 1076.92,1206.79 1077.51,1206.79 1078.09,1206.79 1078.68,1206.79 1079.26,1206.79 1079.85,1206.79 1080.44,1206.79 1081.02,1206.79 1081.61,1206.79 1082.2,1206.79 1082.78,1206.79 1083.37,1206.79 1083.96,1206.79 1084.54,1206.79 1085.13,1206.79 1085.72,1206.79 1086.3,1206.79 1086.89,1206.79 1087.47,1206.79 1088.06,1206.79 1088.65,1206.79 1089.23,1206.79 1089.82,1206.79 1090.41,1206.79 1090.99,1206.79 1091.58,1206.79 1092.17,1206.79 1092.75,1206.79 1093.34,1206.79 1093.93,1206.79 1094.51,1206.79 1095.1,1206.79 1095.68,1206.79 1096.27,1206.79 1096.86,1206.79 1097.44,1206.79 1098.03,1206.79 1098.62,1206.79 1099.2,1206.79 1099.79,1206.79 1100.38,1206.79 1100.96,1206.79 1101.55,1206.79 1102.14,1206.79 1102.72,1206.79 1103.31,1206.79 1103.89,1206.79 1104.48,1206.79 1105.07,1206.79 1105.65,1206.79 1106.24,1206.79 1106.83,1206.79 1107.41,1206.79 1108,1206.79 1108.59,1206.79 1109.17,1206.79 1109.76,1206.79 1110.34,1206.79 1110.93,1206.79 1111.52,1206.79 1112.1,1206.79 1112.69,1206.79 1113.28,1206.79 1113.86,1206.79 1114.45,1206.79 1115.04,1206.79 1115.62,1206.79 1116.21,1206.79 1116.8,1206.79 1117.38,1206.79 1117.97,1206.79 1118.55,1206.79 1119.14,1206.79 1119.73,1206.79 1120.31,1206.79 1120.9,1206.79 1121.49,1206.79 1122.07,1206.79 1122.66,1206.79 1123.25,1206.79 1123.83,1206.79 1124.42,1206.79 1125.01,1206.79 1125.59,1206.79 1126.18,1206.79 1126.76,1206.79 1127.35,1206.79 1127.94,1206.79 1128.52,1206.79 1129.11,1206.79 1129.7,1206.79 1130.28,1206.79 1130.87,1206.79 1131.46,1206.79 1132.04,1206.79 1132.63,1206.79 1133.21,1206.79 1133.8,1206.79 1134.39,1206.79 1134.97,1206.79 1135.56,1206.79 1136.15,1206.79 1136.73,1206.79 1137.32,1206.79 1137.91,1206.79 1138.49,1206.79 1139.08,1206.79 1139.67,1206.79 1140.25,1206.79 1140.84,1206.79 1141.42,1206.79 1142.01,1206.79 1142.6,1206.79 1143.18,1206.79 1143.77,1206.79 1144.36,1206.79 1144.94,1206.79 1145.53,1206.79 1146.12,1206.79 1146.7,1206.79 1147.29,1206.79 1147.88,1206.79 1148.46,1206.79 1149.05,1206.79 1149.63,1206.79 1150.22,1206.79 1150.81,1206.79 1151.39,1206.79 1151.98,1206.79 1152.57,1206.79 1153.15,1206.79 1153.74,1206.79 1154.33,1206.79 1154.91,1206.79 1155.5,1206.79 1156.09,1206.79 1156.67,1206.79 1157.26,1206.79 1157.84,1206.79 1158.43,1206.79 1159.02,1206.79 1159.6,1206.79 1160.19,1206.79 1160.78,1206.79 1161.36,1206.79 1161.95,1206.79 1162.54,1206.79 1163.12,1206.79 1163.71,1206.79 1164.29,1206.79 1164.88,1206.79 1165.47,1206.79 1166.05,1206.79 1166.64,1206.79 1167.23,1206.79 1167.81,1206.79 1168.4,1206.79 1168.99,1206.79 1169.57,1206.79 1170.16,1206.79 1170.75,1206.79 1171.33,1206.79 1171.92,1206.79 1172.5,1206.79 1173.09,1206.79 1173.68,1206.79 1174.26,1206.79 1174.85,1206.79 1175.44,1206.79 1176.02,1206.79 1176.61,1206.79 1177.2,1206.79 1177.78,1206.79 1178.37,1206.79 1178.96,1206.79 1179.54,1206.79 1180.13,1206.79 1180.71,1206.79 1181.3,1206.79 1181.89,1206.79 1182.47,1206.79 1183.06,1206.79 1183.65,1206.79 1184.23,1206.79 1184.82,1206.79 1185.41,1206.79 1185.99,1206.79 1186.58,1206.79 1187.16,1206.79 1187.75,1206.79 1188.34,1206.79 1188.92,1206.79 1189.51,1206.79 1190.1,1206.79 1190.68,1206.79 1191.27,1206.79 1191.86,1206.79 1192.44,1206.79 1193.03,1206.79 1193.62,1206.79 1194.2,1206.79 1194.79,1206.79 1195.37,1206.79 1195.96,1206.79 1196.55,1206.79 1197.13,1206.79 1197.72,1206.79 1198.31,1206.79 1198.89,1206.79 1199.48,1206.79 1200.07,1206.79 1200.65,1206.79 1201.24,1206.79 1201.83,1206.79 1202.41,1206.79 1203,1206.79 1203.58,1206.79 1204.17,1206.79 1204.76,1206.79 1205.34,1206.79 1205.93,1206.79 1206.52,1206.79 1207.1,1206.79 1207.69,1206.79 1208.28,1206.79 1208.86,1206.79 1209.45,1206.79 1210.03,1206.79 1210.62,1206.79 1211.21,1206.79 1211.79,1206.79 1212.38,1206.79 1212.97,1206.79 1213.55,1206.79 1214.14,1206.79 1214.73,1206.79 1215.31,1206.79 1215.9,1206.79 1216.49,1206.79 1217.07,1206.79 1217.66,1206.79 1218.24,1206.79 1218.83,1206.79 1219.42,1206.79 1220,1206.79 1220.59,1206.79 1221.18,1206.79 1221.76,1206.79 1222.35,1206.79 1222.94,1206.79 1223.52,1206.79 1224.11,1206.79 1224.7,1206.79 1225.28,1206.79 1225.87,1206.79 1226.45,1206.79 1227.04,1206.79 1227.63,1206.79 1228.21,1206.79 1228.8,1206.79 1229.39,1206.79 1229.97,1206.79 1230.56,1206.79 1231.15,1206.79 1231.73,1206.79 1232.32,1206.79 1232.91,1206.79 1233.49,1206.79 1234.08,1206.79 1234.66,1206.79 1235.25,1206.79 1235.84,1206.79 1236.42,1206.79 1237.01,1206.79 1237.6,1206.79 1238.18,1206.79 1238.77,1206.79 1239.36,1206.79 1239.94,1206.79 1240.53,1206.79 1241.11,1206.79 1241.7,1206.79 1242.29,1206.79 1242.87,1206.79 1243.46,1206.79 1244.05,1206.79 1244.63,1206.79 1245.22,1206.79 1245.81,1206.79 1246.39,1206.79 1246.98,1206.79 1247.57,1206.79 1248.15,1206.79 1248.74,1206.79 1249.32,1206.79 1249.91,1206.79 1250.5,1206.79 1251.08,1206.79 1251.67,1206.79 1252.26,1206.79 1252.84,1206.79 1253.43,1206.79 1254.02,1206.79 1254.6,1206.79 1255.19,1206.79 1255.78,1206.79 1256.36,1206.79 1256.95,1206.79 1257.53,1206.79 1258.12,1206.79 1258.71,1206.79 1259.29,1206.79 1259.88,1206.79 1260.47,1206.79 1261.05,1206.79 1261.64,1206.79 1262.23,1206.79 1262.81,1206.79 1263.4,1206.79 1263.98,1206.79 1264.57,1206.79 1265.16,1206.79 1265.74,1206.79 1266.33,1206.79 1266.92,1206.79 1267.5,1206.79 1268.09,1206.79 1268.68,1206.79 1269.26,1206.79 1269.85,1206.79 1270.44,1206.79 1271.02,1206.79 1271.61,1206.79 1272.19,1206.79 1272.78,1206.79 1273.37,1206.79 1273.95,1206.79 1274.54,1206.79 1275.13,1206.79 1275.71,1206.79 1276.3,1206.79 1276.89,1206.79 1277.47,1206.79 1278.06,1206.79 1278.65,1206.79 1279.23,1206.79 1279.82,1206.79 1280.4,1206.79 1280.99,1206.79 1281.58,1206.79 1282.16,1206.79 1282.75,1206.79 1283.34,1206.79 1283.92,1206.79 1284.51,1206.79 1285.1,1206.79 1285.68,1206.79 1286.27,1206.79 1286.86,1206.79 1287.44,1206.79 1288.03,1206.79 1288.61,1206.79 1289.2,1206.79 1289.79,1206.79 1290.37,1206.79 1290.96,1206.79 1291.55,1206.79 1292.13,1206.79 1292.72,1206.79 1293.31,1206.79 1293.89,1206.79 1294.48,1206.79 1295.06,1206.79 1295.65,1206.79 1296.24,1206.79 1296.82,1206.79 1297.41,1206.79 1298,1206.79 1298.58,1206.79 1299.17,1206.79 1299.76,1206.79 1300.34,1206.79 1300.93,1206.79 1301.52,1206.79 1302.1,1206.79 1302.69,1206.79 1303.27,1206.79 1303.86,1206.79 1304.45,1206.79 1305.03,1206.79 1305.62,1206.79 1306.21,1206.79 1306.79,1206.79 1307.38,1206.79 1307.97,1206.79 1308.55,1206.79 1309.14,1206.79 1309.73,1206.79 1310.31,1206.79 1310.9,1206.79 1311.48,1206.79 1312.07,1206.79 1312.66,1206.79 1313.24,1206.79 1313.83,1206.79 1314.42,1206.79 1315,1206.79 1315.59,1206.79 1316.18,1206.79 1316.76,1206.79 1317.35,1206.79 1317.93,1206.79 1318.52,1206.79 1319.11,1206.79 1319.69,1206.79 1320.28,1206.79 1320.87,1206.79 1321.45,1206.79 1322.04,1206.79 1322.63,1206.79 1323.21,1206.79 1323.8,1206.79 1324.39,1206.79 1324.97,1206.79 1325.56,1206.79 1326.14,1206.79 1326.73,1206.79 1327.32,1206.79 1327.9,1206.79 1328.49,1206.79 1329.08,1206.79 1329.66,1206.79 1330.25,1206.79 1330.84,1206.79 1331.42,1206.79 1332.01,1206.79 1332.6,1206.79 1333.18,1206.79 1333.77,1206.79 1334.35,1206.79 1334.94,1206.79 1335.53,1206.79 1336.11,1206.79 1336.7,1206.79 1337.29,1206.79 1337.87,1206.79 1338.46,1206.79 1339.05,1206.79 1339.63,1206.79 1340.22,1206.79 1340.8,1206.79 1341.39,1206.79 1341.98,1206.79 1342.56,1206.79 1343.15,1206.79 1343.74,1206.79 1344.32,1206.79 1344.91,1206.79 1345.5,1206.79 1346.08,1206.79 1346.67,1206.79 1347.26,1206.79 1347.84,1206.79 1348.43,1206.79 1349.01,1206.79 1349.6,1206.79 1350.19,1206.79 1350.77,1206.79 1351.36,1206.79 1351.95,1206.79 1352.53,1206.79 1353.12,1206.79 1353.71,1206.79 1354.29,1206.79 1354.88,1206.79 1355.47,1206.79 1356.05,1206.79 1356.64,1206.79 1357.22,1206.79 1357.81,1206.79 1358.4,1206.79 1358.98,1206.79 1359.57,1206.79 1360.16,1206.79 1360.74,1206.79 1361.33,1206.79 1361.92,1206.79 1362.5,1206.79 1363.09,1206.79 1363.68,1206.79 1364.26,1206.79 1364.85,1206.79 1365.43,1206.79 1366.02,1206.79 1366.61,1206.79 1367.19,1206.79 1367.78,1206.79 1368.37,1206.79 1368.95,1206.79 1369.54,1206.79 1370.13,1206.79 1370.71,1206.79 1371.3,1206.79 1371.88,1206.79 1372.47,1206.79 1373.06,1206.79 1373.64,1206.79 1374.23,1206.79 1374.82,1206.79 1375.4,1206.79 1375.99,1206.79 1376.58,1206.79 1377.16,1206.79 1377.75,1206.79 1378.34,1206.79 1378.92,1206.79 1379.51,1206.79 1380.09,1206.79 1380.68,1206.79 1381.27,1206.79 1381.85,1206.79 1382.44,1206.79 1383.03,1206.79 1383.61,1206.79 1384.2,1206.79 1384.79,1206.79 1385.37,1206.79 1385.96,1206.79 1386.55,1206.79 1387.13,1206.79 1387.72,1206.79 1388.3,1206.79 1388.89,1206.79 1389.48,1206.79 1390.06,1206.79 1390.65,1206.79 1391.24,1206.79 1391.82,1206.79 1392.41,1206.79 1393,1206.79 1393.58,1206.79 1394.17,1206.79 1394.75,1206.79 1395.34,1206.79 1395.93,1206.79 1396.51,1206.79 1397.1,1206.79 1397.69,1206.79 1398.27,1206.79 1398.86,1206.79 1399.45,1206.79 1400.03,1206.79 1400.62,1206.79 1401.21,1206.79 1401.79,1206.79 1402.38,1206.79 1402.96,1206.79 1403.55,1206.79 1404.14,1206.79 1404.72,1206.79 1405.31,1206.79 1405.9,1206.79 1406.48,1206.79 1407.07,1206.79 1407.66,1206.79 1408.24,1206.79 1408.83,1206.79 1409.42,1206.79 1410,1206.79 1410.59,1206.79 1411.17,1206.79 1411.76,1206.79 1412.35,1206.79 1412.93,1206.79 1413.52,1206.79 1414.11,1206.79 1414.69,1206.79 1415.28,1206.79 1415.87,1206.79 1416.45,1206.79 1417.04,1206.79 1417.63,1206.79 1418.21,1206.79 1418.8,1206.79 1419.38,1206.79 1419.97,1206.79 1420.56,1206.79 1421.14,1206.79 1421.73,1206.79 1422.32,1206.79 1422.9,1206.79 1423.49,1206.79 1424.08,1206.79 1424.66,1206.79 1425.25,1206.79 1425.83,1206.79 1426.42,1206.79 1427.01,1206.79 1427.59,1206.79 1428.18,1206.79 1428.77,1206.79 1429.35,1206.79 1429.94,1206.79 1430.53,1206.79 1431.11,1206.79 1431.7,1206.79 1432.29,1206.79 1432.87,1206.79 1433.46,1206.79 1434.04,1206.79 1434.63,1206.79 1435.22,1206.79 1435.8,1206.79 1436.39,1206.79 1436.98,1206.79 1437.56,1206.79 1438.15,1206.79 1438.74,1206.79 1439.32,1206.79 1439.91,1206.79 1440.5,1206.79 1441.08,1206.79 1441.67,1206.79 1442.25,1206.79 1442.84,1206.79 1443.43,1206.79 1444.01,1206.79 1444.6,1206.79 1445.19,1206.79 1445.77,1206.79 1446.36,1206.79 1446.95,1206.79 1447.53,1206.79 1448.12,1206.79 1448.7,1206.79 1449.29,1206.79 1449.88,1206.79 1450.46,1206.79 1451.05,1206.79 1451.64,1206.79 1452.22,1206.79 1452.81,1206.79 1453.4,1206.79 1453.98,1206.79 1454.57,1206.79 1455.16,1206.79 1455.74,1206.79 1456.33,1206.79 1456.91,1206.79 1457.5,1206.79 1458.09,1206.79 1458.67,1206.79 1459.26,1206.79 1459.85,1206.79 1460.43,1206.79 1461.02,1206.79 1461.61,1206.79 1462.19,1206.79 1462.78,1206.79 1463.37,1206.79 1463.95,1206.79 1464.54,1206.79 1465.12,1206.79 1465.71,1206.79 1466.3,1206.79 1466.88,1206.79 1467.47,1206.79 1468.06,1206.79 1468.64,1206.79 1469.23,1206.79 1469.82,1206.79 1470.4,1206.79 1470.99,1206.79 1471.57,1206.79 1472.16,1206.79 1472.75,1206.79 1473.33,1206.79 1473.92,1206.79 1474.51,1206.79 1475.09,1206.79 1475.68,1206.79 1476.27,1206.79 1476.85,1206.79 1477.44,1206.79 1478.03,1206.79 1478.61,1206.79 1479.2,1206.79 1479.78,1206.79 1480.37,1206.79 1480.96,1206.79 1481.54,1206.79 1482.13,1206.79 1482.72,1206.79 1483.3,1206.79 1483.89,1206.79 1484.48,1206.79 1485.06,1206.79 1485.65,1206.79 1486.24,1206.79 1486.82,1206.79 1487.41,1206.79 1487.99,1206.79 1488.58,1206.79 1489.17,1206.79 1489.75,1206.79 1490.34,1206.79 1490.93,1206.79 1491.51,1206.79 1492.1,1206.79 1492.69,1206.79 1493.27,1206.79 1493.86,1206.79 1494.45,1206.79 1495.03,1206.79 1495.62,1206.79 1496.2,1206.79 1496.79,1206.79 1497.38,1206.79 1497.96,1206.79 1498.55,1206.79 1499.14,1206.79 1499.72,1206.79 1500.31,1206.79 1500.9,1206.79 1501.48,1206.79 1502.07,1206.79 1502.65,1206.79 1503.24,1206.79 1503.83,1206.79 1504.41,1206.79 1505,1206.79 1505.59,1206.79 1506.17,1206.79 1506.76,1206.79 1507.35,1206.79 1507.93,1206.79 1508.52,1206.79 1509.11,1206.79 1509.69,1206.79 1510.28,1206.79 1510.86,1206.79 1511.45,1206.79 1512.04,1206.79 1512.62,1206.79 1513.21,1206.79 1513.8,1206.79 1514.38,1206.79 1514.97,1206.79 1515.56,1206.79 1516.14,1206.79 1516.73,1206.79 1517.32,1206.79 1517.9,1206.79 1518.49,1206.79 1519.07,1206.79 1519.66,1206.79 1520.25,1206.79 1520.83,1206.79 1521.42,1206.79 1522.01,1206.79 1522.59,1206.79 1523.18,1206.79 1523.77,1206.79 1524.35,1206.79 1524.94,1206.79 1525.52,1206.79 1526.11,1206.79 1526.7,1206.79 1527.28,1206.79 1527.87,1206.79 1528.46,1206.79 1529.04,1206.79 1529.63,1206.79 1530.22,1206.79 1530.8,1206.79 1531.39,1206.79 1531.98,1206.79 1532.56,1206.79 1533.15,1206.79 1533.73,1206.79 1534.32,1206.79 1534.91,1206.79 1535.49,1206.79 1536.08,1206.79 1536.67,1206.79 1537.25,1206.79 1537.84,1206.79 1538.43,1206.79 1539.01,1206.79 1539.6,1206.79 1540.19,1206.79 1540.77,1206.79 1541.36,1206.79 1541.94,1206.79 1542.53,1206.79 1543.12,1206.79 1543.7,1206.79 1544.29,1206.79 1544.88,1206.79 1545.46,1206.79 1546.05,1206.79 1546.64,1206.79 1547.22,1206.79 1547.81,1206.79 1548.4,1206.79 1548.98,1206.79 1549.57,1206.79 1550.15,1206.79 1550.74,1206.79 1551.33,1206.79 1551.91,1206.79 1552.5,1206.79 1553.09,1206.79 1553.67,1206.79 1554.26,1206.79 1554.85,1206.79 1555.43,1206.79 1556.02,1206.79 1556.6,1206.79 1557.19,1206.79 1557.78,1206.79 1558.36,1206.79 1558.95,1206.79 1559.54,1206.79 1560.12,1206.79 1560.71,1206.79 1561.3,1206.79 1561.88,1206.79 1562.47,1206.79 1563.06,1206.79 1563.64,1206.79 1564.23,1206.79 1564.81,1206.79 1565.4,1206.79 1565.99,1206.79 1566.57,1206.79 1567.16,1206.79 1567.75,1206.79 1568.33,1206.79 1568.92,1206.79 1569.51,1206.79 1570.09,1206.79 1570.68,1206.79 1571.27,1206.79 1571.85,1206.79 1572.44,1206.79 1573.02,1206.79 1573.61,1206.79 1574.2,1206.79 1574.78,1206.79 1575.37,1206.79 1575.96,1206.79 1576.54,1206.79 1577.13,1206.79 1577.72,1206.79 1578.3,1206.79 1578.89,1206.79 1579.47,1206.79 1580.06,1206.79 1580.65,1206.79 1581.23,1206.79 1581.82,1206.79 1582.41,1206.79 1582.99,1206.79 1583.58,1206.79 1584.17,1206.79 1584.75,1206.79 1585.34,1206.79 1585.93,1206.79 1586.51,1206.79 1587.1,1206.79 1587.68,1206.79 1588.27,1206.79 1588.86,1206.79 1589.44,1206.79 1590.03,1206.79 1590.62,1206.79 1591.2,1206.79 1591.79,1206.79 1592.38,1206.79 1592.96,1206.79 1593.55,1206.79 1594.14,1206.79 1594.72,1206.79 1595.31,1206.79 1595.89,1206.79 1596.48,1206.79 1597.07,1206.79 1597.65,1206.79 1598.24,1206.79 1598.83,1206.79 1599.41,1206.79 1600,1206.79 1600.59,1206.79 1601.17,1206.79 1601.76,1206.79 1602.34,1206.79 1602.93,1206.79 1603.52,1206.79 1604.1,1206.79 1604.69,1206.79 1605.28,1206.79 1605.86,1206.79 1606.45,1206.79 1607.04,1206.79 1607.62,1206.79 1608.21,1206.79 1608.8,1206.79 1609.38,1206.79 1609.97,1206.79 1610.55,1206.79 1611.14,1206.79 1611.73,1206.79 1612.31,1206.79 1612.9,1206.79 1613.49,1206.79 1614.07,1206.79 1614.66,1206.79 1615.25,1206.79 1615.83,1206.79 1616.42,1206.79 1617.01,1206.79 1617.59,1206.79 1618.18,1206.79 1618.76,1206.79 1619.35,1206.79 1619.94,1206.79 1620.52,1206.79 1621.11,1206.79 1621.7,1206.79 1622.28,1206.79 1622.87,1206.79 1623.46,1206.79 1624.04,1206.79 1624.63,1206.79 1625.22,1206.79 1625.8,1206.79 1626.39,1206.79 1626.97,1206.79 1627.56,1206.79 1628.15,1206.79 1628.73,1206.79 1629.32,1206.79 1629.91,1206.79 1630.49,1206.79 1631.08,1206.79 1631.67,1206.79 1632.25,1206.79 1632.84,1206.79 1633.42,1206.79 1634.01,1206.79 1634.6,1206.79 1635.18,1206.79 1635.77,1206.79 1636.36,1206.79 1636.94,1206.79 1637.53,1206.79 1638.12,1206.79 1638.7,1206.79 1639.29,1206.79 1639.88,1206.79 1640.46,1206.79 1641.05,1206.79 1641.63,1206.79 1642.22,1206.79 1642.81,1206.79 1643.39,1206.79 1643.98,1206.79 1644.57,1206.79 1645.15,1206.79 1645.74,1206.79 1646.33,1206.79 1646.91,1206.79 1647.5,1206.79 1648.09,1206.79 1648.67,1206.79 1649.26,1206.79 1649.84,1206.79 1650.43,1206.79 1651.02,1206.79 1651.6,1206.79 1652.19,1206.79 1652.78,1206.79 1653.36,1206.79 1653.95,1206.79 1654.54,1206.79 1655.12,1206.79 1655.71,1206.79 1656.29,1206.79 1656.88,1206.79 1657.47,1206.79 1658.05,1206.79 1658.64,1206.79 1659.23,1206.79 1659.81,1206.79 1660.4,1206.79 1660.99,1206.79 1661.57,1206.79 1662.16,1206.79 1662.75,1206.79 1663.33,1206.79 1663.92,1206.79 1664.5,1206.79 1665.09,1206.79 1665.68,1206.79 1666.26,1206.79 1666.85,1206.79 1667.44,1206.79 1668.02,1206.79 1668.61,1206.79 1669.2,1206.79 1669.78,1206.79 1670.37,1206.79 1670.96,1206.79 1671.54,1206.79 1672.13,1206.79 1672.71,1206.79 1673.3,1206.79 1673.89,1206.79 1674.47,1206.79 1675.06,1206.79 1675.65,1206.79 1676.23,1206.79 1676.82,1206.79 1677.41,1206.79 1677.99,1206.79 1678.58,1206.79 1679.17,1206.79 1679.75,1206.79 1680.34,1206.79 1680.92,1206.79 1681.51,1206.79 1682.1,1206.79 1682.68,1206.79 1683.27,1206.79 1683.86,1206.79 1684.44,1206.79 1685.03,1206.79 1685.62,1206.79 1686.2,1206.79 1686.79,1206.79 1687.37,1206.79 1687.96,1206.79 1688.55,1206.79 1689.13,1206.79 1689.72,1206.79 1690.31,1206.79 1690.89,1206.79 1691.48,1206.79 1692.07,1206.79 1692.65,1206.79 1693.24,1206.79 1693.83,1206.79 1694.41,1206.79 1695,1206.79 1695.58,1206.79 1696.17,1206.79 1696.76,1206.79 1697.34,1206.79 1697.93,1206.79 1698.52,1206.79 1699.1,1206.79 1699.69,1206.79 1700.28,1206.79 1700.86,1206.79 1701.45,1206.79 1702.04,1206.79 1702.62,1206.79 1703.21,1206.79 1703.79,1206.79 1704.38,1206.79 1704.97,1206.79 1705.55,1206.79 1706.14,1206.79 1706.73,1206.79 1707.31,1206.79 1707.9,1206.79 1708.49,1206.79 1709.07,1206.79 1709.66,1206.79 1710.24,1206.79 1710.83,1206.79 1711.42,1206.79 1712,1206.79 1712.59,1206.79 1713.18,1206.79 1713.76,1206.79 1714.35,1206.79 1714.94,1206.79 1715.52,1206.79 1716.11,1206.79 1716.7,1206.79 1717.28,1206.79 1717.87,1206.79 1718.45,1206.79 1719.04,1206.79 1719.63,1206.79 1720.21,1206.79 1720.8,1206.79 1721.39,1206.79 1721.97,1206.79 1722.56,1206.79 1723.15,1206.79 1723.73,1206.79 1724.32,1206.79 1724.91,1206.79 1725.49,1206.79 1726.08,1206.79 1726.66,1206.79 1727.25,1206.79 1727.84,1206.79 1728.42,1206.79 1729.01,1206.79 1729.6,1206.79 1730.18,1206.79 1730.77,1206.79 1731.36,1206.79 1731.94,1206.79 1732.53,1206.79 1733.11,1206.79 1733.7,1206.79 1734.29,1206.79 1734.87,1206.79 1735.46,1206.79 1736.05,1206.79 1736.63,1206.79 1737.22,1206.79 1737.81,1206.79 1738.39,1206.79 1738.98,1206.79 1739.57,1206.79 1740.15,1206.79 1740.74,1206.79 1741.32,1206.79 1741.91,1206.79 1742.5,1206.79 1743.08,1206.79 1743.67,1206.79 1744.26,1206.79 1744.84,1206.79 1745.43,1206.79 1746.02,1206.79 1746.6,1206.79 1747.19,1206.79 1747.78,1206.79 1748.36,1206.79 1748.95,1206.79 1749.53,1206.79 1750.12,1206.79 1750.71,1206.79 1751.29,1206.79 1751.88,1206.79 1752.47,1206.79 1753.05,1206.79 1753.64,1206.79 1754.23,1206.79 1754.81,1206.79 1755.4,1206.79 1755.99,1206.79 1756.57,1206.79 1757.16,1206.79 1757.74,1206.79 1758.33,1206.79 1758.92,1206.79 1759.5,1206.79 1760.09,1206.79 1760.68,1206.79 1761.26,1206.79 1761.85,1206.79 1762.44,1206.79 1763.02,1206.79 1763.61,1206.79 1764.19,1206.79 1764.78,1206.79 1765.37,1206.79 1765.95,1206.79 1766.54,1206.79 1767.13,1206.79 1767.71,1206.79 1768.3,1206.79 1768.89,1206.79 1769.47,1206.79 1770.06,1206.79 1770.65,1206.79 1771.23,1206.79 1771.82,1206.79 1772.4,1206.79 1772.99,1206.79 1773.58,1206.79 1774.16,1206.79 1774.75,1206.79 1775.34,1206.79 1775.92,1206.79 1776.51,1206.79 1777.1,1206.79 1777.68,1206.79 1778.27,1206.79 1778.86,1206.79 1779.44,1206.79 1780.03,1206.79 1780.61,1206.79 1781.2,1206.79 1781.79,1206.79 1782.37,1206.79 1782.96,1206.79 1783.55,1206.79 1784.13,1206.79 1784.72,1206.79 1785.31,1206.79 1785.89,1206.79 1786.48,1206.79 1787.06,1206.79 1787.65,1206.79 1788.24,1206.79 1788.82,1206.79 1789.41,1206.79 1790,1206.79 1790.58,1206.79 1791.17,1206.79 1791.76,1206.79 1792.34,1206.79 1792.93,1206.79 1793.52,1206.79 1794.1,1206.79 1794.69,1206.79 1795.27,1206.79 1795.86,1206.79 1796.45,1206.79 1797.03,1206.79 1797.62,1206.79 1798.21,1206.79 1798.79,1206.79 1799.38,1206.79 1799.97,1206.79 1800.55,1206.79 1801.14,1206.79 1801.73,1206.79 1802.31,1206.79 1802.9,1206.79 1803.48,1206.79 1804.07,1206.79 1804.66,1206.79 1805.24,1206.79 1805.83,1206.79 1806.42,1206.79 1807,1206.79 1807.59,1206.79 1808.18,1206.79 1808.76,1206.79 1809.35,1206.79 1809.94,1206.79 1810.52,1206.79 1811.11,1206.79 1811.69,1206.79 1812.28,1206.79 1812.87,1206.79 1813.45,1206.79 1814.04,1206.79 1814.63,1206.79 1815.21,1206.79 1815.8,1206.79 1816.39,1206.79 1816.97,1206.79 1817.56,1206.79 1818.14,1206.79 1818.73,1206.79 1819.32,1206.79 1819.9,1206.79 1820.49,1206.79 1821.08,1206.79 1821.66,1206.79 1822.25,1206.79 1822.84,1206.79 1823.42,1206.79 1824.01,1206.79 1824.6,1206.79 1825.18,1206.79 1825.77,1206.79 1826.35,1206.79 1826.94,1206.79 1827.53,1206.79 1828.11,1206.79 1828.7,1206.79 1829.29,1206.79 1829.87,1206.79 1830.46,1206.79 1831.05,1206.79 1831.63,1206.79 1832.22,1206.79 1832.81,1206.79 1833.39,1206.79 1833.98,1206.79 1834.56,1206.79 1835.15,1206.79 1835.74,1206.79 1836.32,1206.79 1836.91,1206.79 1837.5,1206.79 1838.08,1206.79 1838.67,1206.79 1839.26,1206.79 1839.84,1206.79 1840.43,1206.79 1841.01,1206.79 1841.6,1206.79 1842.19,1206.79 1842.77,1206.79 1843.36,1206.79 1843.95,1206.79 1844.53,1206.79 1845.12,1206.79 1845.71,1206.79 1846.29,1206.79 1846.88,1206.79 1847.47,1206.79 1848.05,1206.79 1848.64,1206.79 1849.22,1206.79 1849.81,1206.79 1850.4,1206.79 1850.98,1206.79 1851.57,1206.79 1852.16,1206.79 1852.74,1206.79 1853.33,1206.79 1853.92,1206.79 1854.5,1206.79 1855.09,1206.79 1855.68,1206.79 1856.26,1206.79 1856.85,1206.79 1857.43,1206.79 1858.02,1206.79 1858.61,1206.79 1859.19,1206.79 1859.78,1206.79 1860.37,1206.79 1860.95,1206.79 1861.54,1206.79 1862.13,1206.79 1862.71,1206.79 1863.3,1206.79 1863.88,1206.79 1864.47,1206.79 1865.06,1206.79 1865.64,1206.79 1866.23,1206.79 1866.82,1206.79 1867.4,1206.79 1867.99,1206.79 1868.58,1206.79 1869.16,1206.79 1869.75,1206.79 1870.34,1206.79 1870.92,1206.79 1871.51,1206.79 1872.09,1206.79 1872.68,1206.79 1873.27,1206.79 1873.85,1206.79 1874.44,1206.79 1875.03,1206.79 1875.61,1206.79 1876.2,1206.79 1876.79,1206.79 1877.37,1206.79 1877.96,1206.79 1878.55,1206.79 1879.13,1206.79 1879.72,1206.79 1880.3,1206.79 1880.89,1206.79 1881.48,1206.79 1882.06,1206.79 1882.65,1206.79 1883.24,1206.79 1883.82,1206.79 1884.41,1206.79 1885,1206.79 1885.58,1206.79 1886.17,1206.79 1886.76,1206.79 1887.34,1206.79 1887.93,1206.79 1888.51,1206.79 1889.1,1206.79 1889.69,1206.79 1890.27,1206.79 1890.86,1206.79 1891.45,1206.79 1892.03,1206.79 1892.62,1206.79 1893.21,1206.79 1893.79,1206.79 1894.38,1206.79 1894.96,1206.79 1895.55,1206.79 1896.14,1206.79 1896.72,1206.79 1897.31,1206.79 1897.9,1206.79 1898.48,1206.79 1899.07,1206.79 1899.66,1206.79 1900.24,1206.79 1900.83,1206.79 1901.42,1206.79 1902,1206.79 1902.59,1206.79 1903.17,1206.79 1903.76,1206.79 1904.35,1206.79 1904.93,1206.79 1905.52,1206.79 1906.11,1206.79 1906.69,1206.79 1907.28,1206.79 1907.87,1206.79 1908.45,1206.79 1909.04,1206.79 1909.63,1206.79 1910.21,1206.79 1910.8,1206.79 1911.38,1206.79 1911.97,1206.79 1912.56,1206.79 1913.14,1206.79 1913.73,1206.79 1914.32,1206.79 1914.9,1206.79 1915.49,1206.79 1916.08,1206.79 1916.66,1206.79 1917.25,1206.79 1917.83,1206.79 1918.42,1206.79 1919.01,1206.79 1919.59,1206.79 1920.18,1206.79 1920.77,1206.79 1921.35,1206.79 1921.94,1206.79 1922.53,1206.79 1923.11,1206.79 1923.7,1206.79 1924.29,1206.79 1924.87,1206.79 1925.46,1206.79 1926.04,1206.79 1926.63,1206.79 1927.22,1206.79 1927.8,1206.79 1928.39,1206.79 1928.98,1206.79 1929.56,1206.79 1930.15,1206.79 1930.74,1206.79 1931.32,1206.79 1931.91,1206.79 1932.5,1206.79 1933.08,1206.79 1933.67,1206.79 1934.25,1206.79 1934.84,1206.79 1935.43,1206.79 1936.01,1206.79 1936.6,1206.79 1937.19,1206.79 1937.77,1206.79 1938.36,1206.79 1938.95,1206.79 1939.53,1206.79 1940.12,1206.79 1940.71,1206.79 1941.29,1206.79 1941.88,1206.79 1942.46,1206.79 1943.05,1206.79 1943.64,1206.79 1944.22,1206.79 1944.81,1206.79 1945.4,1206.79 1945.98,1206.79 1946.57,1206.79 1947.16,1206.79 1947.74,1206.79 1948.33,1206.79 1948.91,1206.79 1949.5,1206.79 1950.09,1206.79 1950.67,1206.79 1951.26,1206.79 1951.85,1206.79 1952.43,1206.79 1953.02,1206.79 1953.61,1206.79 1954.19,1206.79 1954.78,1206.79 1955.37,1206.79 1955.95,1206.79 1956.54,1206.79 1957.12,1206.79 1957.71,1206.79 1958.3,1206.79 1958.88,1206.79 1959.47,1206.79 1960.06,1206.79 1960.64,1206.79 1961.23,1206.79 1961.82,1206.79 1962.4,1206.79 1962.99,1206.79 1963.58,1206.79 1964.16,1206.79 1964.75,1206.79 1965.33,1206.79 1965.92,1206.79 1966.51,1206.79 1967.09,1206.79 1967.68,1206.79 1968.27,1206.79 1968.85,1206.79 1969.44,1206.79 1970.03,1206.79 1970.61,1206.79 1971.2,1206.79 1971.78,1206.79 1972.37,1206.79 1972.96,1206.79 1973.54,1206.79 1974.13,1206.79 1974.72,1206.79 1975.3,1206.79 1975.89,1206.79 1976.48,1206.79 1977.06,1206.79 1977.65,1206.79 1978.24,1206.79 1978.82,1206.79 1979.41,1206.79 1979.99,1206.79 1980.58,1206.79 1981.17,1206.79 1981.75,1206.79 1982.34,1206.79 1982.93,1206.79 1983.51,1206.79 1984.1,1206.79 1984.69,1206.79 1985.27,1206.79 1985.86,1206.79 1986.45,1206.79 1987.03,1206.79 1987.62,1206.79 1988.2,1206.79 1988.79,1206.79 1989.38,1206.79 1989.96,1206.79 1990.55,1206.79 1991.14,1206.79 1991.72,1206.79 1992.31,1206.79 1992.9,1206.79 1993.48,1206.79 1994.07,1206.79 1994.65,1206.79 1995.24,1206.79 1995.83,1206.79 1996.41,1206.79 1997,1206.79 1997.59,1206.79 1998.17,1206.79 1998.76,1206.79 1999.35,1206.79 1999.93,1206.79 2000.52,1206.79 2001.11,1206.79 2001.69,1206.79 2002.28,1206.79 2002.86,1206.79 2003.45,1206.79 2004.04,1206.79 2004.62,1206.79 2005.21,1206.79 2005.8,1206.79 2006.38,1206.79 2006.97,1206.79 2007.56,1206.79 2008.14,1206.79 2008.73,1206.79 2009.32,1206.79 2009.9,1206.79 2010.49,1206.79 2011.07,1206.79 2011.66,1206.79 2012.25,1206.79 2012.83,1206.79 2013.42,1206.79 2014.01,1206.79 2014.59,1206.79 2015.18,1206.79 2015.77,1206.79 2016.35,1206.79 2016.94,1206.79 2017.53,1206.79 2018.11,1206.79 2018.7,1206.79 2019.28,1206.79 2019.87,1206.79 2020.46,1206.79 2021.04,1206.79 2021.63,1206.79 2022.22,1206.79 2022.8,1206.79 2023.39,1206.79 2023.98,1206.79 2024.56,1206.79 2025.15,1206.79 2025.73,1206.79 2026.32,1206.79 2026.91,1206.79 2027.49,1206.79 2028.08,1206.79 2028.67,1206.79 2029.25,1206.79 2029.84,1206.79 2030.43,1206.79 2031.01,1206.79 2031.6,1206.79 2032.19,1206.79 2032.77,1206.79 2033.36,1206.79 2033.94,1206.79 2034.53,1206.79 2035.12,1206.79 2035.7,1206.79 2036.29,1206.79 2036.88,1206.79 2037.46,1206.79 2038.05,1206.79 2038.64,1206.79 2039.22,1206.79 2039.81,1206.79 2040.4,1206.79 2040.98,1206.79 2041.57,1206.79 2042.15,1206.79 2042.74,1206.79 2043.33,1206.79 2043.91,1206.79 2044.5,1206.79 2045.09,1206.79 2045.67,1206.79 2046.26,1206.79 2046.85,1206.79 2047.43,1206.79 2048.02,1206.79 2048.6,1206.79 2049.19,1206.79 2049.78,1206.79 2050.36,1206.79 2050.95,1206.79 2051.54,1206.79 2052.12,1206.79 2052.71,1206.79 2053.3,1206.79 2053.88,1206.79 2054.47,1206.79 2055.06,1206.79 2055.64,1206.79 2056.23,1206.79 2056.81,1206.79 2057.4,1206.79 2057.99,1206.79 2058.57,1206.79 2059.16,1206.79 2059.75,1206.79 2060.33,1206.79 2060.92,1206.79 2061.51,1206.79 2062.09,1206.79 2062.68,1206.79 2063.27,1206.79 2063.85,1206.79 2064.44,1206.79 2065.02,1206.79 2065.61,1206.79 2066.2,1206.79 2066.78,1206.79 2067.37,1206.79 2067.96,1206.79 2068.54,1206.79 2069.13,1206.79 2069.72,1206.79 2070.3,1206.79 2070.89,1206.79 2071.48,1206.79 2072.06,1206.79 2072.65,1206.79 2073.23,1206.79 2073.82,1206.79 2074.41,1206.79 2074.99,1206.79 2075.58,1206.79 2076.17,1206.79 2076.75,1206.79 2077.34,1206.79 2077.93,1206.79 2078.51,1206.79 2079.1,1206.79 2079.68,1206.79 2080.27,1206.79 2080.86,1206.79 2081.44,1206.79 2082.03,1206.79 2082.62,1206.79 2083.2,1206.79 2083.79,1206.79 2084.38,1206.79 2084.96,1206.79 2085.55,1206.79 2086.14,1206.79 2086.72,1206.79 2087.31,1206.79 2087.89,1206.79 2088.48,1206.79 2089.07,1206.79 2089.65,1206.79 2090.24,1206.79 2090.83,1206.79 2091.41,1206.79 2092,1206.79 2092.59,1206.79 2093.17,1206.79 2093.76,1206.79 2094.35,1206.79 2094.93,1206.79 2095.52,1206.79 2096.1,1206.79 2096.69,1206.79 2097.28,1206.79 2097.86,1206.79 2098.45,1206.79 2099.04,1206.79 2099.62,1206.79 2100.21,1206.79 2100.8,1206.79 2101.38,1206.79 2101.97,1206.79 2102.55,1206.79 2103.14,1206.79 2103.73,1206.79 2104.31,1206.79 2104.9,1206.79 2105.49,1206.79 2106.07,1206.79 2106.66,1206.79 2107.25,1206.79 2107.83,1206.79 2108.42,1206.79 2109.01,1206.79 2109.59,1206.79 2110.18,1206.79 2110.76,1206.79 2111.35,1206.79 2111.94,1206.79 2112.52,1206.79 2113.11,1206.79 2113.7,1206.79 2114.28,1206.79 2114.87,1206.79 2115.46,1206.79 2116.04,1206.79 2116.63,1206.79 2117.22,1206.79 2117.8,1206.79 2118.39,1206.79 2118.97,1206.79 2119.56,1206.79 2120.15,1206.79 2120.73,1206.79 2121.32,1206.79 2121.91,1206.79 2122.49,1206.79 2123.08,1206.79 2123.67,1206.79 2124.25,1206.79 2124.84,1206.79 2125.42,1206.79 2126.01,1206.79 2126.6,1206.79 2127.18,1206.79 2127.77,1206.79 2128.36,1206.79 2128.94,1206.79 2129.53,1206.79 2130.12,1206.79 2130.7,1206.79 2131.29,1206.79 2131.88,1206.79 2132.46,1206.79 2133.05,1206.79 2133.63,1206.79 2134.22,1206.79 2134.81,1206.79 2135.39,1206.79 2135.98,1206.79 2136.57,1206.79 2137.15,1206.79 2137.74,1206.79 2138.33,1206.79 2138.91,1206.79 2139.5,1206.79 2140.09,1206.79 2140.67,1206.79 2141.26,1206.79 2141.84,1206.79 2142.43,1206.79 2143.02,1206.79 2143.6,1206.79 2144.19,1206.79 2144.78,1206.79 2145.36,1206.79 2145.95,1206.79 2146.54,1206.79 2147.12,1206.79 2147.71,1206.79 2148.3,1206.79 2148.88,1206.79 2149.47,1206.79 2150.05,1206.79 2150.64,1206.79 2151.23,1206.79 2151.81,1206.79 2152.4,1206.79 2152.99,1206.79 2153.57,1206.79 2154.16,1206.79 2154.75,1206.79 2155.33,1206.79 2155.92,1206.79 2156.5,1206.79 2157.09,1206.79 2157.68,1206.79 2158.26,1206.79 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.12,1189.1 1400.61,899.083 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.06 985.439,1189.1 2158.26,1189.1 2158.26,1224.06 985.439,1224.06 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip803\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip803)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2674.62 162.673,-3834.09 163.232,-4940.99 163.792,-5977.74 164.351,-6876.26 164.91,-7720.34 165.469,-8487.2 166.029,-9160.24 166.588,-8700.74 167.147,-8340.78 167.706,-8967.01 168.266,-9517.48 168.825,-10010.6 169.384,-10450 169.943,-10119.6 170.503,-10496.8 171.062,-10828.8 171.621,-11127.6 172.18,-11377.5 172.74,-11590.6 173.299,-11269.2 173.858,-11431 174.417,-11555.7 174.977,-11654 175.536,-11349.6 176.095,-11422.3 176.655,-11465.1 177.214,-11170.6 177.773,-10885.9 178.332,-10889.3 178.892,-10880.8 179.451,-10848.7 180.01,-10798.6 180.569,-10742 181.129,-10665.5 181.688,-10581.2 182.247,-10293.9 182.806,-10019.6 183.366,-9748.11 183.925,-9326.16 184.484,-8927.08 185.043,-8823.27 185.603,-8717.58 186.162,-8475.19 186.721,-8347.48 187.28,-8211.29 187.84,-8081.32 188.399,-7842.04 188.958,-7703.99 189.517,-7286.77 190.077,-7156.99 190.636,-7029.96 191.195,-6818.51 191.754,-6610.55 192.314,-6396.11 192.873,-6041.51 193.432,-5833.11 193.991,-5697.95 194.551,-5509.6 195.11,-5316.35 195.669,-5196.16 196.228,-5073.72 196.788,-4789.54 197.347,-4630.19 197.906,-4519.85 198.465,-4405.09 199.025,-4248.53 199.584,-3957.33 200.143,-3815.25 200.702,-3672.11 201.262,-3409.2 201.821,-3280.26 202.38,-3116.47 202.939,-2963.39 203.499,-2846.32 204.058,-2764.56 204.617,-2620.82 205.176,-2477.15 205.736,-2274.19 206.295,-2141.3 206.854,-2081.66 207.413,-1983.22 207.973,-1831.36 208.532,-1740.9 209.091,-1653.96 209.65,-1515.11 210.21,-1436.43 210.769,-1358.36 211.328,-1222.43 211.887,-1151.36 212.447,-1105.93 213.006,-1036.58 213.565,-1021.88 214.124,-922.186 214.684,-856.086 215.243,-789.696 215.802,-749.369 216.361,-663.138 216.921,-628.466 217.48,-565.794 218.039,-507.906 218.598,-408.482 219.158,-358.335 219.717,-332.313 220.276,-282.895 220.835,-212.774 221.395,-166.796 221.954,-100.04 222.513,-37.8742 223.072,-21.9272 223.632,17.2612 224.191,33.7524 224.75,92.8051 225.309,108.67 225.869,191.241 226.428,205.337 226.987,218.427 227.546,256.671 228.106,289.821 228.665,320.319 229.224,349.248 229.783,420.91 230.343,449.795 230.902,497.661 231.461,542.329 232.02,567.583 232.58,588.942 233.139,626.693 233.698,623.647 234.257,665.496 234.817,683.074 235.376,737.883 235.935,773.046 236.494,750.621 237.054,769.46 237.613,782.536 238.172,797.478 238.731,812.087 239.291,809.258 239.85,804.731 240.409,782.531 240.968,797.119 241.528,798.086 242.087,796.204 242.646,813.406 243.205,832.132 243.765,828.859 244.324,845.035 244.883,844.215 245.442,877.742 246.002,892.727 246.561,905.517 247.12,935.946 247.679,931.422 248.239,949.048 248.798,961.495 249.357,972.473 249.916,1001.53 250.476,1011.81 251.035,1022.94 251.594,1017.35 252.153,1049.49 252.713,1006.09 253.272,1019.13 253.831,1018.36 254.39,1011.98 254.95,1009.48 255.509,1020 256.068,1033.93 256.627,1031.18 257.187,1059.76 257.746,1088.41 258.305,1113.38 258.864,1152.48 259.424,1138.89 259.983,1129.5 260.542,1120.3 261.101,1129.91 261.661,1137.62 262.22,1128.7 262.779,1102.71 263.338,1128.79 263.898,1149.97 264.457,1118.36 265.016,1106.66 265.575,1097.88 266.135,1120.28 266.694,1181.43 267.253,1149.64 267.812,1188.79 268.372,1177.46 268.931,1163.02 269.49,1150.11 270.049,1153.22 270.609,1123.8 271.168,1097.04 271.727,1083.96 272.286,1127.13 272.846,1132.73 273.405,1136.69 273.964,1108.62 274.523,1098.45 275.083,1073.22 275.642,1063.67 276.201,1057.61 276.76,1070.4 277.32,1094.07 277.879,1087.1 278.438,1096.02 278.997,1120.49 279.557,1127.6 280.116,1147.23 280.675,1151.96 281.234,1160.39 281.794,1169.25 282.353,1154.94 282.912,1142.94 283.471,1132.02 284.031,1138.3 284.59,1144.03 285.149,1149.02 285.708,1119.72 286.268,1079.84 286.827,1122.37 287.386,1112.07 287.945,1103.33 288.505,1175.2 289.064,1197.22 289.623,1229.96 290.182,1168.68 290.742,1172.47 291.301,1208.02 291.86,1195.08 292.419,1180.75 292.979,1165.12 293.538,1152.15 294.097,1137.2 294.656,1126.11 295.216,1114.48 295.775,1121.64 296.334,1141.77 296.893,1132.8 297.453,1105.66 298.012,1112.48 298.571,1101.06 299.13,1091.37 299.69,1081.32 300.249,1041.54 300.808,1035.31 301.368,1055.27 301.927,1047.53 302.486,1037.4 303.045,1029.78 303.605,1042.42 304.164,1051.39 304.723,1028.79 305.282,1021.25 305.842,1012.23 306.401,1054.87 306.96,1046.49 307.519,1042.58 308.079,1016.3 308.638,993.954 309.197,988.476 309.756,967.373 310.316,962.774 310.875,925.298 311.434,941.213 311.993,918.455 312.553,952.421 313.112,933.818 313.671,947.251 314.23,943.979 314.79,959.238 315.349,973.395 315.908,970.022 316.467,949.902 317.027,948.285 317.586,913.593 318.145,912.161 318.704,946.796 319.264,944.95 319.823,956.721 320.382,953.041 320.941,964.896 321.501,991.449 322.06,989.471 322.619,982.652 323.178,963.398 323.738,956.527 324.297,951.771 324.856,980.385 325.415,994.598 325.975,984.553 326.534,977.068 327.093,968.138 327.652,947.769 328.212,945.458 328.771,972.279 329.33,964.793 329.889,964.739 330.449,963.038 331.008,959.499 331.567,970.164 332.126,963.428 332.686,1008.21 333.245,1034.43 333.804,1008.93 334.363,983.957 334.923,957.731 335.482,1002.97 336.041,962.013 336.6,939.495 337.16,985.483 337.719,975.718 338.278,967.169 338.837,978.353 339.397,938.382 339.956,933.05 340.515,960.51 341.074,923.071 341.634,903.018 342.193,912.704 342.752,942.853 343.311,952.941 343.871,947.783 344.43,925.186 344.989,935.605 345.548,915.513 346.108,894.239 346.667,844.118 347.226,846.627 347.785,863.617 348.345,810.53 348.904,813.3 349.463,812.406 350.022,832.094 350.582,817.696 351.141,818.102 351.7,806.759 352.259,809.45 352.819,828.671 353.378,831.028 353.937,831.456 354.496,832.959 355.056,836.362 355.615,855.04 356.174,856.476 356.733,871.975 357.293,837.908 357.852,835.091 358.411,864.343 358.97,881.817 359.53,876.852 360.089,889.778 360.648,886.975 361.207,896.798 361.767,895.505 362.326,877.551 362.885,893.949 363.444,887.384 364.004,902.179 364.563,966.126 365.122,957.042 365.681,964.282 366.241,941.391 366.8,946.548 367.359,955.849 367.918,960.509 368.478,938.912 369.037,918.478 369.596,895.757 370.155,909.336 370.715,908.918 371.274,938.188 371.833,915.549 372.392,926.313 372.952,953.225 373.511,945.207 374.07,958.99 374.629,921.95 375.189,897.908 375.748,891.55 376.307,885.105 376.866,896.936 377.426,888.34 377.985,882.349 378.544,876.255 379.103,890.326 379.663,853.645 380.222,816.701 380.781,834.268 381.34,846.662 381.9,877.425 382.459,889.192 383.018,928.774 383.577,906.857 384.137,918.319 384.696,883.703 385.255,875.736 385.814,853.491 386.374,833.369 386.933,848.085 387.492,828.901 388.051,827.35 388.611,877.693 389.17,840.62 389.729,835.682 390.288,833.794 390.848,862.345 391.407,857.949 391.966,851.41 392.525,866.003 393.085,844.943 393.644,844.624 394.203,859.291 394.762,875.134 395.322,856.716 395.881,872.22 396.44,851.778 396.999,847.245 397.559,875.763 398.118,871.2 398.677,880.541 399.236,877.127 399.796,898.707 400.355,894.578 400.914,888.17 401.473,882.125 402.033,876.168 402.592,883.713 403.151,876.732 403.71,903.646 404.27,876.887 404.829,901.048 405.388,895.909 405.947,907.714 406.507,915.967 407.066,937.41 407.625,898.891 408.184,875.285 408.744,856.12 409.303,851.96 409.862,830.234 410.421,841.648 410.981,843.306 411.54,839.951 412.099,803.63 412.658,785.454 413.218,802.885 413.777,800.903 414.336,815.21 414.895,809.034 415.455,802.22 416.014,780.346 416.573,781.604 417.132,796.937 417.692,797.813 418.251,798.77 418.81,796.268 419.369,812.613 419.929,825.069 420.488,820.842 421.047,799.735 421.606,799.078 422.166,778.753 422.725,794.396 423.284,742.163 423.843,744.846 424.403,762.69 424.962,765.594 425.521,752.478 426.08,720.999 426.64,738.418 427.199,705.693 427.758,690.915 428.318,696.405 428.877,743.75 429.436,786.815 429.995,771.177 430.555,773.19 431.114,804.506 431.673,786.703 432.232,785.176 432.792,766.517 433.351,784.259 433.91,815.516 434.469,795.406 435.029,744.122 435.588,728.339 436.147,746.021 436.706,763.525 437.266,761.107 437.825,780.528 438.384,778.964 438.943,777.45 439.503,759.869 440.062,761.341 440.621,792.279 441.18,757.176 441.74,760.32 442.299,749.874 442.858,718.147 443.417,736.998 443.977,751.196 444.536,751.173 445.095,720.777 445.654,706.596 446.214,660.489 446.773,666.794 447.332,673.213 447.891,677.062 448.451,716.324 449.01,768.519 449.569,738.464 450.128,772.288 450.688,724.361 451.247,714.523 451.806,733.28 452.365,765.713 452.925,764.266 453.484,779.453 454.043,778.537 454.602,762.857 455.162,762.694 455.721,762.194 456.28,763.696 456.839,778.37 457.399,744.954 457.958,746.296 458.517,762.4 459.076,797.653 459.636,781.808 460.195,762.753 460.754,806.829 461.313,819.387 461.873,818.548 462.432,829.224 462.991,808.603 463.55,824.521 464.11,822.645 464.669,799.198 465.228,810.539 465.787,838.974 466.347,847.139 466.906,875.41 467.465,867.672 468.024,844.328 468.584,823.161 469.143,815.863 469.702,842.944 470.261,839.716 470.821,848.754 471.38,842.936 471.939,840.062 472.498,821.619 473.058,820.285 473.617,798.679 474.176,814.676 474.735,779.866 475.295,697.844 475.854,698.218 476.413,700.636 476.972,721.5 477.532,707.639 478.091,692.101 478.65,679.456 479.209,697.6 479.769,714.46 480.328,734.585 480.887,753.69 481.446,755.018 482.006,740.672 482.565,724.361 483.124,695.017 483.683,647.263 484.243,602.057 484.802,609.491 485.361,631.978 485.92,634.049 486.48,674.11 487.039,680.556 487.598,702.645 488.157,705.373 488.717,708.006 489.276,644.228 489.835,616.105 490.394,625.246 490.954,650.138 491.513,654.448 492.072,641.033 492.631,616.093 493.191,623.393 493.75,644.978 494.309,646.796 494.868,647.587 495.428,604.756 495.987,609.971 496.546,602.614 497.105,639.573 497.665,644.972 498.224,619.125 498.783,611.74 499.342,636.387 499.902,641.114 500.461,646.955 501.02,672.701 501.579,694.445 502.139,697.326 502.698,716.926 503.257,734.071 503.816,735.571 504.376,782.234 504.935,778.396 505.494,775.412 506.053,760.815 506.613,726.198 507.172,759.72 507.731,756.843 508.29,754.501 508.85,770.768 509.409,800.144 509.968,812.425 510.527,779.066 511.087,808.483 511.646,804.232 512.205,818.399 512.764,812.568 513.324,827.134 513.883,835.71 514.442,793.449 515.001,770.197 515.561,766.691 516.12,779.586 516.679,777.442 517.238,775.157 517.798,758.379 518.357,757.943 518.916,772.787 519.475,805.109 520.035,817.012 520.594,826.698 521.153,822.422 521.712,833.607 522.272,847.084 522.831,825.205 523.39,819.965 523.949,834.684 524.509,842.888 525.068,851.745 525.627,863.371 526.186,853.922 526.746,879.451 527.305,857.912 527.864,821.215 528.423,816.32 528.983,810.832 529.542,791.632 530.101,754.74 530.66,766.842 531.22,783.948 531.779,810.474 532.338,792.72 532.897,758.239 533.457,755.737 534.016,742.356 534.575,740.775 535.134,725.629 535.694,738.947 536.253,771.133 536.812,767.732 537.371,764.657 537.931,763.383 538.49,764.151 539.049,758.326 539.608,740.91 540.168,739.436 540.727,703.386 541.286,699.581 541.845,695.764 542.405,713.184 542.964,695.372 543.523,713.483 544.082,713.289 544.642,713.173 545.201,682.397 545.76,687.594 546.319,707.638 546.879,678.166 547.438,744.458 547.997,726.653 548.556,711.164 549.116,743.254 549.675,742.615 550.234,723.056 550.793,706.318 551.353,738.377 551.912,731.75 552.471,746.757 553.031,747.846 553.59,745.838 554.149,728.246 554.708,744.512 555.268,745.779 555.827,778.917 556.386,806.573 556.945,848.208 557.505,839.995 558.064,832.212 558.623,858.374 559.182,831.581 559.742,822.49 560.301,848.585 560.86,871.102 561.419,860.157 561.979,865.14 562.538,870.224 563.097,841.82 563.656,780.9 564.216,795.047 564.775,822.335 565.334,815.615 565.893,823.161 566.453,816.645 567.012,795.5 567.571,790.051 568.13,782.289 568.69,744.176 569.249,760.356 569.808,772.706 570.367,757.426 570.927,721.812 571.486,718.981 572.045,732.652 572.604,745.48 573.164,745.661 573.723,727.92 574.282,712.706 574.841,692.261 575.401,692.653 575.96,648.543 576.519,669.084 577.078,670.894 577.638,656.26 578.197,605.181 578.756,577.34 579.315,603.082 579.875,625.003 580.434,633.097 580.993,622.118 581.552,613.827 582.112,621.511 582.671,627.799 583.23,614.459 583.789,619.691 584.349,622.107 584.908,626.409 585.467,584.179 586.026,607.333 586.586,630.216 587.145,663.571 587.704,668.279 588.263,640.095 588.823,629.64 589.382,635.424 589.941,625.429 590.5,596.927 591.06,616.326 591.619,604.588 592.178,628.428 592.737,618.408 593.297,605.4 593.856,596.212 594.415,581.891 594.974,605.802 595.534,625.129 596.093,617.203 596.652,621.653 597.211,609.532 597.771,646.083 598.33,666.251 598.889,655.534 599.448,656.009 600.008,663.032 600.567,665.148 601.126,662.878 601.685,683.946 602.245,703.792 602.804,705.196 603.363,720.291 603.922,718.827 604.482,703.331 605.041,702.535 605.6,704.445 606.159,706.487 606.719,704.214 607.278,704.529 607.837,687.325 608.396,669.981 608.956,673.104 609.515,674.653 610.074,674.67 610.633,676.365 611.193,663.928 611.752,649.956 612.311,637.299 612.87,659.464 613.43,678.804 613.989,683.351 614.548,682.666 615.107,715.106 615.667,714.281 616.226,779.351 616.785,790.817 617.344,786.436 617.904,765.59 618.463,777.322 619.022,772.971 619.581,769.119 620.141,779.356 620.7,760.669 621.259,761.453 621.818,738.114 622.378,723.901 622.937,671.005 623.496,687.994 624.055,670.177 624.615,671.253 625.174,676.774 625.733,677.779 626.292,694.401 626.852,699.249 627.411,698.488 627.97,716.309 628.529,730.577 629.089,732.778 629.648,730.574 630.207,727.416 630.766,741.545 631.326,739.942 631.885,772.758 632.444,765.896 633.003,748.78 633.563,765.224 634.122,809.785 634.681,804.002 635.24,781.037 635.8,745.921 636.359,691.886 636.918,706.923 637.477,702.025 638.037,699.911 638.596,716.995 639.155,745.89 639.714,741.94 640.274,755.545 640.833,765.359 641.392,761.719 641.951,740.408 642.511,723.545 643.07,720.054 643.629,687.762 644.188,723.516 644.748,738.1 645.307,735.549 645.866,715.713 646.425,730.176 646.985,713.596 647.544,731.305 648.103,747.502 648.662,710.826 649.222,714.05 649.781,731.902 650.34,680.446 650.899,685.489 651.459,654.561 652.018,669.078 652.577,687.227 653.136,704.042 653.696,718.494 654.255,700.304 654.814,700.17 655.373,716.449 655.933,731.771 656.492,766.617 657.051,810.397 657.61,821.709 658.17,799.253 658.729,761.816 659.288,742.596 659.847,773.615 660.407,740.07 660.966,719.787 661.525,716.771 662.084,733.85 662.644,719.952 663.203,686.301 663.762,734.637 664.321,734.54 664.881,717.244 665.44,701.851 665.999,670.928 666.558,670.807 667.118,656.138 667.677,657.295 668.236,675.259 668.795,705.427 669.355,702.616 669.914,717.433 670.473,734.336 671.032,700.647 671.592,701.794 672.151,685.358 672.71,733.689 673.269,715.614 673.829,715.281 674.388,711.612 674.947,792.907 675.506,772.865 676.066,800.687 676.625,759.988 677.184,726.536 677.743,724.803 678.303,688.734 678.862,704.774 679.421,703.705 679.981,687.657 680.54,671.631 681.099,738.307 681.658,739.032 682.218,735.106 682.777,730.19 683.336,761.654 683.895,741.347 684.455,721.534 685.014,703.906 685.573,685.526 686.132,701.96 686.692,672.078 687.251,689.216 687.81,672.105 688.369,673.098 688.929,671.419 689.488,708.193 690.047,692.837 690.606,707.24 691.166,707.349 691.725,690.622 692.284,671.364 692.843,671.911 693.403,606.36 693.962,609.064 694.521,616.423 695.08,619.595 695.64,624.548 696.199,612.594 696.758,617.708 697.317,622.188 697.877,642.861 698.436,631.227 698.995,636.07 699.554,657.815 700.114,660.732 700.673,618.011 701.232,627 701.791,662.352 702.351,679.697 702.91,679.458 703.469,682.372 704.028,680.555 704.588,668.876 705.147,668.277 705.706,651.375 706.265,653.738 706.825,620.338 707.384,640.828 707.943,627.637 708.502,630.273 709.062,633.876 709.621,654.124 710.18,640.786 710.739,627.577 711.299,600.649 711.858,637.637 712.417,674.958 712.976,676.49 713.536,677.856 714.095,696.738 714.654,728.361 715.213,697.459 715.773,679.879 716.332,683.834 716.891,684.238 717.45,683.413 718.01,669.768 718.569,671.722 719.128,671.678 719.687,674.072 720.247,672.439 720.806,641.953 721.365,645.267 721.924,627.44 722.484,663.75 723.043,694.374 723.602,662.615 724.161,680.191 724.721,668.232 725.28,687.809 725.839,670.601 726.398,660.041 726.958,676.199 727.517,645.373 728.076,613.444 728.635,601.839 729.195,575.368 729.754,599.452 730.313,604.835 730.872,643.992 731.432,644.009 731.991,677.723 732.55,680.488 733.109,681.185 733.669,697.919 734.228,682.808 734.787,731.399 735.346,731.351 735.906,732.2 736.465,711.954 737.024,709.354 737.583,705.526 738.143,735.541 738.702,731.189 739.261,713.778 739.82,699.695 740.38,731.855 740.939,747.89 741.498,778.731 742.057,771.863 742.617,770.686 743.176,784.834 743.735,780.018 744.294,788.776 744.854,749.35 745.413,748.498 745.972,775.082 746.531,772.874 747.091,770.501 747.65,780.598 748.209,759.155 748.768,755.288 749.328,737.13 749.887,734.445 750.446,746.593 751.005,744.309 751.565,754.146 752.124,747.959 752.683,712.435 753.242,744.156 753.802,745.984 754.361,756.856 754.92,738.401 755.479,737.324 756.039,748.614 756.598,714.637 757.157,699.206 757.716,699.018 758.276,681.387 758.835,728.325 759.394,661.408 759.953,662.697 760.513,665.698 761.072,682.03 761.631,682.058 762.19,686.912 762.75,703.557 763.309,703.764 763.868,699.512 764.427,746.484 764.987,731.244 765.546,712.289 766.105,708.086 766.664,705.087 767.224,670.037 767.783,669.653 768.342,685.831 768.901,669.892 769.461,669.609 770.02,639.157 770.579,638.554 771.138,643.402 771.698,646.989 772.257,662.921 772.816,631.229 773.375,633.834 773.935,622.563 774.494,643.15 775.053,661.434 775.612,663.688 776.172,660.762 776.731,662.001 777.29,663.824 777.849,647.977 778.409,651.275 778.968,635.627 779.527,654.701 780.086,657.327 780.646,643.744 781.205,676.3 781.764,693.969 782.323,693.494 782.883,724.146 783.442,752.51 784.001,747.966 784.56,744.527 785.12,764.17 785.679,762.257 786.238,758.092 786.797,739.725 787.357,748.611 787.916,699.723 788.475,732.063 789.034,647.726 789.594,668.442 790.153,656.063 790.712,624.764 791.271,645.197 791.831,692.177 792.39,722.275 792.949,720.726 793.508,733.238 794.068,716.771 794.627,715.366 795.186,711.193 795.745,743.208 796.305,705.032 796.864,719.49 797.423,702.131 797.982,705.183 798.542,689.097 799.101,674.946 799.66,660.806 800.219,662.764 800.779,645.561 801.338,634.304 801.897,636.674 802.456,619.842 803.016,593.676 803.575,616.285 804.134,652.169 804.693,650.252 805.253,669.692 805.812,671.988 806.371,689.272 806.931,719.19 807.49,716.54 808.049,728.512 808.608,726.562 809.168,742.098 809.727,743.804 810.286,707.358 810.845,724.627 811.405,676.206 811.964,678.505 812.523,665.437 813.082,649.98 813.642,634.549 814.201,620.823 814.76,621.517 815.319,656.431 815.879,670.889 816.438,686.124 816.997,655.84 817.556,637.938 818.116,623.474 818.675,612.653 819.234,619.331 819.793,624.975 820.353,629.577 820.912,659.924 821.471,608.647 822.03,598.425 822.59,640.762 823.149,640.561 823.708,631.051 824.267,632.539 824.827,621.748 825.386,638.651 825.945,671.201 826.504,655.139 827.064,655.214 827.623,621.544 828.182,626.071 828.741,616.973 829.301,589.997 829.86,596.179 830.419,614.729 830.978,635.051 831.538,670.021 832.097,688.348 832.656,706.198 833.215,720.575 833.775,686.832 834.334,688.011 834.893,688.165 835.452,691.022 836.012,658.896 836.571,628.906 837.13,630.787 837.689,637.411 838.249,655.633 838.808,645.182 839.367,640.834 839.926,643.138 840.486,676.097 841.045,658.671 841.604,642.736 842.163,642.612 842.723,674.565 843.282,706.516 843.841,720.447 844.4,704.318 844.96,706.894 845.519,690.729 846.078,739.539 846.637,771.842 847.197,768.706 847.756,731.475 848.315,748.632 848.874,732.523 849.434,731.558 849.993,732.46 850.552,700.32 851.111,698.555 851.671,698.76 852.23,718.948 852.789,668.846 853.348,685.398 853.908,700.063 854.467,714.284 855.026,716.717 855.585,730.595 856.145,778.942 856.704,806.084 857.263,819.47 857.822,811.512 858.382,773.096 858.941,770.159 859.5,749.651 860.059,730.677 860.619,714.756 861.178,729.684 861.737,743.977 862.296,735.406 862.856,765.13 863.415,742.354 863.974,728.823 864.533,707.748 865.093,692.568 865.652,693.245 866.211,711.166 866.77,728.214 867.33,743.836 867.889,756.502 868.448,741.409 869.007,754.715 869.567,752.845 870.126,702.612 870.685,735.566 871.244,713.905 871.804,694.835 872.363,711.826 872.922,710.639 873.481,708.392 874.041,722.229 874.6,685.474 875.159,685.595 875.718,702.36 876.278,667.115 876.837,697.09 877.396,712.151 877.955,679.843 878.515,647.851 879.074,647.977 879.633,662.859 880.192,667.22 880.752,668.396 881.311,685.401 881.87,686.242 882.429,667.435 882.989,650.909 883.548,649.674 884.107,633.493 884.666,653.807 885.226,639.693 885.785,639.909 886.344,640.78 886.903,657.262 887.463,658.427 888.022,659.03 888.581,672.832 889.14,701.71 889.7,714.769 890.259,730.958 890.818,727.863 891.377,709.092 891.937,694.303 892.496,707.407 893.055,688.691 893.614,673.677 894.174,687.189 894.733,648.513 895.292,615.457 895.851,601.976 896.411,608.15 896.97,633.076 897.529,652.462 898.088,669.25 898.648,670.406 899.207,669.26 899.766,670.281 900.325,655.944 900.885,639.282 901.444,657.317 902.003,690.498 902.562,693.908 903.122,677.217 903.681,663.837 904.24,667.672 904.799,685.493 905.359,699.849 905.918,700.344 906.477,684.793 907.036,686.883 907.596,673.528 908.155,674.583 908.714,675.06 909.273,692.131 909.833,674.13 910.392,706.325 910.951,655.723 911.51,687.211 912.07,655.236 912.629,644.938 913.188,630.763 913.747,636.429 914.307,657.628 914.866,689.78 915.425,687.727 915.984,684.226 916.544,682.815 917.103,700.667 917.662,700.074 918.221,749.196 918.781,778.196 919.34,757.568 919.899,736.591 920.458,747.913 921.018,759.733 921.577,759.376 922.136,788.162 922.695,800.028 923.255,778.835 923.814,802.682 924.373,777.802 924.932,769.023 925.492,828.222 926.051,820.407 926.61,783.233 927.169,759.937 927.729,803.494 928.288,831.515 928.847,798.483 929.406,777.772 929.966,742.192 930.525,720.96 931.084,711.845 931.644,695.555 932.203,710.407 932.762,726.352 933.321,706.488 933.881,707.756 934.44,689.967 934.999,691.582 935.558,687.529 936.118,717.588 936.677,686.047 937.236,687.542 937.795,670.879 938.355,704.934 938.914,703.078 939.473,698.733 940.032,698.855 940.592,715.111 941.151,712.452 941.71,711.834 942.269,710.935 942.829,743.008 943.388,772.698 943.947,799.331 944.506,794.396 945.066,791.733 945.625,785.956 946.184,846.766 946.743,789.51 947.303,769.765 947.862,764.273 948.421,746.565 948.98,710.942 949.54,709.295 950.099,713.352 950.658,708.936 951.217,654.268 951.777,673.233 952.336,658.055 952.895,675.742 953.454,678.229 954.014,681.593 954.573,680.339 955.132,680.062 955.691,678.908 956.251,694.31 956.81,643.142 957.369,664.106 957.928,663.723 958.488,647.927 959.047,651.135 959.606,619.099 960.165,622.218 960.725,590.687 961.284,628.115 961.843,644.725 962.402,644.703 962.962,648.567 963.521,650.3 964.08,651.09 964.639,641.588 965.199,641.645 965.758,577.852 966.317,550.126 966.876,576.728 967.436,552.588 967.995,572.64 968.554,596.092 969.113,616.745 969.673,650.827 970.232,652.918 970.791,669.311 971.35,655.172 971.91,655.113 972.469,639.519 973.028,662.377 973.587,676.485 974.147,707.055 974.706,720.174 975.265,735.471 975.824,731.357 976.384,711.172 976.943,708.89 977.502,722.257 978.061,707.144 978.621,718.383 979.18,715.675 979.739,698.61 980.298,679.777 980.858,692.69 981.417,692.609 981.976,676.519 982.535,676.041 983.095,707.311 983.654,720.249 984.213,716.869 984.772,715.956 985.332,714.551 985.891,714.936 986.45,744.161 987.009,741.443 987.569,723.521 988.128,703.9 988.687,720.372 989.246,718.889 989.806,715.86 990.365,714.13 990.924,713.627 991.483,698.475 992.043,682.811 992.602,648.88 993.161,639.106 993.72,626.805 994.28,614.578 994.839,620.616 995.398,593.205 995.957,645.225 996.517,627.162 997.076,649.475 997.635,667.802 998.194,633.969 998.754,616.929 999.313,619.901 999.872,627.884 1000.43,614.21 1000.99,569.5 1001.55,594.649 1002.11,616.771 1002.67,620.604 1003.23,622.177 1003.79,640.528 1004.35,642.48 1004.91,644.759 1005.46,696.801 1006.02,698.506 1006.58,683.283 1007.14,683.579 1007.7,683.615 1008.26,672.446 1008.82,691.057 1009.38,673.874 1009.94,658.841 1010.5,711.68 1011.06,729.574 1011.62,760.114 1012.18,772.452 1012.73,768.307 1013.29,763.634 1013.85,756.887 1014.41,733.365 1014.97,749.082 1015.53,746.038 1016.09,740.775 1016.65,787.389 1017.21,764.015 1017.77,791.448 1018.33,772.464 1018.89,767.97 1019.45,782.469 1020.01,777.972 1020.56,771.743 1021.12,784.836 1021.68,734.916 1022.24,734.043 1022.8,715.096 1023.36,699.441 1023.92,730.538 1024.48,743.477 1025.04,755.251 1025.6,731.921 1026.16,714.032 1026.72,726.738 1027.28,737.789 1027.83,769.886 1028.39,732.797 1028.95,678.834 1029.51,681.667 1030.07,694.757 1030.63,712.051 1031.19,714.328 1031.75,683.082 1032.31,665.946 1032.87,650.12 1033.43,670.004 1033.99,672.311 1034.55,672.193 1035.1,675.615 1035.66,628.64 1036.22,634.352 1036.78,670.187 1037.34,670.011 1037.9,670.155 1038.46,719.545 1039.02,717.767 1039.58,685.02 1040.14,649.262 1040.7,632.361 1041.26,618.284 1041.82,653.542 1042.38,638.995 1042.93,639.845 1043.49,661.276 1044.05,648.59 1044.61,605.735 1045.17,627.627 1045.73,632.473 1046.29,655.137 1046.85,670.392 1047.41,705.186 1047.97,718.112 1048.53,698.066 1049.09,684.578 1049.65,714.723 1050.2,760.399 1050.76,742.65 1051.32,756.897 1051.88,751.597 1052.44,747.417 1053,779.476 1053.56,771.688 1054.12,751.648 1054.68,749.585 1055.24,779.137 1055.8,744.18 1056.36,724.793 1056.92,690.133 1057.48,672.143 1058.03,671.062 1058.59,686.848 1059.15,699.032 1059.71,678.77 1060.27,677.067 1060.83,692.586 1061.39,692.249 1061.95,660.552 1062.51,628.663 1063.07,651.724 1063.63,639.552 1064.19,658.65 1064.75,656.285 1065.3,704.769 1065.86,688.528 1066.42,685.536 1066.98,685.975 1067.54,699.825 1068.1,664.692 1068.66,647.465 1069.22,649.636 1069.78,650.197 1070.34,687.93 1070.9,705.081 1071.46,707.041 1072.02,740.698 1072.57,769.184 1073.13,763.2 1073.69,773.221 1074.25,786.235 1074.81,794.329 1075.37,770.181 1075.93,795.947 1076.49,823.164 1077.05,797.75 1077.61,788.973 1078.17,781.986 1078.73,795.24 1079.29,754.497 1079.85,751.73 1080.4,766.942 1080.96,777.433 1081.52,736.194 1082.08,732.479 1082.64,713.13 1083.2,681.728 1083.76,670.057 1084.32,670.427 1084.88,702.378 1085.44,685.415 1086,670.765 1086.56,688.695 1087.12,655.848 1087.67,625.142 1088.23,662.145 1088.79,677.706 1089.35,681.957 1089.91,714.236 1090.47,726.874 1091.03,742.221 1091.59,739.989 1092.15,757.736 1092.71,768.329 1093.27,778.988 1093.83,757.711 1094.39,752.882 1094.94,781.418 1095.5,777.797 1096.06,838.359 1096.62,827.208 1097.18,769.852 1097.74,730.494 1098.3,730.129 1098.86,726.515 1099.42,714.693 1099.98,714.021 1100.54,716.309 1101.1,698.593 1101.66,695.097 1102.22,697.196 1102.77,682.416 1103.33,700.321 1103.89,696.275 1104.45,679.099 1105.01,706.971 1105.57,687.063 1106.13,656.954 1106.69,624.118 1107.25,610.785 1107.81,596.338 1108.37,564.527 1108.93,552.413 1109.49,527.074 1110.04,568.996 1110.6,561 1111.16,568.15 1111.72,573.183 1112.28,593.875 1112.84,597.535 1113.4,616.928 1113.96,600.528 1114.52,556.307 1115.08,566.334 1115.64,573.405 1116.2,549.755 1116.76,558.703 1117.31,547.722 1117.87,537.179 1118.43,547.16 1118.99,570.418 1119.55,557.922 1120.11,596.852 1120.67,568.961 1121.23,603.98 1121.79,622.398 1122.35,643.838 1122.91,647.488 1123.47,650.738 1124.03,638.166 1124.59,641.121 1125.14,627.989 1125.7,616.737 1126.26,609.813 1126.82,598.966 1127.38,587.242 1127.94,577.675 1128.5,582.79 1129.06,602.871 1129.62,572.807 1130.18,583.105 1130.74,604.113 1131.3,610.355 1131.86,613.79 1132.41,616.161 1132.97,633.986 1133.53,633.595 1134.09,585.958 1134.65,656.335 1135.21,645.862 1135.77,667.967 1136.33,636.53 1136.89,656.564 1137.45,660.169 1138.01,645.821 1138.57,665.986 1139.13,668.364 1139.68,651.771 1140.24,609.421 1140.8,646.421 1141.36,635.478 1141.92,592.083 1142.48,632.604 1143.04,650.62 1143.6,666.601 1144.16,682.079 1144.72,696.898 1145.28,660.461 1145.84,675.267 1146.4,674.604 1146.96,676.282 1147.51,677.047 1148.07,693.83 1148.63,709.364 1149.19,724.379 1149.75,721.859 1150.31,722.262 1150.87,707.339 1151.43,722.458 1151.99,721.955 1152.55,702.656 1153.11,700.563 1153.67,683.874 1154.23,715.956 1154.78,726.492 1155.34,724.229 1155.9,753.477 1156.46,766.528 1157.02,761.57 1157.58,756.64 1158.14,771.157 1158.7,766.199 1159.26,746.12 1159.82,708.956 1160.38,707.481 1160.94,721.651 1161.5,704.064 1162.05,688.708 1162.61,641.793 1163.17,645.64 1163.73,644.68 1164.29,673.782 1164.85,659.019 1165.41,645.493 1165.97,745.009 1166.53,741.657 1167.09,738.554 1167.65,739 1168.21,720.812 1168.77,717.441 1169.33,713.339 1169.88,696.597 1170.44,697.459 1171,676.949 1171.56,660.149 1172.12,695.681 1172.68,695.898 1173.24,693.461 1173.8,759.884 1174.36,820.857 1174.92,814.559 1175.48,794.796 1176.04,820.65 1176.6,796.249 1177.15,775.278 1177.71,757.399 1178.27,757.32 1178.83,739.294 1179.39,721.994 1179.95,700.837 1180.51,731.658 1181.07,747.634 1181.63,728.577 1182.19,708.002 1182.75,753.254 1183.31,732.189 1183.87,713.165 1184.43,727.569 1184.98,760.568 1185.54,741.027 1186.1,738.177 1186.66,703.551 1187.22,684.636 1187.78,671.814 1188.34,674.032 1188.9,654.17 1189.46,639.375 1190.02,634.798 1190.58,603.173 1191.14,591.576 1191.7,583.912 1192.25,574.763 1192.81,619.674 1193.37,619.792 1193.93,653.415 1194.49,638.373 1195.05,623.274 1195.61,622.799 1196.17,658.429 1196.73,680.077 1197.29,707.524 1197.85,709.104 1198.41,693.623 1198.97,693.875 1199.52,694.628 1200.08,658.258 1200.64,662.605 1201.2,695.333 1201.76,682.05 1202.32,697.608 1202.88,712.585 1203.44,724.603 1204,755.052 1204.56,752.642 1205.12,735.237 1205.68,780.622 1206.24,809.351 1206.8,801.584 1207.35,764.313 1207.91,744.627 1208.47,758.789 1209.03,721.955 1209.59,702.485 1210.15,733.341 1210.71,729.328 1211.27,728.519 1211.83,708.626 1212.39,737.701 1212.95,703.635 1213.51,703.101 1214.07,687.359 1214.62,656.923 1215.18,656.488 1215.74,641.255 1216.3,625.236 1216.86,627.262 1217.42,631.117 1217.98,631.812 1218.54,632.762 1219.1,649.008 1219.66,651.203 1220.22,657.203 1220.78,664.038 1221.34,664.512 1221.89,667.199 1222.45,666.275 1223.01,651.365 1223.57,651.599 1224.13,652.012 1224.69,633.133 1225.25,618.7 1225.81,622.959 1226.37,642.882 1226.93,657.136 1227.49,674.806 1228.05,706.672 1228.61,737.115 1229.17,737.75 1229.72,700.905 1230.28,686.2 1230.84,686.782 1231.4,687.703 1231.96,686.336 1232.52,670.411 1233.08,654.604 1233.64,654.15 1234.2,604.688 1234.76,605.853 1235.32,597.663 1235.88,585.908 1236.44,606.815 1236.99,614.212 1237.55,598.422 1238.11,587.921 1238.67,595.209 1239.23,601.22 1239.79,607.193 1240.35,612.602 1240.91,617.218 1241.47,638.47 1242.03,608.69 1242.59,629.1 1243.15,620.047 1243.71,605.058 1244.26,606.552 1244.82,610.896 1245.38,617.975 1245.94,667.405 1246.5,717.026 1247.06,714.663 1247.62,724.324 1248.18,673.334 1248.74,705.963 1249.3,737.563 1249.86,732.306 1250.42,764.614 1250.98,773.511 1251.54,754.314 1252.09,752.86 1252.65,748.522 1253.21,732.622 1253.77,711.311 1254.33,728.682 1254.89,727.978 1255.45,711.503 1256.01,708.118 1256.57,689.937 1257.13,673.624 1257.69,691.521 1258.25,692.672 1258.81,708.508 1259.36,705.903 1259.92,693.169 1260.48,709.594 1261.04,729.603 1261.6,728.475 1262.16,660.263 1262.72,649.178 1263.28,651.806 1263.84,655.246 1264.4,640.417 1264.96,643.673 1265.52,646.105 1266.08,643.512 1266.63,678.077 1267.19,680.546 1267.75,696.046 1268.31,699.407 1268.87,699.057 1269.43,682.406 1269.99,666.749 1270.55,666.273 1271.11,666.835 1271.67,667.693 1272.23,671.227 1272.79,704.129 1273.35,720.466 1273.91,733.049 1274.46,710.193 1275.02,691.543 1275.58,676.123 1276.14,645.316 1276.7,627.557 1277.26,628.146 1277.82,616.281 1278.38,590.871 1278.94,594.571 1279.5,629.787 1280.06,649.595 1280.62,668.008 1281.18,653.944 1281.73,672.429 1282.29,656.11 1282.85,704.909 1283.41,736.259 1283.97,688.07 1284.53,689.874 1285.09,705.076 1285.65,719.406 1286.21,732.908 1286.77,711.174 1287.33,723.154 1287.89,755.483 1288.45,768.504 1289,781.824 1289.56,793.504 1290.12,802.314 1290.68,794.678 1291.24,785.091 1291.8,781.881 1292.36,759.99 1292.92,756.957 1293.48,767.885 1294.04,764.469 1294.6,745.55 1295.16,710.674 1295.72,708.152 1296.28,724.167 1296.83,723.135 1297.39,706.034 1297.95,653.77 1298.51,651.975 1299.07,654.567 1299.63,638.966 1300.19,655.861 1300.75,659.105 1301.31,657.242 1301.87,706.775 1302.43,690.371 1302.99,686.281 1303.55,714.146 1304.1,693.703 1304.66,708.29 1305.22,724.142 1305.78,723.157 1306.34,769.968 1306.9,749.426 1307.46,744.658 1308.02,758.069 1308.58,703.439 1309.14,687.285 1309.7,671.304 1310.26,676.79 1310.82,677.518 1311.38,675.836 1311.93,640.247 1312.49,642.865 1313.05,677.207 1313.61,644.201 1314.17,644.97 1314.73,614.649 1315.29,628.539 1315.85,615.108 1316.41,620.013 1316.97,641.087 1317.53,657.705 1318.09,659.004 1318.65,659.133 1319.2,627.776 1319.76,611.208 1320.32,641.548 1320.88,627.102 1321.44,647.408 1322,650.221 1322.56,603.033 1323.12,637.682 1323.68,673.496 1324.24,670.707 1324.8,656.95 1325.36,626.015 1325.92,643.479 1326.47,661.287 1327.03,677.928 1327.59,728.202 1328.15,678.679 1328.71,663.056 1329.27,611.463 1329.83,649.542 1330.39,638.365 1330.95,692.009 1331.51,625.87 1332.07,630.381 1332.63,617.072 1333.19,635.631 1333.75,636.649 1334.3,671.967 1334.86,674.268 1335.42,673.8 1335.98,680.154 1336.54,679.19 1337.1,676.709 1337.66,673.128 1338.22,673.058 1338.78,642.288 1339.34,645.528 1339.9,648.425 1340.46,646.279 1341.02,649.249 1341.57,651.554 1342.13,657.014 1342.69,661.432 1343.25,645.748 1343.81,614.242 1344.37,638.353 1344.93,643.172 1345.49,662.888 1346.05,665.273 1346.61,682.733 1347.17,685.909 1347.73,702.387 1348.29,719.117 1348.84,703.373 1349.4,685.855 1349.96,654.916 1350.52,644.172 1351.08,677.709 1351.64,664.821 1352.2,697.614 1352.76,692.282 1353.32,641.221 1353.88,625.829 1354.44,595.642 1355,635.249 1355.56,605.346 1356.12,575.609 1356.67,615.997 1357.23,620.909 1357.79,640.336 1358.35,608.92 1358.91,613.851 1359.47,587.189 1360.03,610.49 1360.59,613.29 1361.15,637.47 1361.71,688.424 1362.27,748.551 1362.83,749.666 1363.39,763.012 1363.94,760.34 1364.5,756.75 1365.06,753.262 1365.62,766.426 1366.18,776.355 1366.74,753.823 1367.3,748.643 1367.86,748.476 1368.42,747.319 1368.98,727.442 1369.54,760.042 1370.1,755.828 1370.66,768.068 1371.21,768.189 1371.77,763.654 1372.33,758.081 1372.89,804.913 1373.45,799.139 1374.01,759.697 1374.57,772.892 1375.13,766.728 1375.69,766.492 1376.25,730.618 1376.81,763.82 1377.37,792.388 1377.93,783.887 1378.49,779.894 1379.04,744.081 1379.6,725.553 1380.16,691.463 1380.72,677.653 1381.28,663.196 1381.84,660.996 1382.4,680.272 1382.96,651.198 1383.52,669.521 1384.08,651.986 1384.64,654.802 1385.2,673.046 1385.76,688.771 1386.31,667.878 1386.87,668.047 1387.43,635.672 1387.99,639.747 1388.55,638.903 1389.11,592.15 1389.67,631.931 1390.23,649.615 1390.79,622.904 1391.35,656.865 1391.91,661.686 1392.47,677.656 1393.03,661.646 1393.58,678.196 1394.14,645.107 1394.7,643.305 1395.26,659.336 1395.82,674.437 1396.38,678.484 1396.94,647.363 1397.5,648.41 1398.06,684.167 1398.62,654.62 1399.18,688.85 1399.74,721.177 1400.3,769.686 1400.86,776.301 1401.41,770.408 1401.97,764.613 1402.53,728.938 1403.09,726.443 1403.65,738.236 1404.21,718.676 1404.77,713.446 1405.33,741.848 1405.89,739.569 1406.45,766.815 1407.01,792.5 1407.57,783.234 1408.13,796.551 1408.68,755.803 1409.24,754.528 1409.8,764.559 1410.36,747.947 1410.92,760.57 1411.48,741.683 1412.04,722.964 1412.6,721.342 1413.16,703.024 1413.72,717.673 1414.28,717.091 1414.84,762.773 1415.4,727.635 1415.95,710.193 1416.51,772.903 1417.07,764.802 1417.63,776.476 1418.19,755.917 1418.75,750.209 1419.31,729.479 1419.87,713.587 1420.43,711.761 1420.99,710.746 1421.55,662.954 1422.11,663.769 1422.67,701.41 1423.23,703.053 1423.78,685.435 1424.34,703.071 1424.9,667.12 1425.46,685.607 1426.02,703.244 1426.58,716.007 1427.14,731.355 1427.7,696.167 1428.26,714.329 1428.82,712.748 1429.38,713.972 1429.94,725.654 1430.5,724.801 1431.05,752.972 1431.61,699.717 1432.17,701.637 1432.73,701.309 1433.29,733.884 1433.85,727.796 1434.41,723.85 1434.97,754.199 1435.53,750.995 1436.09,777.953 1436.65,773.894 1437.21,802.237 1437.77,822.458 1438.33,769.732 1438.88,750.862 1439.44,765.338 1440,711.399 1440.56,725.47 1441.12,739.827 1441.68,699.202 1442.24,680.102 1442.8,696.882 1443.36,694.917 1443.92,706.713 1444.48,702.436 1445.04,671.737 1445.6,670.535 1446.15,673.45 1446.71,626.384 1447.27,629.75 1447.83,628.035 1448.39,634.749 1448.95,619.808 1449.51,625.929 1450.07,610.86 1450.63,618.521 1451.19,590.834 1451.75,574.203 1452.31,564.185 1452.87,558.027 1453.42,563.861 1453.98,535.262 1454.54,544.485 1455.1,516.975 1455.66,525.75 1456.22,531.512 1456.78,525.64 1457.34,568.356 1457.9,558.16 1458.46,582.238 1459.02,621.087 1459.58,609.378 1460.14,631.806 1460.7,637.114 1461.25,623.171 1461.81,626.739 1462.37,628.556 1462.93,582.29 1463.49,570.758 1464.05,545.644 1464.61,586.333 1465.17,606.415 1465.73,593.588 1466.29,616.726 1466.85,618.98 1467.41,591.453 1467.97,596.257 1468.52,650.064 1469.08,636.447 1469.64,604.866 1470.2,608.335 1470.76,613.607 1471.32,614.617 1471.88,651.059 1472.44,638.02 1473,621.439 1473.56,624.468 1474.12,610.384 1474.68,618.083 1475.24,650.709 1475.79,669.678 1476.35,685.582 1476.91,705.391 1477.47,718.608 1478.03,730.652 1478.59,740.18 1479.15,753.508 1479.71,766.28 1480.27,780.66 1480.83,759.823 1481.39,756.127 1481.95,751.359 1482.51,779.028 1483.07,756.943 1483.62,738.661 1484.18,750.065 1484.74,759.836 1485.3,772.924 1485.86,769.636 1486.42,782.836 1486.98,778.291 1487.54,789.154 1488.1,820.351 1488.66,844.731 1489.22,823.094 1489.78,816.614 1490.34,778.817 1490.89,729.341 1491.45,743.045 1492.01,754.549 1492.57,766.263 1493.13,746.012 1493.69,708.017 1494.25,721.391 1494.81,686.143 1495.37,650.259 1495.93,633.749 1496.49,635.888 1497.05,656.066 1497.61,673.768 1498.16,676.882 1498.72,679.327 1499.28,662.182 1499.84,661.087 1500.4,682.239 1500.96,683.74 1501.52,698.32 1502.08,681.591 1502.64,680.659 1503.2,675.735 1503.76,645.297 1504.32,695.252 1504.88,661.322 1505.44,661.801 1505.99,696.142 1506.55,677.516 1507.11,691.9 1507.67,676.096 1508.23,661.578 1508.79,676.21 1509.35,626.73 1509.91,629.067 1510.47,647.065 1511.03,664.217 1511.59,730.908 1512.15,745.586 1512.71,742.337 1513.26,738.563 1513.82,736.937 1514.38,733.355 1514.94,763.78 1515.5,744.642 1516.06,759.595 1516.62,771.566 1517.18,783.557 1517.74,761.486 1518.3,743.425 1518.86,691.286 1519.42,660.701 1519.98,661.205 1520.53,662.536 1521.09,711.425 1521.65,723.834 1522.21,689.918 1522.77,672.803 1523.33,657.67 1523.89,657.581 1524.45,657.914 1525.01,660.224 1525.57,630.624 1526.13,634.524 1526.69,635.598 1527.25,634.769 1527.81,636.635 1528.36,639.631 1528.92,642.623 1529.48,648.609 1530.04,648.326 1530.6,664.032 1531.16,681.354 1531.72,664.593 1532.28,699.282 1532.84,678.627 1533.4,697.06 1533.96,695.676 1534.52,678.361 1535.08,679.505 1535.63,693.032 1536.19,663.115 1536.75,665.59 1537.31,680.086 1537.87,663.052 1538.43,629.376 1538.99,636.463 1539.55,670.188 1540.11,664.704 1540.67,662.188 1541.23,665.159 1541.79,683.164 1542.35,649.684 1542.9,636.585 1543.46,671.981 1544.02,671.847 1544.58,689.547 1545.14,676.483 1545.7,677.081 1546.26,663.681 1546.82,663.948 1547.38,664.608 1547.94,648.672 1548.5,646.848 1549.06,635.423 1549.62,654.854 1550.18,676.35 1550.73,676.095 1551.29,644.611 1551.85,660.735 1552.41,660.021 1552.97,661.851 1553.53,664.133 1554.09,730.782 1554.65,711.646 1555.21,710.376 1555.77,726.033 1556.33,708.487 1556.89,707.198 1557.45,689.988 1558,703.93 1558.56,717.317 1559.12,717.057 1559.68,727.888 1560.24,711.29 1560.8,677.516 1561.36,678.716 1561.92,678.293 1562.48,727.64 1563.04,726.778 1563.6,723.83 1564.16,690.691 1564.72,674.911 1565.28,676.003 1565.83,679.813 1566.39,711.177 1566.95,727.207 1567.51,710.167 1568.07,708.016 1568.63,705.222 1569.19,671.456 1569.75,707.965 1570.31,693.254 1570.87,709.649 1571.43,694.335 1571.99,694.871 1572.55,661.614 1573.1,627.283 1573.66,651.69 1574.22,656.572 1574.78,625.366 1575.34,640.775 1575.9,627.536 1576.46,646.889 1577.02,616.479 1577.58,619.604 1578.14,635.628 1578.7,654.127 1579.26,637.2 1579.82,607.518 1580.37,629.547 1580.93,617.349 1581.49,605.621 1582.05,611.452 1582.61,617.836 1583.17,603.44 1583.73,594.816 1584.29,588.102 1584.85,592.833 1585.41,614.551 1585.97,669.258 1586.53,705.452 1587.09,708.268 1587.65,690.33 1588.2,673.931 1588.76,691.222 1589.32,677.916 1589.88,680.55 1590.44,697.658 1591,678.311 1591.56,663.888 1592.12,699.207 1592.68,683.389 1593.24,730.76 1593.8,694.818 1594.36,713.592 1594.92,725.165 1595.47,722.143 1596.03,688.359 1596.59,721.819 1597.15,724.891 1597.71,719.691 1598.27,730.354 1598.83,676.994 1599.39,664.558 1599.95,682.689 1600.51,668.038 1601.07,670.949 1601.63,687.252 1602.19,701.118 1602.74,696.963 1603.3,713.55 1603.86,729.29 1604.42,707.021 1604.98,705.841 1605.54,706.453 1606.1,720.677 1606.66,716.791 1607.22,698.168 1607.78,663.871 1608.34,683.652 1608.9,685.48 1609.46,705.147 1610.02,720.447 1610.57,705.592 1611.13,707.599 1611.69,688.447 1612.25,671.204 1612.81,654.931 1613.37,672.444 1613.93,674.042 1614.49,673.799 1615.05,655.609 1615.61,642.481 1616.17,661.721 1616.73,631.882 1617.29,652.418 1617.84,690.002 1618.4,688.131 1618.96,687.907 1619.52,653.373 1620.08,703.407 1620.64,698.837 1621.2,713.297 1621.76,725.68 1622.32,708.669 1622.88,755.501 1623.44,781.755 1624,774.206 1624.56,736.228 1625.11,731.924 1625.67,733.692 1626.23,700.297 1626.79,714.907 1627.35,762.046 1627.91,755.94 1628.47,754.014 1629.03,715.85 1629.59,699.517 1630.15,699.636 1630.71,698.872 1631.27,699.055 1631.83,745.004 1632.39,773.169 1632.94,788.402 1633.5,785.278 1634.06,762.306 1634.62,757.506 1635.18,737.082 1635.74,748.422 1636.3,746.978 1636.86,739.068 1637.42,769.834 1637.98,762.897 1638.54,776.128 1639.1,755.464 1639.66,749.089 1640.21,744.089 1640.77,723.253 1641.33,736.278 1641.89,731.305 1642.45,716.706 1643.01,713.472 1643.57,691.957 1644.13,691.876 1644.69,705.167 1645.25,704.825 1645.81,720.54 1646.37,750.605 1646.93,733.234 1647.48,697.85 1648.04,678.361 1648.6,714.817 1649.16,711.488 1649.72,728.671 1650.28,709.695 1650.84,676.026 1651.4,659.903 1651.96,696.222 1652.52,662.702 1653.08,664.85 1653.64,679.045 1654.2,662.549 1654.76,697.479 1655.31,714.86 1655.87,714.397 1656.43,728.324 1656.99,725.531 1657.55,726.138 1658.11,773.166 1658.67,802.018 1659.23,779.763 1659.79,790.635 1660.35,773.52 1660.91,703.627 1661.47,701.026 1662.03,712.914 1662.58,744.663 1663.14,740.346 1663.7,752.017 1664.26,749.469 1664.82,730.373 1665.38,741.772 1665.94,769.83 1666.5,735.197 1667.06,701.049 1667.62,716.607 1668.18,745.148 1668.74,740.583 1669.3,687.425 1669.85,670.665 1670.41,672.64 1670.97,672.646 1671.53,654.723 1672.09,671.368 1672.65,653.914 1673.21,641.729 1673.77,626.807 1674.33,646 1674.89,616.219 1675.45,604.078 1676.01,608.05 1676.57,579.874 1677.13,586.23 1677.68,625.633 1678.24,643.999 1678.8,641.733 1679.36,645.27 1679.92,614.929 1680.48,583.484 1681.04,592.253 1681.6,601.514 1682.16,606.703 1682.72,606.413 1683.28,608.553 1683.84,625.003 1684.4,663.208 1684.95,675.022 1685.51,689.961 1686.07,689.342 1686.63,690.906 1687.19,692.106 1687.75,722.912 1688.31,715.879 1688.87,745.941 1689.43,742.83 1689.99,759.128 1690.55,753.977 1691.11,765.443 1691.67,778.779 1692.23,726.269 1692.78,725.42 1693.34,707.57 1693.9,709.674 1694.46,711.675 1695.02,710.712 1695.58,726.033 1696.14,738.083 1696.7,765.973 1697.26,732.272 1697.82,745.243 1698.38,737.491 1698.94,738.157 1699.5,803.882 1700.05,814.425 1700.61,775.465 1701.17,754.884 1701.73,702.822 1702.29,747.291 1702.85,745.389 1703.41,742.761 1703.97,723.23 1704.53,737.025 1705.09,719.009 1705.65,685.092 1706.21,655.159 1706.77,657.394 1707.32,658.814 1707.88,647.073 1708.44,618.227 1709,604.47 1709.56,607.576 1710.12,647.16 1710.68,679.205 1711.24,678.892 1711.8,694.622 1712.36,710.071 1712.92,722.018 1713.48,638.533 1714.04,656.733 1714.6,621.397 1715.15,605.258 1715.71,608.838 1716.27,550.83 1716.83,606.584 1717.39,580.629 1717.95,570.526 1718.51,559.997 1719.07,547.756 1719.63,538.046 1720.19,513.452 1720.75,507.654 1721.31,520.218 1721.87,512.552 1722.42,540.832 1722.98,583.504 1723.54,572.511 1724.1,547.679 1724.66,538.196 1725.22,543.562 1725.78,569.362 1726.34,575.691 1726.9,598.998 1727.46,600.688 1728.02,602.305 1728.58,621.73 1729.14,643.213 1729.69,664.067 1730.25,634.496 1730.81,607.182 1731.37,595.753 1731.93,603.77 1732.49,606.093 1733.05,645.754 1733.61,651.699 1734.17,654.814 1734.73,655.425 1735.29,687.149 1735.85,689.538 1736.41,688.697 1736.97,687.365 1737.52,669.688 1738.08,669.568 1738.64,670.701 1739.2,688.99 1739.76,689.202 1740.32,724.271 1740.88,720.58 1741.44,730.609 1742,712.266 1742.56,676.422 1743.12,677.056 1743.68,708.473 1744.24,743.479 1744.79,742.514 1745.35,741.47 1745.91,753.07 1746.47,731.44 1747.03,713.695 1747.59,712.266 1748.15,726.117 1748.71,718.969 1749.27,716.045 1749.83,744.757 1750.39,739.449 1750.95,735.273 1751.51,763.357 1752.06,773.918 1752.62,765.784 1753.18,758.657 1753.74,737.417 1754.3,736.153 1754.86,731.139 1755.42,727.732 1755.98,738.596 1756.54,720.358 1757.1,732.904 1757.66,744.92 1758.22,758.4 1758.78,784.625 1759.34,791.6 1759.89,834.629 1760.45,843.943 1761.01,784.396 1761.57,813.682 1762.13,790.721 1762.69,819.381 1763.25,824.541 1763.81,847.268 1764.37,854.379 1764.93,782.797 1765.49,775.615 1766.05,788.125 1766.61,750.328 1767.16,728.209 1767.72,772.477 1768.28,765.626 1768.84,744.078 1769.4,745.01 1769.96,726.541 1770.52,767.217 1771.08,746.318 1771.64,693.001 1772.2,661.065 1772.76,628.721 1773.32,643.245 1773.88,614.724 1774.43,603.05 1774.99,623.42 1775.55,656.709 1776.11,607.035 1776.67,576.97 1777.23,553.008 1777.79,557.971 1778.35,514.716 1778.91,525.293 1779.47,515.462 1780.03,492.798 1780.59,520.902 1781.15,494.105 1781.71,488.077 1782.26,530.23 1782.82,499.377 1783.38,563.791 1783.94,554.171 1784.5,529.911 1785.06,522.549 1785.62,532.006 1786.18,537.683 1786.74,563.913 1787.3,553.217 1787.86,525.382 1788.42,519.561 1788.98,514.031 1789.53,476.926 1790.09,489.69 1790.65,483.8 1791.21,494.631 1791.77,585.751 1792.33,591.112 1792.89,613.007 1793.45,616.869 1794.01,638.078 1794.57,656.182 1795.13,640.385 1795.69,662.683 1796.25,699.59 1796.8,715.368 1797.36,683.204 1797.92,669.317 1798.48,670.572 1799.04,657.104 1799.6,628.418 1800.16,637.712 1800.72,671.321 1801.28,602.399 1801.84,611.396 1802.4,600.136 1802.96,618.833 1803.52,608.268 1804.08,650.87 1804.63,668.731 1805.19,702.542 1805.75,716.521 1806.31,714.854 1806.87,716.67 1807.43,713.651 1807.99,696.039 1808.55,678.284 1809.11,677.434 1809.67,696.043 1810.23,710.059 1810.79,725.228 1811.35,725.457 1811.9,708.114 1812.46,675.929 1813.02,675.197 1813.58,660.765 1814.14,675.98 1814.7,693.689 1815.26,627.481 1815.82,646.81 1816.38,645.599 1816.94,646.313 1817.5,663.039 1818.06,667.736 1818.62,706.672 1819.18,722.665 1819.73,701.075 1820.29,667.438 1820.85,633.185 1821.41,637.654 1821.97,656.341 1822.53,691.887 1823.09,657.834 1823.65,661.766 1824.21,697.618 1824.77,693.355 1825.33,680.452 1825.89,667.158 1826.45,701.202 1827,704.816 1827.56,704.836 1828.12,718.492 1828.68,702.045 1829.24,702.469 1829.8,685.842 1830.36,687.67 1830.92,720.284 1831.48,686.919 1832.04,702.805 1832.6,702.939 1833.16,704.319 1833.72,700.592 1834.27,669.984 1834.83,683.42 1835.39,682.279 1835.95,679.954 1836.51,681.508 1837.07,679.66 1837.63,659.245 1838.19,661.368 \"/>\n<path clip-path=\"url(#clip803)\" d=\"M720.247 691.214 L720.806 691.214 L721.365 691.214 L721.924 691.214 L722.484 691.214 L723.043 691.214 L723.602 691.214 L724.161 691.214 L724.721 691.214 L725.28 691.214 L725.839 691.214 L726.398 691.214 L726.958 691.214 L727.517 691.214 L728.076 691.214 L728.635 691.214 L729.195 691.214 L729.754 691.214 L730.313 691.214 L730.872 691.214 L731.432 691.214 L731.991 691.214 L732.55 691.214 L733.109 691.214 L733.669 691.214 L734.228 691.214 L734.787 691.214 L735.346 691.214 L735.906 691.214 L736.465 691.214 L737.024 691.214 L737.583 691.214 L738.143 691.214 L738.702 691.214 L739.261 691.214 L739.82 691.214 L740.38 691.214 L740.939 691.214 L741.498 691.214 L742.057 691.214 L742.617 691.214 L743.176 691.214 L743.735 691.214 L744.294 691.214 L744.854 691.214 L745.413 691.214 L745.972 691.214 L746.531 691.214 L747.091 691.214 L747.65 691.214 L748.209 691.214 L748.768 691.214 L749.328 691.214 L749.887 691.214 L750.446 691.214 L751.005 691.214 L751.565 691.214 L752.124 691.214 L752.683 691.214 L753.242 691.214 L753.802 691.214 L754.361 691.214 L754.92 691.214 L755.479 691.214 L756.039 691.214 L756.598 691.214 L757.157 691.214 L757.716 691.214 L758.276 691.214 L758.835 691.214 L759.394 691.214 L759.953 691.214 L760.513 691.214 L761.072 691.214 L761.631 691.214 L762.19 691.214 L762.75 691.214 L763.309 691.214 L763.868 691.214 L764.427 691.214 L764.987 691.214 L765.546 691.214 L766.105 691.214 L766.664 691.214 L767.224 691.214 L767.783 691.214 L768.342 691.214 L768.901 691.214 L769.461 691.214 L770.02 691.214 L770.579 691.214 L771.138 691.214 L771.698 691.214 L772.257 691.214 L772.816 691.214 L773.375 691.214 L773.935 691.214 L774.494 691.214 L775.053 691.214 L775.612 691.214 L776.172 691.214 L776.731 691.214 L777.29 691.214 L777.849 691.214 L778.409 691.214 L778.968 691.214 L779.527 691.214 L780.086 691.214 L780.646 691.214 L781.205 691.214 L781.764 691.214 L782.323 691.214 L782.883 691.214 L783.442 691.214 L784.001 691.214 L784.56 691.214 L785.12 691.214 L785.679 691.214 L786.238 691.214 L786.797 691.214 L787.357 691.214 L787.916 691.214 L788.475 691.214 L789.034 691.214 L789.594 691.214 L790.153 691.214 L790.712 691.214 L791.271 691.214 L791.831 691.214 L792.39 691.214 L792.949 691.214 L793.508 691.214 L794.068 691.214 L794.627 691.214 L795.186 691.214 L795.745 691.214 L796.305 691.214 L796.864 691.214 L797.423 691.214 L797.982 691.214 L798.542 691.214 L799.101 691.214 L799.66 691.214 L800.219 691.214 L800.779 691.214 L801.338 691.214 L801.897 691.214 L802.456 691.214 L803.016 691.214 L803.575 691.214 L804.134 691.214 L804.693 691.214 L805.253 691.214 L805.812 691.214 L806.371 691.214 L806.931 691.214 L807.49 691.214 L808.049 691.214 L808.608 691.214 L809.168 691.214 L809.727 691.214 L810.286 691.214 L810.845 691.214 L811.405 691.214 L811.964 691.214 L812.523 691.214 L813.082 691.214 L813.642 691.214 L814.201 691.214 L814.76 691.214 L815.319 691.214 L815.879 691.214 L816.438 691.214 L816.997 691.214 L817.556 691.214 L818.116 691.214 L818.675 691.214 L819.234 691.214 L819.793 691.214 L820.353 691.214 L820.912 691.214 L821.471 691.214 L822.03 691.214 L822.59 691.214 L823.149 691.214 L823.708 691.214 L824.267 691.214 L824.827 691.214 L825.386 691.214 L825.945 691.214 L826.504 691.214 L827.064 691.214 L827.623 691.214 L828.182 691.214 L828.741 691.214 L829.301 691.214 L829.86 691.214 L830.419 691.214 L830.978 691.214 L831.538 691.214 L832.097 691.214 L832.656 691.214 L833.215 691.214 L833.775 691.214 L834.334 691.214 L834.893 691.214 L835.452 691.214 L836.012 691.214 L836.571 691.214 L837.13 691.214 L837.689 691.214 L838.249 691.214 L838.808 691.214 L839.367 691.214 L839.926 691.214 L840.486 691.214 L841.045 691.214 L841.604 691.214 L842.163 691.214 L842.723 691.214 L843.282 691.214 L843.841 691.214 L844.4 691.214 L844.96 691.214 L845.519 691.214 L846.078 691.214 L846.637 691.214 L847.197 691.214 L847.756 691.214 L848.315 691.214 L848.874 691.214 L849.434 691.214 L849.993 691.214 L850.552 691.214 L851.111 691.214 L851.671 691.214 L852.23 691.214 L852.789 691.214 L853.348 691.214 L853.908 691.214 L854.467 691.214 L855.026 691.214 L855.585 691.214 L856.145 691.214 L856.704 691.214 L857.263 691.214 L857.822 691.214 L858.382 691.214 L858.941 691.214 L859.5 691.214 L860.059 691.214 L860.619 691.214 L861.178 691.214 L861.737 691.214 L862.296 691.214 L862.856 691.214 L863.415 691.214 L863.974 691.214 L864.533 691.214 L865.093 691.214 L865.652 691.214 L866.211 691.214 L866.77 691.214 L867.33 691.214 L867.889 691.214 L868.448 691.214 L869.007 691.214 L869.567 691.214 L870.126 691.214 L870.685 691.214 L871.244 691.214 L871.804 691.214 L872.363 691.214 L872.922 691.214 L873.481 691.214 L874.041 691.214 L874.6 691.214 L875.159 691.214 L875.718 691.214 L876.278 691.214 L876.837 691.214 L877.396 691.214 L877.955 691.214 L878.515 691.214 L879.074 691.214 L879.633 691.214 L880.192 691.214 L880.752 691.214 L881.311 691.214 L881.87 691.214 L882.429 691.214 L882.989 691.214 L883.548 691.214 L884.107 691.214 L884.666 691.214 L885.226 691.214 L885.785 691.214 L886.344 691.214 L886.903 691.214 L887.463 691.214 L888.022 691.214 L888.581 691.214 L889.14 691.214 L889.7 691.214 L890.259 691.214 L890.818 691.214 L891.377 691.214 L891.937 691.214 L892.496 691.214 L893.055 691.214 L893.614 691.214 L894.174 691.214 L894.733 691.214 L895.292 691.214 L895.851 691.214 L896.411 691.214 L896.97 691.214 L897.529 691.214 L898.088 691.214 L898.648 691.214 L899.207 691.214 L899.766 691.214 L900.325 691.214 L900.885 691.214 L901.444 691.214 L902.003 691.214 L902.562 691.214 L903.122 691.214 L903.681 691.214 L904.24 691.214 L904.799 691.214 L905.359 691.214 L905.918 691.214 L906.477 691.214 L907.036 691.214 L907.596 691.214 L908.155 691.214 L908.714 691.214 L909.273 691.214 L909.833 691.214 L910.392 691.214 L910.951 691.214 L911.51 691.214 L912.07 691.214 L912.629 691.214 L913.188 691.214 L913.747 691.214 L914.307 691.214 L914.866 691.214 L915.425 691.214 L915.984 691.214 L916.544 691.214 L917.103 691.214 L917.662 691.214 L918.221 691.214 L918.781 691.214 L919.34 691.214 L919.899 691.214 L920.458 691.214 L921.018 691.214 L921.577 691.214 L922.136 691.214 L922.695 691.214 L923.255 691.214 L923.814 691.214 L924.373 691.214 L924.932 691.214 L925.492 691.214 L926.051 691.214 L926.61 691.214 L927.169 691.214 L927.729 691.214 L928.288 691.214 L928.847 691.214 L929.406 691.214 L929.966 691.214 L930.525 691.214 L931.084 691.214 L931.644 691.214 L932.203 691.214 L932.762 691.214 L933.321 691.214 L933.881 691.214 L934.44 691.214 L934.999 691.214 L935.558 691.214 L936.118 691.214 L936.677 691.214 L937.236 691.214 L937.795 691.214 L938.355 691.214 L938.914 691.214 L939.473 691.214 L940.032 691.214 L940.592 691.214 L941.151 691.214 L941.71 691.214 L942.269 691.214 L942.829 691.214 L943.388 691.214 L943.947 691.214 L944.506 691.214 L945.066 691.214 L945.625 691.214 L946.184 691.214 L946.743 691.214 L947.303 691.214 L947.862 691.214 L948.421 691.214 L948.98 691.214 L949.54 691.214 L950.099 691.214 L950.658 691.214 L951.217 691.214 L951.777 691.214 L952.336 691.214 L952.895 691.214 L953.454 691.214 L954.014 691.214 L954.573 691.214 L955.132 691.214 L955.691 691.214 L956.251 691.214 L956.81 691.214 L957.369 691.214 L957.928 691.214 L958.488 691.214 L959.047 691.214 L959.606 691.214 L960.165 691.214 L960.725 691.214 L961.284 691.214 L961.843 691.214 L962.402 691.214 L962.962 691.214 L963.521 691.214 L964.08 691.214 L964.639 691.214 L965.199 691.214 L965.758 691.214 L966.317 691.214 L966.876 691.214 L967.436 691.214 L967.995 691.214 L968.554 691.214 L969.113 691.214 L969.673 691.214 L970.232 691.214 L970.791 691.214 L971.35 691.214 L971.91 691.214 L972.469 691.214 L973.028 691.214 L973.587 691.214 L974.147 691.214 L974.706 691.214 L975.265 691.214 L975.824 691.214 L976.384 691.214 L976.943 691.214 L977.502 691.214 L978.061 691.214 L978.621 691.214 L979.18 691.214 L979.739 691.214 L980.298 691.214 L980.858 691.214 L981.417 691.214 L981.976 691.214 L982.535 691.214 L983.095 691.214 L983.654 691.214 L984.213 691.214 L984.772 691.214 L985.332 691.214 L985.891 691.214 L986.45 691.214 L987.009 691.214 L987.569 691.214 L988.128 691.214 L988.687 691.214 L989.246 691.214 L989.806 691.214 L990.365 691.214 L990.924 691.214 L991.483 691.214 L992.043 691.214 L992.602 691.214 L993.161 691.214 L993.72 691.214 L994.28 691.214 L994.839 691.214 L995.398 691.214 L995.957 691.214 L996.517 691.214 L997.076 691.214 L997.635 691.214 L998.194 691.214 L998.754 691.214 L999.313 691.214 L999.872 691.214 L1000.43 691.214 L1000.99 691.214 L1001.55 691.214 L1002.11 691.214 L1002.67 691.214 L1003.23 691.214 L1003.79 691.214 L1004.35 691.214 L1004.91 691.214 L1005.46 691.214 L1006.02 691.214 L1006.58 691.214 L1007.14 691.214 L1007.7 691.214 L1008.26 691.214 L1008.82 691.214 L1009.38 691.214 L1009.94 691.214 L1010.5 691.214 L1011.06 691.214 L1011.62 691.214 L1012.18 691.214 L1012.73 691.214 L1013.29 691.214 L1013.85 691.214 L1014.41 691.214 L1014.97 691.214 L1015.53 691.214 L1016.09 691.214 L1016.65 691.214 L1017.21 691.214 L1017.77 691.214 L1018.33 691.214 L1018.89 691.214 L1019.45 691.214 L1020.01 691.214 L1020.56 691.214 L1021.12 691.214 L1021.68 691.214 L1022.24 691.214 L1022.8 691.214 L1023.36 691.214 L1023.92 691.214 L1024.48 691.214 L1025.04 691.214 L1025.6 691.214 L1026.16 691.214 L1026.72 691.214 L1027.28 691.214 L1027.83 691.214 L1028.39 691.214 L1028.95 691.214 L1029.51 691.214 L1030.07 691.214 L1030.63 691.214 L1031.19 691.214 L1031.75 691.214 L1032.31 691.214 L1032.87 691.214 L1033.43 691.214 L1033.99 691.214 L1034.55 691.214 L1035.1 691.214 L1035.66 691.214 L1036.22 691.214 L1036.78 691.214 L1037.34 691.214 L1037.9 691.214 L1038.46 691.214 L1039.02 691.214 L1039.58 691.214 L1040.14 691.214 L1040.7 691.214 L1041.26 691.214 L1041.82 691.214 L1042.38 691.214 L1042.93 691.214 L1043.49 691.214 L1044.05 691.214 L1044.61 691.214 L1045.17 691.214 L1045.73 691.214 L1046.29 691.214 L1046.85 691.214 L1047.41 691.214 L1047.97 691.214 L1048.53 691.214 L1049.09 691.214 L1049.65 691.214 L1050.2 691.214 L1050.76 691.214 L1051.32 691.214 L1051.88 691.214 L1052.44 691.214 L1053 691.214 L1053.56 691.214 L1054.12 691.214 L1054.68 691.214 L1055.24 691.214 L1055.8 691.214 L1056.36 691.214 L1056.92 691.214 L1057.48 691.214 L1058.03 691.214 L1058.59 691.214 L1059.15 691.214 L1059.71 691.214 L1060.27 691.214 L1060.83 691.214 L1061.39 691.214 L1061.95 691.214 L1062.51 691.214 L1063.07 691.214 L1063.63 691.214 L1064.19 691.214 L1064.75 691.214 L1065.3 691.214 L1065.86 691.214 L1066.42 691.214 L1066.98 691.214 L1067.54 691.214 L1068.1 691.214 L1068.66 691.214 L1069.22 691.214 L1069.78 691.214 L1070.34 691.214 L1070.9 691.214 L1071.46 691.214 L1072.02 691.214 L1072.57 691.214 L1073.13 691.214 L1073.69 691.214 L1074.25 691.214 L1074.81 691.214 L1075.37 691.214 L1075.93 691.214 L1076.49 691.214 L1077.05 691.214 L1077.61 691.214 L1078.17 691.214 L1078.73 691.214 L1079.29 691.214 L1079.85 691.214 L1080.4 691.214 L1080.96 691.214 L1081.52 691.214 L1082.08 691.214 L1082.64 691.214 L1083.2 691.214 L1083.76 691.214 L1084.32 691.214 L1084.88 691.214 L1085.44 691.214 L1086 691.214 L1086.56 691.214 L1087.12 691.214 L1087.67 691.214 L1088.23 691.214 L1088.79 691.214 L1089.35 691.214 L1089.91 691.214 L1090.47 691.214 L1091.03 691.214 L1091.59 691.214 L1092.15 691.214 L1092.71 691.214 L1093.27 691.214 L1093.83 691.214 L1094.39 691.214 L1094.94 691.214 L1095.5 691.214 L1096.06 691.214 L1096.62 691.214 L1097.18 691.214 L1097.74 691.214 L1098.3 691.214 L1098.86 691.214 L1099.42 691.214 L1099.98 691.214 L1100.54 691.214 L1101.1 691.214 L1101.66 691.214 L1102.22 691.214 L1102.77 691.214 L1103.33 691.214 L1103.89 691.214 L1104.45 691.214 L1105.01 691.214 L1105.57 691.214 L1106.13 691.214 L1106.69 691.214 L1107.25 691.214 L1107.81 691.214 L1108.37 691.214 L1108.93 691.214 L1109.49 691.214 L1110.04 691.214 L1110.6 691.214 L1111.16 691.214 L1111.72 691.214 L1112.28 691.214 L1112.84 691.214 L1113.4 691.214 L1113.96 691.214 L1114.52 691.214 L1115.08 691.214 L1115.64 691.214 L1116.2 691.214 L1116.76 691.214 L1117.31 691.214 L1117.87 691.214 L1118.43 691.214 L1118.99 691.214 L1119.55 691.214 L1120.11 691.214 L1120.67 691.214 L1121.23 691.214 L1121.79 691.214 L1122.35 691.214 L1122.91 691.214 L1123.47 691.214 L1124.03 691.214 L1124.59 691.214 L1125.14 691.214 L1125.7 691.214 L1126.26 691.214 L1126.82 691.214 L1127.38 691.214 L1127.94 691.214 L1128.5 691.214 L1129.06 691.214 L1129.62 691.214 L1130.18 691.214 L1130.74 691.214 L1131.3 691.214 L1131.86 691.214 L1132.41 691.214 L1132.97 691.214 L1133.53 691.214 L1134.09 691.214 L1134.65 691.214 L1135.21 691.214 L1135.77 691.214 L1136.33 691.214 L1136.89 691.214 L1137.45 691.214 L1138.01 691.214 L1138.57 691.214 L1139.13 691.214 L1139.68 691.214 L1140.24 691.214 L1140.8 691.214 L1141.36 691.214 L1141.92 691.214 L1142.48 691.214 L1143.04 691.214 L1143.6 691.214 L1144.16 691.214 L1144.72 691.214 L1145.28 691.214 L1145.84 691.214 L1146.4 691.214 L1146.96 691.214 L1147.51 691.214 L1148.07 691.214 L1148.63 691.214 L1149.19 691.214 L1149.75 691.214 L1150.31 691.214 L1150.87 691.214 L1151.43 691.214 L1151.99 691.214 L1152.55 691.214 L1153.11 691.214 L1153.67 691.214 L1154.23 691.214 L1154.78 691.214 L1155.34 691.214 L1155.9 691.214 L1156.46 691.214 L1157.02 691.214 L1157.58 691.214 L1158.14 691.214 L1158.7 691.214 L1159.26 691.214 L1159.82 691.214 L1160.38 691.214 L1160.94 691.214 L1161.5 691.214 L1162.05 691.214 L1162.61 691.214 L1163.17 691.214 L1163.73 691.214 L1164.29 691.214 L1164.85 691.214 L1165.41 691.214 L1165.97 691.214 L1166.53 691.214 L1167.09 691.214 L1167.65 691.214 L1168.21 691.214 L1168.77 691.214 L1169.33 691.214 L1169.88 691.214 L1170.44 691.214 L1171 691.214 L1171.56 691.214 L1172.12 691.214 L1172.68 691.214 L1173.24 691.214 L1173.8 691.214 L1174.36 691.214 L1174.92 691.214 L1175.48 691.214 L1176.04 691.214 L1176.6 691.214 L1177.15 691.214 L1177.71 691.214 L1178.27 691.214 L1178.83 691.214 L1179.39 691.214 L1179.95 691.214 L1180.51 691.214 L1181.07 691.214 L1181.63 691.214 L1182.19 691.214 L1182.75 691.214 L1183.31 691.214 L1183.87 691.214 L1184.43 691.214 L1184.98 691.214 L1185.54 691.214 L1186.1 691.214 L1186.66 691.214 L1187.22 691.214 L1187.78 691.214 L1188.34 691.214 L1188.9 691.214 L1189.46 691.214 L1190.02 691.214 L1190.58 691.214 L1191.14 691.214 L1191.7 691.214 L1192.25 691.214 L1192.81 691.214 L1193.37 691.214 L1193.93 691.214 L1194.49 691.214 L1195.05 691.214 L1195.61 691.214 L1196.17 691.214 L1196.73 691.214 L1197.29 691.214 L1197.85 691.214 L1198.41 691.214 L1198.97 691.214 L1199.52 691.214 L1200.08 691.214 L1200.64 691.214 L1201.2 691.214 L1201.76 691.214 L1202.32 691.214 L1202.88 691.214 L1203.44 691.214 L1204 691.214 L1204.56 691.214 L1205.12 691.214 L1205.68 691.214 L1206.24 691.214 L1206.8 691.214 L1207.35 691.214 L1207.91 691.214 L1208.47 691.214 L1209.03 691.214 L1209.59 691.214 L1210.15 691.214 L1210.71 691.214 L1211.27 691.214 L1211.83 691.214 L1212.39 691.214 L1212.95 691.214 L1213.51 691.214 L1214.07 691.214 L1214.62 691.214 L1215.18 691.214 L1215.74 691.214 L1216.3 691.214 L1216.86 691.214 L1217.42 691.214 L1217.98 691.214 L1218.54 691.214 L1219.1 691.214 L1219.66 691.214 L1220.22 691.214 L1220.78 691.214 L1221.34 691.214 L1221.89 691.214 L1222.45 691.214 L1223.01 691.214 L1223.57 691.214 L1224.13 691.214 L1224.69 691.214 L1225.25 691.214 L1225.81 691.214 L1226.37 691.214 L1226.93 691.214 L1227.49 691.214 L1228.05 691.214 L1228.61 691.214 L1229.17 691.214 L1229.72 691.214 L1230.28 691.214 L1230.84 691.214 L1231.4 691.214 L1231.96 691.214 L1232.52 691.214 L1233.08 691.214 L1233.64 691.214 L1234.2 691.214 L1234.76 691.214 L1235.32 691.214 L1235.88 691.214 L1236.44 691.214 L1236.99 691.214 L1237.55 691.214 L1238.11 691.214 L1238.67 691.214 L1239.23 691.214 L1239.79 691.214 L1240.35 691.214 L1240.91 691.214 L1241.47 691.214 L1242.03 691.214 L1242.59 691.214 L1243.15 691.214 L1243.71 691.214 L1244.26 691.214 L1244.82 691.214 L1245.38 691.214 L1245.94 691.214 L1246.5 691.214 L1247.06 691.214 L1247.62 691.214 L1248.18 691.214 L1248.74 691.214 L1249.3 691.214 L1249.86 691.214 L1250.42 691.214 L1250.98 691.214 L1251.54 691.214 L1252.09 691.214 L1252.65 691.214 L1253.21 691.214 L1253.77 691.214 L1254.33 691.214 L1254.89 691.214 L1255.45 691.214 L1256.01 691.214 L1256.57 691.214 L1257.13 691.214 L1257.69 691.214 L1258.25 691.214 L1258.81 691.214 L1259.36 691.214 L1259.92 691.214 L1260.48 691.214 L1261.04 691.214 L1261.6 691.214 L1262.16 691.214 L1262.72 691.214 L1263.28 691.214 L1263.84 691.214 L1264.4 691.214 L1264.96 691.214 L1265.52 691.214 L1266.08 691.214 L1266.63 691.214 L1267.19 691.214 L1267.75 691.214 L1268.31 691.214 L1268.87 691.214 L1269.43 691.214 L1269.99 691.214 L1270.55 691.214 L1271.11 691.214 L1271.67 691.214 L1272.23 691.214 L1272.79 691.214 L1273.35 691.214 L1273.91 691.214 L1274.46 691.214 L1275.02 691.214 L1275.58 691.214 L1276.14 691.214 L1276.7 691.214 L1277.26 691.214 L1277.82 691.214 L1278.38 691.214 L1278.94 691.214 L1279.5 691.214 L1280.06 691.214 L1280.62 691.214 L1281.18 691.214 L1281.73 691.214 L1282.29 691.214 L1282.85 691.214 L1283.41 691.214 L1283.97 691.214 L1284.53 691.214 L1285.09 691.214 L1285.65 691.214 L1286.21 691.214 L1286.77 691.214 L1287.33 691.214 L1287.89 691.214 L1288.45 691.214 L1289 691.214 L1289.56 691.214 L1290.12 691.214 L1290.68 691.214 L1291.24 691.214 L1291.8 691.214 L1292.36 691.214 L1292.92 691.214 L1293.48 691.214 L1294.04 691.214 L1294.6 691.214 L1295.16 691.214 L1295.72 691.214 L1296.28 691.214 L1296.83 691.214 L1297.39 691.214 L1297.95 691.214 L1298.51 691.214 L1299.07 691.214 L1299.63 691.214 L1300.19 691.214 L1300.75 691.214 L1301.31 691.214 L1301.87 691.214 L1302.43 691.214 L1302.99 691.214 L1303.55 691.214 L1304.1 691.214 L1304.66 691.214 L1305.22 691.214 L1305.78 691.214 L1306.34 691.214 L1306.9 691.214 L1307.46 691.214 L1308.02 691.214 L1308.58 691.214 L1309.14 691.214 L1309.7 691.214 L1310.26 691.214 L1310.82 691.214 L1311.38 691.214 L1311.93 691.214 L1312.49 691.214 L1313.05 691.214 L1313.61 691.214 L1314.17 691.214 L1314.73 691.214 L1315.29 691.214 L1315.85 691.214 L1316.41 691.214 L1316.97 691.214 L1317.53 691.214 L1318.09 691.214 L1318.65 691.214 L1319.2 691.214 L1319.76 691.214 L1320.32 691.214 L1320.88 691.214 L1321.44 691.214 L1322 691.214 L1322.56 691.214 L1323.12 691.214 L1323.68 691.214 L1324.24 691.214 L1324.8 691.214 L1325.36 691.214 L1325.92 691.214 L1326.47 691.214 L1327.03 691.214 L1327.59 691.214 L1328.15 691.214 L1328.71 691.214 L1329.27 691.214 L1329.83 691.214 L1330.39 691.214 L1330.95 691.214 L1331.51 691.214 L1332.07 691.214 L1332.63 691.214 L1333.19 691.214 L1333.75 691.214 L1334.3 691.214 L1334.86 691.214 L1335.42 691.214 L1335.98 691.214 L1336.54 691.214 L1337.1 691.214 L1337.66 691.214 L1338.22 691.214 L1338.78 691.214 L1339.34 691.214 L1339.9 691.214 L1340.46 691.214 L1341.02 691.214 L1341.57 691.214 L1342.13 691.214 L1342.69 691.214 L1343.25 691.214 L1343.81 691.214 L1344.37 691.214 L1344.93 691.214 L1345.49 691.214 L1346.05 691.214 L1346.61 691.214 L1347.17 691.214 L1347.73 691.214 L1348.29 691.214 L1348.84 691.214 L1349.4 691.214 L1349.96 691.214 L1350.52 691.214 L1351.08 691.214 L1351.64 691.214 L1352.2 691.214 L1352.76 691.214 L1353.32 691.214 L1353.88 691.214 L1354.44 691.214 L1355 691.214 L1355.56 691.214 L1356.12 691.214 L1356.67 691.214 L1357.23 691.214 L1357.79 691.214 L1358.35 691.214 L1358.91 691.214 L1359.47 691.214 L1360.03 691.214 L1360.59 691.214 L1361.15 691.214 L1361.71 691.214 L1362.27 691.214 L1362.83 691.214 L1363.39 691.214 L1363.94 691.214 L1364.5 691.214 L1365.06 691.214 L1365.62 691.214 L1366.18 691.214 L1366.74 691.214 L1367.3 691.214 L1367.86 691.214 L1368.42 691.214 L1368.98 691.214 L1369.54 691.214 L1370.1 691.214 L1370.66 691.214 L1371.21 691.214 L1371.77 691.214 L1372.33 691.214 L1372.89 691.214 L1373.45 691.214 L1374.01 691.214 L1374.57 691.214 L1375.13 691.214 L1375.69 691.214 L1376.25 691.214 L1376.81 691.214 L1377.37 691.214 L1377.93 691.214 L1378.49 691.214 L1379.04 691.214 L1379.6 691.214 L1380.16 691.214 L1380.72 691.214 L1381.28 691.214 L1381.84 691.214 L1382.4 691.214 L1382.96 691.214 L1383.52 691.214 L1384.08 691.214 L1384.64 691.214 L1385.2 691.214 L1385.76 691.214 L1386.31 691.214 L1386.87 691.214 L1387.43 691.214 L1387.99 691.214 L1388.55 691.214 L1389.11 691.214 L1389.67 691.214 L1390.23 691.214 L1390.79 691.214 L1391.35 691.214 L1391.91 691.214 L1392.47 691.214 L1393.03 691.214 L1393.58 691.214 L1394.14 691.214 L1394.7 691.214 L1395.26 691.214 L1395.82 691.214 L1396.38 691.214 L1396.94 691.214 L1397.5 691.214 L1398.06 691.214 L1398.62 691.214 L1399.18 691.214 L1399.74 691.214 L1400.3 691.214 L1400.86 691.214 L1401.41 691.214 L1401.97 691.214 L1402.53 691.214 L1403.09 691.214 L1403.65 691.214 L1404.21 691.214 L1404.77 691.214 L1405.33 691.214 L1405.89 691.214 L1406.45 691.214 L1407.01 691.214 L1407.57 691.214 L1408.13 691.214 L1408.68 691.214 L1409.24 691.214 L1409.8 691.214 L1410.36 691.214 L1410.92 691.214 L1411.48 691.214 L1412.04 691.214 L1412.6 691.214 L1413.16 691.214 L1413.72 691.214 L1414.28 691.214 L1414.84 691.214 L1415.4 691.214 L1415.95 691.214 L1416.51 691.214 L1417.07 691.214 L1417.63 691.214 L1418.19 691.214 L1418.75 691.214 L1419.31 691.214 L1419.87 691.214 L1420.43 691.214 L1420.99 691.214 L1421.55 691.214 L1422.11 691.214 L1422.67 691.214 L1423.23 691.214 L1423.78 691.214 L1424.34 691.214 L1424.9 691.214 L1425.46 691.214 L1426.02 691.214 L1426.58 691.214 L1427.14 691.214 L1427.7 691.214 L1428.26 691.214 L1428.82 691.214 L1429.38 691.214 L1429.94 691.214 L1430.5 691.214 L1431.05 691.214 L1431.61 691.214 L1432.17 691.214 L1432.73 691.214 L1433.29 691.214 L1433.85 691.214 L1434.41 691.214 L1434.97 691.214 L1435.53 691.214 L1436.09 691.214 L1436.65 691.214 L1437.21 691.214 L1437.77 691.214 L1438.33 691.214 L1438.88 691.214 L1439.44 691.214 L1440 691.214 L1440.56 691.214 L1441.12 691.214 L1441.68 691.214 L1442.24 691.214 L1442.8 691.214 L1443.36 691.214 L1443.92 691.214 L1444.48 691.214 L1445.04 691.214 L1445.6 691.214 L1446.15 691.214 L1446.71 691.214 L1447.27 691.214 L1447.83 691.214 L1448.39 691.214 L1448.95 691.214 L1449.51 691.214 L1450.07 691.214 L1450.63 691.214 L1451.19 691.214 L1451.75 691.214 L1452.31 691.214 L1452.87 691.214 L1453.42 691.214 L1453.98 691.214 L1454.54 691.214 L1455.1 691.214 L1455.66 691.214 L1456.22 691.214 L1456.78 691.214 L1457.34 691.214 L1457.9 691.214 L1458.46 691.214 L1459.02 691.214 L1459.58 691.214 L1460.14 691.214 L1460.7 691.214 L1461.25 691.214 L1461.81 691.214 L1462.37 691.214 L1462.93 691.214 L1463.49 691.214 L1464.05 691.214 L1464.61 691.214 L1465.17 691.214 L1465.73 691.214 L1466.29 691.214 L1466.85 691.214 L1467.41 691.214 L1467.97 691.214 L1468.52 691.214 L1469.08 691.214 L1469.64 691.214 L1470.2 691.214 L1470.76 691.214 L1471.32 691.214 L1471.88 691.214 L1472.44 691.214 L1473 691.214 L1473.56 691.214 L1474.12 691.214 L1474.68 691.214 L1475.24 691.214 L1475.79 691.214 L1476.35 691.214 L1476.91 691.214 L1477.47 691.214 L1478.03 691.214 L1478.59 691.214 L1479.15 691.214 L1479.71 691.214 L1480.27 691.214 L1480.83 691.214 L1481.39 691.214 L1481.95 691.214 L1482.51 691.214 L1483.07 691.214 L1483.62 691.214 L1484.18 691.214 L1484.74 691.214 L1485.3 691.214 L1485.86 691.214 L1486.42 691.214 L1486.98 691.214 L1487.54 691.214 L1488.1 691.214 L1488.66 691.214 L1489.22 691.214 L1489.78 691.214 L1490.34 691.214 L1490.89 691.214 L1491.45 691.214 L1492.01 691.214 L1492.57 691.214 L1493.13 691.214 L1493.69 691.214 L1494.25 691.214 L1494.81 691.214 L1495.37 691.214 L1495.93 691.214 L1496.49 691.214 L1497.05 691.214 L1497.61 691.214 L1498.16 691.214 L1498.72 691.214 L1499.28 691.214 L1499.84 691.214 L1500.4 691.214 L1500.96 691.214 L1501.52 691.214 L1502.08 691.214 L1502.64 691.214 L1503.2 691.214 L1503.76 691.214 L1504.32 691.214 L1504.88 691.214 L1505.44 691.214 L1505.99 691.214 L1506.55 691.214 L1507.11 691.214 L1507.67 691.214 L1508.23 691.214 L1508.79 691.214 L1509.35 691.214 L1509.91 691.214 L1510.47 691.214 L1511.03 691.214 L1511.59 691.214 L1512.15 691.214 L1512.71 691.214 L1513.26 691.214 L1513.82 691.214 L1514.38 691.214 L1514.94 691.214 L1515.5 691.214 L1516.06 691.214 L1516.62 691.214 L1517.18 691.214 L1517.74 691.214 L1518.3 691.214 L1518.86 691.214 L1519.42 691.214 L1519.98 691.214 L1520.53 691.214 L1521.09 691.214 L1521.65 691.214 L1522.21 691.214 L1522.77 691.214 L1523.33 691.214 L1523.89 691.214 L1524.45 691.214 L1525.01 691.214 L1525.57 691.214 L1526.13 691.214 L1526.69 691.214 L1527.25 691.214 L1527.81 691.214 L1528.36 691.214 L1528.92 691.214 L1529.48 691.214 L1530.04 691.214 L1530.6 691.214 L1531.16 691.214 L1531.72 691.214 L1532.28 691.214 L1532.84 691.214 L1533.4 691.214 L1533.96 691.214 L1534.52 691.214 L1535.08 691.214 L1535.63 691.214 L1536.19 691.214 L1536.75 691.214 L1537.31 691.214 L1537.87 691.214 L1538.43 691.214 L1538.99 691.214 L1539.55 691.214 L1540.11 691.214 L1540.67 691.214 L1541.23 691.214 L1541.79 691.214 L1542.35 691.214 L1542.9 691.214 L1543.46 691.214 L1544.02 691.214 L1544.58 691.214 L1545.14 691.214 L1545.7 691.214 L1546.26 691.214 L1546.82 691.214 L1547.38 691.214 L1547.94 691.214 L1548.5 691.214 L1549.06 691.214 L1549.62 691.214 L1550.18 691.214 L1550.73 691.214 L1551.29 691.214 L1551.85 691.214 L1552.41 691.214 L1552.97 691.214 L1553.53 691.214 L1554.09 691.214 L1554.65 691.214 L1555.21 691.214 L1555.77 691.214 L1556.33 691.214 L1556.89 691.214 L1557.45 691.214 L1558 691.214 L1558.56 691.214 L1559.12 691.214 L1559.68 691.214 L1560.24 691.214 L1560.8 691.214 L1561.36 691.214 L1561.92 691.214 L1562.48 691.214 L1563.04 691.214 L1563.6 691.214 L1564.16 691.214 L1564.72 691.214 L1565.28 691.214 L1565.83 691.214 L1566.39 691.214 L1566.95 691.214 L1567.51 691.214 L1568.07 691.214 L1568.63 691.214 L1569.19 691.214 L1569.75 691.214 L1570.31 691.214 L1570.87 691.214 L1571.43 691.214 L1571.99 691.214 L1572.55 691.214 L1573.1 691.214 L1573.66 691.214 L1574.22 691.214 L1574.78 691.214 L1575.34 691.214 L1575.9 691.214 L1576.46 691.214 L1577.02 691.214 L1577.58 691.214 L1578.14 691.214 L1578.7 691.214 L1579.26 691.214 L1579.82 691.214 L1580.37 691.214 L1580.93 691.214 L1581.49 691.214 L1582.05 691.214 L1582.61 691.214 L1583.17 691.214 L1583.73 691.214 L1584.29 691.214 L1584.85 691.214 L1585.41 691.214 L1585.97 691.214 L1586.53 691.214 L1587.09 691.214 L1587.65 691.214 L1588.2 691.214 L1588.76 691.214 L1589.32 691.214 L1589.88 691.214 L1590.44 691.214 L1591 691.214 L1591.56 691.214 L1592.12 691.214 L1592.68 691.214 L1593.24 691.214 L1593.8 691.214 L1594.36 691.214 L1594.92 691.214 L1595.47 691.214 L1596.03 691.214 L1596.59 691.214 L1597.15 691.214 L1597.71 691.214 L1598.27 691.214 L1598.83 691.214 L1599.39 691.214 L1599.95 691.214 L1600.51 691.214 L1601.07 691.214 L1601.63 691.214 L1602.19 691.214 L1602.74 691.214 L1603.3 691.214 L1603.86 691.214 L1604.42 691.214 L1604.98 691.214 L1605.54 691.214 L1606.1 691.214 L1606.66 691.214 L1607.22 691.214 L1607.78 691.214 L1608.34 691.214 L1608.9 691.214 L1609.46 691.214 L1610.02 691.214 L1610.57 691.214 L1611.13 691.214 L1611.69 691.214 L1612.25 691.214 L1612.81 691.214 L1613.37 691.214 L1613.93 691.214 L1614.49 691.214 L1615.05 691.214 L1615.61 691.214 L1616.17 691.214 L1616.73 691.214 L1617.29 691.214 L1617.84 691.214 L1618.4 691.214 L1618.96 691.214 L1619.52 691.214 L1620.08 691.214 L1620.64 691.214 L1621.2 691.214 L1621.76 691.214 L1622.32 691.214 L1622.88 691.214 L1623.44 691.214 L1624 691.214 L1624.56 691.214 L1625.11 691.214 L1625.67 691.214 L1626.23 691.214 L1626.79 691.214 L1627.35 691.214 L1627.91 691.214 L1628.47 691.214 L1629.03 691.214 L1629.59 691.214 L1630.15 691.214 L1630.71 691.214 L1631.27 691.214 L1631.83 691.214 L1632.39 691.214 L1632.94 691.214 L1633.5 691.214 L1634.06 691.214 L1634.62 691.214 L1635.18 691.214 L1635.74 691.214 L1636.3 691.214 L1636.86 691.214 L1637.42 691.214 L1637.98 691.214 L1638.54 691.214 L1639.1 691.214 L1639.66 691.214 L1640.21 691.214 L1640.77 691.214 L1641.33 691.214 L1641.89 691.214 L1642.45 691.214 L1643.01 691.214 L1643.57 691.214 L1644.13 691.214 L1644.69 691.214 L1645.25 691.214 L1645.81 691.214 L1646.37 691.214 L1646.93 691.214 L1647.48 691.214 L1648.04 691.214 L1648.6 691.214 L1649.16 691.214 L1649.72 691.214 L1650.28 691.214 L1650.84 691.214 L1651.4 691.214 L1651.96 691.214 L1652.52 691.214 L1653.08 691.214 L1653.64 691.214 L1654.2 691.214 L1654.76 691.214 L1655.31 691.214 L1655.87 691.214 L1656.43 691.214 L1656.99 691.214 L1657.55 691.214 L1658.11 691.214 L1658.67 691.214 L1659.23 691.214 L1659.79 691.214 L1660.35 691.214 L1660.91 691.214 L1661.47 691.214 L1662.03 691.214 L1662.58 691.214 L1663.14 691.214 L1663.7 691.214 L1664.26 691.214 L1664.82 691.214 L1665.38 691.214 L1665.94 691.214 L1666.5 691.214 L1667.06 691.214 L1667.62 691.214 L1668.18 691.214 L1668.74 691.214 L1669.3 691.214 L1669.85 691.214 L1670.41 691.214 L1670.97 691.214 L1671.53 691.214 L1672.09 691.214 L1672.65 691.214 L1673.21 691.214 L1673.77 691.214 L1674.33 691.214 L1674.89 691.214 L1675.45 691.214 L1676.01 691.214 L1676.57 691.214 L1677.13 691.214 L1677.68 691.214 L1678.24 691.214 L1678.8 691.214 L1679.36 691.214 L1679.92 691.214 L1680.48 691.214 L1681.04 691.214 L1681.6 691.214 L1682.16 691.214 L1682.72 691.214 L1683.28 691.214 L1683.84 691.214 L1684.4 691.214 L1684.95 691.214 L1685.51 691.214 L1686.07 691.214 L1686.63 691.214 L1687.19 691.214 L1687.75 691.214 L1688.31 691.214 L1688.87 691.214 L1689.43 691.214 L1689.99 691.214 L1690.55 691.214 L1691.11 691.214 L1691.67 691.214 L1692.23 691.214 L1692.78 691.214 L1693.34 691.214 L1693.9 691.214 L1694.46 691.214 L1695.02 691.214 L1695.58 691.214 L1696.14 691.214 L1696.7 691.214 L1697.26 691.214 L1697.82 691.214 L1698.38 691.214 L1698.94 691.214 L1699.5 691.214 L1700.05 691.214 L1700.61 691.214 L1701.17 691.214 L1701.73 691.214 L1702.29 691.214 L1702.85 691.214 L1703.41 691.214 L1703.97 691.214 L1704.53 691.214 L1705.09 691.214 L1705.65 691.214 L1706.21 691.214 L1706.77 691.214 L1707.32 691.214 L1707.88 691.214 L1708.44 691.214 L1709 691.214 L1709.56 691.214 L1710.12 691.214 L1710.68 691.214 L1711.24 691.214 L1711.8 691.214 L1712.36 691.214 L1712.92 691.214 L1713.48 691.214 L1714.04 691.214 L1714.6 691.214 L1715.15 691.214 L1715.71 691.214 L1716.27 691.214 L1716.83 691.214 L1717.39 691.214 L1717.95 691.214 L1718.51 691.214 L1719.07 691.214 L1719.63 691.214 L1720.19 691.214 L1720.75 691.214 L1721.31 691.214 L1721.87 691.214 L1722.42 691.214 L1722.98 691.214 L1723.54 691.214 L1724.1 691.214 L1724.66 691.214 L1725.22 691.214 L1725.78 691.214 L1726.34 691.214 L1726.9 691.214 L1727.46 691.214 L1728.02 691.214 L1728.58 691.214 L1729.14 691.214 L1729.69 691.214 L1730.25 691.214 L1730.81 691.214 L1731.37 691.214 L1731.93 691.214 L1732.49 691.214 L1733.05 691.214 L1733.61 691.214 L1734.17 691.214 L1734.73 691.214 L1735.29 691.214 L1735.85 691.214 L1736.41 691.214 L1736.97 691.214 L1737.52 691.214 L1738.08 691.214 L1738.64 691.214 L1739.2 691.214 L1739.76 691.214 L1740.32 691.214 L1740.88 691.214 L1741.44 691.214 L1742 691.214 L1742.56 691.214 L1743.12 691.214 L1743.68 691.214 L1744.24 691.214 L1744.79 691.214 L1745.35 691.214 L1745.91 691.214 L1746.47 691.214 L1747.03 691.214 L1747.59 691.214 L1748.15 691.214 L1748.71 691.214 L1749.27 691.214 L1749.83 691.214 L1750.39 691.214 L1750.95 691.214 L1751.51 691.214 L1752.06 691.214 L1752.62 691.214 L1753.18 691.214 L1753.74 691.214 L1754.3 691.214 L1754.86 691.214 L1755.42 691.214 L1755.98 691.214 L1756.54 691.214 L1757.1 691.214 L1757.66 691.214 L1758.22 691.214 L1758.78 691.214 L1759.34 691.214 L1759.89 691.214 L1760.45 691.214 L1761.01 691.214 L1761.57 691.214 L1762.13 691.214 L1762.69 691.214 L1763.25 691.214 L1763.81 691.214 L1764.37 691.214 L1764.93 691.214 L1765.49 691.214 L1766.05 691.214 L1766.61 691.214 L1767.16 691.214 L1767.72 691.214 L1768.28 691.214 L1768.84 691.214 L1769.4 691.214 L1769.96 691.214 L1770.52 691.214 L1771.08 691.214 L1771.64 691.214 L1772.2 691.214 L1772.76 691.214 L1773.32 691.214 L1773.88 691.214 L1774.43 691.214 L1774.99 691.214 L1775.55 691.214 L1776.11 691.214 L1776.67 691.214 L1777.23 691.214 L1777.79 691.214 L1778.35 691.214 L1778.91 691.214 L1779.47 691.214 L1780.03 691.214 L1780.59 691.214 L1781.15 691.214 L1781.71 691.214 L1782.26 691.214 L1782.82 691.214 L1783.38 691.214 L1783.94 691.214 L1784.5 691.214 L1785.06 691.214 L1785.62 691.214 L1786.18 691.214 L1786.74 691.214 L1787.3 691.214 L1787.86 691.214 L1788.42 691.214 L1788.98 691.214 L1789.53 691.214 L1790.09 691.214 L1790.65 691.214 L1791.21 691.214 L1791.77 691.214 L1792.33 691.214 L1792.89 691.214 L1793.45 691.214 L1794.01 691.214 L1794.57 691.214 L1795.13 691.214 L1795.69 691.214 L1796.25 691.214 L1796.8 691.214 L1797.36 691.214 L1797.92 691.214 L1798.48 691.214 L1799.04 691.214 L1799.6 691.214 L1800.16 691.214 L1800.72 691.214 L1801.28 691.214 L1801.84 691.214 L1802.4 691.214 L1802.96 691.214 L1803.52 691.214 L1804.08 691.214 L1804.63 691.214 L1805.19 691.214 L1805.75 691.214 L1806.31 691.214 L1806.87 691.214 L1807.43 691.214 L1807.99 691.214 L1808.55 691.214 L1809.11 691.214 L1809.67 691.214 L1810.23 691.214 L1810.79 691.214 L1811.35 691.214 L1811.9 691.214 L1812.46 691.214 L1813.02 691.214 L1813.58 691.214 L1814.14 691.214 L1814.7 691.214 L1815.26 691.214 L1815.82 691.214 L1816.38 691.214 L1816.94 691.214 L1817.5 691.214 L1818.06 691.214 L1818.62 691.214 L1819.18 691.214 L1819.73 691.214 L1820.29 691.214 L1820.85 691.214 L1821.41 691.214 L1821.97 691.214 L1822.53 691.214 L1823.09 691.214 L1823.65 691.214 L1824.21 691.214 L1824.77 691.214 L1825.33 691.214 L1825.89 691.214 L1826.45 691.214 L1827 691.214 L1827.56 691.214 L1828.12 691.214 L1828.68 691.214 L1829.24 691.214 L1829.8 691.214 L1830.36 691.214 L1830.92 691.214 L1831.48 691.214 L1832.04 691.214 L1832.6 691.214 L1833.16 691.214 L1833.72 691.214 L1834.27 691.214 L1834.83 691.214 L1835.39 691.214 L1835.95 691.214 L1836.51 691.214 L1837.07 691.214 L1837.63 691.214 L1838.19 691.214 L1838.19 680.229 L1837.63 680.229 L1837.07 680.229 L1836.51 680.229 L1835.95 680.229 L1835.39 680.229 L1834.83 680.229 L1834.27 680.229 L1833.72 680.229 L1833.16 680.229 L1832.6 680.229 L1832.04 680.229 L1831.48 680.229 L1830.92 680.229 L1830.36 680.229 L1829.8 680.229 L1829.24 680.229 L1828.68 680.229 L1828.12 680.229 L1827.56 680.229 L1827 680.229 L1826.45 680.229 L1825.89 680.229 L1825.33 680.229 L1824.77 680.229 L1824.21 680.229 L1823.65 680.229 L1823.09 680.229 L1822.53 680.229 L1821.97 680.229 L1821.41 680.229 L1820.85 680.229 L1820.29 680.229 L1819.73 680.229 L1819.18 680.229 L1818.62 680.229 L1818.06 680.229 L1817.5 680.229 L1816.94 680.229 L1816.38 680.229 L1815.82 680.229 L1815.26 680.229 L1814.7 680.229 L1814.14 680.229 L1813.58 680.229 L1813.02 680.229 L1812.46 680.229 L1811.9 680.229 L1811.35 680.229 L1810.79 680.229 L1810.23 680.229 L1809.67 680.229 L1809.11 680.229 L1808.55 680.229 L1807.99 680.229 L1807.43 680.229 L1806.87 680.229 L1806.31 680.229 L1805.75 680.229 L1805.19 680.229 L1804.63 680.229 L1804.08 680.229 L1803.52 680.229 L1802.96 680.229 L1802.4 680.229 L1801.84 680.229 L1801.28 680.229 L1800.72 680.229 L1800.16 680.229 L1799.6 680.229 L1799.04 680.229 L1798.48 680.229 L1797.92 680.229 L1797.36 680.229 L1796.8 680.229 L1796.25 680.229 L1795.69 680.229 L1795.13 680.229 L1794.57 680.229 L1794.01 680.229 L1793.45 680.229 L1792.89 680.229 L1792.33 680.229 L1791.77 680.229 L1791.21 680.229 L1790.65 680.229 L1790.09 680.229 L1789.53 680.229 L1788.98 680.229 L1788.42 680.229 L1787.86 680.229 L1787.3 680.229 L1786.74 680.229 L1786.18 680.229 L1785.62 680.229 L1785.06 680.229 L1784.5 680.229 L1783.94 680.229 L1783.38 680.229 L1782.82 680.229 L1782.26 680.229 L1781.71 680.229 L1781.15 680.229 L1780.59 680.229 L1780.03 680.229 L1779.47 680.229 L1778.91 680.229 L1778.35 680.229 L1777.79 680.229 L1777.23 680.229 L1776.67 680.229 L1776.11 680.229 L1775.55 680.229 L1774.99 680.229 L1774.43 680.229 L1773.88 680.229 L1773.32 680.229 L1772.76 680.229 L1772.2 680.229 L1771.64 680.229 L1771.08 680.229 L1770.52 680.229 L1769.96 680.229 L1769.4 680.229 L1768.84 680.229 L1768.28 680.229 L1767.72 680.229 L1767.16 680.229 L1766.61 680.229 L1766.05 680.229 L1765.49 680.229 L1764.93 680.229 L1764.37 680.229 L1763.81 680.229 L1763.25 680.229 L1762.69 680.229 L1762.13 680.229 L1761.57 680.229 L1761.01 680.229 L1760.45 680.229 L1759.89 680.229 L1759.34 680.229 L1758.78 680.229 L1758.22 680.229 L1757.66 680.229 L1757.1 680.229 L1756.54 680.229 L1755.98 680.229 L1755.42 680.229 L1754.86 680.229 L1754.3 680.229 L1753.74 680.229 L1753.18 680.229 L1752.62 680.229 L1752.06 680.229 L1751.51 680.229 L1750.95 680.229 L1750.39 680.229 L1749.83 680.229 L1749.27 680.229 L1748.71 680.229 L1748.15 680.229 L1747.59 680.229 L1747.03 680.229 L1746.47 680.229 L1745.91 680.229 L1745.35 680.229 L1744.79 680.229 L1744.24 680.229 L1743.68 680.229 L1743.12 680.229 L1742.56 680.229 L1742 680.229 L1741.44 680.229 L1740.88 680.229 L1740.32 680.229 L1739.76 680.229 L1739.2 680.229 L1738.64 680.229 L1738.08 680.229 L1737.52 680.229 L1736.97 680.229 L1736.41 680.229 L1735.85 680.229 L1735.29 680.229 L1734.73 680.229 L1734.17 680.229 L1733.61 680.229 L1733.05 680.229 L1732.49 680.229 L1731.93 680.229 L1731.37 680.229 L1730.81 680.229 L1730.25 680.229 L1729.69 680.229 L1729.14 680.229 L1728.58 680.229 L1728.02 680.229 L1727.46 680.229 L1726.9 680.229 L1726.34 680.229 L1725.78 680.229 L1725.22 680.229 L1724.66 680.229 L1724.1 680.229 L1723.54 680.229 L1722.98 680.229 L1722.42 680.229 L1721.87 680.229 L1721.31 680.229 L1720.75 680.229 L1720.19 680.229 L1719.63 680.229 L1719.07 680.229 L1718.51 680.229 L1717.95 680.229 L1717.39 680.229 L1716.83 680.229 L1716.27 680.229 L1715.71 680.229 L1715.15 680.229 L1714.6 680.229 L1714.04 680.229 L1713.48 680.229 L1712.92 680.229 L1712.36 680.229 L1711.8 680.229 L1711.24 680.229 L1710.68 680.229 L1710.12 680.229 L1709.56 680.229 L1709 680.229 L1708.44 680.229 L1707.88 680.229 L1707.32 680.229 L1706.77 680.229 L1706.21 680.229 L1705.65 680.229 L1705.09 680.229 L1704.53 680.229 L1703.97 680.229 L1703.41 680.229 L1702.85 680.229 L1702.29 680.229 L1701.73 680.229 L1701.17 680.229 L1700.61 680.229 L1700.05 680.229 L1699.5 680.229 L1698.94 680.229 L1698.38 680.229 L1697.82 680.229 L1697.26 680.229 L1696.7 680.229 L1696.14 680.229 L1695.58 680.229 L1695.02 680.229 L1694.46 680.229 L1693.9 680.229 L1693.34 680.229 L1692.78 680.229 L1692.23 680.229 L1691.67 680.229 L1691.11 680.229 L1690.55 680.229 L1689.99 680.229 L1689.43 680.229 L1688.87 680.229 L1688.31 680.229 L1687.75 680.229 L1687.19 680.229 L1686.63 680.229 L1686.07 680.229 L1685.51 680.229 L1684.95 680.229 L1684.4 680.229 L1683.84 680.229 L1683.28 680.229 L1682.72 680.229 L1682.16 680.229 L1681.6 680.229 L1681.04 680.229 L1680.48 680.229 L1679.92 680.229 L1679.36 680.229 L1678.8 680.229 L1678.24 680.229 L1677.68 680.229 L1677.13 680.229 L1676.57 680.229 L1676.01 680.229 L1675.45 680.229 L1674.89 680.229 L1674.33 680.229 L1673.77 680.229 L1673.21 680.229 L1672.65 680.229 L1672.09 680.229 L1671.53 680.229 L1670.97 680.229 L1670.41 680.229 L1669.85 680.229 L1669.3 680.229 L1668.74 680.229 L1668.18 680.229 L1667.62 680.229 L1667.06 680.229 L1666.5 680.229 L1665.94 680.229 L1665.38 680.229 L1664.82 680.229 L1664.26 680.229 L1663.7 680.229 L1663.14 680.229 L1662.58 680.229 L1662.03 680.229 L1661.47 680.229 L1660.91 680.229 L1660.35 680.229 L1659.79 680.229 L1659.23 680.229 L1658.67 680.229 L1658.11 680.229 L1657.55 680.229 L1656.99 680.229 L1656.43 680.229 L1655.87 680.229 L1655.31 680.229 L1654.76 680.229 L1654.2 680.229 L1653.64 680.229 L1653.08 680.229 L1652.52 680.229 L1651.96 680.229 L1651.4 680.229 L1650.84 680.229 L1650.28 680.229 L1649.72 680.229 L1649.16 680.229 L1648.6 680.229 L1648.04 680.229 L1647.48 680.229 L1646.93 680.229 L1646.37 680.229 L1645.81 680.229 L1645.25 680.229 L1644.69 680.229 L1644.13 680.229 L1643.57 680.229 L1643.01 680.229 L1642.45 680.229 L1641.89 680.229 L1641.33 680.229 L1640.77 680.229 L1640.21 680.229 L1639.66 680.229 L1639.1 680.229 L1638.54 680.229 L1637.98 680.229 L1637.42 680.229 L1636.86 680.229 L1636.3 680.229 L1635.74 680.229 L1635.18 680.229 L1634.62 680.229 L1634.06 680.229 L1633.5 680.229 L1632.94 680.229 L1632.39 680.229 L1631.83 680.229 L1631.27 680.229 L1630.71 680.229 L1630.15 680.229 L1629.59 680.229 L1629.03 680.229 L1628.47 680.229 L1627.91 680.229 L1627.35 680.229 L1626.79 680.229 L1626.23 680.229 L1625.67 680.229 L1625.11 680.229 L1624.56 680.229 L1624 680.229 L1623.44 680.229 L1622.88 680.229 L1622.32 680.229 L1621.76 680.229 L1621.2 680.229 L1620.64 680.229 L1620.08 680.229 L1619.52 680.229 L1618.96 680.229 L1618.4 680.229 L1617.84 680.229 L1617.29 680.229 L1616.73 680.229 L1616.17 680.229 L1615.61 680.229 L1615.05 680.229 L1614.49 680.229 L1613.93 680.229 L1613.37 680.229 L1612.81 680.229 L1612.25 680.229 L1611.69 680.229 L1611.13 680.229 L1610.57 680.229 L1610.02 680.229 L1609.46 680.229 L1608.9 680.229 L1608.34 680.229 L1607.78 680.229 L1607.22 680.229 L1606.66 680.229 L1606.1 680.229 L1605.54 680.229 L1604.98 680.229 L1604.42 680.229 L1603.86 680.229 L1603.3 680.229 L1602.74 680.229 L1602.19 680.229 L1601.63 680.229 L1601.07 680.229 L1600.51 680.229 L1599.95 680.229 L1599.39 680.229 L1598.83 680.229 L1598.27 680.229 L1597.71 680.229 L1597.15 680.229 L1596.59 680.229 L1596.03 680.229 L1595.47 680.229 L1594.92 680.229 L1594.36 680.229 L1593.8 680.229 L1593.24 680.229 L1592.68 680.229 L1592.12 680.229 L1591.56 680.229 L1591 680.229 L1590.44 680.229 L1589.88 680.229 L1589.32 680.229 L1588.76 680.229 L1588.2 680.229 L1587.65 680.229 L1587.09 680.229 L1586.53 680.229 L1585.97 680.229 L1585.41 680.229 L1584.85 680.229 L1584.29 680.229 L1583.73 680.229 L1583.17 680.229 L1582.61 680.229 L1582.05 680.229 L1581.49 680.229 L1580.93 680.229 L1580.37 680.229 L1579.82 680.229 L1579.26 680.229 L1578.7 680.229 L1578.14 680.229 L1577.58 680.229 L1577.02 680.229 L1576.46 680.229 L1575.9 680.229 L1575.34 680.229 L1574.78 680.229 L1574.22 680.229 L1573.66 680.229 L1573.1 680.229 L1572.55 680.229 L1571.99 680.229 L1571.43 680.229 L1570.87 680.229 L1570.31 680.229 L1569.75 680.229 L1569.19 680.229 L1568.63 680.229 L1568.07 680.229 L1567.51 680.229 L1566.95 680.229 L1566.39 680.229 L1565.83 680.229 L1565.28 680.229 L1564.72 680.229 L1564.16 680.229 L1563.6 680.229 L1563.04 680.229 L1562.48 680.229 L1561.92 680.229 L1561.36 680.229 L1560.8 680.229 L1560.24 680.229 L1559.68 680.229 L1559.12 680.229 L1558.56 680.229 L1558 680.229 L1557.45 680.229 L1556.89 680.229 L1556.33 680.229 L1555.77 680.229 L1555.21 680.229 L1554.65 680.229 L1554.09 680.229 L1553.53 680.229 L1552.97 680.229 L1552.41 680.229 L1551.85 680.229 L1551.29 680.229 L1550.73 680.229 L1550.18 680.229 L1549.62 680.229 L1549.06 680.229 L1548.5 680.229 L1547.94 680.229 L1547.38 680.229 L1546.82 680.229 L1546.26 680.229 L1545.7 680.229 L1545.14 680.229 L1544.58 680.229 L1544.02 680.229 L1543.46 680.229 L1542.9 680.229 L1542.35 680.229 L1541.79 680.229 L1541.23 680.229 L1540.67 680.229 L1540.11 680.229 L1539.55 680.229 L1538.99 680.229 L1538.43 680.229 L1537.87 680.229 L1537.31 680.229 L1536.75 680.229 L1536.19 680.229 L1535.63 680.229 L1535.08 680.229 L1534.52 680.229 L1533.96 680.229 L1533.4 680.229 L1532.84 680.229 L1532.28 680.229 L1531.72 680.229 L1531.16 680.229 L1530.6 680.229 L1530.04 680.229 L1529.48 680.229 L1528.92 680.229 L1528.36 680.229 L1527.81 680.229 L1527.25 680.229 L1526.69 680.229 L1526.13 680.229 L1525.57 680.229 L1525.01 680.229 L1524.45 680.229 L1523.89 680.229 L1523.33 680.229 L1522.77 680.229 L1522.21 680.229 L1521.65 680.229 L1521.09 680.229 L1520.53 680.229 L1519.98 680.229 L1519.42 680.229 L1518.86 680.229 L1518.3 680.229 L1517.74 680.229 L1517.18 680.229 L1516.62 680.229 L1516.06 680.229 L1515.5 680.229 L1514.94 680.229 L1514.38 680.229 L1513.82 680.229 L1513.26 680.229 L1512.71 680.229 L1512.15 680.229 L1511.59 680.229 L1511.03 680.229 L1510.47 680.229 L1509.91 680.229 L1509.35 680.229 L1508.79 680.229 L1508.23 680.229 L1507.67 680.229 L1507.11 680.229 L1506.55 680.229 L1505.99 680.229 L1505.44 680.229 L1504.88 680.229 L1504.32 680.229 L1503.76 680.229 L1503.2 680.229 L1502.64 680.229 L1502.08 680.229 L1501.52 680.229 L1500.96 680.229 L1500.4 680.229 L1499.84 680.229 L1499.28 680.229 L1498.72 680.229 L1498.16 680.229 L1497.61 680.229 L1497.05 680.229 L1496.49 680.229 L1495.93 680.229 L1495.37 680.229 L1494.81 680.229 L1494.25 680.229 L1493.69 680.229 L1493.13 680.229 L1492.57 680.229 L1492.01 680.229 L1491.45 680.229 L1490.89 680.229 L1490.34 680.229 L1489.78 680.229 L1489.22 680.229 L1488.66 680.229 L1488.1 680.229 L1487.54 680.229 L1486.98 680.229 L1486.42 680.229 L1485.86 680.229 L1485.3 680.229 L1484.74 680.229 L1484.18 680.229 L1483.62 680.229 L1483.07 680.229 L1482.51 680.229 L1481.95 680.229 L1481.39 680.229 L1480.83 680.229 L1480.27 680.229 L1479.71 680.229 L1479.15 680.229 L1478.59 680.229 L1478.03 680.229 L1477.47 680.229 L1476.91 680.229 L1476.35 680.229 L1475.79 680.229 L1475.24 680.229 L1474.68 680.229 L1474.12 680.229 L1473.56 680.229 L1473 680.229 L1472.44 680.229 L1471.88 680.229 L1471.32 680.229 L1470.76 680.229 L1470.2 680.229 L1469.64 680.229 L1469.08 680.229 L1468.52 680.229 L1467.97 680.229 L1467.41 680.229 L1466.85 680.229 L1466.29 680.229 L1465.73 680.229 L1465.17 680.229 L1464.61 680.229 L1464.05 680.229 L1463.49 680.229 L1462.93 680.229 L1462.37 680.229 L1461.81 680.229 L1461.25 680.229 L1460.7 680.229 L1460.14 680.229 L1459.58 680.229 L1459.02 680.229 L1458.46 680.229 L1457.9 680.229 L1457.34 680.229 L1456.78 680.229 L1456.22 680.229 L1455.66 680.229 L1455.1 680.229 L1454.54 680.229 L1453.98 680.229 L1453.42 680.229 L1452.87 680.229 L1452.31 680.229 L1451.75 680.229 L1451.19 680.229 L1450.63 680.229 L1450.07 680.229 L1449.51 680.229 L1448.95 680.229 L1448.39 680.229 L1447.83 680.229 L1447.27 680.229 L1446.71 680.229 L1446.15 680.229 L1445.6 680.229 L1445.04 680.229 L1444.48 680.229 L1443.92 680.229 L1443.36 680.229 L1442.8 680.229 L1442.24 680.229 L1441.68 680.229 L1441.12 680.229 L1440.56 680.229 L1440 680.229 L1439.44 680.229 L1438.88 680.229 L1438.33 680.229 L1437.77 680.229 L1437.21 680.229 L1436.65 680.229 L1436.09 680.229 L1435.53 680.229 L1434.97 680.229 L1434.41 680.229 L1433.85 680.229 L1433.29 680.229 L1432.73 680.229 L1432.17 680.229 L1431.61 680.229 L1431.05 680.229 L1430.5 680.229 L1429.94 680.229 L1429.38 680.229 L1428.82 680.229 L1428.26 680.229 L1427.7 680.229 L1427.14 680.229 L1426.58 680.229 L1426.02 680.229 L1425.46 680.229 L1424.9 680.229 L1424.34 680.229 L1423.78 680.229 L1423.23 680.229 L1422.67 680.229 L1422.11 680.229 L1421.55 680.229 L1420.99 680.229 L1420.43 680.229 L1419.87 680.229 L1419.31 680.229 L1418.75 680.229 L1418.19 680.229 L1417.63 680.229 L1417.07 680.229 L1416.51 680.229 L1415.95 680.229 L1415.4 680.229 L1414.84 680.229 L1414.28 680.229 L1413.72 680.229 L1413.16 680.229 L1412.6 680.229 L1412.04 680.229 L1411.48 680.229 L1410.92 680.229 L1410.36 680.229 L1409.8 680.229 L1409.24 680.229 L1408.68 680.229 L1408.13 680.229 L1407.57 680.229 L1407.01 680.229 L1406.45 680.229 L1405.89 680.229 L1405.33 680.229 L1404.77 680.229 L1404.21 680.229 L1403.65 680.229 L1403.09 680.229 L1402.53 680.229 L1401.97 680.229 L1401.41 680.229 L1400.86 680.229 L1400.3 680.229 L1399.74 680.229 L1399.18 680.229 L1398.62 680.229 L1398.06 680.229 L1397.5 680.229 L1396.94 680.229 L1396.38 680.229 L1395.82 680.229 L1395.26 680.229 L1394.7 680.229 L1394.14 680.229 L1393.58 680.229 L1393.03 680.229 L1392.47 680.229 L1391.91 680.229 L1391.35 680.229 L1390.79 680.229 L1390.23 680.229 L1389.67 680.229 L1389.11 680.229 L1388.55 680.229 L1387.99 680.229 L1387.43 680.229 L1386.87 680.229 L1386.31 680.229 L1385.76 680.229 L1385.2 680.229 L1384.64 680.229 L1384.08 680.229 L1383.52 680.229 L1382.96 680.229 L1382.4 680.229 L1381.84 680.229 L1381.28 680.229 L1380.72 680.229 L1380.16 680.229 L1379.6 680.229 L1379.04 680.229 L1378.49 680.229 L1377.93 680.229 L1377.37 680.229 L1376.81 680.229 L1376.25 680.229 L1375.69 680.229 L1375.13 680.229 L1374.57 680.229 L1374.01 680.229 L1373.45 680.229 L1372.89 680.229 L1372.33 680.229 L1371.77 680.229 L1371.21 680.229 L1370.66 680.229 L1370.1 680.229 L1369.54 680.229 L1368.98 680.229 L1368.42 680.229 L1367.86 680.229 L1367.3 680.229 L1366.74 680.229 L1366.18 680.229 L1365.62 680.229 L1365.06 680.229 L1364.5 680.229 L1363.94 680.229 L1363.39 680.229 L1362.83 680.229 L1362.27 680.229 L1361.71 680.229 L1361.15 680.229 L1360.59 680.229 L1360.03 680.229 L1359.47 680.229 L1358.91 680.229 L1358.35 680.229 L1357.79 680.229 L1357.23 680.229 L1356.67 680.229 L1356.12 680.229 L1355.56 680.229 L1355 680.229 L1354.44 680.229 L1353.88 680.229 L1353.32 680.229 L1352.76 680.229 L1352.2 680.229 L1351.64 680.229 L1351.08 680.229 L1350.52 680.229 L1349.96 680.229 L1349.4 680.229 L1348.84 680.229 L1348.29 680.229 L1347.73 680.229 L1347.17 680.229 L1346.61 680.229 L1346.05 680.229 L1345.49 680.229 L1344.93 680.229 L1344.37 680.229 L1343.81 680.229 L1343.25 680.229 L1342.69 680.229 L1342.13 680.229 L1341.57 680.229 L1341.02 680.229 L1340.46 680.229 L1339.9 680.229 L1339.34 680.229 L1338.78 680.229 L1338.22 680.229 L1337.66 680.229 L1337.1 680.229 L1336.54 680.229 L1335.98 680.229 L1335.42 680.229 L1334.86 680.229 L1334.3 680.229 L1333.75 680.229 L1333.19 680.229 L1332.63 680.229 L1332.07 680.229 L1331.51 680.229 L1330.95 680.229 L1330.39 680.229 L1329.83 680.229 L1329.27 680.229 L1328.71 680.229 L1328.15 680.229 L1327.59 680.229 L1327.03 680.229 L1326.47 680.229 L1325.92 680.229 L1325.36 680.229 L1324.8 680.229 L1324.24 680.229 L1323.68 680.229 L1323.12 680.229 L1322.56 680.229 L1322 680.229 L1321.44 680.229 L1320.88 680.229 L1320.32 680.229 L1319.76 680.229 L1319.2 680.229 L1318.65 680.229 L1318.09 680.229 L1317.53 680.229 L1316.97 680.229 L1316.41 680.229 L1315.85 680.229 L1315.29 680.229 L1314.73 680.229 L1314.17 680.229 L1313.61 680.229 L1313.05 680.229 L1312.49 680.229 L1311.93 680.229 L1311.38 680.229 L1310.82 680.229 L1310.26 680.229 L1309.7 680.229 L1309.14 680.229 L1308.58 680.229 L1308.02 680.229 L1307.46 680.229 L1306.9 680.229 L1306.34 680.229 L1305.78 680.229 L1305.22 680.229 L1304.66 680.229 L1304.1 680.229 L1303.55 680.229 L1302.99 680.229 L1302.43 680.229 L1301.87 680.229 L1301.31 680.229 L1300.75 680.229 L1300.19 680.229 L1299.63 680.229 L1299.07 680.229 L1298.51 680.229 L1297.95 680.229 L1297.39 680.229 L1296.83 680.229 L1296.28 680.229 L1295.72 680.229 L1295.16 680.229 L1294.6 680.229 L1294.04 680.229 L1293.48 680.229 L1292.92 680.229 L1292.36 680.229 L1291.8 680.229 L1291.24 680.229 L1290.68 680.229 L1290.12 680.229 L1289.56 680.229 L1289 680.229 L1288.45 680.229 L1287.89 680.229 L1287.33 680.229 L1286.77 680.229 L1286.21 680.229 L1285.65 680.229 L1285.09 680.229 L1284.53 680.229 L1283.97 680.229 L1283.41 680.229 L1282.85 680.229 L1282.29 680.229 L1281.73 680.229 L1281.18 680.229 L1280.62 680.229 L1280.06 680.229 L1279.5 680.229 L1278.94 680.229 L1278.38 680.229 L1277.82 680.229 L1277.26 680.229 L1276.7 680.229 L1276.14 680.229 L1275.58 680.229 L1275.02 680.229 L1274.46 680.229 L1273.91 680.229 L1273.35 680.229 L1272.79 680.229 L1272.23 680.229 L1271.67 680.229 L1271.11 680.229 L1270.55 680.229 L1269.99 680.229 L1269.43 680.229 L1268.87 680.229 L1268.31 680.229 L1267.75 680.229 L1267.19 680.229 L1266.63 680.229 L1266.08 680.229 L1265.52 680.229 L1264.96 680.229 L1264.4 680.229 L1263.84 680.229 L1263.28 680.229 L1262.72 680.229 L1262.16 680.229 L1261.6 680.229 L1261.04 680.229 L1260.48 680.229 L1259.92 680.229 L1259.36 680.229 L1258.81 680.229 L1258.25 680.229 L1257.69 680.229 L1257.13 680.229 L1256.57 680.229 L1256.01 680.229 L1255.45 680.229 L1254.89 680.229 L1254.33 680.229 L1253.77 680.229 L1253.21 680.229 L1252.65 680.229 L1252.09 680.229 L1251.54 680.229 L1250.98 680.229 L1250.42 680.229 L1249.86 680.229 L1249.3 680.229 L1248.74 680.229 L1248.18 680.229 L1247.62 680.229 L1247.06 680.229 L1246.5 680.229 L1245.94 680.229 L1245.38 680.229 L1244.82 680.229 L1244.26 680.229 L1243.71 680.229 L1243.15 680.229 L1242.59 680.229 L1242.03 680.229 L1241.47 680.229 L1240.91 680.229 L1240.35 680.229 L1239.79 680.229 L1239.23 680.229 L1238.67 680.229 L1238.11 680.229 L1237.55 680.229 L1236.99 680.229 L1236.44 680.229 L1235.88 680.229 L1235.32 680.229 L1234.76 680.229 L1234.2 680.229 L1233.64 680.229 L1233.08 680.229 L1232.52 680.229 L1231.96 680.229 L1231.4 680.229 L1230.84 680.229 L1230.28 680.229 L1229.72 680.229 L1229.17 680.229 L1228.61 680.229 L1228.05 680.229 L1227.49 680.229 L1226.93 680.229 L1226.37 680.229 L1225.81 680.229 L1225.25 680.229 L1224.69 680.229 L1224.13 680.229 L1223.57 680.229 L1223.01 680.229 L1222.45 680.229 L1221.89 680.229 L1221.34 680.229 L1220.78 680.229 L1220.22 680.229 L1219.66 680.229 L1219.1 680.229 L1218.54 680.229 L1217.98 680.229 L1217.42 680.229 L1216.86 680.229 L1216.3 680.229 L1215.74 680.229 L1215.18 680.229 L1214.62 680.229 L1214.07 680.229 L1213.51 680.229 L1212.95 680.229 L1212.39 680.229 L1211.83 680.229 L1211.27 680.229 L1210.71 680.229 L1210.15 680.229 L1209.59 680.229 L1209.03 680.229 L1208.47 680.229 L1207.91 680.229 L1207.35 680.229 L1206.8 680.229 L1206.24 680.229 L1205.68 680.229 L1205.12 680.229 L1204.56 680.229 L1204 680.229 L1203.44 680.229 L1202.88 680.229 L1202.32 680.229 L1201.76 680.229 L1201.2 680.229 L1200.64 680.229 L1200.08 680.229 L1199.52 680.229 L1198.97 680.229 L1198.41 680.229 L1197.85 680.229 L1197.29 680.229 L1196.73 680.229 L1196.17 680.229 L1195.61 680.229 L1195.05 680.229 L1194.49 680.229 L1193.93 680.229 L1193.37 680.229 L1192.81 680.229 L1192.25 680.229 L1191.7 680.229 L1191.14 680.229 L1190.58 680.229 L1190.02 680.229 L1189.46 680.229 L1188.9 680.229 L1188.34 680.229 L1187.78 680.229 L1187.22 680.229 L1186.66 680.229 L1186.1 680.229 L1185.54 680.229 L1184.98 680.229 L1184.43 680.229 L1183.87 680.229 L1183.31 680.229 L1182.75 680.229 L1182.19 680.229 L1181.63 680.229 L1181.07 680.229 L1180.51 680.229 L1179.95 680.229 L1179.39 680.229 L1178.83 680.229 L1178.27 680.229 L1177.71 680.229 L1177.15 680.229 L1176.6 680.229 L1176.04 680.229 L1175.48 680.229 L1174.92 680.229 L1174.36 680.229 L1173.8 680.229 L1173.24 680.229 L1172.68 680.229 L1172.12 680.229 L1171.56 680.229 L1171 680.229 L1170.44 680.229 L1169.88 680.229 L1169.33 680.229 L1168.77 680.229 L1168.21 680.229 L1167.65 680.229 L1167.09 680.229 L1166.53 680.229 L1165.97 680.229 L1165.41 680.229 L1164.85 680.229 L1164.29 680.229 L1163.73 680.229 L1163.17 680.229 L1162.61 680.229 L1162.05 680.229 L1161.5 680.229 L1160.94 680.229 L1160.38 680.229 L1159.82 680.229 L1159.26 680.229 L1158.7 680.229 L1158.14 680.229 L1157.58 680.229 L1157.02 680.229 L1156.46 680.229 L1155.9 680.229 L1155.34 680.229 L1154.78 680.229 L1154.23 680.229 L1153.67 680.229 L1153.11 680.229 L1152.55 680.229 L1151.99 680.229 L1151.43 680.229 L1150.87 680.229 L1150.31 680.229 L1149.75 680.229 L1149.19 680.229 L1148.63 680.229 L1148.07 680.229 L1147.51 680.229 L1146.96 680.229 L1146.4 680.229 L1145.84 680.229 L1145.28 680.229 L1144.72 680.229 L1144.16 680.229 L1143.6 680.229 L1143.04 680.229 L1142.48 680.229 L1141.92 680.229 L1141.36 680.229 L1140.8 680.229 L1140.24 680.229 L1139.68 680.229 L1139.13 680.229 L1138.57 680.229 L1138.01 680.229 L1137.45 680.229 L1136.89 680.229 L1136.33 680.229 L1135.77 680.229 L1135.21 680.229 L1134.65 680.229 L1134.09 680.229 L1133.53 680.229 L1132.97 680.229 L1132.41 680.229 L1131.86 680.229 L1131.3 680.229 L1130.74 680.229 L1130.18 680.229 L1129.62 680.229 L1129.06 680.229 L1128.5 680.229 L1127.94 680.229 L1127.38 680.229 L1126.82 680.229 L1126.26 680.229 L1125.7 680.229 L1125.14 680.229 L1124.59 680.229 L1124.03 680.229 L1123.47 680.229 L1122.91 680.229 L1122.35 680.229 L1121.79 680.229 L1121.23 680.229 L1120.67 680.229 L1120.11 680.229 L1119.55 680.229 L1118.99 680.229 L1118.43 680.229 L1117.87 680.229 L1117.31 680.229 L1116.76 680.229 L1116.2 680.229 L1115.64 680.229 L1115.08 680.229 L1114.52 680.229 L1113.96 680.229 L1113.4 680.229 L1112.84 680.229 L1112.28 680.229 L1111.72 680.229 L1111.16 680.229 L1110.6 680.229 L1110.04 680.229 L1109.49 680.229 L1108.93 680.229 L1108.37 680.229 L1107.81 680.229 L1107.25 680.229 L1106.69 680.229 L1106.13 680.229 L1105.57 680.229 L1105.01 680.229 L1104.45 680.229 L1103.89 680.229 L1103.33 680.229 L1102.77 680.229 L1102.22 680.229 L1101.66 680.229 L1101.1 680.229 L1100.54 680.229 L1099.98 680.229 L1099.42 680.229 L1098.86 680.229 L1098.3 680.229 L1097.74 680.229 L1097.18 680.229 L1096.62 680.229 L1096.06 680.229 L1095.5 680.229 L1094.94 680.229 L1094.39 680.229 L1093.83 680.229 L1093.27 680.229 L1092.71 680.229 L1092.15 680.229 L1091.59 680.229 L1091.03 680.229 L1090.47 680.229 L1089.91 680.229 L1089.35 680.229 L1088.79 680.229 L1088.23 680.229 L1087.67 680.229 L1087.12 680.229 L1086.56 680.229 L1086 680.229 L1085.44 680.229 L1084.88 680.229 L1084.32 680.229 L1083.76 680.229 L1083.2 680.229 L1082.64 680.229 L1082.08 680.229 L1081.52 680.229 L1080.96 680.229 L1080.4 680.229 L1079.85 680.229 L1079.29 680.229 L1078.73 680.229 L1078.17 680.229 L1077.61 680.229 L1077.05 680.229 L1076.49 680.229 L1075.93 680.229 L1075.37 680.229 L1074.81 680.229 L1074.25 680.229 L1073.69 680.229 L1073.13 680.229 L1072.57 680.229 L1072.02 680.229 L1071.46 680.229 L1070.9 680.229 L1070.34 680.229 L1069.78 680.229 L1069.22 680.229 L1068.66 680.229 L1068.1 680.229 L1067.54 680.229 L1066.98 680.229 L1066.42 680.229 L1065.86 680.229 L1065.3 680.229 L1064.75 680.229 L1064.19 680.229 L1063.63 680.229 L1063.07 680.229 L1062.51 680.229 L1061.95 680.229 L1061.39 680.229 L1060.83 680.229 L1060.27 680.229 L1059.71 680.229 L1059.15 680.229 L1058.59 680.229 L1058.03 680.229 L1057.48 680.229 L1056.92 680.229 L1056.36 680.229 L1055.8 680.229 L1055.24 680.229 L1054.68 680.229 L1054.12 680.229 L1053.56 680.229 L1053 680.229 L1052.44 680.229 L1051.88 680.229 L1051.32 680.229 L1050.76 680.229 L1050.2 680.229 L1049.65 680.229 L1049.09 680.229 L1048.53 680.229 L1047.97 680.229 L1047.41 680.229 L1046.85 680.229 L1046.29 680.229 L1045.73 680.229 L1045.17 680.229 L1044.61 680.229 L1044.05 680.229 L1043.49 680.229 L1042.93 680.229 L1042.38 680.229 L1041.82 680.229 L1041.26 680.229 L1040.7 680.229 L1040.14 680.229 L1039.58 680.229 L1039.02 680.229 L1038.46 680.229 L1037.9 680.229 L1037.34 680.229 L1036.78 680.229 L1036.22 680.229 L1035.66 680.229 L1035.1 680.229 L1034.55 680.229 L1033.99 680.229 L1033.43 680.229 L1032.87 680.229 L1032.31 680.229 L1031.75 680.229 L1031.19 680.229 L1030.63 680.229 L1030.07 680.229 L1029.51 680.229 L1028.95 680.229 L1028.39 680.229 L1027.83 680.229 L1027.28 680.229 L1026.72 680.229 L1026.16 680.229 L1025.6 680.229 L1025.04 680.229 L1024.48 680.229 L1023.92 680.229 L1023.36 680.229 L1022.8 680.229 L1022.24 680.229 L1021.68 680.229 L1021.12 680.229 L1020.56 680.229 L1020.01 680.229 L1019.45 680.229 L1018.89 680.229 L1018.33 680.229 L1017.77 680.229 L1017.21 680.229 L1016.65 680.229 L1016.09 680.229 L1015.53 680.229 L1014.97 680.229 L1014.41 680.229 L1013.85 680.229 L1013.29 680.229 L1012.73 680.229 L1012.18 680.229 L1011.62 680.229 L1011.06 680.229 L1010.5 680.229 L1009.94 680.229 L1009.38 680.229 L1008.82 680.229 L1008.26 680.229 L1007.7 680.229 L1007.14 680.229 L1006.58 680.229 L1006.02 680.229 L1005.46 680.229 L1004.91 680.229 L1004.35 680.229 L1003.79 680.229 L1003.23 680.229 L1002.67 680.229 L1002.11 680.229 L1001.55 680.229 L1000.99 680.229 L1000.43 680.229 L999.872 680.229 L999.313 680.229 L998.754 680.229 L998.194 680.229 L997.635 680.229 L997.076 680.229 L996.517 680.229 L995.957 680.229 L995.398 680.229 L994.839 680.229 L994.28 680.229 L993.72 680.229 L993.161 680.229 L992.602 680.229 L992.043 680.229 L991.483 680.229 L990.924 680.229 L990.365 680.229 L989.806 680.229 L989.246 680.229 L988.687 680.229 L988.128 680.229 L987.569 680.229 L987.009 680.229 L986.45 680.229 L985.891 680.229 L985.332 680.229 L984.772 680.229 L984.213 680.229 L983.654 680.229 L983.095 680.229 L982.535 680.229 L981.976 680.229 L981.417 680.229 L980.858 680.229 L980.298 680.229 L979.739 680.229 L979.18 680.229 L978.621 680.229 L978.061 680.229 L977.502 680.229 L976.943 680.229 L976.384 680.229 L975.824 680.229 L975.265 680.229 L974.706 680.229 L974.147 680.229 L973.587 680.229 L973.028 680.229 L972.469 680.229 L971.91 680.229 L971.35 680.229 L970.791 680.229 L970.232 680.229 L969.673 680.229 L969.113 680.229 L968.554 680.229 L967.995 680.229 L967.436 680.229 L966.876 680.229 L966.317 680.229 L965.758 680.229 L965.199 680.229 L964.639 680.229 L964.08 680.229 L963.521 680.229 L962.962 680.229 L962.402 680.229 L961.843 680.229 L961.284 680.229 L960.725 680.229 L960.165 680.229 L959.606 680.229 L959.047 680.229 L958.488 680.229 L957.928 680.229 L957.369 680.229 L956.81 680.229 L956.251 680.229 L955.691 680.229 L955.132 680.229 L954.573 680.229 L954.014 680.229 L953.454 680.229 L952.895 680.229 L952.336 680.229 L951.777 680.229 L951.217 680.229 L950.658 680.229 L950.099 680.229 L949.54 680.229 L948.98 680.229 L948.421 680.229 L947.862 680.229 L947.303 680.229 L946.743 680.229 L946.184 680.229 L945.625 680.229 L945.066 680.229 L944.506 680.229 L943.947 680.229 L943.388 680.229 L942.829 680.229 L942.269 680.229 L941.71 680.229 L941.151 680.229 L940.592 680.229 L940.032 680.229 L939.473 680.229 L938.914 680.229 L938.355 680.229 L937.795 680.229 L937.236 680.229 L936.677 680.229 L936.118 680.229 L935.558 680.229 L934.999 680.229 L934.44 680.229 L933.881 680.229 L933.321 680.229 L932.762 680.229 L932.203 680.229 L931.644 680.229 L931.084 680.229 L930.525 680.229 L929.966 680.229 L929.406 680.229 L928.847 680.229 L928.288 680.229 L927.729 680.229 L927.169 680.229 L926.61 680.229 L926.051 680.229 L925.492 680.229 L924.932 680.229 L924.373 680.229 L923.814 680.229 L923.255 680.229 L922.695 680.229 L922.136 680.229 L921.577 680.229 L921.018 680.229 L920.458 680.229 L919.899 680.229 L919.34 680.229 L918.781 680.229 L918.221 680.229 L917.662 680.229 L917.103 680.229 L916.544 680.229 L915.984 680.229 L915.425 680.229 L914.866 680.229 L914.307 680.229 L913.747 680.229 L913.188 680.229 L912.629 680.229 L912.07 680.229 L911.51 680.229 L910.951 680.229 L910.392 680.229 L909.833 680.229 L909.273 680.229 L908.714 680.229 L908.155 680.229 L907.596 680.229 L907.036 680.229 L906.477 680.229 L905.918 680.229 L905.359 680.229 L904.799 680.229 L904.24 680.229 L903.681 680.229 L903.122 680.229 L902.562 680.229 L902.003 680.229 L901.444 680.229 L900.885 680.229 L900.325 680.229 L899.766 680.229 L899.207 680.229 L898.648 680.229 L898.088 680.229 L897.529 680.229 L896.97 680.229 L896.411 680.229 L895.851 680.229 L895.292 680.229 L894.733 680.229 L894.174 680.229 L893.614 680.229 L893.055 680.229 L892.496 680.229 L891.937 680.229 L891.377 680.229 L890.818 680.229 L890.259 680.229 L889.7 680.229 L889.14 680.229 L888.581 680.229 L888.022 680.229 L887.463 680.229 L886.903 680.229 L886.344 680.229 L885.785 680.229 L885.226 680.229 L884.666 680.229 L884.107 680.229 L883.548 680.229 L882.989 680.229 L882.429 680.229 L881.87 680.229 L881.311 680.229 L880.752 680.229 L880.192 680.229 L879.633 680.229 L879.074 680.229 L878.515 680.229 L877.955 680.229 L877.396 680.229 L876.837 680.229 L876.278 680.229 L875.718 680.229 L875.159 680.229 L874.6 680.229 L874.041 680.229 L873.481 680.229 L872.922 680.229 L872.363 680.229 L871.804 680.229 L871.244 680.229 L870.685 680.229 L870.126 680.229 L869.567 680.229 L869.007 680.229 L868.448 680.229 L867.889 680.229 L867.33 680.229 L866.77 680.229 L866.211 680.229 L865.652 680.229 L865.093 680.229 L864.533 680.229 L863.974 680.229 L863.415 680.229 L862.856 680.229 L862.296 680.229 L861.737 680.229 L861.178 680.229 L860.619 680.229 L860.059 680.229 L859.5 680.229 L858.941 680.229 L858.382 680.229 L857.822 680.229 L857.263 680.229 L856.704 680.229 L856.145 680.229 L855.585 680.229 L855.026 680.229 L854.467 680.229 L853.908 680.229 L853.348 680.229 L852.789 680.229 L852.23 680.229 L851.671 680.229 L851.111 680.229 L850.552 680.229 L849.993 680.229 L849.434 680.229 L848.874 680.229 L848.315 680.229 L847.756 680.229 L847.197 680.229 L846.637 680.229 L846.078 680.229 L845.519 680.229 L844.96 680.229 L844.4 680.229 L843.841 680.229 L843.282 680.229 L842.723 680.229 L842.163 680.229 L841.604 680.229 L841.045 680.229 L840.486 680.229 L839.926 680.229 L839.367 680.229 L838.808 680.229 L838.249 680.229 L837.689 680.229 L837.13 680.229 L836.571 680.229 L836.012 680.229 L835.452 680.229 L834.893 680.229 L834.334 680.229 L833.775 680.229 L833.215 680.229 L832.656 680.229 L832.097 680.229 L831.538 680.229 L830.978 680.229 L830.419 680.229 L829.86 680.229 L829.301 680.229 L828.741 680.229 L828.182 680.229 L827.623 680.229 L827.064 680.229 L826.504 680.229 L825.945 680.229 L825.386 680.229 L824.827 680.229 L824.267 680.229 L823.708 680.229 L823.149 680.229 L822.59 680.229 L822.03 680.229 L821.471 680.229 L820.912 680.229 L820.353 680.229 L819.793 680.229 L819.234 680.229 L818.675 680.229 L818.116 680.229 L817.556 680.229 L816.997 680.229 L816.438 680.229 L815.879 680.229 L815.319 680.229 L814.76 680.229 L814.201 680.229 L813.642 680.229 L813.082 680.229 L812.523 680.229 L811.964 680.229 L811.405 680.229 L810.845 680.229 L810.286 680.229 L809.727 680.229 L809.168 680.229 L808.608 680.229 L808.049 680.229 L807.49 680.229 L806.931 680.229 L806.371 680.229 L805.812 680.229 L805.253 680.229 L804.693 680.229 L804.134 680.229 L803.575 680.229 L803.016 680.229 L802.456 680.229 L801.897 680.229 L801.338 680.229 L800.779 680.229 L800.219 680.229 L799.66 680.229 L799.101 680.229 L798.542 680.229 L797.982 680.229 L797.423 680.229 L796.864 680.229 L796.305 680.229 L795.745 680.229 L795.186 680.229 L794.627 680.229 L794.068 680.229 L793.508 680.229 L792.949 680.229 L792.39 680.229 L791.831 680.229 L791.271 680.229 L790.712 680.229 L790.153 680.229 L789.594 680.229 L789.034 680.229 L788.475 680.229 L787.916 680.229 L787.357 680.229 L786.797 680.229 L786.238 680.229 L785.679 680.229 L785.12 680.229 L784.56 680.229 L784.001 680.229 L783.442 680.229 L782.883 680.229 L782.323 680.229 L781.764 680.229 L781.205 680.229 L780.646 680.229 L780.086 680.229 L779.527 680.229 L778.968 680.229 L778.409 680.229 L777.849 680.229 L777.29 680.229 L776.731 680.229 L776.172 680.229 L775.612 680.229 L775.053 680.229 L774.494 680.229 L773.935 680.229 L773.375 680.229 L772.816 680.229 L772.257 680.229 L771.698 680.229 L771.138 680.229 L770.579 680.229 L770.02 680.229 L769.461 680.229 L768.901 680.229 L768.342 680.229 L767.783 680.229 L767.224 680.229 L766.664 680.229 L766.105 680.229 L765.546 680.229 L764.987 680.229 L764.427 680.229 L763.868 680.229 L763.309 680.229 L762.75 680.229 L762.19 680.229 L761.631 680.229 L761.072 680.229 L760.513 680.229 L759.953 680.229 L759.394 680.229 L758.835 680.229 L758.276 680.229 L757.716 680.229 L757.157 680.229 L756.598 680.229 L756.039 680.229 L755.479 680.229 L754.92 680.229 L754.361 680.229 L753.802 680.229 L753.242 680.229 L752.683 680.229 L752.124 680.229 L751.565 680.229 L751.005 680.229 L750.446 680.229 L749.887 680.229 L749.328 680.229 L748.768 680.229 L748.209 680.229 L747.65 680.229 L747.091 680.229 L746.531 680.229 L745.972 680.229 L745.413 680.229 L744.854 680.229 L744.294 680.229 L743.735 680.229 L743.176 680.229 L742.617 680.229 L742.057 680.229 L741.498 680.229 L740.939 680.229 L740.38 680.229 L739.82 680.229 L739.261 680.229 L738.702 680.229 L738.143 680.229 L737.583 680.229 L737.024 680.229 L736.465 680.229 L735.906 680.229 L735.346 680.229 L734.787 680.229 L734.228 680.229 L733.669 680.229 L733.109 680.229 L732.55 680.229 L731.991 680.229 L731.432 680.229 L730.872 680.229 L730.313 680.229 L729.754 680.229 L729.195 680.229 L728.635 680.229 L728.076 680.229 L727.517 680.229 L726.958 680.229 L726.398 680.229 L725.839 680.229 L725.28 680.229 L724.721 680.229 L724.161 680.229 L723.602 680.229 L723.043 680.229 L722.484 680.229 L721.924 680.229 L721.365 680.229 L720.806 680.229 L720.247 680.229  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.721 720.806,685.721 721.365,685.721 721.924,685.721 722.484,685.721 723.043,685.721 723.602,685.721 724.161,685.721 724.721,685.721 725.28,685.721 725.839,685.721 726.398,685.721 726.958,685.721 727.517,685.721 728.076,685.721 728.635,685.721 729.195,685.721 729.754,685.721 730.313,685.721 730.872,685.721 731.432,685.721 731.991,685.721 732.55,685.721 733.109,685.721 733.669,685.721 734.228,685.721 734.787,685.721 735.346,685.721 735.906,685.721 736.465,685.721 737.024,685.721 737.583,685.721 738.143,685.721 738.702,685.721 739.261,685.721 739.82,685.721 740.38,685.721 740.939,685.721 741.498,685.721 742.057,685.721 742.617,685.721 743.176,685.721 743.735,685.721 744.294,685.721 744.854,685.721 745.413,685.721 745.972,685.721 746.531,685.721 747.091,685.721 747.65,685.721 748.209,685.721 748.768,685.721 749.328,685.721 749.887,685.721 750.446,685.721 751.005,685.721 751.565,685.721 752.124,685.721 752.683,685.721 753.242,685.721 753.802,685.721 754.361,685.721 754.92,685.721 755.479,685.721 756.039,685.721 756.598,685.721 757.157,685.721 757.716,685.721 758.276,685.721 758.835,685.721 759.394,685.721 759.953,685.721 760.513,685.721 761.072,685.721 761.631,685.721 762.19,685.721 762.75,685.721 763.309,685.721 763.868,685.721 764.427,685.721 764.987,685.721 765.546,685.721 766.105,685.721 766.664,685.721 767.224,685.721 767.783,685.721 768.342,685.721 768.901,685.721 769.461,685.721 770.02,685.721 770.579,685.721 771.138,685.721 771.698,685.721 772.257,685.721 772.816,685.721 773.375,685.721 773.935,685.721 774.494,685.721 775.053,685.721 775.612,685.721 776.172,685.721 776.731,685.721 777.29,685.721 777.849,685.721 778.409,685.721 778.968,685.721 779.527,685.721 780.086,685.721 780.646,685.721 781.205,685.721 781.764,685.721 782.323,685.721 782.883,685.721 783.442,685.721 784.001,685.721 784.56,685.721 785.12,685.721 785.679,685.721 786.238,685.721 786.797,685.721 787.357,685.721 787.916,685.721 788.475,685.721 789.034,685.721 789.594,685.721 790.153,685.721 790.712,685.721 791.271,685.721 791.831,685.721 792.39,685.721 792.949,685.721 793.508,685.721 794.068,685.721 794.627,685.721 795.186,685.721 795.745,685.721 796.305,685.721 796.864,685.721 797.423,685.721 797.982,685.721 798.542,685.721 799.101,685.721 799.66,685.721 800.219,685.721 800.779,685.721 801.338,685.721 801.897,685.721 802.456,685.721 803.016,685.721 803.575,685.721 804.134,685.721 804.693,685.721 805.253,685.721 805.812,685.721 806.371,685.721 806.931,685.721 807.49,685.721 808.049,685.721 808.608,685.721 809.168,685.721 809.727,685.721 810.286,685.721 810.845,685.721 811.405,685.721 811.964,685.721 812.523,685.721 813.082,685.721 813.642,685.721 814.201,685.721 814.76,685.721 815.319,685.721 815.879,685.721 816.438,685.721 816.997,685.721 817.556,685.721 818.116,685.721 818.675,685.721 819.234,685.721 819.793,685.721 820.353,685.721 820.912,685.721 821.471,685.721 822.03,685.721 822.59,685.721 823.149,685.721 823.708,685.721 824.267,685.721 824.827,685.721 825.386,685.721 825.945,685.721 826.504,685.721 827.064,685.721 827.623,685.721 828.182,685.721 828.741,685.721 829.301,685.721 829.86,685.721 830.419,685.721 830.978,685.721 831.538,685.721 832.097,685.721 832.656,685.721 833.215,685.721 833.775,685.721 834.334,685.721 834.893,685.721 835.452,685.721 836.012,685.721 836.571,685.721 837.13,685.721 837.689,685.721 838.249,685.721 838.808,685.721 839.367,685.721 839.926,685.721 840.486,685.721 841.045,685.721 841.604,685.721 842.163,685.721 842.723,685.721 843.282,685.721 843.841,685.721 844.4,685.721 844.96,685.721 845.519,685.721 846.078,685.721 846.637,685.721 847.197,685.721 847.756,685.721 848.315,685.721 848.874,685.721 849.434,685.721 849.993,685.721 850.552,685.721 851.111,685.721 851.671,685.721 852.23,685.721 852.789,685.721 853.348,685.721 853.908,685.721 854.467,685.721 855.026,685.721 855.585,685.721 856.145,685.721 856.704,685.721 857.263,685.721 857.822,685.721 858.382,685.721 858.941,685.721 859.5,685.721 860.059,685.721 860.619,685.721 861.178,685.721 861.737,685.721 862.296,685.721 862.856,685.721 863.415,685.721 863.974,685.721 864.533,685.721 865.093,685.721 865.652,685.721 866.211,685.721 866.77,685.721 867.33,685.721 867.889,685.721 868.448,685.721 869.007,685.721 869.567,685.721 870.126,685.721 870.685,685.721 871.244,685.721 871.804,685.721 872.363,685.721 872.922,685.721 873.481,685.721 874.041,685.721 874.6,685.721 875.159,685.721 875.718,685.721 876.278,685.721 876.837,685.721 877.396,685.721 877.955,685.721 878.515,685.721 879.074,685.721 879.633,685.721 880.192,685.721 880.752,685.721 881.311,685.721 881.87,685.721 882.429,685.721 882.989,685.721 883.548,685.721 884.107,685.721 884.666,685.721 885.226,685.721 885.785,685.721 886.344,685.721 886.903,685.721 887.463,685.721 888.022,685.721 888.581,685.721 889.14,685.721 889.7,685.721 890.259,685.721 890.818,685.721 891.377,685.721 891.937,685.721 892.496,685.721 893.055,685.721 893.614,685.721 894.174,685.721 894.733,685.721 895.292,685.721 895.851,685.721 896.411,685.721 896.97,685.721 897.529,685.721 898.088,685.721 898.648,685.721 899.207,685.721 899.766,685.721 900.325,685.721 900.885,685.721 901.444,685.721 902.003,685.721 902.562,685.721 903.122,685.721 903.681,685.721 904.24,685.721 904.799,685.721 905.359,685.721 905.918,685.721 906.477,685.721 907.036,685.721 907.596,685.721 908.155,685.721 908.714,685.721 909.273,685.721 909.833,685.721 910.392,685.721 910.951,685.721 911.51,685.721 912.07,685.721 912.629,685.721 913.188,685.721 913.747,685.721 914.307,685.721 914.866,685.721 915.425,685.721 915.984,685.721 916.544,685.721 917.103,685.721 917.662,685.721 918.221,685.721 918.781,685.721 919.34,685.721 919.899,685.721 920.458,685.721 921.018,685.721 921.577,685.721 922.136,685.721 922.695,685.721 923.255,685.721 923.814,685.721 924.373,685.721 924.932,685.721 925.492,685.721 926.051,685.721 926.61,685.721 927.169,685.721 927.729,685.721 928.288,685.721 928.847,685.721 929.406,685.721 929.966,685.721 930.525,685.721 931.084,685.721 931.644,685.721 932.203,685.721 932.762,685.721 933.321,685.721 933.881,685.721 934.44,685.721 934.999,685.721 935.558,685.721 936.118,685.721 936.677,685.721 937.236,685.721 937.795,685.721 938.355,685.721 938.914,685.721 939.473,685.721 940.032,685.721 940.592,685.721 941.151,685.721 941.71,685.721 942.269,685.721 942.829,685.721 943.388,685.721 943.947,685.721 944.506,685.721 945.066,685.721 945.625,685.721 946.184,685.721 946.743,685.721 947.303,685.721 947.862,685.721 948.421,685.721 948.98,685.721 949.54,685.721 950.099,685.721 950.658,685.721 951.217,685.721 951.777,685.721 952.336,685.721 952.895,685.721 953.454,685.721 954.014,685.721 954.573,685.721 955.132,685.721 955.691,685.721 956.251,685.721 956.81,685.721 957.369,685.721 957.928,685.721 958.488,685.721 959.047,685.721 959.606,685.721 960.165,685.721 960.725,685.721 961.284,685.721 961.843,685.721 962.402,685.721 962.962,685.721 963.521,685.721 964.08,685.721 964.639,685.721 965.199,685.721 965.758,685.721 966.317,685.721 966.876,685.721 967.436,685.721 967.995,685.721 968.554,685.721 969.113,685.721 969.673,685.721 970.232,685.721 970.791,685.721 971.35,685.721 971.91,685.721 972.469,685.721 973.028,685.721 973.587,685.721 974.147,685.721 974.706,685.721 975.265,685.721 975.824,685.721 976.384,685.721 976.943,685.721 977.502,685.721 978.061,685.721 978.621,685.721 979.18,685.721 979.739,685.721 980.298,685.721 980.858,685.721 981.417,685.721 981.976,685.721 982.535,685.721 983.095,685.721 983.654,685.721 984.213,685.721 984.772,685.721 985.332,685.721 985.891,685.721 986.45,685.721 987.009,685.721 987.569,685.721 988.128,685.721 988.687,685.721 989.246,685.721 989.806,685.721 990.365,685.721 990.924,685.721 991.483,685.721 992.043,685.721 992.602,685.721 993.161,685.721 993.72,685.721 994.28,685.721 994.839,685.721 995.398,685.721 995.957,685.721 996.517,685.721 997.076,685.721 997.635,685.721 998.194,685.721 998.754,685.721 999.313,685.721 999.872,685.721 1000.43,685.721 1000.99,685.721 1001.55,685.721 1002.11,685.721 1002.67,685.721 1003.23,685.721 1003.79,685.721 1004.35,685.721 1004.91,685.721 1005.46,685.721 1006.02,685.721 1006.58,685.721 1007.14,685.721 1007.7,685.721 1008.26,685.721 1008.82,685.721 1009.38,685.721 1009.94,685.721 1010.5,685.721 1011.06,685.721 1011.62,685.721 1012.18,685.721 1012.73,685.721 1013.29,685.721 1013.85,685.721 1014.41,685.721 1014.97,685.721 1015.53,685.721 1016.09,685.721 1016.65,685.721 1017.21,685.721 1017.77,685.721 1018.33,685.721 1018.89,685.721 1019.45,685.721 1020.01,685.721 1020.56,685.721 1021.12,685.721 1021.68,685.721 1022.24,685.721 1022.8,685.721 1023.36,685.721 1023.92,685.721 1024.48,685.721 1025.04,685.721 1025.6,685.721 1026.16,685.721 1026.72,685.721 1027.28,685.721 1027.83,685.721 1028.39,685.721 1028.95,685.721 1029.51,685.721 1030.07,685.721 1030.63,685.721 1031.19,685.721 1031.75,685.721 1032.31,685.721 1032.87,685.721 1033.43,685.721 1033.99,685.721 1034.55,685.721 1035.1,685.721 1035.66,685.721 1036.22,685.721 1036.78,685.721 1037.34,685.721 1037.9,685.721 1038.46,685.721 1039.02,685.721 1039.58,685.721 1040.14,685.721 1040.7,685.721 1041.26,685.721 1041.82,685.721 1042.38,685.721 1042.93,685.721 1043.49,685.721 1044.05,685.721 1044.61,685.721 1045.17,685.721 1045.73,685.721 1046.29,685.721 1046.85,685.721 1047.41,685.721 1047.97,685.721 1048.53,685.721 1049.09,685.721 1049.65,685.721 1050.2,685.721 1050.76,685.721 1051.32,685.721 1051.88,685.721 1052.44,685.721 1053,685.721 1053.56,685.721 1054.12,685.721 1054.68,685.721 1055.24,685.721 1055.8,685.721 1056.36,685.721 1056.92,685.721 1057.48,685.721 1058.03,685.721 1058.59,685.721 1059.15,685.721 1059.71,685.721 1060.27,685.721 1060.83,685.721 1061.39,685.721 1061.95,685.721 1062.51,685.721 1063.07,685.721 1063.63,685.721 1064.19,685.721 1064.75,685.721 1065.3,685.721 1065.86,685.721 1066.42,685.721 1066.98,685.721 1067.54,685.721 1068.1,685.721 1068.66,685.721 1069.22,685.721 1069.78,685.721 1070.34,685.721 1070.9,685.721 1071.46,685.721 1072.02,685.721 1072.57,685.721 1073.13,685.721 1073.69,685.721 1074.25,685.721 1074.81,685.721 1075.37,685.721 1075.93,685.721 1076.49,685.721 1077.05,685.721 1077.61,685.721 1078.17,685.721 1078.73,685.721 1079.29,685.721 1079.85,685.721 1080.4,685.721 1080.96,685.721 1081.52,685.721 1082.08,685.721 1082.64,685.721 1083.2,685.721 1083.76,685.721 1084.32,685.721 1084.88,685.721 1085.44,685.721 1086,685.721 1086.56,685.721 1087.12,685.721 1087.67,685.721 1088.23,685.721 1088.79,685.721 1089.35,685.721 1089.91,685.721 1090.47,685.721 1091.03,685.721 1091.59,685.721 1092.15,685.721 1092.71,685.721 1093.27,685.721 1093.83,685.721 1094.39,685.721 1094.94,685.721 1095.5,685.721 1096.06,685.721 1096.62,685.721 1097.18,685.721 1097.74,685.721 1098.3,685.721 1098.86,685.721 1099.42,685.721 1099.98,685.721 1100.54,685.721 1101.1,685.721 1101.66,685.721 1102.22,685.721 1102.77,685.721 1103.33,685.721 1103.89,685.721 1104.45,685.721 1105.01,685.721 1105.57,685.721 1106.13,685.721 1106.69,685.721 1107.25,685.721 1107.81,685.721 1108.37,685.721 1108.93,685.721 1109.49,685.721 1110.04,685.721 1110.6,685.721 1111.16,685.721 1111.72,685.721 1112.28,685.721 1112.84,685.721 1113.4,685.721 1113.96,685.721 1114.52,685.721 1115.08,685.721 1115.64,685.721 1116.2,685.721 1116.76,685.721 1117.31,685.721 1117.87,685.721 1118.43,685.721 1118.99,685.721 1119.55,685.721 1120.11,685.721 1120.67,685.721 1121.23,685.721 1121.79,685.721 1122.35,685.721 1122.91,685.721 1123.47,685.721 1124.03,685.721 1124.59,685.721 1125.14,685.721 1125.7,685.721 1126.26,685.721 1126.82,685.721 1127.38,685.721 1127.94,685.721 1128.5,685.721 1129.06,685.721 1129.62,685.721 1130.18,685.721 1130.74,685.721 1131.3,685.721 1131.86,685.721 1132.41,685.721 1132.97,685.721 1133.53,685.721 1134.09,685.721 1134.65,685.721 1135.21,685.721 1135.77,685.721 1136.33,685.721 1136.89,685.721 1137.45,685.721 1138.01,685.721 1138.57,685.721 1139.13,685.721 1139.68,685.721 1140.24,685.721 1140.8,685.721 1141.36,685.721 1141.92,685.721 1142.48,685.721 1143.04,685.721 1143.6,685.721 1144.16,685.721 1144.72,685.721 1145.28,685.721 1145.84,685.721 1146.4,685.721 1146.96,685.721 1147.51,685.721 1148.07,685.721 1148.63,685.721 1149.19,685.721 1149.75,685.721 1150.31,685.721 1150.87,685.721 1151.43,685.721 1151.99,685.721 1152.55,685.721 1153.11,685.721 1153.67,685.721 1154.23,685.721 1154.78,685.721 1155.34,685.721 1155.9,685.721 1156.46,685.721 1157.02,685.721 1157.58,685.721 1158.14,685.721 1158.7,685.721 1159.26,685.721 1159.82,685.721 1160.38,685.721 1160.94,685.721 1161.5,685.721 1162.05,685.721 1162.61,685.721 1163.17,685.721 1163.73,685.721 1164.29,685.721 1164.85,685.721 1165.41,685.721 1165.97,685.721 1166.53,685.721 1167.09,685.721 1167.65,685.721 1168.21,685.721 1168.77,685.721 1169.33,685.721 1169.88,685.721 1170.44,685.721 1171,685.721 1171.56,685.721 1172.12,685.721 1172.68,685.721 1173.24,685.721 1173.8,685.721 1174.36,685.721 1174.92,685.721 1175.48,685.721 1176.04,685.721 1176.6,685.721 1177.15,685.721 1177.71,685.721 1178.27,685.721 1178.83,685.721 1179.39,685.721 1179.95,685.721 1180.51,685.721 1181.07,685.721 1181.63,685.721 1182.19,685.721 1182.75,685.721 1183.31,685.721 1183.87,685.721 1184.43,685.721 1184.98,685.721 1185.54,685.721 1186.1,685.721 1186.66,685.721 1187.22,685.721 1187.78,685.721 1188.34,685.721 1188.9,685.721 1189.46,685.721 1190.02,685.721 1190.58,685.721 1191.14,685.721 1191.7,685.721 1192.25,685.721 1192.81,685.721 1193.37,685.721 1193.93,685.721 1194.49,685.721 1195.05,685.721 1195.61,685.721 1196.17,685.721 1196.73,685.721 1197.29,685.721 1197.85,685.721 1198.41,685.721 1198.97,685.721 1199.52,685.721 1200.08,685.721 1200.64,685.721 1201.2,685.721 1201.76,685.721 1202.32,685.721 1202.88,685.721 1203.44,685.721 1204,685.721 1204.56,685.721 1205.12,685.721 1205.68,685.721 1206.24,685.721 1206.8,685.721 1207.35,685.721 1207.91,685.721 1208.47,685.721 1209.03,685.721 1209.59,685.721 1210.15,685.721 1210.71,685.721 1211.27,685.721 1211.83,685.721 1212.39,685.721 1212.95,685.721 1213.51,685.721 1214.07,685.721 1214.62,685.721 1215.18,685.721 1215.74,685.721 1216.3,685.721 1216.86,685.721 1217.42,685.721 1217.98,685.721 1218.54,685.721 1219.1,685.721 1219.66,685.721 1220.22,685.721 1220.78,685.721 1221.34,685.721 1221.89,685.721 1222.45,685.721 1223.01,685.721 1223.57,685.721 1224.13,685.721 1224.69,685.721 1225.25,685.721 1225.81,685.721 1226.37,685.721 1226.93,685.721 1227.49,685.721 1228.05,685.721 1228.61,685.721 1229.17,685.721 1229.72,685.721 1230.28,685.721 1230.84,685.721 1231.4,685.721 1231.96,685.721 1232.52,685.721 1233.08,685.721 1233.64,685.721 1234.2,685.721 1234.76,685.721 1235.32,685.721 1235.88,685.721 1236.44,685.721 1236.99,685.721 1237.55,685.721 1238.11,685.721 1238.67,685.721 1239.23,685.721 1239.79,685.721 1240.35,685.721 1240.91,685.721 1241.47,685.721 1242.03,685.721 1242.59,685.721 1243.15,685.721 1243.71,685.721 1244.26,685.721 1244.82,685.721 1245.38,685.721 1245.94,685.721 1246.5,685.721 1247.06,685.721 1247.62,685.721 1248.18,685.721 1248.74,685.721 1249.3,685.721 1249.86,685.721 1250.42,685.721 1250.98,685.721 1251.54,685.721 1252.09,685.721 1252.65,685.721 1253.21,685.721 1253.77,685.721 1254.33,685.721 1254.89,685.721 1255.45,685.721 1256.01,685.721 1256.57,685.721 1257.13,685.721 1257.69,685.721 1258.25,685.721 1258.81,685.721 1259.36,685.721 1259.92,685.721 1260.48,685.721 1261.04,685.721 1261.6,685.721 1262.16,685.721 1262.72,685.721 1263.28,685.721 1263.84,685.721 1264.4,685.721 1264.96,685.721 1265.52,685.721 1266.08,685.721 1266.63,685.721 1267.19,685.721 1267.75,685.721 1268.31,685.721 1268.87,685.721 1269.43,685.721 1269.99,685.721 1270.55,685.721 1271.11,685.721 1271.67,685.721 1272.23,685.721 1272.79,685.721 1273.35,685.721 1273.91,685.721 1274.46,685.721 1275.02,685.721 1275.58,685.721 1276.14,685.721 1276.7,685.721 1277.26,685.721 1277.82,685.721 1278.38,685.721 1278.94,685.721 1279.5,685.721 1280.06,685.721 1280.62,685.721 1281.18,685.721 1281.73,685.721 1282.29,685.721 1282.85,685.721 1283.41,685.721 1283.97,685.721 1284.53,685.721 1285.09,685.721 1285.65,685.721 1286.21,685.721 1286.77,685.721 1287.33,685.721 1287.89,685.721 1288.45,685.721 1289,685.721 1289.56,685.721 1290.12,685.721 1290.68,685.721 1291.24,685.721 1291.8,685.721 1292.36,685.721 1292.92,685.721 1293.48,685.721 1294.04,685.721 1294.6,685.721 1295.16,685.721 1295.72,685.721 1296.28,685.721 1296.83,685.721 1297.39,685.721 1297.95,685.721 1298.51,685.721 1299.07,685.721 1299.63,685.721 1300.19,685.721 1300.75,685.721 1301.31,685.721 1301.87,685.721 1302.43,685.721 1302.99,685.721 1303.55,685.721 1304.1,685.721 1304.66,685.721 1305.22,685.721 1305.78,685.721 1306.34,685.721 1306.9,685.721 1307.46,685.721 1308.02,685.721 1308.58,685.721 1309.14,685.721 1309.7,685.721 1310.26,685.721 1310.82,685.721 1311.38,685.721 1311.93,685.721 1312.49,685.721 1313.05,685.721 1313.61,685.721 1314.17,685.721 1314.73,685.721 1315.29,685.721 1315.85,685.721 1316.41,685.721 1316.97,685.721 1317.53,685.721 1318.09,685.721 1318.65,685.721 1319.2,685.721 1319.76,685.721 1320.32,685.721 1320.88,685.721 1321.44,685.721 1322,685.721 1322.56,685.721 1323.12,685.721 1323.68,685.721 1324.24,685.721 1324.8,685.721 1325.36,685.721 1325.92,685.721 1326.47,685.721 1327.03,685.721 1327.59,685.721 1328.15,685.721 1328.71,685.721 1329.27,685.721 1329.83,685.721 1330.39,685.721 1330.95,685.721 1331.51,685.721 1332.07,685.721 1332.63,685.721 1333.19,685.721 1333.75,685.721 1334.3,685.721 1334.86,685.721 1335.42,685.721 1335.98,685.721 1336.54,685.721 1337.1,685.721 1337.66,685.721 1338.22,685.721 1338.78,685.721 1339.34,685.721 1339.9,685.721 1340.46,685.721 1341.02,685.721 1341.57,685.721 1342.13,685.721 1342.69,685.721 1343.25,685.721 1343.81,685.721 1344.37,685.721 1344.93,685.721 1345.49,685.721 1346.05,685.721 1346.61,685.721 1347.17,685.721 1347.73,685.721 1348.29,685.721 1348.84,685.721 1349.4,685.721 1349.96,685.721 1350.52,685.721 1351.08,685.721 1351.64,685.721 1352.2,685.721 1352.76,685.721 1353.32,685.721 1353.88,685.721 1354.44,685.721 1355,685.721 1355.56,685.721 1356.12,685.721 1356.67,685.721 1357.23,685.721 1357.79,685.721 1358.35,685.721 1358.91,685.721 1359.47,685.721 1360.03,685.721 1360.59,685.721 1361.15,685.721 1361.71,685.721 1362.27,685.721 1362.83,685.721 1363.39,685.721 1363.94,685.721 1364.5,685.721 1365.06,685.721 1365.62,685.721 1366.18,685.721 1366.74,685.721 1367.3,685.721 1367.86,685.721 1368.42,685.721 1368.98,685.721 1369.54,685.721 1370.1,685.721 1370.66,685.721 1371.21,685.721 1371.77,685.721 1372.33,685.721 1372.89,685.721 1373.45,685.721 1374.01,685.721 1374.57,685.721 1375.13,685.721 1375.69,685.721 1376.25,685.721 1376.81,685.721 1377.37,685.721 1377.93,685.721 1378.49,685.721 1379.04,685.721 1379.6,685.721 1380.16,685.721 1380.72,685.721 1381.28,685.721 1381.84,685.721 1382.4,685.721 1382.96,685.721 1383.52,685.721 1384.08,685.721 1384.64,685.721 1385.2,685.721 1385.76,685.721 1386.31,685.721 1386.87,685.721 1387.43,685.721 1387.99,685.721 1388.55,685.721 1389.11,685.721 1389.67,685.721 1390.23,685.721 1390.79,685.721 1391.35,685.721 1391.91,685.721 1392.47,685.721 1393.03,685.721 1393.58,685.721 1394.14,685.721 1394.7,685.721 1395.26,685.721 1395.82,685.721 1396.38,685.721 1396.94,685.721 1397.5,685.721 1398.06,685.721 1398.62,685.721 1399.18,685.721 1399.74,685.721 1400.3,685.721 1400.86,685.721 1401.41,685.721 1401.97,685.721 1402.53,685.721 1403.09,685.721 1403.65,685.721 1404.21,685.721 1404.77,685.721 1405.33,685.721 1405.89,685.721 1406.45,685.721 1407.01,685.721 1407.57,685.721 1408.13,685.721 1408.68,685.721 1409.24,685.721 1409.8,685.721 1410.36,685.721 1410.92,685.721 1411.48,685.721 1412.04,685.721 1412.6,685.721 1413.16,685.721 1413.72,685.721 1414.28,685.721 1414.84,685.721 1415.4,685.721 1415.95,685.721 1416.51,685.721 1417.07,685.721 1417.63,685.721 1418.19,685.721 1418.75,685.721 1419.31,685.721 1419.87,685.721 1420.43,685.721 1420.99,685.721 1421.55,685.721 1422.11,685.721 1422.67,685.721 1423.23,685.721 1423.78,685.721 1424.34,685.721 1424.9,685.721 1425.46,685.721 1426.02,685.721 1426.58,685.721 1427.14,685.721 1427.7,685.721 1428.26,685.721 1428.82,685.721 1429.38,685.721 1429.94,685.721 1430.5,685.721 1431.05,685.721 1431.61,685.721 1432.17,685.721 1432.73,685.721 1433.29,685.721 1433.85,685.721 1434.41,685.721 1434.97,685.721 1435.53,685.721 1436.09,685.721 1436.65,685.721 1437.21,685.721 1437.77,685.721 1438.33,685.721 1438.88,685.721 1439.44,685.721 1440,685.721 1440.56,685.721 1441.12,685.721 1441.68,685.721 1442.24,685.721 1442.8,685.721 1443.36,685.721 1443.92,685.721 1444.48,685.721 1445.04,685.721 1445.6,685.721 1446.15,685.721 1446.71,685.721 1447.27,685.721 1447.83,685.721 1448.39,685.721 1448.95,685.721 1449.51,685.721 1450.07,685.721 1450.63,685.721 1451.19,685.721 1451.75,685.721 1452.31,685.721 1452.87,685.721 1453.42,685.721 1453.98,685.721 1454.54,685.721 1455.1,685.721 1455.66,685.721 1456.22,685.721 1456.78,685.721 1457.34,685.721 1457.9,685.721 1458.46,685.721 1459.02,685.721 1459.58,685.721 1460.14,685.721 1460.7,685.721 1461.25,685.721 1461.81,685.721 1462.37,685.721 1462.93,685.721 1463.49,685.721 1464.05,685.721 1464.61,685.721 1465.17,685.721 1465.73,685.721 1466.29,685.721 1466.85,685.721 1467.41,685.721 1467.97,685.721 1468.52,685.721 1469.08,685.721 1469.64,685.721 1470.2,685.721 1470.76,685.721 1471.32,685.721 1471.88,685.721 1472.44,685.721 1473,685.721 1473.56,685.721 1474.12,685.721 1474.68,685.721 1475.24,685.721 1475.79,685.721 1476.35,685.721 1476.91,685.721 1477.47,685.721 1478.03,685.721 1478.59,685.721 1479.15,685.721 1479.71,685.721 1480.27,685.721 1480.83,685.721 1481.39,685.721 1481.95,685.721 1482.51,685.721 1483.07,685.721 1483.62,685.721 1484.18,685.721 1484.74,685.721 1485.3,685.721 1485.86,685.721 1486.42,685.721 1486.98,685.721 1487.54,685.721 1488.1,685.721 1488.66,685.721 1489.22,685.721 1489.78,685.721 1490.34,685.721 1490.89,685.721 1491.45,685.721 1492.01,685.721 1492.57,685.721 1493.13,685.721 1493.69,685.721 1494.25,685.721 1494.81,685.721 1495.37,685.721 1495.93,685.721 1496.49,685.721 1497.05,685.721 1497.61,685.721 1498.16,685.721 1498.72,685.721 1499.28,685.721 1499.84,685.721 1500.4,685.721 1500.96,685.721 1501.52,685.721 1502.08,685.721 1502.64,685.721 1503.2,685.721 1503.76,685.721 1504.32,685.721 1504.88,685.721 1505.44,685.721 1505.99,685.721 1506.55,685.721 1507.11,685.721 1507.67,685.721 1508.23,685.721 1508.79,685.721 1509.35,685.721 1509.91,685.721 1510.47,685.721 1511.03,685.721 1511.59,685.721 1512.15,685.721 1512.71,685.721 1513.26,685.721 1513.82,685.721 1514.38,685.721 1514.94,685.721 1515.5,685.721 1516.06,685.721 1516.62,685.721 1517.18,685.721 1517.74,685.721 1518.3,685.721 1518.86,685.721 1519.42,685.721 1519.98,685.721 1520.53,685.721 1521.09,685.721 1521.65,685.721 1522.21,685.721 1522.77,685.721 1523.33,685.721 1523.89,685.721 1524.45,685.721 1525.01,685.721 1525.57,685.721 1526.13,685.721 1526.69,685.721 1527.25,685.721 1527.81,685.721 1528.36,685.721 1528.92,685.721 1529.48,685.721 1530.04,685.721 1530.6,685.721 1531.16,685.721 1531.72,685.721 1532.28,685.721 1532.84,685.721 1533.4,685.721 1533.96,685.721 1534.52,685.721 1535.08,685.721 1535.63,685.721 1536.19,685.721 1536.75,685.721 1537.31,685.721 1537.87,685.721 1538.43,685.721 1538.99,685.721 1539.55,685.721 1540.11,685.721 1540.67,685.721 1541.23,685.721 1541.79,685.721 1542.35,685.721 1542.9,685.721 1543.46,685.721 1544.02,685.721 1544.58,685.721 1545.14,685.721 1545.7,685.721 1546.26,685.721 1546.82,685.721 1547.38,685.721 1547.94,685.721 1548.5,685.721 1549.06,685.721 1549.62,685.721 1550.18,685.721 1550.73,685.721 1551.29,685.721 1551.85,685.721 1552.41,685.721 1552.97,685.721 1553.53,685.721 1554.09,685.721 1554.65,685.721 1555.21,685.721 1555.77,685.721 1556.33,685.721 1556.89,685.721 1557.45,685.721 1558,685.721 1558.56,685.721 1559.12,685.721 1559.68,685.721 1560.24,685.721 1560.8,685.721 1561.36,685.721 1561.92,685.721 1562.48,685.721 1563.04,685.721 1563.6,685.721 1564.16,685.721 1564.72,685.721 1565.28,685.721 1565.83,685.721 1566.39,685.721 1566.95,685.721 1567.51,685.721 1568.07,685.721 1568.63,685.721 1569.19,685.721 1569.75,685.721 1570.31,685.721 1570.87,685.721 1571.43,685.721 1571.99,685.721 1572.55,685.721 1573.1,685.721 1573.66,685.721 1574.22,685.721 1574.78,685.721 1575.34,685.721 1575.9,685.721 1576.46,685.721 1577.02,685.721 1577.58,685.721 1578.14,685.721 1578.7,685.721 1579.26,685.721 1579.82,685.721 1580.37,685.721 1580.93,685.721 1581.49,685.721 1582.05,685.721 1582.61,685.721 1583.17,685.721 1583.73,685.721 1584.29,685.721 1584.85,685.721 1585.41,685.721 1585.97,685.721 1586.53,685.721 1587.09,685.721 1587.65,685.721 1588.2,685.721 1588.76,685.721 1589.32,685.721 1589.88,685.721 1590.44,685.721 1591,685.721 1591.56,685.721 1592.12,685.721 1592.68,685.721 1593.24,685.721 1593.8,685.721 1594.36,685.721 1594.92,685.721 1595.47,685.721 1596.03,685.721 1596.59,685.721 1597.15,685.721 1597.71,685.721 1598.27,685.721 1598.83,685.721 1599.39,685.721 1599.95,685.721 1600.51,685.721 1601.07,685.721 1601.63,685.721 1602.19,685.721 1602.74,685.721 1603.3,685.721 1603.86,685.721 1604.42,685.721 1604.98,685.721 1605.54,685.721 1606.1,685.721 1606.66,685.721 1607.22,685.721 1607.78,685.721 1608.34,685.721 1608.9,685.721 1609.46,685.721 1610.02,685.721 1610.57,685.721 1611.13,685.721 1611.69,685.721 1612.25,685.721 1612.81,685.721 1613.37,685.721 1613.93,685.721 1614.49,685.721 1615.05,685.721 1615.61,685.721 1616.17,685.721 1616.73,685.721 1617.29,685.721 1617.84,685.721 1618.4,685.721 1618.96,685.721 1619.52,685.721 1620.08,685.721 1620.64,685.721 1621.2,685.721 1621.76,685.721 1622.32,685.721 1622.88,685.721 1623.44,685.721 1624,685.721 1624.56,685.721 1625.11,685.721 1625.67,685.721 1626.23,685.721 1626.79,685.721 1627.35,685.721 1627.91,685.721 1628.47,685.721 1629.03,685.721 1629.59,685.721 1630.15,685.721 1630.71,685.721 1631.27,685.721 1631.83,685.721 1632.39,685.721 1632.94,685.721 1633.5,685.721 1634.06,685.721 1634.62,685.721 1635.18,685.721 1635.74,685.721 1636.3,685.721 1636.86,685.721 1637.42,685.721 1637.98,685.721 1638.54,685.721 1639.1,685.721 1639.66,685.721 1640.21,685.721 1640.77,685.721 1641.33,685.721 1641.89,685.721 1642.45,685.721 1643.01,685.721 1643.57,685.721 1644.13,685.721 1644.69,685.721 1645.25,685.721 1645.81,685.721 1646.37,685.721 1646.93,685.721 1647.48,685.721 1648.04,685.721 1648.6,685.721 1649.16,685.721 1649.72,685.721 1650.28,685.721 1650.84,685.721 1651.4,685.721 1651.96,685.721 1652.52,685.721 1653.08,685.721 1653.64,685.721 1654.2,685.721 1654.76,685.721 1655.31,685.721 1655.87,685.721 1656.43,685.721 1656.99,685.721 1657.55,685.721 1658.11,685.721 1658.67,685.721 1659.23,685.721 1659.79,685.721 1660.35,685.721 1660.91,685.721 1661.47,685.721 1662.03,685.721 1662.58,685.721 1663.14,685.721 1663.7,685.721 1664.26,685.721 1664.82,685.721 1665.38,685.721 1665.94,685.721 1666.5,685.721 1667.06,685.721 1667.62,685.721 1668.18,685.721 1668.74,685.721 1669.3,685.721 1669.85,685.721 1670.41,685.721 1670.97,685.721 1671.53,685.721 1672.09,685.721 1672.65,685.721 1673.21,685.721 1673.77,685.721 1674.33,685.721 1674.89,685.721 1675.45,685.721 1676.01,685.721 1676.57,685.721 1677.13,685.721 1677.68,685.721 1678.24,685.721 1678.8,685.721 1679.36,685.721 1679.92,685.721 1680.48,685.721 1681.04,685.721 1681.6,685.721 1682.16,685.721 1682.72,685.721 1683.28,685.721 1683.84,685.721 1684.4,685.721 1684.95,685.721 1685.51,685.721 1686.07,685.721 1686.63,685.721 1687.19,685.721 1687.75,685.721 1688.31,685.721 1688.87,685.721 1689.43,685.721 1689.99,685.721 1690.55,685.721 1691.11,685.721 1691.67,685.721 1692.23,685.721 1692.78,685.721 1693.34,685.721 1693.9,685.721 1694.46,685.721 1695.02,685.721 1695.58,685.721 1696.14,685.721 1696.7,685.721 1697.26,685.721 1697.82,685.721 1698.38,685.721 1698.94,685.721 1699.5,685.721 1700.05,685.721 1700.61,685.721 1701.17,685.721 1701.73,685.721 1702.29,685.721 1702.85,685.721 1703.41,685.721 1703.97,685.721 1704.53,685.721 1705.09,685.721 1705.65,685.721 1706.21,685.721 1706.77,685.721 1707.32,685.721 1707.88,685.721 1708.44,685.721 1709,685.721 1709.56,685.721 1710.12,685.721 1710.68,685.721 1711.24,685.721 1711.8,685.721 1712.36,685.721 1712.92,685.721 1713.48,685.721 1714.04,685.721 1714.6,685.721 1715.15,685.721 1715.71,685.721 1716.27,685.721 1716.83,685.721 1717.39,685.721 1717.95,685.721 1718.51,685.721 1719.07,685.721 1719.63,685.721 1720.19,685.721 1720.75,685.721 1721.31,685.721 1721.87,685.721 1722.42,685.721 1722.98,685.721 1723.54,685.721 1724.1,685.721 1724.66,685.721 1725.22,685.721 1725.78,685.721 1726.34,685.721 1726.9,685.721 1727.46,685.721 1728.02,685.721 1728.58,685.721 1729.14,685.721 1729.69,685.721 1730.25,685.721 1730.81,685.721 1731.37,685.721 1731.93,685.721 1732.49,685.721 1733.05,685.721 1733.61,685.721 1734.17,685.721 1734.73,685.721 1735.29,685.721 1735.85,685.721 1736.41,685.721 1736.97,685.721 1737.52,685.721 1738.08,685.721 1738.64,685.721 1739.2,685.721 1739.76,685.721 1740.32,685.721 1740.88,685.721 1741.44,685.721 1742,685.721 1742.56,685.721 1743.12,685.721 1743.68,685.721 1744.24,685.721 1744.79,685.721 1745.35,685.721 1745.91,685.721 1746.47,685.721 1747.03,685.721 1747.59,685.721 1748.15,685.721 1748.71,685.721 1749.27,685.721 1749.83,685.721 1750.39,685.721 1750.95,685.721 1751.51,685.721 1752.06,685.721 1752.62,685.721 1753.18,685.721 1753.74,685.721 1754.3,685.721 1754.86,685.721 1755.42,685.721 1755.98,685.721 1756.54,685.721 1757.1,685.721 1757.66,685.721 1758.22,685.721 1758.78,685.721 1759.34,685.721 1759.89,685.721 1760.45,685.721 1761.01,685.721 1761.57,685.721 1762.13,685.721 1762.69,685.721 1763.25,685.721 1763.81,685.721 1764.37,685.721 1764.93,685.721 1765.49,685.721 1766.05,685.721 1766.61,685.721 1767.16,685.721 1767.72,685.721 1768.28,685.721 1768.84,685.721 1769.4,685.721 1769.96,685.721 1770.52,685.721 1771.08,685.721 1771.64,685.721 1772.2,685.721 1772.76,685.721 1773.32,685.721 1773.88,685.721 1774.43,685.721 1774.99,685.721 1775.55,685.721 1776.11,685.721 1776.67,685.721 1777.23,685.721 1777.79,685.721 1778.35,685.721 1778.91,685.721 1779.47,685.721 1780.03,685.721 1780.59,685.721 1781.15,685.721 1781.71,685.721 1782.26,685.721 1782.82,685.721 1783.38,685.721 1783.94,685.721 1784.5,685.721 1785.06,685.721 1785.62,685.721 1786.18,685.721 1786.74,685.721 1787.3,685.721 1787.86,685.721 1788.42,685.721 1788.98,685.721 1789.53,685.721 1790.09,685.721 1790.65,685.721 1791.21,685.721 1791.77,685.721 1792.33,685.721 1792.89,685.721 1793.45,685.721 1794.01,685.721 1794.57,685.721 1795.13,685.721 1795.69,685.721 1796.25,685.721 1796.8,685.721 1797.36,685.721 1797.92,685.721 1798.48,685.721 1799.04,685.721 1799.6,685.721 1800.16,685.721 1800.72,685.721 1801.28,685.721 1801.84,685.721 1802.4,685.721 1802.96,685.721 1803.52,685.721 1804.08,685.721 1804.63,685.721 1805.19,685.721 1805.75,685.721 1806.31,685.721 1806.87,685.721 1807.43,685.721 1807.99,685.721 1808.55,685.721 1809.11,685.721 1809.67,685.721 1810.23,685.721 1810.79,685.721 1811.35,685.721 1811.9,685.721 1812.46,685.721 1813.02,685.721 1813.58,685.721 1814.14,685.721 1814.7,685.721 1815.26,685.721 1815.82,685.721 1816.38,685.721 1816.94,685.721 1817.5,685.721 1818.06,685.721 1818.62,685.721 1819.18,685.721 1819.73,685.721 1820.29,685.721 1820.85,685.721 1821.41,685.721 1821.97,685.721 1822.53,685.721 1823.09,685.721 1823.65,685.721 1824.21,685.721 1824.77,685.721 1825.33,685.721 1825.89,685.721 1826.45,685.721 1827,685.721 1827.56,685.721 1828.12,685.721 1828.68,685.721 1829.24,685.721 1829.8,685.721 1830.36,685.721 1830.92,685.721 1831.48,685.721 1832.04,685.721 1832.6,685.721 1833.16,685.721 1833.72,685.721 1834.27,685.721 1834.83,685.721 1835.39,685.721 1835.95,685.721 1836.51,685.721 1837.07,685.721 1837.63,685.721 1838.19,685.721 \"/>\n<path clip-path=\"url(#clip803)\" d=\"M720.247 684.584 L720.806 684.584 L721.365 684.584 L721.924 684.584 L722.484 684.584 L723.043 684.584 L723.602 684.584 L724.161 684.584 L724.721 684.584 L725.28 684.584 L725.839 684.584 L726.398 684.584 L726.958 684.584 L727.517 684.584 L728.076 684.584 L728.635 684.584 L729.195 684.584 L729.754 684.584 L730.313 684.584 L730.872 684.584 L731.432 684.584 L731.991 684.584 L732.55 684.584 L733.109 684.584 L733.669 684.584 L734.228 684.584 L734.787 684.584 L735.346 684.584 L735.906 684.584 L736.465 684.584 L737.024 684.584 L737.583 684.584 L738.143 684.584 L738.702 684.584 L739.261 684.584 L739.82 684.584 L740.38 684.584 L740.939 684.584 L741.498 684.584 L742.057 684.584 L742.617 684.584 L743.176 684.584 L743.735 684.584 L744.294 684.584 L744.854 684.584 L745.413 684.584 L745.972 684.584 L746.531 684.584 L747.091 684.584 L747.65 684.584 L748.209 684.584 L748.768 684.584 L749.328 684.584 L749.887 684.584 L750.446 684.584 L751.005 684.584 L751.565 684.584 L752.124 684.584 L752.683 684.584 L753.242 684.584 L753.802 684.584 L754.361 684.584 L754.92 684.584 L755.479 684.584 L756.039 684.584 L756.598 684.584 L757.157 684.584 L757.716 684.584 L758.276 684.584 L758.835 684.584 L759.394 684.584 L759.953 684.584 L760.513 684.584 L761.072 684.584 L761.631 684.584 L762.19 684.584 L762.75 684.584 L763.309 684.584 L763.868 684.584 L764.427 684.584 L764.987 684.584 L765.546 684.584 L766.105 684.584 L766.664 684.584 L767.224 684.584 L767.783 684.584 L768.342 684.584 L768.901 684.584 L769.461 684.584 L770.02 684.584 L770.579 684.584 L771.138 684.584 L771.698 684.584 L772.257 684.584 L772.816 684.584 L773.375 684.584 L773.935 684.584 L774.494 684.584 L775.053 684.584 L775.612 684.584 L776.172 684.584 L776.731 684.584 L777.29 684.584 L777.849 684.584 L778.409 684.584 L778.968 684.584 L779.527 684.584 L780.086 684.584 L780.646 684.584 L781.205 684.584 L781.764 684.584 L782.323 684.584 L782.883 684.584 L783.442 684.584 L784.001 684.584 L784.56 684.584 L785.12 684.584 L785.679 684.584 L786.238 684.584 L786.797 684.584 L787.357 684.584 L787.916 684.584 L788.475 684.584 L789.034 684.584 L789.594 684.584 L790.153 684.584 L790.712 684.584 L791.271 684.584 L791.831 684.584 L792.39 684.584 L792.949 684.584 L793.508 684.584 L794.068 684.584 L794.627 684.584 L795.186 684.584 L795.745 684.584 L796.305 684.584 L796.864 684.584 L797.423 684.584 L797.982 684.584 L798.542 684.584 L799.101 684.584 L799.66 684.584 L800.219 684.584 L800.779 684.584 L801.338 684.584 L801.897 684.584 L802.456 684.584 L803.016 684.584 L803.575 684.584 L804.134 684.584 L804.693 684.584 L805.253 684.584 L805.812 684.584 L806.371 684.584 L806.931 684.584 L807.49 684.584 L808.049 684.584 L808.608 684.584 L809.168 684.584 L809.727 684.584 L810.286 684.584 L810.845 684.584 L811.405 684.584 L811.964 684.584 L812.523 684.584 L813.082 684.584 L813.642 684.584 L814.201 684.584 L814.76 684.584 L815.319 684.584 L815.879 684.584 L816.438 684.584 L816.997 684.584 L817.556 684.584 L818.116 684.584 L818.675 684.584 L819.234 684.584 L819.793 684.584 L820.353 684.584 L820.912 684.584 L821.471 684.584 L822.03 684.584 L822.59 684.584 L823.149 684.584 L823.708 684.584 L824.267 684.584 L824.827 684.584 L825.386 684.584 L825.945 684.584 L826.504 684.584 L827.064 684.584 L827.623 684.584 L828.182 684.584 L828.741 684.584 L829.301 684.584 L829.86 684.584 L830.419 684.584 L830.978 684.584 L831.538 684.584 L832.097 684.584 L832.656 684.584 L833.215 684.584 L833.775 684.584 L834.334 684.584 L834.893 684.584 L835.452 684.584 L836.012 684.584 L836.571 684.584 L837.13 684.584 L837.689 684.584 L838.249 684.584 L838.808 684.584 L839.367 684.584 L839.926 684.584 L840.486 684.584 L841.045 684.584 L841.604 684.584 L842.163 684.584 L842.723 684.584 L843.282 684.584 L843.841 684.584 L844.4 684.584 L844.96 684.584 L845.519 684.584 L846.078 684.584 L846.637 684.584 L847.197 684.584 L847.756 684.584 L848.315 684.584 L848.874 684.584 L849.434 684.584 L849.993 684.584 L850.552 684.584 L851.111 684.584 L851.671 684.584 L852.23 684.584 L852.789 684.584 L853.348 684.584 L853.908 684.584 L854.467 684.584 L855.026 684.584 L855.585 684.584 L856.145 684.584 L856.704 684.584 L857.263 684.584 L857.822 684.584 L858.382 684.584 L858.941 684.584 L859.5 684.584 L860.059 684.584 L860.619 684.584 L861.178 684.584 L861.737 684.584 L862.296 684.584 L862.856 684.584 L863.415 684.584 L863.974 684.584 L864.533 684.584 L865.093 684.584 L865.652 684.584 L866.211 684.584 L866.77 684.584 L867.33 684.584 L867.889 684.584 L868.448 684.584 L869.007 684.584 L869.567 684.584 L870.126 684.584 L870.685 684.584 L871.244 684.584 L871.804 684.584 L872.363 684.584 L872.922 684.584 L873.481 684.584 L874.041 684.584 L874.6 684.584 L875.159 684.584 L875.718 684.584 L876.278 684.584 L876.837 684.584 L877.396 684.584 L877.955 684.584 L878.515 684.584 L879.074 684.584 L879.633 684.584 L880.192 684.584 L880.752 684.584 L881.311 684.584 L881.87 684.584 L882.429 684.584 L882.989 684.584 L883.548 684.584 L884.107 684.584 L884.666 684.584 L885.226 684.584 L885.785 684.584 L886.344 684.584 L886.903 684.584 L887.463 684.584 L888.022 684.584 L888.581 684.584 L889.14 684.584 L889.7 684.584 L890.259 684.584 L890.818 684.584 L891.377 684.584 L891.937 684.584 L892.496 684.584 L893.055 684.584 L893.614 684.584 L894.174 684.584 L894.733 684.584 L895.292 684.584 L895.851 684.584 L896.411 684.584 L896.97 684.584 L897.529 684.584 L898.088 684.584 L898.648 684.584 L899.207 684.584 L899.766 684.584 L900.325 684.584 L900.885 684.584 L901.444 684.584 L902.003 684.584 L902.562 684.584 L903.122 684.584 L903.681 684.584 L904.24 684.584 L904.799 684.584 L905.359 684.584 L905.918 684.584 L906.477 684.584 L907.036 684.584 L907.596 684.584 L908.155 684.584 L908.714 684.584 L909.273 684.584 L909.833 684.584 L910.392 684.584 L910.951 684.584 L911.51 684.584 L912.07 684.584 L912.629 684.584 L913.188 684.584 L913.747 684.584 L914.307 684.584 L914.866 684.584 L915.425 684.584 L915.984 684.584 L916.544 684.584 L917.103 684.584 L917.662 684.584 L918.221 684.584 L918.781 684.584 L919.34 684.584 L919.899 684.584 L920.458 684.584 L921.018 684.584 L921.577 684.584 L922.136 684.584 L922.695 684.584 L923.255 684.584 L923.814 684.584 L924.373 684.584 L924.932 684.584 L925.492 684.584 L926.051 684.584 L926.61 684.584 L927.169 684.584 L927.729 684.584 L928.288 684.584 L928.847 684.584 L929.406 684.584 L929.966 684.584 L930.525 684.584 L931.084 684.584 L931.644 684.584 L932.203 684.584 L932.762 684.584 L933.321 684.584 L933.881 684.584 L934.44 684.584 L934.999 684.584 L935.558 684.584 L936.118 684.584 L936.677 684.584 L937.236 684.584 L937.795 684.584 L938.355 684.584 L938.914 684.584 L939.473 684.584 L940.032 684.584 L940.592 684.584 L941.151 684.584 L941.71 684.584 L942.269 684.584 L942.829 684.584 L943.388 684.584 L943.947 684.584 L944.506 684.584 L945.066 684.584 L945.625 684.584 L946.184 684.584 L946.743 684.584 L947.303 684.584 L947.862 684.584 L948.421 684.584 L948.98 684.584 L949.54 684.584 L950.099 684.584 L950.658 684.584 L951.217 684.584 L951.777 684.584 L952.336 684.584 L952.895 684.584 L953.454 684.584 L954.014 684.584 L954.573 684.584 L955.132 684.584 L955.691 684.584 L956.251 684.584 L956.81 684.584 L957.369 684.584 L957.928 684.584 L958.488 684.584 L959.047 684.584 L959.606 684.584 L960.165 684.584 L960.725 684.584 L961.284 684.584 L961.843 684.584 L962.402 684.584 L962.962 684.584 L963.521 684.584 L964.08 684.584 L964.639 684.584 L965.199 684.584 L965.758 684.584 L966.317 684.584 L966.876 684.584 L967.436 684.584 L967.995 684.584 L968.554 684.584 L969.113 684.584 L969.673 684.584 L970.232 684.584 L970.791 684.584 L971.35 684.584 L971.91 684.584 L972.469 684.584 L973.028 684.584 L973.587 684.584 L974.147 684.584 L974.706 684.584 L975.265 684.584 L975.824 684.584 L976.384 684.584 L976.943 684.584 L977.502 684.584 L978.061 684.584 L978.621 684.584 L979.18 684.584 L979.739 684.584 L980.298 684.584 L980.858 684.584 L981.417 684.584 L981.976 684.584 L982.535 684.584 L983.095 684.584 L983.654 684.584 L984.213 684.584 L984.772 684.584 L985.332 684.584 L985.891 684.584 L986.45 684.584 L987.009 684.584 L987.569 684.584 L988.128 684.584 L988.687 684.584 L989.246 684.584 L989.806 684.584 L990.365 684.584 L990.924 684.584 L991.483 684.584 L992.043 684.584 L992.602 684.584 L993.161 684.584 L993.72 684.584 L994.28 684.584 L994.839 684.584 L995.398 684.584 L995.957 684.584 L996.517 684.584 L997.076 684.584 L997.635 684.584 L998.194 684.584 L998.754 684.584 L999.313 684.584 L999.872 684.584 L1000.43 684.584 L1000.99 684.584 L1001.55 684.584 L1002.11 684.584 L1002.67 684.584 L1003.23 684.584 L1003.79 684.584 L1004.35 684.584 L1004.91 684.584 L1005.46 684.584 L1006.02 684.584 L1006.58 684.584 L1007.14 684.584 L1007.7 684.584 L1008.26 684.584 L1008.82 684.584 L1009.38 684.584 L1009.94 684.584 L1010.5 684.584 L1011.06 684.584 L1011.62 684.584 L1012.18 684.584 L1012.73 684.584 L1013.29 684.584 L1013.85 684.584 L1014.41 684.584 L1014.97 684.584 L1015.53 684.584 L1016.09 684.584 L1016.65 684.584 L1017.21 684.584 L1017.77 684.584 L1018.33 684.584 L1018.89 684.584 L1019.45 684.584 L1020.01 684.584 L1020.56 684.584 L1021.12 684.584 L1021.68 684.584 L1022.24 684.584 L1022.8 684.584 L1023.36 684.584 L1023.92 684.584 L1024.48 684.584 L1025.04 684.584 L1025.6 684.584 L1026.16 684.584 L1026.72 684.584 L1027.28 684.584 L1027.83 684.584 L1028.39 684.584 L1028.95 684.584 L1029.51 684.584 L1030.07 684.584 L1030.63 684.584 L1031.19 684.584 L1031.75 684.584 L1032.31 684.584 L1032.87 684.584 L1033.43 684.584 L1033.99 684.584 L1034.55 684.584 L1035.1 684.584 L1035.66 684.584 L1036.22 684.584 L1036.78 684.584 L1037.34 684.584 L1037.9 684.584 L1038.46 684.584 L1039.02 684.584 L1039.58 684.584 L1040.14 684.584 L1040.7 684.584 L1041.26 684.584 L1041.82 684.584 L1042.38 684.584 L1042.93 684.584 L1043.49 684.584 L1044.05 684.584 L1044.61 684.584 L1045.17 684.584 L1045.73 684.584 L1046.29 684.584 L1046.85 684.584 L1047.41 684.584 L1047.97 684.584 L1048.53 684.584 L1049.09 684.584 L1049.65 684.584 L1050.2 684.584 L1050.76 684.584 L1051.32 684.584 L1051.88 684.584 L1052.44 684.584 L1053 684.584 L1053.56 684.584 L1054.12 684.584 L1054.68 684.584 L1055.24 684.584 L1055.8 684.584 L1056.36 684.584 L1056.92 684.584 L1057.48 684.584 L1058.03 684.584 L1058.59 684.584 L1059.15 684.584 L1059.71 684.584 L1060.27 684.584 L1060.83 684.584 L1061.39 684.584 L1061.95 684.584 L1062.51 684.584 L1063.07 684.584 L1063.63 684.584 L1064.19 684.584 L1064.75 684.584 L1065.3 684.584 L1065.86 684.584 L1066.42 684.584 L1066.98 684.584 L1067.54 684.584 L1068.1 684.584 L1068.66 684.584 L1069.22 684.584 L1069.78 684.584 L1070.34 684.584 L1070.9 684.584 L1071.46 684.584 L1072.02 684.584 L1072.57 684.584 L1073.13 684.584 L1073.69 684.584 L1074.25 684.584 L1074.81 684.584 L1075.37 684.584 L1075.93 684.584 L1076.49 684.584 L1077.05 684.584 L1077.61 684.584 L1078.17 684.584 L1078.73 684.584 L1079.29 684.584 L1079.85 684.584 L1080.4 684.584 L1080.96 684.584 L1081.52 684.584 L1082.08 684.584 L1082.64 684.584 L1083.2 684.584 L1083.76 684.584 L1084.32 684.584 L1084.88 684.584 L1085.44 684.584 L1086 684.584 L1086.56 684.584 L1087.12 684.584 L1087.67 684.584 L1088.23 684.584 L1088.79 684.584 L1089.35 684.584 L1089.91 684.584 L1090.47 684.584 L1091.03 684.584 L1091.59 684.584 L1092.15 684.584 L1092.71 684.584 L1093.27 684.584 L1093.83 684.584 L1094.39 684.584 L1094.94 684.584 L1095.5 684.584 L1096.06 684.584 L1096.62 684.584 L1097.18 684.584 L1097.74 684.584 L1098.3 684.584 L1098.86 684.584 L1099.42 684.584 L1099.98 684.584 L1100.54 684.584 L1101.1 684.584 L1101.66 684.584 L1102.22 684.584 L1102.77 684.584 L1103.33 684.584 L1103.89 684.584 L1104.45 684.584 L1105.01 684.584 L1105.57 684.584 L1106.13 684.584 L1106.69 684.584 L1107.25 684.584 L1107.81 684.584 L1108.37 684.584 L1108.93 684.584 L1109.49 684.584 L1110.04 684.584 L1110.6 684.584 L1111.16 684.584 L1111.72 684.584 L1112.28 684.584 L1112.84 684.584 L1113.4 684.584 L1113.96 684.584 L1114.52 684.584 L1115.08 684.584 L1115.64 684.584 L1116.2 684.584 L1116.76 684.584 L1117.31 684.584 L1117.87 684.584 L1118.43 684.584 L1118.99 684.584 L1119.55 684.584 L1120.11 684.584 L1120.67 684.584 L1121.23 684.584 L1121.79 684.584 L1122.35 684.584 L1122.91 684.584 L1123.47 684.584 L1124.03 684.584 L1124.59 684.584 L1125.14 684.584 L1125.7 684.584 L1126.26 684.584 L1126.82 684.584 L1127.38 684.584 L1127.94 684.584 L1128.5 684.584 L1129.06 684.584 L1129.62 684.584 L1130.18 684.584 L1130.74 684.584 L1131.3 684.584 L1131.86 684.584 L1132.41 684.584 L1132.97 684.584 L1133.53 684.584 L1134.09 684.584 L1134.65 684.584 L1135.21 684.584 L1135.77 684.584 L1136.33 684.584 L1136.89 684.584 L1137.45 684.584 L1138.01 684.584 L1138.57 684.584 L1139.13 684.584 L1139.68 684.584 L1140.24 684.584 L1140.8 684.584 L1141.36 684.584 L1141.92 684.584 L1142.48 684.584 L1143.04 684.584 L1143.6 684.584 L1144.16 684.584 L1144.72 684.584 L1145.28 684.584 L1145.84 684.584 L1146.4 684.584 L1146.96 684.584 L1147.51 684.584 L1148.07 684.584 L1148.63 684.584 L1149.19 684.584 L1149.75 684.584 L1150.31 684.584 L1150.87 684.584 L1151.43 684.584 L1151.99 684.584 L1152.55 684.584 L1153.11 684.584 L1153.67 684.584 L1154.23 684.584 L1154.78 684.584 L1155.34 684.584 L1155.9 684.584 L1156.46 684.584 L1157.02 684.584 L1157.58 684.584 L1158.14 684.584 L1158.7 684.584 L1159.26 684.584 L1159.82 684.584 L1160.38 684.584 L1160.94 684.584 L1161.5 684.584 L1162.05 684.584 L1162.61 684.584 L1163.17 684.584 L1163.73 684.584 L1164.29 684.584 L1164.85 684.584 L1165.41 684.584 L1165.97 684.584 L1166.53 684.584 L1167.09 684.584 L1167.65 684.584 L1168.21 684.584 L1168.77 684.584 L1169.33 684.584 L1169.88 684.584 L1170.44 684.584 L1171 684.584 L1171.56 684.584 L1172.12 684.584 L1172.68 684.584 L1173.24 684.584 L1173.8 684.584 L1174.36 684.584 L1174.92 684.584 L1175.48 684.584 L1176.04 684.584 L1176.6 684.584 L1177.15 684.584 L1177.71 684.584 L1178.27 684.584 L1178.83 684.584 L1179.39 684.584 L1179.95 684.584 L1180.51 684.584 L1181.07 684.584 L1181.63 684.584 L1182.19 684.584 L1182.75 684.584 L1183.31 684.584 L1183.87 684.584 L1184.43 684.584 L1184.98 684.584 L1185.54 684.584 L1186.1 684.584 L1186.66 684.584 L1187.22 684.584 L1187.78 684.584 L1188.34 684.584 L1188.9 684.584 L1189.46 684.584 L1190.02 684.584 L1190.58 684.584 L1191.14 684.584 L1191.7 684.584 L1192.25 684.584 L1192.81 684.584 L1193.37 684.584 L1193.93 684.584 L1194.49 684.584 L1195.05 684.584 L1195.61 684.584 L1196.17 684.584 L1196.73 684.584 L1197.29 684.584 L1197.85 684.584 L1198.41 684.584 L1198.97 684.584 L1199.52 684.584 L1200.08 684.584 L1200.64 684.584 L1201.2 684.584 L1201.76 684.584 L1202.32 684.584 L1202.88 684.584 L1203.44 684.584 L1204 684.584 L1204.56 684.584 L1205.12 684.584 L1205.68 684.584 L1206.24 684.584 L1206.8 684.584 L1207.35 684.584 L1207.91 684.584 L1208.47 684.584 L1209.03 684.584 L1209.59 684.584 L1210.15 684.584 L1210.71 684.584 L1211.27 684.584 L1211.83 684.584 L1212.39 684.584 L1212.95 684.584 L1213.51 684.584 L1214.07 684.584 L1214.62 684.584 L1215.18 684.584 L1215.74 684.584 L1216.3 684.584 L1216.86 684.584 L1217.42 684.584 L1217.98 684.584 L1218.54 684.584 L1219.1 684.584 L1219.66 684.584 L1220.22 684.584 L1220.78 684.584 L1221.34 684.584 L1221.89 684.584 L1222.45 684.584 L1223.01 684.584 L1223.57 684.584 L1224.13 684.584 L1224.69 684.584 L1225.25 684.584 L1225.81 684.584 L1226.37 684.584 L1226.93 684.584 L1227.49 684.584 L1228.05 684.584 L1228.61 684.584 L1229.17 684.584 L1229.72 684.584 L1230.28 684.584 L1230.84 684.584 L1231.4 684.584 L1231.96 684.584 L1232.52 684.584 L1233.08 684.584 L1233.64 684.584 L1234.2 684.584 L1234.76 684.584 L1235.32 684.584 L1235.88 684.584 L1236.44 684.584 L1236.99 684.584 L1237.55 684.584 L1238.11 684.584 L1238.67 684.584 L1239.23 684.584 L1239.79 684.584 L1240.35 684.584 L1240.91 684.584 L1241.47 684.584 L1242.03 684.584 L1242.59 684.584 L1243.15 684.584 L1243.71 684.584 L1244.26 684.584 L1244.82 684.584 L1245.38 684.584 L1245.94 684.584 L1246.5 684.584 L1247.06 684.584 L1247.62 684.584 L1248.18 684.584 L1248.74 684.584 L1249.3 684.584 L1249.86 684.584 L1250.42 684.584 L1250.98 684.584 L1251.54 684.584 L1252.09 684.584 L1252.65 684.584 L1253.21 684.584 L1253.77 684.584 L1254.33 684.584 L1254.89 684.584 L1255.45 684.584 L1256.01 684.584 L1256.57 684.584 L1257.13 684.584 L1257.69 684.584 L1258.25 684.584 L1258.81 684.584 L1259.36 684.584 L1259.92 684.584 L1260.48 684.584 L1261.04 684.584 L1261.6 684.584 L1262.16 684.584 L1262.72 684.584 L1263.28 684.584 L1263.84 684.584 L1264.4 684.584 L1264.96 684.584 L1265.52 684.584 L1266.08 684.584 L1266.63 684.584 L1267.19 684.584 L1267.75 684.584 L1268.31 684.584 L1268.87 684.584 L1269.43 684.584 L1269.99 684.584 L1270.55 684.584 L1271.11 684.584 L1271.67 684.584 L1272.23 684.584 L1272.79 684.584 L1273.35 684.584 L1273.91 684.584 L1274.46 684.584 L1275.02 684.584 L1275.58 684.584 L1276.14 684.584 L1276.7 684.584 L1277.26 684.584 L1277.82 684.584 L1278.38 684.584 L1278.94 684.584 L1279.5 684.584 L1280.06 684.584 L1280.62 684.584 L1281.18 684.584 L1281.73 684.584 L1282.29 684.584 L1282.85 684.584 L1283.41 684.584 L1283.97 684.584 L1284.53 684.584 L1285.09 684.584 L1285.65 684.584 L1286.21 684.584 L1286.77 684.584 L1287.33 684.584 L1287.89 684.584 L1288.45 684.584 L1289 684.584 L1289.56 684.584 L1290.12 684.584 L1290.68 684.584 L1291.24 684.584 L1291.8 684.584 L1292.36 684.584 L1292.92 684.584 L1293.48 684.584 L1294.04 684.584 L1294.6 684.584 L1295.16 684.584 L1295.72 684.584 L1296.28 684.584 L1296.83 684.584 L1297.39 684.584 L1297.95 684.584 L1298.51 684.584 L1299.07 684.584 L1299.63 684.584 L1300.19 684.584 L1300.75 684.584 L1301.31 684.584 L1301.87 684.584 L1302.43 684.584 L1302.99 684.584 L1303.55 684.584 L1304.1 684.584 L1304.66 684.584 L1305.22 684.584 L1305.78 684.584 L1306.34 684.584 L1306.9 684.584 L1307.46 684.584 L1308.02 684.584 L1308.58 684.584 L1309.14 684.584 L1309.7 684.584 L1310.26 684.584 L1310.82 684.584 L1311.38 684.584 L1311.93 684.584 L1312.49 684.584 L1313.05 684.584 L1313.61 684.584 L1314.17 684.584 L1314.73 684.584 L1315.29 684.584 L1315.85 684.584 L1316.41 684.584 L1316.97 684.584 L1317.53 684.584 L1318.09 684.584 L1318.65 684.584 L1319.2 684.584 L1319.76 684.584 L1320.32 684.584 L1320.88 684.584 L1321.44 684.584 L1322 684.584 L1322.56 684.584 L1323.12 684.584 L1323.68 684.584 L1324.24 684.584 L1324.8 684.584 L1325.36 684.584 L1325.92 684.584 L1326.47 684.584 L1327.03 684.584 L1327.59 684.584 L1328.15 684.584 L1328.71 684.584 L1329.27 684.584 L1329.83 684.584 L1330.39 684.584 L1330.95 684.584 L1331.51 684.584 L1332.07 684.584 L1332.63 684.584 L1333.19 684.584 L1333.75 684.584 L1334.3 684.584 L1334.86 684.584 L1335.42 684.584 L1335.98 684.584 L1336.54 684.584 L1337.1 684.584 L1337.66 684.584 L1338.22 684.584 L1338.78 684.584 L1339.34 684.584 L1339.9 684.584 L1340.46 684.584 L1341.02 684.584 L1341.57 684.584 L1342.13 684.584 L1342.69 684.584 L1343.25 684.584 L1343.81 684.584 L1344.37 684.584 L1344.93 684.584 L1345.49 684.584 L1346.05 684.584 L1346.61 684.584 L1347.17 684.584 L1347.73 684.584 L1348.29 684.584 L1348.84 684.584 L1349.4 684.584 L1349.96 684.584 L1350.52 684.584 L1351.08 684.584 L1351.64 684.584 L1352.2 684.584 L1352.76 684.584 L1353.32 684.584 L1353.88 684.584 L1354.44 684.584 L1355 684.584 L1355.56 684.584 L1356.12 684.584 L1356.67 684.584 L1357.23 684.584 L1357.79 684.584 L1358.35 684.584 L1358.91 684.584 L1359.47 684.584 L1360.03 684.584 L1360.59 684.584 L1361.15 684.584 L1361.71 684.584 L1362.27 684.584 L1362.83 684.584 L1363.39 684.584 L1363.94 684.584 L1364.5 684.584 L1365.06 684.584 L1365.62 684.584 L1366.18 684.584 L1366.74 684.584 L1367.3 684.584 L1367.86 684.584 L1368.42 684.584 L1368.98 684.584 L1369.54 684.584 L1370.1 684.584 L1370.66 684.584 L1371.21 684.584 L1371.77 684.584 L1372.33 684.584 L1372.89 684.584 L1373.45 684.584 L1374.01 684.584 L1374.57 684.584 L1375.13 684.584 L1375.69 684.584 L1376.25 684.584 L1376.81 684.584 L1377.37 684.584 L1377.93 684.584 L1378.49 684.584 L1379.04 684.584 L1379.6 684.584 L1380.16 684.584 L1380.72 684.584 L1381.28 684.584 L1381.84 684.584 L1382.4 684.584 L1382.96 684.584 L1383.52 684.584 L1384.08 684.584 L1384.64 684.584 L1385.2 684.584 L1385.76 684.584 L1386.31 684.584 L1386.87 684.584 L1387.43 684.584 L1387.99 684.584 L1388.55 684.584 L1389.11 684.584 L1389.67 684.584 L1390.23 684.584 L1390.79 684.584 L1391.35 684.584 L1391.91 684.584 L1392.47 684.584 L1393.03 684.584 L1393.58 684.584 L1394.14 684.584 L1394.7 684.584 L1395.26 684.584 L1395.82 684.584 L1396.38 684.584 L1396.94 684.584 L1397.5 684.584 L1398.06 684.584 L1398.62 684.584 L1399.18 684.584 L1399.74 684.584 L1400.3 684.584 L1400.86 684.584 L1401.41 684.584 L1401.97 684.584 L1402.53 684.584 L1403.09 684.584 L1403.65 684.584 L1404.21 684.584 L1404.77 684.584 L1405.33 684.584 L1405.89 684.584 L1406.45 684.584 L1407.01 684.584 L1407.57 684.584 L1408.13 684.584 L1408.68 684.584 L1409.24 684.584 L1409.8 684.584 L1410.36 684.584 L1410.92 684.584 L1411.48 684.584 L1412.04 684.584 L1412.6 684.584 L1413.16 684.584 L1413.72 684.584 L1414.28 684.584 L1414.84 684.584 L1415.4 684.584 L1415.95 684.584 L1416.51 684.584 L1417.07 684.584 L1417.63 684.584 L1418.19 684.584 L1418.75 684.584 L1419.31 684.584 L1419.87 684.584 L1420.43 684.584 L1420.99 684.584 L1421.55 684.584 L1422.11 684.584 L1422.67 684.584 L1423.23 684.584 L1423.78 684.584 L1424.34 684.584 L1424.9 684.584 L1425.46 684.584 L1426.02 684.584 L1426.58 684.584 L1427.14 684.584 L1427.7 684.584 L1428.26 684.584 L1428.82 684.584 L1429.38 684.584 L1429.94 684.584 L1430.5 684.584 L1431.05 684.584 L1431.61 684.584 L1432.17 684.584 L1432.73 684.584 L1433.29 684.584 L1433.85 684.584 L1434.41 684.584 L1434.97 684.584 L1435.53 684.584 L1436.09 684.584 L1436.65 684.584 L1437.21 684.584 L1437.77 684.584 L1438.33 684.584 L1438.88 684.584 L1439.44 684.584 L1440 684.584 L1440.56 684.584 L1441.12 684.584 L1441.68 684.584 L1442.24 684.584 L1442.8 684.584 L1443.36 684.584 L1443.92 684.584 L1444.48 684.584 L1445.04 684.584 L1445.6 684.584 L1446.15 684.584 L1446.71 684.584 L1447.27 684.584 L1447.83 684.584 L1448.39 684.584 L1448.95 684.584 L1449.51 684.584 L1450.07 684.584 L1450.63 684.584 L1451.19 684.584 L1451.75 684.584 L1452.31 684.584 L1452.87 684.584 L1453.42 684.584 L1453.98 684.584 L1454.54 684.584 L1455.1 684.584 L1455.66 684.584 L1456.22 684.584 L1456.78 684.584 L1457.34 684.584 L1457.9 684.584 L1458.46 684.584 L1459.02 684.584 L1459.58 684.584 L1460.14 684.584 L1460.7 684.584 L1461.25 684.584 L1461.81 684.584 L1462.37 684.584 L1462.93 684.584 L1463.49 684.584 L1464.05 684.584 L1464.61 684.584 L1465.17 684.584 L1465.73 684.584 L1466.29 684.584 L1466.85 684.584 L1467.41 684.584 L1467.97 684.584 L1468.52 684.584 L1469.08 684.584 L1469.64 684.584 L1470.2 684.584 L1470.76 684.584 L1471.32 684.584 L1471.88 684.584 L1472.44 684.584 L1473 684.584 L1473.56 684.584 L1474.12 684.584 L1474.68 684.584 L1475.24 684.584 L1475.79 684.584 L1476.35 684.584 L1476.91 684.584 L1477.47 684.584 L1478.03 684.584 L1478.59 684.584 L1479.15 684.584 L1479.71 684.584 L1480.27 684.584 L1480.83 684.584 L1481.39 684.584 L1481.95 684.584 L1482.51 684.584 L1483.07 684.584 L1483.62 684.584 L1484.18 684.584 L1484.74 684.584 L1485.3 684.584 L1485.86 684.584 L1486.42 684.584 L1486.98 684.584 L1487.54 684.584 L1488.1 684.584 L1488.66 684.584 L1489.22 684.584 L1489.78 684.584 L1490.34 684.584 L1490.89 684.584 L1491.45 684.584 L1492.01 684.584 L1492.57 684.584 L1493.13 684.584 L1493.69 684.584 L1494.25 684.584 L1494.81 684.584 L1495.37 684.584 L1495.93 684.584 L1496.49 684.584 L1497.05 684.584 L1497.61 684.584 L1498.16 684.584 L1498.72 684.584 L1499.28 684.584 L1499.84 684.584 L1500.4 684.584 L1500.96 684.584 L1501.52 684.584 L1502.08 684.584 L1502.64 684.584 L1503.2 684.584 L1503.76 684.584 L1504.32 684.584 L1504.88 684.584 L1505.44 684.584 L1505.99 684.584 L1506.55 684.584 L1507.11 684.584 L1507.67 684.584 L1508.23 684.584 L1508.79 684.584 L1509.35 684.584 L1509.91 684.584 L1510.47 684.584 L1511.03 684.584 L1511.59 684.584 L1512.15 684.584 L1512.71 684.584 L1513.26 684.584 L1513.82 684.584 L1514.38 684.584 L1514.94 684.584 L1515.5 684.584 L1516.06 684.584 L1516.62 684.584 L1517.18 684.584 L1517.74 684.584 L1518.3 684.584 L1518.86 684.584 L1519.42 684.584 L1519.98 684.584 L1520.53 684.584 L1521.09 684.584 L1521.65 684.584 L1522.21 684.584 L1522.77 684.584 L1523.33 684.584 L1523.89 684.584 L1524.45 684.584 L1525.01 684.584 L1525.57 684.584 L1526.13 684.584 L1526.69 684.584 L1527.25 684.584 L1527.81 684.584 L1528.36 684.584 L1528.92 684.584 L1529.48 684.584 L1530.04 684.584 L1530.6 684.584 L1531.16 684.584 L1531.72 684.584 L1532.28 684.584 L1532.84 684.584 L1533.4 684.584 L1533.96 684.584 L1534.52 684.584 L1535.08 684.584 L1535.63 684.584 L1536.19 684.584 L1536.75 684.584 L1537.31 684.584 L1537.87 684.584 L1538.43 684.584 L1538.99 684.584 L1539.55 684.584 L1540.11 684.584 L1540.67 684.584 L1541.23 684.584 L1541.79 684.584 L1542.35 684.584 L1542.9 684.584 L1543.46 684.584 L1544.02 684.584 L1544.58 684.584 L1545.14 684.584 L1545.7 684.584 L1546.26 684.584 L1546.82 684.584 L1547.38 684.584 L1547.94 684.584 L1548.5 684.584 L1549.06 684.584 L1549.62 684.584 L1550.18 684.584 L1550.73 684.584 L1551.29 684.584 L1551.85 684.584 L1552.41 684.584 L1552.97 684.584 L1553.53 684.584 L1554.09 684.584 L1554.65 684.584 L1555.21 684.584 L1555.77 684.584 L1556.33 684.584 L1556.89 684.584 L1557.45 684.584 L1558 684.584 L1558.56 684.584 L1559.12 684.584 L1559.68 684.584 L1560.24 684.584 L1560.8 684.584 L1561.36 684.584 L1561.92 684.584 L1562.48 684.584 L1563.04 684.584 L1563.6 684.584 L1564.16 684.584 L1564.72 684.584 L1565.28 684.584 L1565.83 684.584 L1566.39 684.584 L1566.95 684.584 L1567.51 684.584 L1568.07 684.584 L1568.63 684.584 L1569.19 684.584 L1569.75 684.584 L1570.31 684.584 L1570.87 684.584 L1571.43 684.584 L1571.99 684.584 L1572.55 684.584 L1573.1 684.584 L1573.66 684.584 L1574.22 684.584 L1574.78 684.584 L1575.34 684.584 L1575.9 684.584 L1576.46 684.584 L1577.02 684.584 L1577.58 684.584 L1578.14 684.584 L1578.7 684.584 L1579.26 684.584 L1579.82 684.584 L1580.37 684.584 L1580.93 684.584 L1581.49 684.584 L1582.05 684.584 L1582.61 684.584 L1583.17 684.584 L1583.73 684.584 L1584.29 684.584 L1584.85 684.584 L1585.41 684.584 L1585.97 684.584 L1586.53 684.584 L1587.09 684.584 L1587.65 684.584 L1588.2 684.584 L1588.76 684.584 L1589.32 684.584 L1589.88 684.584 L1590.44 684.584 L1591 684.584 L1591.56 684.584 L1592.12 684.584 L1592.68 684.584 L1593.24 684.584 L1593.8 684.584 L1594.36 684.584 L1594.92 684.584 L1595.47 684.584 L1596.03 684.584 L1596.59 684.584 L1597.15 684.584 L1597.71 684.584 L1598.27 684.584 L1598.83 684.584 L1599.39 684.584 L1599.95 684.584 L1600.51 684.584 L1601.07 684.584 L1601.63 684.584 L1602.19 684.584 L1602.74 684.584 L1603.3 684.584 L1603.86 684.584 L1604.42 684.584 L1604.98 684.584 L1605.54 684.584 L1606.1 684.584 L1606.66 684.584 L1607.22 684.584 L1607.78 684.584 L1608.34 684.584 L1608.9 684.584 L1609.46 684.584 L1610.02 684.584 L1610.57 684.584 L1611.13 684.584 L1611.69 684.584 L1612.25 684.584 L1612.81 684.584 L1613.37 684.584 L1613.93 684.584 L1614.49 684.584 L1615.05 684.584 L1615.61 684.584 L1616.17 684.584 L1616.73 684.584 L1617.29 684.584 L1617.84 684.584 L1618.4 684.584 L1618.96 684.584 L1619.52 684.584 L1620.08 684.584 L1620.64 684.584 L1621.2 684.584 L1621.76 684.584 L1622.32 684.584 L1622.88 684.584 L1623.44 684.584 L1624 684.584 L1624.56 684.584 L1625.11 684.584 L1625.67 684.584 L1626.23 684.584 L1626.79 684.584 L1627.35 684.584 L1627.91 684.584 L1628.47 684.584 L1629.03 684.584 L1629.59 684.584 L1630.15 684.584 L1630.71 684.584 L1631.27 684.584 L1631.83 684.584 L1632.39 684.584 L1632.94 684.584 L1633.5 684.584 L1634.06 684.584 L1634.62 684.584 L1635.18 684.584 L1635.74 684.584 L1636.3 684.584 L1636.86 684.584 L1637.42 684.584 L1637.98 684.584 L1638.54 684.584 L1639.1 684.584 L1639.66 684.584 L1640.21 684.584 L1640.77 684.584 L1641.33 684.584 L1641.89 684.584 L1642.45 684.584 L1643.01 684.584 L1643.57 684.584 L1644.13 684.584 L1644.69 684.584 L1645.25 684.584 L1645.81 684.584 L1646.37 684.584 L1646.93 684.584 L1647.48 684.584 L1648.04 684.584 L1648.6 684.584 L1649.16 684.584 L1649.72 684.584 L1650.28 684.584 L1650.84 684.584 L1651.4 684.584 L1651.96 684.584 L1652.52 684.584 L1653.08 684.584 L1653.64 684.584 L1654.2 684.584 L1654.76 684.584 L1655.31 684.584 L1655.87 684.584 L1656.43 684.584 L1656.99 684.584 L1657.55 684.584 L1658.11 684.584 L1658.67 684.584 L1659.23 684.584 L1659.79 684.584 L1660.35 684.584 L1660.91 684.584 L1661.47 684.584 L1662.03 684.584 L1662.58 684.584 L1663.14 684.584 L1663.7 684.584 L1664.26 684.584 L1664.82 684.584 L1665.38 684.584 L1665.94 684.584 L1666.5 684.584 L1667.06 684.584 L1667.62 684.584 L1668.18 684.584 L1668.74 684.584 L1669.3 684.584 L1669.85 684.584 L1670.41 684.584 L1670.97 684.584 L1671.53 684.584 L1672.09 684.584 L1672.65 684.584 L1673.21 684.584 L1673.77 684.584 L1674.33 684.584 L1674.89 684.584 L1675.45 684.584 L1676.01 684.584 L1676.57 684.584 L1677.13 684.584 L1677.68 684.584 L1678.24 684.584 L1678.8 684.584 L1679.36 684.584 L1679.92 684.584 L1680.48 684.584 L1681.04 684.584 L1681.6 684.584 L1682.16 684.584 L1682.72 684.584 L1683.28 684.584 L1683.84 684.584 L1684.4 684.584 L1684.95 684.584 L1685.51 684.584 L1686.07 684.584 L1686.63 684.584 L1687.19 684.584 L1687.75 684.584 L1688.31 684.584 L1688.87 684.584 L1689.43 684.584 L1689.99 684.584 L1690.55 684.584 L1691.11 684.584 L1691.67 684.584 L1692.23 684.584 L1692.78 684.584 L1693.34 684.584 L1693.9 684.584 L1694.46 684.584 L1695.02 684.584 L1695.58 684.584 L1696.14 684.584 L1696.7 684.584 L1697.26 684.584 L1697.82 684.584 L1698.38 684.584 L1698.94 684.584 L1699.5 684.584 L1700.05 684.584 L1700.61 684.584 L1701.17 684.584 L1701.73 684.584 L1702.29 684.584 L1702.85 684.584 L1703.41 684.584 L1703.97 684.584 L1704.53 684.584 L1705.09 684.584 L1705.65 684.584 L1706.21 684.584 L1706.77 684.584 L1707.32 684.584 L1707.88 684.584 L1708.44 684.584 L1709 684.584 L1709.56 684.584 L1710.12 684.584 L1710.68 684.584 L1711.24 684.584 L1711.8 684.584 L1712.36 684.584 L1712.92 684.584 L1713.48 684.584 L1714.04 684.584 L1714.6 684.584 L1715.15 684.584 L1715.71 684.584 L1716.27 684.584 L1716.83 684.584 L1717.39 684.584 L1717.95 684.584 L1718.51 684.584 L1719.07 684.584 L1719.63 684.584 L1720.19 684.584 L1720.75 684.584 L1721.31 684.584 L1721.87 684.584 L1722.42 684.584 L1722.98 684.584 L1723.54 684.584 L1724.1 684.584 L1724.66 684.584 L1725.22 684.584 L1725.78 684.584 L1726.34 684.584 L1726.9 684.584 L1727.46 684.584 L1728.02 684.584 L1728.58 684.584 L1729.14 684.584 L1729.69 684.584 L1730.25 684.584 L1730.81 684.584 L1731.37 684.584 L1731.93 684.584 L1732.49 684.584 L1733.05 684.584 L1733.61 684.584 L1734.17 684.584 L1734.73 684.584 L1735.29 684.584 L1735.85 684.584 L1736.41 684.584 L1736.97 684.584 L1737.52 684.584 L1738.08 684.584 L1738.64 684.584 L1739.2 684.584 L1739.76 684.584 L1740.32 684.584 L1740.88 684.584 L1741.44 684.584 L1742 684.584 L1742.56 684.584 L1743.12 684.584 L1743.68 684.584 L1744.24 684.584 L1744.79 684.584 L1745.35 684.584 L1745.91 684.584 L1746.47 684.584 L1747.03 684.584 L1747.59 684.584 L1748.15 684.584 L1748.71 684.584 L1749.27 684.584 L1749.83 684.584 L1750.39 684.584 L1750.95 684.584 L1751.51 684.584 L1752.06 684.584 L1752.62 684.584 L1753.18 684.584 L1753.74 684.584 L1754.3 684.584 L1754.86 684.584 L1755.42 684.584 L1755.98 684.584 L1756.54 684.584 L1757.1 684.584 L1757.66 684.584 L1758.22 684.584 L1758.78 684.584 L1759.34 684.584 L1759.89 684.584 L1760.45 684.584 L1761.01 684.584 L1761.57 684.584 L1762.13 684.584 L1762.69 684.584 L1763.25 684.584 L1763.81 684.584 L1764.37 684.584 L1764.93 684.584 L1765.49 684.584 L1766.05 684.584 L1766.61 684.584 L1767.16 684.584 L1767.72 684.584 L1768.28 684.584 L1768.84 684.584 L1769.4 684.584 L1769.96 684.584 L1770.52 684.584 L1771.08 684.584 L1771.64 684.584 L1772.2 684.584 L1772.76 684.584 L1773.32 684.584 L1773.88 684.584 L1774.43 684.584 L1774.99 684.584 L1775.55 684.584 L1776.11 684.584 L1776.67 684.584 L1777.23 684.584 L1777.79 684.584 L1778.35 684.584 L1778.91 684.584 L1779.47 684.584 L1780.03 684.584 L1780.59 684.584 L1781.15 684.584 L1781.71 684.584 L1782.26 684.584 L1782.82 684.584 L1783.38 684.584 L1783.94 684.584 L1784.5 684.584 L1785.06 684.584 L1785.62 684.584 L1786.18 684.584 L1786.74 684.584 L1787.3 684.584 L1787.86 684.584 L1788.42 684.584 L1788.98 684.584 L1789.53 684.584 L1790.09 684.584 L1790.65 684.584 L1791.21 684.584 L1791.77 684.584 L1792.33 684.584 L1792.89 684.584 L1793.45 684.584 L1794.01 684.584 L1794.57 684.584 L1795.13 684.584 L1795.69 684.584 L1796.25 684.584 L1796.8 684.584 L1797.36 684.584 L1797.92 684.584 L1798.48 684.584 L1799.04 684.584 L1799.6 684.584 L1800.16 684.584 L1800.72 684.584 L1801.28 684.584 L1801.84 684.584 L1802.4 684.584 L1802.96 684.584 L1803.52 684.584 L1804.08 684.584 L1804.63 684.584 L1805.19 684.584 L1805.75 684.584 L1806.31 684.584 L1806.87 684.584 L1807.43 684.584 L1807.99 684.584 L1808.55 684.584 L1809.11 684.584 L1809.67 684.584 L1810.23 684.584 L1810.79 684.584 L1811.35 684.584 L1811.9 684.584 L1812.46 684.584 L1813.02 684.584 L1813.58 684.584 L1814.14 684.584 L1814.7 684.584 L1815.26 684.584 L1815.82 684.584 L1816.38 684.584 L1816.94 684.584 L1817.5 684.584 L1818.06 684.584 L1818.62 684.584 L1819.18 684.584 L1819.73 684.584 L1820.29 684.584 L1820.85 684.584 L1821.41 684.584 L1821.97 684.584 L1822.53 684.584 L1823.09 684.584 L1823.65 684.584 L1824.21 684.584 L1824.77 684.584 L1825.33 684.584 L1825.89 684.584 L1826.45 684.584 L1827 684.584 L1827.56 684.584 L1828.12 684.584 L1828.68 684.584 L1829.24 684.584 L1829.8 684.584 L1830.36 684.584 L1830.92 684.584 L1831.48 684.584 L1832.04 684.584 L1832.6 684.584 L1833.16 684.584 L1833.72 684.584 L1834.27 684.584 L1834.83 684.584 L1835.39 684.584 L1835.95 684.584 L1836.51 684.584 L1837.07 684.584 L1837.63 684.584 L1838.19 684.584 L1838.19 681.781 L1837.63 681.781 L1837.07 681.781 L1836.51 681.781 L1835.95 681.781 L1835.39 681.781 L1834.83 681.781 L1834.27 681.781 L1833.72 681.781 L1833.16 681.781 L1832.6 681.781 L1832.04 681.781 L1831.48 681.781 L1830.92 681.781 L1830.36 681.781 L1829.8 681.781 L1829.24 681.781 L1828.68 681.781 L1828.12 681.781 L1827.56 681.781 L1827 681.781 L1826.45 681.781 L1825.89 681.781 L1825.33 681.781 L1824.77 681.781 L1824.21 681.781 L1823.65 681.781 L1823.09 681.781 L1822.53 681.781 L1821.97 681.781 L1821.41 681.781 L1820.85 681.781 L1820.29 681.781 L1819.73 681.781 L1819.18 681.781 L1818.62 681.781 L1818.06 681.781 L1817.5 681.781 L1816.94 681.781 L1816.38 681.781 L1815.82 681.781 L1815.26 681.781 L1814.7 681.781 L1814.14 681.781 L1813.58 681.781 L1813.02 681.781 L1812.46 681.781 L1811.9 681.781 L1811.35 681.781 L1810.79 681.781 L1810.23 681.781 L1809.67 681.781 L1809.11 681.781 L1808.55 681.781 L1807.99 681.781 L1807.43 681.781 L1806.87 681.781 L1806.31 681.781 L1805.75 681.781 L1805.19 681.781 L1804.63 681.781 L1804.08 681.781 L1803.52 681.781 L1802.96 681.781 L1802.4 681.781 L1801.84 681.781 L1801.28 681.781 L1800.72 681.781 L1800.16 681.781 L1799.6 681.781 L1799.04 681.781 L1798.48 681.781 L1797.92 681.781 L1797.36 681.781 L1796.8 681.781 L1796.25 681.781 L1795.69 681.781 L1795.13 681.781 L1794.57 681.781 L1794.01 681.781 L1793.45 681.781 L1792.89 681.781 L1792.33 681.781 L1791.77 681.781 L1791.21 681.781 L1790.65 681.781 L1790.09 681.781 L1789.53 681.781 L1788.98 681.781 L1788.42 681.781 L1787.86 681.781 L1787.3 681.781 L1786.74 681.781 L1786.18 681.781 L1785.62 681.781 L1785.06 681.781 L1784.5 681.781 L1783.94 681.781 L1783.38 681.781 L1782.82 681.781 L1782.26 681.781 L1781.71 681.781 L1781.15 681.781 L1780.59 681.781 L1780.03 681.781 L1779.47 681.781 L1778.91 681.781 L1778.35 681.781 L1777.79 681.781 L1777.23 681.781 L1776.67 681.781 L1776.11 681.781 L1775.55 681.781 L1774.99 681.781 L1774.43 681.781 L1773.88 681.781 L1773.32 681.781 L1772.76 681.781 L1772.2 681.781 L1771.64 681.781 L1771.08 681.781 L1770.52 681.781 L1769.96 681.781 L1769.4 681.781 L1768.84 681.781 L1768.28 681.781 L1767.72 681.781 L1767.16 681.781 L1766.61 681.781 L1766.05 681.781 L1765.49 681.781 L1764.93 681.781 L1764.37 681.781 L1763.81 681.781 L1763.25 681.781 L1762.69 681.781 L1762.13 681.781 L1761.57 681.781 L1761.01 681.781 L1760.45 681.781 L1759.89 681.781 L1759.34 681.781 L1758.78 681.781 L1758.22 681.781 L1757.66 681.781 L1757.1 681.781 L1756.54 681.781 L1755.98 681.781 L1755.42 681.781 L1754.86 681.781 L1754.3 681.781 L1753.74 681.781 L1753.18 681.781 L1752.62 681.781 L1752.06 681.781 L1751.51 681.781 L1750.95 681.781 L1750.39 681.781 L1749.83 681.781 L1749.27 681.781 L1748.71 681.781 L1748.15 681.781 L1747.59 681.781 L1747.03 681.781 L1746.47 681.781 L1745.91 681.781 L1745.35 681.781 L1744.79 681.781 L1744.24 681.781 L1743.68 681.781 L1743.12 681.781 L1742.56 681.781 L1742 681.781 L1741.44 681.781 L1740.88 681.781 L1740.32 681.781 L1739.76 681.781 L1739.2 681.781 L1738.64 681.781 L1738.08 681.781 L1737.52 681.781 L1736.97 681.781 L1736.41 681.781 L1735.85 681.781 L1735.29 681.781 L1734.73 681.781 L1734.17 681.781 L1733.61 681.781 L1733.05 681.781 L1732.49 681.781 L1731.93 681.781 L1731.37 681.781 L1730.81 681.781 L1730.25 681.781 L1729.69 681.781 L1729.14 681.781 L1728.58 681.781 L1728.02 681.781 L1727.46 681.781 L1726.9 681.781 L1726.34 681.781 L1725.78 681.781 L1725.22 681.781 L1724.66 681.781 L1724.1 681.781 L1723.54 681.781 L1722.98 681.781 L1722.42 681.781 L1721.87 681.781 L1721.31 681.781 L1720.75 681.781 L1720.19 681.781 L1719.63 681.781 L1719.07 681.781 L1718.51 681.781 L1717.95 681.781 L1717.39 681.781 L1716.83 681.781 L1716.27 681.781 L1715.71 681.781 L1715.15 681.781 L1714.6 681.781 L1714.04 681.781 L1713.48 681.781 L1712.92 681.781 L1712.36 681.781 L1711.8 681.781 L1711.24 681.781 L1710.68 681.781 L1710.12 681.781 L1709.56 681.781 L1709 681.781 L1708.44 681.781 L1707.88 681.781 L1707.32 681.781 L1706.77 681.781 L1706.21 681.781 L1705.65 681.781 L1705.09 681.781 L1704.53 681.781 L1703.97 681.781 L1703.41 681.781 L1702.85 681.781 L1702.29 681.781 L1701.73 681.781 L1701.17 681.781 L1700.61 681.781 L1700.05 681.781 L1699.5 681.781 L1698.94 681.781 L1698.38 681.781 L1697.82 681.781 L1697.26 681.781 L1696.7 681.781 L1696.14 681.781 L1695.58 681.781 L1695.02 681.781 L1694.46 681.781 L1693.9 681.781 L1693.34 681.781 L1692.78 681.781 L1692.23 681.781 L1691.67 681.781 L1691.11 681.781 L1690.55 681.781 L1689.99 681.781 L1689.43 681.781 L1688.87 681.781 L1688.31 681.781 L1687.75 681.781 L1687.19 681.781 L1686.63 681.781 L1686.07 681.781 L1685.51 681.781 L1684.95 681.781 L1684.4 681.781 L1683.84 681.781 L1683.28 681.781 L1682.72 681.781 L1682.16 681.781 L1681.6 681.781 L1681.04 681.781 L1680.48 681.781 L1679.92 681.781 L1679.36 681.781 L1678.8 681.781 L1678.24 681.781 L1677.68 681.781 L1677.13 681.781 L1676.57 681.781 L1676.01 681.781 L1675.45 681.781 L1674.89 681.781 L1674.33 681.781 L1673.77 681.781 L1673.21 681.781 L1672.65 681.781 L1672.09 681.781 L1671.53 681.781 L1670.97 681.781 L1670.41 681.781 L1669.85 681.781 L1669.3 681.781 L1668.74 681.781 L1668.18 681.781 L1667.62 681.781 L1667.06 681.781 L1666.5 681.781 L1665.94 681.781 L1665.38 681.781 L1664.82 681.781 L1664.26 681.781 L1663.7 681.781 L1663.14 681.781 L1662.58 681.781 L1662.03 681.781 L1661.47 681.781 L1660.91 681.781 L1660.35 681.781 L1659.79 681.781 L1659.23 681.781 L1658.67 681.781 L1658.11 681.781 L1657.55 681.781 L1656.99 681.781 L1656.43 681.781 L1655.87 681.781 L1655.31 681.781 L1654.76 681.781 L1654.2 681.781 L1653.64 681.781 L1653.08 681.781 L1652.52 681.781 L1651.96 681.781 L1651.4 681.781 L1650.84 681.781 L1650.28 681.781 L1649.72 681.781 L1649.16 681.781 L1648.6 681.781 L1648.04 681.781 L1647.48 681.781 L1646.93 681.781 L1646.37 681.781 L1645.81 681.781 L1645.25 681.781 L1644.69 681.781 L1644.13 681.781 L1643.57 681.781 L1643.01 681.781 L1642.45 681.781 L1641.89 681.781 L1641.33 681.781 L1640.77 681.781 L1640.21 681.781 L1639.66 681.781 L1639.1 681.781 L1638.54 681.781 L1637.98 681.781 L1637.42 681.781 L1636.86 681.781 L1636.3 681.781 L1635.74 681.781 L1635.18 681.781 L1634.62 681.781 L1634.06 681.781 L1633.5 681.781 L1632.94 681.781 L1632.39 681.781 L1631.83 681.781 L1631.27 681.781 L1630.71 681.781 L1630.15 681.781 L1629.59 681.781 L1629.03 681.781 L1628.47 681.781 L1627.91 681.781 L1627.35 681.781 L1626.79 681.781 L1626.23 681.781 L1625.67 681.781 L1625.11 681.781 L1624.56 681.781 L1624 681.781 L1623.44 681.781 L1622.88 681.781 L1622.32 681.781 L1621.76 681.781 L1621.2 681.781 L1620.64 681.781 L1620.08 681.781 L1619.52 681.781 L1618.96 681.781 L1618.4 681.781 L1617.84 681.781 L1617.29 681.781 L1616.73 681.781 L1616.17 681.781 L1615.61 681.781 L1615.05 681.781 L1614.49 681.781 L1613.93 681.781 L1613.37 681.781 L1612.81 681.781 L1612.25 681.781 L1611.69 681.781 L1611.13 681.781 L1610.57 681.781 L1610.02 681.781 L1609.46 681.781 L1608.9 681.781 L1608.34 681.781 L1607.78 681.781 L1607.22 681.781 L1606.66 681.781 L1606.1 681.781 L1605.54 681.781 L1604.98 681.781 L1604.42 681.781 L1603.86 681.781 L1603.3 681.781 L1602.74 681.781 L1602.19 681.781 L1601.63 681.781 L1601.07 681.781 L1600.51 681.781 L1599.95 681.781 L1599.39 681.781 L1598.83 681.781 L1598.27 681.781 L1597.71 681.781 L1597.15 681.781 L1596.59 681.781 L1596.03 681.781 L1595.47 681.781 L1594.92 681.781 L1594.36 681.781 L1593.8 681.781 L1593.24 681.781 L1592.68 681.781 L1592.12 681.781 L1591.56 681.781 L1591 681.781 L1590.44 681.781 L1589.88 681.781 L1589.32 681.781 L1588.76 681.781 L1588.2 681.781 L1587.65 681.781 L1587.09 681.781 L1586.53 681.781 L1585.97 681.781 L1585.41 681.781 L1584.85 681.781 L1584.29 681.781 L1583.73 681.781 L1583.17 681.781 L1582.61 681.781 L1582.05 681.781 L1581.49 681.781 L1580.93 681.781 L1580.37 681.781 L1579.82 681.781 L1579.26 681.781 L1578.7 681.781 L1578.14 681.781 L1577.58 681.781 L1577.02 681.781 L1576.46 681.781 L1575.9 681.781 L1575.34 681.781 L1574.78 681.781 L1574.22 681.781 L1573.66 681.781 L1573.1 681.781 L1572.55 681.781 L1571.99 681.781 L1571.43 681.781 L1570.87 681.781 L1570.31 681.781 L1569.75 681.781 L1569.19 681.781 L1568.63 681.781 L1568.07 681.781 L1567.51 681.781 L1566.95 681.781 L1566.39 681.781 L1565.83 681.781 L1565.28 681.781 L1564.72 681.781 L1564.16 681.781 L1563.6 681.781 L1563.04 681.781 L1562.48 681.781 L1561.92 681.781 L1561.36 681.781 L1560.8 681.781 L1560.24 681.781 L1559.68 681.781 L1559.12 681.781 L1558.56 681.781 L1558 681.781 L1557.45 681.781 L1556.89 681.781 L1556.33 681.781 L1555.77 681.781 L1555.21 681.781 L1554.65 681.781 L1554.09 681.781 L1553.53 681.781 L1552.97 681.781 L1552.41 681.781 L1551.85 681.781 L1551.29 681.781 L1550.73 681.781 L1550.18 681.781 L1549.62 681.781 L1549.06 681.781 L1548.5 681.781 L1547.94 681.781 L1547.38 681.781 L1546.82 681.781 L1546.26 681.781 L1545.7 681.781 L1545.14 681.781 L1544.58 681.781 L1544.02 681.781 L1543.46 681.781 L1542.9 681.781 L1542.35 681.781 L1541.79 681.781 L1541.23 681.781 L1540.67 681.781 L1540.11 681.781 L1539.55 681.781 L1538.99 681.781 L1538.43 681.781 L1537.87 681.781 L1537.31 681.781 L1536.75 681.781 L1536.19 681.781 L1535.63 681.781 L1535.08 681.781 L1534.52 681.781 L1533.96 681.781 L1533.4 681.781 L1532.84 681.781 L1532.28 681.781 L1531.72 681.781 L1531.16 681.781 L1530.6 681.781 L1530.04 681.781 L1529.48 681.781 L1528.92 681.781 L1528.36 681.781 L1527.81 681.781 L1527.25 681.781 L1526.69 681.781 L1526.13 681.781 L1525.57 681.781 L1525.01 681.781 L1524.45 681.781 L1523.89 681.781 L1523.33 681.781 L1522.77 681.781 L1522.21 681.781 L1521.65 681.781 L1521.09 681.781 L1520.53 681.781 L1519.98 681.781 L1519.42 681.781 L1518.86 681.781 L1518.3 681.781 L1517.74 681.781 L1517.18 681.781 L1516.62 681.781 L1516.06 681.781 L1515.5 681.781 L1514.94 681.781 L1514.38 681.781 L1513.82 681.781 L1513.26 681.781 L1512.71 681.781 L1512.15 681.781 L1511.59 681.781 L1511.03 681.781 L1510.47 681.781 L1509.91 681.781 L1509.35 681.781 L1508.79 681.781 L1508.23 681.781 L1507.67 681.781 L1507.11 681.781 L1506.55 681.781 L1505.99 681.781 L1505.44 681.781 L1504.88 681.781 L1504.32 681.781 L1503.76 681.781 L1503.2 681.781 L1502.64 681.781 L1502.08 681.781 L1501.52 681.781 L1500.96 681.781 L1500.4 681.781 L1499.84 681.781 L1499.28 681.781 L1498.72 681.781 L1498.16 681.781 L1497.61 681.781 L1497.05 681.781 L1496.49 681.781 L1495.93 681.781 L1495.37 681.781 L1494.81 681.781 L1494.25 681.781 L1493.69 681.781 L1493.13 681.781 L1492.57 681.781 L1492.01 681.781 L1491.45 681.781 L1490.89 681.781 L1490.34 681.781 L1489.78 681.781 L1489.22 681.781 L1488.66 681.781 L1488.1 681.781 L1487.54 681.781 L1486.98 681.781 L1486.42 681.781 L1485.86 681.781 L1485.3 681.781 L1484.74 681.781 L1484.18 681.781 L1483.62 681.781 L1483.07 681.781 L1482.51 681.781 L1481.95 681.781 L1481.39 681.781 L1480.83 681.781 L1480.27 681.781 L1479.71 681.781 L1479.15 681.781 L1478.59 681.781 L1478.03 681.781 L1477.47 681.781 L1476.91 681.781 L1476.35 681.781 L1475.79 681.781 L1475.24 681.781 L1474.68 681.781 L1474.12 681.781 L1473.56 681.781 L1473 681.781 L1472.44 681.781 L1471.88 681.781 L1471.32 681.781 L1470.76 681.781 L1470.2 681.781 L1469.64 681.781 L1469.08 681.781 L1468.52 681.781 L1467.97 681.781 L1467.41 681.781 L1466.85 681.781 L1466.29 681.781 L1465.73 681.781 L1465.17 681.781 L1464.61 681.781 L1464.05 681.781 L1463.49 681.781 L1462.93 681.781 L1462.37 681.781 L1461.81 681.781 L1461.25 681.781 L1460.7 681.781 L1460.14 681.781 L1459.58 681.781 L1459.02 681.781 L1458.46 681.781 L1457.9 681.781 L1457.34 681.781 L1456.78 681.781 L1456.22 681.781 L1455.66 681.781 L1455.1 681.781 L1454.54 681.781 L1453.98 681.781 L1453.42 681.781 L1452.87 681.781 L1452.31 681.781 L1451.75 681.781 L1451.19 681.781 L1450.63 681.781 L1450.07 681.781 L1449.51 681.781 L1448.95 681.781 L1448.39 681.781 L1447.83 681.781 L1447.27 681.781 L1446.71 681.781 L1446.15 681.781 L1445.6 681.781 L1445.04 681.781 L1444.48 681.781 L1443.92 681.781 L1443.36 681.781 L1442.8 681.781 L1442.24 681.781 L1441.68 681.781 L1441.12 681.781 L1440.56 681.781 L1440 681.781 L1439.44 681.781 L1438.88 681.781 L1438.33 681.781 L1437.77 681.781 L1437.21 681.781 L1436.65 681.781 L1436.09 681.781 L1435.53 681.781 L1434.97 681.781 L1434.41 681.781 L1433.85 681.781 L1433.29 681.781 L1432.73 681.781 L1432.17 681.781 L1431.61 681.781 L1431.05 681.781 L1430.5 681.781 L1429.94 681.781 L1429.38 681.781 L1428.82 681.781 L1428.26 681.781 L1427.7 681.781 L1427.14 681.781 L1426.58 681.781 L1426.02 681.781 L1425.46 681.781 L1424.9 681.781 L1424.34 681.781 L1423.78 681.781 L1423.23 681.781 L1422.67 681.781 L1422.11 681.781 L1421.55 681.781 L1420.99 681.781 L1420.43 681.781 L1419.87 681.781 L1419.31 681.781 L1418.75 681.781 L1418.19 681.781 L1417.63 681.781 L1417.07 681.781 L1416.51 681.781 L1415.95 681.781 L1415.4 681.781 L1414.84 681.781 L1414.28 681.781 L1413.72 681.781 L1413.16 681.781 L1412.6 681.781 L1412.04 681.781 L1411.48 681.781 L1410.92 681.781 L1410.36 681.781 L1409.8 681.781 L1409.24 681.781 L1408.68 681.781 L1408.13 681.781 L1407.57 681.781 L1407.01 681.781 L1406.45 681.781 L1405.89 681.781 L1405.33 681.781 L1404.77 681.781 L1404.21 681.781 L1403.65 681.781 L1403.09 681.781 L1402.53 681.781 L1401.97 681.781 L1401.41 681.781 L1400.86 681.781 L1400.3 681.781 L1399.74 681.781 L1399.18 681.781 L1398.62 681.781 L1398.06 681.781 L1397.5 681.781 L1396.94 681.781 L1396.38 681.781 L1395.82 681.781 L1395.26 681.781 L1394.7 681.781 L1394.14 681.781 L1393.58 681.781 L1393.03 681.781 L1392.47 681.781 L1391.91 681.781 L1391.35 681.781 L1390.79 681.781 L1390.23 681.781 L1389.67 681.781 L1389.11 681.781 L1388.55 681.781 L1387.99 681.781 L1387.43 681.781 L1386.87 681.781 L1386.31 681.781 L1385.76 681.781 L1385.2 681.781 L1384.64 681.781 L1384.08 681.781 L1383.52 681.781 L1382.96 681.781 L1382.4 681.781 L1381.84 681.781 L1381.28 681.781 L1380.72 681.781 L1380.16 681.781 L1379.6 681.781 L1379.04 681.781 L1378.49 681.781 L1377.93 681.781 L1377.37 681.781 L1376.81 681.781 L1376.25 681.781 L1375.69 681.781 L1375.13 681.781 L1374.57 681.781 L1374.01 681.781 L1373.45 681.781 L1372.89 681.781 L1372.33 681.781 L1371.77 681.781 L1371.21 681.781 L1370.66 681.781 L1370.1 681.781 L1369.54 681.781 L1368.98 681.781 L1368.42 681.781 L1367.86 681.781 L1367.3 681.781 L1366.74 681.781 L1366.18 681.781 L1365.62 681.781 L1365.06 681.781 L1364.5 681.781 L1363.94 681.781 L1363.39 681.781 L1362.83 681.781 L1362.27 681.781 L1361.71 681.781 L1361.15 681.781 L1360.59 681.781 L1360.03 681.781 L1359.47 681.781 L1358.91 681.781 L1358.35 681.781 L1357.79 681.781 L1357.23 681.781 L1356.67 681.781 L1356.12 681.781 L1355.56 681.781 L1355 681.781 L1354.44 681.781 L1353.88 681.781 L1353.32 681.781 L1352.76 681.781 L1352.2 681.781 L1351.64 681.781 L1351.08 681.781 L1350.52 681.781 L1349.96 681.781 L1349.4 681.781 L1348.84 681.781 L1348.29 681.781 L1347.73 681.781 L1347.17 681.781 L1346.61 681.781 L1346.05 681.781 L1345.49 681.781 L1344.93 681.781 L1344.37 681.781 L1343.81 681.781 L1343.25 681.781 L1342.69 681.781 L1342.13 681.781 L1341.57 681.781 L1341.02 681.781 L1340.46 681.781 L1339.9 681.781 L1339.34 681.781 L1338.78 681.781 L1338.22 681.781 L1337.66 681.781 L1337.1 681.781 L1336.54 681.781 L1335.98 681.781 L1335.42 681.781 L1334.86 681.781 L1334.3 681.781 L1333.75 681.781 L1333.19 681.781 L1332.63 681.781 L1332.07 681.781 L1331.51 681.781 L1330.95 681.781 L1330.39 681.781 L1329.83 681.781 L1329.27 681.781 L1328.71 681.781 L1328.15 681.781 L1327.59 681.781 L1327.03 681.781 L1326.47 681.781 L1325.92 681.781 L1325.36 681.781 L1324.8 681.781 L1324.24 681.781 L1323.68 681.781 L1323.12 681.781 L1322.56 681.781 L1322 681.781 L1321.44 681.781 L1320.88 681.781 L1320.32 681.781 L1319.76 681.781 L1319.2 681.781 L1318.65 681.781 L1318.09 681.781 L1317.53 681.781 L1316.97 681.781 L1316.41 681.781 L1315.85 681.781 L1315.29 681.781 L1314.73 681.781 L1314.17 681.781 L1313.61 681.781 L1313.05 681.781 L1312.49 681.781 L1311.93 681.781 L1311.38 681.781 L1310.82 681.781 L1310.26 681.781 L1309.7 681.781 L1309.14 681.781 L1308.58 681.781 L1308.02 681.781 L1307.46 681.781 L1306.9 681.781 L1306.34 681.781 L1305.78 681.781 L1305.22 681.781 L1304.66 681.781 L1304.1 681.781 L1303.55 681.781 L1302.99 681.781 L1302.43 681.781 L1301.87 681.781 L1301.31 681.781 L1300.75 681.781 L1300.19 681.781 L1299.63 681.781 L1299.07 681.781 L1298.51 681.781 L1297.95 681.781 L1297.39 681.781 L1296.83 681.781 L1296.28 681.781 L1295.72 681.781 L1295.16 681.781 L1294.6 681.781 L1294.04 681.781 L1293.48 681.781 L1292.92 681.781 L1292.36 681.781 L1291.8 681.781 L1291.24 681.781 L1290.68 681.781 L1290.12 681.781 L1289.56 681.781 L1289 681.781 L1288.45 681.781 L1287.89 681.781 L1287.33 681.781 L1286.77 681.781 L1286.21 681.781 L1285.65 681.781 L1285.09 681.781 L1284.53 681.781 L1283.97 681.781 L1283.41 681.781 L1282.85 681.781 L1282.29 681.781 L1281.73 681.781 L1281.18 681.781 L1280.62 681.781 L1280.06 681.781 L1279.5 681.781 L1278.94 681.781 L1278.38 681.781 L1277.82 681.781 L1277.26 681.781 L1276.7 681.781 L1276.14 681.781 L1275.58 681.781 L1275.02 681.781 L1274.46 681.781 L1273.91 681.781 L1273.35 681.781 L1272.79 681.781 L1272.23 681.781 L1271.67 681.781 L1271.11 681.781 L1270.55 681.781 L1269.99 681.781 L1269.43 681.781 L1268.87 681.781 L1268.31 681.781 L1267.75 681.781 L1267.19 681.781 L1266.63 681.781 L1266.08 681.781 L1265.52 681.781 L1264.96 681.781 L1264.4 681.781 L1263.84 681.781 L1263.28 681.781 L1262.72 681.781 L1262.16 681.781 L1261.6 681.781 L1261.04 681.781 L1260.48 681.781 L1259.92 681.781 L1259.36 681.781 L1258.81 681.781 L1258.25 681.781 L1257.69 681.781 L1257.13 681.781 L1256.57 681.781 L1256.01 681.781 L1255.45 681.781 L1254.89 681.781 L1254.33 681.781 L1253.77 681.781 L1253.21 681.781 L1252.65 681.781 L1252.09 681.781 L1251.54 681.781 L1250.98 681.781 L1250.42 681.781 L1249.86 681.781 L1249.3 681.781 L1248.74 681.781 L1248.18 681.781 L1247.62 681.781 L1247.06 681.781 L1246.5 681.781 L1245.94 681.781 L1245.38 681.781 L1244.82 681.781 L1244.26 681.781 L1243.71 681.781 L1243.15 681.781 L1242.59 681.781 L1242.03 681.781 L1241.47 681.781 L1240.91 681.781 L1240.35 681.781 L1239.79 681.781 L1239.23 681.781 L1238.67 681.781 L1238.11 681.781 L1237.55 681.781 L1236.99 681.781 L1236.44 681.781 L1235.88 681.781 L1235.32 681.781 L1234.76 681.781 L1234.2 681.781 L1233.64 681.781 L1233.08 681.781 L1232.52 681.781 L1231.96 681.781 L1231.4 681.781 L1230.84 681.781 L1230.28 681.781 L1229.72 681.781 L1229.17 681.781 L1228.61 681.781 L1228.05 681.781 L1227.49 681.781 L1226.93 681.781 L1226.37 681.781 L1225.81 681.781 L1225.25 681.781 L1224.69 681.781 L1224.13 681.781 L1223.57 681.781 L1223.01 681.781 L1222.45 681.781 L1221.89 681.781 L1221.34 681.781 L1220.78 681.781 L1220.22 681.781 L1219.66 681.781 L1219.1 681.781 L1218.54 681.781 L1217.98 681.781 L1217.42 681.781 L1216.86 681.781 L1216.3 681.781 L1215.74 681.781 L1215.18 681.781 L1214.62 681.781 L1214.07 681.781 L1213.51 681.781 L1212.95 681.781 L1212.39 681.781 L1211.83 681.781 L1211.27 681.781 L1210.71 681.781 L1210.15 681.781 L1209.59 681.781 L1209.03 681.781 L1208.47 681.781 L1207.91 681.781 L1207.35 681.781 L1206.8 681.781 L1206.24 681.781 L1205.68 681.781 L1205.12 681.781 L1204.56 681.781 L1204 681.781 L1203.44 681.781 L1202.88 681.781 L1202.32 681.781 L1201.76 681.781 L1201.2 681.781 L1200.64 681.781 L1200.08 681.781 L1199.52 681.781 L1198.97 681.781 L1198.41 681.781 L1197.85 681.781 L1197.29 681.781 L1196.73 681.781 L1196.17 681.781 L1195.61 681.781 L1195.05 681.781 L1194.49 681.781 L1193.93 681.781 L1193.37 681.781 L1192.81 681.781 L1192.25 681.781 L1191.7 681.781 L1191.14 681.781 L1190.58 681.781 L1190.02 681.781 L1189.46 681.781 L1188.9 681.781 L1188.34 681.781 L1187.78 681.781 L1187.22 681.781 L1186.66 681.781 L1186.1 681.781 L1185.54 681.781 L1184.98 681.781 L1184.43 681.781 L1183.87 681.781 L1183.31 681.781 L1182.75 681.781 L1182.19 681.781 L1181.63 681.781 L1181.07 681.781 L1180.51 681.781 L1179.95 681.781 L1179.39 681.781 L1178.83 681.781 L1178.27 681.781 L1177.71 681.781 L1177.15 681.781 L1176.6 681.781 L1176.04 681.781 L1175.48 681.781 L1174.92 681.781 L1174.36 681.781 L1173.8 681.781 L1173.24 681.781 L1172.68 681.781 L1172.12 681.781 L1171.56 681.781 L1171 681.781 L1170.44 681.781 L1169.88 681.781 L1169.33 681.781 L1168.77 681.781 L1168.21 681.781 L1167.65 681.781 L1167.09 681.781 L1166.53 681.781 L1165.97 681.781 L1165.41 681.781 L1164.85 681.781 L1164.29 681.781 L1163.73 681.781 L1163.17 681.781 L1162.61 681.781 L1162.05 681.781 L1161.5 681.781 L1160.94 681.781 L1160.38 681.781 L1159.82 681.781 L1159.26 681.781 L1158.7 681.781 L1158.14 681.781 L1157.58 681.781 L1157.02 681.781 L1156.46 681.781 L1155.9 681.781 L1155.34 681.781 L1154.78 681.781 L1154.23 681.781 L1153.67 681.781 L1153.11 681.781 L1152.55 681.781 L1151.99 681.781 L1151.43 681.781 L1150.87 681.781 L1150.31 681.781 L1149.75 681.781 L1149.19 681.781 L1148.63 681.781 L1148.07 681.781 L1147.51 681.781 L1146.96 681.781 L1146.4 681.781 L1145.84 681.781 L1145.28 681.781 L1144.72 681.781 L1144.16 681.781 L1143.6 681.781 L1143.04 681.781 L1142.48 681.781 L1141.92 681.781 L1141.36 681.781 L1140.8 681.781 L1140.24 681.781 L1139.68 681.781 L1139.13 681.781 L1138.57 681.781 L1138.01 681.781 L1137.45 681.781 L1136.89 681.781 L1136.33 681.781 L1135.77 681.781 L1135.21 681.781 L1134.65 681.781 L1134.09 681.781 L1133.53 681.781 L1132.97 681.781 L1132.41 681.781 L1131.86 681.781 L1131.3 681.781 L1130.74 681.781 L1130.18 681.781 L1129.62 681.781 L1129.06 681.781 L1128.5 681.781 L1127.94 681.781 L1127.38 681.781 L1126.82 681.781 L1126.26 681.781 L1125.7 681.781 L1125.14 681.781 L1124.59 681.781 L1124.03 681.781 L1123.47 681.781 L1122.91 681.781 L1122.35 681.781 L1121.79 681.781 L1121.23 681.781 L1120.67 681.781 L1120.11 681.781 L1119.55 681.781 L1118.99 681.781 L1118.43 681.781 L1117.87 681.781 L1117.31 681.781 L1116.76 681.781 L1116.2 681.781 L1115.64 681.781 L1115.08 681.781 L1114.52 681.781 L1113.96 681.781 L1113.4 681.781 L1112.84 681.781 L1112.28 681.781 L1111.72 681.781 L1111.16 681.781 L1110.6 681.781 L1110.04 681.781 L1109.49 681.781 L1108.93 681.781 L1108.37 681.781 L1107.81 681.781 L1107.25 681.781 L1106.69 681.781 L1106.13 681.781 L1105.57 681.781 L1105.01 681.781 L1104.45 681.781 L1103.89 681.781 L1103.33 681.781 L1102.77 681.781 L1102.22 681.781 L1101.66 681.781 L1101.1 681.781 L1100.54 681.781 L1099.98 681.781 L1099.42 681.781 L1098.86 681.781 L1098.3 681.781 L1097.74 681.781 L1097.18 681.781 L1096.62 681.781 L1096.06 681.781 L1095.5 681.781 L1094.94 681.781 L1094.39 681.781 L1093.83 681.781 L1093.27 681.781 L1092.71 681.781 L1092.15 681.781 L1091.59 681.781 L1091.03 681.781 L1090.47 681.781 L1089.91 681.781 L1089.35 681.781 L1088.79 681.781 L1088.23 681.781 L1087.67 681.781 L1087.12 681.781 L1086.56 681.781 L1086 681.781 L1085.44 681.781 L1084.88 681.781 L1084.32 681.781 L1083.76 681.781 L1083.2 681.781 L1082.64 681.781 L1082.08 681.781 L1081.52 681.781 L1080.96 681.781 L1080.4 681.781 L1079.85 681.781 L1079.29 681.781 L1078.73 681.781 L1078.17 681.781 L1077.61 681.781 L1077.05 681.781 L1076.49 681.781 L1075.93 681.781 L1075.37 681.781 L1074.81 681.781 L1074.25 681.781 L1073.69 681.781 L1073.13 681.781 L1072.57 681.781 L1072.02 681.781 L1071.46 681.781 L1070.9 681.781 L1070.34 681.781 L1069.78 681.781 L1069.22 681.781 L1068.66 681.781 L1068.1 681.781 L1067.54 681.781 L1066.98 681.781 L1066.42 681.781 L1065.86 681.781 L1065.3 681.781 L1064.75 681.781 L1064.19 681.781 L1063.63 681.781 L1063.07 681.781 L1062.51 681.781 L1061.95 681.781 L1061.39 681.781 L1060.83 681.781 L1060.27 681.781 L1059.71 681.781 L1059.15 681.781 L1058.59 681.781 L1058.03 681.781 L1057.48 681.781 L1056.92 681.781 L1056.36 681.781 L1055.8 681.781 L1055.24 681.781 L1054.68 681.781 L1054.12 681.781 L1053.56 681.781 L1053 681.781 L1052.44 681.781 L1051.88 681.781 L1051.32 681.781 L1050.76 681.781 L1050.2 681.781 L1049.65 681.781 L1049.09 681.781 L1048.53 681.781 L1047.97 681.781 L1047.41 681.781 L1046.85 681.781 L1046.29 681.781 L1045.73 681.781 L1045.17 681.781 L1044.61 681.781 L1044.05 681.781 L1043.49 681.781 L1042.93 681.781 L1042.38 681.781 L1041.82 681.781 L1041.26 681.781 L1040.7 681.781 L1040.14 681.781 L1039.58 681.781 L1039.02 681.781 L1038.46 681.781 L1037.9 681.781 L1037.34 681.781 L1036.78 681.781 L1036.22 681.781 L1035.66 681.781 L1035.1 681.781 L1034.55 681.781 L1033.99 681.781 L1033.43 681.781 L1032.87 681.781 L1032.31 681.781 L1031.75 681.781 L1031.19 681.781 L1030.63 681.781 L1030.07 681.781 L1029.51 681.781 L1028.95 681.781 L1028.39 681.781 L1027.83 681.781 L1027.28 681.781 L1026.72 681.781 L1026.16 681.781 L1025.6 681.781 L1025.04 681.781 L1024.48 681.781 L1023.92 681.781 L1023.36 681.781 L1022.8 681.781 L1022.24 681.781 L1021.68 681.781 L1021.12 681.781 L1020.56 681.781 L1020.01 681.781 L1019.45 681.781 L1018.89 681.781 L1018.33 681.781 L1017.77 681.781 L1017.21 681.781 L1016.65 681.781 L1016.09 681.781 L1015.53 681.781 L1014.97 681.781 L1014.41 681.781 L1013.85 681.781 L1013.29 681.781 L1012.73 681.781 L1012.18 681.781 L1011.62 681.781 L1011.06 681.781 L1010.5 681.781 L1009.94 681.781 L1009.38 681.781 L1008.82 681.781 L1008.26 681.781 L1007.7 681.781 L1007.14 681.781 L1006.58 681.781 L1006.02 681.781 L1005.46 681.781 L1004.91 681.781 L1004.35 681.781 L1003.79 681.781 L1003.23 681.781 L1002.67 681.781 L1002.11 681.781 L1001.55 681.781 L1000.99 681.781 L1000.43 681.781 L999.872 681.781 L999.313 681.781 L998.754 681.781 L998.194 681.781 L997.635 681.781 L997.076 681.781 L996.517 681.781 L995.957 681.781 L995.398 681.781 L994.839 681.781 L994.28 681.781 L993.72 681.781 L993.161 681.781 L992.602 681.781 L992.043 681.781 L991.483 681.781 L990.924 681.781 L990.365 681.781 L989.806 681.781 L989.246 681.781 L988.687 681.781 L988.128 681.781 L987.569 681.781 L987.009 681.781 L986.45 681.781 L985.891 681.781 L985.332 681.781 L984.772 681.781 L984.213 681.781 L983.654 681.781 L983.095 681.781 L982.535 681.781 L981.976 681.781 L981.417 681.781 L980.858 681.781 L980.298 681.781 L979.739 681.781 L979.18 681.781 L978.621 681.781 L978.061 681.781 L977.502 681.781 L976.943 681.781 L976.384 681.781 L975.824 681.781 L975.265 681.781 L974.706 681.781 L974.147 681.781 L973.587 681.781 L973.028 681.781 L972.469 681.781 L971.91 681.781 L971.35 681.781 L970.791 681.781 L970.232 681.781 L969.673 681.781 L969.113 681.781 L968.554 681.781 L967.995 681.781 L967.436 681.781 L966.876 681.781 L966.317 681.781 L965.758 681.781 L965.199 681.781 L964.639 681.781 L964.08 681.781 L963.521 681.781 L962.962 681.781 L962.402 681.781 L961.843 681.781 L961.284 681.781 L960.725 681.781 L960.165 681.781 L959.606 681.781 L959.047 681.781 L958.488 681.781 L957.928 681.781 L957.369 681.781 L956.81 681.781 L956.251 681.781 L955.691 681.781 L955.132 681.781 L954.573 681.781 L954.014 681.781 L953.454 681.781 L952.895 681.781 L952.336 681.781 L951.777 681.781 L951.217 681.781 L950.658 681.781 L950.099 681.781 L949.54 681.781 L948.98 681.781 L948.421 681.781 L947.862 681.781 L947.303 681.781 L946.743 681.781 L946.184 681.781 L945.625 681.781 L945.066 681.781 L944.506 681.781 L943.947 681.781 L943.388 681.781 L942.829 681.781 L942.269 681.781 L941.71 681.781 L941.151 681.781 L940.592 681.781 L940.032 681.781 L939.473 681.781 L938.914 681.781 L938.355 681.781 L937.795 681.781 L937.236 681.781 L936.677 681.781 L936.118 681.781 L935.558 681.781 L934.999 681.781 L934.44 681.781 L933.881 681.781 L933.321 681.781 L932.762 681.781 L932.203 681.781 L931.644 681.781 L931.084 681.781 L930.525 681.781 L929.966 681.781 L929.406 681.781 L928.847 681.781 L928.288 681.781 L927.729 681.781 L927.169 681.781 L926.61 681.781 L926.051 681.781 L925.492 681.781 L924.932 681.781 L924.373 681.781 L923.814 681.781 L923.255 681.781 L922.695 681.781 L922.136 681.781 L921.577 681.781 L921.018 681.781 L920.458 681.781 L919.899 681.781 L919.34 681.781 L918.781 681.781 L918.221 681.781 L917.662 681.781 L917.103 681.781 L916.544 681.781 L915.984 681.781 L915.425 681.781 L914.866 681.781 L914.307 681.781 L913.747 681.781 L913.188 681.781 L912.629 681.781 L912.07 681.781 L911.51 681.781 L910.951 681.781 L910.392 681.781 L909.833 681.781 L909.273 681.781 L908.714 681.781 L908.155 681.781 L907.596 681.781 L907.036 681.781 L906.477 681.781 L905.918 681.781 L905.359 681.781 L904.799 681.781 L904.24 681.781 L903.681 681.781 L903.122 681.781 L902.562 681.781 L902.003 681.781 L901.444 681.781 L900.885 681.781 L900.325 681.781 L899.766 681.781 L899.207 681.781 L898.648 681.781 L898.088 681.781 L897.529 681.781 L896.97 681.781 L896.411 681.781 L895.851 681.781 L895.292 681.781 L894.733 681.781 L894.174 681.781 L893.614 681.781 L893.055 681.781 L892.496 681.781 L891.937 681.781 L891.377 681.781 L890.818 681.781 L890.259 681.781 L889.7 681.781 L889.14 681.781 L888.581 681.781 L888.022 681.781 L887.463 681.781 L886.903 681.781 L886.344 681.781 L885.785 681.781 L885.226 681.781 L884.666 681.781 L884.107 681.781 L883.548 681.781 L882.989 681.781 L882.429 681.781 L881.87 681.781 L881.311 681.781 L880.752 681.781 L880.192 681.781 L879.633 681.781 L879.074 681.781 L878.515 681.781 L877.955 681.781 L877.396 681.781 L876.837 681.781 L876.278 681.781 L875.718 681.781 L875.159 681.781 L874.6 681.781 L874.041 681.781 L873.481 681.781 L872.922 681.781 L872.363 681.781 L871.804 681.781 L871.244 681.781 L870.685 681.781 L870.126 681.781 L869.567 681.781 L869.007 681.781 L868.448 681.781 L867.889 681.781 L867.33 681.781 L866.77 681.781 L866.211 681.781 L865.652 681.781 L865.093 681.781 L864.533 681.781 L863.974 681.781 L863.415 681.781 L862.856 681.781 L862.296 681.781 L861.737 681.781 L861.178 681.781 L860.619 681.781 L860.059 681.781 L859.5 681.781 L858.941 681.781 L858.382 681.781 L857.822 681.781 L857.263 681.781 L856.704 681.781 L856.145 681.781 L855.585 681.781 L855.026 681.781 L854.467 681.781 L853.908 681.781 L853.348 681.781 L852.789 681.781 L852.23 681.781 L851.671 681.781 L851.111 681.781 L850.552 681.781 L849.993 681.781 L849.434 681.781 L848.874 681.781 L848.315 681.781 L847.756 681.781 L847.197 681.781 L846.637 681.781 L846.078 681.781 L845.519 681.781 L844.96 681.781 L844.4 681.781 L843.841 681.781 L843.282 681.781 L842.723 681.781 L842.163 681.781 L841.604 681.781 L841.045 681.781 L840.486 681.781 L839.926 681.781 L839.367 681.781 L838.808 681.781 L838.249 681.781 L837.689 681.781 L837.13 681.781 L836.571 681.781 L836.012 681.781 L835.452 681.781 L834.893 681.781 L834.334 681.781 L833.775 681.781 L833.215 681.781 L832.656 681.781 L832.097 681.781 L831.538 681.781 L830.978 681.781 L830.419 681.781 L829.86 681.781 L829.301 681.781 L828.741 681.781 L828.182 681.781 L827.623 681.781 L827.064 681.781 L826.504 681.781 L825.945 681.781 L825.386 681.781 L824.827 681.781 L824.267 681.781 L823.708 681.781 L823.149 681.781 L822.59 681.781 L822.03 681.781 L821.471 681.781 L820.912 681.781 L820.353 681.781 L819.793 681.781 L819.234 681.781 L818.675 681.781 L818.116 681.781 L817.556 681.781 L816.997 681.781 L816.438 681.781 L815.879 681.781 L815.319 681.781 L814.76 681.781 L814.201 681.781 L813.642 681.781 L813.082 681.781 L812.523 681.781 L811.964 681.781 L811.405 681.781 L810.845 681.781 L810.286 681.781 L809.727 681.781 L809.168 681.781 L808.608 681.781 L808.049 681.781 L807.49 681.781 L806.931 681.781 L806.371 681.781 L805.812 681.781 L805.253 681.781 L804.693 681.781 L804.134 681.781 L803.575 681.781 L803.016 681.781 L802.456 681.781 L801.897 681.781 L801.338 681.781 L800.779 681.781 L800.219 681.781 L799.66 681.781 L799.101 681.781 L798.542 681.781 L797.982 681.781 L797.423 681.781 L796.864 681.781 L796.305 681.781 L795.745 681.781 L795.186 681.781 L794.627 681.781 L794.068 681.781 L793.508 681.781 L792.949 681.781 L792.39 681.781 L791.831 681.781 L791.271 681.781 L790.712 681.781 L790.153 681.781 L789.594 681.781 L789.034 681.781 L788.475 681.781 L787.916 681.781 L787.357 681.781 L786.797 681.781 L786.238 681.781 L785.679 681.781 L785.12 681.781 L784.56 681.781 L784.001 681.781 L783.442 681.781 L782.883 681.781 L782.323 681.781 L781.764 681.781 L781.205 681.781 L780.646 681.781 L780.086 681.781 L779.527 681.781 L778.968 681.781 L778.409 681.781 L777.849 681.781 L777.29 681.781 L776.731 681.781 L776.172 681.781 L775.612 681.781 L775.053 681.781 L774.494 681.781 L773.935 681.781 L773.375 681.781 L772.816 681.781 L772.257 681.781 L771.698 681.781 L771.138 681.781 L770.579 681.781 L770.02 681.781 L769.461 681.781 L768.901 681.781 L768.342 681.781 L767.783 681.781 L767.224 681.781 L766.664 681.781 L766.105 681.781 L765.546 681.781 L764.987 681.781 L764.427 681.781 L763.868 681.781 L763.309 681.781 L762.75 681.781 L762.19 681.781 L761.631 681.781 L761.072 681.781 L760.513 681.781 L759.953 681.781 L759.394 681.781 L758.835 681.781 L758.276 681.781 L757.716 681.781 L757.157 681.781 L756.598 681.781 L756.039 681.781 L755.479 681.781 L754.92 681.781 L754.361 681.781 L753.802 681.781 L753.242 681.781 L752.683 681.781 L752.124 681.781 L751.565 681.781 L751.005 681.781 L750.446 681.781 L749.887 681.781 L749.328 681.781 L748.768 681.781 L748.209 681.781 L747.65 681.781 L747.091 681.781 L746.531 681.781 L745.972 681.781 L745.413 681.781 L744.854 681.781 L744.294 681.781 L743.735 681.781 L743.176 681.781 L742.617 681.781 L742.057 681.781 L741.498 681.781 L740.939 681.781 L740.38 681.781 L739.82 681.781 L739.261 681.781 L738.702 681.781 L738.143 681.781 L737.583 681.781 L737.024 681.781 L736.465 681.781 L735.906 681.781 L735.346 681.781 L734.787 681.781 L734.228 681.781 L733.669 681.781 L733.109 681.781 L732.55 681.781 L731.991 681.781 L731.432 681.781 L730.872 681.781 L730.313 681.781 L729.754 681.781 L729.195 681.781 L728.635 681.781 L728.076 681.781 L727.517 681.781 L726.958 681.781 L726.398 681.781 L725.839 681.781 L725.28 681.781 L724.721 681.781 L724.161 681.781 L723.602 681.781 L723.043 681.781 L722.484 681.781 L721.924 681.781 L721.365 681.781 L720.806 681.781 L720.247 681.781  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.135 720.806,683.135 721.365,683.135 721.924,683.135 722.484,683.135 723.043,683.135 723.602,683.135 724.161,683.135 724.721,683.135 725.28,683.135 725.839,683.135 726.398,683.135 726.958,683.135 727.517,683.135 728.076,683.135 728.635,683.135 729.195,683.135 729.754,683.135 730.313,683.135 730.872,683.135 731.432,683.135 731.991,683.135 732.55,683.135 733.109,683.135 733.669,683.135 734.228,683.135 734.787,683.135 735.346,683.135 735.906,683.135 736.465,683.135 737.024,683.135 737.583,683.135 738.143,683.135 738.702,683.135 739.261,683.135 739.82,683.135 740.38,683.135 740.939,683.135 741.498,683.135 742.057,683.135 742.617,683.135 743.176,683.135 743.735,683.135 744.294,683.135 744.854,683.135 745.413,683.135 745.972,683.135 746.531,683.135 747.091,683.135 747.65,683.135 748.209,683.135 748.768,683.135 749.328,683.135 749.887,683.135 750.446,683.135 751.005,683.135 751.565,683.135 752.124,683.135 752.683,683.135 753.242,683.135 753.802,683.135 754.361,683.135 754.92,683.135 755.479,683.135 756.039,683.135 756.598,683.135 757.157,683.135 757.716,683.135 758.276,683.135 758.835,683.135 759.394,683.135 759.953,683.135 760.513,683.135 761.072,683.135 761.631,683.135 762.19,683.135 762.75,683.135 763.309,683.135 763.868,683.135 764.427,683.135 764.987,683.135 765.546,683.135 766.105,683.135 766.664,683.135 767.224,683.135 767.783,683.135 768.342,683.135 768.901,683.135 769.461,683.135 770.02,683.135 770.579,683.135 771.138,683.135 771.698,683.135 772.257,683.135 772.816,683.135 773.375,683.135 773.935,683.135 774.494,683.135 775.053,683.135 775.612,683.135 776.172,683.135 776.731,683.135 777.29,683.135 777.849,683.135 778.409,683.135 778.968,683.135 779.527,683.135 780.086,683.135 780.646,683.135 781.205,683.135 781.764,683.135 782.323,683.135 782.883,683.135 783.442,683.135 784.001,683.135 784.56,683.135 785.12,683.135 785.679,683.135 786.238,683.135 786.797,683.135 787.357,683.135 787.916,683.135 788.475,683.135 789.034,683.135 789.594,683.135 790.153,683.135 790.712,683.135 791.271,683.135 791.831,683.135 792.39,683.135 792.949,683.135 793.508,683.135 794.068,683.135 794.627,683.135 795.186,683.135 795.745,683.135 796.305,683.135 796.864,683.135 797.423,683.135 797.982,683.135 798.542,683.135 799.101,683.135 799.66,683.135 800.219,683.135 800.779,683.135 801.338,683.135 801.897,683.135 802.456,683.135 803.016,683.135 803.575,683.135 804.134,683.135 804.693,683.135 805.253,683.135 805.812,683.135 806.371,683.135 806.931,683.135 807.49,683.135 808.049,683.135 808.608,683.135 809.168,683.135 809.727,683.135 810.286,683.135 810.845,683.135 811.405,683.135 811.964,683.135 812.523,683.135 813.082,683.135 813.642,683.135 814.201,683.135 814.76,683.135 815.319,683.135 815.879,683.135 816.438,683.135 816.997,683.135 817.556,683.135 818.116,683.135 818.675,683.135 819.234,683.135 819.793,683.135 820.353,683.135 820.912,683.135 821.471,683.135 822.03,683.135 822.59,683.135 823.149,683.135 823.708,683.135 824.267,683.135 824.827,683.135 825.386,683.135 825.945,683.135 826.504,683.135 827.064,683.135 827.623,683.135 828.182,683.135 828.741,683.135 829.301,683.135 829.86,683.135 830.419,683.135 830.978,683.135 831.538,683.135 832.097,683.135 832.656,683.135 833.215,683.135 833.775,683.135 834.334,683.135 834.893,683.135 835.452,683.135 836.012,683.135 836.571,683.135 837.13,683.135 837.689,683.135 838.249,683.135 838.808,683.135 839.367,683.135 839.926,683.135 840.486,683.135 841.045,683.135 841.604,683.135 842.163,683.135 842.723,683.135 843.282,683.135 843.841,683.135 844.4,683.135 844.96,683.135 845.519,683.135 846.078,683.135 846.637,683.135 847.197,683.135 847.756,683.135 848.315,683.135 848.874,683.135 849.434,683.135 849.993,683.135 850.552,683.135 851.111,683.135 851.671,683.135 852.23,683.135 852.789,683.135 853.348,683.135 853.908,683.135 854.467,683.135 855.026,683.135 855.585,683.135 856.145,683.135 856.704,683.135 857.263,683.135 857.822,683.135 858.382,683.135 858.941,683.135 859.5,683.135 860.059,683.135 860.619,683.135 861.178,683.135 861.737,683.135 862.296,683.135 862.856,683.135 863.415,683.135 863.974,683.135 864.533,683.135 865.093,683.135 865.652,683.135 866.211,683.135 866.77,683.135 867.33,683.135 867.889,683.135 868.448,683.135 869.007,683.135 869.567,683.135 870.126,683.135 870.685,683.135 871.244,683.135 871.804,683.135 872.363,683.135 872.922,683.135 873.481,683.135 874.041,683.135 874.6,683.135 875.159,683.135 875.718,683.135 876.278,683.135 876.837,683.135 877.396,683.135 877.955,683.135 878.515,683.135 879.074,683.135 879.633,683.135 880.192,683.135 880.752,683.135 881.311,683.135 881.87,683.135 882.429,683.135 882.989,683.135 883.548,683.135 884.107,683.135 884.666,683.135 885.226,683.135 885.785,683.135 886.344,683.135 886.903,683.135 887.463,683.135 888.022,683.135 888.581,683.135 889.14,683.135 889.7,683.135 890.259,683.135 890.818,683.135 891.377,683.135 891.937,683.135 892.496,683.135 893.055,683.135 893.614,683.135 894.174,683.135 894.733,683.135 895.292,683.135 895.851,683.135 896.411,683.135 896.97,683.135 897.529,683.135 898.088,683.135 898.648,683.135 899.207,683.135 899.766,683.135 900.325,683.135 900.885,683.135 901.444,683.135 902.003,683.135 902.562,683.135 903.122,683.135 903.681,683.135 904.24,683.135 904.799,683.135 905.359,683.135 905.918,683.135 906.477,683.135 907.036,683.135 907.596,683.135 908.155,683.135 908.714,683.135 909.273,683.135 909.833,683.135 910.392,683.135 910.951,683.135 911.51,683.135 912.07,683.135 912.629,683.135 913.188,683.135 913.747,683.135 914.307,683.135 914.866,683.135 915.425,683.135 915.984,683.135 916.544,683.135 917.103,683.135 917.662,683.135 918.221,683.135 918.781,683.135 919.34,683.135 919.899,683.135 920.458,683.135 921.018,683.135 921.577,683.135 922.136,683.135 922.695,683.135 923.255,683.135 923.814,683.135 924.373,683.135 924.932,683.135 925.492,683.135 926.051,683.135 926.61,683.135 927.169,683.135 927.729,683.135 928.288,683.135 928.847,683.135 929.406,683.135 929.966,683.135 930.525,683.135 931.084,683.135 931.644,683.135 932.203,683.135 932.762,683.135 933.321,683.135 933.881,683.135 934.44,683.135 934.999,683.135 935.558,683.135 936.118,683.135 936.677,683.135 937.236,683.135 937.795,683.135 938.355,683.135 938.914,683.135 939.473,683.135 940.032,683.135 940.592,683.135 941.151,683.135 941.71,683.135 942.269,683.135 942.829,683.135 943.388,683.135 943.947,683.135 944.506,683.135 945.066,683.135 945.625,683.135 946.184,683.135 946.743,683.135 947.303,683.135 947.862,683.135 948.421,683.135 948.98,683.135 949.54,683.135 950.099,683.135 950.658,683.135 951.217,683.135 951.777,683.135 952.336,683.135 952.895,683.135 953.454,683.135 954.014,683.135 954.573,683.135 955.132,683.135 955.691,683.135 956.251,683.135 956.81,683.135 957.369,683.135 957.928,683.135 958.488,683.135 959.047,683.135 959.606,683.135 960.165,683.135 960.725,683.135 961.284,683.135 961.843,683.135 962.402,683.135 962.962,683.135 963.521,683.135 964.08,683.135 964.639,683.135 965.199,683.135 965.758,683.135 966.317,683.135 966.876,683.135 967.436,683.135 967.995,683.135 968.554,683.135 969.113,683.135 969.673,683.135 970.232,683.135 970.791,683.135 971.35,683.135 971.91,683.135 972.469,683.135 973.028,683.135 973.587,683.135 974.147,683.135 974.706,683.135 975.265,683.135 975.824,683.135 976.384,683.135 976.943,683.135 977.502,683.135 978.061,683.135 978.621,683.135 979.18,683.135 979.739,683.135 980.298,683.135 980.858,683.135 981.417,683.135 981.976,683.135 982.535,683.135 983.095,683.135 983.654,683.135 984.213,683.135 984.772,683.135 985.332,683.135 985.891,683.135 986.45,683.135 987.009,683.135 987.569,683.135 988.128,683.135 988.687,683.135 989.246,683.135 989.806,683.135 990.365,683.135 990.924,683.135 991.483,683.135 992.043,683.135 992.602,683.135 993.161,683.135 993.72,683.135 994.28,683.135 994.839,683.135 995.398,683.135 995.957,683.135 996.517,683.135 997.076,683.135 997.635,683.135 998.194,683.135 998.754,683.135 999.313,683.135 999.872,683.135 1000.43,683.135 1000.99,683.135 1001.55,683.135 1002.11,683.135 1002.67,683.135 1003.23,683.135 1003.79,683.135 1004.35,683.135 1004.91,683.135 1005.46,683.135 1006.02,683.135 1006.58,683.135 1007.14,683.135 1007.7,683.135 1008.26,683.135 1008.82,683.135 1009.38,683.135 1009.94,683.135 1010.5,683.135 1011.06,683.135 1011.62,683.135 1012.18,683.135 1012.73,683.135 1013.29,683.135 1013.85,683.135 1014.41,683.135 1014.97,683.135 1015.53,683.135 1016.09,683.135 1016.65,683.135 1017.21,683.135 1017.77,683.135 1018.33,683.135 1018.89,683.135 1019.45,683.135 1020.01,683.135 1020.56,683.135 1021.12,683.135 1021.68,683.135 1022.24,683.135 1022.8,683.135 1023.36,683.135 1023.92,683.135 1024.48,683.135 1025.04,683.135 1025.6,683.135 1026.16,683.135 1026.72,683.135 1027.28,683.135 1027.83,683.135 1028.39,683.135 1028.95,683.135 1029.51,683.135 1030.07,683.135 1030.63,683.135 1031.19,683.135 1031.75,683.135 1032.31,683.135 1032.87,683.135 1033.43,683.135 1033.99,683.135 1034.55,683.135 1035.1,683.135 1035.66,683.135 1036.22,683.135 1036.78,683.135 1037.34,683.135 1037.9,683.135 1038.46,683.135 1039.02,683.135 1039.58,683.135 1040.14,683.135 1040.7,683.135 1041.26,683.135 1041.82,683.135 1042.38,683.135 1042.93,683.135 1043.49,683.135 1044.05,683.135 1044.61,683.135 1045.17,683.135 1045.73,683.135 1046.29,683.135 1046.85,683.135 1047.41,683.135 1047.97,683.135 1048.53,683.135 1049.09,683.135 1049.65,683.135 1050.2,683.135 1050.76,683.135 1051.32,683.135 1051.88,683.135 1052.44,683.135 1053,683.135 1053.56,683.135 1054.12,683.135 1054.68,683.135 1055.24,683.135 1055.8,683.135 1056.36,683.135 1056.92,683.135 1057.48,683.135 1058.03,683.135 1058.59,683.135 1059.15,683.135 1059.71,683.135 1060.27,683.135 1060.83,683.135 1061.39,683.135 1061.95,683.135 1062.51,683.135 1063.07,683.135 1063.63,683.135 1064.19,683.135 1064.75,683.135 1065.3,683.135 1065.86,683.135 1066.42,683.135 1066.98,683.135 1067.54,683.135 1068.1,683.135 1068.66,683.135 1069.22,683.135 1069.78,683.135 1070.34,683.135 1070.9,683.135 1071.46,683.135 1072.02,683.135 1072.57,683.135 1073.13,683.135 1073.69,683.135 1074.25,683.135 1074.81,683.135 1075.37,683.135 1075.93,683.135 1076.49,683.135 1077.05,683.135 1077.61,683.135 1078.17,683.135 1078.73,683.135 1079.29,683.135 1079.85,683.135 1080.4,683.135 1080.96,683.135 1081.52,683.135 1082.08,683.135 1082.64,683.135 1083.2,683.135 1083.76,683.135 1084.32,683.135 1084.88,683.135 1085.44,683.135 1086,683.135 1086.56,683.135 1087.12,683.135 1087.67,683.135 1088.23,683.135 1088.79,683.135 1089.35,683.135 1089.91,683.135 1090.47,683.135 1091.03,683.135 1091.59,683.135 1092.15,683.135 1092.71,683.135 1093.27,683.135 1093.83,683.135 1094.39,683.135 1094.94,683.135 1095.5,683.135 1096.06,683.135 1096.62,683.135 1097.18,683.135 1097.74,683.135 1098.3,683.135 1098.86,683.135 1099.42,683.135 1099.98,683.135 1100.54,683.135 1101.1,683.135 1101.66,683.135 1102.22,683.135 1102.77,683.135 1103.33,683.135 1103.89,683.135 1104.45,683.135 1105.01,683.135 1105.57,683.135 1106.13,683.135 1106.69,683.135 1107.25,683.135 1107.81,683.135 1108.37,683.135 1108.93,683.135 1109.49,683.135 1110.04,683.135 1110.6,683.135 1111.16,683.135 1111.72,683.135 1112.28,683.135 1112.84,683.135 1113.4,683.135 1113.96,683.135 1114.52,683.135 1115.08,683.135 1115.64,683.135 1116.2,683.135 1116.76,683.135 1117.31,683.135 1117.87,683.135 1118.43,683.135 1118.99,683.135 1119.55,683.135 1120.11,683.135 1120.67,683.135 1121.23,683.135 1121.79,683.135 1122.35,683.135 1122.91,683.135 1123.47,683.135 1124.03,683.135 1124.59,683.135 1125.14,683.135 1125.7,683.135 1126.26,683.135 1126.82,683.135 1127.38,683.135 1127.94,683.135 1128.5,683.135 1129.06,683.135 1129.62,683.135 1130.18,683.135 1130.74,683.135 1131.3,683.135 1131.86,683.135 1132.41,683.135 1132.97,683.135 1133.53,683.135 1134.09,683.135 1134.65,683.135 1135.21,683.135 1135.77,683.135 1136.33,683.135 1136.89,683.135 1137.45,683.135 1138.01,683.135 1138.57,683.135 1139.13,683.135 1139.68,683.135 1140.24,683.135 1140.8,683.135 1141.36,683.135 1141.92,683.135 1142.48,683.135 1143.04,683.135 1143.6,683.135 1144.16,683.135 1144.72,683.135 1145.28,683.135 1145.84,683.135 1146.4,683.135 1146.96,683.135 1147.51,683.135 1148.07,683.135 1148.63,683.135 1149.19,683.135 1149.75,683.135 1150.31,683.135 1150.87,683.135 1151.43,683.135 1151.99,683.135 1152.55,683.135 1153.11,683.135 1153.67,683.135 1154.23,683.135 1154.78,683.135 1155.34,683.135 1155.9,683.135 1156.46,683.135 1157.02,683.135 1157.58,683.135 1158.14,683.135 1158.7,683.135 1159.26,683.135 1159.82,683.135 1160.38,683.135 1160.94,683.135 1161.5,683.135 1162.05,683.135 1162.61,683.135 1163.17,683.135 1163.73,683.135 1164.29,683.135 1164.85,683.135 1165.41,683.135 1165.97,683.135 1166.53,683.135 1167.09,683.135 1167.65,683.135 1168.21,683.135 1168.77,683.135 1169.33,683.135 1169.88,683.135 1170.44,683.135 1171,683.135 1171.56,683.135 1172.12,683.135 1172.68,683.135 1173.24,683.135 1173.8,683.135 1174.36,683.135 1174.92,683.135 1175.48,683.135 1176.04,683.135 1176.6,683.135 1177.15,683.135 1177.71,683.135 1178.27,683.135 1178.83,683.135 1179.39,683.135 1179.95,683.135 1180.51,683.135 1181.07,683.135 1181.63,683.135 1182.19,683.135 1182.75,683.135 1183.31,683.135 1183.87,683.135 1184.43,683.135 1184.98,683.135 1185.54,683.135 1186.1,683.135 1186.66,683.135 1187.22,683.135 1187.78,683.135 1188.34,683.135 1188.9,683.135 1189.46,683.135 1190.02,683.135 1190.58,683.135 1191.14,683.135 1191.7,683.135 1192.25,683.135 1192.81,683.135 1193.37,683.135 1193.93,683.135 1194.49,683.135 1195.05,683.135 1195.61,683.135 1196.17,683.135 1196.73,683.135 1197.29,683.135 1197.85,683.135 1198.41,683.135 1198.97,683.135 1199.52,683.135 1200.08,683.135 1200.64,683.135 1201.2,683.135 1201.76,683.135 1202.32,683.135 1202.88,683.135 1203.44,683.135 1204,683.135 1204.56,683.135 1205.12,683.135 1205.68,683.135 1206.24,683.135 1206.8,683.135 1207.35,683.135 1207.91,683.135 1208.47,683.135 1209.03,683.135 1209.59,683.135 1210.15,683.135 1210.71,683.135 1211.27,683.135 1211.83,683.135 1212.39,683.135 1212.95,683.135 1213.51,683.135 1214.07,683.135 1214.62,683.135 1215.18,683.135 1215.74,683.135 1216.3,683.135 1216.86,683.135 1217.42,683.135 1217.98,683.135 1218.54,683.135 1219.1,683.135 1219.66,683.135 1220.22,683.135 1220.78,683.135 1221.34,683.135 1221.89,683.135 1222.45,683.135 1223.01,683.135 1223.57,683.135 1224.13,683.135 1224.69,683.135 1225.25,683.135 1225.81,683.135 1226.37,683.135 1226.93,683.135 1227.49,683.135 1228.05,683.135 1228.61,683.135 1229.17,683.135 1229.72,683.135 1230.28,683.135 1230.84,683.135 1231.4,683.135 1231.96,683.135 1232.52,683.135 1233.08,683.135 1233.64,683.135 1234.2,683.135 1234.76,683.135 1235.32,683.135 1235.88,683.135 1236.44,683.135 1236.99,683.135 1237.55,683.135 1238.11,683.135 1238.67,683.135 1239.23,683.135 1239.79,683.135 1240.35,683.135 1240.91,683.135 1241.47,683.135 1242.03,683.135 1242.59,683.135 1243.15,683.135 1243.71,683.135 1244.26,683.135 1244.82,683.135 1245.38,683.135 1245.94,683.135 1246.5,683.135 1247.06,683.135 1247.62,683.135 1248.18,683.135 1248.74,683.135 1249.3,683.135 1249.86,683.135 1250.42,683.135 1250.98,683.135 1251.54,683.135 1252.09,683.135 1252.65,683.135 1253.21,683.135 1253.77,683.135 1254.33,683.135 1254.89,683.135 1255.45,683.135 1256.01,683.135 1256.57,683.135 1257.13,683.135 1257.69,683.135 1258.25,683.135 1258.81,683.135 1259.36,683.135 1259.92,683.135 1260.48,683.135 1261.04,683.135 1261.6,683.135 1262.16,683.135 1262.72,683.135 1263.28,683.135 1263.84,683.135 1264.4,683.135 1264.96,683.135 1265.52,683.135 1266.08,683.135 1266.63,683.135 1267.19,683.135 1267.75,683.135 1268.31,683.135 1268.87,683.135 1269.43,683.135 1269.99,683.135 1270.55,683.135 1271.11,683.135 1271.67,683.135 1272.23,683.135 1272.79,683.135 1273.35,683.135 1273.91,683.135 1274.46,683.135 1275.02,683.135 1275.58,683.135 1276.14,683.135 1276.7,683.135 1277.26,683.135 1277.82,683.135 1278.38,683.135 1278.94,683.135 1279.5,683.135 1280.06,683.135 1280.62,683.135 1281.18,683.135 1281.73,683.135 1282.29,683.135 1282.85,683.135 1283.41,683.135 1283.97,683.135 1284.53,683.135 1285.09,683.135 1285.65,683.135 1286.21,683.135 1286.77,683.135 1287.33,683.135 1287.89,683.135 1288.45,683.135 1289,683.135 1289.56,683.135 1290.12,683.135 1290.68,683.135 1291.24,683.135 1291.8,683.135 1292.36,683.135 1292.92,683.135 1293.48,683.135 1294.04,683.135 1294.6,683.135 1295.16,683.135 1295.72,683.135 1296.28,683.135 1296.83,683.135 1297.39,683.135 1297.95,683.135 1298.51,683.135 1299.07,683.135 1299.63,683.135 1300.19,683.135 1300.75,683.135 1301.31,683.135 1301.87,683.135 1302.43,683.135 1302.99,683.135 1303.55,683.135 1304.1,683.135 1304.66,683.135 1305.22,683.135 1305.78,683.135 1306.34,683.135 1306.9,683.135 1307.46,683.135 1308.02,683.135 1308.58,683.135 1309.14,683.135 1309.7,683.135 1310.26,683.135 1310.82,683.135 1311.38,683.135 1311.93,683.135 1312.49,683.135 1313.05,683.135 1313.61,683.135 1314.17,683.135 1314.73,683.135 1315.29,683.135 1315.85,683.135 1316.41,683.135 1316.97,683.135 1317.53,683.135 1318.09,683.135 1318.65,683.135 1319.2,683.135 1319.76,683.135 1320.32,683.135 1320.88,683.135 1321.44,683.135 1322,683.135 1322.56,683.135 1323.12,683.135 1323.68,683.135 1324.24,683.135 1324.8,683.135 1325.36,683.135 1325.92,683.135 1326.47,683.135 1327.03,683.135 1327.59,683.135 1328.15,683.135 1328.71,683.135 1329.27,683.135 1329.83,683.135 1330.39,683.135 1330.95,683.135 1331.51,683.135 1332.07,683.135 1332.63,683.135 1333.19,683.135 1333.75,683.135 1334.3,683.135 1334.86,683.135 1335.42,683.135 1335.98,683.135 1336.54,683.135 1337.1,683.135 1337.66,683.135 1338.22,683.135 1338.78,683.135 1339.34,683.135 1339.9,683.135 1340.46,683.135 1341.02,683.135 1341.57,683.135 1342.13,683.135 1342.69,683.135 1343.25,683.135 1343.81,683.135 1344.37,683.135 1344.93,683.135 1345.49,683.135 1346.05,683.135 1346.61,683.135 1347.17,683.135 1347.73,683.135 1348.29,683.135 1348.84,683.135 1349.4,683.135 1349.96,683.135 1350.52,683.135 1351.08,683.135 1351.64,683.135 1352.2,683.135 1352.76,683.135 1353.32,683.135 1353.88,683.135 1354.44,683.135 1355,683.135 1355.56,683.135 1356.12,683.135 1356.67,683.135 1357.23,683.135 1357.79,683.135 1358.35,683.135 1358.91,683.135 1359.47,683.135 1360.03,683.135 1360.59,683.135 1361.15,683.135 1361.71,683.135 1362.27,683.135 1362.83,683.135 1363.39,683.135 1363.94,683.135 1364.5,683.135 1365.06,683.135 1365.62,683.135 1366.18,683.135 1366.74,683.135 1367.3,683.135 1367.86,683.135 1368.42,683.135 1368.98,683.135 1369.54,683.135 1370.1,683.135 1370.66,683.135 1371.21,683.135 1371.77,683.135 1372.33,683.135 1372.89,683.135 1373.45,683.135 1374.01,683.135 1374.57,683.135 1375.13,683.135 1375.69,683.135 1376.25,683.135 1376.81,683.135 1377.37,683.135 1377.93,683.135 1378.49,683.135 1379.04,683.135 1379.6,683.135 1380.16,683.135 1380.72,683.135 1381.28,683.135 1381.84,683.135 1382.4,683.135 1382.96,683.135 1383.52,683.135 1384.08,683.135 1384.64,683.135 1385.2,683.135 1385.76,683.135 1386.31,683.135 1386.87,683.135 1387.43,683.135 1387.99,683.135 1388.55,683.135 1389.11,683.135 1389.67,683.135 1390.23,683.135 1390.79,683.135 1391.35,683.135 1391.91,683.135 1392.47,683.135 1393.03,683.135 1393.58,683.135 1394.14,683.135 1394.7,683.135 1395.26,683.135 1395.82,683.135 1396.38,683.135 1396.94,683.135 1397.5,683.135 1398.06,683.135 1398.62,683.135 1399.18,683.135 1399.74,683.135 1400.3,683.135 1400.86,683.135 1401.41,683.135 1401.97,683.135 1402.53,683.135 1403.09,683.135 1403.65,683.135 1404.21,683.135 1404.77,683.135 1405.33,683.135 1405.89,683.135 1406.45,683.135 1407.01,683.135 1407.57,683.135 1408.13,683.135 1408.68,683.135 1409.24,683.135 1409.8,683.135 1410.36,683.135 1410.92,683.135 1411.48,683.135 1412.04,683.135 1412.6,683.135 1413.16,683.135 1413.72,683.135 1414.28,683.135 1414.84,683.135 1415.4,683.135 1415.95,683.135 1416.51,683.135 1417.07,683.135 1417.63,683.135 1418.19,683.135 1418.75,683.135 1419.31,683.135 1419.87,683.135 1420.43,683.135 1420.99,683.135 1421.55,683.135 1422.11,683.135 1422.67,683.135 1423.23,683.135 1423.78,683.135 1424.34,683.135 1424.9,683.135 1425.46,683.135 1426.02,683.135 1426.58,683.135 1427.14,683.135 1427.7,683.135 1428.26,683.135 1428.82,683.135 1429.38,683.135 1429.94,683.135 1430.5,683.135 1431.05,683.135 1431.61,683.135 1432.17,683.135 1432.73,683.135 1433.29,683.135 1433.85,683.135 1434.41,683.135 1434.97,683.135 1435.53,683.135 1436.09,683.135 1436.65,683.135 1437.21,683.135 1437.77,683.135 1438.33,683.135 1438.88,683.135 1439.44,683.135 1440,683.135 1440.56,683.135 1441.12,683.135 1441.68,683.135 1442.24,683.135 1442.8,683.135 1443.36,683.135 1443.92,683.135 1444.48,683.135 1445.04,683.135 1445.6,683.135 1446.15,683.135 1446.71,683.135 1447.27,683.135 1447.83,683.135 1448.39,683.135 1448.95,683.135 1449.51,683.135 1450.07,683.135 1450.63,683.135 1451.19,683.135 1451.75,683.135 1452.31,683.135 1452.87,683.135 1453.42,683.135 1453.98,683.135 1454.54,683.135 1455.1,683.135 1455.66,683.135 1456.22,683.135 1456.78,683.135 1457.34,683.135 1457.9,683.135 1458.46,683.135 1459.02,683.135 1459.58,683.135 1460.14,683.135 1460.7,683.135 1461.25,683.135 1461.81,683.135 1462.37,683.135 1462.93,683.135 1463.49,683.135 1464.05,683.135 1464.61,683.135 1465.17,683.135 1465.73,683.135 1466.29,683.135 1466.85,683.135 1467.41,683.135 1467.97,683.135 1468.52,683.135 1469.08,683.135 1469.64,683.135 1470.2,683.135 1470.76,683.135 1471.32,683.135 1471.88,683.135 1472.44,683.135 1473,683.135 1473.56,683.135 1474.12,683.135 1474.68,683.135 1475.24,683.135 1475.79,683.135 1476.35,683.135 1476.91,683.135 1477.47,683.135 1478.03,683.135 1478.59,683.135 1479.15,683.135 1479.71,683.135 1480.27,683.135 1480.83,683.135 1481.39,683.135 1481.95,683.135 1482.51,683.135 1483.07,683.135 1483.62,683.135 1484.18,683.135 1484.74,683.135 1485.3,683.135 1485.86,683.135 1486.42,683.135 1486.98,683.135 1487.54,683.135 1488.1,683.135 1488.66,683.135 1489.22,683.135 1489.78,683.135 1490.34,683.135 1490.89,683.135 1491.45,683.135 1492.01,683.135 1492.57,683.135 1493.13,683.135 1493.69,683.135 1494.25,683.135 1494.81,683.135 1495.37,683.135 1495.93,683.135 1496.49,683.135 1497.05,683.135 1497.61,683.135 1498.16,683.135 1498.72,683.135 1499.28,683.135 1499.84,683.135 1500.4,683.135 1500.96,683.135 1501.52,683.135 1502.08,683.135 1502.64,683.135 1503.2,683.135 1503.76,683.135 1504.32,683.135 1504.88,683.135 1505.44,683.135 1505.99,683.135 1506.55,683.135 1507.11,683.135 1507.67,683.135 1508.23,683.135 1508.79,683.135 1509.35,683.135 1509.91,683.135 1510.47,683.135 1511.03,683.135 1511.59,683.135 1512.15,683.135 1512.71,683.135 1513.26,683.135 1513.82,683.135 1514.38,683.135 1514.94,683.135 1515.5,683.135 1516.06,683.135 1516.62,683.135 1517.18,683.135 1517.74,683.135 1518.3,683.135 1518.86,683.135 1519.42,683.135 1519.98,683.135 1520.53,683.135 1521.09,683.135 1521.65,683.135 1522.21,683.135 1522.77,683.135 1523.33,683.135 1523.89,683.135 1524.45,683.135 1525.01,683.135 1525.57,683.135 1526.13,683.135 1526.69,683.135 1527.25,683.135 1527.81,683.135 1528.36,683.135 1528.92,683.135 1529.48,683.135 1530.04,683.135 1530.6,683.135 1531.16,683.135 1531.72,683.135 1532.28,683.135 1532.84,683.135 1533.4,683.135 1533.96,683.135 1534.52,683.135 1535.08,683.135 1535.63,683.135 1536.19,683.135 1536.75,683.135 1537.31,683.135 1537.87,683.135 1538.43,683.135 1538.99,683.135 1539.55,683.135 1540.11,683.135 1540.67,683.135 1541.23,683.135 1541.79,683.135 1542.35,683.135 1542.9,683.135 1543.46,683.135 1544.02,683.135 1544.58,683.135 1545.14,683.135 1545.7,683.135 1546.26,683.135 1546.82,683.135 1547.38,683.135 1547.94,683.135 1548.5,683.135 1549.06,683.135 1549.62,683.135 1550.18,683.135 1550.73,683.135 1551.29,683.135 1551.85,683.135 1552.41,683.135 1552.97,683.135 1553.53,683.135 1554.09,683.135 1554.65,683.135 1555.21,683.135 1555.77,683.135 1556.33,683.135 1556.89,683.135 1557.45,683.135 1558,683.135 1558.56,683.135 1559.12,683.135 1559.68,683.135 1560.24,683.135 1560.8,683.135 1561.36,683.135 1561.92,683.135 1562.48,683.135 1563.04,683.135 1563.6,683.135 1564.16,683.135 1564.72,683.135 1565.28,683.135 1565.83,683.135 1566.39,683.135 1566.95,683.135 1567.51,683.135 1568.07,683.135 1568.63,683.135 1569.19,683.135 1569.75,683.135 1570.31,683.135 1570.87,683.135 1571.43,683.135 1571.99,683.135 1572.55,683.135 1573.1,683.135 1573.66,683.135 1574.22,683.135 1574.78,683.135 1575.34,683.135 1575.9,683.135 1576.46,683.135 1577.02,683.135 1577.58,683.135 1578.14,683.135 1578.7,683.135 1579.26,683.135 1579.82,683.135 1580.37,683.135 1580.93,683.135 1581.49,683.135 1582.05,683.135 1582.61,683.135 1583.17,683.135 1583.73,683.135 1584.29,683.135 1584.85,683.135 1585.41,683.135 1585.97,683.135 1586.53,683.135 1587.09,683.135 1587.65,683.135 1588.2,683.135 1588.76,683.135 1589.32,683.135 1589.88,683.135 1590.44,683.135 1591,683.135 1591.56,683.135 1592.12,683.135 1592.68,683.135 1593.24,683.135 1593.8,683.135 1594.36,683.135 1594.92,683.135 1595.47,683.135 1596.03,683.135 1596.59,683.135 1597.15,683.135 1597.71,683.135 1598.27,683.135 1598.83,683.135 1599.39,683.135 1599.95,683.135 1600.51,683.135 1601.07,683.135 1601.63,683.135 1602.19,683.135 1602.74,683.135 1603.3,683.135 1603.86,683.135 1604.42,683.135 1604.98,683.135 1605.54,683.135 1606.1,683.135 1606.66,683.135 1607.22,683.135 1607.78,683.135 1608.34,683.135 1608.9,683.135 1609.46,683.135 1610.02,683.135 1610.57,683.135 1611.13,683.135 1611.69,683.135 1612.25,683.135 1612.81,683.135 1613.37,683.135 1613.93,683.135 1614.49,683.135 1615.05,683.135 1615.61,683.135 1616.17,683.135 1616.73,683.135 1617.29,683.135 1617.84,683.135 1618.4,683.135 1618.96,683.135 1619.52,683.135 1620.08,683.135 1620.64,683.135 1621.2,683.135 1621.76,683.135 1622.32,683.135 1622.88,683.135 1623.44,683.135 1624,683.135 1624.56,683.135 1625.11,683.135 1625.67,683.135 1626.23,683.135 1626.79,683.135 1627.35,683.135 1627.91,683.135 1628.47,683.135 1629.03,683.135 1629.59,683.135 1630.15,683.135 1630.71,683.135 1631.27,683.135 1631.83,683.135 1632.39,683.135 1632.94,683.135 1633.5,683.135 1634.06,683.135 1634.62,683.135 1635.18,683.135 1635.74,683.135 1636.3,683.135 1636.86,683.135 1637.42,683.135 1637.98,683.135 1638.54,683.135 1639.1,683.135 1639.66,683.135 1640.21,683.135 1640.77,683.135 1641.33,683.135 1641.89,683.135 1642.45,683.135 1643.01,683.135 1643.57,683.135 1644.13,683.135 1644.69,683.135 1645.25,683.135 1645.81,683.135 1646.37,683.135 1646.93,683.135 1647.48,683.135 1648.04,683.135 1648.6,683.135 1649.16,683.135 1649.72,683.135 1650.28,683.135 1650.84,683.135 1651.4,683.135 1651.96,683.135 1652.52,683.135 1653.08,683.135 1653.64,683.135 1654.2,683.135 1654.76,683.135 1655.31,683.135 1655.87,683.135 1656.43,683.135 1656.99,683.135 1657.55,683.135 1658.11,683.135 1658.67,683.135 1659.23,683.135 1659.79,683.135 1660.35,683.135 1660.91,683.135 1661.47,683.135 1662.03,683.135 1662.58,683.135 1663.14,683.135 1663.7,683.135 1664.26,683.135 1664.82,683.135 1665.38,683.135 1665.94,683.135 1666.5,683.135 1667.06,683.135 1667.62,683.135 1668.18,683.135 1668.74,683.135 1669.3,683.135 1669.85,683.135 1670.41,683.135 1670.97,683.135 1671.53,683.135 1672.09,683.135 1672.65,683.135 1673.21,683.135 1673.77,683.135 1674.33,683.135 1674.89,683.135 1675.45,683.135 1676.01,683.135 1676.57,683.135 1677.13,683.135 1677.68,683.135 1678.24,683.135 1678.8,683.135 1679.36,683.135 1679.92,683.135 1680.48,683.135 1681.04,683.135 1681.6,683.135 1682.16,683.135 1682.72,683.135 1683.28,683.135 1683.84,683.135 1684.4,683.135 1684.95,683.135 1685.51,683.135 1686.07,683.135 1686.63,683.135 1687.19,683.135 1687.75,683.135 1688.31,683.135 1688.87,683.135 1689.43,683.135 1689.99,683.135 1690.55,683.135 1691.11,683.135 1691.67,683.135 1692.23,683.135 1692.78,683.135 1693.34,683.135 1693.9,683.135 1694.46,683.135 1695.02,683.135 1695.58,683.135 1696.14,683.135 1696.7,683.135 1697.26,683.135 1697.82,683.135 1698.38,683.135 1698.94,683.135 1699.5,683.135 1700.05,683.135 1700.61,683.135 1701.17,683.135 1701.73,683.135 1702.29,683.135 1702.85,683.135 1703.41,683.135 1703.97,683.135 1704.53,683.135 1705.09,683.135 1705.65,683.135 1706.21,683.135 1706.77,683.135 1707.32,683.135 1707.88,683.135 1708.44,683.135 1709,683.135 1709.56,683.135 1710.12,683.135 1710.68,683.135 1711.24,683.135 1711.8,683.135 1712.36,683.135 1712.92,683.135 1713.48,683.135 1714.04,683.135 1714.6,683.135 1715.15,683.135 1715.71,683.135 1716.27,683.135 1716.83,683.135 1717.39,683.135 1717.95,683.135 1718.51,683.135 1719.07,683.135 1719.63,683.135 1720.19,683.135 1720.75,683.135 1721.31,683.135 1721.87,683.135 1722.42,683.135 1722.98,683.135 1723.54,683.135 1724.1,683.135 1724.66,683.135 1725.22,683.135 1725.78,683.135 1726.34,683.135 1726.9,683.135 1727.46,683.135 1728.02,683.135 1728.58,683.135 1729.14,683.135 1729.69,683.135 1730.25,683.135 1730.81,683.135 1731.37,683.135 1731.93,683.135 1732.49,683.135 1733.05,683.135 1733.61,683.135 1734.17,683.135 1734.73,683.135 1735.29,683.135 1735.85,683.135 1736.41,683.135 1736.97,683.135 1737.52,683.135 1738.08,683.135 1738.64,683.135 1739.2,683.135 1739.76,683.135 1740.32,683.135 1740.88,683.135 1741.44,683.135 1742,683.135 1742.56,683.135 1743.12,683.135 1743.68,683.135 1744.24,683.135 1744.79,683.135 1745.35,683.135 1745.91,683.135 1746.47,683.135 1747.03,683.135 1747.59,683.135 1748.15,683.135 1748.71,683.135 1749.27,683.135 1749.83,683.135 1750.39,683.135 1750.95,683.135 1751.51,683.135 1752.06,683.135 1752.62,683.135 1753.18,683.135 1753.74,683.135 1754.3,683.135 1754.86,683.135 1755.42,683.135 1755.98,683.135 1756.54,683.135 1757.1,683.135 1757.66,683.135 1758.22,683.135 1758.78,683.135 1759.34,683.135 1759.89,683.135 1760.45,683.135 1761.01,683.135 1761.57,683.135 1762.13,683.135 1762.69,683.135 1763.25,683.135 1763.81,683.135 1764.37,683.135 1764.93,683.135 1765.49,683.135 1766.05,683.135 1766.61,683.135 1767.16,683.135 1767.72,683.135 1768.28,683.135 1768.84,683.135 1769.4,683.135 1769.96,683.135 1770.52,683.135 1771.08,683.135 1771.64,683.135 1772.2,683.135 1772.76,683.135 1773.32,683.135 1773.88,683.135 1774.43,683.135 1774.99,683.135 1775.55,683.135 1776.11,683.135 1776.67,683.135 1777.23,683.135 1777.79,683.135 1778.35,683.135 1778.91,683.135 1779.47,683.135 1780.03,683.135 1780.59,683.135 1781.15,683.135 1781.71,683.135 1782.26,683.135 1782.82,683.135 1783.38,683.135 1783.94,683.135 1784.5,683.135 1785.06,683.135 1785.62,683.135 1786.18,683.135 1786.74,683.135 1787.3,683.135 1787.86,683.135 1788.42,683.135 1788.98,683.135 1789.53,683.135 1790.09,683.135 1790.65,683.135 1791.21,683.135 1791.77,683.135 1792.33,683.135 1792.89,683.135 1793.45,683.135 1794.01,683.135 1794.57,683.135 1795.13,683.135 1795.69,683.135 1796.25,683.135 1796.8,683.135 1797.36,683.135 1797.92,683.135 1798.48,683.135 1799.04,683.135 1799.6,683.135 1800.16,683.135 1800.72,683.135 1801.28,683.135 1801.84,683.135 1802.4,683.135 1802.96,683.135 1803.52,683.135 1804.08,683.135 1804.63,683.135 1805.19,683.135 1805.75,683.135 1806.31,683.135 1806.87,683.135 1807.43,683.135 1807.99,683.135 1808.55,683.135 1809.11,683.135 1809.67,683.135 1810.23,683.135 1810.79,683.135 1811.35,683.135 1811.9,683.135 1812.46,683.135 1813.02,683.135 1813.58,683.135 1814.14,683.135 1814.7,683.135 1815.26,683.135 1815.82,683.135 1816.38,683.135 1816.94,683.135 1817.5,683.135 1818.06,683.135 1818.62,683.135 1819.18,683.135 1819.73,683.135 1820.29,683.135 1820.85,683.135 1821.41,683.135 1821.97,683.135 1822.53,683.135 1823.09,683.135 1823.65,683.135 1824.21,683.135 1824.77,683.135 1825.33,683.135 1825.89,683.135 1826.45,683.135 1827,683.135 1827.56,683.135 1828.12,683.135 1828.68,683.135 1829.24,683.135 1829.8,683.135 1830.36,683.135 1830.92,683.135 1831.48,683.135 1832.04,683.135 1832.6,683.135 1833.16,683.135 1833.72,683.135 1834.27,683.135 1834.83,683.135 1835.39,683.135 1835.95,683.135 1836.51,683.135 1837.07,683.135 1837.63,683.135 1838.19,683.135 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025841264201692 ± 0.02765203697212493\nProjected Energy: -4.012818805304997 ± (0.00729445081566471, 0.0068122894890469965)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.1174</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5877e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.9194e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5939e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.797e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.414e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4156e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613378\n -0.7590191922770977\n  0.13584182219622498\n  0.1578999869460862\n  0.8767114411781343\n  1.530592997097333\n  1.583573261186734\n  3.0728703303258627\n  3.1256726539518445\n  4.862107221562174\n  6.260694850380596\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
