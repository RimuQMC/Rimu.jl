var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21470333309133907 ± 0.0015991445048823666\n   G2(1) = 0.9164042648513603 ± 0.0007081549831341354\n   G2(2) = 0.9810311015905376 ± 0.000677881825841688\n   G2(3) = 0.9904259340248653 ± 0.0008490839084891408\n   G2(4) = 0.9810311015905376 ± 0.000677881825841688\n   G2(5) = 0.9164042648513603 ± 0.0007081549831341354\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.136988057611372 ± 0.1485237901822158\n   Replica 2: -3.9729124200530945 ± 0.14040135124613817\n   Replica 3: -4.010401942489766 ± 0.13851496492208482\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.68 2211.02,1003.68 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.545 2211.02,746.545 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.411 2211.02,489.411 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.276 2211.02,232.276 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.68 423.181,1003.68 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.545 423.181,746.545 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.411 423.181,489.411 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.276 423.181,232.276 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.18 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.18 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M290.043 1017.02 L306.363 1017.02 L306.363 1020.96 L284.418 1020.96 L284.418 1017.02 Q287.08 1014.27 291.664 1009.64 Q296.27 1004.99 297.451 1003.64 Q299.696 1001.12 300.576 999.386 Q301.478 997.626 301.478 995.936 Q301.478 993.182 299.534 991.446 Q297.613 989.71 294.511 989.71 Q292.312 989.71 289.858 990.474 Q287.427 991.237 284.65 992.788 L284.65 988.066 Q287.474 986.932 289.927 986.353 Q292.381 985.775 294.418 985.775 Q299.789 985.775 302.983 988.46 Q306.177 991.145 306.177 995.636 Q306.177 997.765 305.367 999.686 Q304.58 1001.58 302.474 1004.18 Q301.895 1004.85 298.793 1008.07 Q295.691 1011.26 290.043 1017.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 986.4 L334.58 986.4 L334.58 990.335 L320.506 990.335 L320.506 998.807 Q321.524 998.46 322.543 998.298 Q323.562 998.112 324.58 998.112 Q330.367 998.112 333.747 1001.28 Q337.126 1004.45 337.126 1009.87 Q337.126 1015.45 333.654 1018.55 Q330.182 1021.63 323.862 1021.63 Q321.687 1021.63 319.418 1021.26 Q317.173 1020.89 314.765 1020.15 L314.765 1015.45 Q316.849 1016.58 319.071 1017.14 Q321.293 1017.7 323.77 1017.7 Q327.774 1017.7 330.112 1015.59 Q332.45 1013.48 332.45 1009.87 Q332.45 1006.26 330.112 1004.15 Q327.774 1002.05 323.77 1002.05 Q321.895 1002.05 320.02 1002.46 Q318.168 1002.88 316.224 1003.76 L316.224 986.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 989.478 Q352.728 989.478 350.899 993.043 Q349.094 996.585 349.094 1003.71 Q349.094 1010.82 350.899 1014.39 Q352.728 1017.93 356.339 1017.93 Q359.973 1017.93 361.779 1014.39 Q363.608 1010.82 363.608 1003.71 Q363.608 996.585 361.779 993.043 Q359.973 989.478 356.339 989.478 M356.339 985.775 Q362.149 985.775 365.205 990.381 Q368.284 994.964 368.284 1003.71 Q368.284 1012.44 365.205 1017.05 Q362.149 1021.63 356.339 1021.63 Q350.529 1021.63 347.45 1017.05 Q344.395 1012.44 344.395 1003.71 Q344.395 994.964 347.45 990.381 Q350.529 985.775 356.339 985.775 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M286.062 729.265 L304.418 729.265 L304.418 733.2 L290.344 733.2 L290.344 741.672 Q291.363 741.325 292.381 741.163 Q293.4 740.978 294.418 740.978 Q300.205 740.978 303.585 744.149 Q306.964 747.321 306.964 752.737 Q306.964 758.316 303.492 761.418 Q300.02 764.496 293.701 764.496 Q291.525 764.496 289.256 764.126 Q287.011 763.756 284.603 763.015 L284.603 758.316 Q286.687 759.45 288.909 760.006 Q291.131 760.561 293.608 760.561 Q297.613 760.561 299.951 758.455 Q302.288 756.348 302.288 752.737 Q302.288 749.126 299.951 747.02 Q297.613 744.913 293.608 744.913 Q291.733 744.913 289.858 745.33 Q288.006 745.746 286.062 746.626 L286.062 729.265 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 732.344 Q322.566 732.344 320.737 735.909 Q318.932 739.45 318.932 746.58 Q318.932 753.686 320.737 757.251 Q322.566 760.793 326.177 760.793 Q329.811 760.793 331.617 757.251 Q333.446 753.686 333.446 746.58 Q333.446 739.45 331.617 735.909 Q329.811 732.344 326.177 732.344 M326.177 728.64 Q331.987 728.64 335.043 733.247 Q338.122 737.83 338.122 746.58 Q338.122 755.307 335.043 759.913 Q331.987 764.496 326.177 764.496 Q320.367 764.496 317.288 759.913 Q314.233 755.307 314.233 746.58 Q314.233 737.83 317.288 733.247 Q320.367 728.64 326.177 728.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 732.344 Q352.728 732.344 350.899 735.909 Q349.094 739.45 349.094 746.58 Q349.094 753.686 350.899 757.251 Q352.728 760.793 356.339 760.793 Q359.973 760.793 361.779 757.251 Q363.608 753.686 363.608 746.58 Q363.608 739.45 361.779 735.909 Q359.973 732.344 356.339 732.344 M356.339 728.64 Q362.149 728.64 365.205 733.247 Q368.284 737.83 368.284 746.58 Q368.284 755.307 365.205 759.913 Q362.149 764.496 356.339 764.496 Q350.529 764.496 347.45 759.913 Q344.395 755.307 344.395 746.58 Q344.395 737.83 347.45 733.247 Q350.529 728.64 356.339 728.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M284.835 472.131 L307.057 472.131 L307.057 474.121 L294.511 506.691 L289.627 506.691 L301.432 476.066 L284.835 476.066 L284.835 472.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 472.131 L334.58 472.131 L334.58 476.066 L320.506 476.066 L320.506 484.538 Q321.524 484.191 322.543 484.029 Q323.562 483.844 324.58 483.844 Q330.367 483.844 333.747 487.015 Q337.126 490.186 337.126 495.603 Q337.126 501.181 333.654 504.283 Q330.182 507.362 323.862 507.362 Q321.687 507.362 319.418 506.992 Q317.173 506.621 314.765 505.88 L314.765 501.181 Q316.849 502.316 319.071 502.871 Q321.293 503.427 323.77 503.427 Q327.774 503.427 330.112 501.32 Q332.45 499.214 332.45 495.603 Q332.45 491.992 330.112 489.885 Q327.774 487.779 323.77 487.779 Q321.895 487.779 320.02 488.195 Q318.168 488.612 316.224 489.492 L316.224 472.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 475.209 Q352.728 475.209 350.899 478.774 Q349.094 482.316 349.094 489.445 Q349.094 496.552 350.899 500.117 Q352.728 503.658 356.339 503.658 Q359.973 503.658 361.779 500.117 Q363.608 496.552 363.608 489.445 Q363.608 482.316 361.779 478.774 Q359.973 475.209 356.339 475.209 M356.339 471.506 Q362.149 471.506 365.205 476.112 Q368.284 480.695 368.284 489.445 Q368.284 498.172 365.205 502.779 Q362.149 507.362 356.339 507.362 Q350.529 507.362 347.45 502.779 Q344.395 498.172 344.395 489.445 Q344.395 480.695 347.45 476.112 Q350.529 471.506 356.339 471.506 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M256.664 245.621 L264.303 245.621 L264.303 219.255 L255.992 220.922 L255.992 216.663 L264.256 214.996 L268.932 214.996 L268.932 245.621 L276.571 245.621 L276.571 249.556 L256.664 249.556 L256.664 245.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M296.015 218.075 Q292.404 218.075 290.576 221.64 Q288.77 225.181 288.77 232.311 Q288.77 239.417 290.576 242.982 Q292.404 246.524 296.015 246.524 Q299.65 246.524 301.455 242.982 Q303.284 239.417 303.284 232.311 Q303.284 225.181 301.455 221.64 Q299.65 218.075 296.015 218.075 M296.015 214.371 Q301.826 214.371 304.881 218.978 Q307.96 223.561 307.96 232.311 Q307.96 241.038 304.881 245.644 Q301.826 250.228 296.015 250.228 Q290.205 250.228 287.127 245.644 Q284.071 241.038 284.071 232.311 Q284.071 223.561 287.127 218.978 Q290.205 214.371 296.015 214.371 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 218.075 Q322.566 218.075 320.737 221.64 Q318.932 225.181 318.932 232.311 Q318.932 239.417 320.737 242.982 Q322.566 246.524 326.177 246.524 Q329.811 246.524 331.617 242.982 Q333.446 239.417 333.446 232.311 Q333.446 225.181 331.617 221.64 Q329.811 218.075 326.177 218.075 M326.177 214.371 Q331.987 214.371 335.043 218.978 Q338.122 223.561 338.122 232.311 Q338.122 241.038 335.043 245.644 Q331.987 250.228 326.177 250.228 Q320.367 250.228 317.288 245.644 Q314.233 241.038 314.233 232.311 Q314.233 223.561 317.288 218.978 Q320.367 214.371 326.177 214.371 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 218.075 Q352.728 218.075 350.899 221.64 Q349.094 225.181 349.094 232.311 Q349.094 239.417 350.899 242.982 Q352.728 246.524 356.339 246.524 Q359.973 246.524 361.779 242.982 Q363.608 239.417 363.608 232.311 Q363.608 225.181 361.779 221.64 Q359.973 218.075 356.339 218.075 M356.339 214.371 Q362.149 214.371 365.205 218.978 Q368.284 223.561 368.284 232.311 Q368.284 241.038 365.205 245.644 Q362.149 250.228 356.339 250.228 Q350.529 250.228 347.45 245.644 Q344.395 241.038 344.395 232.311 Q344.395 223.561 347.45 218.978 Q350.529 214.371 356.339 214.371 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.276 4017.76,232.276 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.16 459.396,1247.71 459.964,1246.15 460.533,1244.57 461.101,1243.98 461.669,1243.31 462.238,1242.55 462.806,1240.65 463.375,1239.72 463.943,1238.73 464.511,1237.6 465.08,1235.38 465.648,1234.06 466.216,1231.64 466.785,1229.15 467.353,1227.56 467.921,1225.86 468.49,1223.99 469.058,1222.01 469.626,1218.83 470.195,1216.54 470.763,1214.07 471.331,1211.41 471.9,1208.62 472.468,1204.6 473.036,1199.45 473.605,1196.08 474.173,1191.55 474.741,1186.81 475.31,1181.89 475.878,1177.82 476.446,1173.62 477.015,1168.13 477.583,1163.47 478.152,1158.58 478.72,1153.49 479.288,1148.13 479.857,1142.49 480.425,1135.62 480.993,1129.59 481.562,1122.25 482.13,1114.65 482.698,1106.83 483.267,1098.77 483.835,1091.55 484.403,1084.12 484.972,1075.34 485.54,1064.38 486.108,1055.44 486.677,1046.27 487.245,1036.98 487.813,1028.53 488.382,1015.81 488.95,1004.86 489.518,994.89 490.087,984.867 490.655,975.811 491.224,966.677 491.792,957.363 492.36,947.994 492.929,933.271 493.497,921.763 494.065,911.103 494.634,899.49 495.202,888.898 495.77,877.386 496.339,866.834 496.907,856.208 497.475,845.631 498.044,835.149 498.612,825.654 499.18,814.973 499.749,805.547 500.317,795.155 500.885,781.615 501.454,769.339 502.022,759.001 502.59,747.698 503.159,738.611 503.727,728.614 504.295,718.639 504.864,706.769 505.432,696.193 506.001,685.539 506.569,676.042 507.137,667.737 507.706,658.531 508.274,649.455 508.842,640.479 509.411,626.469 509.979,619.953 510.547,613.375 511.116,601.662 511.684,593.281 512.252,583.124 512.821,573.201 513.389,563.425 513.957,556.949 514.526,549.636 515.094,543.328 515.662,535.101 516.231,526.067 516.799,520.302 517.367,514.568 517.936,508.031 518.504,501.405 519.072,496.876 519.641,489.356 520.209,480.899 520.778,475.996 521.346,469.821 521.914,464.741 522.483,459.041 523.051,453.157 523.619,448.546 524.188,440.897 524.756,435.583 525.324,431.418 525.893,427.367 526.461,422.396 527.029,417.485 527.598,411.911 528.166,408.206 528.734,403.68 529.303,399.122 529.871,393.874 530.439,391.797 531.008,388.694 531.576,385.425 532.144,381.285 532.713,377.207 533.281,373.401 533.85,370.569 534.418,366.817 534.986,361.994 535.555,356.462 536.123,351.151 536.691,349.107 537.26,343.982 537.828,343.534 538.396,338.596 538.965,335.679 539.533,335.136 540.101,330.616 540.67,328.19 541.238,324.885 541.806,323.594 542.375,322.447 542.943,322.025 543.511,319.583 544.08,317.076 544.648,313.781 545.216,312.592 545.785,310.32 546.353,308.228 546.921,308.436 547.49,308.403 548.058,307.293 548.627,304.15 549.195,301.278 549.763,301.205 550.332,300.232 550.9,296.028 551.468,292.953 552.037,291.236 552.605,290.59 553.173,288.124 553.742,288.617 554.31,283.888 554.878,284.633 555.447,282.996 556.015,283.736 556.583,283.161 557.152,282.534 557.72,281.04 558.288,280.739 558.857,280.246 559.425,278.758 559.993,279.177 560.562,278.718 561.13,276.228 561.698,275.987 562.267,273.525 562.835,273.076 563.404,271.605 563.972,269.299 564.54,269.311 565.109,267.949 565.677,267.767 566.245,267.908 566.814,266.68 567.382,267.421 567.95,266.2 568.519,266.063 569.087,265.732 569.655,263.613 570.224,262.531 570.792,260.296 571.36,260.487 571.929,260.554 572.497,260.637 573.065,260.544 573.634,258.381 574.202,259.61 574.77,260.53 575.339,258.295 575.907,256.19 576.476,257.393 577.044,256.392 577.612,257.325 578.181,256.034 578.749,257.118 579.317,257.848 579.886,255.47 580.454,252.238 581.022,252.508 581.591,253.598 582.159,254.413 582.727,254.303 583.296,255.143 583.864,255.905 584.432,253.631 585.001,252.36 585.569,252.26 586.137,251.211 586.706,251.113 587.274,251.091 587.842,251.333 588.411,249.087 588.979,250.113 589.547,250.137 590.116,250.224 590.684,248.116 591.253,248.419 591.821,245.378 592.389,245.604 592.958,247.687 593.526,248.843 594.094,246.691 594.663,245.727 595.231,244.883 595.799,245.091 596.368,246.313 596.936,246.413 597.504,245.501 598.073,244.631 598.641,245.895 599.209,245.105 599.778,243.172 600.346,243.474 600.914,243.945 601.483,243.882 602.051,245.956 602.619,245.879 603.188,244.928 603.756,243.999 604.325,244.036 604.893,243.097 605.461,245.4 606.03,245.373 606.598,244.446 607.166,243.338 607.735,243.184 608.303,240.338 608.871,238.704 609.44,237.168 610.008,236.644 610.576,237.275 611.145,238.847 611.713,238.443 612.281,240.897 612.85,240.386 613.418,240.641 613.986,239.874 614.555,242.246 615.123,241.372 615.691,240.622 616.26,240.835 616.828,242.009 617.396,241.143 617.965,240.454 618.533,240.65 619.102,236.705 619.67,237.326 620.238,234.975 620.807,236.541 621.375,237.038 621.943,236.602 622.512,238.109 623.08,239.602 623.648,238.786 624.217,238.28 624.785,237.808 625.353,239.336 625.922,241.796 626.49,240.878 627.058,241.14 627.627,242.337 628.195,244.423 628.763,243.303 629.332,244.328 629.9,242.096 630.468,243.185 631.037,245.135 631.605,242.868 632.173,242.792 632.742,240.533 633.31,239.522 633.879,240.792 634.447,241.944 635.015,241.101 635.584,240.971 636.152,237.938 636.72,231.932 637.289,234.654 637.857,235.867 638.425,237.457 638.994,236.568 639.562,238.966 640.13,239.148 640.699,238.121 641.267,238.37 641.835,239.649 642.404,241.109 642.972,241.01 643.54,240.246 644.109,241.299 644.677,240.263 645.245,241.466 645.814,241.409 646.382,239.529 646.951,238.636 647.519,239.537 648.087,239.566 648.656,238.639 649.224,238.918 649.792,239.114 650.361,240.252 650.929,241.575 651.497,241.645 652.066,239.552 652.634,237.438 653.202,237.652 653.771,242.117 654.339,241.829 654.907,241.626 655.476,241.317 656.044,236.919 656.612,237.122 657.181,235.334 657.749,235.795 658.317,236.28 658.886,235.507 659.454,233.781 660.022,236.379 660.591,234.231 661.159,235.65 661.728,234.959 662.296,234.212 662.864,235.647 663.433,234.723 664.001,234.078 664.569,233.529 665.138,234.03 665.706,235.349 666.274,234.457 666.843,234.038 667.411,234.339 667.979,235.567 668.548,234.709 669.116,236.226 669.684,234.527 670.253,236.031 670.821,236.347 671.389,235.691 671.958,235.049 672.526,236.56 673.094,235.406 673.663,235.69 674.231,235.753 674.799,233.862 675.368,233.05 675.936,232.321 676.505,233.798 677.073,233.327 677.641,234.825 678.21,235.965 678.778,235.123 679.346,235.557 679.915,234.955 680.483,239.222 681.051,242.253 681.62,242.979 682.188,242.903 682.756,242.411 683.325,242.342 683.893,239.993 684.461,237.694 685.03,236.765 685.598,236.862 686.166,235.816 686.735,237.18 687.303,233.934 687.871,234.393 688.44,234.805 689.008,235.127 689.577,235.368 690.145,235.34 690.713,232.662 691.282,231.051 691.85,231.374 692.418,232.791 692.987,234.137 693.555,233.418 694.123,233.66 694.692,234.047 695.26,233.257 695.828,233.627 696.397,234.908 696.965,236.46 697.533,237.51 698.102,239.54 698.67,239.3 699.238,242.026 699.807,242.854 700.375,240.298 700.943,239.17 701.512,238.913 702.08,237.647 702.648,237.603 703.217,239.716 703.785,239.472 704.354,240.356 704.922,240.255 705.49,239.85 706.059,239.555 706.627,243.251 707.195,243.692 707.764,241.934 708.332,240.514 708.9,240.22 709.469,238.738 710.037,238.442 710.605,240.139 711.174,238.765 711.742,240.36 712.31,239.963 712.879,239.431 713.447,239.185 714.015,238.026 714.584,235.737 715.152,234.87 715.72,234.892 716.289,234.053 716.857,235.087 717.425,236.028 717.994,235.998 718.562,235.837 719.131,233.547 719.699,232.615 720.267,231.672 720.836,232.944 721.404,232.129 721.972,232.435 722.541,231.695 723.109,233.145 723.677,234.261 724.246,233.287 724.814,233.518 725.382,234.626 725.951,233.515 726.519,230.839 727.087,230.179 727.656,231.506 728.224,230.464 728.792,232.727 729.361,232.947 729.929,235.222 730.497,234.123 731.066,234.114 731.634,234.188 732.203,234.24 732.771,234.29 733.339,232.15 733.908,232.04 734.476,233.205 735.044,233.334 735.613,232.53 736.181,232.68 736.749,230.776 737.318,231.976 737.886,230.495 738.454,232.015 739.023,234.385 739.591,234.447 740.159,234.358 740.728,234.428 741.296,232.452 741.864,236.055 742.433,235.892 743.001,235.849 743.569,235.806 744.138,236.818 744.706,235.405 745.274,235.406 745.843,237.421 746.411,240.464 746.98,241.172 747.548,240.753 748.116,240.284 748.685,239.753 749.253,239.239 749.821,238.953 750.39,240.685 750.958,241.2 751.526,239.438 752.095,240.054 752.663,239.735 753.231,239.289 753.8,239.081 754.368,239.763 754.936,238.096 755.505,237.753 756.073,234.289 756.641,235.115 757.21,234.992 757.778,231.793 758.346,231.784 758.915,231.721 759.483,232.911 760.052,231.764 760.62,231.849 761.188,231.879 761.757,232.092 762.325,232.229 762.893,233.104 763.462,232.037 764.03,233.163 764.598,233.36 765.167,234.344 765.735,233.449 766.303,234.429 766.872,234.438 767.44,234.262 768.008,234.133 768.577,230.909 769.145,231.077 769.713,228.059 770.282,228.502 770.85,228.892 771.418,228.309 771.987,228.71 772.555,229.002 773.123,229.37 773.692,230.888 774.26,232.234 774.829,231.281 775.397,231.429 775.965,231.571 776.534,232.538 777.102,230.63 777.67,229.882 778.239,229.999 778.807,233.146 779.375,232.372 779.944,232.699 780.512,232.831 781.08,230.783 781.649,229.935 782.217,228.035 782.785,229.471 783.354,229.724 783.922,230.022 784.49,230.3 785.059,230.798 785.627,230.076 786.195,230.296 786.764,231.606 787.332,232.815 787.9,232.791 788.469,232.693 789.037,229.637 789.606,231.126 790.174,231.367 790.742,233.604 791.311,233.602 791.879,232.33 792.447,233.328 793.016,234.566 793.584,234.542 794.152,233.427 794.721,233.426 795.289,234.222 795.857,231.164 796.426,231.306 796.994,230.522 797.562,230.976 798.131,231.067 798.699,232.402 799.267,231.279 799.836,232.65 800.404,232.683 800.972,233.025 801.541,230.863 802.109,232.052 802.678,233.534 803.246,234.508 803.814,233.417 804.383,233.532 804.951,231.596 805.519,232.744 806.088,232.887 806.656,233.107 807.224,233.508 807.793,233.644 808.361,233.854 808.929,235 809.498,235.926 810.066,235.774 810.634,235.654 811.203,234.593 811.771,231.499 812.339,230.708 812.908,230.971 813.476,233.458 814.044,233.606 814.613,232.659 815.181,233.678 815.749,234.92 816.318,232.69 816.886,233.852 817.455,231.949 818.023,233.181 818.591,232.02 819.16,233.18 819.728,232.091 820.296,232.18 820.865,231.265 821.433,229.499 822.001,229.846 822.57,232.157 823.138,230.117 823.706,231.586 824.275,232.742 824.843,234.035 825.411,235.112 825.98,235.055 826.548,235.072 827.116,235.078 827.685,235.926 828.253,236.849 828.821,236.638 829.39,235.462 829.958,235.331 830.526,235.151 831.095,234.973 831.663,235.051 832.232,238.157 832.8,239.968 833.368,239.578 833.937,238.928 834.505,237.359 835.073,235.185 835.642,236.215 836.21,233.207 836.778,233.394 837.347,233.367 837.915,232.275 838.483,231.37 839.052,232.609 839.62,233.813 840.188,233.616 840.757,232.824 841.325,234.967 841.893,235.99 842.462,233.698 843.03,233.636 843.598,232.714 844.167,234.687 844.735,233.549 845.304,233.502 845.872,233.461 846.44,233.503 847.009,234.586 847.577,235.693 848.145,235.343 848.714,235.122 849.282,233.19 849.85,235.317 850.419,235.118 850.987,235.065 851.555,236.005 852.124,235.751 852.692,235.479 853.26,236.216 853.829,237.058 854.397,236.125 854.965,235.892 855.534,235.639 856.102,235.251 856.67,236.044 857.239,235.833 857.807,236.384 858.375,235.061 858.944,234.774 859.512,234.69 860.081,234.365 860.649,233.176 861.217,232.209 861.786,235.352 862.354,232.872 862.922,232.912 863.491,231.805 864.059,233.971 864.627,233.818 865.196,234.068 865.764,235.982 866.332,235.901 866.901,234.462 867.469,235.242 868.037,232.861 868.606,233.18 869.174,232.18 869.742,231.304 870.311,230.453 870.879,227.425 871.447,228.891 872.016,230.131 872.584,230.056 873.152,228.252 873.721,226.553 874.289,225.749 874.858,226.186 875.426,224.688 875.994,223.125 876.563,221.815 877.131,221.495 877.699,224.423 878.268,227.311 878.836,227.732 879.404,226.931 879.973,228.35 880.541,230.757 881.109,232.963 881.678,233.723 882.246,234.617 882.814,234.568 883.383,235.488 883.951,235.498 884.519,237.388 885.088,237.007 885.656,234.8 886.224,235.646 886.793,235.578 887.361,235.362 887.93,236.237 888.498,235.858 889.066,234.705 889.635,234.746 890.203,233.724 890.771,231.529 891.34,230.603 891.908,230.714 892.476,232.161 893.045,233.593 893.613,232.567 894.181,231.506 894.75,232.558 895.318,231.468 895.886,232.556 896.455,233.538 897.023,231.352 897.591,230.357 898.16,227.442 898.728,228.999 899.296,227.245 899.865,228.535 900.433,230.907 901.001,229.003 901.57,231.55 902.138,231.553 902.707,231.793 903.275,231.974 903.843,233.189 904.412,231.343 904.98,231.339 905.548,232.693 906.117,231.865 906.685,233.959 907.253,233.908 907.822,234.713 908.39,234.257 908.958,234.179 909.527,237.269 910.095,237.884 910.663,236.351 911.232,236.105 911.8,234.788 912.368,234.406 912.937,232.178 913.505,233.13 914.073,232.946 914.642,233.179 915.21,232.228 915.779,232.346 916.347,232.171 916.915,235.321 917.484,234.207 918.052,233.034 918.62,231.007 919.189,230.164 919.757,231.511 920.325,231.537 920.894,230.499 921.462,230.696 922.03,231.095 922.599,230.012 923.167,228.326 923.735,230.507 924.304,229.786 924.872,229.075 925.44,228.223 926.009,228.667 926.577,228.86 927.145,228.177 927.714,228.655 928.282,230.013 928.85,231.227 929.419,231.234 929.987,232.478 930.556,231.424 931.124,231.444 931.692,231.606 932.261,233.632 932.829,231.659 933.397,232.822 933.966,233.924 934.534,234.779 935.102,235.813 935.671,235.507 936.239,235.344 936.807,236.27 937.376,235.111 937.944,233.914 938.512,233.734 939.081,233.692 939.649,233.55 940.217,236.329 940.786,235.126 941.354,234.994 941.922,236.756 942.491,236.49 943.059,236.199 943.627,233.838 944.196,233.89 944.764,232.977 945.333,235.038 945.901,234.871 946.469,234.66 947.038,234.662 947.606,236.66 948.174,236.064 948.743,238.172 949.311,238.923 949.879,236.535 950.448,235.344 951.016,234.114 951.584,235.09 952.153,231.972 952.721,232.016 953.289,232.071 953.858,230.021 954.426,227.873 954.994,227.251 955.563,225.67 956.131,225.452 956.699,225.978 957.268,226.445 957.836,225.663 958.405,227.342 958.973,226.883 959.541,228.366 960.11,230.784 960.678,228.825 961.246,230.051 961.815,233.458 962.383,235.332 962.951,235.13 963.52,235.943 964.088,235.755 964.656,235.558 965.225,235.36 965.793,236.325 966.361,235.337 966.93,236.266 967.498,235.032 968.066,235.846 968.635,234.528 969.203,232.395 969.771,234.599 970.34,234.204 970.908,233.963 971.476,233.908 972.045,233.749 972.613,235.746 973.182,236.465 973.75,236.057 974.318,238.791 974.887,238.549 975.455,238.155 976.023,235.717 976.592,235.438 977.16,235.353 977.728,234.003 978.297,235.724 978.865,232.479 979.433,233.396 980.002,233.159 980.57,234.124 981.138,232.995 981.707,234.931 982.275,233.705 982.843,231.277 983.412,231.348 983.98,229.056 984.548,228.21 985.117,227.515 985.685,227.796 986.253,227.987 986.822,227.089 987.39,228.548 987.959,228.893 988.527,228.276 989.095,226.784 989.664,229.232 990.232,227.357 990.8,226.521 991.369,225.789 991.937,228.43 992.505,227.794 993.074,226.121 993.642,225.667 994.21,227.017 994.779,227.322 995.347,227.75 995.915,226.018 996.484,229.667 997.052,229.881 997.62,229.277 998.189,229.789 998.757,229.075 999.325,229.627 999.894,229.878 1000.46,229.202 1001.03,229.702 1001.6,231.243 1002.17,232.284 1002.74,231.303 1003.3,233.487 1003.87,233.515 1004.44,233.737 1005.01,232.699 1005.58,232.779 1006.15,236.951 1006.71,235.865 1007.28,234.756 1007.85,235.756 1008.42,235.661 1008.99,234.494 1009.56,233.399 1010.12,232.337 1010.69,233.324 1011.26,231.371 1011.83,231.646 1012.4,230.733 1012.97,227.764 1013.53,230.451 1014.1,229.411 1014.67,229.886 1015.24,230.065 1015.81,231.251 1016.38,231.618 1016.94,232.929 1017.51,233.95 1018.08,234.052 1018.65,233.058 1019.22,233.252 1019.79,234.256 1020.35,235.349 1020.92,238.337 1021.49,236.765 1022.06,235.788 1022.63,233.632 1023.2,233.747 1023.76,232.835 1024.33,233.979 1024.9,229.945 1025.47,227.346 1026.04,230.752 1026.61,231.929 1027.17,233.911 1027.74,235.886 1028.31,235.962 1028.88,235.747 1029.45,236.529 1030.02,237.135 1030.58,235.883 1031.15,236.649 1031.72,236.561 1032.29,236.608 1032.86,236.244 1033.43,236.065 1033.99,237.814 1034.56,237.471 1035.13,235.94 1035.7,240.031 1036.27,240.425 1036.84,239.958 1037.4,239.621 1037.97,240.115 1038.54,239.781 1039.11,239.936 1039.68,238.228 1040.25,235.728 1040.81,233.599 1041.38,232.546 1041.95,233.521 1042.52,230.297 1043.09,230.691 1043.66,232.927 1044.22,232.832 1044.79,231.806 1045.36,231.945 1045.93,231.108 1046.5,230.256 1047.07,231.386 1047.63,231.456 1048.2,232.431 1048.77,233.415 1049.34,235.298 1049.91,236.246 1050.48,236.142 1051.05,235.873 1051.61,236.603 1052.18,235.983 1052.75,233.771 1053.32,233.61 1053.89,233.396 1054.46,231.17 1055.02,229.986 1055.59,230.132 1056.16,230.399 1056.73,227.458 1057.3,228.914 1057.87,229.11 1058.43,230.276 1059,231.573 1059.57,231.685 1060.14,235.649 1060.71,234.35 1061.28,232.934 1061.84,232.095 1062.41,231.186 1062.98,229.005 1063.55,229.409 1064.12,231.772 1064.69,233.778 1065.25,234.688 1065.82,234.353 1066.39,232.896 1066.96,237.06 1067.53,238.757 1068.1,237.155 1068.66,236.795 1069.23,234.368 1069.8,235.152 1070.37,231.75 1070.94,231.832 1071.51,233.017 1072.07,230.97 1072.64,226.997 1073.21,225.187 1073.78,223.704 1074.35,225.441 1074.92,224.941 1075.48,226.603 1076.05,230.279 1076.62,232.382 1077.19,234.532 1077.76,233.518 1078.33,231.359 1078.89,228.267 1079.46,228.432 1080.03,228.826 1080.6,229.157 1081.17,227.336 1081.74,228.767 1082.3,229.902 1082.87,230.921 1083.44,233.176 1084.01,233.268 1084.58,233.214 1085.15,234.104 1085.71,232.904 1086.28,235.869 1086.85,235.685 1087.42,236.482 1087.99,238.129 1088.56,237.765 1089.12,236.531 1089.69,236.446 1090.26,236.038 1090.83,235.709 1091.4,233.462 1091.97,233.278 1092.53,235.069 1093.1,234.598 1093.67,235.324 1094.24,233.977 1094.81,234.609 1095.38,234.644 1095.94,233.282 1096.51,233.092 1097.08,234.9 1097.65,236.884 1098.22,236.563 1098.79,236.28 1099.35,235.919 1099.92,235.46 1100.49,237.349 1101.06,235.972 1101.63,234.641 1102.2,234.42 1102.76,235.353 1103.33,236.053 1103.9,236.757 1104.47,235.269 1105.04,233.815 1105.61,234.614 1106.17,233.335 1106.74,232.306 1107.31,229.11 1107.88,227.885 1108.45,230.036 1109.02,230.129 1109.58,229 1110.15,229.069 1110.72,229.266 1111.29,227.292 1111.86,228.718 1112.43,230.02 1112.99,227.024 1113.56,228.303 1114.13,228.482 1114.7,228.788 1115.27,231.15 1115.84,230.954 1116.4,229.844 1116.97,230.07 1117.54,227.173 1118.11,227.613 1118.68,229.012 1119.25,233.225 1119.81,233.25 1120.38,233.352 1120.95,234.267 1121.52,235.355 1122.09,236.319 1122.66,237.044 1123.23,239.522 1123.79,239.719 1124.36,237.938 1124.93,238.412 1125.5,239.942 1126.07,238.117 1126.64,237.586 1127.2,237.149 1127.77,237.426 1128.34,235.823 1128.91,236.299 1129.48,237.112 1130.05,236.628 1130.61,238.039 1131.18,238.368 1131.75,236.872 1132.32,235.293 1132.89,234.027 1133.46,234.818 1134.02,234.47 1134.59,234.102 1135.16,232.6 1135.73,231.438 1136.3,229.425 1136.87,229.522 1137.43,231.503 1138,231.481 1138.57,231.189 1139.14,229.153 1139.71,229.139 1140.28,228.316 1140.84,228.259 1141.41,232.597 1141.98,231.39 1142.55,234.352 1143.12,235.01 1143.69,233.664 1144.25,233.521 1144.82,233.273 1145.39,232.34 1145.96,232.419 1146.53,233.417 1147.1,230.368 1147.66,231.484 1148.23,230.291 1148.8,231.18 1149.37,232.01 1149.94,232.059 1150.51,228.986 1151.07,228.035 1151.64,229.551 1152.21,229.633 1152.78,229.905 1153.35,231.293 1153.92,231.214 1154.48,232.145 1155.05,232.104 1155.62,231.108 1156.19,232.187 1156.76,231.137 1157.33,230.926 1157.89,230.727 1158.46,230.779 1159.03,230.88 1159.6,229.959 1160.17,228.833 1160.74,227.813 1161.3,225.935 1161.87,222.331 1162.44,225.014 1163.01,225.421 1163.58,225.834 1164.15,225.286 1164.71,226.619 1165.28,227.78 1165.85,228.129 1166.42,226.499 1166.99,226.101 1167.56,229.648 1168.12,232.899 1168.69,229.969 1169.26,229.045 1169.83,229.279 1170.4,229.27 1170.97,230.626 1171.53,228.908 1172.1,231.267 1172.67,231.316 1173.24,231.173 1173.81,230.297 1174.38,230.338 1174.94,228.666 1175.51,229.833 1176.08,231.204 1176.65,230.285 1177.22,229.228 1177.79,229.41 1178.35,229.701 1178.92,230.016 1179.49,229.132 1180.06,229.274 1180.63,230.581 1181.2,232.678 1181.76,233.6 1182.33,233.286 1182.9,232.185 1183.47,231.241 1184.04,232.24 1184.61,231.118 1185.17,230.122 1185.74,233.308 1186.31,232.528 1186.88,232.592 1187.45,231.573 1188.02,231.772 1188.58,230.988 1189.15,231.068 1189.72,231.317 1190.29,231.49 1190.86,230.68 1191.43,229.916 1192,233.387 1192.56,234.393 1193.13,234.39 1193.7,233.36 1194.27,233.348 1194.84,233.299 1195.41,233.231 1195.97,234.206 1196.54,234.05 1197.11,234.033 1197.68,234.988 1198.25,234.918 1198.82,233.742 1199.38,233.838 1199.95,232.762 1200.52,233.834 1201.09,231.713 1201.66,230.738 1202.23,228.916 1202.79,228.285 1203.36,230.364 1203.93,231.413 1204.5,230.476 1205.07,231.478 1205.64,232.554 1206.2,229.481 1206.77,230.783 1207.34,231.035 1207.91,232.046 1208.48,232.134 1209.05,232.128 1209.61,233.222 1210.18,233.344 1210.75,231.248 1211.32,230.267 1211.89,230.322 1212.46,229.533 1213.02,230.783 1213.59,232.814 1214.16,230.774 1214.73,232.029 1215.3,232.135 1215.87,231.959 1216.43,230.986 1217,230.106 1217.57,229.435 1218.14,228.603 1218.71,231.098 1219.28,234.149 1219.84,234.047 1220.41,234.038 1220.98,234.078 1221.55,231.91 1222.12,234.765 1222.69,232.706 1223.25,233.698 1223.82,233.511 1224.39,233.434 1224.96,234.321 1225.53,234.104 1226.1,231.992 1226.66,231.262 1227.23,231.732 1227.8,230.753 1228.37,230.98 1228.94,229.057 1229.51,231.23 1230.07,233.229 1230.64,233.327 1231.21,230.306 1231.78,231.778 1232.35,232.035 1232.92,232.27 1233.48,233.425 1234.05,232.338 1234.62,232.394 1235.19,232.484 1235.76,232.537 1236.33,233.638 1236.89,232.603 1237.46,232.856 1238.03,234.893 1238.6,234.738 1239.17,232.574 1239.74,232.838 1240.3,236.983 1240.87,235.727 1241.44,234.576 1242.01,235.471 1242.58,235.175 1243.15,237.091 1243.71,236.988 1244.28,233.476 1244.85,234.176 1245.42,235.938 1245.99,236.605 1246.56,234.473 1247.12,232.392 1247.69,234.696 1248.26,233.256 1248.83,232.222 1249.4,231.074 1249.97,231.162 1250.53,227.471 1251.1,227.831 1251.67,230.167 1252.24,229.268 1252.81,228.506 1253.38,228.915 1253.94,227.956 1254.51,229.275 1255.08,229.276 1255.65,228.674 1256.22,229.86 1256.79,226.027 1257.35,229.694 1257.92,227.917 1258.49,230.28 1259.06,232.543 1259.63,232.634 1260.2,231.562 1260.76,231.67 1261.33,230.759 1261.9,233.2 1262.47,235.029 1263.04,236.058 1263.61,233.691 1264.18,233.741 1264.74,233.661 1265.31,234.667 1265.88,233.622 1266.45,235.63 1267.02,236.435 1267.59,237.35 1268.15,238.024 1268.72,237.595 1269.29,237.115 1269.86,236.669 1270.43,236.268 1271,233.876 1271.56,234.895 1272.13,235.53 1272.7,234.292 1273.27,236.352 1273.84,237.18 1274.41,236.762 1274.97,235.374 1275.54,234.282 1276.11,235.11 1276.68,235.837 1277.25,237.592 1277.82,235.965 1278.38,234.785 1278.95,233.724 1279.52,234.859 1280.09,234.764 1280.66,235.665 1281.23,233.443 1281.79,233.263 1282.36,231.056 1282.93,232.145 1283.5,232.187 1284.07,234.244 1284.64,234.019 1285.2,233.845 1285.77,234.03 1286.34,230.669 1286.91,231.883 1287.48,232.584 1288.05,232.441 1288.61,231.336 1289.18,231.225 1289.75,232.332 1290.32,231.347 1290.89,231.217 1291.46,231.359 1292.02,233.215 1292.59,231.992 1293.16,231.984 1293.73,229.902 1294.3,231.009 1294.87,230.061 1295.43,230.095 1296,231.26 1296.57,230.381 1297.14,231.469 1297.71,230.347 1298.28,230.286 1298.84,230.354 1299.41,230.475 1299.98,232.555 1300.55,233.844 1301.12,231.756 1301.69,232.68 1302.25,232.413 1302.82,233.366 1303.39,233.384 1303.96,235.34 1304.53,234.085 1305.1,233.991 1305.66,231.859 1306.23,232.164 1306.8,233.156 1307.37,233.135 1307.94,234.116 1308.51,232.879 1309.07,233.845 1309.64,234.798 1310.21,236.725 1310.78,235.462 1311.35,234.237 1311.92,233.828 1312.48,233.753 1313.05,235.743 1313.62,237.385 1314.19,238.056 1314.76,236.41 1315.33,236.849 1315.89,234.337 1316.46,234.17 1317.03,233.837 1317.6,233.175 1318.17,230.935 1318.74,232.067 1319.3,230.932 1319.87,229.827 1320.44,234.18 1321.01,235.131 1321.58,233.723 1322.15,234.346 1322.71,234.11 1323.28,232.946 1323.85,231.619 1324.42,230.671 1324.99,230.703 1325.56,230.602 1326.12,230.585 1326.69,230.814 1327.26,230.838 1327.83,230.714 1328.4,229.644 1328.97,229.961 1329.53,230.158 1330.1,229.179 1330.67,229.378 1331.24,232.618 1331.81,232.599 1332.38,233.501 1332.94,233.452 1333.51,235.483 1334.08,235.3 1334.65,234.875 1335.22,234.629 1335.79,234.547 1336.36,233.261 1336.92,230.991 1337.49,227.859 1338.06,230.301 1338.63,231.476 1339.2,231.422 1339.77,230.418 1340.33,230.33 1340.9,230.433 1341.47,229.316 1342.04,229.439 1342.61,229.563 1343.18,228.925 1343.74,230.241 1344.31,229.244 1344.88,228.501 1345.45,227.665 1346.02,225.932 1346.59,227.392 1347.15,227.611 1347.72,230.208 1348.29,232.344 1348.86,233.55 1349.43,232.579 1350,233.753 1350.56,232.727 1351.13,231.646 1351.7,231.684 1352.27,230.71 1352.84,231.785 1353.41,234.765 1353.97,233.609 1354.54,233.379 1355.11,233.3 1355.68,233.411 1356.25,235.394 1356.82,237.286 1357.38,237.834 1357.95,237.35 1358.52,235.9 1359.09,234.531 1359.66,233.448 1360.23,231.461 1360.79,232.417 1361.36,232.359 1361.93,234.401 1362.5,232.154 1363.07,230.066 1363.64,231.49 1364.2,228.5 1364.77,228.651 1365.34,227.854 1365.91,226.034 1366.48,226.529 1367.05,226.802 1367.61,228.394 1368.18,227.739 1368.75,229.266 1369.32,228.362 1369.89,233.687 1370.46,235.465 1371.02,235.272 1371.59,235.038 1372.16,236.123 1372.73,234.862 1373.3,234.567 1373.87,234.326 1374.43,236.195 1375,235.956 1375.57,236.058 1376.14,235.864 1376.71,235.612 1377.28,234.254 1377.84,233.201 1378.41,233.263 1378.98,232.985 1379.55,233.946 1380.12,235.981 1380.69,235.567 1381.25,236.196 1381.82,235.657 1382.39,235.404 1382.96,235.271 1383.53,235.867 1384.1,235.85 1384.66,235.531 1385.23,235.526 1385.8,235.11 1386.37,233.799 1386.94,233.6 1387.51,234.474 1388.07,234.321 1388.64,235.2 1389.21,234.846 1389.78,232.692 1390.35,232.688 1390.92,232.57 1391.48,233.445 1392.05,231.88 1392.62,231.856 1393.19,231.73 1393.76,230.637 1394.33,228.456 1394.89,226.717 1395.46,228.884 1396.03,229.154 1396.6,230.508 1397.17,230.62 1397.74,229.678 1398.3,228.819 1398.87,230.085 1399.44,229.162 1400.01,228.133 1400.58,226.497 1401.15,227.896 1401.71,229.399 1402.28,229.418 1402.85,228.697 1403.42,226.886 1403.99,226.111 1404.56,224.383 1405.13,224.875 1405.69,225.345 1406.26,223.891 1406.83,225.401 1407.4,226.787 1407.97,228.152 1408.54,228.451 1409.1,224.492 1409.67,223 1410.24,222.688 1410.81,222.374 1411.38,223.073 1411.95,221.648 1412.51,221.747 1413.08,222.577 1413.65,223.291 1414.22,219.895 1414.79,225.166 1415.36,223.666 1415.92,226.532 1416.49,224.976 1417.06,224.726 1417.63,228.492 1418.2,227.019 1418.77,229.941 1419.33,229.98 1419.9,230.49 1420.47,229.78 1421.04,230.056 1421.61,232.595 1422.18,232.789 1422.74,230.795 1423.31,231.303 1423.88,230.694 1424.45,232.877 1425.02,233.103 1425.59,233.254 1426.15,232.636 1426.72,231.676 1427.29,231.823 1427.86,236.01 1428.43,235.884 1429,232.535 1429.56,231.689 1430.13,229.797 1430.7,230.185 1431.27,229.594 1431.84,229.113 1432.41,230.593 1432.97,230.933 1433.54,231.273 1434.11,231.572 1434.68,232.946 1435.25,232.866 1435.82,231.087 1436.38,230.152 1436.95,229.511 1437.52,230.731 1438.09,230.963 1438.66,230.237 1439.23,231.787 1439.79,231.877 1440.36,231.06 1440.93,234.632 1441.5,233.49 1442.07,235.798 1442.64,236.824 1443.2,237.852 1443.77,237.731 1444.34,237.579 1444.91,236.306 1445.48,237.069 1446.05,236.662 1446.61,236.459 1447.18,237.281 1447.75,239.147 1448.32,240.057 1448.89,244.782 1449.46,243.102 1450.02,243.29 1450.59,243.685 1451.16,241.911 1451.73,240.426 1452.3,239.727 1452.87,239.354 1453.43,238.962 1454,239.684 1454.57,238.259 1455.14,236.914 1455.71,236.589 1456.28,236.328 1456.84,237.044 1457.41,238.778 1457.98,237.329 1458.55,235.947 1459.12,235.701 1459.69,234.231 1460.25,234.081 1460.82,236.814 1461.39,234.299 1461.96,234.2 1462.53,235.251 1463.1,235.899 1463.66,235.579 1464.23,235.298 1464.8,236.103 1465.37,234.945 1465.94,235.872 1466.51,235.485 1467.07,235.069 1467.64,232.694 1468.21,231.699 1468.78,231.555 1469.35,231.482 1469.92,233.532 1470.48,234.222 1471.05,234.984 1471.62,234.821 1472.19,236.825 1472.76,234.475 1473.33,236.231 1473.89,235.769 1474.46,234.674 1475.03,237.198 1475.6,237.953 1476.17,237.485 1476.74,237.026 1477.31,237.521 1477.87,237.065 1478.44,234.571 1479.01,233.435 1479.58,230.313 1480.15,232.404 1480.72,232.342 1481.28,232.197 1481.85,231.004 1482.42,230.187 1482.99,232.44 1483.56,232.217 1484.13,231.166 1484.69,233.293 1485.26,232.188 1485.83,233.903 1486.4,234.6 1486.97,234.046 1487.54,233.787 1488.1,234.735 1488.67,232.165 1489.24,232.974 1489.81,231.966 1490.38,231.978 1490.95,231.813 1491.51,233.754 1492.08,233.833 1492.65,233.623 1493.22,232.434 1493.79,233.214 1494.36,232.052 1494.92,232.039 1495.49,233.988 1496.06,232.678 1496.63,232.412 1497.2,230.531 1497.77,230.548 1498.33,234.62 1498.9,231.231 1499.47,232.072 1500.04,231.948 1500.61,229.745 1501.18,228.732 1501.74,226.715 1502.31,227.854 1502.88,225.989 1503.45,226.378 1504.02,225.682 1504.59,223.916 1505.15,224.352 1505.72,222.793 1506.29,224.483 1506.86,223.945 1507.43,224.667 1508,225.144 1508.56,226.727 1509.13,228.43 1509.7,228.662 1510.27,230.009 1510.84,231.324 1511.41,231.361 1511.97,230.193 1512.54,232.331 1513.11,232.37 1513.68,231.172 1514.25,230.108 1514.82,229.149 1515.38,231.236 1515.95,228.065 1516.52,227.328 1517.09,228.669 1517.66,228.018 1518.23,230.349 1518.79,233.339 1519.36,232.447 1519.93,231.481 1520.5,231.517 1521.07,232.601 1521.64,231.73 1522.2,231.702 1522.77,232.859 1523.34,230.995 1523.91,231.218 1524.48,231.373 1525.05,231.406 1525.61,232.543 1526.18,231.34 1526.75,233.588 1527.32,233.632 1527.89,234.485 1528.46,233.086 1529.02,232.975 1529.59,232.825 1530.16,232.832 1530.73,230.684 1531.3,231.831 1531.87,233.899 1532.43,234.876 1533,235.814 1533.57,234.555 1534.14,232.252 1534.71,232.084 1535.28,233.053 1535.84,233.612 1536.41,232.393 1536.98,233.415 1537.55,235.523 1538.12,236.29 1538.69,234.894 1539.25,233.63 1539.82,233.479 1540.39,231.178 1540.96,232.186 1541.53,231.97 1542.1,231.001 1542.66,231.023 1543.23,230.061 1543.8,229.15 1544.37,230.311 1544.94,232.425 1545.51,230.458 1546.08,229.601 1546.64,228.936 1547.21,227.289 1547.78,227.44 1548.35,228.041 1548.92,228.427 1549.49,228.739 1550.05,229.998 1550.62,232.19 1551.19,232.395 1551.76,232.492 1552.33,232.468 1552.9,233.281 1553.46,237.459 1554.03,238.976 1554.6,241.572 1555.17,237.914 1555.74,237.564 1556.31,236.338 1556.87,239.178 1557.44,237.701 1558.01,239.079 1558.58,238.631 1559.15,238.223 1559.72,236.768 1560.28,237.221 1560.85,236.718 1561.42,235.361 1561.99,234.298 1562.56,234.088 1563.13,233.766 1563.69,234.652 1564.26,233.458 1564.83,232.03 1565.4,232.972 1565.97,232.935 1566.54,229.825 1567.1,229.79 1567.67,227.971 1568.24,228.452 1568.81,228.607 1569.38,228.857 1569.95,229.108 1570.51,228.028 1571.08,227.311 1571.65,224.639 1572.22,223.833 1572.79,225.367 1573.36,226.9 1573.92,227.389 1574.49,229.673 1575.06,232.016 1575.63,231.086 1576.2,231.098 1576.77,230.99 1577.33,231.264 1577.9,231.285 1578.47,231.482 1579.04,231.477 1579.61,232.731 1580.18,230.795 1580.74,231.262 1581.31,230.409 1581.88,233.756 1582.45,232.663 1583.02,232.68 1583.59,231.729 1584.15,229.913 1584.72,232.286 1585.29,231.522 1585.86,229.659 1586.43,230.803 1587,233.13 1587.56,235.331 1588.13,235.327 1588.7,236.184 1589.27,237.034 1589.84,237.704 1590.41,237.456 1590.97,238.089 1591.54,236.608 1592.11,236.185 1592.68,236.947 1593.25,237.626 1593.82,237.096 1594.38,235.633 1594.95,235.244 1595.52,233.979 1596.09,234.669 1596.66,233.473 1597.23,233.479 1597.79,232.513 1598.36,233.432 1598.93,235.263 1599.5,233.971 1600.07,233.706 1600.64,233.4 1601.2,235.433 1601.77,232.1 1602.34,229.82 1602.91,228.916 1603.48,227.018 1604.05,229.535 1604.61,228.346 1605.18,229.657 1605.75,230.974 1606.32,231.304 1606.89,231.628 1607.46,232.383 1608.02,230.199 1608.59,232.498 1609.16,232.494 1609.73,232.404 1610.3,229.485 1610.87,229.515 1611.43,229.626 1612,228.695 1612.57,228.18 1613.14,231.616 1613.71,230.502 1614.28,232.436 1614.84,236.527 1615.41,235.024 1615.98,236.883 1616.55,236.384 1617.12,236.07 1617.69,236.774 1618.26,234.378 1618.82,234.293 1619.39,234.921 1619.96,235.768 1620.53,234.42 1621.1,234.197 1621.67,232.788 1622.23,232.711 1622.8,232.541 1623.37,232.49 1623.94,232.595 1624.51,232.753 1625.08,231.75 1625.64,232.552 1626.21,233.631 1626.78,234.352 1627.35,233.982 1627.92,232.739 1628.49,231.819 1629.05,228.471 1629.62,229.736 1630.19,230.001 1630.76,231.2 1631.33,233.213 1631.9,233.358 1632.46,234.146 1633.03,233.94 1633.6,235.816 1634.17,237.397 1634.74,236.085 1635.31,235.847 1635.87,234.494 1636.44,233.258 1637.01,233.365 1637.58,234.229 1638.15,235.281 1638.72,234.125 1639.28,233.939 1639.85,233.725 1640.42,231.437 1640.99,232.399 1641.56,231.528 1642.13,232.49 1642.69,232.211 1643.26,230.964 1643.83,229.94 1644.4,230.146 1644.97,230.29 1645.54,229.351 1646.1,228.473 1646.67,228.672 1647.24,230.009 1647.81,232.3 1648.38,234.459 1648.95,233.87 1649.51,235.711 1650.08,236.324 1650.65,235.887 1651.22,235.219 1651.79,234.861 1652.36,234.84 1652.92,236.721 1653.49,235.079 1654.06,233.948 1654.63,233.628 1655.2,231.598 1655.77,232.478 1656.33,232.327 1656.9,231.238 1657.47,228.187 1658.04,227.363 1658.61,227.792 1659.18,229.03 1659.74,229.026 1660.31,231.188 1660.88,230.185 1661.45,228.381 1662.02,228.669 1662.59,228.902 1663.15,228.197 1663.72,229.495 1664.29,228.467 1664.86,227.763 1665.43,226.857 1666,230.464 1666.56,229.434 1667.13,230.552 1667.7,230.782 1668.27,231.857 1668.84,232.954 1669.41,233.918 1669.97,234.712 1670.54,233.575 1671.11,234.421 1671.68,233.249 1672.25,231.122 1672.82,231.031 1673.38,229.26 1673.95,229.428 1674.52,228.73 1675.09,228.025 1675.66,228.262 1676.23,227.358 1676.79,225.701 1677.36,225.11 1677.93,224.81 1678.5,226.245 1679.07,225.511 1679.64,227.05 1680.2,227.59 1680.77,227.896 1681.34,228.182 1681.91,230.764 1682.48,231.082 1683.05,230.235 1683.61,230.547 1684.18,230.807 1684.75,230.835 1685.32,231.079 1685.89,233.534 1686.46,232.612 1687.02,231.703 1687.59,228.677 1688.16,226.854 1688.73,226.351 1689.3,225.402 1689.87,223.001 1690.44,223.541 1691,224.211 1691.57,226.878 1692.14,228.349 1692.71,230.879 1693.28,232.247 1693.85,235.638 1694.41,235.423 1694.98,236.528 1695.55,237.42 1696.12,235.995 1696.69,236.968 1697.26,237.581 1697.82,238.356 1698.39,237.039 1698.96,234.689 1699.53,233.499 1700.1,233.653 1700.67,233.963 1701.23,234.058 1701.8,234.102 1702.37,234.05 1702.94,234.242 1703.51,234.236 1704.08,235.146 1704.64,231.92 1705.21,230.086 1705.78,229.287 1706.35,229.659 1706.92,229.886 1707.49,228.115 1708.05,229.456 1708.62,230.75 1709.19,231.209 1709.76,231.331 1710.33,232.46 1710.9,235.585 1711.46,234.384 1712.03,233.336 1712.6,233.431 1713.17,233.344 1713.74,232.359 1714.31,233.613 1714.87,233.667 1715.44,235.842 1716.01,235.613 1716.58,235.285 1717.15,235.199 1717.72,234.746 1718.28,232.515 1718.85,231.659 1719.42,231.756 1719.99,231.899 1720.56,233.909 1721.13,234.016 1721.69,233.791 1722.26,234.553 1722.83,235.366 1723.4,235.288 1723.97,234.109 1724.54,233.11 1725.1,233.05 1725.67,233.904 1726.24,232.735 1726.81,233.661 1727.38,233.598 1727.95,234.625 1728.51,233.533 1729.08,233.437 1729.65,233.165 1730.22,232.929 1730.79,231.802 1731.36,232.18 1731.92,230.133 1732.49,230.194 1733.06,231.343 1733.63,233.522 1734.2,235.594 1734.77,237.361 1735.33,235.744 1735.9,236.371 1736.47,236.058 1737.04,235.874 1737.61,238.559 1738.18,236.923 1738.74,234.318 1739.31,235.166 1739.88,233.938 1740.45,234.809 1741.02,237.99 1741.59,237.337 1742.15,235.882 1742.72,238.803 1743.29,238.162 1743.86,237.883 1744.43,237.451 1745,234.065 1745.56,235.918 1746.13,235.827 1746.7,235.3 1747.27,231.134 1747.84,232.228 1748.41,230.194 1748.97,228.218 1749.54,229.48 1750.11,228.48 1750.68,228.863 1751.25,226.243 1751.82,226.612 1752.38,227.063 1752.95,227.311 1753.52,226.737 1754.09,226.04 1754.66,226.586 1755.23,227.758 1755.79,229.122 1756.36,231.428 1756.93,230.543 1757.5,230.676 1758.07,229.876 1758.64,230.016 1759.21,229.252 1759.77,230.276 1760.34,230.494 1760.91,229.532 1761.48,229.732 1762.05,228.833 1762.62,230.229 1763.18,230.386 1763.75,230.51 1764.32,230.734 1764.89,232.853 1765.46,231.634 1766.03,230.582 1766.59,232.882 1767.16,232.69 1767.73,234.839 1768.3,234.818 1768.87,234.628 1769.44,234.363 1770,234.117 1770.57,235.337 1771.14,236.245 1771.71,235.592 1772.28,237.199 1772.85,238.121 1773.41,238.622 1773.98,240.077 1774.55,240.408 1775.12,241.719 1775.69,239.824 1776.26,239.35 1776.82,240.897 1777.39,240.142 1777.96,238.358 1778.53,238.75 1779.1,234.981 1779.67,232.79 1780.23,231.611 1780.8,232.727 1781.37,233.707 1781.94,233.553 1782.51,232.24 1783.08,233.412 1783.64,233.261 1784.21,231.003 1784.78,230.332 1785.35,229.369 1785.92,230.508 1786.49,230.437 1787.05,230.497 1787.62,230.646 1788.19,231.544 1788.76,230.503 1789.33,229.523 1789.9,231.7 1790.46,231.693 1791.03,230.693 1791.6,231.726 1792.17,230.841 1792.74,229.809 1793.31,229.891 1793.87,228.864 1794.44,222.562 1795.01,223.195 1795.58,224.831 1796.15,226.281 1796.72,226.772 1797.28,225.115 1797.85,225.63 1798.42,229.413 1798.99,229.601 1799.56,229.701 1800.13,227.992 1800.69,228.283 1801.26,227.374 1801.83,227.69 1802.4,228 1802.97,229.168 1803.54,229.466 1804.1,231.707 1804.67,231.758 1805.24,228.944 1805.81,230.297 1806.38,230.467 1806.95,230.649 1807.51,230.664 1808.08,231.878 1808.65,231.033 1809.22,229.098 1809.79,227.357 1810.36,228.765 1810.92,231.157 1811.49,230.17 1812.06,229.46 1812.63,226.696 1813.2,227.099 1813.77,229.523 1814.33,230.875 1814.9,232.06 1815.47,232.293 1816.04,232.461 1816.61,233.444 1817.18,233.628 1817.74,234.798 1818.31,234.696 1818.88,235.864 1819.45,235.697 1820.02,233.452 1820.59,233.434 1821.15,233.446 1821.72,235.344 1822.29,232.034 1822.86,228.892 1823.43,228.031 1824,229.376 1824.56,230.69 1825.13,232.063 1825.7,233.294 1826.27,235.464 1826.84,238.233 1827.41,234.576 1827.97,234.404 1828.54,234.125 1829.11,234.122 1829.68,233.072 1830.25,233.018 1830.82,231.097 1831.39,231.209 1831.95,230.216 1832.52,230.435 1833.09,230.779 1833.66,229.116 1834.23,229.21 1834.8,228.798 1835.36,229.202 1835.93,227.524 1836.5,228.945 1837.07,229.131 1837.64,228.567 1838.21,230.69 1838.77,230.816 1839.34,231.069 1839.91,229.129 1840.48,227.521 1841.05,228.125 1841.62,229.644 1842.18,232.072 1842.75,232.102 1843.32,231.088 1843.89,231.221 1844.46,233.289 1845.03,233.414 1845.59,233.586 1846.16,234.999 1846.73,235.032 1847.3,232.684 1847.87,232.751 1848.44,230.743 1849,230.831 1849.57,231.156 1850.14,232.081 1850.71,230.385 1851.28,232.784 1851.85,232.951 1852.41,233.906 1852.98,236.618 1853.55,236.205 1854.12,237.146 1854.69,236.955 1855.26,237.737 1855.82,238.531 1856.39,238.146 1856.96,236.571 1857.53,235.42 1858.1,235.224 1858.67,234.029 1859.23,233.07 1859.8,233.938 1860.37,235.715 1860.94,234.582 1861.51,235.3 1862.08,236.187 1862.64,235.936 1863.21,236.769 1863.78,235.502 1864.35,235.263 1864.92,233.816 1865.49,232.883 1866.05,236.136 1866.62,235.917 1867.19,234.701 1867.76,233.607 1868.33,233.475 1868.9,233.412 1869.46,232.2 1870.03,230.08 1870.6,229.1 1871.17,229.58 1871.74,228.719 1872.31,229.918 1872.87,228.102 1873.44,229.287 1874.01,229.454 1874.58,229.789 1875.15,230.118 1875.72,229.624 1876.28,231.007 1876.85,233.309 1877.42,232.103 1877.99,233.086 1878.56,233.135 1879.13,232.122 1879.69,231.131 1880.26,232.283 1880.83,232.146 1881.4,233.079 1881.97,232.068 1882.54,231.981 1883.1,233.136 1883.67,231.087 1884.24,230.103 1884.81,230.258 1885.38,230.523 1885.95,229.659 1886.51,230.809 1887.08,229.931 1887.65,231.292 1888.22,232.176 1888.79,231.275 1889.36,231.382 1889.92,232.644 1890.49,231.581 1891.06,231.633 1891.63,231.894 1892.2,231.975 1892.77,231.824 1893.33,228.996 1893.9,231.473 1894.47,231.579 1895.04,231.86 1895.61,230.849 1896.18,229.9 1896.74,232.21 1897.31,232.22 1897.88,231.223 1898.45,231.266 1899.02,232.617 1899.59,231.735 1900.16,232.993 1900.72,231.781 1901.29,232.056 1901.86,232.052 1902.43,235.221 1903,238.265 1903.57,238.971 1904.13,238.563 1904.7,237.265 1905.27,239.13 1905.84,238.499 1906.41,238.055 1906.98,235.594 1907.54,234.243 1908.11,233.07 1908.68,234.036 1909.25,232.115 1909.82,234.443 1910.39,235.553 1910.95,237.556 1911.52,237.994 1912.09,238.685 1912.66,238.31 1913.23,239.968 1913.8,241.497 1914.36,240.989 1914.93,243.271 1915.5,241.431 1916.07,239.645 1916.64,238.168 1917.21,240.849 1917.77,238.138 1918.34,238.613 1918.91,238.038 1919.48,239.761 1920.05,239.988 1920.62,239.269 1921.18,238.635 1921.75,238.904 1922.32,240.295 1922.89,240.545 1923.46,239.845 1924.03,238.195 1924.59,237.63 1925.16,238.173 1925.73,235.493 1926.3,234.135 1926.87,232.663 1927.44,232.302 1928,229.973 1928.57,230.898 1929.14,230.993 1929.71,229.89 1930.28,228.736 1930.85,228.918 1931.41,228.838 1931.98,230.905 1932.55,230.851 1933.12,230.777 1933.69,232.757 1934.26,232.198 1934.82,231.025 1935.39,232.766 1935.96,232.511 1936.53,232.382 1937.1,230.138 1937.67,226.001 1938.23,225.34 1938.8,224.564 1939.37,226.019 1939.94,225.158 1940.51,224.551 1941.08,224.943 1941.64,225.332 1942.21,225.592 1942.78,223.791 1943.35,227.338 1943.92,227.387 1944.49,228.874 1945.05,230.149 1945.62,230.951 1946.19,230.79 1946.76,231.864 1947.33,229.808 1947.9,231.183 1948.46,232.222 1949.03,232.215 1949.6,234.259 1950.17,235.932 1950.74,235.684 1951.31,235.61 1951.87,236.506 1952.44,235.178 1953.01,233.713 1953.58,233.448 1954.15,235.178 1954.72,235.896 1955.28,235.598 1955.85,234.22 1956.42,233.975 1956.99,233.584 1957.56,231.248 1958.13,233.115 1958.69,233.905 1959.26,235.751 1959.83,234.21 1960.4,233.864 1960.97,236.49 1961.54,237.038 1962.1,236.202 1962.67,236.967 1963.24,235.518 1963.81,233.085 1964.38,232.003 1964.95,231.741 1965.51,231.549 1966.08,231.682 1966.65,231.749 1967.22,230.598 1967.79,230.605 1968.36,229.672 1968.92,230.714 1969.49,230.572 1970.06,228.54 1970.63,228.568 1971.2,228.581 1971.77,226.657 1972.34,226.882 1972.9,227.03 1973.47,228.58 1974.04,229.736 1974.61,230.827 1975.18,230.994 1975.75,230.109 1976.31,229.2 1976.88,229.418 1977.45,231.657 1978.02,232.615 1978.59,230.301 1979.16,231.415 1979.72,231.456 1980.29,230.394 1980.86,230.562 1981.43,230.62 1982,230.595 1982.57,232.808 1983.13,233.608 1983.7,231.424 1984.27,230.319 1984.84,228.401 1985.41,228.563 1985.98,227.773 1986.54,228.034 1987.11,228.315 1987.68,230.7 1988.25,230.722 1988.82,229.065 1989.39,228.305 1989.95,228.508 1990.52,229.939 1991.09,228.755 1991.66,229.023 1992.23,230.383 1992.8,230.428 1993.36,231.474 1993.93,232.505 1994.5,234.608 1995.07,235.461 1995.64,232.037 1996.21,232.183 1996.77,233.193 1997.34,233.157 1997.91,234.1 1998.48,233.971 1999.05,232.939 1999.62,231.803 2000.18,232.877 2000.75,232.857 2001.32,234.762 2001.89,235.576 2002.46,235.356 2003.03,233.182 2003.59,232.149 2004.16,232.123 2004.73,233.096 2005.3,231.792 2005.87,231.743 2006.44,233.871 2007,232.846 2007.57,231.734 2008.14,230.717 2008.71,231.847 2009.28,230.933 2009.85,230.968 2010.41,231.071 2010.98,233.303 2011.55,234.408 2012.12,236.24 2012.69,235.738 2013.26,234.336 2013.82,232.302 2014.39,232.305 2014.96,231.467 2015.53,230.335 2016.1,231.479 2016.67,231.486 2017.23,231.494 2017.8,232.69 2018.37,230.827 2018.94,229.706 2019.51,230.064 2020.08,229.347 2020.64,229.58 2021.21,228.558 2021.78,224.703 2022.35,225.164 2022.92,226.771 2023.49,227.42 2024.05,225.579 2024.62,227.138 2025.19,223.643 2025.76,224.3 2026.33,225.03 2026.9,225.734 2027.46,228.163 2028.03,225.461 2028.6,225.852 2029.17,229.638 2029.74,230.209 2030.31,227.192 2030.87,227.611 2031.44,229.113 2032.01,228.219 2032.58,229.539 2033.15,230.986 2033.72,232.145 2034.28,231.411 2034.85,231.696 2035.42,229.616 2035.99,231.063 2036.56,231.236 2037.13,231.357 2037.69,230.656 2038.26,228.948 2038.83,230.519 2039.4,230.81 2039.97,233.112 2040.54,232.234 2041.11,231.183 2041.67,233.568 2042.24,232.521 2042.81,232.72 2043.38,233.972 2043.95,234.076 2044.52,233.253 2045.08,231.349 2045.65,230.475 2046.22,231.835 2046.79,231.967 2047.36,230.039 2047.93,231.328 2048.49,233.469 2049.06,231.344 2049.63,230.517 2050.2,230.628 2050.77,231.895 2051.34,233.062 2051.9,232.198 2052.47,235.307 2053.04,235.194 2053.61,235.225 2054.18,235.116 2054.75,233.034 2055.31,233.176 2055.88,233.135 2056.45,230.022 2057.02,232.344 2057.59,233.576 2058.16,234.759 2058.72,233.729 2059.29,231.705 2059.86,232.947 2060.43,232.005 2061,232.263 2061.57,233.248 2062.13,233.194 2062.7,233.215 2063.27,237.264 2063.84,236.904 2064.41,237.919 2064.98,237.683 2065.54,236.355 2066.11,236.286 2066.68,234.982 2067.25,234.906 2067.82,236.837 2068.39,238.658 2068.95,239.147 2069.52,237.732 2070.09,239.423 2070.66,237.814 2071.23,234.489 2071.8,236.639 2072.36,237.368 2072.93,237.025 2073.5,235.528 2074.07,234.269 2074.64,232.168 2075.21,231.999 2075.77,232.074 2076.34,233.1 2076.91,233.116 2077.48,231.943 2078.05,233.107 2078.62,233.222 2079.18,232.973 2079.75,232.05 2080.32,229.966 2080.89,231.366 2081.46,232.154 2082.03,230.228 2082.59,231.29 2083.16,231.243 2083.73,230.528 2084.3,230.473 2084.87,229.505 2085.44,229.697 2086,228.894 2086.57,228.988 2087.14,228.317 2087.71,229.728 2088.28,228.866 2088.85,228.021 2089.41,227.182 2089.98,226.472 2090.55,226.847 2091.12,227.187 2091.69,226.477 2092.26,227.059 2092.82,228.432 2093.39,226.857 2093.96,226.306 2094.53,227.912 2095.1,225.416 2095.67,226.848 2096.23,228.444 2096.8,230.106 2097.37,230.475 2097.94,231.915 2098.51,233.184 2099.08,233.152 2099.64,232.24 2100.21,232.388 2100.78,233.618 2101.35,230.628 2101.92,230.985 2102.49,231.207 2103.05,232.302 2103.62,230.438 2104.19,231.728 2104.76,232.881 2105.33,234 2105.9,233.816 2106.46,232.837 2107.03,235.951 2107.6,238.746 2108.17,238.536 2108.74,237.401 2109.31,235.094 2109.87,237.048 2110.44,235.911 2111.01,236.785 2111.58,236.475 2112.15,234.175 2112.72,232.193 2113.29,233.231 2113.85,233.178 2114.42,234.016 2114.99,232.939 2115.56,233.072 2116.13,232.305 2116.7,234.188 2117.26,237.15 2117.83,238.115 2118.4,234.561 2118.97,233.484 2119.54,233.225 2120.11,235.229 2120.67,237.128 2121.24,236.817 2121.81,237.607 2122.38,238.24 2122.95,237.837 2123.52,238.339 2124.08,237.033 2124.65,237.711 2125.22,236.348 2125.79,234.078 2126.36,233.674 2126.93,233.533 2127.49,233.404 2128.06,233.234 2128.63,234.427 2129.2,237.468 2129.77,236.04 2130.34,236.755 2130.9,234.058 2131.47,235.041 2132.04,234.677 2132.61,234.336 2133.18,233.214 2133.75,232.882 2134.31,233.791 2134.88,234.893 2135.45,232.496 2136.02,230.407 2136.59,231.518 2137.16,230.544 2137.72,229.525 2138.29,230.524 2138.86,233.744 2139.43,232.637 2140,232.759 2140.57,229.801 2141.13,229.994 2141.7,229.886 2142.27,229.061 2142.84,229.171 2143.41,231.537 2143.98,232.707 2144.54,230.311 2145.11,230.401 2145.68,234.613 2146.25,235.462 2146.82,235.134 2147.39,233.746 2147.95,232.685 2148.52,233.854 2149.09,233.628 2149.66,235.406 2150.23,235.353 2150.8,233.909 2151.36,235.826 2151.93,235.386 2152.5,234.038 2153.07,235.055 2153.64,233.942 2154.21,231.683 2154.77,230.614 2155.34,230.671 2155.91,229.627 2156.48,230.662 2157.05,230.919 2157.62,230.883 2158.18,231.056 2158.75,231.91 2159.32,232.018 2159.89,231.933 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.019 ± 0.026\n  with uncertainty of ± 0.0023272616334357073\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01537 ± (0.00236208, 0.00241601) (MC)\n  95% confidence interval: [-4.02018, -4.01055] (MC)\n  linear error propagation: -4.01543 ± 0.00247161\n  |δ_y| = |0.00135034| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015373064557642, val_l = 0.004807543276260873, val_u = 0.0048232033891020265)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.53 2211.02,1146.53 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,976.268 2211.02,976.268 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,806.004 2211.02,806.004 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,635.741 2211.02,635.741 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,465.477 2211.02,465.477 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,295.213 2211.02,295.213 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.53 365.751,1146.53 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,976.268 365.751,976.268 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,806.004 365.751,806.004 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,635.741 365.751,635.741 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,465.477 365.751,465.477 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,295.213 365.751,295.213 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M298.909 1132.33 Q295.298 1132.33 293.469 1135.9 Q291.664 1139.44 291.664 1146.57 Q291.664 1153.67 293.469 1157.24 Q295.298 1160.78 298.909 1160.78 Q302.543 1160.78 304.349 1157.24 Q306.177 1153.67 306.177 1146.57 Q306.177 1139.44 304.349 1135.9 Q302.543 1132.33 298.909 1132.33 M298.909 1128.63 Q304.719 1128.63 307.775 1133.23 Q310.853 1137.82 310.853 1146.57 Q310.853 1155.29 307.775 1159.9 Q304.719 1164.48 298.909 1164.48 Q293.099 1164.48 290.02 1159.9 Q286.964 1155.29 286.964 1146.57 Q286.964 1137.82 290.02 1133.23 Q293.099 1128.63 298.909 1128.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M259.557 989.613 L267.196 989.613 L267.196 963.247 L258.886 964.914 L258.886 960.655 L267.15 958.988 L271.826 958.988 L271.826 989.613 L279.465 989.613 L279.465 993.548 L259.557 993.548 L259.557 989.613 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 962.067 Q295.298 962.067 293.469 965.632 Q291.664 969.173 291.664 976.303 Q291.664 983.409 293.469 986.974 Q295.298 990.516 298.909 990.516 Q302.543 990.516 304.349 986.974 Q306.177 983.409 306.177 976.303 Q306.177 969.173 304.349 965.632 Q302.543 962.067 298.909 962.067 M298.909 958.363 Q304.719 958.363 307.775 962.97 Q310.853 967.553 310.853 976.303 Q310.853 985.03 307.775 989.636 Q304.719 994.219 298.909 994.219 Q293.099 994.219 290.02 989.636 Q286.964 985.03 286.964 976.303 Q286.964 967.553 290.02 962.97 Q293.099 958.363 298.909 958.363 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M262.775 819.349 L279.094 819.349 L279.094 823.284 L257.15 823.284 L257.15 819.349 Q259.812 816.595 264.395 811.965 Q269.002 807.312 270.182 805.97 Q272.428 803.446 273.307 801.71 Q274.21 799.951 274.21 798.261 Q274.21 795.507 272.266 793.771 Q270.344 792.034 267.242 792.034 Q265.043 792.034 262.59 792.798 Q260.159 793.562 257.381 795.113 L257.381 790.391 Q260.205 789.257 262.659 788.678 Q265.113 788.099 267.15 788.099 Q272.52 788.099 275.715 790.784 Q278.909 793.47 278.909 797.96 Q278.909 800.09 278.099 802.011 Q277.312 803.909 275.205 806.502 Q274.627 807.173 271.525 810.391 Q268.423 813.585 262.775 819.349 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 791.803 Q295.298 791.803 293.469 795.368 Q291.664 798.909 291.664 806.039 Q291.664 813.145 293.469 816.71 Q295.298 820.252 298.909 820.252 Q302.543 820.252 304.349 816.71 Q306.177 813.145 306.177 806.039 Q306.177 798.909 304.349 795.368 Q302.543 791.803 298.909 791.803 M298.909 788.099 Q304.719 788.099 307.775 792.706 Q310.853 797.289 310.853 806.039 Q310.853 814.766 307.775 819.372 Q304.719 823.956 298.909 823.956 Q293.099 823.956 290.02 819.372 Q286.964 814.766 286.964 806.039 Q286.964 797.289 290.02 792.706 Q293.099 788.099 298.909 788.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M272.914 634.386 Q276.27 635.104 278.145 637.372 Q280.043 639.641 280.043 642.974 Q280.043 648.09 276.525 650.891 Q273.006 653.692 266.525 653.692 Q264.349 653.692 262.034 653.252 Q259.742 652.835 257.289 651.979 L257.289 647.465 Q259.233 648.599 261.548 649.178 Q263.863 649.757 266.386 649.757 Q270.784 649.757 273.076 648.021 Q275.39 646.284 275.39 642.974 Q275.39 639.919 273.238 638.206 Q271.108 636.47 267.289 636.47 L263.261 636.47 L263.261 632.627 L267.474 632.627 Q270.923 632.627 272.752 631.261 Q274.58 629.873 274.58 627.28 Q274.58 624.618 272.682 623.206 Q270.807 621.771 267.289 621.771 Q265.367 621.771 263.168 622.187 Q260.969 622.604 258.33 623.484 L258.33 619.317 Q260.992 618.576 263.307 618.206 Q265.645 617.836 267.705 617.836 Q273.029 617.836 276.131 620.266 Q279.233 622.673 279.233 626.794 Q279.233 629.664 277.59 631.655 Q275.946 633.623 272.914 634.386 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 621.539 Q295.298 621.539 293.469 625.104 Q291.664 628.646 291.664 635.775 Q291.664 642.882 293.469 646.447 Q295.298 649.988 298.909 649.988 Q302.543 649.988 304.349 646.447 Q306.177 642.882 306.177 635.775 Q306.177 628.646 304.349 625.104 Q302.543 621.539 298.909 621.539 M298.909 617.836 Q304.719 617.836 307.775 622.442 Q310.853 627.025 310.853 635.775 Q310.853 644.502 307.775 649.109 Q304.719 653.692 298.909 653.692 Q293.099 653.692 290.02 649.109 Q286.964 644.502 286.964 635.775 Q286.964 627.025 290.02 622.442 Q293.099 617.836 298.909 617.836 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M271.594 452.271 L259.789 470.72 L271.594 470.72 L271.594 452.271 M270.367 448.197 L276.247 448.197 L276.247 470.72 L281.177 470.72 L281.177 474.609 L276.247 474.609 L276.247 482.757 L271.594 482.757 L271.594 474.609 L255.992 474.609 L255.992 470.095 L270.367 448.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 451.275 Q295.298 451.275 293.469 454.84 Q291.664 458.382 291.664 465.512 Q291.664 472.618 293.469 476.183 Q295.298 479.724 298.909 479.724 Q302.543 479.724 304.349 476.183 Q306.177 472.618 306.177 465.512 Q306.177 458.382 304.349 454.84 Q302.543 451.275 298.909 451.275 M298.909 447.572 Q304.719 447.572 307.775 452.178 Q310.853 456.762 310.853 465.512 Q310.853 474.238 307.775 478.845 Q304.719 483.428 298.909 483.428 Q293.099 483.428 290.02 478.845 Q286.964 474.238 286.964 465.512 Q286.964 456.762 290.02 452.178 Q293.099 447.572 298.909 447.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M258.793 277.933 L277.15 277.933 L277.15 281.868 L263.076 281.868 L263.076 290.34 Q264.094 289.993 265.113 289.831 Q266.131 289.646 267.15 289.646 Q272.937 289.646 276.316 292.817 Q279.696 295.988 279.696 301.405 Q279.696 306.984 276.224 310.086 Q272.752 313.164 266.432 313.164 Q264.256 313.164 261.988 312.794 Q259.742 312.424 257.335 311.683 L257.335 306.984 Q259.418 308.118 261.641 308.674 Q263.863 309.229 266.34 309.229 Q270.344 309.229 272.682 307.123 Q275.02 305.016 275.02 301.405 Q275.02 297.794 272.682 295.688 Q270.344 293.581 266.34 293.581 Q264.465 293.581 262.59 293.998 Q260.738 294.414 258.793 295.294 L258.793 277.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 281.012 Q295.298 281.012 293.469 284.576 Q291.664 288.118 291.664 295.248 Q291.664 302.354 293.469 305.919 Q295.298 309.461 298.909 309.461 Q302.543 309.461 304.349 305.919 Q306.177 302.354 306.177 295.248 Q306.177 288.118 304.349 284.576 Q302.543 281.012 298.909 281.012 M298.909 277.308 Q304.719 277.308 307.775 281.914 Q310.853 286.498 310.853 295.248 Q310.853 303.975 307.775 308.581 Q304.719 313.164 298.909 313.164 Q293.099 313.164 290.02 308.581 Q286.964 303.975 286.964 295.248 Q286.964 286.498 290.02 281.914 Q293.099 277.308 298.909 277.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.08 400.199,905.821 400.786,800.071 401.372,830.458 401.958,735.58 402.545,648.794 403.131,569.566 403.718,498.925 404.304,535.989 404.891,561.982 405.477,498.664 406.063,441.274 406.65,389.43 407.236,417.049 407.823,372.613 408.409,330.205 408.995,294.752 409.582,318.333 410.168,287.806 410.755,308.759 411.341,325.371 411.927,298.635 412.514,274.608 413.1,255.001 413.687,237.06 414.273,257.095 414.86,243.634 415.446,233.536 416.032,226.226 416.619,219.895 417.205,241.742 417.792,284.238 418.378,281.823 418.964,300.324 419.551,318.875 420.137,336.599 420.724,336.542 421.31,336.556 421.896,354.17 422.483,356.758 423.069,360.637 423.656,365.249 424.242,371.321 424.829,378.998 425.415,398.411 426.001,406.488 426.588,425.967 427.174,445.525 427.761,464.802 428.347,483.954 428.933,494.204 429.52,504.718 430.106,524.127 430.693,557.161 431.279,573.91 431.865,590.729 432.452,606.907 433.038,616.853 433.625,650.421 434.211,672.049 434.798,687.265 435.384,701.821 435.97,710.84 436.557,719.71 437.143,728.918 437.73,737.912 438.316,769.385 438.902,786.185 439.489,798.965 440.075,814.965 440.662,826.606 441.248,841.25 441.835,852.084 442.421,862.919 443.007,873.355 443.594,883.284 444.18,889.901 444.767,900.159 445.353,906.453 445.939,915.608 446.526,933.843 447.112,948.178 447.699,956.983 448.285,968.377 448.871,973.823 449.458,981.705 450.044,989.553 450.631,1002.2 451.217,1011.62 451.804,1021.25 452.39,1028.17 452.976,1032.38 453.563,1038.78 454.149,1044.98 454.736,1051.06 455.322,1068.32 455.908,1069.35 456.495,1070.65 457.081,1082.95 457.668,1088.38 458.254,1097.59 458.84,1106.42 459.427,1115.06 460.013,1117.32 460.6,1121.35 461.186,1123.56 461.773,1129.59 462.359,1137.28 462.945,1138.98 463.532,1140.74 464.118,1144.12 464.705,1147.79 465.291,1147.79 465.877,1153.3 466.464,1160.61 467.05,1161.78 467.637,1165.3 468.223,1167.04 468.809,1169.97 469.396,1173.35 469.982,1174.67 470.569,1181.26 471.155,1184.06 471.742,1185.06 472.328,1185.97 472.914,1188.5 473.501,1191.04 474.087,1194.79 474.674,1195.61 475.26,1197.85 475.846,1200.26 476.433,1203.87 477.019,1202.54 477.606,1202.9 478.192,1203.6 478.778,1205.77 479.365,1207.93 479.951,1209.76 480.538,1210.17 481.124,1212.08 481.711,1215.74 482.297,1220.59 482.883,1225.22 483.47,1224.99 484.056,1229.5 484.643,1227.04 485.229,1231.38 485.815,1232.8 486.402,1230.73 486.988,1234.62 487.575,1235.51 488.161,1237.75 488.748,1237.1 489.334,1236.26 489.92,1234.39 490.507,1235.51 491.093,1236.79 491.68,1239.29 492.266,1238.78 492.852,1239.89 493.439,1240.8 494.025,1238.4 494.612,1236.36 495.198,1235.88 495.784,1238.39 496.371,1240.58 496.957,1238.79 497.544,1238.31 498.13,1242.52 498.717,1245.2 499.303,1246 499.889,1245.32 500.476,1247.26 501.062,1245.03 501.649,1250.24 502.235,1247.78 502.821,1248.68 503.408,1246.25 503.994,1245.67 504.581,1245.18 505.167,1245.93 505.753,1245.04 506.34,1244.42 506.926,1245.23 507.513,1243.37 508.099,1242.75 508.686,1245.01 509.272,1244.16 509.858,1246.45 510.445,1245.96 511.031,1246.93 511.618,1249.1 512.204,1248.09 512.79,1249 513.377,1248.29 513.963,1247.13 514.55,1247.89 515.136,1245.93 515.722,1246.69 516.309,1245.96 516.895,1245.52 517.482,1247.57 518.068,1248.24 518.655,1250.53 519.241,1249.51 519.827,1248.66 520.414,1247.79 521,1247.15 521.587,1249.4 522.173,1246.99 522.759,1244.98 523.346,1247.32 523.932,1249.54 524.519,1247.23 525.105,1247.94 525.691,1246.01 526.278,1247.12 526.864,1244.98 527.451,1243.31 528.037,1245.91 528.624,1249.75 529.21,1248.84 529.796,1246.8 530.383,1245.1 530.969,1244.66 531.556,1242.91 532.142,1241.25 532.728,1243.76 533.315,1244.94 533.901,1244.54 534.488,1245.45 535.074,1245.08 535.661,1244.6 536.247,1243.77 536.833,1246.35 537.42,1244.49 538.006,1243.98 538.593,1243.38 539.179,1245.8 539.765,1244.96 540.352,1248.69 540.938,1248.03 541.525,1244.83 542.111,1242.83 542.697,1245.34 543.284,1246.27 543.87,1247.07 544.457,1246.45 545.043,1244.43 545.63,1243.92 546.216,1244.79 546.802,1245.63 547.389,1243.57 547.975,1244.29 548.562,1246.59 549.148,1245.89 549.734,1244.95 550.321,1244.72 550.907,1241.58 551.494,1241.32 552.08,1242.26 552.666,1243.19 553.253,1242.83 553.839,1243.8 554.426,1240.36 555.012,1240.05 555.599,1240.97 556.185,1242.15 556.771,1242.07 557.358,1245.66 557.944,1247.67 558.531,1249.58 559.117,1250.16 559.703,1249.19 560.29,1246.92 560.876,1247.3 561.463,1243.8 562.049,1244.26 562.635,1243.7 563.222,1244.52 563.808,1241.09 564.395,1242.01 564.981,1242.79 565.568,1242.28 566.154,1240.45 566.74,1241.38 567.327,1242.08 567.913,1241.59 568.5,1246.73 569.086,1245.77 569.672,1248.83 570.259,1246.63 570.845,1245.85 571.432,1246.31 572.018,1244.15 572.605,1241.97 573.191,1242.88 573.777,1243.39 574.364,1243.88 574.95,1241.65 575.537,1238.12 576.123,1239.11 576.709,1238.53 577.296,1236.66 577.882,1233.54 578.469,1234.75 579.055,1233.06 579.641,1235.78 580.228,1234.04 580.814,1231.08 581.401,1233.83 581.987,1233.66 582.574,1236.46 583.16,1237.61 583.746,1235.69 584.333,1233.9 584.919,1234.79 585.506,1234.73 586.092,1238.62 586.678,1246.61 587.265,1242.94 587.851,1241.23 588.438,1238.98 589.024,1240.05 589.61,1236.67 590.197,1236.25 590.783,1237.46 591.37,1236.97 591.956,1235.07 592.543,1232.88 593.129,1232.78 593.715,1233.59 594.302,1231.95 594.888,1233.12 595.475,1231.27 596.061,1231.1 596.647,1233.42 597.234,1234.44 597.82,1233.04 598.407,1232.81 598.993,1233.88 599.579,1233.33 600.166,1232.89 600.752,1231.16 601.339,1229.14 601.925,1228.8 602.512,1231.4 603.098,1234.08 603.684,1233.65 604.271,1227.43 604.857,1227.56 605.444,1227.59 606.03,1227.76 606.616,1233.5 607.203,1233.1 607.789,1235.4 608.376,1234.69 608.962,1233.94 609.548,1234.88 610.135,1237.13 610.721,1233.57 611.308,1236.38 611.894,1234.4 612.481,1235.25 613.067,1236.19 613.653,1234.19 614.24,1235.36 614.826,1236.16 615.413,1236.86 615.999,1236.15 616.585,1234.32 617.172,1235.44 617.758,1235.95 618.345,1235.5 618.931,1233.78 619.518,1234.86 620.104,1232.74 620.69,1234.93 621.277,1232.83 621.863,1232.31 622.45,1233.09 623.036,1233.87 623.622,1231.75 624.209,1233.2 624.795,1232.73 625.382,1232.55 625.968,1235.02 626.554,1236.08 627.141,1237.04 627.727,1235.04 628.314,1235.64 628.9,1233.59 629.487,1231.97 630.073,1233.02 630.659,1232.35 631.246,1233.08 631.832,1227.22 632.419,1222.91 633.005,1221.65 633.591,1221.47 634.178,1221.86 634.764,1221.68 635.351,1224.62 635.937,1227.54 636.523,1228.65 637.11,1228.4 637.696,1229.7 638.283,1227.75 638.869,1232.02 639.456,1231.36 640.042,1230.74 640.628,1230.24 641.215,1229.84 641.801,1229.79 642.388,1233.34 642.974,1235.5 643.56,1235.1 644.147,1233.21 644.733,1231.37 645.32,1232.3 645.906,1231.94 646.492,1231.38 647.079,1232.4 647.665,1231.88 648.252,1230.11 648.838,1227.93 649.425,1226.4 650.011,1223.5 650.597,1223.63 651.184,1219.73 651.77,1218.34 652.357,1221.55 652.943,1222.87 653.529,1223.03 654.116,1224.58 654.702,1224.5 655.289,1221.48 655.875,1221.62 656.462,1220.22 657.048,1220.14 657.634,1220.48 658.221,1220.68 658.807,1215.45 659.394,1214.56 659.98,1216.65 660.566,1218.33 661.153,1218.51 661.739,1220.32 662.326,1220.55 662.912,1218.08 663.498,1219.74 664.085,1217.39 664.671,1217.72 665.258,1218.24 665.844,1218.38 666.431,1219.77 667.017,1222.73 667.603,1223.81 668.19,1223.71 668.776,1224.78 669.363,1223.33 669.949,1221.98 670.535,1221.92 671.122,1222.04 671.708,1225.05 672.295,1226.27 672.881,1227.54 673.467,1225.84 674.054,1226.92 674.64,1226.51 675.227,1227.51 675.813,1225.56 676.4,1224.03 676.986,1225.3 677.572,1224.96 678.159,1223.42 678.745,1224.87 679.332,1228.45 679.918,1229.37 680.504,1227.64 681.091,1229.07 681.677,1226.06 682.264,1225.75 682.85,1222.65 683.436,1224.06 684.023,1224.03 684.609,1223.88 685.196,1223.76 685.782,1223.64 686.369,1226.48 686.955,1226.63 687.541,1225.06 688.128,1224.86 688.714,1225.92 689.301,1225.71 689.887,1228.27 690.473,1226.69 691.06,1228.7 691.646,1226.69 692.233,1223.5 692.819,1223.36 693.405,1223.42 693.992,1223.27 694.578,1225.89 695.165,1221 695.751,1221.12 696.338,1221.09 696.924,1221.05 697.51,1219.58 698.097,1221.38 698.683,1221.29 699.27,1218.48 699.856,1214.21 700.442,1213.02 701.029,1213.36 701.615,1213.77 702.202,1214.28 702.788,1214.78 703.375,1214.99 703.961,1212.45 704.547,1211.53 705.134,1213.69 705.72,1212.66 706.307,1212.89 706.893,1213.29 707.479,1213.39 708.066,1212.28 708.652,1214.35 709.239,1214.66 709.825,1219.21 710.411,1218.04 710.998,1218.13 711.584,1222.38 712.171,1222.41 712.757,1222.51 713.344,1220.92 713.93,1222.45 714.516,1222.35 715.103,1222.32 715.689,1222.04 716.276,1221.86 716.862,1220.68 717.448,1222.1 718.035,1220.58 718.621,1220.29 719.208,1218.93 719.794,1220.09 720.38,1218.73 720.967,1218.66 721.553,1218.84 722.14,1218.97 722.726,1223.27 723.313,1223.08 723.899,1227.18 724.485,1226.7 725.072,1226.27 725.658,1227.14 726.245,1226.71 726.831,1226.41 727.417,1226 728.004,1224.03 728.59,1222.25 729.177,1223.54 729.763,1223.37 730.349,1223.2 730.936,1221.91 731.522,1224.48 732.109,1225.53 732.695,1225.44 733.282,1221.25 733.868,1222.27 734.454,1221.83 735.041,1221.64 735.627,1224.39 736.214,1225.57 736.8,1228.19 737.386,1226.37 737.973,1226.1 738.559,1225.77 739.146,1225.45 739.732,1224.84 740.318,1225.85 740.905,1225.61 741.491,1223.9 742.078,1222.28 742.664,1222.3 743.251,1222.42 743.837,1226.53 744.423,1224.59 745.01,1224.3 745.596,1221.3 746.183,1221.27 746.769,1222.95 747.355,1221.6 747.942,1219.9 748.528,1219.87 749.115,1221.32 749.701,1221.29 750.288,1220.18 750.874,1224.26 751.46,1224.1 752.047,1225.18 752.633,1224.62 753.22,1224.53 753.806,1222.76 754.392,1224.27 754.979,1222.45 755.565,1222.39 756.152,1221.92 756.738,1224.82 757.324,1223.25 757.911,1221.25 758.497,1219.9 759.084,1221.32 759.67,1221.13 760.257,1223.72 760.843,1222.18 761.429,1221.98 762.016,1221.67 762.602,1221.1 763.189,1220.88 763.775,1220.56 764.361,1218.97 764.948,1217.64 765.534,1217.75 766.121,1217.82 766.707,1219.17 767.293,1223.29 767.88,1224.38 768.466,1224.07 769.053,1220.74 769.639,1220.51 770.226,1221.75 770.812,1220.37 771.398,1218.65 771.985,1221.59 772.571,1220.01 773.158,1222.54 773.744,1220.89 774.33,1222.43 774.917,1220.87 775.503,1222.32 776.09,1222.2 776.676,1223.44 777.262,1225.85 777.849,1225.46 778.435,1222.4 779.022,1225.16 779.608,1223.23 780.195,1221.69 780.781,1219.93 781.367,1218.42 781.954,1218.43 782.54,1218.33 783.127,1218.25 783.713,1217.02 784.299,1215.68 784.886,1215.84 785.472,1217.32 786.059,1217.41 786.645,1217.58 787.232,1217.74 787.818,1217.56 788.404,1213.28 788.991,1210.66 789.577,1210.98 790.164,1211.67 790.75,1213.63 791.336,1216.44 791.923,1214.97 792.509,1218.94 793.096,1218.66 793.682,1218.67 794.268,1220.11 794.855,1221.33 795.441,1219.69 796.028,1218.05 796.614,1218.27 797.201,1219.31 797.787,1216.4 798.373,1214.94 798.96,1217.94 799.546,1217.99 800.133,1219.2 800.719,1216.52 801.305,1218 801.892,1218.03 802.478,1218.05 803.065,1217.96 803.651,1216.46 804.237,1214.9 804.824,1215.28 805.41,1215.5 805.997,1218.04 806.583,1215.14 807.17,1215.33 807.756,1215.33 808.342,1213.98 808.929,1214.22 809.515,1214.5 810.102,1213.41 810.688,1212.17 811.274,1213.31 811.861,1213.52 812.447,1213.77 813.034,1214.2 813.62,1213.05 814.206,1213.24 814.793,1212.39 815.379,1214.08 815.966,1214.39 816.552,1214.44 817.139,1214.82 817.725,1216.37 818.311,1217.65 818.898,1213.4 819.484,1216.68 820.071,1216.61 820.657,1218.09 821.243,1215.17 821.83,1215.33 822.416,1214.95 823.003,1212.31 823.589,1212.33 824.175,1214.18 824.762,1213.06 825.348,1216.21 825.935,1215.76 826.521,1217.09 827.108,1218.27 827.694,1219.45 828.28,1223.57 828.867,1221.73 829.453,1220.15 830.04,1220.31 830.626,1222.79 831.212,1225.18 831.799,1226.42 832.385,1226 832.972,1228.17 833.558,1230.47 834.145,1232.46 834.731,1233.16 835.317,1229.53 835.904,1225.86 836.49,1225.42 837.077,1226.62 837.663,1224.85 838.249,1221.71 838.836,1218.78 839.422,1217.73 840.009,1216.48 840.595,1216.49 841.181,1215.18 841.768,1215.08 842.354,1212.43 842.941,1212.81 843.527,1215.68 844.114,1214.47 844.7,1214.47 845.286,1214.67 845.873,1213.41 846.459,1213.82 847.046,1215.28 847.632,1215.16 848.218,1216.48 848.805,1219.41 849.391,1220.68 849.978,1220.57 850.564,1218.66 851.15,1216.73 851.737,1218.08 852.323,1219.5 852.91,1218.1 853.496,1219.57 854.083,1218.12 854.669,1216.79 855.255,1219.71 855.842,1221.07 856.428,1225.05 857.015,1223.08 857.601,1225.53 858.187,1223.92 858.774,1220.83 859.36,1223.43 859.947,1220.08 860.533,1220.1 861.119,1219.79 861.706,1219.56 862.292,1217.93 862.879,1220.4 863.465,1220.43 864.052,1218.62 864.638,1219.73 865.224,1216.91 865.811,1216.94 866.397,1215.8 866.984,1216.36 867.57,1216.41 868.156,1212.17 868.743,1211.2 869.329,1213.13 869.916,1213.36 870.502,1215.04 871.089,1215.49 871.675,1218.45 872.261,1217.17 872.848,1217.39 873.434,1217.06 874.021,1218.32 874.607,1218.16 875.193,1218.4 875.78,1214.14 876.366,1215.57 876.953,1217.1 877.539,1219.82 878.125,1220.99 878.712,1219.23 879.298,1219.21 879.885,1220.63 880.471,1220.41 881.058,1219.92 881.644,1221.41 882.23,1223.74 882.817,1220.91 883.403,1221.93 883.99,1222.95 884.576,1224.18 885.162,1223.69 885.749,1223.53 886.335,1224.54 886.922,1224 887.508,1222.27 888.094,1220.69 888.681,1220.71 889.267,1219.06 889.854,1220.47 890.44,1220.47 891.027,1220.27 891.613,1217.55 892.199,1220.18 892.786,1218.63 893.372,1217.12 893.959,1215.92 894.545,1214.46 895.131,1214.78 895.718,1214.91 896.304,1213.58 896.891,1215.04 897.477,1216.59 898.063,1216.79 898.65,1216.8 899.236,1216.96 899.823,1213.16 900.409,1214.68 900.996,1214.79 901.582,1212.33 902.168,1212.57 902.755,1212.85 903.341,1215.95 903.928,1215.83 904.514,1217.03 905.1,1214.22 905.687,1214.37 906.273,1214.59 906.86,1214.52 907.446,1211.75 908.032,1212.44 908.619,1209.48 909.205,1208.3 909.792,1211.37 910.378,1212.87 910.965,1214.46 911.551,1213.09 912.137,1217.23 912.724,1217.18 913.31,1217.11 913.897,1219.88 914.483,1222.83 915.069,1223.79 915.656,1226.04 916.242,1226.51 916.829,1225.98 917.415,1225.52 918.002,1226.73 918.588,1224.65 919.174,1225.39 919.761,1223.54 920.347,1220.39 920.934,1223.07 921.52,1221.5 922.106,1216.96 922.693,1214.4 923.279,1214.59 923.866,1213.41 924.452,1213.57 925.038,1213.74 925.625,1213.93 926.211,1212.54 926.798,1213.77 927.384,1212.43 927.971,1213.99 928.557,1212.82 929.143,1214.51 929.73,1217.33 930.316,1214.35 930.903,1214.82 931.489,1215.1 932.075,1215.13 932.662,1215.3 933.248,1212.56 933.835,1211.49 934.421,1211.93 935.007,1208.12 935.594,1208.27 936.18,1208.64 936.767,1211.8 937.353,1212.08 937.94,1212.11 938.526,1213.86 939.112,1211.48 939.699,1215.78 940.285,1214.54 940.872,1214.83 941.458,1213.5 942.044,1214.98 942.631,1212.34 943.217,1213.93 943.804,1217.17 944.39,1217.1 944.976,1220.22 945.563,1221.44 946.149,1222.48 946.736,1222.23 947.322,1222.09 947.909,1223.41 948.495,1221.59 949.081,1221.22 949.668,1222.14 950.254,1224.25 950.841,1221.1 951.427,1223.71 952.013,1224.96 952.6,1226.1 953.186,1222.72 953.773,1223.68 954.359,1226.04 954.945,1226.82 955.532,1225.18 956.118,1224.9 956.705,1224.46 957.291,1226.91 957.878,1222.16 958.464,1221.95 959.05,1222.82 959.637,1222.21 960.223,1223.24 960.81,1222.58 961.396,1222.31 961.982,1223.29 962.569,1222.69 963.155,1220.68 963.742,1219.31 964.328,1220.63 964.915,1217.71 965.501,1217.64 966.087,1217.3 966.674,1218.67 967.26,1218.55 967.847,1212.89 968.433,1214.23 969.019,1215.64 969.606,1214.22 970.192,1214.26 970.779,1215.75 971.365,1217.17 971.951,1218.58 972.538,1217.24 973.124,1219.85 973.711,1219.5 974.297,1220.75 974.884,1224.79 975.47,1221.29 976.056,1222.74 976.643,1222.18 977.229,1222 977.816,1220.46 978.402,1219.99 978.988,1218.24 979.575,1216.84 980.161,1216.66 980.748,1217.95 981.334,1217.67 981.92,1216.29 982.507,1214.76 983.093,1210.62 983.68,1212.59 984.266,1213.8 984.853,1216.63 985.439,1216.43 986.025,1217.63 986.612,1216.07 987.198,1221.47 987.785,1225.03 988.371,1220.57 988.957,1219.03 989.544,1216.35 990.13,1213.64 990.717,1213.44 991.303,1213.63 991.889,1212.48 992.476,1211.54 993.062,1213.11 993.649,1211.98 994.235,1211.98 994.822,1211.81 995.408,1212.18 995.994,1212.32 996.581,1209.85 997.167,1210.17 997.754,1212.11 998.34,1206.45 998.926,1205.71 999.513,1206.13 1000.1,1206.38 1000.69,1205.51 1001.27,1205.76 1001.86,1205.35 1002.44,1207.47 1003.03,1210.7 1003.62,1213.49 1004.2,1214.88 1004.79,1213.56 1005.38,1217.88 1005.96,1217.4 1006.55,1214.42 1007.14,1214.53 1007.72,1215.9 1008.31,1215.73 1008.9,1216.87 1009.48,1218.05 1010.07,1216.58 1010.65,1216.51 1011.24,1215.21 1011.83,1213.88 1012.41,1211.3 1013,1209.93 1013.59,1209.97 1014.17,1210.23 1014.76,1209.15 1015.35,1209.87 1015.93,1212.77 1016.52,1212.95 1017.11,1213.2 1017.69,1216.18 1018.28,1217.8 1018.86,1217.67 1019.45,1217.36 1020.04,1221.37 1020.62,1219.54 1021.21,1219.37 1021.8,1217.88 1022.38,1216.18 1022.97,1216.05 1023.56,1210.7 1024.14,1212.37 1024.73,1214.23 1025.32,1215.35 1025.9,1216.58 1026.49,1219.55 1027.07,1219.09 1027.66,1215.98 1028.25,1213.28 1028.83,1212.01 1029.42,1212.4 1030.01,1214.32 1030.59,1208.66 1031.18,1206.23 1031.77,1208.23 1032.35,1208.59 1032.94,1211.76 1033.52,1210.65 1034.11,1215.17 1034.7,1215.07 1035.28,1213.48 1035.87,1216.23 1036.46,1221.61 1037.04,1224.18 1037.63,1226.36 1038.22,1224.25 1038.8,1225.11 1039.39,1223.07 1039.98,1218.27 1040.56,1215.49 1041.15,1212.58 1041.73,1213.89 1042.32,1216.77 1042.91,1220.96 1043.49,1220.85 1044.08,1220.42 1044.67,1220.06 1045.25,1222.6 1045.84,1220.8 1046.43,1219.37 1047.01,1218.06 1047.6,1215.05 1048.19,1214.9 1048.77,1214.94 1049.36,1213.72 1049.94,1215.29 1050.53,1211.26 1051.12,1211.41 1051.7,1210.24 1052.29,1207.9 1052.88,1208.23 1053.46,1209.76 1054.05,1209.77 1054.64,1210.21 1055.22,1210.55 1055.81,1213.51 1056.39,1213.72 1056.98,1211.27 1057.57,1211.84 1058.15,1210.79 1058.74,1212.53 1059.33,1211.63 1059.91,1211.53 1060.5,1213.31 1061.09,1213.54 1061.67,1211.07 1062.26,1208.31 1062.85,1208.62 1063.43,1208.89 1064.02,1209.28 1064.6,1209.8 1065.19,1207.15 1065.78,1208.89 1066.36,1210.59 1066.95,1210.83 1067.54,1209.51 1068.12,1208.48 1068.71,1207.42 1069.3,1209.32 1069.88,1211.21 1070.47,1210.09 1071.06,1211.76 1071.64,1213.12 1072.23,1217.43 1072.81,1219.16 1073.4,1216.38 1073.99,1216.32 1074.57,1217.89 1075.16,1217.89 1075.75,1217.71 1076.33,1220.44 1076.92,1218.66 1077.51,1217 1078.09,1221.09 1078.68,1219.51 1079.26,1219.37 1079.85,1219.06 1080.44,1215.97 1081.02,1216.26 1081.61,1217.79 1082.2,1217.55 1082.78,1221.51 1083.37,1221.05 1083.96,1219.3 1084.54,1213.7 1085.13,1213.64 1085.72,1213.48 1086.3,1212.21 1086.89,1210.68 1087.47,1209.29 1088.06,1208.2 1088.65,1204.71 1089.23,1204.25 1089.82,1206.47 1090.41,1205.68 1090.99,1203.43 1091.58,1205.71 1092.17,1206.28 1092.75,1206.73 1093.34,1206.22 1093.93,1208.26 1094.51,1207.52 1095.1,1206.31 1095.68,1206.84 1096.27,1204.81 1096.86,1204.21 1097.44,1206.08 1098.03,1208.1 1098.62,1209.73 1099.2,1208.62 1099.79,1209.02 1100.38,1209.46 1100.96,1211.44 1101.55,1213 1102.14,1215.74 1102.72,1215.68 1103.31,1213.09 1103.89,1213.14 1104.48,1213.55 1105.07,1216.32 1105.65,1216.43 1106.24,1217.62 1106.83,1217.8 1107.41,1212.06 1108,1213.68 1108.59,1209.7 1109.17,1208.75 1109.76,1210.5 1110.34,1210.66 1110.93,1210.96 1111.52,1212.19 1112.1,1212.09 1112.69,1210.73 1113.28,1214.82 1113.86,1213.36 1114.45,1214.99 1115.04,1213.85 1115.62,1212.76 1116.21,1212.7 1116.8,1216.85 1117.38,1218.21 1117.97,1216.28 1118.55,1216.25 1119.14,1215.95 1119.73,1214.14 1120.31,1214.27 1120.9,1213.04 1121.49,1213.1 1122.07,1214.45 1122.66,1213.03 1123.25,1214.45 1123.83,1214.76 1124.42,1215.07 1125.01,1215.04 1125.59,1214.94 1126.18,1216.22 1126.76,1217.8 1127.35,1219.26 1127.94,1221.9 1128.52,1226.9 1129.11,1223.57 1129.7,1223.21 1130.28,1222.84 1130.87,1223.75 1131.46,1222.14 1132.04,1220.73 1132.63,1220.38 1133.21,1222.68 1133.8,1223.37 1134.39,1218.76 1134.97,1214.44 1135.56,1218.38 1136.15,1219.69 1136.73,1219.45 1137.32,1219.55 1137.91,1217.8 1138.49,1220.16 1139.08,1217.07 1139.67,1217.03 1140.25,1217.25 1140.84,1218.46 1141.42,1218.45 1142.01,1220.76 1142.6,1219.28 1143.18,1217.5 1143.77,1218.77 1144.36,1220.24 1144.94,1220.08 1145.53,1219.76 1146.12,1219.41 1146.7,1220.66 1147.29,1220.55 1147.88,1218.87 1148.46,1216.08 1149.05,1214.82 1149.63,1215.21 1150.22,1216.67 1150.81,1217.95 1151.39,1216.63 1151.98,1218.14 1152.57,1219.52 1153.15,1215.27 1153.74,1216.3 1154.33,1216.21 1154.91,1217.58 1155.5,1217.33 1156.09,1218.4 1156.67,1218.32 1157.26,1218.02 1157.84,1217.81 1158.43,1218.92 1159.02,1220 1159.6,1215.37 1160.19,1213.98 1160.78,1213.93 1161.36,1215.27 1161.95,1215.26 1162.54,1215.29 1163.12,1215.36 1163.71,1214.01 1164.29,1214.17 1164.88,1214.15 1165.47,1212.81 1166.05,1212.83 1166.64,1214.36 1167.23,1214.19 1167.81,1215.6 1168.4,1214.14 1168.99,1216.96 1169.57,1218.29 1170.16,1220.79 1170.75,1221.73 1171.33,1219.03 1171.92,1217.67 1172.5,1218.96 1173.09,1217.65 1173.68,1216.22 1174.26,1220.36 1174.85,1218.68 1175.44,1218.38 1176.02,1217.05 1176.61,1216.93 1177.2,1216.94 1177.78,1215.47 1178.37,1215.28 1178.96,1218.08 1179.54,1219.43 1180.13,1219.41 1180.71,1220.53 1181.3,1218.91 1181.89,1216.21 1182.47,1218.95 1183.06,1217.3 1183.65,1217.16 1184.23,1217.4 1184.82,1218.72 1185.41,1219.94 1185.99,1220.91 1186.58,1222.1 1187.16,1218.84 1187.75,1214.75 1188.34,1214.83 1188.92,1214.8 1189.51,1214.7 1190.1,1217.58 1190.68,1213.73 1191.27,1216.45 1191.86,1215.1 1192.44,1215.31 1193.03,1215.38 1193.62,1214.15 1194.2,1214.39 1194.79,1217.2 1195.37,1218.19 1195.96,1217.58 1196.55,1218.92 1197.13,1218.65 1197.72,1221.28 1198.31,1218.44 1198.89,1215.76 1199.48,1215.61 1200.07,1219.66 1200.65,1217.72 1201.24,1217.39 1201.83,1217.08 1202.41,1215.52 1203,1216.96 1203.58,1216.88 1204.17,1216.75 1204.76,1216.68 1205.34,1215.18 1205.93,1216.54 1206.52,1216.19 1207.1,1213.42 1207.69,1213.56 1208.28,1216.42 1208.86,1216.06 1209.45,1210.43 1210.03,1212.01 1210.62,1213.48 1211.21,1212.21 1211.79,1212.52 1212.38,1209.85 1212.97,1209.86 1213.55,1214.49 1214.14,1213.51 1214.73,1211.08 1215.31,1210.07 1215.9,1212.85 1216.49,1215.6 1217.07,1212.49 1217.66,1214.37 1218.24,1215.74 1218.83,1217.29 1219.42,1217.2 1220,1222.21 1220.59,1221.85 1221.18,1218.82 1221.76,1220.09 1222.35,1221.19 1222.94,1220.74 1223.52,1222.12 1224.11,1220.46 1224.7,1220.54 1225.28,1221.43 1225.87,1219.93 1226.45,1225.15 1227.04,1220.38 1227.63,1222.84 1228.21,1219.77 1228.8,1216.77 1229.39,1216.64 1229.97,1218.08 1230.56,1217.95 1231.15,1219.2 1231.73,1215.94 1232.32,1213.44 1232.91,1211.98 1233.49,1215.08 1234.08,1214.97 1234.66,1215.04 1235.25,1213.65 1235.84,1215 1236.42,1212.24 1237.01,1211.06 1237.6,1209.71 1238.18,1208.66 1238.77,1209.09 1239.36,1209.6 1239.94,1210.08 1240.53,1210.5 1241.11,1213.64 1241.7,1212.22 1242.29,1211.29 1242.87,1212.88 1243.46,1210.03 1244.05,1208.8 1244.63,1209.24 1245.22,1211 1245.81,1212.4 1246.39,1211.22 1246.98,1210.16 1247.57,1207.69 1248.15,1209.75 1248.74,1211.25 1249.32,1212.62 1249.91,1211.05 1250.5,1211.11 1251.08,1209.82 1251.67,1212.74 1252.26,1212.96 1252.84,1215.91 1253.43,1214.47 1254.02,1214.42 1254.6,1211.64 1255.19,1211.89 1255.78,1212.08 1256.36,1211.79 1256.95,1216.28 1257.53,1214.69 1258.12,1213.75 1258.71,1213.94 1259.29,1215.42 1259.88,1215.6 1260.47,1214.13 1261.05,1215.46 1261.64,1215.66 1262.23,1215.5 1262.81,1213.01 1263.4,1214.64 1263.98,1214.66 1264.57,1217.48 1265.16,1216.05 1265.74,1217.36 1266.33,1217.37 1266.92,1215.86 1267.5,1217.07 1268.09,1215.65 1268.68,1217.19 1269.26,1217.32 1269.85,1217.28 1270.44,1217.17 1271.02,1214.41 1271.61,1212.66 1272.19,1215.44 1272.78,1214.21 1273.37,1214.56 1273.95,1213.26 1274.54,1213.21 1275.13,1210.53 1275.71,1212.15 1276.3,1212.23 1276.89,1215.07 1277.47,1214.67 1278.06,1213.33 1278.65,1213.33 1279.23,1211.98 1279.82,1213.61 1280.4,1212.29 1280.99,1210.95 1281.58,1208.28 1282.16,1209.87 1282.75,1211.44 1283.34,1211.95 1283.92,1212.01 1284.51,1209.27 1285.1,1206.95 1285.68,1205.91 1286.27,1207.99 1286.86,1207.28 1287.44,1210.56 1288.03,1210.74 1288.61,1211.14 1289.2,1211.99 1289.79,1214.99 1290.37,1213.5 1290.96,1215.04 1291.55,1216.56 1292.13,1210.75 1292.72,1209.41 1293.31,1211.24 1293.89,1210.36 1294.48,1210.62 1295.06,1212.15 1295.65,1213.92 1296.24,1215.22 1296.82,1215.22 1297.41,1215.4 1298,1215.47 1298.58,1215.2 1299.17,1215.21 1299.76,1215.41 1300.34,1216.9 1300.93,1216.54 1301.52,1216.33 1302.1,1217.71 1302.69,1217.52 1303.27,1213.23 1303.86,1213.25 1304.45,1212.02 1305.03,1212.05 1305.62,1209.27 1306.21,1209.43 1306.79,1209.93 1307.38,1210.19 1307.97,1210.24 1308.55,1211.92 1309.14,1214.96 1309.73,1219.22 1310.31,1216.04 1310.9,1214.51 1311.48,1214.6 1312.07,1215.98 1312.66,1216.15 1313.24,1216.06 1313.83,1217.62 1314.42,1217.53 1315,1217.44 1315.59,1218.37 1316.18,1216.68 1316.76,1218.08 1317.35,1219.16 1317.93,1220.39 1318.52,1222.84 1319.11,1221.04 1319.69,1220.88 1320.28,1217.5 1320.87,1214.68 1321.45,1213.04 1322.04,1214.32 1322.63,1212.73 1323.21,1214.08 1323.8,1215.52 1324.39,1215.49 1324.97,1216.82 1325.56,1215.41 1326.14,1211.39 1326.73,1212.89 1327.32,1213.17 1327.9,1213.25 1328.49,1213.07 1329.08,1210.35 1329.66,1207.71 1330.25,1206.83 1330.84,1207.34 1331.42,1209.17 1332.01,1210.93 1332.6,1212.33 1333.18,1214.99 1333.77,1213.72 1334.35,1213.79 1334.94,1211.03 1335.53,1214.01 1336.11,1216.83 1336.7,1214.97 1337.29,1219.02 1337.87,1218.92 1338.46,1220.09 1339.05,1222.65 1339.63,1222.15 1340.22,1221.93 1340.8,1219.94 1341.39,1220.92 1341.98,1218.98 1342.56,1220.28 1343.15,1213.2 1343.74,1210.76 1344.32,1210.93 1344.91,1211.17 1345.5,1209.63 1346.08,1211.23 1346.67,1211.56 1347.26,1211.83 1347.84,1209.24 1348.43,1209.46 1349.01,1209.23 1349.6,1209.39 1350.19,1209.64 1350.77,1211.39 1351.36,1212.76 1351.95,1212.65 1352.53,1213 1353.12,1211.68 1353.71,1208.88 1354.29,1209.34 1354.88,1208.4 1355.47,1209.03 1356.05,1209.28 1356.64,1209.38 1357.22,1208.49 1357.81,1208.42 1358.4,1208.76 1358.98,1208.68 1359.57,1209.16 1360.16,1210.86 1360.74,1211.09 1361.33,1209.87 1361.92,1210.02 1362.5,1208.77 1363.09,1209.18 1363.68,1212.02 1364.26,1212.01 1364.85,1212.16 1365.43,1210.97 1366.02,1213.06 1366.61,1213.1 1367.19,1213.28 1367.78,1214.77 1368.37,1217.75 1368.95,1220.19 1369.54,1217.42 1370.13,1217.15 1370.71,1215.41 1371.3,1215.3 1371.88,1216.62 1372.47,1217.84 1373.06,1216.23 1373.64,1217.53 1374.23,1219 1374.82,1221.31 1375.4,1219.58 1375.99,1217.67 1376.58,1217.72 1377.16,1218.77 1377.75,1221.3 1378.34,1222.48 1378.92,1224.96 1379.51,1224.51 1380.09,1224.08 1380.68,1226.21 1381.27,1224.41 1381.85,1222.73 1382.44,1221.04 1383.03,1220.74 1383.61,1226.16 1384.2,1228.37 1384.79,1229.03 1385.37,1229.7 1385.96,1229.03 1386.55,1231.18 1387.13,1231.32 1387.72,1230.49 1388.3,1229.79 1388.89,1234.57 1389.48,1227.84 1390.06,1230.04 1390.65,1226.42 1391.24,1228.66 1391.82,1229.19 1392.41,1224.33 1393,1226.41 1393.58,1222.62 1394.17,1222.63 1394.75,1222 1395.34,1223 1395.93,1222.7 1396.51,1219.33 1397.1,1219.06 1397.69,1221.74 1398.27,1221.09 1398.86,1221.94 1399.45,1219.03 1400.03,1218.71 1400.62,1218.49 1401.21,1219.3 1401.79,1220.58 1402.38,1220.4 1402.96,1214.75 1403.55,1214.82 1404.14,1219.26 1404.72,1220.39 1405.31,1222.96 1405.9,1222.5 1406.48,1223.35 1407.07,1224.07 1407.66,1222.16 1408.24,1221.75 1408.83,1221.32 1409.42,1220.95 1410,1219.11 1410.59,1219.2 1411.17,1221.59 1411.76,1222.88 1412.35,1223.8 1412.93,1222.23 1413.52,1221.96 1414.11,1222.97 1414.69,1220.93 1415.28,1220.82 1415.87,1221.94 1416.45,1217.14 1417.04,1218.62 1417.63,1215.47 1418.21,1213.98 1418.8,1212.47 1419.38,1212.48 1419.97,1212.54 1420.56,1214.13 1421.14,1212.99 1421.73,1213.41 1422.32,1213.57 1422.9,1212.35 1423.49,1209.68 1424.08,1208.26 1424.66,1201.6 1425.25,1203.57 1425.83,1203.02 1426.42,1202.19 1427.01,1204.31 1427.59,1206.07 1428.18,1206.81 1428.77,1207.12 1429.35,1207.46 1429.94,1206.3 1430.53,1208.04 1431.11,1209.71 1431.7,1210.03 1432.29,1210.27 1432.87,1209.19 1433.46,1206.71 1434.04,1208.5 1434.63,1210.24 1435.22,1210.48 1435.8,1212.38 1436.39,1212.53 1436.98,1208.78 1437.56,1212.07 1438.15,1212.15 1438.74,1210.67 1439.32,1209.72 1439.91,1210.06 1440.5,1210.35 1441.08,1209.18 1441.67,1210.64 1442.25,1209.32 1442.84,1209.75 1443.43,1210.23 1444.01,1213.36 1444.6,1214.7 1445.19,1214.91 1445.77,1215.02 1446.36,1212.28 1446.95,1211.31 1447.53,1210.23 1448.12,1210.37 1448.7,1207.59 1449.29,1210.66 1449.88,1208.22 1450.46,1208.74 1451.05,1210.13 1451.64,1206.64 1452.22,1205.49 1452.81,1205.97 1453.4,1206.46 1453.98,1205.66 1454.57,1206.14 1455.16,1209.39 1455.74,1210.87 1456.33,1215.05 1456.91,1212.28 1457.5,1212.36 1458.09,1212.56 1458.67,1214.17 1459.26,1215.31 1459.85,1212.32 1460.43,1212.62 1461.02,1214.04 1461.61,1211.19 1462.19,1212.66 1462.78,1210.35 1463.37,1209.36 1463.95,1210.05 1464.54,1210.35 1465.12,1209.03 1465.71,1212.44 1466.3,1211.35 1466.88,1212.69 1467.47,1212.68 1468.06,1212.91 1468.64,1210.3 1469.23,1210.16 1469.82,1210.4 1470.4,1211.97 1470.99,1210.91 1471.57,1212.46 1472.16,1212.48 1472.75,1209.85 1473.33,1211.58 1473.92,1211.93 1474.51,1214.46 1475.09,1214.49 1475.68,1209.03 1476.27,1213.55 1476.85,1212.44 1477.44,1212.61 1478.03,1215.59 1478.61,1217.03 1479.2,1219.83 1479.78,1218.45 1480.37,1221.07 1480.96,1220.71 1481.54,1221.8 1482.13,1224.35 1482.72,1223.98 1483.3,1226.28 1483.89,1224.27 1484.48,1225.19 1485.06,1224.44 1485.65,1224.01 1486.24,1222.07 1486.82,1219.93 1487.41,1219.72 1487.99,1218 1488.58,1216.28 1489.17,1216.26 1489.75,1217.86 1490.34,1215.03 1490.93,1214.97 1491.51,1216.59 1492.1,1218.05 1492.69,1219.4 1493.27,1216.67 1493.86,1220.97 1494.45,1222.07 1495.03,1220.4 1495.62,1221.37 1496.2,1218.35 1496.79,1214.36 1497.38,1215.54 1497.96,1216.84 1498.55,1216.81 1499.14,1215.37 1499.72,1216.53 1500.31,1216.59 1500.9,1215.04 1501.48,1217.54 1502.07,1217.27 1502.65,1217.09 1503.24,1217.07 1503.83,1215.56 1504.41,1217.18 1505,1214.16 1505.59,1214.07 1506.17,1212.88 1506.76,1214.71 1507.35,1214.84 1507.93,1215.03 1508.52,1215 1509.11,1217.89 1509.69,1216.38 1510.28,1213.6 1510.86,1212.23 1511.45,1210.89 1512.04,1212.5 1512.62,1215.56 1513.21,1215.79 1513.8,1214.48 1514.38,1213.71 1514.97,1215.32 1515.56,1213.93 1516.14,1211.05 1516.73,1209.92 1517.32,1211.71 1517.9,1213.35 1518.49,1213.52 1519.07,1216.6 1519.66,1215.26 1520.25,1215.56 1520.83,1216.87 1521.42,1216.88 1522.01,1218.21 1522.59,1219.49 1523.18,1218.01 1523.77,1215.21 1524.35,1217.86 1524.94,1219.07 1525.52,1220.03 1526.11,1222.34 1526.7,1222.27 1527.28,1221.58 1527.87,1221.18 1528.46,1220.86 1529.04,1219.26 1529.63,1216.36 1530.22,1216.08 1530.8,1215.95 1531.39,1215.98 1531.98,1214.87 1532.56,1209.19 1533.15,1206.99 1533.73,1203.27 1534.32,1208 1534.91,1208.33 1535.49,1209.85 1536.08,1205.89 1536.67,1207.71 1537.25,1205.7 1537.84,1206.12 1538.43,1206.51 1539.01,1208.33 1539.6,1207.59 1540.19,1208.15 1540.77,1209.87 1541.36,1211.22 1541.94,1211.45 1542.53,1211.84 1543.12,1210.6 1543.7,1212.16 1544.29,1214.05 1544.88,1212.79 1545.46,1212.82 1546.05,1217 1546.64,1217.11 1547.22,1219.63 1547.81,1219.09 1548.4,1218.99 1548.98,1218.75 1549.57,1218.5 1550.15,1220.04 1550.74,1221.11 1551.33,1224.83 1551.91,1226.11 1552.5,1224.28 1553.09,1222.4 1553.67,1221.89 1554.26,1218.94 1554.85,1215.85 1555.43,1217.11 1556.02,1217.13 1556.6,1217.31 1557.19,1216.97 1557.78,1216.97 1558.36,1216.73 1558.95,1216.76 1559.54,1215.08 1560.12,1217.69 1560.71,1217.1 1561.3,1218.27 1561.88,1213.8 1562.47,1215.24 1563.06,1215.21 1563.64,1216.48 1564.23,1218.95 1564.81,1215.81 1565.4,1216.84 1565.99,1219.37 1566.57,1217.9 1567.16,1214.79 1567.75,1211.79 1568.33,1211.72 1568.92,1210.47 1569.51,1209.22 1570.09,1208.18 1570.68,1208.37 1571.27,1207.38 1571.85,1209.23 1572.44,1209.69 1573.02,1208.55 1573.61,1207.51 1574.2,1208.09 1574.78,1209.94 1575.37,1210.38 1575.96,1212.01 1576.54,1211.04 1577.13,1212.59 1577.72,1212.55 1578.3,1213.82 1578.89,1212.58 1579.47,1210.07 1580.06,1211.74 1580.65,1212.05 1581.23,1212.43 1581.82,1209.64 1582.41,1214.07 1582.99,1217.15 1583.58,1218.43 1584.17,1221.08 1584.75,1217.83 1585.34,1219.5 1585.93,1217.84 1586.51,1216.13 1587.1,1215.72 1587.68,1215.31 1588.27,1214.31 1588.86,1217.25 1589.44,1214.2 1590.03,1214.2 1590.62,1214.32 1591.2,1218.25 1591.79,1218.29 1592.38,1218.21 1592.96,1219.54 1593.55,1220.32 1594.14,1215.8 1594.72,1217.32 1595.31,1214.76 1595.89,1209.22 1596.48,1211.14 1597.07,1208.55 1597.65,1209.1 1598.24,1209.42 1598.83,1208.36 1599.41,1211.49 1600,1211.55 1600.59,1210.65 1601.17,1209.43 1601.76,1211.16 1602.34,1211.41 1602.93,1213.26 1603.52,1213.35 1604.1,1213.57 1604.69,1213.63 1605.28,1213.48 1605.86,1213.26 1606.45,1214.6 1607.04,1213.53 1607.62,1212.07 1608.21,1211.06 1608.8,1211.5 1609.38,1213.14 1609.97,1214.37 1610.55,1218.89 1611.14,1217.29 1611.73,1217 1612.31,1215.44 1612.9,1212.75 1613.49,1212.53 1614.07,1211.44 1614.66,1211.67 1615.25,1209.08 1615.83,1206.85 1616.42,1208.49 1617.01,1208.71 1617.59,1210.45 1618.18,1212.06 1618.76,1211.89 1619.35,1210.69 1619.94,1209.22 1620.52,1210.7 1621.11,1210.91 1621.7,1211.15 1622.28,1214.2 1622.87,1212.93 1623.46,1214.1 1624.04,1212.82 1624.63,1213.19 1625.22,1214.88 1625.8,1216.29 1626.39,1216.08 1626.97,1215.94 1627.56,1217.26 1628.15,1218.52 1628.73,1218.35 1629.32,1216.64 1629.91,1213.61 1630.49,1210.69 1631.08,1211.43 1631.67,1208.9 1632.25,1207.97 1632.84,1208.46 1633.42,1209.27 1634.01,1209.67 1634.6,1209.63 1635.18,1207.02 1635.77,1209.13 1636.36,1210.58 1636.94,1210.97 1637.53,1213.68 1638.12,1212.51 1638.7,1212.71 1639.29,1214.18 1639.88,1218.31 1640.46,1219.53 1641.05,1219.08 1641.63,1217.54 1642.22,1217.63 1642.81,1214.8 1643.39,1216.18 1643.98,1218.66 1644.57,1218.38 1645.15,1218.16 1645.74,1219.2 1646.33,1217.56 1646.91,1219.02 1647.5,1220.07 1648.09,1221.4 1648.67,1216.69 1649.26,1218.13 1649.84,1216.7 1650.43,1216.43 1651.02,1215.02 1651.6,1213.55 1652.19,1212.23 1652.78,1211.11 1653.36,1212.58 1653.95,1211.4 1654.54,1212.93 1655.12,1215.78 1655.71,1215.93 1656.29,1218.35 1656.88,1218.21 1657.47,1219.22 1658.05,1220.26 1658.64,1220.06 1659.23,1221.38 1659.81,1223.74 1660.4,1224.7 1660.99,1225.29 1661.57,1223.57 1662.16,1224.71 1662.75,1222.82 1663.33,1222.23 1663.92,1221.95 1664.5,1221.68 1665.09,1218.31 1665.68,1217.92 1666.26,1219.09 1666.85,1218.73 1667.44,1218.42 1668.02,1218.42 1668.61,1218.13 1669.2,1214.85 1669.78,1216.06 1670.37,1217.28 1670.96,1221.37 1671.54,1223.92 1672.13,1224.74 1672.71,1226.17 1673.3,1229.57 1673.89,1229.09 1674.47,1228.42 1675.06,1225.06 1675.65,1223.22 1676.23,1219.92 1676.82,1218.11 1677.41,1213.52 1677.99,1213.72 1678.58,1212.14 1679.17,1210.82 1679.75,1212.61 1680.34,1211.19 1680.92,1210.24 1681.51,1209.04 1682.1,1210.67 1682.68,1213.73 1683.27,1215.28 1683.86,1215.04 1684.44,1214.58 1685.03,1214.41 1685.62,1214.3 1686.2,1214.32 1686.79,1214.01 1687.37,1213.97 1687.96,1212.69 1688.55,1216.97 1689.13,1219.46 1689.72,1220.59 1690.31,1220.17 1690.89,1219.93 1691.48,1222.38 1692.07,1220.69 1692.65,1219.02 1693.24,1218.44 1693.83,1218.3 1694.41,1216.8 1695,1212.57 1695.58,1214.11 1696.17,1215.47 1696.76,1215.31 1697.34,1215.4 1697.93,1216.7 1698.52,1215 1699.1,1214.9 1699.69,1211.91 1700.28,1212.13 1700.86,1212.49 1701.45,1212.52 1702.04,1213.06 1702.62,1216.01 1703.21,1217.16 1703.79,1217.05 1704.38,1216.87 1704.97,1214.16 1705.55,1213.97 1706.14,1214.23 1706.73,1213.16 1707.31,1212 1707.9,1212.02 1708.49,1213.54 1709.07,1214.84 1709.66,1214.9 1710.24,1213.72 1710.83,1215.26 1711.42,1214 1712,1214.05 1712.59,1212.62 1713.18,1214.04 1713.76,1214.13 1714.35,1214.47 1714.94,1214.77 1715.52,1216.27 1716.11,1215.77 1716.7,1218.54 1717.28,1218.51 1717.87,1217.02 1718.45,1214.1 1719.04,1211.26 1719.63,1208.78 1720.21,1210.83 1720.8,1209.89 1721.39,1210.21 1721.97,1210.36 1722.56,1206.62 1723.15,1208.67 1723.73,1212.08 1724.32,1210.88 1724.91,1212.46 1725.49,1211.24 1726.08,1206.86 1726.66,1207.59 1727.25,1209.43 1727.84,1205.37 1728.42,1206.07 1729.01,1206.29 1729.6,1206.73 1730.18,1211.18 1730.77,1208.62 1731.36,1208.65 1731.94,1209.27 1732.53,1214.82 1733.11,1213.38 1733.7,1216.12 1734.29,1218.84 1734.87,1217.25 1735.46,1218.67 1736.05,1218.25 1736.63,1221.87 1737.22,1221.53 1737.81,1221.07 1738.39,1220.88 1738.98,1221.78 1739.57,1222.86 1740.15,1222.29 1740.74,1220.87 1741.32,1219.15 1741.91,1216.13 1742.5,1217.34 1743.08,1217.21 1743.67,1218.33 1744.26,1218.2 1744.84,1219.29 1745.43,1217.99 1746.02,1217.75 1746.6,1219.1 1747.19,1218.9 1747.78,1220.18 1748.36,1218.39 1748.95,1218.23 1749.53,1218.11 1750.12,1217.86 1750.71,1215.04 1751.29,1216.67 1751.88,1218.11 1752.47,1215.05 1753.05,1215.29 1753.64,1212.37 1754.23,1212.33 1754.81,1212.52 1755.4,1212.82 1755.99,1213.1 1756.57,1211.4 1757.16,1210.08 1757.74,1210.86 1758.33,1208.6 1758.92,1207.21 1759.5,1206.38 1760.09,1204.23 1760.68,1203.57 1761.26,1201.57 1761.85,1203.9 1762.44,1204.34 1763.02,1202.05 1763.61,1202.85 1764.19,1205.07 1764.78,1204.37 1765.37,1209.31 1765.95,1212.21 1766.54,1213.78 1767.13,1212.29 1767.71,1210.96 1768.3,1211.13 1768.89,1212.87 1769.47,1211.29 1770.06,1211.46 1770.65,1214.48 1771.23,1215.42 1771.82,1216.77 1772.4,1215.31 1772.99,1215.46 1773.58,1215.42 1774.16,1215.27 1774.75,1214.1 1775.34,1215.52 1775.92,1216.89 1776.51,1214.03 1777.1,1214.05 1777.68,1215.42 1778.27,1214.07 1778.86,1215.28 1779.44,1216.71 1780.03,1216.66 1780.61,1218.11 1781.2,1226.66 1781.79,1226.06 1782.37,1224.11 1782.96,1222.36 1783.55,1221.86 1784.13,1224.23 1784.72,1223.73 1785.31,1218.82 1785.89,1218.64 1786.48,1218.58 1787.06,1220.95 1787.65,1220.67 1788.24,1222 1788.82,1221.7 1789.41,1221.4 1790,1219.94 1790.58,1219.63 1791.17,1216.68 1791.76,1216.62 1792.34,1220.43 1792.93,1218.7 1793.52,1218.52 1794.1,1218.32 1794.69,1218.35 1795.27,1216.75 1795.86,1217.9 1796.45,1220.54 1797.03,1222.97 1797.62,1221.2 1798.21,1218.07 1798.79,1219.43 1799.38,1220.45 1799.97,1224.24 1800.55,1223.85 1801.14,1220.72 1801.73,1218.97 1802.31,1217.41 1802.9,1217.1 1803.48,1216.87 1804.07,1215.54 1804.66,1215.26 1805.24,1213.64 1805.83,1213.71 1806.42,1212.06 1807,1212.2 1807.59,1215.14 1808.18,1215.14 1808.76,1215.09 1809.35,1212.49 1809.94,1216.89 1810.52,1221.13 1811.11,1222.38 1811.69,1220.68 1812.28,1218.98 1812.87,1217.17 1813.45,1215.52 1814.04,1212.55 1814.63,1208.71 1815.21,1213.51 1815.8,1213.68 1816.39,1214 1816.97,1213.96 1817.56,1215.33 1818.14,1215.38 1818.73,1217.96 1819.32,1217.84 1819.9,1219.21 1820.49,1218.96 1821.08,1218.55 1821.66,1220.83 1822.25,1220.79 1822.84,1221.42 1823.42,1220.97 1824.01,1223.31 1824.6,1221.52 1825.18,1221.36 1825.77,1222.2 1826.35,1219.44 1826.94,1219.31 1827.53,1219.01 1828.11,1221.66 1828.7,1223.91 1829.29,1223.22 1829.87,1221.28 1830.46,1218.08 1831.05,1218.04 1831.63,1219.42 1832.22,1219.27 1832.81,1216.5 1833.39,1216.31 1833.98,1216.04 1834.56,1214.1 1835.15,1213.98 1835.74,1217.08 1836.32,1216.98 1836.91,1219.68 1837.5,1219.6 1838.08,1219.2 1838.67,1217.98 1839.26,1220.28 1839.84,1217.09 1840.43,1216.85 1841.01,1215.54 1841.6,1211.82 1842.19,1212.27 1842.77,1210.89 1843.36,1211.02 1843.95,1209.83 1844.53,1208.61 1845.12,1208.96 1845.71,1210.95 1846.29,1212.39 1846.88,1212.57 1847.47,1214.11 1848.05,1215.36 1848.64,1214.17 1849.22,1211.72 1849.81,1213.16 1850.4,1212.13 1850.98,1210.85 1851.57,1211.08 1852.16,1209.86 1852.74,1211.46 1853.33,1211.69 1853.92,1213.57 1854.5,1214.79 1855.09,1210.37 1855.68,1210.57 1856.26,1212.12 1856.85,1213.54 1857.43,1213.68 1858.02,1213.73 1858.61,1215.34 1859.19,1218.2 1859.78,1219.58 1860.37,1219.02 1860.95,1220.25 1861.54,1218.73 1862.13,1221.24 1862.71,1219.75 1863.3,1219.61 1863.88,1219.23 1864.47,1218.85 1865.06,1219.57 1865.64,1217.78 1866.23,1214.7 1866.82,1216.31 1867.4,1214.98 1867.99,1214.9 1868.58,1216.24 1869.16,1217.58 1869.75,1216.06 1870.34,1216.24 1870.92,1214.99 1871.51,1216.33 1872.09,1216.45 1872.68,1214.9 1873.27,1217.65 1873.85,1219 1874.44,1218.85 1875.03,1218.55 1875.61,1219.76 1876.2,1218.28 1876.79,1219.5 1877.37,1217.73 1877.96,1216.56 1878.55,1217.78 1879.13,1217.66 1879.72,1215.98 1880.3,1217.41 1880.89,1217.36 1881.48,1217.02 1882.06,1216.92 1882.65,1217.13 1883.24,1220.96 1883.82,1217.7 1884.41,1217.58 1885,1217.22 1885.58,1218.6 1886.17,1219.92 1886.76,1216.86 1887.34,1216.85 1887.93,1218.2 1888.51,1218.17 1889.1,1216.37 1889.69,1217.55 1890.27,1215.87 1890.86,1217.48 1891.45,1217.13 1892.03,1217.14 1892.62,1212.86 1893.21,1208.65 1893.79,1207.53 1894.38,1207.91 1894.96,1209.5 1895.55,1206.84 1896.14,1207.51 1896.72,1207.95 1897.31,1211.14 1897.9,1212.88 1898.48,1214.41 1899.07,1213.08 1899.66,1215.64 1900.24,1212.49 1900.83,1210.93 1901.42,1208.13 1902,1207.39 1902.59,1206.3 1903.17,1206.64 1903.76,1204.23 1904.35,1201.94 1904.93,1202.38 1905.52,1199.04 1906.11,1201.26 1906.69,1203.45 1907.28,1205.26 1907.87,1201.46 1908.45,1204.92 1909.04,1204.11 1909.63,1204.73 1910.21,1202.23 1910.8,1201.72 1911.38,1202.5 1911.97,1203.17 1912.56,1202.64 1913.14,1200.57 1913.73,1200.02 1914.32,1200.75 1914.9,1202.79 1915.49,1203.4 1916.08,1202.52 1916.66,1206 1917.25,1207.76 1917.83,1209.7 1918.42,1210.17 1919.01,1213.32 1919.59,1212.13 1920.18,1212.04 1920.77,1213.56 1921.35,1215.18 1921.94,1215.03 1922.53,1215.22 1923.11,1212.53 1923.7,1212.64 1924.29,1212.77 1924.87,1210.14 1925.46,1210.88 1926.04,1212.47 1926.63,1210.15 1927.22,1210.48 1927.8,1210.65 1928.39,1213.68 1928.98,1219.3 1929.56,1220.35 1930.15,1221.57 1930.74,1219.83 1931.32,1221.15 1931.91,1222.15 1932.5,1221.83 1933.08,1221.5 1933.67,1221.33 1934.25,1223.92 1934.84,1219.39 1935.43,1219.45 1936.01,1217.58 1936.6,1215.95 1937.19,1214.93 1937.77,1215.18 1938.36,1213.77 1938.95,1216.55 1939.53,1214.77 1940.12,1213.39 1940.71,1213.4 1941.29,1210.64 1941.88,1208.32 1942.46,1208.56 1943.05,1208.57 1943.64,1207.27 1944.22,1208.96 1944.81,1210.86 1945.4,1211.18 1945.98,1208.81 1946.57,1207.76 1947.16,1208.07 1947.74,1209.85 1948.33,1210.13 1948.91,1210.61 1949.5,1213.73 1950.09,1211.24 1950.67,1210.15 1951.26,1207.6 1951.85,1209.6 1952.43,1210.01 1953.02,1206.42 1953.61,1205.56 1954.19,1206.57 1954.78,1205.43 1955.37,1207.27 1955.95,1210.47 1956.54,1211.91 1957.12,1212.27 1957.71,1212.55 1958.3,1212.39 1958.88,1212.31 1959.47,1213.88 1960.06,1213.92 1960.64,1215.22 1961.23,1213.88 1961.82,1214.11 1962.4,1216.9 1962.99,1216.96 1963.58,1217.04 1964.16,1219.72 1964.75,1219.57 1965.33,1219.51 1965.92,1217.57 1966.51,1216.11 1967.09,1214.7 1967.68,1214.52 1968.27,1215.74 1968.85,1217.03 1969.44,1216.82 1970.03,1213.87 1970.61,1212.59 1971.2,1215.71 1971.78,1214.26 1972.37,1214.22 1972.96,1215.68 1973.54,1215.5 1974.13,1215.47 1974.72,1215.55 1975.3,1212.6 1975.89,1211.51 1976.48,1214.42 1977.06,1215.94 1977.65,1218.57 1978.24,1218.46 1978.82,1219.62 1979.41,1219.39 1979.99,1219.12 1980.58,1216.01 1981.17,1216.02 1981.75,1218.3 1982.34,1219.41 1982.93,1219.24 1983.51,1217.41 1984.1,1219.07 1984.69,1218.8 1985.27,1217.05 1985.86,1217.04 1986.45,1215.68 1987.03,1214.31 1987.62,1211.46 1988.2,1210.24 1988.79,1214.79 1989.38,1214.6 1989.96,1213.24 1990.55,1213.26 1991.14,1211.96 1991.72,1212.09 1992.31,1213.44 1992.9,1214.95 1993.48,1213.52 1994.07,1213.53 1994.65,1210.93 1995.24,1209.77 1995.83,1209.98 1996.41,1212.84 1997,1214.21 1997.59,1214.25 1998.17,1212.94 1998.76,1214.68 1999.35,1214.76 1999.93,1211.89 2000.52,1213.24 2001.11,1214.72 2001.69,1216.11 2002.28,1214.63 2002.86,1215.87 2003.45,1215.86 2004.04,1215.76 2004.62,1212.77 2005.21,1211.25 2005.8,1208.71 2006.38,1209.29 2006.97,1211.1 2007.56,1213.79 2008.14,1213.79 2008.73,1214.92 2009.32,1216.47 2009.9,1214.97 2010.49,1214.99 2011.07,1215 2011.66,1213.4 2012.25,1215.91 2012.83,1217.46 2013.42,1217.04 2014.01,1218.07 2014.59,1217.83 2015.18,1219.28 2015.77,1224.55 2016.35,1224.14 2016.94,1222.17 2017.53,1221.44 2018.11,1224.04 2018.7,1222.12 2019.28,1226.95 2019.87,1226.3 2020.46,1225.53 2021.04,1224.77 2021.63,1221.68 2022.22,1225.42 2022.8,1225.08 2023.39,1220.16 2023.98,1219.46 2024.56,1223.57 2025.15,1223.14 2025.73,1221.24 2026.32,1222.53 2026.91,1220.86 2027.49,1218.98 2028.08,1217.45 2028.67,1218.45 2029.25,1218.09 2029.84,1220.91 2030.43,1219.02 2031.01,1218.82 2031.6,1218.69 2032.19,1219.66 2032.77,1222 2033.36,1219.97 2033.94,1219.63 2034.53,1216.56 2035.12,1217.72 2035.7,1219.14 2036.29,1215.95 2036.88,1217.33 2037.46,1217.06 2038.05,1215.35 2038.64,1215.16 2039.22,1216.23 2039.81,1218.78 2040.4,1219.98 2040.98,1218.19 2041.57,1218.03 2042.15,1220.64 2042.74,1218.96 2043.33,1216.09 2043.91,1218.93 2044.5,1220.07 2045.09,1219.97 2045.67,1218.3 2046.26,1216.73 2046.85,1217.88 2047.43,1213.68 2048.02,1213.75 2048.6,1213.63 2049.19,1213.7 2049.78,1216.44 2050.36,1216.23 2050.95,1216.26 2051.54,1220.44 2052.12,1217.37 2052.71,1215.7 2053.3,1214.06 2053.88,1215.39 2054.47,1218.09 2055.06,1216.42 2055.64,1217.68 2056.23,1217.34 2056.81,1216.01 2057.4,1216.06 2057.99,1216 2058.57,1210.49 2059.16,1210.85 2059.75,1209.35 2060.33,1209.52 2060.92,1211.18 2061.51,1211.16 2062.09,1212.82 2062.68,1212.86 2063.27,1210.17 2063.85,1207.57 2064.44,1206.74 2065.02,1208.48 2065.61,1206.04 2066.2,1208.03 2066.78,1212.39 2067.37,1209.42 2067.96,1208.32 2068.54,1208.65 2069.13,1210.55 2069.72,1212.17 2070.3,1214.96 2070.89,1215.19 2071.48,1215.09 2072.06,1213.71 2072.65,1213.67 2073.23,1215.23 2073.82,1213.67 2074.41,1213.49 2074.99,1213.8 2075.58,1215.03 2076.17,1217.85 2076.75,1216.02 2077.34,1214.98 2077.93,1217.58 2078.51,1216.21 2079.1,1216.3 2079.68,1217.29 2080.27,1217.41 2080.86,1218.76 2081.44,1218.58 2082.03,1219.73 2082.62,1219.69 2083.2,1220.68 2083.79,1218.88 2084.38,1220.11 2084.96,1221.34 2085.55,1222.58 2086.14,1223.67 2086.72,1223.32 2087.31,1223 2087.89,1224.09 2088.48,1223.46 2089.07,1221.75 2089.65,1223.98 2090.24,1224.86 2090.83,1222.86 2091.41,1226.33 2092,1224.58 2092.59,1222.58 2093.17,1220.44 2093.76,1220 2094.35,1218.11 2094.93,1216.4 2095.52,1216.42 2096.1,1217.63 2096.69,1217.43 2097.28,1215.77 2097.86,1219.77 2098.45,1219.33 2099.04,1219.07 2099.62,1217.62 2100.21,1220.13 2100.8,1218.44 2101.38,1216.9 2101.97,1215.37 2102.55,1215.57 2103.14,1216.85 2103.73,1212.62 2104.31,1208.73 2104.9,1208.85 2105.49,1210.22 2106.07,1213.21 2106.66,1210.49 2107.25,1211.91 2107.83,1210.62 2108.42,1210.92 2109.01,1213.93 2109.59,1216.56 2110.18,1215.16 2110.76,1215.2 2111.35,1214.05 2111.94,1215.46 2112.52,1215.26 2113.11,1216.28 2113.7,1213.73 2114.28,1209.66 2114.87,1208.22 2115.46,1212.89 2116.04,1214.29 2116.63,1214.6 2117.22,1211.87 2117.8,1209.21 2118.39,1209.51 2118.97,1208.31 2119.56,1207.31 2120.15,1207.7 2120.73,1206.87 2121.32,1208.48 2121.91,1207.44 2122.49,1209.14 2123.08,1212.11 2123.67,1212.61 2124.25,1212.76 2124.84,1212.9 2125.42,1213.1 2126.01,1211.46 2126.6,1207.28 2127.18,1209.08 2127.77,1208.01 2128.36,1211.55 2128.94,1210.17 2129.53,1210.59 2130.12,1210.99 2130.7,1212.45 2131.29,1212.88 2131.88,1211.63 2132.46,1210.1 2133.05,1213.27 2133.63,1216.09 2134.22,1214.64 2134.81,1215.97 2135.39,1217.39 2135.98,1216.12 2136.57,1211.81 2137.15,1213.27 2137.74,1213.1 2138.33,1217.08 2138.91,1216.88 2139.5,1217.09 2140.09,1218.26 2140.67,1218.2 2141.26,1215.09 2141.84,1213.53 2142.43,1216.75 2143.02,1216.68 2143.6,1211.04 2144.19,1209.83 2144.78,1210.19 2145.36,1211.99 2145.95,1213.39 2146.54,1211.8 2147.12,1212.06 2147.71,1209.62 2148.3,1209.61 2148.88,1211.48 2149.47,1208.84 2150.05,1209.34 2150.64,1211.09 2151.23,1209.66 2151.81,1211.1 2152.4,1214.1 2152.99,1215.56 2153.57,1215.53 2154.16,1216.98 2154.75,1215.65 2155.33,1215.35 2155.92,1215.43 2156.5,1215.24 2157.09,1214.12 2157.68,1213.98 2158.26,1214.1 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1215.39 L986.612 1215.39 L987.198 1215.39 L987.785 1215.39 L988.371 1215.39 L988.957 1215.39 L989.544 1215.39 L990.13 1215.39 L990.717 1215.39 L991.303 1215.39 L991.889 1215.39 L992.476 1215.39 L993.062 1215.39 L993.649 1215.39 L994.235 1215.39 L994.822 1215.39 L995.408 1215.39 L995.994 1215.39 L996.581 1215.39 L997.167 1215.39 L997.754 1215.39 L998.34 1215.39 L998.926 1215.39 L999.513 1215.39 L1000.1 1215.39 L1000.69 1215.39 L1001.27 1215.39 L1001.86 1215.39 L1002.44 1215.39 L1003.03 1215.39 L1003.62 1215.39 L1004.2 1215.39 L1004.79 1215.39 L1005.38 1215.39 L1005.96 1215.39 L1006.55 1215.39 L1007.14 1215.39 L1007.72 1215.39 L1008.31 1215.39 L1008.9 1215.39 L1009.48 1215.39 L1010.07 1215.39 L1010.65 1215.39 L1011.24 1215.39 L1011.83 1215.39 L1012.41 1215.39 L1013 1215.39 L1013.59 1215.39 L1014.17 1215.39 L1014.76 1215.39 L1015.35 1215.39 L1015.93 1215.39 L1016.52 1215.39 L1017.11 1215.39 L1017.69 1215.39 L1018.28 1215.39 L1018.86 1215.39 L1019.45 1215.39 L1020.04 1215.39 L1020.62 1215.39 L1021.21 1215.39 L1021.8 1215.39 L1022.38 1215.39 L1022.97 1215.39 L1023.56 1215.39 L1024.14 1215.39 L1024.73 1215.39 L1025.32 1215.39 L1025.9 1215.39 L1026.49 1215.39 L1027.07 1215.39 L1027.66 1215.39 L1028.25 1215.39 L1028.83 1215.39 L1029.42 1215.39 L1030.01 1215.39 L1030.59 1215.39 L1031.18 1215.39 L1031.77 1215.39 L1032.35 1215.39 L1032.94 1215.39 L1033.52 1215.39 L1034.11 1215.39 L1034.7 1215.39 L1035.28 1215.39 L1035.87 1215.39 L1036.46 1215.39 L1037.04 1215.39 L1037.63 1215.39 L1038.22 1215.39 L1038.8 1215.39 L1039.39 1215.39 L1039.98 1215.39 L1040.56 1215.39 L1041.15 1215.39 L1041.73 1215.39 L1042.32 1215.39 L1042.91 1215.39 L1043.49 1215.39 L1044.08 1215.39 L1044.67 1215.39 L1045.25 1215.39 L1045.84 1215.39 L1046.43 1215.39 L1047.01 1215.39 L1047.6 1215.39 L1048.19 1215.39 L1048.77 1215.39 L1049.36 1215.39 L1049.94 1215.39 L1050.53 1215.39 L1051.12 1215.39 L1051.7 1215.39 L1052.29 1215.39 L1052.88 1215.39 L1053.46 1215.39 L1054.05 1215.39 L1054.64 1215.39 L1055.22 1215.39 L1055.81 1215.39 L1056.39 1215.39 L1056.98 1215.39 L1057.57 1215.39 L1058.15 1215.39 L1058.74 1215.39 L1059.33 1215.39 L1059.91 1215.39 L1060.5 1215.39 L1061.09 1215.39 L1061.67 1215.39 L1062.26 1215.39 L1062.85 1215.39 L1063.43 1215.39 L1064.02 1215.39 L1064.6 1215.39 L1065.19 1215.39 L1065.78 1215.39 L1066.36 1215.39 L1066.95 1215.39 L1067.54 1215.39 L1068.12 1215.39 L1068.71 1215.39 L1069.3 1215.39 L1069.88 1215.39 L1070.47 1215.39 L1071.06 1215.39 L1071.64 1215.39 L1072.23 1215.39 L1072.81 1215.39 L1073.4 1215.39 L1073.99 1215.39 L1074.57 1215.39 L1075.16 1215.39 L1075.75 1215.39 L1076.33 1215.39 L1076.92 1215.39 L1077.51 1215.39 L1078.09 1215.39 L1078.68 1215.39 L1079.26 1215.39 L1079.85 1215.39 L1080.44 1215.39 L1081.02 1215.39 L1081.61 1215.39 L1082.2 1215.39 L1082.78 1215.39 L1083.37 1215.39 L1083.96 1215.39 L1084.54 1215.39 L1085.13 1215.39 L1085.72 1215.39 L1086.3 1215.39 L1086.89 1215.39 L1087.47 1215.39 L1088.06 1215.39 L1088.65 1215.39 L1089.23 1215.39 L1089.82 1215.39 L1090.41 1215.39 L1090.99 1215.39 L1091.58 1215.39 L1092.17 1215.39 L1092.75 1215.39 L1093.34 1215.39 L1093.93 1215.39 L1094.51 1215.39 L1095.1 1215.39 L1095.68 1215.39 L1096.27 1215.39 L1096.86 1215.39 L1097.44 1215.39 L1098.03 1215.39 L1098.62 1215.39 L1099.2 1215.39 L1099.79 1215.39 L1100.38 1215.39 L1100.96 1215.39 L1101.55 1215.39 L1102.14 1215.39 L1102.72 1215.39 L1103.31 1215.39 L1103.89 1215.39 L1104.48 1215.39 L1105.07 1215.39 L1105.65 1215.39 L1106.24 1215.39 L1106.83 1215.39 L1107.41 1215.39 L1108 1215.39 L1108.59 1215.39 L1109.17 1215.39 L1109.76 1215.39 L1110.34 1215.39 L1110.93 1215.39 L1111.52 1215.39 L1112.1 1215.39 L1112.69 1215.39 L1113.28 1215.39 L1113.86 1215.39 L1114.45 1215.39 L1115.04 1215.39 L1115.62 1215.39 L1116.21 1215.39 L1116.8 1215.39 L1117.38 1215.39 L1117.97 1215.39 L1118.55 1215.39 L1119.14 1215.39 L1119.73 1215.39 L1120.31 1215.39 L1120.9 1215.39 L1121.49 1215.39 L1122.07 1215.39 L1122.66 1215.39 L1123.25 1215.39 L1123.83 1215.39 L1124.42 1215.39 L1125.01 1215.39 L1125.59 1215.39 L1126.18 1215.39 L1126.76 1215.39 L1127.35 1215.39 L1127.94 1215.39 L1128.52 1215.39 L1129.11 1215.39 L1129.7 1215.39 L1130.28 1215.39 L1130.87 1215.39 L1131.46 1215.39 L1132.04 1215.39 L1132.63 1215.39 L1133.21 1215.39 L1133.8 1215.39 L1134.39 1215.39 L1134.97 1215.39 L1135.56 1215.39 L1136.15 1215.39 L1136.73 1215.39 L1137.32 1215.39 L1137.91 1215.39 L1138.49 1215.39 L1139.08 1215.39 L1139.67 1215.39 L1140.25 1215.39 L1140.84 1215.39 L1141.42 1215.39 L1142.01 1215.39 L1142.6 1215.39 L1143.18 1215.39 L1143.77 1215.39 L1144.36 1215.39 L1144.94 1215.39 L1145.53 1215.39 L1146.12 1215.39 L1146.7 1215.39 L1147.29 1215.39 L1147.88 1215.39 L1148.46 1215.39 L1149.05 1215.39 L1149.63 1215.39 L1150.22 1215.39 L1150.81 1215.39 L1151.39 1215.39 L1151.98 1215.39 L1152.57 1215.39 L1153.15 1215.39 L1153.74 1215.39 L1154.33 1215.39 L1154.91 1215.39 L1155.5 1215.39 L1156.09 1215.39 L1156.67 1215.39 L1157.26 1215.39 L1157.84 1215.39 L1158.43 1215.39 L1159.02 1215.39 L1159.6 1215.39 L1160.19 1215.39 L1160.78 1215.39 L1161.36 1215.39 L1161.95 1215.39 L1162.54 1215.39 L1163.12 1215.39 L1163.71 1215.39 L1164.29 1215.39 L1164.88 1215.39 L1165.47 1215.39 L1166.05 1215.39 L1166.64 1215.39 L1167.23 1215.39 L1167.81 1215.39 L1168.4 1215.39 L1168.99 1215.39 L1169.57 1215.39 L1170.16 1215.39 L1170.75 1215.39 L1171.33 1215.39 L1171.92 1215.39 L1172.5 1215.39 L1173.09 1215.39 L1173.68 1215.39 L1174.26 1215.39 L1174.85 1215.39 L1175.44 1215.39 L1176.02 1215.39 L1176.61 1215.39 L1177.2 1215.39 L1177.78 1215.39 L1178.37 1215.39 L1178.96 1215.39 L1179.54 1215.39 L1180.13 1215.39 L1180.71 1215.39 L1181.3 1215.39 L1181.89 1215.39 L1182.47 1215.39 L1183.06 1215.39 L1183.65 1215.39 L1184.23 1215.39 L1184.82 1215.39 L1185.41 1215.39 L1185.99 1215.39 L1186.58 1215.39 L1187.16 1215.39 L1187.75 1215.39 L1188.34 1215.39 L1188.92 1215.39 L1189.51 1215.39 L1190.1 1215.39 L1190.68 1215.39 L1191.27 1215.39 L1191.86 1215.39 L1192.44 1215.39 L1193.03 1215.39 L1193.62 1215.39 L1194.2 1215.39 L1194.79 1215.39 L1195.37 1215.39 L1195.96 1215.39 L1196.55 1215.39 L1197.13 1215.39 L1197.72 1215.39 L1198.31 1215.39 L1198.89 1215.39 L1199.48 1215.39 L1200.07 1215.39 L1200.65 1215.39 L1201.24 1215.39 L1201.83 1215.39 L1202.41 1215.39 L1203 1215.39 L1203.58 1215.39 L1204.17 1215.39 L1204.76 1215.39 L1205.34 1215.39 L1205.93 1215.39 L1206.52 1215.39 L1207.1 1215.39 L1207.69 1215.39 L1208.28 1215.39 L1208.86 1215.39 L1209.45 1215.39 L1210.03 1215.39 L1210.62 1215.39 L1211.21 1215.39 L1211.79 1215.39 L1212.38 1215.39 L1212.97 1215.39 L1213.55 1215.39 L1214.14 1215.39 L1214.73 1215.39 L1215.31 1215.39 L1215.9 1215.39 L1216.49 1215.39 L1217.07 1215.39 L1217.66 1215.39 L1218.24 1215.39 L1218.83 1215.39 L1219.42 1215.39 L1220 1215.39 L1220.59 1215.39 L1221.18 1215.39 L1221.76 1215.39 L1222.35 1215.39 L1222.94 1215.39 L1223.52 1215.39 L1224.11 1215.39 L1224.7 1215.39 L1225.28 1215.39 L1225.87 1215.39 L1226.45 1215.39 L1227.04 1215.39 L1227.63 1215.39 L1228.21 1215.39 L1228.8 1215.39 L1229.39 1215.39 L1229.97 1215.39 L1230.56 1215.39 L1231.15 1215.39 L1231.73 1215.39 L1232.32 1215.39 L1232.91 1215.39 L1233.49 1215.39 L1234.08 1215.39 L1234.66 1215.39 L1235.25 1215.39 L1235.84 1215.39 L1236.42 1215.39 L1237.01 1215.39 L1237.6 1215.39 L1238.18 1215.39 L1238.77 1215.39 L1239.36 1215.39 L1239.94 1215.39 L1240.53 1215.39 L1241.11 1215.39 L1241.7 1215.39 L1242.29 1215.39 L1242.87 1215.39 L1243.46 1215.39 L1244.05 1215.39 L1244.63 1215.39 L1245.22 1215.39 L1245.81 1215.39 L1246.39 1215.39 L1246.98 1215.39 L1247.57 1215.39 L1248.15 1215.39 L1248.74 1215.39 L1249.32 1215.39 L1249.91 1215.39 L1250.5 1215.39 L1251.08 1215.39 L1251.67 1215.39 L1252.26 1215.39 L1252.84 1215.39 L1253.43 1215.39 L1254.02 1215.39 L1254.6 1215.39 L1255.19 1215.39 L1255.78 1215.39 L1256.36 1215.39 L1256.95 1215.39 L1257.53 1215.39 L1258.12 1215.39 L1258.71 1215.39 L1259.29 1215.39 L1259.88 1215.39 L1260.47 1215.39 L1261.05 1215.39 L1261.64 1215.39 L1262.23 1215.39 L1262.81 1215.39 L1263.4 1215.39 L1263.98 1215.39 L1264.57 1215.39 L1265.16 1215.39 L1265.74 1215.39 L1266.33 1215.39 L1266.92 1215.39 L1267.5 1215.39 L1268.09 1215.39 L1268.68 1215.39 L1269.26 1215.39 L1269.85 1215.39 L1270.44 1215.39 L1271.02 1215.39 L1271.61 1215.39 L1272.19 1215.39 L1272.78 1215.39 L1273.37 1215.39 L1273.95 1215.39 L1274.54 1215.39 L1275.13 1215.39 L1275.71 1215.39 L1276.3 1215.39 L1276.89 1215.39 L1277.47 1215.39 L1278.06 1215.39 L1278.65 1215.39 L1279.23 1215.39 L1279.82 1215.39 L1280.4 1215.39 L1280.99 1215.39 L1281.58 1215.39 L1282.16 1215.39 L1282.75 1215.39 L1283.34 1215.39 L1283.92 1215.39 L1284.51 1215.39 L1285.1 1215.39 L1285.68 1215.39 L1286.27 1215.39 L1286.86 1215.39 L1287.44 1215.39 L1288.03 1215.39 L1288.61 1215.39 L1289.2 1215.39 L1289.79 1215.39 L1290.37 1215.39 L1290.96 1215.39 L1291.55 1215.39 L1292.13 1215.39 L1292.72 1215.39 L1293.31 1215.39 L1293.89 1215.39 L1294.48 1215.39 L1295.06 1215.39 L1295.65 1215.39 L1296.24 1215.39 L1296.82 1215.39 L1297.41 1215.39 L1298 1215.39 L1298.58 1215.39 L1299.17 1215.39 L1299.76 1215.39 L1300.34 1215.39 L1300.93 1215.39 L1301.52 1215.39 L1302.1 1215.39 L1302.69 1215.39 L1303.27 1215.39 L1303.86 1215.39 L1304.45 1215.39 L1305.03 1215.39 L1305.62 1215.39 L1306.21 1215.39 L1306.79 1215.39 L1307.38 1215.39 L1307.97 1215.39 L1308.55 1215.39 L1309.14 1215.39 L1309.73 1215.39 L1310.31 1215.39 L1310.9 1215.39 L1311.48 1215.39 L1312.07 1215.39 L1312.66 1215.39 L1313.24 1215.39 L1313.83 1215.39 L1314.42 1215.39 L1315 1215.39 L1315.59 1215.39 L1316.18 1215.39 L1316.76 1215.39 L1317.35 1215.39 L1317.93 1215.39 L1318.52 1215.39 L1319.11 1215.39 L1319.69 1215.39 L1320.28 1215.39 L1320.87 1215.39 L1321.45 1215.39 L1322.04 1215.39 L1322.63 1215.39 L1323.21 1215.39 L1323.8 1215.39 L1324.39 1215.39 L1324.97 1215.39 L1325.56 1215.39 L1326.14 1215.39 L1326.73 1215.39 L1327.32 1215.39 L1327.9 1215.39 L1328.49 1215.39 L1329.08 1215.39 L1329.66 1215.39 L1330.25 1215.39 L1330.84 1215.39 L1331.42 1215.39 L1332.01 1215.39 L1332.6 1215.39 L1333.18 1215.39 L1333.77 1215.39 L1334.35 1215.39 L1334.94 1215.39 L1335.53 1215.39 L1336.11 1215.39 L1336.7 1215.39 L1337.29 1215.39 L1337.87 1215.39 L1338.46 1215.39 L1339.05 1215.39 L1339.63 1215.39 L1340.22 1215.39 L1340.8 1215.39 L1341.39 1215.39 L1341.98 1215.39 L1342.56 1215.39 L1343.15 1215.39 L1343.74 1215.39 L1344.32 1215.39 L1344.91 1215.39 L1345.5 1215.39 L1346.08 1215.39 L1346.67 1215.39 L1347.26 1215.39 L1347.84 1215.39 L1348.43 1215.39 L1349.01 1215.39 L1349.6 1215.39 L1350.19 1215.39 L1350.77 1215.39 L1351.36 1215.39 L1351.95 1215.39 L1352.53 1215.39 L1353.12 1215.39 L1353.71 1215.39 L1354.29 1215.39 L1354.88 1215.39 L1355.47 1215.39 L1356.05 1215.39 L1356.64 1215.39 L1357.22 1215.39 L1357.81 1215.39 L1358.4 1215.39 L1358.98 1215.39 L1359.57 1215.39 L1360.16 1215.39 L1360.74 1215.39 L1361.33 1215.39 L1361.92 1215.39 L1362.5 1215.39 L1363.09 1215.39 L1363.68 1215.39 L1364.26 1215.39 L1364.85 1215.39 L1365.43 1215.39 L1366.02 1215.39 L1366.61 1215.39 L1367.19 1215.39 L1367.78 1215.39 L1368.37 1215.39 L1368.95 1215.39 L1369.54 1215.39 L1370.13 1215.39 L1370.71 1215.39 L1371.3 1215.39 L1371.88 1215.39 L1372.47 1215.39 L1373.06 1215.39 L1373.64 1215.39 L1374.23 1215.39 L1374.82 1215.39 L1375.4 1215.39 L1375.99 1215.39 L1376.58 1215.39 L1377.16 1215.39 L1377.75 1215.39 L1378.34 1215.39 L1378.92 1215.39 L1379.51 1215.39 L1380.09 1215.39 L1380.68 1215.39 L1381.27 1215.39 L1381.85 1215.39 L1382.44 1215.39 L1383.03 1215.39 L1383.61 1215.39 L1384.2 1215.39 L1384.79 1215.39 L1385.37 1215.39 L1385.96 1215.39 L1386.55 1215.39 L1387.13 1215.39 L1387.72 1215.39 L1388.3 1215.39 L1388.89 1215.39 L1389.48 1215.39 L1390.06 1215.39 L1390.65 1215.39 L1391.24 1215.39 L1391.82 1215.39 L1392.41 1215.39 L1393 1215.39 L1393.58 1215.39 L1394.17 1215.39 L1394.75 1215.39 L1395.34 1215.39 L1395.93 1215.39 L1396.51 1215.39 L1397.1 1215.39 L1397.69 1215.39 L1398.27 1215.39 L1398.86 1215.39 L1399.45 1215.39 L1400.03 1215.39 L1400.62 1215.39 L1401.21 1215.39 L1401.79 1215.39 L1402.38 1215.39 L1402.96 1215.39 L1403.55 1215.39 L1404.14 1215.39 L1404.72 1215.39 L1405.31 1215.39 L1405.9 1215.39 L1406.48 1215.39 L1407.07 1215.39 L1407.66 1215.39 L1408.24 1215.39 L1408.83 1215.39 L1409.42 1215.39 L1410 1215.39 L1410.59 1215.39 L1411.17 1215.39 L1411.76 1215.39 L1412.35 1215.39 L1412.93 1215.39 L1413.52 1215.39 L1414.11 1215.39 L1414.69 1215.39 L1415.28 1215.39 L1415.87 1215.39 L1416.45 1215.39 L1417.04 1215.39 L1417.63 1215.39 L1418.21 1215.39 L1418.8 1215.39 L1419.38 1215.39 L1419.97 1215.39 L1420.56 1215.39 L1421.14 1215.39 L1421.73 1215.39 L1422.32 1215.39 L1422.9 1215.39 L1423.49 1215.39 L1424.08 1215.39 L1424.66 1215.39 L1425.25 1215.39 L1425.83 1215.39 L1426.42 1215.39 L1427.01 1215.39 L1427.59 1215.39 L1428.18 1215.39 L1428.77 1215.39 L1429.35 1215.39 L1429.94 1215.39 L1430.53 1215.39 L1431.11 1215.39 L1431.7 1215.39 L1432.29 1215.39 L1432.87 1215.39 L1433.46 1215.39 L1434.04 1215.39 L1434.63 1215.39 L1435.22 1215.39 L1435.8 1215.39 L1436.39 1215.39 L1436.98 1215.39 L1437.56 1215.39 L1438.15 1215.39 L1438.74 1215.39 L1439.32 1215.39 L1439.91 1215.39 L1440.5 1215.39 L1441.08 1215.39 L1441.67 1215.39 L1442.25 1215.39 L1442.84 1215.39 L1443.43 1215.39 L1444.01 1215.39 L1444.6 1215.39 L1445.19 1215.39 L1445.77 1215.39 L1446.36 1215.39 L1446.95 1215.39 L1447.53 1215.39 L1448.12 1215.39 L1448.7 1215.39 L1449.29 1215.39 L1449.88 1215.39 L1450.46 1215.39 L1451.05 1215.39 L1451.64 1215.39 L1452.22 1215.39 L1452.81 1215.39 L1453.4 1215.39 L1453.98 1215.39 L1454.57 1215.39 L1455.16 1215.39 L1455.74 1215.39 L1456.33 1215.39 L1456.91 1215.39 L1457.5 1215.39 L1458.09 1215.39 L1458.67 1215.39 L1459.26 1215.39 L1459.85 1215.39 L1460.43 1215.39 L1461.02 1215.39 L1461.61 1215.39 L1462.19 1215.39 L1462.78 1215.39 L1463.37 1215.39 L1463.95 1215.39 L1464.54 1215.39 L1465.12 1215.39 L1465.71 1215.39 L1466.3 1215.39 L1466.88 1215.39 L1467.47 1215.39 L1468.06 1215.39 L1468.64 1215.39 L1469.23 1215.39 L1469.82 1215.39 L1470.4 1215.39 L1470.99 1215.39 L1471.57 1215.39 L1472.16 1215.39 L1472.75 1215.39 L1473.33 1215.39 L1473.92 1215.39 L1474.51 1215.39 L1475.09 1215.39 L1475.68 1215.39 L1476.27 1215.39 L1476.85 1215.39 L1477.44 1215.39 L1478.03 1215.39 L1478.61 1215.39 L1479.2 1215.39 L1479.78 1215.39 L1480.37 1215.39 L1480.96 1215.39 L1481.54 1215.39 L1482.13 1215.39 L1482.72 1215.39 L1483.3 1215.39 L1483.89 1215.39 L1484.48 1215.39 L1485.06 1215.39 L1485.65 1215.39 L1486.24 1215.39 L1486.82 1215.39 L1487.41 1215.39 L1487.99 1215.39 L1488.58 1215.39 L1489.17 1215.39 L1489.75 1215.39 L1490.34 1215.39 L1490.93 1215.39 L1491.51 1215.39 L1492.1 1215.39 L1492.69 1215.39 L1493.27 1215.39 L1493.86 1215.39 L1494.45 1215.39 L1495.03 1215.39 L1495.62 1215.39 L1496.2 1215.39 L1496.79 1215.39 L1497.38 1215.39 L1497.96 1215.39 L1498.55 1215.39 L1499.14 1215.39 L1499.72 1215.39 L1500.31 1215.39 L1500.9 1215.39 L1501.48 1215.39 L1502.07 1215.39 L1502.65 1215.39 L1503.24 1215.39 L1503.83 1215.39 L1504.41 1215.39 L1505 1215.39 L1505.59 1215.39 L1506.17 1215.39 L1506.76 1215.39 L1507.35 1215.39 L1507.93 1215.39 L1508.52 1215.39 L1509.11 1215.39 L1509.69 1215.39 L1510.28 1215.39 L1510.86 1215.39 L1511.45 1215.39 L1512.04 1215.39 L1512.62 1215.39 L1513.21 1215.39 L1513.8 1215.39 L1514.38 1215.39 L1514.97 1215.39 L1515.56 1215.39 L1516.14 1215.39 L1516.73 1215.39 L1517.32 1215.39 L1517.9 1215.39 L1518.49 1215.39 L1519.07 1215.39 L1519.66 1215.39 L1520.25 1215.39 L1520.83 1215.39 L1521.42 1215.39 L1522.01 1215.39 L1522.59 1215.39 L1523.18 1215.39 L1523.77 1215.39 L1524.35 1215.39 L1524.94 1215.39 L1525.52 1215.39 L1526.11 1215.39 L1526.7 1215.39 L1527.28 1215.39 L1527.87 1215.39 L1528.46 1215.39 L1529.04 1215.39 L1529.63 1215.39 L1530.22 1215.39 L1530.8 1215.39 L1531.39 1215.39 L1531.98 1215.39 L1532.56 1215.39 L1533.15 1215.39 L1533.73 1215.39 L1534.32 1215.39 L1534.91 1215.39 L1535.49 1215.39 L1536.08 1215.39 L1536.67 1215.39 L1537.25 1215.39 L1537.84 1215.39 L1538.43 1215.39 L1539.01 1215.39 L1539.6 1215.39 L1540.19 1215.39 L1540.77 1215.39 L1541.36 1215.39 L1541.94 1215.39 L1542.53 1215.39 L1543.12 1215.39 L1543.7 1215.39 L1544.29 1215.39 L1544.88 1215.39 L1545.46 1215.39 L1546.05 1215.39 L1546.64 1215.39 L1547.22 1215.39 L1547.81 1215.39 L1548.4 1215.39 L1548.98 1215.39 L1549.57 1215.39 L1550.15 1215.39 L1550.74 1215.39 L1551.33 1215.39 L1551.91 1215.39 L1552.5 1215.39 L1553.09 1215.39 L1553.67 1215.39 L1554.26 1215.39 L1554.85 1215.39 L1555.43 1215.39 L1556.02 1215.39 L1556.6 1215.39 L1557.19 1215.39 L1557.78 1215.39 L1558.36 1215.39 L1558.95 1215.39 L1559.54 1215.39 L1560.12 1215.39 L1560.71 1215.39 L1561.3 1215.39 L1561.88 1215.39 L1562.47 1215.39 L1563.06 1215.39 L1563.64 1215.39 L1564.23 1215.39 L1564.81 1215.39 L1565.4 1215.39 L1565.99 1215.39 L1566.57 1215.39 L1567.16 1215.39 L1567.75 1215.39 L1568.33 1215.39 L1568.92 1215.39 L1569.51 1215.39 L1570.09 1215.39 L1570.68 1215.39 L1571.27 1215.39 L1571.85 1215.39 L1572.44 1215.39 L1573.02 1215.39 L1573.61 1215.39 L1574.2 1215.39 L1574.78 1215.39 L1575.37 1215.39 L1575.96 1215.39 L1576.54 1215.39 L1577.13 1215.39 L1577.72 1215.39 L1578.3 1215.39 L1578.89 1215.39 L1579.47 1215.39 L1580.06 1215.39 L1580.65 1215.39 L1581.23 1215.39 L1581.82 1215.39 L1582.41 1215.39 L1582.99 1215.39 L1583.58 1215.39 L1584.17 1215.39 L1584.75 1215.39 L1585.34 1215.39 L1585.93 1215.39 L1586.51 1215.39 L1587.1 1215.39 L1587.68 1215.39 L1588.27 1215.39 L1588.86 1215.39 L1589.44 1215.39 L1590.03 1215.39 L1590.62 1215.39 L1591.2 1215.39 L1591.79 1215.39 L1592.38 1215.39 L1592.96 1215.39 L1593.55 1215.39 L1594.14 1215.39 L1594.72 1215.39 L1595.31 1215.39 L1595.89 1215.39 L1596.48 1215.39 L1597.07 1215.39 L1597.65 1215.39 L1598.24 1215.39 L1598.83 1215.39 L1599.41 1215.39 L1600 1215.39 L1600.59 1215.39 L1601.17 1215.39 L1601.76 1215.39 L1602.34 1215.39 L1602.93 1215.39 L1603.52 1215.39 L1604.1 1215.39 L1604.69 1215.39 L1605.28 1215.39 L1605.86 1215.39 L1606.45 1215.39 L1607.04 1215.39 L1607.62 1215.39 L1608.21 1215.39 L1608.8 1215.39 L1609.38 1215.39 L1609.97 1215.39 L1610.55 1215.39 L1611.14 1215.39 L1611.73 1215.39 L1612.31 1215.39 L1612.9 1215.39 L1613.49 1215.39 L1614.07 1215.39 L1614.66 1215.39 L1615.25 1215.39 L1615.83 1215.39 L1616.42 1215.39 L1617.01 1215.39 L1617.59 1215.39 L1618.18 1215.39 L1618.76 1215.39 L1619.35 1215.39 L1619.94 1215.39 L1620.52 1215.39 L1621.11 1215.39 L1621.7 1215.39 L1622.28 1215.39 L1622.87 1215.39 L1623.46 1215.39 L1624.04 1215.39 L1624.63 1215.39 L1625.22 1215.39 L1625.8 1215.39 L1626.39 1215.39 L1626.97 1215.39 L1627.56 1215.39 L1628.15 1215.39 L1628.73 1215.39 L1629.32 1215.39 L1629.91 1215.39 L1630.49 1215.39 L1631.08 1215.39 L1631.67 1215.39 L1632.25 1215.39 L1632.84 1215.39 L1633.42 1215.39 L1634.01 1215.39 L1634.6 1215.39 L1635.18 1215.39 L1635.77 1215.39 L1636.36 1215.39 L1636.94 1215.39 L1637.53 1215.39 L1638.12 1215.39 L1638.7 1215.39 L1639.29 1215.39 L1639.88 1215.39 L1640.46 1215.39 L1641.05 1215.39 L1641.63 1215.39 L1642.22 1215.39 L1642.81 1215.39 L1643.39 1215.39 L1643.98 1215.39 L1644.57 1215.39 L1645.15 1215.39 L1645.74 1215.39 L1646.33 1215.39 L1646.91 1215.39 L1647.5 1215.39 L1648.09 1215.39 L1648.67 1215.39 L1649.26 1215.39 L1649.84 1215.39 L1650.43 1215.39 L1651.02 1215.39 L1651.6 1215.39 L1652.19 1215.39 L1652.78 1215.39 L1653.36 1215.39 L1653.95 1215.39 L1654.54 1215.39 L1655.12 1215.39 L1655.71 1215.39 L1656.29 1215.39 L1656.88 1215.39 L1657.47 1215.39 L1658.05 1215.39 L1658.64 1215.39 L1659.23 1215.39 L1659.81 1215.39 L1660.4 1215.39 L1660.99 1215.39 L1661.57 1215.39 L1662.16 1215.39 L1662.75 1215.39 L1663.33 1215.39 L1663.92 1215.39 L1664.5 1215.39 L1665.09 1215.39 L1665.68 1215.39 L1666.26 1215.39 L1666.85 1215.39 L1667.44 1215.39 L1668.02 1215.39 L1668.61 1215.39 L1669.2 1215.39 L1669.78 1215.39 L1670.37 1215.39 L1670.96 1215.39 L1671.54 1215.39 L1672.13 1215.39 L1672.71 1215.39 L1673.3 1215.39 L1673.89 1215.39 L1674.47 1215.39 L1675.06 1215.39 L1675.65 1215.39 L1676.23 1215.39 L1676.82 1215.39 L1677.41 1215.39 L1677.99 1215.39 L1678.58 1215.39 L1679.17 1215.39 L1679.75 1215.39 L1680.34 1215.39 L1680.92 1215.39 L1681.51 1215.39 L1682.1 1215.39 L1682.68 1215.39 L1683.27 1215.39 L1683.86 1215.39 L1684.44 1215.39 L1685.03 1215.39 L1685.62 1215.39 L1686.2 1215.39 L1686.79 1215.39 L1687.37 1215.39 L1687.96 1215.39 L1688.55 1215.39 L1689.13 1215.39 L1689.72 1215.39 L1690.31 1215.39 L1690.89 1215.39 L1691.48 1215.39 L1692.07 1215.39 L1692.65 1215.39 L1693.24 1215.39 L1693.83 1215.39 L1694.41 1215.39 L1695 1215.39 L1695.58 1215.39 L1696.17 1215.39 L1696.76 1215.39 L1697.34 1215.39 L1697.93 1215.39 L1698.52 1215.39 L1699.1 1215.39 L1699.69 1215.39 L1700.28 1215.39 L1700.86 1215.39 L1701.45 1215.39 L1702.04 1215.39 L1702.62 1215.39 L1703.21 1215.39 L1703.79 1215.39 L1704.38 1215.39 L1704.97 1215.39 L1705.55 1215.39 L1706.14 1215.39 L1706.73 1215.39 L1707.31 1215.39 L1707.9 1215.39 L1708.49 1215.39 L1709.07 1215.39 L1709.66 1215.39 L1710.24 1215.39 L1710.83 1215.39 L1711.42 1215.39 L1712 1215.39 L1712.59 1215.39 L1713.18 1215.39 L1713.76 1215.39 L1714.35 1215.39 L1714.94 1215.39 L1715.52 1215.39 L1716.11 1215.39 L1716.7 1215.39 L1717.28 1215.39 L1717.87 1215.39 L1718.45 1215.39 L1719.04 1215.39 L1719.63 1215.39 L1720.21 1215.39 L1720.8 1215.39 L1721.39 1215.39 L1721.97 1215.39 L1722.56 1215.39 L1723.15 1215.39 L1723.73 1215.39 L1724.32 1215.39 L1724.91 1215.39 L1725.49 1215.39 L1726.08 1215.39 L1726.66 1215.39 L1727.25 1215.39 L1727.84 1215.39 L1728.42 1215.39 L1729.01 1215.39 L1729.6 1215.39 L1730.18 1215.39 L1730.77 1215.39 L1731.36 1215.39 L1731.94 1215.39 L1732.53 1215.39 L1733.11 1215.39 L1733.7 1215.39 L1734.29 1215.39 L1734.87 1215.39 L1735.46 1215.39 L1736.05 1215.39 L1736.63 1215.39 L1737.22 1215.39 L1737.81 1215.39 L1738.39 1215.39 L1738.98 1215.39 L1739.57 1215.39 L1740.15 1215.39 L1740.74 1215.39 L1741.32 1215.39 L1741.91 1215.39 L1742.5 1215.39 L1743.08 1215.39 L1743.67 1215.39 L1744.26 1215.39 L1744.84 1215.39 L1745.43 1215.39 L1746.02 1215.39 L1746.6 1215.39 L1747.19 1215.39 L1747.78 1215.39 L1748.36 1215.39 L1748.95 1215.39 L1749.53 1215.39 L1750.12 1215.39 L1750.71 1215.39 L1751.29 1215.39 L1751.88 1215.39 L1752.47 1215.39 L1753.05 1215.39 L1753.64 1215.39 L1754.23 1215.39 L1754.81 1215.39 L1755.4 1215.39 L1755.99 1215.39 L1756.57 1215.39 L1757.16 1215.39 L1757.74 1215.39 L1758.33 1215.39 L1758.92 1215.39 L1759.5 1215.39 L1760.09 1215.39 L1760.68 1215.39 L1761.26 1215.39 L1761.85 1215.39 L1762.44 1215.39 L1763.02 1215.39 L1763.61 1215.39 L1764.19 1215.39 L1764.78 1215.39 L1765.37 1215.39 L1765.95 1215.39 L1766.54 1215.39 L1767.13 1215.39 L1767.71 1215.39 L1768.3 1215.39 L1768.89 1215.39 L1769.47 1215.39 L1770.06 1215.39 L1770.65 1215.39 L1771.23 1215.39 L1771.82 1215.39 L1772.4 1215.39 L1772.99 1215.39 L1773.58 1215.39 L1774.16 1215.39 L1774.75 1215.39 L1775.34 1215.39 L1775.92 1215.39 L1776.51 1215.39 L1777.1 1215.39 L1777.68 1215.39 L1778.27 1215.39 L1778.86 1215.39 L1779.44 1215.39 L1780.03 1215.39 L1780.61 1215.39 L1781.2 1215.39 L1781.79 1215.39 L1782.37 1215.39 L1782.96 1215.39 L1783.55 1215.39 L1784.13 1215.39 L1784.72 1215.39 L1785.31 1215.39 L1785.89 1215.39 L1786.48 1215.39 L1787.06 1215.39 L1787.65 1215.39 L1788.24 1215.39 L1788.82 1215.39 L1789.41 1215.39 L1790 1215.39 L1790.58 1215.39 L1791.17 1215.39 L1791.76 1215.39 L1792.34 1215.39 L1792.93 1215.39 L1793.52 1215.39 L1794.1 1215.39 L1794.69 1215.39 L1795.27 1215.39 L1795.86 1215.39 L1796.45 1215.39 L1797.03 1215.39 L1797.62 1215.39 L1798.21 1215.39 L1798.79 1215.39 L1799.38 1215.39 L1799.97 1215.39 L1800.55 1215.39 L1801.14 1215.39 L1801.73 1215.39 L1802.31 1215.39 L1802.9 1215.39 L1803.48 1215.39 L1804.07 1215.39 L1804.66 1215.39 L1805.24 1215.39 L1805.83 1215.39 L1806.42 1215.39 L1807 1215.39 L1807.59 1215.39 L1808.18 1215.39 L1808.76 1215.39 L1809.35 1215.39 L1809.94 1215.39 L1810.52 1215.39 L1811.11 1215.39 L1811.69 1215.39 L1812.28 1215.39 L1812.87 1215.39 L1813.45 1215.39 L1814.04 1215.39 L1814.63 1215.39 L1815.21 1215.39 L1815.8 1215.39 L1816.39 1215.39 L1816.97 1215.39 L1817.56 1215.39 L1818.14 1215.39 L1818.73 1215.39 L1819.32 1215.39 L1819.9 1215.39 L1820.49 1215.39 L1821.08 1215.39 L1821.66 1215.39 L1822.25 1215.39 L1822.84 1215.39 L1823.42 1215.39 L1824.01 1215.39 L1824.6 1215.39 L1825.18 1215.39 L1825.77 1215.39 L1826.35 1215.39 L1826.94 1215.39 L1827.53 1215.39 L1828.11 1215.39 L1828.7 1215.39 L1829.29 1215.39 L1829.87 1215.39 L1830.46 1215.39 L1831.05 1215.39 L1831.63 1215.39 L1832.22 1215.39 L1832.81 1215.39 L1833.39 1215.39 L1833.98 1215.39 L1834.56 1215.39 L1835.15 1215.39 L1835.74 1215.39 L1836.32 1215.39 L1836.91 1215.39 L1837.5 1215.39 L1838.08 1215.39 L1838.67 1215.39 L1839.26 1215.39 L1839.84 1215.39 L1840.43 1215.39 L1841.01 1215.39 L1841.6 1215.39 L1842.19 1215.39 L1842.77 1215.39 L1843.36 1215.39 L1843.95 1215.39 L1844.53 1215.39 L1845.12 1215.39 L1845.71 1215.39 L1846.29 1215.39 L1846.88 1215.39 L1847.47 1215.39 L1848.05 1215.39 L1848.64 1215.39 L1849.22 1215.39 L1849.81 1215.39 L1850.4 1215.39 L1850.98 1215.39 L1851.57 1215.39 L1852.16 1215.39 L1852.74 1215.39 L1853.33 1215.39 L1853.92 1215.39 L1854.5 1215.39 L1855.09 1215.39 L1855.68 1215.39 L1856.26 1215.39 L1856.85 1215.39 L1857.43 1215.39 L1858.02 1215.39 L1858.61 1215.39 L1859.19 1215.39 L1859.78 1215.39 L1860.37 1215.39 L1860.95 1215.39 L1861.54 1215.39 L1862.13 1215.39 L1862.71 1215.39 L1863.3 1215.39 L1863.88 1215.39 L1864.47 1215.39 L1865.06 1215.39 L1865.64 1215.39 L1866.23 1215.39 L1866.82 1215.39 L1867.4 1215.39 L1867.99 1215.39 L1868.58 1215.39 L1869.16 1215.39 L1869.75 1215.39 L1870.34 1215.39 L1870.92 1215.39 L1871.51 1215.39 L1872.09 1215.39 L1872.68 1215.39 L1873.27 1215.39 L1873.85 1215.39 L1874.44 1215.39 L1875.03 1215.39 L1875.61 1215.39 L1876.2 1215.39 L1876.79 1215.39 L1877.37 1215.39 L1877.96 1215.39 L1878.55 1215.39 L1879.13 1215.39 L1879.72 1215.39 L1880.3 1215.39 L1880.89 1215.39 L1881.48 1215.39 L1882.06 1215.39 L1882.65 1215.39 L1883.24 1215.39 L1883.82 1215.39 L1884.41 1215.39 L1885 1215.39 L1885.58 1215.39 L1886.17 1215.39 L1886.76 1215.39 L1887.34 1215.39 L1887.93 1215.39 L1888.51 1215.39 L1889.1 1215.39 L1889.69 1215.39 L1890.27 1215.39 L1890.86 1215.39 L1891.45 1215.39 L1892.03 1215.39 L1892.62 1215.39 L1893.21 1215.39 L1893.79 1215.39 L1894.38 1215.39 L1894.96 1215.39 L1895.55 1215.39 L1896.14 1215.39 L1896.72 1215.39 L1897.31 1215.39 L1897.9 1215.39 L1898.48 1215.39 L1899.07 1215.39 L1899.66 1215.39 L1900.24 1215.39 L1900.83 1215.39 L1901.42 1215.39 L1902 1215.39 L1902.59 1215.39 L1903.17 1215.39 L1903.76 1215.39 L1904.35 1215.39 L1904.93 1215.39 L1905.52 1215.39 L1906.11 1215.39 L1906.69 1215.39 L1907.28 1215.39 L1907.87 1215.39 L1908.45 1215.39 L1909.04 1215.39 L1909.63 1215.39 L1910.21 1215.39 L1910.8 1215.39 L1911.38 1215.39 L1911.97 1215.39 L1912.56 1215.39 L1913.14 1215.39 L1913.73 1215.39 L1914.32 1215.39 L1914.9 1215.39 L1915.49 1215.39 L1916.08 1215.39 L1916.66 1215.39 L1917.25 1215.39 L1917.83 1215.39 L1918.42 1215.39 L1919.01 1215.39 L1919.59 1215.39 L1920.18 1215.39 L1920.77 1215.39 L1921.35 1215.39 L1921.94 1215.39 L1922.53 1215.39 L1923.11 1215.39 L1923.7 1215.39 L1924.29 1215.39 L1924.87 1215.39 L1925.46 1215.39 L1926.04 1215.39 L1926.63 1215.39 L1927.22 1215.39 L1927.8 1215.39 L1928.39 1215.39 L1928.98 1215.39 L1929.56 1215.39 L1930.15 1215.39 L1930.74 1215.39 L1931.32 1215.39 L1931.91 1215.39 L1932.5 1215.39 L1933.08 1215.39 L1933.67 1215.39 L1934.25 1215.39 L1934.84 1215.39 L1935.43 1215.39 L1936.01 1215.39 L1936.6 1215.39 L1937.19 1215.39 L1937.77 1215.39 L1938.36 1215.39 L1938.95 1215.39 L1939.53 1215.39 L1940.12 1215.39 L1940.71 1215.39 L1941.29 1215.39 L1941.88 1215.39 L1942.46 1215.39 L1943.05 1215.39 L1943.64 1215.39 L1944.22 1215.39 L1944.81 1215.39 L1945.4 1215.39 L1945.98 1215.39 L1946.57 1215.39 L1947.16 1215.39 L1947.74 1215.39 L1948.33 1215.39 L1948.91 1215.39 L1949.5 1215.39 L1950.09 1215.39 L1950.67 1215.39 L1951.26 1215.39 L1951.85 1215.39 L1952.43 1215.39 L1953.02 1215.39 L1953.61 1215.39 L1954.19 1215.39 L1954.78 1215.39 L1955.37 1215.39 L1955.95 1215.39 L1956.54 1215.39 L1957.12 1215.39 L1957.71 1215.39 L1958.3 1215.39 L1958.88 1215.39 L1959.47 1215.39 L1960.06 1215.39 L1960.64 1215.39 L1961.23 1215.39 L1961.82 1215.39 L1962.4 1215.39 L1962.99 1215.39 L1963.58 1215.39 L1964.16 1215.39 L1964.75 1215.39 L1965.33 1215.39 L1965.92 1215.39 L1966.51 1215.39 L1967.09 1215.39 L1967.68 1215.39 L1968.27 1215.39 L1968.85 1215.39 L1969.44 1215.39 L1970.03 1215.39 L1970.61 1215.39 L1971.2 1215.39 L1971.78 1215.39 L1972.37 1215.39 L1972.96 1215.39 L1973.54 1215.39 L1974.13 1215.39 L1974.72 1215.39 L1975.3 1215.39 L1975.89 1215.39 L1976.48 1215.39 L1977.06 1215.39 L1977.65 1215.39 L1978.24 1215.39 L1978.82 1215.39 L1979.41 1215.39 L1979.99 1215.39 L1980.58 1215.39 L1981.17 1215.39 L1981.75 1215.39 L1982.34 1215.39 L1982.93 1215.39 L1983.51 1215.39 L1984.1 1215.39 L1984.69 1215.39 L1985.27 1215.39 L1985.86 1215.39 L1986.45 1215.39 L1987.03 1215.39 L1987.62 1215.39 L1988.2 1215.39 L1988.79 1215.39 L1989.38 1215.39 L1989.96 1215.39 L1990.55 1215.39 L1991.14 1215.39 L1991.72 1215.39 L1992.31 1215.39 L1992.9 1215.39 L1993.48 1215.39 L1994.07 1215.39 L1994.65 1215.39 L1995.24 1215.39 L1995.83 1215.39 L1996.41 1215.39 L1997 1215.39 L1997.59 1215.39 L1998.17 1215.39 L1998.76 1215.39 L1999.35 1215.39 L1999.93 1215.39 L2000.52 1215.39 L2001.11 1215.39 L2001.69 1215.39 L2002.28 1215.39 L2002.86 1215.39 L2003.45 1215.39 L2004.04 1215.39 L2004.62 1215.39 L2005.21 1215.39 L2005.8 1215.39 L2006.38 1215.39 L2006.97 1215.39 L2007.56 1215.39 L2008.14 1215.39 L2008.73 1215.39 L2009.32 1215.39 L2009.9 1215.39 L2010.49 1215.39 L2011.07 1215.39 L2011.66 1215.39 L2012.25 1215.39 L2012.83 1215.39 L2013.42 1215.39 L2014.01 1215.39 L2014.59 1215.39 L2015.18 1215.39 L2015.77 1215.39 L2016.35 1215.39 L2016.94 1215.39 L2017.53 1215.39 L2018.11 1215.39 L2018.7 1215.39 L2019.28 1215.39 L2019.87 1215.39 L2020.46 1215.39 L2021.04 1215.39 L2021.63 1215.39 L2022.22 1215.39 L2022.8 1215.39 L2023.39 1215.39 L2023.98 1215.39 L2024.56 1215.39 L2025.15 1215.39 L2025.73 1215.39 L2026.32 1215.39 L2026.91 1215.39 L2027.49 1215.39 L2028.08 1215.39 L2028.67 1215.39 L2029.25 1215.39 L2029.84 1215.39 L2030.43 1215.39 L2031.01 1215.39 L2031.6 1215.39 L2032.19 1215.39 L2032.77 1215.39 L2033.36 1215.39 L2033.94 1215.39 L2034.53 1215.39 L2035.12 1215.39 L2035.7 1215.39 L2036.29 1215.39 L2036.88 1215.39 L2037.46 1215.39 L2038.05 1215.39 L2038.64 1215.39 L2039.22 1215.39 L2039.81 1215.39 L2040.4 1215.39 L2040.98 1215.39 L2041.57 1215.39 L2042.15 1215.39 L2042.74 1215.39 L2043.33 1215.39 L2043.91 1215.39 L2044.5 1215.39 L2045.09 1215.39 L2045.67 1215.39 L2046.26 1215.39 L2046.85 1215.39 L2047.43 1215.39 L2048.02 1215.39 L2048.6 1215.39 L2049.19 1215.39 L2049.78 1215.39 L2050.36 1215.39 L2050.95 1215.39 L2051.54 1215.39 L2052.12 1215.39 L2052.71 1215.39 L2053.3 1215.39 L2053.88 1215.39 L2054.47 1215.39 L2055.06 1215.39 L2055.64 1215.39 L2056.23 1215.39 L2056.81 1215.39 L2057.4 1215.39 L2057.99 1215.39 L2058.57 1215.39 L2059.16 1215.39 L2059.75 1215.39 L2060.33 1215.39 L2060.92 1215.39 L2061.51 1215.39 L2062.09 1215.39 L2062.68 1215.39 L2063.27 1215.39 L2063.85 1215.39 L2064.44 1215.39 L2065.02 1215.39 L2065.61 1215.39 L2066.2 1215.39 L2066.78 1215.39 L2067.37 1215.39 L2067.96 1215.39 L2068.54 1215.39 L2069.13 1215.39 L2069.72 1215.39 L2070.3 1215.39 L2070.89 1215.39 L2071.48 1215.39 L2072.06 1215.39 L2072.65 1215.39 L2073.23 1215.39 L2073.82 1215.39 L2074.41 1215.39 L2074.99 1215.39 L2075.58 1215.39 L2076.17 1215.39 L2076.75 1215.39 L2077.34 1215.39 L2077.93 1215.39 L2078.51 1215.39 L2079.1 1215.39 L2079.68 1215.39 L2080.27 1215.39 L2080.86 1215.39 L2081.44 1215.39 L2082.03 1215.39 L2082.62 1215.39 L2083.2 1215.39 L2083.79 1215.39 L2084.38 1215.39 L2084.96 1215.39 L2085.55 1215.39 L2086.14 1215.39 L2086.72 1215.39 L2087.31 1215.39 L2087.89 1215.39 L2088.48 1215.39 L2089.07 1215.39 L2089.65 1215.39 L2090.24 1215.39 L2090.83 1215.39 L2091.41 1215.39 L2092 1215.39 L2092.59 1215.39 L2093.17 1215.39 L2093.76 1215.39 L2094.35 1215.39 L2094.93 1215.39 L2095.52 1215.39 L2096.1 1215.39 L2096.69 1215.39 L2097.28 1215.39 L2097.86 1215.39 L2098.45 1215.39 L2099.04 1215.39 L2099.62 1215.39 L2100.21 1215.39 L2100.8 1215.39 L2101.38 1215.39 L2101.97 1215.39 L2102.55 1215.39 L2103.14 1215.39 L2103.73 1215.39 L2104.31 1215.39 L2104.9 1215.39 L2105.49 1215.39 L2106.07 1215.39 L2106.66 1215.39 L2107.25 1215.39 L2107.83 1215.39 L2108.42 1215.39 L2109.01 1215.39 L2109.59 1215.39 L2110.18 1215.39 L2110.76 1215.39 L2111.35 1215.39 L2111.94 1215.39 L2112.52 1215.39 L2113.11 1215.39 L2113.7 1215.39 L2114.28 1215.39 L2114.87 1215.39 L2115.46 1215.39 L2116.04 1215.39 L2116.63 1215.39 L2117.22 1215.39 L2117.8 1215.39 L2118.39 1215.39 L2118.97 1215.39 L2119.56 1215.39 L2120.15 1215.39 L2120.73 1215.39 L2121.32 1215.39 L2121.91 1215.39 L2122.49 1215.39 L2123.08 1215.39 L2123.67 1215.39 L2124.25 1215.39 L2124.84 1215.39 L2125.42 1215.39 L2126.01 1215.39 L2126.6 1215.39 L2127.18 1215.39 L2127.77 1215.39 L2128.36 1215.39 L2128.94 1215.39 L2129.53 1215.39 L2130.12 1215.39 L2130.7 1215.39 L2131.29 1215.39 L2131.88 1215.39 L2132.46 1215.39 L2133.05 1215.39 L2133.63 1215.39 L2134.22 1215.39 L2134.81 1215.39 L2135.39 1215.39 L2135.98 1215.39 L2136.57 1215.39 L2137.15 1215.39 L2137.74 1215.39 L2138.33 1215.39 L2138.91 1215.39 L2139.5 1215.39 L2140.09 1215.39 L2140.67 1215.39 L2141.26 1215.39 L2141.84 1215.39 L2142.43 1215.39 L2143.02 1215.39 L2143.6 1215.39 L2144.19 1215.39 L2144.78 1215.39 L2145.36 1215.39 L2145.95 1215.39 L2146.54 1215.39 L2147.12 1215.39 L2147.71 1215.39 L2148.3 1215.39 L2148.88 1215.39 L2149.47 1215.39 L2150.05 1215.39 L2150.64 1215.39 L2151.23 1215.39 L2151.81 1215.39 L2152.4 1215.39 L2152.99 1215.39 L2153.57 1215.39 L2154.16 1215.39 L2154.75 1215.39 L2155.33 1215.39 L2155.92 1215.39 L2156.5 1215.39 L2157.09 1215.39 L2157.68 1215.39 L2158.26 1215.39 L2158.26 1214.52 L2157.68 1214.52 L2157.09 1214.52 L2156.5 1214.52 L2155.92 1214.52 L2155.33 1214.52 L2154.75 1214.52 L2154.16 1214.52 L2153.57 1214.52 L2152.99 1214.52 L2152.4 1214.52 L2151.81 1214.52 L2151.23 1214.52 L2150.64 1214.52 L2150.05 1214.52 L2149.47 1214.52 L2148.88 1214.52 L2148.3 1214.52 L2147.71 1214.52 L2147.12 1214.52 L2146.54 1214.52 L2145.95 1214.52 L2145.36 1214.52 L2144.78 1214.52 L2144.19 1214.52 L2143.6 1214.52 L2143.02 1214.52 L2142.43 1214.52 L2141.84 1214.52 L2141.26 1214.52 L2140.67 1214.52 L2140.09 1214.52 L2139.5 1214.52 L2138.91 1214.52 L2138.33 1214.52 L2137.74 1214.52 L2137.15 1214.52 L2136.57 1214.52 L2135.98 1214.52 L2135.39 1214.52 L2134.81 1214.52 L2134.22 1214.52 L2133.63 1214.52 L2133.05 1214.52 L2132.46 1214.52 L2131.88 1214.52 L2131.29 1214.52 L2130.7 1214.52 L2130.12 1214.52 L2129.53 1214.52 L2128.94 1214.52 L2128.36 1214.52 L2127.77 1214.52 L2127.18 1214.52 L2126.6 1214.52 L2126.01 1214.52 L2125.42 1214.52 L2124.84 1214.52 L2124.25 1214.52 L2123.67 1214.52 L2123.08 1214.52 L2122.49 1214.52 L2121.91 1214.52 L2121.32 1214.52 L2120.73 1214.52 L2120.15 1214.52 L2119.56 1214.52 L2118.97 1214.52 L2118.39 1214.52 L2117.8 1214.52 L2117.22 1214.52 L2116.63 1214.52 L2116.04 1214.52 L2115.46 1214.52 L2114.87 1214.52 L2114.28 1214.52 L2113.7 1214.52 L2113.11 1214.52 L2112.52 1214.52 L2111.94 1214.52 L2111.35 1214.52 L2110.76 1214.52 L2110.18 1214.52 L2109.59 1214.52 L2109.01 1214.52 L2108.42 1214.52 L2107.83 1214.52 L2107.25 1214.52 L2106.66 1214.52 L2106.07 1214.52 L2105.49 1214.52 L2104.9 1214.52 L2104.31 1214.52 L2103.73 1214.52 L2103.14 1214.52 L2102.55 1214.52 L2101.97 1214.52 L2101.38 1214.52 L2100.8 1214.52 L2100.21 1214.52 L2099.62 1214.52 L2099.04 1214.52 L2098.45 1214.52 L2097.86 1214.52 L2097.28 1214.52 L2096.69 1214.52 L2096.1 1214.52 L2095.52 1214.52 L2094.93 1214.52 L2094.35 1214.52 L2093.76 1214.52 L2093.17 1214.52 L2092.59 1214.52 L2092 1214.52 L2091.41 1214.52 L2090.83 1214.52 L2090.24 1214.52 L2089.65 1214.52 L2089.07 1214.52 L2088.48 1214.52 L2087.89 1214.52 L2087.31 1214.52 L2086.72 1214.52 L2086.14 1214.52 L2085.55 1214.52 L2084.96 1214.52 L2084.38 1214.52 L2083.79 1214.52 L2083.2 1214.52 L2082.62 1214.52 L2082.03 1214.52 L2081.44 1214.52 L2080.86 1214.52 L2080.27 1214.52 L2079.68 1214.52 L2079.1 1214.52 L2078.51 1214.52 L2077.93 1214.52 L2077.34 1214.52 L2076.75 1214.52 L2076.17 1214.52 L2075.58 1214.52 L2074.99 1214.52 L2074.41 1214.52 L2073.82 1214.52 L2073.23 1214.52 L2072.65 1214.52 L2072.06 1214.52 L2071.48 1214.52 L2070.89 1214.52 L2070.3 1214.52 L2069.72 1214.52 L2069.13 1214.52 L2068.54 1214.52 L2067.96 1214.52 L2067.37 1214.52 L2066.78 1214.52 L2066.2 1214.52 L2065.61 1214.52 L2065.02 1214.52 L2064.44 1214.52 L2063.85 1214.52 L2063.27 1214.52 L2062.68 1214.52 L2062.09 1214.52 L2061.51 1214.52 L2060.92 1214.52 L2060.33 1214.52 L2059.75 1214.52 L2059.16 1214.52 L2058.57 1214.52 L2057.99 1214.52 L2057.4 1214.52 L2056.81 1214.52 L2056.23 1214.52 L2055.64 1214.52 L2055.06 1214.52 L2054.47 1214.52 L2053.88 1214.52 L2053.3 1214.52 L2052.71 1214.52 L2052.12 1214.52 L2051.54 1214.52 L2050.95 1214.52 L2050.36 1214.52 L2049.78 1214.52 L2049.19 1214.52 L2048.6 1214.52 L2048.02 1214.52 L2047.43 1214.52 L2046.85 1214.52 L2046.26 1214.52 L2045.67 1214.52 L2045.09 1214.52 L2044.5 1214.52 L2043.91 1214.52 L2043.33 1214.52 L2042.74 1214.52 L2042.15 1214.52 L2041.57 1214.52 L2040.98 1214.52 L2040.4 1214.52 L2039.81 1214.52 L2039.22 1214.52 L2038.64 1214.52 L2038.05 1214.52 L2037.46 1214.52 L2036.88 1214.52 L2036.29 1214.52 L2035.7 1214.52 L2035.12 1214.52 L2034.53 1214.52 L2033.94 1214.52 L2033.36 1214.52 L2032.77 1214.52 L2032.19 1214.52 L2031.6 1214.52 L2031.01 1214.52 L2030.43 1214.52 L2029.84 1214.52 L2029.25 1214.52 L2028.67 1214.52 L2028.08 1214.52 L2027.49 1214.52 L2026.91 1214.52 L2026.32 1214.52 L2025.73 1214.52 L2025.15 1214.52 L2024.56 1214.52 L2023.98 1214.52 L2023.39 1214.52 L2022.8 1214.52 L2022.22 1214.52 L2021.63 1214.52 L2021.04 1214.52 L2020.46 1214.52 L2019.87 1214.52 L2019.28 1214.52 L2018.7 1214.52 L2018.11 1214.52 L2017.53 1214.52 L2016.94 1214.52 L2016.35 1214.52 L2015.77 1214.52 L2015.18 1214.52 L2014.59 1214.52 L2014.01 1214.52 L2013.42 1214.52 L2012.83 1214.52 L2012.25 1214.52 L2011.66 1214.52 L2011.07 1214.52 L2010.49 1214.52 L2009.9 1214.52 L2009.32 1214.52 L2008.73 1214.52 L2008.14 1214.52 L2007.56 1214.52 L2006.97 1214.52 L2006.38 1214.52 L2005.8 1214.52 L2005.21 1214.52 L2004.62 1214.52 L2004.04 1214.52 L2003.45 1214.52 L2002.86 1214.52 L2002.28 1214.52 L2001.69 1214.52 L2001.11 1214.52 L2000.52 1214.52 L1999.93 1214.52 L1999.35 1214.52 L1998.76 1214.52 L1998.17 1214.52 L1997.59 1214.52 L1997 1214.52 L1996.41 1214.52 L1995.83 1214.52 L1995.24 1214.52 L1994.65 1214.52 L1994.07 1214.52 L1993.48 1214.52 L1992.9 1214.52 L1992.31 1214.52 L1991.72 1214.52 L1991.14 1214.52 L1990.55 1214.52 L1989.96 1214.52 L1989.38 1214.52 L1988.79 1214.52 L1988.2 1214.52 L1987.62 1214.52 L1987.03 1214.52 L1986.45 1214.52 L1985.86 1214.52 L1985.27 1214.52 L1984.69 1214.52 L1984.1 1214.52 L1983.51 1214.52 L1982.93 1214.52 L1982.34 1214.52 L1981.75 1214.52 L1981.17 1214.52 L1980.58 1214.52 L1979.99 1214.52 L1979.41 1214.52 L1978.82 1214.52 L1978.24 1214.52 L1977.65 1214.52 L1977.06 1214.52 L1976.48 1214.52 L1975.89 1214.52 L1975.3 1214.52 L1974.72 1214.52 L1974.13 1214.52 L1973.54 1214.52 L1972.96 1214.52 L1972.37 1214.52 L1971.78 1214.52 L1971.2 1214.52 L1970.61 1214.52 L1970.03 1214.52 L1969.44 1214.52 L1968.85 1214.52 L1968.27 1214.52 L1967.68 1214.52 L1967.09 1214.52 L1966.51 1214.52 L1965.92 1214.52 L1965.33 1214.52 L1964.75 1214.52 L1964.16 1214.52 L1963.58 1214.52 L1962.99 1214.52 L1962.4 1214.52 L1961.82 1214.52 L1961.23 1214.52 L1960.64 1214.52 L1960.06 1214.52 L1959.47 1214.52 L1958.88 1214.52 L1958.3 1214.52 L1957.71 1214.52 L1957.12 1214.52 L1956.54 1214.52 L1955.95 1214.52 L1955.37 1214.52 L1954.78 1214.52 L1954.19 1214.52 L1953.61 1214.52 L1953.02 1214.52 L1952.43 1214.52 L1951.85 1214.52 L1951.26 1214.52 L1950.67 1214.52 L1950.09 1214.52 L1949.5 1214.52 L1948.91 1214.52 L1948.33 1214.52 L1947.74 1214.52 L1947.16 1214.52 L1946.57 1214.52 L1945.98 1214.52 L1945.4 1214.52 L1944.81 1214.52 L1944.22 1214.52 L1943.64 1214.52 L1943.05 1214.52 L1942.46 1214.52 L1941.88 1214.52 L1941.29 1214.52 L1940.71 1214.52 L1940.12 1214.52 L1939.53 1214.52 L1938.95 1214.52 L1938.36 1214.52 L1937.77 1214.52 L1937.19 1214.52 L1936.6 1214.52 L1936.01 1214.52 L1935.43 1214.52 L1934.84 1214.52 L1934.25 1214.52 L1933.67 1214.52 L1933.08 1214.52 L1932.5 1214.52 L1931.91 1214.52 L1931.32 1214.52 L1930.74 1214.52 L1930.15 1214.52 L1929.56 1214.52 L1928.98 1214.52 L1928.39 1214.52 L1927.8 1214.52 L1927.22 1214.52 L1926.63 1214.52 L1926.04 1214.52 L1925.46 1214.52 L1924.87 1214.52 L1924.29 1214.52 L1923.7 1214.52 L1923.11 1214.52 L1922.53 1214.52 L1921.94 1214.52 L1921.35 1214.52 L1920.77 1214.52 L1920.18 1214.52 L1919.59 1214.52 L1919.01 1214.52 L1918.42 1214.52 L1917.83 1214.52 L1917.25 1214.52 L1916.66 1214.52 L1916.08 1214.52 L1915.49 1214.52 L1914.9 1214.52 L1914.32 1214.52 L1913.73 1214.52 L1913.14 1214.52 L1912.56 1214.52 L1911.97 1214.52 L1911.38 1214.52 L1910.8 1214.52 L1910.21 1214.52 L1909.63 1214.52 L1909.04 1214.52 L1908.45 1214.52 L1907.87 1214.52 L1907.28 1214.52 L1906.69 1214.52 L1906.11 1214.52 L1905.52 1214.52 L1904.93 1214.52 L1904.35 1214.52 L1903.76 1214.52 L1903.17 1214.52 L1902.59 1214.52 L1902 1214.52 L1901.42 1214.52 L1900.83 1214.52 L1900.24 1214.52 L1899.66 1214.52 L1899.07 1214.52 L1898.48 1214.52 L1897.9 1214.52 L1897.31 1214.52 L1896.72 1214.52 L1896.14 1214.52 L1895.55 1214.52 L1894.96 1214.52 L1894.38 1214.52 L1893.79 1214.52 L1893.21 1214.52 L1892.62 1214.52 L1892.03 1214.52 L1891.45 1214.52 L1890.86 1214.52 L1890.27 1214.52 L1889.69 1214.52 L1889.1 1214.52 L1888.51 1214.52 L1887.93 1214.52 L1887.34 1214.52 L1886.76 1214.52 L1886.17 1214.52 L1885.58 1214.52 L1885 1214.52 L1884.41 1214.52 L1883.82 1214.52 L1883.24 1214.52 L1882.65 1214.52 L1882.06 1214.52 L1881.48 1214.52 L1880.89 1214.52 L1880.3 1214.52 L1879.72 1214.52 L1879.13 1214.52 L1878.55 1214.52 L1877.96 1214.52 L1877.37 1214.52 L1876.79 1214.52 L1876.2 1214.52 L1875.61 1214.52 L1875.03 1214.52 L1874.44 1214.52 L1873.85 1214.52 L1873.27 1214.52 L1872.68 1214.52 L1872.09 1214.52 L1871.51 1214.52 L1870.92 1214.52 L1870.34 1214.52 L1869.75 1214.52 L1869.16 1214.52 L1868.58 1214.52 L1867.99 1214.52 L1867.4 1214.52 L1866.82 1214.52 L1866.23 1214.52 L1865.64 1214.52 L1865.06 1214.52 L1864.47 1214.52 L1863.88 1214.52 L1863.3 1214.52 L1862.71 1214.52 L1862.13 1214.52 L1861.54 1214.52 L1860.95 1214.52 L1860.37 1214.52 L1859.78 1214.52 L1859.19 1214.52 L1858.61 1214.52 L1858.02 1214.52 L1857.43 1214.52 L1856.85 1214.52 L1856.26 1214.52 L1855.68 1214.52 L1855.09 1214.52 L1854.5 1214.52 L1853.92 1214.52 L1853.33 1214.52 L1852.74 1214.52 L1852.16 1214.52 L1851.57 1214.52 L1850.98 1214.52 L1850.4 1214.52 L1849.81 1214.52 L1849.22 1214.52 L1848.64 1214.52 L1848.05 1214.52 L1847.47 1214.52 L1846.88 1214.52 L1846.29 1214.52 L1845.71 1214.52 L1845.12 1214.52 L1844.53 1214.52 L1843.95 1214.52 L1843.36 1214.52 L1842.77 1214.52 L1842.19 1214.52 L1841.6 1214.52 L1841.01 1214.52 L1840.43 1214.52 L1839.84 1214.52 L1839.26 1214.52 L1838.67 1214.52 L1838.08 1214.52 L1837.5 1214.52 L1836.91 1214.52 L1836.32 1214.52 L1835.74 1214.52 L1835.15 1214.52 L1834.56 1214.52 L1833.98 1214.52 L1833.39 1214.52 L1832.81 1214.52 L1832.22 1214.52 L1831.63 1214.52 L1831.05 1214.52 L1830.46 1214.52 L1829.87 1214.52 L1829.29 1214.52 L1828.7 1214.52 L1828.11 1214.52 L1827.53 1214.52 L1826.94 1214.52 L1826.35 1214.52 L1825.77 1214.52 L1825.18 1214.52 L1824.6 1214.52 L1824.01 1214.52 L1823.42 1214.52 L1822.84 1214.52 L1822.25 1214.52 L1821.66 1214.52 L1821.08 1214.52 L1820.49 1214.52 L1819.9 1214.52 L1819.32 1214.52 L1818.73 1214.52 L1818.14 1214.52 L1817.56 1214.52 L1816.97 1214.52 L1816.39 1214.52 L1815.8 1214.52 L1815.21 1214.52 L1814.63 1214.52 L1814.04 1214.52 L1813.45 1214.52 L1812.87 1214.52 L1812.28 1214.52 L1811.69 1214.52 L1811.11 1214.52 L1810.52 1214.52 L1809.94 1214.52 L1809.35 1214.52 L1808.76 1214.52 L1808.18 1214.52 L1807.59 1214.52 L1807 1214.52 L1806.42 1214.52 L1805.83 1214.52 L1805.24 1214.52 L1804.66 1214.52 L1804.07 1214.52 L1803.48 1214.52 L1802.9 1214.52 L1802.31 1214.52 L1801.73 1214.52 L1801.14 1214.52 L1800.55 1214.52 L1799.97 1214.52 L1799.38 1214.52 L1798.79 1214.52 L1798.21 1214.52 L1797.62 1214.52 L1797.03 1214.52 L1796.45 1214.52 L1795.86 1214.52 L1795.27 1214.52 L1794.69 1214.52 L1794.1 1214.52 L1793.52 1214.52 L1792.93 1214.52 L1792.34 1214.52 L1791.76 1214.52 L1791.17 1214.52 L1790.58 1214.52 L1790 1214.52 L1789.41 1214.52 L1788.82 1214.52 L1788.24 1214.52 L1787.65 1214.52 L1787.06 1214.52 L1786.48 1214.52 L1785.89 1214.52 L1785.31 1214.52 L1784.72 1214.52 L1784.13 1214.52 L1783.55 1214.52 L1782.96 1214.52 L1782.37 1214.52 L1781.79 1214.52 L1781.2 1214.52 L1780.61 1214.52 L1780.03 1214.52 L1779.44 1214.52 L1778.86 1214.52 L1778.27 1214.52 L1777.68 1214.52 L1777.1 1214.52 L1776.51 1214.52 L1775.92 1214.52 L1775.34 1214.52 L1774.75 1214.52 L1774.16 1214.52 L1773.58 1214.52 L1772.99 1214.52 L1772.4 1214.52 L1771.82 1214.52 L1771.23 1214.52 L1770.65 1214.52 L1770.06 1214.52 L1769.47 1214.52 L1768.89 1214.52 L1768.3 1214.52 L1767.71 1214.52 L1767.13 1214.52 L1766.54 1214.52 L1765.95 1214.52 L1765.37 1214.52 L1764.78 1214.52 L1764.19 1214.52 L1763.61 1214.52 L1763.02 1214.52 L1762.44 1214.52 L1761.85 1214.52 L1761.26 1214.52 L1760.68 1214.52 L1760.09 1214.52 L1759.5 1214.52 L1758.92 1214.52 L1758.33 1214.52 L1757.74 1214.52 L1757.16 1214.52 L1756.57 1214.52 L1755.99 1214.52 L1755.4 1214.52 L1754.81 1214.52 L1754.23 1214.52 L1753.64 1214.52 L1753.05 1214.52 L1752.47 1214.52 L1751.88 1214.52 L1751.29 1214.52 L1750.71 1214.52 L1750.12 1214.52 L1749.53 1214.52 L1748.95 1214.52 L1748.36 1214.52 L1747.78 1214.52 L1747.19 1214.52 L1746.6 1214.52 L1746.02 1214.52 L1745.43 1214.52 L1744.84 1214.52 L1744.26 1214.52 L1743.67 1214.52 L1743.08 1214.52 L1742.5 1214.52 L1741.91 1214.52 L1741.32 1214.52 L1740.74 1214.52 L1740.15 1214.52 L1739.57 1214.52 L1738.98 1214.52 L1738.39 1214.52 L1737.81 1214.52 L1737.22 1214.52 L1736.63 1214.52 L1736.05 1214.52 L1735.46 1214.52 L1734.87 1214.52 L1734.29 1214.52 L1733.7 1214.52 L1733.11 1214.52 L1732.53 1214.52 L1731.94 1214.52 L1731.36 1214.52 L1730.77 1214.52 L1730.18 1214.52 L1729.6 1214.52 L1729.01 1214.52 L1728.42 1214.52 L1727.84 1214.52 L1727.25 1214.52 L1726.66 1214.52 L1726.08 1214.52 L1725.49 1214.52 L1724.91 1214.52 L1724.32 1214.52 L1723.73 1214.52 L1723.15 1214.52 L1722.56 1214.52 L1721.97 1214.52 L1721.39 1214.52 L1720.8 1214.52 L1720.21 1214.52 L1719.63 1214.52 L1719.04 1214.52 L1718.45 1214.52 L1717.87 1214.52 L1717.28 1214.52 L1716.7 1214.52 L1716.11 1214.52 L1715.52 1214.52 L1714.94 1214.52 L1714.35 1214.52 L1713.76 1214.52 L1713.18 1214.52 L1712.59 1214.52 L1712 1214.52 L1711.42 1214.52 L1710.83 1214.52 L1710.24 1214.52 L1709.66 1214.52 L1709.07 1214.52 L1708.49 1214.52 L1707.9 1214.52 L1707.31 1214.52 L1706.73 1214.52 L1706.14 1214.52 L1705.55 1214.52 L1704.97 1214.52 L1704.38 1214.52 L1703.79 1214.52 L1703.21 1214.52 L1702.62 1214.52 L1702.04 1214.52 L1701.45 1214.52 L1700.86 1214.52 L1700.28 1214.52 L1699.69 1214.52 L1699.1 1214.52 L1698.52 1214.52 L1697.93 1214.52 L1697.34 1214.52 L1696.76 1214.52 L1696.17 1214.52 L1695.58 1214.52 L1695 1214.52 L1694.41 1214.52 L1693.83 1214.52 L1693.24 1214.52 L1692.65 1214.52 L1692.07 1214.52 L1691.48 1214.52 L1690.89 1214.52 L1690.31 1214.52 L1689.72 1214.52 L1689.13 1214.52 L1688.55 1214.52 L1687.96 1214.52 L1687.37 1214.52 L1686.79 1214.52 L1686.2 1214.52 L1685.62 1214.52 L1685.03 1214.52 L1684.44 1214.52 L1683.86 1214.52 L1683.27 1214.52 L1682.68 1214.52 L1682.1 1214.52 L1681.51 1214.52 L1680.92 1214.52 L1680.34 1214.52 L1679.75 1214.52 L1679.17 1214.52 L1678.58 1214.52 L1677.99 1214.52 L1677.41 1214.52 L1676.82 1214.52 L1676.23 1214.52 L1675.65 1214.52 L1675.06 1214.52 L1674.47 1214.52 L1673.89 1214.52 L1673.3 1214.52 L1672.71 1214.52 L1672.13 1214.52 L1671.54 1214.52 L1670.96 1214.52 L1670.37 1214.52 L1669.78 1214.52 L1669.2 1214.52 L1668.61 1214.52 L1668.02 1214.52 L1667.44 1214.52 L1666.85 1214.52 L1666.26 1214.52 L1665.68 1214.52 L1665.09 1214.52 L1664.5 1214.52 L1663.92 1214.52 L1663.33 1214.52 L1662.75 1214.52 L1662.16 1214.52 L1661.57 1214.52 L1660.99 1214.52 L1660.4 1214.52 L1659.81 1214.52 L1659.23 1214.52 L1658.64 1214.52 L1658.05 1214.52 L1657.47 1214.52 L1656.88 1214.52 L1656.29 1214.52 L1655.71 1214.52 L1655.12 1214.52 L1654.54 1214.52 L1653.95 1214.52 L1653.36 1214.52 L1652.78 1214.52 L1652.19 1214.52 L1651.6 1214.52 L1651.02 1214.52 L1650.43 1214.52 L1649.84 1214.52 L1649.26 1214.52 L1648.67 1214.52 L1648.09 1214.52 L1647.5 1214.52 L1646.91 1214.52 L1646.33 1214.52 L1645.74 1214.52 L1645.15 1214.52 L1644.57 1214.52 L1643.98 1214.52 L1643.39 1214.52 L1642.81 1214.52 L1642.22 1214.52 L1641.63 1214.52 L1641.05 1214.52 L1640.46 1214.52 L1639.88 1214.52 L1639.29 1214.52 L1638.7 1214.52 L1638.12 1214.52 L1637.53 1214.52 L1636.94 1214.52 L1636.36 1214.52 L1635.77 1214.52 L1635.18 1214.52 L1634.6 1214.52 L1634.01 1214.52 L1633.42 1214.52 L1632.84 1214.52 L1632.25 1214.52 L1631.67 1214.52 L1631.08 1214.52 L1630.49 1214.52 L1629.91 1214.52 L1629.32 1214.52 L1628.73 1214.52 L1628.15 1214.52 L1627.56 1214.52 L1626.97 1214.52 L1626.39 1214.52 L1625.8 1214.52 L1625.22 1214.52 L1624.63 1214.52 L1624.04 1214.52 L1623.46 1214.52 L1622.87 1214.52 L1622.28 1214.52 L1621.7 1214.52 L1621.11 1214.52 L1620.52 1214.52 L1619.94 1214.52 L1619.35 1214.52 L1618.76 1214.52 L1618.18 1214.52 L1617.59 1214.52 L1617.01 1214.52 L1616.42 1214.52 L1615.83 1214.52 L1615.25 1214.52 L1614.66 1214.52 L1614.07 1214.52 L1613.49 1214.52 L1612.9 1214.52 L1612.31 1214.52 L1611.73 1214.52 L1611.14 1214.52 L1610.55 1214.52 L1609.97 1214.52 L1609.38 1214.52 L1608.8 1214.52 L1608.21 1214.52 L1607.62 1214.52 L1607.04 1214.52 L1606.45 1214.52 L1605.86 1214.52 L1605.28 1214.52 L1604.69 1214.52 L1604.1 1214.52 L1603.52 1214.52 L1602.93 1214.52 L1602.34 1214.52 L1601.76 1214.52 L1601.17 1214.52 L1600.59 1214.52 L1600 1214.52 L1599.41 1214.52 L1598.83 1214.52 L1598.24 1214.52 L1597.65 1214.52 L1597.07 1214.52 L1596.48 1214.52 L1595.89 1214.52 L1595.31 1214.52 L1594.72 1214.52 L1594.14 1214.52 L1593.55 1214.52 L1592.96 1214.52 L1592.38 1214.52 L1591.79 1214.52 L1591.2 1214.52 L1590.62 1214.52 L1590.03 1214.52 L1589.44 1214.52 L1588.86 1214.52 L1588.27 1214.52 L1587.68 1214.52 L1587.1 1214.52 L1586.51 1214.52 L1585.93 1214.52 L1585.34 1214.52 L1584.75 1214.52 L1584.17 1214.52 L1583.58 1214.52 L1582.99 1214.52 L1582.41 1214.52 L1581.82 1214.52 L1581.23 1214.52 L1580.65 1214.52 L1580.06 1214.52 L1579.47 1214.52 L1578.89 1214.52 L1578.3 1214.52 L1577.72 1214.52 L1577.13 1214.52 L1576.54 1214.52 L1575.96 1214.52 L1575.37 1214.52 L1574.78 1214.52 L1574.2 1214.52 L1573.61 1214.52 L1573.02 1214.52 L1572.44 1214.52 L1571.85 1214.52 L1571.27 1214.52 L1570.68 1214.52 L1570.09 1214.52 L1569.51 1214.52 L1568.92 1214.52 L1568.33 1214.52 L1567.75 1214.52 L1567.16 1214.52 L1566.57 1214.52 L1565.99 1214.52 L1565.4 1214.52 L1564.81 1214.52 L1564.23 1214.52 L1563.64 1214.52 L1563.06 1214.52 L1562.47 1214.52 L1561.88 1214.52 L1561.3 1214.52 L1560.71 1214.52 L1560.12 1214.52 L1559.54 1214.52 L1558.95 1214.52 L1558.36 1214.52 L1557.78 1214.52 L1557.19 1214.52 L1556.6 1214.52 L1556.02 1214.52 L1555.43 1214.52 L1554.85 1214.52 L1554.26 1214.52 L1553.67 1214.52 L1553.09 1214.52 L1552.5 1214.52 L1551.91 1214.52 L1551.33 1214.52 L1550.74 1214.52 L1550.15 1214.52 L1549.57 1214.52 L1548.98 1214.52 L1548.4 1214.52 L1547.81 1214.52 L1547.22 1214.52 L1546.64 1214.52 L1546.05 1214.52 L1545.46 1214.52 L1544.88 1214.52 L1544.29 1214.52 L1543.7 1214.52 L1543.12 1214.52 L1542.53 1214.52 L1541.94 1214.52 L1541.36 1214.52 L1540.77 1214.52 L1540.19 1214.52 L1539.6 1214.52 L1539.01 1214.52 L1538.43 1214.52 L1537.84 1214.52 L1537.25 1214.52 L1536.67 1214.52 L1536.08 1214.52 L1535.49 1214.52 L1534.91 1214.52 L1534.32 1214.52 L1533.73 1214.52 L1533.15 1214.52 L1532.56 1214.52 L1531.98 1214.52 L1531.39 1214.52 L1530.8 1214.52 L1530.22 1214.52 L1529.63 1214.52 L1529.04 1214.52 L1528.46 1214.52 L1527.87 1214.52 L1527.28 1214.52 L1526.7 1214.52 L1526.11 1214.52 L1525.52 1214.52 L1524.94 1214.52 L1524.35 1214.52 L1523.77 1214.52 L1523.18 1214.52 L1522.59 1214.52 L1522.01 1214.52 L1521.42 1214.52 L1520.83 1214.52 L1520.25 1214.52 L1519.66 1214.52 L1519.07 1214.52 L1518.49 1214.52 L1517.9 1214.52 L1517.32 1214.52 L1516.73 1214.52 L1516.14 1214.52 L1515.56 1214.52 L1514.97 1214.52 L1514.38 1214.52 L1513.8 1214.52 L1513.21 1214.52 L1512.62 1214.52 L1512.04 1214.52 L1511.45 1214.52 L1510.86 1214.52 L1510.28 1214.52 L1509.69 1214.52 L1509.11 1214.52 L1508.52 1214.52 L1507.93 1214.52 L1507.35 1214.52 L1506.76 1214.52 L1506.17 1214.52 L1505.59 1214.52 L1505 1214.52 L1504.41 1214.52 L1503.83 1214.52 L1503.24 1214.52 L1502.65 1214.52 L1502.07 1214.52 L1501.48 1214.52 L1500.9 1214.52 L1500.31 1214.52 L1499.72 1214.52 L1499.14 1214.52 L1498.55 1214.52 L1497.96 1214.52 L1497.38 1214.52 L1496.79 1214.52 L1496.2 1214.52 L1495.62 1214.52 L1495.03 1214.52 L1494.45 1214.52 L1493.86 1214.52 L1493.27 1214.52 L1492.69 1214.52 L1492.1 1214.52 L1491.51 1214.52 L1490.93 1214.52 L1490.34 1214.52 L1489.75 1214.52 L1489.17 1214.52 L1488.58 1214.52 L1487.99 1214.52 L1487.41 1214.52 L1486.82 1214.52 L1486.24 1214.52 L1485.65 1214.52 L1485.06 1214.52 L1484.48 1214.52 L1483.89 1214.52 L1483.3 1214.52 L1482.72 1214.52 L1482.13 1214.52 L1481.54 1214.52 L1480.96 1214.52 L1480.37 1214.52 L1479.78 1214.52 L1479.2 1214.52 L1478.61 1214.52 L1478.03 1214.52 L1477.44 1214.52 L1476.85 1214.52 L1476.27 1214.52 L1475.68 1214.52 L1475.09 1214.52 L1474.51 1214.52 L1473.92 1214.52 L1473.33 1214.52 L1472.75 1214.52 L1472.16 1214.52 L1471.57 1214.52 L1470.99 1214.52 L1470.4 1214.52 L1469.82 1214.52 L1469.23 1214.52 L1468.64 1214.52 L1468.06 1214.52 L1467.47 1214.52 L1466.88 1214.52 L1466.3 1214.52 L1465.71 1214.52 L1465.12 1214.52 L1464.54 1214.52 L1463.95 1214.52 L1463.37 1214.52 L1462.78 1214.52 L1462.19 1214.52 L1461.61 1214.52 L1461.02 1214.52 L1460.43 1214.52 L1459.85 1214.52 L1459.26 1214.52 L1458.67 1214.52 L1458.09 1214.52 L1457.5 1214.52 L1456.91 1214.52 L1456.33 1214.52 L1455.74 1214.52 L1455.16 1214.52 L1454.57 1214.52 L1453.98 1214.52 L1453.4 1214.52 L1452.81 1214.52 L1452.22 1214.52 L1451.64 1214.52 L1451.05 1214.52 L1450.46 1214.52 L1449.88 1214.52 L1449.29 1214.52 L1448.7 1214.52 L1448.12 1214.52 L1447.53 1214.52 L1446.95 1214.52 L1446.36 1214.52 L1445.77 1214.52 L1445.19 1214.52 L1444.6 1214.52 L1444.01 1214.52 L1443.43 1214.52 L1442.84 1214.52 L1442.25 1214.52 L1441.67 1214.52 L1441.08 1214.52 L1440.5 1214.52 L1439.91 1214.52 L1439.32 1214.52 L1438.74 1214.52 L1438.15 1214.52 L1437.56 1214.52 L1436.98 1214.52 L1436.39 1214.52 L1435.8 1214.52 L1435.22 1214.52 L1434.63 1214.52 L1434.04 1214.52 L1433.46 1214.52 L1432.87 1214.52 L1432.29 1214.52 L1431.7 1214.52 L1431.11 1214.52 L1430.53 1214.52 L1429.94 1214.52 L1429.35 1214.52 L1428.77 1214.52 L1428.18 1214.52 L1427.59 1214.52 L1427.01 1214.52 L1426.42 1214.52 L1425.83 1214.52 L1425.25 1214.52 L1424.66 1214.52 L1424.08 1214.52 L1423.49 1214.52 L1422.9 1214.52 L1422.32 1214.52 L1421.73 1214.52 L1421.14 1214.52 L1420.56 1214.52 L1419.97 1214.52 L1419.38 1214.52 L1418.8 1214.52 L1418.21 1214.52 L1417.63 1214.52 L1417.04 1214.52 L1416.45 1214.52 L1415.87 1214.52 L1415.28 1214.52 L1414.69 1214.52 L1414.11 1214.52 L1413.52 1214.52 L1412.93 1214.52 L1412.35 1214.52 L1411.76 1214.52 L1411.17 1214.52 L1410.59 1214.52 L1410 1214.52 L1409.42 1214.52 L1408.83 1214.52 L1408.24 1214.52 L1407.66 1214.52 L1407.07 1214.52 L1406.48 1214.52 L1405.9 1214.52 L1405.31 1214.52 L1404.72 1214.52 L1404.14 1214.52 L1403.55 1214.52 L1402.96 1214.52 L1402.38 1214.52 L1401.79 1214.52 L1401.21 1214.52 L1400.62 1214.52 L1400.03 1214.52 L1399.45 1214.52 L1398.86 1214.52 L1398.27 1214.52 L1397.69 1214.52 L1397.1 1214.52 L1396.51 1214.52 L1395.93 1214.52 L1395.34 1214.52 L1394.75 1214.52 L1394.17 1214.52 L1393.58 1214.52 L1393 1214.52 L1392.41 1214.52 L1391.82 1214.52 L1391.24 1214.52 L1390.65 1214.52 L1390.06 1214.52 L1389.48 1214.52 L1388.89 1214.52 L1388.3 1214.52 L1387.72 1214.52 L1387.13 1214.52 L1386.55 1214.52 L1385.96 1214.52 L1385.37 1214.52 L1384.79 1214.52 L1384.2 1214.52 L1383.61 1214.52 L1383.03 1214.52 L1382.44 1214.52 L1381.85 1214.52 L1381.27 1214.52 L1380.68 1214.52 L1380.09 1214.52 L1379.51 1214.52 L1378.92 1214.52 L1378.34 1214.52 L1377.75 1214.52 L1377.16 1214.52 L1376.58 1214.52 L1375.99 1214.52 L1375.4 1214.52 L1374.82 1214.52 L1374.23 1214.52 L1373.64 1214.52 L1373.06 1214.52 L1372.47 1214.52 L1371.88 1214.52 L1371.3 1214.52 L1370.71 1214.52 L1370.13 1214.52 L1369.54 1214.52 L1368.95 1214.52 L1368.37 1214.52 L1367.78 1214.52 L1367.19 1214.52 L1366.61 1214.52 L1366.02 1214.52 L1365.43 1214.52 L1364.85 1214.52 L1364.26 1214.52 L1363.68 1214.52 L1363.09 1214.52 L1362.5 1214.52 L1361.92 1214.52 L1361.33 1214.52 L1360.74 1214.52 L1360.16 1214.52 L1359.57 1214.52 L1358.98 1214.52 L1358.4 1214.52 L1357.81 1214.52 L1357.22 1214.52 L1356.64 1214.52 L1356.05 1214.52 L1355.47 1214.52 L1354.88 1214.52 L1354.29 1214.52 L1353.71 1214.52 L1353.12 1214.52 L1352.53 1214.52 L1351.95 1214.52 L1351.36 1214.52 L1350.77 1214.52 L1350.19 1214.52 L1349.6 1214.52 L1349.01 1214.52 L1348.43 1214.52 L1347.84 1214.52 L1347.26 1214.52 L1346.67 1214.52 L1346.08 1214.52 L1345.5 1214.52 L1344.91 1214.52 L1344.32 1214.52 L1343.74 1214.52 L1343.15 1214.52 L1342.56 1214.52 L1341.98 1214.52 L1341.39 1214.52 L1340.8 1214.52 L1340.22 1214.52 L1339.63 1214.52 L1339.05 1214.52 L1338.46 1214.52 L1337.87 1214.52 L1337.29 1214.52 L1336.7 1214.52 L1336.11 1214.52 L1335.53 1214.52 L1334.94 1214.52 L1334.35 1214.52 L1333.77 1214.52 L1333.18 1214.52 L1332.6 1214.52 L1332.01 1214.52 L1331.42 1214.52 L1330.84 1214.52 L1330.25 1214.52 L1329.66 1214.52 L1329.08 1214.52 L1328.49 1214.52 L1327.9 1214.52 L1327.32 1214.52 L1326.73 1214.52 L1326.14 1214.52 L1325.56 1214.52 L1324.97 1214.52 L1324.39 1214.52 L1323.8 1214.52 L1323.21 1214.52 L1322.63 1214.52 L1322.04 1214.52 L1321.45 1214.52 L1320.87 1214.52 L1320.28 1214.52 L1319.69 1214.52 L1319.11 1214.52 L1318.52 1214.52 L1317.93 1214.52 L1317.35 1214.52 L1316.76 1214.52 L1316.18 1214.52 L1315.59 1214.52 L1315 1214.52 L1314.42 1214.52 L1313.83 1214.52 L1313.24 1214.52 L1312.66 1214.52 L1312.07 1214.52 L1311.48 1214.52 L1310.9 1214.52 L1310.31 1214.52 L1309.73 1214.52 L1309.14 1214.52 L1308.55 1214.52 L1307.97 1214.52 L1307.38 1214.52 L1306.79 1214.52 L1306.21 1214.52 L1305.62 1214.52 L1305.03 1214.52 L1304.45 1214.52 L1303.86 1214.52 L1303.27 1214.52 L1302.69 1214.52 L1302.1 1214.52 L1301.52 1214.52 L1300.93 1214.52 L1300.34 1214.52 L1299.76 1214.52 L1299.17 1214.52 L1298.58 1214.52 L1298 1214.52 L1297.41 1214.52 L1296.82 1214.52 L1296.24 1214.52 L1295.65 1214.52 L1295.06 1214.52 L1294.48 1214.52 L1293.89 1214.52 L1293.31 1214.52 L1292.72 1214.52 L1292.13 1214.52 L1291.55 1214.52 L1290.96 1214.52 L1290.37 1214.52 L1289.79 1214.52 L1289.2 1214.52 L1288.61 1214.52 L1288.03 1214.52 L1287.44 1214.52 L1286.86 1214.52 L1286.27 1214.52 L1285.68 1214.52 L1285.1 1214.52 L1284.51 1214.52 L1283.92 1214.52 L1283.34 1214.52 L1282.75 1214.52 L1282.16 1214.52 L1281.58 1214.52 L1280.99 1214.52 L1280.4 1214.52 L1279.82 1214.52 L1279.23 1214.52 L1278.65 1214.52 L1278.06 1214.52 L1277.47 1214.52 L1276.89 1214.52 L1276.3 1214.52 L1275.71 1214.52 L1275.13 1214.52 L1274.54 1214.52 L1273.95 1214.52 L1273.37 1214.52 L1272.78 1214.52 L1272.19 1214.52 L1271.61 1214.52 L1271.02 1214.52 L1270.44 1214.52 L1269.85 1214.52 L1269.26 1214.52 L1268.68 1214.52 L1268.09 1214.52 L1267.5 1214.52 L1266.92 1214.52 L1266.33 1214.52 L1265.74 1214.52 L1265.16 1214.52 L1264.57 1214.52 L1263.98 1214.52 L1263.4 1214.52 L1262.81 1214.52 L1262.23 1214.52 L1261.64 1214.52 L1261.05 1214.52 L1260.47 1214.52 L1259.88 1214.52 L1259.29 1214.52 L1258.71 1214.52 L1258.12 1214.52 L1257.53 1214.52 L1256.95 1214.52 L1256.36 1214.52 L1255.78 1214.52 L1255.19 1214.52 L1254.6 1214.52 L1254.02 1214.52 L1253.43 1214.52 L1252.84 1214.52 L1252.26 1214.52 L1251.67 1214.52 L1251.08 1214.52 L1250.5 1214.52 L1249.91 1214.52 L1249.32 1214.52 L1248.74 1214.52 L1248.15 1214.52 L1247.57 1214.52 L1246.98 1214.52 L1246.39 1214.52 L1245.81 1214.52 L1245.22 1214.52 L1244.63 1214.52 L1244.05 1214.52 L1243.46 1214.52 L1242.87 1214.52 L1242.29 1214.52 L1241.7 1214.52 L1241.11 1214.52 L1240.53 1214.52 L1239.94 1214.52 L1239.36 1214.52 L1238.77 1214.52 L1238.18 1214.52 L1237.6 1214.52 L1237.01 1214.52 L1236.42 1214.52 L1235.84 1214.52 L1235.25 1214.52 L1234.66 1214.52 L1234.08 1214.52 L1233.49 1214.52 L1232.91 1214.52 L1232.32 1214.52 L1231.73 1214.52 L1231.15 1214.52 L1230.56 1214.52 L1229.97 1214.52 L1229.39 1214.52 L1228.8 1214.52 L1228.21 1214.52 L1227.63 1214.52 L1227.04 1214.52 L1226.45 1214.52 L1225.87 1214.52 L1225.28 1214.52 L1224.7 1214.52 L1224.11 1214.52 L1223.52 1214.52 L1222.94 1214.52 L1222.35 1214.52 L1221.76 1214.52 L1221.18 1214.52 L1220.59 1214.52 L1220 1214.52 L1219.42 1214.52 L1218.83 1214.52 L1218.24 1214.52 L1217.66 1214.52 L1217.07 1214.52 L1216.49 1214.52 L1215.9 1214.52 L1215.31 1214.52 L1214.73 1214.52 L1214.14 1214.52 L1213.55 1214.52 L1212.97 1214.52 L1212.38 1214.52 L1211.79 1214.52 L1211.21 1214.52 L1210.62 1214.52 L1210.03 1214.52 L1209.45 1214.52 L1208.86 1214.52 L1208.28 1214.52 L1207.69 1214.52 L1207.1 1214.52 L1206.52 1214.52 L1205.93 1214.52 L1205.34 1214.52 L1204.76 1214.52 L1204.17 1214.52 L1203.58 1214.52 L1203 1214.52 L1202.41 1214.52 L1201.83 1214.52 L1201.24 1214.52 L1200.65 1214.52 L1200.07 1214.52 L1199.48 1214.52 L1198.89 1214.52 L1198.31 1214.52 L1197.72 1214.52 L1197.13 1214.52 L1196.55 1214.52 L1195.96 1214.52 L1195.37 1214.52 L1194.79 1214.52 L1194.2 1214.52 L1193.62 1214.52 L1193.03 1214.52 L1192.44 1214.52 L1191.86 1214.52 L1191.27 1214.52 L1190.68 1214.52 L1190.1 1214.52 L1189.51 1214.52 L1188.92 1214.52 L1188.34 1214.52 L1187.75 1214.52 L1187.16 1214.52 L1186.58 1214.52 L1185.99 1214.52 L1185.41 1214.52 L1184.82 1214.52 L1184.23 1214.52 L1183.65 1214.52 L1183.06 1214.52 L1182.47 1214.52 L1181.89 1214.52 L1181.3 1214.52 L1180.71 1214.52 L1180.13 1214.52 L1179.54 1214.52 L1178.96 1214.52 L1178.37 1214.52 L1177.78 1214.52 L1177.2 1214.52 L1176.61 1214.52 L1176.02 1214.52 L1175.44 1214.52 L1174.85 1214.52 L1174.26 1214.52 L1173.68 1214.52 L1173.09 1214.52 L1172.5 1214.52 L1171.92 1214.52 L1171.33 1214.52 L1170.75 1214.52 L1170.16 1214.52 L1169.57 1214.52 L1168.99 1214.52 L1168.4 1214.52 L1167.81 1214.52 L1167.23 1214.52 L1166.64 1214.52 L1166.05 1214.52 L1165.47 1214.52 L1164.88 1214.52 L1164.29 1214.52 L1163.71 1214.52 L1163.12 1214.52 L1162.54 1214.52 L1161.95 1214.52 L1161.36 1214.52 L1160.78 1214.52 L1160.19 1214.52 L1159.6 1214.52 L1159.02 1214.52 L1158.43 1214.52 L1157.84 1214.52 L1157.26 1214.52 L1156.67 1214.52 L1156.09 1214.52 L1155.5 1214.52 L1154.91 1214.52 L1154.33 1214.52 L1153.74 1214.52 L1153.15 1214.52 L1152.57 1214.52 L1151.98 1214.52 L1151.39 1214.52 L1150.81 1214.52 L1150.22 1214.52 L1149.63 1214.52 L1149.05 1214.52 L1148.46 1214.52 L1147.88 1214.52 L1147.29 1214.52 L1146.7 1214.52 L1146.12 1214.52 L1145.53 1214.52 L1144.94 1214.52 L1144.36 1214.52 L1143.77 1214.52 L1143.18 1214.52 L1142.6 1214.52 L1142.01 1214.52 L1141.42 1214.52 L1140.84 1214.52 L1140.25 1214.52 L1139.67 1214.52 L1139.08 1214.52 L1138.49 1214.52 L1137.91 1214.52 L1137.32 1214.52 L1136.73 1214.52 L1136.15 1214.52 L1135.56 1214.52 L1134.97 1214.52 L1134.39 1214.52 L1133.8 1214.52 L1133.21 1214.52 L1132.63 1214.52 L1132.04 1214.52 L1131.46 1214.52 L1130.87 1214.52 L1130.28 1214.52 L1129.7 1214.52 L1129.11 1214.52 L1128.52 1214.52 L1127.94 1214.52 L1127.35 1214.52 L1126.76 1214.52 L1126.18 1214.52 L1125.59 1214.52 L1125.01 1214.52 L1124.42 1214.52 L1123.83 1214.52 L1123.25 1214.52 L1122.66 1214.52 L1122.07 1214.52 L1121.49 1214.52 L1120.9 1214.52 L1120.31 1214.52 L1119.73 1214.52 L1119.14 1214.52 L1118.55 1214.52 L1117.97 1214.52 L1117.38 1214.52 L1116.8 1214.52 L1116.21 1214.52 L1115.62 1214.52 L1115.04 1214.52 L1114.45 1214.52 L1113.86 1214.52 L1113.28 1214.52 L1112.69 1214.52 L1112.1 1214.52 L1111.52 1214.52 L1110.93 1214.52 L1110.34 1214.52 L1109.76 1214.52 L1109.17 1214.52 L1108.59 1214.52 L1108 1214.52 L1107.41 1214.52 L1106.83 1214.52 L1106.24 1214.52 L1105.65 1214.52 L1105.07 1214.52 L1104.48 1214.52 L1103.89 1214.52 L1103.31 1214.52 L1102.72 1214.52 L1102.14 1214.52 L1101.55 1214.52 L1100.96 1214.52 L1100.38 1214.52 L1099.79 1214.52 L1099.2 1214.52 L1098.62 1214.52 L1098.03 1214.52 L1097.44 1214.52 L1096.86 1214.52 L1096.27 1214.52 L1095.68 1214.52 L1095.1 1214.52 L1094.51 1214.52 L1093.93 1214.52 L1093.34 1214.52 L1092.75 1214.52 L1092.17 1214.52 L1091.58 1214.52 L1090.99 1214.52 L1090.41 1214.52 L1089.82 1214.52 L1089.23 1214.52 L1088.65 1214.52 L1088.06 1214.52 L1087.47 1214.52 L1086.89 1214.52 L1086.3 1214.52 L1085.72 1214.52 L1085.13 1214.52 L1084.54 1214.52 L1083.96 1214.52 L1083.37 1214.52 L1082.78 1214.52 L1082.2 1214.52 L1081.61 1214.52 L1081.02 1214.52 L1080.44 1214.52 L1079.85 1214.52 L1079.26 1214.52 L1078.68 1214.52 L1078.09 1214.52 L1077.51 1214.52 L1076.92 1214.52 L1076.33 1214.52 L1075.75 1214.52 L1075.16 1214.52 L1074.57 1214.52 L1073.99 1214.52 L1073.4 1214.52 L1072.81 1214.52 L1072.23 1214.52 L1071.64 1214.52 L1071.06 1214.52 L1070.47 1214.52 L1069.88 1214.52 L1069.3 1214.52 L1068.71 1214.52 L1068.12 1214.52 L1067.54 1214.52 L1066.95 1214.52 L1066.36 1214.52 L1065.78 1214.52 L1065.19 1214.52 L1064.6 1214.52 L1064.02 1214.52 L1063.43 1214.52 L1062.85 1214.52 L1062.26 1214.52 L1061.67 1214.52 L1061.09 1214.52 L1060.5 1214.52 L1059.91 1214.52 L1059.33 1214.52 L1058.74 1214.52 L1058.15 1214.52 L1057.57 1214.52 L1056.98 1214.52 L1056.39 1214.52 L1055.81 1214.52 L1055.22 1214.52 L1054.64 1214.52 L1054.05 1214.52 L1053.46 1214.52 L1052.88 1214.52 L1052.29 1214.52 L1051.7 1214.52 L1051.12 1214.52 L1050.53 1214.52 L1049.94 1214.52 L1049.36 1214.52 L1048.77 1214.52 L1048.19 1214.52 L1047.6 1214.52 L1047.01 1214.52 L1046.43 1214.52 L1045.84 1214.52 L1045.25 1214.52 L1044.67 1214.52 L1044.08 1214.52 L1043.49 1214.52 L1042.91 1214.52 L1042.32 1214.52 L1041.73 1214.52 L1041.15 1214.52 L1040.56 1214.52 L1039.98 1214.52 L1039.39 1214.52 L1038.8 1214.52 L1038.22 1214.52 L1037.63 1214.52 L1037.04 1214.52 L1036.46 1214.52 L1035.87 1214.52 L1035.28 1214.52 L1034.7 1214.52 L1034.11 1214.52 L1033.52 1214.52 L1032.94 1214.52 L1032.35 1214.52 L1031.77 1214.52 L1031.18 1214.52 L1030.59 1214.52 L1030.01 1214.52 L1029.42 1214.52 L1028.83 1214.52 L1028.25 1214.52 L1027.66 1214.52 L1027.07 1214.52 L1026.49 1214.52 L1025.9 1214.52 L1025.32 1214.52 L1024.73 1214.52 L1024.14 1214.52 L1023.56 1214.52 L1022.97 1214.52 L1022.38 1214.52 L1021.8 1214.52 L1021.21 1214.52 L1020.62 1214.52 L1020.04 1214.52 L1019.45 1214.52 L1018.86 1214.52 L1018.28 1214.52 L1017.69 1214.52 L1017.11 1214.52 L1016.52 1214.52 L1015.93 1214.52 L1015.35 1214.52 L1014.76 1214.52 L1014.17 1214.52 L1013.59 1214.52 L1013 1214.52 L1012.41 1214.52 L1011.83 1214.52 L1011.24 1214.52 L1010.65 1214.52 L1010.07 1214.52 L1009.48 1214.52 L1008.9 1214.52 L1008.31 1214.52 L1007.72 1214.52 L1007.14 1214.52 L1006.55 1214.52 L1005.96 1214.52 L1005.38 1214.52 L1004.79 1214.52 L1004.2 1214.52 L1003.62 1214.52 L1003.03 1214.52 L1002.44 1214.52 L1001.86 1214.52 L1001.27 1214.52 L1000.69 1214.52 L1000.1 1214.52 L999.513 1214.52 L998.926 1214.52 L998.34 1214.52 L997.754 1214.52 L997.167 1214.52 L996.581 1214.52 L995.994 1214.52 L995.408 1214.52 L994.822 1214.52 L994.235 1214.52 L993.649 1214.52 L993.062 1214.52 L992.476 1214.52 L991.889 1214.52 L991.303 1214.52 L990.717 1214.52 L990.13 1214.52 L989.544 1214.52 L988.957 1214.52 L988.371 1214.52 L987.785 1214.52 L987.198 1214.52 L986.612 1214.52 L986.025 1214.52  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.95 986.612,1214.95 987.198,1214.95 987.785,1214.95 988.371,1214.95 988.957,1214.95 989.544,1214.95 990.13,1214.95 990.717,1214.95 991.303,1214.95 991.889,1214.95 992.476,1214.95 993.062,1214.95 993.649,1214.95 994.235,1214.95 994.822,1214.95 995.408,1214.95 995.994,1214.95 996.581,1214.95 997.167,1214.95 997.754,1214.95 998.34,1214.95 998.926,1214.95 999.513,1214.95 1000.1,1214.95 1000.69,1214.95 1001.27,1214.95 1001.86,1214.95 1002.44,1214.95 1003.03,1214.95 1003.62,1214.95 1004.2,1214.95 1004.79,1214.95 1005.38,1214.95 1005.96,1214.95 1006.55,1214.95 1007.14,1214.95 1007.72,1214.95 1008.31,1214.95 1008.9,1214.95 1009.48,1214.95 1010.07,1214.95 1010.65,1214.95 1011.24,1214.95 1011.83,1214.95 1012.41,1214.95 1013,1214.95 1013.59,1214.95 1014.17,1214.95 1014.76,1214.95 1015.35,1214.95 1015.93,1214.95 1016.52,1214.95 1017.11,1214.95 1017.69,1214.95 1018.28,1214.95 1018.86,1214.95 1019.45,1214.95 1020.04,1214.95 1020.62,1214.95 1021.21,1214.95 1021.8,1214.95 1022.38,1214.95 1022.97,1214.95 1023.56,1214.95 1024.14,1214.95 1024.73,1214.95 1025.32,1214.95 1025.9,1214.95 1026.49,1214.95 1027.07,1214.95 1027.66,1214.95 1028.25,1214.95 1028.83,1214.95 1029.42,1214.95 1030.01,1214.95 1030.59,1214.95 1031.18,1214.95 1031.77,1214.95 1032.35,1214.95 1032.94,1214.95 1033.52,1214.95 1034.11,1214.95 1034.7,1214.95 1035.28,1214.95 1035.87,1214.95 1036.46,1214.95 1037.04,1214.95 1037.63,1214.95 1038.22,1214.95 1038.8,1214.95 1039.39,1214.95 1039.98,1214.95 1040.56,1214.95 1041.15,1214.95 1041.73,1214.95 1042.32,1214.95 1042.91,1214.95 1043.49,1214.95 1044.08,1214.95 1044.67,1214.95 1045.25,1214.95 1045.84,1214.95 1046.43,1214.95 1047.01,1214.95 1047.6,1214.95 1048.19,1214.95 1048.77,1214.95 1049.36,1214.95 1049.94,1214.95 1050.53,1214.95 1051.12,1214.95 1051.7,1214.95 1052.29,1214.95 1052.88,1214.95 1053.46,1214.95 1054.05,1214.95 1054.64,1214.95 1055.22,1214.95 1055.81,1214.95 1056.39,1214.95 1056.98,1214.95 1057.57,1214.95 1058.15,1214.95 1058.74,1214.95 1059.33,1214.95 1059.91,1214.95 1060.5,1214.95 1061.09,1214.95 1061.67,1214.95 1062.26,1214.95 1062.85,1214.95 1063.43,1214.95 1064.02,1214.95 1064.6,1214.95 1065.19,1214.95 1065.78,1214.95 1066.36,1214.95 1066.95,1214.95 1067.54,1214.95 1068.12,1214.95 1068.71,1214.95 1069.3,1214.95 1069.88,1214.95 1070.47,1214.95 1071.06,1214.95 1071.64,1214.95 1072.23,1214.95 1072.81,1214.95 1073.4,1214.95 1073.99,1214.95 1074.57,1214.95 1075.16,1214.95 1075.75,1214.95 1076.33,1214.95 1076.92,1214.95 1077.51,1214.95 1078.09,1214.95 1078.68,1214.95 1079.26,1214.95 1079.85,1214.95 1080.44,1214.95 1081.02,1214.95 1081.61,1214.95 1082.2,1214.95 1082.78,1214.95 1083.37,1214.95 1083.96,1214.95 1084.54,1214.95 1085.13,1214.95 1085.72,1214.95 1086.3,1214.95 1086.89,1214.95 1087.47,1214.95 1088.06,1214.95 1088.65,1214.95 1089.23,1214.95 1089.82,1214.95 1090.41,1214.95 1090.99,1214.95 1091.58,1214.95 1092.17,1214.95 1092.75,1214.95 1093.34,1214.95 1093.93,1214.95 1094.51,1214.95 1095.1,1214.95 1095.68,1214.95 1096.27,1214.95 1096.86,1214.95 1097.44,1214.95 1098.03,1214.95 1098.62,1214.95 1099.2,1214.95 1099.79,1214.95 1100.38,1214.95 1100.96,1214.95 1101.55,1214.95 1102.14,1214.95 1102.72,1214.95 1103.31,1214.95 1103.89,1214.95 1104.48,1214.95 1105.07,1214.95 1105.65,1214.95 1106.24,1214.95 1106.83,1214.95 1107.41,1214.95 1108,1214.95 1108.59,1214.95 1109.17,1214.95 1109.76,1214.95 1110.34,1214.95 1110.93,1214.95 1111.52,1214.95 1112.1,1214.95 1112.69,1214.95 1113.28,1214.95 1113.86,1214.95 1114.45,1214.95 1115.04,1214.95 1115.62,1214.95 1116.21,1214.95 1116.8,1214.95 1117.38,1214.95 1117.97,1214.95 1118.55,1214.95 1119.14,1214.95 1119.73,1214.95 1120.31,1214.95 1120.9,1214.95 1121.49,1214.95 1122.07,1214.95 1122.66,1214.95 1123.25,1214.95 1123.83,1214.95 1124.42,1214.95 1125.01,1214.95 1125.59,1214.95 1126.18,1214.95 1126.76,1214.95 1127.35,1214.95 1127.94,1214.95 1128.52,1214.95 1129.11,1214.95 1129.7,1214.95 1130.28,1214.95 1130.87,1214.95 1131.46,1214.95 1132.04,1214.95 1132.63,1214.95 1133.21,1214.95 1133.8,1214.95 1134.39,1214.95 1134.97,1214.95 1135.56,1214.95 1136.15,1214.95 1136.73,1214.95 1137.32,1214.95 1137.91,1214.95 1138.49,1214.95 1139.08,1214.95 1139.67,1214.95 1140.25,1214.95 1140.84,1214.95 1141.42,1214.95 1142.01,1214.95 1142.6,1214.95 1143.18,1214.95 1143.77,1214.95 1144.36,1214.95 1144.94,1214.95 1145.53,1214.95 1146.12,1214.95 1146.7,1214.95 1147.29,1214.95 1147.88,1214.95 1148.46,1214.95 1149.05,1214.95 1149.63,1214.95 1150.22,1214.95 1150.81,1214.95 1151.39,1214.95 1151.98,1214.95 1152.57,1214.95 1153.15,1214.95 1153.74,1214.95 1154.33,1214.95 1154.91,1214.95 1155.5,1214.95 1156.09,1214.95 1156.67,1214.95 1157.26,1214.95 1157.84,1214.95 1158.43,1214.95 1159.02,1214.95 1159.6,1214.95 1160.19,1214.95 1160.78,1214.95 1161.36,1214.95 1161.95,1214.95 1162.54,1214.95 1163.12,1214.95 1163.71,1214.95 1164.29,1214.95 1164.88,1214.95 1165.47,1214.95 1166.05,1214.95 1166.64,1214.95 1167.23,1214.95 1167.81,1214.95 1168.4,1214.95 1168.99,1214.95 1169.57,1214.95 1170.16,1214.95 1170.75,1214.95 1171.33,1214.95 1171.92,1214.95 1172.5,1214.95 1173.09,1214.95 1173.68,1214.95 1174.26,1214.95 1174.85,1214.95 1175.44,1214.95 1176.02,1214.95 1176.61,1214.95 1177.2,1214.95 1177.78,1214.95 1178.37,1214.95 1178.96,1214.95 1179.54,1214.95 1180.13,1214.95 1180.71,1214.95 1181.3,1214.95 1181.89,1214.95 1182.47,1214.95 1183.06,1214.95 1183.65,1214.95 1184.23,1214.95 1184.82,1214.95 1185.41,1214.95 1185.99,1214.95 1186.58,1214.95 1187.16,1214.95 1187.75,1214.95 1188.34,1214.95 1188.92,1214.95 1189.51,1214.95 1190.1,1214.95 1190.68,1214.95 1191.27,1214.95 1191.86,1214.95 1192.44,1214.95 1193.03,1214.95 1193.62,1214.95 1194.2,1214.95 1194.79,1214.95 1195.37,1214.95 1195.96,1214.95 1196.55,1214.95 1197.13,1214.95 1197.72,1214.95 1198.31,1214.95 1198.89,1214.95 1199.48,1214.95 1200.07,1214.95 1200.65,1214.95 1201.24,1214.95 1201.83,1214.95 1202.41,1214.95 1203,1214.95 1203.58,1214.95 1204.17,1214.95 1204.76,1214.95 1205.34,1214.95 1205.93,1214.95 1206.52,1214.95 1207.1,1214.95 1207.69,1214.95 1208.28,1214.95 1208.86,1214.95 1209.45,1214.95 1210.03,1214.95 1210.62,1214.95 1211.21,1214.95 1211.79,1214.95 1212.38,1214.95 1212.97,1214.95 1213.55,1214.95 1214.14,1214.95 1214.73,1214.95 1215.31,1214.95 1215.9,1214.95 1216.49,1214.95 1217.07,1214.95 1217.66,1214.95 1218.24,1214.95 1218.83,1214.95 1219.42,1214.95 1220,1214.95 1220.59,1214.95 1221.18,1214.95 1221.76,1214.95 1222.35,1214.95 1222.94,1214.95 1223.52,1214.95 1224.11,1214.95 1224.7,1214.95 1225.28,1214.95 1225.87,1214.95 1226.45,1214.95 1227.04,1214.95 1227.63,1214.95 1228.21,1214.95 1228.8,1214.95 1229.39,1214.95 1229.97,1214.95 1230.56,1214.95 1231.15,1214.95 1231.73,1214.95 1232.32,1214.95 1232.91,1214.95 1233.49,1214.95 1234.08,1214.95 1234.66,1214.95 1235.25,1214.95 1235.84,1214.95 1236.42,1214.95 1237.01,1214.95 1237.6,1214.95 1238.18,1214.95 1238.77,1214.95 1239.36,1214.95 1239.94,1214.95 1240.53,1214.95 1241.11,1214.95 1241.7,1214.95 1242.29,1214.95 1242.87,1214.95 1243.46,1214.95 1244.05,1214.95 1244.63,1214.95 1245.22,1214.95 1245.81,1214.95 1246.39,1214.95 1246.98,1214.95 1247.57,1214.95 1248.15,1214.95 1248.74,1214.95 1249.32,1214.95 1249.91,1214.95 1250.5,1214.95 1251.08,1214.95 1251.67,1214.95 1252.26,1214.95 1252.84,1214.95 1253.43,1214.95 1254.02,1214.95 1254.6,1214.95 1255.19,1214.95 1255.78,1214.95 1256.36,1214.95 1256.95,1214.95 1257.53,1214.95 1258.12,1214.95 1258.71,1214.95 1259.29,1214.95 1259.88,1214.95 1260.47,1214.95 1261.05,1214.95 1261.64,1214.95 1262.23,1214.95 1262.81,1214.95 1263.4,1214.95 1263.98,1214.95 1264.57,1214.95 1265.16,1214.95 1265.74,1214.95 1266.33,1214.95 1266.92,1214.95 1267.5,1214.95 1268.09,1214.95 1268.68,1214.95 1269.26,1214.95 1269.85,1214.95 1270.44,1214.95 1271.02,1214.95 1271.61,1214.95 1272.19,1214.95 1272.78,1214.95 1273.37,1214.95 1273.95,1214.95 1274.54,1214.95 1275.13,1214.95 1275.71,1214.95 1276.3,1214.95 1276.89,1214.95 1277.47,1214.95 1278.06,1214.95 1278.65,1214.95 1279.23,1214.95 1279.82,1214.95 1280.4,1214.95 1280.99,1214.95 1281.58,1214.95 1282.16,1214.95 1282.75,1214.95 1283.34,1214.95 1283.92,1214.95 1284.51,1214.95 1285.1,1214.95 1285.68,1214.95 1286.27,1214.95 1286.86,1214.95 1287.44,1214.95 1288.03,1214.95 1288.61,1214.95 1289.2,1214.95 1289.79,1214.95 1290.37,1214.95 1290.96,1214.95 1291.55,1214.95 1292.13,1214.95 1292.72,1214.95 1293.31,1214.95 1293.89,1214.95 1294.48,1214.95 1295.06,1214.95 1295.65,1214.95 1296.24,1214.95 1296.82,1214.95 1297.41,1214.95 1298,1214.95 1298.58,1214.95 1299.17,1214.95 1299.76,1214.95 1300.34,1214.95 1300.93,1214.95 1301.52,1214.95 1302.1,1214.95 1302.69,1214.95 1303.27,1214.95 1303.86,1214.95 1304.45,1214.95 1305.03,1214.95 1305.62,1214.95 1306.21,1214.95 1306.79,1214.95 1307.38,1214.95 1307.97,1214.95 1308.55,1214.95 1309.14,1214.95 1309.73,1214.95 1310.31,1214.95 1310.9,1214.95 1311.48,1214.95 1312.07,1214.95 1312.66,1214.95 1313.24,1214.95 1313.83,1214.95 1314.42,1214.95 1315,1214.95 1315.59,1214.95 1316.18,1214.95 1316.76,1214.95 1317.35,1214.95 1317.93,1214.95 1318.52,1214.95 1319.11,1214.95 1319.69,1214.95 1320.28,1214.95 1320.87,1214.95 1321.45,1214.95 1322.04,1214.95 1322.63,1214.95 1323.21,1214.95 1323.8,1214.95 1324.39,1214.95 1324.97,1214.95 1325.56,1214.95 1326.14,1214.95 1326.73,1214.95 1327.32,1214.95 1327.9,1214.95 1328.49,1214.95 1329.08,1214.95 1329.66,1214.95 1330.25,1214.95 1330.84,1214.95 1331.42,1214.95 1332.01,1214.95 1332.6,1214.95 1333.18,1214.95 1333.77,1214.95 1334.35,1214.95 1334.94,1214.95 1335.53,1214.95 1336.11,1214.95 1336.7,1214.95 1337.29,1214.95 1337.87,1214.95 1338.46,1214.95 1339.05,1214.95 1339.63,1214.95 1340.22,1214.95 1340.8,1214.95 1341.39,1214.95 1341.98,1214.95 1342.56,1214.95 1343.15,1214.95 1343.74,1214.95 1344.32,1214.95 1344.91,1214.95 1345.5,1214.95 1346.08,1214.95 1346.67,1214.95 1347.26,1214.95 1347.84,1214.95 1348.43,1214.95 1349.01,1214.95 1349.6,1214.95 1350.19,1214.95 1350.77,1214.95 1351.36,1214.95 1351.95,1214.95 1352.53,1214.95 1353.12,1214.95 1353.71,1214.95 1354.29,1214.95 1354.88,1214.95 1355.47,1214.95 1356.05,1214.95 1356.64,1214.95 1357.22,1214.95 1357.81,1214.95 1358.4,1214.95 1358.98,1214.95 1359.57,1214.95 1360.16,1214.95 1360.74,1214.95 1361.33,1214.95 1361.92,1214.95 1362.5,1214.95 1363.09,1214.95 1363.68,1214.95 1364.26,1214.95 1364.85,1214.95 1365.43,1214.95 1366.02,1214.95 1366.61,1214.95 1367.19,1214.95 1367.78,1214.95 1368.37,1214.95 1368.95,1214.95 1369.54,1214.95 1370.13,1214.95 1370.71,1214.95 1371.3,1214.95 1371.88,1214.95 1372.47,1214.95 1373.06,1214.95 1373.64,1214.95 1374.23,1214.95 1374.82,1214.95 1375.4,1214.95 1375.99,1214.95 1376.58,1214.95 1377.16,1214.95 1377.75,1214.95 1378.34,1214.95 1378.92,1214.95 1379.51,1214.95 1380.09,1214.95 1380.68,1214.95 1381.27,1214.95 1381.85,1214.95 1382.44,1214.95 1383.03,1214.95 1383.61,1214.95 1384.2,1214.95 1384.79,1214.95 1385.37,1214.95 1385.96,1214.95 1386.55,1214.95 1387.13,1214.95 1387.72,1214.95 1388.3,1214.95 1388.89,1214.95 1389.48,1214.95 1390.06,1214.95 1390.65,1214.95 1391.24,1214.95 1391.82,1214.95 1392.41,1214.95 1393,1214.95 1393.58,1214.95 1394.17,1214.95 1394.75,1214.95 1395.34,1214.95 1395.93,1214.95 1396.51,1214.95 1397.1,1214.95 1397.69,1214.95 1398.27,1214.95 1398.86,1214.95 1399.45,1214.95 1400.03,1214.95 1400.62,1214.95 1401.21,1214.95 1401.79,1214.95 1402.38,1214.95 1402.96,1214.95 1403.55,1214.95 1404.14,1214.95 1404.72,1214.95 1405.31,1214.95 1405.9,1214.95 1406.48,1214.95 1407.07,1214.95 1407.66,1214.95 1408.24,1214.95 1408.83,1214.95 1409.42,1214.95 1410,1214.95 1410.59,1214.95 1411.17,1214.95 1411.76,1214.95 1412.35,1214.95 1412.93,1214.95 1413.52,1214.95 1414.11,1214.95 1414.69,1214.95 1415.28,1214.95 1415.87,1214.95 1416.45,1214.95 1417.04,1214.95 1417.63,1214.95 1418.21,1214.95 1418.8,1214.95 1419.38,1214.95 1419.97,1214.95 1420.56,1214.95 1421.14,1214.95 1421.73,1214.95 1422.32,1214.95 1422.9,1214.95 1423.49,1214.95 1424.08,1214.95 1424.66,1214.95 1425.25,1214.95 1425.83,1214.95 1426.42,1214.95 1427.01,1214.95 1427.59,1214.95 1428.18,1214.95 1428.77,1214.95 1429.35,1214.95 1429.94,1214.95 1430.53,1214.95 1431.11,1214.95 1431.7,1214.95 1432.29,1214.95 1432.87,1214.95 1433.46,1214.95 1434.04,1214.95 1434.63,1214.95 1435.22,1214.95 1435.8,1214.95 1436.39,1214.95 1436.98,1214.95 1437.56,1214.95 1438.15,1214.95 1438.74,1214.95 1439.32,1214.95 1439.91,1214.95 1440.5,1214.95 1441.08,1214.95 1441.67,1214.95 1442.25,1214.95 1442.84,1214.95 1443.43,1214.95 1444.01,1214.95 1444.6,1214.95 1445.19,1214.95 1445.77,1214.95 1446.36,1214.95 1446.95,1214.95 1447.53,1214.95 1448.12,1214.95 1448.7,1214.95 1449.29,1214.95 1449.88,1214.95 1450.46,1214.95 1451.05,1214.95 1451.64,1214.95 1452.22,1214.95 1452.81,1214.95 1453.4,1214.95 1453.98,1214.95 1454.57,1214.95 1455.16,1214.95 1455.74,1214.95 1456.33,1214.95 1456.91,1214.95 1457.5,1214.95 1458.09,1214.95 1458.67,1214.95 1459.26,1214.95 1459.85,1214.95 1460.43,1214.95 1461.02,1214.95 1461.61,1214.95 1462.19,1214.95 1462.78,1214.95 1463.37,1214.95 1463.95,1214.95 1464.54,1214.95 1465.12,1214.95 1465.71,1214.95 1466.3,1214.95 1466.88,1214.95 1467.47,1214.95 1468.06,1214.95 1468.64,1214.95 1469.23,1214.95 1469.82,1214.95 1470.4,1214.95 1470.99,1214.95 1471.57,1214.95 1472.16,1214.95 1472.75,1214.95 1473.33,1214.95 1473.92,1214.95 1474.51,1214.95 1475.09,1214.95 1475.68,1214.95 1476.27,1214.95 1476.85,1214.95 1477.44,1214.95 1478.03,1214.95 1478.61,1214.95 1479.2,1214.95 1479.78,1214.95 1480.37,1214.95 1480.96,1214.95 1481.54,1214.95 1482.13,1214.95 1482.72,1214.95 1483.3,1214.95 1483.89,1214.95 1484.48,1214.95 1485.06,1214.95 1485.65,1214.95 1486.24,1214.95 1486.82,1214.95 1487.41,1214.95 1487.99,1214.95 1488.58,1214.95 1489.17,1214.95 1489.75,1214.95 1490.34,1214.95 1490.93,1214.95 1491.51,1214.95 1492.1,1214.95 1492.69,1214.95 1493.27,1214.95 1493.86,1214.95 1494.45,1214.95 1495.03,1214.95 1495.62,1214.95 1496.2,1214.95 1496.79,1214.95 1497.38,1214.95 1497.96,1214.95 1498.55,1214.95 1499.14,1214.95 1499.72,1214.95 1500.31,1214.95 1500.9,1214.95 1501.48,1214.95 1502.07,1214.95 1502.65,1214.95 1503.24,1214.95 1503.83,1214.95 1504.41,1214.95 1505,1214.95 1505.59,1214.95 1506.17,1214.95 1506.76,1214.95 1507.35,1214.95 1507.93,1214.95 1508.52,1214.95 1509.11,1214.95 1509.69,1214.95 1510.28,1214.95 1510.86,1214.95 1511.45,1214.95 1512.04,1214.95 1512.62,1214.95 1513.21,1214.95 1513.8,1214.95 1514.38,1214.95 1514.97,1214.95 1515.56,1214.95 1516.14,1214.95 1516.73,1214.95 1517.32,1214.95 1517.9,1214.95 1518.49,1214.95 1519.07,1214.95 1519.66,1214.95 1520.25,1214.95 1520.83,1214.95 1521.42,1214.95 1522.01,1214.95 1522.59,1214.95 1523.18,1214.95 1523.77,1214.95 1524.35,1214.95 1524.94,1214.95 1525.52,1214.95 1526.11,1214.95 1526.7,1214.95 1527.28,1214.95 1527.87,1214.95 1528.46,1214.95 1529.04,1214.95 1529.63,1214.95 1530.22,1214.95 1530.8,1214.95 1531.39,1214.95 1531.98,1214.95 1532.56,1214.95 1533.15,1214.95 1533.73,1214.95 1534.32,1214.95 1534.91,1214.95 1535.49,1214.95 1536.08,1214.95 1536.67,1214.95 1537.25,1214.95 1537.84,1214.95 1538.43,1214.95 1539.01,1214.95 1539.6,1214.95 1540.19,1214.95 1540.77,1214.95 1541.36,1214.95 1541.94,1214.95 1542.53,1214.95 1543.12,1214.95 1543.7,1214.95 1544.29,1214.95 1544.88,1214.95 1545.46,1214.95 1546.05,1214.95 1546.64,1214.95 1547.22,1214.95 1547.81,1214.95 1548.4,1214.95 1548.98,1214.95 1549.57,1214.95 1550.15,1214.95 1550.74,1214.95 1551.33,1214.95 1551.91,1214.95 1552.5,1214.95 1553.09,1214.95 1553.67,1214.95 1554.26,1214.95 1554.85,1214.95 1555.43,1214.95 1556.02,1214.95 1556.6,1214.95 1557.19,1214.95 1557.78,1214.95 1558.36,1214.95 1558.95,1214.95 1559.54,1214.95 1560.12,1214.95 1560.71,1214.95 1561.3,1214.95 1561.88,1214.95 1562.47,1214.95 1563.06,1214.95 1563.64,1214.95 1564.23,1214.95 1564.81,1214.95 1565.4,1214.95 1565.99,1214.95 1566.57,1214.95 1567.16,1214.95 1567.75,1214.95 1568.33,1214.95 1568.92,1214.95 1569.51,1214.95 1570.09,1214.95 1570.68,1214.95 1571.27,1214.95 1571.85,1214.95 1572.44,1214.95 1573.02,1214.95 1573.61,1214.95 1574.2,1214.95 1574.78,1214.95 1575.37,1214.95 1575.96,1214.95 1576.54,1214.95 1577.13,1214.95 1577.72,1214.95 1578.3,1214.95 1578.89,1214.95 1579.47,1214.95 1580.06,1214.95 1580.65,1214.95 1581.23,1214.95 1581.82,1214.95 1582.41,1214.95 1582.99,1214.95 1583.58,1214.95 1584.17,1214.95 1584.75,1214.95 1585.34,1214.95 1585.93,1214.95 1586.51,1214.95 1587.1,1214.95 1587.68,1214.95 1588.27,1214.95 1588.86,1214.95 1589.44,1214.95 1590.03,1214.95 1590.62,1214.95 1591.2,1214.95 1591.79,1214.95 1592.38,1214.95 1592.96,1214.95 1593.55,1214.95 1594.14,1214.95 1594.72,1214.95 1595.31,1214.95 1595.89,1214.95 1596.48,1214.95 1597.07,1214.95 1597.65,1214.95 1598.24,1214.95 1598.83,1214.95 1599.41,1214.95 1600,1214.95 1600.59,1214.95 1601.17,1214.95 1601.76,1214.95 1602.34,1214.95 1602.93,1214.95 1603.52,1214.95 1604.1,1214.95 1604.69,1214.95 1605.28,1214.95 1605.86,1214.95 1606.45,1214.95 1607.04,1214.95 1607.62,1214.95 1608.21,1214.95 1608.8,1214.95 1609.38,1214.95 1609.97,1214.95 1610.55,1214.95 1611.14,1214.95 1611.73,1214.95 1612.31,1214.95 1612.9,1214.95 1613.49,1214.95 1614.07,1214.95 1614.66,1214.95 1615.25,1214.95 1615.83,1214.95 1616.42,1214.95 1617.01,1214.95 1617.59,1214.95 1618.18,1214.95 1618.76,1214.95 1619.35,1214.95 1619.94,1214.95 1620.52,1214.95 1621.11,1214.95 1621.7,1214.95 1622.28,1214.95 1622.87,1214.95 1623.46,1214.95 1624.04,1214.95 1624.63,1214.95 1625.22,1214.95 1625.8,1214.95 1626.39,1214.95 1626.97,1214.95 1627.56,1214.95 1628.15,1214.95 1628.73,1214.95 1629.32,1214.95 1629.91,1214.95 1630.49,1214.95 1631.08,1214.95 1631.67,1214.95 1632.25,1214.95 1632.84,1214.95 1633.42,1214.95 1634.01,1214.95 1634.6,1214.95 1635.18,1214.95 1635.77,1214.95 1636.36,1214.95 1636.94,1214.95 1637.53,1214.95 1638.12,1214.95 1638.7,1214.95 1639.29,1214.95 1639.88,1214.95 1640.46,1214.95 1641.05,1214.95 1641.63,1214.95 1642.22,1214.95 1642.81,1214.95 1643.39,1214.95 1643.98,1214.95 1644.57,1214.95 1645.15,1214.95 1645.74,1214.95 1646.33,1214.95 1646.91,1214.95 1647.5,1214.95 1648.09,1214.95 1648.67,1214.95 1649.26,1214.95 1649.84,1214.95 1650.43,1214.95 1651.02,1214.95 1651.6,1214.95 1652.19,1214.95 1652.78,1214.95 1653.36,1214.95 1653.95,1214.95 1654.54,1214.95 1655.12,1214.95 1655.71,1214.95 1656.29,1214.95 1656.88,1214.95 1657.47,1214.95 1658.05,1214.95 1658.64,1214.95 1659.23,1214.95 1659.81,1214.95 1660.4,1214.95 1660.99,1214.95 1661.57,1214.95 1662.16,1214.95 1662.75,1214.95 1663.33,1214.95 1663.92,1214.95 1664.5,1214.95 1665.09,1214.95 1665.68,1214.95 1666.26,1214.95 1666.85,1214.95 1667.44,1214.95 1668.02,1214.95 1668.61,1214.95 1669.2,1214.95 1669.78,1214.95 1670.37,1214.95 1670.96,1214.95 1671.54,1214.95 1672.13,1214.95 1672.71,1214.95 1673.3,1214.95 1673.89,1214.95 1674.47,1214.95 1675.06,1214.95 1675.65,1214.95 1676.23,1214.95 1676.82,1214.95 1677.41,1214.95 1677.99,1214.95 1678.58,1214.95 1679.17,1214.95 1679.75,1214.95 1680.34,1214.95 1680.92,1214.95 1681.51,1214.95 1682.1,1214.95 1682.68,1214.95 1683.27,1214.95 1683.86,1214.95 1684.44,1214.95 1685.03,1214.95 1685.62,1214.95 1686.2,1214.95 1686.79,1214.95 1687.37,1214.95 1687.96,1214.95 1688.55,1214.95 1689.13,1214.95 1689.72,1214.95 1690.31,1214.95 1690.89,1214.95 1691.48,1214.95 1692.07,1214.95 1692.65,1214.95 1693.24,1214.95 1693.83,1214.95 1694.41,1214.95 1695,1214.95 1695.58,1214.95 1696.17,1214.95 1696.76,1214.95 1697.34,1214.95 1697.93,1214.95 1698.52,1214.95 1699.1,1214.95 1699.69,1214.95 1700.28,1214.95 1700.86,1214.95 1701.45,1214.95 1702.04,1214.95 1702.62,1214.95 1703.21,1214.95 1703.79,1214.95 1704.38,1214.95 1704.97,1214.95 1705.55,1214.95 1706.14,1214.95 1706.73,1214.95 1707.31,1214.95 1707.9,1214.95 1708.49,1214.95 1709.07,1214.95 1709.66,1214.95 1710.24,1214.95 1710.83,1214.95 1711.42,1214.95 1712,1214.95 1712.59,1214.95 1713.18,1214.95 1713.76,1214.95 1714.35,1214.95 1714.94,1214.95 1715.52,1214.95 1716.11,1214.95 1716.7,1214.95 1717.28,1214.95 1717.87,1214.95 1718.45,1214.95 1719.04,1214.95 1719.63,1214.95 1720.21,1214.95 1720.8,1214.95 1721.39,1214.95 1721.97,1214.95 1722.56,1214.95 1723.15,1214.95 1723.73,1214.95 1724.32,1214.95 1724.91,1214.95 1725.49,1214.95 1726.08,1214.95 1726.66,1214.95 1727.25,1214.95 1727.84,1214.95 1728.42,1214.95 1729.01,1214.95 1729.6,1214.95 1730.18,1214.95 1730.77,1214.95 1731.36,1214.95 1731.94,1214.95 1732.53,1214.95 1733.11,1214.95 1733.7,1214.95 1734.29,1214.95 1734.87,1214.95 1735.46,1214.95 1736.05,1214.95 1736.63,1214.95 1737.22,1214.95 1737.81,1214.95 1738.39,1214.95 1738.98,1214.95 1739.57,1214.95 1740.15,1214.95 1740.74,1214.95 1741.32,1214.95 1741.91,1214.95 1742.5,1214.95 1743.08,1214.95 1743.67,1214.95 1744.26,1214.95 1744.84,1214.95 1745.43,1214.95 1746.02,1214.95 1746.6,1214.95 1747.19,1214.95 1747.78,1214.95 1748.36,1214.95 1748.95,1214.95 1749.53,1214.95 1750.12,1214.95 1750.71,1214.95 1751.29,1214.95 1751.88,1214.95 1752.47,1214.95 1753.05,1214.95 1753.64,1214.95 1754.23,1214.95 1754.81,1214.95 1755.4,1214.95 1755.99,1214.95 1756.57,1214.95 1757.16,1214.95 1757.74,1214.95 1758.33,1214.95 1758.92,1214.95 1759.5,1214.95 1760.09,1214.95 1760.68,1214.95 1761.26,1214.95 1761.85,1214.95 1762.44,1214.95 1763.02,1214.95 1763.61,1214.95 1764.19,1214.95 1764.78,1214.95 1765.37,1214.95 1765.95,1214.95 1766.54,1214.95 1767.13,1214.95 1767.71,1214.95 1768.3,1214.95 1768.89,1214.95 1769.47,1214.95 1770.06,1214.95 1770.65,1214.95 1771.23,1214.95 1771.82,1214.95 1772.4,1214.95 1772.99,1214.95 1773.58,1214.95 1774.16,1214.95 1774.75,1214.95 1775.34,1214.95 1775.92,1214.95 1776.51,1214.95 1777.1,1214.95 1777.68,1214.95 1778.27,1214.95 1778.86,1214.95 1779.44,1214.95 1780.03,1214.95 1780.61,1214.95 1781.2,1214.95 1781.79,1214.95 1782.37,1214.95 1782.96,1214.95 1783.55,1214.95 1784.13,1214.95 1784.72,1214.95 1785.31,1214.95 1785.89,1214.95 1786.48,1214.95 1787.06,1214.95 1787.65,1214.95 1788.24,1214.95 1788.82,1214.95 1789.41,1214.95 1790,1214.95 1790.58,1214.95 1791.17,1214.95 1791.76,1214.95 1792.34,1214.95 1792.93,1214.95 1793.52,1214.95 1794.1,1214.95 1794.69,1214.95 1795.27,1214.95 1795.86,1214.95 1796.45,1214.95 1797.03,1214.95 1797.62,1214.95 1798.21,1214.95 1798.79,1214.95 1799.38,1214.95 1799.97,1214.95 1800.55,1214.95 1801.14,1214.95 1801.73,1214.95 1802.31,1214.95 1802.9,1214.95 1803.48,1214.95 1804.07,1214.95 1804.66,1214.95 1805.24,1214.95 1805.83,1214.95 1806.42,1214.95 1807,1214.95 1807.59,1214.95 1808.18,1214.95 1808.76,1214.95 1809.35,1214.95 1809.94,1214.95 1810.52,1214.95 1811.11,1214.95 1811.69,1214.95 1812.28,1214.95 1812.87,1214.95 1813.45,1214.95 1814.04,1214.95 1814.63,1214.95 1815.21,1214.95 1815.8,1214.95 1816.39,1214.95 1816.97,1214.95 1817.56,1214.95 1818.14,1214.95 1818.73,1214.95 1819.32,1214.95 1819.9,1214.95 1820.49,1214.95 1821.08,1214.95 1821.66,1214.95 1822.25,1214.95 1822.84,1214.95 1823.42,1214.95 1824.01,1214.95 1824.6,1214.95 1825.18,1214.95 1825.77,1214.95 1826.35,1214.95 1826.94,1214.95 1827.53,1214.95 1828.11,1214.95 1828.7,1214.95 1829.29,1214.95 1829.87,1214.95 1830.46,1214.95 1831.05,1214.95 1831.63,1214.95 1832.22,1214.95 1832.81,1214.95 1833.39,1214.95 1833.98,1214.95 1834.56,1214.95 1835.15,1214.95 1835.74,1214.95 1836.32,1214.95 1836.91,1214.95 1837.5,1214.95 1838.08,1214.95 1838.67,1214.95 1839.26,1214.95 1839.84,1214.95 1840.43,1214.95 1841.01,1214.95 1841.6,1214.95 1842.19,1214.95 1842.77,1214.95 1843.36,1214.95 1843.95,1214.95 1844.53,1214.95 1845.12,1214.95 1845.71,1214.95 1846.29,1214.95 1846.88,1214.95 1847.47,1214.95 1848.05,1214.95 1848.64,1214.95 1849.22,1214.95 1849.81,1214.95 1850.4,1214.95 1850.98,1214.95 1851.57,1214.95 1852.16,1214.95 1852.74,1214.95 1853.33,1214.95 1853.92,1214.95 1854.5,1214.95 1855.09,1214.95 1855.68,1214.95 1856.26,1214.95 1856.85,1214.95 1857.43,1214.95 1858.02,1214.95 1858.61,1214.95 1859.19,1214.95 1859.78,1214.95 1860.37,1214.95 1860.95,1214.95 1861.54,1214.95 1862.13,1214.95 1862.71,1214.95 1863.3,1214.95 1863.88,1214.95 1864.47,1214.95 1865.06,1214.95 1865.64,1214.95 1866.23,1214.95 1866.82,1214.95 1867.4,1214.95 1867.99,1214.95 1868.58,1214.95 1869.16,1214.95 1869.75,1214.95 1870.34,1214.95 1870.92,1214.95 1871.51,1214.95 1872.09,1214.95 1872.68,1214.95 1873.27,1214.95 1873.85,1214.95 1874.44,1214.95 1875.03,1214.95 1875.61,1214.95 1876.2,1214.95 1876.79,1214.95 1877.37,1214.95 1877.96,1214.95 1878.55,1214.95 1879.13,1214.95 1879.72,1214.95 1880.3,1214.95 1880.89,1214.95 1881.48,1214.95 1882.06,1214.95 1882.65,1214.95 1883.24,1214.95 1883.82,1214.95 1884.41,1214.95 1885,1214.95 1885.58,1214.95 1886.17,1214.95 1886.76,1214.95 1887.34,1214.95 1887.93,1214.95 1888.51,1214.95 1889.1,1214.95 1889.69,1214.95 1890.27,1214.95 1890.86,1214.95 1891.45,1214.95 1892.03,1214.95 1892.62,1214.95 1893.21,1214.95 1893.79,1214.95 1894.38,1214.95 1894.96,1214.95 1895.55,1214.95 1896.14,1214.95 1896.72,1214.95 1897.31,1214.95 1897.9,1214.95 1898.48,1214.95 1899.07,1214.95 1899.66,1214.95 1900.24,1214.95 1900.83,1214.95 1901.42,1214.95 1902,1214.95 1902.59,1214.95 1903.17,1214.95 1903.76,1214.95 1904.35,1214.95 1904.93,1214.95 1905.52,1214.95 1906.11,1214.95 1906.69,1214.95 1907.28,1214.95 1907.87,1214.95 1908.45,1214.95 1909.04,1214.95 1909.63,1214.95 1910.21,1214.95 1910.8,1214.95 1911.38,1214.95 1911.97,1214.95 1912.56,1214.95 1913.14,1214.95 1913.73,1214.95 1914.32,1214.95 1914.9,1214.95 1915.49,1214.95 1916.08,1214.95 1916.66,1214.95 1917.25,1214.95 1917.83,1214.95 1918.42,1214.95 1919.01,1214.95 1919.59,1214.95 1920.18,1214.95 1920.77,1214.95 1921.35,1214.95 1921.94,1214.95 1922.53,1214.95 1923.11,1214.95 1923.7,1214.95 1924.29,1214.95 1924.87,1214.95 1925.46,1214.95 1926.04,1214.95 1926.63,1214.95 1927.22,1214.95 1927.8,1214.95 1928.39,1214.95 1928.98,1214.95 1929.56,1214.95 1930.15,1214.95 1930.74,1214.95 1931.32,1214.95 1931.91,1214.95 1932.5,1214.95 1933.08,1214.95 1933.67,1214.95 1934.25,1214.95 1934.84,1214.95 1935.43,1214.95 1936.01,1214.95 1936.6,1214.95 1937.19,1214.95 1937.77,1214.95 1938.36,1214.95 1938.95,1214.95 1939.53,1214.95 1940.12,1214.95 1940.71,1214.95 1941.29,1214.95 1941.88,1214.95 1942.46,1214.95 1943.05,1214.95 1943.64,1214.95 1944.22,1214.95 1944.81,1214.95 1945.4,1214.95 1945.98,1214.95 1946.57,1214.95 1947.16,1214.95 1947.74,1214.95 1948.33,1214.95 1948.91,1214.95 1949.5,1214.95 1950.09,1214.95 1950.67,1214.95 1951.26,1214.95 1951.85,1214.95 1952.43,1214.95 1953.02,1214.95 1953.61,1214.95 1954.19,1214.95 1954.78,1214.95 1955.37,1214.95 1955.95,1214.95 1956.54,1214.95 1957.12,1214.95 1957.71,1214.95 1958.3,1214.95 1958.88,1214.95 1959.47,1214.95 1960.06,1214.95 1960.64,1214.95 1961.23,1214.95 1961.82,1214.95 1962.4,1214.95 1962.99,1214.95 1963.58,1214.95 1964.16,1214.95 1964.75,1214.95 1965.33,1214.95 1965.92,1214.95 1966.51,1214.95 1967.09,1214.95 1967.68,1214.95 1968.27,1214.95 1968.85,1214.95 1969.44,1214.95 1970.03,1214.95 1970.61,1214.95 1971.2,1214.95 1971.78,1214.95 1972.37,1214.95 1972.96,1214.95 1973.54,1214.95 1974.13,1214.95 1974.72,1214.95 1975.3,1214.95 1975.89,1214.95 1976.48,1214.95 1977.06,1214.95 1977.65,1214.95 1978.24,1214.95 1978.82,1214.95 1979.41,1214.95 1979.99,1214.95 1980.58,1214.95 1981.17,1214.95 1981.75,1214.95 1982.34,1214.95 1982.93,1214.95 1983.51,1214.95 1984.1,1214.95 1984.69,1214.95 1985.27,1214.95 1985.86,1214.95 1986.45,1214.95 1987.03,1214.95 1987.62,1214.95 1988.2,1214.95 1988.79,1214.95 1989.38,1214.95 1989.96,1214.95 1990.55,1214.95 1991.14,1214.95 1991.72,1214.95 1992.31,1214.95 1992.9,1214.95 1993.48,1214.95 1994.07,1214.95 1994.65,1214.95 1995.24,1214.95 1995.83,1214.95 1996.41,1214.95 1997,1214.95 1997.59,1214.95 1998.17,1214.95 1998.76,1214.95 1999.35,1214.95 1999.93,1214.95 2000.52,1214.95 2001.11,1214.95 2001.69,1214.95 2002.28,1214.95 2002.86,1214.95 2003.45,1214.95 2004.04,1214.95 2004.62,1214.95 2005.21,1214.95 2005.8,1214.95 2006.38,1214.95 2006.97,1214.95 2007.56,1214.95 2008.14,1214.95 2008.73,1214.95 2009.32,1214.95 2009.9,1214.95 2010.49,1214.95 2011.07,1214.95 2011.66,1214.95 2012.25,1214.95 2012.83,1214.95 2013.42,1214.95 2014.01,1214.95 2014.59,1214.95 2015.18,1214.95 2015.77,1214.95 2016.35,1214.95 2016.94,1214.95 2017.53,1214.95 2018.11,1214.95 2018.7,1214.95 2019.28,1214.95 2019.87,1214.95 2020.46,1214.95 2021.04,1214.95 2021.63,1214.95 2022.22,1214.95 2022.8,1214.95 2023.39,1214.95 2023.98,1214.95 2024.56,1214.95 2025.15,1214.95 2025.73,1214.95 2026.32,1214.95 2026.91,1214.95 2027.49,1214.95 2028.08,1214.95 2028.67,1214.95 2029.25,1214.95 2029.84,1214.95 2030.43,1214.95 2031.01,1214.95 2031.6,1214.95 2032.19,1214.95 2032.77,1214.95 2033.36,1214.95 2033.94,1214.95 2034.53,1214.95 2035.12,1214.95 2035.7,1214.95 2036.29,1214.95 2036.88,1214.95 2037.46,1214.95 2038.05,1214.95 2038.64,1214.95 2039.22,1214.95 2039.81,1214.95 2040.4,1214.95 2040.98,1214.95 2041.57,1214.95 2042.15,1214.95 2042.74,1214.95 2043.33,1214.95 2043.91,1214.95 2044.5,1214.95 2045.09,1214.95 2045.67,1214.95 2046.26,1214.95 2046.85,1214.95 2047.43,1214.95 2048.02,1214.95 2048.6,1214.95 2049.19,1214.95 2049.78,1214.95 2050.36,1214.95 2050.95,1214.95 2051.54,1214.95 2052.12,1214.95 2052.71,1214.95 2053.3,1214.95 2053.88,1214.95 2054.47,1214.95 2055.06,1214.95 2055.64,1214.95 2056.23,1214.95 2056.81,1214.95 2057.4,1214.95 2057.99,1214.95 2058.57,1214.95 2059.16,1214.95 2059.75,1214.95 2060.33,1214.95 2060.92,1214.95 2061.51,1214.95 2062.09,1214.95 2062.68,1214.95 2063.27,1214.95 2063.85,1214.95 2064.44,1214.95 2065.02,1214.95 2065.61,1214.95 2066.2,1214.95 2066.78,1214.95 2067.37,1214.95 2067.96,1214.95 2068.54,1214.95 2069.13,1214.95 2069.72,1214.95 2070.3,1214.95 2070.89,1214.95 2071.48,1214.95 2072.06,1214.95 2072.65,1214.95 2073.23,1214.95 2073.82,1214.95 2074.41,1214.95 2074.99,1214.95 2075.58,1214.95 2076.17,1214.95 2076.75,1214.95 2077.34,1214.95 2077.93,1214.95 2078.51,1214.95 2079.1,1214.95 2079.68,1214.95 2080.27,1214.95 2080.86,1214.95 2081.44,1214.95 2082.03,1214.95 2082.62,1214.95 2083.2,1214.95 2083.79,1214.95 2084.38,1214.95 2084.96,1214.95 2085.55,1214.95 2086.14,1214.95 2086.72,1214.95 2087.31,1214.95 2087.89,1214.95 2088.48,1214.95 2089.07,1214.95 2089.65,1214.95 2090.24,1214.95 2090.83,1214.95 2091.41,1214.95 2092,1214.95 2092.59,1214.95 2093.17,1214.95 2093.76,1214.95 2094.35,1214.95 2094.93,1214.95 2095.52,1214.95 2096.1,1214.95 2096.69,1214.95 2097.28,1214.95 2097.86,1214.95 2098.45,1214.95 2099.04,1214.95 2099.62,1214.95 2100.21,1214.95 2100.8,1214.95 2101.38,1214.95 2101.97,1214.95 2102.55,1214.95 2103.14,1214.95 2103.73,1214.95 2104.31,1214.95 2104.9,1214.95 2105.49,1214.95 2106.07,1214.95 2106.66,1214.95 2107.25,1214.95 2107.83,1214.95 2108.42,1214.95 2109.01,1214.95 2109.59,1214.95 2110.18,1214.95 2110.76,1214.95 2111.35,1214.95 2111.94,1214.95 2112.52,1214.95 2113.11,1214.95 2113.7,1214.95 2114.28,1214.95 2114.87,1214.95 2115.46,1214.95 2116.04,1214.95 2116.63,1214.95 2117.22,1214.95 2117.8,1214.95 2118.39,1214.95 2118.97,1214.95 2119.56,1214.95 2120.15,1214.95 2120.73,1214.95 2121.32,1214.95 2121.91,1214.95 2122.49,1214.95 2123.08,1214.95 2123.67,1214.95 2124.25,1214.95 2124.84,1214.95 2125.42,1214.95 2126.01,1214.95 2126.6,1214.95 2127.18,1214.95 2127.77,1214.95 2128.36,1214.95 2128.94,1214.95 2129.53,1214.95 2130.12,1214.95 2130.7,1214.95 2131.29,1214.95 2131.88,1214.95 2132.46,1214.95 2133.05,1214.95 2133.63,1214.95 2134.22,1214.95 2134.81,1214.95 2135.39,1214.95 2135.98,1214.95 2136.57,1214.95 2137.15,1214.95 2137.74,1214.95 2138.33,1214.95 2138.91,1214.95 2139.5,1214.95 2140.09,1214.95 2140.67,1214.95 2141.26,1214.95 2141.84,1214.95 2142.43,1214.95 2143.02,1214.95 2143.6,1214.95 2144.19,1214.95 2144.78,1214.95 2145.36,1214.95 2145.95,1214.95 2146.54,1214.95 2147.12,1214.95 2147.71,1214.95 2148.3,1214.95 2148.88,1214.95 2149.47,1214.95 2150.05,1214.95 2150.64,1214.95 2151.23,1214.95 2151.81,1214.95 2152.4,1214.95 2152.99,1214.95 2153.57,1214.95 2154.16,1214.95 2154.75,1214.95 2155.33,1214.95 2155.92,1214.95 2156.5,1214.95 2157.09,1214.95 2157.68,1214.95 2158.26,1214.95 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1214.98 L986.612 1214.98 L987.198 1214.98 L987.785 1214.98 L988.371 1214.98 L988.957 1214.98 L989.544 1214.98 L990.13 1214.98 L990.717 1214.98 L991.303 1214.98 L991.889 1214.98 L992.476 1214.98 L993.062 1214.98 L993.649 1214.98 L994.235 1214.98 L994.822 1214.98 L995.408 1214.98 L995.994 1214.98 L996.581 1214.98 L997.167 1214.98 L997.754 1214.98 L998.34 1214.98 L998.926 1214.98 L999.513 1214.98 L1000.1 1214.98 L1000.69 1214.98 L1001.27 1214.98 L1001.86 1214.98 L1002.44 1214.98 L1003.03 1214.98 L1003.62 1214.98 L1004.2 1214.98 L1004.79 1214.98 L1005.38 1214.98 L1005.96 1214.98 L1006.55 1214.98 L1007.14 1214.98 L1007.72 1214.98 L1008.31 1214.98 L1008.9 1214.98 L1009.48 1214.98 L1010.07 1214.98 L1010.65 1214.98 L1011.24 1214.98 L1011.83 1214.98 L1012.41 1214.98 L1013 1214.98 L1013.59 1214.98 L1014.17 1214.98 L1014.76 1214.98 L1015.35 1214.98 L1015.93 1214.98 L1016.52 1214.98 L1017.11 1214.98 L1017.69 1214.98 L1018.28 1214.98 L1018.86 1214.98 L1019.45 1214.98 L1020.04 1214.98 L1020.62 1214.98 L1021.21 1214.98 L1021.8 1214.98 L1022.38 1214.98 L1022.97 1214.98 L1023.56 1214.98 L1024.14 1214.98 L1024.73 1214.98 L1025.32 1214.98 L1025.9 1214.98 L1026.49 1214.98 L1027.07 1214.98 L1027.66 1214.98 L1028.25 1214.98 L1028.83 1214.98 L1029.42 1214.98 L1030.01 1214.98 L1030.59 1214.98 L1031.18 1214.98 L1031.77 1214.98 L1032.35 1214.98 L1032.94 1214.98 L1033.52 1214.98 L1034.11 1214.98 L1034.7 1214.98 L1035.28 1214.98 L1035.87 1214.98 L1036.46 1214.98 L1037.04 1214.98 L1037.63 1214.98 L1038.22 1214.98 L1038.8 1214.98 L1039.39 1214.98 L1039.98 1214.98 L1040.56 1214.98 L1041.15 1214.98 L1041.73 1214.98 L1042.32 1214.98 L1042.91 1214.98 L1043.49 1214.98 L1044.08 1214.98 L1044.67 1214.98 L1045.25 1214.98 L1045.84 1214.98 L1046.43 1214.98 L1047.01 1214.98 L1047.6 1214.98 L1048.19 1214.98 L1048.77 1214.98 L1049.36 1214.98 L1049.94 1214.98 L1050.53 1214.98 L1051.12 1214.98 L1051.7 1214.98 L1052.29 1214.98 L1052.88 1214.98 L1053.46 1214.98 L1054.05 1214.98 L1054.64 1214.98 L1055.22 1214.98 L1055.81 1214.98 L1056.39 1214.98 L1056.98 1214.98 L1057.57 1214.98 L1058.15 1214.98 L1058.74 1214.98 L1059.33 1214.98 L1059.91 1214.98 L1060.5 1214.98 L1061.09 1214.98 L1061.67 1214.98 L1062.26 1214.98 L1062.85 1214.98 L1063.43 1214.98 L1064.02 1214.98 L1064.6 1214.98 L1065.19 1214.98 L1065.78 1214.98 L1066.36 1214.98 L1066.95 1214.98 L1067.54 1214.98 L1068.12 1214.98 L1068.71 1214.98 L1069.3 1214.98 L1069.88 1214.98 L1070.47 1214.98 L1071.06 1214.98 L1071.64 1214.98 L1072.23 1214.98 L1072.81 1214.98 L1073.4 1214.98 L1073.99 1214.98 L1074.57 1214.98 L1075.16 1214.98 L1075.75 1214.98 L1076.33 1214.98 L1076.92 1214.98 L1077.51 1214.98 L1078.09 1214.98 L1078.68 1214.98 L1079.26 1214.98 L1079.85 1214.98 L1080.44 1214.98 L1081.02 1214.98 L1081.61 1214.98 L1082.2 1214.98 L1082.78 1214.98 L1083.37 1214.98 L1083.96 1214.98 L1084.54 1214.98 L1085.13 1214.98 L1085.72 1214.98 L1086.3 1214.98 L1086.89 1214.98 L1087.47 1214.98 L1088.06 1214.98 L1088.65 1214.98 L1089.23 1214.98 L1089.82 1214.98 L1090.41 1214.98 L1090.99 1214.98 L1091.58 1214.98 L1092.17 1214.98 L1092.75 1214.98 L1093.34 1214.98 L1093.93 1214.98 L1094.51 1214.98 L1095.1 1214.98 L1095.68 1214.98 L1096.27 1214.98 L1096.86 1214.98 L1097.44 1214.98 L1098.03 1214.98 L1098.62 1214.98 L1099.2 1214.98 L1099.79 1214.98 L1100.38 1214.98 L1100.96 1214.98 L1101.55 1214.98 L1102.14 1214.98 L1102.72 1214.98 L1103.31 1214.98 L1103.89 1214.98 L1104.48 1214.98 L1105.07 1214.98 L1105.65 1214.98 L1106.24 1214.98 L1106.83 1214.98 L1107.41 1214.98 L1108 1214.98 L1108.59 1214.98 L1109.17 1214.98 L1109.76 1214.98 L1110.34 1214.98 L1110.93 1214.98 L1111.52 1214.98 L1112.1 1214.98 L1112.69 1214.98 L1113.28 1214.98 L1113.86 1214.98 L1114.45 1214.98 L1115.04 1214.98 L1115.62 1214.98 L1116.21 1214.98 L1116.8 1214.98 L1117.38 1214.98 L1117.97 1214.98 L1118.55 1214.98 L1119.14 1214.98 L1119.73 1214.98 L1120.31 1214.98 L1120.9 1214.98 L1121.49 1214.98 L1122.07 1214.98 L1122.66 1214.98 L1123.25 1214.98 L1123.83 1214.98 L1124.42 1214.98 L1125.01 1214.98 L1125.59 1214.98 L1126.18 1214.98 L1126.76 1214.98 L1127.35 1214.98 L1127.94 1214.98 L1128.52 1214.98 L1129.11 1214.98 L1129.7 1214.98 L1130.28 1214.98 L1130.87 1214.98 L1131.46 1214.98 L1132.04 1214.98 L1132.63 1214.98 L1133.21 1214.98 L1133.8 1214.98 L1134.39 1214.98 L1134.97 1214.98 L1135.56 1214.98 L1136.15 1214.98 L1136.73 1214.98 L1137.32 1214.98 L1137.91 1214.98 L1138.49 1214.98 L1139.08 1214.98 L1139.67 1214.98 L1140.25 1214.98 L1140.84 1214.98 L1141.42 1214.98 L1142.01 1214.98 L1142.6 1214.98 L1143.18 1214.98 L1143.77 1214.98 L1144.36 1214.98 L1144.94 1214.98 L1145.53 1214.98 L1146.12 1214.98 L1146.7 1214.98 L1147.29 1214.98 L1147.88 1214.98 L1148.46 1214.98 L1149.05 1214.98 L1149.63 1214.98 L1150.22 1214.98 L1150.81 1214.98 L1151.39 1214.98 L1151.98 1214.98 L1152.57 1214.98 L1153.15 1214.98 L1153.74 1214.98 L1154.33 1214.98 L1154.91 1214.98 L1155.5 1214.98 L1156.09 1214.98 L1156.67 1214.98 L1157.26 1214.98 L1157.84 1214.98 L1158.43 1214.98 L1159.02 1214.98 L1159.6 1214.98 L1160.19 1214.98 L1160.78 1214.98 L1161.36 1214.98 L1161.95 1214.98 L1162.54 1214.98 L1163.12 1214.98 L1163.71 1214.98 L1164.29 1214.98 L1164.88 1214.98 L1165.47 1214.98 L1166.05 1214.98 L1166.64 1214.98 L1167.23 1214.98 L1167.81 1214.98 L1168.4 1214.98 L1168.99 1214.98 L1169.57 1214.98 L1170.16 1214.98 L1170.75 1214.98 L1171.33 1214.98 L1171.92 1214.98 L1172.5 1214.98 L1173.09 1214.98 L1173.68 1214.98 L1174.26 1214.98 L1174.85 1214.98 L1175.44 1214.98 L1176.02 1214.98 L1176.61 1214.98 L1177.2 1214.98 L1177.78 1214.98 L1178.37 1214.98 L1178.96 1214.98 L1179.54 1214.98 L1180.13 1214.98 L1180.71 1214.98 L1181.3 1214.98 L1181.89 1214.98 L1182.47 1214.98 L1183.06 1214.98 L1183.65 1214.98 L1184.23 1214.98 L1184.82 1214.98 L1185.41 1214.98 L1185.99 1214.98 L1186.58 1214.98 L1187.16 1214.98 L1187.75 1214.98 L1188.34 1214.98 L1188.92 1214.98 L1189.51 1214.98 L1190.1 1214.98 L1190.68 1214.98 L1191.27 1214.98 L1191.86 1214.98 L1192.44 1214.98 L1193.03 1214.98 L1193.62 1214.98 L1194.2 1214.98 L1194.79 1214.98 L1195.37 1214.98 L1195.96 1214.98 L1196.55 1214.98 L1197.13 1214.98 L1197.72 1214.98 L1198.31 1214.98 L1198.89 1214.98 L1199.48 1214.98 L1200.07 1214.98 L1200.65 1214.98 L1201.24 1214.98 L1201.83 1214.98 L1202.41 1214.98 L1203 1214.98 L1203.58 1214.98 L1204.17 1214.98 L1204.76 1214.98 L1205.34 1214.98 L1205.93 1214.98 L1206.52 1214.98 L1207.1 1214.98 L1207.69 1214.98 L1208.28 1214.98 L1208.86 1214.98 L1209.45 1214.98 L1210.03 1214.98 L1210.62 1214.98 L1211.21 1214.98 L1211.79 1214.98 L1212.38 1214.98 L1212.97 1214.98 L1213.55 1214.98 L1214.14 1214.98 L1214.73 1214.98 L1215.31 1214.98 L1215.9 1214.98 L1216.49 1214.98 L1217.07 1214.98 L1217.66 1214.98 L1218.24 1214.98 L1218.83 1214.98 L1219.42 1214.98 L1220 1214.98 L1220.59 1214.98 L1221.18 1214.98 L1221.76 1214.98 L1222.35 1214.98 L1222.94 1214.98 L1223.52 1214.98 L1224.11 1214.98 L1224.7 1214.98 L1225.28 1214.98 L1225.87 1214.98 L1226.45 1214.98 L1227.04 1214.98 L1227.63 1214.98 L1228.21 1214.98 L1228.8 1214.98 L1229.39 1214.98 L1229.97 1214.98 L1230.56 1214.98 L1231.15 1214.98 L1231.73 1214.98 L1232.32 1214.98 L1232.91 1214.98 L1233.49 1214.98 L1234.08 1214.98 L1234.66 1214.98 L1235.25 1214.98 L1235.84 1214.98 L1236.42 1214.98 L1237.01 1214.98 L1237.6 1214.98 L1238.18 1214.98 L1238.77 1214.98 L1239.36 1214.98 L1239.94 1214.98 L1240.53 1214.98 L1241.11 1214.98 L1241.7 1214.98 L1242.29 1214.98 L1242.87 1214.98 L1243.46 1214.98 L1244.05 1214.98 L1244.63 1214.98 L1245.22 1214.98 L1245.81 1214.98 L1246.39 1214.98 L1246.98 1214.98 L1247.57 1214.98 L1248.15 1214.98 L1248.74 1214.98 L1249.32 1214.98 L1249.91 1214.98 L1250.5 1214.98 L1251.08 1214.98 L1251.67 1214.98 L1252.26 1214.98 L1252.84 1214.98 L1253.43 1214.98 L1254.02 1214.98 L1254.6 1214.98 L1255.19 1214.98 L1255.78 1214.98 L1256.36 1214.98 L1256.95 1214.98 L1257.53 1214.98 L1258.12 1214.98 L1258.71 1214.98 L1259.29 1214.98 L1259.88 1214.98 L1260.47 1214.98 L1261.05 1214.98 L1261.64 1214.98 L1262.23 1214.98 L1262.81 1214.98 L1263.4 1214.98 L1263.98 1214.98 L1264.57 1214.98 L1265.16 1214.98 L1265.74 1214.98 L1266.33 1214.98 L1266.92 1214.98 L1267.5 1214.98 L1268.09 1214.98 L1268.68 1214.98 L1269.26 1214.98 L1269.85 1214.98 L1270.44 1214.98 L1271.02 1214.98 L1271.61 1214.98 L1272.19 1214.98 L1272.78 1214.98 L1273.37 1214.98 L1273.95 1214.98 L1274.54 1214.98 L1275.13 1214.98 L1275.71 1214.98 L1276.3 1214.98 L1276.89 1214.98 L1277.47 1214.98 L1278.06 1214.98 L1278.65 1214.98 L1279.23 1214.98 L1279.82 1214.98 L1280.4 1214.98 L1280.99 1214.98 L1281.58 1214.98 L1282.16 1214.98 L1282.75 1214.98 L1283.34 1214.98 L1283.92 1214.98 L1284.51 1214.98 L1285.1 1214.98 L1285.68 1214.98 L1286.27 1214.98 L1286.86 1214.98 L1287.44 1214.98 L1288.03 1214.98 L1288.61 1214.98 L1289.2 1214.98 L1289.79 1214.98 L1290.37 1214.98 L1290.96 1214.98 L1291.55 1214.98 L1292.13 1214.98 L1292.72 1214.98 L1293.31 1214.98 L1293.89 1214.98 L1294.48 1214.98 L1295.06 1214.98 L1295.65 1214.98 L1296.24 1214.98 L1296.82 1214.98 L1297.41 1214.98 L1298 1214.98 L1298.58 1214.98 L1299.17 1214.98 L1299.76 1214.98 L1300.34 1214.98 L1300.93 1214.98 L1301.52 1214.98 L1302.1 1214.98 L1302.69 1214.98 L1303.27 1214.98 L1303.86 1214.98 L1304.45 1214.98 L1305.03 1214.98 L1305.62 1214.98 L1306.21 1214.98 L1306.79 1214.98 L1307.38 1214.98 L1307.97 1214.98 L1308.55 1214.98 L1309.14 1214.98 L1309.73 1214.98 L1310.31 1214.98 L1310.9 1214.98 L1311.48 1214.98 L1312.07 1214.98 L1312.66 1214.98 L1313.24 1214.98 L1313.83 1214.98 L1314.42 1214.98 L1315 1214.98 L1315.59 1214.98 L1316.18 1214.98 L1316.76 1214.98 L1317.35 1214.98 L1317.93 1214.98 L1318.52 1214.98 L1319.11 1214.98 L1319.69 1214.98 L1320.28 1214.98 L1320.87 1214.98 L1321.45 1214.98 L1322.04 1214.98 L1322.63 1214.98 L1323.21 1214.98 L1323.8 1214.98 L1324.39 1214.98 L1324.97 1214.98 L1325.56 1214.98 L1326.14 1214.98 L1326.73 1214.98 L1327.32 1214.98 L1327.9 1214.98 L1328.49 1214.98 L1329.08 1214.98 L1329.66 1214.98 L1330.25 1214.98 L1330.84 1214.98 L1331.42 1214.98 L1332.01 1214.98 L1332.6 1214.98 L1333.18 1214.98 L1333.77 1214.98 L1334.35 1214.98 L1334.94 1214.98 L1335.53 1214.98 L1336.11 1214.98 L1336.7 1214.98 L1337.29 1214.98 L1337.87 1214.98 L1338.46 1214.98 L1339.05 1214.98 L1339.63 1214.98 L1340.22 1214.98 L1340.8 1214.98 L1341.39 1214.98 L1341.98 1214.98 L1342.56 1214.98 L1343.15 1214.98 L1343.74 1214.98 L1344.32 1214.98 L1344.91 1214.98 L1345.5 1214.98 L1346.08 1214.98 L1346.67 1214.98 L1347.26 1214.98 L1347.84 1214.98 L1348.43 1214.98 L1349.01 1214.98 L1349.6 1214.98 L1350.19 1214.98 L1350.77 1214.98 L1351.36 1214.98 L1351.95 1214.98 L1352.53 1214.98 L1353.12 1214.98 L1353.71 1214.98 L1354.29 1214.98 L1354.88 1214.98 L1355.47 1214.98 L1356.05 1214.98 L1356.64 1214.98 L1357.22 1214.98 L1357.81 1214.98 L1358.4 1214.98 L1358.98 1214.98 L1359.57 1214.98 L1360.16 1214.98 L1360.74 1214.98 L1361.33 1214.98 L1361.92 1214.98 L1362.5 1214.98 L1363.09 1214.98 L1363.68 1214.98 L1364.26 1214.98 L1364.85 1214.98 L1365.43 1214.98 L1366.02 1214.98 L1366.61 1214.98 L1367.19 1214.98 L1367.78 1214.98 L1368.37 1214.98 L1368.95 1214.98 L1369.54 1214.98 L1370.13 1214.98 L1370.71 1214.98 L1371.3 1214.98 L1371.88 1214.98 L1372.47 1214.98 L1373.06 1214.98 L1373.64 1214.98 L1374.23 1214.98 L1374.82 1214.98 L1375.4 1214.98 L1375.99 1214.98 L1376.58 1214.98 L1377.16 1214.98 L1377.75 1214.98 L1378.34 1214.98 L1378.92 1214.98 L1379.51 1214.98 L1380.09 1214.98 L1380.68 1214.98 L1381.27 1214.98 L1381.85 1214.98 L1382.44 1214.98 L1383.03 1214.98 L1383.61 1214.98 L1384.2 1214.98 L1384.79 1214.98 L1385.37 1214.98 L1385.96 1214.98 L1386.55 1214.98 L1387.13 1214.98 L1387.72 1214.98 L1388.3 1214.98 L1388.89 1214.98 L1389.48 1214.98 L1390.06 1214.98 L1390.65 1214.98 L1391.24 1214.98 L1391.82 1214.98 L1392.41 1214.98 L1393 1214.98 L1393.58 1214.98 L1394.17 1214.98 L1394.75 1214.98 L1395.34 1214.98 L1395.93 1214.98 L1396.51 1214.98 L1397.1 1214.98 L1397.69 1214.98 L1398.27 1214.98 L1398.86 1214.98 L1399.45 1214.98 L1400.03 1214.98 L1400.62 1214.98 L1401.21 1214.98 L1401.79 1214.98 L1402.38 1214.98 L1402.96 1214.98 L1403.55 1214.98 L1404.14 1214.98 L1404.72 1214.98 L1405.31 1214.98 L1405.9 1214.98 L1406.48 1214.98 L1407.07 1214.98 L1407.66 1214.98 L1408.24 1214.98 L1408.83 1214.98 L1409.42 1214.98 L1410 1214.98 L1410.59 1214.98 L1411.17 1214.98 L1411.76 1214.98 L1412.35 1214.98 L1412.93 1214.98 L1413.52 1214.98 L1414.11 1214.98 L1414.69 1214.98 L1415.28 1214.98 L1415.87 1214.98 L1416.45 1214.98 L1417.04 1214.98 L1417.63 1214.98 L1418.21 1214.98 L1418.8 1214.98 L1419.38 1214.98 L1419.97 1214.98 L1420.56 1214.98 L1421.14 1214.98 L1421.73 1214.98 L1422.32 1214.98 L1422.9 1214.98 L1423.49 1214.98 L1424.08 1214.98 L1424.66 1214.98 L1425.25 1214.98 L1425.83 1214.98 L1426.42 1214.98 L1427.01 1214.98 L1427.59 1214.98 L1428.18 1214.98 L1428.77 1214.98 L1429.35 1214.98 L1429.94 1214.98 L1430.53 1214.98 L1431.11 1214.98 L1431.7 1214.98 L1432.29 1214.98 L1432.87 1214.98 L1433.46 1214.98 L1434.04 1214.98 L1434.63 1214.98 L1435.22 1214.98 L1435.8 1214.98 L1436.39 1214.98 L1436.98 1214.98 L1437.56 1214.98 L1438.15 1214.98 L1438.74 1214.98 L1439.32 1214.98 L1439.91 1214.98 L1440.5 1214.98 L1441.08 1214.98 L1441.67 1214.98 L1442.25 1214.98 L1442.84 1214.98 L1443.43 1214.98 L1444.01 1214.98 L1444.6 1214.98 L1445.19 1214.98 L1445.77 1214.98 L1446.36 1214.98 L1446.95 1214.98 L1447.53 1214.98 L1448.12 1214.98 L1448.7 1214.98 L1449.29 1214.98 L1449.88 1214.98 L1450.46 1214.98 L1451.05 1214.98 L1451.64 1214.98 L1452.22 1214.98 L1452.81 1214.98 L1453.4 1214.98 L1453.98 1214.98 L1454.57 1214.98 L1455.16 1214.98 L1455.74 1214.98 L1456.33 1214.98 L1456.91 1214.98 L1457.5 1214.98 L1458.09 1214.98 L1458.67 1214.98 L1459.26 1214.98 L1459.85 1214.98 L1460.43 1214.98 L1461.02 1214.98 L1461.61 1214.98 L1462.19 1214.98 L1462.78 1214.98 L1463.37 1214.98 L1463.95 1214.98 L1464.54 1214.98 L1465.12 1214.98 L1465.71 1214.98 L1466.3 1214.98 L1466.88 1214.98 L1467.47 1214.98 L1468.06 1214.98 L1468.64 1214.98 L1469.23 1214.98 L1469.82 1214.98 L1470.4 1214.98 L1470.99 1214.98 L1471.57 1214.98 L1472.16 1214.98 L1472.75 1214.98 L1473.33 1214.98 L1473.92 1214.98 L1474.51 1214.98 L1475.09 1214.98 L1475.68 1214.98 L1476.27 1214.98 L1476.85 1214.98 L1477.44 1214.98 L1478.03 1214.98 L1478.61 1214.98 L1479.2 1214.98 L1479.78 1214.98 L1480.37 1214.98 L1480.96 1214.98 L1481.54 1214.98 L1482.13 1214.98 L1482.72 1214.98 L1483.3 1214.98 L1483.89 1214.98 L1484.48 1214.98 L1485.06 1214.98 L1485.65 1214.98 L1486.24 1214.98 L1486.82 1214.98 L1487.41 1214.98 L1487.99 1214.98 L1488.58 1214.98 L1489.17 1214.98 L1489.75 1214.98 L1490.34 1214.98 L1490.93 1214.98 L1491.51 1214.98 L1492.1 1214.98 L1492.69 1214.98 L1493.27 1214.98 L1493.86 1214.98 L1494.45 1214.98 L1495.03 1214.98 L1495.62 1214.98 L1496.2 1214.98 L1496.79 1214.98 L1497.38 1214.98 L1497.96 1214.98 L1498.55 1214.98 L1499.14 1214.98 L1499.72 1214.98 L1500.31 1214.98 L1500.9 1214.98 L1501.48 1214.98 L1502.07 1214.98 L1502.65 1214.98 L1503.24 1214.98 L1503.83 1214.98 L1504.41 1214.98 L1505 1214.98 L1505.59 1214.98 L1506.17 1214.98 L1506.76 1214.98 L1507.35 1214.98 L1507.93 1214.98 L1508.52 1214.98 L1509.11 1214.98 L1509.69 1214.98 L1510.28 1214.98 L1510.86 1214.98 L1511.45 1214.98 L1512.04 1214.98 L1512.62 1214.98 L1513.21 1214.98 L1513.8 1214.98 L1514.38 1214.98 L1514.97 1214.98 L1515.56 1214.98 L1516.14 1214.98 L1516.73 1214.98 L1517.32 1214.98 L1517.9 1214.98 L1518.49 1214.98 L1519.07 1214.98 L1519.66 1214.98 L1520.25 1214.98 L1520.83 1214.98 L1521.42 1214.98 L1522.01 1214.98 L1522.59 1214.98 L1523.18 1214.98 L1523.77 1214.98 L1524.35 1214.98 L1524.94 1214.98 L1525.52 1214.98 L1526.11 1214.98 L1526.7 1214.98 L1527.28 1214.98 L1527.87 1214.98 L1528.46 1214.98 L1529.04 1214.98 L1529.63 1214.98 L1530.22 1214.98 L1530.8 1214.98 L1531.39 1214.98 L1531.98 1214.98 L1532.56 1214.98 L1533.15 1214.98 L1533.73 1214.98 L1534.32 1214.98 L1534.91 1214.98 L1535.49 1214.98 L1536.08 1214.98 L1536.67 1214.98 L1537.25 1214.98 L1537.84 1214.98 L1538.43 1214.98 L1539.01 1214.98 L1539.6 1214.98 L1540.19 1214.98 L1540.77 1214.98 L1541.36 1214.98 L1541.94 1214.98 L1542.53 1214.98 L1543.12 1214.98 L1543.7 1214.98 L1544.29 1214.98 L1544.88 1214.98 L1545.46 1214.98 L1546.05 1214.98 L1546.64 1214.98 L1547.22 1214.98 L1547.81 1214.98 L1548.4 1214.98 L1548.98 1214.98 L1549.57 1214.98 L1550.15 1214.98 L1550.74 1214.98 L1551.33 1214.98 L1551.91 1214.98 L1552.5 1214.98 L1553.09 1214.98 L1553.67 1214.98 L1554.26 1214.98 L1554.85 1214.98 L1555.43 1214.98 L1556.02 1214.98 L1556.6 1214.98 L1557.19 1214.98 L1557.78 1214.98 L1558.36 1214.98 L1558.95 1214.98 L1559.54 1214.98 L1560.12 1214.98 L1560.71 1214.98 L1561.3 1214.98 L1561.88 1214.98 L1562.47 1214.98 L1563.06 1214.98 L1563.64 1214.98 L1564.23 1214.98 L1564.81 1214.98 L1565.4 1214.98 L1565.99 1214.98 L1566.57 1214.98 L1567.16 1214.98 L1567.75 1214.98 L1568.33 1214.98 L1568.92 1214.98 L1569.51 1214.98 L1570.09 1214.98 L1570.68 1214.98 L1571.27 1214.98 L1571.85 1214.98 L1572.44 1214.98 L1573.02 1214.98 L1573.61 1214.98 L1574.2 1214.98 L1574.78 1214.98 L1575.37 1214.98 L1575.96 1214.98 L1576.54 1214.98 L1577.13 1214.98 L1577.72 1214.98 L1578.3 1214.98 L1578.89 1214.98 L1579.47 1214.98 L1580.06 1214.98 L1580.65 1214.98 L1581.23 1214.98 L1581.82 1214.98 L1582.41 1214.98 L1582.99 1214.98 L1583.58 1214.98 L1584.17 1214.98 L1584.75 1214.98 L1585.34 1214.98 L1585.93 1214.98 L1586.51 1214.98 L1587.1 1214.98 L1587.68 1214.98 L1588.27 1214.98 L1588.86 1214.98 L1589.44 1214.98 L1590.03 1214.98 L1590.62 1214.98 L1591.2 1214.98 L1591.79 1214.98 L1592.38 1214.98 L1592.96 1214.98 L1593.55 1214.98 L1594.14 1214.98 L1594.72 1214.98 L1595.31 1214.98 L1595.89 1214.98 L1596.48 1214.98 L1597.07 1214.98 L1597.65 1214.98 L1598.24 1214.98 L1598.83 1214.98 L1599.41 1214.98 L1600 1214.98 L1600.59 1214.98 L1601.17 1214.98 L1601.76 1214.98 L1602.34 1214.98 L1602.93 1214.98 L1603.52 1214.98 L1604.1 1214.98 L1604.69 1214.98 L1605.28 1214.98 L1605.86 1214.98 L1606.45 1214.98 L1607.04 1214.98 L1607.62 1214.98 L1608.21 1214.98 L1608.8 1214.98 L1609.38 1214.98 L1609.97 1214.98 L1610.55 1214.98 L1611.14 1214.98 L1611.73 1214.98 L1612.31 1214.98 L1612.9 1214.98 L1613.49 1214.98 L1614.07 1214.98 L1614.66 1214.98 L1615.25 1214.98 L1615.83 1214.98 L1616.42 1214.98 L1617.01 1214.98 L1617.59 1214.98 L1618.18 1214.98 L1618.76 1214.98 L1619.35 1214.98 L1619.94 1214.98 L1620.52 1214.98 L1621.11 1214.98 L1621.7 1214.98 L1622.28 1214.98 L1622.87 1214.98 L1623.46 1214.98 L1624.04 1214.98 L1624.63 1214.98 L1625.22 1214.98 L1625.8 1214.98 L1626.39 1214.98 L1626.97 1214.98 L1627.56 1214.98 L1628.15 1214.98 L1628.73 1214.98 L1629.32 1214.98 L1629.91 1214.98 L1630.49 1214.98 L1631.08 1214.98 L1631.67 1214.98 L1632.25 1214.98 L1632.84 1214.98 L1633.42 1214.98 L1634.01 1214.98 L1634.6 1214.98 L1635.18 1214.98 L1635.77 1214.98 L1636.36 1214.98 L1636.94 1214.98 L1637.53 1214.98 L1638.12 1214.98 L1638.7 1214.98 L1639.29 1214.98 L1639.88 1214.98 L1640.46 1214.98 L1641.05 1214.98 L1641.63 1214.98 L1642.22 1214.98 L1642.81 1214.98 L1643.39 1214.98 L1643.98 1214.98 L1644.57 1214.98 L1645.15 1214.98 L1645.74 1214.98 L1646.33 1214.98 L1646.91 1214.98 L1647.5 1214.98 L1648.09 1214.98 L1648.67 1214.98 L1649.26 1214.98 L1649.84 1214.98 L1650.43 1214.98 L1651.02 1214.98 L1651.6 1214.98 L1652.19 1214.98 L1652.78 1214.98 L1653.36 1214.98 L1653.95 1214.98 L1654.54 1214.98 L1655.12 1214.98 L1655.71 1214.98 L1656.29 1214.98 L1656.88 1214.98 L1657.47 1214.98 L1658.05 1214.98 L1658.64 1214.98 L1659.23 1214.98 L1659.81 1214.98 L1660.4 1214.98 L1660.99 1214.98 L1661.57 1214.98 L1662.16 1214.98 L1662.75 1214.98 L1663.33 1214.98 L1663.92 1214.98 L1664.5 1214.98 L1665.09 1214.98 L1665.68 1214.98 L1666.26 1214.98 L1666.85 1214.98 L1667.44 1214.98 L1668.02 1214.98 L1668.61 1214.98 L1669.2 1214.98 L1669.78 1214.98 L1670.37 1214.98 L1670.96 1214.98 L1671.54 1214.98 L1672.13 1214.98 L1672.71 1214.98 L1673.3 1214.98 L1673.89 1214.98 L1674.47 1214.98 L1675.06 1214.98 L1675.65 1214.98 L1676.23 1214.98 L1676.82 1214.98 L1677.41 1214.98 L1677.99 1214.98 L1678.58 1214.98 L1679.17 1214.98 L1679.75 1214.98 L1680.34 1214.98 L1680.92 1214.98 L1681.51 1214.98 L1682.1 1214.98 L1682.68 1214.98 L1683.27 1214.98 L1683.86 1214.98 L1684.44 1214.98 L1685.03 1214.98 L1685.62 1214.98 L1686.2 1214.98 L1686.79 1214.98 L1687.37 1214.98 L1687.96 1214.98 L1688.55 1214.98 L1689.13 1214.98 L1689.72 1214.98 L1690.31 1214.98 L1690.89 1214.98 L1691.48 1214.98 L1692.07 1214.98 L1692.65 1214.98 L1693.24 1214.98 L1693.83 1214.98 L1694.41 1214.98 L1695 1214.98 L1695.58 1214.98 L1696.17 1214.98 L1696.76 1214.98 L1697.34 1214.98 L1697.93 1214.98 L1698.52 1214.98 L1699.1 1214.98 L1699.69 1214.98 L1700.28 1214.98 L1700.86 1214.98 L1701.45 1214.98 L1702.04 1214.98 L1702.62 1214.98 L1703.21 1214.98 L1703.79 1214.98 L1704.38 1214.98 L1704.97 1214.98 L1705.55 1214.98 L1706.14 1214.98 L1706.73 1214.98 L1707.31 1214.98 L1707.9 1214.98 L1708.49 1214.98 L1709.07 1214.98 L1709.66 1214.98 L1710.24 1214.98 L1710.83 1214.98 L1711.42 1214.98 L1712 1214.98 L1712.59 1214.98 L1713.18 1214.98 L1713.76 1214.98 L1714.35 1214.98 L1714.94 1214.98 L1715.52 1214.98 L1716.11 1214.98 L1716.7 1214.98 L1717.28 1214.98 L1717.87 1214.98 L1718.45 1214.98 L1719.04 1214.98 L1719.63 1214.98 L1720.21 1214.98 L1720.8 1214.98 L1721.39 1214.98 L1721.97 1214.98 L1722.56 1214.98 L1723.15 1214.98 L1723.73 1214.98 L1724.32 1214.98 L1724.91 1214.98 L1725.49 1214.98 L1726.08 1214.98 L1726.66 1214.98 L1727.25 1214.98 L1727.84 1214.98 L1728.42 1214.98 L1729.01 1214.98 L1729.6 1214.98 L1730.18 1214.98 L1730.77 1214.98 L1731.36 1214.98 L1731.94 1214.98 L1732.53 1214.98 L1733.11 1214.98 L1733.7 1214.98 L1734.29 1214.98 L1734.87 1214.98 L1735.46 1214.98 L1736.05 1214.98 L1736.63 1214.98 L1737.22 1214.98 L1737.81 1214.98 L1738.39 1214.98 L1738.98 1214.98 L1739.57 1214.98 L1740.15 1214.98 L1740.74 1214.98 L1741.32 1214.98 L1741.91 1214.98 L1742.5 1214.98 L1743.08 1214.98 L1743.67 1214.98 L1744.26 1214.98 L1744.84 1214.98 L1745.43 1214.98 L1746.02 1214.98 L1746.6 1214.98 L1747.19 1214.98 L1747.78 1214.98 L1748.36 1214.98 L1748.95 1214.98 L1749.53 1214.98 L1750.12 1214.98 L1750.71 1214.98 L1751.29 1214.98 L1751.88 1214.98 L1752.47 1214.98 L1753.05 1214.98 L1753.64 1214.98 L1754.23 1214.98 L1754.81 1214.98 L1755.4 1214.98 L1755.99 1214.98 L1756.57 1214.98 L1757.16 1214.98 L1757.74 1214.98 L1758.33 1214.98 L1758.92 1214.98 L1759.5 1214.98 L1760.09 1214.98 L1760.68 1214.98 L1761.26 1214.98 L1761.85 1214.98 L1762.44 1214.98 L1763.02 1214.98 L1763.61 1214.98 L1764.19 1214.98 L1764.78 1214.98 L1765.37 1214.98 L1765.95 1214.98 L1766.54 1214.98 L1767.13 1214.98 L1767.71 1214.98 L1768.3 1214.98 L1768.89 1214.98 L1769.47 1214.98 L1770.06 1214.98 L1770.65 1214.98 L1771.23 1214.98 L1771.82 1214.98 L1772.4 1214.98 L1772.99 1214.98 L1773.58 1214.98 L1774.16 1214.98 L1774.75 1214.98 L1775.34 1214.98 L1775.92 1214.98 L1776.51 1214.98 L1777.1 1214.98 L1777.68 1214.98 L1778.27 1214.98 L1778.86 1214.98 L1779.44 1214.98 L1780.03 1214.98 L1780.61 1214.98 L1781.2 1214.98 L1781.79 1214.98 L1782.37 1214.98 L1782.96 1214.98 L1783.55 1214.98 L1784.13 1214.98 L1784.72 1214.98 L1785.31 1214.98 L1785.89 1214.98 L1786.48 1214.98 L1787.06 1214.98 L1787.65 1214.98 L1788.24 1214.98 L1788.82 1214.98 L1789.41 1214.98 L1790 1214.98 L1790.58 1214.98 L1791.17 1214.98 L1791.76 1214.98 L1792.34 1214.98 L1792.93 1214.98 L1793.52 1214.98 L1794.1 1214.98 L1794.69 1214.98 L1795.27 1214.98 L1795.86 1214.98 L1796.45 1214.98 L1797.03 1214.98 L1797.62 1214.98 L1798.21 1214.98 L1798.79 1214.98 L1799.38 1214.98 L1799.97 1214.98 L1800.55 1214.98 L1801.14 1214.98 L1801.73 1214.98 L1802.31 1214.98 L1802.9 1214.98 L1803.48 1214.98 L1804.07 1214.98 L1804.66 1214.98 L1805.24 1214.98 L1805.83 1214.98 L1806.42 1214.98 L1807 1214.98 L1807.59 1214.98 L1808.18 1214.98 L1808.76 1214.98 L1809.35 1214.98 L1809.94 1214.98 L1810.52 1214.98 L1811.11 1214.98 L1811.69 1214.98 L1812.28 1214.98 L1812.87 1214.98 L1813.45 1214.98 L1814.04 1214.98 L1814.63 1214.98 L1815.21 1214.98 L1815.8 1214.98 L1816.39 1214.98 L1816.97 1214.98 L1817.56 1214.98 L1818.14 1214.98 L1818.73 1214.98 L1819.32 1214.98 L1819.9 1214.98 L1820.49 1214.98 L1821.08 1214.98 L1821.66 1214.98 L1822.25 1214.98 L1822.84 1214.98 L1823.42 1214.98 L1824.01 1214.98 L1824.6 1214.98 L1825.18 1214.98 L1825.77 1214.98 L1826.35 1214.98 L1826.94 1214.98 L1827.53 1214.98 L1828.11 1214.98 L1828.7 1214.98 L1829.29 1214.98 L1829.87 1214.98 L1830.46 1214.98 L1831.05 1214.98 L1831.63 1214.98 L1832.22 1214.98 L1832.81 1214.98 L1833.39 1214.98 L1833.98 1214.98 L1834.56 1214.98 L1835.15 1214.98 L1835.74 1214.98 L1836.32 1214.98 L1836.91 1214.98 L1837.5 1214.98 L1838.08 1214.98 L1838.67 1214.98 L1839.26 1214.98 L1839.84 1214.98 L1840.43 1214.98 L1841.01 1214.98 L1841.6 1214.98 L1842.19 1214.98 L1842.77 1214.98 L1843.36 1214.98 L1843.95 1214.98 L1844.53 1214.98 L1845.12 1214.98 L1845.71 1214.98 L1846.29 1214.98 L1846.88 1214.98 L1847.47 1214.98 L1848.05 1214.98 L1848.64 1214.98 L1849.22 1214.98 L1849.81 1214.98 L1850.4 1214.98 L1850.98 1214.98 L1851.57 1214.98 L1852.16 1214.98 L1852.74 1214.98 L1853.33 1214.98 L1853.92 1214.98 L1854.5 1214.98 L1855.09 1214.98 L1855.68 1214.98 L1856.26 1214.98 L1856.85 1214.98 L1857.43 1214.98 L1858.02 1214.98 L1858.61 1214.98 L1859.19 1214.98 L1859.78 1214.98 L1860.37 1214.98 L1860.95 1214.98 L1861.54 1214.98 L1862.13 1214.98 L1862.71 1214.98 L1863.3 1214.98 L1863.88 1214.98 L1864.47 1214.98 L1865.06 1214.98 L1865.64 1214.98 L1866.23 1214.98 L1866.82 1214.98 L1867.4 1214.98 L1867.99 1214.98 L1868.58 1214.98 L1869.16 1214.98 L1869.75 1214.98 L1870.34 1214.98 L1870.92 1214.98 L1871.51 1214.98 L1872.09 1214.98 L1872.68 1214.98 L1873.27 1214.98 L1873.85 1214.98 L1874.44 1214.98 L1875.03 1214.98 L1875.61 1214.98 L1876.2 1214.98 L1876.79 1214.98 L1877.37 1214.98 L1877.96 1214.98 L1878.55 1214.98 L1879.13 1214.98 L1879.72 1214.98 L1880.3 1214.98 L1880.89 1214.98 L1881.48 1214.98 L1882.06 1214.98 L1882.65 1214.98 L1883.24 1214.98 L1883.82 1214.98 L1884.41 1214.98 L1885 1214.98 L1885.58 1214.98 L1886.17 1214.98 L1886.76 1214.98 L1887.34 1214.98 L1887.93 1214.98 L1888.51 1214.98 L1889.1 1214.98 L1889.69 1214.98 L1890.27 1214.98 L1890.86 1214.98 L1891.45 1214.98 L1892.03 1214.98 L1892.62 1214.98 L1893.21 1214.98 L1893.79 1214.98 L1894.38 1214.98 L1894.96 1214.98 L1895.55 1214.98 L1896.14 1214.98 L1896.72 1214.98 L1897.31 1214.98 L1897.9 1214.98 L1898.48 1214.98 L1899.07 1214.98 L1899.66 1214.98 L1900.24 1214.98 L1900.83 1214.98 L1901.42 1214.98 L1902 1214.98 L1902.59 1214.98 L1903.17 1214.98 L1903.76 1214.98 L1904.35 1214.98 L1904.93 1214.98 L1905.52 1214.98 L1906.11 1214.98 L1906.69 1214.98 L1907.28 1214.98 L1907.87 1214.98 L1908.45 1214.98 L1909.04 1214.98 L1909.63 1214.98 L1910.21 1214.98 L1910.8 1214.98 L1911.38 1214.98 L1911.97 1214.98 L1912.56 1214.98 L1913.14 1214.98 L1913.73 1214.98 L1914.32 1214.98 L1914.9 1214.98 L1915.49 1214.98 L1916.08 1214.98 L1916.66 1214.98 L1917.25 1214.98 L1917.83 1214.98 L1918.42 1214.98 L1919.01 1214.98 L1919.59 1214.98 L1920.18 1214.98 L1920.77 1214.98 L1921.35 1214.98 L1921.94 1214.98 L1922.53 1214.98 L1923.11 1214.98 L1923.7 1214.98 L1924.29 1214.98 L1924.87 1214.98 L1925.46 1214.98 L1926.04 1214.98 L1926.63 1214.98 L1927.22 1214.98 L1927.8 1214.98 L1928.39 1214.98 L1928.98 1214.98 L1929.56 1214.98 L1930.15 1214.98 L1930.74 1214.98 L1931.32 1214.98 L1931.91 1214.98 L1932.5 1214.98 L1933.08 1214.98 L1933.67 1214.98 L1934.25 1214.98 L1934.84 1214.98 L1935.43 1214.98 L1936.01 1214.98 L1936.6 1214.98 L1937.19 1214.98 L1937.77 1214.98 L1938.36 1214.98 L1938.95 1214.98 L1939.53 1214.98 L1940.12 1214.98 L1940.71 1214.98 L1941.29 1214.98 L1941.88 1214.98 L1942.46 1214.98 L1943.05 1214.98 L1943.64 1214.98 L1944.22 1214.98 L1944.81 1214.98 L1945.4 1214.98 L1945.98 1214.98 L1946.57 1214.98 L1947.16 1214.98 L1947.74 1214.98 L1948.33 1214.98 L1948.91 1214.98 L1949.5 1214.98 L1950.09 1214.98 L1950.67 1214.98 L1951.26 1214.98 L1951.85 1214.98 L1952.43 1214.98 L1953.02 1214.98 L1953.61 1214.98 L1954.19 1214.98 L1954.78 1214.98 L1955.37 1214.98 L1955.95 1214.98 L1956.54 1214.98 L1957.12 1214.98 L1957.71 1214.98 L1958.3 1214.98 L1958.88 1214.98 L1959.47 1214.98 L1960.06 1214.98 L1960.64 1214.98 L1961.23 1214.98 L1961.82 1214.98 L1962.4 1214.98 L1962.99 1214.98 L1963.58 1214.98 L1964.16 1214.98 L1964.75 1214.98 L1965.33 1214.98 L1965.92 1214.98 L1966.51 1214.98 L1967.09 1214.98 L1967.68 1214.98 L1968.27 1214.98 L1968.85 1214.98 L1969.44 1214.98 L1970.03 1214.98 L1970.61 1214.98 L1971.2 1214.98 L1971.78 1214.98 L1972.37 1214.98 L1972.96 1214.98 L1973.54 1214.98 L1974.13 1214.98 L1974.72 1214.98 L1975.3 1214.98 L1975.89 1214.98 L1976.48 1214.98 L1977.06 1214.98 L1977.65 1214.98 L1978.24 1214.98 L1978.82 1214.98 L1979.41 1214.98 L1979.99 1214.98 L1980.58 1214.98 L1981.17 1214.98 L1981.75 1214.98 L1982.34 1214.98 L1982.93 1214.98 L1983.51 1214.98 L1984.1 1214.98 L1984.69 1214.98 L1985.27 1214.98 L1985.86 1214.98 L1986.45 1214.98 L1987.03 1214.98 L1987.62 1214.98 L1988.2 1214.98 L1988.79 1214.98 L1989.38 1214.98 L1989.96 1214.98 L1990.55 1214.98 L1991.14 1214.98 L1991.72 1214.98 L1992.31 1214.98 L1992.9 1214.98 L1993.48 1214.98 L1994.07 1214.98 L1994.65 1214.98 L1995.24 1214.98 L1995.83 1214.98 L1996.41 1214.98 L1997 1214.98 L1997.59 1214.98 L1998.17 1214.98 L1998.76 1214.98 L1999.35 1214.98 L1999.93 1214.98 L2000.52 1214.98 L2001.11 1214.98 L2001.69 1214.98 L2002.28 1214.98 L2002.86 1214.98 L2003.45 1214.98 L2004.04 1214.98 L2004.62 1214.98 L2005.21 1214.98 L2005.8 1214.98 L2006.38 1214.98 L2006.97 1214.98 L2007.56 1214.98 L2008.14 1214.98 L2008.73 1214.98 L2009.32 1214.98 L2009.9 1214.98 L2010.49 1214.98 L2011.07 1214.98 L2011.66 1214.98 L2012.25 1214.98 L2012.83 1214.98 L2013.42 1214.98 L2014.01 1214.98 L2014.59 1214.98 L2015.18 1214.98 L2015.77 1214.98 L2016.35 1214.98 L2016.94 1214.98 L2017.53 1214.98 L2018.11 1214.98 L2018.7 1214.98 L2019.28 1214.98 L2019.87 1214.98 L2020.46 1214.98 L2021.04 1214.98 L2021.63 1214.98 L2022.22 1214.98 L2022.8 1214.98 L2023.39 1214.98 L2023.98 1214.98 L2024.56 1214.98 L2025.15 1214.98 L2025.73 1214.98 L2026.32 1214.98 L2026.91 1214.98 L2027.49 1214.98 L2028.08 1214.98 L2028.67 1214.98 L2029.25 1214.98 L2029.84 1214.98 L2030.43 1214.98 L2031.01 1214.98 L2031.6 1214.98 L2032.19 1214.98 L2032.77 1214.98 L2033.36 1214.98 L2033.94 1214.98 L2034.53 1214.98 L2035.12 1214.98 L2035.7 1214.98 L2036.29 1214.98 L2036.88 1214.98 L2037.46 1214.98 L2038.05 1214.98 L2038.64 1214.98 L2039.22 1214.98 L2039.81 1214.98 L2040.4 1214.98 L2040.98 1214.98 L2041.57 1214.98 L2042.15 1214.98 L2042.74 1214.98 L2043.33 1214.98 L2043.91 1214.98 L2044.5 1214.98 L2045.09 1214.98 L2045.67 1214.98 L2046.26 1214.98 L2046.85 1214.98 L2047.43 1214.98 L2048.02 1214.98 L2048.6 1214.98 L2049.19 1214.98 L2049.78 1214.98 L2050.36 1214.98 L2050.95 1214.98 L2051.54 1214.98 L2052.12 1214.98 L2052.71 1214.98 L2053.3 1214.98 L2053.88 1214.98 L2054.47 1214.98 L2055.06 1214.98 L2055.64 1214.98 L2056.23 1214.98 L2056.81 1214.98 L2057.4 1214.98 L2057.99 1214.98 L2058.57 1214.98 L2059.16 1214.98 L2059.75 1214.98 L2060.33 1214.98 L2060.92 1214.98 L2061.51 1214.98 L2062.09 1214.98 L2062.68 1214.98 L2063.27 1214.98 L2063.85 1214.98 L2064.44 1214.98 L2065.02 1214.98 L2065.61 1214.98 L2066.2 1214.98 L2066.78 1214.98 L2067.37 1214.98 L2067.96 1214.98 L2068.54 1214.98 L2069.13 1214.98 L2069.72 1214.98 L2070.3 1214.98 L2070.89 1214.98 L2071.48 1214.98 L2072.06 1214.98 L2072.65 1214.98 L2073.23 1214.98 L2073.82 1214.98 L2074.41 1214.98 L2074.99 1214.98 L2075.58 1214.98 L2076.17 1214.98 L2076.75 1214.98 L2077.34 1214.98 L2077.93 1214.98 L2078.51 1214.98 L2079.1 1214.98 L2079.68 1214.98 L2080.27 1214.98 L2080.86 1214.98 L2081.44 1214.98 L2082.03 1214.98 L2082.62 1214.98 L2083.2 1214.98 L2083.79 1214.98 L2084.38 1214.98 L2084.96 1214.98 L2085.55 1214.98 L2086.14 1214.98 L2086.72 1214.98 L2087.31 1214.98 L2087.89 1214.98 L2088.48 1214.98 L2089.07 1214.98 L2089.65 1214.98 L2090.24 1214.98 L2090.83 1214.98 L2091.41 1214.98 L2092 1214.98 L2092.59 1214.98 L2093.17 1214.98 L2093.76 1214.98 L2094.35 1214.98 L2094.93 1214.98 L2095.52 1214.98 L2096.1 1214.98 L2096.69 1214.98 L2097.28 1214.98 L2097.86 1214.98 L2098.45 1214.98 L2099.04 1214.98 L2099.62 1214.98 L2100.21 1214.98 L2100.8 1214.98 L2101.38 1214.98 L2101.97 1214.98 L2102.55 1214.98 L2103.14 1214.98 L2103.73 1214.98 L2104.31 1214.98 L2104.9 1214.98 L2105.49 1214.98 L2106.07 1214.98 L2106.66 1214.98 L2107.25 1214.98 L2107.83 1214.98 L2108.42 1214.98 L2109.01 1214.98 L2109.59 1214.98 L2110.18 1214.98 L2110.76 1214.98 L2111.35 1214.98 L2111.94 1214.98 L2112.52 1214.98 L2113.11 1214.98 L2113.7 1214.98 L2114.28 1214.98 L2114.87 1214.98 L2115.46 1214.98 L2116.04 1214.98 L2116.63 1214.98 L2117.22 1214.98 L2117.8 1214.98 L2118.39 1214.98 L2118.97 1214.98 L2119.56 1214.98 L2120.15 1214.98 L2120.73 1214.98 L2121.32 1214.98 L2121.91 1214.98 L2122.49 1214.98 L2123.08 1214.98 L2123.67 1214.98 L2124.25 1214.98 L2124.84 1214.98 L2125.42 1214.98 L2126.01 1214.98 L2126.6 1214.98 L2127.18 1214.98 L2127.77 1214.98 L2128.36 1214.98 L2128.94 1214.98 L2129.53 1214.98 L2130.12 1214.98 L2130.7 1214.98 L2131.29 1214.98 L2131.88 1214.98 L2132.46 1214.98 L2133.05 1214.98 L2133.63 1214.98 L2134.22 1214.98 L2134.81 1214.98 L2135.39 1214.98 L2135.98 1214.98 L2136.57 1214.98 L2137.15 1214.98 L2137.74 1214.98 L2138.33 1214.98 L2138.91 1214.98 L2139.5 1214.98 L2140.09 1214.98 L2140.67 1214.98 L2141.26 1214.98 L2141.84 1214.98 L2142.43 1214.98 L2143.02 1214.98 L2143.6 1214.98 L2144.19 1214.98 L2144.78 1214.98 L2145.36 1214.98 L2145.95 1214.98 L2146.54 1214.98 L2147.12 1214.98 L2147.71 1214.98 L2148.3 1214.98 L2148.88 1214.98 L2149.47 1214.98 L2150.05 1214.98 L2150.64 1214.98 L2151.23 1214.98 L2151.81 1214.98 L2152.4 1214.98 L2152.99 1214.98 L2153.57 1214.98 L2154.16 1214.98 L2154.75 1214.98 L2155.33 1214.98 L2155.92 1214.98 L2156.5 1214.98 L2157.09 1214.98 L2157.68 1214.98 L2158.26 1214.98 L2158.26 1214.82 L2157.68 1214.82 L2157.09 1214.82 L2156.5 1214.82 L2155.92 1214.82 L2155.33 1214.82 L2154.75 1214.82 L2154.16 1214.82 L2153.57 1214.82 L2152.99 1214.82 L2152.4 1214.82 L2151.81 1214.82 L2151.23 1214.82 L2150.64 1214.82 L2150.05 1214.82 L2149.47 1214.82 L2148.88 1214.82 L2148.3 1214.82 L2147.71 1214.82 L2147.12 1214.82 L2146.54 1214.82 L2145.95 1214.82 L2145.36 1214.82 L2144.78 1214.82 L2144.19 1214.82 L2143.6 1214.82 L2143.02 1214.82 L2142.43 1214.82 L2141.84 1214.82 L2141.26 1214.82 L2140.67 1214.82 L2140.09 1214.82 L2139.5 1214.82 L2138.91 1214.82 L2138.33 1214.82 L2137.74 1214.82 L2137.15 1214.82 L2136.57 1214.82 L2135.98 1214.82 L2135.39 1214.82 L2134.81 1214.82 L2134.22 1214.82 L2133.63 1214.82 L2133.05 1214.82 L2132.46 1214.82 L2131.88 1214.82 L2131.29 1214.82 L2130.7 1214.82 L2130.12 1214.82 L2129.53 1214.82 L2128.94 1214.82 L2128.36 1214.82 L2127.77 1214.82 L2127.18 1214.82 L2126.6 1214.82 L2126.01 1214.82 L2125.42 1214.82 L2124.84 1214.82 L2124.25 1214.82 L2123.67 1214.82 L2123.08 1214.82 L2122.49 1214.82 L2121.91 1214.82 L2121.32 1214.82 L2120.73 1214.82 L2120.15 1214.82 L2119.56 1214.82 L2118.97 1214.82 L2118.39 1214.82 L2117.8 1214.82 L2117.22 1214.82 L2116.63 1214.82 L2116.04 1214.82 L2115.46 1214.82 L2114.87 1214.82 L2114.28 1214.82 L2113.7 1214.82 L2113.11 1214.82 L2112.52 1214.82 L2111.94 1214.82 L2111.35 1214.82 L2110.76 1214.82 L2110.18 1214.82 L2109.59 1214.82 L2109.01 1214.82 L2108.42 1214.82 L2107.83 1214.82 L2107.25 1214.82 L2106.66 1214.82 L2106.07 1214.82 L2105.49 1214.82 L2104.9 1214.82 L2104.31 1214.82 L2103.73 1214.82 L2103.14 1214.82 L2102.55 1214.82 L2101.97 1214.82 L2101.38 1214.82 L2100.8 1214.82 L2100.21 1214.82 L2099.62 1214.82 L2099.04 1214.82 L2098.45 1214.82 L2097.86 1214.82 L2097.28 1214.82 L2096.69 1214.82 L2096.1 1214.82 L2095.52 1214.82 L2094.93 1214.82 L2094.35 1214.82 L2093.76 1214.82 L2093.17 1214.82 L2092.59 1214.82 L2092 1214.82 L2091.41 1214.82 L2090.83 1214.82 L2090.24 1214.82 L2089.65 1214.82 L2089.07 1214.82 L2088.48 1214.82 L2087.89 1214.82 L2087.31 1214.82 L2086.72 1214.82 L2086.14 1214.82 L2085.55 1214.82 L2084.96 1214.82 L2084.38 1214.82 L2083.79 1214.82 L2083.2 1214.82 L2082.62 1214.82 L2082.03 1214.82 L2081.44 1214.82 L2080.86 1214.82 L2080.27 1214.82 L2079.68 1214.82 L2079.1 1214.82 L2078.51 1214.82 L2077.93 1214.82 L2077.34 1214.82 L2076.75 1214.82 L2076.17 1214.82 L2075.58 1214.82 L2074.99 1214.82 L2074.41 1214.82 L2073.82 1214.82 L2073.23 1214.82 L2072.65 1214.82 L2072.06 1214.82 L2071.48 1214.82 L2070.89 1214.82 L2070.3 1214.82 L2069.72 1214.82 L2069.13 1214.82 L2068.54 1214.82 L2067.96 1214.82 L2067.37 1214.82 L2066.78 1214.82 L2066.2 1214.82 L2065.61 1214.82 L2065.02 1214.82 L2064.44 1214.82 L2063.85 1214.82 L2063.27 1214.82 L2062.68 1214.82 L2062.09 1214.82 L2061.51 1214.82 L2060.92 1214.82 L2060.33 1214.82 L2059.75 1214.82 L2059.16 1214.82 L2058.57 1214.82 L2057.99 1214.82 L2057.4 1214.82 L2056.81 1214.82 L2056.23 1214.82 L2055.64 1214.82 L2055.06 1214.82 L2054.47 1214.82 L2053.88 1214.82 L2053.3 1214.82 L2052.71 1214.82 L2052.12 1214.82 L2051.54 1214.82 L2050.95 1214.82 L2050.36 1214.82 L2049.78 1214.82 L2049.19 1214.82 L2048.6 1214.82 L2048.02 1214.82 L2047.43 1214.82 L2046.85 1214.82 L2046.26 1214.82 L2045.67 1214.82 L2045.09 1214.82 L2044.5 1214.82 L2043.91 1214.82 L2043.33 1214.82 L2042.74 1214.82 L2042.15 1214.82 L2041.57 1214.82 L2040.98 1214.82 L2040.4 1214.82 L2039.81 1214.82 L2039.22 1214.82 L2038.64 1214.82 L2038.05 1214.82 L2037.46 1214.82 L2036.88 1214.82 L2036.29 1214.82 L2035.7 1214.82 L2035.12 1214.82 L2034.53 1214.82 L2033.94 1214.82 L2033.36 1214.82 L2032.77 1214.82 L2032.19 1214.82 L2031.6 1214.82 L2031.01 1214.82 L2030.43 1214.82 L2029.84 1214.82 L2029.25 1214.82 L2028.67 1214.82 L2028.08 1214.82 L2027.49 1214.82 L2026.91 1214.82 L2026.32 1214.82 L2025.73 1214.82 L2025.15 1214.82 L2024.56 1214.82 L2023.98 1214.82 L2023.39 1214.82 L2022.8 1214.82 L2022.22 1214.82 L2021.63 1214.82 L2021.04 1214.82 L2020.46 1214.82 L2019.87 1214.82 L2019.28 1214.82 L2018.7 1214.82 L2018.11 1214.82 L2017.53 1214.82 L2016.94 1214.82 L2016.35 1214.82 L2015.77 1214.82 L2015.18 1214.82 L2014.59 1214.82 L2014.01 1214.82 L2013.42 1214.82 L2012.83 1214.82 L2012.25 1214.82 L2011.66 1214.82 L2011.07 1214.82 L2010.49 1214.82 L2009.9 1214.82 L2009.32 1214.82 L2008.73 1214.82 L2008.14 1214.82 L2007.56 1214.82 L2006.97 1214.82 L2006.38 1214.82 L2005.8 1214.82 L2005.21 1214.82 L2004.62 1214.82 L2004.04 1214.82 L2003.45 1214.82 L2002.86 1214.82 L2002.28 1214.82 L2001.69 1214.82 L2001.11 1214.82 L2000.52 1214.82 L1999.93 1214.82 L1999.35 1214.82 L1998.76 1214.82 L1998.17 1214.82 L1997.59 1214.82 L1997 1214.82 L1996.41 1214.82 L1995.83 1214.82 L1995.24 1214.82 L1994.65 1214.82 L1994.07 1214.82 L1993.48 1214.82 L1992.9 1214.82 L1992.31 1214.82 L1991.72 1214.82 L1991.14 1214.82 L1990.55 1214.82 L1989.96 1214.82 L1989.38 1214.82 L1988.79 1214.82 L1988.2 1214.82 L1987.62 1214.82 L1987.03 1214.82 L1986.45 1214.82 L1985.86 1214.82 L1985.27 1214.82 L1984.69 1214.82 L1984.1 1214.82 L1983.51 1214.82 L1982.93 1214.82 L1982.34 1214.82 L1981.75 1214.82 L1981.17 1214.82 L1980.58 1214.82 L1979.99 1214.82 L1979.41 1214.82 L1978.82 1214.82 L1978.24 1214.82 L1977.65 1214.82 L1977.06 1214.82 L1976.48 1214.82 L1975.89 1214.82 L1975.3 1214.82 L1974.72 1214.82 L1974.13 1214.82 L1973.54 1214.82 L1972.96 1214.82 L1972.37 1214.82 L1971.78 1214.82 L1971.2 1214.82 L1970.61 1214.82 L1970.03 1214.82 L1969.44 1214.82 L1968.85 1214.82 L1968.27 1214.82 L1967.68 1214.82 L1967.09 1214.82 L1966.51 1214.82 L1965.92 1214.82 L1965.33 1214.82 L1964.75 1214.82 L1964.16 1214.82 L1963.58 1214.82 L1962.99 1214.82 L1962.4 1214.82 L1961.82 1214.82 L1961.23 1214.82 L1960.64 1214.82 L1960.06 1214.82 L1959.47 1214.82 L1958.88 1214.82 L1958.3 1214.82 L1957.71 1214.82 L1957.12 1214.82 L1956.54 1214.82 L1955.95 1214.82 L1955.37 1214.82 L1954.78 1214.82 L1954.19 1214.82 L1953.61 1214.82 L1953.02 1214.82 L1952.43 1214.82 L1951.85 1214.82 L1951.26 1214.82 L1950.67 1214.82 L1950.09 1214.82 L1949.5 1214.82 L1948.91 1214.82 L1948.33 1214.82 L1947.74 1214.82 L1947.16 1214.82 L1946.57 1214.82 L1945.98 1214.82 L1945.4 1214.82 L1944.81 1214.82 L1944.22 1214.82 L1943.64 1214.82 L1943.05 1214.82 L1942.46 1214.82 L1941.88 1214.82 L1941.29 1214.82 L1940.71 1214.82 L1940.12 1214.82 L1939.53 1214.82 L1938.95 1214.82 L1938.36 1214.82 L1937.77 1214.82 L1937.19 1214.82 L1936.6 1214.82 L1936.01 1214.82 L1935.43 1214.82 L1934.84 1214.82 L1934.25 1214.82 L1933.67 1214.82 L1933.08 1214.82 L1932.5 1214.82 L1931.91 1214.82 L1931.32 1214.82 L1930.74 1214.82 L1930.15 1214.82 L1929.56 1214.82 L1928.98 1214.82 L1928.39 1214.82 L1927.8 1214.82 L1927.22 1214.82 L1926.63 1214.82 L1926.04 1214.82 L1925.46 1214.82 L1924.87 1214.82 L1924.29 1214.82 L1923.7 1214.82 L1923.11 1214.82 L1922.53 1214.82 L1921.94 1214.82 L1921.35 1214.82 L1920.77 1214.82 L1920.18 1214.82 L1919.59 1214.82 L1919.01 1214.82 L1918.42 1214.82 L1917.83 1214.82 L1917.25 1214.82 L1916.66 1214.82 L1916.08 1214.82 L1915.49 1214.82 L1914.9 1214.82 L1914.32 1214.82 L1913.73 1214.82 L1913.14 1214.82 L1912.56 1214.82 L1911.97 1214.82 L1911.38 1214.82 L1910.8 1214.82 L1910.21 1214.82 L1909.63 1214.82 L1909.04 1214.82 L1908.45 1214.82 L1907.87 1214.82 L1907.28 1214.82 L1906.69 1214.82 L1906.11 1214.82 L1905.52 1214.82 L1904.93 1214.82 L1904.35 1214.82 L1903.76 1214.82 L1903.17 1214.82 L1902.59 1214.82 L1902 1214.82 L1901.42 1214.82 L1900.83 1214.82 L1900.24 1214.82 L1899.66 1214.82 L1899.07 1214.82 L1898.48 1214.82 L1897.9 1214.82 L1897.31 1214.82 L1896.72 1214.82 L1896.14 1214.82 L1895.55 1214.82 L1894.96 1214.82 L1894.38 1214.82 L1893.79 1214.82 L1893.21 1214.82 L1892.62 1214.82 L1892.03 1214.82 L1891.45 1214.82 L1890.86 1214.82 L1890.27 1214.82 L1889.69 1214.82 L1889.1 1214.82 L1888.51 1214.82 L1887.93 1214.82 L1887.34 1214.82 L1886.76 1214.82 L1886.17 1214.82 L1885.58 1214.82 L1885 1214.82 L1884.41 1214.82 L1883.82 1214.82 L1883.24 1214.82 L1882.65 1214.82 L1882.06 1214.82 L1881.48 1214.82 L1880.89 1214.82 L1880.3 1214.82 L1879.72 1214.82 L1879.13 1214.82 L1878.55 1214.82 L1877.96 1214.82 L1877.37 1214.82 L1876.79 1214.82 L1876.2 1214.82 L1875.61 1214.82 L1875.03 1214.82 L1874.44 1214.82 L1873.85 1214.82 L1873.27 1214.82 L1872.68 1214.82 L1872.09 1214.82 L1871.51 1214.82 L1870.92 1214.82 L1870.34 1214.82 L1869.75 1214.82 L1869.16 1214.82 L1868.58 1214.82 L1867.99 1214.82 L1867.4 1214.82 L1866.82 1214.82 L1866.23 1214.82 L1865.64 1214.82 L1865.06 1214.82 L1864.47 1214.82 L1863.88 1214.82 L1863.3 1214.82 L1862.71 1214.82 L1862.13 1214.82 L1861.54 1214.82 L1860.95 1214.82 L1860.37 1214.82 L1859.78 1214.82 L1859.19 1214.82 L1858.61 1214.82 L1858.02 1214.82 L1857.43 1214.82 L1856.85 1214.82 L1856.26 1214.82 L1855.68 1214.82 L1855.09 1214.82 L1854.5 1214.82 L1853.92 1214.82 L1853.33 1214.82 L1852.74 1214.82 L1852.16 1214.82 L1851.57 1214.82 L1850.98 1214.82 L1850.4 1214.82 L1849.81 1214.82 L1849.22 1214.82 L1848.64 1214.82 L1848.05 1214.82 L1847.47 1214.82 L1846.88 1214.82 L1846.29 1214.82 L1845.71 1214.82 L1845.12 1214.82 L1844.53 1214.82 L1843.95 1214.82 L1843.36 1214.82 L1842.77 1214.82 L1842.19 1214.82 L1841.6 1214.82 L1841.01 1214.82 L1840.43 1214.82 L1839.84 1214.82 L1839.26 1214.82 L1838.67 1214.82 L1838.08 1214.82 L1837.5 1214.82 L1836.91 1214.82 L1836.32 1214.82 L1835.74 1214.82 L1835.15 1214.82 L1834.56 1214.82 L1833.98 1214.82 L1833.39 1214.82 L1832.81 1214.82 L1832.22 1214.82 L1831.63 1214.82 L1831.05 1214.82 L1830.46 1214.82 L1829.87 1214.82 L1829.29 1214.82 L1828.7 1214.82 L1828.11 1214.82 L1827.53 1214.82 L1826.94 1214.82 L1826.35 1214.82 L1825.77 1214.82 L1825.18 1214.82 L1824.6 1214.82 L1824.01 1214.82 L1823.42 1214.82 L1822.84 1214.82 L1822.25 1214.82 L1821.66 1214.82 L1821.08 1214.82 L1820.49 1214.82 L1819.9 1214.82 L1819.32 1214.82 L1818.73 1214.82 L1818.14 1214.82 L1817.56 1214.82 L1816.97 1214.82 L1816.39 1214.82 L1815.8 1214.82 L1815.21 1214.82 L1814.63 1214.82 L1814.04 1214.82 L1813.45 1214.82 L1812.87 1214.82 L1812.28 1214.82 L1811.69 1214.82 L1811.11 1214.82 L1810.52 1214.82 L1809.94 1214.82 L1809.35 1214.82 L1808.76 1214.82 L1808.18 1214.82 L1807.59 1214.82 L1807 1214.82 L1806.42 1214.82 L1805.83 1214.82 L1805.24 1214.82 L1804.66 1214.82 L1804.07 1214.82 L1803.48 1214.82 L1802.9 1214.82 L1802.31 1214.82 L1801.73 1214.82 L1801.14 1214.82 L1800.55 1214.82 L1799.97 1214.82 L1799.38 1214.82 L1798.79 1214.82 L1798.21 1214.82 L1797.62 1214.82 L1797.03 1214.82 L1796.45 1214.82 L1795.86 1214.82 L1795.27 1214.82 L1794.69 1214.82 L1794.1 1214.82 L1793.52 1214.82 L1792.93 1214.82 L1792.34 1214.82 L1791.76 1214.82 L1791.17 1214.82 L1790.58 1214.82 L1790 1214.82 L1789.41 1214.82 L1788.82 1214.82 L1788.24 1214.82 L1787.65 1214.82 L1787.06 1214.82 L1786.48 1214.82 L1785.89 1214.82 L1785.31 1214.82 L1784.72 1214.82 L1784.13 1214.82 L1783.55 1214.82 L1782.96 1214.82 L1782.37 1214.82 L1781.79 1214.82 L1781.2 1214.82 L1780.61 1214.82 L1780.03 1214.82 L1779.44 1214.82 L1778.86 1214.82 L1778.27 1214.82 L1777.68 1214.82 L1777.1 1214.82 L1776.51 1214.82 L1775.92 1214.82 L1775.34 1214.82 L1774.75 1214.82 L1774.16 1214.82 L1773.58 1214.82 L1772.99 1214.82 L1772.4 1214.82 L1771.82 1214.82 L1771.23 1214.82 L1770.65 1214.82 L1770.06 1214.82 L1769.47 1214.82 L1768.89 1214.82 L1768.3 1214.82 L1767.71 1214.82 L1767.13 1214.82 L1766.54 1214.82 L1765.95 1214.82 L1765.37 1214.82 L1764.78 1214.82 L1764.19 1214.82 L1763.61 1214.82 L1763.02 1214.82 L1762.44 1214.82 L1761.85 1214.82 L1761.26 1214.82 L1760.68 1214.82 L1760.09 1214.82 L1759.5 1214.82 L1758.92 1214.82 L1758.33 1214.82 L1757.74 1214.82 L1757.16 1214.82 L1756.57 1214.82 L1755.99 1214.82 L1755.4 1214.82 L1754.81 1214.82 L1754.23 1214.82 L1753.64 1214.82 L1753.05 1214.82 L1752.47 1214.82 L1751.88 1214.82 L1751.29 1214.82 L1750.71 1214.82 L1750.12 1214.82 L1749.53 1214.82 L1748.95 1214.82 L1748.36 1214.82 L1747.78 1214.82 L1747.19 1214.82 L1746.6 1214.82 L1746.02 1214.82 L1745.43 1214.82 L1744.84 1214.82 L1744.26 1214.82 L1743.67 1214.82 L1743.08 1214.82 L1742.5 1214.82 L1741.91 1214.82 L1741.32 1214.82 L1740.74 1214.82 L1740.15 1214.82 L1739.57 1214.82 L1738.98 1214.82 L1738.39 1214.82 L1737.81 1214.82 L1737.22 1214.82 L1736.63 1214.82 L1736.05 1214.82 L1735.46 1214.82 L1734.87 1214.82 L1734.29 1214.82 L1733.7 1214.82 L1733.11 1214.82 L1732.53 1214.82 L1731.94 1214.82 L1731.36 1214.82 L1730.77 1214.82 L1730.18 1214.82 L1729.6 1214.82 L1729.01 1214.82 L1728.42 1214.82 L1727.84 1214.82 L1727.25 1214.82 L1726.66 1214.82 L1726.08 1214.82 L1725.49 1214.82 L1724.91 1214.82 L1724.32 1214.82 L1723.73 1214.82 L1723.15 1214.82 L1722.56 1214.82 L1721.97 1214.82 L1721.39 1214.82 L1720.8 1214.82 L1720.21 1214.82 L1719.63 1214.82 L1719.04 1214.82 L1718.45 1214.82 L1717.87 1214.82 L1717.28 1214.82 L1716.7 1214.82 L1716.11 1214.82 L1715.52 1214.82 L1714.94 1214.82 L1714.35 1214.82 L1713.76 1214.82 L1713.18 1214.82 L1712.59 1214.82 L1712 1214.82 L1711.42 1214.82 L1710.83 1214.82 L1710.24 1214.82 L1709.66 1214.82 L1709.07 1214.82 L1708.49 1214.82 L1707.9 1214.82 L1707.31 1214.82 L1706.73 1214.82 L1706.14 1214.82 L1705.55 1214.82 L1704.97 1214.82 L1704.38 1214.82 L1703.79 1214.82 L1703.21 1214.82 L1702.62 1214.82 L1702.04 1214.82 L1701.45 1214.82 L1700.86 1214.82 L1700.28 1214.82 L1699.69 1214.82 L1699.1 1214.82 L1698.52 1214.82 L1697.93 1214.82 L1697.34 1214.82 L1696.76 1214.82 L1696.17 1214.82 L1695.58 1214.82 L1695 1214.82 L1694.41 1214.82 L1693.83 1214.82 L1693.24 1214.82 L1692.65 1214.82 L1692.07 1214.82 L1691.48 1214.82 L1690.89 1214.82 L1690.31 1214.82 L1689.72 1214.82 L1689.13 1214.82 L1688.55 1214.82 L1687.96 1214.82 L1687.37 1214.82 L1686.79 1214.82 L1686.2 1214.82 L1685.62 1214.82 L1685.03 1214.82 L1684.44 1214.82 L1683.86 1214.82 L1683.27 1214.82 L1682.68 1214.82 L1682.1 1214.82 L1681.51 1214.82 L1680.92 1214.82 L1680.34 1214.82 L1679.75 1214.82 L1679.17 1214.82 L1678.58 1214.82 L1677.99 1214.82 L1677.41 1214.82 L1676.82 1214.82 L1676.23 1214.82 L1675.65 1214.82 L1675.06 1214.82 L1674.47 1214.82 L1673.89 1214.82 L1673.3 1214.82 L1672.71 1214.82 L1672.13 1214.82 L1671.54 1214.82 L1670.96 1214.82 L1670.37 1214.82 L1669.78 1214.82 L1669.2 1214.82 L1668.61 1214.82 L1668.02 1214.82 L1667.44 1214.82 L1666.85 1214.82 L1666.26 1214.82 L1665.68 1214.82 L1665.09 1214.82 L1664.5 1214.82 L1663.92 1214.82 L1663.33 1214.82 L1662.75 1214.82 L1662.16 1214.82 L1661.57 1214.82 L1660.99 1214.82 L1660.4 1214.82 L1659.81 1214.82 L1659.23 1214.82 L1658.64 1214.82 L1658.05 1214.82 L1657.47 1214.82 L1656.88 1214.82 L1656.29 1214.82 L1655.71 1214.82 L1655.12 1214.82 L1654.54 1214.82 L1653.95 1214.82 L1653.36 1214.82 L1652.78 1214.82 L1652.19 1214.82 L1651.6 1214.82 L1651.02 1214.82 L1650.43 1214.82 L1649.84 1214.82 L1649.26 1214.82 L1648.67 1214.82 L1648.09 1214.82 L1647.5 1214.82 L1646.91 1214.82 L1646.33 1214.82 L1645.74 1214.82 L1645.15 1214.82 L1644.57 1214.82 L1643.98 1214.82 L1643.39 1214.82 L1642.81 1214.82 L1642.22 1214.82 L1641.63 1214.82 L1641.05 1214.82 L1640.46 1214.82 L1639.88 1214.82 L1639.29 1214.82 L1638.7 1214.82 L1638.12 1214.82 L1637.53 1214.82 L1636.94 1214.82 L1636.36 1214.82 L1635.77 1214.82 L1635.18 1214.82 L1634.6 1214.82 L1634.01 1214.82 L1633.42 1214.82 L1632.84 1214.82 L1632.25 1214.82 L1631.67 1214.82 L1631.08 1214.82 L1630.49 1214.82 L1629.91 1214.82 L1629.32 1214.82 L1628.73 1214.82 L1628.15 1214.82 L1627.56 1214.82 L1626.97 1214.82 L1626.39 1214.82 L1625.8 1214.82 L1625.22 1214.82 L1624.63 1214.82 L1624.04 1214.82 L1623.46 1214.82 L1622.87 1214.82 L1622.28 1214.82 L1621.7 1214.82 L1621.11 1214.82 L1620.52 1214.82 L1619.94 1214.82 L1619.35 1214.82 L1618.76 1214.82 L1618.18 1214.82 L1617.59 1214.82 L1617.01 1214.82 L1616.42 1214.82 L1615.83 1214.82 L1615.25 1214.82 L1614.66 1214.82 L1614.07 1214.82 L1613.49 1214.82 L1612.9 1214.82 L1612.31 1214.82 L1611.73 1214.82 L1611.14 1214.82 L1610.55 1214.82 L1609.97 1214.82 L1609.38 1214.82 L1608.8 1214.82 L1608.21 1214.82 L1607.62 1214.82 L1607.04 1214.82 L1606.45 1214.82 L1605.86 1214.82 L1605.28 1214.82 L1604.69 1214.82 L1604.1 1214.82 L1603.52 1214.82 L1602.93 1214.82 L1602.34 1214.82 L1601.76 1214.82 L1601.17 1214.82 L1600.59 1214.82 L1600 1214.82 L1599.41 1214.82 L1598.83 1214.82 L1598.24 1214.82 L1597.65 1214.82 L1597.07 1214.82 L1596.48 1214.82 L1595.89 1214.82 L1595.31 1214.82 L1594.72 1214.82 L1594.14 1214.82 L1593.55 1214.82 L1592.96 1214.82 L1592.38 1214.82 L1591.79 1214.82 L1591.2 1214.82 L1590.62 1214.82 L1590.03 1214.82 L1589.44 1214.82 L1588.86 1214.82 L1588.27 1214.82 L1587.68 1214.82 L1587.1 1214.82 L1586.51 1214.82 L1585.93 1214.82 L1585.34 1214.82 L1584.75 1214.82 L1584.17 1214.82 L1583.58 1214.82 L1582.99 1214.82 L1582.41 1214.82 L1581.82 1214.82 L1581.23 1214.82 L1580.65 1214.82 L1580.06 1214.82 L1579.47 1214.82 L1578.89 1214.82 L1578.3 1214.82 L1577.72 1214.82 L1577.13 1214.82 L1576.54 1214.82 L1575.96 1214.82 L1575.37 1214.82 L1574.78 1214.82 L1574.2 1214.82 L1573.61 1214.82 L1573.02 1214.82 L1572.44 1214.82 L1571.85 1214.82 L1571.27 1214.82 L1570.68 1214.82 L1570.09 1214.82 L1569.51 1214.82 L1568.92 1214.82 L1568.33 1214.82 L1567.75 1214.82 L1567.16 1214.82 L1566.57 1214.82 L1565.99 1214.82 L1565.4 1214.82 L1564.81 1214.82 L1564.23 1214.82 L1563.64 1214.82 L1563.06 1214.82 L1562.47 1214.82 L1561.88 1214.82 L1561.3 1214.82 L1560.71 1214.82 L1560.12 1214.82 L1559.54 1214.82 L1558.95 1214.82 L1558.36 1214.82 L1557.78 1214.82 L1557.19 1214.82 L1556.6 1214.82 L1556.02 1214.82 L1555.43 1214.82 L1554.85 1214.82 L1554.26 1214.82 L1553.67 1214.82 L1553.09 1214.82 L1552.5 1214.82 L1551.91 1214.82 L1551.33 1214.82 L1550.74 1214.82 L1550.15 1214.82 L1549.57 1214.82 L1548.98 1214.82 L1548.4 1214.82 L1547.81 1214.82 L1547.22 1214.82 L1546.64 1214.82 L1546.05 1214.82 L1545.46 1214.82 L1544.88 1214.82 L1544.29 1214.82 L1543.7 1214.82 L1543.12 1214.82 L1542.53 1214.82 L1541.94 1214.82 L1541.36 1214.82 L1540.77 1214.82 L1540.19 1214.82 L1539.6 1214.82 L1539.01 1214.82 L1538.43 1214.82 L1537.84 1214.82 L1537.25 1214.82 L1536.67 1214.82 L1536.08 1214.82 L1535.49 1214.82 L1534.91 1214.82 L1534.32 1214.82 L1533.73 1214.82 L1533.15 1214.82 L1532.56 1214.82 L1531.98 1214.82 L1531.39 1214.82 L1530.8 1214.82 L1530.22 1214.82 L1529.63 1214.82 L1529.04 1214.82 L1528.46 1214.82 L1527.87 1214.82 L1527.28 1214.82 L1526.7 1214.82 L1526.11 1214.82 L1525.52 1214.82 L1524.94 1214.82 L1524.35 1214.82 L1523.77 1214.82 L1523.18 1214.82 L1522.59 1214.82 L1522.01 1214.82 L1521.42 1214.82 L1520.83 1214.82 L1520.25 1214.82 L1519.66 1214.82 L1519.07 1214.82 L1518.49 1214.82 L1517.9 1214.82 L1517.32 1214.82 L1516.73 1214.82 L1516.14 1214.82 L1515.56 1214.82 L1514.97 1214.82 L1514.38 1214.82 L1513.8 1214.82 L1513.21 1214.82 L1512.62 1214.82 L1512.04 1214.82 L1511.45 1214.82 L1510.86 1214.82 L1510.28 1214.82 L1509.69 1214.82 L1509.11 1214.82 L1508.52 1214.82 L1507.93 1214.82 L1507.35 1214.82 L1506.76 1214.82 L1506.17 1214.82 L1505.59 1214.82 L1505 1214.82 L1504.41 1214.82 L1503.83 1214.82 L1503.24 1214.82 L1502.65 1214.82 L1502.07 1214.82 L1501.48 1214.82 L1500.9 1214.82 L1500.31 1214.82 L1499.72 1214.82 L1499.14 1214.82 L1498.55 1214.82 L1497.96 1214.82 L1497.38 1214.82 L1496.79 1214.82 L1496.2 1214.82 L1495.62 1214.82 L1495.03 1214.82 L1494.45 1214.82 L1493.86 1214.82 L1493.27 1214.82 L1492.69 1214.82 L1492.1 1214.82 L1491.51 1214.82 L1490.93 1214.82 L1490.34 1214.82 L1489.75 1214.82 L1489.17 1214.82 L1488.58 1214.82 L1487.99 1214.82 L1487.41 1214.82 L1486.82 1214.82 L1486.24 1214.82 L1485.65 1214.82 L1485.06 1214.82 L1484.48 1214.82 L1483.89 1214.82 L1483.3 1214.82 L1482.72 1214.82 L1482.13 1214.82 L1481.54 1214.82 L1480.96 1214.82 L1480.37 1214.82 L1479.78 1214.82 L1479.2 1214.82 L1478.61 1214.82 L1478.03 1214.82 L1477.44 1214.82 L1476.85 1214.82 L1476.27 1214.82 L1475.68 1214.82 L1475.09 1214.82 L1474.51 1214.82 L1473.92 1214.82 L1473.33 1214.82 L1472.75 1214.82 L1472.16 1214.82 L1471.57 1214.82 L1470.99 1214.82 L1470.4 1214.82 L1469.82 1214.82 L1469.23 1214.82 L1468.64 1214.82 L1468.06 1214.82 L1467.47 1214.82 L1466.88 1214.82 L1466.3 1214.82 L1465.71 1214.82 L1465.12 1214.82 L1464.54 1214.82 L1463.95 1214.82 L1463.37 1214.82 L1462.78 1214.82 L1462.19 1214.82 L1461.61 1214.82 L1461.02 1214.82 L1460.43 1214.82 L1459.85 1214.82 L1459.26 1214.82 L1458.67 1214.82 L1458.09 1214.82 L1457.5 1214.82 L1456.91 1214.82 L1456.33 1214.82 L1455.74 1214.82 L1455.16 1214.82 L1454.57 1214.82 L1453.98 1214.82 L1453.4 1214.82 L1452.81 1214.82 L1452.22 1214.82 L1451.64 1214.82 L1451.05 1214.82 L1450.46 1214.82 L1449.88 1214.82 L1449.29 1214.82 L1448.7 1214.82 L1448.12 1214.82 L1447.53 1214.82 L1446.95 1214.82 L1446.36 1214.82 L1445.77 1214.82 L1445.19 1214.82 L1444.6 1214.82 L1444.01 1214.82 L1443.43 1214.82 L1442.84 1214.82 L1442.25 1214.82 L1441.67 1214.82 L1441.08 1214.82 L1440.5 1214.82 L1439.91 1214.82 L1439.32 1214.82 L1438.74 1214.82 L1438.15 1214.82 L1437.56 1214.82 L1436.98 1214.82 L1436.39 1214.82 L1435.8 1214.82 L1435.22 1214.82 L1434.63 1214.82 L1434.04 1214.82 L1433.46 1214.82 L1432.87 1214.82 L1432.29 1214.82 L1431.7 1214.82 L1431.11 1214.82 L1430.53 1214.82 L1429.94 1214.82 L1429.35 1214.82 L1428.77 1214.82 L1428.18 1214.82 L1427.59 1214.82 L1427.01 1214.82 L1426.42 1214.82 L1425.83 1214.82 L1425.25 1214.82 L1424.66 1214.82 L1424.08 1214.82 L1423.49 1214.82 L1422.9 1214.82 L1422.32 1214.82 L1421.73 1214.82 L1421.14 1214.82 L1420.56 1214.82 L1419.97 1214.82 L1419.38 1214.82 L1418.8 1214.82 L1418.21 1214.82 L1417.63 1214.82 L1417.04 1214.82 L1416.45 1214.82 L1415.87 1214.82 L1415.28 1214.82 L1414.69 1214.82 L1414.11 1214.82 L1413.52 1214.82 L1412.93 1214.82 L1412.35 1214.82 L1411.76 1214.82 L1411.17 1214.82 L1410.59 1214.82 L1410 1214.82 L1409.42 1214.82 L1408.83 1214.82 L1408.24 1214.82 L1407.66 1214.82 L1407.07 1214.82 L1406.48 1214.82 L1405.9 1214.82 L1405.31 1214.82 L1404.72 1214.82 L1404.14 1214.82 L1403.55 1214.82 L1402.96 1214.82 L1402.38 1214.82 L1401.79 1214.82 L1401.21 1214.82 L1400.62 1214.82 L1400.03 1214.82 L1399.45 1214.82 L1398.86 1214.82 L1398.27 1214.82 L1397.69 1214.82 L1397.1 1214.82 L1396.51 1214.82 L1395.93 1214.82 L1395.34 1214.82 L1394.75 1214.82 L1394.17 1214.82 L1393.58 1214.82 L1393 1214.82 L1392.41 1214.82 L1391.82 1214.82 L1391.24 1214.82 L1390.65 1214.82 L1390.06 1214.82 L1389.48 1214.82 L1388.89 1214.82 L1388.3 1214.82 L1387.72 1214.82 L1387.13 1214.82 L1386.55 1214.82 L1385.96 1214.82 L1385.37 1214.82 L1384.79 1214.82 L1384.2 1214.82 L1383.61 1214.82 L1383.03 1214.82 L1382.44 1214.82 L1381.85 1214.82 L1381.27 1214.82 L1380.68 1214.82 L1380.09 1214.82 L1379.51 1214.82 L1378.92 1214.82 L1378.34 1214.82 L1377.75 1214.82 L1377.16 1214.82 L1376.58 1214.82 L1375.99 1214.82 L1375.4 1214.82 L1374.82 1214.82 L1374.23 1214.82 L1373.64 1214.82 L1373.06 1214.82 L1372.47 1214.82 L1371.88 1214.82 L1371.3 1214.82 L1370.71 1214.82 L1370.13 1214.82 L1369.54 1214.82 L1368.95 1214.82 L1368.37 1214.82 L1367.78 1214.82 L1367.19 1214.82 L1366.61 1214.82 L1366.02 1214.82 L1365.43 1214.82 L1364.85 1214.82 L1364.26 1214.82 L1363.68 1214.82 L1363.09 1214.82 L1362.5 1214.82 L1361.92 1214.82 L1361.33 1214.82 L1360.74 1214.82 L1360.16 1214.82 L1359.57 1214.82 L1358.98 1214.82 L1358.4 1214.82 L1357.81 1214.82 L1357.22 1214.82 L1356.64 1214.82 L1356.05 1214.82 L1355.47 1214.82 L1354.88 1214.82 L1354.29 1214.82 L1353.71 1214.82 L1353.12 1214.82 L1352.53 1214.82 L1351.95 1214.82 L1351.36 1214.82 L1350.77 1214.82 L1350.19 1214.82 L1349.6 1214.82 L1349.01 1214.82 L1348.43 1214.82 L1347.84 1214.82 L1347.26 1214.82 L1346.67 1214.82 L1346.08 1214.82 L1345.5 1214.82 L1344.91 1214.82 L1344.32 1214.82 L1343.74 1214.82 L1343.15 1214.82 L1342.56 1214.82 L1341.98 1214.82 L1341.39 1214.82 L1340.8 1214.82 L1340.22 1214.82 L1339.63 1214.82 L1339.05 1214.82 L1338.46 1214.82 L1337.87 1214.82 L1337.29 1214.82 L1336.7 1214.82 L1336.11 1214.82 L1335.53 1214.82 L1334.94 1214.82 L1334.35 1214.82 L1333.77 1214.82 L1333.18 1214.82 L1332.6 1214.82 L1332.01 1214.82 L1331.42 1214.82 L1330.84 1214.82 L1330.25 1214.82 L1329.66 1214.82 L1329.08 1214.82 L1328.49 1214.82 L1327.9 1214.82 L1327.32 1214.82 L1326.73 1214.82 L1326.14 1214.82 L1325.56 1214.82 L1324.97 1214.82 L1324.39 1214.82 L1323.8 1214.82 L1323.21 1214.82 L1322.63 1214.82 L1322.04 1214.82 L1321.45 1214.82 L1320.87 1214.82 L1320.28 1214.82 L1319.69 1214.82 L1319.11 1214.82 L1318.52 1214.82 L1317.93 1214.82 L1317.35 1214.82 L1316.76 1214.82 L1316.18 1214.82 L1315.59 1214.82 L1315 1214.82 L1314.42 1214.82 L1313.83 1214.82 L1313.24 1214.82 L1312.66 1214.82 L1312.07 1214.82 L1311.48 1214.82 L1310.9 1214.82 L1310.31 1214.82 L1309.73 1214.82 L1309.14 1214.82 L1308.55 1214.82 L1307.97 1214.82 L1307.38 1214.82 L1306.79 1214.82 L1306.21 1214.82 L1305.62 1214.82 L1305.03 1214.82 L1304.45 1214.82 L1303.86 1214.82 L1303.27 1214.82 L1302.69 1214.82 L1302.1 1214.82 L1301.52 1214.82 L1300.93 1214.82 L1300.34 1214.82 L1299.76 1214.82 L1299.17 1214.82 L1298.58 1214.82 L1298 1214.82 L1297.41 1214.82 L1296.82 1214.82 L1296.24 1214.82 L1295.65 1214.82 L1295.06 1214.82 L1294.48 1214.82 L1293.89 1214.82 L1293.31 1214.82 L1292.72 1214.82 L1292.13 1214.82 L1291.55 1214.82 L1290.96 1214.82 L1290.37 1214.82 L1289.79 1214.82 L1289.2 1214.82 L1288.61 1214.82 L1288.03 1214.82 L1287.44 1214.82 L1286.86 1214.82 L1286.27 1214.82 L1285.68 1214.82 L1285.1 1214.82 L1284.51 1214.82 L1283.92 1214.82 L1283.34 1214.82 L1282.75 1214.82 L1282.16 1214.82 L1281.58 1214.82 L1280.99 1214.82 L1280.4 1214.82 L1279.82 1214.82 L1279.23 1214.82 L1278.65 1214.82 L1278.06 1214.82 L1277.47 1214.82 L1276.89 1214.82 L1276.3 1214.82 L1275.71 1214.82 L1275.13 1214.82 L1274.54 1214.82 L1273.95 1214.82 L1273.37 1214.82 L1272.78 1214.82 L1272.19 1214.82 L1271.61 1214.82 L1271.02 1214.82 L1270.44 1214.82 L1269.85 1214.82 L1269.26 1214.82 L1268.68 1214.82 L1268.09 1214.82 L1267.5 1214.82 L1266.92 1214.82 L1266.33 1214.82 L1265.74 1214.82 L1265.16 1214.82 L1264.57 1214.82 L1263.98 1214.82 L1263.4 1214.82 L1262.81 1214.82 L1262.23 1214.82 L1261.64 1214.82 L1261.05 1214.82 L1260.47 1214.82 L1259.88 1214.82 L1259.29 1214.82 L1258.71 1214.82 L1258.12 1214.82 L1257.53 1214.82 L1256.95 1214.82 L1256.36 1214.82 L1255.78 1214.82 L1255.19 1214.82 L1254.6 1214.82 L1254.02 1214.82 L1253.43 1214.82 L1252.84 1214.82 L1252.26 1214.82 L1251.67 1214.82 L1251.08 1214.82 L1250.5 1214.82 L1249.91 1214.82 L1249.32 1214.82 L1248.74 1214.82 L1248.15 1214.82 L1247.57 1214.82 L1246.98 1214.82 L1246.39 1214.82 L1245.81 1214.82 L1245.22 1214.82 L1244.63 1214.82 L1244.05 1214.82 L1243.46 1214.82 L1242.87 1214.82 L1242.29 1214.82 L1241.7 1214.82 L1241.11 1214.82 L1240.53 1214.82 L1239.94 1214.82 L1239.36 1214.82 L1238.77 1214.82 L1238.18 1214.82 L1237.6 1214.82 L1237.01 1214.82 L1236.42 1214.82 L1235.84 1214.82 L1235.25 1214.82 L1234.66 1214.82 L1234.08 1214.82 L1233.49 1214.82 L1232.91 1214.82 L1232.32 1214.82 L1231.73 1214.82 L1231.15 1214.82 L1230.56 1214.82 L1229.97 1214.82 L1229.39 1214.82 L1228.8 1214.82 L1228.21 1214.82 L1227.63 1214.82 L1227.04 1214.82 L1226.45 1214.82 L1225.87 1214.82 L1225.28 1214.82 L1224.7 1214.82 L1224.11 1214.82 L1223.52 1214.82 L1222.94 1214.82 L1222.35 1214.82 L1221.76 1214.82 L1221.18 1214.82 L1220.59 1214.82 L1220 1214.82 L1219.42 1214.82 L1218.83 1214.82 L1218.24 1214.82 L1217.66 1214.82 L1217.07 1214.82 L1216.49 1214.82 L1215.9 1214.82 L1215.31 1214.82 L1214.73 1214.82 L1214.14 1214.82 L1213.55 1214.82 L1212.97 1214.82 L1212.38 1214.82 L1211.79 1214.82 L1211.21 1214.82 L1210.62 1214.82 L1210.03 1214.82 L1209.45 1214.82 L1208.86 1214.82 L1208.28 1214.82 L1207.69 1214.82 L1207.1 1214.82 L1206.52 1214.82 L1205.93 1214.82 L1205.34 1214.82 L1204.76 1214.82 L1204.17 1214.82 L1203.58 1214.82 L1203 1214.82 L1202.41 1214.82 L1201.83 1214.82 L1201.24 1214.82 L1200.65 1214.82 L1200.07 1214.82 L1199.48 1214.82 L1198.89 1214.82 L1198.31 1214.82 L1197.72 1214.82 L1197.13 1214.82 L1196.55 1214.82 L1195.96 1214.82 L1195.37 1214.82 L1194.79 1214.82 L1194.2 1214.82 L1193.62 1214.82 L1193.03 1214.82 L1192.44 1214.82 L1191.86 1214.82 L1191.27 1214.82 L1190.68 1214.82 L1190.1 1214.82 L1189.51 1214.82 L1188.92 1214.82 L1188.34 1214.82 L1187.75 1214.82 L1187.16 1214.82 L1186.58 1214.82 L1185.99 1214.82 L1185.41 1214.82 L1184.82 1214.82 L1184.23 1214.82 L1183.65 1214.82 L1183.06 1214.82 L1182.47 1214.82 L1181.89 1214.82 L1181.3 1214.82 L1180.71 1214.82 L1180.13 1214.82 L1179.54 1214.82 L1178.96 1214.82 L1178.37 1214.82 L1177.78 1214.82 L1177.2 1214.82 L1176.61 1214.82 L1176.02 1214.82 L1175.44 1214.82 L1174.85 1214.82 L1174.26 1214.82 L1173.68 1214.82 L1173.09 1214.82 L1172.5 1214.82 L1171.92 1214.82 L1171.33 1214.82 L1170.75 1214.82 L1170.16 1214.82 L1169.57 1214.82 L1168.99 1214.82 L1168.4 1214.82 L1167.81 1214.82 L1167.23 1214.82 L1166.64 1214.82 L1166.05 1214.82 L1165.47 1214.82 L1164.88 1214.82 L1164.29 1214.82 L1163.71 1214.82 L1163.12 1214.82 L1162.54 1214.82 L1161.95 1214.82 L1161.36 1214.82 L1160.78 1214.82 L1160.19 1214.82 L1159.6 1214.82 L1159.02 1214.82 L1158.43 1214.82 L1157.84 1214.82 L1157.26 1214.82 L1156.67 1214.82 L1156.09 1214.82 L1155.5 1214.82 L1154.91 1214.82 L1154.33 1214.82 L1153.74 1214.82 L1153.15 1214.82 L1152.57 1214.82 L1151.98 1214.82 L1151.39 1214.82 L1150.81 1214.82 L1150.22 1214.82 L1149.63 1214.82 L1149.05 1214.82 L1148.46 1214.82 L1147.88 1214.82 L1147.29 1214.82 L1146.7 1214.82 L1146.12 1214.82 L1145.53 1214.82 L1144.94 1214.82 L1144.36 1214.82 L1143.77 1214.82 L1143.18 1214.82 L1142.6 1214.82 L1142.01 1214.82 L1141.42 1214.82 L1140.84 1214.82 L1140.25 1214.82 L1139.67 1214.82 L1139.08 1214.82 L1138.49 1214.82 L1137.91 1214.82 L1137.32 1214.82 L1136.73 1214.82 L1136.15 1214.82 L1135.56 1214.82 L1134.97 1214.82 L1134.39 1214.82 L1133.8 1214.82 L1133.21 1214.82 L1132.63 1214.82 L1132.04 1214.82 L1131.46 1214.82 L1130.87 1214.82 L1130.28 1214.82 L1129.7 1214.82 L1129.11 1214.82 L1128.52 1214.82 L1127.94 1214.82 L1127.35 1214.82 L1126.76 1214.82 L1126.18 1214.82 L1125.59 1214.82 L1125.01 1214.82 L1124.42 1214.82 L1123.83 1214.82 L1123.25 1214.82 L1122.66 1214.82 L1122.07 1214.82 L1121.49 1214.82 L1120.9 1214.82 L1120.31 1214.82 L1119.73 1214.82 L1119.14 1214.82 L1118.55 1214.82 L1117.97 1214.82 L1117.38 1214.82 L1116.8 1214.82 L1116.21 1214.82 L1115.62 1214.82 L1115.04 1214.82 L1114.45 1214.82 L1113.86 1214.82 L1113.28 1214.82 L1112.69 1214.82 L1112.1 1214.82 L1111.52 1214.82 L1110.93 1214.82 L1110.34 1214.82 L1109.76 1214.82 L1109.17 1214.82 L1108.59 1214.82 L1108 1214.82 L1107.41 1214.82 L1106.83 1214.82 L1106.24 1214.82 L1105.65 1214.82 L1105.07 1214.82 L1104.48 1214.82 L1103.89 1214.82 L1103.31 1214.82 L1102.72 1214.82 L1102.14 1214.82 L1101.55 1214.82 L1100.96 1214.82 L1100.38 1214.82 L1099.79 1214.82 L1099.2 1214.82 L1098.62 1214.82 L1098.03 1214.82 L1097.44 1214.82 L1096.86 1214.82 L1096.27 1214.82 L1095.68 1214.82 L1095.1 1214.82 L1094.51 1214.82 L1093.93 1214.82 L1093.34 1214.82 L1092.75 1214.82 L1092.17 1214.82 L1091.58 1214.82 L1090.99 1214.82 L1090.41 1214.82 L1089.82 1214.82 L1089.23 1214.82 L1088.65 1214.82 L1088.06 1214.82 L1087.47 1214.82 L1086.89 1214.82 L1086.3 1214.82 L1085.72 1214.82 L1085.13 1214.82 L1084.54 1214.82 L1083.96 1214.82 L1083.37 1214.82 L1082.78 1214.82 L1082.2 1214.82 L1081.61 1214.82 L1081.02 1214.82 L1080.44 1214.82 L1079.85 1214.82 L1079.26 1214.82 L1078.68 1214.82 L1078.09 1214.82 L1077.51 1214.82 L1076.92 1214.82 L1076.33 1214.82 L1075.75 1214.82 L1075.16 1214.82 L1074.57 1214.82 L1073.99 1214.82 L1073.4 1214.82 L1072.81 1214.82 L1072.23 1214.82 L1071.64 1214.82 L1071.06 1214.82 L1070.47 1214.82 L1069.88 1214.82 L1069.3 1214.82 L1068.71 1214.82 L1068.12 1214.82 L1067.54 1214.82 L1066.95 1214.82 L1066.36 1214.82 L1065.78 1214.82 L1065.19 1214.82 L1064.6 1214.82 L1064.02 1214.82 L1063.43 1214.82 L1062.85 1214.82 L1062.26 1214.82 L1061.67 1214.82 L1061.09 1214.82 L1060.5 1214.82 L1059.91 1214.82 L1059.33 1214.82 L1058.74 1214.82 L1058.15 1214.82 L1057.57 1214.82 L1056.98 1214.82 L1056.39 1214.82 L1055.81 1214.82 L1055.22 1214.82 L1054.64 1214.82 L1054.05 1214.82 L1053.46 1214.82 L1052.88 1214.82 L1052.29 1214.82 L1051.7 1214.82 L1051.12 1214.82 L1050.53 1214.82 L1049.94 1214.82 L1049.36 1214.82 L1048.77 1214.82 L1048.19 1214.82 L1047.6 1214.82 L1047.01 1214.82 L1046.43 1214.82 L1045.84 1214.82 L1045.25 1214.82 L1044.67 1214.82 L1044.08 1214.82 L1043.49 1214.82 L1042.91 1214.82 L1042.32 1214.82 L1041.73 1214.82 L1041.15 1214.82 L1040.56 1214.82 L1039.98 1214.82 L1039.39 1214.82 L1038.8 1214.82 L1038.22 1214.82 L1037.63 1214.82 L1037.04 1214.82 L1036.46 1214.82 L1035.87 1214.82 L1035.28 1214.82 L1034.7 1214.82 L1034.11 1214.82 L1033.52 1214.82 L1032.94 1214.82 L1032.35 1214.82 L1031.77 1214.82 L1031.18 1214.82 L1030.59 1214.82 L1030.01 1214.82 L1029.42 1214.82 L1028.83 1214.82 L1028.25 1214.82 L1027.66 1214.82 L1027.07 1214.82 L1026.49 1214.82 L1025.9 1214.82 L1025.32 1214.82 L1024.73 1214.82 L1024.14 1214.82 L1023.56 1214.82 L1022.97 1214.82 L1022.38 1214.82 L1021.8 1214.82 L1021.21 1214.82 L1020.62 1214.82 L1020.04 1214.82 L1019.45 1214.82 L1018.86 1214.82 L1018.28 1214.82 L1017.69 1214.82 L1017.11 1214.82 L1016.52 1214.82 L1015.93 1214.82 L1015.35 1214.82 L1014.76 1214.82 L1014.17 1214.82 L1013.59 1214.82 L1013 1214.82 L1012.41 1214.82 L1011.83 1214.82 L1011.24 1214.82 L1010.65 1214.82 L1010.07 1214.82 L1009.48 1214.82 L1008.9 1214.82 L1008.31 1214.82 L1007.72 1214.82 L1007.14 1214.82 L1006.55 1214.82 L1005.96 1214.82 L1005.38 1214.82 L1004.79 1214.82 L1004.2 1214.82 L1003.62 1214.82 L1003.03 1214.82 L1002.44 1214.82 L1001.86 1214.82 L1001.27 1214.82 L1000.69 1214.82 L1000.1 1214.82 L999.513 1214.82 L998.926 1214.82 L998.34 1214.82 L997.754 1214.82 L997.167 1214.82 L996.581 1214.82 L995.994 1214.82 L995.408 1214.82 L994.822 1214.82 L994.235 1214.82 L993.649 1214.82 L993.062 1214.82 L992.476 1214.82 L991.889 1214.82 L991.303 1214.82 L990.717 1214.82 L990.13 1214.82 L989.544 1214.82 L988.957 1214.82 L988.371 1214.82 L987.785 1214.82 L987.198 1214.82 L986.612 1214.82 L986.025 1214.82  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.9 986.612,1214.9 987.198,1214.9 987.785,1214.9 988.371,1214.9 988.957,1214.9 989.544,1214.9 990.13,1214.9 990.717,1214.9 991.303,1214.9 991.889,1214.9 992.476,1214.9 993.062,1214.9 993.649,1214.9 994.235,1214.9 994.822,1214.9 995.408,1214.9 995.994,1214.9 996.581,1214.9 997.167,1214.9 997.754,1214.9 998.34,1214.9 998.926,1214.9 999.513,1214.9 1000.1,1214.9 1000.69,1214.9 1001.27,1214.9 1001.86,1214.9 1002.44,1214.9 1003.03,1214.9 1003.62,1214.9 1004.2,1214.9 1004.79,1214.9 1005.38,1214.9 1005.96,1214.9 1006.55,1214.9 1007.14,1214.9 1007.72,1214.9 1008.31,1214.9 1008.9,1214.9 1009.48,1214.9 1010.07,1214.9 1010.65,1214.9 1011.24,1214.9 1011.83,1214.9 1012.41,1214.9 1013,1214.9 1013.59,1214.9 1014.17,1214.9 1014.76,1214.9 1015.35,1214.9 1015.93,1214.9 1016.52,1214.9 1017.11,1214.9 1017.69,1214.9 1018.28,1214.9 1018.86,1214.9 1019.45,1214.9 1020.04,1214.9 1020.62,1214.9 1021.21,1214.9 1021.8,1214.9 1022.38,1214.9 1022.97,1214.9 1023.56,1214.9 1024.14,1214.9 1024.73,1214.9 1025.32,1214.9 1025.9,1214.9 1026.49,1214.9 1027.07,1214.9 1027.66,1214.9 1028.25,1214.9 1028.83,1214.9 1029.42,1214.9 1030.01,1214.9 1030.59,1214.9 1031.18,1214.9 1031.77,1214.9 1032.35,1214.9 1032.94,1214.9 1033.52,1214.9 1034.11,1214.9 1034.7,1214.9 1035.28,1214.9 1035.87,1214.9 1036.46,1214.9 1037.04,1214.9 1037.63,1214.9 1038.22,1214.9 1038.8,1214.9 1039.39,1214.9 1039.98,1214.9 1040.56,1214.9 1041.15,1214.9 1041.73,1214.9 1042.32,1214.9 1042.91,1214.9 1043.49,1214.9 1044.08,1214.9 1044.67,1214.9 1045.25,1214.9 1045.84,1214.9 1046.43,1214.9 1047.01,1214.9 1047.6,1214.9 1048.19,1214.9 1048.77,1214.9 1049.36,1214.9 1049.94,1214.9 1050.53,1214.9 1051.12,1214.9 1051.7,1214.9 1052.29,1214.9 1052.88,1214.9 1053.46,1214.9 1054.05,1214.9 1054.64,1214.9 1055.22,1214.9 1055.81,1214.9 1056.39,1214.9 1056.98,1214.9 1057.57,1214.9 1058.15,1214.9 1058.74,1214.9 1059.33,1214.9 1059.91,1214.9 1060.5,1214.9 1061.09,1214.9 1061.67,1214.9 1062.26,1214.9 1062.85,1214.9 1063.43,1214.9 1064.02,1214.9 1064.6,1214.9 1065.19,1214.9 1065.78,1214.9 1066.36,1214.9 1066.95,1214.9 1067.54,1214.9 1068.12,1214.9 1068.71,1214.9 1069.3,1214.9 1069.88,1214.9 1070.47,1214.9 1071.06,1214.9 1071.64,1214.9 1072.23,1214.9 1072.81,1214.9 1073.4,1214.9 1073.99,1214.9 1074.57,1214.9 1075.16,1214.9 1075.75,1214.9 1076.33,1214.9 1076.92,1214.9 1077.51,1214.9 1078.09,1214.9 1078.68,1214.9 1079.26,1214.9 1079.85,1214.9 1080.44,1214.9 1081.02,1214.9 1081.61,1214.9 1082.2,1214.9 1082.78,1214.9 1083.37,1214.9 1083.96,1214.9 1084.54,1214.9 1085.13,1214.9 1085.72,1214.9 1086.3,1214.9 1086.89,1214.9 1087.47,1214.9 1088.06,1214.9 1088.65,1214.9 1089.23,1214.9 1089.82,1214.9 1090.41,1214.9 1090.99,1214.9 1091.58,1214.9 1092.17,1214.9 1092.75,1214.9 1093.34,1214.9 1093.93,1214.9 1094.51,1214.9 1095.1,1214.9 1095.68,1214.9 1096.27,1214.9 1096.86,1214.9 1097.44,1214.9 1098.03,1214.9 1098.62,1214.9 1099.2,1214.9 1099.79,1214.9 1100.38,1214.9 1100.96,1214.9 1101.55,1214.9 1102.14,1214.9 1102.72,1214.9 1103.31,1214.9 1103.89,1214.9 1104.48,1214.9 1105.07,1214.9 1105.65,1214.9 1106.24,1214.9 1106.83,1214.9 1107.41,1214.9 1108,1214.9 1108.59,1214.9 1109.17,1214.9 1109.76,1214.9 1110.34,1214.9 1110.93,1214.9 1111.52,1214.9 1112.1,1214.9 1112.69,1214.9 1113.28,1214.9 1113.86,1214.9 1114.45,1214.9 1115.04,1214.9 1115.62,1214.9 1116.21,1214.9 1116.8,1214.9 1117.38,1214.9 1117.97,1214.9 1118.55,1214.9 1119.14,1214.9 1119.73,1214.9 1120.31,1214.9 1120.9,1214.9 1121.49,1214.9 1122.07,1214.9 1122.66,1214.9 1123.25,1214.9 1123.83,1214.9 1124.42,1214.9 1125.01,1214.9 1125.59,1214.9 1126.18,1214.9 1126.76,1214.9 1127.35,1214.9 1127.94,1214.9 1128.52,1214.9 1129.11,1214.9 1129.7,1214.9 1130.28,1214.9 1130.87,1214.9 1131.46,1214.9 1132.04,1214.9 1132.63,1214.9 1133.21,1214.9 1133.8,1214.9 1134.39,1214.9 1134.97,1214.9 1135.56,1214.9 1136.15,1214.9 1136.73,1214.9 1137.32,1214.9 1137.91,1214.9 1138.49,1214.9 1139.08,1214.9 1139.67,1214.9 1140.25,1214.9 1140.84,1214.9 1141.42,1214.9 1142.01,1214.9 1142.6,1214.9 1143.18,1214.9 1143.77,1214.9 1144.36,1214.9 1144.94,1214.9 1145.53,1214.9 1146.12,1214.9 1146.7,1214.9 1147.29,1214.9 1147.88,1214.9 1148.46,1214.9 1149.05,1214.9 1149.63,1214.9 1150.22,1214.9 1150.81,1214.9 1151.39,1214.9 1151.98,1214.9 1152.57,1214.9 1153.15,1214.9 1153.74,1214.9 1154.33,1214.9 1154.91,1214.9 1155.5,1214.9 1156.09,1214.9 1156.67,1214.9 1157.26,1214.9 1157.84,1214.9 1158.43,1214.9 1159.02,1214.9 1159.6,1214.9 1160.19,1214.9 1160.78,1214.9 1161.36,1214.9 1161.95,1214.9 1162.54,1214.9 1163.12,1214.9 1163.71,1214.9 1164.29,1214.9 1164.88,1214.9 1165.47,1214.9 1166.05,1214.9 1166.64,1214.9 1167.23,1214.9 1167.81,1214.9 1168.4,1214.9 1168.99,1214.9 1169.57,1214.9 1170.16,1214.9 1170.75,1214.9 1171.33,1214.9 1171.92,1214.9 1172.5,1214.9 1173.09,1214.9 1173.68,1214.9 1174.26,1214.9 1174.85,1214.9 1175.44,1214.9 1176.02,1214.9 1176.61,1214.9 1177.2,1214.9 1177.78,1214.9 1178.37,1214.9 1178.96,1214.9 1179.54,1214.9 1180.13,1214.9 1180.71,1214.9 1181.3,1214.9 1181.89,1214.9 1182.47,1214.9 1183.06,1214.9 1183.65,1214.9 1184.23,1214.9 1184.82,1214.9 1185.41,1214.9 1185.99,1214.9 1186.58,1214.9 1187.16,1214.9 1187.75,1214.9 1188.34,1214.9 1188.92,1214.9 1189.51,1214.9 1190.1,1214.9 1190.68,1214.9 1191.27,1214.9 1191.86,1214.9 1192.44,1214.9 1193.03,1214.9 1193.62,1214.9 1194.2,1214.9 1194.79,1214.9 1195.37,1214.9 1195.96,1214.9 1196.55,1214.9 1197.13,1214.9 1197.72,1214.9 1198.31,1214.9 1198.89,1214.9 1199.48,1214.9 1200.07,1214.9 1200.65,1214.9 1201.24,1214.9 1201.83,1214.9 1202.41,1214.9 1203,1214.9 1203.58,1214.9 1204.17,1214.9 1204.76,1214.9 1205.34,1214.9 1205.93,1214.9 1206.52,1214.9 1207.1,1214.9 1207.69,1214.9 1208.28,1214.9 1208.86,1214.9 1209.45,1214.9 1210.03,1214.9 1210.62,1214.9 1211.21,1214.9 1211.79,1214.9 1212.38,1214.9 1212.97,1214.9 1213.55,1214.9 1214.14,1214.9 1214.73,1214.9 1215.31,1214.9 1215.9,1214.9 1216.49,1214.9 1217.07,1214.9 1217.66,1214.9 1218.24,1214.9 1218.83,1214.9 1219.42,1214.9 1220,1214.9 1220.59,1214.9 1221.18,1214.9 1221.76,1214.9 1222.35,1214.9 1222.94,1214.9 1223.52,1214.9 1224.11,1214.9 1224.7,1214.9 1225.28,1214.9 1225.87,1214.9 1226.45,1214.9 1227.04,1214.9 1227.63,1214.9 1228.21,1214.9 1228.8,1214.9 1229.39,1214.9 1229.97,1214.9 1230.56,1214.9 1231.15,1214.9 1231.73,1214.9 1232.32,1214.9 1232.91,1214.9 1233.49,1214.9 1234.08,1214.9 1234.66,1214.9 1235.25,1214.9 1235.84,1214.9 1236.42,1214.9 1237.01,1214.9 1237.6,1214.9 1238.18,1214.9 1238.77,1214.9 1239.36,1214.9 1239.94,1214.9 1240.53,1214.9 1241.11,1214.9 1241.7,1214.9 1242.29,1214.9 1242.87,1214.9 1243.46,1214.9 1244.05,1214.9 1244.63,1214.9 1245.22,1214.9 1245.81,1214.9 1246.39,1214.9 1246.98,1214.9 1247.57,1214.9 1248.15,1214.9 1248.74,1214.9 1249.32,1214.9 1249.91,1214.9 1250.5,1214.9 1251.08,1214.9 1251.67,1214.9 1252.26,1214.9 1252.84,1214.9 1253.43,1214.9 1254.02,1214.9 1254.6,1214.9 1255.19,1214.9 1255.78,1214.9 1256.36,1214.9 1256.95,1214.9 1257.53,1214.9 1258.12,1214.9 1258.71,1214.9 1259.29,1214.9 1259.88,1214.9 1260.47,1214.9 1261.05,1214.9 1261.64,1214.9 1262.23,1214.9 1262.81,1214.9 1263.4,1214.9 1263.98,1214.9 1264.57,1214.9 1265.16,1214.9 1265.74,1214.9 1266.33,1214.9 1266.92,1214.9 1267.5,1214.9 1268.09,1214.9 1268.68,1214.9 1269.26,1214.9 1269.85,1214.9 1270.44,1214.9 1271.02,1214.9 1271.61,1214.9 1272.19,1214.9 1272.78,1214.9 1273.37,1214.9 1273.95,1214.9 1274.54,1214.9 1275.13,1214.9 1275.71,1214.9 1276.3,1214.9 1276.89,1214.9 1277.47,1214.9 1278.06,1214.9 1278.65,1214.9 1279.23,1214.9 1279.82,1214.9 1280.4,1214.9 1280.99,1214.9 1281.58,1214.9 1282.16,1214.9 1282.75,1214.9 1283.34,1214.9 1283.92,1214.9 1284.51,1214.9 1285.1,1214.9 1285.68,1214.9 1286.27,1214.9 1286.86,1214.9 1287.44,1214.9 1288.03,1214.9 1288.61,1214.9 1289.2,1214.9 1289.79,1214.9 1290.37,1214.9 1290.96,1214.9 1291.55,1214.9 1292.13,1214.9 1292.72,1214.9 1293.31,1214.9 1293.89,1214.9 1294.48,1214.9 1295.06,1214.9 1295.65,1214.9 1296.24,1214.9 1296.82,1214.9 1297.41,1214.9 1298,1214.9 1298.58,1214.9 1299.17,1214.9 1299.76,1214.9 1300.34,1214.9 1300.93,1214.9 1301.52,1214.9 1302.1,1214.9 1302.69,1214.9 1303.27,1214.9 1303.86,1214.9 1304.45,1214.9 1305.03,1214.9 1305.62,1214.9 1306.21,1214.9 1306.79,1214.9 1307.38,1214.9 1307.97,1214.9 1308.55,1214.9 1309.14,1214.9 1309.73,1214.9 1310.31,1214.9 1310.9,1214.9 1311.48,1214.9 1312.07,1214.9 1312.66,1214.9 1313.24,1214.9 1313.83,1214.9 1314.42,1214.9 1315,1214.9 1315.59,1214.9 1316.18,1214.9 1316.76,1214.9 1317.35,1214.9 1317.93,1214.9 1318.52,1214.9 1319.11,1214.9 1319.69,1214.9 1320.28,1214.9 1320.87,1214.9 1321.45,1214.9 1322.04,1214.9 1322.63,1214.9 1323.21,1214.9 1323.8,1214.9 1324.39,1214.9 1324.97,1214.9 1325.56,1214.9 1326.14,1214.9 1326.73,1214.9 1327.32,1214.9 1327.9,1214.9 1328.49,1214.9 1329.08,1214.9 1329.66,1214.9 1330.25,1214.9 1330.84,1214.9 1331.42,1214.9 1332.01,1214.9 1332.6,1214.9 1333.18,1214.9 1333.77,1214.9 1334.35,1214.9 1334.94,1214.9 1335.53,1214.9 1336.11,1214.9 1336.7,1214.9 1337.29,1214.9 1337.87,1214.9 1338.46,1214.9 1339.05,1214.9 1339.63,1214.9 1340.22,1214.9 1340.8,1214.9 1341.39,1214.9 1341.98,1214.9 1342.56,1214.9 1343.15,1214.9 1343.74,1214.9 1344.32,1214.9 1344.91,1214.9 1345.5,1214.9 1346.08,1214.9 1346.67,1214.9 1347.26,1214.9 1347.84,1214.9 1348.43,1214.9 1349.01,1214.9 1349.6,1214.9 1350.19,1214.9 1350.77,1214.9 1351.36,1214.9 1351.95,1214.9 1352.53,1214.9 1353.12,1214.9 1353.71,1214.9 1354.29,1214.9 1354.88,1214.9 1355.47,1214.9 1356.05,1214.9 1356.64,1214.9 1357.22,1214.9 1357.81,1214.9 1358.4,1214.9 1358.98,1214.9 1359.57,1214.9 1360.16,1214.9 1360.74,1214.9 1361.33,1214.9 1361.92,1214.9 1362.5,1214.9 1363.09,1214.9 1363.68,1214.9 1364.26,1214.9 1364.85,1214.9 1365.43,1214.9 1366.02,1214.9 1366.61,1214.9 1367.19,1214.9 1367.78,1214.9 1368.37,1214.9 1368.95,1214.9 1369.54,1214.9 1370.13,1214.9 1370.71,1214.9 1371.3,1214.9 1371.88,1214.9 1372.47,1214.9 1373.06,1214.9 1373.64,1214.9 1374.23,1214.9 1374.82,1214.9 1375.4,1214.9 1375.99,1214.9 1376.58,1214.9 1377.16,1214.9 1377.75,1214.9 1378.34,1214.9 1378.92,1214.9 1379.51,1214.9 1380.09,1214.9 1380.68,1214.9 1381.27,1214.9 1381.85,1214.9 1382.44,1214.9 1383.03,1214.9 1383.61,1214.9 1384.2,1214.9 1384.79,1214.9 1385.37,1214.9 1385.96,1214.9 1386.55,1214.9 1387.13,1214.9 1387.72,1214.9 1388.3,1214.9 1388.89,1214.9 1389.48,1214.9 1390.06,1214.9 1390.65,1214.9 1391.24,1214.9 1391.82,1214.9 1392.41,1214.9 1393,1214.9 1393.58,1214.9 1394.17,1214.9 1394.75,1214.9 1395.34,1214.9 1395.93,1214.9 1396.51,1214.9 1397.1,1214.9 1397.69,1214.9 1398.27,1214.9 1398.86,1214.9 1399.45,1214.9 1400.03,1214.9 1400.62,1214.9 1401.21,1214.9 1401.79,1214.9 1402.38,1214.9 1402.96,1214.9 1403.55,1214.9 1404.14,1214.9 1404.72,1214.9 1405.31,1214.9 1405.9,1214.9 1406.48,1214.9 1407.07,1214.9 1407.66,1214.9 1408.24,1214.9 1408.83,1214.9 1409.42,1214.9 1410,1214.9 1410.59,1214.9 1411.17,1214.9 1411.76,1214.9 1412.35,1214.9 1412.93,1214.9 1413.52,1214.9 1414.11,1214.9 1414.69,1214.9 1415.28,1214.9 1415.87,1214.9 1416.45,1214.9 1417.04,1214.9 1417.63,1214.9 1418.21,1214.9 1418.8,1214.9 1419.38,1214.9 1419.97,1214.9 1420.56,1214.9 1421.14,1214.9 1421.73,1214.9 1422.32,1214.9 1422.9,1214.9 1423.49,1214.9 1424.08,1214.9 1424.66,1214.9 1425.25,1214.9 1425.83,1214.9 1426.42,1214.9 1427.01,1214.9 1427.59,1214.9 1428.18,1214.9 1428.77,1214.9 1429.35,1214.9 1429.94,1214.9 1430.53,1214.9 1431.11,1214.9 1431.7,1214.9 1432.29,1214.9 1432.87,1214.9 1433.46,1214.9 1434.04,1214.9 1434.63,1214.9 1435.22,1214.9 1435.8,1214.9 1436.39,1214.9 1436.98,1214.9 1437.56,1214.9 1438.15,1214.9 1438.74,1214.9 1439.32,1214.9 1439.91,1214.9 1440.5,1214.9 1441.08,1214.9 1441.67,1214.9 1442.25,1214.9 1442.84,1214.9 1443.43,1214.9 1444.01,1214.9 1444.6,1214.9 1445.19,1214.9 1445.77,1214.9 1446.36,1214.9 1446.95,1214.9 1447.53,1214.9 1448.12,1214.9 1448.7,1214.9 1449.29,1214.9 1449.88,1214.9 1450.46,1214.9 1451.05,1214.9 1451.64,1214.9 1452.22,1214.9 1452.81,1214.9 1453.4,1214.9 1453.98,1214.9 1454.57,1214.9 1455.16,1214.9 1455.74,1214.9 1456.33,1214.9 1456.91,1214.9 1457.5,1214.9 1458.09,1214.9 1458.67,1214.9 1459.26,1214.9 1459.85,1214.9 1460.43,1214.9 1461.02,1214.9 1461.61,1214.9 1462.19,1214.9 1462.78,1214.9 1463.37,1214.9 1463.95,1214.9 1464.54,1214.9 1465.12,1214.9 1465.71,1214.9 1466.3,1214.9 1466.88,1214.9 1467.47,1214.9 1468.06,1214.9 1468.64,1214.9 1469.23,1214.9 1469.82,1214.9 1470.4,1214.9 1470.99,1214.9 1471.57,1214.9 1472.16,1214.9 1472.75,1214.9 1473.33,1214.9 1473.92,1214.9 1474.51,1214.9 1475.09,1214.9 1475.68,1214.9 1476.27,1214.9 1476.85,1214.9 1477.44,1214.9 1478.03,1214.9 1478.61,1214.9 1479.2,1214.9 1479.78,1214.9 1480.37,1214.9 1480.96,1214.9 1481.54,1214.9 1482.13,1214.9 1482.72,1214.9 1483.3,1214.9 1483.89,1214.9 1484.48,1214.9 1485.06,1214.9 1485.65,1214.9 1486.24,1214.9 1486.82,1214.9 1487.41,1214.9 1487.99,1214.9 1488.58,1214.9 1489.17,1214.9 1489.75,1214.9 1490.34,1214.9 1490.93,1214.9 1491.51,1214.9 1492.1,1214.9 1492.69,1214.9 1493.27,1214.9 1493.86,1214.9 1494.45,1214.9 1495.03,1214.9 1495.62,1214.9 1496.2,1214.9 1496.79,1214.9 1497.38,1214.9 1497.96,1214.9 1498.55,1214.9 1499.14,1214.9 1499.72,1214.9 1500.31,1214.9 1500.9,1214.9 1501.48,1214.9 1502.07,1214.9 1502.65,1214.9 1503.24,1214.9 1503.83,1214.9 1504.41,1214.9 1505,1214.9 1505.59,1214.9 1506.17,1214.9 1506.76,1214.9 1507.35,1214.9 1507.93,1214.9 1508.52,1214.9 1509.11,1214.9 1509.69,1214.9 1510.28,1214.9 1510.86,1214.9 1511.45,1214.9 1512.04,1214.9 1512.62,1214.9 1513.21,1214.9 1513.8,1214.9 1514.38,1214.9 1514.97,1214.9 1515.56,1214.9 1516.14,1214.9 1516.73,1214.9 1517.32,1214.9 1517.9,1214.9 1518.49,1214.9 1519.07,1214.9 1519.66,1214.9 1520.25,1214.9 1520.83,1214.9 1521.42,1214.9 1522.01,1214.9 1522.59,1214.9 1523.18,1214.9 1523.77,1214.9 1524.35,1214.9 1524.94,1214.9 1525.52,1214.9 1526.11,1214.9 1526.7,1214.9 1527.28,1214.9 1527.87,1214.9 1528.46,1214.9 1529.04,1214.9 1529.63,1214.9 1530.22,1214.9 1530.8,1214.9 1531.39,1214.9 1531.98,1214.9 1532.56,1214.9 1533.15,1214.9 1533.73,1214.9 1534.32,1214.9 1534.91,1214.9 1535.49,1214.9 1536.08,1214.9 1536.67,1214.9 1537.25,1214.9 1537.84,1214.9 1538.43,1214.9 1539.01,1214.9 1539.6,1214.9 1540.19,1214.9 1540.77,1214.9 1541.36,1214.9 1541.94,1214.9 1542.53,1214.9 1543.12,1214.9 1543.7,1214.9 1544.29,1214.9 1544.88,1214.9 1545.46,1214.9 1546.05,1214.9 1546.64,1214.9 1547.22,1214.9 1547.81,1214.9 1548.4,1214.9 1548.98,1214.9 1549.57,1214.9 1550.15,1214.9 1550.74,1214.9 1551.33,1214.9 1551.91,1214.9 1552.5,1214.9 1553.09,1214.9 1553.67,1214.9 1554.26,1214.9 1554.85,1214.9 1555.43,1214.9 1556.02,1214.9 1556.6,1214.9 1557.19,1214.9 1557.78,1214.9 1558.36,1214.9 1558.95,1214.9 1559.54,1214.9 1560.12,1214.9 1560.71,1214.9 1561.3,1214.9 1561.88,1214.9 1562.47,1214.9 1563.06,1214.9 1563.64,1214.9 1564.23,1214.9 1564.81,1214.9 1565.4,1214.9 1565.99,1214.9 1566.57,1214.9 1567.16,1214.9 1567.75,1214.9 1568.33,1214.9 1568.92,1214.9 1569.51,1214.9 1570.09,1214.9 1570.68,1214.9 1571.27,1214.9 1571.85,1214.9 1572.44,1214.9 1573.02,1214.9 1573.61,1214.9 1574.2,1214.9 1574.78,1214.9 1575.37,1214.9 1575.96,1214.9 1576.54,1214.9 1577.13,1214.9 1577.72,1214.9 1578.3,1214.9 1578.89,1214.9 1579.47,1214.9 1580.06,1214.9 1580.65,1214.9 1581.23,1214.9 1581.82,1214.9 1582.41,1214.9 1582.99,1214.9 1583.58,1214.9 1584.17,1214.9 1584.75,1214.9 1585.34,1214.9 1585.93,1214.9 1586.51,1214.9 1587.1,1214.9 1587.68,1214.9 1588.27,1214.9 1588.86,1214.9 1589.44,1214.9 1590.03,1214.9 1590.62,1214.9 1591.2,1214.9 1591.79,1214.9 1592.38,1214.9 1592.96,1214.9 1593.55,1214.9 1594.14,1214.9 1594.72,1214.9 1595.31,1214.9 1595.89,1214.9 1596.48,1214.9 1597.07,1214.9 1597.65,1214.9 1598.24,1214.9 1598.83,1214.9 1599.41,1214.9 1600,1214.9 1600.59,1214.9 1601.17,1214.9 1601.76,1214.9 1602.34,1214.9 1602.93,1214.9 1603.52,1214.9 1604.1,1214.9 1604.69,1214.9 1605.28,1214.9 1605.86,1214.9 1606.45,1214.9 1607.04,1214.9 1607.62,1214.9 1608.21,1214.9 1608.8,1214.9 1609.38,1214.9 1609.97,1214.9 1610.55,1214.9 1611.14,1214.9 1611.73,1214.9 1612.31,1214.9 1612.9,1214.9 1613.49,1214.9 1614.07,1214.9 1614.66,1214.9 1615.25,1214.9 1615.83,1214.9 1616.42,1214.9 1617.01,1214.9 1617.59,1214.9 1618.18,1214.9 1618.76,1214.9 1619.35,1214.9 1619.94,1214.9 1620.52,1214.9 1621.11,1214.9 1621.7,1214.9 1622.28,1214.9 1622.87,1214.9 1623.46,1214.9 1624.04,1214.9 1624.63,1214.9 1625.22,1214.9 1625.8,1214.9 1626.39,1214.9 1626.97,1214.9 1627.56,1214.9 1628.15,1214.9 1628.73,1214.9 1629.32,1214.9 1629.91,1214.9 1630.49,1214.9 1631.08,1214.9 1631.67,1214.9 1632.25,1214.9 1632.84,1214.9 1633.42,1214.9 1634.01,1214.9 1634.6,1214.9 1635.18,1214.9 1635.77,1214.9 1636.36,1214.9 1636.94,1214.9 1637.53,1214.9 1638.12,1214.9 1638.7,1214.9 1639.29,1214.9 1639.88,1214.9 1640.46,1214.9 1641.05,1214.9 1641.63,1214.9 1642.22,1214.9 1642.81,1214.9 1643.39,1214.9 1643.98,1214.9 1644.57,1214.9 1645.15,1214.9 1645.74,1214.9 1646.33,1214.9 1646.91,1214.9 1647.5,1214.9 1648.09,1214.9 1648.67,1214.9 1649.26,1214.9 1649.84,1214.9 1650.43,1214.9 1651.02,1214.9 1651.6,1214.9 1652.19,1214.9 1652.78,1214.9 1653.36,1214.9 1653.95,1214.9 1654.54,1214.9 1655.12,1214.9 1655.71,1214.9 1656.29,1214.9 1656.88,1214.9 1657.47,1214.9 1658.05,1214.9 1658.64,1214.9 1659.23,1214.9 1659.81,1214.9 1660.4,1214.9 1660.99,1214.9 1661.57,1214.9 1662.16,1214.9 1662.75,1214.9 1663.33,1214.9 1663.92,1214.9 1664.5,1214.9 1665.09,1214.9 1665.68,1214.9 1666.26,1214.9 1666.85,1214.9 1667.44,1214.9 1668.02,1214.9 1668.61,1214.9 1669.2,1214.9 1669.78,1214.9 1670.37,1214.9 1670.96,1214.9 1671.54,1214.9 1672.13,1214.9 1672.71,1214.9 1673.3,1214.9 1673.89,1214.9 1674.47,1214.9 1675.06,1214.9 1675.65,1214.9 1676.23,1214.9 1676.82,1214.9 1677.41,1214.9 1677.99,1214.9 1678.58,1214.9 1679.17,1214.9 1679.75,1214.9 1680.34,1214.9 1680.92,1214.9 1681.51,1214.9 1682.1,1214.9 1682.68,1214.9 1683.27,1214.9 1683.86,1214.9 1684.44,1214.9 1685.03,1214.9 1685.62,1214.9 1686.2,1214.9 1686.79,1214.9 1687.37,1214.9 1687.96,1214.9 1688.55,1214.9 1689.13,1214.9 1689.72,1214.9 1690.31,1214.9 1690.89,1214.9 1691.48,1214.9 1692.07,1214.9 1692.65,1214.9 1693.24,1214.9 1693.83,1214.9 1694.41,1214.9 1695,1214.9 1695.58,1214.9 1696.17,1214.9 1696.76,1214.9 1697.34,1214.9 1697.93,1214.9 1698.52,1214.9 1699.1,1214.9 1699.69,1214.9 1700.28,1214.9 1700.86,1214.9 1701.45,1214.9 1702.04,1214.9 1702.62,1214.9 1703.21,1214.9 1703.79,1214.9 1704.38,1214.9 1704.97,1214.9 1705.55,1214.9 1706.14,1214.9 1706.73,1214.9 1707.31,1214.9 1707.9,1214.9 1708.49,1214.9 1709.07,1214.9 1709.66,1214.9 1710.24,1214.9 1710.83,1214.9 1711.42,1214.9 1712,1214.9 1712.59,1214.9 1713.18,1214.9 1713.76,1214.9 1714.35,1214.9 1714.94,1214.9 1715.52,1214.9 1716.11,1214.9 1716.7,1214.9 1717.28,1214.9 1717.87,1214.9 1718.45,1214.9 1719.04,1214.9 1719.63,1214.9 1720.21,1214.9 1720.8,1214.9 1721.39,1214.9 1721.97,1214.9 1722.56,1214.9 1723.15,1214.9 1723.73,1214.9 1724.32,1214.9 1724.91,1214.9 1725.49,1214.9 1726.08,1214.9 1726.66,1214.9 1727.25,1214.9 1727.84,1214.9 1728.42,1214.9 1729.01,1214.9 1729.6,1214.9 1730.18,1214.9 1730.77,1214.9 1731.36,1214.9 1731.94,1214.9 1732.53,1214.9 1733.11,1214.9 1733.7,1214.9 1734.29,1214.9 1734.87,1214.9 1735.46,1214.9 1736.05,1214.9 1736.63,1214.9 1737.22,1214.9 1737.81,1214.9 1738.39,1214.9 1738.98,1214.9 1739.57,1214.9 1740.15,1214.9 1740.74,1214.9 1741.32,1214.9 1741.91,1214.9 1742.5,1214.9 1743.08,1214.9 1743.67,1214.9 1744.26,1214.9 1744.84,1214.9 1745.43,1214.9 1746.02,1214.9 1746.6,1214.9 1747.19,1214.9 1747.78,1214.9 1748.36,1214.9 1748.95,1214.9 1749.53,1214.9 1750.12,1214.9 1750.71,1214.9 1751.29,1214.9 1751.88,1214.9 1752.47,1214.9 1753.05,1214.9 1753.64,1214.9 1754.23,1214.9 1754.81,1214.9 1755.4,1214.9 1755.99,1214.9 1756.57,1214.9 1757.16,1214.9 1757.74,1214.9 1758.33,1214.9 1758.92,1214.9 1759.5,1214.9 1760.09,1214.9 1760.68,1214.9 1761.26,1214.9 1761.85,1214.9 1762.44,1214.9 1763.02,1214.9 1763.61,1214.9 1764.19,1214.9 1764.78,1214.9 1765.37,1214.9 1765.95,1214.9 1766.54,1214.9 1767.13,1214.9 1767.71,1214.9 1768.3,1214.9 1768.89,1214.9 1769.47,1214.9 1770.06,1214.9 1770.65,1214.9 1771.23,1214.9 1771.82,1214.9 1772.4,1214.9 1772.99,1214.9 1773.58,1214.9 1774.16,1214.9 1774.75,1214.9 1775.34,1214.9 1775.92,1214.9 1776.51,1214.9 1777.1,1214.9 1777.68,1214.9 1778.27,1214.9 1778.86,1214.9 1779.44,1214.9 1780.03,1214.9 1780.61,1214.9 1781.2,1214.9 1781.79,1214.9 1782.37,1214.9 1782.96,1214.9 1783.55,1214.9 1784.13,1214.9 1784.72,1214.9 1785.31,1214.9 1785.89,1214.9 1786.48,1214.9 1787.06,1214.9 1787.65,1214.9 1788.24,1214.9 1788.82,1214.9 1789.41,1214.9 1790,1214.9 1790.58,1214.9 1791.17,1214.9 1791.76,1214.9 1792.34,1214.9 1792.93,1214.9 1793.52,1214.9 1794.1,1214.9 1794.69,1214.9 1795.27,1214.9 1795.86,1214.9 1796.45,1214.9 1797.03,1214.9 1797.62,1214.9 1798.21,1214.9 1798.79,1214.9 1799.38,1214.9 1799.97,1214.9 1800.55,1214.9 1801.14,1214.9 1801.73,1214.9 1802.31,1214.9 1802.9,1214.9 1803.48,1214.9 1804.07,1214.9 1804.66,1214.9 1805.24,1214.9 1805.83,1214.9 1806.42,1214.9 1807,1214.9 1807.59,1214.9 1808.18,1214.9 1808.76,1214.9 1809.35,1214.9 1809.94,1214.9 1810.52,1214.9 1811.11,1214.9 1811.69,1214.9 1812.28,1214.9 1812.87,1214.9 1813.45,1214.9 1814.04,1214.9 1814.63,1214.9 1815.21,1214.9 1815.8,1214.9 1816.39,1214.9 1816.97,1214.9 1817.56,1214.9 1818.14,1214.9 1818.73,1214.9 1819.32,1214.9 1819.9,1214.9 1820.49,1214.9 1821.08,1214.9 1821.66,1214.9 1822.25,1214.9 1822.84,1214.9 1823.42,1214.9 1824.01,1214.9 1824.6,1214.9 1825.18,1214.9 1825.77,1214.9 1826.35,1214.9 1826.94,1214.9 1827.53,1214.9 1828.11,1214.9 1828.7,1214.9 1829.29,1214.9 1829.87,1214.9 1830.46,1214.9 1831.05,1214.9 1831.63,1214.9 1832.22,1214.9 1832.81,1214.9 1833.39,1214.9 1833.98,1214.9 1834.56,1214.9 1835.15,1214.9 1835.74,1214.9 1836.32,1214.9 1836.91,1214.9 1837.5,1214.9 1838.08,1214.9 1838.67,1214.9 1839.26,1214.9 1839.84,1214.9 1840.43,1214.9 1841.01,1214.9 1841.6,1214.9 1842.19,1214.9 1842.77,1214.9 1843.36,1214.9 1843.95,1214.9 1844.53,1214.9 1845.12,1214.9 1845.71,1214.9 1846.29,1214.9 1846.88,1214.9 1847.47,1214.9 1848.05,1214.9 1848.64,1214.9 1849.22,1214.9 1849.81,1214.9 1850.4,1214.9 1850.98,1214.9 1851.57,1214.9 1852.16,1214.9 1852.74,1214.9 1853.33,1214.9 1853.92,1214.9 1854.5,1214.9 1855.09,1214.9 1855.68,1214.9 1856.26,1214.9 1856.85,1214.9 1857.43,1214.9 1858.02,1214.9 1858.61,1214.9 1859.19,1214.9 1859.78,1214.9 1860.37,1214.9 1860.95,1214.9 1861.54,1214.9 1862.13,1214.9 1862.71,1214.9 1863.3,1214.9 1863.88,1214.9 1864.47,1214.9 1865.06,1214.9 1865.64,1214.9 1866.23,1214.9 1866.82,1214.9 1867.4,1214.9 1867.99,1214.9 1868.58,1214.9 1869.16,1214.9 1869.75,1214.9 1870.34,1214.9 1870.92,1214.9 1871.51,1214.9 1872.09,1214.9 1872.68,1214.9 1873.27,1214.9 1873.85,1214.9 1874.44,1214.9 1875.03,1214.9 1875.61,1214.9 1876.2,1214.9 1876.79,1214.9 1877.37,1214.9 1877.96,1214.9 1878.55,1214.9 1879.13,1214.9 1879.72,1214.9 1880.3,1214.9 1880.89,1214.9 1881.48,1214.9 1882.06,1214.9 1882.65,1214.9 1883.24,1214.9 1883.82,1214.9 1884.41,1214.9 1885,1214.9 1885.58,1214.9 1886.17,1214.9 1886.76,1214.9 1887.34,1214.9 1887.93,1214.9 1888.51,1214.9 1889.1,1214.9 1889.69,1214.9 1890.27,1214.9 1890.86,1214.9 1891.45,1214.9 1892.03,1214.9 1892.62,1214.9 1893.21,1214.9 1893.79,1214.9 1894.38,1214.9 1894.96,1214.9 1895.55,1214.9 1896.14,1214.9 1896.72,1214.9 1897.31,1214.9 1897.9,1214.9 1898.48,1214.9 1899.07,1214.9 1899.66,1214.9 1900.24,1214.9 1900.83,1214.9 1901.42,1214.9 1902,1214.9 1902.59,1214.9 1903.17,1214.9 1903.76,1214.9 1904.35,1214.9 1904.93,1214.9 1905.52,1214.9 1906.11,1214.9 1906.69,1214.9 1907.28,1214.9 1907.87,1214.9 1908.45,1214.9 1909.04,1214.9 1909.63,1214.9 1910.21,1214.9 1910.8,1214.9 1911.38,1214.9 1911.97,1214.9 1912.56,1214.9 1913.14,1214.9 1913.73,1214.9 1914.32,1214.9 1914.9,1214.9 1915.49,1214.9 1916.08,1214.9 1916.66,1214.9 1917.25,1214.9 1917.83,1214.9 1918.42,1214.9 1919.01,1214.9 1919.59,1214.9 1920.18,1214.9 1920.77,1214.9 1921.35,1214.9 1921.94,1214.9 1922.53,1214.9 1923.11,1214.9 1923.7,1214.9 1924.29,1214.9 1924.87,1214.9 1925.46,1214.9 1926.04,1214.9 1926.63,1214.9 1927.22,1214.9 1927.8,1214.9 1928.39,1214.9 1928.98,1214.9 1929.56,1214.9 1930.15,1214.9 1930.74,1214.9 1931.32,1214.9 1931.91,1214.9 1932.5,1214.9 1933.08,1214.9 1933.67,1214.9 1934.25,1214.9 1934.84,1214.9 1935.43,1214.9 1936.01,1214.9 1936.6,1214.9 1937.19,1214.9 1937.77,1214.9 1938.36,1214.9 1938.95,1214.9 1939.53,1214.9 1940.12,1214.9 1940.71,1214.9 1941.29,1214.9 1941.88,1214.9 1942.46,1214.9 1943.05,1214.9 1943.64,1214.9 1944.22,1214.9 1944.81,1214.9 1945.4,1214.9 1945.98,1214.9 1946.57,1214.9 1947.16,1214.9 1947.74,1214.9 1948.33,1214.9 1948.91,1214.9 1949.5,1214.9 1950.09,1214.9 1950.67,1214.9 1951.26,1214.9 1951.85,1214.9 1952.43,1214.9 1953.02,1214.9 1953.61,1214.9 1954.19,1214.9 1954.78,1214.9 1955.37,1214.9 1955.95,1214.9 1956.54,1214.9 1957.12,1214.9 1957.71,1214.9 1958.3,1214.9 1958.88,1214.9 1959.47,1214.9 1960.06,1214.9 1960.64,1214.9 1961.23,1214.9 1961.82,1214.9 1962.4,1214.9 1962.99,1214.9 1963.58,1214.9 1964.16,1214.9 1964.75,1214.9 1965.33,1214.9 1965.92,1214.9 1966.51,1214.9 1967.09,1214.9 1967.68,1214.9 1968.27,1214.9 1968.85,1214.9 1969.44,1214.9 1970.03,1214.9 1970.61,1214.9 1971.2,1214.9 1971.78,1214.9 1972.37,1214.9 1972.96,1214.9 1973.54,1214.9 1974.13,1214.9 1974.72,1214.9 1975.3,1214.9 1975.89,1214.9 1976.48,1214.9 1977.06,1214.9 1977.65,1214.9 1978.24,1214.9 1978.82,1214.9 1979.41,1214.9 1979.99,1214.9 1980.58,1214.9 1981.17,1214.9 1981.75,1214.9 1982.34,1214.9 1982.93,1214.9 1983.51,1214.9 1984.1,1214.9 1984.69,1214.9 1985.27,1214.9 1985.86,1214.9 1986.45,1214.9 1987.03,1214.9 1987.62,1214.9 1988.2,1214.9 1988.79,1214.9 1989.38,1214.9 1989.96,1214.9 1990.55,1214.9 1991.14,1214.9 1991.72,1214.9 1992.31,1214.9 1992.9,1214.9 1993.48,1214.9 1994.07,1214.9 1994.65,1214.9 1995.24,1214.9 1995.83,1214.9 1996.41,1214.9 1997,1214.9 1997.59,1214.9 1998.17,1214.9 1998.76,1214.9 1999.35,1214.9 1999.93,1214.9 2000.52,1214.9 2001.11,1214.9 2001.69,1214.9 2002.28,1214.9 2002.86,1214.9 2003.45,1214.9 2004.04,1214.9 2004.62,1214.9 2005.21,1214.9 2005.8,1214.9 2006.38,1214.9 2006.97,1214.9 2007.56,1214.9 2008.14,1214.9 2008.73,1214.9 2009.32,1214.9 2009.9,1214.9 2010.49,1214.9 2011.07,1214.9 2011.66,1214.9 2012.25,1214.9 2012.83,1214.9 2013.42,1214.9 2014.01,1214.9 2014.59,1214.9 2015.18,1214.9 2015.77,1214.9 2016.35,1214.9 2016.94,1214.9 2017.53,1214.9 2018.11,1214.9 2018.7,1214.9 2019.28,1214.9 2019.87,1214.9 2020.46,1214.9 2021.04,1214.9 2021.63,1214.9 2022.22,1214.9 2022.8,1214.9 2023.39,1214.9 2023.98,1214.9 2024.56,1214.9 2025.15,1214.9 2025.73,1214.9 2026.32,1214.9 2026.91,1214.9 2027.49,1214.9 2028.08,1214.9 2028.67,1214.9 2029.25,1214.9 2029.84,1214.9 2030.43,1214.9 2031.01,1214.9 2031.6,1214.9 2032.19,1214.9 2032.77,1214.9 2033.36,1214.9 2033.94,1214.9 2034.53,1214.9 2035.12,1214.9 2035.7,1214.9 2036.29,1214.9 2036.88,1214.9 2037.46,1214.9 2038.05,1214.9 2038.64,1214.9 2039.22,1214.9 2039.81,1214.9 2040.4,1214.9 2040.98,1214.9 2041.57,1214.9 2042.15,1214.9 2042.74,1214.9 2043.33,1214.9 2043.91,1214.9 2044.5,1214.9 2045.09,1214.9 2045.67,1214.9 2046.26,1214.9 2046.85,1214.9 2047.43,1214.9 2048.02,1214.9 2048.6,1214.9 2049.19,1214.9 2049.78,1214.9 2050.36,1214.9 2050.95,1214.9 2051.54,1214.9 2052.12,1214.9 2052.71,1214.9 2053.3,1214.9 2053.88,1214.9 2054.47,1214.9 2055.06,1214.9 2055.64,1214.9 2056.23,1214.9 2056.81,1214.9 2057.4,1214.9 2057.99,1214.9 2058.57,1214.9 2059.16,1214.9 2059.75,1214.9 2060.33,1214.9 2060.92,1214.9 2061.51,1214.9 2062.09,1214.9 2062.68,1214.9 2063.27,1214.9 2063.85,1214.9 2064.44,1214.9 2065.02,1214.9 2065.61,1214.9 2066.2,1214.9 2066.78,1214.9 2067.37,1214.9 2067.96,1214.9 2068.54,1214.9 2069.13,1214.9 2069.72,1214.9 2070.3,1214.9 2070.89,1214.9 2071.48,1214.9 2072.06,1214.9 2072.65,1214.9 2073.23,1214.9 2073.82,1214.9 2074.41,1214.9 2074.99,1214.9 2075.58,1214.9 2076.17,1214.9 2076.75,1214.9 2077.34,1214.9 2077.93,1214.9 2078.51,1214.9 2079.1,1214.9 2079.68,1214.9 2080.27,1214.9 2080.86,1214.9 2081.44,1214.9 2082.03,1214.9 2082.62,1214.9 2083.2,1214.9 2083.79,1214.9 2084.38,1214.9 2084.96,1214.9 2085.55,1214.9 2086.14,1214.9 2086.72,1214.9 2087.31,1214.9 2087.89,1214.9 2088.48,1214.9 2089.07,1214.9 2089.65,1214.9 2090.24,1214.9 2090.83,1214.9 2091.41,1214.9 2092,1214.9 2092.59,1214.9 2093.17,1214.9 2093.76,1214.9 2094.35,1214.9 2094.93,1214.9 2095.52,1214.9 2096.1,1214.9 2096.69,1214.9 2097.28,1214.9 2097.86,1214.9 2098.45,1214.9 2099.04,1214.9 2099.62,1214.9 2100.21,1214.9 2100.8,1214.9 2101.38,1214.9 2101.97,1214.9 2102.55,1214.9 2103.14,1214.9 2103.73,1214.9 2104.31,1214.9 2104.9,1214.9 2105.49,1214.9 2106.07,1214.9 2106.66,1214.9 2107.25,1214.9 2107.83,1214.9 2108.42,1214.9 2109.01,1214.9 2109.59,1214.9 2110.18,1214.9 2110.76,1214.9 2111.35,1214.9 2111.94,1214.9 2112.52,1214.9 2113.11,1214.9 2113.7,1214.9 2114.28,1214.9 2114.87,1214.9 2115.46,1214.9 2116.04,1214.9 2116.63,1214.9 2117.22,1214.9 2117.8,1214.9 2118.39,1214.9 2118.97,1214.9 2119.56,1214.9 2120.15,1214.9 2120.73,1214.9 2121.32,1214.9 2121.91,1214.9 2122.49,1214.9 2123.08,1214.9 2123.67,1214.9 2124.25,1214.9 2124.84,1214.9 2125.42,1214.9 2126.01,1214.9 2126.6,1214.9 2127.18,1214.9 2127.77,1214.9 2128.36,1214.9 2128.94,1214.9 2129.53,1214.9 2130.12,1214.9 2130.7,1214.9 2131.29,1214.9 2131.88,1214.9 2132.46,1214.9 2133.05,1214.9 2133.63,1214.9 2134.22,1214.9 2134.81,1214.9 2135.39,1214.9 2135.98,1214.9 2136.57,1214.9 2137.15,1214.9 2137.74,1214.9 2138.33,1214.9 2138.91,1214.9 2139.5,1214.9 2140.09,1214.9 2140.67,1214.9 2141.26,1214.9 2141.84,1214.9 2142.43,1214.9 2143.02,1214.9 2143.6,1214.9 2144.19,1214.9 2144.78,1214.9 2145.36,1214.9 2145.95,1214.9 2146.54,1214.9 2147.12,1214.9 2147.71,1214.9 2148.3,1214.9 2148.88,1214.9 2149.47,1214.9 2150.05,1214.9 2150.64,1214.9 2151.23,1214.9 2151.81,1214.9 2152.4,1214.9 2152.99,1214.9 2153.57,1214.9 2154.16,1214.9 2154.75,1214.9 2155.33,1214.9 2155.92,1214.9 2156.5,1214.9 2157.09,1214.9 2157.68,1214.9 2158.26,1214.9 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.58,1195.91 1398.78,899.083 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.37 985.439,1195.91 2158.26,1195.91 2158.26,1233.37 985.439,1233.37 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip503\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5920.59 164.351,-6844.87 164.91,-7668.97 165.469,-7236.58 166.029,-6933.34 166.588,-7672.02 167.147,-8341.53 167.706,-8946.35 168.266,-8624.15 168.825,-9142.54 169.384,-9637.27 169.943,-10050.9 170.503,-9775.77 171.062,-10131.9 171.621,-9887.46 172.18,-9693.66 172.74,-10005.6 173.299,-10285.9 173.858,-10514.6 174.417,-10723.9 174.977,-10490.2 175.536,-10647.2 176.095,-10765 176.655,-10850.3 177.214,-10924.2 177.773,-10669.3 178.332,-10173.5 178.892,-10201.7 179.451,-9985.87 180.01,-9769.45 180.569,-9562.68 181.129,-9563.35 181.688,-9563.18 182.247,-9357.7 182.806,-9327.5 183.366,-9282.26 183.925,-9228.45 184.484,-9157.61 185.043,-9068.06 185.603,-8841.57 186.162,-8747.35 186.721,-8520.11 187.28,-8291.94 187.84,-8067.06 188.399,-7843.63 188.958,-7724.04 189.517,-7601.39 190.077,-7374.96 190.636,-6989.58 191.195,-6794.19 191.754,-6597.98 192.314,-6409.25 192.873,-6293.21 193.432,-5901.61 193.991,-5649.3 194.551,-5471.78 195.11,-5301.97 195.669,-5196.76 196.228,-5093.28 196.788,-4985.85 197.347,-4880.93 197.906,-4513.77 198.465,-4317.77 199.025,-4168.69 199.584,-3982.02 200.143,-3846.22 200.702,-3675.38 201.262,-3548.98 201.821,-3422.59 202.38,-3300.84 202.939,-3185.01 203.499,-3107.81 204.058,-2988.14 204.617,-2914.72 205.176,-2807.91 205.736,-2595.19 206.295,-2427.95 206.854,-2325.23 207.413,-2192.3 207.973,-2128.77 208.532,-2036.82 209.091,-1945.26 209.65,-1797.72 210.21,-1687.84 210.769,-1575.47 211.328,-1494.73 211.887,-1445.64 212.447,-1370.94 213.006,-1298.59 213.565,-1227.69 214.124,-1026.39 214.684,-1014.33 215.243,-999.177 215.802,-855.679 216.361,-792.282 216.921,-684.911 217.48,-581.899 218.039,-481.067 218.598,-454.724 219.158,-407.748 219.717,-381.882 220.276,-311.531 220.835,-221.839 221.395,-202.063 221.954,-181.455 222.513,-142.059 223.072,-99.2092 223.632,-99.2574 224.191,-34.9988 224.75,50.3182 225.309,63.9386 225.869,105.026 226.428,125.33 226.987,159.535 227.546,198.896 228.106,214.345 228.665,291.243 229.224,323.901 229.783,335.507 230.343,346.096 230.902,375.641 231.461,405.337 232.02,449.031 232.58,458.603 233.139,484.793 233.698,512.818 234.257,554.994 234.817,539.448 235.376,543.661 235.935,551.881 236.494,577.118 237.054,602.349 237.613,623.742 238.172,628.494 238.731,650.767 239.291,693.418 239.85,750.018 240.409,804.036 240.968,801.381 241.528,853.928 242.087,825.299 242.646,875.943 243.205,892.44 243.765,868.28 244.324,913.743 244.883,924.034 245.442,950.253 246.002,942.608 246.561,932.891 247.12,911.02 247.679,924.097 248.239,939.022 248.798,968.171 249.357,962.269 249.916,975.213 250.476,985.775 251.035,957.855 251.594,933.962 252.153,928.404 252.713,957.682 253.272,983.246 253.831,962.397 254.39,956.776 254.95,1005.85 255.509,1037.09 256.068,1046.48 256.627,1038.52 257.187,1061.12 257.746,1035.15 258.305,1095.9 258.864,1067.18 259.424,1077.73 259.983,1049.39 260.542,1042.6 261.101,1036.88 261.661,1045.7 262.22,1035.24 262.779,1028.04 263.338,1037.44 263.898,1015.83 264.457,1008.57 265.016,1034.93 265.575,1025.02 266.135,1051.69 266.694,1046.05 267.253,1057.31 267.812,1082.66 268.372,1070.81 268.931,1081.41 269.49,1073.15 270.049,1059.69 270.609,1068.52 271.168,1045.63 271.727,1054.48 272.286,1046.06 272.846,1040.83 273.405,1064.81 273.964,1072.54 274.523,1099.3 275.083,1087.43 275.642,1077.51 276.201,1067.31 276.76,1059.92 277.32,1086.08 277.879,1058.03 278.438,1034.56 278.997,1061.89 279.557,1087.74 280.116,1060.84 280.675,1069.15 281.234,1046.54 281.794,1059.54 282.353,1034.62 282.912,1015.06 283.471,1045.45 284.031,1090.21 284.59,1079.65 285.149,1055.81 285.708,1036.02 286.268,1030.88 286.827,1010.47 287.386,991.046 287.945,1020.29 288.505,1034.06 289.064,1029.4 289.623,1040.02 290.182,1035.69 290.742,1030.17 291.301,1020.42 291.86,1050.5 292.419,1028.8 292.979,1022.86 293.538,1015.9 294.097,1044.08 294.656,1034.3 295.216,1077.88 295.775,1070.19 296.334,1032.77 296.893,1009.46 297.453,1038.74 298.012,1049.64 298.571,1058.93 299.13,1051.69 299.69,1028.2 300.249,1022.23 300.808,1032.39 301.368,1042.17 301.927,1018.15 302.486,1026.53 303.045,1053.37 303.605,1045.17 304.164,1034.18 304.723,1031.55 305.282,994.857 305.842,991.835 306.401,1002.79 306.96,1013.66 307.519,1009.43 308.079,1020.74 308.638,980.665 309.197,977.011 309.756,987.73 310.316,1001.61 310.875,1000.62 311.434,1042.49 311.993,1065.94 312.553,1088.27 313.112,1095.06 313.671,1083.72 314.23,1057.25 314.79,1061.63 315.349,1020.77 315.908,1026.21 316.467,1019.64 317.027,1029.22 317.586,989.167 318.145,999.972 318.704,1009.07 319.264,1003.09 319.823,981.771 320.382,992.527 320.941,1000.72 321.501,995.07 322.06,1055.03 322.619,1043.83 323.178,1079.46 323.738,1053.85 324.297,1044.66 324.856,1050.1 325.415,1024.89 325.975,999.399 326.534,1010.07 327.093,1016.07 327.652,1021.71 328.212,995.75 328.771,954.481 329.33,966.127 329.889,959.296 330.449,937.512 331.008,901.158 331.567,915.226 332.126,895.464 332.686,927.269 333.245,906.892 333.804,872.403 334.363,904.545 334.923,902.473 335.482,935.122 336.041,948.625 336.6,926.201 337.16,905.25 337.719,915.648 338.278,914.969 338.837,960.418 339.397,1053.55 339.956,1010.72 340.515,990.815 341.074,964.535 341.634,976.998 342.193,937.68 342.752,932.717 343.311,946.875 343.871,941.117 344.43,918.95 344.989,893.462 345.548,892.295 346.108,901.722 346.667,882.515 347.226,896.186 347.785,874.584 348.345,872.637 348.904,899.672 349.463,911.591 350.022,895.327 350.582,892.613 351.141,905.053 351.7,898.655 352.259,893.488 352.819,873.309 353.378,849.814 353.937,845.816 354.496,876.162 355.056,907.412 355.615,902.425 356.174,829.871 356.733,831.395 357.293,831.66 357.852,833.668 358.411,900.645 358.97,895.994 359.53,922.774 360.089,914.537 360.648,905.785 361.207,916.771 361.767,943.031 362.326,901.504 362.885,934.189 363.444,911.165 364.004,921.035 364.563,932.014 365.122,908.743 365.681,922.296 366.241,931.721 366.8,939.829 367.359,931.544 367.918,910.166 368.478,923.309 369.037,929.245 369.596,923.952 370.155,903.908 370.715,916.449 371.274,891.721 371.833,917.349 372.392,892.876 372.952,886.712 373.511,895.833 374.07,904.919 374.629,880.172 375.189,897.1 375.748,891.634 376.307,889.59 376.866,918.376 377.426,930.71 377.985,941.954 378.544,918.649 379.103,925.618 379.663,901.645 380.222,882.827 380.781,894.993 381.34,887.253 381.9,895.765 382.459,827.376 383.018,777.065 383.577,762.398 384.137,760.291 384.696,764.827 385.255,762.766 385.814,796.993 386.374,831.06 386.933,844.089 387.492,841.168 388.051,856.288 388.611,833.615 389.17,883.413 389.729,875.652 390.288,868.484 390.848,862.623 391.407,857.933 391.966,857.414 392.525,898.732 393.085,923.991 393.644,919.291 394.203,897.247 394.762,875.843 395.322,886.621 395.881,882.442 396.44,875.911 396.999,887.827 397.559,881.695 398.118,861.052 398.677,835.699 399.236,817.776 399.796,783.975 400.355,785.519 400.914,740.034 401.473,723.829 402.033,761.197 402.592,776.608 403.151,778.55 403.71,796.56 404.27,795.593 404.829,760.429 405.388,762.004 405.947,745.733 406.507,744.833 407.066,748.788 407.625,751.128 408.184,690.105 408.744,679.668 409.303,704.103 409.862,723.684 410.421,725.789 410.981,746.852 411.54,749.549 412.099,720.711 412.658,740.071 413.218,712.738 413.777,716.545 414.336,722.604 414.895,724.289 415.455,740.519 416.014,774.977 416.573,787.611 417.132,786.457 417.692,798.897 418.251,782.016 418.81,766.275 419.369,765.584 419.929,766.979 420.488,802.049 421.047,816.35 421.606,831.102 422.166,811.244 422.725,823.884 423.284,819.104 423.843,830.723 424.403,808.043 424.962,790.161 425.521,804.929 426.08,800.961 426.64,783.093 427.199,799.909 427.758,841.681 428.318,852.508 428.877,832.285 429.436,848.911 429.995,813.84 430.555,810.236 431.114,774.114 431.673,790.552 432.232,790.131 432.792,788.391 433.351,786.979 433.91,785.587 434.469,818.709 435.029,820.484 435.588,802.195 436.147,799.873 436.706,812.221 437.266,809.776 437.825,839.644 438.384,821.215 438.943,844.626 439.503,821.241 440.062,783.934 440.621,782.304 441.18,783.041 441.74,781.288 442.299,811.804 442.858,754.866 443.417,756.274 443.977,755.825 444.536,755.398 445.095,738.305 445.654,759.241 446.214,758.255 446.773,725.412 447.332,675.552 447.891,661.761 448.451,665.664 449.01,670.484 449.569,676.427 450.128,682.267 450.688,684.65 451.247,655.078 451.806,644.288 452.365,669.503 452.925,657.494 453.484,660.153 454.043,664.911 454.602,666.049 455.162,653.106 455.721,677.229 456.28,680.868 456.839,733.946 457.399,720.274 457.958,721.343 458.517,770.969 459.076,771.256 459.636,772.406 460.195,753.831 460.754,771.702 461.313,770.528 461.873,770.192 462.432,766.951 462.991,764.844 463.55,751.067 464.11,767.632 464.669,749.955 465.228,746.583 465.787,730.711 466.347,744.193 466.906,728.367 467.465,727.557 468.024,729.666 468.584,731.093 469.143,781.338 469.702,779.119 470.261,826.924 470.821,821.265 471.38,816.311 471.939,826.497 472.498,821.435 473.058,817.939 473.617,813.18 474.176,790.192 474.735,769.424 475.295,784.447 475.854,782.429 476.413,780.462 476.972,765.437 477.532,795.409 478.091,807.671 478.65,806.575 479.209,757.724 479.769,769.656 480.328,764.468 480.887,762.254 481.446,794.349 482.006,808.148 482.565,838.722 483.124,817.467 483.683,814.364 484.243,810.468 484.802,806.785 485.361,799.556 485.92,811.37 486.48,808.602 487.039,788.593 487.598,769.739 488.157,769.951 488.717,771.345 489.276,819.318 489.835,796.705 490.394,793.281 490.954,758.297 491.513,757.915 492.072,777.569 492.631,761.819 493.191,741.94 493.75,741.62 494.309,758.521 494.868,758.179 495.428,745.251 495.987,792.868 496.546,790.968 497.105,803.614 497.665,797.014 498.224,795.982 498.783,775.319 499.342,792.978 499.902,771.684 500.461,771.052 501.02,765.535 501.579,799.355 502.139,781.07 502.698,757.772 503.257,742.012 503.816,758.549 504.376,756.374 504.935,786.5 505.494,768.623 506.053,766.233 506.613,762.577 507.172,755.989 507.731,753.464 508.29,749.725 508.85,731.139 509.409,715.654 509.968,716.932 510.527,717.74 511.087,733.467 511.646,781.541 512.205,794.233 512.764,790.58 513.324,751.787 513.883,749.088 514.442,763.616 515.001,747.427 515.561,727.388 516.12,761.753 516.679,743.3 517.238,772.817 517.798,753.51 518.357,771.531 518.916,753.323 519.475,770.212 520.035,768.857 520.594,783.299 521.153,811.398 521.712,806.799 522.272,771.172 522.831,803.316 523.39,780.868 523.949,762.862 524.509,742.323 525.068,724.771 525.627,724.803 526.186,723.664 526.746,722.705 527.305,708.443 527.864,692.702 528.423,694.624 528.983,711.876 529.542,712.959 530.101,714.867 530.66,716.776 531.22,714.719 531.779,664.707 532.338,634.153 532.897,637.954 533.457,646.012 534.016,668.818 534.575,701.628 535.134,684.442 535.694,730.747 536.253,727.508 536.812,727.584 537.371,744.466 537.931,758.719 538.49,739.482 539.049,720.391 539.608,723.02 540.168,735.097 540.727,701.11 541.286,684.094 541.845,719.163 542.405,719.693 542.964,733.82 543.523,702.544 544.082,719.771 544.642,720.116 545.201,720.389 545.76,719.35 546.319,701.881 546.879,683.676 547.438,688.143 547.997,690.687 548.556,720.317 549.116,686.447 549.675,688.657 550.234,688.616 550.793,672.881 551.353,675.748 551.912,678.968 552.471,666.323 553.031,651.78 553.59,665.063 554.149,667.568 554.708,670.445 555.268,675.541 555.827,662.078 556.386,664.246 556.945,654.425 557.505,674.074 558.064,677.755 558.623,678.305 559.182,682.696 559.742,700.812 560.301,715.771 560.86,666.2 561.419,704.398 561.979,703.572 562.538,720.834 563.097,686.814 563.656,688.715 564.216,684.285 564.775,653.491 565.334,653.626 565.893,675.249 566.453,662.244 567.012,698.915 567.571,693.697 568.13,709.192 568.69,723.013 569.249,736.712 569.808,784.831 570.367,763.323 570.927,744.878 571.486,746.718 572.045,775.741 572.604,803.627 573.164,817.989 573.723,813.163 574.282,838.487 574.841,865.251 575.401,888.514 575.96,896.73 576.519,854.31 577.078,811.503 577.638,806.432 578.197,820.396 578.756,799.78 579.315,763.149 579.875,728.867 580.434,716.68 580.993,702.111 581.552,702.167 582.112,686.92 582.671,685.767 583.23,654.856 583.789,659.305 584.349,692.753 584.908,678.593 585.467,678.636 586.026,681.015 586.586,666.239 587.145,671.007 587.704,688.122 588.263,686.723 588.823,702.089 589.382,736.247 589.941,751.045 590.5,749.812 591.06,727.514 591.619,704.976 592.178,720.746 592.737,737.372 593.297,721.037 593.856,738.117 594.415,721.223 594.974,705.653 595.534,739.717 596.093,755.668 596.652,802.041 597.211,779.097 597.771,807.638 598.33,788.935 598.889,752.802 599.448,783.166 600.008,744.114 600.567,744.299 601.126,740.744 601.685,738.044 602.245,718.978 602.804,747.789 603.363,748.132 603.922,727.089 604.482,740.009 605.041,707.115 605.6,707.403 606.159,694.197 606.719,700.635 607.278,701.251 607.837,651.81 608.396,640.528 608.956,663.06 609.515,665.695 610.074,685.322 610.633,690.571 611.193,725.058 611.752,710.094 612.311,712.72 612.87,708.837 613.43,723.562 613.989,721.715 614.548,724.454 615.107,674.777 615.667,691.426 616.226,709.34 616.785,741.046 617.344,754.7 617.904,734.152 618.463,733.977 619.022,750.541 619.581,747.988 620.141,742.196 620.7,759.603 621.259,786.796 621.818,753.73 622.378,765.622 622.937,777.559 623.496,791.934 624.055,786.207 624.615,784.285 625.174,796.058 625.733,789.83 626.292,769.606 626.852,751.204 627.411,751.408 627.97,732.146 628.529,748.689 629.089,748.639 629.648,746.332 630.207,714.604 630.766,745.289 631.326,727.153 631.885,709.604 632.444,695.597 633.003,678.473 633.563,682.211 634.122,683.788 634.681,668.197 635.24,685.289 635.8,703.316 636.359,705.647 636.918,705.863 637.477,707.664 638.037,663.365 638.596,681.133 639.155,682.341 639.714,653.634 640.274,656.456 640.833,659.75 641.392,695.85 641.951,694.537 642.511,708.444 643.07,675.698 643.629,677.487 644.188,680.005 644.748,679.244 645.307,646.907 645.866,654.983 646.425,620.437 646.985,606.698 647.544,642.472 648.103,659.988 648.662,678.476 649.222,662.482 649.781,710.808 650.34,710.206 650.899,709.426 651.459,741.756 652.018,776.197 652.577,787.308 653.136,813.628 653.696,819.079 654.255,812.94 654.814,807.572 655.373,821.61 655.933,797.347 656.492,806.053 657.051,784.461 657.61,747.66 658.17,778.908 658.729,760.706 659.288,707.73 659.847,677.779 660.407,680.031 660.966,666.285 661.525,668.129 662.084,670.163 662.644,672.284 663.203,656.063 663.762,670.437 664.321,654.795 664.881,673.077 665.44,659.349 665.999,679.081 666.558,712.031 667.118,677.226 667.677,682.749 668.236,685.942 668.795,686.289 669.355,688.301 669.914,656.301 670.473,643.851 671.032,649.008 671.592,604.54 672.151,606.355 672.71,610.654 673.269,647.43 673.829,650.785 674.388,651.142 674.947,671.52 675.506,643.792 676.066,693.953 676.625,679.429 677.184,682.826 677.743,667.317 678.303,684.557 678.862,653.782 679.421,672.32 679.981,710.141 680.54,709.335 681.099,745.666 681.658,759.952 682.218,772.109 682.777,769.17 683.336,767.545 683.895,782.958 684.455,761.667 685.014,757.403 685.573,768.13 686.132,792.773 686.692,756.038 687.251,786.423 687.81,801.042 688.369,814.279 688.929,774.862 689.488,786.043 690.047,813.64 690.606,822.659 691.166,803.542 691.725,800.371 692.284,795.191 692.843,823.731 693.403,768.404 693.962,765.845 694.521,776.078 695.08,768.961 695.64,780.953 696.199,773.254 696.758,770.14 697.317,781.493 697.877,774.584 698.436,751.138 698.995,735.055 699.554,750.506 700.114,716.398 700.673,715.581 701.232,711.691 701.791,727.609 702.351,726.225 702.91,660.155 703.469,675.892 704.028,692.305 704.588,675.735 705.147,676.154 705.706,693.548 706.265,710.146 706.825,726.553 707.384,710.97 707.943,741.417 708.502,737.367 709.062,751.941 709.621,799.06 710.18,758.248 710.739,775.157 711.299,768.567 711.858,766.492 712.417,748.516 712.976,743.064 713.536,722.602 714.095,706.293 714.654,704.166 715.213,719.292 715.773,716.004 716.332,699.844 716.891,681.971 717.45,633.719 718.01,656.74 718.569,670.809 719.128,703.786 719.687,701.541 720.247,715.477 720.806,697.259 721.365,760.286 721.924,801.817 722.484,749.837 723.043,731.776 723.602,700.616 724.161,668.916 724.721,666.593 725.28,668.851 725.839,655.415 726.398,644.505 726.958,662.811 727.517,649.567 728.076,649.619 728.635,647.546 729.195,651.963 729.754,653.563 730.313,624.701 730.872,628.416 731.432,651.049 731.991,585.08 732.55,576.418 733.109,581.3 733.669,584.273 734.228,574.155 734.787,577.02 735.346,572.236 735.906,596.95 736.465,634.685 737.024,667.253 737.583,683.447 738.143,667.99 738.702,718.396 739.261,712.807 739.82,678.075 740.38,679.366 740.939,695.36 741.498,693.324 742.057,706.605 742.617,720.364 743.176,703.206 743.735,702.392 744.294,687.275 744.854,671.718 745.413,641.635 745.972,625.708 746.531,626.121 747.091,629.181 747.65,616.516 748.209,624.985 748.768,658.783 749.328,660.862 749.887,663.832 750.446,698.558 751.005,717.531 751.565,715.932 752.124,712.396 752.683,759.169 753.242,737.813 753.802,735.761 754.361,718.408 754.92,698.614 755.479,697.075 756.039,634.698 756.598,654.18 757.157,675.894 757.716,688.915 758.276,703.285 758.835,737.91 759.394,732.568 759.953,696.279 760.513,664.811 761.072,649.985 761.631,654.527 762.19,676.87 762.75,610.894 763.309,582.523 763.868,605.895 764.427,610.081 764.987,647.048 765.546,634.014 766.105,686.81 766.664,685.68 767.224,667.135 767.783,699.154 768.342,761.968 768.901,791.953 769.461,817.322 770.02,792.785 770.579,802.73 771.138,778.959 771.698,722.989 772.257,690.497 772.816,656.54 773.375,671.86 773.935,705.495 774.494,754.384 775.053,753.029 775.612,748.033 776.172,743.893 776.731,773.45 777.29,752.516 777.849,735.761 778.409,720.463 778.968,685.359 779.527,683.616 780.086,684.172 780.646,669.837 781.205,688.194 781.764,641.191 782.323,642.992 782.883,629.321 783.442,601.944 784.001,605.888 784.56,623.731 785.12,623.753 785.679,628.924 786.238,632.959 786.797,667.386 787.357,669.93 787.916,641.336 788.475,647.912 789.034,635.723 789.594,656.056 790.153,645.551 790.712,644.282 791.271,665.046 791.831,667.733 792.39,638.938 792.949,606.755 793.508,610.404 794.068,613.555 794.627,618.033 795.186,624.162 795.745,593.291 796.305,613.498 796.864,633.402 797.423,636.149 797.982,620.746 798.542,608.728 799.101,596.424 799.66,618.578 800.219,640.603 800.779,627.52 801.338,646.99 801.897,662.876 802.456,713.151 803.016,733.374 803.575,700.932 804.134,700.164 804.693,718.567 805.253,718.493 805.812,716.395 806.371,748.311 806.931,727.468 807.49,708.107 808.049,755.849 808.608,737.395 809.168,735.806 809.727,732.168 810.286,696.116 810.845,699.546 811.405,717.417 811.964,714.612 812.523,760.785 813.082,755.454 813.642,734.931 814.201,669.628 814.76,668.935 815.319,667.031 815.879,652.252 816.438,634.44 816.997,618.257 817.556,605.533 818.116,564.765 818.675,559.399 819.234,585.331 819.793,576.069 820.353,549.894 820.912,576.458 821.471,583.065 822.03,588.349 822.59,582.444 823.149,606.214 823.708,597.586 824.267,583.485 824.827,589.648 825.386,565.948 825.945,558.955 826.504,580.756 827.064,604.318 827.623,623.383 828.182,610.339 828.741,615.053 829.301,620.191 829.86,643.318 830.419,661.519 830.978,693.444 831.538,692.802 832.097,662.493 832.656,663.075 833.215,667.914 833.775,700.263 834.334,701.451 834.893,715.339 835.452,717.467 836.012,650.468 836.571,669.374 837.13,622.957 837.689,611.913 838.249,632.32 838.808,634.155 839.367,637.669 839.926,652.074 840.486,650.814 841.045,635.04 841.604,682.705 842.163,665.732 842.723,684.758 843.282,671.38 843.841,658.645 844.4,657.952 844.96,706.364 845.519,722.309 846.078,699.807 846.637,699.366 847.197,695.911 847.756,674.794 848.315,676.346 848.874,662.005 849.434,662.7 849.993,678.444 850.552,661.808 851.111,678.372 851.671,682.049 852.23,685.59 852.789,685.258 853.348,684.117 853.908,699.041 854.467,717.45 855.026,734.528 855.585,765.348 856.145,823.647 856.704,784.78 857.263,780.642 857.822,776.288 858.382,786.842 858.941,768.119 859.5,751.661 860.059,747.566 860.619,774.41 861.178,782.424 861.737,728.674 862.296,678.295 862.856,724.251 863.415,739.485 863.974,736.791 864.533,737.871 865.093,717.477 865.652,744.987 866.211,708.931 866.77,708.475 867.33,711.026 867.889,725.151 868.448,725.104 869.007,751.988 869.567,734.759 870.126,713.945 870.685,728.748 871.244,745.965 871.804,744.05 872.363,740.356 872.922,736.209 873.481,750.795 874.041,749.534 874.6,729.918 875.159,697.413 875.718,682.748 876.278,687.298 876.837,704.336 877.396,719.226 877.955,703.825 878.515,721.495 879.074,737.53 879.633,688.017 880.192,699.986 880.752,698.904 881.311,714.872 881.87,711.946 882.429,724.45 882.989,723.58 883.548,720.04 884.107,717.611 884.666,730.602 885.226,743.111 885.785,689.177 886.344,672.949 886.903,672.344 887.463,687.954 888.022,687.808 888.581,688.247 889.14,689.003 889.7,673.327 890.259,675.191 890.818,674.912 891.377,659.282 891.937,659.541 892.496,677.3 893.055,675.33 893.614,691.824 894.174,674.758 894.733,707.722 895.292,723.241 895.851,752.369 896.411,763.307 896.97,731.867 897.529,715.949 898.088,730.961 898.648,715.756 899.207,699.042 899.766,747.325 900.325,727.719 900.885,724.208 901.444,708.679 902.003,707.356 902.562,707.501 903.122,690.287 903.681,688.081 904.24,720.779 904.799,736.533 905.359,736.282 905.918,749.301 906.477,730.489 907.036,698.958 907.596,730.926 908.155,711.619 908.714,710.031 909.273,712.846 909.833,728.267 910.392,742.504 910.951,753.727 911.51,767.679 912.07,729.584 912.629,681.855 913.188,682.873 913.747,682.477 914.307,681.297 914.866,714.934 915.425,670.004 915.984,701.722 916.544,685.956 917.103,688.465 917.662,689.301 918.221,674.929 918.781,677.723 919.34,710.467 919.899,722.058 920.458,714.973 921.018,730.544 921.577,727.449 922.136,758.09 922.695,724.908 923.255,693.731 923.814,691.881 924.373,739.143 924.932,716.585 925.492,712.694 926.051,709.058 926.61,690.856 927.169,707.642 927.729,706.74 928.288,705.283 928.847,704.387 929.406,686.943 929.966,702.84 930.525,698.758 931.084,666.417 931.644,668.065 932.203,701.44 932.762,697.192 933.321,631.534 933.881,649.942 934.44,667.061 934.999,652.221 935.558,655.906 936.118,624.692 936.677,624.835 937.236,678.882 937.795,667.47 938.355,639.034 938.914,627.351 939.473,659.718 940.032,691.869 940.592,655.483 941.151,677.465 941.71,693.459 942.269,711.555 942.829,710.533 943.388,768.887 943.947,764.721 944.506,729.39 945.066,744.172 945.625,757.072 946.184,751.807 946.743,767.908 947.303,748.53 947.862,749.441 948.421,759.816 948.98,742.29 949.54,803.187 950.099,747.579 950.658,776.279 951.217,740.495 951.777,705.489 952.336,703.961 952.895,720.744 953.454,719.263 954.014,733.79 954.573,695.805 955.132,666.645 955.691,649.53 956.251,685.754 956.81,684.526 957.369,685.329 957.928,669.027 958.488,684.785 959.047,652.656 959.606,638.885 960.165,623.118 960.725,610.867 961.284,615.876 961.843,621.837 962.402,627.39 962.962,632.372 963.521,668.946 964.08,652.349 964.639,641.503 965.199,660.057 965.758,626.878 966.317,612.506 966.876,617.605 967.436,638.169 967.995,654.459 968.554,640.773 969.113,628.402 969.673,599.517 970.232,623.623 970.791,641.129 971.35,657.109 971.91,638.742 972.469,639.444 973.028,624.428 973.587,658.48 974.147,660.962 974.706,695.42 975.265,678.66 975.824,678.039 976.384,645.621 976.943,648.565 977.502,650.769 978.061,647.367 978.621,699.787 979.18,681.167 979.739,670.244 980.298,672.403 980.858,689.754 981.417,691.804 981.976,674.688 982.535,690.184 983.095,692.523 983.654,690.606 984.213,661.647 984.772,680.637 985.332,680.85 985.891,713.71 986.45,697.02 987.009,712.328 987.569,712.482 988.128,694.82 988.687,708.975 989.246,692.434 989.806,710.338 990.365,711.888 990.924,711.432 991.483,710.122 992.043,677.933 992.602,657.519 993.161,689.943 993.72,675.546 994.28,679.63 994.839,664.565 995.398,663.942 995.957,632.709 996.517,651.588 997.076,652.516 997.635,685.608 998.194,680.931 998.754,665.322 999.313,665.376 999.872,649.64 1000.43,668.587 1000.99,653.164 1001.55,637.623 1002.11,606.381 1002.67,624.974 1003.23,643.336 1003.79,649.197 1004.35,649.891 1004.91,618.005 1005.46,590.945 1006.02,578.732 1006.58,603.011 1007.14,594.782 1007.7,633.077 1008.26,635.078 1008.82,639.753 1009.38,649.705 1009.94,684.72 1010.5,667.31 1011.06,685.249 1011.62,703.047 1012.18,635.22 1012.73,619.62 1013.29,640.963 1013.85,630.688 1014.41,633.769 1014.97,651.564 1015.53,672.272 1016.09,687.401 1016.65,687.39 1017.21,689.459 1017.77,690.254 1018.33,687.166 1018.89,687.249 1019.45,689.637 1020.01,706.941 1020.56,702.781 1021.12,700.389 1021.68,716.433 1022.24,714.259 1022.8,664.165 1023.36,664.355 1023.92,650.036 1024.48,650.42 1025.04,617.982 1025.6,619.886 1026.16,625.671 1026.72,628.75 1027.28,629.321 1027.83,648.92 1028.39,684.375 1028.95,733.993 1029.51,696.985 1030.07,679.105 1030.63,680.209 1031.19,696.275 1031.75,698.223 1032.31,697.206 1032.87,715.334 1033.43,714.319 1033.99,713.245 1034.55,724.105 1035.1,704.454 1035.66,720.763 1036.22,733.364 1036.78,747.653 1037.34,776.236 1037.9,755.3 1038.46,753.377 1039.02,714.026 1039.58,681.042 1040.14,661.996 1040.7,676.912 1041.26,658.307 1041.82,674.03 1042.38,690.931 1042.93,690.518 1043.49,706.036 1044.05,689.603 1044.61,642.751 1045.17,660.225 1045.73,663.442 1046.29,664.351 1046.85,662.277 1047.41,630.619 1047.97,599.719 1048.53,589.489 1049.09,595.425 1049.65,616.809 1050.2,637.32 1050.76,653.721 1051.32,684.671 1051.88,669.858 1052.44,670.731 1053,638.495 1053.56,673.283 1054.12,706.185 1054.68,684.465 1055.24,731.718 1055.8,730.508 1056.36,744.143 1056.92,774.034 1057.48,768.202 1058.03,765.697 1058.59,742.405 1059.15,753.88 1059.71,731.302 1060.27,746.442 1060.83,663.825 1061.39,635.314 1061.95,637.373 1062.51,640.153 1063.07,622.145 1063.63,640.879 1064.19,644.737 1064.75,647.835 1065.3,617.664 1065.86,620.229 1066.42,617.479 1066.98,619.386 1067.54,622.252 1068.1,642.675 1068.66,658.682 1069.22,657.424 1069.78,661.492 1070.34,646.116 1070.9,613.442 1071.46,618.843 1072.02,607.88 1072.57,615.196 1073.13,618.147 1073.69,619.277 1074.25,608.93 1074.81,608.083 1075.37,612.026 1075.93,611.097 1076.49,616.664 1077.05,636.498 1077.61,639.161 1078.17,624.951 1078.73,626.697 1079.29,612.173 1079.85,616.87 1080.4,650.062 1080.96,649.99 1081.52,651.727 1082.08,637.846 1082.64,662.155 1083.2,662.646 1083.76,664.761 1084.32,682.144 1084.88,716.921 1085.44,745.383 1086,713.099 1086.56,709.899 1087.12,689.584 1087.67,688.359 1088.23,703.678 1088.79,717.985 1089.35,699.149 1089.91,714.343 1090.47,731.46 1091.03,758.395 1091.59,738.231 1092.15,715.977 1092.71,716.582 1093.27,728.784 1093.83,758.295 1094.39,772.112 1094.94,801.045 1095.5,795.787 1096.06,790.708 1096.62,815.582 1097.18,794.547 1097.74,774.96 1098.3,755.241 1098.86,751.811 1099.42,815.025 1099.98,840.746 1100.54,848.473 1101.1,856.324 1101.66,848.451 1102.22,873.53 1102.77,875.247 1103.33,865.531 1103.89,857.367 1104.45,913.091 1105.01,834.608 1105.57,860.269 1106.13,818.059 1106.69,844.204 1107.25,850.35 1107.81,793.665 1108.37,817.944 1108.93,773.674 1109.49,773.782 1110.04,766.468 1110.6,778.19 1111.16,774.627 1111.72,735.333 1112.28,732.174 1112.84,763.433 1113.4,755.895 1113.96,765.781 1114.52,731.875 1115.08,728.126 1115.64,725.484 1116.2,734.937 1116.76,749.943 1117.31,747.812 1117.87,681.88 1118.43,682.709 1118.99,734.473 1119.55,747.712 1120.11,777.666 1120.67,772.332 1121.23,782.273 1121.79,790.654 1122.35,768.372 1122.91,763.534 1123.47,758.601 1124.03,754.199 1124.59,732.765 1125.14,733.817 1125.7,761.667 1126.26,776.744 1126.82,787.471 1127.38,769.139 1127.94,765.972 1128.5,777.791 1129.06,754.038 1129.62,752.758 1130.18,765.757 1130.74,709.809 1131.3,727.104 1131.86,690.282 1132.41,672.946 1132.97,655.257 1133.53,655.453 1134.09,656.178 1134.65,674.686 1135.21,661.366 1135.77,666.32 1136.33,668.164 1136.89,653.87 1137.45,622.745 1138.01,606.166 1138.57,528.543 1139.13,551.445 1139.68,545.083 1140.24,535.364 1140.8,560.066 1141.36,580.681 1141.92,589.258 1142.48,592.866 1143.04,596.888 1143.6,583.361 1144.16,603.666 1144.72,623.119 1145.28,626.818 1145.84,629.621 1146.4,617.039 1146.96,588.072 1147.51,609.029 1148.07,629.327 1148.63,632.082 1149.19,654.26 1149.75,656.018 1150.31,612.263 1150.87,650.615 1151.43,651.549 1151.99,634.358 1152.55,623.186 1153.11,627.132 1153.67,630.548 1154.23,616.878 1154.78,634.005 1155.34,618.525 1155.9,623.537 1156.46,629.117 1157.02,665.74 1157.58,681.285 1158.14,683.735 1158.7,685.108 1159.26,653.032 1159.82,641.762 1160.38,629.116 1160.94,630.851 1161.5,598.388 1162.05,634.133 1162.61,605.692 1163.17,611.777 1163.73,627.992 1164.29,587.335 1164.85,573.854 1165.41,579.504 1165.97,585.164 1166.53,575.856 1167.09,581.445 1167.65,619.401 1168.21,636.622 1168.77,685.454 1169.33,653.136 1169.88,654.063 1170.44,656.338 1171,675.151 1171.56,688.387 1172.12,653.563 1172.68,657.031 1173.24,673.597 1173.8,640.422 1174.36,657.529 1174.92,630.52 1175.48,619.002 1176.04,627.038 1176.6,630.581 1177.15,615.141 1177.71,654.935 1178.27,642.216 1178.83,657.877 1179.39,657.781 1179.95,660.487 1180.51,630.018 1181.07,628.311 1181.63,631.145 1182.19,649.477 1182.75,637.142 1183.31,655.167 1183.87,655.437 1184.43,624.784 1184.98,644.92 1185.54,648.975 1186.1,678.552 1186.66,678.831 1187.22,615.175 1187.78,667.889 1188.34,654.962 1188.9,656.982 1189.46,691.76 1190.02,708.445 1190.58,741.19 1191.14,725.037 1191.7,755.64 1192.25,751.479 1192.81,764.205 1193.37,793.868 1193.93,789.624 1194.49,816.425 1195.05,792.932 1195.61,803.736 1196.17,795.005 1196.73,789.897 1197.29,767.289 1197.85,742.295 1198.41,739.836 1198.97,719.783 1199.52,699.788 1200.08,699.503 1200.64,718.165 1201.2,685.142 1201.76,684.516 1202.32,703.362 1202.88,720.443 1203.44,736.181 1204,704.318 1204.56,754.496 1205.12,767.346 1205.68,747.829 1206.24,759.16 1206.8,723.846 1207.35,677.35 1207.91,691.089 1208.47,706.254 1209.03,705.924 1209.59,689.09 1210.15,702.702 1210.71,703.324 1211.27,685.259 1211.83,714.446 1212.39,711.329 1212.95,709.227 1213.51,708.977 1214.07,691.33 1214.62,710.198 1215.18,675.066 1215.74,673.967 1216.3,660.081 1216.86,681.466 1217.42,682.971 1217.98,685.129 1218.54,684.846 1219.1,718.505 1219.66,700.943 1220.22,668.468 1220.78,652.533 1221.34,636.915 1221.89,655.71 1222.45,691.337 1223.01,693.994 1223.57,678.782 1224.13,669.72 1224.69,688.524 1225.25,672.382 1225.81,638.737 1226.37,625.606 1226.93,646.431 1227.49,665.573 1228.05,667.537 1228.61,703.432 1229.17,687.893 1229.72,691.325 1230.28,706.686 1230.84,706.728 1231.4,722.25 1231.96,737.255 1232.52,719.965 1233.08,687.289 1233.64,718.205 1234.2,732.251 1234.76,743.52 1235.32,770.399 1235.88,769.576 1236.44,761.629 1236.99,756.883 1237.55,753.166 1238.11,734.475 1238.67,700.671 1239.23,697.47 1239.79,695.901 1240.35,696.211 1240.91,683.335 1241.47,616.997 1242.03,591.345 1242.59,548.028 1243.15,603.209 1243.71,607.018 1244.26,624.789 1244.82,578.536 1245.38,599.815 1245.94,576.277 1246.5,581.274 1247.06,585.771 1247.62,606.977 1248.18,598.418 1248.74,604.854 1249.3,624.936 1249.86,640.775 1250.42,643.456 1250.98,647.985 1251.54,633.54 1252.09,651.645 1252.65,673.793 1253.21,659.024 1253.77,659.397 1254.33,708.164 1254.89,709.467 1255.45,738.802 1256.01,732.575 1256.57,731.329 1257.13,728.527 1257.69,725.639 1258.25,743.574 1258.81,756.134 1259.36,799.511 1259.92,814.468 1260.48,793.073 1261.04,771.182 1261.6,765.185 1262.16,730.823 1262.72,694.751 1263.28,709.478 1263.84,709.653 1264.4,711.719 1264.96,707.813 1265.52,707.795 1266.08,704.99 1266.63,705.321 1267.19,685.807 1267.75,716.151 1268.31,709.27 1268.87,723.009 1269.43,670.84 1269.99,687.63 1270.55,687.232 1271.11,702.106 1271.67,730.847 1272.23,694.231 1272.79,706.251 1273.35,735.793 1273.91,718.618 1274.46,682.413 1275.02,647.392 1275.58,646.518 1276.14,632.014 1276.7,617.359 1277.26,605.268 1277.82,607.516 1278.38,595.888 1278.94,617.531 1279.5,622.891 1280.06,609.624 1280.62,597.425 1281.18,604.156 1281.73,625.814 1282.29,630.925 1282.85,649.986 1283.41,638.57 1283.97,656.706 1284.53,656.239 1285.09,671.104 1285.65,656.53 1286.21,627.27 1286.77,646.743 1287.33,650.411 1287.89,654.797 1288.45,622.342 1289,673.967 1289.56,709.909 1290.12,724.86 1290.68,755.691 1291.24,717.8 1291.8,737.318 1292.36,717.944 1292.92,698.039 1293.48,693.244 1294.04,688.431 1294.6,676.748 1295.16,711.099 1295.72,675.535 1296.28,675.541 1296.83,676.88 1297.39,722.787 1297.95,723.179 1298.51,722.283 1299.07,737.731 1299.63,746.922 1300.19,694.164 1300.75,711.892 1301.31,681.989 1301.87,617.331 1302.43,639.782 1302.99,609.531 1303.55,616.009 1304.1,619.7 1304.66,607.385 1305.22,643.866 1305.78,644.558 1306.34,634.021 1306.9,619.81 1307.46,640.029 1308.02,642.893 1308.58,664.532 1309.14,665.587 1309.7,668.128 1310.26,668.846 1310.82,667.138 1311.38,664.537 1311.93,680.206 1312.49,667.724 1313.05,650.619 1313.61,638.823 1314.17,644.024 1314.73,663.101 1315.29,677.461 1315.85,730.253 1316.41,711.55 1316.97,708.166 1317.53,690.002 1318.09,658.628 1318.65,656.043 1319.2,643.279 1319.76,645.954 1320.32,615.796 1320.88,589.683 1321.44,608.858 1322,611.451 1322.56,631.718 1323.12,650.543 1323.68,648.555 1324.24,634.583 1324.8,617.351 1325.36,634.694 1325.92,637.054 1326.47,639.921 1327.03,675.54 1327.59,660.631 1328.15,674.327 1328.71,659.391 1329.27,663.724 1329.83,683.379 1330.39,699.906 1330.95,697.385 1331.51,695.769 1332.07,711.153 1332.63,725.835 1333.19,723.884 1333.75,703.996 1334.3,668.625 1334.86,634.57 1335.42,643.192 1335.98,613.608 1336.54,602.849 1337.1,608.51 1337.66,617.952 1338.22,622.695 1338.78,622.23 1339.34,591.692 1339.9,616.282 1340.46,633.281 1341.02,637.813 1341.57,669.389 1342.13,655.749 1342.69,658.052 1343.25,675.201 1343.81,723.472 1344.37,737.661 1344.93,732.458 1345.49,714.405 1346.05,715.464 1346.61,682.467 1347.17,698.587 1347.73,727.571 1348.29,724.247 1348.84,721.705 1349.4,733.816 1349.96,714.69 1350.52,731.693 1351.08,743.923 1351.64,759.527 1352.2,704.546 1352.76,721.308 1353.32,704.595 1353.88,701.507 1354.44,685.049 1355,667.891 1355.56,652.474 1356.12,639.42 1356.67,656.627 1357.23,642.865 1357.79,660.699 1358.35,693.913 1358.91,695.706 1359.47,723.942 1360.03,722.236 1360.59,734.084 1361.15,746.231 1361.71,743.822 1362.27,759.247 1362.83,786.733 1363.39,798.008 1363.94,804.909 1364.5,784.741 1365.06,798.092 1365.62,776.075 1366.18,769.212 1366.74,765.858 1367.3,762.714 1367.86,723.406 1368.42,718.866 1368.98,732.553 1369.54,728.283 1370.1,724.723 1370.66,724.737 1371.21,721.34 1371.77,683.018 1372.33,697.173 1372.89,711.394 1373.45,759.153 1374.01,788.865 1374.57,798.424 1375.13,815.115 1375.69,854.775 1376.25,849.187 1376.81,841.4 1377.37,802.141 1377.93,780.72 1378.49,742.159 1379.04,721.047 1379.6,667.541 1380.16,669.901 1380.72,651.452 1381.28,636.009 1381.84,656.966 1382.4,640.427 1382.96,629.265 1383.52,615.345 1384.08,634.324 1384.64,670.005 1385.2,688.037 1385.76,685.238 1386.31,679.915 1386.87,677.89 1387.43,676.654 1387.99,676.902 1388.55,673.326 1389.11,672.807 1389.67,657.833 1390.23,707.838 1390.79,736.824 1391.35,750.05 1391.91,745.129 1392.47,742.369 1393.03,770.924 1393.58,751.159 1394.14,731.676 1394.7,724.928 1395.26,723.331 1395.82,705.844 1396.38,656.453 1396.94,674.41 1397.5,690.293 1398.06,688.462 1398.62,689.488 1399.18,704.68 1399.74,684.873 1400.3,683.611 1400.86,648.828 1401.41,651.347 1401.97,655.492 1402.53,655.92 1403.09,662.171 1403.65,696.624 1404.21,710.038 1404.77,708.689 1405.33,706.607 1405.89,675.025 1406.45,672.825 1407.01,675.839 1407.57,663.343 1408.13,649.792 1408.68,650.074 1409.24,667.765 1409.8,682.963 1410.36,683.649 1410.92,669.939 1411.48,687.867 1412.04,673.13 1412.6,673.692 1413.16,657.072 1413.72,673.581 1414.28,674.704 1414.84,678.633 1415.4,682.082 1415.95,699.646 1416.51,693.845 1417.07,726.095 1417.63,725.799 1418.19,708.352 1418.75,674.303 1419.31,641.195 1419.87,612.2 1420.43,636.214 1420.99,625.231 1421.55,628.917 1422.11,630.656 1422.67,587.016 1423.23,610.985 1423.78,650.741 1424.34,636.703 1424.9,655.205 1425.46,640.94 1426.02,589.823 1426.58,598.407 1427.14,619.866 1427.7,572.494 1428.26,580.621 1428.82,583.221 1429.38,588.335 1429.94,640.27 1430.5,610.434 1431.05,610.749 1431.61,617.975 1432.17,682.748 1432.73,665.87 1433.29,697.91 1433.85,729.603 1434.41,711.027 1434.97,727.602 1435.53,722.759 1436.09,764.917 1436.65,760.991 1437.21,755.657 1437.77,753.386 1438.33,763.905 1438.88,776.545 1439.44,769.906 1440,753.285 1440.56,733.266 1441.12,697.958 1441.68,712.15 1442.24,710.595 1442.8,723.67 1443.36,722.208 1443.92,734.915 1444.48,719.749 1445.04,716.951 1445.6,732.624 1446.15,730.316 1446.71,745.235 1447.27,724.362 1447.83,722.524 1448.39,721.15 1448.95,718.178 1449.51,685.277 1450.07,704.298 1450.63,721.061 1451.19,685.36 1451.75,688.204 1452.31,654.16 1452.87,653.689 1453.42,655.917 1453.98,659.365 1454.54,662.605 1455.1,642.767 1455.66,627.463 1456.22,636.561 1456.78,610.108 1457.34,593.983 1457.9,584.23 1458.46,559.168 1459.02,551.493 1459.58,528.137 1460.14,555.317 1460.7,560.495 1461.25,533.738 1461.81,543.057 1462.37,568.919 1462.93,560.815 1463.49,618.477 1464.05,652.223 1464.61,670.63 1465.17,653.256 1465.73,637.661 1466.29,639.654 1466.85,659.963 1467.41,641.484 1467.97,643.513 1468.52,678.799 1469.08,689.748 1469.64,705.48 1470.2,688.469 1470.76,690.141 1471.32,689.764 1471.88,687.966 1472.44,674.326 1473,690.938 1473.56,706.903 1474.12,673.494 1474.68,673.785 1475.24,689.712 1475.79,673.931 1476.35,688.043 1476.91,704.721 1477.47,704.18 1478.03,721.068 1478.59,820.797 1479.15,813.903 1479.71,791.11 1480.27,770.712 1480.83,764.853 1481.39,792.503 1481.95,786.651 1482.51,729.361 1483.07,727.29 1483.62,726.535 1484.18,754.177 1484.74,750.936 1485.3,766.428 1485.86,762.987 1486.42,759.532 1486.98,742.503 1487.54,738.789 1488.1,704.39 1488.66,703.768 1489.22,748.189 1489.78,727.943 1490.34,725.885 1490.89,723.589 1491.45,723.843 1492.01,705.234 1492.57,718.659 1493.13,749.476 1493.69,777.78 1494.25,757.206 1494.81,720.673 1495.37,736.549 1495.93,748.356 1496.49,792.611 1497.05,788.008 1497.61,751.554 1498.16,731.147 1498.72,712.915 1499.28,709.308 1499.84,706.657 1500.4,691.094 1500.96,687.833 1501.52,668.951 1502.08,669.774 1502.64,650.563 1503.2,652.105 1503.76,686.491 1504.32,686.413 1504.88,685.869 1505.44,655.534 1505.99,706.825 1506.55,756.321 1507.11,770.88 1507.67,751.072 1508.23,731.299 1508.79,710.181 1509.35,690.838 1509.91,656.255 1510.47,611.44 1511.03,667.455 1511.59,669.464 1512.15,673.209 1512.71,672.682 1513.26,688.674 1513.82,689.284 1514.38,719.326 1514.94,717.928 1515.5,733.88 1516.06,731.071 1516.62,726.221 1517.18,752.826 1517.74,752.338 1518.3,759.746 1518.86,754.482 1519.42,781.769 1519.98,760.932 1520.53,759.038 1521.09,768.856 1521.65,736.638 1522.21,735.14 1522.77,731.606 1523.33,762.491 1523.89,788.707 1524.45,780.701 1525.01,758.12 1525.57,720.725 1526.13,720.315 1526.69,736.33 1527.25,734.612 1527.81,702.337 1528.36,700.052 1528.92,696.997 1529.48,674.272 1530.04,672.909 1530.6,709.123 1531.16,707.936 1531.72,739.416 1532.28,738.508 1532.84,733.839 1533.4,719.62 1533.96,746.382 1534.52,709.181 1535.08,706.387 1535.63,691.112 1536.19,647.747 1536.75,652.936 1537.31,636.827 1537.87,638.349 1538.43,624.509 1538.99,610.229 1539.55,614.402 1540.11,637.518 1540.67,654.394 1541.23,656.521 1541.79,674.486 1542.35,689.069 1542.9,675.14 1543.46,646.556 1544.02,663.381 1544.58,651.335 1545.14,636.368 1545.7,639.123 1546.26,624.819 1546.82,643.473 1547.38,646.255 1547.94,668.174 1548.5,682.416 1549.06,630.863 1549.62,633.129 1550.18,651.222 1550.73,667.734 1551.29,669.408 1551.85,670.038 1552.41,688.797 1552.97,722.179 1553.53,738.26 1554.09,731.712 1554.65,746.061 1555.21,728.32 1555.77,757.57 1556.33,740.261 1556.89,738.552 1557.45,734.155 1558,729.747 1558.56,738.181 1559.12,717.253 1559.68,681.364 1560.24,700.068 1560.8,684.624 1561.36,683.602 1561.92,699.294 1562.48,714.949 1563.04,697.158 1563.6,699.317 1564.16,684.662 1564.72,700.347 1565.28,701.785 1565.83,683.669 1566.39,715.683 1566.95,731.53 1567.51,729.759 1568.07,726.224 1568.63,740.344 1569.19,723.071 1569.75,737.337 1570.31,716.642 1570.87,703.025 1571.43,717.251 1571.99,715.872 1572.55,696.262 1573.1,712.9 1573.66,712.295 1574.22,708.387 1574.78,707.224 1575.34,709.704 1575.9,754.314 1576.46,716.37 1577.02,714.951 1577.58,710.749 1578.14,726.794 1578.7,742.159 1579.26,706.536 1579.82,706.4 1580.37,722.112 1580.93,721.766 1581.49,700.786 1582.05,714.58 1582.61,694.925 1583.17,713.805 1583.73,709.627 1584.29,709.765 1584.85,659.821 1585.41,610.728 1585.97,597.676 1586.53,602.07 1587.09,620.703 1587.65,589.585 1588.2,597.475 1588.76,602.575 1589.32,639.743 1589.88,660.057 1590.44,677.969 1591,662.474 1591.56,692.23 1592.12,655.561 1592.68,637.355 1593.24,604.64 1593.8,596.06 1594.36,583.335 1594.92,587.293 1595.47,559.131 1596.03,532.446 1596.59,537.65 1597.15,498.652 1597.71,524.504 1598.27,550.036 1598.83,571.188 1599.39,526.811 1599.95,567.18 1600.51,557.82 1601.07,564.981 1601.63,535.864 1602.19,529.94 1602.74,538.962 1603.3,546.856 1603.86,540.615 1604.42,516.485 1604.98,510.024 1605.54,518.572 1606.1,542.397 1606.66,549.513 1607.22,539.248 1607.78,579.844 1608.34,600.301 1608.9,622.954 1609.46,628.526 1610.02,665.182 1610.57,651.329 1611.13,650.261 1611.69,668.019 1612.25,686.885 1612.81,685.119 1613.37,687.415 1613.93,655.972 1614.49,657.254 1615.05,658.858 1615.61,628.13 1616.17,636.792 1616.73,655.29 1617.29,628.24 1617.84,632.114 1618.4,634.074 1618.96,669.367 1619.52,734.956 1620.08,747.247 1620.64,761.523 1621.2,741.117 1621.76,756.529 1622.32,768.211 1622.88,764.468 1623.44,760.639 1624,758.695 1624.56,788.932 1625.11,736.014 1625.67,736.77 1626.23,714.936 1626.79,695.941 1627.35,683.983 1627.91,686.92 1628.47,670.48 1629.03,702.954 1629.59,682.094 1630.15,666.069 1630.71,666.188 1631.27,633.967 1631.83,606.921 1632.39,609.705 1632.94,609.816 1633.5,594.621 1634.06,614.305 1634.62,636.55 1635.18,640.289 1635.74,612.607 1636.3,600.359 1636.86,603.951 1637.42,624.698 1637.98,627.951 1638.54,633.61 1639.1,670.014 1639.66,640.918 1640.21,628.197 1640.77,598.524 1641.33,621.802 1641.89,626.663 1642.45,584.672 1643.01,574.696 1643.57,586.447 1644.13,573.126 1644.69,594.592 1645.25,632.008 1645.81,648.821 1646.37,653.029 1646.93,656.215 1647.48,654.34 1648.04,653.476 1648.6,671.755 1649.16,672.162 1649.72,687.358 1650.28,671.769 1650.84,674.487 1651.4,706.945 1651.96,707.658 1652.52,708.605 1653.08,739.928 1653.64,738.125 1654.2,737.478 1654.76,714.774 1655.31,697.739 1655.87,681.363 1656.43,679.184 1656.99,693.509 1657.55,708.461 1658.11,705.996 1658.67,671.649 1659.23,656.747 1659.79,693.081 1660.35,676.158 1660.91,675.778 1661.47,692.743 1662.03,690.682 1662.58,690.304 1663.14,691.2 1663.7,656.871 1664.26,644.084 1664.82,678.095 1665.38,695.742 1665.94,726.488 1666.5,725.146 1667.06,738.697 1667.62,735.979 1668.18,732.878 1668.74,696.619 1669.3,696.762 1669.85,723.298 1670.41,736.221 1670.97,734.261 1671.53,712.927 1672.09,732.262 1672.65,729.137 1673.21,708.762 1673.77,708.638 1674.33,692.749 1674.89,676.754 1675.45,643.498 1676.01,629.303 1676.57,682.35 1677.13,680.115 1677.68,664.233 1678.24,664.51 1678.8,649.361 1679.36,650.84 1679.92,666.594 1680.48,684.284 1681.04,667.513 1681.6,667.641 1682.16,637.394 1682.72,623.759 1683.28,626.215 1683.84,659.585 1684.4,675.591 1684.95,676.048 1685.51,660.749 1686.07,681.046 1686.63,681.975 1687.19,648.587 1687.75,664.265 1688.31,681.608 1688.87,697.783 1689.43,680.473 1689.99,694.999 1690.55,694.861 1691.11,693.643 1691.67,658.85 1692.23,641.093 1692.78,611.475 1693.34,618.193 1693.9,639.267 1694.46,670.714 1695.02,670.667 1695.58,683.851 1696.14,701.918 1696.7,684.523 1697.26,684.659 1697.82,684.77 1698.38,666.176 1698.94,695.381 1699.5,713.47 1700.05,708.625 1700.61,720.577 1701.17,717.829 1701.73,734.711 1702.29,796.282 1702.85,791.393 1703.41,768.411 1703.97,759.928 1704.53,790.284 1705.09,767.912 1705.65,824.207 1706.21,816.597 1706.77,807.628 1707.32,798.844 1707.88,762.777 1708.44,806.402 1709,802.376 1709.56,744.962 1710.12,736.792 1710.68,784.815 1711.24,779.807 1711.8,757.667 1712.36,772.673 1712.92,753.195 1713.48,731.287 1714.04,713.437 1714.6,725.04 1715.15,720.812 1715.71,753.712 1716.27,731.773 1716.83,729.427 1717.39,727.852 1717.95,739.169 1718.51,766.522 1719.07,742.851 1719.63,738.811 1720.19,702.993 1720.75,716.58 1721.31,733.143 1721.87,695.891 1722.42,712.004 1722.98,708.8 1723.54,688.901 1724.1,686.743 1724.66,699.174 1725.22,728.87 1725.78,742.912 1726.34,722.066 1726.9,720.127 1727.46,750.567 1728.02,730.968 1728.58,697.524 1729.14,730.64 1729.69,743.945 1730.25,742.746 1730.81,723.311 1731.37,705.03 1731.93,718.404 1732.49,669.375 1733.05,670.223 1733.61,668.828 1734.17,669.628 1734.73,701.627 1735.29,699.148 1735.85,699.508 1736.41,748.278 1736.97,712.415 1737.52,692.966 1738.08,673.891 1738.64,689.389 1739.2,720.839 1739.76,701.441 1740.32,716.083 1740.88,712.111 1741.44,696.585 1742,697.134 1742.56,696.524 1743.12,632.236 1743.68,636.393 1744.24,618.876 1744.79,620.87 1745.35,640.221 1745.91,640.052 1746.47,659.429 1747.03,659.797 1747.59,628.445 1748.15,598.171 1748.71,588.442 1749.27,608.751 1749.83,580.245 1750.39,603.539 1750.95,654.42 1751.51,619.743 1752.06,606.85 1752.62,610.707 1753.18,632.919 1753.74,651.809 1754.3,684.325 1754.86,687.021 1755.42,685.927 1755.98,669.813 1756.54,669.306 1757.1,687.542 1757.66,669.295 1758.22,667.227 1758.78,670.858 1759.34,685.186 1759.89,718.055 1760.45,696.74 1761.01,684.614 1761.57,714.971 1762.13,698.903 1762.69,699.939 1763.25,711.517 1763.81,712.918 1764.37,728.693 1764.93,726.532 1765.49,739.948 1766.05,739.505 1766.61,751.067 1767.16,730.124 1767.72,744.454 1768.28,758.768 1768.84,773.248 1769.4,785.936 1769.96,781.859 1770.52,778.2 1771.08,790.886 1771.64,783.559 1772.2,763.621 1772.76,789.525 1773.32,799.826 1773.88,776.48 1774.43,816.942 1774.99,796.628 1775.55,773.262 1776.11,748.337 1776.67,743.191 1777.23,721.077 1777.79,701.186 1778.35,701.42 1778.91,715.521 1779.47,713.199 1780.03,693.778 1780.59,740.464 1781.15,735.351 1781.71,732.269 1782.26,715.345 1782.82,744.686 1783.38,724.954 1783.94,706.945 1784.5,689.109 1785.06,691.483 1785.62,706.452 1786.18,657.104 1786.74,611.699 1787.3,613.02 1787.86,629.066 1788.42,663.976 1788.98,632.202 1789.53,648.715 1790.09,633.759 1790.65,637.272 1791.21,672.319 1791.77,702.995 1792.33,686.656 1792.89,687.199 1793.45,673.69 1794.01,690.154 1794.57,687.848 1795.13,699.694 1795.69,669.974 1796.25,622.561 1796.8,605.77 1797.36,660.185 1797.92,676.481 1798.48,680.189 1799.04,648.261 1799.6,617.301 1800.16,620.728 1800.72,606.814 1801.28,595.126 1801.84,599.663 1802.4,589.991 1802.96,608.797 1803.52,596.58 1804.08,616.483 1804.63,651.098 1805.19,656.921 1805.75,658.702 1806.31,660.354 1806.87,662.688 1807.43,643.567 1807.99,594.809 1808.55,615.803 1809.11,603.32 1809.67,644.561 1810.23,628.485 1810.79,633.387 1811.35,638.018 1811.9,655.091 1812.46,660.033 1813.02,645.51 1813.58,627.645 1814.14,664.653 1814.7,697.48 1815.26,680.578 1815.82,696.142 1816.38,712.703 1816.94,697.833 1817.5,647.644 1818.06,664.647 1818.62,662.623 1819.18,709.04 1819.73,706.77 1820.29,709.16 1820.85,722.872 1821.41,722.132 1821.97,685.877 1822.53,667.668 1823.09,705.272 1823.65,704.452 1824.21,638.64 1824.77,624.508 1825.33,628.703 1825.89,649.743 1826.45,666.024 1827,647.462 1827.56,650.537 1828.12,622.034 1828.68,621.902 1829.24,643.758 1829.8,612.977 1830.36,618.83 1830.92,639.161 1831.48,622.556 1832.04,639.264 1832.6,674.369 1833.16,691.378 1833.72,690.998 1834.27,707.917 1834.83,692.46 1835.39,688.901 1835.95,689.891 1836.51,687.598 1837.07,674.536 1837.63,672.947 1838.19,674.355 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 689.397 L720.806 689.397 L721.365 689.397 L721.924 689.397 L722.484 689.397 L723.043 689.397 L723.602 689.397 L724.161 689.397 L724.721 689.397 L725.28 689.397 L725.839 689.397 L726.398 689.397 L726.958 689.397 L727.517 689.397 L728.076 689.397 L728.635 689.397 L729.195 689.397 L729.754 689.397 L730.313 689.397 L730.872 689.397 L731.432 689.397 L731.991 689.397 L732.55 689.397 L733.109 689.397 L733.669 689.397 L734.228 689.397 L734.787 689.397 L735.346 689.397 L735.906 689.397 L736.465 689.397 L737.024 689.397 L737.583 689.397 L738.143 689.397 L738.702 689.397 L739.261 689.397 L739.82 689.397 L740.38 689.397 L740.939 689.397 L741.498 689.397 L742.057 689.397 L742.617 689.397 L743.176 689.397 L743.735 689.397 L744.294 689.397 L744.854 689.397 L745.413 689.397 L745.972 689.397 L746.531 689.397 L747.091 689.397 L747.65 689.397 L748.209 689.397 L748.768 689.397 L749.328 689.397 L749.887 689.397 L750.446 689.397 L751.005 689.397 L751.565 689.397 L752.124 689.397 L752.683 689.397 L753.242 689.397 L753.802 689.397 L754.361 689.397 L754.92 689.397 L755.479 689.397 L756.039 689.397 L756.598 689.397 L757.157 689.397 L757.716 689.397 L758.276 689.397 L758.835 689.397 L759.394 689.397 L759.953 689.397 L760.513 689.397 L761.072 689.397 L761.631 689.397 L762.19 689.397 L762.75 689.397 L763.309 689.397 L763.868 689.397 L764.427 689.397 L764.987 689.397 L765.546 689.397 L766.105 689.397 L766.664 689.397 L767.224 689.397 L767.783 689.397 L768.342 689.397 L768.901 689.397 L769.461 689.397 L770.02 689.397 L770.579 689.397 L771.138 689.397 L771.698 689.397 L772.257 689.397 L772.816 689.397 L773.375 689.397 L773.935 689.397 L774.494 689.397 L775.053 689.397 L775.612 689.397 L776.172 689.397 L776.731 689.397 L777.29 689.397 L777.849 689.397 L778.409 689.397 L778.968 689.397 L779.527 689.397 L780.086 689.397 L780.646 689.397 L781.205 689.397 L781.764 689.397 L782.323 689.397 L782.883 689.397 L783.442 689.397 L784.001 689.397 L784.56 689.397 L785.12 689.397 L785.679 689.397 L786.238 689.397 L786.797 689.397 L787.357 689.397 L787.916 689.397 L788.475 689.397 L789.034 689.397 L789.594 689.397 L790.153 689.397 L790.712 689.397 L791.271 689.397 L791.831 689.397 L792.39 689.397 L792.949 689.397 L793.508 689.397 L794.068 689.397 L794.627 689.397 L795.186 689.397 L795.745 689.397 L796.305 689.397 L796.864 689.397 L797.423 689.397 L797.982 689.397 L798.542 689.397 L799.101 689.397 L799.66 689.397 L800.219 689.397 L800.779 689.397 L801.338 689.397 L801.897 689.397 L802.456 689.397 L803.016 689.397 L803.575 689.397 L804.134 689.397 L804.693 689.397 L805.253 689.397 L805.812 689.397 L806.371 689.397 L806.931 689.397 L807.49 689.397 L808.049 689.397 L808.608 689.397 L809.168 689.397 L809.727 689.397 L810.286 689.397 L810.845 689.397 L811.405 689.397 L811.964 689.397 L812.523 689.397 L813.082 689.397 L813.642 689.397 L814.201 689.397 L814.76 689.397 L815.319 689.397 L815.879 689.397 L816.438 689.397 L816.997 689.397 L817.556 689.397 L818.116 689.397 L818.675 689.397 L819.234 689.397 L819.793 689.397 L820.353 689.397 L820.912 689.397 L821.471 689.397 L822.03 689.397 L822.59 689.397 L823.149 689.397 L823.708 689.397 L824.267 689.397 L824.827 689.397 L825.386 689.397 L825.945 689.397 L826.504 689.397 L827.064 689.397 L827.623 689.397 L828.182 689.397 L828.741 689.397 L829.301 689.397 L829.86 689.397 L830.419 689.397 L830.978 689.397 L831.538 689.397 L832.097 689.397 L832.656 689.397 L833.215 689.397 L833.775 689.397 L834.334 689.397 L834.893 689.397 L835.452 689.397 L836.012 689.397 L836.571 689.397 L837.13 689.397 L837.689 689.397 L838.249 689.397 L838.808 689.397 L839.367 689.397 L839.926 689.397 L840.486 689.397 L841.045 689.397 L841.604 689.397 L842.163 689.397 L842.723 689.397 L843.282 689.397 L843.841 689.397 L844.4 689.397 L844.96 689.397 L845.519 689.397 L846.078 689.397 L846.637 689.397 L847.197 689.397 L847.756 689.397 L848.315 689.397 L848.874 689.397 L849.434 689.397 L849.993 689.397 L850.552 689.397 L851.111 689.397 L851.671 689.397 L852.23 689.397 L852.789 689.397 L853.348 689.397 L853.908 689.397 L854.467 689.397 L855.026 689.397 L855.585 689.397 L856.145 689.397 L856.704 689.397 L857.263 689.397 L857.822 689.397 L858.382 689.397 L858.941 689.397 L859.5 689.397 L860.059 689.397 L860.619 689.397 L861.178 689.397 L861.737 689.397 L862.296 689.397 L862.856 689.397 L863.415 689.397 L863.974 689.397 L864.533 689.397 L865.093 689.397 L865.652 689.397 L866.211 689.397 L866.77 689.397 L867.33 689.397 L867.889 689.397 L868.448 689.397 L869.007 689.397 L869.567 689.397 L870.126 689.397 L870.685 689.397 L871.244 689.397 L871.804 689.397 L872.363 689.397 L872.922 689.397 L873.481 689.397 L874.041 689.397 L874.6 689.397 L875.159 689.397 L875.718 689.397 L876.278 689.397 L876.837 689.397 L877.396 689.397 L877.955 689.397 L878.515 689.397 L879.074 689.397 L879.633 689.397 L880.192 689.397 L880.752 689.397 L881.311 689.397 L881.87 689.397 L882.429 689.397 L882.989 689.397 L883.548 689.397 L884.107 689.397 L884.666 689.397 L885.226 689.397 L885.785 689.397 L886.344 689.397 L886.903 689.397 L887.463 689.397 L888.022 689.397 L888.581 689.397 L889.14 689.397 L889.7 689.397 L890.259 689.397 L890.818 689.397 L891.377 689.397 L891.937 689.397 L892.496 689.397 L893.055 689.397 L893.614 689.397 L894.174 689.397 L894.733 689.397 L895.292 689.397 L895.851 689.397 L896.411 689.397 L896.97 689.397 L897.529 689.397 L898.088 689.397 L898.648 689.397 L899.207 689.397 L899.766 689.397 L900.325 689.397 L900.885 689.397 L901.444 689.397 L902.003 689.397 L902.562 689.397 L903.122 689.397 L903.681 689.397 L904.24 689.397 L904.799 689.397 L905.359 689.397 L905.918 689.397 L906.477 689.397 L907.036 689.397 L907.596 689.397 L908.155 689.397 L908.714 689.397 L909.273 689.397 L909.833 689.397 L910.392 689.397 L910.951 689.397 L911.51 689.397 L912.07 689.397 L912.629 689.397 L913.188 689.397 L913.747 689.397 L914.307 689.397 L914.866 689.397 L915.425 689.397 L915.984 689.397 L916.544 689.397 L917.103 689.397 L917.662 689.397 L918.221 689.397 L918.781 689.397 L919.34 689.397 L919.899 689.397 L920.458 689.397 L921.018 689.397 L921.577 689.397 L922.136 689.397 L922.695 689.397 L923.255 689.397 L923.814 689.397 L924.373 689.397 L924.932 689.397 L925.492 689.397 L926.051 689.397 L926.61 689.397 L927.169 689.397 L927.729 689.397 L928.288 689.397 L928.847 689.397 L929.406 689.397 L929.966 689.397 L930.525 689.397 L931.084 689.397 L931.644 689.397 L932.203 689.397 L932.762 689.397 L933.321 689.397 L933.881 689.397 L934.44 689.397 L934.999 689.397 L935.558 689.397 L936.118 689.397 L936.677 689.397 L937.236 689.397 L937.795 689.397 L938.355 689.397 L938.914 689.397 L939.473 689.397 L940.032 689.397 L940.592 689.397 L941.151 689.397 L941.71 689.397 L942.269 689.397 L942.829 689.397 L943.388 689.397 L943.947 689.397 L944.506 689.397 L945.066 689.397 L945.625 689.397 L946.184 689.397 L946.743 689.397 L947.303 689.397 L947.862 689.397 L948.421 689.397 L948.98 689.397 L949.54 689.397 L950.099 689.397 L950.658 689.397 L951.217 689.397 L951.777 689.397 L952.336 689.397 L952.895 689.397 L953.454 689.397 L954.014 689.397 L954.573 689.397 L955.132 689.397 L955.691 689.397 L956.251 689.397 L956.81 689.397 L957.369 689.397 L957.928 689.397 L958.488 689.397 L959.047 689.397 L959.606 689.397 L960.165 689.397 L960.725 689.397 L961.284 689.397 L961.843 689.397 L962.402 689.397 L962.962 689.397 L963.521 689.397 L964.08 689.397 L964.639 689.397 L965.199 689.397 L965.758 689.397 L966.317 689.397 L966.876 689.397 L967.436 689.397 L967.995 689.397 L968.554 689.397 L969.113 689.397 L969.673 689.397 L970.232 689.397 L970.791 689.397 L971.35 689.397 L971.91 689.397 L972.469 689.397 L973.028 689.397 L973.587 689.397 L974.147 689.397 L974.706 689.397 L975.265 689.397 L975.824 689.397 L976.384 689.397 L976.943 689.397 L977.502 689.397 L978.061 689.397 L978.621 689.397 L979.18 689.397 L979.739 689.397 L980.298 689.397 L980.858 689.397 L981.417 689.397 L981.976 689.397 L982.535 689.397 L983.095 689.397 L983.654 689.397 L984.213 689.397 L984.772 689.397 L985.332 689.397 L985.891 689.397 L986.45 689.397 L987.009 689.397 L987.569 689.397 L988.128 689.397 L988.687 689.397 L989.246 689.397 L989.806 689.397 L990.365 689.397 L990.924 689.397 L991.483 689.397 L992.043 689.397 L992.602 689.397 L993.161 689.397 L993.72 689.397 L994.28 689.397 L994.839 689.397 L995.398 689.397 L995.957 689.397 L996.517 689.397 L997.076 689.397 L997.635 689.397 L998.194 689.397 L998.754 689.397 L999.313 689.397 L999.872 689.397 L1000.43 689.397 L1000.99 689.397 L1001.55 689.397 L1002.11 689.397 L1002.67 689.397 L1003.23 689.397 L1003.79 689.397 L1004.35 689.397 L1004.91 689.397 L1005.46 689.397 L1006.02 689.397 L1006.58 689.397 L1007.14 689.397 L1007.7 689.397 L1008.26 689.397 L1008.82 689.397 L1009.38 689.397 L1009.94 689.397 L1010.5 689.397 L1011.06 689.397 L1011.62 689.397 L1012.18 689.397 L1012.73 689.397 L1013.29 689.397 L1013.85 689.397 L1014.41 689.397 L1014.97 689.397 L1015.53 689.397 L1016.09 689.397 L1016.65 689.397 L1017.21 689.397 L1017.77 689.397 L1018.33 689.397 L1018.89 689.397 L1019.45 689.397 L1020.01 689.397 L1020.56 689.397 L1021.12 689.397 L1021.68 689.397 L1022.24 689.397 L1022.8 689.397 L1023.36 689.397 L1023.92 689.397 L1024.48 689.397 L1025.04 689.397 L1025.6 689.397 L1026.16 689.397 L1026.72 689.397 L1027.28 689.397 L1027.83 689.397 L1028.39 689.397 L1028.95 689.397 L1029.51 689.397 L1030.07 689.397 L1030.63 689.397 L1031.19 689.397 L1031.75 689.397 L1032.31 689.397 L1032.87 689.397 L1033.43 689.397 L1033.99 689.397 L1034.55 689.397 L1035.1 689.397 L1035.66 689.397 L1036.22 689.397 L1036.78 689.397 L1037.34 689.397 L1037.9 689.397 L1038.46 689.397 L1039.02 689.397 L1039.58 689.397 L1040.14 689.397 L1040.7 689.397 L1041.26 689.397 L1041.82 689.397 L1042.38 689.397 L1042.93 689.397 L1043.49 689.397 L1044.05 689.397 L1044.61 689.397 L1045.17 689.397 L1045.73 689.397 L1046.29 689.397 L1046.85 689.397 L1047.41 689.397 L1047.97 689.397 L1048.53 689.397 L1049.09 689.397 L1049.65 689.397 L1050.2 689.397 L1050.76 689.397 L1051.32 689.397 L1051.88 689.397 L1052.44 689.397 L1053 689.397 L1053.56 689.397 L1054.12 689.397 L1054.68 689.397 L1055.24 689.397 L1055.8 689.397 L1056.36 689.397 L1056.92 689.397 L1057.48 689.397 L1058.03 689.397 L1058.59 689.397 L1059.15 689.397 L1059.71 689.397 L1060.27 689.397 L1060.83 689.397 L1061.39 689.397 L1061.95 689.397 L1062.51 689.397 L1063.07 689.397 L1063.63 689.397 L1064.19 689.397 L1064.75 689.397 L1065.3 689.397 L1065.86 689.397 L1066.42 689.397 L1066.98 689.397 L1067.54 689.397 L1068.1 689.397 L1068.66 689.397 L1069.22 689.397 L1069.78 689.397 L1070.34 689.397 L1070.9 689.397 L1071.46 689.397 L1072.02 689.397 L1072.57 689.397 L1073.13 689.397 L1073.69 689.397 L1074.25 689.397 L1074.81 689.397 L1075.37 689.397 L1075.93 689.397 L1076.49 689.397 L1077.05 689.397 L1077.61 689.397 L1078.17 689.397 L1078.73 689.397 L1079.29 689.397 L1079.85 689.397 L1080.4 689.397 L1080.96 689.397 L1081.52 689.397 L1082.08 689.397 L1082.64 689.397 L1083.2 689.397 L1083.76 689.397 L1084.32 689.397 L1084.88 689.397 L1085.44 689.397 L1086 689.397 L1086.56 689.397 L1087.12 689.397 L1087.67 689.397 L1088.23 689.397 L1088.79 689.397 L1089.35 689.397 L1089.91 689.397 L1090.47 689.397 L1091.03 689.397 L1091.59 689.397 L1092.15 689.397 L1092.71 689.397 L1093.27 689.397 L1093.83 689.397 L1094.39 689.397 L1094.94 689.397 L1095.5 689.397 L1096.06 689.397 L1096.62 689.397 L1097.18 689.397 L1097.74 689.397 L1098.3 689.397 L1098.86 689.397 L1099.42 689.397 L1099.98 689.397 L1100.54 689.397 L1101.1 689.397 L1101.66 689.397 L1102.22 689.397 L1102.77 689.397 L1103.33 689.397 L1103.89 689.397 L1104.45 689.397 L1105.01 689.397 L1105.57 689.397 L1106.13 689.397 L1106.69 689.397 L1107.25 689.397 L1107.81 689.397 L1108.37 689.397 L1108.93 689.397 L1109.49 689.397 L1110.04 689.397 L1110.6 689.397 L1111.16 689.397 L1111.72 689.397 L1112.28 689.397 L1112.84 689.397 L1113.4 689.397 L1113.96 689.397 L1114.52 689.397 L1115.08 689.397 L1115.64 689.397 L1116.2 689.397 L1116.76 689.397 L1117.31 689.397 L1117.87 689.397 L1118.43 689.397 L1118.99 689.397 L1119.55 689.397 L1120.11 689.397 L1120.67 689.397 L1121.23 689.397 L1121.79 689.397 L1122.35 689.397 L1122.91 689.397 L1123.47 689.397 L1124.03 689.397 L1124.59 689.397 L1125.14 689.397 L1125.7 689.397 L1126.26 689.397 L1126.82 689.397 L1127.38 689.397 L1127.94 689.397 L1128.5 689.397 L1129.06 689.397 L1129.62 689.397 L1130.18 689.397 L1130.74 689.397 L1131.3 689.397 L1131.86 689.397 L1132.41 689.397 L1132.97 689.397 L1133.53 689.397 L1134.09 689.397 L1134.65 689.397 L1135.21 689.397 L1135.77 689.397 L1136.33 689.397 L1136.89 689.397 L1137.45 689.397 L1138.01 689.397 L1138.57 689.397 L1139.13 689.397 L1139.68 689.397 L1140.24 689.397 L1140.8 689.397 L1141.36 689.397 L1141.92 689.397 L1142.48 689.397 L1143.04 689.397 L1143.6 689.397 L1144.16 689.397 L1144.72 689.397 L1145.28 689.397 L1145.84 689.397 L1146.4 689.397 L1146.96 689.397 L1147.51 689.397 L1148.07 689.397 L1148.63 689.397 L1149.19 689.397 L1149.75 689.397 L1150.31 689.397 L1150.87 689.397 L1151.43 689.397 L1151.99 689.397 L1152.55 689.397 L1153.11 689.397 L1153.67 689.397 L1154.23 689.397 L1154.78 689.397 L1155.34 689.397 L1155.9 689.397 L1156.46 689.397 L1157.02 689.397 L1157.58 689.397 L1158.14 689.397 L1158.7 689.397 L1159.26 689.397 L1159.82 689.397 L1160.38 689.397 L1160.94 689.397 L1161.5 689.397 L1162.05 689.397 L1162.61 689.397 L1163.17 689.397 L1163.73 689.397 L1164.29 689.397 L1164.85 689.397 L1165.41 689.397 L1165.97 689.397 L1166.53 689.397 L1167.09 689.397 L1167.65 689.397 L1168.21 689.397 L1168.77 689.397 L1169.33 689.397 L1169.88 689.397 L1170.44 689.397 L1171 689.397 L1171.56 689.397 L1172.12 689.397 L1172.68 689.397 L1173.24 689.397 L1173.8 689.397 L1174.36 689.397 L1174.92 689.397 L1175.48 689.397 L1176.04 689.397 L1176.6 689.397 L1177.15 689.397 L1177.71 689.397 L1178.27 689.397 L1178.83 689.397 L1179.39 689.397 L1179.95 689.397 L1180.51 689.397 L1181.07 689.397 L1181.63 689.397 L1182.19 689.397 L1182.75 689.397 L1183.31 689.397 L1183.87 689.397 L1184.43 689.397 L1184.98 689.397 L1185.54 689.397 L1186.1 689.397 L1186.66 689.397 L1187.22 689.397 L1187.78 689.397 L1188.34 689.397 L1188.9 689.397 L1189.46 689.397 L1190.02 689.397 L1190.58 689.397 L1191.14 689.397 L1191.7 689.397 L1192.25 689.397 L1192.81 689.397 L1193.37 689.397 L1193.93 689.397 L1194.49 689.397 L1195.05 689.397 L1195.61 689.397 L1196.17 689.397 L1196.73 689.397 L1197.29 689.397 L1197.85 689.397 L1198.41 689.397 L1198.97 689.397 L1199.52 689.397 L1200.08 689.397 L1200.64 689.397 L1201.2 689.397 L1201.76 689.397 L1202.32 689.397 L1202.88 689.397 L1203.44 689.397 L1204 689.397 L1204.56 689.397 L1205.12 689.397 L1205.68 689.397 L1206.24 689.397 L1206.8 689.397 L1207.35 689.397 L1207.91 689.397 L1208.47 689.397 L1209.03 689.397 L1209.59 689.397 L1210.15 689.397 L1210.71 689.397 L1211.27 689.397 L1211.83 689.397 L1212.39 689.397 L1212.95 689.397 L1213.51 689.397 L1214.07 689.397 L1214.62 689.397 L1215.18 689.397 L1215.74 689.397 L1216.3 689.397 L1216.86 689.397 L1217.42 689.397 L1217.98 689.397 L1218.54 689.397 L1219.1 689.397 L1219.66 689.397 L1220.22 689.397 L1220.78 689.397 L1221.34 689.397 L1221.89 689.397 L1222.45 689.397 L1223.01 689.397 L1223.57 689.397 L1224.13 689.397 L1224.69 689.397 L1225.25 689.397 L1225.81 689.397 L1226.37 689.397 L1226.93 689.397 L1227.49 689.397 L1228.05 689.397 L1228.61 689.397 L1229.17 689.397 L1229.72 689.397 L1230.28 689.397 L1230.84 689.397 L1231.4 689.397 L1231.96 689.397 L1232.52 689.397 L1233.08 689.397 L1233.64 689.397 L1234.2 689.397 L1234.76 689.397 L1235.32 689.397 L1235.88 689.397 L1236.44 689.397 L1236.99 689.397 L1237.55 689.397 L1238.11 689.397 L1238.67 689.397 L1239.23 689.397 L1239.79 689.397 L1240.35 689.397 L1240.91 689.397 L1241.47 689.397 L1242.03 689.397 L1242.59 689.397 L1243.15 689.397 L1243.71 689.397 L1244.26 689.397 L1244.82 689.397 L1245.38 689.397 L1245.94 689.397 L1246.5 689.397 L1247.06 689.397 L1247.62 689.397 L1248.18 689.397 L1248.74 689.397 L1249.3 689.397 L1249.86 689.397 L1250.42 689.397 L1250.98 689.397 L1251.54 689.397 L1252.09 689.397 L1252.65 689.397 L1253.21 689.397 L1253.77 689.397 L1254.33 689.397 L1254.89 689.397 L1255.45 689.397 L1256.01 689.397 L1256.57 689.397 L1257.13 689.397 L1257.69 689.397 L1258.25 689.397 L1258.81 689.397 L1259.36 689.397 L1259.92 689.397 L1260.48 689.397 L1261.04 689.397 L1261.6 689.397 L1262.16 689.397 L1262.72 689.397 L1263.28 689.397 L1263.84 689.397 L1264.4 689.397 L1264.96 689.397 L1265.52 689.397 L1266.08 689.397 L1266.63 689.397 L1267.19 689.397 L1267.75 689.397 L1268.31 689.397 L1268.87 689.397 L1269.43 689.397 L1269.99 689.397 L1270.55 689.397 L1271.11 689.397 L1271.67 689.397 L1272.23 689.397 L1272.79 689.397 L1273.35 689.397 L1273.91 689.397 L1274.46 689.397 L1275.02 689.397 L1275.58 689.397 L1276.14 689.397 L1276.7 689.397 L1277.26 689.397 L1277.82 689.397 L1278.38 689.397 L1278.94 689.397 L1279.5 689.397 L1280.06 689.397 L1280.62 689.397 L1281.18 689.397 L1281.73 689.397 L1282.29 689.397 L1282.85 689.397 L1283.41 689.397 L1283.97 689.397 L1284.53 689.397 L1285.09 689.397 L1285.65 689.397 L1286.21 689.397 L1286.77 689.397 L1287.33 689.397 L1287.89 689.397 L1288.45 689.397 L1289 689.397 L1289.56 689.397 L1290.12 689.397 L1290.68 689.397 L1291.24 689.397 L1291.8 689.397 L1292.36 689.397 L1292.92 689.397 L1293.48 689.397 L1294.04 689.397 L1294.6 689.397 L1295.16 689.397 L1295.72 689.397 L1296.28 689.397 L1296.83 689.397 L1297.39 689.397 L1297.95 689.397 L1298.51 689.397 L1299.07 689.397 L1299.63 689.397 L1300.19 689.397 L1300.75 689.397 L1301.31 689.397 L1301.87 689.397 L1302.43 689.397 L1302.99 689.397 L1303.55 689.397 L1304.1 689.397 L1304.66 689.397 L1305.22 689.397 L1305.78 689.397 L1306.34 689.397 L1306.9 689.397 L1307.46 689.397 L1308.02 689.397 L1308.58 689.397 L1309.14 689.397 L1309.7 689.397 L1310.26 689.397 L1310.82 689.397 L1311.38 689.397 L1311.93 689.397 L1312.49 689.397 L1313.05 689.397 L1313.61 689.397 L1314.17 689.397 L1314.73 689.397 L1315.29 689.397 L1315.85 689.397 L1316.41 689.397 L1316.97 689.397 L1317.53 689.397 L1318.09 689.397 L1318.65 689.397 L1319.2 689.397 L1319.76 689.397 L1320.32 689.397 L1320.88 689.397 L1321.44 689.397 L1322 689.397 L1322.56 689.397 L1323.12 689.397 L1323.68 689.397 L1324.24 689.397 L1324.8 689.397 L1325.36 689.397 L1325.92 689.397 L1326.47 689.397 L1327.03 689.397 L1327.59 689.397 L1328.15 689.397 L1328.71 689.397 L1329.27 689.397 L1329.83 689.397 L1330.39 689.397 L1330.95 689.397 L1331.51 689.397 L1332.07 689.397 L1332.63 689.397 L1333.19 689.397 L1333.75 689.397 L1334.3 689.397 L1334.86 689.397 L1335.42 689.397 L1335.98 689.397 L1336.54 689.397 L1337.1 689.397 L1337.66 689.397 L1338.22 689.397 L1338.78 689.397 L1339.34 689.397 L1339.9 689.397 L1340.46 689.397 L1341.02 689.397 L1341.57 689.397 L1342.13 689.397 L1342.69 689.397 L1343.25 689.397 L1343.81 689.397 L1344.37 689.397 L1344.93 689.397 L1345.49 689.397 L1346.05 689.397 L1346.61 689.397 L1347.17 689.397 L1347.73 689.397 L1348.29 689.397 L1348.84 689.397 L1349.4 689.397 L1349.96 689.397 L1350.52 689.397 L1351.08 689.397 L1351.64 689.397 L1352.2 689.397 L1352.76 689.397 L1353.32 689.397 L1353.88 689.397 L1354.44 689.397 L1355 689.397 L1355.56 689.397 L1356.12 689.397 L1356.67 689.397 L1357.23 689.397 L1357.79 689.397 L1358.35 689.397 L1358.91 689.397 L1359.47 689.397 L1360.03 689.397 L1360.59 689.397 L1361.15 689.397 L1361.71 689.397 L1362.27 689.397 L1362.83 689.397 L1363.39 689.397 L1363.94 689.397 L1364.5 689.397 L1365.06 689.397 L1365.62 689.397 L1366.18 689.397 L1366.74 689.397 L1367.3 689.397 L1367.86 689.397 L1368.42 689.397 L1368.98 689.397 L1369.54 689.397 L1370.1 689.397 L1370.66 689.397 L1371.21 689.397 L1371.77 689.397 L1372.33 689.397 L1372.89 689.397 L1373.45 689.397 L1374.01 689.397 L1374.57 689.397 L1375.13 689.397 L1375.69 689.397 L1376.25 689.397 L1376.81 689.397 L1377.37 689.397 L1377.93 689.397 L1378.49 689.397 L1379.04 689.397 L1379.6 689.397 L1380.16 689.397 L1380.72 689.397 L1381.28 689.397 L1381.84 689.397 L1382.4 689.397 L1382.96 689.397 L1383.52 689.397 L1384.08 689.397 L1384.64 689.397 L1385.2 689.397 L1385.76 689.397 L1386.31 689.397 L1386.87 689.397 L1387.43 689.397 L1387.99 689.397 L1388.55 689.397 L1389.11 689.397 L1389.67 689.397 L1390.23 689.397 L1390.79 689.397 L1391.35 689.397 L1391.91 689.397 L1392.47 689.397 L1393.03 689.397 L1393.58 689.397 L1394.14 689.397 L1394.7 689.397 L1395.26 689.397 L1395.82 689.397 L1396.38 689.397 L1396.94 689.397 L1397.5 689.397 L1398.06 689.397 L1398.62 689.397 L1399.18 689.397 L1399.74 689.397 L1400.3 689.397 L1400.86 689.397 L1401.41 689.397 L1401.97 689.397 L1402.53 689.397 L1403.09 689.397 L1403.65 689.397 L1404.21 689.397 L1404.77 689.397 L1405.33 689.397 L1405.89 689.397 L1406.45 689.397 L1407.01 689.397 L1407.57 689.397 L1408.13 689.397 L1408.68 689.397 L1409.24 689.397 L1409.8 689.397 L1410.36 689.397 L1410.92 689.397 L1411.48 689.397 L1412.04 689.397 L1412.6 689.397 L1413.16 689.397 L1413.72 689.397 L1414.28 689.397 L1414.84 689.397 L1415.4 689.397 L1415.95 689.397 L1416.51 689.397 L1417.07 689.397 L1417.63 689.397 L1418.19 689.397 L1418.75 689.397 L1419.31 689.397 L1419.87 689.397 L1420.43 689.397 L1420.99 689.397 L1421.55 689.397 L1422.11 689.397 L1422.67 689.397 L1423.23 689.397 L1423.78 689.397 L1424.34 689.397 L1424.9 689.397 L1425.46 689.397 L1426.02 689.397 L1426.58 689.397 L1427.14 689.397 L1427.7 689.397 L1428.26 689.397 L1428.82 689.397 L1429.38 689.397 L1429.94 689.397 L1430.5 689.397 L1431.05 689.397 L1431.61 689.397 L1432.17 689.397 L1432.73 689.397 L1433.29 689.397 L1433.85 689.397 L1434.41 689.397 L1434.97 689.397 L1435.53 689.397 L1436.09 689.397 L1436.65 689.397 L1437.21 689.397 L1437.77 689.397 L1438.33 689.397 L1438.88 689.397 L1439.44 689.397 L1440 689.397 L1440.56 689.397 L1441.12 689.397 L1441.68 689.397 L1442.24 689.397 L1442.8 689.397 L1443.36 689.397 L1443.92 689.397 L1444.48 689.397 L1445.04 689.397 L1445.6 689.397 L1446.15 689.397 L1446.71 689.397 L1447.27 689.397 L1447.83 689.397 L1448.39 689.397 L1448.95 689.397 L1449.51 689.397 L1450.07 689.397 L1450.63 689.397 L1451.19 689.397 L1451.75 689.397 L1452.31 689.397 L1452.87 689.397 L1453.42 689.397 L1453.98 689.397 L1454.54 689.397 L1455.1 689.397 L1455.66 689.397 L1456.22 689.397 L1456.78 689.397 L1457.34 689.397 L1457.9 689.397 L1458.46 689.397 L1459.02 689.397 L1459.58 689.397 L1460.14 689.397 L1460.7 689.397 L1461.25 689.397 L1461.81 689.397 L1462.37 689.397 L1462.93 689.397 L1463.49 689.397 L1464.05 689.397 L1464.61 689.397 L1465.17 689.397 L1465.73 689.397 L1466.29 689.397 L1466.85 689.397 L1467.41 689.397 L1467.97 689.397 L1468.52 689.397 L1469.08 689.397 L1469.64 689.397 L1470.2 689.397 L1470.76 689.397 L1471.32 689.397 L1471.88 689.397 L1472.44 689.397 L1473 689.397 L1473.56 689.397 L1474.12 689.397 L1474.68 689.397 L1475.24 689.397 L1475.79 689.397 L1476.35 689.397 L1476.91 689.397 L1477.47 689.397 L1478.03 689.397 L1478.59 689.397 L1479.15 689.397 L1479.71 689.397 L1480.27 689.397 L1480.83 689.397 L1481.39 689.397 L1481.95 689.397 L1482.51 689.397 L1483.07 689.397 L1483.62 689.397 L1484.18 689.397 L1484.74 689.397 L1485.3 689.397 L1485.86 689.397 L1486.42 689.397 L1486.98 689.397 L1487.54 689.397 L1488.1 689.397 L1488.66 689.397 L1489.22 689.397 L1489.78 689.397 L1490.34 689.397 L1490.89 689.397 L1491.45 689.397 L1492.01 689.397 L1492.57 689.397 L1493.13 689.397 L1493.69 689.397 L1494.25 689.397 L1494.81 689.397 L1495.37 689.397 L1495.93 689.397 L1496.49 689.397 L1497.05 689.397 L1497.61 689.397 L1498.16 689.397 L1498.72 689.397 L1499.28 689.397 L1499.84 689.397 L1500.4 689.397 L1500.96 689.397 L1501.52 689.397 L1502.08 689.397 L1502.64 689.397 L1503.2 689.397 L1503.76 689.397 L1504.32 689.397 L1504.88 689.397 L1505.44 689.397 L1505.99 689.397 L1506.55 689.397 L1507.11 689.397 L1507.67 689.397 L1508.23 689.397 L1508.79 689.397 L1509.35 689.397 L1509.91 689.397 L1510.47 689.397 L1511.03 689.397 L1511.59 689.397 L1512.15 689.397 L1512.71 689.397 L1513.26 689.397 L1513.82 689.397 L1514.38 689.397 L1514.94 689.397 L1515.5 689.397 L1516.06 689.397 L1516.62 689.397 L1517.18 689.397 L1517.74 689.397 L1518.3 689.397 L1518.86 689.397 L1519.42 689.397 L1519.98 689.397 L1520.53 689.397 L1521.09 689.397 L1521.65 689.397 L1522.21 689.397 L1522.77 689.397 L1523.33 689.397 L1523.89 689.397 L1524.45 689.397 L1525.01 689.397 L1525.57 689.397 L1526.13 689.397 L1526.69 689.397 L1527.25 689.397 L1527.81 689.397 L1528.36 689.397 L1528.92 689.397 L1529.48 689.397 L1530.04 689.397 L1530.6 689.397 L1531.16 689.397 L1531.72 689.397 L1532.28 689.397 L1532.84 689.397 L1533.4 689.397 L1533.96 689.397 L1534.52 689.397 L1535.08 689.397 L1535.63 689.397 L1536.19 689.397 L1536.75 689.397 L1537.31 689.397 L1537.87 689.397 L1538.43 689.397 L1538.99 689.397 L1539.55 689.397 L1540.11 689.397 L1540.67 689.397 L1541.23 689.397 L1541.79 689.397 L1542.35 689.397 L1542.9 689.397 L1543.46 689.397 L1544.02 689.397 L1544.58 689.397 L1545.14 689.397 L1545.7 689.397 L1546.26 689.397 L1546.82 689.397 L1547.38 689.397 L1547.94 689.397 L1548.5 689.397 L1549.06 689.397 L1549.62 689.397 L1550.18 689.397 L1550.73 689.397 L1551.29 689.397 L1551.85 689.397 L1552.41 689.397 L1552.97 689.397 L1553.53 689.397 L1554.09 689.397 L1554.65 689.397 L1555.21 689.397 L1555.77 689.397 L1556.33 689.397 L1556.89 689.397 L1557.45 689.397 L1558 689.397 L1558.56 689.397 L1559.12 689.397 L1559.68 689.397 L1560.24 689.397 L1560.8 689.397 L1561.36 689.397 L1561.92 689.397 L1562.48 689.397 L1563.04 689.397 L1563.6 689.397 L1564.16 689.397 L1564.72 689.397 L1565.28 689.397 L1565.83 689.397 L1566.39 689.397 L1566.95 689.397 L1567.51 689.397 L1568.07 689.397 L1568.63 689.397 L1569.19 689.397 L1569.75 689.397 L1570.31 689.397 L1570.87 689.397 L1571.43 689.397 L1571.99 689.397 L1572.55 689.397 L1573.1 689.397 L1573.66 689.397 L1574.22 689.397 L1574.78 689.397 L1575.34 689.397 L1575.9 689.397 L1576.46 689.397 L1577.02 689.397 L1577.58 689.397 L1578.14 689.397 L1578.7 689.397 L1579.26 689.397 L1579.82 689.397 L1580.37 689.397 L1580.93 689.397 L1581.49 689.397 L1582.05 689.397 L1582.61 689.397 L1583.17 689.397 L1583.73 689.397 L1584.29 689.397 L1584.85 689.397 L1585.41 689.397 L1585.97 689.397 L1586.53 689.397 L1587.09 689.397 L1587.65 689.397 L1588.2 689.397 L1588.76 689.397 L1589.32 689.397 L1589.88 689.397 L1590.44 689.397 L1591 689.397 L1591.56 689.397 L1592.12 689.397 L1592.68 689.397 L1593.24 689.397 L1593.8 689.397 L1594.36 689.397 L1594.92 689.397 L1595.47 689.397 L1596.03 689.397 L1596.59 689.397 L1597.15 689.397 L1597.71 689.397 L1598.27 689.397 L1598.83 689.397 L1599.39 689.397 L1599.95 689.397 L1600.51 689.397 L1601.07 689.397 L1601.63 689.397 L1602.19 689.397 L1602.74 689.397 L1603.3 689.397 L1603.86 689.397 L1604.42 689.397 L1604.98 689.397 L1605.54 689.397 L1606.1 689.397 L1606.66 689.397 L1607.22 689.397 L1607.78 689.397 L1608.34 689.397 L1608.9 689.397 L1609.46 689.397 L1610.02 689.397 L1610.57 689.397 L1611.13 689.397 L1611.69 689.397 L1612.25 689.397 L1612.81 689.397 L1613.37 689.397 L1613.93 689.397 L1614.49 689.397 L1615.05 689.397 L1615.61 689.397 L1616.17 689.397 L1616.73 689.397 L1617.29 689.397 L1617.84 689.397 L1618.4 689.397 L1618.96 689.397 L1619.52 689.397 L1620.08 689.397 L1620.64 689.397 L1621.2 689.397 L1621.76 689.397 L1622.32 689.397 L1622.88 689.397 L1623.44 689.397 L1624 689.397 L1624.56 689.397 L1625.11 689.397 L1625.67 689.397 L1626.23 689.397 L1626.79 689.397 L1627.35 689.397 L1627.91 689.397 L1628.47 689.397 L1629.03 689.397 L1629.59 689.397 L1630.15 689.397 L1630.71 689.397 L1631.27 689.397 L1631.83 689.397 L1632.39 689.397 L1632.94 689.397 L1633.5 689.397 L1634.06 689.397 L1634.62 689.397 L1635.18 689.397 L1635.74 689.397 L1636.3 689.397 L1636.86 689.397 L1637.42 689.397 L1637.98 689.397 L1638.54 689.397 L1639.1 689.397 L1639.66 689.397 L1640.21 689.397 L1640.77 689.397 L1641.33 689.397 L1641.89 689.397 L1642.45 689.397 L1643.01 689.397 L1643.57 689.397 L1644.13 689.397 L1644.69 689.397 L1645.25 689.397 L1645.81 689.397 L1646.37 689.397 L1646.93 689.397 L1647.48 689.397 L1648.04 689.397 L1648.6 689.397 L1649.16 689.397 L1649.72 689.397 L1650.28 689.397 L1650.84 689.397 L1651.4 689.397 L1651.96 689.397 L1652.52 689.397 L1653.08 689.397 L1653.64 689.397 L1654.2 689.397 L1654.76 689.397 L1655.31 689.397 L1655.87 689.397 L1656.43 689.397 L1656.99 689.397 L1657.55 689.397 L1658.11 689.397 L1658.67 689.397 L1659.23 689.397 L1659.79 689.397 L1660.35 689.397 L1660.91 689.397 L1661.47 689.397 L1662.03 689.397 L1662.58 689.397 L1663.14 689.397 L1663.7 689.397 L1664.26 689.397 L1664.82 689.397 L1665.38 689.397 L1665.94 689.397 L1666.5 689.397 L1667.06 689.397 L1667.62 689.397 L1668.18 689.397 L1668.74 689.397 L1669.3 689.397 L1669.85 689.397 L1670.41 689.397 L1670.97 689.397 L1671.53 689.397 L1672.09 689.397 L1672.65 689.397 L1673.21 689.397 L1673.77 689.397 L1674.33 689.397 L1674.89 689.397 L1675.45 689.397 L1676.01 689.397 L1676.57 689.397 L1677.13 689.397 L1677.68 689.397 L1678.24 689.397 L1678.8 689.397 L1679.36 689.397 L1679.92 689.397 L1680.48 689.397 L1681.04 689.397 L1681.6 689.397 L1682.16 689.397 L1682.72 689.397 L1683.28 689.397 L1683.84 689.397 L1684.4 689.397 L1684.95 689.397 L1685.51 689.397 L1686.07 689.397 L1686.63 689.397 L1687.19 689.397 L1687.75 689.397 L1688.31 689.397 L1688.87 689.397 L1689.43 689.397 L1689.99 689.397 L1690.55 689.397 L1691.11 689.397 L1691.67 689.397 L1692.23 689.397 L1692.78 689.397 L1693.34 689.397 L1693.9 689.397 L1694.46 689.397 L1695.02 689.397 L1695.58 689.397 L1696.14 689.397 L1696.7 689.397 L1697.26 689.397 L1697.82 689.397 L1698.38 689.397 L1698.94 689.397 L1699.5 689.397 L1700.05 689.397 L1700.61 689.397 L1701.17 689.397 L1701.73 689.397 L1702.29 689.397 L1702.85 689.397 L1703.41 689.397 L1703.97 689.397 L1704.53 689.397 L1705.09 689.397 L1705.65 689.397 L1706.21 689.397 L1706.77 689.397 L1707.32 689.397 L1707.88 689.397 L1708.44 689.397 L1709 689.397 L1709.56 689.397 L1710.12 689.397 L1710.68 689.397 L1711.24 689.397 L1711.8 689.397 L1712.36 689.397 L1712.92 689.397 L1713.48 689.397 L1714.04 689.397 L1714.6 689.397 L1715.15 689.397 L1715.71 689.397 L1716.27 689.397 L1716.83 689.397 L1717.39 689.397 L1717.95 689.397 L1718.51 689.397 L1719.07 689.397 L1719.63 689.397 L1720.19 689.397 L1720.75 689.397 L1721.31 689.397 L1721.87 689.397 L1722.42 689.397 L1722.98 689.397 L1723.54 689.397 L1724.1 689.397 L1724.66 689.397 L1725.22 689.397 L1725.78 689.397 L1726.34 689.397 L1726.9 689.397 L1727.46 689.397 L1728.02 689.397 L1728.58 689.397 L1729.14 689.397 L1729.69 689.397 L1730.25 689.397 L1730.81 689.397 L1731.37 689.397 L1731.93 689.397 L1732.49 689.397 L1733.05 689.397 L1733.61 689.397 L1734.17 689.397 L1734.73 689.397 L1735.29 689.397 L1735.85 689.397 L1736.41 689.397 L1736.97 689.397 L1737.52 689.397 L1738.08 689.397 L1738.64 689.397 L1739.2 689.397 L1739.76 689.397 L1740.32 689.397 L1740.88 689.397 L1741.44 689.397 L1742 689.397 L1742.56 689.397 L1743.12 689.397 L1743.68 689.397 L1744.24 689.397 L1744.79 689.397 L1745.35 689.397 L1745.91 689.397 L1746.47 689.397 L1747.03 689.397 L1747.59 689.397 L1748.15 689.397 L1748.71 689.397 L1749.27 689.397 L1749.83 689.397 L1750.39 689.397 L1750.95 689.397 L1751.51 689.397 L1752.06 689.397 L1752.62 689.397 L1753.18 689.397 L1753.74 689.397 L1754.3 689.397 L1754.86 689.397 L1755.42 689.397 L1755.98 689.397 L1756.54 689.397 L1757.1 689.397 L1757.66 689.397 L1758.22 689.397 L1758.78 689.397 L1759.34 689.397 L1759.89 689.397 L1760.45 689.397 L1761.01 689.397 L1761.57 689.397 L1762.13 689.397 L1762.69 689.397 L1763.25 689.397 L1763.81 689.397 L1764.37 689.397 L1764.93 689.397 L1765.49 689.397 L1766.05 689.397 L1766.61 689.397 L1767.16 689.397 L1767.72 689.397 L1768.28 689.397 L1768.84 689.397 L1769.4 689.397 L1769.96 689.397 L1770.52 689.397 L1771.08 689.397 L1771.64 689.397 L1772.2 689.397 L1772.76 689.397 L1773.32 689.397 L1773.88 689.397 L1774.43 689.397 L1774.99 689.397 L1775.55 689.397 L1776.11 689.397 L1776.67 689.397 L1777.23 689.397 L1777.79 689.397 L1778.35 689.397 L1778.91 689.397 L1779.47 689.397 L1780.03 689.397 L1780.59 689.397 L1781.15 689.397 L1781.71 689.397 L1782.26 689.397 L1782.82 689.397 L1783.38 689.397 L1783.94 689.397 L1784.5 689.397 L1785.06 689.397 L1785.62 689.397 L1786.18 689.397 L1786.74 689.397 L1787.3 689.397 L1787.86 689.397 L1788.42 689.397 L1788.98 689.397 L1789.53 689.397 L1790.09 689.397 L1790.65 689.397 L1791.21 689.397 L1791.77 689.397 L1792.33 689.397 L1792.89 689.397 L1793.45 689.397 L1794.01 689.397 L1794.57 689.397 L1795.13 689.397 L1795.69 689.397 L1796.25 689.397 L1796.8 689.397 L1797.36 689.397 L1797.92 689.397 L1798.48 689.397 L1799.04 689.397 L1799.6 689.397 L1800.16 689.397 L1800.72 689.397 L1801.28 689.397 L1801.84 689.397 L1802.4 689.397 L1802.96 689.397 L1803.52 689.397 L1804.08 689.397 L1804.63 689.397 L1805.19 689.397 L1805.75 689.397 L1806.31 689.397 L1806.87 689.397 L1807.43 689.397 L1807.99 689.397 L1808.55 689.397 L1809.11 689.397 L1809.67 689.397 L1810.23 689.397 L1810.79 689.397 L1811.35 689.397 L1811.9 689.397 L1812.46 689.397 L1813.02 689.397 L1813.58 689.397 L1814.14 689.397 L1814.7 689.397 L1815.26 689.397 L1815.82 689.397 L1816.38 689.397 L1816.94 689.397 L1817.5 689.397 L1818.06 689.397 L1818.62 689.397 L1819.18 689.397 L1819.73 689.397 L1820.29 689.397 L1820.85 689.397 L1821.41 689.397 L1821.97 689.397 L1822.53 689.397 L1823.09 689.397 L1823.65 689.397 L1824.21 689.397 L1824.77 689.397 L1825.33 689.397 L1825.89 689.397 L1826.45 689.397 L1827 689.397 L1827.56 689.397 L1828.12 689.397 L1828.68 689.397 L1829.24 689.397 L1829.8 689.397 L1830.36 689.397 L1830.92 689.397 L1831.48 689.397 L1832.04 689.397 L1832.6 689.397 L1833.16 689.397 L1833.72 689.397 L1834.27 689.397 L1834.83 689.397 L1835.39 689.397 L1835.95 689.397 L1836.51 689.397 L1837.07 689.397 L1837.63 689.397 L1838.19 689.397 L1838.19 679.186 L1837.63 679.186 L1837.07 679.186 L1836.51 679.186 L1835.95 679.186 L1835.39 679.186 L1834.83 679.186 L1834.27 679.186 L1833.72 679.186 L1833.16 679.186 L1832.6 679.186 L1832.04 679.186 L1831.48 679.186 L1830.92 679.186 L1830.36 679.186 L1829.8 679.186 L1829.24 679.186 L1828.68 679.186 L1828.12 679.186 L1827.56 679.186 L1827 679.186 L1826.45 679.186 L1825.89 679.186 L1825.33 679.186 L1824.77 679.186 L1824.21 679.186 L1823.65 679.186 L1823.09 679.186 L1822.53 679.186 L1821.97 679.186 L1821.41 679.186 L1820.85 679.186 L1820.29 679.186 L1819.73 679.186 L1819.18 679.186 L1818.62 679.186 L1818.06 679.186 L1817.5 679.186 L1816.94 679.186 L1816.38 679.186 L1815.82 679.186 L1815.26 679.186 L1814.7 679.186 L1814.14 679.186 L1813.58 679.186 L1813.02 679.186 L1812.46 679.186 L1811.9 679.186 L1811.35 679.186 L1810.79 679.186 L1810.23 679.186 L1809.67 679.186 L1809.11 679.186 L1808.55 679.186 L1807.99 679.186 L1807.43 679.186 L1806.87 679.186 L1806.31 679.186 L1805.75 679.186 L1805.19 679.186 L1804.63 679.186 L1804.08 679.186 L1803.52 679.186 L1802.96 679.186 L1802.4 679.186 L1801.84 679.186 L1801.28 679.186 L1800.72 679.186 L1800.16 679.186 L1799.6 679.186 L1799.04 679.186 L1798.48 679.186 L1797.92 679.186 L1797.36 679.186 L1796.8 679.186 L1796.25 679.186 L1795.69 679.186 L1795.13 679.186 L1794.57 679.186 L1794.01 679.186 L1793.45 679.186 L1792.89 679.186 L1792.33 679.186 L1791.77 679.186 L1791.21 679.186 L1790.65 679.186 L1790.09 679.186 L1789.53 679.186 L1788.98 679.186 L1788.42 679.186 L1787.86 679.186 L1787.3 679.186 L1786.74 679.186 L1786.18 679.186 L1785.62 679.186 L1785.06 679.186 L1784.5 679.186 L1783.94 679.186 L1783.38 679.186 L1782.82 679.186 L1782.26 679.186 L1781.71 679.186 L1781.15 679.186 L1780.59 679.186 L1780.03 679.186 L1779.47 679.186 L1778.91 679.186 L1778.35 679.186 L1777.79 679.186 L1777.23 679.186 L1776.67 679.186 L1776.11 679.186 L1775.55 679.186 L1774.99 679.186 L1774.43 679.186 L1773.88 679.186 L1773.32 679.186 L1772.76 679.186 L1772.2 679.186 L1771.64 679.186 L1771.08 679.186 L1770.52 679.186 L1769.96 679.186 L1769.4 679.186 L1768.84 679.186 L1768.28 679.186 L1767.72 679.186 L1767.16 679.186 L1766.61 679.186 L1766.05 679.186 L1765.49 679.186 L1764.93 679.186 L1764.37 679.186 L1763.81 679.186 L1763.25 679.186 L1762.69 679.186 L1762.13 679.186 L1761.57 679.186 L1761.01 679.186 L1760.45 679.186 L1759.89 679.186 L1759.34 679.186 L1758.78 679.186 L1758.22 679.186 L1757.66 679.186 L1757.1 679.186 L1756.54 679.186 L1755.98 679.186 L1755.42 679.186 L1754.86 679.186 L1754.3 679.186 L1753.74 679.186 L1753.18 679.186 L1752.62 679.186 L1752.06 679.186 L1751.51 679.186 L1750.95 679.186 L1750.39 679.186 L1749.83 679.186 L1749.27 679.186 L1748.71 679.186 L1748.15 679.186 L1747.59 679.186 L1747.03 679.186 L1746.47 679.186 L1745.91 679.186 L1745.35 679.186 L1744.79 679.186 L1744.24 679.186 L1743.68 679.186 L1743.12 679.186 L1742.56 679.186 L1742 679.186 L1741.44 679.186 L1740.88 679.186 L1740.32 679.186 L1739.76 679.186 L1739.2 679.186 L1738.64 679.186 L1738.08 679.186 L1737.52 679.186 L1736.97 679.186 L1736.41 679.186 L1735.85 679.186 L1735.29 679.186 L1734.73 679.186 L1734.17 679.186 L1733.61 679.186 L1733.05 679.186 L1732.49 679.186 L1731.93 679.186 L1731.37 679.186 L1730.81 679.186 L1730.25 679.186 L1729.69 679.186 L1729.14 679.186 L1728.58 679.186 L1728.02 679.186 L1727.46 679.186 L1726.9 679.186 L1726.34 679.186 L1725.78 679.186 L1725.22 679.186 L1724.66 679.186 L1724.1 679.186 L1723.54 679.186 L1722.98 679.186 L1722.42 679.186 L1721.87 679.186 L1721.31 679.186 L1720.75 679.186 L1720.19 679.186 L1719.63 679.186 L1719.07 679.186 L1718.51 679.186 L1717.95 679.186 L1717.39 679.186 L1716.83 679.186 L1716.27 679.186 L1715.71 679.186 L1715.15 679.186 L1714.6 679.186 L1714.04 679.186 L1713.48 679.186 L1712.92 679.186 L1712.36 679.186 L1711.8 679.186 L1711.24 679.186 L1710.68 679.186 L1710.12 679.186 L1709.56 679.186 L1709 679.186 L1708.44 679.186 L1707.88 679.186 L1707.32 679.186 L1706.77 679.186 L1706.21 679.186 L1705.65 679.186 L1705.09 679.186 L1704.53 679.186 L1703.97 679.186 L1703.41 679.186 L1702.85 679.186 L1702.29 679.186 L1701.73 679.186 L1701.17 679.186 L1700.61 679.186 L1700.05 679.186 L1699.5 679.186 L1698.94 679.186 L1698.38 679.186 L1697.82 679.186 L1697.26 679.186 L1696.7 679.186 L1696.14 679.186 L1695.58 679.186 L1695.02 679.186 L1694.46 679.186 L1693.9 679.186 L1693.34 679.186 L1692.78 679.186 L1692.23 679.186 L1691.67 679.186 L1691.11 679.186 L1690.55 679.186 L1689.99 679.186 L1689.43 679.186 L1688.87 679.186 L1688.31 679.186 L1687.75 679.186 L1687.19 679.186 L1686.63 679.186 L1686.07 679.186 L1685.51 679.186 L1684.95 679.186 L1684.4 679.186 L1683.84 679.186 L1683.28 679.186 L1682.72 679.186 L1682.16 679.186 L1681.6 679.186 L1681.04 679.186 L1680.48 679.186 L1679.92 679.186 L1679.36 679.186 L1678.8 679.186 L1678.24 679.186 L1677.68 679.186 L1677.13 679.186 L1676.57 679.186 L1676.01 679.186 L1675.45 679.186 L1674.89 679.186 L1674.33 679.186 L1673.77 679.186 L1673.21 679.186 L1672.65 679.186 L1672.09 679.186 L1671.53 679.186 L1670.97 679.186 L1670.41 679.186 L1669.85 679.186 L1669.3 679.186 L1668.74 679.186 L1668.18 679.186 L1667.62 679.186 L1667.06 679.186 L1666.5 679.186 L1665.94 679.186 L1665.38 679.186 L1664.82 679.186 L1664.26 679.186 L1663.7 679.186 L1663.14 679.186 L1662.58 679.186 L1662.03 679.186 L1661.47 679.186 L1660.91 679.186 L1660.35 679.186 L1659.79 679.186 L1659.23 679.186 L1658.67 679.186 L1658.11 679.186 L1657.55 679.186 L1656.99 679.186 L1656.43 679.186 L1655.87 679.186 L1655.31 679.186 L1654.76 679.186 L1654.2 679.186 L1653.64 679.186 L1653.08 679.186 L1652.52 679.186 L1651.96 679.186 L1651.4 679.186 L1650.84 679.186 L1650.28 679.186 L1649.72 679.186 L1649.16 679.186 L1648.6 679.186 L1648.04 679.186 L1647.48 679.186 L1646.93 679.186 L1646.37 679.186 L1645.81 679.186 L1645.25 679.186 L1644.69 679.186 L1644.13 679.186 L1643.57 679.186 L1643.01 679.186 L1642.45 679.186 L1641.89 679.186 L1641.33 679.186 L1640.77 679.186 L1640.21 679.186 L1639.66 679.186 L1639.1 679.186 L1638.54 679.186 L1637.98 679.186 L1637.42 679.186 L1636.86 679.186 L1636.3 679.186 L1635.74 679.186 L1635.18 679.186 L1634.62 679.186 L1634.06 679.186 L1633.5 679.186 L1632.94 679.186 L1632.39 679.186 L1631.83 679.186 L1631.27 679.186 L1630.71 679.186 L1630.15 679.186 L1629.59 679.186 L1629.03 679.186 L1628.47 679.186 L1627.91 679.186 L1627.35 679.186 L1626.79 679.186 L1626.23 679.186 L1625.67 679.186 L1625.11 679.186 L1624.56 679.186 L1624 679.186 L1623.44 679.186 L1622.88 679.186 L1622.32 679.186 L1621.76 679.186 L1621.2 679.186 L1620.64 679.186 L1620.08 679.186 L1619.52 679.186 L1618.96 679.186 L1618.4 679.186 L1617.84 679.186 L1617.29 679.186 L1616.73 679.186 L1616.17 679.186 L1615.61 679.186 L1615.05 679.186 L1614.49 679.186 L1613.93 679.186 L1613.37 679.186 L1612.81 679.186 L1612.25 679.186 L1611.69 679.186 L1611.13 679.186 L1610.57 679.186 L1610.02 679.186 L1609.46 679.186 L1608.9 679.186 L1608.34 679.186 L1607.78 679.186 L1607.22 679.186 L1606.66 679.186 L1606.1 679.186 L1605.54 679.186 L1604.98 679.186 L1604.42 679.186 L1603.86 679.186 L1603.3 679.186 L1602.74 679.186 L1602.19 679.186 L1601.63 679.186 L1601.07 679.186 L1600.51 679.186 L1599.95 679.186 L1599.39 679.186 L1598.83 679.186 L1598.27 679.186 L1597.71 679.186 L1597.15 679.186 L1596.59 679.186 L1596.03 679.186 L1595.47 679.186 L1594.92 679.186 L1594.36 679.186 L1593.8 679.186 L1593.24 679.186 L1592.68 679.186 L1592.12 679.186 L1591.56 679.186 L1591 679.186 L1590.44 679.186 L1589.88 679.186 L1589.32 679.186 L1588.76 679.186 L1588.2 679.186 L1587.65 679.186 L1587.09 679.186 L1586.53 679.186 L1585.97 679.186 L1585.41 679.186 L1584.85 679.186 L1584.29 679.186 L1583.73 679.186 L1583.17 679.186 L1582.61 679.186 L1582.05 679.186 L1581.49 679.186 L1580.93 679.186 L1580.37 679.186 L1579.82 679.186 L1579.26 679.186 L1578.7 679.186 L1578.14 679.186 L1577.58 679.186 L1577.02 679.186 L1576.46 679.186 L1575.9 679.186 L1575.34 679.186 L1574.78 679.186 L1574.22 679.186 L1573.66 679.186 L1573.1 679.186 L1572.55 679.186 L1571.99 679.186 L1571.43 679.186 L1570.87 679.186 L1570.31 679.186 L1569.75 679.186 L1569.19 679.186 L1568.63 679.186 L1568.07 679.186 L1567.51 679.186 L1566.95 679.186 L1566.39 679.186 L1565.83 679.186 L1565.28 679.186 L1564.72 679.186 L1564.16 679.186 L1563.6 679.186 L1563.04 679.186 L1562.48 679.186 L1561.92 679.186 L1561.36 679.186 L1560.8 679.186 L1560.24 679.186 L1559.68 679.186 L1559.12 679.186 L1558.56 679.186 L1558 679.186 L1557.45 679.186 L1556.89 679.186 L1556.33 679.186 L1555.77 679.186 L1555.21 679.186 L1554.65 679.186 L1554.09 679.186 L1553.53 679.186 L1552.97 679.186 L1552.41 679.186 L1551.85 679.186 L1551.29 679.186 L1550.73 679.186 L1550.18 679.186 L1549.62 679.186 L1549.06 679.186 L1548.5 679.186 L1547.94 679.186 L1547.38 679.186 L1546.82 679.186 L1546.26 679.186 L1545.7 679.186 L1545.14 679.186 L1544.58 679.186 L1544.02 679.186 L1543.46 679.186 L1542.9 679.186 L1542.35 679.186 L1541.79 679.186 L1541.23 679.186 L1540.67 679.186 L1540.11 679.186 L1539.55 679.186 L1538.99 679.186 L1538.43 679.186 L1537.87 679.186 L1537.31 679.186 L1536.75 679.186 L1536.19 679.186 L1535.63 679.186 L1535.08 679.186 L1534.52 679.186 L1533.96 679.186 L1533.4 679.186 L1532.84 679.186 L1532.28 679.186 L1531.72 679.186 L1531.16 679.186 L1530.6 679.186 L1530.04 679.186 L1529.48 679.186 L1528.92 679.186 L1528.36 679.186 L1527.81 679.186 L1527.25 679.186 L1526.69 679.186 L1526.13 679.186 L1525.57 679.186 L1525.01 679.186 L1524.45 679.186 L1523.89 679.186 L1523.33 679.186 L1522.77 679.186 L1522.21 679.186 L1521.65 679.186 L1521.09 679.186 L1520.53 679.186 L1519.98 679.186 L1519.42 679.186 L1518.86 679.186 L1518.3 679.186 L1517.74 679.186 L1517.18 679.186 L1516.62 679.186 L1516.06 679.186 L1515.5 679.186 L1514.94 679.186 L1514.38 679.186 L1513.82 679.186 L1513.26 679.186 L1512.71 679.186 L1512.15 679.186 L1511.59 679.186 L1511.03 679.186 L1510.47 679.186 L1509.91 679.186 L1509.35 679.186 L1508.79 679.186 L1508.23 679.186 L1507.67 679.186 L1507.11 679.186 L1506.55 679.186 L1505.99 679.186 L1505.44 679.186 L1504.88 679.186 L1504.32 679.186 L1503.76 679.186 L1503.2 679.186 L1502.64 679.186 L1502.08 679.186 L1501.52 679.186 L1500.96 679.186 L1500.4 679.186 L1499.84 679.186 L1499.28 679.186 L1498.72 679.186 L1498.16 679.186 L1497.61 679.186 L1497.05 679.186 L1496.49 679.186 L1495.93 679.186 L1495.37 679.186 L1494.81 679.186 L1494.25 679.186 L1493.69 679.186 L1493.13 679.186 L1492.57 679.186 L1492.01 679.186 L1491.45 679.186 L1490.89 679.186 L1490.34 679.186 L1489.78 679.186 L1489.22 679.186 L1488.66 679.186 L1488.1 679.186 L1487.54 679.186 L1486.98 679.186 L1486.42 679.186 L1485.86 679.186 L1485.3 679.186 L1484.74 679.186 L1484.18 679.186 L1483.62 679.186 L1483.07 679.186 L1482.51 679.186 L1481.95 679.186 L1481.39 679.186 L1480.83 679.186 L1480.27 679.186 L1479.71 679.186 L1479.15 679.186 L1478.59 679.186 L1478.03 679.186 L1477.47 679.186 L1476.91 679.186 L1476.35 679.186 L1475.79 679.186 L1475.24 679.186 L1474.68 679.186 L1474.12 679.186 L1473.56 679.186 L1473 679.186 L1472.44 679.186 L1471.88 679.186 L1471.32 679.186 L1470.76 679.186 L1470.2 679.186 L1469.64 679.186 L1469.08 679.186 L1468.52 679.186 L1467.97 679.186 L1467.41 679.186 L1466.85 679.186 L1466.29 679.186 L1465.73 679.186 L1465.17 679.186 L1464.61 679.186 L1464.05 679.186 L1463.49 679.186 L1462.93 679.186 L1462.37 679.186 L1461.81 679.186 L1461.25 679.186 L1460.7 679.186 L1460.14 679.186 L1459.58 679.186 L1459.02 679.186 L1458.46 679.186 L1457.9 679.186 L1457.34 679.186 L1456.78 679.186 L1456.22 679.186 L1455.66 679.186 L1455.1 679.186 L1454.54 679.186 L1453.98 679.186 L1453.42 679.186 L1452.87 679.186 L1452.31 679.186 L1451.75 679.186 L1451.19 679.186 L1450.63 679.186 L1450.07 679.186 L1449.51 679.186 L1448.95 679.186 L1448.39 679.186 L1447.83 679.186 L1447.27 679.186 L1446.71 679.186 L1446.15 679.186 L1445.6 679.186 L1445.04 679.186 L1444.48 679.186 L1443.92 679.186 L1443.36 679.186 L1442.8 679.186 L1442.24 679.186 L1441.68 679.186 L1441.12 679.186 L1440.56 679.186 L1440 679.186 L1439.44 679.186 L1438.88 679.186 L1438.33 679.186 L1437.77 679.186 L1437.21 679.186 L1436.65 679.186 L1436.09 679.186 L1435.53 679.186 L1434.97 679.186 L1434.41 679.186 L1433.85 679.186 L1433.29 679.186 L1432.73 679.186 L1432.17 679.186 L1431.61 679.186 L1431.05 679.186 L1430.5 679.186 L1429.94 679.186 L1429.38 679.186 L1428.82 679.186 L1428.26 679.186 L1427.7 679.186 L1427.14 679.186 L1426.58 679.186 L1426.02 679.186 L1425.46 679.186 L1424.9 679.186 L1424.34 679.186 L1423.78 679.186 L1423.23 679.186 L1422.67 679.186 L1422.11 679.186 L1421.55 679.186 L1420.99 679.186 L1420.43 679.186 L1419.87 679.186 L1419.31 679.186 L1418.75 679.186 L1418.19 679.186 L1417.63 679.186 L1417.07 679.186 L1416.51 679.186 L1415.95 679.186 L1415.4 679.186 L1414.84 679.186 L1414.28 679.186 L1413.72 679.186 L1413.16 679.186 L1412.6 679.186 L1412.04 679.186 L1411.48 679.186 L1410.92 679.186 L1410.36 679.186 L1409.8 679.186 L1409.24 679.186 L1408.68 679.186 L1408.13 679.186 L1407.57 679.186 L1407.01 679.186 L1406.45 679.186 L1405.89 679.186 L1405.33 679.186 L1404.77 679.186 L1404.21 679.186 L1403.65 679.186 L1403.09 679.186 L1402.53 679.186 L1401.97 679.186 L1401.41 679.186 L1400.86 679.186 L1400.3 679.186 L1399.74 679.186 L1399.18 679.186 L1398.62 679.186 L1398.06 679.186 L1397.5 679.186 L1396.94 679.186 L1396.38 679.186 L1395.82 679.186 L1395.26 679.186 L1394.7 679.186 L1394.14 679.186 L1393.58 679.186 L1393.03 679.186 L1392.47 679.186 L1391.91 679.186 L1391.35 679.186 L1390.79 679.186 L1390.23 679.186 L1389.67 679.186 L1389.11 679.186 L1388.55 679.186 L1387.99 679.186 L1387.43 679.186 L1386.87 679.186 L1386.31 679.186 L1385.76 679.186 L1385.2 679.186 L1384.64 679.186 L1384.08 679.186 L1383.52 679.186 L1382.96 679.186 L1382.4 679.186 L1381.84 679.186 L1381.28 679.186 L1380.72 679.186 L1380.16 679.186 L1379.6 679.186 L1379.04 679.186 L1378.49 679.186 L1377.93 679.186 L1377.37 679.186 L1376.81 679.186 L1376.25 679.186 L1375.69 679.186 L1375.13 679.186 L1374.57 679.186 L1374.01 679.186 L1373.45 679.186 L1372.89 679.186 L1372.33 679.186 L1371.77 679.186 L1371.21 679.186 L1370.66 679.186 L1370.1 679.186 L1369.54 679.186 L1368.98 679.186 L1368.42 679.186 L1367.86 679.186 L1367.3 679.186 L1366.74 679.186 L1366.18 679.186 L1365.62 679.186 L1365.06 679.186 L1364.5 679.186 L1363.94 679.186 L1363.39 679.186 L1362.83 679.186 L1362.27 679.186 L1361.71 679.186 L1361.15 679.186 L1360.59 679.186 L1360.03 679.186 L1359.47 679.186 L1358.91 679.186 L1358.35 679.186 L1357.79 679.186 L1357.23 679.186 L1356.67 679.186 L1356.12 679.186 L1355.56 679.186 L1355 679.186 L1354.44 679.186 L1353.88 679.186 L1353.32 679.186 L1352.76 679.186 L1352.2 679.186 L1351.64 679.186 L1351.08 679.186 L1350.52 679.186 L1349.96 679.186 L1349.4 679.186 L1348.84 679.186 L1348.29 679.186 L1347.73 679.186 L1347.17 679.186 L1346.61 679.186 L1346.05 679.186 L1345.49 679.186 L1344.93 679.186 L1344.37 679.186 L1343.81 679.186 L1343.25 679.186 L1342.69 679.186 L1342.13 679.186 L1341.57 679.186 L1341.02 679.186 L1340.46 679.186 L1339.9 679.186 L1339.34 679.186 L1338.78 679.186 L1338.22 679.186 L1337.66 679.186 L1337.1 679.186 L1336.54 679.186 L1335.98 679.186 L1335.42 679.186 L1334.86 679.186 L1334.3 679.186 L1333.75 679.186 L1333.19 679.186 L1332.63 679.186 L1332.07 679.186 L1331.51 679.186 L1330.95 679.186 L1330.39 679.186 L1329.83 679.186 L1329.27 679.186 L1328.71 679.186 L1328.15 679.186 L1327.59 679.186 L1327.03 679.186 L1326.47 679.186 L1325.92 679.186 L1325.36 679.186 L1324.8 679.186 L1324.24 679.186 L1323.68 679.186 L1323.12 679.186 L1322.56 679.186 L1322 679.186 L1321.44 679.186 L1320.88 679.186 L1320.32 679.186 L1319.76 679.186 L1319.2 679.186 L1318.65 679.186 L1318.09 679.186 L1317.53 679.186 L1316.97 679.186 L1316.41 679.186 L1315.85 679.186 L1315.29 679.186 L1314.73 679.186 L1314.17 679.186 L1313.61 679.186 L1313.05 679.186 L1312.49 679.186 L1311.93 679.186 L1311.38 679.186 L1310.82 679.186 L1310.26 679.186 L1309.7 679.186 L1309.14 679.186 L1308.58 679.186 L1308.02 679.186 L1307.46 679.186 L1306.9 679.186 L1306.34 679.186 L1305.78 679.186 L1305.22 679.186 L1304.66 679.186 L1304.1 679.186 L1303.55 679.186 L1302.99 679.186 L1302.43 679.186 L1301.87 679.186 L1301.31 679.186 L1300.75 679.186 L1300.19 679.186 L1299.63 679.186 L1299.07 679.186 L1298.51 679.186 L1297.95 679.186 L1297.39 679.186 L1296.83 679.186 L1296.28 679.186 L1295.72 679.186 L1295.16 679.186 L1294.6 679.186 L1294.04 679.186 L1293.48 679.186 L1292.92 679.186 L1292.36 679.186 L1291.8 679.186 L1291.24 679.186 L1290.68 679.186 L1290.12 679.186 L1289.56 679.186 L1289 679.186 L1288.45 679.186 L1287.89 679.186 L1287.33 679.186 L1286.77 679.186 L1286.21 679.186 L1285.65 679.186 L1285.09 679.186 L1284.53 679.186 L1283.97 679.186 L1283.41 679.186 L1282.85 679.186 L1282.29 679.186 L1281.73 679.186 L1281.18 679.186 L1280.62 679.186 L1280.06 679.186 L1279.5 679.186 L1278.94 679.186 L1278.38 679.186 L1277.82 679.186 L1277.26 679.186 L1276.7 679.186 L1276.14 679.186 L1275.58 679.186 L1275.02 679.186 L1274.46 679.186 L1273.91 679.186 L1273.35 679.186 L1272.79 679.186 L1272.23 679.186 L1271.67 679.186 L1271.11 679.186 L1270.55 679.186 L1269.99 679.186 L1269.43 679.186 L1268.87 679.186 L1268.31 679.186 L1267.75 679.186 L1267.19 679.186 L1266.63 679.186 L1266.08 679.186 L1265.52 679.186 L1264.96 679.186 L1264.4 679.186 L1263.84 679.186 L1263.28 679.186 L1262.72 679.186 L1262.16 679.186 L1261.6 679.186 L1261.04 679.186 L1260.48 679.186 L1259.92 679.186 L1259.36 679.186 L1258.81 679.186 L1258.25 679.186 L1257.69 679.186 L1257.13 679.186 L1256.57 679.186 L1256.01 679.186 L1255.45 679.186 L1254.89 679.186 L1254.33 679.186 L1253.77 679.186 L1253.21 679.186 L1252.65 679.186 L1252.09 679.186 L1251.54 679.186 L1250.98 679.186 L1250.42 679.186 L1249.86 679.186 L1249.3 679.186 L1248.74 679.186 L1248.18 679.186 L1247.62 679.186 L1247.06 679.186 L1246.5 679.186 L1245.94 679.186 L1245.38 679.186 L1244.82 679.186 L1244.26 679.186 L1243.71 679.186 L1243.15 679.186 L1242.59 679.186 L1242.03 679.186 L1241.47 679.186 L1240.91 679.186 L1240.35 679.186 L1239.79 679.186 L1239.23 679.186 L1238.67 679.186 L1238.11 679.186 L1237.55 679.186 L1236.99 679.186 L1236.44 679.186 L1235.88 679.186 L1235.32 679.186 L1234.76 679.186 L1234.2 679.186 L1233.64 679.186 L1233.08 679.186 L1232.52 679.186 L1231.96 679.186 L1231.4 679.186 L1230.84 679.186 L1230.28 679.186 L1229.72 679.186 L1229.17 679.186 L1228.61 679.186 L1228.05 679.186 L1227.49 679.186 L1226.93 679.186 L1226.37 679.186 L1225.81 679.186 L1225.25 679.186 L1224.69 679.186 L1224.13 679.186 L1223.57 679.186 L1223.01 679.186 L1222.45 679.186 L1221.89 679.186 L1221.34 679.186 L1220.78 679.186 L1220.22 679.186 L1219.66 679.186 L1219.1 679.186 L1218.54 679.186 L1217.98 679.186 L1217.42 679.186 L1216.86 679.186 L1216.3 679.186 L1215.74 679.186 L1215.18 679.186 L1214.62 679.186 L1214.07 679.186 L1213.51 679.186 L1212.95 679.186 L1212.39 679.186 L1211.83 679.186 L1211.27 679.186 L1210.71 679.186 L1210.15 679.186 L1209.59 679.186 L1209.03 679.186 L1208.47 679.186 L1207.91 679.186 L1207.35 679.186 L1206.8 679.186 L1206.24 679.186 L1205.68 679.186 L1205.12 679.186 L1204.56 679.186 L1204 679.186 L1203.44 679.186 L1202.88 679.186 L1202.32 679.186 L1201.76 679.186 L1201.2 679.186 L1200.64 679.186 L1200.08 679.186 L1199.52 679.186 L1198.97 679.186 L1198.41 679.186 L1197.85 679.186 L1197.29 679.186 L1196.73 679.186 L1196.17 679.186 L1195.61 679.186 L1195.05 679.186 L1194.49 679.186 L1193.93 679.186 L1193.37 679.186 L1192.81 679.186 L1192.25 679.186 L1191.7 679.186 L1191.14 679.186 L1190.58 679.186 L1190.02 679.186 L1189.46 679.186 L1188.9 679.186 L1188.34 679.186 L1187.78 679.186 L1187.22 679.186 L1186.66 679.186 L1186.1 679.186 L1185.54 679.186 L1184.98 679.186 L1184.43 679.186 L1183.87 679.186 L1183.31 679.186 L1182.75 679.186 L1182.19 679.186 L1181.63 679.186 L1181.07 679.186 L1180.51 679.186 L1179.95 679.186 L1179.39 679.186 L1178.83 679.186 L1178.27 679.186 L1177.71 679.186 L1177.15 679.186 L1176.6 679.186 L1176.04 679.186 L1175.48 679.186 L1174.92 679.186 L1174.36 679.186 L1173.8 679.186 L1173.24 679.186 L1172.68 679.186 L1172.12 679.186 L1171.56 679.186 L1171 679.186 L1170.44 679.186 L1169.88 679.186 L1169.33 679.186 L1168.77 679.186 L1168.21 679.186 L1167.65 679.186 L1167.09 679.186 L1166.53 679.186 L1165.97 679.186 L1165.41 679.186 L1164.85 679.186 L1164.29 679.186 L1163.73 679.186 L1163.17 679.186 L1162.61 679.186 L1162.05 679.186 L1161.5 679.186 L1160.94 679.186 L1160.38 679.186 L1159.82 679.186 L1159.26 679.186 L1158.7 679.186 L1158.14 679.186 L1157.58 679.186 L1157.02 679.186 L1156.46 679.186 L1155.9 679.186 L1155.34 679.186 L1154.78 679.186 L1154.23 679.186 L1153.67 679.186 L1153.11 679.186 L1152.55 679.186 L1151.99 679.186 L1151.43 679.186 L1150.87 679.186 L1150.31 679.186 L1149.75 679.186 L1149.19 679.186 L1148.63 679.186 L1148.07 679.186 L1147.51 679.186 L1146.96 679.186 L1146.4 679.186 L1145.84 679.186 L1145.28 679.186 L1144.72 679.186 L1144.16 679.186 L1143.6 679.186 L1143.04 679.186 L1142.48 679.186 L1141.92 679.186 L1141.36 679.186 L1140.8 679.186 L1140.24 679.186 L1139.68 679.186 L1139.13 679.186 L1138.57 679.186 L1138.01 679.186 L1137.45 679.186 L1136.89 679.186 L1136.33 679.186 L1135.77 679.186 L1135.21 679.186 L1134.65 679.186 L1134.09 679.186 L1133.53 679.186 L1132.97 679.186 L1132.41 679.186 L1131.86 679.186 L1131.3 679.186 L1130.74 679.186 L1130.18 679.186 L1129.62 679.186 L1129.06 679.186 L1128.5 679.186 L1127.94 679.186 L1127.38 679.186 L1126.82 679.186 L1126.26 679.186 L1125.7 679.186 L1125.14 679.186 L1124.59 679.186 L1124.03 679.186 L1123.47 679.186 L1122.91 679.186 L1122.35 679.186 L1121.79 679.186 L1121.23 679.186 L1120.67 679.186 L1120.11 679.186 L1119.55 679.186 L1118.99 679.186 L1118.43 679.186 L1117.87 679.186 L1117.31 679.186 L1116.76 679.186 L1116.2 679.186 L1115.64 679.186 L1115.08 679.186 L1114.52 679.186 L1113.96 679.186 L1113.4 679.186 L1112.84 679.186 L1112.28 679.186 L1111.72 679.186 L1111.16 679.186 L1110.6 679.186 L1110.04 679.186 L1109.49 679.186 L1108.93 679.186 L1108.37 679.186 L1107.81 679.186 L1107.25 679.186 L1106.69 679.186 L1106.13 679.186 L1105.57 679.186 L1105.01 679.186 L1104.45 679.186 L1103.89 679.186 L1103.33 679.186 L1102.77 679.186 L1102.22 679.186 L1101.66 679.186 L1101.1 679.186 L1100.54 679.186 L1099.98 679.186 L1099.42 679.186 L1098.86 679.186 L1098.3 679.186 L1097.74 679.186 L1097.18 679.186 L1096.62 679.186 L1096.06 679.186 L1095.5 679.186 L1094.94 679.186 L1094.39 679.186 L1093.83 679.186 L1093.27 679.186 L1092.71 679.186 L1092.15 679.186 L1091.59 679.186 L1091.03 679.186 L1090.47 679.186 L1089.91 679.186 L1089.35 679.186 L1088.79 679.186 L1088.23 679.186 L1087.67 679.186 L1087.12 679.186 L1086.56 679.186 L1086 679.186 L1085.44 679.186 L1084.88 679.186 L1084.32 679.186 L1083.76 679.186 L1083.2 679.186 L1082.64 679.186 L1082.08 679.186 L1081.52 679.186 L1080.96 679.186 L1080.4 679.186 L1079.85 679.186 L1079.29 679.186 L1078.73 679.186 L1078.17 679.186 L1077.61 679.186 L1077.05 679.186 L1076.49 679.186 L1075.93 679.186 L1075.37 679.186 L1074.81 679.186 L1074.25 679.186 L1073.69 679.186 L1073.13 679.186 L1072.57 679.186 L1072.02 679.186 L1071.46 679.186 L1070.9 679.186 L1070.34 679.186 L1069.78 679.186 L1069.22 679.186 L1068.66 679.186 L1068.1 679.186 L1067.54 679.186 L1066.98 679.186 L1066.42 679.186 L1065.86 679.186 L1065.3 679.186 L1064.75 679.186 L1064.19 679.186 L1063.63 679.186 L1063.07 679.186 L1062.51 679.186 L1061.95 679.186 L1061.39 679.186 L1060.83 679.186 L1060.27 679.186 L1059.71 679.186 L1059.15 679.186 L1058.59 679.186 L1058.03 679.186 L1057.48 679.186 L1056.92 679.186 L1056.36 679.186 L1055.8 679.186 L1055.24 679.186 L1054.68 679.186 L1054.12 679.186 L1053.56 679.186 L1053 679.186 L1052.44 679.186 L1051.88 679.186 L1051.32 679.186 L1050.76 679.186 L1050.2 679.186 L1049.65 679.186 L1049.09 679.186 L1048.53 679.186 L1047.97 679.186 L1047.41 679.186 L1046.85 679.186 L1046.29 679.186 L1045.73 679.186 L1045.17 679.186 L1044.61 679.186 L1044.05 679.186 L1043.49 679.186 L1042.93 679.186 L1042.38 679.186 L1041.82 679.186 L1041.26 679.186 L1040.7 679.186 L1040.14 679.186 L1039.58 679.186 L1039.02 679.186 L1038.46 679.186 L1037.9 679.186 L1037.34 679.186 L1036.78 679.186 L1036.22 679.186 L1035.66 679.186 L1035.1 679.186 L1034.55 679.186 L1033.99 679.186 L1033.43 679.186 L1032.87 679.186 L1032.31 679.186 L1031.75 679.186 L1031.19 679.186 L1030.63 679.186 L1030.07 679.186 L1029.51 679.186 L1028.95 679.186 L1028.39 679.186 L1027.83 679.186 L1027.28 679.186 L1026.72 679.186 L1026.16 679.186 L1025.6 679.186 L1025.04 679.186 L1024.48 679.186 L1023.92 679.186 L1023.36 679.186 L1022.8 679.186 L1022.24 679.186 L1021.68 679.186 L1021.12 679.186 L1020.56 679.186 L1020.01 679.186 L1019.45 679.186 L1018.89 679.186 L1018.33 679.186 L1017.77 679.186 L1017.21 679.186 L1016.65 679.186 L1016.09 679.186 L1015.53 679.186 L1014.97 679.186 L1014.41 679.186 L1013.85 679.186 L1013.29 679.186 L1012.73 679.186 L1012.18 679.186 L1011.62 679.186 L1011.06 679.186 L1010.5 679.186 L1009.94 679.186 L1009.38 679.186 L1008.82 679.186 L1008.26 679.186 L1007.7 679.186 L1007.14 679.186 L1006.58 679.186 L1006.02 679.186 L1005.46 679.186 L1004.91 679.186 L1004.35 679.186 L1003.79 679.186 L1003.23 679.186 L1002.67 679.186 L1002.11 679.186 L1001.55 679.186 L1000.99 679.186 L1000.43 679.186 L999.872 679.186 L999.313 679.186 L998.754 679.186 L998.194 679.186 L997.635 679.186 L997.076 679.186 L996.517 679.186 L995.957 679.186 L995.398 679.186 L994.839 679.186 L994.28 679.186 L993.72 679.186 L993.161 679.186 L992.602 679.186 L992.043 679.186 L991.483 679.186 L990.924 679.186 L990.365 679.186 L989.806 679.186 L989.246 679.186 L988.687 679.186 L988.128 679.186 L987.569 679.186 L987.009 679.186 L986.45 679.186 L985.891 679.186 L985.332 679.186 L984.772 679.186 L984.213 679.186 L983.654 679.186 L983.095 679.186 L982.535 679.186 L981.976 679.186 L981.417 679.186 L980.858 679.186 L980.298 679.186 L979.739 679.186 L979.18 679.186 L978.621 679.186 L978.061 679.186 L977.502 679.186 L976.943 679.186 L976.384 679.186 L975.824 679.186 L975.265 679.186 L974.706 679.186 L974.147 679.186 L973.587 679.186 L973.028 679.186 L972.469 679.186 L971.91 679.186 L971.35 679.186 L970.791 679.186 L970.232 679.186 L969.673 679.186 L969.113 679.186 L968.554 679.186 L967.995 679.186 L967.436 679.186 L966.876 679.186 L966.317 679.186 L965.758 679.186 L965.199 679.186 L964.639 679.186 L964.08 679.186 L963.521 679.186 L962.962 679.186 L962.402 679.186 L961.843 679.186 L961.284 679.186 L960.725 679.186 L960.165 679.186 L959.606 679.186 L959.047 679.186 L958.488 679.186 L957.928 679.186 L957.369 679.186 L956.81 679.186 L956.251 679.186 L955.691 679.186 L955.132 679.186 L954.573 679.186 L954.014 679.186 L953.454 679.186 L952.895 679.186 L952.336 679.186 L951.777 679.186 L951.217 679.186 L950.658 679.186 L950.099 679.186 L949.54 679.186 L948.98 679.186 L948.421 679.186 L947.862 679.186 L947.303 679.186 L946.743 679.186 L946.184 679.186 L945.625 679.186 L945.066 679.186 L944.506 679.186 L943.947 679.186 L943.388 679.186 L942.829 679.186 L942.269 679.186 L941.71 679.186 L941.151 679.186 L940.592 679.186 L940.032 679.186 L939.473 679.186 L938.914 679.186 L938.355 679.186 L937.795 679.186 L937.236 679.186 L936.677 679.186 L936.118 679.186 L935.558 679.186 L934.999 679.186 L934.44 679.186 L933.881 679.186 L933.321 679.186 L932.762 679.186 L932.203 679.186 L931.644 679.186 L931.084 679.186 L930.525 679.186 L929.966 679.186 L929.406 679.186 L928.847 679.186 L928.288 679.186 L927.729 679.186 L927.169 679.186 L926.61 679.186 L926.051 679.186 L925.492 679.186 L924.932 679.186 L924.373 679.186 L923.814 679.186 L923.255 679.186 L922.695 679.186 L922.136 679.186 L921.577 679.186 L921.018 679.186 L920.458 679.186 L919.899 679.186 L919.34 679.186 L918.781 679.186 L918.221 679.186 L917.662 679.186 L917.103 679.186 L916.544 679.186 L915.984 679.186 L915.425 679.186 L914.866 679.186 L914.307 679.186 L913.747 679.186 L913.188 679.186 L912.629 679.186 L912.07 679.186 L911.51 679.186 L910.951 679.186 L910.392 679.186 L909.833 679.186 L909.273 679.186 L908.714 679.186 L908.155 679.186 L907.596 679.186 L907.036 679.186 L906.477 679.186 L905.918 679.186 L905.359 679.186 L904.799 679.186 L904.24 679.186 L903.681 679.186 L903.122 679.186 L902.562 679.186 L902.003 679.186 L901.444 679.186 L900.885 679.186 L900.325 679.186 L899.766 679.186 L899.207 679.186 L898.648 679.186 L898.088 679.186 L897.529 679.186 L896.97 679.186 L896.411 679.186 L895.851 679.186 L895.292 679.186 L894.733 679.186 L894.174 679.186 L893.614 679.186 L893.055 679.186 L892.496 679.186 L891.937 679.186 L891.377 679.186 L890.818 679.186 L890.259 679.186 L889.7 679.186 L889.14 679.186 L888.581 679.186 L888.022 679.186 L887.463 679.186 L886.903 679.186 L886.344 679.186 L885.785 679.186 L885.226 679.186 L884.666 679.186 L884.107 679.186 L883.548 679.186 L882.989 679.186 L882.429 679.186 L881.87 679.186 L881.311 679.186 L880.752 679.186 L880.192 679.186 L879.633 679.186 L879.074 679.186 L878.515 679.186 L877.955 679.186 L877.396 679.186 L876.837 679.186 L876.278 679.186 L875.718 679.186 L875.159 679.186 L874.6 679.186 L874.041 679.186 L873.481 679.186 L872.922 679.186 L872.363 679.186 L871.804 679.186 L871.244 679.186 L870.685 679.186 L870.126 679.186 L869.567 679.186 L869.007 679.186 L868.448 679.186 L867.889 679.186 L867.33 679.186 L866.77 679.186 L866.211 679.186 L865.652 679.186 L865.093 679.186 L864.533 679.186 L863.974 679.186 L863.415 679.186 L862.856 679.186 L862.296 679.186 L861.737 679.186 L861.178 679.186 L860.619 679.186 L860.059 679.186 L859.5 679.186 L858.941 679.186 L858.382 679.186 L857.822 679.186 L857.263 679.186 L856.704 679.186 L856.145 679.186 L855.585 679.186 L855.026 679.186 L854.467 679.186 L853.908 679.186 L853.348 679.186 L852.789 679.186 L852.23 679.186 L851.671 679.186 L851.111 679.186 L850.552 679.186 L849.993 679.186 L849.434 679.186 L848.874 679.186 L848.315 679.186 L847.756 679.186 L847.197 679.186 L846.637 679.186 L846.078 679.186 L845.519 679.186 L844.96 679.186 L844.4 679.186 L843.841 679.186 L843.282 679.186 L842.723 679.186 L842.163 679.186 L841.604 679.186 L841.045 679.186 L840.486 679.186 L839.926 679.186 L839.367 679.186 L838.808 679.186 L838.249 679.186 L837.689 679.186 L837.13 679.186 L836.571 679.186 L836.012 679.186 L835.452 679.186 L834.893 679.186 L834.334 679.186 L833.775 679.186 L833.215 679.186 L832.656 679.186 L832.097 679.186 L831.538 679.186 L830.978 679.186 L830.419 679.186 L829.86 679.186 L829.301 679.186 L828.741 679.186 L828.182 679.186 L827.623 679.186 L827.064 679.186 L826.504 679.186 L825.945 679.186 L825.386 679.186 L824.827 679.186 L824.267 679.186 L823.708 679.186 L823.149 679.186 L822.59 679.186 L822.03 679.186 L821.471 679.186 L820.912 679.186 L820.353 679.186 L819.793 679.186 L819.234 679.186 L818.675 679.186 L818.116 679.186 L817.556 679.186 L816.997 679.186 L816.438 679.186 L815.879 679.186 L815.319 679.186 L814.76 679.186 L814.201 679.186 L813.642 679.186 L813.082 679.186 L812.523 679.186 L811.964 679.186 L811.405 679.186 L810.845 679.186 L810.286 679.186 L809.727 679.186 L809.168 679.186 L808.608 679.186 L808.049 679.186 L807.49 679.186 L806.931 679.186 L806.371 679.186 L805.812 679.186 L805.253 679.186 L804.693 679.186 L804.134 679.186 L803.575 679.186 L803.016 679.186 L802.456 679.186 L801.897 679.186 L801.338 679.186 L800.779 679.186 L800.219 679.186 L799.66 679.186 L799.101 679.186 L798.542 679.186 L797.982 679.186 L797.423 679.186 L796.864 679.186 L796.305 679.186 L795.745 679.186 L795.186 679.186 L794.627 679.186 L794.068 679.186 L793.508 679.186 L792.949 679.186 L792.39 679.186 L791.831 679.186 L791.271 679.186 L790.712 679.186 L790.153 679.186 L789.594 679.186 L789.034 679.186 L788.475 679.186 L787.916 679.186 L787.357 679.186 L786.797 679.186 L786.238 679.186 L785.679 679.186 L785.12 679.186 L784.56 679.186 L784.001 679.186 L783.442 679.186 L782.883 679.186 L782.323 679.186 L781.764 679.186 L781.205 679.186 L780.646 679.186 L780.086 679.186 L779.527 679.186 L778.968 679.186 L778.409 679.186 L777.849 679.186 L777.29 679.186 L776.731 679.186 L776.172 679.186 L775.612 679.186 L775.053 679.186 L774.494 679.186 L773.935 679.186 L773.375 679.186 L772.816 679.186 L772.257 679.186 L771.698 679.186 L771.138 679.186 L770.579 679.186 L770.02 679.186 L769.461 679.186 L768.901 679.186 L768.342 679.186 L767.783 679.186 L767.224 679.186 L766.664 679.186 L766.105 679.186 L765.546 679.186 L764.987 679.186 L764.427 679.186 L763.868 679.186 L763.309 679.186 L762.75 679.186 L762.19 679.186 L761.631 679.186 L761.072 679.186 L760.513 679.186 L759.953 679.186 L759.394 679.186 L758.835 679.186 L758.276 679.186 L757.716 679.186 L757.157 679.186 L756.598 679.186 L756.039 679.186 L755.479 679.186 L754.92 679.186 L754.361 679.186 L753.802 679.186 L753.242 679.186 L752.683 679.186 L752.124 679.186 L751.565 679.186 L751.005 679.186 L750.446 679.186 L749.887 679.186 L749.328 679.186 L748.768 679.186 L748.209 679.186 L747.65 679.186 L747.091 679.186 L746.531 679.186 L745.972 679.186 L745.413 679.186 L744.854 679.186 L744.294 679.186 L743.735 679.186 L743.176 679.186 L742.617 679.186 L742.057 679.186 L741.498 679.186 L740.939 679.186 L740.38 679.186 L739.82 679.186 L739.261 679.186 L738.702 679.186 L738.143 679.186 L737.583 679.186 L737.024 679.186 L736.465 679.186 L735.906 679.186 L735.346 679.186 L734.787 679.186 L734.228 679.186 L733.669 679.186 L733.109 679.186 L732.55 679.186 L731.991 679.186 L731.432 679.186 L730.872 679.186 L730.313 679.186 L729.754 679.186 L729.195 679.186 L728.635 679.186 L728.076 679.186 L727.517 679.186 L726.958 679.186 L726.398 679.186 L725.839 679.186 L725.28 679.186 L724.721 679.186 L724.161 679.186 L723.602 679.186 L723.043 679.186 L722.484 679.186 L721.924 679.186 L721.365 679.186 L720.806 679.186 L720.247 679.186  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.291 720.806,684.291 721.365,684.291 721.924,684.291 722.484,684.291 723.043,684.291 723.602,684.291 724.161,684.291 724.721,684.291 725.28,684.291 725.839,684.291 726.398,684.291 726.958,684.291 727.517,684.291 728.076,684.291 728.635,684.291 729.195,684.291 729.754,684.291 730.313,684.291 730.872,684.291 731.432,684.291 731.991,684.291 732.55,684.291 733.109,684.291 733.669,684.291 734.228,684.291 734.787,684.291 735.346,684.291 735.906,684.291 736.465,684.291 737.024,684.291 737.583,684.291 738.143,684.291 738.702,684.291 739.261,684.291 739.82,684.291 740.38,684.291 740.939,684.291 741.498,684.291 742.057,684.291 742.617,684.291 743.176,684.291 743.735,684.291 744.294,684.291 744.854,684.291 745.413,684.291 745.972,684.291 746.531,684.291 747.091,684.291 747.65,684.291 748.209,684.291 748.768,684.291 749.328,684.291 749.887,684.291 750.446,684.291 751.005,684.291 751.565,684.291 752.124,684.291 752.683,684.291 753.242,684.291 753.802,684.291 754.361,684.291 754.92,684.291 755.479,684.291 756.039,684.291 756.598,684.291 757.157,684.291 757.716,684.291 758.276,684.291 758.835,684.291 759.394,684.291 759.953,684.291 760.513,684.291 761.072,684.291 761.631,684.291 762.19,684.291 762.75,684.291 763.309,684.291 763.868,684.291 764.427,684.291 764.987,684.291 765.546,684.291 766.105,684.291 766.664,684.291 767.224,684.291 767.783,684.291 768.342,684.291 768.901,684.291 769.461,684.291 770.02,684.291 770.579,684.291 771.138,684.291 771.698,684.291 772.257,684.291 772.816,684.291 773.375,684.291 773.935,684.291 774.494,684.291 775.053,684.291 775.612,684.291 776.172,684.291 776.731,684.291 777.29,684.291 777.849,684.291 778.409,684.291 778.968,684.291 779.527,684.291 780.086,684.291 780.646,684.291 781.205,684.291 781.764,684.291 782.323,684.291 782.883,684.291 783.442,684.291 784.001,684.291 784.56,684.291 785.12,684.291 785.679,684.291 786.238,684.291 786.797,684.291 787.357,684.291 787.916,684.291 788.475,684.291 789.034,684.291 789.594,684.291 790.153,684.291 790.712,684.291 791.271,684.291 791.831,684.291 792.39,684.291 792.949,684.291 793.508,684.291 794.068,684.291 794.627,684.291 795.186,684.291 795.745,684.291 796.305,684.291 796.864,684.291 797.423,684.291 797.982,684.291 798.542,684.291 799.101,684.291 799.66,684.291 800.219,684.291 800.779,684.291 801.338,684.291 801.897,684.291 802.456,684.291 803.016,684.291 803.575,684.291 804.134,684.291 804.693,684.291 805.253,684.291 805.812,684.291 806.371,684.291 806.931,684.291 807.49,684.291 808.049,684.291 808.608,684.291 809.168,684.291 809.727,684.291 810.286,684.291 810.845,684.291 811.405,684.291 811.964,684.291 812.523,684.291 813.082,684.291 813.642,684.291 814.201,684.291 814.76,684.291 815.319,684.291 815.879,684.291 816.438,684.291 816.997,684.291 817.556,684.291 818.116,684.291 818.675,684.291 819.234,684.291 819.793,684.291 820.353,684.291 820.912,684.291 821.471,684.291 822.03,684.291 822.59,684.291 823.149,684.291 823.708,684.291 824.267,684.291 824.827,684.291 825.386,684.291 825.945,684.291 826.504,684.291 827.064,684.291 827.623,684.291 828.182,684.291 828.741,684.291 829.301,684.291 829.86,684.291 830.419,684.291 830.978,684.291 831.538,684.291 832.097,684.291 832.656,684.291 833.215,684.291 833.775,684.291 834.334,684.291 834.893,684.291 835.452,684.291 836.012,684.291 836.571,684.291 837.13,684.291 837.689,684.291 838.249,684.291 838.808,684.291 839.367,684.291 839.926,684.291 840.486,684.291 841.045,684.291 841.604,684.291 842.163,684.291 842.723,684.291 843.282,684.291 843.841,684.291 844.4,684.291 844.96,684.291 845.519,684.291 846.078,684.291 846.637,684.291 847.197,684.291 847.756,684.291 848.315,684.291 848.874,684.291 849.434,684.291 849.993,684.291 850.552,684.291 851.111,684.291 851.671,684.291 852.23,684.291 852.789,684.291 853.348,684.291 853.908,684.291 854.467,684.291 855.026,684.291 855.585,684.291 856.145,684.291 856.704,684.291 857.263,684.291 857.822,684.291 858.382,684.291 858.941,684.291 859.5,684.291 860.059,684.291 860.619,684.291 861.178,684.291 861.737,684.291 862.296,684.291 862.856,684.291 863.415,684.291 863.974,684.291 864.533,684.291 865.093,684.291 865.652,684.291 866.211,684.291 866.77,684.291 867.33,684.291 867.889,684.291 868.448,684.291 869.007,684.291 869.567,684.291 870.126,684.291 870.685,684.291 871.244,684.291 871.804,684.291 872.363,684.291 872.922,684.291 873.481,684.291 874.041,684.291 874.6,684.291 875.159,684.291 875.718,684.291 876.278,684.291 876.837,684.291 877.396,684.291 877.955,684.291 878.515,684.291 879.074,684.291 879.633,684.291 880.192,684.291 880.752,684.291 881.311,684.291 881.87,684.291 882.429,684.291 882.989,684.291 883.548,684.291 884.107,684.291 884.666,684.291 885.226,684.291 885.785,684.291 886.344,684.291 886.903,684.291 887.463,684.291 888.022,684.291 888.581,684.291 889.14,684.291 889.7,684.291 890.259,684.291 890.818,684.291 891.377,684.291 891.937,684.291 892.496,684.291 893.055,684.291 893.614,684.291 894.174,684.291 894.733,684.291 895.292,684.291 895.851,684.291 896.411,684.291 896.97,684.291 897.529,684.291 898.088,684.291 898.648,684.291 899.207,684.291 899.766,684.291 900.325,684.291 900.885,684.291 901.444,684.291 902.003,684.291 902.562,684.291 903.122,684.291 903.681,684.291 904.24,684.291 904.799,684.291 905.359,684.291 905.918,684.291 906.477,684.291 907.036,684.291 907.596,684.291 908.155,684.291 908.714,684.291 909.273,684.291 909.833,684.291 910.392,684.291 910.951,684.291 911.51,684.291 912.07,684.291 912.629,684.291 913.188,684.291 913.747,684.291 914.307,684.291 914.866,684.291 915.425,684.291 915.984,684.291 916.544,684.291 917.103,684.291 917.662,684.291 918.221,684.291 918.781,684.291 919.34,684.291 919.899,684.291 920.458,684.291 921.018,684.291 921.577,684.291 922.136,684.291 922.695,684.291 923.255,684.291 923.814,684.291 924.373,684.291 924.932,684.291 925.492,684.291 926.051,684.291 926.61,684.291 927.169,684.291 927.729,684.291 928.288,684.291 928.847,684.291 929.406,684.291 929.966,684.291 930.525,684.291 931.084,684.291 931.644,684.291 932.203,684.291 932.762,684.291 933.321,684.291 933.881,684.291 934.44,684.291 934.999,684.291 935.558,684.291 936.118,684.291 936.677,684.291 937.236,684.291 937.795,684.291 938.355,684.291 938.914,684.291 939.473,684.291 940.032,684.291 940.592,684.291 941.151,684.291 941.71,684.291 942.269,684.291 942.829,684.291 943.388,684.291 943.947,684.291 944.506,684.291 945.066,684.291 945.625,684.291 946.184,684.291 946.743,684.291 947.303,684.291 947.862,684.291 948.421,684.291 948.98,684.291 949.54,684.291 950.099,684.291 950.658,684.291 951.217,684.291 951.777,684.291 952.336,684.291 952.895,684.291 953.454,684.291 954.014,684.291 954.573,684.291 955.132,684.291 955.691,684.291 956.251,684.291 956.81,684.291 957.369,684.291 957.928,684.291 958.488,684.291 959.047,684.291 959.606,684.291 960.165,684.291 960.725,684.291 961.284,684.291 961.843,684.291 962.402,684.291 962.962,684.291 963.521,684.291 964.08,684.291 964.639,684.291 965.199,684.291 965.758,684.291 966.317,684.291 966.876,684.291 967.436,684.291 967.995,684.291 968.554,684.291 969.113,684.291 969.673,684.291 970.232,684.291 970.791,684.291 971.35,684.291 971.91,684.291 972.469,684.291 973.028,684.291 973.587,684.291 974.147,684.291 974.706,684.291 975.265,684.291 975.824,684.291 976.384,684.291 976.943,684.291 977.502,684.291 978.061,684.291 978.621,684.291 979.18,684.291 979.739,684.291 980.298,684.291 980.858,684.291 981.417,684.291 981.976,684.291 982.535,684.291 983.095,684.291 983.654,684.291 984.213,684.291 984.772,684.291 985.332,684.291 985.891,684.291 986.45,684.291 987.009,684.291 987.569,684.291 988.128,684.291 988.687,684.291 989.246,684.291 989.806,684.291 990.365,684.291 990.924,684.291 991.483,684.291 992.043,684.291 992.602,684.291 993.161,684.291 993.72,684.291 994.28,684.291 994.839,684.291 995.398,684.291 995.957,684.291 996.517,684.291 997.076,684.291 997.635,684.291 998.194,684.291 998.754,684.291 999.313,684.291 999.872,684.291 1000.43,684.291 1000.99,684.291 1001.55,684.291 1002.11,684.291 1002.67,684.291 1003.23,684.291 1003.79,684.291 1004.35,684.291 1004.91,684.291 1005.46,684.291 1006.02,684.291 1006.58,684.291 1007.14,684.291 1007.7,684.291 1008.26,684.291 1008.82,684.291 1009.38,684.291 1009.94,684.291 1010.5,684.291 1011.06,684.291 1011.62,684.291 1012.18,684.291 1012.73,684.291 1013.29,684.291 1013.85,684.291 1014.41,684.291 1014.97,684.291 1015.53,684.291 1016.09,684.291 1016.65,684.291 1017.21,684.291 1017.77,684.291 1018.33,684.291 1018.89,684.291 1019.45,684.291 1020.01,684.291 1020.56,684.291 1021.12,684.291 1021.68,684.291 1022.24,684.291 1022.8,684.291 1023.36,684.291 1023.92,684.291 1024.48,684.291 1025.04,684.291 1025.6,684.291 1026.16,684.291 1026.72,684.291 1027.28,684.291 1027.83,684.291 1028.39,684.291 1028.95,684.291 1029.51,684.291 1030.07,684.291 1030.63,684.291 1031.19,684.291 1031.75,684.291 1032.31,684.291 1032.87,684.291 1033.43,684.291 1033.99,684.291 1034.55,684.291 1035.1,684.291 1035.66,684.291 1036.22,684.291 1036.78,684.291 1037.34,684.291 1037.9,684.291 1038.46,684.291 1039.02,684.291 1039.58,684.291 1040.14,684.291 1040.7,684.291 1041.26,684.291 1041.82,684.291 1042.38,684.291 1042.93,684.291 1043.49,684.291 1044.05,684.291 1044.61,684.291 1045.17,684.291 1045.73,684.291 1046.29,684.291 1046.85,684.291 1047.41,684.291 1047.97,684.291 1048.53,684.291 1049.09,684.291 1049.65,684.291 1050.2,684.291 1050.76,684.291 1051.32,684.291 1051.88,684.291 1052.44,684.291 1053,684.291 1053.56,684.291 1054.12,684.291 1054.68,684.291 1055.24,684.291 1055.8,684.291 1056.36,684.291 1056.92,684.291 1057.48,684.291 1058.03,684.291 1058.59,684.291 1059.15,684.291 1059.71,684.291 1060.27,684.291 1060.83,684.291 1061.39,684.291 1061.95,684.291 1062.51,684.291 1063.07,684.291 1063.63,684.291 1064.19,684.291 1064.75,684.291 1065.3,684.291 1065.86,684.291 1066.42,684.291 1066.98,684.291 1067.54,684.291 1068.1,684.291 1068.66,684.291 1069.22,684.291 1069.78,684.291 1070.34,684.291 1070.9,684.291 1071.46,684.291 1072.02,684.291 1072.57,684.291 1073.13,684.291 1073.69,684.291 1074.25,684.291 1074.81,684.291 1075.37,684.291 1075.93,684.291 1076.49,684.291 1077.05,684.291 1077.61,684.291 1078.17,684.291 1078.73,684.291 1079.29,684.291 1079.85,684.291 1080.4,684.291 1080.96,684.291 1081.52,684.291 1082.08,684.291 1082.64,684.291 1083.2,684.291 1083.76,684.291 1084.32,684.291 1084.88,684.291 1085.44,684.291 1086,684.291 1086.56,684.291 1087.12,684.291 1087.67,684.291 1088.23,684.291 1088.79,684.291 1089.35,684.291 1089.91,684.291 1090.47,684.291 1091.03,684.291 1091.59,684.291 1092.15,684.291 1092.71,684.291 1093.27,684.291 1093.83,684.291 1094.39,684.291 1094.94,684.291 1095.5,684.291 1096.06,684.291 1096.62,684.291 1097.18,684.291 1097.74,684.291 1098.3,684.291 1098.86,684.291 1099.42,684.291 1099.98,684.291 1100.54,684.291 1101.1,684.291 1101.66,684.291 1102.22,684.291 1102.77,684.291 1103.33,684.291 1103.89,684.291 1104.45,684.291 1105.01,684.291 1105.57,684.291 1106.13,684.291 1106.69,684.291 1107.25,684.291 1107.81,684.291 1108.37,684.291 1108.93,684.291 1109.49,684.291 1110.04,684.291 1110.6,684.291 1111.16,684.291 1111.72,684.291 1112.28,684.291 1112.84,684.291 1113.4,684.291 1113.96,684.291 1114.52,684.291 1115.08,684.291 1115.64,684.291 1116.2,684.291 1116.76,684.291 1117.31,684.291 1117.87,684.291 1118.43,684.291 1118.99,684.291 1119.55,684.291 1120.11,684.291 1120.67,684.291 1121.23,684.291 1121.79,684.291 1122.35,684.291 1122.91,684.291 1123.47,684.291 1124.03,684.291 1124.59,684.291 1125.14,684.291 1125.7,684.291 1126.26,684.291 1126.82,684.291 1127.38,684.291 1127.94,684.291 1128.5,684.291 1129.06,684.291 1129.62,684.291 1130.18,684.291 1130.74,684.291 1131.3,684.291 1131.86,684.291 1132.41,684.291 1132.97,684.291 1133.53,684.291 1134.09,684.291 1134.65,684.291 1135.21,684.291 1135.77,684.291 1136.33,684.291 1136.89,684.291 1137.45,684.291 1138.01,684.291 1138.57,684.291 1139.13,684.291 1139.68,684.291 1140.24,684.291 1140.8,684.291 1141.36,684.291 1141.92,684.291 1142.48,684.291 1143.04,684.291 1143.6,684.291 1144.16,684.291 1144.72,684.291 1145.28,684.291 1145.84,684.291 1146.4,684.291 1146.96,684.291 1147.51,684.291 1148.07,684.291 1148.63,684.291 1149.19,684.291 1149.75,684.291 1150.31,684.291 1150.87,684.291 1151.43,684.291 1151.99,684.291 1152.55,684.291 1153.11,684.291 1153.67,684.291 1154.23,684.291 1154.78,684.291 1155.34,684.291 1155.9,684.291 1156.46,684.291 1157.02,684.291 1157.58,684.291 1158.14,684.291 1158.7,684.291 1159.26,684.291 1159.82,684.291 1160.38,684.291 1160.94,684.291 1161.5,684.291 1162.05,684.291 1162.61,684.291 1163.17,684.291 1163.73,684.291 1164.29,684.291 1164.85,684.291 1165.41,684.291 1165.97,684.291 1166.53,684.291 1167.09,684.291 1167.65,684.291 1168.21,684.291 1168.77,684.291 1169.33,684.291 1169.88,684.291 1170.44,684.291 1171,684.291 1171.56,684.291 1172.12,684.291 1172.68,684.291 1173.24,684.291 1173.8,684.291 1174.36,684.291 1174.92,684.291 1175.48,684.291 1176.04,684.291 1176.6,684.291 1177.15,684.291 1177.71,684.291 1178.27,684.291 1178.83,684.291 1179.39,684.291 1179.95,684.291 1180.51,684.291 1181.07,684.291 1181.63,684.291 1182.19,684.291 1182.75,684.291 1183.31,684.291 1183.87,684.291 1184.43,684.291 1184.98,684.291 1185.54,684.291 1186.1,684.291 1186.66,684.291 1187.22,684.291 1187.78,684.291 1188.34,684.291 1188.9,684.291 1189.46,684.291 1190.02,684.291 1190.58,684.291 1191.14,684.291 1191.7,684.291 1192.25,684.291 1192.81,684.291 1193.37,684.291 1193.93,684.291 1194.49,684.291 1195.05,684.291 1195.61,684.291 1196.17,684.291 1196.73,684.291 1197.29,684.291 1197.85,684.291 1198.41,684.291 1198.97,684.291 1199.52,684.291 1200.08,684.291 1200.64,684.291 1201.2,684.291 1201.76,684.291 1202.32,684.291 1202.88,684.291 1203.44,684.291 1204,684.291 1204.56,684.291 1205.12,684.291 1205.68,684.291 1206.24,684.291 1206.8,684.291 1207.35,684.291 1207.91,684.291 1208.47,684.291 1209.03,684.291 1209.59,684.291 1210.15,684.291 1210.71,684.291 1211.27,684.291 1211.83,684.291 1212.39,684.291 1212.95,684.291 1213.51,684.291 1214.07,684.291 1214.62,684.291 1215.18,684.291 1215.74,684.291 1216.3,684.291 1216.86,684.291 1217.42,684.291 1217.98,684.291 1218.54,684.291 1219.1,684.291 1219.66,684.291 1220.22,684.291 1220.78,684.291 1221.34,684.291 1221.89,684.291 1222.45,684.291 1223.01,684.291 1223.57,684.291 1224.13,684.291 1224.69,684.291 1225.25,684.291 1225.81,684.291 1226.37,684.291 1226.93,684.291 1227.49,684.291 1228.05,684.291 1228.61,684.291 1229.17,684.291 1229.72,684.291 1230.28,684.291 1230.84,684.291 1231.4,684.291 1231.96,684.291 1232.52,684.291 1233.08,684.291 1233.64,684.291 1234.2,684.291 1234.76,684.291 1235.32,684.291 1235.88,684.291 1236.44,684.291 1236.99,684.291 1237.55,684.291 1238.11,684.291 1238.67,684.291 1239.23,684.291 1239.79,684.291 1240.35,684.291 1240.91,684.291 1241.47,684.291 1242.03,684.291 1242.59,684.291 1243.15,684.291 1243.71,684.291 1244.26,684.291 1244.82,684.291 1245.38,684.291 1245.94,684.291 1246.5,684.291 1247.06,684.291 1247.62,684.291 1248.18,684.291 1248.74,684.291 1249.3,684.291 1249.86,684.291 1250.42,684.291 1250.98,684.291 1251.54,684.291 1252.09,684.291 1252.65,684.291 1253.21,684.291 1253.77,684.291 1254.33,684.291 1254.89,684.291 1255.45,684.291 1256.01,684.291 1256.57,684.291 1257.13,684.291 1257.69,684.291 1258.25,684.291 1258.81,684.291 1259.36,684.291 1259.92,684.291 1260.48,684.291 1261.04,684.291 1261.6,684.291 1262.16,684.291 1262.72,684.291 1263.28,684.291 1263.84,684.291 1264.4,684.291 1264.96,684.291 1265.52,684.291 1266.08,684.291 1266.63,684.291 1267.19,684.291 1267.75,684.291 1268.31,684.291 1268.87,684.291 1269.43,684.291 1269.99,684.291 1270.55,684.291 1271.11,684.291 1271.67,684.291 1272.23,684.291 1272.79,684.291 1273.35,684.291 1273.91,684.291 1274.46,684.291 1275.02,684.291 1275.58,684.291 1276.14,684.291 1276.7,684.291 1277.26,684.291 1277.82,684.291 1278.38,684.291 1278.94,684.291 1279.5,684.291 1280.06,684.291 1280.62,684.291 1281.18,684.291 1281.73,684.291 1282.29,684.291 1282.85,684.291 1283.41,684.291 1283.97,684.291 1284.53,684.291 1285.09,684.291 1285.65,684.291 1286.21,684.291 1286.77,684.291 1287.33,684.291 1287.89,684.291 1288.45,684.291 1289,684.291 1289.56,684.291 1290.12,684.291 1290.68,684.291 1291.24,684.291 1291.8,684.291 1292.36,684.291 1292.92,684.291 1293.48,684.291 1294.04,684.291 1294.6,684.291 1295.16,684.291 1295.72,684.291 1296.28,684.291 1296.83,684.291 1297.39,684.291 1297.95,684.291 1298.51,684.291 1299.07,684.291 1299.63,684.291 1300.19,684.291 1300.75,684.291 1301.31,684.291 1301.87,684.291 1302.43,684.291 1302.99,684.291 1303.55,684.291 1304.1,684.291 1304.66,684.291 1305.22,684.291 1305.78,684.291 1306.34,684.291 1306.9,684.291 1307.46,684.291 1308.02,684.291 1308.58,684.291 1309.14,684.291 1309.7,684.291 1310.26,684.291 1310.82,684.291 1311.38,684.291 1311.93,684.291 1312.49,684.291 1313.05,684.291 1313.61,684.291 1314.17,684.291 1314.73,684.291 1315.29,684.291 1315.85,684.291 1316.41,684.291 1316.97,684.291 1317.53,684.291 1318.09,684.291 1318.65,684.291 1319.2,684.291 1319.76,684.291 1320.32,684.291 1320.88,684.291 1321.44,684.291 1322,684.291 1322.56,684.291 1323.12,684.291 1323.68,684.291 1324.24,684.291 1324.8,684.291 1325.36,684.291 1325.92,684.291 1326.47,684.291 1327.03,684.291 1327.59,684.291 1328.15,684.291 1328.71,684.291 1329.27,684.291 1329.83,684.291 1330.39,684.291 1330.95,684.291 1331.51,684.291 1332.07,684.291 1332.63,684.291 1333.19,684.291 1333.75,684.291 1334.3,684.291 1334.86,684.291 1335.42,684.291 1335.98,684.291 1336.54,684.291 1337.1,684.291 1337.66,684.291 1338.22,684.291 1338.78,684.291 1339.34,684.291 1339.9,684.291 1340.46,684.291 1341.02,684.291 1341.57,684.291 1342.13,684.291 1342.69,684.291 1343.25,684.291 1343.81,684.291 1344.37,684.291 1344.93,684.291 1345.49,684.291 1346.05,684.291 1346.61,684.291 1347.17,684.291 1347.73,684.291 1348.29,684.291 1348.84,684.291 1349.4,684.291 1349.96,684.291 1350.52,684.291 1351.08,684.291 1351.64,684.291 1352.2,684.291 1352.76,684.291 1353.32,684.291 1353.88,684.291 1354.44,684.291 1355,684.291 1355.56,684.291 1356.12,684.291 1356.67,684.291 1357.23,684.291 1357.79,684.291 1358.35,684.291 1358.91,684.291 1359.47,684.291 1360.03,684.291 1360.59,684.291 1361.15,684.291 1361.71,684.291 1362.27,684.291 1362.83,684.291 1363.39,684.291 1363.94,684.291 1364.5,684.291 1365.06,684.291 1365.62,684.291 1366.18,684.291 1366.74,684.291 1367.3,684.291 1367.86,684.291 1368.42,684.291 1368.98,684.291 1369.54,684.291 1370.1,684.291 1370.66,684.291 1371.21,684.291 1371.77,684.291 1372.33,684.291 1372.89,684.291 1373.45,684.291 1374.01,684.291 1374.57,684.291 1375.13,684.291 1375.69,684.291 1376.25,684.291 1376.81,684.291 1377.37,684.291 1377.93,684.291 1378.49,684.291 1379.04,684.291 1379.6,684.291 1380.16,684.291 1380.72,684.291 1381.28,684.291 1381.84,684.291 1382.4,684.291 1382.96,684.291 1383.52,684.291 1384.08,684.291 1384.64,684.291 1385.2,684.291 1385.76,684.291 1386.31,684.291 1386.87,684.291 1387.43,684.291 1387.99,684.291 1388.55,684.291 1389.11,684.291 1389.67,684.291 1390.23,684.291 1390.79,684.291 1391.35,684.291 1391.91,684.291 1392.47,684.291 1393.03,684.291 1393.58,684.291 1394.14,684.291 1394.7,684.291 1395.26,684.291 1395.82,684.291 1396.38,684.291 1396.94,684.291 1397.5,684.291 1398.06,684.291 1398.62,684.291 1399.18,684.291 1399.74,684.291 1400.3,684.291 1400.86,684.291 1401.41,684.291 1401.97,684.291 1402.53,684.291 1403.09,684.291 1403.65,684.291 1404.21,684.291 1404.77,684.291 1405.33,684.291 1405.89,684.291 1406.45,684.291 1407.01,684.291 1407.57,684.291 1408.13,684.291 1408.68,684.291 1409.24,684.291 1409.8,684.291 1410.36,684.291 1410.92,684.291 1411.48,684.291 1412.04,684.291 1412.6,684.291 1413.16,684.291 1413.72,684.291 1414.28,684.291 1414.84,684.291 1415.4,684.291 1415.95,684.291 1416.51,684.291 1417.07,684.291 1417.63,684.291 1418.19,684.291 1418.75,684.291 1419.31,684.291 1419.87,684.291 1420.43,684.291 1420.99,684.291 1421.55,684.291 1422.11,684.291 1422.67,684.291 1423.23,684.291 1423.78,684.291 1424.34,684.291 1424.9,684.291 1425.46,684.291 1426.02,684.291 1426.58,684.291 1427.14,684.291 1427.7,684.291 1428.26,684.291 1428.82,684.291 1429.38,684.291 1429.94,684.291 1430.5,684.291 1431.05,684.291 1431.61,684.291 1432.17,684.291 1432.73,684.291 1433.29,684.291 1433.85,684.291 1434.41,684.291 1434.97,684.291 1435.53,684.291 1436.09,684.291 1436.65,684.291 1437.21,684.291 1437.77,684.291 1438.33,684.291 1438.88,684.291 1439.44,684.291 1440,684.291 1440.56,684.291 1441.12,684.291 1441.68,684.291 1442.24,684.291 1442.8,684.291 1443.36,684.291 1443.92,684.291 1444.48,684.291 1445.04,684.291 1445.6,684.291 1446.15,684.291 1446.71,684.291 1447.27,684.291 1447.83,684.291 1448.39,684.291 1448.95,684.291 1449.51,684.291 1450.07,684.291 1450.63,684.291 1451.19,684.291 1451.75,684.291 1452.31,684.291 1452.87,684.291 1453.42,684.291 1453.98,684.291 1454.54,684.291 1455.1,684.291 1455.66,684.291 1456.22,684.291 1456.78,684.291 1457.34,684.291 1457.9,684.291 1458.46,684.291 1459.02,684.291 1459.58,684.291 1460.14,684.291 1460.7,684.291 1461.25,684.291 1461.81,684.291 1462.37,684.291 1462.93,684.291 1463.49,684.291 1464.05,684.291 1464.61,684.291 1465.17,684.291 1465.73,684.291 1466.29,684.291 1466.85,684.291 1467.41,684.291 1467.97,684.291 1468.52,684.291 1469.08,684.291 1469.64,684.291 1470.2,684.291 1470.76,684.291 1471.32,684.291 1471.88,684.291 1472.44,684.291 1473,684.291 1473.56,684.291 1474.12,684.291 1474.68,684.291 1475.24,684.291 1475.79,684.291 1476.35,684.291 1476.91,684.291 1477.47,684.291 1478.03,684.291 1478.59,684.291 1479.15,684.291 1479.71,684.291 1480.27,684.291 1480.83,684.291 1481.39,684.291 1481.95,684.291 1482.51,684.291 1483.07,684.291 1483.62,684.291 1484.18,684.291 1484.74,684.291 1485.3,684.291 1485.86,684.291 1486.42,684.291 1486.98,684.291 1487.54,684.291 1488.1,684.291 1488.66,684.291 1489.22,684.291 1489.78,684.291 1490.34,684.291 1490.89,684.291 1491.45,684.291 1492.01,684.291 1492.57,684.291 1493.13,684.291 1493.69,684.291 1494.25,684.291 1494.81,684.291 1495.37,684.291 1495.93,684.291 1496.49,684.291 1497.05,684.291 1497.61,684.291 1498.16,684.291 1498.72,684.291 1499.28,684.291 1499.84,684.291 1500.4,684.291 1500.96,684.291 1501.52,684.291 1502.08,684.291 1502.64,684.291 1503.2,684.291 1503.76,684.291 1504.32,684.291 1504.88,684.291 1505.44,684.291 1505.99,684.291 1506.55,684.291 1507.11,684.291 1507.67,684.291 1508.23,684.291 1508.79,684.291 1509.35,684.291 1509.91,684.291 1510.47,684.291 1511.03,684.291 1511.59,684.291 1512.15,684.291 1512.71,684.291 1513.26,684.291 1513.82,684.291 1514.38,684.291 1514.94,684.291 1515.5,684.291 1516.06,684.291 1516.62,684.291 1517.18,684.291 1517.74,684.291 1518.3,684.291 1518.86,684.291 1519.42,684.291 1519.98,684.291 1520.53,684.291 1521.09,684.291 1521.65,684.291 1522.21,684.291 1522.77,684.291 1523.33,684.291 1523.89,684.291 1524.45,684.291 1525.01,684.291 1525.57,684.291 1526.13,684.291 1526.69,684.291 1527.25,684.291 1527.81,684.291 1528.36,684.291 1528.92,684.291 1529.48,684.291 1530.04,684.291 1530.6,684.291 1531.16,684.291 1531.72,684.291 1532.28,684.291 1532.84,684.291 1533.4,684.291 1533.96,684.291 1534.52,684.291 1535.08,684.291 1535.63,684.291 1536.19,684.291 1536.75,684.291 1537.31,684.291 1537.87,684.291 1538.43,684.291 1538.99,684.291 1539.55,684.291 1540.11,684.291 1540.67,684.291 1541.23,684.291 1541.79,684.291 1542.35,684.291 1542.9,684.291 1543.46,684.291 1544.02,684.291 1544.58,684.291 1545.14,684.291 1545.7,684.291 1546.26,684.291 1546.82,684.291 1547.38,684.291 1547.94,684.291 1548.5,684.291 1549.06,684.291 1549.62,684.291 1550.18,684.291 1550.73,684.291 1551.29,684.291 1551.85,684.291 1552.41,684.291 1552.97,684.291 1553.53,684.291 1554.09,684.291 1554.65,684.291 1555.21,684.291 1555.77,684.291 1556.33,684.291 1556.89,684.291 1557.45,684.291 1558,684.291 1558.56,684.291 1559.12,684.291 1559.68,684.291 1560.24,684.291 1560.8,684.291 1561.36,684.291 1561.92,684.291 1562.48,684.291 1563.04,684.291 1563.6,684.291 1564.16,684.291 1564.72,684.291 1565.28,684.291 1565.83,684.291 1566.39,684.291 1566.95,684.291 1567.51,684.291 1568.07,684.291 1568.63,684.291 1569.19,684.291 1569.75,684.291 1570.31,684.291 1570.87,684.291 1571.43,684.291 1571.99,684.291 1572.55,684.291 1573.1,684.291 1573.66,684.291 1574.22,684.291 1574.78,684.291 1575.34,684.291 1575.9,684.291 1576.46,684.291 1577.02,684.291 1577.58,684.291 1578.14,684.291 1578.7,684.291 1579.26,684.291 1579.82,684.291 1580.37,684.291 1580.93,684.291 1581.49,684.291 1582.05,684.291 1582.61,684.291 1583.17,684.291 1583.73,684.291 1584.29,684.291 1584.85,684.291 1585.41,684.291 1585.97,684.291 1586.53,684.291 1587.09,684.291 1587.65,684.291 1588.2,684.291 1588.76,684.291 1589.32,684.291 1589.88,684.291 1590.44,684.291 1591,684.291 1591.56,684.291 1592.12,684.291 1592.68,684.291 1593.24,684.291 1593.8,684.291 1594.36,684.291 1594.92,684.291 1595.47,684.291 1596.03,684.291 1596.59,684.291 1597.15,684.291 1597.71,684.291 1598.27,684.291 1598.83,684.291 1599.39,684.291 1599.95,684.291 1600.51,684.291 1601.07,684.291 1601.63,684.291 1602.19,684.291 1602.74,684.291 1603.3,684.291 1603.86,684.291 1604.42,684.291 1604.98,684.291 1605.54,684.291 1606.1,684.291 1606.66,684.291 1607.22,684.291 1607.78,684.291 1608.34,684.291 1608.9,684.291 1609.46,684.291 1610.02,684.291 1610.57,684.291 1611.13,684.291 1611.69,684.291 1612.25,684.291 1612.81,684.291 1613.37,684.291 1613.93,684.291 1614.49,684.291 1615.05,684.291 1615.61,684.291 1616.17,684.291 1616.73,684.291 1617.29,684.291 1617.84,684.291 1618.4,684.291 1618.96,684.291 1619.52,684.291 1620.08,684.291 1620.64,684.291 1621.2,684.291 1621.76,684.291 1622.32,684.291 1622.88,684.291 1623.44,684.291 1624,684.291 1624.56,684.291 1625.11,684.291 1625.67,684.291 1626.23,684.291 1626.79,684.291 1627.35,684.291 1627.91,684.291 1628.47,684.291 1629.03,684.291 1629.59,684.291 1630.15,684.291 1630.71,684.291 1631.27,684.291 1631.83,684.291 1632.39,684.291 1632.94,684.291 1633.5,684.291 1634.06,684.291 1634.62,684.291 1635.18,684.291 1635.74,684.291 1636.3,684.291 1636.86,684.291 1637.42,684.291 1637.98,684.291 1638.54,684.291 1639.1,684.291 1639.66,684.291 1640.21,684.291 1640.77,684.291 1641.33,684.291 1641.89,684.291 1642.45,684.291 1643.01,684.291 1643.57,684.291 1644.13,684.291 1644.69,684.291 1645.25,684.291 1645.81,684.291 1646.37,684.291 1646.93,684.291 1647.48,684.291 1648.04,684.291 1648.6,684.291 1649.16,684.291 1649.72,684.291 1650.28,684.291 1650.84,684.291 1651.4,684.291 1651.96,684.291 1652.52,684.291 1653.08,684.291 1653.64,684.291 1654.2,684.291 1654.76,684.291 1655.31,684.291 1655.87,684.291 1656.43,684.291 1656.99,684.291 1657.55,684.291 1658.11,684.291 1658.67,684.291 1659.23,684.291 1659.79,684.291 1660.35,684.291 1660.91,684.291 1661.47,684.291 1662.03,684.291 1662.58,684.291 1663.14,684.291 1663.7,684.291 1664.26,684.291 1664.82,684.291 1665.38,684.291 1665.94,684.291 1666.5,684.291 1667.06,684.291 1667.62,684.291 1668.18,684.291 1668.74,684.291 1669.3,684.291 1669.85,684.291 1670.41,684.291 1670.97,684.291 1671.53,684.291 1672.09,684.291 1672.65,684.291 1673.21,684.291 1673.77,684.291 1674.33,684.291 1674.89,684.291 1675.45,684.291 1676.01,684.291 1676.57,684.291 1677.13,684.291 1677.68,684.291 1678.24,684.291 1678.8,684.291 1679.36,684.291 1679.92,684.291 1680.48,684.291 1681.04,684.291 1681.6,684.291 1682.16,684.291 1682.72,684.291 1683.28,684.291 1683.84,684.291 1684.4,684.291 1684.95,684.291 1685.51,684.291 1686.07,684.291 1686.63,684.291 1687.19,684.291 1687.75,684.291 1688.31,684.291 1688.87,684.291 1689.43,684.291 1689.99,684.291 1690.55,684.291 1691.11,684.291 1691.67,684.291 1692.23,684.291 1692.78,684.291 1693.34,684.291 1693.9,684.291 1694.46,684.291 1695.02,684.291 1695.58,684.291 1696.14,684.291 1696.7,684.291 1697.26,684.291 1697.82,684.291 1698.38,684.291 1698.94,684.291 1699.5,684.291 1700.05,684.291 1700.61,684.291 1701.17,684.291 1701.73,684.291 1702.29,684.291 1702.85,684.291 1703.41,684.291 1703.97,684.291 1704.53,684.291 1705.09,684.291 1705.65,684.291 1706.21,684.291 1706.77,684.291 1707.32,684.291 1707.88,684.291 1708.44,684.291 1709,684.291 1709.56,684.291 1710.12,684.291 1710.68,684.291 1711.24,684.291 1711.8,684.291 1712.36,684.291 1712.92,684.291 1713.48,684.291 1714.04,684.291 1714.6,684.291 1715.15,684.291 1715.71,684.291 1716.27,684.291 1716.83,684.291 1717.39,684.291 1717.95,684.291 1718.51,684.291 1719.07,684.291 1719.63,684.291 1720.19,684.291 1720.75,684.291 1721.31,684.291 1721.87,684.291 1722.42,684.291 1722.98,684.291 1723.54,684.291 1724.1,684.291 1724.66,684.291 1725.22,684.291 1725.78,684.291 1726.34,684.291 1726.9,684.291 1727.46,684.291 1728.02,684.291 1728.58,684.291 1729.14,684.291 1729.69,684.291 1730.25,684.291 1730.81,684.291 1731.37,684.291 1731.93,684.291 1732.49,684.291 1733.05,684.291 1733.61,684.291 1734.17,684.291 1734.73,684.291 1735.29,684.291 1735.85,684.291 1736.41,684.291 1736.97,684.291 1737.52,684.291 1738.08,684.291 1738.64,684.291 1739.2,684.291 1739.76,684.291 1740.32,684.291 1740.88,684.291 1741.44,684.291 1742,684.291 1742.56,684.291 1743.12,684.291 1743.68,684.291 1744.24,684.291 1744.79,684.291 1745.35,684.291 1745.91,684.291 1746.47,684.291 1747.03,684.291 1747.59,684.291 1748.15,684.291 1748.71,684.291 1749.27,684.291 1749.83,684.291 1750.39,684.291 1750.95,684.291 1751.51,684.291 1752.06,684.291 1752.62,684.291 1753.18,684.291 1753.74,684.291 1754.3,684.291 1754.86,684.291 1755.42,684.291 1755.98,684.291 1756.54,684.291 1757.1,684.291 1757.66,684.291 1758.22,684.291 1758.78,684.291 1759.34,684.291 1759.89,684.291 1760.45,684.291 1761.01,684.291 1761.57,684.291 1762.13,684.291 1762.69,684.291 1763.25,684.291 1763.81,684.291 1764.37,684.291 1764.93,684.291 1765.49,684.291 1766.05,684.291 1766.61,684.291 1767.16,684.291 1767.72,684.291 1768.28,684.291 1768.84,684.291 1769.4,684.291 1769.96,684.291 1770.52,684.291 1771.08,684.291 1771.64,684.291 1772.2,684.291 1772.76,684.291 1773.32,684.291 1773.88,684.291 1774.43,684.291 1774.99,684.291 1775.55,684.291 1776.11,684.291 1776.67,684.291 1777.23,684.291 1777.79,684.291 1778.35,684.291 1778.91,684.291 1779.47,684.291 1780.03,684.291 1780.59,684.291 1781.15,684.291 1781.71,684.291 1782.26,684.291 1782.82,684.291 1783.38,684.291 1783.94,684.291 1784.5,684.291 1785.06,684.291 1785.62,684.291 1786.18,684.291 1786.74,684.291 1787.3,684.291 1787.86,684.291 1788.42,684.291 1788.98,684.291 1789.53,684.291 1790.09,684.291 1790.65,684.291 1791.21,684.291 1791.77,684.291 1792.33,684.291 1792.89,684.291 1793.45,684.291 1794.01,684.291 1794.57,684.291 1795.13,684.291 1795.69,684.291 1796.25,684.291 1796.8,684.291 1797.36,684.291 1797.92,684.291 1798.48,684.291 1799.04,684.291 1799.6,684.291 1800.16,684.291 1800.72,684.291 1801.28,684.291 1801.84,684.291 1802.4,684.291 1802.96,684.291 1803.52,684.291 1804.08,684.291 1804.63,684.291 1805.19,684.291 1805.75,684.291 1806.31,684.291 1806.87,684.291 1807.43,684.291 1807.99,684.291 1808.55,684.291 1809.11,684.291 1809.67,684.291 1810.23,684.291 1810.79,684.291 1811.35,684.291 1811.9,684.291 1812.46,684.291 1813.02,684.291 1813.58,684.291 1814.14,684.291 1814.7,684.291 1815.26,684.291 1815.82,684.291 1816.38,684.291 1816.94,684.291 1817.5,684.291 1818.06,684.291 1818.62,684.291 1819.18,684.291 1819.73,684.291 1820.29,684.291 1820.85,684.291 1821.41,684.291 1821.97,684.291 1822.53,684.291 1823.09,684.291 1823.65,684.291 1824.21,684.291 1824.77,684.291 1825.33,684.291 1825.89,684.291 1826.45,684.291 1827,684.291 1827.56,684.291 1828.12,684.291 1828.68,684.291 1829.24,684.291 1829.8,684.291 1830.36,684.291 1830.92,684.291 1831.48,684.291 1832.04,684.291 1832.6,684.291 1833.16,684.291 1833.72,684.291 1834.27,684.291 1834.83,684.291 1835.39,684.291 1835.95,684.291 1836.51,684.291 1837.07,684.291 1837.63,684.291 1838.19,684.291 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 684.597 L720.806 684.597 L721.365 684.597 L721.924 684.597 L722.484 684.597 L723.043 684.597 L723.602 684.597 L724.161 684.597 L724.721 684.597 L725.28 684.597 L725.839 684.597 L726.398 684.597 L726.958 684.597 L727.517 684.597 L728.076 684.597 L728.635 684.597 L729.195 684.597 L729.754 684.597 L730.313 684.597 L730.872 684.597 L731.432 684.597 L731.991 684.597 L732.55 684.597 L733.109 684.597 L733.669 684.597 L734.228 684.597 L734.787 684.597 L735.346 684.597 L735.906 684.597 L736.465 684.597 L737.024 684.597 L737.583 684.597 L738.143 684.597 L738.702 684.597 L739.261 684.597 L739.82 684.597 L740.38 684.597 L740.939 684.597 L741.498 684.597 L742.057 684.597 L742.617 684.597 L743.176 684.597 L743.735 684.597 L744.294 684.597 L744.854 684.597 L745.413 684.597 L745.972 684.597 L746.531 684.597 L747.091 684.597 L747.65 684.597 L748.209 684.597 L748.768 684.597 L749.328 684.597 L749.887 684.597 L750.446 684.597 L751.005 684.597 L751.565 684.597 L752.124 684.597 L752.683 684.597 L753.242 684.597 L753.802 684.597 L754.361 684.597 L754.92 684.597 L755.479 684.597 L756.039 684.597 L756.598 684.597 L757.157 684.597 L757.716 684.597 L758.276 684.597 L758.835 684.597 L759.394 684.597 L759.953 684.597 L760.513 684.597 L761.072 684.597 L761.631 684.597 L762.19 684.597 L762.75 684.597 L763.309 684.597 L763.868 684.597 L764.427 684.597 L764.987 684.597 L765.546 684.597 L766.105 684.597 L766.664 684.597 L767.224 684.597 L767.783 684.597 L768.342 684.597 L768.901 684.597 L769.461 684.597 L770.02 684.597 L770.579 684.597 L771.138 684.597 L771.698 684.597 L772.257 684.597 L772.816 684.597 L773.375 684.597 L773.935 684.597 L774.494 684.597 L775.053 684.597 L775.612 684.597 L776.172 684.597 L776.731 684.597 L777.29 684.597 L777.849 684.597 L778.409 684.597 L778.968 684.597 L779.527 684.597 L780.086 684.597 L780.646 684.597 L781.205 684.597 L781.764 684.597 L782.323 684.597 L782.883 684.597 L783.442 684.597 L784.001 684.597 L784.56 684.597 L785.12 684.597 L785.679 684.597 L786.238 684.597 L786.797 684.597 L787.357 684.597 L787.916 684.597 L788.475 684.597 L789.034 684.597 L789.594 684.597 L790.153 684.597 L790.712 684.597 L791.271 684.597 L791.831 684.597 L792.39 684.597 L792.949 684.597 L793.508 684.597 L794.068 684.597 L794.627 684.597 L795.186 684.597 L795.745 684.597 L796.305 684.597 L796.864 684.597 L797.423 684.597 L797.982 684.597 L798.542 684.597 L799.101 684.597 L799.66 684.597 L800.219 684.597 L800.779 684.597 L801.338 684.597 L801.897 684.597 L802.456 684.597 L803.016 684.597 L803.575 684.597 L804.134 684.597 L804.693 684.597 L805.253 684.597 L805.812 684.597 L806.371 684.597 L806.931 684.597 L807.49 684.597 L808.049 684.597 L808.608 684.597 L809.168 684.597 L809.727 684.597 L810.286 684.597 L810.845 684.597 L811.405 684.597 L811.964 684.597 L812.523 684.597 L813.082 684.597 L813.642 684.597 L814.201 684.597 L814.76 684.597 L815.319 684.597 L815.879 684.597 L816.438 684.597 L816.997 684.597 L817.556 684.597 L818.116 684.597 L818.675 684.597 L819.234 684.597 L819.793 684.597 L820.353 684.597 L820.912 684.597 L821.471 684.597 L822.03 684.597 L822.59 684.597 L823.149 684.597 L823.708 684.597 L824.267 684.597 L824.827 684.597 L825.386 684.597 L825.945 684.597 L826.504 684.597 L827.064 684.597 L827.623 684.597 L828.182 684.597 L828.741 684.597 L829.301 684.597 L829.86 684.597 L830.419 684.597 L830.978 684.597 L831.538 684.597 L832.097 684.597 L832.656 684.597 L833.215 684.597 L833.775 684.597 L834.334 684.597 L834.893 684.597 L835.452 684.597 L836.012 684.597 L836.571 684.597 L837.13 684.597 L837.689 684.597 L838.249 684.597 L838.808 684.597 L839.367 684.597 L839.926 684.597 L840.486 684.597 L841.045 684.597 L841.604 684.597 L842.163 684.597 L842.723 684.597 L843.282 684.597 L843.841 684.597 L844.4 684.597 L844.96 684.597 L845.519 684.597 L846.078 684.597 L846.637 684.597 L847.197 684.597 L847.756 684.597 L848.315 684.597 L848.874 684.597 L849.434 684.597 L849.993 684.597 L850.552 684.597 L851.111 684.597 L851.671 684.597 L852.23 684.597 L852.789 684.597 L853.348 684.597 L853.908 684.597 L854.467 684.597 L855.026 684.597 L855.585 684.597 L856.145 684.597 L856.704 684.597 L857.263 684.597 L857.822 684.597 L858.382 684.597 L858.941 684.597 L859.5 684.597 L860.059 684.597 L860.619 684.597 L861.178 684.597 L861.737 684.597 L862.296 684.597 L862.856 684.597 L863.415 684.597 L863.974 684.597 L864.533 684.597 L865.093 684.597 L865.652 684.597 L866.211 684.597 L866.77 684.597 L867.33 684.597 L867.889 684.597 L868.448 684.597 L869.007 684.597 L869.567 684.597 L870.126 684.597 L870.685 684.597 L871.244 684.597 L871.804 684.597 L872.363 684.597 L872.922 684.597 L873.481 684.597 L874.041 684.597 L874.6 684.597 L875.159 684.597 L875.718 684.597 L876.278 684.597 L876.837 684.597 L877.396 684.597 L877.955 684.597 L878.515 684.597 L879.074 684.597 L879.633 684.597 L880.192 684.597 L880.752 684.597 L881.311 684.597 L881.87 684.597 L882.429 684.597 L882.989 684.597 L883.548 684.597 L884.107 684.597 L884.666 684.597 L885.226 684.597 L885.785 684.597 L886.344 684.597 L886.903 684.597 L887.463 684.597 L888.022 684.597 L888.581 684.597 L889.14 684.597 L889.7 684.597 L890.259 684.597 L890.818 684.597 L891.377 684.597 L891.937 684.597 L892.496 684.597 L893.055 684.597 L893.614 684.597 L894.174 684.597 L894.733 684.597 L895.292 684.597 L895.851 684.597 L896.411 684.597 L896.97 684.597 L897.529 684.597 L898.088 684.597 L898.648 684.597 L899.207 684.597 L899.766 684.597 L900.325 684.597 L900.885 684.597 L901.444 684.597 L902.003 684.597 L902.562 684.597 L903.122 684.597 L903.681 684.597 L904.24 684.597 L904.799 684.597 L905.359 684.597 L905.918 684.597 L906.477 684.597 L907.036 684.597 L907.596 684.597 L908.155 684.597 L908.714 684.597 L909.273 684.597 L909.833 684.597 L910.392 684.597 L910.951 684.597 L911.51 684.597 L912.07 684.597 L912.629 684.597 L913.188 684.597 L913.747 684.597 L914.307 684.597 L914.866 684.597 L915.425 684.597 L915.984 684.597 L916.544 684.597 L917.103 684.597 L917.662 684.597 L918.221 684.597 L918.781 684.597 L919.34 684.597 L919.899 684.597 L920.458 684.597 L921.018 684.597 L921.577 684.597 L922.136 684.597 L922.695 684.597 L923.255 684.597 L923.814 684.597 L924.373 684.597 L924.932 684.597 L925.492 684.597 L926.051 684.597 L926.61 684.597 L927.169 684.597 L927.729 684.597 L928.288 684.597 L928.847 684.597 L929.406 684.597 L929.966 684.597 L930.525 684.597 L931.084 684.597 L931.644 684.597 L932.203 684.597 L932.762 684.597 L933.321 684.597 L933.881 684.597 L934.44 684.597 L934.999 684.597 L935.558 684.597 L936.118 684.597 L936.677 684.597 L937.236 684.597 L937.795 684.597 L938.355 684.597 L938.914 684.597 L939.473 684.597 L940.032 684.597 L940.592 684.597 L941.151 684.597 L941.71 684.597 L942.269 684.597 L942.829 684.597 L943.388 684.597 L943.947 684.597 L944.506 684.597 L945.066 684.597 L945.625 684.597 L946.184 684.597 L946.743 684.597 L947.303 684.597 L947.862 684.597 L948.421 684.597 L948.98 684.597 L949.54 684.597 L950.099 684.597 L950.658 684.597 L951.217 684.597 L951.777 684.597 L952.336 684.597 L952.895 684.597 L953.454 684.597 L954.014 684.597 L954.573 684.597 L955.132 684.597 L955.691 684.597 L956.251 684.597 L956.81 684.597 L957.369 684.597 L957.928 684.597 L958.488 684.597 L959.047 684.597 L959.606 684.597 L960.165 684.597 L960.725 684.597 L961.284 684.597 L961.843 684.597 L962.402 684.597 L962.962 684.597 L963.521 684.597 L964.08 684.597 L964.639 684.597 L965.199 684.597 L965.758 684.597 L966.317 684.597 L966.876 684.597 L967.436 684.597 L967.995 684.597 L968.554 684.597 L969.113 684.597 L969.673 684.597 L970.232 684.597 L970.791 684.597 L971.35 684.597 L971.91 684.597 L972.469 684.597 L973.028 684.597 L973.587 684.597 L974.147 684.597 L974.706 684.597 L975.265 684.597 L975.824 684.597 L976.384 684.597 L976.943 684.597 L977.502 684.597 L978.061 684.597 L978.621 684.597 L979.18 684.597 L979.739 684.597 L980.298 684.597 L980.858 684.597 L981.417 684.597 L981.976 684.597 L982.535 684.597 L983.095 684.597 L983.654 684.597 L984.213 684.597 L984.772 684.597 L985.332 684.597 L985.891 684.597 L986.45 684.597 L987.009 684.597 L987.569 684.597 L988.128 684.597 L988.687 684.597 L989.246 684.597 L989.806 684.597 L990.365 684.597 L990.924 684.597 L991.483 684.597 L992.043 684.597 L992.602 684.597 L993.161 684.597 L993.72 684.597 L994.28 684.597 L994.839 684.597 L995.398 684.597 L995.957 684.597 L996.517 684.597 L997.076 684.597 L997.635 684.597 L998.194 684.597 L998.754 684.597 L999.313 684.597 L999.872 684.597 L1000.43 684.597 L1000.99 684.597 L1001.55 684.597 L1002.11 684.597 L1002.67 684.597 L1003.23 684.597 L1003.79 684.597 L1004.35 684.597 L1004.91 684.597 L1005.46 684.597 L1006.02 684.597 L1006.58 684.597 L1007.14 684.597 L1007.7 684.597 L1008.26 684.597 L1008.82 684.597 L1009.38 684.597 L1009.94 684.597 L1010.5 684.597 L1011.06 684.597 L1011.62 684.597 L1012.18 684.597 L1012.73 684.597 L1013.29 684.597 L1013.85 684.597 L1014.41 684.597 L1014.97 684.597 L1015.53 684.597 L1016.09 684.597 L1016.65 684.597 L1017.21 684.597 L1017.77 684.597 L1018.33 684.597 L1018.89 684.597 L1019.45 684.597 L1020.01 684.597 L1020.56 684.597 L1021.12 684.597 L1021.68 684.597 L1022.24 684.597 L1022.8 684.597 L1023.36 684.597 L1023.92 684.597 L1024.48 684.597 L1025.04 684.597 L1025.6 684.597 L1026.16 684.597 L1026.72 684.597 L1027.28 684.597 L1027.83 684.597 L1028.39 684.597 L1028.95 684.597 L1029.51 684.597 L1030.07 684.597 L1030.63 684.597 L1031.19 684.597 L1031.75 684.597 L1032.31 684.597 L1032.87 684.597 L1033.43 684.597 L1033.99 684.597 L1034.55 684.597 L1035.1 684.597 L1035.66 684.597 L1036.22 684.597 L1036.78 684.597 L1037.34 684.597 L1037.9 684.597 L1038.46 684.597 L1039.02 684.597 L1039.58 684.597 L1040.14 684.597 L1040.7 684.597 L1041.26 684.597 L1041.82 684.597 L1042.38 684.597 L1042.93 684.597 L1043.49 684.597 L1044.05 684.597 L1044.61 684.597 L1045.17 684.597 L1045.73 684.597 L1046.29 684.597 L1046.85 684.597 L1047.41 684.597 L1047.97 684.597 L1048.53 684.597 L1049.09 684.597 L1049.65 684.597 L1050.2 684.597 L1050.76 684.597 L1051.32 684.597 L1051.88 684.597 L1052.44 684.597 L1053 684.597 L1053.56 684.597 L1054.12 684.597 L1054.68 684.597 L1055.24 684.597 L1055.8 684.597 L1056.36 684.597 L1056.92 684.597 L1057.48 684.597 L1058.03 684.597 L1058.59 684.597 L1059.15 684.597 L1059.71 684.597 L1060.27 684.597 L1060.83 684.597 L1061.39 684.597 L1061.95 684.597 L1062.51 684.597 L1063.07 684.597 L1063.63 684.597 L1064.19 684.597 L1064.75 684.597 L1065.3 684.597 L1065.86 684.597 L1066.42 684.597 L1066.98 684.597 L1067.54 684.597 L1068.1 684.597 L1068.66 684.597 L1069.22 684.597 L1069.78 684.597 L1070.34 684.597 L1070.9 684.597 L1071.46 684.597 L1072.02 684.597 L1072.57 684.597 L1073.13 684.597 L1073.69 684.597 L1074.25 684.597 L1074.81 684.597 L1075.37 684.597 L1075.93 684.597 L1076.49 684.597 L1077.05 684.597 L1077.61 684.597 L1078.17 684.597 L1078.73 684.597 L1079.29 684.597 L1079.85 684.597 L1080.4 684.597 L1080.96 684.597 L1081.52 684.597 L1082.08 684.597 L1082.64 684.597 L1083.2 684.597 L1083.76 684.597 L1084.32 684.597 L1084.88 684.597 L1085.44 684.597 L1086 684.597 L1086.56 684.597 L1087.12 684.597 L1087.67 684.597 L1088.23 684.597 L1088.79 684.597 L1089.35 684.597 L1089.91 684.597 L1090.47 684.597 L1091.03 684.597 L1091.59 684.597 L1092.15 684.597 L1092.71 684.597 L1093.27 684.597 L1093.83 684.597 L1094.39 684.597 L1094.94 684.597 L1095.5 684.597 L1096.06 684.597 L1096.62 684.597 L1097.18 684.597 L1097.74 684.597 L1098.3 684.597 L1098.86 684.597 L1099.42 684.597 L1099.98 684.597 L1100.54 684.597 L1101.1 684.597 L1101.66 684.597 L1102.22 684.597 L1102.77 684.597 L1103.33 684.597 L1103.89 684.597 L1104.45 684.597 L1105.01 684.597 L1105.57 684.597 L1106.13 684.597 L1106.69 684.597 L1107.25 684.597 L1107.81 684.597 L1108.37 684.597 L1108.93 684.597 L1109.49 684.597 L1110.04 684.597 L1110.6 684.597 L1111.16 684.597 L1111.72 684.597 L1112.28 684.597 L1112.84 684.597 L1113.4 684.597 L1113.96 684.597 L1114.52 684.597 L1115.08 684.597 L1115.64 684.597 L1116.2 684.597 L1116.76 684.597 L1117.31 684.597 L1117.87 684.597 L1118.43 684.597 L1118.99 684.597 L1119.55 684.597 L1120.11 684.597 L1120.67 684.597 L1121.23 684.597 L1121.79 684.597 L1122.35 684.597 L1122.91 684.597 L1123.47 684.597 L1124.03 684.597 L1124.59 684.597 L1125.14 684.597 L1125.7 684.597 L1126.26 684.597 L1126.82 684.597 L1127.38 684.597 L1127.94 684.597 L1128.5 684.597 L1129.06 684.597 L1129.62 684.597 L1130.18 684.597 L1130.74 684.597 L1131.3 684.597 L1131.86 684.597 L1132.41 684.597 L1132.97 684.597 L1133.53 684.597 L1134.09 684.597 L1134.65 684.597 L1135.21 684.597 L1135.77 684.597 L1136.33 684.597 L1136.89 684.597 L1137.45 684.597 L1138.01 684.597 L1138.57 684.597 L1139.13 684.597 L1139.68 684.597 L1140.24 684.597 L1140.8 684.597 L1141.36 684.597 L1141.92 684.597 L1142.48 684.597 L1143.04 684.597 L1143.6 684.597 L1144.16 684.597 L1144.72 684.597 L1145.28 684.597 L1145.84 684.597 L1146.4 684.597 L1146.96 684.597 L1147.51 684.597 L1148.07 684.597 L1148.63 684.597 L1149.19 684.597 L1149.75 684.597 L1150.31 684.597 L1150.87 684.597 L1151.43 684.597 L1151.99 684.597 L1152.55 684.597 L1153.11 684.597 L1153.67 684.597 L1154.23 684.597 L1154.78 684.597 L1155.34 684.597 L1155.9 684.597 L1156.46 684.597 L1157.02 684.597 L1157.58 684.597 L1158.14 684.597 L1158.7 684.597 L1159.26 684.597 L1159.82 684.597 L1160.38 684.597 L1160.94 684.597 L1161.5 684.597 L1162.05 684.597 L1162.61 684.597 L1163.17 684.597 L1163.73 684.597 L1164.29 684.597 L1164.85 684.597 L1165.41 684.597 L1165.97 684.597 L1166.53 684.597 L1167.09 684.597 L1167.65 684.597 L1168.21 684.597 L1168.77 684.597 L1169.33 684.597 L1169.88 684.597 L1170.44 684.597 L1171 684.597 L1171.56 684.597 L1172.12 684.597 L1172.68 684.597 L1173.24 684.597 L1173.8 684.597 L1174.36 684.597 L1174.92 684.597 L1175.48 684.597 L1176.04 684.597 L1176.6 684.597 L1177.15 684.597 L1177.71 684.597 L1178.27 684.597 L1178.83 684.597 L1179.39 684.597 L1179.95 684.597 L1180.51 684.597 L1181.07 684.597 L1181.63 684.597 L1182.19 684.597 L1182.75 684.597 L1183.31 684.597 L1183.87 684.597 L1184.43 684.597 L1184.98 684.597 L1185.54 684.597 L1186.1 684.597 L1186.66 684.597 L1187.22 684.597 L1187.78 684.597 L1188.34 684.597 L1188.9 684.597 L1189.46 684.597 L1190.02 684.597 L1190.58 684.597 L1191.14 684.597 L1191.7 684.597 L1192.25 684.597 L1192.81 684.597 L1193.37 684.597 L1193.93 684.597 L1194.49 684.597 L1195.05 684.597 L1195.61 684.597 L1196.17 684.597 L1196.73 684.597 L1197.29 684.597 L1197.85 684.597 L1198.41 684.597 L1198.97 684.597 L1199.52 684.597 L1200.08 684.597 L1200.64 684.597 L1201.2 684.597 L1201.76 684.597 L1202.32 684.597 L1202.88 684.597 L1203.44 684.597 L1204 684.597 L1204.56 684.597 L1205.12 684.597 L1205.68 684.597 L1206.24 684.597 L1206.8 684.597 L1207.35 684.597 L1207.91 684.597 L1208.47 684.597 L1209.03 684.597 L1209.59 684.597 L1210.15 684.597 L1210.71 684.597 L1211.27 684.597 L1211.83 684.597 L1212.39 684.597 L1212.95 684.597 L1213.51 684.597 L1214.07 684.597 L1214.62 684.597 L1215.18 684.597 L1215.74 684.597 L1216.3 684.597 L1216.86 684.597 L1217.42 684.597 L1217.98 684.597 L1218.54 684.597 L1219.1 684.597 L1219.66 684.597 L1220.22 684.597 L1220.78 684.597 L1221.34 684.597 L1221.89 684.597 L1222.45 684.597 L1223.01 684.597 L1223.57 684.597 L1224.13 684.597 L1224.69 684.597 L1225.25 684.597 L1225.81 684.597 L1226.37 684.597 L1226.93 684.597 L1227.49 684.597 L1228.05 684.597 L1228.61 684.597 L1229.17 684.597 L1229.72 684.597 L1230.28 684.597 L1230.84 684.597 L1231.4 684.597 L1231.96 684.597 L1232.52 684.597 L1233.08 684.597 L1233.64 684.597 L1234.2 684.597 L1234.76 684.597 L1235.32 684.597 L1235.88 684.597 L1236.44 684.597 L1236.99 684.597 L1237.55 684.597 L1238.11 684.597 L1238.67 684.597 L1239.23 684.597 L1239.79 684.597 L1240.35 684.597 L1240.91 684.597 L1241.47 684.597 L1242.03 684.597 L1242.59 684.597 L1243.15 684.597 L1243.71 684.597 L1244.26 684.597 L1244.82 684.597 L1245.38 684.597 L1245.94 684.597 L1246.5 684.597 L1247.06 684.597 L1247.62 684.597 L1248.18 684.597 L1248.74 684.597 L1249.3 684.597 L1249.86 684.597 L1250.42 684.597 L1250.98 684.597 L1251.54 684.597 L1252.09 684.597 L1252.65 684.597 L1253.21 684.597 L1253.77 684.597 L1254.33 684.597 L1254.89 684.597 L1255.45 684.597 L1256.01 684.597 L1256.57 684.597 L1257.13 684.597 L1257.69 684.597 L1258.25 684.597 L1258.81 684.597 L1259.36 684.597 L1259.92 684.597 L1260.48 684.597 L1261.04 684.597 L1261.6 684.597 L1262.16 684.597 L1262.72 684.597 L1263.28 684.597 L1263.84 684.597 L1264.4 684.597 L1264.96 684.597 L1265.52 684.597 L1266.08 684.597 L1266.63 684.597 L1267.19 684.597 L1267.75 684.597 L1268.31 684.597 L1268.87 684.597 L1269.43 684.597 L1269.99 684.597 L1270.55 684.597 L1271.11 684.597 L1271.67 684.597 L1272.23 684.597 L1272.79 684.597 L1273.35 684.597 L1273.91 684.597 L1274.46 684.597 L1275.02 684.597 L1275.58 684.597 L1276.14 684.597 L1276.7 684.597 L1277.26 684.597 L1277.82 684.597 L1278.38 684.597 L1278.94 684.597 L1279.5 684.597 L1280.06 684.597 L1280.62 684.597 L1281.18 684.597 L1281.73 684.597 L1282.29 684.597 L1282.85 684.597 L1283.41 684.597 L1283.97 684.597 L1284.53 684.597 L1285.09 684.597 L1285.65 684.597 L1286.21 684.597 L1286.77 684.597 L1287.33 684.597 L1287.89 684.597 L1288.45 684.597 L1289 684.597 L1289.56 684.597 L1290.12 684.597 L1290.68 684.597 L1291.24 684.597 L1291.8 684.597 L1292.36 684.597 L1292.92 684.597 L1293.48 684.597 L1294.04 684.597 L1294.6 684.597 L1295.16 684.597 L1295.72 684.597 L1296.28 684.597 L1296.83 684.597 L1297.39 684.597 L1297.95 684.597 L1298.51 684.597 L1299.07 684.597 L1299.63 684.597 L1300.19 684.597 L1300.75 684.597 L1301.31 684.597 L1301.87 684.597 L1302.43 684.597 L1302.99 684.597 L1303.55 684.597 L1304.1 684.597 L1304.66 684.597 L1305.22 684.597 L1305.78 684.597 L1306.34 684.597 L1306.9 684.597 L1307.46 684.597 L1308.02 684.597 L1308.58 684.597 L1309.14 684.597 L1309.7 684.597 L1310.26 684.597 L1310.82 684.597 L1311.38 684.597 L1311.93 684.597 L1312.49 684.597 L1313.05 684.597 L1313.61 684.597 L1314.17 684.597 L1314.73 684.597 L1315.29 684.597 L1315.85 684.597 L1316.41 684.597 L1316.97 684.597 L1317.53 684.597 L1318.09 684.597 L1318.65 684.597 L1319.2 684.597 L1319.76 684.597 L1320.32 684.597 L1320.88 684.597 L1321.44 684.597 L1322 684.597 L1322.56 684.597 L1323.12 684.597 L1323.68 684.597 L1324.24 684.597 L1324.8 684.597 L1325.36 684.597 L1325.92 684.597 L1326.47 684.597 L1327.03 684.597 L1327.59 684.597 L1328.15 684.597 L1328.71 684.597 L1329.27 684.597 L1329.83 684.597 L1330.39 684.597 L1330.95 684.597 L1331.51 684.597 L1332.07 684.597 L1332.63 684.597 L1333.19 684.597 L1333.75 684.597 L1334.3 684.597 L1334.86 684.597 L1335.42 684.597 L1335.98 684.597 L1336.54 684.597 L1337.1 684.597 L1337.66 684.597 L1338.22 684.597 L1338.78 684.597 L1339.34 684.597 L1339.9 684.597 L1340.46 684.597 L1341.02 684.597 L1341.57 684.597 L1342.13 684.597 L1342.69 684.597 L1343.25 684.597 L1343.81 684.597 L1344.37 684.597 L1344.93 684.597 L1345.49 684.597 L1346.05 684.597 L1346.61 684.597 L1347.17 684.597 L1347.73 684.597 L1348.29 684.597 L1348.84 684.597 L1349.4 684.597 L1349.96 684.597 L1350.52 684.597 L1351.08 684.597 L1351.64 684.597 L1352.2 684.597 L1352.76 684.597 L1353.32 684.597 L1353.88 684.597 L1354.44 684.597 L1355 684.597 L1355.56 684.597 L1356.12 684.597 L1356.67 684.597 L1357.23 684.597 L1357.79 684.597 L1358.35 684.597 L1358.91 684.597 L1359.47 684.597 L1360.03 684.597 L1360.59 684.597 L1361.15 684.597 L1361.71 684.597 L1362.27 684.597 L1362.83 684.597 L1363.39 684.597 L1363.94 684.597 L1364.5 684.597 L1365.06 684.597 L1365.62 684.597 L1366.18 684.597 L1366.74 684.597 L1367.3 684.597 L1367.86 684.597 L1368.42 684.597 L1368.98 684.597 L1369.54 684.597 L1370.1 684.597 L1370.66 684.597 L1371.21 684.597 L1371.77 684.597 L1372.33 684.597 L1372.89 684.597 L1373.45 684.597 L1374.01 684.597 L1374.57 684.597 L1375.13 684.597 L1375.69 684.597 L1376.25 684.597 L1376.81 684.597 L1377.37 684.597 L1377.93 684.597 L1378.49 684.597 L1379.04 684.597 L1379.6 684.597 L1380.16 684.597 L1380.72 684.597 L1381.28 684.597 L1381.84 684.597 L1382.4 684.597 L1382.96 684.597 L1383.52 684.597 L1384.08 684.597 L1384.64 684.597 L1385.2 684.597 L1385.76 684.597 L1386.31 684.597 L1386.87 684.597 L1387.43 684.597 L1387.99 684.597 L1388.55 684.597 L1389.11 684.597 L1389.67 684.597 L1390.23 684.597 L1390.79 684.597 L1391.35 684.597 L1391.91 684.597 L1392.47 684.597 L1393.03 684.597 L1393.58 684.597 L1394.14 684.597 L1394.7 684.597 L1395.26 684.597 L1395.82 684.597 L1396.38 684.597 L1396.94 684.597 L1397.5 684.597 L1398.06 684.597 L1398.62 684.597 L1399.18 684.597 L1399.74 684.597 L1400.3 684.597 L1400.86 684.597 L1401.41 684.597 L1401.97 684.597 L1402.53 684.597 L1403.09 684.597 L1403.65 684.597 L1404.21 684.597 L1404.77 684.597 L1405.33 684.597 L1405.89 684.597 L1406.45 684.597 L1407.01 684.597 L1407.57 684.597 L1408.13 684.597 L1408.68 684.597 L1409.24 684.597 L1409.8 684.597 L1410.36 684.597 L1410.92 684.597 L1411.48 684.597 L1412.04 684.597 L1412.6 684.597 L1413.16 684.597 L1413.72 684.597 L1414.28 684.597 L1414.84 684.597 L1415.4 684.597 L1415.95 684.597 L1416.51 684.597 L1417.07 684.597 L1417.63 684.597 L1418.19 684.597 L1418.75 684.597 L1419.31 684.597 L1419.87 684.597 L1420.43 684.597 L1420.99 684.597 L1421.55 684.597 L1422.11 684.597 L1422.67 684.597 L1423.23 684.597 L1423.78 684.597 L1424.34 684.597 L1424.9 684.597 L1425.46 684.597 L1426.02 684.597 L1426.58 684.597 L1427.14 684.597 L1427.7 684.597 L1428.26 684.597 L1428.82 684.597 L1429.38 684.597 L1429.94 684.597 L1430.5 684.597 L1431.05 684.597 L1431.61 684.597 L1432.17 684.597 L1432.73 684.597 L1433.29 684.597 L1433.85 684.597 L1434.41 684.597 L1434.97 684.597 L1435.53 684.597 L1436.09 684.597 L1436.65 684.597 L1437.21 684.597 L1437.77 684.597 L1438.33 684.597 L1438.88 684.597 L1439.44 684.597 L1440 684.597 L1440.56 684.597 L1441.12 684.597 L1441.68 684.597 L1442.24 684.597 L1442.8 684.597 L1443.36 684.597 L1443.92 684.597 L1444.48 684.597 L1445.04 684.597 L1445.6 684.597 L1446.15 684.597 L1446.71 684.597 L1447.27 684.597 L1447.83 684.597 L1448.39 684.597 L1448.95 684.597 L1449.51 684.597 L1450.07 684.597 L1450.63 684.597 L1451.19 684.597 L1451.75 684.597 L1452.31 684.597 L1452.87 684.597 L1453.42 684.597 L1453.98 684.597 L1454.54 684.597 L1455.1 684.597 L1455.66 684.597 L1456.22 684.597 L1456.78 684.597 L1457.34 684.597 L1457.9 684.597 L1458.46 684.597 L1459.02 684.597 L1459.58 684.597 L1460.14 684.597 L1460.7 684.597 L1461.25 684.597 L1461.81 684.597 L1462.37 684.597 L1462.93 684.597 L1463.49 684.597 L1464.05 684.597 L1464.61 684.597 L1465.17 684.597 L1465.73 684.597 L1466.29 684.597 L1466.85 684.597 L1467.41 684.597 L1467.97 684.597 L1468.52 684.597 L1469.08 684.597 L1469.64 684.597 L1470.2 684.597 L1470.76 684.597 L1471.32 684.597 L1471.88 684.597 L1472.44 684.597 L1473 684.597 L1473.56 684.597 L1474.12 684.597 L1474.68 684.597 L1475.24 684.597 L1475.79 684.597 L1476.35 684.597 L1476.91 684.597 L1477.47 684.597 L1478.03 684.597 L1478.59 684.597 L1479.15 684.597 L1479.71 684.597 L1480.27 684.597 L1480.83 684.597 L1481.39 684.597 L1481.95 684.597 L1482.51 684.597 L1483.07 684.597 L1483.62 684.597 L1484.18 684.597 L1484.74 684.597 L1485.3 684.597 L1485.86 684.597 L1486.42 684.597 L1486.98 684.597 L1487.54 684.597 L1488.1 684.597 L1488.66 684.597 L1489.22 684.597 L1489.78 684.597 L1490.34 684.597 L1490.89 684.597 L1491.45 684.597 L1492.01 684.597 L1492.57 684.597 L1493.13 684.597 L1493.69 684.597 L1494.25 684.597 L1494.81 684.597 L1495.37 684.597 L1495.93 684.597 L1496.49 684.597 L1497.05 684.597 L1497.61 684.597 L1498.16 684.597 L1498.72 684.597 L1499.28 684.597 L1499.84 684.597 L1500.4 684.597 L1500.96 684.597 L1501.52 684.597 L1502.08 684.597 L1502.64 684.597 L1503.2 684.597 L1503.76 684.597 L1504.32 684.597 L1504.88 684.597 L1505.44 684.597 L1505.99 684.597 L1506.55 684.597 L1507.11 684.597 L1507.67 684.597 L1508.23 684.597 L1508.79 684.597 L1509.35 684.597 L1509.91 684.597 L1510.47 684.597 L1511.03 684.597 L1511.59 684.597 L1512.15 684.597 L1512.71 684.597 L1513.26 684.597 L1513.82 684.597 L1514.38 684.597 L1514.94 684.597 L1515.5 684.597 L1516.06 684.597 L1516.62 684.597 L1517.18 684.597 L1517.74 684.597 L1518.3 684.597 L1518.86 684.597 L1519.42 684.597 L1519.98 684.597 L1520.53 684.597 L1521.09 684.597 L1521.65 684.597 L1522.21 684.597 L1522.77 684.597 L1523.33 684.597 L1523.89 684.597 L1524.45 684.597 L1525.01 684.597 L1525.57 684.597 L1526.13 684.597 L1526.69 684.597 L1527.25 684.597 L1527.81 684.597 L1528.36 684.597 L1528.92 684.597 L1529.48 684.597 L1530.04 684.597 L1530.6 684.597 L1531.16 684.597 L1531.72 684.597 L1532.28 684.597 L1532.84 684.597 L1533.4 684.597 L1533.96 684.597 L1534.52 684.597 L1535.08 684.597 L1535.63 684.597 L1536.19 684.597 L1536.75 684.597 L1537.31 684.597 L1537.87 684.597 L1538.43 684.597 L1538.99 684.597 L1539.55 684.597 L1540.11 684.597 L1540.67 684.597 L1541.23 684.597 L1541.79 684.597 L1542.35 684.597 L1542.9 684.597 L1543.46 684.597 L1544.02 684.597 L1544.58 684.597 L1545.14 684.597 L1545.7 684.597 L1546.26 684.597 L1546.82 684.597 L1547.38 684.597 L1547.94 684.597 L1548.5 684.597 L1549.06 684.597 L1549.62 684.597 L1550.18 684.597 L1550.73 684.597 L1551.29 684.597 L1551.85 684.597 L1552.41 684.597 L1552.97 684.597 L1553.53 684.597 L1554.09 684.597 L1554.65 684.597 L1555.21 684.597 L1555.77 684.597 L1556.33 684.597 L1556.89 684.597 L1557.45 684.597 L1558 684.597 L1558.56 684.597 L1559.12 684.597 L1559.68 684.597 L1560.24 684.597 L1560.8 684.597 L1561.36 684.597 L1561.92 684.597 L1562.48 684.597 L1563.04 684.597 L1563.6 684.597 L1564.16 684.597 L1564.72 684.597 L1565.28 684.597 L1565.83 684.597 L1566.39 684.597 L1566.95 684.597 L1567.51 684.597 L1568.07 684.597 L1568.63 684.597 L1569.19 684.597 L1569.75 684.597 L1570.31 684.597 L1570.87 684.597 L1571.43 684.597 L1571.99 684.597 L1572.55 684.597 L1573.1 684.597 L1573.66 684.597 L1574.22 684.597 L1574.78 684.597 L1575.34 684.597 L1575.9 684.597 L1576.46 684.597 L1577.02 684.597 L1577.58 684.597 L1578.14 684.597 L1578.7 684.597 L1579.26 684.597 L1579.82 684.597 L1580.37 684.597 L1580.93 684.597 L1581.49 684.597 L1582.05 684.597 L1582.61 684.597 L1583.17 684.597 L1583.73 684.597 L1584.29 684.597 L1584.85 684.597 L1585.41 684.597 L1585.97 684.597 L1586.53 684.597 L1587.09 684.597 L1587.65 684.597 L1588.2 684.597 L1588.76 684.597 L1589.32 684.597 L1589.88 684.597 L1590.44 684.597 L1591 684.597 L1591.56 684.597 L1592.12 684.597 L1592.68 684.597 L1593.24 684.597 L1593.8 684.597 L1594.36 684.597 L1594.92 684.597 L1595.47 684.597 L1596.03 684.597 L1596.59 684.597 L1597.15 684.597 L1597.71 684.597 L1598.27 684.597 L1598.83 684.597 L1599.39 684.597 L1599.95 684.597 L1600.51 684.597 L1601.07 684.597 L1601.63 684.597 L1602.19 684.597 L1602.74 684.597 L1603.3 684.597 L1603.86 684.597 L1604.42 684.597 L1604.98 684.597 L1605.54 684.597 L1606.1 684.597 L1606.66 684.597 L1607.22 684.597 L1607.78 684.597 L1608.34 684.597 L1608.9 684.597 L1609.46 684.597 L1610.02 684.597 L1610.57 684.597 L1611.13 684.597 L1611.69 684.597 L1612.25 684.597 L1612.81 684.597 L1613.37 684.597 L1613.93 684.597 L1614.49 684.597 L1615.05 684.597 L1615.61 684.597 L1616.17 684.597 L1616.73 684.597 L1617.29 684.597 L1617.84 684.597 L1618.4 684.597 L1618.96 684.597 L1619.52 684.597 L1620.08 684.597 L1620.64 684.597 L1621.2 684.597 L1621.76 684.597 L1622.32 684.597 L1622.88 684.597 L1623.44 684.597 L1624 684.597 L1624.56 684.597 L1625.11 684.597 L1625.67 684.597 L1626.23 684.597 L1626.79 684.597 L1627.35 684.597 L1627.91 684.597 L1628.47 684.597 L1629.03 684.597 L1629.59 684.597 L1630.15 684.597 L1630.71 684.597 L1631.27 684.597 L1631.83 684.597 L1632.39 684.597 L1632.94 684.597 L1633.5 684.597 L1634.06 684.597 L1634.62 684.597 L1635.18 684.597 L1635.74 684.597 L1636.3 684.597 L1636.86 684.597 L1637.42 684.597 L1637.98 684.597 L1638.54 684.597 L1639.1 684.597 L1639.66 684.597 L1640.21 684.597 L1640.77 684.597 L1641.33 684.597 L1641.89 684.597 L1642.45 684.597 L1643.01 684.597 L1643.57 684.597 L1644.13 684.597 L1644.69 684.597 L1645.25 684.597 L1645.81 684.597 L1646.37 684.597 L1646.93 684.597 L1647.48 684.597 L1648.04 684.597 L1648.6 684.597 L1649.16 684.597 L1649.72 684.597 L1650.28 684.597 L1650.84 684.597 L1651.4 684.597 L1651.96 684.597 L1652.52 684.597 L1653.08 684.597 L1653.64 684.597 L1654.2 684.597 L1654.76 684.597 L1655.31 684.597 L1655.87 684.597 L1656.43 684.597 L1656.99 684.597 L1657.55 684.597 L1658.11 684.597 L1658.67 684.597 L1659.23 684.597 L1659.79 684.597 L1660.35 684.597 L1660.91 684.597 L1661.47 684.597 L1662.03 684.597 L1662.58 684.597 L1663.14 684.597 L1663.7 684.597 L1664.26 684.597 L1664.82 684.597 L1665.38 684.597 L1665.94 684.597 L1666.5 684.597 L1667.06 684.597 L1667.62 684.597 L1668.18 684.597 L1668.74 684.597 L1669.3 684.597 L1669.85 684.597 L1670.41 684.597 L1670.97 684.597 L1671.53 684.597 L1672.09 684.597 L1672.65 684.597 L1673.21 684.597 L1673.77 684.597 L1674.33 684.597 L1674.89 684.597 L1675.45 684.597 L1676.01 684.597 L1676.57 684.597 L1677.13 684.597 L1677.68 684.597 L1678.24 684.597 L1678.8 684.597 L1679.36 684.597 L1679.92 684.597 L1680.48 684.597 L1681.04 684.597 L1681.6 684.597 L1682.16 684.597 L1682.72 684.597 L1683.28 684.597 L1683.84 684.597 L1684.4 684.597 L1684.95 684.597 L1685.51 684.597 L1686.07 684.597 L1686.63 684.597 L1687.19 684.597 L1687.75 684.597 L1688.31 684.597 L1688.87 684.597 L1689.43 684.597 L1689.99 684.597 L1690.55 684.597 L1691.11 684.597 L1691.67 684.597 L1692.23 684.597 L1692.78 684.597 L1693.34 684.597 L1693.9 684.597 L1694.46 684.597 L1695.02 684.597 L1695.58 684.597 L1696.14 684.597 L1696.7 684.597 L1697.26 684.597 L1697.82 684.597 L1698.38 684.597 L1698.94 684.597 L1699.5 684.597 L1700.05 684.597 L1700.61 684.597 L1701.17 684.597 L1701.73 684.597 L1702.29 684.597 L1702.85 684.597 L1703.41 684.597 L1703.97 684.597 L1704.53 684.597 L1705.09 684.597 L1705.65 684.597 L1706.21 684.597 L1706.77 684.597 L1707.32 684.597 L1707.88 684.597 L1708.44 684.597 L1709 684.597 L1709.56 684.597 L1710.12 684.597 L1710.68 684.597 L1711.24 684.597 L1711.8 684.597 L1712.36 684.597 L1712.92 684.597 L1713.48 684.597 L1714.04 684.597 L1714.6 684.597 L1715.15 684.597 L1715.71 684.597 L1716.27 684.597 L1716.83 684.597 L1717.39 684.597 L1717.95 684.597 L1718.51 684.597 L1719.07 684.597 L1719.63 684.597 L1720.19 684.597 L1720.75 684.597 L1721.31 684.597 L1721.87 684.597 L1722.42 684.597 L1722.98 684.597 L1723.54 684.597 L1724.1 684.597 L1724.66 684.597 L1725.22 684.597 L1725.78 684.597 L1726.34 684.597 L1726.9 684.597 L1727.46 684.597 L1728.02 684.597 L1728.58 684.597 L1729.14 684.597 L1729.69 684.597 L1730.25 684.597 L1730.81 684.597 L1731.37 684.597 L1731.93 684.597 L1732.49 684.597 L1733.05 684.597 L1733.61 684.597 L1734.17 684.597 L1734.73 684.597 L1735.29 684.597 L1735.85 684.597 L1736.41 684.597 L1736.97 684.597 L1737.52 684.597 L1738.08 684.597 L1738.64 684.597 L1739.2 684.597 L1739.76 684.597 L1740.32 684.597 L1740.88 684.597 L1741.44 684.597 L1742 684.597 L1742.56 684.597 L1743.12 684.597 L1743.68 684.597 L1744.24 684.597 L1744.79 684.597 L1745.35 684.597 L1745.91 684.597 L1746.47 684.597 L1747.03 684.597 L1747.59 684.597 L1748.15 684.597 L1748.71 684.597 L1749.27 684.597 L1749.83 684.597 L1750.39 684.597 L1750.95 684.597 L1751.51 684.597 L1752.06 684.597 L1752.62 684.597 L1753.18 684.597 L1753.74 684.597 L1754.3 684.597 L1754.86 684.597 L1755.42 684.597 L1755.98 684.597 L1756.54 684.597 L1757.1 684.597 L1757.66 684.597 L1758.22 684.597 L1758.78 684.597 L1759.34 684.597 L1759.89 684.597 L1760.45 684.597 L1761.01 684.597 L1761.57 684.597 L1762.13 684.597 L1762.69 684.597 L1763.25 684.597 L1763.81 684.597 L1764.37 684.597 L1764.93 684.597 L1765.49 684.597 L1766.05 684.597 L1766.61 684.597 L1767.16 684.597 L1767.72 684.597 L1768.28 684.597 L1768.84 684.597 L1769.4 684.597 L1769.96 684.597 L1770.52 684.597 L1771.08 684.597 L1771.64 684.597 L1772.2 684.597 L1772.76 684.597 L1773.32 684.597 L1773.88 684.597 L1774.43 684.597 L1774.99 684.597 L1775.55 684.597 L1776.11 684.597 L1776.67 684.597 L1777.23 684.597 L1777.79 684.597 L1778.35 684.597 L1778.91 684.597 L1779.47 684.597 L1780.03 684.597 L1780.59 684.597 L1781.15 684.597 L1781.71 684.597 L1782.26 684.597 L1782.82 684.597 L1783.38 684.597 L1783.94 684.597 L1784.5 684.597 L1785.06 684.597 L1785.62 684.597 L1786.18 684.597 L1786.74 684.597 L1787.3 684.597 L1787.86 684.597 L1788.42 684.597 L1788.98 684.597 L1789.53 684.597 L1790.09 684.597 L1790.65 684.597 L1791.21 684.597 L1791.77 684.597 L1792.33 684.597 L1792.89 684.597 L1793.45 684.597 L1794.01 684.597 L1794.57 684.597 L1795.13 684.597 L1795.69 684.597 L1796.25 684.597 L1796.8 684.597 L1797.36 684.597 L1797.92 684.597 L1798.48 684.597 L1799.04 684.597 L1799.6 684.597 L1800.16 684.597 L1800.72 684.597 L1801.28 684.597 L1801.84 684.597 L1802.4 684.597 L1802.96 684.597 L1803.52 684.597 L1804.08 684.597 L1804.63 684.597 L1805.19 684.597 L1805.75 684.597 L1806.31 684.597 L1806.87 684.597 L1807.43 684.597 L1807.99 684.597 L1808.55 684.597 L1809.11 684.597 L1809.67 684.597 L1810.23 684.597 L1810.79 684.597 L1811.35 684.597 L1811.9 684.597 L1812.46 684.597 L1813.02 684.597 L1813.58 684.597 L1814.14 684.597 L1814.7 684.597 L1815.26 684.597 L1815.82 684.597 L1816.38 684.597 L1816.94 684.597 L1817.5 684.597 L1818.06 684.597 L1818.62 684.597 L1819.18 684.597 L1819.73 684.597 L1820.29 684.597 L1820.85 684.597 L1821.41 684.597 L1821.97 684.597 L1822.53 684.597 L1823.09 684.597 L1823.65 684.597 L1824.21 684.597 L1824.77 684.597 L1825.33 684.597 L1825.89 684.597 L1826.45 684.597 L1827 684.597 L1827.56 684.597 L1828.12 684.597 L1828.68 684.597 L1829.24 684.597 L1829.8 684.597 L1830.36 684.597 L1830.92 684.597 L1831.48 684.597 L1832.04 684.597 L1832.6 684.597 L1833.16 684.597 L1833.72 684.597 L1834.27 684.597 L1834.83 684.597 L1835.39 684.597 L1835.95 684.597 L1836.51 684.597 L1837.07 684.597 L1837.63 684.597 L1838.19 684.597 L1838.19 682.684 L1837.63 682.684 L1837.07 682.684 L1836.51 682.684 L1835.95 682.684 L1835.39 682.684 L1834.83 682.684 L1834.27 682.684 L1833.72 682.684 L1833.16 682.684 L1832.6 682.684 L1832.04 682.684 L1831.48 682.684 L1830.92 682.684 L1830.36 682.684 L1829.8 682.684 L1829.24 682.684 L1828.68 682.684 L1828.12 682.684 L1827.56 682.684 L1827 682.684 L1826.45 682.684 L1825.89 682.684 L1825.33 682.684 L1824.77 682.684 L1824.21 682.684 L1823.65 682.684 L1823.09 682.684 L1822.53 682.684 L1821.97 682.684 L1821.41 682.684 L1820.85 682.684 L1820.29 682.684 L1819.73 682.684 L1819.18 682.684 L1818.62 682.684 L1818.06 682.684 L1817.5 682.684 L1816.94 682.684 L1816.38 682.684 L1815.82 682.684 L1815.26 682.684 L1814.7 682.684 L1814.14 682.684 L1813.58 682.684 L1813.02 682.684 L1812.46 682.684 L1811.9 682.684 L1811.35 682.684 L1810.79 682.684 L1810.23 682.684 L1809.67 682.684 L1809.11 682.684 L1808.55 682.684 L1807.99 682.684 L1807.43 682.684 L1806.87 682.684 L1806.31 682.684 L1805.75 682.684 L1805.19 682.684 L1804.63 682.684 L1804.08 682.684 L1803.52 682.684 L1802.96 682.684 L1802.4 682.684 L1801.84 682.684 L1801.28 682.684 L1800.72 682.684 L1800.16 682.684 L1799.6 682.684 L1799.04 682.684 L1798.48 682.684 L1797.92 682.684 L1797.36 682.684 L1796.8 682.684 L1796.25 682.684 L1795.69 682.684 L1795.13 682.684 L1794.57 682.684 L1794.01 682.684 L1793.45 682.684 L1792.89 682.684 L1792.33 682.684 L1791.77 682.684 L1791.21 682.684 L1790.65 682.684 L1790.09 682.684 L1789.53 682.684 L1788.98 682.684 L1788.42 682.684 L1787.86 682.684 L1787.3 682.684 L1786.74 682.684 L1786.18 682.684 L1785.62 682.684 L1785.06 682.684 L1784.5 682.684 L1783.94 682.684 L1783.38 682.684 L1782.82 682.684 L1782.26 682.684 L1781.71 682.684 L1781.15 682.684 L1780.59 682.684 L1780.03 682.684 L1779.47 682.684 L1778.91 682.684 L1778.35 682.684 L1777.79 682.684 L1777.23 682.684 L1776.67 682.684 L1776.11 682.684 L1775.55 682.684 L1774.99 682.684 L1774.43 682.684 L1773.88 682.684 L1773.32 682.684 L1772.76 682.684 L1772.2 682.684 L1771.64 682.684 L1771.08 682.684 L1770.52 682.684 L1769.96 682.684 L1769.4 682.684 L1768.84 682.684 L1768.28 682.684 L1767.72 682.684 L1767.16 682.684 L1766.61 682.684 L1766.05 682.684 L1765.49 682.684 L1764.93 682.684 L1764.37 682.684 L1763.81 682.684 L1763.25 682.684 L1762.69 682.684 L1762.13 682.684 L1761.57 682.684 L1761.01 682.684 L1760.45 682.684 L1759.89 682.684 L1759.34 682.684 L1758.78 682.684 L1758.22 682.684 L1757.66 682.684 L1757.1 682.684 L1756.54 682.684 L1755.98 682.684 L1755.42 682.684 L1754.86 682.684 L1754.3 682.684 L1753.74 682.684 L1753.18 682.684 L1752.62 682.684 L1752.06 682.684 L1751.51 682.684 L1750.95 682.684 L1750.39 682.684 L1749.83 682.684 L1749.27 682.684 L1748.71 682.684 L1748.15 682.684 L1747.59 682.684 L1747.03 682.684 L1746.47 682.684 L1745.91 682.684 L1745.35 682.684 L1744.79 682.684 L1744.24 682.684 L1743.68 682.684 L1743.12 682.684 L1742.56 682.684 L1742 682.684 L1741.44 682.684 L1740.88 682.684 L1740.32 682.684 L1739.76 682.684 L1739.2 682.684 L1738.64 682.684 L1738.08 682.684 L1737.52 682.684 L1736.97 682.684 L1736.41 682.684 L1735.85 682.684 L1735.29 682.684 L1734.73 682.684 L1734.17 682.684 L1733.61 682.684 L1733.05 682.684 L1732.49 682.684 L1731.93 682.684 L1731.37 682.684 L1730.81 682.684 L1730.25 682.684 L1729.69 682.684 L1729.14 682.684 L1728.58 682.684 L1728.02 682.684 L1727.46 682.684 L1726.9 682.684 L1726.34 682.684 L1725.78 682.684 L1725.22 682.684 L1724.66 682.684 L1724.1 682.684 L1723.54 682.684 L1722.98 682.684 L1722.42 682.684 L1721.87 682.684 L1721.31 682.684 L1720.75 682.684 L1720.19 682.684 L1719.63 682.684 L1719.07 682.684 L1718.51 682.684 L1717.95 682.684 L1717.39 682.684 L1716.83 682.684 L1716.27 682.684 L1715.71 682.684 L1715.15 682.684 L1714.6 682.684 L1714.04 682.684 L1713.48 682.684 L1712.92 682.684 L1712.36 682.684 L1711.8 682.684 L1711.24 682.684 L1710.68 682.684 L1710.12 682.684 L1709.56 682.684 L1709 682.684 L1708.44 682.684 L1707.88 682.684 L1707.32 682.684 L1706.77 682.684 L1706.21 682.684 L1705.65 682.684 L1705.09 682.684 L1704.53 682.684 L1703.97 682.684 L1703.41 682.684 L1702.85 682.684 L1702.29 682.684 L1701.73 682.684 L1701.17 682.684 L1700.61 682.684 L1700.05 682.684 L1699.5 682.684 L1698.94 682.684 L1698.38 682.684 L1697.82 682.684 L1697.26 682.684 L1696.7 682.684 L1696.14 682.684 L1695.58 682.684 L1695.02 682.684 L1694.46 682.684 L1693.9 682.684 L1693.34 682.684 L1692.78 682.684 L1692.23 682.684 L1691.67 682.684 L1691.11 682.684 L1690.55 682.684 L1689.99 682.684 L1689.43 682.684 L1688.87 682.684 L1688.31 682.684 L1687.75 682.684 L1687.19 682.684 L1686.63 682.684 L1686.07 682.684 L1685.51 682.684 L1684.95 682.684 L1684.4 682.684 L1683.84 682.684 L1683.28 682.684 L1682.72 682.684 L1682.16 682.684 L1681.6 682.684 L1681.04 682.684 L1680.48 682.684 L1679.92 682.684 L1679.36 682.684 L1678.8 682.684 L1678.24 682.684 L1677.68 682.684 L1677.13 682.684 L1676.57 682.684 L1676.01 682.684 L1675.45 682.684 L1674.89 682.684 L1674.33 682.684 L1673.77 682.684 L1673.21 682.684 L1672.65 682.684 L1672.09 682.684 L1671.53 682.684 L1670.97 682.684 L1670.41 682.684 L1669.85 682.684 L1669.3 682.684 L1668.74 682.684 L1668.18 682.684 L1667.62 682.684 L1667.06 682.684 L1666.5 682.684 L1665.94 682.684 L1665.38 682.684 L1664.82 682.684 L1664.26 682.684 L1663.7 682.684 L1663.14 682.684 L1662.58 682.684 L1662.03 682.684 L1661.47 682.684 L1660.91 682.684 L1660.35 682.684 L1659.79 682.684 L1659.23 682.684 L1658.67 682.684 L1658.11 682.684 L1657.55 682.684 L1656.99 682.684 L1656.43 682.684 L1655.87 682.684 L1655.31 682.684 L1654.76 682.684 L1654.2 682.684 L1653.64 682.684 L1653.08 682.684 L1652.52 682.684 L1651.96 682.684 L1651.4 682.684 L1650.84 682.684 L1650.28 682.684 L1649.72 682.684 L1649.16 682.684 L1648.6 682.684 L1648.04 682.684 L1647.48 682.684 L1646.93 682.684 L1646.37 682.684 L1645.81 682.684 L1645.25 682.684 L1644.69 682.684 L1644.13 682.684 L1643.57 682.684 L1643.01 682.684 L1642.45 682.684 L1641.89 682.684 L1641.33 682.684 L1640.77 682.684 L1640.21 682.684 L1639.66 682.684 L1639.1 682.684 L1638.54 682.684 L1637.98 682.684 L1637.42 682.684 L1636.86 682.684 L1636.3 682.684 L1635.74 682.684 L1635.18 682.684 L1634.62 682.684 L1634.06 682.684 L1633.5 682.684 L1632.94 682.684 L1632.39 682.684 L1631.83 682.684 L1631.27 682.684 L1630.71 682.684 L1630.15 682.684 L1629.59 682.684 L1629.03 682.684 L1628.47 682.684 L1627.91 682.684 L1627.35 682.684 L1626.79 682.684 L1626.23 682.684 L1625.67 682.684 L1625.11 682.684 L1624.56 682.684 L1624 682.684 L1623.44 682.684 L1622.88 682.684 L1622.32 682.684 L1621.76 682.684 L1621.2 682.684 L1620.64 682.684 L1620.08 682.684 L1619.52 682.684 L1618.96 682.684 L1618.4 682.684 L1617.84 682.684 L1617.29 682.684 L1616.73 682.684 L1616.17 682.684 L1615.61 682.684 L1615.05 682.684 L1614.49 682.684 L1613.93 682.684 L1613.37 682.684 L1612.81 682.684 L1612.25 682.684 L1611.69 682.684 L1611.13 682.684 L1610.57 682.684 L1610.02 682.684 L1609.46 682.684 L1608.9 682.684 L1608.34 682.684 L1607.78 682.684 L1607.22 682.684 L1606.66 682.684 L1606.1 682.684 L1605.54 682.684 L1604.98 682.684 L1604.42 682.684 L1603.86 682.684 L1603.3 682.684 L1602.74 682.684 L1602.19 682.684 L1601.63 682.684 L1601.07 682.684 L1600.51 682.684 L1599.95 682.684 L1599.39 682.684 L1598.83 682.684 L1598.27 682.684 L1597.71 682.684 L1597.15 682.684 L1596.59 682.684 L1596.03 682.684 L1595.47 682.684 L1594.92 682.684 L1594.36 682.684 L1593.8 682.684 L1593.24 682.684 L1592.68 682.684 L1592.12 682.684 L1591.56 682.684 L1591 682.684 L1590.44 682.684 L1589.88 682.684 L1589.32 682.684 L1588.76 682.684 L1588.2 682.684 L1587.65 682.684 L1587.09 682.684 L1586.53 682.684 L1585.97 682.684 L1585.41 682.684 L1584.85 682.684 L1584.29 682.684 L1583.73 682.684 L1583.17 682.684 L1582.61 682.684 L1582.05 682.684 L1581.49 682.684 L1580.93 682.684 L1580.37 682.684 L1579.82 682.684 L1579.26 682.684 L1578.7 682.684 L1578.14 682.684 L1577.58 682.684 L1577.02 682.684 L1576.46 682.684 L1575.9 682.684 L1575.34 682.684 L1574.78 682.684 L1574.22 682.684 L1573.66 682.684 L1573.1 682.684 L1572.55 682.684 L1571.99 682.684 L1571.43 682.684 L1570.87 682.684 L1570.31 682.684 L1569.75 682.684 L1569.19 682.684 L1568.63 682.684 L1568.07 682.684 L1567.51 682.684 L1566.95 682.684 L1566.39 682.684 L1565.83 682.684 L1565.28 682.684 L1564.72 682.684 L1564.16 682.684 L1563.6 682.684 L1563.04 682.684 L1562.48 682.684 L1561.92 682.684 L1561.36 682.684 L1560.8 682.684 L1560.24 682.684 L1559.68 682.684 L1559.12 682.684 L1558.56 682.684 L1558 682.684 L1557.45 682.684 L1556.89 682.684 L1556.33 682.684 L1555.77 682.684 L1555.21 682.684 L1554.65 682.684 L1554.09 682.684 L1553.53 682.684 L1552.97 682.684 L1552.41 682.684 L1551.85 682.684 L1551.29 682.684 L1550.73 682.684 L1550.18 682.684 L1549.62 682.684 L1549.06 682.684 L1548.5 682.684 L1547.94 682.684 L1547.38 682.684 L1546.82 682.684 L1546.26 682.684 L1545.7 682.684 L1545.14 682.684 L1544.58 682.684 L1544.02 682.684 L1543.46 682.684 L1542.9 682.684 L1542.35 682.684 L1541.79 682.684 L1541.23 682.684 L1540.67 682.684 L1540.11 682.684 L1539.55 682.684 L1538.99 682.684 L1538.43 682.684 L1537.87 682.684 L1537.31 682.684 L1536.75 682.684 L1536.19 682.684 L1535.63 682.684 L1535.08 682.684 L1534.52 682.684 L1533.96 682.684 L1533.4 682.684 L1532.84 682.684 L1532.28 682.684 L1531.72 682.684 L1531.16 682.684 L1530.6 682.684 L1530.04 682.684 L1529.48 682.684 L1528.92 682.684 L1528.36 682.684 L1527.81 682.684 L1527.25 682.684 L1526.69 682.684 L1526.13 682.684 L1525.57 682.684 L1525.01 682.684 L1524.45 682.684 L1523.89 682.684 L1523.33 682.684 L1522.77 682.684 L1522.21 682.684 L1521.65 682.684 L1521.09 682.684 L1520.53 682.684 L1519.98 682.684 L1519.42 682.684 L1518.86 682.684 L1518.3 682.684 L1517.74 682.684 L1517.18 682.684 L1516.62 682.684 L1516.06 682.684 L1515.5 682.684 L1514.94 682.684 L1514.38 682.684 L1513.82 682.684 L1513.26 682.684 L1512.71 682.684 L1512.15 682.684 L1511.59 682.684 L1511.03 682.684 L1510.47 682.684 L1509.91 682.684 L1509.35 682.684 L1508.79 682.684 L1508.23 682.684 L1507.67 682.684 L1507.11 682.684 L1506.55 682.684 L1505.99 682.684 L1505.44 682.684 L1504.88 682.684 L1504.32 682.684 L1503.76 682.684 L1503.2 682.684 L1502.64 682.684 L1502.08 682.684 L1501.52 682.684 L1500.96 682.684 L1500.4 682.684 L1499.84 682.684 L1499.28 682.684 L1498.72 682.684 L1498.16 682.684 L1497.61 682.684 L1497.05 682.684 L1496.49 682.684 L1495.93 682.684 L1495.37 682.684 L1494.81 682.684 L1494.25 682.684 L1493.69 682.684 L1493.13 682.684 L1492.57 682.684 L1492.01 682.684 L1491.45 682.684 L1490.89 682.684 L1490.34 682.684 L1489.78 682.684 L1489.22 682.684 L1488.66 682.684 L1488.1 682.684 L1487.54 682.684 L1486.98 682.684 L1486.42 682.684 L1485.86 682.684 L1485.3 682.684 L1484.74 682.684 L1484.18 682.684 L1483.62 682.684 L1483.07 682.684 L1482.51 682.684 L1481.95 682.684 L1481.39 682.684 L1480.83 682.684 L1480.27 682.684 L1479.71 682.684 L1479.15 682.684 L1478.59 682.684 L1478.03 682.684 L1477.47 682.684 L1476.91 682.684 L1476.35 682.684 L1475.79 682.684 L1475.24 682.684 L1474.68 682.684 L1474.12 682.684 L1473.56 682.684 L1473 682.684 L1472.44 682.684 L1471.88 682.684 L1471.32 682.684 L1470.76 682.684 L1470.2 682.684 L1469.64 682.684 L1469.08 682.684 L1468.52 682.684 L1467.97 682.684 L1467.41 682.684 L1466.85 682.684 L1466.29 682.684 L1465.73 682.684 L1465.17 682.684 L1464.61 682.684 L1464.05 682.684 L1463.49 682.684 L1462.93 682.684 L1462.37 682.684 L1461.81 682.684 L1461.25 682.684 L1460.7 682.684 L1460.14 682.684 L1459.58 682.684 L1459.02 682.684 L1458.46 682.684 L1457.9 682.684 L1457.34 682.684 L1456.78 682.684 L1456.22 682.684 L1455.66 682.684 L1455.1 682.684 L1454.54 682.684 L1453.98 682.684 L1453.42 682.684 L1452.87 682.684 L1452.31 682.684 L1451.75 682.684 L1451.19 682.684 L1450.63 682.684 L1450.07 682.684 L1449.51 682.684 L1448.95 682.684 L1448.39 682.684 L1447.83 682.684 L1447.27 682.684 L1446.71 682.684 L1446.15 682.684 L1445.6 682.684 L1445.04 682.684 L1444.48 682.684 L1443.92 682.684 L1443.36 682.684 L1442.8 682.684 L1442.24 682.684 L1441.68 682.684 L1441.12 682.684 L1440.56 682.684 L1440 682.684 L1439.44 682.684 L1438.88 682.684 L1438.33 682.684 L1437.77 682.684 L1437.21 682.684 L1436.65 682.684 L1436.09 682.684 L1435.53 682.684 L1434.97 682.684 L1434.41 682.684 L1433.85 682.684 L1433.29 682.684 L1432.73 682.684 L1432.17 682.684 L1431.61 682.684 L1431.05 682.684 L1430.5 682.684 L1429.94 682.684 L1429.38 682.684 L1428.82 682.684 L1428.26 682.684 L1427.7 682.684 L1427.14 682.684 L1426.58 682.684 L1426.02 682.684 L1425.46 682.684 L1424.9 682.684 L1424.34 682.684 L1423.78 682.684 L1423.23 682.684 L1422.67 682.684 L1422.11 682.684 L1421.55 682.684 L1420.99 682.684 L1420.43 682.684 L1419.87 682.684 L1419.31 682.684 L1418.75 682.684 L1418.19 682.684 L1417.63 682.684 L1417.07 682.684 L1416.51 682.684 L1415.95 682.684 L1415.4 682.684 L1414.84 682.684 L1414.28 682.684 L1413.72 682.684 L1413.16 682.684 L1412.6 682.684 L1412.04 682.684 L1411.48 682.684 L1410.92 682.684 L1410.36 682.684 L1409.8 682.684 L1409.24 682.684 L1408.68 682.684 L1408.13 682.684 L1407.57 682.684 L1407.01 682.684 L1406.45 682.684 L1405.89 682.684 L1405.33 682.684 L1404.77 682.684 L1404.21 682.684 L1403.65 682.684 L1403.09 682.684 L1402.53 682.684 L1401.97 682.684 L1401.41 682.684 L1400.86 682.684 L1400.3 682.684 L1399.74 682.684 L1399.18 682.684 L1398.62 682.684 L1398.06 682.684 L1397.5 682.684 L1396.94 682.684 L1396.38 682.684 L1395.82 682.684 L1395.26 682.684 L1394.7 682.684 L1394.14 682.684 L1393.58 682.684 L1393.03 682.684 L1392.47 682.684 L1391.91 682.684 L1391.35 682.684 L1390.79 682.684 L1390.23 682.684 L1389.67 682.684 L1389.11 682.684 L1388.55 682.684 L1387.99 682.684 L1387.43 682.684 L1386.87 682.684 L1386.31 682.684 L1385.76 682.684 L1385.2 682.684 L1384.64 682.684 L1384.08 682.684 L1383.52 682.684 L1382.96 682.684 L1382.4 682.684 L1381.84 682.684 L1381.28 682.684 L1380.72 682.684 L1380.16 682.684 L1379.6 682.684 L1379.04 682.684 L1378.49 682.684 L1377.93 682.684 L1377.37 682.684 L1376.81 682.684 L1376.25 682.684 L1375.69 682.684 L1375.13 682.684 L1374.57 682.684 L1374.01 682.684 L1373.45 682.684 L1372.89 682.684 L1372.33 682.684 L1371.77 682.684 L1371.21 682.684 L1370.66 682.684 L1370.1 682.684 L1369.54 682.684 L1368.98 682.684 L1368.42 682.684 L1367.86 682.684 L1367.3 682.684 L1366.74 682.684 L1366.18 682.684 L1365.62 682.684 L1365.06 682.684 L1364.5 682.684 L1363.94 682.684 L1363.39 682.684 L1362.83 682.684 L1362.27 682.684 L1361.71 682.684 L1361.15 682.684 L1360.59 682.684 L1360.03 682.684 L1359.47 682.684 L1358.91 682.684 L1358.35 682.684 L1357.79 682.684 L1357.23 682.684 L1356.67 682.684 L1356.12 682.684 L1355.56 682.684 L1355 682.684 L1354.44 682.684 L1353.88 682.684 L1353.32 682.684 L1352.76 682.684 L1352.2 682.684 L1351.64 682.684 L1351.08 682.684 L1350.52 682.684 L1349.96 682.684 L1349.4 682.684 L1348.84 682.684 L1348.29 682.684 L1347.73 682.684 L1347.17 682.684 L1346.61 682.684 L1346.05 682.684 L1345.49 682.684 L1344.93 682.684 L1344.37 682.684 L1343.81 682.684 L1343.25 682.684 L1342.69 682.684 L1342.13 682.684 L1341.57 682.684 L1341.02 682.684 L1340.46 682.684 L1339.9 682.684 L1339.34 682.684 L1338.78 682.684 L1338.22 682.684 L1337.66 682.684 L1337.1 682.684 L1336.54 682.684 L1335.98 682.684 L1335.42 682.684 L1334.86 682.684 L1334.3 682.684 L1333.75 682.684 L1333.19 682.684 L1332.63 682.684 L1332.07 682.684 L1331.51 682.684 L1330.95 682.684 L1330.39 682.684 L1329.83 682.684 L1329.27 682.684 L1328.71 682.684 L1328.15 682.684 L1327.59 682.684 L1327.03 682.684 L1326.47 682.684 L1325.92 682.684 L1325.36 682.684 L1324.8 682.684 L1324.24 682.684 L1323.68 682.684 L1323.12 682.684 L1322.56 682.684 L1322 682.684 L1321.44 682.684 L1320.88 682.684 L1320.32 682.684 L1319.76 682.684 L1319.2 682.684 L1318.65 682.684 L1318.09 682.684 L1317.53 682.684 L1316.97 682.684 L1316.41 682.684 L1315.85 682.684 L1315.29 682.684 L1314.73 682.684 L1314.17 682.684 L1313.61 682.684 L1313.05 682.684 L1312.49 682.684 L1311.93 682.684 L1311.38 682.684 L1310.82 682.684 L1310.26 682.684 L1309.7 682.684 L1309.14 682.684 L1308.58 682.684 L1308.02 682.684 L1307.46 682.684 L1306.9 682.684 L1306.34 682.684 L1305.78 682.684 L1305.22 682.684 L1304.66 682.684 L1304.1 682.684 L1303.55 682.684 L1302.99 682.684 L1302.43 682.684 L1301.87 682.684 L1301.31 682.684 L1300.75 682.684 L1300.19 682.684 L1299.63 682.684 L1299.07 682.684 L1298.51 682.684 L1297.95 682.684 L1297.39 682.684 L1296.83 682.684 L1296.28 682.684 L1295.72 682.684 L1295.16 682.684 L1294.6 682.684 L1294.04 682.684 L1293.48 682.684 L1292.92 682.684 L1292.36 682.684 L1291.8 682.684 L1291.24 682.684 L1290.68 682.684 L1290.12 682.684 L1289.56 682.684 L1289 682.684 L1288.45 682.684 L1287.89 682.684 L1287.33 682.684 L1286.77 682.684 L1286.21 682.684 L1285.65 682.684 L1285.09 682.684 L1284.53 682.684 L1283.97 682.684 L1283.41 682.684 L1282.85 682.684 L1282.29 682.684 L1281.73 682.684 L1281.18 682.684 L1280.62 682.684 L1280.06 682.684 L1279.5 682.684 L1278.94 682.684 L1278.38 682.684 L1277.82 682.684 L1277.26 682.684 L1276.7 682.684 L1276.14 682.684 L1275.58 682.684 L1275.02 682.684 L1274.46 682.684 L1273.91 682.684 L1273.35 682.684 L1272.79 682.684 L1272.23 682.684 L1271.67 682.684 L1271.11 682.684 L1270.55 682.684 L1269.99 682.684 L1269.43 682.684 L1268.87 682.684 L1268.31 682.684 L1267.75 682.684 L1267.19 682.684 L1266.63 682.684 L1266.08 682.684 L1265.52 682.684 L1264.96 682.684 L1264.4 682.684 L1263.84 682.684 L1263.28 682.684 L1262.72 682.684 L1262.16 682.684 L1261.6 682.684 L1261.04 682.684 L1260.48 682.684 L1259.92 682.684 L1259.36 682.684 L1258.81 682.684 L1258.25 682.684 L1257.69 682.684 L1257.13 682.684 L1256.57 682.684 L1256.01 682.684 L1255.45 682.684 L1254.89 682.684 L1254.33 682.684 L1253.77 682.684 L1253.21 682.684 L1252.65 682.684 L1252.09 682.684 L1251.54 682.684 L1250.98 682.684 L1250.42 682.684 L1249.86 682.684 L1249.3 682.684 L1248.74 682.684 L1248.18 682.684 L1247.62 682.684 L1247.06 682.684 L1246.5 682.684 L1245.94 682.684 L1245.38 682.684 L1244.82 682.684 L1244.26 682.684 L1243.71 682.684 L1243.15 682.684 L1242.59 682.684 L1242.03 682.684 L1241.47 682.684 L1240.91 682.684 L1240.35 682.684 L1239.79 682.684 L1239.23 682.684 L1238.67 682.684 L1238.11 682.684 L1237.55 682.684 L1236.99 682.684 L1236.44 682.684 L1235.88 682.684 L1235.32 682.684 L1234.76 682.684 L1234.2 682.684 L1233.64 682.684 L1233.08 682.684 L1232.52 682.684 L1231.96 682.684 L1231.4 682.684 L1230.84 682.684 L1230.28 682.684 L1229.72 682.684 L1229.17 682.684 L1228.61 682.684 L1228.05 682.684 L1227.49 682.684 L1226.93 682.684 L1226.37 682.684 L1225.81 682.684 L1225.25 682.684 L1224.69 682.684 L1224.13 682.684 L1223.57 682.684 L1223.01 682.684 L1222.45 682.684 L1221.89 682.684 L1221.34 682.684 L1220.78 682.684 L1220.22 682.684 L1219.66 682.684 L1219.1 682.684 L1218.54 682.684 L1217.98 682.684 L1217.42 682.684 L1216.86 682.684 L1216.3 682.684 L1215.74 682.684 L1215.18 682.684 L1214.62 682.684 L1214.07 682.684 L1213.51 682.684 L1212.95 682.684 L1212.39 682.684 L1211.83 682.684 L1211.27 682.684 L1210.71 682.684 L1210.15 682.684 L1209.59 682.684 L1209.03 682.684 L1208.47 682.684 L1207.91 682.684 L1207.35 682.684 L1206.8 682.684 L1206.24 682.684 L1205.68 682.684 L1205.12 682.684 L1204.56 682.684 L1204 682.684 L1203.44 682.684 L1202.88 682.684 L1202.32 682.684 L1201.76 682.684 L1201.2 682.684 L1200.64 682.684 L1200.08 682.684 L1199.52 682.684 L1198.97 682.684 L1198.41 682.684 L1197.85 682.684 L1197.29 682.684 L1196.73 682.684 L1196.17 682.684 L1195.61 682.684 L1195.05 682.684 L1194.49 682.684 L1193.93 682.684 L1193.37 682.684 L1192.81 682.684 L1192.25 682.684 L1191.7 682.684 L1191.14 682.684 L1190.58 682.684 L1190.02 682.684 L1189.46 682.684 L1188.9 682.684 L1188.34 682.684 L1187.78 682.684 L1187.22 682.684 L1186.66 682.684 L1186.1 682.684 L1185.54 682.684 L1184.98 682.684 L1184.43 682.684 L1183.87 682.684 L1183.31 682.684 L1182.75 682.684 L1182.19 682.684 L1181.63 682.684 L1181.07 682.684 L1180.51 682.684 L1179.95 682.684 L1179.39 682.684 L1178.83 682.684 L1178.27 682.684 L1177.71 682.684 L1177.15 682.684 L1176.6 682.684 L1176.04 682.684 L1175.48 682.684 L1174.92 682.684 L1174.36 682.684 L1173.8 682.684 L1173.24 682.684 L1172.68 682.684 L1172.12 682.684 L1171.56 682.684 L1171 682.684 L1170.44 682.684 L1169.88 682.684 L1169.33 682.684 L1168.77 682.684 L1168.21 682.684 L1167.65 682.684 L1167.09 682.684 L1166.53 682.684 L1165.97 682.684 L1165.41 682.684 L1164.85 682.684 L1164.29 682.684 L1163.73 682.684 L1163.17 682.684 L1162.61 682.684 L1162.05 682.684 L1161.5 682.684 L1160.94 682.684 L1160.38 682.684 L1159.82 682.684 L1159.26 682.684 L1158.7 682.684 L1158.14 682.684 L1157.58 682.684 L1157.02 682.684 L1156.46 682.684 L1155.9 682.684 L1155.34 682.684 L1154.78 682.684 L1154.23 682.684 L1153.67 682.684 L1153.11 682.684 L1152.55 682.684 L1151.99 682.684 L1151.43 682.684 L1150.87 682.684 L1150.31 682.684 L1149.75 682.684 L1149.19 682.684 L1148.63 682.684 L1148.07 682.684 L1147.51 682.684 L1146.96 682.684 L1146.4 682.684 L1145.84 682.684 L1145.28 682.684 L1144.72 682.684 L1144.16 682.684 L1143.6 682.684 L1143.04 682.684 L1142.48 682.684 L1141.92 682.684 L1141.36 682.684 L1140.8 682.684 L1140.24 682.684 L1139.68 682.684 L1139.13 682.684 L1138.57 682.684 L1138.01 682.684 L1137.45 682.684 L1136.89 682.684 L1136.33 682.684 L1135.77 682.684 L1135.21 682.684 L1134.65 682.684 L1134.09 682.684 L1133.53 682.684 L1132.97 682.684 L1132.41 682.684 L1131.86 682.684 L1131.3 682.684 L1130.74 682.684 L1130.18 682.684 L1129.62 682.684 L1129.06 682.684 L1128.5 682.684 L1127.94 682.684 L1127.38 682.684 L1126.82 682.684 L1126.26 682.684 L1125.7 682.684 L1125.14 682.684 L1124.59 682.684 L1124.03 682.684 L1123.47 682.684 L1122.91 682.684 L1122.35 682.684 L1121.79 682.684 L1121.23 682.684 L1120.67 682.684 L1120.11 682.684 L1119.55 682.684 L1118.99 682.684 L1118.43 682.684 L1117.87 682.684 L1117.31 682.684 L1116.76 682.684 L1116.2 682.684 L1115.64 682.684 L1115.08 682.684 L1114.52 682.684 L1113.96 682.684 L1113.4 682.684 L1112.84 682.684 L1112.28 682.684 L1111.72 682.684 L1111.16 682.684 L1110.6 682.684 L1110.04 682.684 L1109.49 682.684 L1108.93 682.684 L1108.37 682.684 L1107.81 682.684 L1107.25 682.684 L1106.69 682.684 L1106.13 682.684 L1105.57 682.684 L1105.01 682.684 L1104.45 682.684 L1103.89 682.684 L1103.33 682.684 L1102.77 682.684 L1102.22 682.684 L1101.66 682.684 L1101.1 682.684 L1100.54 682.684 L1099.98 682.684 L1099.42 682.684 L1098.86 682.684 L1098.3 682.684 L1097.74 682.684 L1097.18 682.684 L1096.62 682.684 L1096.06 682.684 L1095.5 682.684 L1094.94 682.684 L1094.39 682.684 L1093.83 682.684 L1093.27 682.684 L1092.71 682.684 L1092.15 682.684 L1091.59 682.684 L1091.03 682.684 L1090.47 682.684 L1089.91 682.684 L1089.35 682.684 L1088.79 682.684 L1088.23 682.684 L1087.67 682.684 L1087.12 682.684 L1086.56 682.684 L1086 682.684 L1085.44 682.684 L1084.88 682.684 L1084.32 682.684 L1083.76 682.684 L1083.2 682.684 L1082.64 682.684 L1082.08 682.684 L1081.52 682.684 L1080.96 682.684 L1080.4 682.684 L1079.85 682.684 L1079.29 682.684 L1078.73 682.684 L1078.17 682.684 L1077.61 682.684 L1077.05 682.684 L1076.49 682.684 L1075.93 682.684 L1075.37 682.684 L1074.81 682.684 L1074.25 682.684 L1073.69 682.684 L1073.13 682.684 L1072.57 682.684 L1072.02 682.684 L1071.46 682.684 L1070.9 682.684 L1070.34 682.684 L1069.78 682.684 L1069.22 682.684 L1068.66 682.684 L1068.1 682.684 L1067.54 682.684 L1066.98 682.684 L1066.42 682.684 L1065.86 682.684 L1065.3 682.684 L1064.75 682.684 L1064.19 682.684 L1063.63 682.684 L1063.07 682.684 L1062.51 682.684 L1061.95 682.684 L1061.39 682.684 L1060.83 682.684 L1060.27 682.684 L1059.71 682.684 L1059.15 682.684 L1058.59 682.684 L1058.03 682.684 L1057.48 682.684 L1056.92 682.684 L1056.36 682.684 L1055.8 682.684 L1055.24 682.684 L1054.68 682.684 L1054.12 682.684 L1053.56 682.684 L1053 682.684 L1052.44 682.684 L1051.88 682.684 L1051.32 682.684 L1050.76 682.684 L1050.2 682.684 L1049.65 682.684 L1049.09 682.684 L1048.53 682.684 L1047.97 682.684 L1047.41 682.684 L1046.85 682.684 L1046.29 682.684 L1045.73 682.684 L1045.17 682.684 L1044.61 682.684 L1044.05 682.684 L1043.49 682.684 L1042.93 682.684 L1042.38 682.684 L1041.82 682.684 L1041.26 682.684 L1040.7 682.684 L1040.14 682.684 L1039.58 682.684 L1039.02 682.684 L1038.46 682.684 L1037.9 682.684 L1037.34 682.684 L1036.78 682.684 L1036.22 682.684 L1035.66 682.684 L1035.1 682.684 L1034.55 682.684 L1033.99 682.684 L1033.43 682.684 L1032.87 682.684 L1032.31 682.684 L1031.75 682.684 L1031.19 682.684 L1030.63 682.684 L1030.07 682.684 L1029.51 682.684 L1028.95 682.684 L1028.39 682.684 L1027.83 682.684 L1027.28 682.684 L1026.72 682.684 L1026.16 682.684 L1025.6 682.684 L1025.04 682.684 L1024.48 682.684 L1023.92 682.684 L1023.36 682.684 L1022.8 682.684 L1022.24 682.684 L1021.68 682.684 L1021.12 682.684 L1020.56 682.684 L1020.01 682.684 L1019.45 682.684 L1018.89 682.684 L1018.33 682.684 L1017.77 682.684 L1017.21 682.684 L1016.65 682.684 L1016.09 682.684 L1015.53 682.684 L1014.97 682.684 L1014.41 682.684 L1013.85 682.684 L1013.29 682.684 L1012.73 682.684 L1012.18 682.684 L1011.62 682.684 L1011.06 682.684 L1010.5 682.684 L1009.94 682.684 L1009.38 682.684 L1008.82 682.684 L1008.26 682.684 L1007.7 682.684 L1007.14 682.684 L1006.58 682.684 L1006.02 682.684 L1005.46 682.684 L1004.91 682.684 L1004.35 682.684 L1003.79 682.684 L1003.23 682.684 L1002.67 682.684 L1002.11 682.684 L1001.55 682.684 L1000.99 682.684 L1000.43 682.684 L999.872 682.684 L999.313 682.684 L998.754 682.684 L998.194 682.684 L997.635 682.684 L997.076 682.684 L996.517 682.684 L995.957 682.684 L995.398 682.684 L994.839 682.684 L994.28 682.684 L993.72 682.684 L993.161 682.684 L992.602 682.684 L992.043 682.684 L991.483 682.684 L990.924 682.684 L990.365 682.684 L989.806 682.684 L989.246 682.684 L988.687 682.684 L988.128 682.684 L987.569 682.684 L987.009 682.684 L986.45 682.684 L985.891 682.684 L985.332 682.684 L984.772 682.684 L984.213 682.684 L983.654 682.684 L983.095 682.684 L982.535 682.684 L981.976 682.684 L981.417 682.684 L980.858 682.684 L980.298 682.684 L979.739 682.684 L979.18 682.684 L978.621 682.684 L978.061 682.684 L977.502 682.684 L976.943 682.684 L976.384 682.684 L975.824 682.684 L975.265 682.684 L974.706 682.684 L974.147 682.684 L973.587 682.684 L973.028 682.684 L972.469 682.684 L971.91 682.684 L971.35 682.684 L970.791 682.684 L970.232 682.684 L969.673 682.684 L969.113 682.684 L968.554 682.684 L967.995 682.684 L967.436 682.684 L966.876 682.684 L966.317 682.684 L965.758 682.684 L965.199 682.684 L964.639 682.684 L964.08 682.684 L963.521 682.684 L962.962 682.684 L962.402 682.684 L961.843 682.684 L961.284 682.684 L960.725 682.684 L960.165 682.684 L959.606 682.684 L959.047 682.684 L958.488 682.684 L957.928 682.684 L957.369 682.684 L956.81 682.684 L956.251 682.684 L955.691 682.684 L955.132 682.684 L954.573 682.684 L954.014 682.684 L953.454 682.684 L952.895 682.684 L952.336 682.684 L951.777 682.684 L951.217 682.684 L950.658 682.684 L950.099 682.684 L949.54 682.684 L948.98 682.684 L948.421 682.684 L947.862 682.684 L947.303 682.684 L946.743 682.684 L946.184 682.684 L945.625 682.684 L945.066 682.684 L944.506 682.684 L943.947 682.684 L943.388 682.684 L942.829 682.684 L942.269 682.684 L941.71 682.684 L941.151 682.684 L940.592 682.684 L940.032 682.684 L939.473 682.684 L938.914 682.684 L938.355 682.684 L937.795 682.684 L937.236 682.684 L936.677 682.684 L936.118 682.684 L935.558 682.684 L934.999 682.684 L934.44 682.684 L933.881 682.684 L933.321 682.684 L932.762 682.684 L932.203 682.684 L931.644 682.684 L931.084 682.684 L930.525 682.684 L929.966 682.684 L929.406 682.684 L928.847 682.684 L928.288 682.684 L927.729 682.684 L927.169 682.684 L926.61 682.684 L926.051 682.684 L925.492 682.684 L924.932 682.684 L924.373 682.684 L923.814 682.684 L923.255 682.684 L922.695 682.684 L922.136 682.684 L921.577 682.684 L921.018 682.684 L920.458 682.684 L919.899 682.684 L919.34 682.684 L918.781 682.684 L918.221 682.684 L917.662 682.684 L917.103 682.684 L916.544 682.684 L915.984 682.684 L915.425 682.684 L914.866 682.684 L914.307 682.684 L913.747 682.684 L913.188 682.684 L912.629 682.684 L912.07 682.684 L911.51 682.684 L910.951 682.684 L910.392 682.684 L909.833 682.684 L909.273 682.684 L908.714 682.684 L908.155 682.684 L907.596 682.684 L907.036 682.684 L906.477 682.684 L905.918 682.684 L905.359 682.684 L904.799 682.684 L904.24 682.684 L903.681 682.684 L903.122 682.684 L902.562 682.684 L902.003 682.684 L901.444 682.684 L900.885 682.684 L900.325 682.684 L899.766 682.684 L899.207 682.684 L898.648 682.684 L898.088 682.684 L897.529 682.684 L896.97 682.684 L896.411 682.684 L895.851 682.684 L895.292 682.684 L894.733 682.684 L894.174 682.684 L893.614 682.684 L893.055 682.684 L892.496 682.684 L891.937 682.684 L891.377 682.684 L890.818 682.684 L890.259 682.684 L889.7 682.684 L889.14 682.684 L888.581 682.684 L888.022 682.684 L887.463 682.684 L886.903 682.684 L886.344 682.684 L885.785 682.684 L885.226 682.684 L884.666 682.684 L884.107 682.684 L883.548 682.684 L882.989 682.684 L882.429 682.684 L881.87 682.684 L881.311 682.684 L880.752 682.684 L880.192 682.684 L879.633 682.684 L879.074 682.684 L878.515 682.684 L877.955 682.684 L877.396 682.684 L876.837 682.684 L876.278 682.684 L875.718 682.684 L875.159 682.684 L874.6 682.684 L874.041 682.684 L873.481 682.684 L872.922 682.684 L872.363 682.684 L871.804 682.684 L871.244 682.684 L870.685 682.684 L870.126 682.684 L869.567 682.684 L869.007 682.684 L868.448 682.684 L867.889 682.684 L867.33 682.684 L866.77 682.684 L866.211 682.684 L865.652 682.684 L865.093 682.684 L864.533 682.684 L863.974 682.684 L863.415 682.684 L862.856 682.684 L862.296 682.684 L861.737 682.684 L861.178 682.684 L860.619 682.684 L860.059 682.684 L859.5 682.684 L858.941 682.684 L858.382 682.684 L857.822 682.684 L857.263 682.684 L856.704 682.684 L856.145 682.684 L855.585 682.684 L855.026 682.684 L854.467 682.684 L853.908 682.684 L853.348 682.684 L852.789 682.684 L852.23 682.684 L851.671 682.684 L851.111 682.684 L850.552 682.684 L849.993 682.684 L849.434 682.684 L848.874 682.684 L848.315 682.684 L847.756 682.684 L847.197 682.684 L846.637 682.684 L846.078 682.684 L845.519 682.684 L844.96 682.684 L844.4 682.684 L843.841 682.684 L843.282 682.684 L842.723 682.684 L842.163 682.684 L841.604 682.684 L841.045 682.684 L840.486 682.684 L839.926 682.684 L839.367 682.684 L838.808 682.684 L838.249 682.684 L837.689 682.684 L837.13 682.684 L836.571 682.684 L836.012 682.684 L835.452 682.684 L834.893 682.684 L834.334 682.684 L833.775 682.684 L833.215 682.684 L832.656 682.684 L832.097 682.684 L831.538 682.684 L830.978 682.684 L830.419 682.684 L829.86 682.684 L829.301 682.684 L828.741 682.684 L828.182 682.684 L827.623 682.684 L827.064 682.684 L826.504 682.684 L825.945 682.684 L825.386 682.684 L824.827 682.684 L824.267 682.684 L823.708 682.684 L823.149 682.684 L822.59 682.684 L822.03 682.684 L821.471 682.684 L820.912 682.684 L820.353 682.684 L819.793 682.684 L819.234 682.684 L818.675 682.684 L818.116 682.684 L817.556 682.684 L816.997 682.684 L816.438 682.684 L815.879 682.684 L815.319 682.684 L814.76 682.684 L814.201 682.684 L813.642 682.684 L813.082 682.684 L812.523 682.684 L811.964 682.684 L811.405 682.684 L810.845 682.684 L810.286 682.684 L809.727 682.684 L809.168 682.684 L808.608 682.684 L808.049 682.684 L807.49 682.684 L806.931 682.684 L806.371 682.684 L805.812 682.684 L805.253 682.684 L804.693 682.684 L804.134 682.684 L803.575 682.684 L803.016 682.684 L802.456 682.684 L801.897 682.684 L801.338 682.684 L800.779 682.684 L800.219 682.684 L799.66 682.684 L799.101 682.684 L798.542 682.684 L797.982 682.684 L797.423 682.684 L796.864 682.684 L796.305 682.684 L795.745 682.684 L795.186 682.684 L794.627 682.684 L794.068 682.684 L793.508 682.684 L792.949 682.684 L792.39 682.684 L791.831 682.684 L791.271 682.684 L790.712 682.684 L790.153 682.684 L789.594 682.684 L789.034 682.684 L788.475 682.684 L787.916 682.684 L787.357 682.684 L786.797 682.684 L786.238 682.684 L785.679 682.684 L785.12 682.684 L784.56 682.684 L784.001 682.684 L783.442 682.684 L782.883 682.684 L782.323 682.684 L781.764 682.684 L781.205 682.684 L780.646 682.684 L780.086 682.684 L779.527 682.684 L778.968 682.684 L778.409 682.684 L777.849 682.684 L777.29 682.684 L776.731 682.684 L776.172 682.684 L775.612 682.684 L775.053 682.684 L774.494 682.684 L773.935 682.684 L773.375 682.684 L772.816 682.684 L772.257 682.684 L771.698 682.684 L771.138 682.684 L770.579 682.684 L770.02 682.684 L769.461 682.684 L768.901 682.684 L768.342 682.684 L767.783 682.684 L767.224 682.684 L766.664 682.684 L766.105 682.684 L765.546 682.684 L764.987 682.684 L764.427 682.684 L763.868 682.684 L763.309 682.684 L762.75 682.684 L762.19 682.684 L761.631 682.684 L761.072 682.684 L760.513 682.684 L759.953 682.684 L759.394 682.684 L758.835 682.684 L758.276 682.684 L757.716 682.684 L757.157 682.684 L756.598 682.684 L756.039 682.684 L755.479 682.684 L754.92 682.684 L754.361 682.684 L753.802 682.684 L753.242 682.684 L752.683 682.684 L752.124 682.684 L751.565 682.684 L751.005 682.684 L750.446 682.684 L749.887 682.684 L749.328 682.684 L748.768 682.684 L748.209 682.684 L747.65 682.684 L747.091 682.684 L746.531 682.684 L745.972 682.684 L745.413 682.684 L744.854 682.684 L744.294 682.684 L743.735 682.684 L743.176 682.684 L742.617 682.684 L742.057 682.684 L741.498 682.684 L740.939 682.684 L740.38 682.684 L739.82 682.684 L739.261 682.684 L738.702 682.684 L738.143 682.684 L737.583 682.684 L737.024 682.684 L736.465 682.684 L735.906 682.684 L735.346 682.684 L734.787 682.684 L734.228 682.684 L733.669 682.684 L733.109 682.684 L732.55 682.684 L731.991 682.684 L731.432 682.684 L730.872 682.684 L730.313 682.684 L729.754 682.684 L729.195 682.684 L728.635 682.684 L728.076 682.684 L727.517 682.684 L726.958 682.684 L726.398 682.684 L725.839 682.684 L725.28 682.684 L724.721 682.684 L724.161 682.684 L723.602 682.684 L723.043 682.684 L722.484 682.684 L721.924 682.684 L721.365 682.684 L720.806 682.684 L720.247 682.684  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.642 720.806,683.642 721.365,683.642 721.924,683.642 722.484,683.642 723.043,683.642 723.602,683.642 724.161,683.642 724.721,683.642 725.28,683.642 725.839,683.642 726.398,683.642 726.958,683.642 727.517,683.642 728.076,683.642 728.635,683.642 729.195,683.642 729.754,683.642 730.313,683.642 730.872,683.642 731.432,683.642 731.991,683.642 732.55,683.642 733.109,683.642 733.669,683.642 734.228,683.642 734.787,683.642 735.346,683.642 735.906,683.642 736.465,683.642 737.024,683.642 737.583,683.642 738.143,683.642 738.702,683.642 739.261,683.642 739.82,683.642 740.38,683.642 740.939,683.642 741.498,683.642 742.057,683.642 742.617,683.642 743.176,683.642 743.735,683.642 744.294,683.642 744.854,683.642 745.413,683.642 745.972,683.642 746.531,683.642 747.091,683.642 747.65,683.642 748.209,683.642 748.768,683.642 749.328,683.642 749.887,683.642 750.446,683.642 751.005,683.642 751.565,683.642 752.124,683.642 752.683,683.642 753.242,683.642 753.802,683.642 754.361,683.642 754.92,683.642 755.479,683.642 756.039,683.642 756.598,683.642 757.157,683.642 757.716,683.642 758.276,683.642 758.835,683.642 759.394,683.642 759.953,683.642 760.513,683.642 761.072,683.642 761.631,683.642 762.19,683.642 762.75,683.642 763.309,683.642 763.868,683.642 764.427,683.642 764.987,683.642 765.546,683.642 766.105,683.642 766.664,683.642 767.224,683.642 767.783,683.642 768.342,683.642 768.901,683.642 769.461,683.642 770.02,683.642 770.579,683.642 771.138,683.642 771.698,683.642 772.257,683.642 772.816,683.642 773.375,683.642 773.935,683.642 774.494,683.642 775.053,683.642 775.612,683.642 776.172,683.642 776.731,683.642 777.29,683.642 777.849,683.642 778.409,683.642 778.968,683.642 779.527,683.642 780.086,683.642 780.646,683.642 781.205,683.642 781.764,683.642 782.323,683.642 782.883,683.642 783.442,683.642 784.001,683.642 784.56,683.642 785.12,683.642 785.679,683.642 786.238,683.642 786.797,683.642 787.357,683.642 787.916,683.642 788.475,683.642 789.034,683.642 789.594,683.642 790.153,683.642 790.712,683.642 791.271,683.642 791.831,683.642 792.39,683.642 792.949,683.642 793.508,683.642 794.068,683.642 794.627,683.642 795.186,683.642 795.745,683.642 796.305,683.642 796.864,683.642 797.423,683.642 797.982,683.642 798.542,683.642 799.101,683.642 799.66,683.642 800.219,683.642 800.779,683.642 801.338,683.642 801.897,683.642 802.456,683.642 803.016,683.642 803.575,683.642 804.134,683.642 804.693,683.642 805.253,683.642 805.812,683.642 806.371,683.642 806.931,683.642 807.49,683.642 808.049,683.642 808.608,683.642 809.168,683.642 809.727,683.642 810.286,683.642 810.845,683.642 811.405,683.642 811.964,683.642 812.523,683.642 813.082,683.642 813.642,683.642 814.201,683.642 814.76,683.642 815.319,683.642 815.879,683.642 816.438,683.642 816.997,683.642 817.556,683.642 818.116,683.642 818.675,683.642 819.234,683.642 819.793,683.642 820.353,683.642 820.912,683.642 821.471,683.642 822.03,683.642 822.59,683.642 823.149,683.642 823.708,683.642 824.267,683.642 824.827,683.642 825.386,683.642 825.945,683.642 826.504,683.642 827.064,683.642 827.623,683.642 828.182,683.642 828.741,683.642 829.301,683.642 829.86,683.642 830.419,683.642 830.978,683.642 831.538,683.642 832.097,683.642 832.656,683.642 833.215,683.642 833.775,683.642 834.334,683.642 834.893,683.642 835.452,683.642 836.012,683.642 836.571,683.642 837.13,683.642 837.689,683.642 838.249,683.642 838.808,683.642 839.367,683.642 839.926,683.642 840.486,683.642 841.045,683.642 841.604,683.642 842.163,683.642 842.723,683.642 843.282,683.642 843.841,683.642 844.4,683.642 844.96,683.642 845.519,683.642 846.078,683.642 846.637,683.642 847.197,683.642 847.756,683.642 848.315,683.642 848.874,683.642 849.434,683.642 849.993,683.642 850.552,683.642 851.111,683.642 851.671,683.642 852.23,683.642 852.789,683.642 853.348,683.642 853.908,683.642 854.467,683.642 855.026,683.642 855.585,683.642 856.145,683.642 856.704,683.642 857.263,683.642 857.822,683.642 858.382,683.642 858.941,683.642 859.5,683.642 860.059,683.642 860.619,683.642 861.178,683.642 861.737,683.642 862.296,683.642 862.856,683.642 863.415,683.642 863.974,683.642 864.533,683.642 865.093,683.642 865.652,683.642 866.211,683.642 866.77,683.642 867.33,683.642 867.889,683.642 868.448,683.642 869.007,683.642 869.567,683.642 870.126,683.642 870.685,683.642 871.244,683.642 871.804,683.642 872.363,683.642 872.922,683.642 873.481,683.642 874.041,683.642 874.6,683.642 875.159,683.642 875.718,683.642 876.278,683.642 876.837,683.642 877.396,683.642 877.955,683.642 878.515,683.642 879.074,683.642 879.633,683.642 880.192,683.642 880.752,683.642 881.311,683.642 881.87,683.642 882.429,683.642 882.989,683.642 883.548,683.642 884.107,683.642 884.666,683.642 885.226,683.642 885.785,683.642 886.344,683.642 886.903,683.642 887.463,683.642 888.022,683.642 888.581,683.642 889.14,683.642 889.7,683.642 890.259,683.642 890.818,683.642 891.377,683.642 891.937,683.642 892.496,683.642 893.055,683.642 893.614,683.642 894.174,683.642 894.733,683.642 895.292,683.642 895.851,683.642 896.411,683.642 896.97,683.642 897.529,683.642 898.088,683.642 898.648,683.642 899.207,683.642 899.766,683.642 900.325,683.642 900.885,683.642 901.444,683.642 902.003,683.642 902.562,683.642 903.122,683.642 903.681,683.642 904.24,683.642 904.799,683.642 905.359,683.642 905.918,683.642 906.477,683.642 907.036,683.642 907.596,683.642 908.155,683.642 908.714,683.642 909.273,683.642 909.833,683.642 910.392,683.642 910.951,683.642 911.51,683.642 912.07,683.642 912.629,683.642 913.188,683.642 913.747,683.642 914.307,683.642 914.866,683.642 915.425,683.642 915.984,683.642 916.544,683.642 917.103,683.642 917.662,683.642 918.221,683.642 918.781,683.642 919.34,683.642 919.899,683.642 920.458,683.642 921.018,683.642 921.577,683.642 922.136,683.642 922.695,683.642 923.255,683.642 923.814,683.642 924.373,683.642 924.932,683.642 925.492,683.642 926.051,683.642 926.61,683.642 927.169,683.642 927.729,683.642 928.288,683.642 928.847,683.642 929.406,683.642 929.966,683.642 930.525,683.642 931.084,683.642 931.644,683.642 932.203,683.642 932.762,683.642 933.321,683.642 933.881,683.642 934.44,683.642 934.999,683.642 935.558,683.642 936.118,683.642 936.677,683.642 937.236,683.642 937.795,683.642 938.355,683.642 938.914,683.642 939.473,683.642 940.032,683.642 940.592,683.642 941.151,683.642 941.71,683.642 942.269,683.642 942.829,683.642 943.388,683.642 943.947,683.642 944.506,683.642 945.066,683.642 945.625,683.642 946.184,683.642 946.743,683.642 947.303,683.642 947.862,683.642 948.421,683.642 948.98,683.642 949.54,683.642 950.099,683.642 950.658,683.642 951.217,683.642 951.777,683.642 952.336,683.642 952.895,683.642 953.454,683.642 954.014,683.642 954.573,683.642 955.132,683.642 955.691,683.642 956.251,683.642 956.81,683.642 957.369,683.642 957.928,683.642 958.488,683.642 959.047,683.642 959.606,683.642 960.165,683.642 960.725,683.642 961.284,683.642 961.843,683.642 962.402,683.642 962.962,683.642 963.521,683.642 964.08,683.642 964.639,683.642 965.199,683.642 965.758,683.642 966.317,683.642 966.876,683.642 967.436,683.642 967.995,683.642 968.554,683.642 969.113,683.642 969.673,683.642 970.232,683.642 970.791,683.642 971.35,683.642 971.91,683.642 972.469,683.642 973.028,683.642 973.587,683.642 974.147,683.642 974.706,683.642 975.265,683.642 975.824,683.642 976.384,683.642 976.943,683.642 977.502,683.642 978.061,683.642 978.621,683.642 979.18,683.642 979.739,683.642 980.298,683.642 980.858,683.642 981.417,683.642 981.976,683.642 982.535,683.642 983.095,683.642 983.654,683.642 984.213,683.642 984.772,683.642 985.332,683.642 985.891,683.642 986.45,683.642 987.009,683.642 987.569,683.642 988.128,683.642 988.687,683.642 989.246,683.642 989.806,683.642 990.365,683.642 990.924,683.642 991.483,683.642 992.043,683.642 992.602,683.642 993.161,683.642 993.72,683.642 994.28,683.642 994.839,683.642 995.398,683.642 995.957,683.642 996.517,683.642 997.076,683.642 997.635,683.642 998.194,683.642 998.754,683.642 999.313,683.642 999.872,683.642 1000.43,683.642 1000.99,683.642 1001.55,683.642 1002.11,683.642 1002.67,683.642 1003.23,683.642 1003.79,683.642 1004.35,683.642 1004.91,683.642 1005.46,683.642 1006.02,683.642 1006.58,683.642 1007.14,683.642 1007.7,683.642 1008.26,683.642 1008.82,683.642 1009.38,683.642 1009.94,683.642 1010.5,683.642 1011.06,683.642 1011.62,683.642 1012.18,683.642 1012.73,683.642 1013.29,683.642 1013.85,683.642 1014.41,683.642 1014.97,683.642 1015.53,683.642 1016.09,683.642 1016.65,683.642 1017.21,683.642 1017.77,683.642 1018.33,683.642 1018.89,683.642 1019.45,683.642 1020.01,683.642 1020.56,683.642 1021.12,683.642 1021.68,683.642 1022.24,683.642 1022.8,683.642 1023.36,683.642 1023.92,683.642 1024.48,683.642 1025.04,683.642 1025.6,683.642 1026.16,683.642 1026.72,683.642 1027.28,683.642 1027.83,683.642 1028.39,683.642 1028.95,683.642 1029.51,683.642 1030.07,683.642 1030.63,683.642 1031.19,683.642 1031.75,683.642 1032.31,683.642 1032.87,683.642 1033.43,683.642 1033.99,683.642 1034.55,683.642 1035.1,683.642 1035.66,683.642 1036.22,683.642 1036.78,683.642 1037.34,683.642 1037.9,683.642 1038.46,683.642 1039.02,683.642 1039.58,683.642 1040.14,683.642 1040.7,683.642 1041.26,683.642 1041.82,683.642 1042.38,683.642 1042.93,683.642 1043.49,683.642 1044.05,683.642 1044.61,683.642 1045.17,683.642 1045.73,683.642 1046.29,683.642 1046.85,683.642 1047.41,683.642 1047.97,683.642 1048.53,683.642 1049.09,683.642 1049.65,683.642 1050.2,683.642 1050.76,683.642 1051.32,683.642 1051.88,683.642 1052.44,683.642 1053,683.642 1053.56,683.642 1054.12,683.642 1054.68,683.642 1055.24,683.642 1055.8,683.642 1056.36,683.642 1056.92,683.642 1057.48,683.642 1058.03,683.642 1058.59,683.642 1059.15,683.642 1059.71,683.642 1060.27,683.642 1060.83,683.642 1061.39,683.642 1061.95,683.642 1062.51,683.642 1063.07,683.642 1063.63,683.642 1064.19,683.642 1064.75,683.642 1065.3,683.642 1065.86,683.642 1066.42,683.642 1066.98,683.642 1067.54,683.642 1068.1,683.642 1068.66,683.642 1069.22,683.642 1069.78,683.642 1070.34,683.642 1070.9,683.642 1071.46,683.642 1072.02,683.642 1072.57,683.642 1073.13,683.642 1073.69,683.642 1074.25,683.642 1074.81,683.642 1075.37,683.642 1075.93,683.642 1076.49,683.642 1077.05,683.642 1077.61,683.642 1078.17,683.642 1078.73,683.642 1079.29,683.642 1079.85,683.642 1080.4,683.642 1080.96,683.642 1081.52,683.642 1082.08,683.642 1082.64,683.642 1083.2,683.642 1083.76,683.642 1084.32,683.642 1084.88,683.642 1085.44,683.642 1086,683.642 1086.56,683.642 1087.12,683.642 1087.67,683.642 1088.23,683.642 1088.79,683.642 1089.35,683.642 1089.91,683.642 1090.47,683.642 1091.03,683.642 1091.59,683.642 1092.15,683.642 1092.71,683.642 1093.27,683.642 1093.83,683.642 1094.39,683.642 1094.94,683.642 1095.5,683.642 1096.06,683.642 1096.62,683.642 1097.18,683.642 1097.74,683.642 1098.3,683.642 1098.86,683.642 1099.42,683.642 1099.98,683.642 1100.54,683.642 1101.1,683.642 1101.66,683.642 1102.22,683.642 1102.77,683.642 1103.33,683.642 1103.89,683.642 1104.45,683.642 1105.01,683.642 1105.57,683.642 1106.13,683.642 1106.69,683.642 1107.25,683.642 1107.81,683.642 1108.37,683.642 1108.93,683.642 1109.49,683.642 1110.04,683.642 1110.6,683.642 1111.16,683.642 1111.72,683.642 1112.28,683.642 1112.84,683.642 1113.4,683.642 1113.96,683.642 1114.52,683.642 1115.08,683.642 1115.64,683.642 1116.2,683.642 1116.76,683.642 1117.31,683.642 1117.87,683.642 1118.43,683.642 1118.99,683.642 1119.55,683.642 1120.11,683.642 1120.67,683.642 1121.23,683.642 1121.79,683.642 1122.35,683.642 1122.91,683.642 1123.47,683.642 1124.03,683.642 1124.59,683.642 1125.14,683.642 1125.7,683.642 1126.26,683.642 1126.82,683.642 1127.38,683.642 1127.94,683.642 1128.5,683.642 1129.06,683.642 1129.62,683.642 1130.18,683.642 1130.74,683.642 1131.3,683.642 1131.86,683.642 1132.41,683.642 1132.97,683.642 1133.53,683.642 1134.09,683.642 1134.65,683.642 1135.21,683.642 1135.77,683.642 1136.33,683.642 1136.89,683.642 1137.45,683.642 1138.01,683.642 1138.57,683.642 1139.13,683.642 1139.68,683.642 1140.24,683.642 1140.8,683.642 1141.36,683.642 1141.92,683.642 1142.48,683.642 1143.04,683.642 1143.6,683.642 1144.16,683.642 1144.72,683.642 1145.28,683.642 1145.84,683.642 1146.4,683.642 1146.96,683.642 1147.51,683.642 1148.07,683.642 1148.63,683.642 1149.19,683.642 1149.75,683.642 1150.31,683.642 1150.87,683.642 1151.43,683.642 1151.99,683.642 1152.55,683.642 1153.11,683.642 1153.67,683.642 1154.23,683.642 1154.78,683.642 1155.34,683.642 1155.9,683.642 1156.46,683.642 1157.02,683.642 1157.58,683.642 1158.14,683.642 1158.7,683.642 1159.26,683.642 1159.82,683.642 1160.38,683.642 1160.94,683.642 1161.5,683.642 1162.05,683.642 1162.61,683.642 1163.17,683.642 1163.73,683.642 1164.29,683.642 1164.85,683.642 1165.41,683.642 1165.97,683.642 1166.53,683.642 1167.09,683.642 1167.65,683.642 1168.21,683.642 1168.77,683.642 1169.33,683.642 1169.88,683.642 1170.44,683.642 1171,683.642 1171.56,683.642 1172.12,683.642 1172.68,683.642 1173.24,683.642 1173.8,683.642 1174.36,683.642 1174.92,683.642 1175.48,683.642 1176.04,683.642 1176.6,683.642 1177.15,683.642 1177.71,683.642 1178.27,683.642 1178.83,683.642 1179.39,683.642 1179.95,683.642 1180.51,683.642 1181.07,683.642 1181.63,683.642 1182.19,683.642 1182.75,683.642 1183.31,683.642 1183.87,683.642 1184.43,683.642 1184.98,683.642 1185.54,683.642 1186.1,683.642 1186.66,683.642 1187.22,683.642 1187.78,683.642 1188.34,683.642 1188.9,683.642 1189.46,683.642 1190.02,683.642 1190.58,683.642 1191.14,683.642 1191.7,683.642 1192.25,683.642 1192.81,683.642 1193.37,683.642 1193.93,683.642 1194.49,683.642 1195.05,683.642 1195.61,683.642 1196.17,683.642 1196.73,683.642 1197.29,683.642 1197.85,683.642 1198.41,683.642 1198.97,683.642 1199.52,683.642 1200.08,683.642 1200.64,683.642 1201.2,683.642 1201.76,683.642 1202.32,683.642 1202.88,683.642 1203.44,683.642 1204,683.642 1204.56,683.642 1205.12,683.642 1205.68,683.642 1206.24,683.642 1206.8,683.642 1207.35,683.642 1207.91,683.642 1208.47,683.642 1209.03,683.642 1209.59,683.642 1210.15,683.642 1210.71,683.642 1211.27,683.642 1211.83,683.642 1212.39,683.642 1212.95,683.642 1213.51,683.642 1214.07,683.642 1214.62,683.642 1215.18,683.642 1215.74,683.642 1216.3,683.642 1216.86,683.642 1217.42,683.642 1217.98,683.642 1218.54,683.642 1219.1,683.642 1219.66,683.642 1220.22,683.642 1220.78,683.642 1221.34,683.642 1221.89,683.642 1222.45,683.642 1223.01,683.642 1223.57,683.642 1224.13,683.642 1224.69,683.642 1225.25,683.642 1225.81,683.642 1226.37,683.642 1226.93,683.642 1227.49,683.642 1228.05,683.642 1228.61,683.642 1229.17,683.642 1229.72,683.642 1230.28,683.642 1230.84,683.642 1231.4,683.642 1231.96,683.642 1232.52,683.642 1233.08,683.642 1233.64,683.642 1234.2,683.642 1234.76,683.642 1235.32,683.642 1235.88,683.642 1236.44,683.642 1236.99,683.642 1237.55,683.642 1238.11,683.642 1238.67,683.642 1239.23,683.642 1239.79,683.642 1240.35,683.642 1240.91,683.642 1241.47,683.642 1242.03,683.642 1242.59,683.642 1243.15,683.642 1243.71,683.642 1244.26,683.642 1244.82,683.642 1245.38,683.642 1245.94,683.642 1246.5,683.642 1247.06,683.642 1247.62,683.642 1248.18,683.642 1248.74,683.642 1249.3,683.642 1249.86,683.642 1250.42,683.642 1250.98,683.642 1251.54,683.642 1252.09,683.642 1252.65,683.642 1253.21,683.642 1253.77,683.642 1254.33,683.642 1254.89,683.642 1255.45,683.642 1256.01,683.642 1256.57,683.642 1257.13,683.642 1257.69,683.642 1258.25,683.642 1258.81,683.642 1259.36,683.642 1259.92,683.642 1260.48,683.642 1261.04,683.642 1261.6,683.642 1262.16,683.642 1262.72,683.642 1263.28,683.642 1263.84,683.642 1264.4,683.642 1264.96,683.642 1265.52,683.642 1266.08,683.642 1266.63,683.642 1267.19,683.642 1267.75,683.642 1268.31,683.642 1268.87,683.642 1269.43,683.642 1269.99,683.642 1270.55,683.642 1271.11,683.642 1271.67,683.642 1272.23,683.642 1272.79,683.642 1273.35,683.642 1273.91,683.642 1274.46,683.642 1275.02,683.642 1275.58,683.642 1276.14,683.642 1276.7,683.642 1277.26,683.642 1277.82,683.642 1278.38,683.642 1278.94,683.642 1279.5,683.642 1280.06,683.642 1280.62,683.642 1281.18,683.642 1281.73,683.642 1282.29,683.642 1282.85,683.642 1283.41,683.642 1283.97,683.642 1284.53,683.642 1285.09,683.642 1285.65,683.642 1286.21,683.642 1286.77,683.642 1287.33,683.642 1287.89,683.642 1288.45,683.642 1289,683.642 1289.56,683.642 1290.12,683.642 1290.68,683.642 1291.24,683.642 1291.8,683.642 1292.36,683.642 1292.92,683.642 1293.48,683.642 1294.04,683.642 1294.6,683.642 1295.16,683.642 1295.72,683.642 1296.28,683.642 1296.83,683.642 1297.39,683.642 1297.95,683.642 1298.51,683.642 1299.07,683.642 1299.63,683.642 1300.19,683.642 1300.75,683.642 1301.31,683.642 1301.87,683.642 1302.43,683.642 1302.99,683.642 1303.55,683.642 1304.1,683.642 1304.66,683.642 1305.22,683.642 1305.78,683.642 1306.34,683.642 1306.9,683.642 1307.46,683.642 1308.02,683.642 1308.58,683.642 1309.14,683.642 1309.7,683.642 1310.26,683.642 1310.82,683.642 1311.38,683.642 1311.93,683.642 1312.49,683.642 1313.05,683.642 1313.61,683.642 1314.17,683.642 1314.73,683.642 1315.29,683.642 1315.85,683.642 1316.41,683.642 1316.97,683.642 1317.53,683.642 1318.09,683.642 1318.65,683.642 1319.2,683.642 1319.76,683.642 1320.32,683.642 1320.88,683.642 1321.44,683.642 1322,683.642 1322.56,683.642 1323.12,683.642 1323.68,683.642 1324.24,683.642 1324.8,683.642 1325.36,683.642 1325.92,683.642 1326.47,683.642 1327.03,683.642 1327.59,683.642 1328.15,683.642 1328.71,683.642 1329.27,683.642 1329.83,683.642 1330.39,683.642 1330.95,683.642 1331.51,683.642 1332.07,683.642 1332.63,683.642 1333.19,683.642 1333.75,683.642 1334.3,683.642 1334.86,683.642 1335.42,683.642 1335.98,683.642 1336.54,683.642 1337.1,683.642 1337.66,683.642 1338.22,683.642 1338.78,683.642 1339.34,683.642 1339.9,683.642 1340.46,683.642 1341.02,683.642 1341.57,683.642 1342.13,683.642 1342.69,683.642 1343.25,683.642 1343.81,683.642 1344.37,683.642 1344.93,683.642 1345.49,683.642 1346.05,683.642 1346.61,683.642 1347.17,683.642 1347.73,683.642 1348.29,683.642 1348.84,683.642 1349.4,683.642 1349.96,683.642 1350.52,683.642 1351.08,683.642 1351.64,683.642 1352.2,683.642 1352.76,683.642 1353.32,683.642 1353.88,683.642 1354.44,683.642 1355,683.642 1355.56,683.642 1356.12,683.642 1356.67,683.642 1357.23,683.642 1357.79,683.642 1358.35,683.642 1358.91,683.642 1359.47,683.642 1360.03,683.642 1360.59,683.642 1361.15,683.642 1361.71,683.642 1362.27,683.642 1362.83,683.642 1363.39,683.642 1363.94,683.642 1364.5,683.642 1365.06,683.642 1365.62,683.642 1366.18,683.642 1366.74,683.642 1367.3,683.642 1367.86,683.642 1368.42,683.642 1368.98,683.642 1369.54,683.642 1370.1,683.642 1370.66,683.642 1371.21,683.642 1371.77,683.642 1372.33,683.642 1372.89,683.642 1373.45,683.642 1374.01,683.642 1374.57,683.642 1375.13,683.642 1375.69,683.642 1376.25,683.642 1376.81,683.642 1377.37,683.642 1377.93,683.642 1378.49,683.642 1379.04,683.642 1379.6,683.642 1380.16,683.642 1380.72,683.642 1381.28,683.642 1381.84,683.642 1382.4,683.642 1382.96,683.642 1383.52,683.642 1384.08,683.642 1384.64,683.642 1385.2,683.642 1385.76,683.642 1386.31,683.642 1386.87,683.642 1387.43,683.642 1387.99,683.642 1388.55,683.642 1389.11,683.642 1389.67,683.642 1390.23,683.642 1390.79,683.642 1391.35,683.642 1391.91,683.642 1392.47,683.642 1393.03,683.642 1393.58,683.642 1394.14,683.642 1394.7,683.642 1395.26,683.642 1395.82,683.642 1396.38,683.642 1396.94,683.642 1397.5,683.642 1398.06,683.642 1398.62,683.642 1399.18,683.642 1399.74,683.642 1400.3,683.642 1400.86,683.642 1401.41,683.642 1401.97,683.642 1402.53,683.642 1403.09,683.642 1403.65,683.642 1404.21,683.642 1404.77,683.642 1405.33,683.642 1405.89,683.642 1406.45,683.642 1407.01,683.642 1407.57,683.642 1408.13,683.642 1408.68,683.642 1409.24,683.642 1409.8,683.642 1410.36,683.642 1410.92,683.642 1411.48,683.642 1412.04,683.642 1412.6,683.642 1413.16,683.642 1413.72,683.642 1414.28,683.642 1414.84,683.642 1415.4,683.642 1415.95,683.642 1416.51,683.642 1417.07,683.642 1417.63,683.642 1418.19,683.642 1418.75,683.642 1419.31,683.642 1419.87,683.642 1420.43,683.642 1420.99,683.642 1421.55,683.642 1422.11,683.642 1422.67,683.642 1423.23,683.642 1423.78,683.642 1424.34,683.642 1424.9,683.642 1425.46,683.642 1426.02,683.642 1426.58,683.642 1427.14,683.642 1427.7,683.642 1428.26,683.642 1428.82,683.642 1429.38,683.642 1429.94,683.642 1430.5,683.642 1431.05,683.642 1431.61,683.642 1432.17,683.642 1432.73,683.642 1433.29,683.642 1433.85,683.642 1434.41,683.642 1434.97,683.642 1435.53,683.642 1436.09,683.642 1436.65,683.642 1437.21,683.642 1437.77,683.642 1438.33,683.642 1438.88,683.642 1439.44,683.642 1440,683.642 1440.56,683.642 1441.12,683.642 1441.68,683.642 1442.24,683.642 1442.8,683.642 1443.36,683.642 1443.92,683.642 1444.48,683.642 1445.04,683.642 1445.6,683.642 1446.15,683.642 1446.71,683.642 1447.27,683.642 1447.83,683.642 1448.39,683.642 1448.95,683.642 1449.51,683.642 1450.07,683.642 1450.63,683.642 1451.19,683.642 1451.75,683.642 1452.31,683.642 1452.87,683.642 1453.42,683.642 1453.98,683.642 1454.54,683.642 1455.1,683.642 1455.66,683.642 1456.22,683.642 1456.78,683.642 1457.34,683.642 1457.9,683.642 1458.46,683.642 1459.02,683.642 1459.58,683.642 1460.14,683.642 1460.7,683.642 1461.25,683.642 1461.81,683.642 1462.37,683.642 1462.93,683.642 1463.49,683.642 1464.05,683.642 1464.61,683.642 1465.17,683.642 1465.73,683.642 1466.29,683.642 1466.85,683.642 1467.41,683.642 1467.97,683.642 1468.52,683.642 1469.08,683.642 1469.64,683.642 1470.2,683.642 1470.76,683.642 1471.32,683.642 1471.88,683.642 1472.44,683.642 1473,683.642 1473.56,683.642 1474.12,683.642 1474.68,683.642 1475.24,683.642 1475.79,683.642 1476.35,683.642 1476.91,683.642 1477.47,683.642 1478.03,683.642 1478.59,683.642 1479.15,683.642 1479.71,683.642 1480.27,683.642 1480.83,683.642 1481.39,683.642 1481.95,683.642 1482.51,683.642 1483.07,683.642 1483.62,683.642 1484.18,683.642 1484.74,683.642 1485.3,683.642 1485.86,683.642 1486.42,683.642 1486.98,683.642 1487.54,683.642 1488.1,683.642 1488.66,683.642 1489.22,683.642 1489.78,683.642 1490.34,683.642 1490.89,683.642 1491.45,683.642 1492.01,683.642 1492.57,683.642 1493.13,683.642 1493.69,683.642 1494.25,683.642 1494.81,683.642 1495.37,683.642 1495.93,683.642 1496.49,683.642 1497.05,683.642 1497.61,683.642 1498.16,683.642 1498.72,683.642 1499.28,683.642 1499.84,683.642 1500.4,683.642 1500.96,683.642 1501.52,683.642 1502.08,683.642 1502.64,683.642 1503.2,683.642 1503.76,683.642 1504.32,683.642 1504.88,683.642 1505.44,683.642 1505.99,683.642 1506.55,683.642 1507.11,683.642 1507.67,683.642 1508.23,683.642 1508.79,683.642 1509.35,683.642 1509.91,683.642 1510.47,683.642 1511.03,683.642 1511.59,683.642 1512.15,683.642 1512.71,683.642 1513.26,683.642 1513.82,683.642 1514.38,683.642 1514.94,683.642 1515.5,683.642 1516.06,683.642 1516.62,683.642 1517.18,683.642 1517.74,683.642 1518.3,683.642 1518.86,683.642 1519.42,683.642 1519.98,683.642 1520.53,683.642 1521.09,683.642 1521.65,683.642 1522.21,683.642 1522.77,683.642 1523.33,683.642 1523.89,683.642 1524.45,683.642 1525.01,683.642 1525.57,683.642 1526.13,683.642 1526.69,683.642 1527.25,683.642 1527.81,683.642 1528.36,683.642 1528.92,683.642 1529.48,683.642 1530.04,683.642 1530.6,683.642 1531.16,683.642 1531.72,683.642 1532.28,683.642 1532.84,683.642 1533.4,683.642 1533.96,683.642 1534.52,683.642 1535.08,683.642 1535.63,683.642 1536.19,683.642 1536.75,683.642 1537.31,683.642 1537.87,683.642 1538.43,683.642 1538.99,683.642 1539.55,683.642 1540.11,683.642 1540.67,683.642 1541.23,683.642 1541.79,683.642 1542.35,683.642 1542.9,683.642 1543.46,683.642 1544.02,683.642 1544.58,683.642 1545.14,683.642 1545.7,683.642 1546.26,683.642 1546.82,683.642 1547.38,683.642 1547.94,683.642 1548.5,683.642 1549.06,683.642 1549.62,683.642 1550.18,683.642 1550.73,683.642 1551.29,683.642 1551.85,683.642 1552.41,683.642 1552.97,683.642 1553.53,683.642 1554.09,683.642 1554.65,683.642 1555.21,683.642 1555.77,683.642 1556.33,683.642 1556.89,683.642 1557.45,683.642 1558,683.642 1558.56,683.642 1559.12,683.642 1559.68,683.642 1560.24,683.642 1560.8,683.642 1561.36,683.642 1561.92,683.642 1562.48,683.642 1563.04,683.642 1563.6,683.642 1564.16,683.642 1564.72,683.642 1565.28,683.642 1565.83,683.642 1566.39,683.642 1566.95,683.642 1567.51,683.642 1568.07,683.642 1568.63,683.642 1569.19,683.642 1569.75,683.642 1570.31,683.642 1570.87,683.642 1571.43,683.642 1571.99,683.642 1572.55,683.642 1573.1,683.642 1573.66,683.642 1574.22,683.642 1574.78,683.642 1575.34,683.642 1575.9,683.642 1576.46,683.642 1577.02,683.642 1577.58,683.642 1578.14,683.642 1578.7,683.642 1579.26,683.642 1579.82,683.642 1580.37,683.642 1580.93,683.642 1581.49,683.642 1582.05,683.642 1582.61,683.642 1583.17,683.642 1583.73,683.642 1584.29,683.642 1584.85,683.642 1585.41,683.642 1585.97,683.642 1586.53,683.642 1587.09,683.642 1587.65,683.642 1588.2,683.642 1588.76,683.642 1589.32,683.642 1589.88,683.642 1590.44,683.642 1591,683.642 1591.56,683.642 1592.12,683.642 1592.68,683.642 1593.24,683.642 1593.8,683.642 1594.36,683.642 1594.92,683.642 1595.47,683.642 1596.03,683.642 1596.59,683.642 1597.15,683.642 1597.71,683.642 1598.27,683.642 1598.83,683.642 1599.39,683.642 1599.95,683.642 1600.51,683.642 1601.07,683.642 1601.63,683.642 1602.19,683.642 1602.74,683.642 1603.3,683.642 1603.86,683.642 1604.42,683.642 1604.98,683.642 1605.54,683.642 1606.1,683.642 1606.66,683.642 1607.22,683.642 1607.78,683.642 1608.34,683.642 1608.9,683.642 1609.46,683.642 1610.02,683.642 1610.57,683.642 1611.13,683.642 1611.69,683.642 1612.25,683.642 1612.81,683.642 1613.37,683.642 1613.93,683.642 1614.49,683.642 1615.05,683.642 1615.61,683.642 1616.17,683.642 1616.73,683.642 1617.29,683.642 1617.84,683.642 1618.4,683.642 1618.96,683.642 1619.52,683.642 1620.08,683.642 1620.64,683.642 1621.2,683.642 1621.76,683.642 1622.32,683.642 1622.88,683.642 1623.44,683.642 1624,683.642 1624.56,683.642 1625.11,683.642 1625.67,683.642 1626.23,683.642 1626.79,683.642 1627.35,683.642 1627.91,683.642 1628.47,683.642 1629.03,683.642 1629.59,683.642 1630.15,683.642 1630.71,683.642 1631.27,683.642 1631.83,683.642 1632.39,683.642 1632.94,683.642 1633.5,683.642 1634.06,683.642 1634.62,683.642 1635.18,683.642 1635.74,683.642 1636.3,683.642 1636.86,683.642 1637.42,683.642 1637.98,683.642 1638.54,683.642 1639.1,683.642 1639.66,683.642 1640.21,683.642 1640.77,683.642 1641.33,683.642 1641.89,683.642 1642.45,683.642 1643.01,683.642 1643.57,683.642 1644.13,683.642 1644.69,683.642 1645.25,683.642 1645.81,683.642 1646.37,683.642 1646.93,683.642 1647.48,683.642 1648.04,683.642 1648.6,683.642 1649.16,683.642 1649.72,683.642 1650.28,683.642 1650.84,683.642 1651.4,683.642 1651.96,683.642 1652.52,683.642 1653.08,683.642 1653.64,683.642 1654.2,683.642 1654.76,683.642 1655.31,683.642 1655.87,683.642 1656.43,683.642 1656.99,683.642 1657.55,683.642 1658.11,683.642 1658.67,683.642 1659.23,683.642 1659.79,683.642 1660.35,683.642 1660.91,683.642 1661.47,683.642 1662.03,683.642 1662.58,683.642 1663.14,683.642 1663.7,683.642 1664.26,683.642 1664.82,683.642 1665.38,683.642 1665.94,683.642 1666.5,683.642 1667.06,683.642 1667.62,683.642 1668.18,683.642 1668.74,683.642 1669.3,683.642 1669.85,683.642 1670.41,683.642 1670.97,683.642 1671.53,683.642 1672.09,683.642 1672.65,683.642 1673.21,683.642 1673.77,683.642 1674.33,683.642 1674.89,683.642 1675.45,683.642 1676.01,683.642 1676.57,683.642 1677.13,683.642 1677.68,683.642 1678.24,683.642 1678.8,683.642 1679.36,683.642 1679.92,683.642 1680.48,683.642 1681.04,683.642 1681.6,683.642 1682.16,683.642 1682.72,683.642 1683.28,683.642 1683.84,683.642 1684.4,683.642 1684.95,683.642 1685.51,683.642 1686.07,683.642 1686.63,683.642 1687.19,683.642 1687.75,683.642 1688.31,683.642 1688.87,683.642 1689.43,683.642 1689.99,683.642 1690.55,683.642 1691.11,683.642 1691.67,683.642 1692.23,683.642 1692.78,683.642 1693.34,683.642 1693.9,683.642 1694.46,683.642 1695.02,683.642 1695.58,683.642 1696.14,683.642 1696.7,683.642 1697.26,683.642 1697.82,683.642 1698.38,683.642 1698.94,683.642 1699.5,683.642 1700.05,683.642 1700.61,683.642 1701.17,683.642 1701.73,683.642 1702.29,683.642 1702.85,683.642 1703.41,683.642 1703.97,683.642 1704.53,683.642 1705.09,683.642 1705.65,683.642 1706.21,683.642 1706.77,683.642 1707.32,683.642 1707.88,683.642 1708.44,683.642 1709,683.642 1709.56,683.642 1710.12,683.642 1710.68,683.642 1711.24,683.642 1711.8,683.642 1712.36,683.642 1712.92,683.642 1713.48,683.642 1714.04,683.642 1714.6,683.642 1715.15,683.642 1715.71,683.642 1716.27,683.642 1716.83,683.642 1717.39,683.642 1717.95,683.642 1718.51,683.642 1719.07,683.642 1719.63,683.642 1720.19,683.642 1720.75,683.642 1721.31,683.642 1721.87,683.642 1722.42,683.642 1722.98,683.642 1723.54,683.642 1724.1,683.642 1724.66,683.642 1725.22,683.642 1725.78,683.642 1726.34,683.642 1726.9,683.642 1727.46,683.642 1728.02,683.642 1728.58,683.642 1729.14,683.642 1729.69,683.642 1730.25,683.642 1730.81,683.642 1731.37,683.642 1731.93,683.642 1732.49,683.642 1733.05,683.642 1733.61,683.642 1734.17,683.642 1734.73,683.642 1735.29,683.642 1735.85,683.642 1736.41,683.642 1736.97,683.642 1737.52,683.642 1738.08,683.642 1738.64,683.642 1739.2,683.642 1739.76,683.642 1740.32,683.642 1740.88,683.642 1741.44,683.642 1742,683.642 1742.56,683.642 1743.12,683.642 1743.68,683.642 1744.24,683.642 1744.79,683.642 1745.35,683.642 1745.91,683.642 1746.47,683.642 1747.03,683.642 1747.59,683.642 1748.15,683.642 1748.71,683.642 1749.27,683.642 1749.83,683.642 1750.39,683.642 1750.95,683.642 1751.51,683.642 1752.06,683.642 1752.62,683.642 1753.18,683.642 1753.74,683.642 1754.3,683.642 1754.86,683.642 1755.42,683.642 1755.98,683.642 1756.54,683.642 1757.1,683.642 1757.66,683.642 1758.22,683.642 1758.78,683.642 1759.34,683.642 1759.89,683.642 1760.45,683.642 1761.01,683.642 1761.57,683.642 1762.13,683.642 1762.69,683.642 1763.25,683.642 1763.81,683.642 1764.37,683.642 1764.93,683.642 1765.49,683.642 1766.05,683.642 1766.61,683.642 1767.16,683.642 1767.72,683.642 1768.28,683.642 1768.84,683.642 1769.4,683.642 1769.96,683.642 1770.52,683.642 1771.08,683.642 1771.64,683.642 1772.2,683.642 1772.76,683.642 1773.32,683.642 1773.88,683.642 1774.43,683.642 1774.99,683.642 1775.55,683.642 1776.11,683.642 1776.67,683.642 1777.23,683.642 1777.79,683.642 1778.35,683.642 1778.91,683.642 1779.47,683.642 1780.03,683.642 1780.59,683.642 1781.15,683.642 1781.71,683.642 1782.26,683.642 1782.82,683.642 1783.38,683.642 1783.94,683.642 1784.5,683.642 1785.06,683.642 1785.62,683.642 1786.18,683.642 1786.74,683.642 1787.3,683.642 1787.86,683.642 1788.42,683.642 1788.98,683.642 1789.53,683.642 1790.09,683.642 1790.65,683.642 1791.21,683.642 1791.77,683.642 1792.33,683.642 1792.89,683.642 1793.45,683.642 1794.01,683.642 1794.57,683.642 1795.13,683.642 1795.69,683.642 1796.25,683.642 1796.8,683.642 1797.36,683.642 1797.92,683.642 1798.48,683.642 1799.04,683.642 1799.6,683.642 1800.16,683.642 1800.72,683.642 1801.28,683.642 1801.84,683.642 1802.4,683.642 1802.96,683.642 1803.52,683.642 1804.08,683.642 1804.63,683.642 1805.19,683.642 1805.75,683.642 1806.31,683.642 1806.87,683.642 1807.43,683.642 1807.99,683.642 1808.55,683.642 1809.11,683.642 1809.67,683.642 1810.23,683.642 1810.79,683.642 1811.35,683.642 1811.9,683.642 1812.46,683.642 1813.02,683.642 1813.58,683.642 1814.14,683.642 1814.7,683.642 1815.26,683.642 1815.82,683.642 1816.38,683.642 1816.94,683.642 1817.5,683.642 1818.06,683.642 1818.62,683.642 1819.18,683.642 1819.73,683.642 1820.29,683.642 1820.85,683.642 1821.41,683.642 1821.97,683.642 1822.53,683.642 1823.09,683.642 1823.65,683.642 1824.21,683.642 1824.77,683.642 1825.33,683.642 1825.89,683.642 1826.45,683.642 1827,683.642 1827.56,683.642 1828.12,683.642 1828.68,683.642 1829.24,683.642 1829.8,683.642 1830.36,683.642 1830.92,683.642 1831.48,683.642 1832.04,683.642 1832.6,683.642 1833.16,683.642 1833.72,683.642 1834.27,683.642 1834.83,683.642 1835.39,683.642 1835.95,683.642 1836.51,683.642 1837.07,683.642 1837.63,683.642 1838.19,683.642 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.018643043891115 ± 0.02570544492274631\nProjected Energy: -4.015373064557642 ± (0.004807543276260873, 0.0048232033891020265)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.24028</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">4.0426e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">4.6377e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.6801e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.577e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.645e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4608e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133637\n -0.7590191922770941\n  0.13584182219622143\n  0.15789998694607377\n  0.8767114411781449\n  1.5305929970973313\n  1.5835732611867357\n  3.072870330325858\n  3.1256726539518374\n  4.862107221562172\n  6.260694850380599\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{AbstractDVec}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
