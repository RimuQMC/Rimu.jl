var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip840\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip841\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip842\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.08 2211.02,1003.08 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.312 2211.02,745.312 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.548 2211.02,487.548 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.784 2211.02,229.784 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.08 423.181,1003.08 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.312 423.181,745.312 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.548 423.181,487.548 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.784 423.181,229.784 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M290.043 1016.42 L306.363 1016.42 L306.363 1020.36 L284.418 1020.36 L284.418 1016.42 Q287.08 1013.67 291.664 1009.04 Q296.27 1004.38 297.451 1003.04 Q299.696 1000.52 300.576 998.781 Q301.478 997.022 301.478 995.332 Q301.478 992.578 299.534 990.842 Q297.613 989.105 294.511 989.105 Q292.312 989.105 289.858 989.869 Q287.427 990.633 284.65 992.184 L284.65 987.462 Q287.474 986.328 289.927 985.749 Q292.381 985.17 294.418 985.17 Q299.789 985.17 302.983 987.855 Q306.177 990.541 306.177 995.031 Q306.177 997.161 305.367 999.082 Q304.58 1000.98 302.474 1003.57 Q301.895 1004.24 298.793 1007.46 Q295.691 1010.66 290.043 1016.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M316.224 985.795 L334.58 985.795 L334.58 989.73 L320.506 989.73 L320.506 998.203 Q321.524 997.855 322.543 997.693 Q323.562 997.508 324.58 997.508 Q330.367 997.508 333.747 1000.68 Q337.126 1003.85 337.126 1009.27 Q337.126 1014.85 333.654 1017.95 Q330.182 1021.03 323.862 1021.03 Q321.687 1021.03 319.418 1020.66 Q317.173 1020.29 314.765 1019.55 L314.765 1014.85 Q316.849 1015.98 319.071 1016.54 Q321.293 1017.09 323.77 1017.09 Q327.774 1017.09 330.112 1014.98 Q332.45 1012.88 332.45 1009.27 Q332.45 1005.66 330.112 1003.55 Q327.774 1001.44 323.77 1001.44 Q321.895 1001.44 320.02 1001.86 Q318.168 1002.28 316.224 1003.16 L316.224 985.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M356.339 988.874 Q352.728 988.874 350.899 992.439 Q349.094 995.98 349.094 1003.11 Q349.094 1010.22 350.899 1013.78 Q352.728 1017.32 356.339 1017.32 Q359.973 1017.32 361.779 1013.78 Q363.608 1010.22 363.608 1003.11 Q363.608 995.98 361.779 992.439 Q359.973 988.874 356.339 988.874 M356.339 985.17 Q362.149 985.17 365.205 989.777 Q368.284 994.36 368.284 1003.11 Q368.284 1011.84 365.205 1016.44 Q362.149 1021.03 356.339 1021.03 Q350.529 1021.03 347.45 1016.44 Q344.395 1011.84 344.395 1003.11 Q344.395 994.36 347.45 989.777 Q350.529 985.17 356.339 985.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M286.062 728.032 L304.418 728.032 L304.418 731.967 L290.344 731.967 L290.344 740.439 Q291.363 740.092 292.381 739.93 Q293.4 739.744 294.418 739.744 Q300.205 739.744 303.585 742.916 Q306.964 746.087 306.964 751.504 Q306.964 757.082 303.492 760.184 Q300.02 763.263 293.701 763.263 Q291.525 763.263 289.256 762.892 Q287.011 762.522 284.603 761.781 L284.603 757.082 Q286.687 758.217 288.909 758.772 Q291.131 759.328 293.608 759.328 Q297.613 759.328 299.951 757.221 Q302.288 755.115 302.288 751.504 Q302.288 747.893 299.951 745.786 Q297.613 743.68 293.608 743.68 Q291.733 743.68 289.858 744.096 Q288.006 744.513 286.062 745.393 L286.062 728.032 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M326.177 731.11 Q322.566 731.11 320.737 734.675 Q318.932 738.217 318.932 745.346 Q318.932 752.453 320.737 756.017 Q322.566 759.559 326.177 759.559 Q329.811 759.559 331.617 756.017 Q333.446 752.453 333.446 745.346 Q333.446 738.217 331.617 734.675 Q329.811 731.11 326.177 731.11 M326.177 727.407 Q331.987 727.407 335.043 732.013 Q338.122 736.596 338.122 745.346 Q338.122 754.073 335.043 758.679 Q331.987 763.263 326.177 763.263 Q320.367 763.263 317.288 758.679 Q314.233 754.073 314.233 745.346 Q314.233 736.596 317.288 732.013 Q320.367 727.407 326.177 727.407 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M356.339 731.11 Q352.728 731.11 350.899 734.675 Q349.094 738.217 349.094 745.346 Q349.094 752.453 350.899 756.017 Q352.728 759.559 356.339 759.559 Q359.973 759.559 361.779 756.017 Q363.608 752.453 363.608 745.346 Q363.608 738.217 361.779 734.675 Q359.973 731.11 356.339 731.11 M356.339 727.407 Q362.149 727.407 365.205 732.013 Q368.284 736.596 368.284 745.346 Q368.284 754.073 365.205 758.679 Q362.149 763.263 356.339 763.263 Q350.529 763.263 347.45 758.679 Q344.395 754.073 344.395 745.346 Q344.395 736.596 347.45 732.013 Q350.529 727.407 356.339 727.407 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M284.835 470.268 L307.057 470.268 L307.057 472.258 L294.511 504.828 L289.627 504.828 L301.432 474.203 L284.835 474.203 L284.835 470.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M316.224 470.268 L334.58 470.268 L334.58 474.203 L320.506 474.203 L320.506 482.675 Q321.524 482.328 322.543 482.166 Q323.562 481.981 324.58 481.981 Q330.367 481.981 333.747 485.152 Q337.126 488.323 337.126 493.74 Q337.126 499.318 333.654 502.42 Q330.182 505.499 323.862 505.499 Q321.687 505.499 319.418 505.129 Q317.173 504.758 314.765 504.018 L314.765 499.318 Q316.849 500.453 319.071 501.008 Q321.293 501.564 323.77 501.564 Q327.774 501.564 330.112 499.457 Q332.45 497.351 332.45 493.74 Q332.45 490.129 330.112 488.022 Q327.774 485.916 323.77 485.916 Q321.895 485.916 320.02 486.332 Q318.168 486.749 316.224 487.629 L316.224 470.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M356.339 473.346 Q352.728 473.346 350.899 476.911 Q349.094 480.453 349.094 487.582 Q349.094 494.689 350.899 498.254 Q352.728 501.795 356.339 501.795 Q359.973 501.795 361.779 498.254 Q363.608 494.689 363.608 487.582 Q363.608 480.453 361.779 476.911 Q359.973 473.346 356.339 473.346 M356.339 469.643 Q362.149 469.643 365.205 474.249 Q368.284 478.832 368.284 487.582 Q368.284 496.309 365.205 500.916 Q362.149 505.499 356.339 505.499 Q350.529 505.499 347.45 500.916 Q344.395 496.309 344.395 487.582 Q344.395 478.832 347.45 474.249 Q350.529 469.643 356.339 469.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M256.664 243.129 L264.303 243.129 L264.303 216.763 L255.992 218.43 L255.992 214.171 L264.256 212.504 L268.932 212.504 L268.932 243.129 L276.571 243.129 L276.571 247.064 L256.664 247.064 L256.664 243.129 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M296.015 215.583 Q292.404 215.583 290.576 219.147 Q288.77 222.689 288.77 229.819 Q288.77 236.925 290.576 240.49 Q292.404 244.031 296.015 244.031 Q299.65 244.031 301.455 240.49 Q303.284 236.925 303.284 229.819 Q303.284 222.689 301.455 219.147 Q299.65 215.583 296.015 215.583 M296.015 211.879 Q301.826 211.879 304.881 216.485 Q307.96 221.069 307.96 229.819 Q307.96 238.545 304.881 243.152 Q301.826 247.735 296.015 247.735 Q290.205 247.735 287.127 243.152 Q284.071 238.545 284.071 229.819 Q284.071 221.069 287.127 216.485 Q290.205 211.879 296.015 211.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M326.177 215.583 Q322.566 215.583 320.737 219.147 Q318.932 222.689 318.932 229.819 Q318.932 236.925 320.737 240.49 Q322.566 244.031 326.177 244.031 Q329.811 244.031 331.617 240.49 Q333.446 236.925 333.446 229.819 Q333.446 222.689 331.617 219.147 Q329.811 215.583 326.177 215.583 M326.177 211.879 Q331.987 211.879 335.043 216.485 Q338.122 221.069 338.122 229.819 Q338.122 238.545 335.043 243.152 Q331.987 247.735 326.177 247.735 Q320.367 247.735 317.288 243.152 Q314.233 238.545 314.233 229.819 Q314.233 221.069 317.288 216.485 Q320.367 211.879 326.177 211.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M356.339 215.583 Q352.728 215.583 350.899 219.147 Q349.094 222.689 349.094 229.819 Q349.094 236.925 350.899 240.49 Q352.728 244.031 356.339 244.031 Q359.973 244.031 361.779 240.49 Q363.608 236.925 363.608 229.819 Q363.608 222.689 361.779 219.147 Q359.973 215.583 356.339 215.583 M356.339 211.879 Q362.149 211.879 365.205 216.485 Q368.284 221.069 368.284 229.819 Q368.284 238.545 365.205 243.152 Q362.149 247.735 356.339 247.735 Q350.529 247.735 347.45 243.152 Q344.395 238.545 344.395 229.819 Q344.395 221.069 347.45 216.485 Q350.529 211.879 356.339 211.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.784 4017.76,229.784 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.74 461.669,1245.98 462.238,1245.15 462.806,1243.19 463.375,1242.17 463.943,1241.08 464.511,1239.88 465.08,1238.58 465.648,1237.17 466.216,1235.64 466.785,1233.99 467.353,1232.21 467.921,1230.3 468.49,1228.24 469.058,1225.01 469.626,1222.61 470.195,1219.04 470.763,1216.3 471.331,1213.38 471.9,1209.24 472.468,1205.92 473.036,1201.35 473.605,1197.59 474.173,1192.58 474.741,1188.34 475.31,1182.87 475.878,1178.13 476.446,1171.1 477.015,1165.86 477.583,1160.4 478.152,1154.73 478.72,1147.81 479.288,1140.65 479.857,1134.23 480.425,1127.58 480.993,1117.63 481.562,1109.58 482.13,1102.25 482.698,1094.76 483.267,1084.9 483.835,1076.8 484.403,1068.59 484.972,1059.14 485.54,1050.58 486.108,1039.79 486.677,1030.81 487.245,1021.52 487.813,1009.14 488.382,998.853 488.95,989.349 489.518,978.746 490.087,967.967 490.655,956.22 491.224,943.449 491.792,931.686 492.36,921.112 492.929,910.502 493.497,897.677 494.065,886.968 494.634,876.23 495.202,863.556 495.77,853.978 496.339,841.34 496.907,831.903 497.475,821.335 498.044,809.671 498.612,800.435 499.18,787.972 499.749,778.722 500.317,767.438 500.885,758.297 501.454,747.154 502.022,737.222 502.59,725.229 503.159,710.295 503.727,701.979 504.295,692.77 504.864,683.48 505.432,675.299 506.001,667.244 506.569,659.217 507.137,648.015 507.706,637.239 508.274,628.593 508.842,621.168 509.411,613.546 509.979,603.138 510.547,591.907 511.116,584.016 511.684,573.251 512.252,563.773 512.821,556.443 513.389,548.193 513.957,541.428 514.526,534.404 515.094,529.684 515.662,522.055 516.231,517.454 516.799,511.866 517.367,506.425 517.936,499.923 518.504,493.656 519.072,488.455 519.641,483.188 520.209,478.009 520.778,471.87 521.346,465.774 521.914,461.051 522.483,453.249 523.051,448.76 523.619,442.16 524.188,437.849 524.756,431.358 525.324,426.229 525.893,421.378 526.461,416.561 527.029,408.781 527.598,405.584 528.166,402.171 528.734,396.936 529.303,394.031 529.871,390.907 530.439,389.091 531.008,382.887 531.576,380.009 532.144,371.952 532.713,369.596 533.281,366.133 533.85,364.825 534.418,359.463 534.986,357.387 535.555,354.055 536.123,350.617 536.691,347.553 537.26,346.647 537.828,345.589 538.396,342.406 538.965,340.673 539.533,337.773 540.101,332.888 540.67,330.122 541.238,329.367 541.806,327.728 542.375,324.955 542.943,323.202 543.511,320.63 544.08,320.138 544.648,318.407 545.216,316.835 545.785,315.348 546.353,313.888 546.921,313.222 547.49,310.518 548.058,305.895 548.627,304.695 549.195,303.436 549.763,298.989 550.332,296.013 550.9,293.185 551.468,292.576 552.037,289.8 552.605,288.051 553.173,286.492 553.742,286.086 554.31,285.429 554.878,285.08 555.447,283.605 556.015,281.025 556.583,279.424 557.152,279.142 557.72,278.809 558.288,278.505 558.857,276.236 559.425,276.037 559.993,275.645 560.562,275.131 561.13,273.653 561.698,272.463 562.267,271.056 562.835,267.717 563.404,268.662 563.972,267.456 564.54,265.333 565.109,264.429 565.677,263.636 566.245,264.092 566.814,263.968 567.382,264.08 567.95,262.894 568.519,261.012 569.087,261.058 569.655,260.275 570.224,258.405 570.792,258.542 571.36,257.775 571.929,256.926 572.497,255.144 573.065,254.676 573.634,255.052 574.202,256.556 574.77,255.726 575.339,253.878 575.907,253.301 576.476,254.768 577.044,255.032 577.612,254.418 578.181,252.589 578.749,252.994 579.317,251.244 579.886,249.474 580.454,249.084 581.022,249.457 581.591,248.96 582.159,250.43 582.727,250.894 583.296,252.18 583.864,252.363 584.432,253.678 585.001,253.795 585.569,254.867 586.137,253.961 586.706,254.942 587.274,254.78 587.842,252.415 588.411,252.451 588.979,253.532 589.547,252.392 590.116,250.187 590.684,250.277 591.253,249.381 591.821,249.612 592.389,249.631 592.958,247.583 593.526,246.915 594.094,247.38 594.663,247.411 595.231,249.485 595.799,248.544 596.368,249.659 596.936,248.547 597.504,247.596 598.073,248.908 598.641,248.067 599.209,250.091 599.778,248.085 600.346,247.11 600.914,245.101 601.483,244.484 602.051,245.805 602.619,249.081 603.188,247.042 603.756,248.032 604.325,250.054 604.893,249.851 605.461,248.579 606.03,248.33 606.598,246.092 607.166,246.034 607.735,244.873 608.303,243.469 608.871,242.509 609.44,242.809 610.008,242.802 610.576,242 611.145,242.243 611.713,241.464 612.281,243.835 612.85,245.728 613.418,244.532 613.986,243.653 614.555,245.595 615.123,245.065 615.691,244.795 616.26,244.473 616.828,242.203 617.396,241.089 617.965,240.937 618.533,240.942 619.102,242.95 619.67,240.876 620.238,240.97 620.807,239.1 621.375,238.256 621.943,238.454 622.512,237.75 623.08,238.006 623.648,239.215 624.217,240.315 624.785,240.253 625.353,238.321 625.922,238.418 626.49,238.474 627.058,238.736 627.627,236.595 628.195,238.08 628.763,237.18 629.332,236.379 629.9,236.672 630.468,236.955 631.037,235.315 631.605,235.657 632.173,235.912 632.742,235.12 633.31,235.409 633.879,234.417 634.447,236.925 635.015,239.141 635.584,240.239 636.152,241.246 636.72,241.077 637.289,238.027 637.857,238.558 638.425,237.829 638.994,237.812 639.562,238.887 640.13,236.969 640.699,236.225 641.267,235.43 641.835,233.527 642.404,230.983 642.972,230.559 643.54,230.931 644.109,234.597 644.677,233.826 645.245,233.138 645.814,233.639 646.382,236.118 646.951,237.402 647.519,237.439 648.087,236.342 648.656,236.54 649.224,234.545 649.792,235.943 650.361,233.981 650.929,233.99 651.497,236.32 652.066,234.364 652.634,235.584 653.202,236.612 653.771,236.708 654.339,238.836 654.907,240.855 655.476,242.731 656.044,246.449 656.612,245.825 657.181,241.977 657.749,240.248 658.317,242.91 658.886,242.632 659.454,240.171 660.022,241.966 660.591,240.399 661.159,240.052 661.728,240.026 662.296,238.915 662.864,239.536 663.433,239.148 664.001,237.047 664.569,236.97 665.138,234.857 665.706,235.589 666.274,236.681 666.843,237.773 667.411,238.743 667.979,236.743 668.548,235.877 669.116,232.615 669.684,232.853 670.253,231.11 670.821,233.429 671.389,232.413 671.958,232.702 672.526,233.821 673.094,231.834 673.663,230.056 674.231,230.773 674.799,233.122 675.368,233.246 675.936,233.284 676.505,232.305 677.073,230.447 677.641,230.81 678.21,230.217 678.778,230.624 679.346,231.959 679.915,233.31 680.483,231.306 681.051,230.502 681.62,230.818 682.188,233.107 682.756,234.104 683.325,234.193 683.893,234.427 684.461,234.79 685.03,235.08 685.598,234.07 686.166,232.035 686.735,231.22 687.303,234.51 687.871,234.694 688.44,231.813 689.008,230.282 689.577,229.743 690.145,229.028 690.713,228.339 691.282,230.895 691.85,229.199 692.418,228.74 692.987,228.187 693.555,228.77 694.123,230.251 694.692,231.833 695.26,230.159 695.828,232.419 696.397,232.615 696.965,233.652 697.533,232.745 698.102,234.073 698.67,232.969 699.238,232.998 699.807,234.19 700.375,233.131 700.943,235.471 701.512,233.321 702.08,233.742 702.648,234.136 703.217,232.164 703.785,234.342 704.354,234.147 704.922,233.24 705.49,233.286 706.059,232.396 706.627,231.691 707.195,232.012 707.764,231.086 708.332,231.567 708.9,231.858 709.469,231.94 710.037,226.698 710.605,225.061 711.174,224.938 711.742,229.746 712.31,231.03 712.879,232.333 713.447,231.477 714.015,233.823 714.584,233.771 715.152,233.746 715.72,236.968 716.289,236.648 716.857,235.619 717.425,234.614 717.994,234.643 718.562,235.578 719.131,233.276 719.699,233.098 720.267,233.073 720.836,233.239 721.404,234.497 721.972,232.365 722.541,233.451 723.109,233.522 723.677,235.751 724.246,235.625 724.814,236.355 725.382,235.024 725.951,235.992 726.519,235.829 727.087,233.506 727.656,233.313 728.224,231.008 728.792,232.041 729.361,231.484 729.929,230.565 730.497,230.757 731.066,230.075 731.634,230.445 732.203,231.929 732.771,232.822 733.339,231.856 733.908,234.145 734.476,234.117 735.044,234.145 735.613,233.998 736.181,234.07 736.749,233.997 737.318,232.041 737.886,232.229 738.454,233.329 739.023,236.376 739.591,237.066 740.159,238.732 740.728,239.264 741.296,238.641 741.864,235.19 742.433,235.055 743.001,234.974 743.569,234.881 744.138,236.913 744.706,237.601 745.274,239.177 745.843,236.619 746.411,237.354 746.98,237.852 747.548,235.464 748.116,235.376 748.685,233.163 749.253,228.83 749.821,228.093 750.39,230.327 750.958,229.185 751.526,228.269 752.095,227.421 752.663,228.604 753.231,228.723 753.8,229.019 754.368,228.204 754.936,227.59 755.505,226.757 756.073,225.103 756.641,224.559 757.21,225.244 757.778,226.956 758.346,227.435 758.915,226.824 759.483,226.037 760.052,225.439 760.62,226.036 761.188,225.733 761.757,226.17 762.325,226.662 762.893,226.013 763.462,226.245 764.03,225.897 764.598,226.385 765.167,225.067 765.735,226.551 766.303,226.94 766.872,229.496 767.44,227.762 768.008,229.326 768.577,229.803 769.145,230.143 769.713,230.59 770.282,230.659 770.85,231.716 771.418,230.644 771.987,230.659 772.555,228.889 773.123,229.425 773.692,230.749 774.26,232.088 774.829,230.142 775.397,227.281 775.965,226.744 776.534,226.238 777.102,227.562 777.67,226.013 778.239,225.308 778.807,226.836 779.375,228.58 779.944,228.087 780.512,229.458 781.08,228.819 781.649,229.23 782.217,234.617 782.785,236.505 783.354,238.462 783.922,236.2 784.49,235.182 785.059,234.138 785.627,234.109 786.195,235.872 786.764,234.663 787.332,236.879 787.9,236.814 788.469,236.537 789.037,234.288 789.606,233.444 790.174,233.496 790.742,231.477 791.311,233.789 791.879,232.75 792.447,231.941 793.016,236.164 793.584,237.164 794.152,236.728 794.721,236.481 795.289,236.237 795.857,239.045 796.426,239.592 796.994,241.294 797.562,239.573 798.131,241.082 798.699,240.606 799.267,239.826 799.836,238.077 800.404,237.719 800.972,237.172 801.541,234.792 802.109,235.308 802.678,235.853 803.246,237.631 803.814,237.165 804.383,236.629 804.951,235.868 805.519,240.553 806.088,237.87 806.656,237.357 807.224,236.723 807.793,236.238 808.361,234.593 808.929,235.356 809.498,234.81 810.066,235.403 810.634,235.035 811.203,232.453 811.771,233.412 812.339,231.917 812.908,231.741 813.476,231.77 814.044,231.453 814.613,230.308 815.181,229.131 815.749,228.987 816.318,228.179 816.886,227.051 817.455,225.038 818.023,227.702 818.591,226.917 819.16,228.358 819.728,227.297 820.296,227.508 820.865,228.615 821.433,226.573 822.001,225.8 822.57,226.186 823.138,225.371 823.706,226.695 824.275,228.011 824.843,231.081 825.411,229.975 825.98,228.958 826.548,227.953 827.116,228.056 827.685,226.162 828.253,225.578 828.821,227.964 829.39,227.808 829.958,227.021 830.526,225.262 831.095,222.734 831.663,224.269 832.232,224.808 832.8,224.273 833.368,224.679 833.937,225.091 834.505,225.564 835.073,225.761 835.642,223.97 836.21,227.646 836.778,227.848 837.347,230.235 837.915,233.11 838.483,234.091 839.052,234.052 839.62,233.854 840.188,234.762 840.757,234.629 841.325,235.652 841.893,235.274 842.462,232.805 843.03,232.86 843.598,231.763 844.167,233.896 844.735,232.648 845.304,232.39 845.872,231.097 846.44,231.835 847.009,229.712 847.577,228.869 848.145,229.128 848.714,229.34 849.282,230.397 849.85,230.194 850.419,231.287 850.987,228.083 851.555,227.327 852.124,229.688 852.692,230.49 853.26,230.363 853.829,229.326 854.397,230.644 854.965,230.955 855.534,232.74 856.102,230.39 856.67,230.199 857.239,230.164 857.807,228.258 858.375,228.483 858.944,226.65 859.512,224.86 860.081,222.185 860.649,222.906 861.217,224.684 861.786,223.018 862.354,224.503 862.922,226.087 863.491,225.433 864.059,225.761 864.627,228.345 865.196,227.321 865.764,228.461 866.332,230.495 866.901,231.609 867.469,231.706 868.037,227.836 868.606,230.36 869.174,229.271 869.742,227.464 870.311,227.875 870.879,228.168 871.447,229.526 872.016,231.701 872.584,234.716 873.152,234.598 873.721,234.378 874.289,233.155 874.858,234.883 875.426,235.592 875.994,236.413 876.563,234.848 877.131,233.461 877.699,233.451 878.268,233.365 878.836,233.273 879.404,232.031 879.973,231.974 880.541,231.858 881.109,233.925 881.678,233.683 882.246,231.562 882.814,233.437 883.383,233.204 883.951,232.095 884.519,232.05 885.088,231.998 885.656,228.66 886.224,228.753 886.793,227.951 887.361,226.17 887.93,225.428 888.498,226.78 889.066,225.114 889.635,226.679 890.203,227.1 890.771,227.507 891.34,230.685 891.908,231.86 892.476,231.936 893.045,230.885 893.613,229.984 894.181,228.981 894.75,226.837 895.318,226.939 895.886,231.204 896.455,231.486 897.023,231.518 897.591,229.727 898.16,229.928 898.728,229.913 899.296,229.844 899.865,232.2 900.433,231.194 901.001,229.993 901.57,230.025 902.138,229.071 902.707,228.185 903.275,229.425 903.843,229.569 904.412,228.794 904.98,230.81 905.548,228.742 906.117,227.002 906.685,226.305 907.253,226.694 907.822,225.828 908.39,226.138 908.958,227.781 909.527,229.93 910.095,233.101 910.663,236.114 911.232,235.621 911.8,234.359 912.368,231.961 912.937,232.026 913.505,230.949 914.073,231.886 914.642,233.936 915.21,232.737 915.779,231.73 916.347,229.627 916.915,230.75 917.484,230.455 918.052,228.295 918.62,227.344 919.189,227.287 919.757,227.518 920.325,227.666 920.894,227.96 921.462,227.291 922.03,225.64 922.599,228.217 923.167,227.492 923.735,228.708 924.304,229.963 924.872,232.18 925.44,232.047 926.009,233.966 926.577,233.703 927.145,235.678 927.714,235.353 928.282,234.171 928.85,237.18 929.419,236.499 929.987,235.035 930.556,234.755 931.124,238.661 931.692,239.051 932.261,237.555 932.829,238.113 933.397,236.528 933.966,233.894 934.534,233.715 935.102,234.587 935.671,235.205 936.239,233.634 936.807,233.312 937.376,233.083 937.944,235.117 938.512,234.889 939.081,236.654 939.649,238.363 940.217,239.733 940.786,238.895 941.354,240.466 941.922,238.421 942.491,238.85 943.059,238.145 943.627,235.469 944.196,236.171 944.764,233.398 945.333,235.32 945.901,234.864 946.469,235.532 947.038,233.882 947.606,233.401 948.174,230.93 948.743,230.599 949.311,230.419 949.879,230.197 950.448,228.015 951.016,229.031 951.584,228.138 952.153,227.398 952.721,227.562 953.289,227.571 953.858,228.696 954.426,230.541 954.994,231.479 955.563,231.212 956.131,227.696 956.699,226.529 957.268,226.698 957.836,227.772 958.405,224.589 958.973,223.592 959.541,223.685 960.11,223.044 960.678,223.488 961.246,225.959 961.815,227.237 962.383,227.426 962.951,228.431 963.52,227.523 964.088,225.496 964.656,225.741 965.225,223.993 965.793,223.42 966.361,223.981 966.93,223.473 967.498,224.702 968.066,224.964 968.635,227.214 969.203,227.395 969.771,228.436 970.34,228.652 970.908,227.703 971.476,227.76 972.045,226.728 972.613,229.931 973.182,229.998 973.75,230.858 974.318,227.891 974.887,226.894 975.455,229.24 976.023,229.103 976.592,228.17 977.16,228.31 977.728,230.366 978.297,230.402 978.865,229.468 979.433,231.404 980.002,231.203 980.57,232.104 981.138,231.856 981.707,231.849 982.275,230.628 982.843,230.522 983.412,227.294 983.98,227.576 984.548,227.749 985.117,228.057 985.685,224.976 986.253,225.362 986.822,226.43 987.39,225.557 987.959,222.885 988.527,223.544 989.095,222.915 989.664,224.534 990.232,226.057 990.8,227.468 991.369,227.889 991.937,228.179 992.505,227.19 993.074,228.551 993.642,230.892 994.21,226.744 994.779,227.098 995.347,228.327 995.915,229.583 996.484,230.508 997.052,229.475 997.62,230.738 998.189,225.778 998.757,226.311 999.325,226.719 999.894,226.238 1000.46,226.603 1001.03,225.889 1001.6,227.569 1002.17,226.79 1002.74,228.269 1003.3,229.52 1003.87,230.783 1004.44,231.982 1005.01,231.773 1005.58,231.943 1006.15,233.968 1006.71,234.71 1007.28,236.399 1007.85,236.052 1008.42,237.384 1008.99,235.956 1009.56,235.582 1010.12,235.314 1010.69,236.339 1011.26,237.236 1011.83,235.677 1012.4,235.266 1012.97,233.782 1013.53,234.562 1014.1,234.355 1014.67,232.056 1015.24,232.916 1015.81,232.855 1016.38,232.723 1016.94,233.694 1017.51,233.287 1018.08,234.135 1018.65,233.982 1019.22,233.659 1019.79,232.375 1020.35,232.108 1020.92,231.789 1021.49,231.678 1022.06,230.459 1022.63,230.339 1023.2,232.077 1023.76,230.625 1024.33,229.6 1024.9,228.425 1025.47,230.589 1026.04,231.425 1026.61,230.161 1027.17,229.879 1027.74,228.93 1028.31,229.235 1028.88,228.302 1029.45,229.245 1030.02,230.175 1030.58,230.091 1031.15,228.013 1031.72,227.007 1032.29,227.025 1032.86,228.455 1033.43,227.449 1033.99,228.603 1034.56,227.609 1035.13,225.797 1035.7,227.093 1036.27,227.323 1036.84,227.585 1037.4,227.812 1037.97,229.074 1038.54,229.882 1039.11,229.791 1039.68,228.644 1040.25,229.718 1040.81,229.822 1041.38,227.762 1041.95,227.939 1042.52,227.018 1043.09,227.055 1043.66,228.33 1044.22,227.475 1044.79,228.804 1045.36,227.815 1045.93,227.834 1046.5,227.862 1047.07,226.871 1047.63,228.186 1048.2,228.38 1048.77,230.891 1049.34,231.884 1049.91,231.714 1050.48,233.78 1051.05,233.55 1051.61,233.046 1052.18,231.669 1052.75,230.45 1053.32,231.672 1053.89,231.516 1054.46,231.37 1055.02,231.141 1055.59,231.149 1056.16,231.116 1056.73,232.054 1057.3,230.863 1057.87,231.981 1058.43,233.001 1059,231.377 1059.57,231.206 1060.14,228.893 1060.71,229.826 1061.28,229.539 1061.84,230.553 1062.41,228.506 1062.98,229.512 1063.55,230.536 1064.12,230.699 1064.69,230.845 1065.25,229.882 1065.82,230.723 1066.39,229.814 1066.96,229.559 1067.53,230.737 1068.1,229.743 1068.66,228.815 1069.23,227.91 1069.8,225.093 1070.37,227.652 1070.94,226.826 1071.51,229.129 1072.07,229.186 1072.64,227.305 1073.21,228.58 1073.78,227.735 1074.35,225.522 1074.92,225.876 1075.48,226.251 1076.05,229.58 1076.62,226.372 1077.19,224.579 1077.76,224.932 1078.33,223.287 1078.89,223.727 1079.46,225.082 1080.03,223.3 1080.6,222.719 1081.17,223.311 1081.74,223.741 1082.3,227.488 1082.87,228.834 1083.44,227.946 1084.01,227.13 1084.58,228.619 1085.15,230.946 1085.71,231.882 1086.28,231.635 1086.85,230.733 1087.42,231.73 1087.99,229.744 1088.56,230.832 1089.12,228.846 1089.69,226.767 1090.26,226.918 1090.83,227.253 1091.4,228.64 1091.97,231.978 1092.53,233.877 1093.1,233.591 1093.67,234.67 1094.24,234.289 1094.81,231.163 1095.38,229.156 1095.94,228.15 1096.51,229.298 1097.08,229.202 1097.65,232.502 1098.22,233.221 1098.79,231.854 1099.35,232.61 1099.92,236.699 1100.49,234.393 1101.06,233.99 1101.63,234.937 1102.2,235.737 1102.76,234.232 1103.33,232.879 1103.9,232.667 1104.47,231.247 1105.04,231.19 1105.61,228.996 1106.17,230.11 1106.74,229.968 1107.31,225.838 1107.88,224.869 1108.45,224.332 1109.02,222.751 1109.58,223.296 1110.15,223.996 1110.72,227.645 1111.29,228.004 1111.86,229.246 1112.43,228.645 1112.99,229.673 1113.56,232.021 1114.13,233.175 1114.7,234.028 1115.27,233.784 1115.84,232.511 1116.4,231.362 1116.97,229.115 1117.54,231.133 1118.11,232.041 1118.68,231.176 1119.25,228.897 1119.81,226.784 1120.38,226.125 1120.95,227.59 1121.52,228.914 1122.09,232.094 1122.66,231.773 1123.23,229.682 1123.79,228.659 1124.36,228.775 1124.93,229.934 1125.5,231.033 1126.07,230.949 1126.64,232.059 1127.2,232.887 1127.77,233.628 1128.34,233.483 1128.91,233.361 1129.48,232.95 1130.05,231.735 1130.61,233.58 1131.18,231.292 1131.75,231.021 1132.32,231.121 1132.89,231.163 1133.46,230.998 1134.02,231.875 1134.59,230.773 1135.16,229.84 1135.73,230.82 1136.3,228.556 1136.87,228.598 1137.43,227.428 1138,228.46 1138.57,227.654 1139.14,231.839 1139.71,230.804 1140.28,228.791 1140.84,229.769 1141.41,229.707 1141.98,229.654 1142.55,227.686 1143.12,230.949 1143.69,231.77 1144.25,231.474 1144.82,231.283 1145.39,231.057 1145.96,230.992 1146.53,233.032 1147.1,232.623 1147.66,231.472 1148.23,229.394 1148.8,228.367 1149.37,229.67 1149.94,229.437 1150.51,229.189 1151.07,230.055 1151.64,230.078 1152.21,230.095 1152.78,230.187 1153.35,229.99 1153.92,231.179 1154.48,230.856 1155.05,229.565 1155.62,229.236 1156.19,227.247 1156.76,228.349 1157.33,227.519 1157.89,226.877 1158.46,229.23 1159.03,228.16 1159.6,227.423 1160.17,227.541 1160.74,228.604 1161.3,230.484 1161.87,229.46 1162.44,228.333 1163.01,228.405 1163.58,227.458 1164.15,228.616 1164.71,228.685 1165.28,232.696 1165.85,233.822 1166.42,231.568 1166.99,231.368 1167.56,230.264 1168.12,230.172 1168.69,231.379 1169.26,228.245 1169.83,228.218 1170.4,229.335 1170.97,228.262 1171.53,228.422 1172.1,226.46 1172.67,227.646 1173.24,228.734 1173.81,227.911 1174.38,229.187 1174.94,229.204 1175.51,228.229 1176.08,228.322 1176.65,228.505 1177.22,226.71 1177.79,225.843 1178.35,227.256 1178.92,228.565 1179.49,229.62 1180.06,229.834 1180.63,228.907 1181.2,229.17 1181.76,229.169 1182.33,231.259 1182.9,233.18 1183.47,234.108 1184.04,239.107 1184.61,239.695 1185.17,239.124 1185.74,239.638 1186.31,238.966 1186.88,240.411 1187.45,238.68 1188.02,238.009 1188.58,236.39 1189.15,235.949 1189.72,234.605 1190.29,234.1 1190.86,233.762 1191.43,232.334 1192,231.094 1192.56,231.879 1193.13,232.762 1193.7,230.475 1194.27,230.464 1194.84,232.524 1195.41,233.374 1195.97,230.992 1196.54,231.883 1197.11,231.814 1197.68,233.623 1198.25,235.222 1198.82,234.742 1199.38,235.211 1199.95,235.894 1200.52,234.159 1201.09,234.832 1201.66,235.098 1202.23,234.693 1202.79,234.367 1203.36,234.869 1203.93,236.4 1204.5,234.656 1205.07,234.301 1205.64,233.699 1206.2,236.159 1206.77,237.397 1207.34,236.597 1207.91,234.995 1208.48,235.345 1209.05,234.746 1209.61,235.158 1210.18,233.372 1210.75,231.767 1211.32,232.321 1211.89,231.653 1212.46,228.154 1213.02,227.892 1213.59,229.93 1214.16,229.863 1214.73,229.461 1215.3,227.87 1215.87,228.856 1216.43,226.385 1217,225.322 1217.57,225.547 1218.14,224.72 1218.71,224.906 1219.28,226.069 1219.84,225.292 1220.41,225.149 1220.98,224.309 1221.55,222.403 1222.12,221.849 1222.69,222.251 1223.25,222.695 1223.82,223.995 1224.39,223.299 1224.96,224.682 1225.53,225.129 1226.1,225.396 1226.66,223.868 1227.23,223.161 1227.8,223.657 1228.37,225.029 1228.94,226.376 1229.51,227.683 1230.07,225.523 1230.64,223.718 1231.21,224.059 1231.78,225.378 1232.35,225.676 1232.92,224.834 1233.48,225.127 1234.05,227.527 1234.62,227.691 1235.19,227.728 1235.76,227.88 1236.33,225.989 1236.89,226.355 1237.46,226.727 1238.03,226.861 1238.6,227.108 1239.17,226.146 1239.74,227.487 1240.3,228.803 1240.87,225.979 1241.44,227.383 1242.01,227.602 1242.58,227.616 1243.15,226.626 1243.71,226.873 1244.28,227.17 1244.85,224.27 1245.42,223.804 1245.99,225.318 1246.56,225.664 1247.12,225.879 1247.69,227.286 1248.26,227.714 1248.83,228.193 1249.4,228.2 1249.97,228.334 1250.53,228.601 1251.1,230.458 1251.67,230.578 1252.24,229.486 1252.81,229.508 1253.38,230.465 1253.94,231.604 1254.51,231.429 1255.08,232.506 1255.65,234.335 1256.22,233.919 1256.79,232.605 1257.35,232.419 1257.92,231.075 1258.49,231.923 1259.06,233.475 1259.63,233.081 1260.2,232.746 1260.76,230.411 1261.33,229.38 1261.9,226.237 1262.47,227.329 1263.04,226.58 1263.61,227.963 1264.18,226.951 1264.74,228.2 1265.31,228.241 1265.88,228.436 1266.45,227.575 1267.02,225.891 1267.59,224.82 1268.15,225.344 1268.72,223.932 1269.29,224.576 1269.86,225.967 1270.43,225.47 1271,224.656 1271.56,226.07 1272.13,227.475 1272.7,228.775 1273.27,228.889 1273.84,228.908 1274.41,227.952 1274.97,227.164 1275.54,227.35 1276.11,227.359 1276.68,223.431 1277.25,223.782 1277.82,224.419 1278.38,225.94 1278.95,226.316 1279.52,228.679 1280.09,229.745 1280.66,230.797 1281.23,231.109 1281.79,228.663 1282.36,229.701 1282.93,230.703 1283.5,231.654 1284.07,235.684 1284.64,238.541 1285.2,236.936 1285.77,235.481 1286.34,234.168 1286.91,234 1287.48,233.906 1288.05,237.672 1288.61,236.225 1289.18,234.838 1289.75,234.541 1290.32,236.25 1290.89,235.775 1291.46,234.31 1292.02,234.201 1292.59,232.831 1293.16,232.542 1293.73,229.185 1294.3,228.26 1294.87,227.409 1295.43,225.573 1296,225.976 1296.57,226.371 1297.14,229.705 1297.71,228.864 1298.28,229.99 1298.84,230.365 1299.41,229.272 1299.98,230.48 1300.55,229.496 1301.12,228.37 1301.69,228.596 1302.25,228.817 1302.82,227.895 1303.39,229.043 1303.96,230.286 1304.53,230.513 1305.1,229.431 1305.66,227.583 1306.23,226.669 1306.8,225.898 1307.37,226.102 1307.94,225.731 1308.51,226.276 1309.07,224.493 1309.64,223.899 1310.21,225.338 1310.78,222.556 1311.35,225.096 1311.92,229.775 1312.48,229.026 1313.05,228.277 1313.62,229.539 1314.19,227.644 1314.76,230.669 1315.33,228.787 1315.89,227.948 1316.46,230.116 1317.03,229.141 1317.6,228.408 1318.17,231.739 1318.74,229.434 1319.3,230.737 1319.87,228.672 1320.44,229.017 1321.01,230.114 1321.58,229.199 1322.15,226.441 1322.71,226.711 1323.28,229.418 1323.85,228.553 1324.42,229.97 1324.99,229.962 1325.56,230.17 1326.12,228.111 1326.69,227.084 1327.26,225.455 1327.83,225.08 1328.4,225.758 1328.97,227.152 1329.53,227.515 1330.1,228.768 1330.67,228.969 1331.24,229.417 1331.81,229.842 1332.38,228.782 1332.94,230.974 1333.51,230.862 1334.08,231.682 1334.65,231.681 1335.22,231.837 1335.79,231.95 1336.36,232.013 1336.92,231.962 1337.49,230.958 1338.06,229.951 1338.63,229.877 1339.2,229.228 1339.77,231.376 1340.33,233.514 1340.9,233.319 1341.47,234.112 1342.04,232.657 1342.61,229.096 1343.18,228.116 1343.74,228.326 1344.31,230.595 1344.88,234.741 1345.45,233.383 1346.02,234.262 1346.59,237.154 1347.15,235.775 1347.72,236.245 1348.29,235.768 1348.86,235.218 1349.43,231.795 1350,232.76 1350.56,233.7 1351.13,232.541 1351.7,232.342 1352.27,233.24 1352.84,233.948 1353.41,234.887 1353.97,235.479 1354.54,235.09 1355.11,232.678 1355.68,232.647 1356.25,231.519 1356.82,234.36 1357.38,233.122 1357.95,231.142 1358.52,229.965 1359.09,230.176 1359.66,231.365 1360.23,231.142 1360.79,228.955 1361.36,229.194 1361.93,228.126 1362.5,228.188 1363.07,230.467 1363.64,231.602 1364.2,228.333 1364.77,230.711 1365.34,230.439 1365.91,229.286 1366.48,229.278 1367.05,229.199 1367.61,230.27 1368.18,229.033 1368.75,229.158 1369.32,228.998 1369.89,230.989 1370.46,230.775 1371.02,230.801 1371.59,230.606 1372.16,227.508 1372.73,226.666 1373.3,226.795 1373.87,230.084 1374.43,230.136 1375,229.121 1375.57,227.999 1376.14,230.119 1376.71,230.11 1377.28,230.891 1377.84,230.804 1378.41,230.841 1378.98,230.731 1379.55,229.713 1380.12,227.759 1380.69,226.898 1381.25,225.154 1381.82,225.515 1382.39,226.801 1382.96,228.141 1383.53,228.174 1384.1,228.111 1384.66,228.132 1385.23,228.266 1385.8,228.47 1386.37,228.816 1386.94,227.974 1387.51,229.215 1388.07,230.506 1388.64,230.469 1389.21,231.759 1389.78,232.867 1390.35,233.636 1390.92,233.196 1391.48,230.959 1392.05,231.943 1392.62,231.867 1393.19,232.927 1393.76,232.5 1394.33,231.432 1394.89,231.518 1395.46,232.46 1396.03,232.048 1396.6,233.914 1397.17,233.531 1397.74,233.324 1398.3,234.258 1398.87,235.944 1399.44,237.418 1400.01,237.741 1400.58,237.066 1401.15,237.54 1401.71,233.809 1402.28,230.424 1402.85,231.335 1403.42,230.314 1403.99,230.063 1404.56,229.196 1405.13,229.313 1405.69,229.276 1406.26,227.235 1406.83,229.236 1407.4,231.047 1407.97,228.695 1408.54,229.772 1409.1,228.762 1409.67,228.621 1410.24,229.867 1410.81,230.067 1411.38,228.811 1411.95,228.812 1412.51,228.935 1413.08,228.749 1413.65,229.792 1414.22,230.651 1414.79,230.303 1415.36,232.267 1415.92,231.137 1416.49,230.91 1417.06,230.689 1417.63,229.66 1418.2,229.549 1418.77,228.215 1419.33,228.38 1419.9,227.412 1420.47,227.67 1421.04,229.786 1421.61,229.666 1422.18,227.45 1422.74,227.506 1423.31,227.529 1423.88,226.6 1424.45,228.8 1425.02,226.626 1425.59,224.57 1426.15,222.029 1426.72,223.482 1427.29,223.905 1427.86,225.471 1428.43,226.894 1429,226.074 1429.56,226.484 1430.13,228.034 1430.7,227.049 1431.27,225.262 1431.84,227.648 1432.41,225.692 1432.97,225.892 1433.54,230.348 1434.11,229.289 1434.68,230.61 1435.25,230.353 1435.82,232.415 1436.38,232.273 1436.95,232.181 1437.52,230.023 1438.09,230.956 1438.66,231.994 1439.23,231.746 1439.79,231.745 1440.36,231.55 1440.93,233.636 1441.5,234.343 1442.07,234.185 1442.64,231.797 1443.2,230.385 1443.77,230.306 1444.34,233.535 1444.91,234.397 1445.48,232.882 1446.05,233.722 1446.61,231.222 1447.18,230.989 1447.75,229.937 1448.32,229.065 1448.89,227.178 1449.46,228.528 1450.02,227.522 1450.59,227.683 1451.16,225.572 1451.73,226.954 1452.3,227.157 1452.87,227.562 1453.43,227.767 1454,226.827 1454.57,228.881 1455.14,230.186 1455.71,230.264 1456.28,229.114 1456.84,228.933 1457.41,228.202 1457.98,229.558 1458.55,228.657 1459.12,227.835 1459.69,228.973 1460.25,229.053 1460.82,231.198 1461.39,230.97 1461.96,233.06 1462.53,232.992 1463.1,230.678 1463.66,231.743 1464.23,231.817 1464.8,229.652 1465.37,228.693 1465.94,227.761 1466.51,229.947 1467.07,231.122 1467.64,231.044 1468.21,228.976 1468.78,229.213 1469.35,228.416 1469.92,227.398 1470.48,226.42 1471.05,225.545 1471.62,225.893 1472.19,227.022 1472.76,227.191 1473.33,227.7 1473.89,230.078 1474.46,229.304 1475.03,230.349 1475.6,231.181 1476.17,229.903 1476.74,228.891 1477.31,226.695 1477.87,225.762 1478.44,225.292 1479.01,224.732 1479.58,227.028 1480.15,229.359 1480.72,229.398 1481.28,229.382 1481.85,230.576 1482.42,231.541 1482.99,230.278 1483.56,230.229 1484.13,229.206 1484.69,231.508 1485.26,231.482 1485.83,231.267 1486.4,231.119 1486.97,230.058 1487.54,228.212 1488.1,230.587 1488.67,231.602 1489.24,233.553 1489.81,233.272 1490.38,232.816 1490.95,231.355 1491.51,230.474 1492.08,228.246 1492.65,228.393 1493.22,228.536 1493.79,228.724 1494.36,227.93 1494.92,225.978 1495.49,225.546 1496.06,228.185 1496.63,228.431 1497.2,229.656 1497.77,230.63 1498.33,231.655 1498.9,231.522 1499.47,231.66 1500.04,230.766 1500.61,228.782 1501.18,232.912 1501.74,234.551 1502.31,233.263 1502.88,232.881 1503.45,232.691 1504.02,232.447 1504.59,232.175 1505.15,235.136 1505.72,233.622 1506.29,233.113 1506.86,234.944 1507.43,235.55 1508,236.201 1508.56,234.568 1509.13,235.409 1509.7,237.133 1510.27,234.341 1510.84,234.188 1511.41,233.714 1511.97,233.387 1512.54,232.801 1513.11,232.49 1513.68,232.141 1514.25,231.879 1514.82,232.975 1515.38,233.473 1515.95,234.263 1516.52,233.784 1517.09,235.292 1517.66,234.747 1518.23,235.164 1518.79,233.555 1519.36,233.269 1519.93,232.941 1520.5,232.65 1521.07,233.19 1521.64,233.947 1522.2,232.404 1522.77,232.085 1523.34,233.67 1523.91,234.046 1524.48,232.782 1525.05,233.417 1525.61,232.79 1526.18,231.437 1526.75,229.064 1527.32,229.076 1527.89,226.823 1528.46,227.038 1529.02,225.971 1529.59,223.103 1530.16,223.501 1530.73,223.746 1531.3,225.003 1531.87,223.13 1532.43,224.588 1533,225.882 1533.57,226.052 1534.14,228.232 1534.71,230.015 1535.28,227.73 1535.84,229.835 1536.41,227.53 1536.98,227.382 1537.55,227.402 1538.12,225.34 1538.69,225.544 1539.25,224.856 1539.82,222.859 1540.39,222.198 1540.96,221.612 1541.53,219.895 1542.1,222.535 1542.66,224.011 1543.23,224.423 1543.8,222.474 1544.37,224.059 1544.94,226.451 1545.51,226.392 1546.08,226.718 1546.64,223.821 1547.21,226.25 1547.78,227.58 1548.35,225.796 1548.92,227.47 1549.49,227.713 1550.05,227.823 1550.62,228.021 1551.19,227.166 1551.76,226.541 1552.33,227.578 1552.9,224.865 1553.46,226.284 1554.03,225.688 1554.6,225.957 1555.17,226.266 1555.74,225.607 1556.31,228.021 1556.87,226.329 1557.44,225.698 1558.01,223.988 1558.58,223.551 1559.15,223.053 1559.72,226.684 1560.28,226.942 1560.85,229.142 1561.42,229.43 1561.99,230.635 1562.56,232.874 1563.13,230.613 1563.69,229.551 1564.26,231.945 1564.83,230.901 1565.4,232.121 1565.97,232.03 1566.54,230.884 1567.1,231.973 1567.67,230.926 1568.24,231.806 1568.81,232.853 1569.38,233.783 1569.95,234.587 1570.51,234.157 1571.08,233.09 1571.65,232.87 1572.22,232.698 1572.79,231.498 1573.36,231.469 1573.92,231.563 1574.49,231.536 1575.06,231.296 1575.63,233.402 1576.2,233.078 1576.77,233.728 1577.33,233.686 1577.9,235.4 1578.47,233.987 1579.04,233.447 1579.61,233.326 1580.18,234.253 1580.74,231.814 1581.31,231.473 1581.88,230.44 1582.45,229.52 1583.02,228.463 1583.59,229.664 1584.15,233.679 1584.72,232.152 1585.29,233.13 1585.86,234.038 1586.43,231.79 1587,230.483 1587.56,232.585 1588.13,233.562 1588.7,233.322 1589.27,232.17 1589.84,231.003 1590.41,231.919 1590.97,231.784 1591.54,231.621 1592.11,230.471 1592.68,230.419 1593.25,230.466 1593.82,230.543 1594.38,228.275 1594.95,228.579 1595.52,228.732 1596.09,228.593 1596.66,228.556 1597.23,231.78 1597.79,230.645 1598.36,230.815 1598.93,228.782 1599.5,228.861 1600.07,230.967 1600.64,228.942 1601.2,230.09 1601.77,227.914 1602.34,230.199 1602.91,230.349 1603.48,232.482 1604.05,231.248 1604.61,232.209 1605.18,234.18 1605.75,232.754 1606.32,233.477 1606.89,232.201 1607.46,233.76 1608.02,232.771 1608.59,232.422 1609.16,230.21 1609.73,229.997 1610.3,228.649 1610.87,227.51 1611.43,229.714 1612,228.724 1612.57,226.604 1613.14,225.749 1613.71,225.02 1614.28,223.266 1614.84,226.817 1615.41,231.035 1615.98,229.836 1616.55,229.688 1617.12,229.473 1617.69,229.299 1618.26,230.282 1618.82,230.435 1619.39,231.546 1619.96,229.573 1620.53,229.524 1621.1,230.671 1621.67,231.468 1622.23,232.2 1622.8,233.979 1623.37,233.647 1623.94,233.356 1624.51,235.102 1625.08,235.817 1625.64,237.3 1626.21,235.771 1626.78,235.109 1627.35,233.7 1627.92,233.45 1628.49,232.032 1629.05,229.718 1629.62,227.676 1630.19,226.682 1630.76,226.643 1631.33,228.833 1631.9,228.912 1632.46,230.075 1633.03,230.934 1633.6,228.74 1634.17,227.756 1634.74,230.826 1635.31,231.479 1635.87,231.103 1636.44,231.858 1637.01,229.532 1637.58,230.608 1638.15,231.756 1638.72,229.776 1639.28,231.693 1639.85,232.541 1640.42,231.147 1640.99,231.98 1641.56,233.672 1642.13,233.541 1642.69,233.211 1643.26,233.052 1643.83,230.595 1644.4,229.347 1644.97,229.342 1645.54,231.228 1646.1,229.963 1646.67,229.996 1647.24,228.915 1647.81,229.043 1648.38,226.851 1648.95,225.765 1649.51,226.99 1650.08,227.33 1650.65,225.56 1651.22,225.501 1651.79,225.887 1652.36,226.188 1652.92,224.542 1653.49,225.824 1654.06,226.014 1654.63,226.116 1655.2,227.477 1655.77,226.561 1656.33,223.471 1656.9,224.985 1657.47,226.005 1658.04,225.086 1658.61,224.38 1659.18,225.742 1659.74,225.175 1660.31,225.354 1660.88,224.596 1661.45,224.045 1662.02,224.44 1662.59,222.651 1663.15,224.376 1663.72,224.874 1664.29,225.268 1664.86,223.545 1665.43,225.092 1666,226.479 1666.56,225.707 1667.13,228.099 1667.7,227.418 1668.27,227.72 1668.84,227.796 1669.41,227.891 1669.97,229.218 1670.54,228.315 1671.11,227.205 1671.68,227.438 1672.25,228.757 1672.82,228.846 1673.38,228.796 1673.95,229.858 1674.52,227.64 1675.09,225.801 1675.66,228.028 1676.23,230.297 1676.79,229.377 1677.36,229.367 1677.93,230.433 1678.5,229.394 1679.07,228.304 1679.64,226.473 1680.2,226.63 1680.77,228.036 1681.34,229.199 1681.91,229.282 1682.48,229.675 1683.05,229.627 1683.61,229.799 1684.18,229.937 1684.75,230.18 1685.32,228.171 1685.89,230.678 1686.46,229.809 1687.02,230.881 1687.59,231.017 1688.16,227.861 1688.73,226.991 1689.3,228.36 1689.87,228.568 1690.44,231.987 1691,232.959 1691.57,230.897 1692.14,230.957 1692.71,230.683 1693.28,231.894 1693.85,234.974 1694.41,234.661 1694.98,237.23 1695.55,235.844 1696.12,237.354 1696.69,238.917 1697.26,236.3 1697.82,233.924 1698.39,232.518 1698.96,230.264 1699.53,232.128 1700.1,230.846 1700.67,230.673 1701.23,231.474 1701.8,233.218 1702.37,233.019 1702.94,232.862 1703.51,233.445 1704.08,233.47 1704.64,232.264 1705.21,232.039 1705.78,231.932 1706.35,230.796 1706.92,228.652 1707.49,228.669 1708.05,228.902 1708.62,228.916 1709.19,228.833 1709.76,229.812 1710.33,230.643 1710.9,231.59 1711.46,233.462 1712.03,232.012 1712.6,230.994 1713.17,231.759 1713.74,232.611 1714.31,231.311 1714.87,231.155 1715.44,232.908 1716.01,232.512 1716.58,229.161 1717.15,228.109 1717.72,228.258 1718.28,227.26 1718.85,228.261 1719.42,228.281 1719.99,228.256 1720.56,230.323 1721.13,232.241 1721.69,232.987 1722.26,233.68 1722.83,233.426 1723.4,233.421 1723.97,230.941 1724.54,228.967 1725.1,228.138 1725.67,228.195 1726.24,228.23 1726.81,228.342 1727.38,227.227 1727.95,227.051 1728.51,224.299 1729.08,222.488 1729.65,222.916 1730.22,222.292 1730.79,224.715 1731.36,226.121 1731.92,229.483 1732.49,229.22 1733.06,226.114 1733.63,226.372 1734.2,226.557 1734.77,226.959 1735.33,223.02 1735.9,225.593 1736.47,224.929 1737.04,225.301 1737.61,225.895 1738.18,226.273 1738.74,225.36 1739.31,224.386 1739.88,225.017 1740.45,226.474 1741.02,222.495 1741.59,224.044 1742.15,226.618 1742.72,225.907 1743.29,225.294 1743.86,225.62 1744.43,225.977 1745,226.273 1745.56,228.802 1746.13,230.757 1746.7,230.893 1747.27,230.882 1747.84,229.589 1748.41,230.576 1748.97,230.691 1749.54,229.692 1750.11,229.796 1750.68,231.783 1751.25,231.605 1751.82,229.644 1752.38,230.014 1752.95,232.231 1753.52,231.236 1754.09,234.227 1754.66,233.032 1755.23,233.821 1755.79,233.82 1756.36,233.508 1756.93,232.529 1757.5,231.506 1758.07,231.586 1758.64,230.548 1759.21,231.721 1759.77,231.782 1760.34,231.765 1760.91,231.702 1761.48,230.764 1762.05,233.836 1762.62,236.749 1763.18,237.275 1763.75,237.707 1764.32,237.189 1764.89,236.601 1765.46,235.969 1766.03,232.507 1766.59,232.406 1767.16,233.195 1767.73,237.995 1768.3,236.393 1768.87,235.796 1769.44,235.361 1770,233.173 1770.57,233.803 1771.14,232.386 1771.71,232.997 1772.28,231.887 1772.85,232.695 1773.41,231.308 1773.98,232.204 1774.55,233.018 1775.12,232.68 1775.69,232.298 1776.26,231.974 1776.82,231.776 1777.39,233.668 1777.96,233.435 1778.53,233.142 1779.1,231.733 1779.67,230.504 1780.23,231.415 1780.8,231.003 1781.37,231.199 1781.94,230.848 1782.51,228.628 1783.08,228.574 1783.64,228.518 1784.21,227.428 1784.78,227.441 1785.35,227.386 1785.92,228.221 1786.49,230.542 1787.05,230.519 1787.62,230.341 1788.19,229.185 1788.76,230.383 1789.33,229.098 1789.9,227.98 1790.46,225.064 1791.03,226.317 1791.6,225.375 1792.17,224.678 1792.74,225.054 1793.31,225.38 1793.87,227.902 1794.44,227.892 1795.01,225.954 1795.58,226.19 1796.15,227.692 1796.72,224.6 1797.28,222.804 1797.85,221.285 1798.42,223.227 1798.99,223.682 1799.56,221.067 1800.13,221.571 1800.69,223.103 1801.26,225.558 1801.83,225.908 1802.4,225.251 1802.97,225.624 1803.54,226.894 1804.1,224.151 1804.67,224.56 1805.24,223.852 1805.81,224.31 1806.38,226.887 1806.95,226.979 1807.51,226.423 1808.08,225.647 1808.65,227.215 1809.22,226.668 1809.79,229.964 1810.36,229.01 1810.92,226.014 1811.49,227.328 1812.06,226.455 1812.63,225.66 1813.2,226.075 1813.77,226.481 1814.33,228.039 1814.9,230.569 1815.47,230.568 1816.04,231.606 1816.61,231.78 1817.18,233.074 1817.74,231.771 1818.31,231.622 1818.88,232.75 1819.45,232.665 1820.02,232.486 1820.59,232.34 1821.15,230.213 1821.72,232.264 1822.29,235.258 1822.86,235.952 1823.43,234.481 1824,233.288 1824.56,232.095 1825.13,231.844 1825.7,233.717 1826.27,232.335 1826.84,229.983 1827.41,229.091 1827.97,230.236 1828.54,231.406 1829.11,235.35 1829.68,235.083 1830.25,232.767 1830.82,233.734 1831.39,234.309 1831.95,230.867 1832.52,232.033 1833.09,231.855 1833.66,229.62 1834.23,228.57 1834.8,230.77 1835.36,226.497 1835.93,225.685 1836.5,225.01 1837.07,228.424 1837.64,228.557 1838.21,226.43 1838.77,226.573 1839.34,224.814 1839.91,226.073 1840.48,230.433 1841.05,232.557 1841.62,233.258 1842.18,234.25 1842.75,233.937 1843.32,236.868 1843.89,235.101 1844.46,234.614 1845.03,233.168 1845.59,235.161 1846.16,234.866 1846.73,232.486 1847.3,230.243 1847.87,231.102 1848.44,230.944 1849,231.925 1849.57,231.794 1850.14,234.618 1850.71,233.216 1851.28,229.986 1851.85,230.977 1852.41,233.091 1852.98,232.602 1853.55,233.211 1854.12,230.885 1854.69,228.671 1855.26,225.752 1855.82,226.013 1856.39,226.576 1856.96,226.611 1857.53,225.815 1858.1,226.166 1858.67,227.437 1859.23,227.637 1859.8,227.739 1860.37,229.097 1860.94,225.955 1861.51,226.231 1862.08,226.536 1862.64,227.665 1863.21,226.673 1863.78,226.891 1864.35,228.131 1864.92,227.262 1865.49,226.483 1866.05,228.694 1866.62,228.62 1867.19,227.773 1867.76,227.942 1868.33,230.002 1868.9,228.895 1869.46,228.105 1870.03,228.224 1870.6,228.437 1871.17,228.611 1871.74,227.918 1872.31,228.211 1872.87,228.441 1873.44,229.705 1874.01,229.6 1874.58,232.021 1875.15,231.758 1875.72,230.853 1876.28,232.647 1876.85,230.604 1877.42,231.647 1877.99,232.543 1878.56,232.386 1879.13,232.224 1879.69,232.009 1880.26,231.802 1880.83,231.565 1881.4,230.47 1881.97,230.204 1882.54,229.108 1883.1,230.041 1883.67,233.069 1884.24,232.659 1884.81,230.402 1885.38,229.499 1885.95,229.614 1886.51,229.639 1887.08,229.641 1887.65,229.515 1888.22,229.657 1888.79,230.614 1889.36,229.583 1889.92,230.564 1890.49,232.429 1891.06,234.479 1891.63,232.263 1892.2,232.173 1892.77,231.933 1893.33,230.956 1893.9,231.797 1894.47,232.589 1895.04,232.519 1895.61,230.883 1896.18,230.744 1896.74,230.766 1897.31,230.666 1897.88,229.612 1898.45,229.538 1899.02,228.501 1899.59,228.703 1900.16,230.817 1900.72,229.919 1901.29,229.827 1901.86,231.775 1902.43,231.605 1903,230.333 1903.57,229.143 1904.13,229.11 1904.7,230.236 1905.27,230.352 1905.84,230.415 1906.41,230.348 1906.98,231.047 1907.54,230.953 1908.11,231.821 1908.68,231.746 1909.25,230.526 1909.82,228.479 1910.39,230.544 1910.95,230.635 1911.52,230.612 1912.09,231.615 1912.66,230.566 1913.23,231.292 1913.8,230.939 1914.36,229.752 1914.93,229.666 1915.5,229.567 1916.07,228.574 1916.64,228.735 1917.21,228.982 1917.77,227.1 1918.34,227.148 1918.91,227.468 1919.48,227.522 1920.05,226.654 1920.62,227.798 1921.18,228.088 1921.75,230.144 1922.32,230.3 1922.89,229.375 1923.46,231.524 1924.03,230.374 1924.59,228.941 1925.16,229.207 1925.73,228.25 1926.3,228.491 1926.87,229.665 1927.44,229.742 1928,230.625 1928.57,229.197 1929.14,228.964 1929.71,229.259 1930.28,227.175 1930.85,226.329 1931.41,225.682 1931.98,225.955 1932.55,226.401 1933.12,225.573 1933.69,227.062 1934.26,230.372 1934.82,232.729 1935.39,232.549 1935.96,234.481 1936.53,231.084 1937.1,230.825 1937.67,231.804 1938.23,231.601 1938.8,233.456 1939.37,231.173 1939.94,233.162 1940.51,233.61 1941.08,235.477 1941.64,233.857 1942.21,232.406 1942.78,232.231 1943.35,232.927 1943.92,233.503 1944.49,232.248 1945.05,233.203 1945.62,232.007 1946.19,233.912 1946.76,232.524 1947.33,231.35 1947.9,229.168 1948.46,229.208 1949.03,229.162 1949.6,230.31 1950.17,230.445 1950.74,230.477 1951.31,230.352 1951.87,231.191 1952.44,232.015 1953.01,228.611 1953.58,227.834 1954.15,226.758 1954.72,226.847 1955.28,226.037 1955.85,227.41 1956.42,224.425 1956.99,225.965 1957.56,227.043 1958.13,228.379 1958.69,229.563 1959.26,229.391 1959.83,229.327 1960.4,231.203 1960.97,231.248 1961.54,231.159 1962.1,228.996 1962.67,228.052 1963.24,230.159 1963.81,231.195 1964.38,227.946 1964.95,226.905 1965.51,225.993 1966.08,225.033 1966.65,224.394 1967.22,224.63 1967.79,226.078 1968.36,226.266 1968.92,226.414 1969.49,226.629 1970.06,226.89 1970.63,225.211 1971.2,225.636 1971.77,226.048 1972.34,226.199 1972.9,226.587 1973.47,226.841 1974.04,228.322 1974.61,227.462 1975.18,227.6 1975.75,229.905 1976.31,230.006 1976.88,231.112 1977.45,228.925 1978.02,229.146 1978.59,226.201 1979.16,226.519 1979.72,226.888 1980.29,228.102 1980.86,227.21 1981.43,231.571 1982,231.337 1982.57,231.176 1983.13,231.144 1983.7,230.161 1984.27,229.19 1984.84,226.113 1985.41,226.532 1985.98,228.996 1986.54,228.151 1987.11,228.604 1987.68,228.783 1988.25,228.734 1988.82,230.016 1989.39,231.032 1989.95,229.978 1990.52,228.67 1991.09,227.594 1991.66,230.075 1992.23,230.179 1992.8,231.509 1993.36,233.555 1993.93,235.423 1994.5,235.1 1995.07,235.818 1995.64,235.432 1996.21,234.885 1996.77,235.617 1997.34,236.327 1997.91,234.915 1998.48,235.674 1999.05,234.288 1999.62,233.95 2000.18,232.721 2000.75,231.479 2001.32,231.211 2001.89,232.15 2002.46,231.845 2003.03,232.921 2003.59,233.777 2004.16,230.375 2004.73,227.27 2005.3,229.475 2005.87,228.661 2006.44,228.638 2007,229.782 2007.57,230.774 2008.14,229.804 2008.71,228.81 2009.28,226.834 2009.85,229.233 2010.41,232.435 2010.98,232.064 2011.55,232.778 2012.12,231.498 2012.69,232.212 2013.26,231.131 2013.82,231.042 2014.39,228.908 2014.96,227.944 2015.53,227.872 2016.1,226.877 2016.67,227.004 2017.23,231.225 2017.8,232.235 2018.37,230.006 2018.94,227.947 2019.51,225.937 2020.08,225.102 2020.64,223.354 2021.21,224.95 2021.78,224.385 2022.35,225.776 2022.92,227.24 2023.49,228.407 2024.05,227.514 2024.62,227.477 2025.19,226.782 2025.76,228.007 2026.33,228.003 2026.9,227.991 2027.46,230.168 2028.03,230.014 2028.6,232.06 2029.17,231.689 2029.74,231.584 2030.31,232.238 2030.87,233.27 2031.44,231.962 2032.01,231.726 2032.58,231.616 2033.15,230.508 2033.72,229.33 2034.28,229.41 2034.85,231.419 2035.42,233.309 2035.99,233.213 2036.56,233.243 2037.13,231.69 2037.69,231.49 2038.26,234.284 2038.83,232.869 2039.4,229.712 2039.97,227.694 2040.54,227.6 2041.11,226.609 2041.67,226.628 2042.24,226.774 2042.81,225.816 2043.38,230.488 2043.95,230.662 2044.52,229.522 2045.08,229.398 2045.65,227.393 2046.22,226.379 2046.79,226.453 2047.36,225.675 2047.93,227.938 2048.49,228.082 2049.06,227.027 2049.63,228.186 2050.2,228.257 2050.77,228.27 2051.34,227.437 2051.9,227.811 2052.47,227.082 2053.04,227.277 2053.61,227.568 2054.18,226.917 2054.75,227.326 2055.31,231.616 2055.88,233.684 2056.45,232.427 2057.02,234.487 2057.59,235.425 2058.16,234.953 2058.72,234.698 2059.29,235.502 2059.86,234.928 2060.43,236.494 2061,234.194 2061.57,232.958 2062.13,231.639 2062.7,231.684 2063.27,231.457 2063.84,228.202 2064.41,228.149 2064.98,228.078 2065.54,224.154 2066.11,224.646 2066.68,226.089 2067.25,223.142 2067.82,221.8 2068.39,222.4 2068.95,222.798 2069.52,223.246 2070.09,223.066 2070.66,222.78 2071.23,224.401 2071.8,224.915 2072.36,225.312 2072.93,225.577 2073.5,224.02 2074.07,225.572 2074.64,223.82 2075.21,223.186 2075.77,224.869 2076.34,227.613 2076.91,228.707 2077.48,229.933 2078.05,233.105 2078.62,233.034 2079.18,230.897 2079.75,229.888 2080.32,231.127 2080.89,230.227 2081.46,231.106 2082.03,230.974 2082.59,230.957 2083.16,233.388 2083.73,234.509 2084.3,233.486 2084.87,235.452 2085.44,234.203 2086,233.998 2086.57,235.654 2087.14,234.292 2087.71,233.097 2088.28,232.878 2088.85,232.899 2089.41,232.721 2089.98,232.406 2090.55,233.105 2091.12,237.011 2091.69,239.413 2092.26,238.697 2092.82,238.016 2093.39,237.478 2093.96,234.913 2094.53,234.296 2095.1,236.107 2095.67,236.638 2096.23,234.08 2096.8,233.752 2097.37,233.587 2097.94,234.182 2098.51,232.69 2099.08,233.275 2099.64,233.149 2100.21,230.87 2100.78,228.557 2101.35,226.53 2101.92,225.94 2102.49,225.737 2103.05,226.9 2103.62,226.001 2104.19,226.281 2104.76,227.467 2105.33,227.58 2105.9,228.755 2106.46,227.737 2107.03,228.862 2107.6,228.026 2108.17,231.225 2108.74,232.156 2109.31,230.915 2109.87,232.059 2110.44,232.675 2111.01,233.427 2111.58,232.185 2112.15,233.091 2112.72,233.836 2113.29,232.461 2113.85,232.213 2114.42,234.242 2114.99,235.985 2115.56,236.465 2116.13,237.012 2116.7,237.411 2117.26,234.664 2117.83,232.163 2118.4,228.728 2118.97,228.774 2119.54,227.479 2120.11,227.422 2120.67,225.269 2121.24,225.36 2121.81,226.851 2122.38,225.885 2122.95,226.083 2123.52,226.247 2124.08,225.45 2124.65,226.592 2125.22,226.597 2125.79,225.607 2126.36,227.922 2126.93,228.132 2127.49,229.41 2128.06,228.286 2128.63,227.261 2129.2,227.344 2129.77,228.365 2130.34,229.38 2130.9,229.403 2131.47,230.534 2132.04,230.231 2132.61,228.079 2133.18,227.183 2133.75,227.377 2134.31,227.7 2134.88,227.698 2135.45,227.726 2136.02,229.779 2136.59,230.776 2137.16,229.555 2137.72,228.623 2138.29,228.443 2138.86,229.381 2139.43,228.446 2140,229.569 2140.57,229.375 2141.13,229.486 2141.7,228.338 2142.27,227.262 2142.84,228.416 2143.41,227.431 2143.98,228.708 2144.54,228.67 2145.11,227.957 2145.68,226.319 2146.25,224.552 2146.82,224.737 2147.39,226.207 2147.95,226.155 2148.52,226.521 2149.09,224.9 2149.66,226.545 2150.23,227.87 2150.8,231.048 2151.36,233.172 2151.93,236.171 2152.5,236.624 2153.07,236.023 2153.64,235.55 2154.21,235.231 2154.77,233.884 2155.34,231.668 2155.91,232.534 2156.48,232.237 2157.05,234.226 2157.62,232.799 2158.18,231.47 2158.75,231.245 2159.32,231.063 2159.89,228.982 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.04 ± 0.022\n  with uncertainty of ± 0.0019892633050048658\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01958 ± (0.00453834, 0.00429019) (MC)\n  95% confidence interval: [-4.02778, -4.01051]) (MC)\n  linear error propagation: -4.01944 ± 0.00448927\n  |δ_y| = |0.00268713| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.019575572718046, val_l = 0.008208454846790225, val_u = 0.009060893375354873)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip870\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip871\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip870)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip872\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1155.13 2211.02,1155.13 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1014.81 2211.02,1014.81 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,874.488 2211.02,874.488 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,734.167 2211.02,734.167 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,593.845 2211.02,593.845 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,453.523 2211.02,453.523 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,313.202 2211.02,313.202 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1155.13 365.751,1155.13 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1014.81 365.751,1014.81 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,874.488 365.751,874.488 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,734.167 365.751,734.167 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,593.845 365.751,593.845 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,453.523 365.751,453.523 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,313.202 365.751,313.202 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M298.909 1140.93 Q295.298 1140.93 293.469 1144.5 Q291.664 1148.04 291.664 1155.17 Q291.664 1162.27 293.469 1165.84 Q295.298 1169.38 298.909 1169.38 Q302.543 1169.38 304.349 1165.84 Q306.177 1162.27 306.177 1155.17 Q306.177 1148.04 304.349 1144.5 Q302.543 1140.93 298.909 1140.93 M298.909 1137.23 Q304.719 1137.23 307.775 1141.83 Q310.853 1146.42 310.853 1155.17 Q310.853 1163.89 307.775 1168.5 Q304.719 1173.08 298.909 1173.08 Q293.099 1173.08 290.02 1168.5 Q286.964 1163.89 286.964 1155.17 Q286.964 1146.42 290.02 1141.83 Q293.099 1137.23 298.909 1137.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M259.557 1028.15 L267.196 1028.15 L267.196 1001.79 L258.886 1003.46 L258.886 999.197 L267.15 997.53 L271.826 997.53 L271.826 1028.15 L279.465 1028.15 L279.465 1032.09 L259.557 1032.09 L259.557 1028.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 1000.61 Q295.298 1000.61 293.469 1004.17 Q291.664 1007.72 291.664 1014.84 Q291.664 1021.95 293.469 1025.52 Q295.298 1029.06 298.909 1029.06 Q302.543 1029.06 304.349 1025.52 Q306.177 1021.95 306.177 1014.84 Q306.177 1007.72 304.349 1004.17 Q302.543 1000.61 298.909 1000.61 M298.909 996.905 Q304.719 996.905 307.775 1001.51 Q310.853 1006.09 310.853 1014.84 Q310.853 1023.57 307.775 1028.18 Q304.719 1032.76 298.909 1032.76 Q293.099 1032.76 290.02 1028.18 Q286.964 1023.57 286.964 1014.84 Q286.964 1006.09 290.02 1001.51 Q293.099 996.905 298.909 996.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M262.775 887.833 L279.094 887.833 L279.094 891.768 L257.15 891.768 L257.15 887.833 Q259.812 885.079 264.395 880.449 Q269.002 875.796 270.182 874.454 Q272.428 871.93 273.307 870.194 Q274.21 868.435 274.21 866.745 Q274.21 863.991 272.266 862.255 Q270.344 860.518 267.242 860.518 Q265.043 860.518 262.59 861.282 Q260.159 862.046 257.381 863.597 L257.381 858.875 Q260.205 857.741 262.659 857.162 Q265.113 856.583 267.15 856.583 Q272.52 856.583 275.715 859.268 Q278.909 861.954 278.909 866.444 Q278.909 868.574 278.099 870.495 Q277.312 872.393 275.205 874.986 Q274.627 875.657 271.525 878.875 Q268.423 882.069 262.775 887.833 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 860.287 Q295.298 860.287 293.469 863.852 Q291.664 867.393 291.664 874.523 Q291.664 881.629 293.469 885.194 Q295.298 888.736 298.909 888.736 Q302.543 888.736 304.349 885.194 Q306.177 881.629 306.177 874.523 Q306.177 867.393 304.349 863.852 Q302.543 860.287 298.909 860.287 M298.909 856.583 Q304.719 856.583 307.775 861.19 Q310.853 865.773 310.853 874.523 Q310.853 883.25 307.775 887.856 Q304.719 892.44 298.909 892.44 Q293.099 892.44 290.02 887.856 Q286.964 883.25 286.964 874.523 Q286.964 865.773 290.02 861.19 Q293.099 856.583 298.909 856.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M272.914 732.812 Q276.27 733.53 278.145 735.799 Q280.043 738.067 280.043 741.4 Q280.043 746.516 276.525 749.317 Q273.006 752.118 266.525 752.118 Q264.349 752.118 262.034 751.678 Q259.742 751.261 257.289 750.405 L257.289 745.891 Q259.233 747.025 261.548 747.604 Q263.863 748.183 266.386 748.183 Q270.784 748.183 273.076 746.447 Q275.39 744.711 275.39 741.4 Q275.39 738.345 273.238 736.632 Q271.108 734.896 267.289 734.896 L263.261 734.896 L263.261 731.053 L267.474 731.053 Q270.923 731.053 272.752 729.688 Q274.58 728.299 274.58 725.706 Q274.58 723.044 272.682 721.632 Q270.807 720.197 267.289 720.197 Q265.367 720.197 263.168 720.613 Q260.969 721.03 258.33 721.91 L258.33 717.743 Q260.992 717.002 263.307 716.632 Q265.645 716.262 267.705 716.262 Q273.029 716.262 276.131 718.692 Q279.233 721.1 279.233 725.22 Q279.233 728.09 277.59 730.081 Q275.946 732.049 272.914 732.812 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 719.965 Q295.298 719.965 293.469 723.53 Q291.664 727.072 291.664 734.201 Q291.664 741.308 293.469 744.873 Q295.298 748.414 298.909 748.414 Q302.543 748.414 304.349 744.873 Q306.177 741.308 306.177 734.201 Q306.177 727.072 304.349 723.53 Q302.543 719.965 298.909 719.965 M298.909 716.262 Q304.719 716.262 307.775 720.868 Q310.853 725.451 310.853 734.201 Q310.853 742.928 307.775 747.535 Q304.719 752.118 298.909 752.118 Q293.099 752.118 290.02 747.535 Q286.964 742.928 286.964 734.201 Q286.964 725.451 290.02 720.868 Q293.099 716.262 298.909 716.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M271.594 580.639 L259.789 599.088 L271.594 599.088 L271.594 580.639 M270.367 576.565 L276.247 576.565 L276.247 599.088 L281.177 599.088 L281.177 602.977 L276.247 602.977 L276.247 611.125 L271.594 611.125 L271.594 602.977 L255.992 602.977 L255.992 598.463 L270.367 576.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 579.644 Q295.298 579.644 293.469 583.209 Q291.664 586.75 291.664 593.88 Q291.664 600.986 293.469 604.551 Q295.298 608.093 298.909 608.093 Q302.543 608.093 304.349 604.551 Q306.177 600.986 306.177 593.88 Q306.177 586.75 304.349 583.209 Q302.543 579.644 298.909 579.644 M298.909 575.94 Q304.719 575.94 307.775 580.546 Q310.853 585.13 310.853 593.88 Q310.853 602.607 307.775 607.213 Q304.719 611.796 298.909 611.796 Q293.099 611.796 290.02 607.213 Q286.964 602.607 286.964 593.88 Q286.964 585.13 290.02 580.546 Q293.099 575.94 298.909 575.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M258.793 436.243 L277.15 436.243 L277.15 440.179 L263.076 440.179 L263.076 448.651 Q264.094 448.304 265.113 448.141 Q266.131 447.956 267.15 447.956 Q272.937 447.956 276.316 451.128 Q279.696 454.299 279.696 459.715 Q279.696 465.294 276.224 468.396 Q272.752 471.475 266.432 471.475 Q264.256 471.475 261.988 471.104 Q259.742 470.734 257.335 469.993 L257.335 465.294 Q259.418 466.428 261.641 466.984 Q263.863 467.54 266.34 467.54 Q270.344 467.54 272.682 465.433 Q275.02 463.327 275.02 459.715 Q275.02 456.104 272.682 453.998 Q270.344 451.891 266.34 451.891 Q264.465 451.891 262.59 452.308 Q260.738 452.725 258.793 453.604 L258.793 436.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 439.322 Q295.298 439.322 293.469 442.887 Q291.664 446.429 291.664 453.558 Q291.664 460.665 293.469 464.229 Q295.298 467.771 298.909 467.771 Q302.543 467.771 304.349 464.229 Q306.177 460.665 306.177 453.558 Q306.177 446.429 304.349 442.887 Q302.543 439.322 298.909 439.322 M298.909 435.618 Q304.719 435.618 307.775 440.225 Q310.853 444.808 310.853 453.558 Q310.853 462.285 307.775 466.891 Q304.719 471.475 298.909 471.475 Q293.099 471.475 290.02 466.891 Q286.964 462.285 286.964 453.558 Q286.964 444.808 290.02 440.225 Q293.099 435.618 298.909 435.618 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M269.326 311.338 Q266.178 311.338 264.326 313.491 Q262.497 315.644 262.497 319.394 Q262.497 323.121 264.326 325.297 Q266.178 327.449 269.326 327.449 Q272.474 327.449 274.303 325.297 Q276.154 323.121 276.154 319.394 Q276.154 315.644 274.303 313.491 Q272.474 311.338 269.326 311.338 M278.608 296.686 L278.608 300.945 Q276.849 300.112 275.043 299.672 Q273.261 299.232 271.502 299.232 Q266.872 299.232 264.418 302.357 Q261.988 305.482 261.641 311.801 Q263.006 309.787 265.066 308.723 Q267.127 307.635 269.603 307.635 Q274.812 307.635 277.821 310.806 Q280.853 313.954 280.853 319.394 Q280.853 324.718 277.705 327.935 Q274.557 331.153 269.326 331.153 Q263.33 331.153 260.159 326.57 Q256.988 321.963 256.988 313.236 Q256.988 305.042 260.877 300.181 Q264.766 295.297 271.316 295.297 Q273.076 295.297 274.858 295.644 Q276.664 295.991 278.608 296.686 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M298.909 299 Q295.298 299 293.469 302.565 Q291.664 306.107 291.664 313.236 Q291.664 320.343 293.469 323.908 Q295.298 327.449 298.909 327.449 Q302.543 327.449 304.349 323.908 Q306.177 320.343 306.177 313.236 Q306.177 306.107 304.349 302.565 Q302.543 299 298.909 299 M298.909 295.297 Q304.719 295.297 307.775 299.903 Q310.853 304.487 310.853 313.236 Q310.853 321.963 307.775 326.57 Q304.719 331.153 298.909 331.153 Q293.099 331.153 290.02 326.57 Q286.964 321.963 286.964 313.236 Q286.964 304.487 290.02 299.903 Q293.099 295.297 298.909 295.297 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip872)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1051.74 400.199,956.752 400.786,869.598 401.372,789.751 401.958,716.724 402.545,650.067 403.131,589.363 403.718,534.225 404.304,484.291 404.891,439.224 405.477,398.71 406.063,362.454 406.65,330.181 407.236,370.563 407.823,343.49 408.409,318.863 408.995,297.409 409.582,278.917 410.168,263.191 410.755,250.044 411.341,239.302 411.927,230.799 412.514,224.379 413.1,219.895 413.687,250.645 414.273,249.383 414.86,277.757 415.446,278.477 416.032,280.54 416.619,307.291 417.205,311.504 417.792,337.112 418.378,343.239 418.964,367.896 419.551,375.954 420.137,399.669 420.724,409.197 421.31,446.05 421.896,456.18 422.483,466.641 423.069,477.223 423.656,498.474 424.242,519.221 424.829,530.519 425.415,542.049 426.001,578.543 426.588,596.91 427.174,608.002 427.761,618.811 428.347,643.832 428.933,655.673 429.52,666.927 430.106,684.173 430.693,695.121 431.279,716.727 431.865,727.797 432.452,739.434 433.038,764.4 433.625,778.593 434.211,788.637 434.798,802.546 435.384,816.381 435.97,833.154 436.557,852.805 437.143,868.02 437.73,878.59 438.316,888.88 438.902,905.811 439.489,915.659 440.075,925.309 440.662,940.293 441.248,946.157 441.835,960.306 442.421,965.588 443.007,973.767 443.594,984.615 444.18,989.263 444.767,1001.75 445.353,1006.43 445.939,1015.85 446.526,1020.32 447.112,1029.3 447.699,1035.58 448.285,1046.3 448.871,1063.09 449.458,1066.17 450.044,1071.13 450.631,1076.32 451.217,1079.41 451.804,1082.35 452.39,1085.34 452.976,1094.37 453.563,1102.64 454.149,1107.12 454.736,1109.51 455.322,1112.35 455.908,1120.17 456.495,1129.46 457.081,1133.18 457.668,1141.79 458.254,1148.37 458.84,1151.56 459.427,1156.34 460.013,1158.87 460.6,1161.91 461.186,1161.46 461.773,1165.63 462.359,1165.26 462.945,1166.49 463.532,1167.6 464.118,1170.41 464.705,1172.98 465.291,1174.08 465.877,1175.38 466.464,1176.65 467.05,1179.41 467.637,1182.21 468.223,1183.16 468.809,1188.57 469.396,1189.43 469.982,1193.34 470.569,1194.18 471.155,1198.11 471.742,1200.29 472.328,1202.18 472.914,1204.11 473.501,1210.13 474.087,1210.14 474.674,1210.5 475.26,1213.35 475.846,1213.23 476.433,1213.45 477.019,1212.02 477.606,1216.37 478.192,1216.51 478.778,1223.4 479.365,1223.1 479.951,1224.27 480.538,1222.76 481.124,1226.44 481.711,1226.06 482.297,1227.3 482.883,1228.75 483.47,1229.8 484.056,1228.22 484.643,1226.84 485.229,1228.14 485.815,1227.7 486.402,1228.75 486.988,1232.31 487.575,1233.35 488.161,1231.98 488.748,1231.71 489.334,1232.87 489.92,1232.84 490.507,1233.84 491.093,1232.37 491.68,1232.42 492.266,1232.31 492.852,1232.13 493.439,1231.95 494.025,1230.85 494.612,1232.21 495.198,1235.94 495.784,1235.66 496.371,1235.47 496.957,1239.11 497.544,1241.09 498.13,1242.95 498.717,1242.25 499.303,1244.11 499.889,1244.83 500.476,1245.35 501.062,1244.56 501.649,1244.07 502.235,1243.24 502.821,1243.73 503.408,1245.54 503.994,1246.27 504.581,1245.49 505.167,1244.78 505.753,1244.04 506.34,1245.59 506.926,1244.79 507.513,1244.21 508.099,1243.79 508.686,1244.49 509.272,1244.9 509.858,1245.58 510.445,1248.52 511.031,1246.59 511.618,1247.11 512.204,1248.72 512.79,1248.97 513.377,1249.12 513.963,1247.84 514.55,1247.23 515.136,1246.34 515.722,1246.94 516.309,1248.37 516.895,1247.62 517.482,1247.83 518.068,1249.29 518.655,1248.51 519.241,1248.75 519.827,1249.1 520.414,1250.53 521,1250.5 521.587,1249.53 522.173,1247.25 522.759,1247.61 523.346,1249.14 523.932,1249.27 524.519,1247.08 525.105,1246.23 525.691,1246.37 526.278,1247.91 526.864,1246.95 527.451,1248.42 528.037,1249.95 528.624,1249.96 529.21,1249.11 529.796,1249.25 530.383,1247.16 530.969,1246.18 531.556,1244.26 532.142,1243.55 532.728,1241.56 533.315,1240.9 533.901,1239.16 534.488,1239.63 535.074,1237.99 535.661,1237.62 536.247,1239.75 536.833,1239.21 537.42,1237.49 538.006,1238.26 538.593,1240.26 539.179,1239.71 539.765,1240.27 540.352,1239.58 540.938,1239.12 541.525,1241.01 542.111,1241.37 542.697,1240.47 543.284,1240.05 543.87,1237.31 544.457,1237.94 545.043,1236.27 545.63,1237.09 546.216,1237.75 546.802,1235.88 547.389,1236.41 547.975,1233.72 548.562,1235.54 549.148,1236.24 549.734,1238.13 550.321,1238.49 550.907,1236.68 551.494,1232.62 552.08,1234.5 552.666,1233.01 553.253,1230.32 553.839,1230.1 554.426,1231.1 555.012,1230.97 555.599,1233.09 556.185,1232.8 556.771,1233.75 557.358,1235 557.944,1235.78 558.531,1235.16 559.117,1234.88 559.703,1235.5 560.29,1234.96 560.876,1235.56 561.463,1232.64 562.049,1230.2 562.635,1231.2 563.222,1231.86 563.808,1229.37 564.395,1229.62 564.981,1229.59 565.568,1229.63 566.154,1231.86 566.74,1232.84 567.327,1232.76 567.913,1232.51 568.5,1230.01 569.086,1232.05 569.672,1231.7 570.259,1233.56 570.845,1234.3 571.432,1233.89 572.018,1234.49 572.605,1234.03 573.191,1232.49 573.777,1231.05 574.364,1230.89 574.95,1232.83 575.537,1232.54 576.123,1232.28 576.709,1231.8 577.296,1234 577.882,1232.19 578.469,1233.02 579.055,1233.75 579.641,1233.28 580.228,1232.81 580.814,1234.49 581.401,1233.98 581.987,1233.57 582.574,1234.32 583.16,1233.88 583.746,1234.87 584.333,1231.97 584.919,1229.33 585.506,1227.89 586.092,1226.53 586.678,1226.47 587.265,1229.64 587.851,1228.87 588.438,1229.49 589.024,1229.34 589.61,1227.96 590.197,1229.91 590.783,1230.58 591.37,1231.33 591.956,1233.33 592.543,1236.08 593.129,1236.52 593.715,1236.09 594.302,1231.98 594.888,1232.74 595.475,1233.42 596.061,1232.79 596.647,1229.94 597.234,1228.36 597.82,1228.15 598.407,1229.21 598.993,1228.85 599.579,1230.93 600.166,1229.26 600.752,1231.32 601.339,1231.22 601.925,1228.52 602.512,1230.57 603.098,1229.1 603.684,1227.83 604.271,1227.57 604.857,1225.04 605.444,1222.58 606.03,1220.23 606.616,1215.75 607.203,1216.09 607.789,1220.07 608.376,1221.75 608.962,1218.53 609.548,1218.55 610.135,1221.04 610.721,1218.79 611.308,1220.29 611.894,1220.44 612.481,1220.25 613.067,1221.27 613.653,1220.37 614.24,1220.59 614.826,1222.74 615.413,1222.67 615.999,1224.87 616.585,1223.94 617.172,1222.6 617.758,1221.23 618.345,1219.96 618.931,1222.01 619.518,1222.82 620.104,1226.33 620.69,1226 621.277,1227.87 621.863,1225.26 622.45,1226.32 623.036,1225.94 623.622,1224.63 624.209,1226.75 624.795,1228.68 625.382,1227.88 625.968,1225.25 626.554,1225.03 627.141,1224.92 627.727,1225.93 628.314,1227.94 628.9,1227.52 629.487,1228.16 630.073,1227.7 630.659,1226.2 631.246,1224.64 631.832,1226.8 632.419,1227.66 633.005,1227.29 633.591,1224.72 634.178,1223.54 634.764,1223.34 635.351,1222.99 635.937,1222.48 636.523,1222.05 637.11,1223.06 637.696,1225.23 638.283,1226.09 638.869,1222.39 639.456,1222.09 640.042,1225.19 640.628,1226.85 641.215,1227.44 641.801,1228.23 642.388,1229.01 642.974,1226.2 643.56,1228.06 644.147,1228.59 644.733,1229.22 645.32,1228.61 645.906,1226.99 646.492,1225.22 647.079,1227.03 647.665,1224.51 648.252,1224.24 648.838,1223.02 649.425,1223.95 650.011,1222.4 650.597,1223.54 651.184,1223.44 651.77,1222.04 652.357,1223.12 652.943,1220.44 653.529,1222.71 654.116,1222.17 654.702,1221.64 655.289,1223.74 655.875,1221.27 656.462,1221.38 657.048,1222.3 657.634,1222.17 658.221,1223.09 658.807,1223.82 659.394,1223.42 659.98,1224.4 660.566,1223.83 661.153,1223.47 661.739,1223.34 662.326,1229.11 662.912,1230.99 663.498,1231.22 664.085,1226 664.671,1224.58 665.258,1223.1 665.844,1224 666.431,1221.35 667.017,1221.32 667.603,1221.26 668.19,1217.57 668.776,1217.77 669.363,1218.77 669.949,1219.77 670.535,1219.63 671.122,1218.48 671.708,1220.92 672.295,1221.05 672.881,1221 673.467,1220.74 674.054,1219.27 674.64,1221.54 675.227,1220.27 675.813,1220.11 676.4,1217.55 676.986,1217.56 677.572,1216.61 678.159,1217.96 678.745,1216.76 679.332,1216.81 679.918,1219.27 680.504,1219.4 681.091,1221.89 681.677,1220.71 682.264,1221.29 682.85,1222.27 683.436,1222.04 684.023,1222.78 684.609,1222.36 685.196,1220.69 685.782,1219.65 686.369,1220.66 686.955,1218.07 687.541,1218 688.128,1217.88 688.714,1217.95 689.301,1217.77 689.887,1217.76 690.473,1219.85 691.06,1219.59 691.646,1218.31 692.233,1214.83 692.819,1213.92 693.405,1211.89 693.992,1211.1 694.578,1211.59 695.165,1215.26 695.751,1215.29 696.338,1215.27 696.924,1215.26 697.51,1212.88 698.097,1211.95 698.683,1210.01 699.27,1212.67 699.856,1211.7 700.442,1210.98 701.029,1213.47 701.615,1213.45 702.202,1215.79 702.788,1220.54 703.375,1221.37 703.961,1218.93 704.547,1220.19 705.134,1221.22 705.72,1222.19 706.307,1220.93 706.893,1220.82 707.479,1220.52 708.066,1221.44 708.652,1222.15 709.239,1223.12 709.825,1225.02 710.411,1225.72 710.998,1225.08 711.584,1223.28 712.171,1222.82 712.757,1223.54 713.344,1224.48 713.93,1225.22 714.516,1224.65 715.103,1225.07 715.689,1224.68 716.276,1224.21 716.862,1225 717.448,1224.82 718.035,1225.28 718.621,1224.83 719.208,1226.36 719.794,1224.82 720.38,1224.46 720.967,1221.69 721.553,1223.62 722.14,1221.93 722.726,1221.41 723.313,1221.03 723.899,1220.52 724.485,1220.43 725.072,1219.24 725.658,1220.39 726.245,1220.35 726.831,1222.3 727.417,1221.72 728.004,1220.26 728.59,1218.75 729.177,1220.86 729.763,1224.03 730.349,1224.68 730.936,1225.3 731.522,1223.91 732.109,1225.68 732.695,1226.54 733.282,1224.95 733.868,1223.08 734.454,1223.65 735.041,1222.17 735.627,1222.88 736.214,1222.45 736.8,1216.46 737.386,1214.25 737.973,1211.91 738.559,1214.25 739.146,1215.25 739.732,1216.3 740.318,1216.24 740.905,1214.17 741.491,1215.39 742.078,1212.81 742.664,1212.73 743.251,1212.88 743.837,1215.25 744.423,1216.09 745.01,1215.95 745.596,1218.12 746.183,1215.51 746.769,1216.58 747.355,1217.41 747.942,1212.66 748.528,1211.4 749.115,1211.73 749.701,1211.85 750.288,1211.98 750.874,1208.69 751.46,1207.88 752.047,1205.75 752.633,1207.43 753.22,1205.52 753.806,1205.81 754.392,1206.45 754.979,1208.19 755.565,1208.41 756.152,1208.85 756.738,1211.35 757.324,1210.66 757.911,1209.93 758.497,1207.81 759.084,1208.16 759.67,1208.6 760.257,1209.3 760.843,1203.92 761.429,1206.69 762.016,1207.09 762.602,1207.63 763.189,1208.02 763.775,1209.72 764.361,1208.76 764.948,1209.25 765.534,1208.48 766.121,1208.77 766.707,1211.53 767.293,1210.4 767.88,1211.99 768.466,1212.14 769.053,1212.06 769.639,1212.37 770.226,1213.61 770.812,1214.91 771.398,1215.08 771.985,1215.99 772.571,1217.28 773.158,1219.57 773.744,1216.72 774.33,1217.64 774.917,1216.1 775.503,1217.31 776.09,1217.13 776.676,1215.95 777.262,1218.24 777.849,1219.16 778.435,1218.82 779.022,1219.8 779.608,1218.43 780.195,1217.04 780.781,1213.67 781.367,1214.87 781.954,1216 782.54,1217.13 783.127,1217.06 783.713,1219.19 784.299,1219.92 784.886,1217.37 785.472,1217.58 786.059,1218.49 786.645,1220.5 787.232,1223.39 787.818,1221.85 788.404,1221.37 788.991,1222.07 789.577,1221.74 790.164,1221.4 790.75,1220.98 791.336,1220.85 791.923,1222.92 792.509,1218.98 793.096,1218.8 793.682,1216.2 794.268,1212.99 794.855,1211.82 795.441,1211.77 796.028,1211.9 796.614,1210.8 797.201,1210.84 797.787,1209.59 798.373,1209.88 798.96,1212.51 799.546,1212.39 800.133,1213.54 800.719,1211.12 801.305,1212.42 801.892,1212.65 802.478,1214.03 803.065,1213.18 803.651,1215.5 804.237,1216.43 804.824,1216.17 805.41,1215.95 805.997,1214.78 806.583,1214.99 807.17,1213.77 807.756,1217.29 808.342,1218.17 808.929,1215.6 809.515,1214.72 810.102,1214.84 810.688,1215.98 811.274,1214.53 811.861,1214.16 812.447,1212.15 813.034,1214.7 813.62,1214.9 814.206,1214.93 814.793,1217.04 815.379,1216.82 815.966,1218.88 816.552,1220.93 817.139,1223.99 817.725,1223.36 818.311,1221.54 818.898,1223.49 819.484,1222 820.071,1220.36 820.657,1221.17 821.243,1220.9 821.83,1218.12 822.416,1219.29 823.003,1218.08 823.589,1215.85 824.175,1214.6 824.762,1214.45 825.348,1218.71 825.935,1215.95 826.521,1217.14 827.108,1219.16 827.694,1218.75 828.28,1218.47 828.867,1217 829.453,1214.59 830.04,1211.19 830.626,1211.21 831.212,1211.35 831.799,1212.61 832.385,1210.61 832.972,1209.71 833.558,1208.67 834.145,1210.27 834.731,1211.71 835.317,1211.64 835.904,1211.65 836.49,1211.68 837.077,1212.98 837.663,1213 838.249,1213.08 838.836,1210.73 839.422,1210.91 840.009,1213.19 840.595,1211.06 841.181,1211.24 841.768,1212.4 842.354,1212.4 842.941,1212.41 843.527,1216.07 844.114,1215.99 844.7,1216.9 845.286,1218.92 845.873,1219.82 846.459,1218.41 847.046,1220.32 847.632,1218.69 848.218,1218.29 848.805,1217.9 849.391,1214.42 849.978,1213.1 850.564,1212.97 851.15,1214.09 851.737,1215.07 852.323,1216.18 852.91,1218.57 853.496,1218.52 854.083,1213.85 854.669,1213.51 855.255,1213.43 855.842,1215.39 856.428,1215.16 857.015,1215.18 857.601,1215.25 858.187,1212.63 858.774,1213.7 859.36,1215 859.947,1214.96 860.533,1216.02 861.119,1217.01 861.706,1215.67 862.292,1215.52 862.879,1216.39 863.465,1214.17 864.052,1216.44 864.638,1218.39 865.224,1219.23 865.811,1218.87 866.397,1219.9 866.984,1219.64 867.57,1217.9 868.156,1215.56 868.743,1212.03 869.329,1208.59 869.916,1209.01 870.502,1210.29 871.089,1212.86 871.675,1212.74 872.261,1213.89 872.848,1212.82 873.434,1210.49 874.021,1211.74 874.607,1212.79 875.193,1215.09 875.78,1213.84 876.366,1214.15 876.953,1216.53 877.539,1217.62 878.125,1217.74 878.712,1217.53 879.298,1217.42 879.885,1217.14 880.471,1217.92 881.058,1219.8 881.644,1217.04 882.23,1217.88 882.817,1216.58 883.403,1215.21 883.99,1212.74 884.576,1212.84 885.162,1210.65 885.749,1210.85 886.335,1208.56 886.922,1208.8 887.508,1209.99 888.094,1206.54 888.681,1207.14 889.267,1208.63 889.854,1208.82 890.44,1204.35 891.027,1203.72 891.613,1205.19 892.199,1204.4 892.786,1205.99 893.372,1208.78 893.959,1208.89 894.545,1207.83 895.131,1207.04 895.718,1208.67 896.304,1208.95 896.891,1209.12 897.477,1206.78 898.063,1206.92 898.65,1204.84 899.236,1202.78 899.823,1201.05 900.409,1201.77 900.996,1199.81 901.582,1201.87 902.168,1201.2 902.755,1201.79 903.341,1204.6 903.928,1203.7 904.514,1206.65 905.1,1204.43 905.687,1204.82 906.273,1203.96 906.86,1205.68 907.446,1206.12 908.032,1208.79 908.619,1209.14 909.205,1209.32 909.792,1209.55 910.378,1211.96 910.965,1210.88 911.551,1211.88 912.137,1212.74 912.724,1212.61 913.31,1212.65 913.897,1211.45 914.483,1209.42 915.069,1208.36 915.656,1208.62 916.242,1212.5 916.829,1213.83 917.415,1213.72 918.002,1212.59 918.588,1216.16 919.174,1217.38 919.761,1217.41 920.347,1218.25 920.934,1217.9 921.52,1215.31 922.106,1213.98 922.693,1213.82 923.279,1212.76 923.866,1213.8 924.452,1216.09 925.038,1215.91 925.625,1217.93 926.211,1218.69 926.798,1218.21 927.384,1218.9 927.971,1217.67 928.557,1217.5 929.143,1215.11 929.73,1214.97 930.316,1213.86 930.903,1213.65 931.489,1214.73 932.075,1214.71 932.662,1215.9 933.248,1212.41 933.835,1212.34 934.421,1211.38 935.007,1214.65 935.594,1215.79 936.18,1213.25 936.767,1213.42 937.353,1214.47 937.94,1214.35 938.526,1212.1 939.112,1212.05 939.699,1213.07 940.285,1210.92 940.872,1211.11 941.458,1210.08 942.044,1210.31 942.631,1210.27 943.217,1211.58 943.804,1211.68 944.39,1215.25 944.976,1214.99 945.563,1214.84 946.149,1214.55 946.736,1217.99 947.322,1217.67 947.909,1216.59 948.495,1217.63 949.081,1220.67 949.668,1220.09 950.254,1220.92 950.841,1219.28 951.427,1217.71 952.013,1216.23 952.6,1215.82 953.186,1215.53 953.773,1216.67 954.359,1215.21 954.945,1212.64 955.532,1217.22 956.118,1216.89 956.705,1215.59 957.291,1214.23 957.878,1213.2 958.464,1214.34 959.05,1212.94 959.637,1218.42 960.223,1217.92 960.81,1217.54 961.396,1218.14 961.982,1217.81 962.569,1218.67 963.155,1216.9 963.742,1217.81 964.328,1216.23 964.915,1214.88 965.501,1213.48 966.087,1212.13 966.674,1212.31 967.26,1212.08 967.847,1209.77 968.433,1208.86 969.019,1206.86 969.606,1207.1 970.192,1205.48 970.779,1206.91 971.365,1207.19 971.951,1207.36 972.538,1206.1 973.124,1204.95 973.711,1206.53 974.297,1206.86 974.884,1208.4 975.47,1207.44 976.056,1207.57 976.643,1210.03 977.229,1209.02 977.816,1209.02 978.402,1209.1 978.988,1207.96 979.575,1208.33 980.161,1207.3 980.748,1207.38 981.334,1207.65 981.92,1208.99 982.507,1209.23 983.093,1209.54 983.68,1209.62 984.266,1210.93 984.853,1211.05 985.439,1209.11 986.025,1210.67 986.612,1211.79 987.198,1213.1 987.785,1210.73 988.371,1209.78 988.957,1211.15 989.544,1211.45 990.13,1212.51 990.717,1212.19 991.303,1213.23 991.889,1212.22 992.476,1211.2 993.062,1211.28 993.649,1213.58 994.235,1214.74 994.822,1214.78 995.408,1213.25 995.994,1214.39 996.581,1213.17 997.167,1214.29 997.754,1216.35 998.34,1215 998.926,1214.8 999.513,1214.57 1000.1,1214.36 1000.69,1213.01 1001.27,1212.12 1001.86,1212.22 1002.44,1213.5 1003.03,1212.33 1003.62,1212.21 1004.2,1214.5 1004.79,1214.35 1005.38,1215.41 1005.96,1215.43 1006.55,1214.07 1007.14,1215.05 1007.72,1213.63 1008.31,1214.75 1008.9,1214.77 1009.48,1214.78 1010.07,1215.92 1010.65,1214.53 1011.24,1214.35 1011.83,1211.59 1012.41,1210.46 1013,1210.6 1013.59,1208.26 1014.17,1208.43 1014.76,1208.91 1015.35,1210.37 1015.93,1211.69 1016.52,1210.31 1017.11,1210.44 1017.69,1210.57 1018.28,1210.79 1018.86,1210.75 1019.45,1210.76 1020.04,1209.69 1020.62,1210.96 1021.21,1209.69 1021.8,1208.51 1022.38,1210.25 1022.97,1210.4 1023.56,1212.94 1024.14,1211.93 1024.73,1212.24 1025.32,1211.12 1025.9,1213.38 1026.49,1212.29 1027.07,1211.16 1027.66,1210.96 1028.25,1210.78 1028.83,1211.83 1029.42,1210.89 1030.01,1211.88 1030.59,1212.16 1031.18,1210.86 1031.77,1211.94 1032.35,1212.97 1032.94,1214 1033.52,1217.16 1034.11,1214.42 1034.7,1215.39 1035.28,1212.9 1035.87,1212.85 1036.46,1214.95 1037.04,1213.59 1037.63,1214.55 1038.22,1217.05 1038.8,1216.75 1039.39,1216.42 1039.98,1212.8 1040.56,1216.36 1041.15,1218.42 1041.73,1218.14 1042.32,1220.07 1042.91,1219.72 1043.49,1218.36 1044.08,1220.43 1044.67,1221.21 1045.25,1220.71 1045.84,1220.37 1046.43,1216.36 1047.01,1214.92 1047.6,1215.92 1048.19,1216.87 1048.77,1215.27 1049.36,1212.72 1049.94,1211.65 1050.53,1211.88 1051.12,1212.84 1051.7,1211.71 1052.29,1213.88 1052.88,1212.67 1053.46,1214.85 1054.05,1217.18 1054.64,1217.08 1055.22,1216.77 1055.81,1215.28 1056.39,1211.6 1056.98,1209.44 1057.57,1209.67 1058.15,1208.38 1058.74,1208.7 1059.33,1212.08 1059.91,1214.28 1060.5,1215.41 1061.09,1214.17 1061.67,1214.29 1062.26,1210.63 1062.85,1209.77 1063.43,1211.22 1064.02,1210.33 1064.6,1205.71 1065.19,1208.13 1065.78,1208.48 1066.36,1207.34 1066.95,1206.33 1067.54,1207.88 1068.12,1209.29 1068.71,1209.46 1069.3,1210.98 1069.88,1211.01 1070.47,1213.41 1071.06,1212.19 1071.64,1212.35 1072.23,1216.92 1072.81,1218.08 1073.4,1218.78 1073.99,1220.64 1074.57,1220.19 1075.16,1219.56 1075.75,1215.65 1076.33,1215.3 1076.92,1213.96 1077.51,1214.64 1078.09,1213.52 1078.68,1210.91 1079.26,1209.58 1079.85,1208.55 1080.44,1208.73 1081.02,1210.06 1081.61,1211.28 1082.2,1213.75 1082.78,1211.52 1083.37,1210.48 1083.96,1211.39 1084.54,1213.89 1085.13,1216.26 1085.72,1217.05 1086.3,1215.51 1086.89,1214.09 1087.47,1210.57 1088.06,1210.88 1088.65,1213.16 1089.23,1214.3 1089.82,1214.19 1090.41,1212.93 1090.99,1211.7 1091.58,1211.77 1092.17,1210.51 1092.75,1209.54 1093.34,1208.64 1093.93,1208.72 1094.51,1208.78 1095.1,1209.16 1095.68,1210.44 1096.27,1208.34 1096.86,1210.81 1097.44,1211.08 1098.03,1210.94 1098.62,1210.86 1099.2,1211.02 1099.79,1210.01 1100.38,1211.19 1100.96,1212.21 1101.55,1211.12 1102.14,1213.61 1102.72,1213.59 1103.31,1214.91 1103.89,1213.82 1104.48,1214.74 1105.07,1210.14 1105.65,1211.25 1106.24,1213.46 1106.83,1212.4 1107.41,1212.47 1108,1212.53 1108.59,1214.71 1109.17,1211.14 1109.76,1210.2 1110.34,1210.49 1110.93,1210.66 1111.52,1210.88 1112.1,1210.92 1112.69,1208.63 1113.28,1209.01 1113.86,1210.23 1114.45,1212.5 1115.04,1213.65 1115.62,1212.24 1116.21,1212.5 1116.8,1212.78 1117.38,1211.83 1117.97,1211.8 1118.55,1211.77 1119.14,1211.67 1119.73,1211.88 1120.31,1210.55 1120.9,1210.88 1121.49,1212.29 1122.07,1212.66 1122.66,1214.88 1123.25,1213.71 1123.83,1214.66 1124.42,1215.42 1125.01,1212.88 1125.59,1214.08 1126.18,1214.93 1126.76,1214.85 1127.35,1213.72 1127.94,1211.66 1128.52,1212.78 1129.11,1214.04 1129.7,1213.99 1130.28,1215.07 1130.87,1213.84 1131.46,1213.78 1132.04,1209.35 1132.63,1208.03 1133.21,1210.45 1133.8,1210.64 1134.39,1211.83 1134.97,1211.92 1135.56,1210.57 1136.15,1214.02 1136.73,1214.08 1137.32,1212.88 1137.91,1214.08 1138.49,1213.93 1139.08,1216.13 1139.67,1214.89 1140.25,1213.73 1140.84,1214.67 1141.42,1213.29 1142.01,1213.29 1142.6,1214.38 1143.18,1214.31 1143.77,1214.14 1144.36,1216.16 1144.94,1217.19 1145.53,1215.71 1146.12,1214.31 1146.7,1213.17 1147.29,1212.93 1147.88,1213.96 1148.46,1213.69 1149.05,1213.7 1149.63,1211.39 1150.22,1209.22 1150.81,1208.12 1151.39,1202.43 1151.98,1201.57 1152.57,1201.99 1153.15,1201.21 1153.74,1201.75 1154.33,1199.93 1154.91,1201.64 1155.5,1202.19 1156.09,1203.82 1156.67,1204.17 1157.26,1205.54 1157.84,1206 1158.43,1206.28 1159.02,1207.78 1159.6,1209.11 1160.19,1208.21 1160.78,1207.18 1161.36,1209.66 1161.95,1209.65 1162.54,1207.35 1163.12,1206.34 1163.71,1208.91 1164.29,1207.9 1164.88,1207.93 1165.47,1205.87 1166.05,1204 1166.64,1204.42 1167.23,1203.79 1167.81,1202.91 1168.4,1204.71 1168.99,1203.86 1169.57,1203.46 1170.16,1203.79 1170.75,1204.05 1171.33,1203.39 1171.92,1201.57 1172.5,1203.37 1173.09,1203.66 1173.68,1204.23 1174.26,1201.4 1174.85,1199.88 1175.44,1200.61 1176.02,1202.25 1176.61,1201.74 1177.2,1202.29 1177.78,1201.72 1178.37,1203.6 1178.96,1205.3 1179.54,1204.65 1180.13,1205.33 1180.71,1209.18 1181.3,1209.5 1181.89,1207.28 1182.47,1207.36 1183.06,1207.8 1183.65,1209.57 1184.23,1208.52 1184.82,1211.28 1185.41,1212.53 1185.99,1212.38 1186.58,1213.38 1187.16,1213.29 1187.75,1212.11 1188.34,1213.05 1188.92,1213.3 1189.51,1214.33 1190.1,1216.56 1190.68,1217.33 1191.27,1217.05 1191.86,1216.73 1192.44,1215.45 1193.03,1216.34 1193.62,1214.96 1194.2,1214.57 1194.79,1214.38 1195.37,1216.16 1195.96,1217.07 1196.55,1216.67 1197.13,1215.28 1197.72,1213.9 1198.31,1212.52 1198.89,1214.96 1199.48,1217.05 1200.07,1216.8 1200.65,1215.47 1201.24,1215.24 1201.83,1216.26 1202.41,1216.04 1203,1213.48 1203.58,1213.35 1204.17,1213.36 1204.76,1213.23 1205.34,1215.37 1205.93,1215.05 1206.52,1214.71 1207.1,1214.63 1207.69,1214.42 1208.28,1215.54 1208.86,1214.13 1209.45,1212.73 1210.03,1215.88 1210.62,1214.4 1211.21,1214.21 1211.79,1214.25 1212.38,1215.39 1212.97,1215.18 1213.55,1214.92 1214.14,1218.18 1214.73,1218.82 1215.31,1217.28 1215.9,1216.99 1216.49,1216.84 1217.07,1215.37 1217.66,1214.95 1218.24,1214.46 1218.83,1214.49 1219.42,1214.38 1220,1214.11 1220.59,1212.07 1221.18,1211.93 1221.76,1213.12 1222.35,1213.1 1222.94,1212.05 1223.52,1210.77 1224.11,1210.92 1224.7,1209.69 1225.28,1207.59 1225.87,1207.95 1226.45,1209.33 1227.04,1209.47 1227.63,1210.91 1228.21,1209.94 1228.8,1208.16 1229.39,1208.52 1229.97,1208.82 1230.56,1211.36 1231.15,1212.49 1231.73,1215.98 1232.32,1214.85 1232.91,1215.73 1233.49,1214.27 1234.08,1215.43 1234.66,1214.11 1235.25,1214.1 1235.84,1213.91 1236.42,1214.9 1237.01,1216.81 1237.6,1218.08 1238.18,1217.61 1238.77,1219.27 1239.36,1218.68 1239.94,1217.26 1240.53,1217.89 1241.11,1218.88 1241.7,1217.43 1242.29,1215.95 1242.87,1214.56 1243.46,1214.46 1244.05,1214.46 1244.63,1215.54 1245.22,1216.45 1245.81,1216.3 1246.39,1216.34 1246.98,1220.74 1247.57,1220.49 1248.15,1219.92 1248.74,1218.35 1249.32,1218.02 1249.91,1215.48 1250.5,1214.32 1251.08,1213.15 1251.67,1212.78 1252.26,1215.47 1252.84,1214.34 1253.43,1213.23 1254.02,1212.15 1254.6,1207.62 1255.19,1204.29 1255.78,1205.9 1256.36,1207.37 1256.95,1208.71 1257.53,1208.8 1258.12,1208.81 1258.71,1204.52 1259.29,1205.96 1259.88,1207.37 1260.47,1207.59 1261.05,1205.58 1261.64,1205.97 1262.23,1207.47 1262.81,1207.5 1263.4,1208.93 1263.98,1209.18 1264.57,1212.85 1265.16,1213.89 1265.74,1214.87 1266.33,1216.95 1266.92,1216.6 1267.5,1216.25 1268.09,1212.62 1268.68,1213.56 1269.26,1212.33 1269.85,1211.91 1270.44,1213.11 1271.02,1211.78 1271.61,1212.86 1272.19,1214.11 1272.78,1213.89 1273.37,1213.67 1273.95,1214.72 1274.54,1213.48 1275.13,1212.12 1275.71,1211.86 1276.3,1213.04 1276.89,1215.1 1277.47,1216.16 1278.06,1217.08 1278.65,1216.94 1279.23,1217.43 1279.82,1216.92 1280.4,1218.96 1280.99,1219.73 1281.58,1218.27 1282.16,1221.44 1282.75,1218.79 1283.34,1213.71 1283.92,1214.54 1284.51,1215.39 1285.1,1214.02 1285.68,1216.13 1286.27,1212.82 1286.86,1214.89 1287.44,1215.84 1288.03,1213.48 1288.61,1214.55 1289.2,1215.38 1289.79,1211.71 1290.37,1214.23 1290.96,1212.79 1291.55,1215.06 1292.13,1214.7 1292.72,1213.5 1293.31,1214.51 1293.89,1217.58 1294.48,1217.35 1295.06,1214.42 1295.65,1215.39 1296.24,1213.84 1296.82,1213.84 1297.41,1213.61 1298,1215.89 1298.58,1217.06 1299.17,1218.92 1299.76,1219.43 1300.34,1218.78 1300.93,1217.33 1301.52,1216.98 1302.1,1215.64 1302.69,1215.44 1303.27,1214.96 1303.86,1214.5 1304.45,1215.67 1305.03,1213.26 1305.62,1213.36 1306.21,1212.42 1306.79,1212.38 1307.38,1212.17 1307.97,1212 1308.55,1211.88 1309.14,1211.89 1309.73,1212.96 1310.31,1214.05 1310.9,1214.13 1311.48,1214.85 1312.07,1212.48 1312.66,1210.06 1313.24,1210.2 1313.83,1209.23 1314.42,1210.76 1315,1214.66 1315.59,1215.76 1316.18,1215.56 1316.76,1213.08 1317.35,1208.44 1317.93,1209.85 1318.52,1208.79 1319.11,1205.46 1319.69,1206.84 1320.28,1206.19 1320.87,1206.58 1321.45,1207.06 1322.04,1210.76 1322.63,1209.64 1323.21,1208.53 1323.8,1209.73 1324.39,1209.89 1324.97,1208.84 1325.56,1207.97 1326.14,1206.84 1326.73,1206.06 1327.32,1206.37 1327.9,1208.95 1328.49,1208.92 1329.08,1210.11 1329.66,1206.91 1330.25,1208.19 1330.84,1210.32 1331.42,1211.6 1332.01,1211.36 1332.6,1210.03 1333.18,1210.24 1333.77,1212.64 1334.35,1212.4 1334.94,1213.59 1335.53,1213.56 1336.11,1211.07 1336.7,1209.79 1337.29,1213.38 1337.87,1210.77 1338.46,1211.05 1339.05,1212.32 1339.63,1212.34 1340.22,1212.44 1340.8,1211.26 1341.39,1212.62 1341.98,1212.5 1342.56,1212.69 1343.15,1210.5 1343.74,1210.71 1344.32,1210.66 1344.91,1210.86 1345.5,1214.27 1346.08,1215.26 1346.67,1215.18 1347.26,1211.6 1347.84,1211.53 1348.43,1212.65 1349.01,1213.91 1349.6,1211.6 1350.19,1211.6 1350.77,1210.73 1351.36,1210.8 1351.95,1210.74 1352.53,1210.84 1353.12,1211.95 1353.71,1214.12 1354.29,1215.11 1354.88,1217.11 1355.47,1216.81 1356.05,1215.48 1356.64,1214.06 1357.22,1214.06 1357.81,1214.16 1358.4,1214.17 1358.98,1214.06 1359.57,1213.87 1360.16,1213.51 1360.74,1214.47 1361.33,1213.13 1361.92,1211.71 1362.5,1211.73 1363.09,1210.28 1363.68,1209.01 1364.26,1208.08 1364.85,1208.49 1365.43,1210.91 1366.02,1209.79 1366.61,1209.82 1367.19,1208.6 1367.78,1209.01 1368.37,1210.13 1368.95,1210 1369.54,1208.92 1370.13,1209.32 1370.71,1207.19 1371.3,1207.53 1371.88,1207.67 1372.47,1206.56 1373.06,1204.58 1373.64,1202.79 1374.23,1202.27 1374.82,1202.85 1375.4,1202.16 1375.99,1206.16 1376.58,1209.83 1377.16,1208.81 1377.75,1209.91 1378.34,1210.18 1378.92,1211.13 1379.51,1211.02 1380.09,1211.07 1380.68,1213.34 1381.27,1211.18 1381.85,1209.18 1382.44,1211.76 1383.03,1210.59 1383.61,1211.71 1384.2,1211.89 1384.79,1210.53 1385.37,1210.31 1385.96,1211.7 1386.55,1211.72 1387.13,1211.6 1387.72,1211.83 1388.3,1210.69 1388.89,1209.74 1389.48,1210.11 1390.06,1207.91 1390.65,1209.11 1391.24,1209.34 1391.82,1209.56 1392.41,1210.68 1393,1210.81 1393.58,1212.29 1394.17,1212.14 1394.75,1213.25 1395.34,1213.01 1395.93,1210.71 1396.51,1210.84 1397.1,1213.31 1397.69,1213.29 1398.27,1213.32 1398.86,1214.4 1399.45,1212.03 1400.03,1214.46 1400.62,1216.8 1401.21,1219.72 1401.79,1218.28 1402.38,1217.95 1402.96,1216.35 1403.55,1214.87 1404.14,1215.84 1404.72,1215.47 1405.31,1213.82 1405.9,1214.95 1406.48,1216.99 1407.07,1214.45 1407.66,1216.66 1408.24,1216.52 1408.83,1211.67 1409.42,1212.83 1410,1211.38 1410.59,1211.64 1411.17,1209.34 1411.76,1209.44 1412.35,1209.49 1412.93,1211.83 1413.52,1210.79 1414.11,1209.61 1414.69,1209.84 1415.28,1209.8 1415.87,1209.97 1416.45,1207.61 1417.04,1206.74 1417.63,1206.81 1418.21,1209.38 1418.8,1210.9 1419.38,1210.98 1419.97,1207.37 1420.56,1206.33 1421.14,1207.92 1421.73,1206.92 1422.32,1209.61 1422.9,1209.84 1423.49,1210.98 1424.08,1211.95 1424.66,1214.06 1425.25,1212.62 1425.83,1213.76 1426.42,1213.63 1427.01,1216.01 1427.59,1214.58 1428.18,1214.41 1428.77,1214.02 1429.35,1213.84 1429.94,1214.93 1430.53,1212.71 1431.11,1211.29 1431.7,1211.19 1432.29,1212.46 1432.87,1212.67 1433.46,1213.5 1434.04,1212.03 1434.63,1213.04 1435.22,1213.97 1435.8,1212.75 1436.39,1212.68 1436.98,1210.31 1437.56,1210.54 1438.15,1208.18 1438.74,1208.19 1439.32,1210.69 1439.91,1209.49 1440.5,1209.37 1441.08,1211.73 1441.67,1212.8 1442.25,1213.85 1442.84,1211.47 1443.43,1210.16 1444.01,1210.22 1444.6,1212.49 1445.19,1212.24 1445.77,1213.14 1446.36,1214.3 1446.95,1215.43 1447.53,1216.47 1448.12,1216.18 1448.7,1215.02 1449.29,1214.89 1449.88,1214.38 1450.46,1211.79 1451.05,1212.64 1451.64,1211.49 1452.22,1210.55 1452.81,1211.94 1453.4,1213.07 1453.98,1215.52 1454.57,1216.62 1455.16,1217.23 1455.74,1217.94 1456.33,1215.51 1456.91,1212.99 1457.5,1212.95 1458.09,1212.98 1458.67,1211.66 1459.26,1210.57 1459.85,1211.94 1460.43,1211.98 1461.02,1213.11 1461.61,1210.56 1462.19,1210.55 1462.78,1210.76 1463.37,1210.89 1463.95,1212.04 1464.54,1214.08 1465.12,1211.48 1465.71,1210.33 1466.3,1208.12 1466.88,1208.35 1467.47,1208.78 1468.06,1210.34 1468.64,1211.29 1469.23,1213.75 1469.82,1213.62 1470.4,1213.49 1470.99,1213.31 1471.57,1214.21 1472.16,1216.41 1472.75,1216.97 1473.33,1214.14 1473.92,1213.91 1474.51,1212.58 1475.09,1211.5 1475.68,1210.34 1476.27,1210.44 1476.85,1210.25 1477.44,1211.21 1478.03,1213.39 1478.61,1208.82 1479.2,1206.92 1479.78,1208.26 1480.37,1208.61 1480.96,1208.75 1481.54,1208.96 1482.13,1209.2 1482.72,1205.85 1483.3,1207.42 1483.89,1207.91 1484.48,1205.79 1485.06,1205 1485.65,1204.15 1486.24,1205.83 1486.82,1204.79 1487.41,1202.74 1487.99,1205.7 1488.58,1205.77 1489.17,1206.2 1489.75,1206.48 1490.34,1207.05 1490.93,1207.33 1491.51,1207.66 1492.1,1207.9 1492.69,1206.64 1493.27,1206.01 1493.86,1205.05 1494.45,1205.49 1495.03,1203.72 1495.62,1204.21 1496.2,1203.63 1496.79,1205.31 1497.38,1205.55 1497.96,1205.84 1498.55,1206.09 1499.14,1205.43 1499.72,1204.51 1500.31,1206.14 1500.9,1206.44 1501.48,1204.62 1502.07,1204.12 1502.65,1205.43 1503.24,1204.66 1503.83,1205.28 1504.41,1206.72 1505,1209.32 1505.59,1209.32 1506.17,1211.84 1506.76,1211.66 1507.35,1212.9 1507.93,1216.15 1508.52,1215.86 1509.11,1215.73 1509.69,1214.47 1510.28,1216.64 1510.86,1215.17 1511.45,1213.86 1512.04,1213.75 1512.62,1211.42 1513.21,1209.48 1513.8,1212.01 1514.38,1209.71 1514.97,1212.27 1515.56,1212.48 1516.14,1212.51 1516.73,1214.85 1517.32,1214.72 1517.9,1215.57 1518.49,1217.88 1519.07,1218.76 1519.66,1219.57 1520.25,1221.64 1520.83,1218.95 1521.42,1217.48 1522.01,1217.15 1522.59,1219.41 1523.18,1217.82 1523.77,1215.3 1524.35,1215.44 1524.94,1215.15 1525.52,1218.42 1526.11,1215.87 1526.7,1214.47 1527.28,1216.49 1527.87,1214.73 1528.46,1214.51 1529.04,1214.43 1529.63,1214.25 1530.22,1215.24 1530.8,1215.99 1531.39,1214.91 1531.98,1217.96 1532.56,1216.5 1533.15,1217.24 1533.73,1217.03 1534.32,1216.77 1534.91,1217.57 1535.49,1214.99 1536.08,1216.9 1536.67,1217.68 1537.25,1219.66 1537.84,1220.26 1538.43,1220.95 1539.01,1217.08 1539.6,1216.86 1540.19,1214.49 1540.77,1214.18 1541.36,1212.85 1541.94,1210.34 1542.53,1212.79 1543.12,1213.95 1543.7,1211.29 1544.29,1212.41 1544.88,1211.03 1545.46,1211.08 1546.05,1212.3 1546.64,1211.07 1547.22,1212.18 1547.81,1211.18 1548.4,1209.97 1548.98,1208.87 1549.57,1207.88 1550.15,1208.26 1550.74,1209.35 1551.33,1209.53 1551.91,1209.65 1552.5,1210.92 1553.09,1210.92 1553.67,1210.78 1554.26,1210.77 1554.85,1211 1555.43,1208.62 1556.02,1208.9 1556.6,1208.1 1557.19,1208.07 1557.78,1206.07 1558.36,1207.52 1558.95,1208.03 1559.54,1208.09 1560.12,1206.98 1560.71,1209.6 1561.3,1209.93 1561.88,1211.04 1562.47,1212.05 1563.06,1213.23 1563.64,1211.93 1564.23,1207.46 1564.81,1209.08 1565.4,1207.94 1565.99,1206.85 1566.57,1209.26 1567.16,1210.67 1567.75,1208.32 1568.33,1207.17 1568.92,1207.35 1569.51,1208.56 1570.09,1209.81 1570.68,1208.76 1571.27,1208.86 1571.85,1209 1572.44,1210.24 1573.02,1210.28 1573.61,1210.22 1574.2,1210.12 1574.78,1212.62 1575.37,1212.31 1575.96,1212.17 1576.54,1212.35 1577.13,1212.41 1577.72,1208.86 1578.3,1210.08 1578.89,1209.87 1579.47,1212.11 1580.06,1212.04 1580.65,1209.72 1581.23,1211.94 1581.82,1210.69 1582.41,1213.1 1582.99,1210.6 1583.58,1210.43 1584.17,1208.04 1584.75,1209.35 1585.34,1208.25 1585.93,1206 1586.51,1207.5 1587.1,1206.63 1587.68,1207.97 1588.27,1206.18 1588.86,1207.19 1589.44,1207.52 1590.03,1209.92 1590.62,1210.15 1591.2,1211.64 1591.79,1212.93 1592.38,1210.53 1592.96,1211.63 1593.55,1214 1594.14,1215.02 1594.72,1215.91 1595.31,1217.95 1595.89,1214.17 1596.48,1209.55 1597.07,1210.86 1597.65,1211.02 1598.24,1211.26 1598.83,1211.46 1599.41,1210.38 1600,1210.2 1600.59,1208.95 1601.17,1211.11 1601.76,1211.16 1602.34,1209.9 1602.93,1208.99 1603.52,1208.14 1604.1,1206.11 1604.69,1206.38 1605.28,1206.62 1605.86,1204.6 1606.45,1203.68 1607.04,1201.89 1607.62,1203.44 1608.21,1204.05 1608.8,1205.5 1609.38,1205.7 1609.97,1207.2 1610.55,1209.72 1611.14,1211.99 1611.73,1213.13 1612.31,1213.24 1612.9,1210.88 1613.49,1210.82 1614.07,1209.55 1614.66,1208.58 1615.25,1211 1615.83,1212.11 1616.42,1208.75 1617.01,1208 1617.59,1208.38 1618.18,1207.51 1618.76,1210.05 1619.35,1208.86 1619.94,1207.57 1620.52,1209.72 1621.11,1207.59 1621.7,1206.61 1622.28,1208.1 1622.87,1207.14 1623.46,1205.21 1624.04,1205.27 1624.63,1205.56 1625.22,1205.66 1625.8,1208.32 1626.39,1209.69 1626.97,1209.71 1627.56,1207.62 1628.15,1208.99 1628.73,1208.95 1629.32,1210.15 1629.91,1210.03 1630.49,1212.47 1631.08,1213.74 1631.67,1212.47 1632.25,1212.15 1632.84,1214.17 1633.42,1214.32 1634.01,1213.99 1634.6,1213.74 1635.18,1215.64 1635.77,1214.34 1636.36,1214.21 1636.94,1214.18 1637.53,1212.75 1638.12,1213.82 1638.7,1217.3 1639.29,1215.77 1639.88,1214.74 1640.46,1215.84 1641.05,1216.73 1641.63,1215.34 1642.22,1216.05 1642.81,1215.95 1643.39,1216.89 1643.98,1217.61 1644.57,1217.3 1645.15,1219.39 1645.74,1217.64 1646.33,1217.21 1646.91,1216.88 1647.5,1218.88 1648.09,1217.31 1648.67,1215.87 1649.26,1216.8 1649.84,1214.24 1650.43,1215.03 1651.02,1214.75 1651.6,1214.71 1652.19,1214.65 1652.78,1213.22 1653.36,1214.23 1653.95,1215.49 1654.54,1215.29 1655.12,1213.88 1655.71,1213.8 1656.29,1213.88 1656.88,1212.72 1657.47,1215.18 1658.05,1217.26 1658.64,1214.88 1659.23,1212.4 1659.81,1213.41 1660.4,1213.43 1660.99,1212.26 1661.57,1213.4 1662.16,1214.62 1662.75,1216.68 1663.33,1216.58 1663.92,1215.09 1664.5,1213.83 1665.09,1213.75 1665.68,1213.33 1666.26,1213.39 1666.85,1213.2 1667.44,1213.04 1668.02,1212.77 1668.61,1214.99 1669.2,1212.24 1669.78,1213.19 1670.37,1212 1670.96,1211.82 1671.54,1215.3 1672.13,1216.31 1672.71,1214.85 1673.3,1214.65 1673.89,1210.88 1674.47,1209.75 1675.06,1211.97 1675.65,1211.88 1676.23,1212.16 1676.82,1210.79 1677.41,1207.32 1677.99,1207.55 1678.58,1204.57 1679.17,1205.96 1679.75,1204.14 1680.34,1202.22 1680.92,1204.95 1681.51,1207.46 1682.1,1208.94 1682.68,1211.39 1683.27,1209.3 1683.86,1210.68 1684.44,1210.85 1685.03,1209.94 1685.62,1207.96 1686.2,1208.11 1686.79,1208.21 1687.37,1207.5 1687.96,1207.39 1688.55,1208.65 1689.13,1208.85 1689.72,1208.92 1690.31,1210.13 1690.89,1212.49 1691.48,1212.5 1692.07,1212.26 1692.65,1212.27 1693.24,1212.38 1693.83,1211.31 1694.41,1210.39 1695,1209.32 1695.58,1207.19 1696.17,1208.73 1696.76,1209.81 1697.34,1208.93 1697.93,1207.94 1698.52,1209.33 1699.1,1209.47 1699.69,1207.49 1700.28,1207.86 1700.86,1211.53 1701.45,1212.71 1702.04,1212.58 1702.62,1213.72 1703.21,1212.66 1703.79,1212.67 1704.38,1212.73 1704.97,1210.47 1705.55,1208.33 1706.14,1207.44 1706.73,1206.6 1707.31,1206.8 1707.9,1206.73 1708.49,1209.41 1709.07,1211.57 1709.66,1212.51 1710.24,1212.48 1710.83,1212.48 1711.42,1212.39 1712,1213.66 1712.59,1213.91 1713.18,1217.01 1713.76,1219.13 1714.35,1218.81 1714.94,1219.65 1715.52,1217.14 1716.11,1215.7 1716.7,1212.05 1717.28,1212.35 1717.87,1215.8 1718.45,1215.59 1719.04,1215.46 1719.63,1215.09 1720.21,1219.51 1720.8,1216.81 1721.39,1217.63 1721.97,1217.33 1722.56,1216.77 1723.15,1216.44 1723.73,1217.52 1724.32,1218.69 1724.91,1218.12 1725.49,1216.61 1726.08,1221.07 1726.66,1219.52 1727.25,1216.8 1727.84,1217.66 1728.42,1218.42 1729.01,1218.16 1729.6,1217.85 1730.18,1217.61 1730.77,1214.88 1731.36,1212.73 1731.94,1212.56 1732.53,1212.55 1733.11,1213.96 1733.7,1212.87 1734.29,1212.72 1734.87,1213.81 1735.46,1213.7 1736.05,1211.49 1736.63,1211.64 1737.22,1213.78 1737.81,1213.38 1738.39,1210.91 1738.98,1211.96 1739.57,1208.6 1740.15,1209.83 1740.74,1208.88 1741.32,1208.8 1741.91,1209.06 1742.5,1210.07 1743.08,1211.14 1743.67,1211.02 1744.26,1212.13 1744.84,1210.81 1745.43,1210.7 1746.02,1210.68 1746.6,1210.7 1747.19,1211.7 1747.78,1208.26 1748.36,1204.92 1748.95,1204.18 1749.53,1203.53 1750.12,1203.94 1750.71,1204.44 1751.29,1204.99 1751.88,1208.72 1752.47,1208.77 1753.05,1207.84 1753.64,1202.4 1754.23,1204.02 1754.81,1204.54 1755.4,1204.89 1755.99,1207.21 1756.57,1206.43 1757.16,1207.93 1757.74,1207.19 1758.33,1208.35 1758.92,1207.41 1759.5,1208.89 1760.09,1207.86 1760.68,1206.9 1761.26,1207.21 1761.85,1207.57 1762.44,1207.87 1763.02,1208.05 1763.61,1205.9 1764.19,1206.07 1764.78,1206.32 1765.37,1207.81 1765.95,1209.14 1766.54,1208.11 1767.13,1208.53 1767.71,1208.29 1768.3,1208.65 1768.89,1211.09 1769.47,1211.17 1770.06,1211.26 1770.65,1212.5 1771.23,1212.53 1771.82,1212.65 1772.4,1211.77 1772.99,1209.23 1773.58,1209.24 1774.16,1209.42 1774.75,1210.69 1775.34,1209.38 1775.92,1210.79 1776.51,1212.04 1777.1,1215.31 1777.68,1214.03 1778.27,1215.15 1778.86,1216.01 1779.44,1215.71 1780.03,1215.45 1780.61,1212.75 1781.2,1212.81 1781.79,1214.99 1782.37,1214.81 1782.96,1213.23 1783.55,1216.7 1784.13,1218.79 1784.72,1220.62 1785.31,1218.66 1785.89,1218.3 1786.48,1221.32 1787.06,1220.95 1787.65,1219.44 1788.24,1216.87 1788.82,1216.58 1789.41,1217.39 1790,1217.08 1790.58,1215.76 1791.17,1218.86 1791.76,1218.53 1792.34,1219.42 1792.93,1219.04 1793.52,1216.31 1794.1,1216.27 1794.69,1216.95 1795.27,1217.88 1795.86,1216.24 1796.45,1216.9 1797.03,1213.31 1797.62,1214.37 1798.21,1217.7 1798.79,1216.33 1799.38,1217.35 1799.97,1218.3 1800.55,1217.93 1801.14,1217.56 1801.73,1215.91 1802.31,1213.14 1802.9,1213.12 1803.48,1211.95 1804.07,1211.72 1804.66,1210.23 1805.24,1211.61 1805.83,1211.74 1806.42,1210.44 1807,1210.47 1807.59,1210.61 1808.18,1210.71 1808.76,1213.02 1809.35,1210.73 1809.94,1207.34 1810.52,1206.44 1811.11,1207.95 1811.69,1209.18 1812.28,1210.43 1812.87,1210.66 1813.45,1208.53 1814.04,1209.98 1814.63,1212.54 1815.21,1213.53 1815.8,1212.27 1816.39,1210.96 1816.97,1206.53 1817.56,1206.71 1818.14,1209.18 1818.73,1208.03 1819.32,1207.3 1819.9,1211.04 1820.49,1209.72 1821.08,1209.87 1821.66,1212.31 1822.25,1213.48 1822.84,1211.06 1823.42,1215.78 1824.01,1216.75 1824.6,1217.58 1825.18,1213.91 1825.77,1213.79 1826.35,1216.17 1826.94,1216.09 1827.53,1218.1 1828.11,1216.82 1828.7,1212.06 1829.29,1209.69 1829.87,1208.85 1830.46,1207.66 1831.05,1207.92 1831.63,1204.55 1832.22,1206.37 1832.81,1206.8 1833.39,1208.31 1833.98,1206.01 1834.56,1206.22 1835.15,1208.76 1835.74,1211.2 1836.32,1210.23 1836.91,1210.38 1837.5,1209.27 1838.08,1209.36 1838.67,1206.17 1839.26,1207.63 1839.84,1211.15 1840.43,1210.04 1841.01,1207.67 1841.6,1208.14 1842.19,1207.4 1842.77,1209.91 1843.36,1212.35 1843.95,1215.6 1844.53,1215.4 1845.12,1214.86 1845.71,1214.89 1846.29,1215.84 1846.88,1215.54 1847.47,1214.21 1848.05,1214.04 1848.64,1213.98 1849.22,1212.51 1849.81,1216.01 1850.4,1215.79 1850.98,1215.53 1851.57,1214.35 1852.16,1215.49 1852.74,1215.32 1853.33,1214.01 1853.92,1215.01 1854.5,1215.92 1855.09,1213.55 1855.68,1213.65 1856.26,1214.62 1856.85,1214.47 1857.43,1212.23 1858.02,1213.45 1858.61,1214.35 1859.19,1214.25 1859.78,1214.05 1860.37,1213.89 1860.95,1214.68 1861.54,1214.4 1862.13,1214.17 1862.71,1212.8 1863.3,1212.92 1863.88,1210.23 1864.47,1210.48 1865.06,1211.44 1865.64,1209.42 1866.23,1211.63 1866.82,1210.45 1867.4,1209.42 1867.99,1209.53 1868.58,1209.65 1869.16,1209.84 1869.75,1210.02 1870.34,1210.24 1870.92,1211.42 1871.51,1211.7 1872.09,1212.91 1872.68,1211.89 1873.27,1208.51 1873.85,1208.9 1874.44,1211.35 1875.03,1212.33 1875.61,1212.21 1876.2,1212.19 1876.79,1212.19 1877.37,1212.33 1877.96,1212.18 1878.55,1211.12 1879.13,1212.25 1879.72,1211.16 1880.3,1209.07 1880.89,1206.73 1881.48,1209.1 1882.06,1209.14 1882.65,1209.36 1883.24,1210.4 1883.82,1209.44 1884.41,1208.51 1885,1208.53 1885.58,1210.29 1886.17,1210.42 1886.76,1210.37 1887.34,1210.46 1887.93,1211.62 1888.51,1211.7 1889.1,1212.86 1889.69,1212.66 1890.27,1210.34 1890.86,1211.31 1891.45,1211.41 1892.03,1209.25 1892.62,1209.39 1893.21,1210.77 1893.79,1212.07 1894.38,1212.13 1894.96,1210.89 1895.55,1210.75 1896.14,1210.67 1896.72,1210.73 1897.31,1209.94 1897.9,1210.02 1898.48,1209.03 1899.07,1209.06 1899.66,1210.38 1900.24,1212.64 1900.83,1210.37 1901.42,1210.25 1902,1210.26 1902.59,1209.13 1903.17,1210.25 1903.76,1209.43 1904.35,1209.79 1904.93,1211.08 1905.52,1211.18 1906.11,1211.29 1906.69,1212.4 1907.28,1212.25 1907.87,1212 1908.45,1214.1 1909.04,1214.1 1909.63,1213.81 1910.21,1213.8 1910.8,1214.81 1911.38,1213.61 1911.97,1213.33 1912.56,1211.09 1913.14,1210.9 1913.73,1211.92 1914.32,1209.54 1914.9,1210.78 1915.49,1212.36 1916.08,1212.08 1916.66,1213.16 1917.25,1212.92 1917.83,1211.65 1918.42,1211.57 1919.01,1210.59 1919.59,1212.15 1920.18,1212.43 1920.77,1212.12 1921.35,1214.44 1921.94,1215.43 1922.53,1216.22 1923.11,1216.01 1923.7,1215.6 1924.29,1216.59 1924.87,1215.03 1925.46,1211.42 1926.04,1208.79 1926.63,1208.92 1927.22,1206.71 1927.8,1210.39 1928.39,1210.65 1928.98,1209.54 1929.56,1209.72 1930.15,1207.61 1930.74,1210.07 1931.32,1207.83 1931.91,1207.26 1932.5,1205.09 1933.08,1206.77 1933.67,1208.3 1934.25,1208.44 1934.84,1207.61 1935.43,1206.9 1936.01,1208.22 1936.6,1207.1 1937.19,1208.36 1937.77,1206.19 1938.36,1207.64 1938.95,1208.89 1939.53,1211.28 1940.12,1211.25 1940.71,1211.31 1941.29,1210.05 1941.88,1209.89 1942.46,1209.84 1943.05,1209.96 1943.64,1209.02 1944.22,1208.07 1944.81,1211.81 1945.4,1212.69 1945.98,1213.93 1946.57,1213.89 1947.16,1214.85 1947.74,1213.42 1948.33,1216.77 1948.91,1215.18 1949.5,1214.07 1950.09,1212.65 1950.67,1211.37 1951.26,1211.57 1951.85,1211.64 1952.43,1209.57 1953.02,1209.49 1953.61,1209.56 1954.19,1211.93 1954.78,1212.99 1955.37,1210.69 1955.95,1209.53 1956.54,1213.11 1957.12,1214.3 1957.71,1215.37 1958.3,1216.52 1958.88,1217.33 1959.47,1217.19 1960.06,1215.7 1960.64,1215.57 1961.23,1215.48 1961.82,1215.32 1962.4,1215.1 1962.99,1217.02 1963.58,1216.65 1964.16,1216.28 1964.75,1216.19 1965.33,1215.84 1965.92,1215.63 1966.51,1214.05 1967.09,1215.04 1967.68,1214.94 1968.27,1212.43 1968.85,1212.31 1969.44,1211.08 1970.03,1213.48 1970.61,1213.25 1971.2,1216.53 1971.78,1216.26 1972.37,1215.92 1972.96,1214.64 1973.54,1215.66 1974.13,1210.88 1974.72,1211.1 1975.3,1211.24 1975.89,1211.25 1976.48,1212.31 1977.06,1213.38 1977.65,1216.8 1978.24,1216.42 1978.82,1213.76 1979.41,1214.71 1979.99,1214.25 1980.58,1214.07 1981.17,1214.15 1981.75,1212.75 1982.34,1211.62 1982.93,1212.76 1983.51,1214.21 1984.1,1215.42 1984.69,1212.72 1985.27,1212.6 1985.86,1211.11 1986.45,1208.79 1987.03,1206.63 1987.62,1206.87 1988.2,1205.95 1988.79,1206.25 1989.38,1206.73 1989.96,1205.81 1990.55,1204.89 1991.14,1206.32 1991.72,1205.36 1992.31,1206.78 1992.9,1207.06 1993.48,1208.34 1994.07,1209.65 1994.65,1209.92 1995.24,1208.84 1995.83,1209.13 1996.41,1207.88 1997,1206.86 1997.59,1210.56 1998.17,1213.99 1998.76,1211.6 1999.35,1212.51 1999.93,1212.56 2000.52,1211.32 2001.11,1210.22 2001.69,1211.27 2002.28,1212.37 2002.86,1214.59 2003.45,1211.99 2004.04,1208.44 2004.62,1208.8 2005.21,1207.95 2005.8,1209.31 2006.38,1208.48 2006.97,1209.63 2007.56,1209.7 2008.14,1212.04 2008.73,1213.13 2009.32,1213.25 2009.9,1214.4 2010.49,1214.32 2011.07,1209.69 2011.66,1208.54 2012.25,1210.96 2012.83,1213.24 2013.42,1215.51 2014.01,1216.52 2014.59,1218.55 2015.18,1216.93 2015.77,1217.66 2016.35,1216.24 2016.94,1214.7 2017.53,1213.46 2018.11,1214.48 2018.7,1214.57 2019.28,1215.39 2019.87,1214.1 2020.46,1214.15 2021.04,1214.2 2021.63,1211.82 2022.22,1211.98 2022.8,1209.7 2023.39,1210.07 2023.98,1210.14 2024.56,1209.38 2025.15,1208.17 2025.73,1209.55 2026.32,1209.77 2026.91,1209.85 2027.49,1211.04 2028.08,1212.33 2028.67,1212.25 2029.25,1210.03 2029.84,1207.89 2030.43,1207.92 2031.01,1207.81 2031.6,1209.46 2032.19,1209.65 2032.77,1206.5 2033.36,1207.98 2033.94,1211.42 2034.53,1213.66 2035.12,1213.81 2035.7,1214.95 2036.29,1215 2036.88,1214.91 2037.46,1216.03 2038.05,1210.94 2038.64,1210.73 2039.22,1211.98 2039.81,1212.12 2040.4,1214.35 2040.98,1215.53 2041.57,1215.52 2042.15,1216.45 2042.74,1214.04 2043.33,1213.92 2043.91,1215.12 2044.5,1213.9 2045.09,1213.86 2045.67,1213.87 2046.26,1214.83 2046.85,1214.47 2047.43,1215.32 2048.02,1215.16 2048.6,1214.89 2049.19,1215.66 2049.78,1215.27 2050.36,1210.56 2050.95,1208.22 2051.54,1209.54 2052.12,1207.18 2052.71,1206.03 2053.3,1206.44 2053.88,1206.61 2054.47,1205.6 2055.06,1206.12 2055.64,1204.26 2056.23,1206.68 2056.81,1207.96 2057.4,1209.36 2057.99,1209.27 2058.57,1209.48 2059.16,1213.06 2059.75,1213.15 2060.33,1213.27 2060.92,1217.65 2061.51,1217.22 2062.09,1215.74 2062.68,1219.08 2063.27,1220.7 2063.85,1220.21 2064.44,1219.93 2065.02,1219.59 2065.61,1219.93 2066.2,1220.39 2066.78,1218.76 2067.37,1218.3 2067.96,1217.97 2068.54,1217.78 2069.13,1219.59 2069.72,1218 2070.3,1220.03 2070.89,1220.86 2071.48,1219.14 2072.06,1216.21 2072.65,1215.04 2073.23,1213.71 2073.82,1210.17 2074.41,1210.18 2074.99,1212.49 2075.58,1213.59 2076.17,1212.21 2076.75,1213.18 2077.34,1212.19 2077.93,1212.31 2078.51,1212.3 2079.1,1209.57 2079.68,1208.24 2080.27,1209.28 2080.86,1207 2081.44,1208.27 2082.03,1208.41 2082.62,1206.47 2083.2,1207.86 2083.79,1209.09 2084.38,1209.26 2084.96,1209.17 2085.55,1209.3 2086.14,1209.59 2086.72,1208.76 2087.31,1204.32 2087.89,1201.47 2088.48,1202.07 2089.07,1202.64 2089.65,1203.06 2090.24,1205.76 2090.83,1206.33 2091.41,1204.21 2092,1203.48 2092.59,1206.19 2093.17,1206.46 2093.76,1206.56 2094.35,1205.81 2094.93,1207.38 2095.52,1206.66 2096.1,1206.72 2096.69,1209.19 2097.28,1211.73 2097.86,1214.01 2098.45,1214.73 2099.04,1215.04 2099.62,1213.84 2100.21,1214.9 2100.8,1214.67 2101.38,1213.43 2101.97,1213.36 2102.55,1212.1 2103.14,1213.25 2103.73,1212.05 2104.31,1213 2104.9,1209.48 2105.49,1208.42 2106.07,1209.74 2106.66,1208.45 2107.25,1207.71 2107.83,1206.81 2108.42,1208.12 2109.01,1207.05 2109.59,1206.15 2110.18,1207.59 2110.76,1207.81 2111.35,1205.5 2111.94,1203.46 2112.52,1202.78 2113.11,1202.03 2113.7,1201.42 2114.28,1204.33 2114.87,1207.01 2115.46,1210.77 2116.04,1210.74 2116.63,1212.2 2117.22,1212.31 2117.8,1214.75 2118.39,1214.75 2118.97,1213.19 2119.56,1214.32 2120.15,1214.19 2120.73,1214.09 2121.32,1215.05 2121.91,1213.88 2122.49,1213.94 2123.08,1215.11 2123.67,1212.64 2124.25,1212.44 2124.84,1211.06 2125.42,1212.32 2126.01,1213.48 2126.6,1213.45 2127.18,1212.37 2127.77,1211.27 2128.36,1211.26 2128.94,1210.01 2129.53,1210.33 2130.12,1212.71 2130.7,1213.74 2131.29,1213.58 2131.88,1213.27 2132.46,1213.32 2133.05,1213.34 2133.63,1211.1 2134.22,1210 2134.81,1211.33 2135.39,1212.37 2135.98,1212.59 2136.57,1211.58 2137.15,1212.63 2137.74,1211.41 2138.33,1211.63 2138.91,1211.52 2139.5,1212.8 2140.09,1214.02 2140.67,1212.8 2141.26,1213.92 2141.84,1212.55 2142.43,1212.62 2143.02,1213.44 2143.6,1215.29 2144.19,1217.32 2144.78,1217.23 2145.36,1215.71 2145.95,1215.85 2146.54,1215.52 2147.12,1217.39 2147.71,1215.67 2148.3,1214.27 2148.88,1210.79 2149.47,1208.4 2150.05,1204.98 2150.64,1204.33 2151.23,1204.85 2151.81,1205.24 2152.4,1205.48 2152.99,1206.86 2153.57,1209.24 2154.16,1208.23 2154.75,1208.5 2155.33,1206.23 2155.92,1207.73 2156.5,1209.14 2157.09,1209.35 2157.68,1209.52 2158.26,1211.81 \"/>\n<path clip-path=\"url(#clip872)\" d=\"M986.025 1212.13 L986.612 1212.13 L987.198 1212.13 L987.785 1212.13 L988.371 1212.13 L988.957 1212.13 L989.544 1212.13 L990.13 1212.13 L990.717 1212.13 L991.303 1212.13 L991.889 1212.13 L992.476 1212.13 L993.062 1212.13 L993.649 1212.13 L994.235 1212.13 L994.822 1212.13 L995.408 1212.13 L995.994 1212.13 L996.581 1212.13 L997.167 1212.13 L997.754 1212.13 L998.34 1212.13 L998.926 1212.13 L999.513 1212.13 L1000.1 1212.13 L1000.69 1212.13 L1001.27 1212.13 L1001.86 1212.13 L1002.44 1212.13 L1003.03 1212.13 L1003.62 1212.13 L1004.2 1212.13 L1004.79 1212.13 L1005.38 1212.13 L1005.96 1212.13 L1006.55 1212.13 L1007.14 1212.13 L1007.72 1212.13 L1008.31 1212.13 L1008.9 1212.13 L1009.48 1212.13 L1010.07 1212.13 L1010.65 1212.13 L1011.24 1212.13 L1011.83 1212.13 L1012.41 1212.13 L1013 1212.13 L1013.59 1212.13 L1014.17 1212.13 L1014.76 1212.13 L1015.35 1212.13 L1015.93 1212.13 L1016.52 1212.13 L1017.11 1212.13 L1017.69 1212.13 L1018.28 1212.13 L1018.86 1212.13 L1019.45 1212.13 L1020.04 1212.13 L1020.62 1212.13 L1021.21 1212.13 L1021.8 1212.13 L1022.38 1212.13 L1022.97 1212.13 L1023.56 1212.13 L1024.14 1212.13 L1024.73 1212.13 L1025.32 1212.13 L1025.9 1212.13 L1026.49 1212.13 L1027.07 1212.13 L1027.66 1212.13 L1028.25 1212.13 L1028.83 1212.13 L1029.42 1212.13 L1030.01 1212.13 L1030.59 1212.13 L1031.18 1212.13 L1031.77 1212.13 L1032.35 1212.13 L1032.94 1212.13 L1033.52 1212.13 L1034.11 1212.13 L1034.7 1212.13 L1035.28 1212.13 L1035.87 1212.13 L1036.46 1212.13 L1037.04 1212.13 L1037.63 1212.13 L1038.22 1212.13 L1038.8 1212.13 L1039.39 1212.13 L1039.98 1212.13 L1040.56 1212.13 L1041.15 1212.13 L1041.73 1212.13 L1042.32 1212.13 L1042.91 1212.13 L1043.49 1212.13 L1044.08 1212.13 L1044.67 1212.13 L1045.25 1212.13 L1045.84 1212.13 L1046.43 1212.13 L1047.01 1212.13 L1047.6 1212.13 L1048.19 1212.13 L1048.77 1212.13 L1049.36 1212.13 L1049.94 1212.13 L1050.53 1212.13 L1051.12 1212.13 L1051.7 1212.13 L1052.29 1212.13 L1052.88 1212.13 L1053.46 1212.13 L1054.05 1212.13 L1054.64 1212.13 L1055.22 1212.13 L1055.81 1212.13 L1056.39 1212.13 L1056.98 1212.13 L1057.57 1212.13 L1058.15 1212.13 L1058.74 1212.13 L1059.33 1212.13 L1059.91 1212.13 L1060.5 1212.13 L1061.09 1212.13 L1061.67 1212.13 L1062.26 1212.13 L1062.85 1212.13 L1063.43 1212.13 L1064.02 1212.13 L1064.6 1212.13 L1065.19 1212.13 L1065.78 1212.13 L1066.36 1212.13 L1066.95 1212.13 L1067.54 1212.13 L1068.12 1212.13 L1068.71 1212.13 L1069.3 1212.13 L1069.88 1212.13 L1070.47 1212.13 L1071.06 1212.13 L1071.64 1212.13 L1072.23 1212.13 L1072.81 1212.13 L1073.4 1212.13 L1073.99 1212.13 L1074.57 1212.13 L1075.16 1212.13 L1075.75 1212.13 L1076.33 1212.13 L1076.92 1212.13 L1077.51 1212.13 L1078.09 1212.13 L1078.68 1212.13 L1079.26 1212.13 L1079.85 1212.13 L1080.44 1212.13 L1081.02 1212.13 L1081.61 1212.13 L1082.2 1212.13 L1082.78 1212.13 L1083.37 1212.13 L1083.96 1212.13 L1084.54 1212.13 L1085.13 1212.13 L1085.72 1212.13 L1086.3 1212.13 L1086.89 1212.13 L1087.47 1212.13 L1088.06 1212.13 L1088.65 1212.13 L1089.23 1212.13 L1089.82 1212.13 L1090.41 1212.13 L1090.99 1212.13 L1091.58 1212.13 L1092.17 1212.13 L1092.75 1212.13 L1093.34 1212.13 L1093.93 1212.13 L1094.51 1212.13 L1095.1 1212.13 L1095.68 1212.13 L1096.27 1212.13 L1096.86 1212.13 L1097.44 1212.13 L1098.03 1212.13 L1098.62 1212.13 L1099.2 1212.13 L1099.79 1212.13 L1100.38 1212.13 L1100.96 1212.13 L1101.55 1212.13 L1102.14 1212.13 L1102.72 1212.13 L1103.31 1212.13 L1103.89 1212.13 L1104.48 1212.13 L1105.07 1212.13 L1105.65 1212.13 L1106.24 1212.13 L1106.83 1212.13 L1107.41 1212.13 L1108 1212.13 L1108.59 1212.13 L1109.17 1212.13 L1109.76 1212.13 L1110.34 1212.13 L1110.93 1212.13 L1111.52 1212.13 L1112.1 1212.13 L1112.69 1212.13 L1113.28 1212.13 L1113.86 1212.13 L1114.45 1212.13 L1115.04 1212.13 L1115.62 1212.13 L1116.21 1212.13 L1116.8 1212.13 L1117.38 1212.13 L1117.97 1212.13 L1118.55 1212.13 L1119.14 1212.13 L1119.73 1212.13 L1120.31 1212.13 L1120.9 1212.13 L1121.49 1212.13 L1122.07 1212.13 L1122.66 1212.13 L1123.25 1212.13 L1123.83 1212.13 L1124.42 1212.13 L1125.01 1212.13 L1125.59 1212.13 L1126.18 1212.13 L1126.76 1212.13 L1127.35 1212.13 L1127.94 1212.13 L1128.52 1212.13 L1129.11 1212.13 L1129.7 1212.13 L1130.28 1212.13 L1130.87 1212.13 L1131.46 1212.13 L1132.04 1212.13 L1132.63 1212.13 L1133.21 1212.13 L1133.8 1212.13 L1134.39 1212.13 L1134.97 1212.13 L1135.56 1212.13 L1136.15 1212.13 L1136.73 1212.13 L1137.32 1212.13 L1137.91 1212.13 L1138.49 1212.13 L1139.08 1212.13 L1139.67 1212.13 L1140.25 1212.13 L1140.84 1212.13 L1141.42 1212.13 L1142.01 1212.13 L1142.6 1212.13 L1143.18 1212.13 L1143.77 1212.13 L1144.36 1212.13 L1144.94 1212.13 L1145.53 1212.13 L1146.12 1212.13 L1146.7 1212.13 L1147.29 1212.13 L1147.88 1212.13 L1148.46 1212.13 L1149.05 1212.13 L1149.63 1212.13 L1150.22 1212.13 L1150.81 1212.13 L1151.39 1212.13 L1151.98 1212.13 L1152.57 1212.13 L1153.15 1212.13 L1153.74 1212.13 L1154.33 1212.13 L1154.91 1212.13 L1155.5 1212.13 L1156.09 1212.13 L1156.67 1212.13 L1157.26 1212.13 L1157.84 1212.13 L1158.43 1212.13 L1159.02 1212.13 L1159.6 1212.13 L1160.19 1212.13 L1160.78 1212.13 L1161.36 1212.13 L1161.95 1212.13 L1162.54 1212.13 L1163.12 1212.13 L1163.71 1212.13 L1164.29 1212.13 L1164.88 1212.13 L1165.47 1212.13 L1166.05 1212.13 L1166.64 1212.13 L1167.23 1212.13 L1167.81 1212.13 L1168.4 1212.13 L1168.99 1212.13 L1169.57 1212.13 L1170.16 1212.13 L1170.75 1212.13 L1171.33 1212.13 L1171.92 1212.13 L1172.5 1212.13 L1173.09 1212.13 L1173.68 1212.13 L1174.26 1212.13 L1174.85 1212.13 L1175.44 1212.13 L1176.02 1212.13 L1176.61 1212.13 L1177.2 1212.13 L1177.78 1212.13 L1178.37 1212.13 L1178.96 1212.13 L1179.54 1212.13 L1180.13 1212.13 L1180.71 1212.13 L1181.3 1212.13 L1181.89 1212.13 L1182.47 1212.13 L1183.06 1212.13 L1183.65 1212.13 L1184.23 1212.13 L1184.82 1212.13 L1185.41 1212.13 L1185.99 1212.13 L1186.58 1212.13 L1187.16 1212.13 L1187.75 1212.13 L1188.34 1212.13 L1188.92 1212.13 L1189.51 1212.13 L1190.1 1212.13 L1190.68 1212.13 L1191.27 1212.13 L1191.86 1212.13 L1192.44 1212.13 L1193.03 1212.13 L1193.62 1212.13 L1194.2 1212.13 L1194.79 1212.13 L1195.37 1212.13 L1195.96 1212.13 L1196.55 1212.13 L1197.13 1212.13 L1197.72 1212.13 L1198.31 1212.13 L1198.89 1212.13 L1199.48 1212.13 L1200.07 1212.13 L1200.65 1212.13 L1201.24 1212.13 L1201.83 1212.13 L1202.41 1212.13 L1203 1212.13 L1203.58 1212.13 L1204.17 1212.13 L1204.76 1212.13 L1205.34 1212.13 L1205.93 1212.13 L1206.52 1212.13 L1207.1 1212.13 L1207.69 1212.13 L1208.28 1212.13 L1208.86 1212.13 L1209.45 1212.13 L1210.03 1212.13 L1210.62 1212.13 L1211.21 1212.13 L1211.79 1212.13 L1212.38 1212.13 L1212.97 1212.13 L1213.55 1212.13 L1214.14 1212.13 L1214.73 1212.13 L1215.31 1212.13 L1215.9 1212.13 L1216.49 1212.13 L1217.07 1212.13 L1217.66 1212.13 L1218.24 1212.13 L1218.83 1212.13 L1219.42 1212.13 L1220 1212.13 L1220.59 1212.13 L1221.18 1212.13 L1221.76 1212.13 L1222.35 1212.13 L1222.94 1212.13 L1223.52 1212.13 L1224.11 1212.13 L1224.7 1212.13 L1225.28 1212.13 L1225.87 1212.13 L1226.45 1212.13 L1227.04 1212.13 L1227.63 1212.13 L1228.21 1212.13 L1228.8 1212.13 L1229.39 1212.13 L1229.97 1212.13 L1230.56 1212.13 L1231.15 1212.13 L1231.73 1212.13 L1232.32 1212.13 L1232.91 1212.13 L1233.49 1212.13 L1234.08 1212.13 L1234.66 1212.13 L1235.25 1212.13 L1235.84 1212.13 L1236.42 1212.13 L1237.01 1212.13 L1237.6 1212.13 L1238.18 1212.13 L1238.77 1212.13 L1239.36 1212.13 L1239.94 1212.13 L1240.53 1212.13 L1241.11 1212.13 L1241.7 1212.13 L1242.29 1212.13 L1242.87 1212.13 L1243.46 1212.13 L1244.05 1212.13 L1244.63 1212.13 L1245.22 1212.13 L1245.81 1212.13 L1246.39 1212.13 L1246.98 1212.13 L1247.57 1212.13 L1248.15 1212.13 L1248.74 1212.13 L1249.32 1212.13 L1249.91 1212.13 L1250.5 1212.13 L1251.08 1212.13 L1251.67 1212.13 L1252.26 1212.13 L1252.84 1212.13 L1253.43 1212.13 L1254.02 1212.13 L1254.6 1212.13 L1255.19 1212.13 L1255.78 1212.13 L1256.36 1212.13 L1256.95 1212.13 L1257.53 1212.13 L1258.12 1212.13 L1258.71 1212.13 L1259.29 1212.13 L1259.88 1212.13 L1260.47 1212.13 L1261.05 1212.13 L1261.64 1212.13 L1262.23 1212.13 L1262.81 1212.13 L1263.4 1212.13 L1263.98 1212.13 L1264.57 1212.13 L1265.16 1212.13 L1265.74 1212.13 L1266.33 1212.13 L1266.92 1212.13 L1267.5 1212.13 L1268.09 1212.13 L1268.68 1212.13 L1269.26 1212.13 L1269.85 1212.13 L1270.44 1212.13 L1271.02 1212.13 L1271.61 1212.13 L1272.19 1212.13 L1272.78 1212.13 L1273.37 1212.13 L1273.95 1212.13 L1274.54 1212.13 L1275.13 1212.13 L1275.71 1212.13 L1276.3 1212.13 L1276.89 1212.13 L1277.47 1212.13 L1278.06 1212.13 L1278.65 1212.13 L1279.23 1212.13 L1279.82 1212.13 L1280.4 1212.13 L1280.99 1212.13 L1281.58 1212.13 L1282.16 1212.13 L1282.75 1212.13 L1283.34 1212.13 L1283.92 1212.13 L1284.51 1212.13 L1285.1 1212.13 L1285.68 1212.13 L1286.27 1212.13 L1286.86 1212.13 L1287.44 1212.13 L1288.03 1212.13 L1288.61 1212.13 L1289.2 1212.13 L1289.79 1212.13 L1290.37 1212.13 L1290.96 1212.13 L1291.55 1212.13 L1292.13 1212.13 L1292.72 1212.13 L1293.31 1212.13 L1293.89 1212.13 L1294.48 1212.13 L1295.06 1212.13 L1295.65 1212.13 L1296.24 1212.13 L1296.82 1212.13 L1297.41 1212.13 L1298 1212.13 L1298.58 1212.13 L1299.17 1212.13 L1299.76 1212.13 L1300.34 1212.13 L1300.93 1212.13 L1301.52 1212.13 L1302.1 1212.13 L1302.69 1212.13 L1303.27 1212.13 L1303.86 1212.13 L1304.45 1212.13 L1305.03 1212.13 L1305.62 1212.13 L1306.21 1212.13 L1306.79 1212.13 L1307.38 1212.13 L1307.97 1212.13 L1308.55 1212.13 L1309.14 1212.13 L1309.73 1212.13 L1310.31 1212.13 L1310.9 1212.13 L1311.48 1212.13 L1312.07 1212.13 L1312.66 1212.13 L1313.24 1212.13 L1313.83 1212.13 L1314.42 1212.13 L1315 1212.13 L1315.59 1212.13 L1316.18 1212.13 L1316.76 1212.13 L1317.35 1212.13 L1317.93 1212.13 L1318.52 1212.13 L1319.11 1212.13 L1319.69 1212.13 L1320.28 1212.13 L1320.87 1212.13 L1321.45 1212.13 L1322.04 1212.13 L1322.63 1212.13 L1323.21 1212.13 L1323.8 1212.13 L1324.39 1212.13 L1324.97 1212.13 L1325.56 1212.13 L1326.14 1212.13 L1326.73 1212.13 L1327.32 1212.13 L1327.9 1212.13 L1328.49 1212.13 L1329.08 1212.13 L1329.66 1212.13 L1330.25 1212.13 L1330.84 1212.13 L1331.42 1212.13 L1332.01 1212.13 L1332.6 1212.13 L1333.18 1212.13 L1333.77 1212.13 L1334.35 1212.13 L1334.94 1212.13 L1335.53 1212.13 L1336.11 1212.13 L1336.7 1212.13 L1337.29 1212.13 L1337.87 1212.13 L1338.46 1212.13 L1339.05 1212.13 L1339.63 1212.13 L1340.22 1212.13 L1340.8 1212.13 L1341.39 1212.13 L1341.98 1212.13 L1342.56 1212.13 L1343.15 1212.13 L1343.74 1212.13 L1344.32 1212.13 L1344.91 1212.13 L1345.5 1212.13 L1346.08 1212.13 L1346.67 1212.13 L1347.26 1212.13 L1347.84 1212.13 L1348.43 1212.13 L1349.01 1212.13 L1349.6 1212.13 L1350.19 1212.13 L1350.77 1212.13 L1351.36 1212.13 L1351.95 1212.13 L1352.53 1212.13 L1353.12 1212.13 L1353.71 1212.13 L1354.29 1212.13 L1354.88 1212.13 L1355.47 1212.13 L1356.05 1212.13 L1356.64 1212.13 L1357.22 1212.13 L1357.81 1212.13 L1358.4 1212.13 L1358.98 1212.13 L1359.57 1212.13 L1360.16 1212.13 L1360.74 1212.13 L1361.33 1212.13 L1361.92 1212.13 L1362.5 1212.13 L1363.09 1212.13 L1363.68 1212.13 L1364.26 1212.13 L1364.85 1212.13 L1365.43 1212.13 L1366.02 1212.13 L1366.61 1212.13 L1367.19 1212.13 L1367.78 1212.13 L1368.37 1212.13 L1368.95 1212.13 L1369.54 1212.13 L1370.13 1212.13 L1370.71 1212.13 L1371.3 1212.13 L1371.88 1212.13 L1372.47 1212.13 L1373.06 1212.13 L1373.64 1212.13 L1374.23 1212.13 L1374.82 1212.13 L1375.4 1212.13 L1375.99 1212.13 L1376.58 1212.13 L1377.16 1212.13 L1377.75 1212.13 L1378.34 1212.13 L1378.92 1212.13 L1379.51 1212.13 L1380.09 1212.13 L1380.68 1212.13 L1381.27 1212.13 L1381.85 1212.13 L1382.44 1212.13 L1383.03 1212.13 L1383.61 1212.13 L1384.2 1212.13 L1384.79 1212.13 L1385.37 1212.13 L1385.96 1212.13 L1386.55 1212.13 L1387.13 1212.13 L1387.72 1212.13 L1388.3 1212.13 L1388.89 1212.13 L1389.48 1212.13 L1390.06 1212.13 L1390.65 1212.13 L1391.24 1212.13 L1391.82 1212.13 L1392.41 1212.13 L1393 1212.13 L1393.58 1212.13 L1394.17 1212.13 L1394.75 1212.13 L1395.34 1212.13 L1395.93 1212.13 L1396.51 1212.13 L1397.1 1212.13 L1397.69 1212.13 L1398.27 1212.13 L1398.86 1212.13 L1399.45 1212.13 L1400.03 1212.13 L1400.62 1212.13 L1401.21 1212.13 L1401.79 1212.13 L1402.38 1212.13 L1402.96 1212.13 L1403.55 1212.13 L1404.14 1212.13 L1404.72 1212.13 L1405.31 1212.13 L1405.9 1212.13 L1406.48 1212.13 L1407.07 1212.13 L1407.66 1212.13 L1408.24 1212.13 L1408.83 1212.13 L1409.42 1212.13 L1410 1212.13 L1410.59 1212.13 L1411.17 1212.13 L1411.76 1212.13 L1412.35 1212.13 L1412.93 1212.13 L1413.52 1212.13 L1414.11 1212.13 L1414.69 1212.13 L1415.28 1212.13 L1415.87 1212.13 L1416.45 1212.13 L1417.04 1212.13 L1417.63 1212.13 L1418.21 1212.13 L1418.8 1212.13 L1419.38 1212.13 L1419.97 1212.13 L1420.56 1212.13 L1421.14 1212.13 L1421.73 1212.13 L1422.32 1212.13 L1422.9 1212.13 L1423.49 1212.13 L1424.08 1212.13 L1424.66 1212.13 L1425.25 1212.13 L1425.83 1212.13 L1426.42 1212.13 L1427.01 1212.13 L1427.59 1212.13 L1428.18 1212.13 L1428.77 1212.13 L1429.35 1212.13 L1429.94 1212.13 L1430.53 1212.13 L1431.11 1212.13 L1431.7 1212.13 L1432.29 1212.13 L1432.87 1212.13 L1433.46 1212.13 L1434.04 1212.13 L1434.63 1212.13 L1435.22 1212.13 L1435.8 1212.13 L1436.39 1212.13 L1436.98 1212.13 L1437.56 1212.13 L1438.15 1212.13 L1438.74 1212.13 L1439.32 1212.13 L1439.91 1212.13 L1440.5 1212.13 L1441.08 1212.13 L1441.67 1212.13 L1442.25 1212.13 L1442.84 1212.13 L1443.43 1212.13 L1444.01 1212.13 L1444.6 1212.13 L1445.19 1212.13 L1445.77 1212.13 L1446.36 1212.13 L1446.95 1212.13 L1447.53 1212.13 L1448.12 1212.13 L1448.7 1212.13 L1449.29 1212.13 L1449.88 1212.13 L1450.46 1212.13 L1451.05 1212.13 L1451.64 1212.13 L1452.22 1212.13 L1452.81 1212.13 L1453.4 1212.13 L1453.98 1212.13 L1454.57 1212.13 L1455.16 1212.13 L1455.74 1212.13 L1456.33 1212.13 L1456.91 1212.13 L1457.5 1212.13 L1458.09 1212.13 L1458.67 1212.13 L1459.26 1212.13 L1459.85 1212.13 L1460.43 1212.13 L1461.02 1212.13 L1461.61 1212.13 L1462.19 1212.13 L1462.78 1212.13 L1463.37 1212.13 L1463.95 1212.13 L1464.54 1212.13 L1465.12 1212.13 L1465.71 1212.13 L1466.3 1212.13 L1466.88 1212.13 L1467.47 1212.13 L1468.06 1212.13 L1468.64 1212.13 L1469.23 1212.13 L1469.82 1212.13 L1470.4 1212.13 L1470.99 1212.13 L1471.57 1212.13 L1472.16 1212.13 L1472.75 1212.13 L1473.33 1212.13 L1473.92 1212.13 L1474.51 1212.13 L1475.09 1212.13 L1475.68 1212.13 L1476.27 1212.13 L1476.85 1212.13 L1477.44 1212.13 L1478.03 1212.13 L1478.61 1212.13 L1479.2 1212.13 L1479.78 1212.13 L1480.37 1212.13 L1480.96 1212.13 L1481.54 1212.13 L1482.13 1212.13 L1482.72 1212.13 L1483.3 1212.13 L1483.89 1212.13 L1484.48 1212.13 L1485.06 1212.13 L1485.65 1212.13 L1486.24 1212.13 L1486.82 1212.13 L1487.41 1212.13 L1487.99 1212.13 L1488.58 1212.13 L1489.17 1212.13 L1489.75 1212.13 L1490.34 1212.13 L1490.93 1212.13 L1491.51 1212.13 L1492.1 1212.13 L1492.69 1212.13 L1493.27 1212.13 L1493.86 1212.13 L1494.45 1212.13 L1495.03 1212.13 L1495.62 1212.13 L1496.2 1212.13 L1496.79 1212.13 L1497.38 1212.13 L1497.96 1212.13 L1498.55 1212.13 L1499.14 1212.13 L1499.72 1212.13 L1500.31 1212.13 L1500.9 1212.13 L1501.48 1212.13 L1502.07 1212.13 L1502.65 1212.13 L1503.24 1212.13 L1503.83 1212.13 L1504.41 1212.13 L1505 1212.13 L1505.59 1212.13 L1506.17 1212.13 L1506.76 1212.13 L1507.35 1212.13 L1507.93 1212.13 L1508.52 1212.13 L1509.11 1212.13 L1509.69 1212.13 L1510.28 1212.13 L1510.86 1212.13 L1511.45 1212.13 L1512.04 1212.13 L1512.62 1212.13 L1513.21 1212.13 L1513.8 1212.13 L1514.38 1212.13 L1514.97 1212.13 L1515.56 1212.13 L1516.14 1212.13 L1516.73 1212.13 L1517.32 1212.13 L1517.9 1212.13 L1518.49 1212.13 L1519.07 1212.13 L1519.66 1212.13 L1520.25 1212.13 L1520.83 1212.13 L1521.42 1212.13 L1522.01 1212.13 L1522.59 1212.13 L1523.18 1212.13 L1523.77 1212.13 L1524.35 1212.13 L1524.94 1212.13 L1525.52 1212.13 L1526.11 1212.13 L1526.7 1212.13 L1527.28 1212.13 L1527.87 1212.13 L1528.46 1212.13 L1529.04 1212.13 L1529.63 1212.13 L1530.22 1212.13 L1530.8 1212.13 L1531.39 1212.13 L1531.98 1212.13 L1532.56 1212.13 L1533.15 1212.13 L1533.73 1212.13 L1534.32 1212.13 L1534.91 1212.13 L1535.49 1212.13 L1536.08 1212.13 L1536.67 1212.13 L1537.25 1212.13 L1537.84 1212.13 L1538.43 1212.13 L1539.01 1212.13 L1539.6 1212.13 L1540.19 1212.13 L1540.77 1212.13 L1541.36 1212.13 L1541.94 1212.13 L1542.53 1212.13 L1543.12 1212.13 L1543.7 1212.13 L1544.29 1212.13 L1544.88 1212.13 L1545.46 1212.13 L1546.05 1212.13 L1546.64 1212.13 L1547.22 1212.13 L1547.81 1212.13 L1548.4 1212.13 L1548.98 1212.13 L1549.57 1212.13 L1550.15 1212.13 L1550.74 1212.13 L1551.33 1212.13 L1551.91 1212.13 L1552.5 1212.13 L1553.09 1212.13 L1553.67 1212.13 L1554.26 1212.13 L1554.85 1212.13 L1555.43 1212.13 L1556.02 1212.13 L1556.6 1212.13 L1557.19 1212.13 L1557.78 1212.13 L1558.36 1212.13 L1558.95 1212.13 L1559.54 1212.13 L1560.12 1212.13 L1560.71 1212.13 L1561.3 1212.13 L1561.88 1212.13 L1562.47 1212.13 L1563.06 1212.13 L1563.64 1212.13 L1564.23 1212.13 L1564.81 1212.13 L1565.4 1212.13 L1565.99 1212.13 L1566.57 1212.13 L1567.16 1212.13 L1567.75 1212.13 L1568.33 1212.13 L1568.92 1212.13 L1569.51 1212.13 L1570.09 1212.13 L1570.68 1212.13 L1571.27 1212.13 L1571.85 1212.13 L1572.44 1212.13 L1573.02 1212.13 L1573.61 1212.13 L1574.2 1212.13 L1574.78 1212.13 L1575.37 1212.13 L1575.96 1212.13 L1576.54 1212.13 L1577.13 1212.13 L1577.72 1212.13 L1578.3 1212.13 L1578.89 1212.13 L1579.47 1212.13 L1580.06 1212.13 L1580.65 1212.13 L1581.23 1212.13 L1581.82 1212.13 L1582.41 1212.13 L1582.99 1212.13 L1583.58 1212.13 L1584.17 1212.13 L1584.75 1212.13 L1585.34 1212.13 L1585.93 1212.13 L1586.51 1212.13 L1587.1 1212.13 L1587.68 1212.13 L1588.27 1212.13 L1588.86 1212.13 L1589.44 1212.13 L1590.03 1212.13 L1590.62 1212.13 L1591.2 1212.13 L1591.79 1212.13 L1592.38 1212.13 L1592.96 1212.13 L1593.55 1212.13 L1594.14 1212.13 L1594.72 1212.13 L1595.31 1212.13 L1595.89 1212.13 L1596.48 1212.13 L1597.07 1212.13 L1597.65 1212.13 L1598.24 1212.13 L1598.83 1212.13 L1599.41 1212.13 L1600 1212.13 L1600.59 1212.13 L1601.17 1212.13 L1601.76 1212.13 L1602.34 1212.13 L1602.93 1212.13 L1603.52 1212.13 L1604.1 1212.13 L1604.69 1212.13 L1605.28 1212.13 L1605.86 1212.13 L1606.45 1212.13 L1607.04 1212.13 L1607.62 1212.13 L1608.21 1212.13 L1608.8 1212.13 L1609.38 1212.13 L1609.97 1212.13 L1610.55 1212.13 L1611.14 1212.13 L1611.73 1212.13 L1612.31 1212.13 L1612.9 1212.13 L1613.49 1212.13 L1614.07 1212.13 L1614.66 1212.13 L1615.25 1212.13 L1615.83 1212.13 L1616.42 1212.13 L1617.01 1212.13 L1617.59 1212.13 L1618.18 1212.13 L1618.76 1212.13 L1619.35 1212.13 L1619.94 1212.13 L1620.52 1212.13 L1621.11 1212.13 L1621.7 1212.13 L1622.28 1212.13 L1622.87 1212.13 L1623.46 1212.13 L1624.04 1212.13 L1624.63 1212.13 L1625.22 1212.13 L1625.8 1212.13 L1626.39 1212.13 L1626.97 1212.13 L1627.56 1212.13 L1628.15 1212.13 L1628.73 1212.13 L1629.32 1212.13 L1629.91 1212.13 L1630.49 1212.13 L1631.08 1212.13 L1631.67 1212.13 L1632.25 1212.13 L1632.84 1212.13 L1633.42 1212.13 L1634.01 1212.13 L1634.6 1212.13 L1635.18 1212.13 L1635.77 1212.13 L1636.36 1212.13 L1636.94 1212.13 L1637.53 1212.13 L1638.12 1212.13 L1638.7 1212.13 L1639.29 1212.13 L1639.88 1212.13 L1640.46 1212.13 L1641.05 1212.13 L1641.63 1212.13 L1642.22 1212.13 L1642.81 1212.13 L1643.39 1212.13 L1643.98 1212.13 L1644.57 1212.13 L1645.15 1212.13 L1645.74 1212.13 L1646.33 1212.13 L1646.91 1212.13 L1647.5 1212.13 L1648.09 1212.13 L1648.67 1212.13 L1649.26 1212.13 L1649.84 1212.13 L1650.43 1212.13 L1651.02 1212.13 L1651.6 1212.13 L1652.19 1212.13 L1652.78 1212.13 L1653.36 1212.13 L1653.95 1212.13 L1654.54 1212.13 L1655.12 1212.13 L1655.71 1212.13 L1656.29 1212.13 L1656.88 1212.13 L1657.47 1212.13 L1658.05 1212.13 L1658.64 1212.13 L1659.23 1212.13 L1659.81 1212.13 L1660.4 1212.13 L1660.99 1212.13 L1661.57 1212.13 L1662.16 1212.13 L1662.75 1212.13 L1663.33 1212.13 L1663.92 1212.13 L1664.5 1212.13 L1665.09 1212.13 L1665.68 1212.13 L1666.26 1212.13 L1666.85 1212.13 L1667.44 1212.13 L1668.02 1212.13 L1668.61 1212.13 L1669.2 1212.13 L1669.78 1212.13 L1670.37 1212.13 L1670.96 1212.13 L1671.54 1212.13 L1672.13 1212.13 L1672.71 1212.13 L1673.3 1212.13 L1673.89 1212.13 L1674.47 1212.13 L1675.06 1212.13 L1675.65 1212.13 L1676.23 1212.13 L1676.82 1212.13 L1677.41 1212.13 L1677.99 1212.13 L1678.58 1212.13 L1679.17 1212.13 L1679.75 1212.13 L1680.34 1212.13 L1680.92 1212.13 L1681.51 1212.13 L1682.1 1212.13 L1682.68 1212.13 L1683.27 1212.13 L1683.86 1212.13 L1684.44 1212.13 L1685.03 1212.13 L1685.62 1212.13 L1686.2 1212.13 L1686.79 1212.13 L1687.37 1212.13 L1687.96 1212.13 L1688.55 1212.13 L1689.13 1212.13 L1689.72 1212.13 L1690.31 1212.13 L1690.89 1212.13 L1691.48 1212.13 L1692.07 1212.13 L1692.65 1212.13 L1693.24 1212.13 L1693.83 1212.13 L1694.41 1212.13 L1695 1212.13 L1695.58 1212.13 L1696.17 1212.13 L1696.76 1212.13 L1697.34 1212.13 L1697.93 1212.13 L1698.52 1212.13 L1699.1 1212.13 L1699.69 1212.13 L1700.28 1212.13 L1700.86 1212.13 L1701.45 1212.13 L1702.04 1212.13 L1702.62 1212.13 L1703.21 1212.13 L1703.79 1212.13 L1704.38 1212.13 L1704.97 1212.13 L1705.55 1212.13 L1706.14 1212.13 L1706.73 1212.13 L1707.31 1212.13 L1707.9 1212.13 L1708.49 1212.13 L1709.07 1212.13 L1709.66 1212.13 L1710.24 1212.13 L1710.83 1212.13 L1711.42 1212.13 L1712 1212.13 L1712.59 1212.13 L1713.18 1212.13 L1713.76 1212.13 L1714.35 1212.13 L1714.94 1212.13 L1715.52 1212.13 L1716.11 1212.13 L1716.7 1212.13 L1717.28 1212.13 L1717.87 1212.13 L1718.45 1212.13 L1719.04 1212.13 L1719.63 1212.13 L1720.21 1212.13 L1720.8 1212.13 L1721.39 1212.13 L1721.97 1212.13 L1722.56 1212.13 L1723.15 1212.13 L1723.73 1212.13 L1724.32 1212.13 L1724.91 1212.13 L1725.49 1212.13 L1726.08 1212.13 L1726.66 1212.13 L1727.25 1212.13 L1727.84 1212.13 L1728.42 1212.13 L1729.01 1212.13 L1729.6 1212.13 L1730.18 1212.13 L1730.77 1212.13 L1731.36 1212.13 L1731.94 1212.13 L1732.53 1212.13 L1733.11 1212.13 L1733.7 1212.13 L1734.29 1212.13 L1734.87 1212.13 L1735.46 1212.13 L1736.05 1212.13 L1736.63 1212.13 L1737.22 1212.13 L1737.81 1212.13 L1738.39 1212.13 L1738.98 1212.13 L1739.57 1212.13 L1740.15 1212.13 L1740.74 1212.13 L1741.32 1212.13 L1741.91 1212.13 L1742.5 1212.13 L1743.08 1212.13 L1743.67 1212.13 L1744.26 1212.13 L1744.84 1212.13 L1745.43 1212.13 L1746.02 1212.13 L1746.6 1212.13 L1747.19 1212.13 L1747.78 1212.13 L1748.36 1212.13 L1748.95 1212.13 L1749.53 1212.13 L1750.12 1212.13 L1750.71 1212.13 L1751.29 1212.13 L1751.88 1212.13 L1752.47 1212.13 L1753.05 1212.13 L1753.64 1212.13 L1754.23 1212.13 L1754.81 1212.13 L1755.4 1212.13 L1755.99 1212.13 L1756.57 1212.13 L1757.16 1212.13 L1757.74 1212.13 L1758.33 1212.13 L1758.92 1212.13 L1759.5 1212.13 L1760.09 1212.13 L1760.68 1212.13 L1761.26 1212.13 L1761.85 1212.13 L1762.44 1212.13 L1763.02 1212.13 L1763.61 1212.13 L1764.19 1212.13 L1764.78 1212.13 L1765.37 1212.13 L1765.95 1212.13 L1766.54 1212.13 L1767.13 1212.13 L1767.71 1212.13 L1768.3 1212.13 L1768.89 1212.13 L1769.47 1212.13 L1770.06 1212.13 L1770.65 1212.13 L1771.23 1212.13 L1771.82 1212.13 L1772.4 1212.13 L1772.99 1212.13 L1773.58 1212.13 L1774.16 1212.13 L1774.75 1212.13 L1775.34 1212.13 L1775.92 1212.13 L1776.51 1212.13 L1777.1 1212.13 L1777.68 1212.13 L1778.27 1212.13 L1778.86 1212.13 L1779.44 1212.13 L1780.03 1212.13 L1780.61 1212.13 L1781.2 1212.13 L1781.79 1212.13 L1782.37 1212.13 L1782.96 1212.13 L1783.55 1212.13 L1784.13 1212.13 L1784.72 1212.13 L1785.31 1212.13 L1785.89 1212.13 L1786.48 1212.13 L1787.06 1212.13 L1787.65 1212.13 L1788.24 1212.13 L1788.82 1212.13 L1789.41 1212.13 L1790 1212.13 L1790.58 1212.13 L1791.17 1212.13 L1791.76 1212.13 L1792.34 1212.13 L1792.93 1212.13 L1793.52 1212.13 L1794.1 1212.13 L1794.69 1212.13 L1795.27 1212.13 L1795.86 1212.13 L1796.45 1212.13 L1797.03 1212.13 L1797.62 1212.13 L1798.21 1212.13 L1798.79 1212.13 L1799.38 1212.13 L1799.97 1212.13 L1800.55 1212.13 L1801.14 1212.13 L1801.73 1212.13 L1802.31 1212.13 L1802.9 1212.13 L1803.48 1212.13 L1804.07 1212.13 L1804.66 1212.13 L1805.24 1212.13 L1805.83 1212.13 L1806.42 1212.13 L1807 1212.13 L1807.59 1212.13 L1808.18 1212.13 L1808.76 1212.13 L1809.35 1212.13 L1809.94 1212.13 L1810.52 1212.13 L1811.11 1212.13 L1811.69 1212.13 L1812.28 1212.13 L1812.87 1212.13 L1813.45 1212.13 L1814.04 1212.13 L1814.63 1212.13 L1815.21 1212.13 L1815.8 1212.13 L1816.39 1212.13 L1816.97 1212.13 L1817.56 1212.13 L1818.14 1212.13 L1818.73 1212.13 L1819.32 1212.13 L1819.9 1212.13 L1820.49 1212.13 L1821.08 1212.13 L1821.66 1212.13 L1822.25 1212.13 L1822.84 1212.13 L1823.42 1212.13 L1824.01 1212.13 L1824.6 1212.13 L1825.18 1212.13 L1825.77 1212.13 L1826.35 1212.13 L1826.94 1212.13 L1827.53 1212.13 L1828.11 1212.13 L1828.7 1212.13 L1829.29 1212.13 L1829.87 1212.13 L1830.46 1212.13 L1831.05 1212.13 L1831.63 1212.13 L1832.22 1212.13 L1832.81 1212.13 L1833.39 1212.13 L1833.98 1212.13 L1834.56 1212.13 L1835.15 1212.13 L1835.74 1212.13 L1836.32 1212.13 L1836.91 1212.13 L1837.5 1212.13 L1838.08 1212.13 L1838.67 1212.13 L1839.26 1212.13 L1839.84 1212.13 L1840.43 1212.13 L1841.01 1212.13 L1841.6 1212.13 L1842.19 1212.13 L1842.77 1212.13 L1843.36 1212.13 L1843.95 1212.13 L1844.53 1212.13 L1845.12 1212.13 L1845.71 1212.13 L1846.29 1212.13 L1846.88 1212.13 L1847.47 1212.13 L1848.05 1212.13 L1848.64 1212.13 L1849.22 1212.13 L1849.81 1212.13 L1850.4 1212.13 L1850.98 1212.13 L1851.57 1212.13 L1852.16 1212.13 L1852.74 1212.13 L1853.33 1212.13 L1853.92 1212.13 L1854.5 1212.13 L1855.09 1212.13 L1855.68 1212.13 L1856.26 1212.13 L1856.85 1212.13 L1857.43 1212.13 L1858.02 1212.13 L1858.61 1212.13 L1859.19 1212.13 L1859.78 1212.13 L1860.37 1212.13 L1860.95 1212.13 L1861.54 1212.13 L1862.13 1212.13 L1862.71 1212.13 L1863.3 1212.13 L1863.88 1212.13 L1864.47 1212.13 L1865.06 1212.13 L1865.64 1212.13 L1866.23 1212.13 L1866.82 1212.13 L1867.4 1212.13 L1867.99 1212.13 L1868.58 1212.13 L1869.16 1212.13 L1869.75 1212.13 L1870.34 1212.13 L1870.92 1212.13 L1871.51 1212.13 L1872.09 1212.13 L1872.68 1212.13 L1873.27 1212.13 L1873.85 1212.13 L1874.44 1212.13 L1875.03 1212.13 L1875.61 1212.13 L1876.2 1212.13 L1876.79 1212.13 L1877.37 1212.13 L1877.96 1212.13 L1878.55 1212.13 L1879.13 1212.13 L1879.72 1212.13 L1880.3 1212.13 L1880.89 1212.13 L1881.48 1212.13 L1882.06 1212.13 L1882.65 1212.13 L1883.24 1212.13 L1883.82 1212.13 L1884.41 1212.13 L1885 1212.13 L1885.58 1212.13 L1886.17 1212.13 L1886.76 1212.13 L1887.34 1212.13 L1887.93 1212.13 L1888.51 1212.13 L1889.1 1212.13 L1889.69 1212.13 L1890.27 1212.13 L1890.86 1212.13 L1891.45 1212.13 L1892.03 1212.13 L1892.62 1212.13 L1893.21 1212.13 L1893.79 1212.13 L1894.38 1212.13 L1894.96 1212.13 L1895.55 1212.13 L1896.14 1212.13 L1896.72 1212.13 L1897.31 1212.13 L1897.9 1212.13 L1898.48 1212.13 L1899.07 1212.13 L1899.66 1212.13 L1900.24 1212.13 L1900.83 1212.13 L1901.42 1212.13 L1902 1212.13 L1902.59 1212.13 L1903.17 1212.13 L1903.76 1212.13 L1904.35 1212.13 L1904.93 1212.13 L1905.52 1212.13 L1906.11 1212.13 L1906.69 1212.13 L1907.28 1212.13 L1907.87 1212.13 L1908.45 1212.13 L1909.04 1212.13 L1909.63 1212.13 L1910.21 1212.13 L1910.8 1212.13 L1911.38 1212.13 L1911.97 1212.13 L1912.56 1212.13 L1913.14 1212.13 L1913.73 1212.13 L1914.32 1212.13 L1914.9 1212.13 L1915.49 1212.13 L1916.08 1212.13 L1916.66 1212.13 L1917.25 1212.13 L1917.83 1212.13 L1918.42 1212.13 L1919.01 1212.13 L1919.59 1212.13 L1920.18 1212.13 L1920.77 1212.13 L1921.35 1212.13 L1921.94 1212.13 L1922.53 1212.13 L1923.11 1212.13 L1923.7 1212.13 L1924.29 1212.13 L1924.87 1212.13 L1925.46 1212.13 L1926.04 1212.13 L1926.63 1212.13 L1927.22 1212.13 L1927.8 1212.13 L1928.39 1212.13 L1928.98 1212.13 L1929.56 1212.13 L1930.15 1212.13 L1930.74 1212.13 L1931.32 1212.13 L1931.91 1212.13 L1932.5 1212.13 L1933.08 1212.13 L1933.67 1212.13 L1934.25 1212.13 L1934.84 1212.13 L1935.43 1212.13 L1936.01 1212.13 L1936.6 1212.13 L1937.19 1212.13 L1937.77 1212.13 L1938.36 1212.13 L1938.95 1212.13 L1939.53 1212.13 L1940.12 1212.13 L1940.71 1212.13 L1941.29 1212.13 L1941.88 1212.13 L1942.46 1212.13 L1943.05 1212.13 L1943.64 1212.13 L1944.22 1212.13 L1944.81 1212.13 L1945.4 1212.13 L1945.98 1212.13 L1946.57 1212.13 L1947.16 1212.13 L1947.74 1212.13 L1948.33 1212.13 L1948.91 1212.13 L1949.5 1212.13 L1950.09 1212.13 L1950.67 1212.13 L1951.26 1212.13 L1951.85 1212.13 L1952.43 1212.13 L1953.02 1212.13 L1953.61 1212.13 L1954.19 1212.13 L1954.78 1212.13 L1955.37 1212.13 L1955.95 1212.13 L1956.54 1212.13 L1957.12 1212.13 L1957.71 1212.13 L1958.3 1212.13 L1958.88 1212.13 L1959.47 1212.13 L1960.06 1212.13 L1960.64 1212.13 L1961.23 1212.13 L1961.82 1212.13 L1962.4 1212.13 L1962.99 1212.13 L1963.58 1212.13 L1964.16 1212.13 L1964.75 1212.13 L1965.33 1212.13 L1965.92 1212.13 L1966.51 1212.13 L1967.09 1212.13 L1967.68 1212.13 L1968.27 1212.13 L1968.85 1212.13 L1969.44 1212.13 L1970.03 1212.13 L1970.61 1212.13 L1971.2 1212.13 L1971.78 1212.13 L1972.37 1212.13 L1972.96 1212.13 L1973.54 1212.13 L1974.13 1212.13 L1974.72 1212.13 L1975.3 1212.13 L1975.89 1212.13 L1976.48 1212.13 L1977.06 1212.13 L1977.65 1212.13 L1978.24 1212.13 L1978.82 1212.13 L1979.41 1212.13 L1979.99 1212.13 L1980.58 1212.13 L1981.17 1212.13 L1981.75 1212.13 L1982.34 1212.13 L1982.93 1212.13 L1983.51 1212.13 L1984.1 1212.13 L1984.69 1212.13 L1985.27 1212.13 L1985.86 1212.13 L1986.45 1212.13 L1987.03 1212.13 L1987.62 1212.13 L1988.2 1212.13 L1988.79 1212.13 L1989.38 1212.13 L1989.96 1212.13 L1990.55 1212.13 L1991.14 1212.13 L1991.72 1212.13 L1992.31 1212.13 L1992.9 1212.13 L1993.48 1212.13 L1994.07 1212.13 L1994.65 1212.13 L1995.24 1212.13 L1995.83 1212.13 L1996.41 1212.13 L1997 1212.13 L1997.59 1212.13 L1998.17 1212.13 L1998.76 1212.13 L1999.35 1212.13 L1999.93 1212.13 L2000.52 1212.13 L2001.11 1212.13 L2001.69 1212.13 L2002.28 1212.13 L2002.86 1212.13 L2003.45 1212.13 L2004.04 1212.13 L2004.62 1212.13 L2005.21 1212.13 L2005.8 1212.13 L2006.38 1212.13 L2006.97 1212.13 L2007.56 1212.13 L2008.14 1212.13 L2008.73 1212.13 L2009.32 1212.13 L2009.9 1212.13 L2010.49 1212.13 L2011.07 1212.13 L2011.66 1212.13 L2012.25 1212.13 L2012.83 1212.13 L2013.42 1212.13 L2014.01 1212.13 L2014.59 1212.13 L2015.18 1212.13 L2015.77 1212.13 L2016.35 1212.13 L2016.94 1212.13 L2017.53 1212.13 L2018.11 1212.13 L2018.7 1212.13 L2019.28 1212.13 L2019.87 1212.13 L2020.46 1212.13 L2021.04 1212.13 L2021.63 1212.13 L2022.22 1212.13 L2022.8 1212.13 L2023.39 1212.13 L2023.98 1212.13 L2024.56 1212.13 L2025.15 1212.13 L2025.73 1212.13 L2026.32 1212.13 L2026.91 1212.13 L2027.49 1212.13 L2028.08 1212.13 L2028.67 1212.13 L2029.25 1212.13 L2029.84 1212.13 L2030.43 1212.13 L2031.01 1212.13 L2031.6 1212.13 L2032.19 1212.13 L2032.77 1212.13 L2033.36 1212.13 L2033.94 1212.13 L2034.53 1212.13 L2035.12 1212.13 L2035.7 1212.13 L2036.29 1212.13 L2036.88 1212.13 L2037.46 1212.13 L2038.05 1212.13 L2038.64 1212.13 L2039.22 1212.13 L2039.81 1212.13 L2040.4 1212.13 L2040.98 1212.13 L2041.57 1212.13 L2042.15 1212.13 L2042.74 1212.13 L2043.33 1212.13 L2043.91 1212.13 L2044.5 1212.13 L2045.09 1212.13 L2045.67 1212.13 L2046.26 1212.13 L2046.85 1212.13 L2047.43 1212.13 L2048.02 1212.13 L2048.6 1212.13 L2049.19 1212.13 L2049.78 1212.13 L2050.36 1212.13 L2050.95 1212.13 L2051.54 1212.13 L2052.12 1212.13 L2052.71 1212.13 L2053.3 1212.13 L2053.88 1212.13 L2054.47 1212.13 L2055.06 1212.13 L2055.64 1212.13 L2056.23 1212.13 L2056.81 1212.13 L2057.4 1212.13 L2057.99 1212.13 L2058.57 1212.13 L2059.16 1212.13 L2059.75 1212.13 L2060.33 1212.13 L2060.92 1212.13 L2061.51 1212.13 L2062.09 1212.13 L2062.68 1212.13 L2063.27 1212.13 L2063.85 1212.13 L2064.44 1212.13 L2065.02 1212.13 L2065.61 1212.13 L2066.2 1212.13 L2066.78 1212.13 L2067.37 1212.13 L2067.96 1212.13 L2068.54 1212.13 L2069.13 1212.13 L2069.72 1212.13 L2070.3 1212.13 L2070.89 1212.13 L2071.48 1212.13 L2072.06 1212.13 L2072.65 1212.13 L2073.23 1212.13 L2073.82 1212.13 L2074.41 1212.13 L2074.99 1212.13 L2075.58 1212.13 L2076.17 1212.13 L2076.75 1212.13 L2077.34 1212.13 L2077.93 1212.13 L2078.51 1212.13 L2079.1 1212.13 L2079.68 1212.13 L2080.27 1212.13 L2080.86 1212.13 L2081.44 1212.13 L2082.03 1212.13 L2082.62 1212.13 L2083.2 1212.13 L2083.79 1212.13 L2084.38 1212.13 L2084.96 1212.13 L2085.55 1212.13 L2086.14 1212.13 L2086.72 1212.13 L2087.31 1212.13 L2087.89 1212.13 L2088.48 1212.13 L2089.07 1212.13 L2089.65 1212.13 L2090.24 1212.13 L2090.83 1212.13 L2091.41 1212.13 L2092 1212.13 L2092.59 1212.13 L2093.17 1212.13 L2093.76 1212.13 L2094.35 1212.13 L2094.93 1212.13 L2095.52 1212.13 L2096.1 1212.13 L2096.69 1212.13 L2097.28 1212.13 L2097.86 1212.13 L2098.45 1212.13 L2099.04 1212.13 L2099.62 1212.13 L2100.21 1212.13 L2100.8 1212.13 L2101.38 1212.13 L2101.97 1212.13 L2102.55 1212.13 L2103.14 1212.13 L2103.73 1212.13 L2104.31 1212.13 L2104.9 1212.13 L2105.49 1212.13 L2106.07 1212.13 L2106.66 1212.13 L2107.25 1212.13 L2107.83 1212.13 L2108.42 1212.13 L2109.01 1212.13 L2109.59 1212.13 L2110.18 1212.13 L2110.76 1212.13 L2111.35 1212.13 L2111.94 1212.13 L2112.52 1212.13 L2113.11 1212.13 L2113.7 1212.13 L2114.28 1212.13 L2114.87 1212.13 L2115.46 1212.13 L2116.04 1212.13 L2116.63 1212.13 L2117.22 1212.13 L2117.8 1212.13 L2118.39 1212.13 L2118.97 1212.13 L2119.56 1212.13 L2120.15 1212.13 L2120.73 1212.13 L2121.32 1212.13 L2121.91 1212.13 L2122.49 1212.13 L2123.08 1212.13 L2123.67 1212.13 L2124.25 1212.13 L2124.84 1212.13 L2125.42 1212.13 L2126.01 1212.13 L2126.6 1212.13 L2127.18 1212.13 L2127.77 1212.13 L2128.36 1212.13 L2128.94 1212.13 L2129.53 1212.13 L2130.12 1212.13 L2130.7 1212.13 L2131.29 1212.13 L2131.88 1212.13 L2132.46 1212.13 L2133.05 1212.13 L2133.63 1212.13 L2134.22 1212.13 L2134.81 1212.13 L2135.39 1212.13 L2135.98 1212.13 L2136.57 1212.13 L2137.15 1212.13 L2137.74 1212.13 L2138.33 1212.13 L2138.91 1212.13 L2139.5 1212.13 L2140.09 1212.13 L2140.67 1212.13 L2141.26 1212.13 L2141.84 1212.13 L2142.43 1212.13 L2143.02 1212.13 L2143.6 1212.13 L2144.19 1212.13 L2144.78 1212.13 L2145.36 1212.13 L2145.95 1212.13 L2146.54 1212.13 L2147.12 1212.13 L2147.71 1212.13 L2148.3 1212.13 L2148.88 1212.13 L2149.47 1212.13 L2150.05 1212.13 L2150.64 1212.13 L2151.23 1212.13 L2151.81 1212.13 L2152.4 1212.13 L2152.99 1212.13 L2153.57 1212.13 L2154.16 1212.13 L2154.75 1212.13 L2155.33 1212.13 L2155.92 1212.13 L2156.5 1212.13 L2157.09 1212.13 L2157.68 1212.13 L2158.26 1212.13 L2158.26 1211.51 L2157.68 1211.51 L2157.09 1211.51 L2156.5 1211.51 L2155.92 1211.51 L2155.33 1211.51 L2154.75 1211.51 L2154.16 1211.51 L2153.57 1211.51 L2152.99 1211.51 L2152.4 1211.51 L2151.81 1211.51 L2151.23 1211.51 L2150.64 1211.51 L2150.05 1211.51 L2149.47 1211.51 L2148.88 1211.51 L2148.3 1211.51 L2147.71 1211.51 L2147.12 1211.51 L2146.54 1211.51 L2145.95 1211.51 L2145.36 1211.51 L2144.78 1211.51 L2144.19 1211.51 L2143.6 1211.51 L2143.02 1211.51 L2142.43 1211.51 L2141.84 1211.51 L2141.26 1211.51 L2140.67 1211.51 L2140.09 1211.51 L2139.5 1211.51 L2138.91 1211.51 L2138.33 1211.51 L2137.74 1211.51 L2137.15 1211.51 L2136.57 1211.51 L2135.98 1211.51 L2135.39 1211.51 L2134.81 1211.51 L2134.22 1211.51 L2133.63 1211.51 L2133.05 1211.51 L2132.46 1211.51 L2131.88 1211.51 L2131.29 1211.51 L2130.7 1211.51 L2130.12 1211.51 L2129.53 1211.51 L2128.94 1211.51 L2128.36 1211.51 L2127.77 1211.51 L2127.18 1211.51 L2126.6 1211.51 L2126.01 1211.51 L2125.42 1211.51 L2124.84 1211.51 L2124.25 1211.51 L2123.67 1211.51 L2123.08 1211.51 L2122.49 1211.51 L2121.91 1211.51 L2121.32 1211.51 L2120.73 1211.51 L2120.15 1211.51 L2119.56 1211.51 L2118.97 1211.51 L2118.39 1211.51 L2117.8 1211.51 L2117.22 1211.51 L2116.63 1211.51 L2116.04 1211.51 L2115.46 1211.51 L2114.87 1211.51 L2114.28 1211.51 L2113.7 1211.51 L2113.11 1211.51 L2112.52 1211.51 L2111.94 1211.51 L2111.35 1211.51 L2110.76 1211.51 L2110.18 1211.51 L2109.59 1211.51 L2109.01 1211.51 L2108.42 1211.51 L2107.83 1211.51 L2107.25 1211.51 L2106.66 1211.51 L2106.07 1211.51 L2105.49 1211.51 L2104.9 1211.51 L2104.31 1211.51 L2103.73 1211.51 L2103.14 1211.51 L2102.55 1211.51 L2101.97 1211.51 L2101.38 1211.51 L2100.8 1211.51 L2100.21 1211.51 L2099.62 1211.51 L2099.04 1211.51 L2098.45 1211.51 L2097.86 1211.51 L2097.28 1211.51 L2096.69 1211.51 L2096.1 1211.51 L2095.52 1211.51 L2094.93 1211.51 L2094.35 1211.51 L2093.76 1211.51 L2093.17 1211.51 L2092.59 1211.51 L2092 1211.51 L2091.41 1211.51 L2090.83 1211.51 L2090.24 1211.51 L2089.65 1211.51 L2089.07 1211.51 L2088.48 1211.51 L2087.89 1211.51 L2087.31 1211.51 L2086.72 1211.51 L2086.14 1211.51 L2085.55 1211.51 L2084.96 1211.51 L2084.38 1211.51 L2083.79 1211.51 L2083.2 1211.51 L2082.62 1211.51 L2082.03 1211.51 L2081.44 1211.51 L2080.86 1211.51 L2080.27 1211.51 L2079.68 1211.51 L2079.1 1211.51 L2078.51 1211.51 L2077.93 1211.51 L2077.34 1211.51 L2076.75 1211.51 L2076.17 1211.51 L2075.58 1211.51 L2074.99 1211.51 L2074.41 1211.51 L2073.82 1211.51 L2073.23 1211.51 L2072.65 1211.51 L2072.06 1211.51 L2071.48 1211.51 L2070.89 1211.51 L2070.3 1211.51 L2069.72 1211.51 L2069.13 1211.51 L2068.54 1211.51 L2067.96 1211.51 L2067.37 1211.51 L2066.78 1211.51 L2066.2 1211.51 L2065.61 1211.51 L2065.02 1211.51 L2064.44 1211.51 L2063.85 1211.51 L2063.27 1211.51 L2062.68 1211.51 L2062.09 1211.51 L2061.51 1211.51 L2060.92 1211.51 L2060.33 1211.51 L2059.75 1211.51 L2059.16 1211.51 L2058.57 1211.51 L2057.99 1211.51 L2057.4 1211.51 L2056.81 1211.51 L2056.23 1211.51 L2055.64 1211.51 L2055.06 1211.51 L2054.47 1211.51 L2053.88 1211.51 L2053.3 1211.51 L2052.71 1211.51 L2052.12 1211.51 L2051.54 1211.51 L2050.95 1211.51 L2050.36 1211.51 L2049.78 1211.51 L2049.19 1211.51 L2048.6 1211.51 L2048.02 1211.51 L2047.43 1211.51 L2046.85 1211.51 L2046.26 1211.51 L2045.67 1211.51 L2045.09 1211.51 L2044.5 1211.51 L2043.91 1211.51 L2043.33 1211.51 L2042.74 1211.51 L2042.15 1211.51 L2041.57 1211.51 L2040.98 1211.51 L2040.4 1211.51 L2039.81 1211.51 L2039.22 1211.51 L2038.64 1211.51 L2038.05 1211.51 L2037.46 1211.51 L2036.88 1211.51 L2036.29 1211.51 L2035.7 1211.51 L2035.12 1211.51 L2034.53 1211.51 L2033.94 1211.51 L2033.36 1211.51 L2032.77 1211.51 L2032.19 1211.51 L2031.6 1211.51 L2031.01 1211.51 L2030.43 1211.51 L2029.84 1211.51 L2029.25 1211.51 L2028.67 1211.51 L2028.08 1211.51 L2027.49 1211.51 L2026.91 1211.51 L2026.32 1211.51 L2025.73 1211.51 L2025.15 1211.51 L2024.56 1211.51 L2023.98 1211.51 L2023.39 1211.51 L2022.8 1211.51 L2022.22 1211.51 L2021.63 1211.51 L2021.04 1211.51 L2020.46 1211.51 L2019.87 1211.51 L2019.28 1211.51 L2018.7 1211.51 L2018.11 1211.51 L2017.53 1211.51 L2016.94 1211.51 L2016.35 1211.51 L2015.77 1211.51 L2015.18 1211.51 L2014.59 1211.51 L2014.01 1211.51 L2013.42 1211.51 L2012.83 1211.51 L2012.25 1211.51 L2011.66 1211.51 L2011.07 1211.51 L2010.49 1211.51 L2009.9 1211.51 L2009.32 1211.51 L2008.73 1211.51 L2008.14 1211.51 L2007.56 1211.51 L2006.97 1211.51 L2006.38 1211.51 L2005.8 1211.51 L2005.21 1211.51 L2004.62 1211.51 L2004.04 1211.51 L2003.45 1211.51 L2002.86 1211.51 L2002.28 1211.51 L2001.69 1211.51 L2001.11 1211.51 L2000.52 1211.51 L1999.93 1211.51 L1999.35 1211.51 L1998.76 1211.51 L1998.17 1211.51 L1997.59 1211.51 L1997 1211.51 L1996.41 1211.51 L1995.83 1211.51 L1995.24 1211.51 L1994.65 1211.51 L1994.07 1211.51 L1993.48 1211.51 L1992.9 1211.51 L1992.31 1211.51 L1991.72 1211.51 L1991.14 1211.51 L1990.55 1211.51 L1989.96 1211.51 L1989.38 1211.51 L1988.79 1211.51 L1988.2 1211.51 L1987.62 1211.51 L1987.03 1211.51 L1986.45 1211.51 L1985.86 1211.51 L1985.27 1211.51 L1984.69 1211.51 L1984.1 1211.51 L1983.51 1211.51 L1982.93 1211.51 L1982.34 1211.51 L1981.75 1211.51 L1981.17 1211.51 L1980.58 1211.51 L1979.99 1211.51 L1979.41 1211.51 L1978.82 1211.51 L1978.24 1211.51 L1977.65 1211.51 L1977.06 1211.51 L1976.48 1211.51 L1975.89 1211.51 L1975.3 1211.51 L1974.72 1211.51 L1974.13 1211.51 L1973.54 1211.51 L1972.96 1211.51 L1972.37 1211.51 L1971.78 1211.51 L1971.2 1211.51 L1970.61 1211.51 L1970.03 1211.51 L1969.44 1211.51 L1968.85 1211.51 L1968.27 1211.51 L1967.68 1211.51 L1967.09 1211.51 L1966.51 1211.51 L1965.92 1211.51 L1965.33 1211.51 L1964.75 1211.51 L1964.16 1211.51 L1963.58 1211.51 L1962.99 1211.51 L1962.4 1211.51 L1961.82 1211.51 L1961.23 1211.51 L1960.64 1211.51 L1960.06 1211.51 L1959.47 1211.51 L1958.88 1211.51 L1958.3 1211.51 L1957.71 1211.51 L1957.12 1211.51 L1956.54 1211.51 L1955.95 1211.51 L1955.37 1211.51 L1954.78 1211.51 L1954.19 1211.51 L1953.61 1211.51 L1953.02 1211.51 L1952.43 1211.51 L1951.85 1211.51 L1951.26 1211.51 L1950.67 1211.51 L1950.09 1211.51 L1949.5 1211.51 L1948.91 1211.51 L1948.33 1211.51 L1947.74 1211.51 L1947.16 1211.51 L1946.57 1211.51 L1945.98 1211.51 L1945.4 1211.51 L1944.81 1211.51 L1944.22 1211.51 L1943.64 1211.51 L1943.05 1211.51 L1942.46 1211.51 L1941.88 1211.51 L1941.29 1211.51 L1940.71 1211.51 L1940.12 1211.51 L1939.53 1211.51 L1938.95 1211.51 L1938.36 1211.51 L1937.77 1211.51 L1937.19 1211.51 L1936.6 1211.51 L1936.01 1211.51 L1935.43 1211.51 L1934.84 1211.51 L1934.25 1211.51 L1933.67 1211.51 L1933.08 1211.51 L1932.5 1211.51 L1931.91 1211.51 L1931.32 1211.51 L1930.74 1211.51 L1930.15 1211.51 L1929.56 1211.51 L1928.98 1211.51 L1928.39 1211.51 L1927.8 1211.51 L1927.22 1211.51 L1926.63 1211.51 L1926.04 1211.51 L1925.46 1211.51 L1924.87 1211.51 L1924.29 1211.51 L1923.7 1211.51 L1923.11 1211.51 L1922.53 1211.51 L1921.94 1211.51 L1921.35 1211.51 L1920.77 1211.51 L1920.18 1211.51 L1919.59 1211.51 L1919.01 1211.51 L1918.42 1211.51 L1917.83 1211.51 L1917.25 1211.51 L1916.66 1211.51 L1916.08 1211.51 L1915.49 1211.51 L1914.9 1211.51 L1914.32 1211.51 L1913.73 1211.51 L1913.14 1211.51 L1912.56 1211.51 L1911.97 1211.51 L1911.38 1211.51 L1910.8 1211.51 L1910.21 1211.51 L1909.63 1211.51 L1909.04 1211.51 L1908.45 1211.51 L1907.87 1211.51 L1907.28 1211.51 L1906.69 1211.51 L1906.11 1211.51 L1905.52 1211.51 L1904.93 1211.51 L1904.35 1211.51 L1903.76 1211.51 L1903.17 1211.51 L1902.59 1211.51 L1902 1211.51 L1901.42 1211.51 L1900.83 1211.51 L1900.24 1211.51 L1899.66 1211.51 L1899.07 1211.51 L1898.48 1211.51 L1897.9 1211.51 L1897.31 1211.51 L1896.72 1211.51 L1896.14 1211.51 L1895.55 1211.51 L1894.96 1211.51 L1894.38 1211.51 L1893.79 1211.51 L1893.21 1211.51 L1892.62 1211.51 L1892.03 1211.51 L1891.45 1211.51 L1890.86 1211.51 L1890.27 1211.51 L1889.69 1211.51 L1889.1 1211.51 L1888.51 1211.51 L1887.93 1211.51 L1887.34 1211.51 L1886.76 1211.51 L1886.17 1211.51 L1885.58 1211.51 L1885 1211.51 L1884.41 1211.51 L1883.82 1211.51 L1883.24 1211.51 L1882.65 1211.51 L1882.06 1211.51 L1881.48 1211.51 L1880.89 1211.51 L1880.3 1211.51 L1879.72 1211.51 L1879.13 1211.51 L1878.55 1211.51 L1877.96 1211.51 L1877.37 1211.51 L1876.79 1211.51 L1876.2 1211.51 L1875.61 1211.51 L1875.03 1211.51 L1874.44 1211.51 L1873.85 1211.51 L1873.27 1211.51 L1872.68 1211.51 L1872.09 1211.51 L1871.51 1211.51 L1870.92 1211.51 L1870.34 1211.51 L1869.75 1211.51 L1869.16 1211.51 L1868.58 1211.51 L1867.99 1211.51 L1867.4 1211.51 L1866.82 1211.51 L1866.23 1211.51 L1865.64 1211.51 L1865.06 1211.51 L1864.47 1211.51 L1863.88 1211.51 L1863.3 1211.51 L1862.71 1211.51 L1862.13 1211.51 L1861.54 1211.51 L1860.95 1211.51 L1860.37 1211.51 L1859.78 1211.51 L1859.19 1211.51 L1858.61 1211.51 L1858.02 1211.51 L1857.43 1211.51 L1856.85 1211.51 L1856.26 1211.51 L1855.68 1211.51 L1855.09 1211.51 L1854.5 1211.51 L1853.92 1211.51 L1853.33 1211.51 L1852.74 1211.51 L1852.16 1211.51 L1851.57 1211.51 L1850.98 1211.51 L1850.4 1211.51 L1849.81 1211.51 L1849.22 1211.51 L1848.64 1211.51 L1848.05 1211.51 L1847.47 1211.51 L1846.88 1211.51 L1846.29 1211.51 L1845.71 1211.51 L1845.12 1211.51 L1844.53 1211.51 L1843.95 1211.51 L1843.36 1211.51 L1842.77 1211.51 L1842.19 1211.51 L1841.6 1211.51 L1841.01 1211.51 L1840.43 1211.51 L1839.84 1211.51 L1839.26 1211.51 L1838.67 1211.51 L1838.08 1211.51 L1837.5 1211.51 L1836.91 1211.51 L1836.32 1211.51 L1835.74 1211.51 L1835.15 1211.51 L1834.56 1211.51 L1833.98 1211.51 L1833.39 1211.51 L1832.81 1211.51 L1832.22 1211.51 L1831.63 1211.51 L1831.05 1211.51 L1830.46 1211.51 L1829.87 1211.51 L1829.29 1211.51 L1828.7 1211.51 L1828.11 1211.51 L1827.53 1211.51 L1826.94 1211.51 L1826.35 1211.51 L1825.77 1211.51 L1825.18 1211.51 L1824.6 1211.51 L1824.01 1211.51 L1823.42 1211.51 L1822.84 1211.51 L1822.25 1211.51 L1821.66 1211.51 L1821.08 1211.51 L1820.49 1211.51 L1819.9 1211.51 L1819.32 1211.51 L1818.73 1211.51 L1818.14 1211.51 L1817.56 1211.51 L1816.97 1211.51 L1816.39 1211.51 L1815.8 1211.51 L1815.21 1211.51 L1814.63 1211.51 L1814.04 1211.51 L1813.45 1211.51 L1812.87 1211.51 L1812.28 1211.51 L1811.69 1211.51 L1811.11 1211.51 L1810.52 1211.51 L1809.94 1211.51 L1809.35 1211.51 L1808.76 1211.51 L1808.18 1211.51 L1807.59 1211.51 L1807 1211.51 L1806.42 1211.51 L1805.83 1211.51 L1805.24 1211.51 L1804.66 1211.51 L1804.07 1211.51 L1803.48 1211.51 L1802.9 1211.51 L1802.31 1211.51 L1801.73 1211.51 L1801.14 1211.51 L1800.55 1211.51 L1799.97 1211.51 L1799.38 1211.51 L1798.79 1211.51 L1798.21 1211.51 L1797.62 1211.51 L1797.03 1211.51 L1796.45 1211.51 L1795.86 1211.51 L1795.27 1211.51 L1794.69 1211.51 L1794.1 1211.51 L1793.52 1211.51 L1792.93 1211.51 L1792.34 1211.51 L1791.76 1211.51 L1791.17 1211.51 L1790.58 1211.51 L1790 1211.51 L1789.41 1211.51 L1788.82 1211.51 L1788.24 1211.51 L1787.65 1211.51 L1787.06 1211.51 L1786.48 1211.51 L1785.89 1211.51 L1785.31 1211.51 L1784.72 1211.51 L1784.13 1211.51 L1783.55 1211.51 L1782.96 1211.51 L1782.37 1211.51 L1781.79 1211.51 L1781.2 1211.51 L1780.61 1211.51 L1780.03 1211.51 L1779.44 1211.51 L1778.86 1211.51 L1778.27 1211.51 L1777.68 1211.51 L1777.1 1211.51 L1776.51 1211.51 L1775.92 1211.51 L1775.34 1211.51 L1774.75 1211.51 L1774.16 1211.51 L1773.58 1211.51 L1772.99 1211.51 L1772.4 1211.51 L1771.82 1211.51 L1771.23 1211.51 L1770.65 1211.51 L1770.06 1211.51 L1769.47 1211.51 L1768.89 1211.51 L1768.3 1211.51 L1767.71 1211.51 L1767.13 1211.51 L1766.54 1211.51 L1765.95 1211.51 L1765.37 1211.51 L1764.78 1211.51 L1764.19 1211.51 L1763.61 1211.51 L1763.02 1211.51 L1762.44 1211.51 L1761.85 1211.51 L1761.26 1211.51 L1760.68 1211.51 L1760.09 1211.51 L1759.5 1211.51 L1758.92 1211.51 L1758.33 1211.51 L1757.74 1211.51 L1757.16 1211.51 L1756.57 1211.51 L1755.99 1211.51 L1755.4 1211.51 L1754.81 1211.51 L1754.23 1211.51 L1753.64 1211.51 L1753.05 1211.51 L1752.47 1211.51 L1751.88 1211.51 L1751.29 1211.51 L1750.71 1211.51 L1750.12 1211.51 L1749.53 1211.51 L1748.95 1211.51 L1748.36 1211.51 L1747.78 1211.51 L1747.19 1211.51 L1746.6 1211.51 L1746.02 1211.51 L1745.43 1211.51 L1744.84 1211.51 L1744.26 1211.51 L1743.67 1211.51 L1743.08 1211.51 L1742.5 1211.51 L1741.91 1211.51 L1741.32 1211.51 L1740.74 1211.51 L1740.15 1211.51 L1739.57 1211.51 L1738.98 1211.51 L1738.39 1211.51 L1737.81 1211.51 L1737.22 1211.51 L1736.63 1211.51 L1736.05 1211.51 L1735.46 1211.51 L1734.87 1211.51 L1734.29 1211.51 L1733.7 1211.51 L1733.11 1211.51 L1732.53 1211.51 L1731.94 1211.51 L1731.36 1211.51 L1730.77 1211.51 L1730.18 1211.51 L1729.6 1211.51 L1729.01 1211.51 L1728.42 1211.51 L1727.84 1211.51 L1727.25 1211.51 L1726.66 1211.51 L1726.08 1211.51 L1725.49 1211.51 L1724.91 1211.51 L1724.32 1211.51 L1723.73 1211.51 L1723.15 1211.51 L1722.56 1211.51 L1721.97 1211.51 L1721.39 1211.51 L1720.8 1211.51 L1720.21 1211.51 L1719.63 1211.51 L1719.04 1211.51 L1718.45 1211.51 L1717.87 1211.51 L1717.28 1211.51 L1716.7 1211.51 L1716.11 1211.51 L1715.52 1211.51 L1714.94 1211.51 L1714.35 1211.51 L1713.76 1211.51 L1713.18 1211.51 L1712.59 1211.51 L1712 1211.51 L1711.42 1211.51 L1710.83 1211.51 L1710.24 1211.51 L1709.66 1211.51 L1709.07 1211.51 L1708.49 1211.51 L1707.9 1211.51 L1707.31 1211.51 L1706.73 1211.51 L1706.14 1211.51 L1705.55 1211.51 L1704.97 1211.51 L1704.38 1211.51 L1703.79 1211.51 L1703.21 1211.51 L1702.62 1211.51 L1702.04 1211.51 L1701.45 1211.51 L1700.86 1211.51 L1700.28 1211.51 L1699.69 1211.51 L1699.1 1211.51 L1698.52 1211.51 L1697.93 1211.51 L1697.34 1211.51 L1696.76 1211.51 L1696.17 1211.51 L1695.58 1211.51 L1695 1211.51 L1694.41 1211.51 L1693.83 1211.51 L1693.24 1211.51 L1692.65 1211.51 L1692.07 1211.51 L1691.48 1211.51 L1690.89 1211.51 L1690.31 1211.51 L1689.72 1211.51 L1689.13 1211.51 L1688.55 1211.51 L1687.96 1211.51 L1687.37 1211.51 L1686.79 1211.51 L1686.2 1211.51 L1685.62 1211.51 L1685.03 1211.51 L1684.44 1211.51 L1683.86 1211.51 L1683.27 1211.51 L1682.68 1211.51 L1682.1 1211.51 L1681.51 1211.51 L1680.92 1211.51 L1680.34 1211.51 L1679.75 1211.51 L1679.17 1211.51 L1678.58 1211.51 L1677.99 1211.51 L1677.41 1211.51 L1676.82 1211.51 L1676.23 1211.51 L1675.65 1211.51 L1675.06 1211.51 L1674.47 1211.51 L1673.89 1211.51 L1673.3 1211.51 L1672.71 1211.51 L1672.13 1211.51 L1671.54 1211.51 L1670.96 1211.51 L1670.37 1211.51 L1669.78 1211.51 L1669.2 1211.51 L1668.61 1211.51 L1668.02 1211.51 L1667.44 1211.51 L1666.85 1211.51 L1666.26 1211.51 L1665.68 1211.51 L1665.09 1211.51 L1664.5 1211.51 L1663.92 1211.51 L1663.33 1211.51 L1662.75 1211.51 L1662.16 1211.51 L1661.57 1211.51 L1660.99 1211.51 L1660.4 1211.51 L1659.81 1211.51 L1659.23 1211.51 L1658.64 1211.51 L1658.05 1211.51 L1657.47 1211.51 L1656.88 1211.51 L1656.29 1211.51 L1655.71 1211.51 L1655.12 1211.51 L1654.54 1211.51 L1653.95 1211.51 L1653.36 1211.51 L1652.78 1211.51 L1652.19 1211.51 L1651.6 1211.51 L1651.02 1211.51 L1650.43 1211.51 L1649.84 1211.51 L1649.26 1211.51 L1648.67 1211.51 L1648.09 1211.51 L1647.5 1211.51 L1646.91 1211.51 L1646.33 1211.51 L1645.74 1211.51 L1645.15 1211.51 L1644.57 1211.51 L1643.98 1211.51 L1643.39 1211.51 L1642.81 1211.51 L1642.22 1211.51 L1641.63 1211.51 L1641.05 1211.51 L1640.46 1211.51 L1639.88 1211.51 L1639.29 1211.51 L1638.7 1211.51 L1638.12 1211.51 L1637.53 1211.51 L1636.94 1211.51 L1636.36 1211.51 L1635.77 1211.51 L1635.18 1211.51 L1634.6 1211.51 L1634.01 1211.51 L1633.42 1211.51 L1632.84 1211.51 L1632.25 1211.51 L1631.67 1211.51 L1631.08 1211.51 L1630.49 1211.51 L1629.91 1211.51 L1629.32 1211.51 L1628.73 1211.51 L1628.15 1211.51 L1627.56 1211.51 L1626.97 1211.51 L1626.39 1211.51 L1625.8 1211.51 L1625.22 1211.51 L1624.63 1211.51 L1624.04 1211.51 L1623.46 1211.51 L1622.87 1211.51 L1622.28 1211.51 L1621.7 1211.51 L1621.11 1211.51 L1620.52 1211.51 L1619.94 1211.51 L1619.35 1211.51 L1618.76 1211.51 L1618.18 1211.51 L1617.59 1211.51 L1617.01 1211.51 L1616.42 1211.51 L1615.83 1211.51 L1615.25 1211.51 L1614.66 1211.51 L1614.07 1211.51 L1613.49 1211.51 L1612.9 1211.51 L1612.31 1211.51 L1611.73 1211.51 L1611.14 1211.51 L1610.55 1211.51 L1609.97 1211.51 L1609.38 1211.51 L1608.8 1211.51 L1608.21 1211.51 L1607.62 1211.51 L1607.04 1211.51 L1606.45 1211.51 L1605.86 1211.51 L1605.28 1211.51 L1604.69 1211.51 L1604.1 1211.51 L1603.52 1211.51 L1602.93 1211.51 L1602.34 1211.51 L1601.76 1211.51 L1601.17 1211.51 L1600.59 1211.51 L1600 1211.51 L1599.41 1211.51 L1598.83 1211.51 L1598.24 1211.51 L1597.65 1211.51 L1597.07 1211.51 L1596.48 1211.51 L1595.89 1211.51 L1595.31 1211.51 L1594.72 1211.51 L1594.14 1211.51 L1593.55 1211.51 L1592.96 1211.51 L1592.38 1211.51 L1591.79 1211.51 L1591.2 1211.51 L1590.62 1211.51 L1590.03 1211.51 L1589.44 1211.51 L1588.86 1211.51 L1588.27 1211.51 L1587.68 1211.51 L1587.1 1211.51 L1586.51 1211.51 L1585.93 1211.51 L1585.34 1211.51 L1584.75 1211.51 L1584.17 1211.51 L1583.58 1211.51 L1582.99 1211.51 L1582.41 1211.51 L1581.82 1211.51 L1581.23 1211.51 L1580.65 1211.51 L1580.06 1211.51 L1579.47 1211.51 L1578.89 1211.51 L1578.3 1211.51 L1577.72 1211.51 L1577.13 1211.51 L1576.54 1211.51 L1575.96 1211.51 L1575.37 1211.51 L1574.78 1211.51 L1574.2 1211.51 L1573.61 1211.51 L1573.02 1211.51 L1572.44 1211.51 L1571.85 1211.51 L1571.27 1211.51 L1570.68 1211.51 L1570.09 1211.51 L1569.51 1211.51 L1568.92 1211.51 L1568.33 1211.51 L1567.75 1211.51 L1567.16 1211.51 L1566.57 1211.51 L1565.99 1211.51 L1565.4 1211.51 L1564.81 1211.51 L1564.23 1211.51 L1563.64 1211.51 L1563.06 1211.51 L1562.47 1211.51 L1561.88 1211.51 L1561.3 1211.51 L1560.71 1211.51 L1560.12 1211.51 L1559.54 1211.51 L1558.95 1211.51 L1558.36 1211.51 L1557.78 1211.51 L1557.19 1211.51 L1556.6 1211.51 L1556.02 1211.51 L1555.43 1211.51 L1554.85 1211.51 L1554.26 1211.51 L1553.67 1211.51 L1553.09 1211.51 L1552.5 1211.51 L1551.91 1211.51 L1551.33 1211.51 L1550.74 1211.51 L1550.15 1211.51 L1549.57 1211.51 L1548.98 1211.51 L1548.4 1211.51 L1547.81 1211.51 L1547.22 1211.51 L1546.64 1211.51 L1546.05 1211.51 L1545.46 1211.51 L1544.88 1211.51 L1544.29 1211.51 L1543.7 1211.51 L1543.12 1211.51 L1542.53 1211.51 L1541.94 1211.51 L1541.36 1211.51 L1540.77 1211.51 L1540.19 1211.51 L1539.6 1211.51 L1539.01 1211.51 L1538.43 1211.51 L1537.84 1211.51 L1537.25 1211.51 L1536.67 1211.51 L1536.08 1211.51 L1535.49 1211.51 L1534.91 1211.51 L1534.32 1211.51 L1533.73 1211.51 L1533.15 1211.51 L1532.56 1211.51 L1531.98 1211.51 L1531.39 1211.51 L1530.8 1211.51 L1530.22 1211.51 L1529.63 1211.51 L1529.04 1211.51 L1528.46 1211.51 L1527.87 1211.51 L1527.28 1211.51 L1526.7 1211.51 L1526.11 1211.51 L1525.52 1211.51 L1524.94 1211.51 L1524.35 1211.51 L1523.77 1211.51 L1523.18 1211.51 L1522.59 1211.51 L1522.01 1211.51 L1521.42 1211.51 L1520.83 1211.51 L1520.25 1211.51 L1519.66 1211.51 L1519.07 1211.51 L1518.49 1211.51 L1517.9 1211.51 L1517.32 1211.51 L1516.73 1211.51 L1516.14 1211.51 L1515.56 1211.51 L1514.97 1211.51 L1514.38 1211.51 L1513.8 1211.51 L1513.21 1211.51 L1512.62 1211.51 L1512.04 1211.51 L1511.45 1211.51 L1510.86 1211.51 L1510.28 1211.51 L1509.69 1211.51 L1509.11 1211.51 L1508.52 1211.51 L1507.93 1211.51 L1507.35 1211.51 L1506.76 1211.51 L1506.17 1211.51 L1505.59 1211.51 L1505 1211.51 L1504.41 1211.51 L1503.83 1211.51 L1503.24 1211.51 L1502.65 1211.51 L1502.07 1211.51 L1501.48 1211.51 L1500.9 1211.51 L1500.31 1211.51 L1499.72 1211.51 L1499.14 1211.51 L1498.55 1211.51 L1497.96 1211.51 L1497.38 1211.51 L1496.79 1211.51 L1496.2 1211.51 L1495.62 1211.51 L1495.03 1211.51 L1494.45 1211.51 L1493.86 1211.51 L1493.27 1211.51 L1492.69 1211.51 L1492.1 1211.51 L1491.51 1211.51 L1490.93 1211.51 L1490.34 1211.51 L1489.75 1211.51 L1489.17 1211.51 L1488.58 1211.51 L1487.99 1211.51 L1487.41 1211.51 L1486.82 1211.51 L1486.24 1211.51 L1485.65 1211.51 L1485.06 1211.51 L1484.48 1211.51 L1483.89 1211.51 L1483.3 1211.51 L1482.72 1211.51 L1482.13 1211.51 L1481.54 1211.51 L1480.96 1211.51 L1480.37 1211.51 L1479.78 1211.51 L1479.2 1211.51 L1478.61 1211.51 L1478.03 1211.51 L1477.44 1211.51 L1476.85 1211.51 L1476.27 1211.51 L1475.68 1211.51 L1475.09 1211.51 L1474.51 1211.51 L1473.92 1211.51 L1473.33 1211.51 L1472.75 1211.51 L1472.16 1211.51 L1471.57 1211.51 L1470.99 1211.51 L1470.4 1211.51 L1469.82 1211.51 L1469.23 1211.51 L1468.64 1211.51 L1468.06 1211.51 L1467.47 1211.51 L1466.88 1211.51 L1466.3 1211.51 L1465.71 1211.51 L1465.12 1211.51 L1464.54 1211.51 L1463.95 1211.51 L1463.37 1211.51 L1462.78 1211.51 L1462.19 1211.51 L1461.61 1211.51 L1461.02 1211.51 L1460.43 1211.51 L1459.85 1211.51 L1459.26 1211.51 L1458.67 1211.51 L1458.09 1211.51 L1457.5 1211.51 L1456.91 1211.51 L1456.33 1211.51 L1455.74 1211.51 L1455.16 1211.51 L1454.57 1211.51 L1453.98 1211.51 L1453.4 1211.51 L1452.81 1211.51 L1452.22 1211.51 L1451.64 1211.51 L1451.05 1211.51 L1450.46 1211.51 L1449.88 1211.51 L1449.29 1211.51 L1448.7 1211.51 L1448.12 1211.51 L1447.53 1211.51 L1446.95 1211.51 L1446.36 1211.51 L1445.77 1211.51 L1445.19 1211.51 L1444.6 1211.51 L1444.01 1211.51 L1443.43 1211.51 L1442.84 1211.51 L1442.25 1211.51 L1441.67 1211.51 L1441.08 1211.51 L1440.5 1211.51 L1439.91 1211.51 L1439.32 1211.51 L1438.74 1211.51 L1438.15 1211.51 L1437.56 1211.51 L1436.98 1211.51 L1436.39 1211.51 L1435.8 1211.51 L1435.22 1211.51 L1434.63 1211.51 L1434.04 1211.51 L1433.46 1211.51 L1432.87 1211.51 L1432.29 1211.51 L1431.7 1211.51 L1431.11 1211.51 L1430.53 1211.51 L1429.94 1211.51 L1429.35 1211.51 L1428.77 1211.51 L1428.18 1211.51 L1427.59 1211.51 L1427.01 1211.51 L1426.42 1211.51 L1425.83 1211.51 L1425.25 1211.51 L1424.66 1211.51 L1424.08 1211.51 L1423.49 1211.51 L1422.9 1211.51 L1422.32 1211.51 L1421.73 1211.51 L1421.14 1211.51 L1420.56 1211.51 L1419.97 1211.51 L1419.38 1211.51 L1418.8 1211.51 L1418.21 1211.51 L1417.63 1211.51 L1417.04 1211.51 L1416.45 1211.51 L1415.87 1211.51 L1415.28 1211.51 L1414.69 1211.51 L1414.11 1211.51 L1413.52 1211.51 L1412.93 1211.51 L1412.35 1211.51 L1411.76 1211.51 L1411.17 1211.51 L1410.59 1211.51 L1410 1211.51 L1409.42 1211.51 L1408.83 1211.51 L1408.24 1211.51 L1407.66 1211.51 L1407.07 1211.51 L1406.48 1211.51 L1405.9 1211.51 L1405.31 1211.51 L1404.72 1211.51 L1404.14 1211.51 L1403.55 1211.51 L1402.96 1211.51 L1402.38 1211.51 L1401.79 1211.51 L1401.21 1211.51 L1400.62 1211.51 L1400.03 1211.51 L1399.45 1211.51 L1398.86 1211.51 L1398.27 1211.51 L1397.69 1211.51 L1397.1 1211.51 L1396.51 1211.51 L1395.93 1211.51 L1395.34 1211.51 L1394.75 1211.51 L1394.17 1211.51 L1393.58 1211.51 L1393 1211.51 L1392.41 1211.51 L1391.82 1211.51 L1391.24 1211.51 L1390.65 1211.51 L1390.06 1211.51 L1389.48 1211.51 L1388.89 1211.51 L1388.3 1211.51 L1387.72 1211.51 L1387.13 1211.51 L1386.55 1211.51 L1385.96 1211.51 L1385.37 1211.51 L1384.79 1211.51 L1384.2 1211.51 L1383.61 1211.51 L1383.03 1211.51 L1382.44 1211.51 L1381.85 1211.51 L1381.27 1211.51 L1380.68 1211.51 L1380.09 1211.51 L1379.51 1211.51 L1378.92 1211.51 L1378.34 1211.51 L1377.75 1211.51 L1377.16 1211.51 L1376.58 1211.51 L1375.99 1211.51 L1375.4 1211.51 L1374.82 1211.51 L1374.23 1211.51 L1373.64 1211.51 L1373.06 1211.51 L1372.47 1211.51 L1371.88 1211.51 L1371.3 1211.51 L1370.71 1211.51 L1370.13 1211.51 L1369.54 1211.51 L1368.95 1211.51 L1368.37 1211.51 L1367.78 1211.51 L1367.19 1211.51 L1366.61 1211.51 L1366.02 1211.51 L1365.43 1211.51 L1364.85 1211.51 L1364.26 1211.51 L1363.68 1211.51 L1363.09 1211.51 L1362.5 1211.51 L1361.92 1211.51 L1361.33 1211.51 L1360.74 1211.51 L1360.16 1211.51 L1359.57 1211.51 L1358.98 1211.51 L1358.4 1211.51 L1357.81 1211.51 L1357.22 1211.51 L1356.64 1211.51 L1356.05 1211.51 L1355.47 1211.51 L1354.88 1211.51 L1354.29 1211.51 L1353.71 1211.51 L1353.12 1211.51 L1352.53 1211.51 L1351.95 1211.51 L1351.36 1211.51 L1350.77 1211.51 L1350.19 1211.51 L1349.6 1211.51 L1349.01 1211.51 L1348.43 1211.51 L1347.84 1211.51 L1347.26 1211.51 L1346.67 1211.51 L1346.08 1211.51 L1345.5 1211.51 L1344.91 1211.51 L1344.32 1211.51 L1343.74 1211.51 L1343.15 1211.51 L1342.56 1211.51 L1341.98 1211.51 L1341.39 1211.51 L1340.8 1211.51 L1340.22 1211.51 L1339.63 1211.51 L1339.05 1211.51 L1338.46 1211.51 L1337.87 1211.51 L1337.29 1211.51 L1336.7 1211.51 L1336.11 1211.51 L1335.53 1211.51 L1334.94 1211.51 L1334.35 1211.51 L1333.77 1211.51 L1333.18 1211.51 L1332.6 1211.51 L1332.01 1211.51 L1331.42 1211.51 L1330.84 1211.51 L1330.25 1211.51 L1329.66 1211.51 L1329.08 1211.51 L1328.49 1211.51 L1327.9 1211.51 L1327.32 1211.51 L1326.73 1211.51 L1326.14 1211.51 L1325.56 1211.51 L1324.97 1211.51 L1324.39 1211.51 L1323.8 1211.51 L1323.21 1211.51 L1322.63 1211.51 L1322.04 1211.51 L1321.45 1211.51 L1320.87 1211.51 L1320.28 1211.51 L1319.69 1211.51 L1319.11 1211.51 L1318.52 1211.51 L1317.93 1211.51 L1317.35 1211.51 L1316.76 1211.51 L1316.18 1211.51 L1315.59 1211.51 L1315 1211.51 L1314.42 1211.51 L1313.83 1211.51 L1313.24 1211.51 L1312.66 1211.51 L1312.07 1211.51 L1311.48 1211.51 L1310.9 1211.51 L1310.31 1211.51 L1309.73 1211.51 L1309.14 1211.51 L1308.55 1211.51 L1307.97 1211.51 L1307.38 1211.51 L1306.79 1211.51 L1306.21 1211.51 L1305.62 1211.51 L1305.03 1211.51 L1304.45 1211.51 L1303.86 1211.51 L1303.27 1211.51 L1302.69 1211.51 L1302.1 1211.51 L1301.52 1211.51 L1300.93 1211.51 L1300.34 1211.51 L1299.76 1211.51 L1299.17 1211.51 L1298.58 1211.51 L1298 1211.51 L1297.41 1211.51 L1296.82 1211.51 L1296.24 1211.51 L1295.65 1211.51 L1295.06 1211.51 L1294.48 1211.51 L1293.89 1211.51 L1293.31 1211.51 L1292.72 1211.51 L1292.13 1211.51 L1291.55 1211.51 L1290.96 1211.51 L1290.37 1211.51 L1289.79 1211.51 L1289.2 1211.51 L1288.61 1211.51 L1288.03 1211.51 L1287.44 1211.51 L1286.86 1211.51 L1286.27 1211.51 L1285.68 1211.51 L1285.1 1211.51 L1284.51 1211.51 L1283.92 1211.51 L1283.34 1211.51 L1282.75 1211.51 L1282.16 1211.51 L1281.58 1211.51 L1280.99 1211.51 L1280.4 1211.51 L1279.82 1211.51 L1279.23 1211.51 L1278.65 1211.51 L1278.06 1211.51 L1277.47 1211.51 L1276.89 1211.51 L1276.3 1211.51 L1275.71 1211.51 L1275.13 1211.51 L1274.54 1211.51 L1273.95 1211.51 L1273.37 1211.51 L1272.78 1211.51 L1272.19 1211.51 L1271.61 1211.51 L1271.02 1211.51 L1270.44 1211.51 L1269.85 1211.51 L1269.26 1211.51 L1268.68 1211.51 L1268.09 1211.51 L1267.5 1211.51 L1266.92 1211.51 L1266.33 1211.51 L1265.74 1211.51 L1265.16 1211.51 L1264.57 1211.51 L1263.98 1211.51 L1263.4 1211.51 L1262.81 1211.51 L1262.23 1211.51 L1261.64 1211.51 L1261.05 1211.51 L1260.47 1211.51 L1259.88 1211.51 L1259.29 1211.51 L1258.71 1211.51 L1258.12 1211.51 L1257.53 1211.51 L1256.95 1211.51 L1256.36 1211.51 L1255.78 1211.51 L1255.19 1211.51 L1254.6 1211.51 L1254.02 1211.51 L1253.43 1211.51 L1252.84 1211.51 L1252.26 1211.51 L1251.67 1211.51 L1251.08 1211.51 L1250.5 1211.51 L1249.91 1211.51 L1249.32 1211.51 L1248.74 1211.51 L1248.15 1211.51 L1247.57 1211.51 L1246.98 1211.51 L1246.39 1211.51 L1245.81 1211.51 L1245.22 1211.51 L1244.63 1211.51 L1244.05 1211.51 L1243.46 1211.51 L1242.87 1211.51 L1242.29 1211.51 L1241.7 1211.51 L1241.11 1211.51 L1240.53 1211.51 L1239.94 1211.51 L1239.36 1211.51 L1238.77 1211.51 L1238.18 1211.51 L1237.6 1211.51 L1237.01 1211.51 L1236.42 1211.51 L1235.84 1211.51 L1235.25 1211.51 L1234.66 1211.51 L1234.08 1211.51 L1233.49 1211.51 L1232.91 1211.51 L1232.32 1211.51 L1231.73 1211.51 L1231.15 1211.51 L1230.56 1211.51 L1229.97 1211.51 L1229.39 1211.51 L1228.8 1211.51 L1228.21 1211.51 L1227.63 1211.51 L1227.04 1211.51 L1226.45 1211.51 L1225.87 1211.51 L1225.28 1211.51 L1224.7 1211.51 L1224.11 1211.51 L1223.52 1211.51 L1222.94 1211.51 L1222.35 1211.51 L1221.76 1211.51 L1221.18 1211.51 L1220.59 1211.51 L1220 1211.51 L1219.42 1211.51 L1218.83 1211.51 L1218.24 1211.51 L1217.66 1211.51 L1217.07 1211.51 L1216.49 1211.51 L1215.9 1211.51 L1215.31 1211.51 L1214.73 1211.51 L1214.14 1211.51 L1213.55 1211.51 L1212.97 1211.51 L1212.38 1211.51 L1211.79 1211.51 L1211.21 1211.51 L1210.62 1211.51 L1210.03 1211.51 L1209.45 1211.51 L1208.86 1211.51 L1208.28 1211.51 L1207.69 1211.51 L1207.1 1211.51 L1206.52 1211.51 L1205.93 1211.51 L1205.34 1211.51 L1204.76 1211.51 L1204.17 1211.51 L1203.58 1211.51 L1203 1211.51 L1202.41 1211.51 L1201.83 1211.51 L1201.24 1211.51 L1200.65 1211.51 L1200.07 1211.51 L1199.48 1211.51 L1198.89 1211.51 L1198.31 1211.51 L1197.72 1211.51 L1197.13 1211.51 L1196.55 1211.51 L1195.96 1211.51 L1195.37 1211.51 L1194.79 1211.51 L1194.2 1211.51 L1193.62 1211.51 L1193.03 1211.51 L1192.44 1211.51 L1191.86 1211.51 L1191.27 1211.51 L1190.68 1211.51 L1190.1 1211.51 L1189.51 1211.51 L1188.92 1211.51 L1188.34 1211.51 L1187.75 1211.51 L1187.16 1211.51 L1186.58 1211.51 L1185.99 1211.51 L1185.41 1211.51 L1184.82 1211.51 L1184.23 1211.51 L1183.65 1211.51 L1183.06 1211.51 L1182.47 1211.51 L1181.89 1211.51 L1181.3 1211.51 L1180.71 1211.51 L1180.13 1211.51 L1179.54 1211.51 L1178.96 1211.51 L1178.37 1211.51 L1177.78 1211.51 L1177.2 1211.51 L1176.61 1211.51 L1176.02 1211.51 L1175.44 1211.51 L1174.85 1211.51 L1174.26 1211.51 L1173.68 1211.51 L1173.09 1211.51 L1172.5 1211.51 L1171.92 1211.51 L1171.33 1211.51 L1170.75 1211.51 L1170.16 1211.51 L1169.57 1211.51 L1168.99 1211.51 L1168.4 1211.51 L1167.81 1211.51 L1167.23 1211.51 L1166.64 1211.51 L1166.05 1211.51 L1165.47 1211.51 L1164.88 1211.51 L1164.29 1211.51 L1163.71 1211.51 L1163.12 1211.51 L1162.54 1211.51 L1161.95 1211.51 L1161.36 1211.51 L1160.78 1211.51 L1160.19 1211.51 L1159.6 1211.51 L1159.02 1211.51 L1158.43 1211.51 L1157.84 1211.51 L1157.26 1211.51 L1156.67 1211.51 L1156.09 1211.51 L1155.5 1211.51 L1154.91 1211.51 L1154.33 1211.51 L1153.74 1211.51 L1153.15 1211.51 L1152.57 1211.51 L1151.98 1211.51 L1151.39 1211.51 L1150.81 1211.51 L1150.22 1211.51 L1149.63 1211.51 L1149.05 1211.51 L1148.46 1211.51 L1147.88 1211.51 L1147.29 1211.51 L1146.7 1211.51 L1146.12 1211.51 L1145.53 1211.51 L1144.94 1211.51 L1144.36 1211.51 L1143.77 1211.51 L1143.18 1211.51 L1142.6 1211.51 L1142.01 1211.51 L1141.42 1211.51 L1140.84 1211.51 L1140.25 1211.51 L1139.67 1211.51 L1139.08 1211.51 L1138.49 1211.51 L1137.91 1211.51 L1137.32 1211.51 L1136.73 1211.51 L1136.15 1211.51 L1135.56 1211.51 L1134.97 1211.51 L1134.39 1211.51 L1133.8 1211.51 L1133.21 1211.51 L1132.63 1211.51 L1132.04 1211.51 L1131.46 1211.51 L1130.87 1211.51 L1130.28 1211.51 L1129.7 1211.51 L1129.11 1211.51 L1128.52 1211.51 L1127.94 1211.51 L1127.35 1211.51 L1126.76 1211.51 L1126.18 1211.51 L1125.59 1211.51 L1125.01 1211.51 L1124.42 1211.51 L1123.83 1211.51 L1123.25 1211.51 L1122.66 1211.51 L1122.07 1211.51 L1121.49 1211.51 L1120.9 1211.51 L1120.31 1211.51 L1119.73 1211.51 L1119.14 1211.51 L1118.55 1211.51 L1117.97 1211.51 L1117.38 1211.51 L1116.8 1211.51 L1116.21 1211.51 L1115.62 1211.51 L1115.04 1211.51 L1114.45 1211.51 L1113.86 1211.51 L1113.28 1211.51 L1112.69 1211.51 L1112.1 1211.51 L1111.52 1211.51 L1110.93 1211.51 L1110.34 1211.51 L1109.76 1211.51 L1109.17 1211.51 L1108.59 1211.51 L1108 1211.51 L1107.41 1211.51 L1106.83 1211.51 L1106.24 1211.51 L1105.65 1211.51 L1105.07 1211.51 L1104.48 1211.51 L1103.89 1211.51 L1103.31 1211.51 L1102.72 1211.51 L1102.14 1211.51 L1101.55 1211.51 L1100.96 1211.51 L1100.38 1211.51 L1099.79 1211.51 L1099.2 1211.51 L1098.62 1211.51 L1098.03 1211.51 L1097.44 1211.51 L1096.86 1211.51 L1096.27 1211.51 L1095.68 1211.51 L1095.1 1211.51 L1094.51 1211.51 L1093.93 1211.51 L1093.34 1211.51 L1092.75 1211.51 L1092.17 1211.51 L1091.58 1211.51 L1090.99 1211.51 L1090.41 1211.51 L1089.82 1211.51 L1089.23 1211.51 L1088.65 1211.51 L1088.06 1211.51 L1087.47 1211.51 L1086.89 1211.51 L1086.3 1211.51 L1085.72 1211.51 L1085.13 1211.51 L1084.54 1211.51 L1083.96 1211.51 L1083.37 1211.51 L1082.78 1211.51 L1082.2 1211.51 L1081.61 1211.51 L1081.02 1211.51 L1080.44 1211.51 L1079.85 1211.51 L1079.26 1211.51 L1078.68 1211.51 L1078.09 1211.51 L1077.51 1211.51 L1076.92 1211.51 L1076.33 1211.51 L1075.75 1211.51 L1075.16 1211.51 L1074.57 1211.51 L1073.99 1211.51 L1073.4 1211.51 L1072.81 1211.51 L1072.23 1211.51 L1071.64 1211.51 L1071.06 1211.51 L1070.47 1211.51 L1069.88 1211.51 L1069.3 1211.51 L1068.71 1211.51 L1068.12 1211.51 L1067.54 1211.51 L1066.95 1211.51 L1066.36 1211.51 L1065.78 1211.51 L1065.19 1211.51 L1064.6 1211.51 L1064.02 1211.51 L1063.43 1211.51 L1062.85 1211.51 L1062.26 1211.51 L1061.67 1211.51 L1061.09 1211.51 L1060.5 1211.51 L1059.91 1211.51 L1059.33 1211.51 L1058.74 1211.51 L1058.15 1211.51 L1057.57 1211.51 L1056.98 1211.51 L1056.39 1211.51 L1055.81 1211.51 L1055.22 1211.51 L1054.64 1211.51 L1054.05 1211.51 L1053.46 1211.51 L1052.88 1211.51 L1052.29 1211.51 L1051.7 1211.51 L1051.12 1211.51 L1050.53 1211.51 L1049.94 1211.51 L1049.36 1211.51 L1048.77 1211.51 L1048.19 1211.51 L1047.6 1211.51 L1047.01 1211.51 L1046.43 1211.51 L1045.84 1211.51 L1045.25 1211.51 L1044.67 1211.51 L1044.08 1211.51 L1043.49 1211.51 L1042.91 1211.51 L1042.32 1211.51 L1041.73 1211.51 L1041.15 1211.51 L1040.56 1211.51 L1039.98 1211.51 L1039.39 1211.51 L1038.8 1211.51 L1038.22 1211.51 L1037.63 1211.51 L1037.04 1211.51 L1036.46 1211.51 L1035.87 1211.51 L1035.28 1211.51 L1034.7 1211.51 L1034.11 1211.51 L1033.52 1211.51 L1032.94 1211.51 L1032.35 1211.51 L1031.77 1211.51 L1031.18 1211.51 L1030.59 1211.51 L1030.01 1211.51 L1029.42 1211.51 L1028.83 1211.51 L1028.25 1211.51 L1027.66 1211.51 L1027.07 1211.51 L1026.49 1211.51 L1025.9 1211.51 L1025.32 1211.51 L1024.73 1211.51 L1024.14 1211.51 L1023.56 1211.51 L1022.97 1211.51 L1022.38 1211.51 L1021.8 1211.51 L1021.21 1211.51 L1020.62 1211.51 L1020.04 1211.51 L1019.45 1211.51 L1018.86 1211.51 L1018.28 1211.51 L1017.69 1211.51 L1017.11 1211.51 L1016.52 1211.51 L1015.93 1211.51 L1015.35 1211.51 L1014.76 1211.51 L1014.17 1211.51 L1013.59 1211.51 L1013 1211.51 L1012.41 1211.51 L1011.83 1211.51 L1011.24 1211.51 L1010.65 1211.51 L1010.07 1211.51 L1009.48 1211.51 L1008.9 1211.51 L1008.31 1211.51 L1007.72 1211.51 L1007.14 1211.51 L1006.55 1211.51 L1005.96 1211.51 L1005.38 1211.51 L1004.79 1211.51 L1004.2 1211.51 L1003.62 1211.51 L1003.03 1211.51 L1002.44 1211.51 L1001.86 1211.51 L1001.27 1211.51 L1000.69 1211.51 L1000.1 1211.51 L999.513 1211.51 L998.926 1211.51 L998.34 1211.51 L997.754 1211.51 L997.167 1211.51 L996.581 1211.51 L995.994 1211.51 L995.408 1211.51 L994.822 1211.51 L994.235 1211.51 L993.649 1211.51 L993.062 1211.51 L992.476 1211.51 L991.889 1211.51 L991.303 1211.51 L990.717 1211.51 L990.13 1211.51 L989.544 1211.51 L988.957 1211.51 L988.371 1211.51 L987.785 1211.51 L987.198 1211.51 L986.612 1211.51 L986.025 1211.51  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.82 986.612,1211.82 987.198,1211.82 987.785,1211.82 988.371,1211.82 988.957,1211.82 989.544,1211.82 990.13,1211.82 990.717,1211.82 991.303,1211.82 991.889,1211.82 992.476,1211.82 993.062,1211.82 993.649,1211.82 994.235,1211.82 994.822,1211.82 995.408,1211.82 995.994,1211.82 996.581,1211.82 997.167,1211.82 997.754,1211.82 998.34,1211.82 998.926,1211.82 999.513,1211.82 1000.1,1211.82 1000.69,1211.82 1001.27,1211.82 1001.86,1211.82 1002.44,1211.82 1003.03,1211.82 1003.62,1211.82 1004.2,1211.82 1004.79,1211.82 1005.38,1211.82 1005.96,1211.82 1006.55,1211.82 1007.14,1211.82 1007.72,1211.82 1008.31,1211.82 1008.9,1211.82 1009.48,1211.82 1010.07,1211.82 1010.65,1211.82 1011.24,1211.82 1011.83,1211.82 1012.41,1211.82 1013,1211.82 1013.59,1211.82 1014.17,1211.82 1014.76,1211.82 1015.35,1211.82 1015.93,1211.82 1016.52,1211.82 1017.11,1211.82 1017.69,1211.82 1018.28,1211.82 1018.86,1211.82 1019.45,1211.82 1020.04,1211.82 1020.62,1211.82 1021.21,1211.82 1021.8,1211.82 1022.38,1211.82 1022.97,1211.82 1023.56,1211.82 1024.14,1211.82 1024.73,1211.82 1025.32,1211.82 1025.9,1211.82 1026.49,1211.82 1027.07,1211.82 1027.66,1211.82 1028.25,1211.82 1028.83,1211.82 1029.42,1211.82 1030.01,1211.82 1030.59,1211.82 1031.18,1211.82 1031.77,1211.82 1032.35,1211.82 1032.94,1211.82 1033.52,1211.82 1034.11,1211.82 1034.7,1211.82 1035.28,1211.82 1035.87,1211.82 1036.46,1211.82 1037.04,1211.82 1037.63,1211.82 1038.22,1211.82 1038.8,1211.82 1039.39,1211.82 1039.98,1211.82 1040.56,1211.82 1041.15,1211.82 1041.73,1211.82 1042.32,1211.82 1042.91,1211.82 1043.49,1211.82 1044.08,1211.82 1044.67,1211.82 1045.25,1211.82 1045.84,1211.82 1046.43,1211.82 1047.01,1211.82 1047.6,1211.82 1048.19,1211.82 1048.77,1211.82 1049.36,1211.82 1049.94,1211.82 1050.53,1211.82 1051.12,1211.82 1051.7,1211.82 1052.29,1211.82 1052.88,1211.82 1053.46,1211.82 1054.05,1211.82 1054.64,1211.82 1055.22,1211.82 1055.81,1211.82 1056.39,1211.82 1056.98,1211.82 1057.57,1211.82 1058.15,1211.82 1058.74,1211.82 1059.33,1211.82 1059.91,1211.82 1060.5,1211.82 1061.09,1211.82 1061.67,1211.82 1062.26,1211.82 1062.85,1211.82 1063.43,1211.82 1064.02,1211.82 1064.6,1211.82 1065.19,1211.82 1065.78,1211.82 1066.36,1211.82 1066.95,1211.82 1067.54,1211.82 1068.12,1211.82 1068.71,1211.82 1069.3,1211.82 1069.88,1211.82 1070.47,1211.82 1071.06,1211.82 1071.64,1211.82 1072.23,1211.82 1072.81,1211.82 1073.4,1211.82 1073.99,1211.82 1074.57,1211.82 1075.16,1211.82 1075.75,1211.82 1076.33,1211.82 1076.92,1211.82 1077.51,1211.82 1078.09,1211.82 1078.68,1211.82 1079.26,1211.82 1079.85,1211.82 1080.44,1211.82 1081.02,1211.82 1081.61,1211.82 1082.2,1211.82 1082.78,1211.82 1083.37,1211.82 1083.96,1211.82 1084.54,1211.82 1085.13,1211.82 1085.72,1211.82 1086.3,1211.82 1086.89,1211.82 1087.47,1211.82 1088.06,1211.82 1088.65,1211.82 1089.23,1211.82 1089.82,1211.82 1090.41,1211.82 1090.99,1211.82 1091.58,1211.82 1092.17,1211.82 1092.75,1211.82 1093.34,1211.82 1093.93,1211.82 1094.51,1211.82 1095.1,1211.82 1095.68,1211.82 1096.27,1211.82 1096.86,1211.82 1097.44,1211.82 1098.03,1211.82 1098.62,1211.82 1099.2,1211.82 1099.79,1211.82 1100.38,1211.82 1100.96,1211.82 1101.55,1211.82 1102.14,1211.82 1102.72,1211.82 1103.31,1211.82 1103.89,1211.82 1104.48,1211.82 1105.07,1211.82 1105.65,1211.82 1106.24,1211.82 1106.83,1211.82 1107.41,1211.82 1108,1211.82 1108.59,1211.82 1109.17,1211.82 1109.76,1211.82 1110.34,1211.82 1110.93,1211.82 1111.52,1211.82 1112.1,1211.82 1112.69,1211.82 1113.28,1211.82 1113.86,1211.82 1114.45,1211.82 1115.04,1211.82 1115.62,1211.82 1116.21,1211.82 1116.8,1211.82 1117.38,1211.82 1117.97,1211.82 1118.55,1211.82 1119.14,1211.82 1119.73,1211.82 1120.31,1211.82 1120.9,1211.82 1121.49,1211.82 1122.07,1211.82 1122.66,1211.82 1123.25,1211.82 1123.83,1211.82 1124.42,1211.82 1125.01,1211.82 1125.59,1211.82 1126.18,1211.82 1126.76,1211.82 1127.35,1211.82 1127.94,1211.82 1128.52,1211.82 1129.11,1211.82 1129.7,1211.82 1130.28,1211.82 1130.87,1211.82 1131.46,1211.82 1132.04,1211.82 1132.63,1211.82 1133.21,1211.82 1133.8,1211.82 1134.39,1211.82 1134.97,1211.82 1135.56,1211.82 1136.15,1211.82 1136.73,1211.82 1137.32,1211.82 1137.91,1211.82 1138.49,1211.82 1139.08,1211.82 1139.67,1211.82 1140.25,1211.82 1140.84,1211.82 1141.42,1211.82 1142.01,1211.82 1142.6,1211.82 1143.18,1211.82 1143.77,1211.82 1144.36,1211.82 1144.94,1211.82 1145.53,1211.82 1146.12,1211.82 1146.7,1211.82 1147.29,1211.82 1147.88,1211.82 1148.46,1211.82 1149.05,1211.82 1149.63,1211.82 1150.22,1211.82 1150.81,1211.82 1151.39,1211.82 1151.98,1211.82 1152.57,1211.82 1153.15,1211.82 1153.74,1211.82 1154.33,1211.82 1154.91,1211.82 1155.5,1211.82 1156.09,1211.82 1156.67,1211.82 1157.26,1211.82 1157.84,1211.82 1158.43,1211.82 1159.02,1211.82 1159.6,1211.82 1160.19,1211.82 1160.78,1211.82 1161.36,1211.82 1161.95,1211.82 1162.54,1211.82 1163.12,1211.82 1163.71,1211.82 1164.29,1211.82 1164.88,1211.82 1165.47,1211.82 1166.05,1211.82 1166.64,1211.82 1167.23,1211.82 1167.81,1211.82 1168.4,1211.82 1168.99,1211.82 1169.57,1211.82 1170.16,1211.82 1170.75,1211.82 1171.33,1211.82 1171.92,1211.82 1172.5,1211.82 1173.09,1211.82 1173.68,1211.82 1174.26,1211.82 1174.85,1211.82 1175.44,1211.82 1176.02,1211.82 1176.61,1211.82 1177.2,1211.82 1177.78,1211.82 1178.37,1211.82 1178.96,1211.82 1179.54,1211.82 1180.13,1211.82 1180.71,1211.82 1181.3,1211.82 1181.89,1211.82 1182.47,1211.82 1183.06,1211.82 1183.65,1211.82 1184.23,1211.82 1184.82,1211.82 1185.41,1211.82 1185.99,1211.82 1186.58,1211.82 1187.16,1211.82 1187.75,1211.82 1188.34,1211.82 1188.92,1211.82 1189.51,1211.82 1190.1,1211.82 1190.68,1211.82 1191.27,1211.82 1191.86,1211.82 1192.44,1211.82 1193.03,1211.82 1193.62,1211.82 1194.2,1211.82 1194.79,1211.82 1195.37,1211.82 1195.96,1211.82 1196.55,1211.82 1197.13,1211.82 1197.72,1211.82 1198.31,1211.82 1198.89,1211.82 1199.48,1211.82 1200.07,1211.82 1200.65,1211.82 1201.24,1211.82 1201.83,1211.82 1202.41,1211.82 1203,1211.82 1203.58,1211.82 1204.17,1211.82 1204.76,1211.82 1205.34,1211.82 1205.93,1211.82 1206.52,1211.82 1207.1,1211.82 1207.69,1211.82 1208.28,1211.82 1208.86,1211.82 1209.45,1211.82 1210.03,1211.82 1210.62,1211.82 1211.21,1211.82 1211.79,1211.82 1212.38,1211.82 1212.97,1211.82 1213.55,1211.82 1214.14,1211.82 1214.73,1211.82 1215.31,1211.82 1215.9,1211.82 1216.49,1211.82 1217.07,1211.82 1217.66,1211.82 1218.24,1211.82 1218.83,1211.82 1219.42,1211.82 1220,1211.82 1220.59,1211.82 1221.18,1211.82 1221.76,1211.82 1222.35,1211.82 1222.94,1211.82 1223.52,1211.82 1224.11,1211.82 1224.7,1211.82 1225.28,1211.82 1225.87,1211.82 1226.45,1211.82 1227.04,1211.82 1227.63,1211.82 1228.21,1211.82 1228.8,1211.82 1229.39,1211.82 1229.97,1211.82 1230.56,1211.82 1231.15,1211.82 1231.73,1211.82 1232.32,1211.82 1232.91,1211.82 1233.49,1211.82 1234.08,1211.82 1234.66,1211.82 1235.25,1211.82 1235.84,1211.82 1236.42,1211.82 1237.01,1211.82 1237.6,1211.82 1238.18,1211.82 1238.77,1211.82 1239.36,1211.82 1239.94,1211.82 1240.53,1211.82 1241.11,1211.82 1241.7,1211.82 1242.29,1211.82 1242.87,1211.82 1243.46,1211.82 1244.05,1211.82 1244.63,1211.82 1245.22,1211.82 1245.81,1211.82 1246.39,1211.82 1246.98,1211.82 1247.57,1211.82 1248.15,1211.82 1248.74,1211.82 1249.32,1211.82 1249.91,1211.82 1250.5,1211.82 1251.08,1211.82 1251.67,1211.82 1252.26,1211.82 1252.84,1211.82 1253.43,1211.82 1254.02,1211.82 1254.6,1211.82 1255.19,1211.82 1255.78,1211.82 1256.36,1211.82 1256.95,1211.82 1257.53,1211.82 1258.12,1211.82 1258.71,1211.82 1259.29,1211.82 1259.88,1211.82 1260.47,1211.82 1261.05,1211.82 1261.64,1211.82 1262.23,1211.82 1262.81,1211.82 1263.4,1211.82 1263.98,1211.82 1264.57,1211.82 1265.16,1211.82 1265.74,1211.82 1266.33,1211.82 1266.92,1211.82 1267.5,1211.82 1268.09,1211.82 1268.68,1211.82 1269.26,1211.82 1269.85,1211.82 1270.44,1211.82 1271.02,1211.82 1271.61,1211.82 1272.19,1211.82 1272.78,1211.82 1273.37,1211.82 1273.95,1211.82 1274.54,1211.82 1275.13,1211.82 1275.71,1211.82 1276.3,1211.82 1276.89,1211.82 1277.47,1211.82 1278.06,1211.82 1278.65,1211.82 1279.23,1211.82 1279.82,1211.82 1280.4,1211.82 1280.99,1211.82 1281.58,1211.82 1282.16,1211.82 1282.75,1211.82 1283.34,1211.82 1283.92,1211.82 1284.51,1211.82 1285.1,1211.82 1285.68,1211.82 1286.27,1211.82 1286.86,1211.82 1287.44,1211.82 1288.03,1211.82 1288.61,1211.82 1289.2,1211.82 1289.79,1211.82 1290.37,1211.82 1290.96,1211.82 1291.55,1211.82 1292.13,1211.82 1292.72,1211.82 1293.31,1211.82 1293.89,1211.82 1294.48,1211.82 1295.06,1211.82 1295.65,1211.82 1296.24,1211.82 1296.82,1211.82 1297.41,1211.82 1298,1211.82 1298.58,1211.82 1299.17,1211.82 1299.76,1211.82 1300.34,1211.82 1300.93,1211.82 1301.52,1211.82 1302.1,1211.82 1302.69,1211.82 1303.27,1211.82 1303.86,1211.82 1304.45,1211.82 1305.03,1211.82 1305.62,1211.82 1306.21,1211.82 1306.79,1211.82 1307.38,1211.82 1307.97,1211.82 1308.55,1211.82 1309.14,1211.82 1309.73,1211.82 1310.31,1211.82 1310.9,1211.82 1311.48,1211.82 1312.07,1211.82 1312.66,1211.82 1313.24,1211.82 1313.83,1211.82 1314.42,1211.82 1315,1211.82 1315.59,1211.82 1316.18,1211.82 1316.76,1211.82 1317.35,1211.82 1317.93,1211.82 1318.52,1211.82 1319.11,1211.82 1319.69,1211.82 1320.28,1211.82 1320.87,1211.82 1321.45,1211.82 1322.04,1211.82 1322.63,1211.82 1323.21,1211.82 1323.8,1211.82 1324.39,1211.82 1324.97,1211.82 1325.56,1211.82 1326.14,1211.82 1326.73,1211.82 1327.32,1211.82 1327.9,1211.82 1328.49,1211.82 1329.08,1211.82 1329.66,1211.82 1330.25,1211.82 1330.84,1211.82 1331.42,1211.82 1332.01,1211.82 1332.6,1211.82 1333.18,1211.82 1333.77,1211.82 1334.35,1211.82 1334.94,1211.82 1335.53,1211.82 1336.11,1211.82 1336.7,1211.82 1337.29,1211.82 1337.87,1211.82 1338.46,1211.82 1339.05,1211.82 1339.63,1211.82 1340.22,1211.82 1340.8,1211.82 1341.39,1211.82 1341.98,1211.82 1342.56,1211.82 1343.15,1211.82 1343.74,1211.82 1344.32,1211.82 1344.91,1211.82 1345.5,1211.82 1346.08,1211.82 1346.67,1211.82 1347.26,1211.82 1347.84,1211.82 1348.43,1211.82 1349.01,1211.82 1349.6,1211.82 1350.19,1211.82 1350.77,1211.82 1351.36,1211.82 1351.95,1211.82 1352.53,1211.82 1353.12,1211.82 1353.71,1211.82 1354.29,1211.82 1354.88,1211.82 1355.47,1211.82 1356.05,1211.82 1356.64,1211.82 1357.22,1211.82 1357.81,1211.82 1358.4,1211.82 1358.98,1211.82 1359.57,1211.82 1360.16,1211.82 1360.74,1211.82 1361.33,1211.82 1361.92,1211.82 1362.5,1211.82 1363.09,1211.82 1363.68,1211.82 1364.26,1211.82 1364.85,1211.82 1365.43,1211.82 1366.02,1211.82 1366.61,1211.82 1367.19,1211.82 1367.78,1211.82 1368.37,1211.82 1368.95,1211.82 1369.54,1211.82 1370.13,1211.82 1370.71,1211.82 1371.3,1211.82 1371.88,1211.82 1372.47,1211.82 1373.06,1211.82 1373.64,1211.82 1374.23,1211.82 1374.82,1211.82 1375.4,1211.82 1375.99,1211.82 1376.58,1211.82 1377.16,1211.82 1377.75,1211.82 1378.34,1211.82 1378.92,1211.82 1379.51,1211.82 1380.09,1211.82 1380.68,1211.82 1381.27,1211.82 1381.85,1211.82 1382.44,1211.82 1383.03,1211.82 1383.61,1211.82 1384.2,1211.82 1384.79,1211.82 1385.37,1211.82 1385.96,1211.82 1386.55,1211.82 1387.13,1211.82 1387.72,1211.82 1388.3,1211.82 1388.89,1211.82 1389.48,1211.82 1390.06,1211.82 1390.65,1211.82 1391.24,1211.82 1391.82,1211.82 1392.41,1211.82 1393,1211.82 1393.58,1211.82 1394.17,1211.82 1394.75,1211.82 1395.34,1211.82 1395.93,1211.82 1396.51,1211.82 1397.1,1211.82 1397.69,1211.82 1398.27,1211.82 1398.86,1211.82 1399.45,1211.82 1400.03,1211.82 1400.62,1211.82 1401.21,1211.82 1401.79,1211.82 1402.38,1211.82 1402.96,1211.82 1403.55,1211.82 1404.14,1211.82 1404.72,1211.82 1405.31,1211.82 1405.9,1211.82 1406.48,1211.82 1407.07,1211.82 1407.66,1211.82 1408.24,1211.82 1408.83,1211.82 1409.42,1211.82 1410,1211.82 1410.59,1211.82 1411.17,1211.82 1411.76,1211.82 1412.35,1211.82 1412.93,1211.82 1413.52,1211.82 1414.11,1211.82 1414.69,1211.82 1415.28,1211.82 1415.87,1211.82 1416.45,1211.82 1417.04,1211.82 1417.63,1211.82 1418.21,1211.82 1418.8,1211.82 1419.38,1211.82 1419.97,1211.82 1420.56,1211.82 1421.14,1211.82 1421.73,1211.82 1422.32,1211.82 1422.9,1211.82 1423.49,1211.82 1424.08,1211.82 1424.66,1211.82 1425.25,1211.82 1425.83,1211.82 1426.42,1211.82 1427.01,1211.82 1427.59,1211.82 1428.18,1211.82 1428.77,1211.82 1429.35,1211.82 1429.94,1211.82 1430.53,1211.82 1431.11,1211.82 1431.7,1211.82 1432.29,1211.82 1432.87,1211.82 1433.46,1211.82 1434.04,1211.82 1434.63,1211.82 1435.22,1211.82 1435.8,1211.82 1436.39,1211.82 1436.98,1211.82 1437.56,1211.82 1438.15,1211.82 1438.74,1211.82 1439.32,1211.82 1439.91,1211.82 1440.5,1211.82 1441.08,1211.82 1441.67,1211.82 1442.25,1211.82 1442.84,1211.82 1443.43,1211.82 1444.01,1211.82 1444.6,1211.82 1445.19,1211.82 1445.77,1211.82 1446.36,1211.82 1446.95,1211.82 1447.53,1211.82 1448.12,1211.82 1448.7,1211.82 1449.29,1211.82 1449.88,1211.82 1450.46,1211.82 1451.05,1211.82 1451.64,1211.82 1452.22,1211.82 1452.81,1211.82 1453.4,1211.82 1453.98,1211.82 1454.57,1211.82 1455.16,1211.82 1455.74,1211.82 1456.33,1211.82 1456.91,1211.82 1457.5,1211.82 1458.09,1211.82 1458.67,1211.82 1459.26,1211.82 1459.85,1211.82 1460.43,1211.82 1461.02,1211.82 1461.61,1211.82 1462.19,1211.82 1462.78,1211.82 1463.37,1211.82 1463.95,1211.82 1464.54,1211.82 1465.12,1211.82 1465.71,1211.82 1466.3,1211.82 1466.88,1211.82 1467.47,1211.82 1468.06,1211.82 1468.64,1211.82 1469.23,1211.82 1469.82,1211.82 1470.4,1211.82 1470.99,1211.82 1471.57,1211.82 1472.16,1211.82 1472.75,1211.82 1473.33,1211.82 1473.92,1211.82 1474.51,1211.82 1475.09,1211.82 1475.68,1211.82 1476.27,1211.82 1476.85,1211.82 1477.44,1211.82 1478.03,1211.82 1478.61,1211.82 1479.2,1211.82 1479.78,1211.82 1480.37,1211.82 1480.96,1211.82 1481.54,1211.82 1482.13,1211.82 1482.72,1211.82 1483.3,1211.82 1483.89,1211.82 1484.48,1211.82 1485.06,1211.82 1485.65,1211.82 1486.24,1211.82 1486.82,1211.82 1487.41,1211.82 1487.99,1211.82 1488.58,1211.82 1489.17,1211.82 1489.75,1211.82 1490.34,1211.82 1490.93,1211.82 1491.51,1211.82 1492.1,1211.82 1492.69,1211.82 1493.27,1211.82 1493.86,1211.82 1494.45,1211.82 1495.03,1211.82 1495.62,1211.82 1496.2,1211.82 1496.79,1211.82 1497.38,1211.82 1497.96,1211.82 1498.55,1211.82 1499.14,1211.82 1499.72,1211.82 1500.31,1211.82 1500.9,1211.82 1501.48,1211.82 1502.07,1211.82 1502.65,1211.82 1503.24,1211.82 1503.83,1211.82 1504.41,1211.82 1505,1211.82 1505.59,1211.82 1506.17,1211.82 1506.76,1211.82 1507.35,1211.82 1507.93,1211.82 1508.52,1211.82 1509.11,1211.82 1509.69,1211.82 1510.28,1211.82 1510.86,1211.82 1511.45,1211.82 1512.04,1211.82 1512.62,1211.82 1513.21,1211.82 1513.8,1211.82 1514.38,1211.82 1514.97,1211.82 1515.56,1211.82 1516.14,1211.82 1516.73,1211.82 1517.32,1211.82 1517.9,1211.82 1518.49,1211.82 1519.07,1211.82 1519.66,1211.82 1520.25,1211.82 1520.83,1211.82 1521.42,1211.82 1522.01,1211.82 1522.59,1211.82 1523.18,1211.82 1523.77,1211.82 1524.35,1211.82 1524.94,1211.82 1525.52,1211.82 1526.11,1211.82 1526.7,1211.82 1527.28,1211.82 1527.87,1211.82 1528.46,1211.82 1529.04,1211.82 1529.63,1211.82 1530.22,1211.82 1530.8,1211.82 1531.39,1211.82 1531.98,1211.82 1532.56,1211.82 1533.15,1211.82 1533.73,1211.82 1534.32,1211.82 1534.91,1211.82 1535.49,1211.82 1536.08,1211.82 1536.67,1211.82 1537.25,1211.82 1537.84,1211.82 1538.43,1211.82 1539.01,1211.82 1539.6,1211.82 1540.19,1211.82 1540.77,1211.82 1541.36,1211.82 1541.94,1211.82 1542.53,1211.82 1543.12,1211.82 1543.7,1211.82 1544.29,1211.82 1544.88,1211.82 1545.46,1211.82 1546.05,1211.82 1546.64,1211.82 1547.22,1211.82 1547.81,1211.82 1548.4,1211.82 1548.98,1211.82 1549.57,1211.82 1550.15,1211.82 1550.74,1211.82 1551.33,1211.82 1551.91,1211.82 1552.5,1211.82 1553.09,1211.82 1553.67,1211.82 1554.26,1211.82 1554.85,1211.82 1555.43,1211.82 1556.02,1211.82 1556.6,1211.82 1557.19,1211.82 1557.78,1211.82 1558.36,1211.82 1558.95,1211.82 1559.54,1211.82 1560.12,1211.82 1560.71,1211.82 1561.3,1211.82 1561.88,1211.82 1562.47,1211.82 1563.06,1211.82 1563.64,1211.82 1564.23,1211.82 1564.81,1211.82 1565.4,1211.82 1565.99,1211.82 1566.57,1211.82 1567.16,1211.82 1567.75,1211.82 1568.33,1211.82 1568.92,1211.82 1569.51,1211.82 1570.09,1211.82 1570.68,1211.82 1571.27,1211.82 1571.85,1211.82 1572.44,1211.82 1573.02,1211.82 1573.61,1211.82 1574.2,1211.82 1574.78,1211.82 1575.37,1211.82 1575.96,1211.82 1576.54,1211.82 1577.13,1211.82 1577.72,1211.82 1578.3,1211.82 1578.89,1211.82 1579.47,1211.82 1580.06,1211.82 1580.65,1211.82 1581.23,1211.82 1581.82,1211.82 1582.41,1211.82 1582.99,1211.82 1583.58,1211.82 1584.17,1211.82 1584.75,1211.82 1585.34,1211.82 1585.93,1211.82 1586.51,1211.82 1587.1,1211.82 1587.68,1211.82 1588.27,1211.82 1588.86,1211.82 1589.44,1211.82 1590.03,1211.82 1590.62,1211.82 1591.2,1211.82 1591.79,1211.82 1592.38,1211.82 1592.96,1211.82 1593.55,1211.82 1594.14,1211.82 1594.72,1211.82 1595.31,1211.82 1595.89,1211.82 1596.48,1211.82 1597.07,1211.82 1597.65,1211.82 1598.24,1211.82 1598.83,1211.82 1599.41,1211.82 1600,1211.82 1600.59,1211.82 1601.17,1211.82 1601.76,1211.82 1602.34,1211.82 1602.93,1211.82 1603.52,1211.82 1604.1,1211.82 1604.69,1211.82 1605.28,1211.82 1605.86,1211.82 1606.45,1211.82 1607.04,1211.82 1607.62,1211.82 1608.21,1211.82 1608.8,1211.82 1609.38,1211.82 1609.97,1211.82 1610.55,1211.82 1611.14,1211.82 1611.73,1211.82 1612.31,1211.82 1612.9,1211.82 1613.49,1211.82 1614.07,1211.82 1614.66,1211.82 1615.25,1211.82 1615.83,1211.82 1616.42,1211.82 1617.01,1211.82 1617.59,1211.82 1618.18,1211.82 1618.76,1211.82 1619.35,1211.82 1619.94,1211.82 1620.52,1211.82 1621.11,1211.82 1621.7,1211.82 1622.28,1211.82 1622.87,1211.82 1623.46,1211.82 1624.04,1211.82 1624.63,1211.82 1625.22,1211.82 1625.8,1211.82 1626.39,1211.82 1626.97,1211.82 1627.56,1211.82 1628.15,1211.82 1628.73,1211.82 1629.32,1211.82 1629.91,1211.82 1630.49,1211.82 1631.08,1211.82 1631.67,1211.82 1632.25,1211.82 1632.84,1211.82 1633.42,1211.82 1634.01,1211.82 1634.6,1211.82 1635.18,1211.82 1635.77,1211.82 1636.36,1211.82 1636.94,1211.82 1637.53,1211.82 1638.12,1211.82 1638.7,1211.82 1639.29,1211.82 1639.88,1211.82 1640.46,1211.82 1641.05,1211.82 1641.63,1211.82 1642.22,1211.82 1642.81,1211.82 1643.39,1211.82 1643.98,1211.82 1644.57,1211.82 1645.15,1211.82 1645.74,1211.82 1646.33,1211.82 1646.91,1211.82 1647.5,1211.82 1648.09,1211.82 1648.67,1211.82 1649.26,1211.82 1649.84,1211.82 1650.43,1211.82 1651.02,1211.82 1651.6,1211.82 1652.19,1211.82 1652.78,1211.82 1653.36,1211.82 1653.95,1211.82 1654.54,1211.82 1655.12,1211.82 1655.71,1211.82 1656.29,1211.82 1656.88,1211.82 1657.47,1211.82 1658.05,1211.82 1658.64,1211.82 1659.23,1211.82 1659.81,1211.82 1660.4,1211.82 1660.99,1211.82 1661.57,1211.82 1662.16,1211.82 1662.75,1211.82 1663.33,1211.82 1663.92,1211.82 1664.5,1211.82 1665.09,1211.82 1665.68,1211.82 1666.26,1211.82 1666.85,1211.82 1667.44,1211.82 1668.02,1211.82 1668.61,1211.82 1669.2,1211.82 1669.78,1211.82 1670.37,1211.82 1670.96,1211.82 1671.54,1211.82 1672.13,1211.82 1672.71,1211.82 1673.3,1211.82 1673.89,1211.82 1674.47,1211.82 1675.06,1211.82 1675.65,1211.82 1676.23,1211.82 1676.82,1211.82 1677.41,1211.82 1677.99,1211.82 1678.58,1211.82 1679.17,1211.82 1679.75,1211.82 1680.34,1211.82 1680.92,1211.82 1681.51,1211.82 1682.1,1211.82 1682.68,1211.82 1683.27,1211.82 1683.86,1211.82 1684.44,1211.82 1685.03,1211.82 1685.62,1211.82 1686.2,1211.82 1686.79,1211.82 1687.37,1211.82 1687.96,1211.82 1688.55,1211.82 1689.13,1211.82 1689.72,1211.82 1690.31,1211.82 1690.89,1211.82 1691.48,1211.82 1692.07,1211.82 1692.65,1211.82 1693.24,1211.82 1693.83,1211.82 1694.41,1211.82 1695,1211.82 1695.58,1211.82 1696.17,1211.82 1696.76,1211.82 1697.34,1211.82 1697.93,1211.82 1698.52,1211.82 1699.1,1211.82 1699.69,1211.82 1700.28,1211.82 1700.86,1211.82 1701.45,1211.82 1702.04,1211.82 1702.62,1211.82 1703.21,1211.82 1703.79,1211.82 1704.38,1211.82 1704.97,1211.82 1705.55,1211.82 1706.14,1211.82 1706.73,1211.82 1707.31,1211.82 1707.9,1211.82 1708.49,1211.82 1709.07,1211.82 1709.66,1211.82 1710.24,1211.82 1710.83,1211.82 1711.42,1211.82 1712,1211.82 1712.59,1211.82 1713.18,1211.82 1713.76,1211.82 1714.35,1211.82 1714.94,1211.82 1715.52,1211.82 1716.11,1211.82 1716.7,1211.82 1717.28,1211.82 1717.87,1211.82 1718.45,1211.82 1719.04,1211.82 1719.63,1211.82 1720.21,1211.82 1720.8,1211.82 1721.39,1211.82 1721.97,1211.82 1722.56,1211.82 1723.15,1211.82 1723.73,1211.82 1724.32,1211.82 1724.91,1211.82 1725.49,1211.82 1726.08,1211.82 1726.66,1211.82 1727.25,1211.82 1727.84,1211.82 1728.42,1211.82 1729.01,1211.82 1729.6,1211.82 1730.18,1211.82 1730.77,1211.82 1731.36,1211.82 1731.94,1211.82 1732.53,1211.82 1733.11,1211.82 1733.7,1211.82 1734.29,1211.82 1734.87,1211.82 1735.46,1211.82 1736.05,1211.82 1736.63,1211.82 1737.22,1211.82 1737.81,1211.82 1738.39,1211.82 1738.98,1211.82 1739.57,1211.82 1740.15,1211.82 1740.74,1211.82 1741.32,1211.82 1741.91,1211.82 1742.5,1211.82 1743.08,1211.82 1743.67,1211.82 1744.26,1211.82 1744.84,1211.82 1745.43,1211.82 1746.02,1211.82 1746.6,1211.82 1747.19,1211.82 1747.78,1211.82 1748.36,1211.82 1748.95,1211.82 1749.53,1211.82 1750.12,1211.82 1750.71,1211.82 1751.29,1211.82 1751.88,1211.82 1752.47,1211.82 1753.05,1211.82 1753.64,1211.82 1754.23,1211.82 1754.81,1211.82 1755.4,1211.82 1755.99,1211.82 1756.57,1211.82 1757.16,1211.82 1757.74,1211.82 1758.33,1211.82 1758.92,1211.82 1759.5,1211.82 1760.09,1211.82 1760.68,1211.82 1761.26,1211.82 1761.85,1211.82 1762.44,1211.82 1763.02,1211.82 1763.61,1211.82 1764.19,1211.82 1764.78,1211.82 1765.37,1211.82 1765.95,1211.82 1766.54,1211.82 1767.13,1211.82 1767.71,1211.82 1768.3,1211.82 1768.89,1211.82 1769.47,1211.82 1770.06,1211.82 1770.65,1211.82 1771.23,1211.82 1771.82,1211.82 1772.4,1211.82 1772.99,1211.82 1773.58,1211.82 1774.16,1211.82 1774.75,1211.82 1775.34,1211.82 1775.92,1211.82 1776.51,1211.82 1777.1,1211.82 1777.68,1211.82 1778.27,1211.82 1778.86,1211.82 1779.44,1211.82 1780.03,1211.82 1780.61,1211.82 1781.2,1211.82 1781.79,1211.82 1782.37,1211.82 1782.96,1211.82 1783.55,1211.82 1784.13,1211.82 1784.72,1211.82 1785.31,1211.82 1785.89,1211.82 1786.48,1211.82 1787.06,1211.82 1787.65,1211.82 1788.24,1211.82 1788.82,1211.82 1789.41,1211.82 1790,1211.82 1790.58,1211.82 1791.17,1211.82 1791.76,1211.82 1792.34,1211.82 1792.93,1211.82 1793.52,1211.82 1794.1,1211.82 1794.69,1211.82 1795.27,1211.82 1795.86,1211.82 1796.45,1211.82 1797.03,1211.82 1797.62,1211.82 1798.21,1211.82 1798.79,1211.82 1799.38,1211.82 1799.97,1211.82 1800.55,1211.82 1801.14,1211.82 1801.73,1211.82 1802.31,1211.82 1802.9,1211.82 1803.48,1211.82 1804.07,1211.82 1804.66,1211.82 1805.24,1211.82 1805.83,1211.82 1806.42,1211.82 1807,1211.82 1807.59,1211.82 1808.18,1211.82 1808.76,1211.82 1809.35,1211.82 1809.94,1211.82 1810.52,1211.82 1811.11,1211.82 1811.69,1211.82 1812.28,1211.82 1812.87,1211.82 1813.45,1211.82 1814.04,1211.82 1814.63,1211.82 1815.21,1211.82 1815.8,1211.82 1816.39,1211.82 1816.97,1211.82 1817.56,1211.82 1818.14,1211.82 1818.73,1211.82 1819.32,1211.82 1819.9,1211.82 1820.49,1211.82 1821.08,1211.82 1821.66,1211.82 1822.25,1211.82 1822.84,1211.82 1823.42,1211.82 1824.01,1211.82 1824.6,1211.82 1825.18,1211.82 1825.77,1211.82 1826.35,1211.82 1826.94,1211.82 1827.53,1211.82 1828.11,1211.82 1828.7,1211.82 1829.29,1211.82 1829.87,1211.82 1830.46,1211.82 1831.05,1211.82 1831.63,1211.82 1832.22,1211.82 1832.81,1211.82 1833.39,1211.82 1833.98,1211.82 1834.56,1211.82 1835.15,1211.82 1835.74,1211.82 1836.32,1211.82 1836.91,1211.82 1837.5,1211.82 1838.08,1211.82 1838.67,1211.82 1839.26,1211.82 1839.84,1211.82 1840.43,1211.82 1841.01,1211.82 1841.6,1211.82 1842.19,1211.82 1842.77,1211.82 1843.36,1211.82 1843.95,1211.82 1844.53,1211.82 1845.12,1211.82 1845.71,1211.82 1846.29,1211.82 1846.88,1211.82 1847.47,1211.82 1848.05,1211.82 1848.64,1211.82 1849.22,1211.82 1849.81,1211.82 1850.4,1211.82 1850.98,1211.82 1851.57,1211.82 1852.16,1211.82 1852.74,1211.82 1853.33,1211.82 1853.92,1211.82 1854.5,1211.82 1855.09,1211.82 1855.68,1211.82 1856.26,1211.82 1856.85,1211.82 1857.43,1211.82 1858.02,1211.82 1858.61,1211.82 1859.19,1211.82 1859.78,1211.82 1860.37,1211.82 1860.95,1211.82 1861.54,1211.82 1862.13,1211.82 1862.71,1211.82 1863.3,1211.82 1863.88,1211.82 1864.47,1211.82 1865.06,1211.82 1865.64,1211.82 1866.23,1211.82 1866.82,1211.82 1867.4,1211.82 1867.99,1211.82 1868.58,1211.82 1869.16,1211.82 1869.75,1211.82 1870.34,1211.82 1870.92,1211.82 1871.51,1211.82 1872.09,1211.82 1872.68,1211.82 1873.27,1211.82 1873.85,1211.82 1874.44,1211.82 1875.03,1211.82 1875.61,1211.82 1876.2,1211.82 1876.79,1211.82 1877.37,1211.82 1877.96,1211.82 1878.55,1211.82 1879.13,1211.82 1879.72,1211.82 1880.3,1211.82 1880.89,1211.82 1881.48,1211.82 1882.06,1211.82 1882.65,1211.82 1883.24,1211.82 1883.82,1211.82 1884.41,1211.82 1885,1211.82 1885.58,1211.82 1886.17,1211.82 1886.76,1211.82 1887.34,1211.82 1887.93,1211.82 1888.51,1211.82 1889.1,1211.82 1889.69,1211.82 1890.27,1211.82 1890.86,1211.82 1891.45,1211.82 1892.03,1211.82 1892.62,1211.82 1893.21,1211.82 1893.79,1211.82 1894.38,1211.82 1894.96,1211.82 1895.55,1211.82 1896.14,1211.82 1896.72,1211.82 1897.31,1211.82 1897.9,1211.82 1898.48,1211.82 1899.07,1211.82 1899.66,1211.82 1900.24,1211.82 1900.83,1211.82 1901.42,1211.82 1902,1211.82 1902.59,1211.82 1903.17,1211.82 1903.76,1211.82 1904.35,1211.82 1904.93,1211.82 1905.52,1211.82 1906.11,1211.82 1906.69,1211.82 1907.28,1211.82 1907.87,1211.82 1908.45,1211.82 1909.04,1211.82 1909.63,1211.82 1910.21,1211.82 1910.8,1211.82 1911.38,1211.82 1911.97,1211.82 1912.56,1211.82 1913.14,1211.82 1913.73,1211.82 1914.32,1211.82 1914.9,1211.82 1915.49,1211.82 1916.08,1211.82 1916.66,1211.82 1917.25,1211.82 1917.83,1211.82 1918.42,1211.82 1919.01,1211.82 1919.59,1211.82 1920.18,1211.82 1920.77,1211.82 1921.35,1211.82 1921.94,1211.82 1922.53,1211.82 1923.11,1211.82 1923.7,1211.82 1924.29,1211.82 1924.87,1211.82 1925.46,1211.82 1926.04,1211.82 1926.63,1211.82 1927.22,1211.82 1927.8,1211.82 1928.39,1211.82 1928.98,1211.82 1929.56,1211.82 1930.15,1211.82 1930.74,1211.82 1931.32,1211.82 1931.91,1211.82 1932.5,1211.82 1933.08,1211.82 1933.67,1211.82 1934.25,1211.82 1934.84,1211.82 1935.43,1211.82 1936.01,1211.82 1936.6,1211.82 1937.19,1211.82 1937.77,1211.82 1938.36,1211.82 1938.95,1211.82 1939.53,1211.82 1940.12,1211.82 1940.71,1211.82 1941.29,1211.82 1941.88,1211.82 1942.46,1211.82 1943.05,1211.82 1943.64,1211.82 1944.22,1211.82 1944.81,1211.82 1945.4,1211.82 1945.98,1211.82 1946.57,1211.82 1947.16,1211.82 1947.74,1211.82 1948.33,1211.82 1948.91,1211.82 1949.5,1211.82 1950.09,1211.82 1950.67,1211.82 1951.26,1211.82 1951.85,1211.82 1952.43,1211.82 1953.02,1211.82 1953.61,1211.82 1954.19,1211.82 1954.78,1211.82 1955.37,1211.82 1955.95,1211.82 1956.54,1211.82 1957.12,1211.82 1957.71,1211.82 1958.3,1211.82 1958.88,1211.82 1959.47,1211.82 1960.06,1211.82 1960.64,1211.82 1961.23,1211.82 1961.82,1211.82 1962.4,1211.82 1962.99,1211.82 1963.58,1211.82 1964.16,1211.82 1964.75,1211.82 1965.33,1211.82 1965.92,1211.82 1966.51,1211.82 1967.09,1211.82 1967.68,1211.82 1968.27,1211.82 1968.85,1211.82 1969.44,1211.82 1970.03,1211.82 1970.61,1211.82 1971.2,1211.82 1971.78,1211.82 1972.37,1211.82 1972.96,1211.82 1973.54,1211.82 1974.13,1211.82 1974.72,1211.82 1975.3,1211.82 1975.89,1211.82 1976.48,1211.82 1977.06,1211.82 1977.65,1211.82 1978.24,1211.82 1978.82,1211.82 1979.41,1211.82 1979.99,1211.82 1980.58,1211.82 1981.17,1211.82 1981.75,1211.82 1982.34,1211.82 1982.93,1211.82 1983.51,1211.82 1984.1,1211.82 1984.69,1211.82 1985.27,1211.82 1985.86,1211.82 1986.45,1211.82 1987.03,1211.82 1987.62,1211.82 1988.2,1211.82 1988.79,1211.82 1989.38,1211.82 1989.96,1211.82 1990.55,1211.82 1991.14,1211.82 1991.72,1211.82 1992.31,1211.82 1992.9,1211.82 1993.48,1211.82 1994.07,1211.82 1994.65,1211.82 1995.24,1211.82 1995.83,1211.82 1996.41,1211.82 1997,1211.82 1997.59,1211.82 1998.17,1211.82 1998.76,1211.82 1999.35,1211.82 1999.93,1211.82 2000.52,1211.82 2001.11,1211.82 2001.69,1211.82 2002.28,1211.82 2002.86,1211.82 2003.45,1211.82 2004.04,1211.82 2004.62,1211.82 2005.21,1211.82 2005.8,1211.82 2006.38,1211.82 2006.97,1211.82 2007.56,1211.82 2008.14,1211.82 2008.73,1211.82 2009.32,1211.82 2009.9,1211.82 2010.49,1211.82 2011.07,1211.82 2011.66,1211.82 2012.25,1211.82 2012.83,1211.82 2013.42,1211.82 2014.01,1211.82 2014.59,1211.82 2015.18,1211.82 2015.77,1211.82 2016.35,1211.82 2016.94,1211.82 2017.53,1211.82 2018.11,1211.82 2018.7,1211.82 2019.28,1211.82 2019.87,1211.82 2020.46,1211.82 2021.04,1211.82 2021.63,1211.82 2022.22,1211.82 2022.8,1211.82 2023.39,1211.82 2023.98,1211.82 2024.56,1211.82 2025.15,1211.82 2025.73,1211.82 2026.32,1211.82 2026.91,1211.82 2027.49,1211.82 2028.08,1211.82 2028.67,1211.82 2029.25,1211.82 2029.84,1211.82 2030.43,1211.82 2031.01,1211.82 2031.6,1211.82 2032.19,1211.82 2032.77,1211.82 2033.36,1211.82 2033.94,1211.82 2034.53,1211.82 2035.12,1211.82 2035.7,1211.82 2036.29,1211.82 2036.88,1211.82 2037.46,1211.82 2038.05,1211.82 2038.64,1211.82 2039.22,1211.82 2039.81,1211.82 2040.4,1211.82 2040.98,1211.82 2041.57,1211.82 2042.15,1211.82 2042.74,1211.82 2043.33,1211.82 2043.91,1211.82 2044.5,1211.82 2045.09,1211.82 2045.67,1211.82 2046.26,1211.82 2046.85,1211.82 2047.43,1211.82 2048.02,1211.82 2048.6,1211.82 2049.19,1211.82 2049.78,1211.82 2050.36,1211.82 2050.95,1211.82 2051.54,1211.82 2052.12,1211.82 2052.71,1211.82 2053.3,1211.82 2053.88,1211.82 2054.47,1211.82 2055.06,1211.82 2055.64,1211.82 2056.23,1211.82 2056.81,1211.82 2057.4,1211.82 2057.99,1211.82 2058.57,1211.82 2059.16,1211.82 2059.75,1211.82 2060.33,1211.82 2060.92,1211.82 2061.51,1211.82 2062.09,1211.82 2062.68,1211.82 2063.27,1211.82 2063.85,1211.82 2064.44,1211.82 2065.02,1211.82 2065.61,1211.82 2066.2,1211.82 2066.78,1211.82 2067.37,1211.82 2067.96,1211.82 2068.54,1211.82 2069.13,1211.82 2069.72,1211.82 2070.3,1211.82 2070.89,1211.82 2071.48,1211.82 2072.06,1211.82 2072.65,1211.82 2073.23,1211.82 2073.82,1211.82 2074.41,1211.82 2074.99,1211.82 2075.58,1211.82 2076.17,1211.82 2076.75,1211.82 2077.34,1211.82 2077.93,1211.82 2078.51,1211.82 2079.1,1211.82 2079.68,1211.82 2080.27,1211.82 2080.86,1211.82 2081.44,1211.82 2082.03,1211.82 2082.62,1211.82 2083.2,1211.82 2083.79,1211.82 2084.38,1211.82 2084.96,1211.82 2085.55,1211.82 2086.14,1211.82 2086.72,1211.82 2087.31,1211.82 2087.89,1211.82 2088.48,1211.82 2089.07,1211.82 2089.65,1211.82 2090.24,1211.82 2090.83,1211.82 2091.41,1211.82 2092,1211.82 2092.59,1211.82 2093.17,1211.82 2093.76,1211.82 2094.35,1211.82 2094.93,1211.82 2095.52,1211.82 2096.1,1211.82 2096.69,1211.82 2097.28,1211.82 2097.86,1211.82 2098.45,1211.82 2099.04,1211.82 2099.62,1211.82 2100.21,1211.82 2100.8,1211.82 2101.38,1211.82 2101.97,1211.82 2102.55,1211.82 2103.14,1211.82 2103.73,1211.82 2104.31,1211.82 2104.9,1211.82 2105.49,1211.82 2106.07,1211.82 2106.66,1211.82 2107.25,1211.82 2107.83,1211.82 2108.42,1211.82 2109.01,1211.82 2109.59,1211.82 2110.18,1211.82 2110.76,1211.82 2111.35,1211.82 2111.94,1211.82 2112.52,1211.82 2113.11,1211.82 2113.7,1211.82 2114.28,1211.82 2114.87,1211.82 2115.46,1211.82 2116.04,1211.82 2116.63,1211.82 2117.22,1211.82 2117.8,1211.82 2118.39,1211.82 2118.97,1211.82 2119.56,1211.82 2120.15,1211.82 2120.73,1211.82 2121.32,1211.82 2121.91,1211.82 2122.49,1211.82 2123.08,1211.82 2123.67,1211.82 2124.25,1211.82 2124.84,1211.82 2125.42,1211.82 2126.01,1211.82 2126.6,1211.82 2127.18,1211.82 2127.77,1211.82 2128.36,1211.82 2128.94,1211.82 2129.53,1211.82 2130.12,1211.82 2130.7,1211.82 2131.29,1211.82 2131.88,1211.82 2132.46,1211.82 2133.05,1211.82 2133.63,1211.82 2134.22,1211.82 2134.81,1211.82 2135.39,1211.82 2135.98,1211.82 2136.57,1211.82 2137.15,1211.82 2137.74,1211.82 2138.33,1211.82 2138.91,1211.82 2139.5,1211.82 2140.09,1211.82 2140.67,1211.82 2141.26,1211.82 2141.84,1211.82 2142.43,1211.82 2143.02,1211.82 2143.6,1211.82 2144.19,1211.82 2144.78,1211.82 2145.36,1211.82 2145.95,1211.82 2146.54,1211.82 2147.12,1211.82 2147.71,1211.82 2148.3,1211.82 2148.88,1211.82 2149.47,1211.82 2150.05,1211.82 2150.64,1211.82 2151.23,1211.82 2151.81,1211.82 2152.4,1211.82 2152.99,1211.82 2153.57,1211.82 2154.16,1211.82 2154.75,1211.82 2155.33,1211.82 2155.92,1211.82 2156.5,1211.82 2157.09,1211.82 2157.68,1211.82 2158.26,1211.82 \"/>\n<path clip-path=\"url(#clip872)\" d=\"M986.025 1211.65 L986.612 1211.65 L987.198 1211.65 L987.785 1211.65 L988.371 1211.65 L988.957 1211.65 L989.544 1211.65 L990.13 1211.65 L990.717 1211.65 L991.303 1211.65 L991.889 1211.65 L992.476 1211.65 L993.062 1211.65 L993.649 1211.65 L994.235 1211.65 L994.822 1211.65 L995.408 1211.65 L995.994 1211.65 L996.581 1211.65 L997.167 1211.65 L997.754 1211.65 L998.34 1211.65 L998.926 1211.65 L999.513 1211.65 L1000.1 1211.65 L1000.69 1211.65 L1001.27 1211.65 L1001.86 1211.65 L1002.44 1211.65 L1003.03 1211.65 L1003.62 1211.65 L1004.2 1211.65 L1004.79 1211.65 L1005.38 1211.65 L1005.96 1211.65 L1006.55 1211.65 L1007.14 1211.65 L1007.72 1211.65 L1008.31 1211.65 L1008.9 1211.65 L1009.48 1211.65 L1010.07 1211.65 L1010.65 1211.65 L1011.24 1211.65 L1011.83 1211.65 L1012.41 1211.65 L1013 1211.65 L1013.59 1211.65 L1014.17 1211.65 L1014.76 1211.65 L1015.35 1211.65 L1015.93 1211.65 L1016.52 1211.65 L1017.11 1211.65 L1017.69 1211.65 L1018.28 1211.65 L1018.86 1211.65 L1019.45 1211.65 L1020.04 1211.65 L1020.62 1211.65 L1021.21 1211.65 L1021.8 1211.65 L1022.38 1211.65 L1022.97 1211.65 L1023.56 1211.65 L1024.14 1211.65 L1024.73 1211.65 L1025.32 1211.65 L1025.9 1211.65 L1026.49 1211.65 L1027.07 1211.65 L1027.66 1211.65 L1028.25 1211.65 L1028.83 1211.65 L1029.42 1211.65 L1030.01 1211.65 L1030.59 1211.65 L1031.18 1211.65 L1031.77 1211.65 L1032.35 1211.65 L1032.94 1211.65 L1033.52 1211.65 L1034.11 1211.65 L1034.7 1211.65 L1035.28 1211.65 L1035.87 1211.65 L1036.46 1211.65 L1037.04 1211.65 L1037.63 1211.65 L1038.22 1211.65 L1038.8 1211.65 L1039.39 1211.65 L1039.98 1211.65 L1040.56 1211.65 L1041.15 1211.65 L1041.73 1211.65 L1042.32 1211.65 L1042.91 1211.65 L1043.49 1211.65 L1044.08 1211.65 L1044.67 1211.65 L1045.25 1211.65 L1045.84 1211.65 L1046.43 1211.65 L1047.01 1211.65 L1047.6 1211.65 L1048.19 1211.65 L1048.77 1211.65 L1049.36 1211.65 L1049.94 1211.65 L1050.53 1211.65 L1051.12 1211.65 L1051.7 1211.65 L1052.29 1211.65 L1052.88 1211.65 L1053.46 1211.65 L1054.05 1211.65 L1054.64 1211.65 L1055.22 1211.65 L1055.81 1211.65 L1056.39 1211.65 L1056.98 1211.65 L1057.57 1211.65 L1058.15 1211.65 L1058.74 1211.65 L1059.33 1211.65 L1059.91 1211.65 L1060.5 1211.65 L1061.09 1211.65 L1061.67 1211.65 L1062.26 1211.65 L1062.85 1211.65 L1063.43 1211.65 L1064.02 1211.65 L1064.6 1211.65 L1065.19 1211.65 L1065.78 1211.65 L1066.36 1211.65 L1066.95 1211.65 L1067.54 1211.65 L1068.12 1211.65 L1068.71 1211.65 L1069.3 1211.65 L1069.88 1211.65 L1070.47 1211.65 L1071.06 1211.65 L1071.64 1211.65 L1072.23 1211.65 L1072.81 1211.65 L1073.4 1211.65 L1073.99 1211.65 L1074.57 1211.65 L1075.16 1211.65 L1075.75 1211.65 L1076.33 1211.65 L1076.92 1211.65 L1077.51 1211.65 L1078.09 1211.65 L1078.68 1211.65 L1079.26 1211.65 L1079.85 1211.65 L1080.44 1211.65 L1081.02 1211.65 L1081.61 1211.65 L1082.2 1211.65 L1082.78 1211.65 L1083.37 1211.65 L1083.96 1211.65 L1084.54 1211.65 L1085.13 1211.65 L1085.72 1211.65 L1086.3 1211.65 L1086.89 1211.65 L1087.47 1211.65 L1088.06 1211.65 L1088.65 1211.65 L1089.23 1211.65 L1089.82 1211.65 L1090.41 1211.65 L1090.99 1211.65 L1091.58 1211.65 L1092.17 1211.65 L1092.75 1211.65 L1093.34 1211.65 L1093.93 1211.65 L1094.51 1211.65 L1095.1 1211.65 L1095.68 1211.65 L1096.27 1211.65 L1096.86 1211.65 L1097.44 1211.65 L1098.03 1211.65 L1098.62 1211.65 L1099.2 1211.65 L1099.79 1211.65 L1100.38 1211.65 L1100.96 1211.65 L1101.55 1211.65 L1102.14 1211.65 L1102.72 1211.65 L1103.31 1211.65 L1103.89 1211.65 L1104.48 1211.65 L1105.07 1211.65 L1105.65 1211.65 L1106.24 1211.65 L1106.83 1211.65 L1107.41 1211.65 L1108 1211.65 L1108.59 1211.65 L1109.17 1211.65 L1109.76 1211.65 L1110.34 1211.65 L1110.93 1211.65 L1111.52 1211.65 L1112.1 1211.65 L1112.69 1211.65 L1113.28 1211.65 L1113.86 1211.65 L1114.45 1211.65 L1115.04 1211.65 L1115.62 1211.65 L1116.21 1211.65 L1116.8 1211.65 L1117.38 1211.65 L1117.97 1211.65 L1118.55 1211.65 L1119.14 1211.65 L1119.73 1211.65 L1120.31 1211.65 L1120.9 1211.65 L1121.49 1211.65 L1122.07 1211.65 L1122.66 1211.65 L1123.25 1211.65 L1123.83 1211.65 L1124.42 1211.65 L1125.01 1211.65 L1125.59 1211.65 L1126.18 1211.65 L1126.76 1211.65 L1127.35 1211.65 L1127.94 1211.65 L1128.52 1211.65 L1129.11 1211.65 L1129.7 1211.65 L1130.28 1211.65 L1130.87 1211.65 L1131.46 1211.65 L1132.04 1211.65 L1132.63 1211.65 L1133.21 1211.65 L1133.8 1211.65 L1134.39 1211.65 L1134.97 1211.65 L1135.56 1211.65 L1136.15 1211.65 L1136.73 1211.65 L1137.32 1211.65 L1137.91 1211.65 L1138.49 1211.65 L1139.08 1211.65 L1139.67 1211.65 L1140.25 1211.65 L1140.84 1211.65 L1141.42 1211.65 L1142.01 1211.65 L1142.6 1211.65 L1143.18 1211.65 L1143.77 1211.65 L1144.36 1211.65 L1144.94 1211.65 L1145.53 1211.65 L1146.12 1211.65 L1146.7 1211.65 L1147.29 1211.65 L1147.88 1211.65 L1148.46 1211.65 L1149.05 1211.65 L1149.63 1211.65 L1150.22 1211.65 L1150.81 1211.65 L1151.39 1211.65 L1151.98 1211.65 L1152.57 1211.65 L1153.15 1211.65 L1153.74 1211.65 L1154.33 1211.65 L1154.91 1211.65 L1155.5 1211.65 L1156.09 1211.65 L1156.67 1211.65 L1157.26 1211.65 L1157.84 1211.65 L1158.43 1211.65 L1159.02 1211.65 L1159.6 1211.65 L1160.19 1211.65 L1160.78 1211.65 L1161.36 1211.65 L1161.95 1211.65 L1162.54 1211.65 L1163.12 1211.65 L1163.71 1211.65 L1164.29 1211.65 L1164.88 1211.65 L1165.47 1211.65 L1166.05 1211.65 L1166.64 1211.65 L1167.23 1211.65 L1167.81 1211.65 L1168.4 1211.65 L1168.99 1211.65 L1169.57 1211.65 L1170.16 1211.65 L1170.75 1211.65 L1171.33 1211.65 L1171.92 1211.65 L1172.5 1211.65 L1173.09 1211.65 L1173.68 1211.65 L1174.26 1211.65 L1174.85 1211.65 L1175.44 1211.65 L1176.02 1211.65 L1176.61 1211.65 L1177.2 1211.65 L1177.78 1211.65 L1178.37 1211.65 L1178.96 1211.65 L1179.54 1211.65 L1180.13 1211.65 L1180.71 1211.65 L1181.3 1211.65 L1181.89 1211.65 L1182.47 1211.65 L1183.06 1211.65 L1183.65 1211.65 L1184.23 1211.65 L1184.82 1211.65 L1185.41 1211.65 L1185.99 1211.65 L1186.58 1211.65 L1187.16 1211.65 L1187.75 1211.65 L1188.34 1211.65 L1188.92 1211.65 L1189.51 1211.65 L1190.1 1211.65 L1190.68 1211.65 L1191.27 1211.65 L1191.86 1211.65 L1192.44 1211.65 L1193.03 1211.65 L1193.62 1211.65 L1194.2 1211.65 L1194.79 1211.65 L1195.37 1211.65 L1195.96 1211.65 L1196.55 1211.65 L1197.13 1211.65 L1197.72 1211.65 L1198.31 1211.65 L1198.89 1211.65 L1199.48 1211.65 L1200.07 1211.65 L1200.65 1211.65 L1201.24 1211.65 L1201.83 1211.65 L1202.41 1211.65 L1203 1211.65 L1203.58 1211.65 L1204.17 1211.65 L1204.76 1211.65 L1205.34 1211.65 L1205.93 1211.65 L1206.52 1211.65 L1207.1 1211.65 L1207.69 1211.65 L1208.28 1211.65 L1208.86 1211.65 L1209.45 1211.65 L1210.03 1211.65 L1210.62 1211.65 L1211.21 1211.65 L1211.79 1211.65 L1212.38 1211.65 L1212.97 1211.65 L1213.55 1211.65 L1214.14 1211.65 L1214.73 1211.65 L1215.31 1211.65 L1215.9 1211.65 L1216.49 1211.65 L1217.07 1211.65 L1217.66 1211.65 L1218.24 1211.65 L1218.83 1211.65 L1219.42 1211.65 L1220 1211.65 L1220.59 1211.65 L1221.18 1211.65 L1221.76 1211.65 L1222.35 1211.65 L1222.94 1211.65 L1223.52 1211.65 L1224.11 1211.65 L1224.7 1211.65 L1225.28 1211.65 L1225.87 1211.65 L1226.45 1211.65 L1227.04 1211.65 L1227.63 1211.65 L1228.21 1211.65 L1228.8 1211.65 L1229.39 1211.65 L1229.97 1211.65 L1230.56 1211.65 L1231.15 1211.65 L1231.73 1211.65 L1232.32 1211.65 L1232.91 1211.65 L1233.49 1211.65 L1234.08 1211.65 L1234.66 1211.65 L1235.25 1211.65 L1235.84 1211.65 L1236.42 1211.65 L1237.01 1211.65 L1237.6 1211.65 L1238.18 1211.65 L1238.77 1211.65 L1239.36 1211.65 L1239.94 1211.65 L1240.53 1211.65 L1241.11 1211.65 L1241.7 1211.65 L1242.29 1211.65 L1242.87 1211.65 L1243.46 1211.65 L1244.05 1211.65 L1244.63 1211.65 L1245.22 1211.65 L1245.81 1211.65 L1246.39 1211.65 L1246.98 1211.65 L1247.57 1211.65 L1248.15 1211.65 L1248.74 1211.65 L1249.32 1211.65 L1249.91 1211.65 L1250.5 1211.65 L1251.08 1211.65 L1251.67 1211.65 L1252.26 1211.65 L1252.84 1211.65 L1253.43 1211.65 L1254.02 1211.65 L1254.6 1211.65 L1255.19 1211.65 L1255.78 1211.65 L1256.36 1211.65 L1256.95 1211.65 L1257.53 1211.65 L1258.12 1211.65 L1258.71 1211.65 L1259.29 1211.65 L1259.88 1211.65 L1260.47 1211.65 L1261.05 1211.65 L1261.64 1211.65 L1262.23 1211.65 L1262.81 1211.65 L1263.4 1211.65 L1263.98 1211.65 L1264.57 1211.65 L1265.16 1211.65 L1265.74 1211.65 L1266.33 1211.65 L1266.92 1211.65 L1267.5 1211.65 L1268.09 1211.65 L1268.68 1211.65 L1269.26 1211.65 L1269.85 1211.65 L1270.44 1211.65 L1271.02 1211.65 L1271.61 1211.65 L1272.19 1211.65 L1272.78 1211.65 L1273.37 1211.65 L1273.95 1211.65 L1274.54 1211.65 L1275.13 1211.65 L1275.71 1211.65 L1276.3 1211.65 L1276.89 1211.65 L1277.47 1211.65 L1278.06 1211.65 L1278.65 1211.65 L1279.23 1211.65 L1279.82 1211.65 L1280.4 1211.65 L1280.99 1211.65 L1281.58 1211.65 L1282.16 1211.65 L1282.75 1211.65 L1283.34 1211.65 L1283.92 1211.65 L1284.51 1211.65 L1285.1 1211.65 L1285.68 1211.65 L1286.27 1211.65 L1286.86 1211.65 L1287.44 1211.65 L1288.03 1211.65 L1288.61 1211.65 L1289.2 1211.65 L1289.79 1211.65 L1290.37 1211.65 L1290.96 1211.65 L1291.55 1211.65 L1292.13 1211.65 L1292.72 1211.65 L1293.31 1211.65 L1293.89 1211.65 L1294.48 1211.65 L1295.06 1211.65 L1295.65 1211.65 L1296.24 1211.65 L1296.82 1211.65 L1297.41 1211.65 L1298 1211.65 L1298.58 1211.65 L1299.17 1211.65 L1299.76 1211.65 L1300.34 1211.65 L1300.93 1211.65 L1301.52 1211.65 L1302.1 1211.65 L1302.69 1211.65 L1303.27 1211.65 L1303.86 1211.65 L1304.45 1211.65 L1305.03 1211.65 L1305.62 1211.65 L1306.21 1211.65 L1306.79 1211.65 L1307.38 1211.65 L1307.97 1211.65 L1308.55 1211.65 L1309.14 1211.65 L1309.73 1211.65 L1310.31 1211.65 L1310.9 1211.65 L1311.48 1211.65 L1312.07 1211.65 L1312.66 1211.65 L1313.24 1211.65 L1313.83 1211.65 L1314.42 1211.65 L1315 1211.65 L1315.59 1211.65 L1316.18 1211.65 L1316.76 1211.65 L1317.35 1211.65 L1317.93 1211.65 L1318.52 1211.65 L1319.11 1211.65 L1319.69 1211.65 L1320.28 1211.65 L1320.87 1211.65 L1321.45 1211.65 L1322.04 1211.65 L1322.63 1211.65 L1323.21 1211.65 L1323.8 1211.65 L1324.39 1211.65 L1324.97 1211.65 L1325.56 1211.65 L1326.14 1211.65 L1326.73 1211.65 L1327.32 1211.65 L1327.9 1211.65 L1328.49 1211.65 L1329.08 1211.65 L1329.66 1211.65 L1330.25 1211.65 L1330.84 1211.65 L1331.42 1211.65 L1332.01 1211.65 L1332.6 1211.65 L1333.18 1211.65 L1333.77 1211.65 L1334.35 1211.65 L1334.94 1211.65 L1335.53 1211.65 L1336.11 1211.65 L1336.7 1211.65 L1337.29 1211.65 L1337.87 1211.65 L1338.46 1211.65 L1339.05 1211.65 L1339.63 1211.65 L1340.22 1211.65 L1340.8 1211.65 L1341.39 1211.65 L1341.98 1211.65 L1342.56 1211.65 L1343.15 1211.65 L1343.74 1211.65 L1344.32 1211.65 L1344.91 1211.65 L1345.5 1211.65 L1346.08 1211.65 L1346.67 1211.65 L1347.26 1211.65 L1347.84 1211.65 L1348.43 1211.65 L1349.01 1211.65 L1349.6 1211.65 L1350.19 1211.65 L1350.77 1211.65 L1351.36 1211.65 L1351.95 1211.65 L1352.53 1211.65 L1353.12 1211.65 L1353.71 1211.65 L1354.29 1211.65 L1354.88 1211.65 L1355.47 1211.65 L1356.05 1211.65 L1356.64 1211.65 L1357.22 1211.65 L1357.81 1211.65 L1358.4 1211.65 L1358.98 1211.65 L1359.57 1211.65 L1360.16 1211.65 L1360.74 1211.65 L1361.33 1211.65 L1361.92 1211.65 L1362.5 1211.65 L1363.09 1211.65 L1363.68 1211.65 L1364.26 1211.65 L1364.85 1211.65 L1365.43 1211.65 L1366.02 1211.65 L1366.61 1211.65 L1367.19 1211.65 L1367.78 1211.65 L1368.37 1211.65 L1368.95 1211.65 L1369.54 1211.65 L1370.13 1211.65 L1370.71 1211.65 L1371.3 1211.65 L1371.88 1211.65 L1372.47 1211.65 L1373.06 1211.65 L1373.64 1211.65 L1374.23 1211.65 L1374.82 1211.65 L1375.4 1211.65 L1375.99 1211.65 L1376.58 1211.65 L1377.16 1211.65 L1377.75 1211.65 L1378.34 1211.65 L1378.92 1211.65 L1379.51 1211.65 L1380.09 1211.65 L1380.68 1211.65 L1381.27 1211.65 L1381.85 1211.65 L1382.44 1211.65 L1383.03 1211.65 L1383.61 1211.65 L1384.2 1211.65 L1384.79 1211.65 L1385.37 1211.65 L1385.96 1211.65 L1386.55 1211.65 L1387.13 1211.65 L1387.72 1211.65 L1388.3 1211.65 L1388.89 1211.65 L1389.48 1211.65 L1390.06 1211.65 L1390.65 1211.65 L1391.24 1211.65 L1391.82 1211.65 L1392.41 1211.65 L1393 1211.65 L1393.58 1211.65 L1394.17 1211.65 L1394.75 1211.65 L1395.34 1211.65 L1395.93 1211.65 L1396.51 1211.65 L1397.1 1211.65 L1397.69 1211.65 L1398.27 1211.65 L1398.86 1211.65 L1399.45 1211.65 L1400.03 1211.65 L1400.62 1211.65 L1401.21 1211.65 L1401.79 1211.65 L1402.38 1211.65 L1402.96 1211.65 L1403.55 1211.65 L1404.14 1211.65 L1404.72 1211.65 L1405.31 1211.65 L1405.9 1211.65 L1406.48 1211.65 L1407.07 1211.65 L1407.66 1211.65 L1408.24 1211.65 L1408.83 1211.65 L1409.42 1211.65 L1410 1211.65 L1410.59 1211.65 L1411.17 1211.65 L1411.76 1211.65 L1412.35 1211.65 L1412.93 1211.65 L1413.52 1211.65 L1414.11 1211.65 L1414.69 1211.65 L1415.28 1211.65 L1415.87 1211.65 L1416.45 1211.65 L1417.04 1211.65 L1417.63 1211.65 L1418.21 1211.65 L1418.8 1211.65 L1419.38 1211.65 L1419.97 1211.65 L1420.56 1211.65 L1421.14 1211.65 L1421.73 1211.65 L1422.32 1211.65 L1422.9 1211.65 L1423.49 1211.65 L1424.08 1211.65 L1424.66 1211.65 L1425.25 1211.65 L1425.83 1211.65 L1426.42 1211.65 L1427.01 1211.65 L1427.59 1211.65 L1428.18 1211.65 L1428.77 1211.65 L1429.35 1211.65 L1429.94 1211.65 L1430.53 1211.65 L1431.11 1211.65 L1431.7 1211.65 L1432.29 1211.65 L1432.87 1211.65 L1433.46 1211.65 L1434.04 1211.65 L1434.63 1211.65 L1435.22 1211.65 L1435.8 1211.65 L1436.39 1211.65 L1436.98 1211.65 L1437.56 1211.65 L1438.15 1211.65 L1438.74 1211.65 L1439.32 1211.65 L1439.91 1211.65 L1440.5 1211.65 L1441.08 1211.65 L1441.67 1211.65 L1442.25 1211.65 L1442.84 1211.65 L1443.43 1211.65 L1444.01 1211.65 L1444.6 1211.65 L1445.19 1211.65 L1445.77 1211.65 L1446.36 1211.65 L1446.95 1211.65 L1447.53 1211.65 L1448.12 1211.65 L1448.7 1211.65 L1449.29 1211.65 L1449.88 1211.65 L1450.46 1211.65 L1451.05 1211.65 L1451.64 1211.65 L1452.22 1211.65 L1452.81 1211.65 L1453.4 1211.65 L1453.98 1211.65 L1454.57 1211.65 L1455.16 1211.65 L1455.74 1211.65 L1456.33 1211.65 L1456.91 1211.65 L1457.5 1211.65 L1458.09 1211.65 L1458.67 1211.65 L1459.26 1211.65 L1459.85 1211.65 L1460.43 1211.65 L1461.02 1211.65 L1461.61 1211.65 L1462.19 1211.65 L1462.78 1211.65 L1463.37 1211.65 L1463.95 1211.65 L1464.54 1211.65 L1465.12 1211.65 L1465.71 1211.65 L1466.3 1211.65 L1466.88 1211.65 L1467.47 1211.65 L1468.06 1211.65 L1468.64 1211.65 L1469.23 1211.65 L1469.82 1211.65 L1470.4 1211.65 L1470.99 1211.65 L1471.57 1211.65 L1472.16 1211.65 L1472.75 1211.65 L1473.33 1211.65 L1473.92 1211.65 L1474.51 1211.65 L1475.09 1211.65 L1475.68 1211.65 L1476.27 1211.65 L1476.85 1211.65 L1477.44 1211.65 L1478.03 1211.65 L1478.61 1211.65 L1479.2 1211.65 L1479.78 1211.65 L1480.37 1211.65 L1480.96 1211.65 L1481.54 1211.65 L1482.13 1211.65 L1482.72 1211.65 L1483.3 1211.65 L1483.89 1211.65 L1484.48 1211.65 L1485.06 1211.65 L1485.65 1211.65 L1486.24 1211.65 L1486.82 1211.65 L1487.41 1211.65 L1487.99 1211.65 L1488.58 1211.65 L1489.17 1211.65 L1489.75 1211.65 L1490.34 1211.65 L1490.93 1211.65 L1491.51 1211.65 L1492.1 1211.65 L1492.69 1211.65 L1493.27 1211.65 L1493.86 1211.65 L1494.45 1211.65 L1495.03 1211.65 L1495.62 1211.65 L1496.2 1211.65 L1496.79 1211.65 L1497.38 1211.65 L1497.96 1211.65 L1498.55 1211.65 L1499.14 1211.65 L1499.72 1211.65 L1500.31 1211.65 L1500.9 1211.65 L1501.48 1211.65 L1502.07 1211.65 L1502.65 1211.65 L1503.24 1211.65 L1503.83 1211.65 L1504.41 1211.65 L1505 1211.65 L1505.59 1211.65 L1506.17 1211.65 L1506.76 1211.65 L1507.35 1211.65 L1507.93 1211.65 L1508.52 1211.65 L1509.11 1211.65 L1509.69 1211.65 L1510.28 1211.65 L1510.86 1211.65 L1511.45 1211.65 L1512.04 1211.65 L1512.62 1211.65 L1513.21 1211.65 L1513.8 1211.65 L1514.38 1211.65 L1514.97 1211.65 L1515.56 1211.65 L1516.14 1211.65 L1516.73 1211.65 L1517.32 1211.65 L1517.9 1211.65 L1518.49 1211.65 L1519.07 1211.65 L1519.66 1211.65 L1520.25 1211.65 L1520.83 1211.65 L1521.42 1211.65 L1522.01 1211.65 L1522.59 1211.65 L1523.18 1211.65 L1523.77 1211.65 L1524.35 1211.65 L1524.94 1211.65 L1525.52 1211.65 L1526.11 1211.65 L1526.7 1211.65 L1527.28 1211.65 L1527.87 1211.65 L1528.46 1211.65 L1529.04 1211.65 L1529.63 1211.65 L1530.22 1211.65 L1530.8 1211.65 L1531.39 1211.65 L1531.98 1211.65 L1532.56 1211.65 L1533.15 1211.65 L1533.73 1211.65 L1534.32 1211.65 L1534.91 1211.65 L1535.49 1211.65 L1536.08 1211.65 L1536.67 1211.65 L1537.25 1211.65 L1537.84 1211.65 L1538.43 1211.65 L1539.01 1211.65 L1539.6 1211.65 L1540.19 1211.65 L1540.77 1211.65 L1541.36 1211.65 L1541.94 1211.65 L1542.53 1211.65 L1543.12 1211.65 L1543.7 1211.65 L1544.29 1211.65 L1544.88 1211.65 L1545.46 1211.65 L1546.05 1211.65 L1546.64 1211.65 L1547.22 1211.65 L1547.81 1211.65 L1548.4 1211.65 L1548.98 1211.65 L1549.57 1211.65 L1550.15 1211.65 L1550.74 1211.65 L1551.33 1211.65 L1551.91 1211.65 L1552.5 1211.65 L1553.09 1211.65 L1553.67 1211.65 L1554.26 1211.65 L1554.85 1211.65 L1555.43 1211.65 L1556.02 1211.65 L1556.6 1211.65 L1557.19 1211.65 L1557.78 1211.65 L1558.36 1211.65 L1558.95 1211.65 L1559.54 1211.65 L1560.12 1211.65 L1560.71 1211.65 L1561.3 1211.65 L1561.88 1211.65 L1562.47 1211.65 L1563.06 1211.65 L1563.64 1211.65 L1564.23 1211.65 L1564.81 1211.65 L1565.4 1211.65 L1565.99 1211.65 L1566.57 1211.65 L1567.16 1211.65 L1567.75 1211.65 L1568.33 1211.65 L1568.92 1211.65 L1569.51 1211.65 L1570.09 1211.65 L1570.68 1211.65 L1571.27 1211.65 L1571.85 1211.65 L1572.44 1211.65 L1573.02 1211.65 L1573.61 1211.65 L1574.2 1211.65 L1574.78 1211.65 L1575.37 1211.65 L1575.96 1211.65 L1576.54 1211.65 L1577.13 1211.65 L1577.72 1211.65 L1578.3 1211.65 L1578.89 1211.65 L1579.47 1211.65 L1580.06 1211.65 L1580.65 1211.65 L1581.23 1211.65 L1581.82 1211.65 L1582.41 1211.65 L1582.99 1211.65 L1583.58 1211.65 L1584.17 1211.65 L1584.75 1211.65 L1585.34 1211.65 L1585.93 1211.65 L1586.51 1211.65 L1587.1 1211.65 L1587.68 1211.65 L1588.27 1211.65 L1588.86 1211.65 L1589.44 1211.65 L1590.03 1211.65 L1590.62 1211.65 L1591.2 1211.65 L1591.79 1211.65 L1592.38 1211.65 L1592.96 1211.65 L1593.55 1211.65 L1594.14 1211.65 L1594.72 1211.65 L1595.31 1211.65 L1595.89 1211.65 L1596.48 1211.65 L1597.07 1211.65 L1597.65 1211.65 L1598.24 1211.65 L1598.83 1211.65 L1599.41 1211.65 L1600 1211.65 L1600.59 1211.65 L1601.17 1211.65 L1601.76 1211.65 L1602.34 1211.65 L1602.93 1211.65 L1603.52 1211.65 L1604.1 1211.65 L1604.69 1211.65 L1605.28 1211.65 L1605.86 1211.65 L1606.45 1211.65 L1607.04 1211.65 L1607.62 1211.65 L1608.21 1211.65 L1608.8 1211.65 L1609.38 1211.65 L1609.97 1211.65 L1610.55 1211.65 L1611.14 1211.65 L1611.73 1211.65 L1612.31 1211.65 L1612.9 1211.65 L1613.49 1211.65 L1614.07 1211.65 L1614.66 1211.65 L1615.25 1211.65 L1615.83 1211.65 L1616.42 1211.65 L1617.01 1211.65 L1617.59 1211.65 L1618.18 1211.65 L1618.76 1211.65 L1619.35 1211.65 L1619.94 1211.65 L1620.52 1211.65 L1621.11 1211.65 L1621.7 1211.65 L1622.28 1211.65 L1622.87 1211.65 L1623.46 1211.65 L1624.04 1211.65 L1624.63 1211.65 L1625.22 1211.65 L1625.8 1211.65 L1626.39 1211.65 L1626.97 1211.65 L1627.56 1211.65 L1628.15 1211.65 L1628.73 1211.65 L1629.32 1211.65 L1629.91 1211.65 L1630.49 1211.65 L1631.08 1211.65 L1631.67 1211.65 L1632.25 1211.65 L1632.84 1211.65 L1633.42 1211.65 L1634.01 1211.65 L1634.6 1211.65 L1635.18 1211.65 L1635.77 1211.65 L1636.36 1211.65 L1636.94 1211.65 L1637.53 1211.65 L1638.12 1211.65 L1638.7 1211.65 L1639.29 1211.65 L1639.88 1211.65 L1640.46 1211.65 L1641.05 1211.65 L1641.63 1211.65 L1642.22 1211.65 L1642.81 1211.65 L1643.39 1211.65 L1643.98 1211.65 L1644.57 1211.65 L1645.15 1211.65 L1645.74 1211.65 L1646.33 1211.65 L1646.91 1211.65 L1647.5 1211.65 L1648.09 1211.65 L1648.67 1211.65 L1649.26 1211.65 L1649.84 1211.65 L1650.43 1211.65 L1651.02 1211.65 L1651.6 1211.65 L1652.19 1211.65 L1652.78 1211.65 L1653.36 1211.65 L1653.95 1211.65 L1654.54 1211.65 L1655.12 1211.65 L1655.71 1211.65 L1656.29 1211.65 L1656.88 1211.65 L1657.47 1211.65 L1658.05 1211.65 L1658.64 1211.65 L1659.23 1211.65 L1659.81 1211.65 L1660.4 1211.65 L1660.99 1211.65 L1661.57 1211.65 L1662.16 1211.65 L1662.75 1211.65 L1663.33 1211.65 L1663.92 1211.65 L1664.5 1211.65 L1665.09 1211.65 L1665.68 1211.65 L1666.26 1211.65 L1666.85 1211.65 L1667.44 1211.65 L1668.02 1211.65 L1668.61 1211.65 L1669.2 1211.65 L1669.78 1211.65 L1670.37 1211.65 L1670.96 1211.65 L1671.54 1211.65 L1672.13 1211.65 L1672.71 1211.65 L1673.3 1211.65 L1673.89 1211.65 L1674.47 1211.65 L1675.06 1211.65 L1675.65 1211.65 L1676.23 1211.65 L1676.82 1211.65 L1677.41 1211.65 L1677.99 1211.65 L1678.58 1211.65 L1679.17 1211.65 L1679.75 1211.65 L1680.34 1211.65 L1680.92 1211.65 L1681.51 1211.65 L1682.1 1211.65 L1682.68 1211.65 L1683.27 1211.65 L1683.86 1211.65 L1684.44 1211.65 L1685.03 1211.65 L1685.62 1211.65 L1686.2 1211.65 L1686.79 1211.65 L1687.37 1211.65 L1687.96 1211.65 L1688.55 1211.65 L1689.13 1211.65 L1689.72 1211.65 L1690.31 1211.65 L1690.89 1211.65 L1691.48 1211.65 L1692.07 1211.65 L1692.65 1211.65 L1693.24 1211.65 L1693.83 1211.65 L1694.41 1211.65 L1695 1211.65 L1695.58 1211.65 L1696.17 1211.65 L1696.76 1211.65 L1697.34 1211.65 L1697.93 1211.65 L1698.52 1211.65 L1699.1 1211.65 L1699.69 1211.65 L1700.28 1211.65 L1700.86 1211.65 L1701.45 1211.65 L1702.04 1211.65 L1702.62 1211.65 L1703.21 1211.65 L1703.79 1211.65 L1704.38 1211.65 L1704.97 1211.65 L1705.55 1211.65 L1706.14 1211.65 L1706.73 1211.65 L1707.31 1211.65 L1707.9 1211.65 L1708.49 1211.65 L1709.07 1211.65 L1709.66 1211.65 L1710.24 1211.65 L1710.83 1211.65 L1711.42 1211.65 L1712 1211.65 L1712.59 1211.65 L1713.18 1211.65 L1713.76 1211.65 L1714.35 1211.65 L1714.94 1211.65 L1715.52 1211.65 L1716.11 1211.65 L1716.7 1211.65 L1717.28 1211.65 L1717.87 1211.65 L1718.45 1211.65 L1719.04 1211.65 L1719.63 1211.65 L1720.21 1211.65 L1720.8 1211.65 L1721.39 1211.65 L1721.97 1211.65 L1722.56 1211.65 L1723.15 1211.65 L1723.73 1211.65 L1724.32 1211.65 L1724.91 1211.65 L1725.49 1211.65 L1726.08 1211.65 L1726.66 1211.65 L1727.25 1211.65 L1727.84 1211.65 L1728.42 1211.65 L1729.01 1211.65 L1729.6 1211.65 L1730.18 1211.65 L1730.77 1211.65 L1731.36 1211.65 L1731.94 1211.65 L1732.53 1211.65 L1733.11 1211.65 L1733.7 1211.65 L1734.29 1211.65 L1734.87 1211.65 L1735.46 1211.65 L1736.05 1211.65 L1736.63 1211.65 L1737.22 1211.65 L1737.81 1211.65 L1738.39 1211.65 L1738.98 1211.65 L1739.57 1211.65 L1740.15 1211.65 L1740.74 1211.65 L1741.32 1211.65 L1741.91 1211.65 L1742.5 1211.65 L1743.08 1211.65 L1743.67 1211.65 L1744.26 1211.65 L1744.84 1211.65 L1745.43 1211.65 L1746.02 1211.65 L1746.6 1211.65 L1747.19 1211.65 L1747.78 1211.65 L1748.36 1211.65 L1748.95 1211.65 L1749.53 1211.65 L1750.12 1211.65 L1750.71 1211.65 L1751.29 1211.65 L1751.88 1211.65 L1752.47 1211.65 L1753.05 1211.65 L1753.64 1211.65 L1754.23 1211.65 L1754.81 1211.65 L1755.4 1211.65 L1755.99 1211.65 L1756.57 1211.65 L1757.16 1211.65 L1757.74 1211.65 L1758.33 1211.65 L1758.92 1211.65 L1759.5 1211.65 L1760.09 1211.65 L1760.68 1211.65 L1761.26 1211.65 L1761.85 1211.65 L1762.44 1211.65 L1763.02 1211.65 L1763.61 1211.65 L1764.19 1211.65 L1764.78 1211.65 L1765.37 1211.65 L1765.95 1211.65 L1766.54 1211.65 L1767.13 1211.65 L1767.71 1211.65 L1768.3 1211.65 L1768.89 1211.65 L1769.47 1211.65 L1770.06 1211.65 L1770.65 1211.65 L1771.23 1211.65 L1771.82 1211.65 L1772.4 1211.65 L1772.99 1211.65 L1773.58 1211.65 L1774.16 1211.65 L1774.75 1211.65 L1775.34 1211.65 L1775.92 1211.65 L1776.51 1211.65 L1777.1 1211.65 L1777.68 1211.65 L1778.27 1211.65 L1778.86 1211.65 L1779.44 1211.65 L1780.03 1211.65 L1780.61 1211.65 L1781.2 1211.65 L1781.79 1211.65 L1782.37 1211.65 L1782.96 1211.65 L1783.55 1211.65 L1784.13 1211.65 L1784.72 1211.65 L1785.31 1211.65 L1785.89 1211.65 L1786.48 1211.65 L1787.06 1211.65 L1787.65 1211.65 L1788.24 1211.65 L1788.82 1211.65 L1789.41 1211.65 L1790 1211.65 L1790.58 1211.65 L1791.17 1211.65 L1791.76 1211.65 L1792.34 1211.65 L1792.93 1211.65 L1793.52 1211.65 L1794.1 1211.65 L1794.69 1211.65 L1795.27 1211.65 L1795.86 1211.65 L1796.45 1211.65 L1797.03 1211.65 L1797.62 1211.65 L1798.21 1211.65 L1798.79 1211.65 L1799.38 1211.65 L1799.97 1211.65 L1800.55 1211.65 L1801.14 1211.65 L1801.73 1211.65 L1802.31 1211.65 L1802.9 1211.65 L1803.48 1211.65 L1804.07 1211.65 L1804.66 1211.65 L1805.24 1211.65 L1805.83 1211.65 L1806.42 1211.65 L1807 1211.65 L1807.59 1211.65 L1808.18 1211.65 L1808.76 1211.65 L1809.35 1211.65 L1809.94 1211.65 L1810.52 1211.65 L1811.11 1211.65 L1811.69 1211.65 L1812.28 1211.65 L1812.87 1211.65 L1813.45 1211.65 L1814.04 1211.65 L1814.63 1211.65 L1815.21 1211.65 L1815.8 1211.65 L1816.39 1211.65 L1816.97 1211.65 L1817.56 1211.65 L1818.14 1211.65 L1818.73 1211.65 L1819.32 1211.65 L1819.9 1211.65 L1820.49 1211.65 L1821.08 1211.65 L1821.66 1211.65 L1822.25 1211.65 L1822.84 1211.65 L1823.42 1211.65 L1824.01 1211.65 L1824.6 1211.65 L1825.18 1211.65 L1825.77 1211.65 L1826.35 1211.65 L1826.94 1211.65 L1827.53 1211.65 L1828.11 1211.65 L1828.7 1211.65 L1829.29 1211.65 L1829.87 1211.65 L1830.46 1211.65 L1831.05 1211.65 L1831.63 1211.65 L1832.22 1211.65 L1832.81 1211.65 L1833.39 1211.65 L1833.98 1211.65 L1834.56 1211.65 L1835.15 1211.65 L1835.74 1211.65 L1836.32 1211.65 L1836.91 1211.65 L1837.5 1211.65 L1838.08 1211.65 L1838.67 1211.65 L1839.26 1211.65 L1839.84 1211.65 L1840.43 1211.65 L1841.01 1211.65 L1841.6 1211.65 L1842.19 1211.65 L1842.77 1211.65 L1843.36 1211.65 L1843.95 1211.65 L1844.53 1211.65 L1845.12 1211.65 L1845.71 1211.65 L1846.29 1211.65 L1846.88 1211.65 L1847.47 1211.65 L1848.05 1211.65 L1848.64 1211.65 L1849.22 1211.65 L1849.81 1211.65 L1850.4 1211.65 L1850.98 1211.65 L1851.57 1211.65 L1852.16 1211.65 L1852.74 1211.65 L1853.33 1211.65 L1853.92 1211.65 L1854.5 1211.65 L1855.09 1211.65 L1855.68 1211.65 L1856.26 1211.65 L1856.85 1211.65 L1857.43 1211.65 L1858.02 1211.65 L1858.61 1211.65 L1859.19 1211.65 L1859.78 1211.65 L1860.37 1211.65 L1860.95 1211.65 L1861.54 1211.65 L1862.13 1211.65 L1862.71 1211.65 L1863.3 1211.65 L1863.88 1211.65 L1864.47 1211.65 L1865.06 1211.65 L1865.64 1211.65 L1866.23 1211.65 L1866.82 1211.65 L1867.4 1211.65 L1867.99 1211.65 L1868.58 1211.65 L1869.16 1211.65 L1869.75 1211.65 L1870.34 1211.65 L1870.92 1211.65 L1871.51 1211.65 L1872.09 1211.65 L1872.68 1211.65 L1873.27 1211.65 L1873.85 1211.65 L1874.44 1211.65 L1875.03 1211.65 L1875.61 1211.65 L1876.2 1211.65 L1876.79 1211.65 L1877.37 1211.65 L1877.96 1211.65 L1878.55 1211.65 L1879.13 1211.65 L1879.72 1211.65 L1880.3 1211.65 L1880.89 1211.65 L1881.48 1211.65 L1882.06 1211.65 L1882.65 1211.65 L1883.24 1211.65 L1883.82 1211.65 L1884.41 1211.65 L1885 1211.65 L1885.58 1211.65 L1886.17 1211.65 L1886.76 1211.65 L1887.34 1211.65 L1887.93 1211.65 L1888.51 1211.65 L1889.1 1211.65 L1889.69 1211.65 L1890.27 1211.65 L1890.86 1211.65 L1891.45 1211.65 L1892.03 1211.65 L1892.62 1211.65 L1893.21 1211.65 L1893.79 1211.65 L1894.38 1211.65 L1894.96 1211.65 L1895.55 1211.65 L1896.14 1211.65 L1896.72 1211.65 L1897.31 1211.65 L1897.9 1211.65 L1898.48 1211.65 L1899.07 1211.65 L1899.66 1211.65 L1900.24 1211.65 L1900.83 1211.65 L1901.42 1211.65 L1902 1211.65 L1902.59 1211.65 L1903.17 1211.65 L1903.76 1211.65 L1904.35 1211.65 L1904.93 1211.65 L1905.52 1211.65 L1906.11 1211.65 L1906.69 1211.65 L1907.28 1211.65 L1907.87 1211.65 L1908.45 1211.65 L1909.04 1211.65 L1909.63 1211.65 L1910.21 1211.65 L1910.8 1211.65 L1911.38 1211.65 L1911.97 1211.65 L1912.56 1211.65 L1913.14 1211.65 L1913.73 1211.65 L1914.32 1211.65 L1914.9 1211.65 L1915.49 1211.65 L1916.08 1211.65 L1916.66 1211.65 L1917.25 1211.65 L1917.83 1211.65 L1918.42 1211.65 L1919.01 1211.65 L1919.59 1211.65 L1920.18 1211.65 L1920.77 1211.65 L1921.35 1211.65 L1921.94 1211.65 L1922.53 1211.65 L1923.11 1211.65 L1923.7 1211.65 L1924.29 1211.65 L1924.87 1211.65 L1925.46 1211.65 L1926.04 1211.65 L1926.63 1211.65 L1927.22 1211.65 L1927.8 1211.65 L1928.39 1211.65 L1928.98 1211.65 L1929.56 1211.65 L1930.15 1211.65 L1930.74 1211.65 L1931.32 1211.65 L1931.91 1211.65 L1932.5 1211.65 L1933.08 1211.65 L1933.67 1211.65 L1934.25 1211.65 L1934.84 1211.65 L1935.43 1211.65 L1936.01 1211.65 L1936.6 1211.65 L1937.19 1211.65 L1937.77 1211.65 L1938.36 1211.65 L1938.95 1211.65 L1939.53 1211.65 L1940.12 1211.65 L1940.71 1211.65 L1941.29 1211.65 L1941.88 1211.65 L1942.46 1211.65 L1943.05 1211.65 L1943.64 1211.65 L1944.22 1211.65 L1944.81 1211.65 L1945.4 1211.65 L1945.98 1211.65 L1946.57 1211.65 L1947.16 1211.65 L1947.74 1211.65 L1948.33 1211.65 L1948.91 1211.65 L1949.5 1211.65 L1950.09 1211.65 L1950.67 1211.65 L1951.26 1211.65 L1951.85 1211.65 L1952.43 1211.65 L1953.02 1211.65 L1953.61 1211.65 L1954.19 1211.65 L1954.78 1211.65 L1955.37 1211.65 L1955.95 1211.65 L1956.54 1211.65 L1957.12 1211.65 L1957.71 1211.65 L1958.3 1211.65 L1958.88 1211.65 L1959.47 1211.65 L1960.06 1211.65 L1960.64 1211.65 L1961.23 1211.65 L1961.82 1211.65 L1962.4 1211.65 L1962.99 1211.65 L1963.58 1211.65 L1964.16 1211.65 L1964.75 1211.65 L1965.33 1211.65 L1965.92 1211.65 L1966.51 1211.65 L1967.09 1211.65 L1967.68 1211.65 L1968.27 1211.65 L1968.85 1211.65 L1969.44 1211.65 L1970.03 1211.65 L1970.61 1211.65 L1971.2 1211.65 L1971.78 1211.65 L1972.37 1211.65 L1972.96 1211.65 L1973.54 1211.65 L1974.13 1211.65 L1974.72 1211.65 L1975.3 1211.65 L1975.89 1211.65 L1976.48 1211.65 L1977.06 1211.65 L1977.65 1211.65 L1978.24 1211.65 L1978.82 1211.65 L1979.41 1211.65 L1979.99 1211.65 L1980.58 1211.65 L1981.17 1211.65 L1981.75 1211.65 L1982.34 1211.65 L1982.93 1211.65 L1983.51 1211.65 L1984.1 1211.65 L1984.69 1211.65 L1985.27 1211.65 L1985.86 1211.65 L1986.45 1211.65 L1987.03 1211.65 L1987.62 1211.65 L1988.2 1211.65 L1988.79 1211.65 L1989.38 1211.65 L1989.96 1211.65 L1990.55 1211.65 L1991.14 1211.65 L1991.72 1211.65 L1992.31 1211.65 L1992.9 1211.65 L1993.48 1211.65 L1994.07 1211.65 L1994.65 1211.65 L1995.24 1211.65 L1995.83 1211.65 L1996.41 1211.65 L1997 1211.65 L1997.59 1211.65 L1998.17 1211.65 L1998.76 1211.65 L1999.35 1211.65 L1999.93 1211.65 L2000.52 1211.65 L2001.11 1211.65 L2001.69 1211.65 L2002.28 1211.65 L2002.86 1211.65 L2003.45 1211.65 L2004.04 1211.65 L2004.62 1211.65 L2005.21 1211.65 L2005.8 1211.65 L2006.38 1211.65 L2006.97 1211.65 L2007.56 1211.65 L2008.14 1211.65 L2008.73 1211.65 L2009.32 1211.65 L2009.9 1211.65 L2010.49 1211.65 L2011.07 1211.65 L2011.66 1211.65 L2012.25 1211.65 L2012.83 1211.65 L2013.42 1211.65 L2014.01 1211.65 L2014.59 1211.65 L2015.18 1211.65 L2015.77 1211.65 L2016.35 1211.65 L2016.94 1211.65 L2017.53 1211.65 L2018.11 1211.65 L2018.7 1211.65 L2019.28 1211.65 L2019.87 1211.65 L2020.46 1211.65 L2021.04 1211.65 L2021.63 1211.65 L2022.22 1211.65 L2022.8 1211.65 L2023.39 1211.65 L2023.98 1211.65 L2024.56 1211.65 L2025.15 1211.65 L2025.73 1211.65 L2026.32 1211.65 L2026.91 1211.65 L2027.49 1211.65 L2028.08 1211.65 L2028.67 1211.65 L2029.25 1211.65 L2029.84 1211.65 L2030.43 1211.65 L2031.01 1211.65 L2031.6 1211.65 L2032.19 1211.65 L2032.77 1211.65 L2033.36 1211.65 L2033.94 1211.65 L2034.53 1211.65 L2035.12 1211.65 L2035.7 1211.65 L2036.29 1211.65 L2036.88 1211.65 L2037.46 1211.65 L2038.05 1211.65 L2038.64 1211.65 L2039.22 1211.65 L2039.81 1211.65 L2040.4 1211.65 L2040.98 1211.65 L2041.57 1211.65 L2042.15 1211.65 L2042.74 1211.65 L2043.33 1211.65 L2043.91 1211.65 L2044.5 1211.65 L2045.09 1211.65 L2045.67 1211.65 L2046.26 1211.65 L2046.85 1211.65 L2047.43 1211.65 L2048.02 1211.65 L2048.6 1211.65 L2049.19 1211.65 L2049.78 1211.65 L2050.36 1211.65 L2050.95 1211.65 L2051.54 1211.65 L2052.12 1211.65 L2052.71 1211.65 L2053.3 1211.65 L2053.88 1211.65 L2054.47 1211.65 L2055.06 1211.65 L2055.64 1211.65 L2056.23 1211.65 L2056.81 1211.65 L2057.4 1211.65 L2057.99 1211.65 L2058.57 1211.65 L2059.16 1211.65 L2059.75 1211.65 L2060.33 1211.65 L2060.92 1211.65 L2061.51 1211.65 L2062.09 1211.65 L2062.68 1211.65 L2063.27 1211.65 L2063.85 1211.65 L2064.44 1211.65 L2065.02 1211.65 L2065.61 1211.65 L2066.2 1211.65 L2066.78 1211.65 L2067.37 1211.65 L2067.96 1211.65 L2068.54 1211.65 L2069.13 1211.65 L2069.72 1211.65 L2070.3 1211.65 L2070.89 1211.65 L2071.48 1211.65 L2072.06 1211.65 L2072.65 1211.65 L2073.23 1211.65 L2073.82 1211.65 L2074.41 1211.65 L2074.99 1211.65 L2075.58 1211.65 L2076.17 1211.65 L2076.75 1211.65 L2077.34 1211.65 L2077.93 1211.65 L2078.51 1211.65 L2079.1 1211.65 L2079.68 1211.65 L2080.27 1211.65 L2080.86 1211.65 L2081.44 1211.65 L2082.03 1211.65 L2082.62 1211.65 L2083.2 1211.65 L2083.79 1211.65 L2084.38 1211.65 L2084.96 1211.65 L2085.55 1211.65 L2086.14 1211.65 L2086.72 1211.65 L2087.31 1211.65 L2087.89 1211.65 L2088.48 1211.65 L2089.07 1211.65 L2089.65 1211.65 L2090.24 1211.65 L2090.83 1211.65 L2091.41 1211.65 L2092 1211.65 L2092.59 1211.65 L2093.17 1211.65 L2093.76 1211.65 L2094.35 1211.65 L2094.93 1211.65 L2095.52 1211.65 L2096.1 1211.65 L2096.69 1211.65 L2097.28 1211.65 L2097.86 1211.65 L2098.45 1211.65 L2099.04 1211.65 L2099.62 1211.65 L2100.21 1211.65 L2100.8 1211.65 L2101.38 1211.65 L2101.97 1211.65 L2102.55 1211.65 L2103.14 1211.65 L2103.73 1211.65 L2104.31 1211.65 L2104.9 1211.65 L2105.49 1211.65 L2106.07 1211.65 L2106.66 1211.65 L2107.25 1211.65 L2107.83 1211.65 L2108.42 1211.65 L2109.01 1211.65 L2109.59 1211.65 L2110.18 1211.65 L2110.76 1211.65 L2111.35 1211.65 L2111.94 1211.65 L2112.52 1211.65 L2113.11 1211.65 L2113.7 1211.65 L2114.28 1211.65 L2114.87 1211.65 L2115.46 1211.65 L2116.04 1211.65 L2116.63 1211.65 L2117.22 1211.65 L2117.8 1211.65 L2118.39 1211.65 L2118.97 1211.65 L2119.56 1211.65 L2120.15 1211.65 L2120.73 1211.65 L2121.32 1211.65 L2121.91 1211.65 L2122.49 1211.65 L2123.08 1211.65 L2123.67 1211.65 L2124.25 1211.65 L2124.84 1211.65 L2125.42 1211.65 L2126.01 1211.65 L2126.6 1211.65 L2127.18 1211.65 L2127.77 1211.65 L2128.36 1211.65 L2128.94 1211.65 L2129.53 1211.65 L2130.12 1211.65 L2130.7 1211.65 L2131.29 1211.65 L2131.88 1211.65 L2132.46 1211.65 L2133.05 1211.65 L2133.63 1211.65 L2134.22 1211.65 L2134.81 1211.65 L2135.39 1211.65 L2135.98 1211.65 L2136.57 1211.65 L2137.15 1211.65 L2137.74 1211.65 L2138.33 1211.65 L2138.91 1211.65 L2139.5 1211.65 L2140.09 1211.65 L2140.67 1211.65 L2141.26 1211.65 L2141.84 1211.65 L2142.43 1211.65 L2143.02 1211.65 L2143.6 1211.65 L2144.19 1211.65 L2144.78 1211.65 L2145.36 1211.65 L2145.95 1211.65 L2146.54 1211.65 L2147.12 1211.65 L2147.71 1211.65 L2148.3 1211.65 L2148.88 1211.65 L2149.47 1211.65 L2150.05 1211.65 L2150.64 1211.65 L2151.23 1211.65 L2151.81 1211.65 L2152.4 1211.65 L2152.99 1211.65 L2153.57 1211.65 L2154.16 1211.65 L2154.75 1211.65 L2155.33 1211.65 L2155.92 1211.65 L2156.5 1211.65 L2157.09 1211.65 L2157.68 1211.65 L2158.26 1211.65 L2158.26 1211.41 L2157.68 1211.41 L2157.09 1211.41 L2156.5 1211.41 L2155.92 1211.41 L2155.33 1211.41 L2154.75 1211.41 L2154.16 1211.41 L2153.57 1211.41 L2152.99 1211.41 L2152.4 1211.41 L2151.81 1211.41 L2151.23 1211.41 L2150.64 1211.41 L2150.05 1211.41 L2149.47 1211.41 L2148.88 1211.41 L2148.3 1211.41 L2147.71 1211.41 L2147.12 1211.41 L2146.54 1211.41 L2145.95 1211.41 L2145.36 1211.41 L2144.78 1211.41 L2144.19 1211.41 L2143.6 1211.41 L2143.02 1211.41 L2142.43 1211.41 L2141.84 1211.41 L2141.26 1211.41 L2140.67 1211.41 L2140.09 1211.41 L2139.5 1211.41 L2138.91 1211.41 L2138.33 1211.41 L2137.74 1211.41 L2137.15 1211.41 L2136.57 1211.41 L2135.98 1211.41 L2135.39 1211.41 L2134.81 1211.41 L2134.22 1211.41 L2133.63 1211.41 L2133.05 1211.41 L2132.46 1211.41 L2131.88 1211.41 L2131.29 1211.41 L2130.7 1211.41 L2130.12 1211.41 L2129.53 1211.41 L2128.94 1211.41 L2128.36 1211.41 L2127.77 1211.41 L2127.18 1211.41 L2126.6 1211.41 L2126.01 1211.41 L2125.42 1211.41 L2124.84 1211.41 L2124.25 1211.41 L2123.67 1211.41 L2123.08 1211.41 L2122.49 1211.41 L2121.91 1211.41 L2121.32 1211.41 L2120.73 1211.41 L2120.15 1211.41 L2119.56 1211.41 L2118.97 1211.41 L2118.39 1211.41 L2117.8 1211.41 L2117.22 1211.41 L2116.63 1211.41 L2116.04 1211.41 L2115.46 1211.41 L2114.87 1211.41 L2114.28 1211.41 L2113.7 1211.41 L2113.11 1211.41 L2112.52 1211.41 L2111.94 1211.41 L2111.35 1211.41 L2110.76 1211.41 L2110.18 1211.41 L2109.59 1211.41 L2109.01 1211.41 L2108.42 1211.41 L2107.83 1211.41 L2107.25 1211.41 L2106.66 1211.41 L2106.07 1211.41 L2105.49 1211.41 L2104.9 1211.41 L2104.31 1211.41 L2103.73 1211.41 L2103.14 1211.41 L2102.55 1211.41 L2101.97 1211.41 L2101.38 1211.41 L2100.8 1211.41 L2100.21 1211.41 L2099.62 1211.41 L2099.04 1211.41 L2098.45 1211.41 L2097.86 1211.41 L2097.28 1211.41 L2096.69 1211.41 L2096.1 1211.41 L2095.52 1211.41 L2094.93 1211.41 L2094.35 1211.41 L2093.76 1211.41 L2093.17 1211.41 L2092.59 1211.41 L2092 1211.41 L2091.41 1211.41 L2090.83 1211.41 L2090.24 1211.41 L2089.65 1211.41 L2089.07 1211.41 L2088.48 1211.41 L2087.89 1211.41 L2087.31 1211.41 L2086.72 1211.41 L2086.14 1211.41 L2085.55 1211.41 L2084.96 1211.41 L2084.38 1211.41 L2083.79 1211.41 L2083.2 1211.41 L2082.62 1211.41 L2082.03 1211.41 L2081.44 1211.41 L2080.86 1211.41 L2080.27 1211.41 L2079.68 1211.41 L2079.1 1211.41 L2078.51 1211.41 L2077.93 1211.41 L2077.34 1211.41 L2076.75 1211.41 L2076.17 1211.41 L2075.58 1211.41 L2074.99 1211.41 L2074.41 1211.41 L2073.82 1211.41 L2073.23 1211.41 L2072.65 1211.41 L2072.06 1211.41 L2071.48 1211.41 L2070.89 1211.41 L2070.3 1211.41 L2069.72 1211.41 L2069.13 1211.41 L2068.54 1211.41 L2067.96 1211.41 L2067.37 1211.41 L2066.78 1211.41 L2066.2 1211.41 L2065.61 1211.41 L2065.02 1211.41 L2064.44 1211.41 L2063.85 1211.41 L2063.27 1211.41 L2062.68 1211.41 L2062.09 1211.41 L2061.51 1211.41 L2060.92 1211.41 L2060.33 1211.41 L2059.75 1211.41 L2059.16 1211.41 L2058.57 1211.41 L2057.99 1211.41 L2057.4 1211.41 L2056.81 1211.41 L2056.23 1211.41 L2055.64 1211.41 L2055.06 1211.41 L2054.47 1211.41 L2053.88 1211.41 L2053.3 1211.41 L2052.71 1211.41 L2052.12 1211.41 L2051.54 1211.41 L2050.95 1211.41 L2050.36 1211.41 L2049.78 1211.41 L2049.19 1211.41 L2048.6 1211.41 L2048.02 1211.41 L2047.43 1211.41 L2046.85 1211.41 L2046.26 1211.41 L2045.67 1211.41 L2045.09 1211.41 L2044.5 1211.41 L2043.91 1211.41 L2043.33 1211.41 L2042.74 1211.41 L2042.15 1211.41 L2041.57 1211.41 L2040.98 1211.41 L2040.4 1211.41 L2039.81 1211.41 L2039.22 1211.41 L2038.64 1211.41 L2038.05 1211.41 L2037.46 1211.41 L2036.88 1211.41 L2036.29 1211.41 L2035.7 1211.41 L2035.12 1211.41 L2034.53 1211.41 L2033.94 1211.41 L2033.36 1211.41 L2032.77 1211.41 L2032.19 1211.41 L2031.6 1211.41 L2031.01 1211.41 L2030.43 1211.41 L2029.84 1211.41 L2029.25 1211.41 L2028.67 1211.41 L2028.08 1211.41 L2027.49 1211.41 L2026.91 1211.41 L2026.32 1211.41 L2025.73 1211.41 L2025.15 1211.41 L2024.56 1211.41 L2023.98 1211.41 L2023.39 1211.41 L2022.8 1211.41 L2022.22 1211.41 L2021.63 1211.41 L2021.04 1211.41 L2020.46 1211.41 L2019.87 1211.41 L2019.28 1211.41 L2018.7 1211.41 L2018.11 1211.41 L2017.53 1211.41 L2016.94 1211.41 L2016.35 1211.41 L2015.77 1211.41 L2015.18 1211.41 L2014.59 1211.41 L2014.01 1211.41 L2013.42 1211.41 L2012.83 1211.41 L2012.25 1211.41 L2011.66 1211.41 L2011.07 1211.41 L2010.49 1211.41 L2009.9 1211.41 L2009.32 1211.41 L2008.73 1211.41 L2008.14 1211.41 L2007.56 1211.41 L2006.97 1211.41 L2006.38 1211.41 L2005.8 1211.41 L2005.21 1211.41 L2004.62 1211.41 L2004.04 1211.41 L2003.45 1211.41 L2002.86 1211.41 L2002.28 1211.41 L2001.69 1211.41 L2001.11 1211.41 L2000.52 1211.41 L1999.93 1211.41 L1999.35 1211.41 L1998.76 1211.41 L1998.17 1211.41 L1997.59 1211.41 L1997 1211.41 L1996.41 1211.41 L1995.83 1211.41 L1995.24 1211.41 L1994.65 1211.41 L1994.07 1211.41 L1993.48 1211.41 L1992.9 1211.41 L1992.31 1211.41 L1991.72 1211.41 L1991.14 1211.41 L1990.55 1211.41 L1989.96 1211.41 L1989.38 1211.41 L1988.79 1211.41 L1988.2 1211.41 L1987.62 1211.41 L1987.03 1211.41 L1986.45 1211.41 L1985.86 1211.41 L1985.27 1211.41 L1984.69 1211.41 L1984.1 1211.41 L1983.51 1211.41 L1982.93 1211.41 L1982.34 1211.41 L1981.75 1211.41 L1981.17 1211.41 L1980.58 1211.41 L1979.99 1211.41 L1979.41 1211.41 L1978.82 1211.41 L1978.24 1211.41 L1977.65 1211.41 L1977.06 1211.41 L1976.48 1211.41 L1975.89 1211.41 L1975.3 1211.41 L1974.72 1211.41 L1974.13 1211.41 L1973.54 1211.41 L1972.96 1211.41 L1972.37 1211.41 L1971.78 1211.41 L1971.2 1211.41 L1970.61 1211.41 L1970.03 1211.41 L1969.44 1211.41 L1968.85 1211.41 L1968.27 1211.41 L1967.68 1211.41 L1967.09 1211.41 L1966.51 1211.41 L1965.92 1211.41 L1965.33 1211.41 L1964.75 1211.41 L1964.16 1211.41 L1963.58 1211.41 L1962.99 1211.41 L1962.4 1211.41 L1961.82 1211.41 L1961.23 1211.41 L1960.64 1211.41 L1960.06 1211.41 L1959.47 1211.41 L1958.88 1211.41 L1958.3 1211.41 L1957.71 1211.41 L1957.12 1211.41 L1956.54 1211.41 L1955.95 1211.41 L1955.37 1211.41 L1954.78 1211.41 L1954.19 1211.41 L1953.61 1211.41 L1953.02 1211.41 L1952.43 1211.41 L1951.85 1211.41 L1951.26 1211.41 L1950.67 1211.41 L1950.09 1211.41 L1949.5 1211.41 L1948.91 1211.41 L1948.33 1211.41 L1947.74 1211.41 L1947.16 1211.41 L1946.57 1211.41 L1945.98 1211.41 L1945.4 1211.41 L1944.81 1211.41 L1944.22 1211.41 L1943.64 1211.41 L1943.05 1211.41 L1942.46 1211.41 L1941.88 1211.41 L1941.29 1211.41 L1940.71 1211.41 L1940.12 1211.41 L1939.53 1211.41 L1938.95 1211.41 L1938.36 1211.41 L1937.77 1211.41 L1937.19 1211.41 L1936.6 1211.41 L1936.01 1211.41 L1935.43 1211.41 L1934.84 1211.41 L1934.25 1211.41 L1933.67 1211.41 L1933.08 1211.41 L1932.5 1211.41 L1931.91 1211.41 L1931.32 1211.41 L1930.74 1211.41 L1930.15 1211.41 L1929.56 1211.41 L1928.98 1211.41 L1928.39 1211.41 L1927.8 1211.41 L1927.22 1211.41 L1926.63 1211.41 L1926.04 1211.41 L1925.46 1211.41 L1924.87 1211.41 L1924.29 1211.41 L1923.7 1211.41 L1923.11 1211.41 L1922.53 1211.41 L1921.94 1211.41 L1921.35 1211.41 L1920.77 1211.41 L1920.18 1211.41 L1919.59 1211.41 L1919.01 1211.41 L1918.42 1211.41 L1917.83 1211.41 L1917.25 1211.41 L1916.66 1211.41 L1916.08 1211.41 L1915.49 1211.41 L1914.9 1211.41 L1914.32 1211.41 L1913.73 1211.41 L1913.14 1211.41 L1912.56 1211.41 L1911.97 1211.41 L1911.38 1211.41 L1910.8 1211.41 L1910.21 1211.41 L1909.63 1211.41 L1909.04 1211.41 L1908.45 1211.41 L1907.87 1211.41 L1907.28 1211.41 L1906.69 1211.41 L1906.11 1211.41 L1905.52 1211.41 L1904.93 1211.41 L1904.35 1211.41 L1903.76 1211.41 L1903.17 1211.41 L1902.59 1211.41 L1902 1211.41 L1901.42 1211.41 L1900.83 1211.41 L1900.24 1211.41 L1899.66 1211.41 L1899.07 1211.41 L1898.48 1211.41 L1897.9 1211.41 L1897.31 1211.41 L1896.72 1211.41 L1896.14 1211.41 L1895.55 1211.41 L1894.96 1211.41 L1894.38 1211.41 L1893.79 1211.41 L1893.21 1211.41 L1892.62 1211.41 L1892.03 1211.41 L1891.45 1211.41 L1890.86 1211.41 L1890.27 1211.41 L1889.69 1211.41 L1889.1 1211.41 L1888.51 1211.41 L1887.93 1211.41 L1887.34 1211.41 L1886.76 1211.41 L1886.17 1211.41 L1885.58 1211.41 L1885 1211.41 L1884.41 1211.41 L1883.82 1211.41 L1883.24 1211.41 L1882.65 1211.41 L1882.06 1211.41 L1881.48 1211.41 L1880.89 1211.41 L1880.3 1211.41 L1879.72 1211.41 L1879.13 1211.41 L1878.55 1211.41 L1877.96 1211.41 L1877.37 1211.41 L1876.79 1211.41 L1876.2 1211.41 L1875.61 1211.41 L1875.03 1211.41 L1874.44 1211.41 L1873.85 1211.41 L1873.27 1211.41 L1872.68 1211.41 L1872.09 1211.41 L1871.51 1211.41 L1870.92 1211.41 L1870.34 1211.41 L1869.75 1211.41 L1869.16 1211.41 L1868.58 1211.41 L1867.99 1211.41 L1867.4 1211.41 L1866.82 1211.41 L1866.23 1211.41 L1865.64 1211.41 L1865.06 1211.41 L1864.47 1211.41 L1863.88 1211.41 L1863.3 1211.41 L1862.71 1211.41 L1862.13 1211.41 L1861.54 1211.41 L1860.95 1211.41 L1860.37 1211.41 L1859.78 1211.41 L1859.19 1211.41 L1858.61 1211.41 L1858.02 1211.41 L1857.43 1211.41 L1856.85 1211.41 L1856.26 1211.41 L1855.68 1211.41 L1855.09 1211.41 L1854.5 1211.41 L1853.92 1211.41 L1853.33 1211.41 L1852.74 1211.41 L1852.16 1211.41 L1851.57 1211.41 L1850.98 1211.41 L1850.4 1211.41 L1849.81 1211.41 L1849.22 1211.41 L1848.64 1211.41 L1848.05 1211.41 L1847.47 1211.41 L1846.88 1211.41 L1846.29 1211.41 L1845.71 1211.41 L1845.12 1211.41 L1844.53 1211.41 L1843.95 1211.41 L1843.36 1211.41 L1842.77 1211.41 L1842.19 1211.41 L1841.6 1211.41 L1841.01 1211.41 L1840.43 1211.41 L1839.84 1211.41 L1839.26 1211.41 L1838.67 1211.41 L1838.08 1211.41 L1837.5 1211.41 L1836.91 1211.41 L1836.32 1211.41 L1835.74 1211.41 L1835.15 1211.41 L1834.56 1211.41 L1833.98 1211.41 L1833.39 1211.41 L1832.81 1211.41 L1832.22 1211.41 L1831.63 1211.41 L1831.05 1211.41 L1830.46 1211.41 L1829.87 1211.41 L1829.29 1211.41 L1828.7 1211.41 L1828.11 1211.41 L1827.53 1211.41 L1826.94 1211.41 L1826.35 1211.41 L1825.77 1211.41 L1825.18 1211.41 L1824.6 1211.41 L1824.01 1211.41 L1823.42 1211.41 L1822.84 1211.41 L1822.25 1211.41 L1821.66 1211.41 L1821.08 1211.41 L1820.49 1211.41 L1819.9 1211.41 L1819.32 1211.41 L1818.73 1211.41 L1818.14 1211.41 L1817.56 1211.41 L1816.97 1211.41 L1816.39 1211.41 L1815.8 1211.41 L1815.21 1211.41 L1814.63 1211.41 L1814.04 1211.41 L1813.45 1211.41 L1812.87 1211.41 L1812.28 1211.41 L1811.69 1211.41 L1811.11 1211.41 L1810.52 1211.41 L1809.94 1211.41 L1809.35 1211.41 L1808.76 1211.41 L1808.18 1211.41 L1807.59 1211.41 L1807 1211.41 L1806.42 1211.41 L1805.83 1211.41 L1805.24 1211.41 L1804.66 1211.41 L1804.07 1211.41 L1803.48 1211.41 L1802.9 1211.41 L1802.31 1211.41 L1801.73 1211.41 L1801.14 1211.41 L1800.55 1211.41 L1799.97 1211.41 L1799.38 1211.41 L1798.79 1211.41 L1798.21 1211.41 L1797.62 1211.41 L1797.03 1211.41 L1796.45 1211.41 L1795.86 1211.41 L1795.27 1211.41 L1794.69 1211.41 L1794.1 1211.41 L1793.52 1211.41 L1792.93 1211.41 L1792.34 1211.41 L1791.76 1211.41 L1791.17 1211.41 L1790.58 1211.41 L1790 1211.41 L1789.41 1211.41 L1788.82 1211.41 L1788.24 1211.41 L1787.65 1211.41 L1787.06 1211.41 L1786.48 1211.41 L1785.89 1211.41 L1785.31 1211.41 L1784.72 1211.41 L1784.13 1211.41 L1783.55 1211.41 L1782.96 1211.41 L1782.37 1211.41 L1781.79 1211.41 L1781.2 1211.41 L1780.61 1211.41 L1780.03 1211.41 L1779.44 1211.41 L1778.86 1211.41 L1778.27 1211.41 L1777.68 1211.41 L1777.1 1211.41 L1776.51 1211.41 L1775.92 1211.41 L1775.34 1211.41 L1774.75 1211.41 L1774.16 1211.41 L1773.58 1211.41 L1772.99 1211.41 L1772.4 1211.41 L1771.82 1211.41 L1771.23 1211.41 L1770.65 1211.41 L1770.06 1211.41 L1769.47 1211.41 L1768.89 1211.41 L1768.3 1211.41 L1767.71 1211.41 L1767.13 1211.41 L1766.54 1211.41 L1765.95 1211.41 L1765.37 1211.41 L1764.78 1211.41 L1764.19 1211.41 L1763.61 1211.41 L1763.02 1211.41 L1762.44 1211.41 L1761.85 1211.41 L1761.26 1211.41 L1760.68 1211.41 L1760.09 1211.41 L1759.5 1211.41 L1758.92 1211.41 L1758.33 1211.41 L1757.74 1211.41 L1757.16 1211.41 L1756.57 1211.41 L1755.99 1211.41 L1755.4 1211.41 L1754.81 1211.41 L1754.23 1211.41 L1753.64 1211.41 L1753.05 1211.41 L1752.47 1211.41 L1751.88 1211.41 L1751.29 1211.41 L1750.71 1211.41 L1750.12 1211.41 L1749.53 1211.41 L1748.95 1211.41 L1748.36 1211.41 L1747.78 1211.41 L1747.19 1211.41 L1746.6 1211.41 L1746.02 1211.41 L1745.43 1211.41 L1744.84 1211.41 L1744.26 1211.41 L1743.67 1211.41 L1743.08 1211.41 L1742.5 1211.41 L1741.91 1211.41 L1741.32 1211.41 L1740.74 1211.41 L1740.15 1211.41 L1739.57 1211.41 L1738.98 1211.41 L1738.39 1211.41 L1737.81 1211.41 L1737.22 1211.41 L1736.63 1211.41 L1736.05 1211.41 L1735.46 1211.41 L1734.87 1211.41 L1734.29 1211.41 L1733.7 1211.41 L1733.11 1211.41 L1732.53 1211.41 L1731.94 1211.41 L1731.36 1211.41 L1730.77 1211.41 L1730.18 1211.41 L1729.6 1211.41 L1729.01 1211.41 L1728.42 1211.41 L1727.84 1211.41 L1727.25 1211.41 L1726.66 1211.41 L1726.08 1211.41 L1725.49 1211.41 L1724.91 1211.41 L1724.32 1211.41 L1723.73 1211.41 L1723.15 1211.41 L1722.56 1211.41 L1721.97 1211.41 L1721.39 1211.41 L1720.8 1211.41 L1720.21 1211.41 L1719.63 1211.41 L1719.04 1211.41 L1718.45 1211.41 L1717.87 1211.41 L1717.28 1211.41 L1716.7 1211.41 L1716.11 1211.41 L1715.52 1211.41 L1714.94 1211.41 L1714.35 1211.41 L1713.76 1211.41 L1713.18 1211.41 L1712.59 1211.41 L1712 1211.41 L1711.42 1211.41 L1710.83 1211.41 L1710.24 1211.41 L1709.66 1211.41 L1709.07 1211.41 L1708.49 1211.41 L1707.9 1211.41 L1707.31 1211.41 L1706.73 1211.41 L1706.14 1211.41 L1705.55 1211.41 L1704.97 1211.41 L1704.38 1211.41 L1703.79 1211.41 L1703.21 1211.41 L1702.62 1211.41 L1702.04 1211.41 L1701.45 1211.41 L1700.86 1211.41 L1700.28 1211.41 L1699.69 1211.41 L1699.1 1211.41 L1698.52 1211.41 L1697.93 1211.41 L1697.34 1211.41 L1696.76 1211.41 L1696.17 1211.41 L1695.58 1211.41 L1695 1211.41 L1694.41 1211.41 L1693.83 1211.41 L1693.24 1211.41 L1692.65 1211.41 L1692.07 1211.41 L1691.48 1211.41 L1690.89 1211.41 L1690.31 1211.41 L1689.72 1211.41 L1689.13 1211.41 L1688.55 1211.41 L1687.96 1211.41 L1687.37 1211.41 L1686.79 1211.41 L1686.2 1211.41 L1685.62 1211.41 L1685.03 1211.41 L1684.44 1211.41 L1683.86 1211.41 L1683.27 1211.41 L1682.68 1211.41 L1682.1 1211.41 L1681.51 1211.41 L1680.92 1211.41 L1680.34 1211.41 L1679.75 1211.41 L1679.17 1211.41 L1678.58 1211.41 L1677.99 1211.41 L1677.41 1211.41 L1676.82 1211.41 L1676.23 1211.41 L1675.65 1211.41 L1675.06 1211.41 L1674.47 1211.41 L1673.89 1211.41 L1673.3 1211.41 L1672.71 1211.41 L1672.13 1211.41 L1671.54 1211.41 L1670.96 1211.41 L1670.37 1211.41 L1669.78 1211.41 L1669.2 1211.41 L1668.61 1211.41 L1668.02 1211.41 L1667.44 1211.41 L1666.85 1211.41 L1666.26 1211.41 L1665.68 1211.41 L1665.09 1211.41 L1664.5 1211.41 L1663.92 1211.41 L1663.33 1211.41 L1662.75 1211.41 L1662.16 1211.41 L1661.57 1211.41 L1660.99 1211.41 L1660.4 1211.41 L1659.81 1211.41 L1659.23 1211.41 L1658.64 1211.41 L1658.05 1211.41 L1657.47 1211.41 L1656.88 1211.41 L1656.29 1211.41 L1655.71 1211.41 L1655.12 1211.41 L1654.54 1211.41 L1653.95 1211.41 L1653.36 1211.41 L1652.78 1211.41 L1652.19 1211.41 L1651.6 1211.41 L1651.02 1211.41 L1650.43 1211.41 L1649.84 1211.41 L1649.26 1211.41 L1648.67 1211.41 L1648.09 1211.41 L1647.5 1211.41 L1646.91 1211.41 L1646.33 1211.41 L1645.74 1211.41 L1645.15 1211.41 L1644.57 1211.41 L1643.98 1211.41 L1643.39 1211.41 L1642.81 1211.41 L1642.22 1211.41 L1641.63 1211.41 L1641.05 1211.41 L1640.46 1211.41 L1639.88 1211.41 L1639.29 1211.41 L1638.7 1211.41 L1638.12 1211.41 L1637.53 1211.41 L1636.94 1211.41 L1636.36 1211.41 L1635.77 1211.41 L1635.18 1211.41 L1634.6 1211.41 L1634.01 1211.41 L1633.42 1211.41 L1632.84 1211.41 L1632.25 1211.41 L1631.67 1211.41 L1631.08 1211.41 L1630.49 1211.41 L1629.91 1211.41 L1629.32 1211.41 L1628.73 1211.41 L1628.15 1211.41 L1627.56 1211.41 L1626.97 1211.41 L1626.39 1211.41 L1625.8 1211.41 L1625.22 1211.41 L1624.63 1211.41 L1624.04 1211.41 L1623.46 1211.41 L1622.87 1211.41 L1622.28 1211.41 L1621.7 1211.41 L1621.11 1211.41 L1620.52 1211.41 L1619.94 1211.41 L1619.35 1211.41 L1618.76 1211.41 L1618.18 1211.41 L1617.59 1211.41 L1617.01 1211.41 L1616.42 1211.41 L1615.83 1211.41 L1615.25 1211.41 L1614.66 1211.41 L1614.07 1211.41 L1613.49 1211.41 L1612.9 1211.41 L1612.31 1211.41 L1611.73 1211.41 L1611.14 1211.41 L1610.55 1211.41 L1609.97 1211.41 L1609.38 1211.41 L1608.8 1211.41 L1608.21 1211.41 L1607.62 1211.41 L1607.04 1211.41 L1606.45 1211.41 L1605.86 1211.41 L1605.28 1211.41 L1604.69 1211.41 L1604.1 1211.41 L1603.52 1211.41 L1602.93 1211.41 L1602.34 1211.41 L1601.76 1211.41 L1601.17 1211.41 L1600.59 1211.41 L1600 1211.41 L1599.41 1211.41 L1598.83 1211.41 L1598.24 1211.41 L1597.65 1211.41 L1597.07 1211.41 L1596.48 1211.41 L1595.89 1211.41 L1595.31 1211.41 L1594.72 1211.41 L1594.14 1211.41 L1593.55 1211.41 L1592.96 1211.41 L1592.38 1211.41 L1591.79 1211.41 L1591.2 1211.41 L1590.62 1211.41 L1590.03 1211.41 L1589.44 1211.41 L1588.86 1211.41 L1588.27 1211.41 L1587.68 1211.41 L1587.1 1211.41 L1586.51 1211.41 L1585.93 1211.41 L1585.34 1211.41 L1584.75 1211.41 L1584.17 1211.41 L1583.58 1211.41 L1582.99 1211.41 L1582.41 1211.41 L1581.82 1211.41 L1581.23 1211.41 L1580.65 1211.41 L1580.06 1211.41 L1579.47 1211.41 L1578.89 1211.41 L1578.3 1211.41 L1577.72 1211.41 L1577.13 1211.41 L1576.54 1211.41 L1575.96 1211.41 L1575.37 1211.41 L1574.78 1211.41 L1574.2 1211.41 L1573.61 1211.41 L1573.02 1211.41 L1572.44 1211.41 L1571.85 1211.41 L1571.27 1211.41 L1570.68 1211.41 L1570.09 1211.41 L1569.51 1211.41 L1568.92 1211.41 L1568.33 1211.41 L1567.75 1211.41 L1567.16 1211.41 L1566.57 1211.41 L1565.99 1211.41 L1565.4 1211.41 L1564.81 1211.41 L1564.23 1211.41 L1563.64 1211.41 L1563.06 1211.41 L1562.47 1211.41 L1561.88 1211.41 L1561.3 1211.41 L1560.71 1211.41 L1560.12 1211.41 L1559.54 1211.41 L1558.95 1211.41 L1558.36 1211.41 L1557.78 1211.41 L1557.19 1211.41 L1556.6 1211.41 L1556.02 1211.41 L1555.43 1211.41 L1554.85 1211.41 L1554.26 1211.41 L1553.67 1211.41 L1553.09 1211.41 L1552.5 1211.41 L1551.91 1211.41 L1551.33 1211.41 L1550.74 1211.41 L1550.15 1211.41 L1549.57 1211.41 L1548.98 1211.41 L1548.4 1211.41 L1547.81 1211.41 L1547.22 1211.41 L1546.64 1211.41 L1546.05 1211.41 L1545.46 1211.41 L1544.88 1211.41 L1544.29 1211.41 L1543.7 1211.41 L1543.12 1211.41 L1542.53 1211.41 L1541.94 1211.41 L1541.36 1211.41 L1540.77 1211.41 L1540.19 1211.41 L1539.6 1211.41 L1539.01 1211.41 L1538.43 1211.41 L1537.84 1211.41 L1537.25 1211.41 L1536.67 1211.41 L1536.08 1211.41 L1535.49 1211.41 L1534.91 1211.41 L1534.32 1211.41 L1533.73 1211.41 L1533.15 1211.41 L1532.56 1211.41 L1531.98 1211.41 L1531.39 1211.41 L1530.8 1211.41 L1530.22 1211.41 L1529.63 1211.41 L1529.04 1211.41 L1528.46 1211.41 L1527.87 1211.41 L1527.28 1211.41 L1526.7 1211.41 L1526.11 1211.41 L1525.52 1211.41 L1524.94 1211.41 L1524.35 1211.41 L1523.77 1211.41 L1523.18 1211.41 L1522.59 1211.41 L1522.01 1211.41 L1521.42 1211.41 L1520.83 1211.41 L1520.25 1211.41 L1519.66 1211.41 L1519.07 1211.41 L1518.49 1211.41 L1517.9 1211.41 L1517.32 1211.41 L1516.73 1211.41 L1516.14 1211.41 L1515.56 1211.41 L1514.97 1211.41 L1514.38 1211.41 L1513.8 1211.41 L1513.21 1211.41 L1512.62 1211.41 L1512.04 1211.41 L1511.45 1211.41 L1510.86 1211.41 L1510.28 1211.41 L1509.69 1211.41 L1509.11 1211.41 L1508.52 1211.41 L1507.93 1211.41 L1507.35 1211.41 L1506.76 1211.41 L1506.17 1211.41 L1505.59 1211.41 L1505 1211.41 L1504.41 1211.41 L1503.83 1211.41 L1503.24 1211.41 L1502.65 1211.41 L1502.07 1211.41 L1501.48 1211.41 L1500.9 1211.41 L1500.31 1211.41 L1499.72 1211.41 L1499.14 1211.41 L1498.55 1211.41 L1497.96 1211.41 L1497.38 1211.41 L1496.79 1211.41 L1496.2 1211.41 L1495.62 1211.41 L1495.03 1211.41 L1494.45 1211.41 L1493.86 1211.41 L1493.27 1211.41 L1492.69 1211.41 L1492.1 1211.41 L1491.51 1211.41 L1490.93 1211.41 L1490.34 1211.41 L1489.75 1211.41 L1489.17 1211.41 L1488.58 1211.41 L1487.99 1211.41 L1487.41 1211.41 L1486.82 1211.41 L1486.24 1211.41 L1485.65 1211.41 L1485.06 1211.41 L1484.48 1211.41 L1483.89 1211.41 L1483.3 1211.41 L1482.72 1211.41 L1482.13 1211.41 L1481.54 1211.41 L1480.96 1211.41 L1480.37 1211.41 L1479.78 1211.41 L1479.2 1211.41 L1478.61 1211.41 L1478.03 1211.41 L1477.44 1211.41 L1476.85 1211.41 L1476.27 1211.41 L1475.68 1211.41 L1475.09 1211.41 L1474.51 1211.41 L1473.92 1211.41 L1473.33 1211.41 L1472.75 1211.41 L1472.16 1211.41 L1471.57 1211.41 L1470.99 1211.41 L1470.4 1211.41 L1469.82 1211.41 L1469.23 1211.41 L1468.64 1211.41 L1468.06 1211.41 L1467.47 1211.41 L1466.88 1211.41 L1466.3 1211.41 L1465.71 1211.41 L1465.12 1211.41 L1464.54 1211.41 L1463.95 1211.41 L1463.37 1211.41 L1462.78 1211.41 L1462.19 1211.41 L1461.61 1211.41 L1461.02 1211.41 L1460.43 1211.41 L1459.85 1211.41 L1459.26 1211.41 L1458.67 1211.41 L1458.09 1211.41 L1457.5 1211.41 L1456.91 1211.41 L1456.33 1211.41 L1455.74 1211.41 L1455.16 1211.41 L1454.57 1211.41 L1453.98 1211.41 L1453.4 1211.41 L1452.81 1211.41 L1452.22 1211.41 L1451.64 1211.41 L1451.05 1211.41 L1450.46 1211.41 L1449.88 1211.41 L1449.29 1211.41 L1448.7 1211.41 L1448.12 1211.41 L1447.53 1211.41 L1446.95 1211.41 L1446.36 1211.41 L1445.77 1211.41 L1445.19 1211.41 L1444.6 1211.41 L1444.01 1211.41 L1443.43 1211.41 L1442.84 1211.41 L1442.25 1211.41 L1441.67 1211.41 L1441.08 1211.41 L1440.5 1211.41 L1439.91 1211.41 L1439.32 1211.41 L1438.74 1211.41 L1438.15 1211.41 L1437.56 1211.41 L1436.98 1211.41 L1436.39 1211.41 L1435.8 1211.41 L1435.22 1211.41 L1434.63 1211.41 L1434.04 1211.41 L1433.46 1211.41 L1432.87 1211.41 L1432.29 1211.41 L1431.7 1211.41 L1431.11 1211.41 L1430.53 1211.41 L1429.94 1211.41 L1429.35 1211.41 L1428.77 1211.41 L1428.18 1211.41 L1427.59 1211.41 L1427.01 1211.41 L1426.42 1211.41 L1425.83 1211.41 L1425.25 1211.41 L1424.66 1211.41 L1424.08 1211.41 L1423.49 1211.41 L1422.9 1211.41 L1422.32 1211.41 L1421.73 1211.41 L1421.14 1211.41 L1420.56 1211.41 L1419.97 1211.41 L1419.38 1211.41 L1418.8 1211.41 L1418.21 1211.41 L1417.63 1211.41 L1417.04 1211.41 L1416.45 1211.41 L1415.87 1211.41 L1415.28 1211.41 L1414.69 1211.41 L1414.11 1211.41 L1413.52 1211.41 L1412.93 1211.41 L1412.35 1211.41 L1411.76 1211.41 L1411.17 1211.41 L1410.59 1211.41 L1410 1211.41 L1409.42 1211.41 L1408.83 1211.41 L1408.24 1211.41 L1407.66 1211.41 L1407.07 1211.41 L1406.48 1211.41 L1405.9 1211.41 L1405.31 1211.41 L1404.72 1211.41 L1404.14 1211.41 L1403.55 1211.41 L1402.96 1211.41 L1402.38 1211.41 L1401.79 1211.41 L1401.21 1211.41 L1400.62 1211.41 L1400.03 1211.41 L1399.45 1211.41 L1398.86 1211.41 L1398.27 1211.41 L1397.69 1211.41 L1397.1 1211.41 L1396.51 1211.41 L1395.93 1211.41 L1395.34 1211.41 L1394.75 1211.41 L1394.17 1211.41 L1393.58 1211.41 L1393 1211.41 L1392.41 1211.41 L1391.82 1211.41 L1391.24 1211.41 L1390.65 1211.41 L1390.06 1211.41 L1389.48 1211.41 L1388.89 1211.41 L1388.3 1211.41 L1387.72 1211.41 L1387.13 1211.41 L1386.55 1211.41 L1385.96 1211.41 L1385.37 1211.41 L1384.79 1211.41 L1384.2 1211.41 L1383.61 1211.41 L1383.03 1211.41 L1382.44 1211.41 L1381.85 1211.41 L1381.27 1211.41 L1380.68 1211.41 L1380.09 1211.41 L1379.51 1211.41 L1378.92 1211.41 L1378.34 1211.41 L1377.75 1211.41 L1377.16 1211.41 L1376.58 1211.41 L1375.99 1211.41 L1375.4 1211.41 L1374.82 1211.41 L1374.23 1211.41 L1373.64 1211.41 L1373.06 1211.41 L1372.47 1211.41 L1371.88 1211.41 L1371.3 1211.41 L1370.71 1211.41 L1370.13 1211.41 L1369.54 1211.41 L1368.95 1211.41 L1368.37 1211.41 L1367.78 1211.41 L1367.19 1211.41 L1366.61 1211.41 L1366.02 1211.41 L1365.43 1211.41 L1364.85 1211.41 L1364.26 1211.41 L1363.68 1211.41 L1363.09 1211.41 L1362.5 1211.41 L1361.92 1211.41 L1361.33 1211.41 L1360.74 1211.41 L1360.16 1211.41 L1359.57 1211.41 L1358.98 1211.41 L1358.4 1211.41 L1357.81 1211.41 L1357.22 1211.41 L1356.64 1211.41 L1356.05 1211.41 L1355.47 1211.41 L1354.88 1211.41 L1354.29 1211.41 L1353.71 1211.41 L1353.12 1211.41 L1352.53 1211.41 L1351.95 1211.41 L1351.36 1211.41 L1350.77 1211.41 L1350.19 1211.41 L1349.6 1211.41 L1349.01 1211.41 L1348.43 1211.41 L1347.84 1211.41 L1347.26 1211.41 L1346.67 1211.41 L1346.08 1211.41 L1345.5 1211.41 L1344.91 1211.41 L1344.32 1211.41 L1343.74 1211.41 L1343.15 1211.41 L1342.56 1211.41 L1341.98 1211.41 L1341.39 1211.41 L1340.8 1211.41 L1340.22 1211.41 L1339.63 1211.41 L1339.05 1211.41 L1338.46 1211.41 L1337.87 1211.41 L1337.29 1211.41 L1336.7 1211.41 L1336.11 1211.41 L1335.53 1211.41 L1334.94 1211.41 L1334.35 1211.41 L1333.77 1211.41 L1333.18 1211.41 L1332.6 1211.41 L1332.01 1211.41 L1331.42 1211.41 L1330.84 1211.41 L1330.25 1211.41 L1329.66 1211.41 L1329.08 1211.41 L1328.49 1211.41 L1327.9 1211.41 L1327.32 1211.41 L1326.73 1211.41 L1326.14 1211.41 L1325.56 1211.41 L1324.97 1211.41 L1324.39 1211.41 L1323.8 1211.41 L1323.21 1211.41 L1322.63 1211.41 L1322.04 1211.41 L1321.45 1211.41 L1320.87 1211.41 L1320.28 1211.41 L1319.69 1211.41 L1319.11 1211.41 L1318.52 1211.41 L1317.93 1211.41 L1317.35 1211.41 L1316.76 1211.41 L1316.18 1211.41 L1315.59 1211.41 L1315 1211.41 L1314.42 1211.41 L1313.83 1211.41 L1313.24 1211.41 L1312.66 1211.41 L1312.07 1211.41 L1311.48 1211.41 L1310.9 1211.41 L1310.31 1211.41 L1309.73 1211.41 L1309.14 1211.41 L1308.55 1211.41 L1307.97 1211.41 L1307.38 1211.41 L1306.79 1211.41 L1306.21 1211.41 L1305.62 1211.41 L1305.03 1211.41 L1304.45 1211.41 L1303.86 1211.41 L1303.27 1211.41 L1302.69 1211.41 L1302.1 1211.41 L1301.52 1211.41 L1300.93 1211.41 L1300.34 1211.41 L1299.76 1211.41 L1299.17 1211.41 L1298.58 1211.41 L1298 1211.41 L1297.41 1211.41 L1296.82 1211.41 L1296.24 1211.41 L1295.65 1211.41 L1295.06 1211.41 L1294.48 1211.41 L1293.89 1211.41 L1293.31 1211.41 L1292.72 1211.41 L1292.13 1211.41 L1291.55 1211.41 L1290.96 1211.41 L1290.37 1211.41 L1289.79 1211.41 L1289.2 1211.41 L1288.61 1211.41 L1288.03 1211.41 L1287.44 1211.41 L1286.86 1211.41 L1286.27 1211.41 L1285.68 1211.41 L1285.1 1211.41 L1284.51 1211.41 L1283.92 1211.41 L1283.34 1211.41 L1282.75 1211.41 L1282.16 1211.41 L1281.58 1211.41 L1280.99 1211.41 L1280.4 1211.41 L1279.82 1211.41 L1279.23 1211.41 L1278.65 1211.41 L1278.06 1211.41 L1277.47 1211.41 L1276.89 1211.41 L1276.3 1211.41 L1275.71 1211.41 L1275.13 1211.41 L1274.54 1211.41 L1273.95 1211.41 L1273.37 1211.41 L1272.78 1211.41 L1272.19 1211.41 L1271.61 1211.41 L1271.02 1211.41 L1270.44 1211.41 L1269.85 1211.41 L1269.26 1211.41 L1268.68 1211.41 L1268.09 1211.41 L1267.5 1211.41 L1266.92 1211.41 L1266.33 1211.41 L1265.74 1211.41 L1265.16 1211.41 L1264.57 1211.41 L1263.98 1211.41 L1263.4 1211.41 L1262.81 1211.41 L1262.23 1211.41 L1261.64 1211.41 L1261.05 1211.41 L1260.47 1211.41 L1259.88 1211.41 L1259.29 1211.41 L1258.71 1211.41 L1258.12 1211.41 L1257.53 1211.41 L1256.95 1211.41 L1256.36 1211.41 L1255.78 1211.41 L1255.19 1211.41 L1254.6 1211.41 L1254.02 1211.41 L1253.43 1211.41 L1252.84 1211.41 L1252.26 1211.41 L1251.67 1211.41 L1251.08 1211.41 L1250.5 1211.41 L1249.91 1211.41 L1249.32 1211.41 L1248.74 1211.41 L1248.15 1211.41 L1247.57 1211.41 L1246.98 1211.41 L1246.39 1211.41 L1245.81 1211.41 L1245.22 1211.41 L1244.63 1211.41 L1244.05 1211.41 L1243.46 1211.41 L1242.87 1211.41 L1242.29 1211.41 L1241.7 1211.41 L1241.11 1211.41 L1240.53 1211.41 L1239.94 1211.41 L1239.36 1211.41 L1238.77 1211.41 L1238.18 1211.41 L1237.6 1211.41 L1237.01 1211.41 L1236.42 1211.41 L1235.84 1211.41 L1235.25 1211.41 L1234.66 1211.41 L1234.08 1211.41 L1233.49 1211.41 L1232.91 1211.41 L1232.32 1211.41 L1231.73 1211.41 L1231.15 1211.41 L1230.56 1211.41 L1229.97 1211.41 L1229.39 1211.41 L1228.8 1211.41 L1228.21 1211.41 L1227.63 1211.41 L1227.04 1211.41 L1226.45 1211.41 L1225.87 1211.41 L1225.28 1211.41 L1224.7 1211.41 L1224.11 1211.41 L1223.52 1211.41 L1222.94 1211.41 L1222.35 1211.41 L1221.76 1211.41 L1221.18 1211.41 L1220.59 1211.41 L1220 1211.41 L1219.42 1211.41 L1218.83 1211.41 L1218.24 1211.41 L1217.66 1211.41 L1217.07 1211.41 L1216.49 1211.41 L1215.9 1211.41 L1215.31 1211.41 L1214.73 1211.41 L1214.14 1211.41 L1213.55 1211.41 L1212.97 1211.41 L1212.38 1211.41 L1211.79 1211.41 L1211.21 1211.41 L1210.62 1211.41 L1210.03 1211.41 L1209.45 1211.41 L1208.86 1211.41 L1208.28 1211.41 L1207.69 1211.41 L1207.1 1211.41 L1206.52 1211.41 L1205.93 1211.41 L1205.34 1211.41 L1204.76 1211.41 L1204.17 1211.41 L1203.58 1211.41 L1203 1211.41 L1202.41 1211.41 L1201.83 1211.41 L1201.24 1211.41 L1200.65 1211.41 L1200.07 1211.41 L1199.48 1211.41 L1198.89 1211.41 L1198.31 1211.41 L1197.72 1211.41 L1197.13 1211.41 L1196.55 1211.41 L1195.96 1211.41 L1195.37 1211.41 L1194.79 1211.41 L1194.2 1211.41 L1193.62 1211.41 L1193.03 1211.41 L1192.44 1211.41 L1191.86 1211.41 L1191.27 1211.41 L1190.68 1211.41 L1190.1 1211.41 L1189.51 1211.41 L1188.92 1211.41 L1188.34 1211.41 L1187.75 1211.41 L1187.16 1211.41 L1186.58 1211.41 L1185.99 1211.41 L1185.41 1211.41 L1184.82 1211.41 L1184.23 1211.41 L1183.65 1211.41 L1183.06 1211.41 L1182.47 1211.41 L1181.89 1211.41 L1181.3 1211.41 L1180.71 1211.41 L1180.13 1211.41 L1179.54 1211.41 L1178.96 1211.41 L1178.37 1211.41 L1177.78 1211.41 L1177.2 1211.41 L1176.61 1211.41 L1176.02 1211.41 L1175.44 1211.41 L1174.85 1211.41 L1174.26 1211.41 L1173.68 1211.41 L1173.09 1211.41 L1172.5 1211.41 L1171.92 1211.41 L1171.33 1211.41 L1170.75 1211.41 L1170.16 1211.41 L1169.57 1211.41 L1168.99 1211.41 L1168.4 1211.41 L1167.81 1211.41 L1167.23 1211.41 L1166.64 1211.41 L1166.05 1211.41 L1165.47 1211.41 L1164.88 1211.41 L1164.29 1211.41 L1163.71 1211.41 L1163.12 1211.41 L1162.54 1211.41 L1161.95 1211.41 L1161.36 1211.41 L1160.78 1211.41 L1160.19 1211.41 L1159.6 1211.41 L1159.02 1211.41 L1158.43 1211.41 L1157.84 1211.41 L1157.26 1211.41 L1156.67 1211.41 L1156.09 1211.41 L1155.5 1211.41 L1154.91 1211.41 L1154.33 1211.41 L1153.74 1211.41 L1153.15 1211.41 L1152.57 1211.41 L1151.98 1211.41 L1151.39 1211.41 L1150.81 1211.41 L1150.22 1211.41 L1149.63 1211.41 L1149.05 1211.41 L1148.46 1211.41 L1147.88 1211.41 L1147.29 1211.41 L1146.7 1211.41 L1146.12 1211.41 L1145.53 1211.41 L1144.94 1211.41 L1144.36 1211.41 L1143.77 1211.41 L1143.18 1211.41 L1142.6 1211.41 L1142.01 1211.41 L1141.42 1211.41 L1140.84 1211.41 L1140.25 1211.41 L1139.67 1211.41 L1139.08 1211.41 L1138.49 1211.41 L1137.91 1211.41 L1137.32 1211.41 L1136.73 1211.41 L1136.15 1211.41 L1135.56 1211.41 L1134.97 1211.41 L1134.39 1211.41 L1133.8 1211.41 L1133.21 1211.41 L1132.63 1211.41 L1132.04 1211.41 L1131.46 1211.41 L1130.87 1211.41 L1130.28 1211.41 L1129.7 1211.41 L1129.11 1211.41 L1128.52 1211.41 L1127.94 1211.41 L1127.35 1211.41 L1126.76 1211.41 L1126.18 1211.41 L1125.59 1211.41 L1125.01 1211.41 L1124.42 1211.41 L1123.83 1211.41 L1123.25 1211.41 L1122.66 1211.41 L1122.07 1211.41 L1121.49 1211.41 L1120.9 1211.41 L1120.31 1211.41 L1119.73 1211.41 L1119.14 1211.41 L1118.55 1211.41 L1117.97 1211.41 L1117.38 1211.41 L1116.8 1211.41 L1116.21 1211.41 L1115.62 1211.41 L1115.04 1211.41 L1114.45 1211.41 L1113.86 1211.41 L1113.28 1211.41 L1112.69 1211.41 L1112.1 1211.41 L1111.52 1211.41 L1110.93 1211.41 L1110.34 1211.41 L1109.76 1211.41 L1109.17 1211.41 L1108.59 1211.41 L1108 1211.41 L1107.41 1211.41 L1106.83 1211.41 L1106.24 1211.41 L1105.65 1211.41 L1105.07 1211.41 L1104.48 1211.41 L1103.89 1211.41 L1103.31 1211.41 L1102.72 1211.41 L1102.14 1211.41 L1101.55 1211.41 L1100.96 1211.41 L1100.38 1211.41 L1099.79 1211.41 L1099.2 1211.41 L1098.62 1211.41 L1098.03 1211.41 L1097.44 1211.41 L1096.86 1211.41 L1096.27 1211.41 L1095.68 1211.41 L1095.1 1211.41 L1094.51 1211.41 L1093.93 1211.41 L1093.34 1211.41 L1092.75 1211.41 L1092.17 1211.41 L1091.58 1211.41 L1090.99 1211.41 L1090.41 1211.41 L1089.82 1211.41 L1089.23 1211.41 L1088.65 1211.41 L1088.06 1211.41 L1087.47 1211.41 L1086.89 1211.41 L1086.3 1211.41 L1085.72 1211.41 L1085.13 1211.41 L1084.54 1211.41 L1083.96 1211.41 L1083.37 1211.41 L1082.78 1211.41 L1082.2 1211.41 L1081.61 1211.41 L1081.02 1211.41 L1080.44 1211.41 L1079.85 1211.41 L1079.26 1211.41 L1078.68 1211.41 L1078.09 1211.41 L1077.51 1211.41 L1076.92 1211.41 L1076.33 1211.41 L1075.75 1211.41 L1075.16 1211.41 L1074.57 1211.41 L1073.99 1211.41 L1073.4 1211.41 L1072.81 1211.41 L1072.23 1211.41 L1071.64 1211.41 L1071.06 1211.41 L1070.47 1211.41 L1069.88 1211.41 L1069.3 1211.41 L1068.71 1211.41 L1068.12 1211.41 L1067.54 1211.41 L1066.95 1211.41 L1066.36 1211.41 L1065.78 1211.41 L1065.19 1211.41 L1064.6 1211.41 L1064.02 1211.41 L1063.43 1211.41 L1062.85 1211.41 L1062.26 1211.41 L1061.67 1211.41 L1061.09 1211.41 L1060.5 1211.41 L1059.91 1211.41 L1059.33 1211.41 L1058.74 1211.41 L1058.15 1211.41 L1057.57 1211.41 L1056.98 1211.41 L1056.39 1211.41 L1055.81 1211.41 L1055.22 1211.41 L1054.64 1211.41 L1054.05 1211.41 L1053.46 1211.41 L1052.88 1211.41 L1052.29 1211.41 L1051.7 1211.41 L1051.12 1211.41 L1050.53 1211.41 L1049.94 1211.41 L1049.36 1211.41 L1048.77 1211.41 L1048.19 1211.41 L1047.6 1211.41 L1047.01 1211.41 L1046.43 1211.41 L1045.84 1211.41 L1045.25 1211.41 L1044.67 1211.41 L1044.08 1211.41 L1043.49 1211.41 L1042.91 1211.41 L1042.32 1211.41 L1041.73 1211.41 L1041.15 1211.41 L1040.56 1211.41 L1039.98 1211.41 L1039.39 1211.41 L1038.8 1211.41 L1038.22 1211.41 L1037.63 1211.41 L1037.04 1211.41 L1036.46 1211.41 L1035.87 1211.41 L1035.28 1211.41 L1034.7 1211.41 L1034.11 1211.41 L1033.52 1211.41 L1032.94 1211.41 L1032.35 1211.41 L1031.77 1211.41 L1031.18 1211.41 L1030.59 1211.41 L1030.01 1211.41 L1029.42 1211.41 L1028.83 1211.41 L1028.25 1211.41 L1027.66 1211.41 L1027.07 1211.41 L1026.49 1211.41 L1025.9 1211.41 L1025.32 1211.41 L1024.73 1211.41 L1024.14 1211.41 L1023.56 1211.41 L1022.97 1211.41 L1022.38 1211.41 L1021.8 1211.41 L1021.21 1211.41 L1020.62 1211.41 L1020.04 1211.41 L1019.45 1211.41 L1018.86 1211.41 L1018.28 1211.41 L1017.69 1211.41 L1017.11 1211.41 L1016.52 1211.41 L1015.93 1211.41 L1015.35 1211.41 L1014.76 1211.41 L1014.17 1211.41 L1013.59 1211.41 L1013 1211.41 L1012.41 1211.41 L1011.83 1211.41 L1011.24 1211.41 L1010.65 1211.41 L1010.07 1211.41 L1009.48 1211.41 L1008.9 1211.41 L1008.31 1211.41 L1007.72 1211.41 L1007.14 1211.41 L1006.55 1211.41 L1005.96 1211.41 L1005.38 1211.41 L1004.79 1211.41 L1004.2 1211.41 L1003.62 1211.41 L1003.03 1211.41 L1002.44 1211.41 L1001.86 1211.41 L1001.27 1211.41 L1000.69 1211.41 L1000.1 1211.41 L999.513 1211.41 L998.926 1211.41 L998.34 1211.41 L997.754 1211.41 L997.167 1211.41 L996.581 1211.41 L995.994 1211.41 L995.408 1211.41 L994.822 1211.41 L994.235 1211.41 L993.649 1211.41 L993.062 1211.41 L992.476 1211.41 L991.889 1211.41 L991.303 1211.41 L990.717 1211.41 L990.13 1211.41 L989.544 1211.41 L988.957 1211.41 L988.371 1211.41 L987.785 1211.41 L987.198 1211.41 L986.612 1211.41 L986.025 1211.41  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.53 986.612,1211.53 987.198,1211.53 987.785,1211.53 988.371,1211.53 988.957,1211.53 989.544,1211.53 990.13,1211.53 990.717,1211.53 991.303,1211.53 991.889,1211.53 992.476,1211.53 993.062,1211.53 993.649,1211.53 994.235,1211.53 994.822,1211.53 995.408,1211.53 995.994,1211.53 996.581,1211.53 997.167,1211.53 997.754,1211.53 998.34,1211.53 998.926,1211.53 999.513,1211.53 1000.1,1211.53 1000.69,1211.53 1001.27,1211.53 1001.86,1211.53 1002.44,1211.53 1003.03,1211.53 1003.62,1211.53 1004.2,1211.53 1004.79,1211.53 1005.38,1211.53 1005.96,1211.53 1006.55,1211.53 1007.14,1211.53 1007.72,1211.53 1008.31,1211.53 1008.9,1211.53 1009.48,1211.53 1010.07,1211.53 1010.65,1211.53 1011.24,1211.53 1011.83,1211.53 1012.41,1211.53 1013,1211.53 1013.59,1211.53 1014.17,1211.53 1014.76,1211.53 1015.35,1211.53 1015.93,1211.53 1016.52,1211.53 1017.11,1211.53 1017.69,1211.53 1018.28,1211.53 1018.86,1211.53 1019.45,1211.53 1020.04,1211.53 1020.62,1211.53 1021.21,1211.53 1021.8,1211.53 1022.38,1211.53 1022.97,1211.53 1023.56,1211.53 1024.14,1211.53 1024.73,1211.53 1025.32,1211.53 1025.9,1211.53 1026.49,1211.53 1027.07,1211.53 1027.66,1211.53 1028.25,1211.53 1028.83,1211.53 1029.42,1211.53 1030.01,1211.53 1030.59,1211.53 1031.18,1211.53 1031.77,1211.53 1032.35,1211.53 1032.94,1211.53 1033.52,1211.53 1034.11,1211.53 1034.7,1211.53 1035.28,1211.53 1035.87,1211.53 1036.46,1211.53 1037.04,1211.53 1037.63,1211.53 1038.22,1211.53 1038.8,1211.53 1039.39,1211.53 1039.98,1211.53 1040.56,1211.53 1041.15,1211.53 1041.73,1211.53 1042.32,1211.53 1042.91,1211.53 1043.49,1211.53 1044.08,1211.53 1044.67,1211.53 1045.25,1211.53 1045.84,1211.53 1046.43,1211.53 1047.01,1211.53 1047.6,1211.53 1048.19,1211.53 1048.77,1211.53 1049.36,1211.53 1049.94,1211.53 1050.53,1211.53 1051.12,1211.53 1051.7,1211.53 1052.29,1211.53 1052.88,1211.53 1053.46,1211.53 1054.05,1211.53 1054.64,1211.53 1055.22,1211.53 1055.81,1211.53 1056.39,1211.53 1056.98,1211.53 1057.57,1211.53 1058.15,1211.53 1058.74,1211.53 1059.33,1211.53 1059.91,1211.53 1060.5,1211.53 1061.09,1211.53 1061.67,1211.53 1062.26,1211.53 1062.85,1211.53 1063.43,1211.53 1064.02,1211.53 1064.6,1211.53 1065.19,1211.53 1065.78,1211.53 1066.36,1211.53 1066.95,1211.53 1067.54,1211.53 1068.12,1211.53 1068.71,1211.53 1069.3,1211.53 1069.88,1211.53 1070.47,1211.53 1071.06,1211.53 1071.64,1211.53 1072.23,1211.53 1072.81,1211.53 1073.4,1211.53 1073.99,1211.53 1074.57,1211.53 1075.16,1211.53 1075.75,1211.53 1076.33,1211.53 1076.92,1211.53 1077.51,1211.53 1078.09,1211.53 1078.68,1211.53 1079.26,1211.53 1079.85,1211.53 1080.44,1211.53 1081.02,1211.53 1081.61,1211.53 1082.2,1211.53 1082.78,1211.53 1083.37,1211.53 1083.96,1211.53 1084.54,1211.53 1085.13,1211.53 1085.72,1211.53 1086.3,1211.53 1086.89,1211.53 1087.47,1211.53 1088.06,1211.53 1088.65,1211.53 1089.23,1211.53 1089.82,1211.53 1090.41,1211.53 1090.99,1211.53 1091.58,1211.53 1092.17,1211.53 1092.75,1211.53 1093.34,1211.53 1093.93,1211.53 1094.51,1211.53 1095.1,1211.53 1095.68,1211.53 1096.27,1211.53 1096.86,1211.53 1097.44,1211.53 1098.03,1211.53 1098.62,1211.53 1099.2,1211.53 1099.79,1211.53 1100.38,1211.53 1100.96,1211.53 1101.55,1211.53 1102.14,1211.53 1102.72,1211.53 1103.31,1211.53 1103.89,1211.53 1104.48,1211.53 1105.07,1211.53 1105.65,1211.53 1106.24,1211.53 1106.83,1211.53 1107.41,1211.53 1108,1211.53 1108.59,1211.53 1109.17,1211.53 1109.76,1211.53 1110.34,1211.53 1110.93,1211.53 1111.52,1211.53 1112.1,1211.53 1112.69,1211.53 1113.28,1211.53 1113.86,1211.53 1114.45,1211.53 1115.04,1211.53 1115.62,1211.53 1116.21,1211.53 1116.8,1211.53 1117.38,1211.53 1117.97,1211.53 1118.55,1211.53 1119.14,1211.53 1119.73,1211.53 1120.31,1211.53 1120.9,1211.53 1121.49,1211.53 1122.07,1211.53 1122.66,1211.53 1123.25,1211.53 1123.83,1211.53 1124.42,1211.53 1125.01,1211.53 1125.59,1211.53 1126.18,1211.53 1126.76,1211.53 1127.35,1211.53 1127.94,1211.53 1128.52,1211.53 1129.11,1211.53 1129.7,1211.53 1130.28,1211.53 1130.87,1211.53 1131.46,1211.53 1132.04,1211.53 1132.63,1211.53 1133.21,1211.53 1133.8,1211.53 1134.39,1211.53 1134.97,1211.53 1135.56,1211.53 1136.15,1211.53 1136.73,1211.53 1137.32,1211.53 1137.91,1211.53 1138.49,1211.53 1139.08,1211.53 1139.67,1211.53 1140.25,1211.53 1140.84,1211.53 1141.42,1211.53 1142.01,1211.53 1142.6,1211.53 1143.18,1211.53 1143.77,1211.53 1144.36,1211.53 1144.94,1211.53 1145.53,1211.53 1146.12,1211.53 1146.7,1211.53 1147.29,1211.53 1147.88,1211.53 1148.46,1211.53 1149.05,1211.53 1149.63,1211.53 1150.22,1211.53 1150.81,1211.53 1151.39,1211.53 1151.98,1211.53 1152.57,1211.53 1153.15,1211.53 1153.74,1211.53 1154.33,1211.53 1154.91,1211.53 1155.5,1211.53 1156.09,1211.53 1156.67,1211.53 1157.26,1211.53 1157.84,1211.53 1158.43,1211.53 1159.02,1211.53 1159.6,1211.53 1160.19,1211.53 1160.78,1211.53 1161.36,1211.53 1161.95,1211.53 1162.54,1211.53 1163.12,1211.53 1163.71,1211.53 1164.29,1211.53 1164.88,1211.53 1165.47,1211.53 1166.05,1211.53 1166.64,1211.53 1167.23,1211.53 1167.81,1211.53 1168.4,1211.53 1168.99,1211.53 1169.57,1211.53 1170.16,1211.53 1170.75,1211.53 1171.33,1211.53 1171.92,1211.53 1172.5,1211.53 1173.09,1211.53 1173.68,1211.53 1174.26,1211.53 1174.85,1211.53 1175.44,1211.53 1176.02,1211.53 1176.61,1211.53 1177.2,1211.53 1177.78,1211.53 1178.37,1211.53 1178.96,1211.53 1179.54,1211.53 1180.13,1211.53 1180.71,1211.53 1181.3,1211.53 1181.89,1211.53 1182.47,1211.53 1183.06,1211.53 1183.65,1211.53 1184.23,1211.53 1184.82,1211.53 1185.41,1211.53 1185.99,1211.53 1186.58,1211.53 1187.16,1211.53 1187.75,1211.53 1188.34,1211.53 1188.92,1211.53 1189.51,1211.53 1190.1,1211.53 1190.68,1211.53 1191.27,1211.53 1191.86,1211.53 1192.44,1211.53 1193.03,1211.53 1193.62,1211.53 1194.2,1211.53 1194.79,1211.53 1195.37,1211.53 1195.96,1211.53 1196.55,1211.53 1197.13,1211.53 1197.72,1211.53 1198.31,1211.53 1198.89,1211.53 1199.48,1211.53 1200.07,1211.53 1200.65,1211.53 1201.24,1211.53 1201.83,1211.53 1202.41,1211.53 1203,1211.53 1203.58,1211.53 1204.17,1211.53 1204.76,1211.53 1205.34,1211.53 1205.93,1211.53 1206.52,1211.53 1207.1,1211.53 1207.69,1211.53 1208.28,1211.53 1208.86,1211.53 1209.45,1211.53 1210.03,1211.53 1210.62,1211.53 1211.21,1211.53 1211.79,1211.53 1212.38,1211.53 1212.97,1211.53 1213.55,1211.53 1214.14,1211.53 1214.73,1211.53 1215.31,1211.53 1215.9,1211.53 1216.49,1211.53 1217.07,1211.53 1217.66,1211.53 1218.24,1211.53 1218.83,1211.53 1219.42,1211.53 1220,1211.53 1220.59,1211.53 1221.18,1211.53 1221.76,1211.53 1222.35,1211.53 1222.94,1211.53 1223.52,1211.53 1224.11,1211.53 1224.7,1211.53 1225.28,1211.53 1225.87,1211.53 1226.45,1211.53 1227.04,1211.53 1227.63,1211.53 1228.21,1211.53 1228.8,1211.53 1229.39,1211.53 1229.97,1211.53 1230.56,1211.53 1231.15,1211.53 1231.73,1211.53 1232.32,1211.53 1232.91,1211.53 1233.49,1211.53 1234.08,1211.53 1234.66,1211.53 1235.25,1211.53 1235.84,1211.53 1236.42,1211.53 1237.01,1211.53 1237.6,1211.53 1238.18,1211.53 1238.77,1211.53 1239.36,1211.53 1239.94,1211.53 1240.53,1211.53 1241.11,1211.53 1241.7,1211.53 1242.29,1211.53 1242.87,1211.53 1243.46,1211.53 1244.05,1211.53 1244.63,1211.53 1245.22,1211.53 1245.81,1211.53 1246.39,1211.53 1246.98,1211.53 1247.57,1211.53 1248.15,1211.53 1248.74,1211.53 1249.32,1211.53 1249.91,1211.53 1250.5,1211.53 1251.08,1211.53 1251.67,1211.53 1252.26,1211.53 1252.84,1211.53 1253.43,1211.53 1254.02,1211.53 1254.6,1211.53 1255.19,1211.53 1255.78,1211.53 1256.36,1211.53 1256.95,1211.53 1257.53,1211.53 1258.12,1211.53 1258.71,1211.53 1259.29,1211.53 1259.88,1211.53 1260.47,1211.53 1261.05,1211.53 1261.64,1211.53 1262.23,1211.53 1262.81,1211.53 1263.4,1211.53 1263.98,1211.53 1264.57,1211.53 1265.16,1211.53 1265.74,1211.53 1266.33,1211.53 1266.92,1211.53 1267.5,1211.53 1268.09,1211.53 1268.68,1211.53 1269.26,1211.53 1269.85,1211.53 1270.44,1211.53 1271.02,1211.53 1271.61,1211.53 1272.19,1211.53 1272.78,1211.53 1273.37,1211.53 1273.95,1211.53 1274.54,1211.53 1275.13,1211.53 1275.71,1211.53 1276.3,1211.53 1276.89,1211.53 1277.47,1211.53 1278.06,1211.53 1278.65,1211.53 1279.23,1211.53 1279.82,1211.53 1280.4,1211.53 1280.99,1211.53 1281.58,1211.53 1282.16,1211.53 1282.75,1211.53 1283.34,1211.53 1283.92,1211.53 1284.51,1211.53 1285.1,1211.53 1285.68,1211.53 1286.27,1211.53 1286.86,1211.53 1287.44,1211.53 1288.03,1211.53 1288.61,1211.53 1289.2,1211.53 1289.79,1211.53 1290.37,1211.53 1290.96,1211.53 1291.55,1211.53 1292.13,1211.53 1292.72,1211.53 1293.31,1211.53 1293.89,1211.53 1294.48,1211.53 1295.06,1211.53 1295.65,1211.53 1296.24,1211.53 1296.82,1211.53 1297.41,1211.53 1298,1211.53 1298.58,1211.53 1299.17,1211.53 1299.76,1211.53 1300.34,1211.53 1300.93,1211.53 1301.52,1211.53 1302.1,1211.53 1302.69,1211.53 1303.27,1211.53 1303.86,1211.53 1304.45,1211.53 1305.03,1211.53 1305.62,1211.53 1306.21,1211.53 1306.79,1211.53 1307.38,1211.53 1307.97,1211.53 1308.55,1211.53 1309.14,1211.53 1309.73,1211.53 1310.31,1211.53 1310.9,1211.53 1311.48,1211.53 1312.07,1211.53 1312.66,1211.53 1313.24,1211.53 1313.83,1211.53 1314.42,1211.53 1315,1211.53 1315.59,1211.53 1316.18,1211.53 1316.76,1211.53 1317.35,1211.53 1317.93,1211.53 1318.52,1211.53 1319.11,1211.53 1319.69,1211.53 1320.28,1211.53 1320.87,1211.53 1321.45,1211.53 1322.04,1211.53 1322.63,1211.53 1323.21,1211.53 1323.8,1211.53 1324.39,1211.53 1324.97,1211.53 1325.56,1211.53 1326.14,1211.53 1326.73,1211.53 1327.32,1211.53 1327.9,1211.53 1328.49,1211.53 1329.08,1211.53 1329.66,1211.53 1330.25,1211.53 1330.84,1211.53 1331.42,1211.53 1332.01,1211.53 1332.6,1211.53 1333.18,1211.53 1333.77,1211.53 1334.35,1211.53 1334.94,1211.53 1335.53,1211.53 1336.11,1211.53 1336.7,1211.53 1337.29,1211.53 1337.87,1211.53 1338.46,1211.53 1339.05,1211.53 1339.63,1211.53 1340.22,1211.53 1340.8,1211.53 1341.39,1211.53 1341.98,1211.53 1342.56,1211.53 1343.15,1211.53 1343.74,1211.53 1344.32,1211.53 1344.91,1211.53 1345.5,1211.53 1346.08,1211.53 1346.67,1211.53 1347.26,1211.53 1347.84,1211.53 1348.43,1211.53 1349.01,1211.53 1349.6,1211.53 1350.19,1211.53 1350.77,1211.53 1351.36,1211.53 1351.95,1211.53 1352.53,1211.53 1353.12,1211.53 1353.71,1211.53 1354.29,1211.53 1354.88,1211.53 1355.47,1211.53 1356.05,1211.53 1356.64,1211.53 1357.22,1211.53 1357.81,1211.53 1358.4,1211.53 1358.98,1211.53 1359.57,1211.53 1360.16,1211.53 1360.74,1211.53 1361.33,1211.53 1361.92,1211.53 1362.5,1211.53 1363.09,1211.53 1363.68,1211.53 1364.26,1211.53 1364.85,1211.53 1365.43,1211.53 1366.02,1211.53 1366.61,1211.53 1367.19,1211.53 1367.78,1211.53 1368.37,1211.53 1368.95,1211.53 1369.54,1211.53 1370.13,1211.53 1370.71,1211.53 1371.3,1211.53 1371.88,1211.53 1372.47,1211.53 1373.06,1211.53 1373.64,1211.53 1374.23,1211.53 1374.82,1211.53 1375.4,1211.53 1375.99,1211.53 1376.58,1211.53 1377.16,1211.53 1377.75,1211.53 1378.34,1211.53 1378.92,1211.53 1379.51,1211.53 1380.09,1211.53 1380.68,1211.53 1381.27,1211.53 1381.85,1211.53 1382.44,1211.53 1383.03,1211.53 1383.61,1211.53 1384.2,1211.53 1384.79,1211.53 1385.37,1211.53 1385.96,1211.53 1386.55,1211.53 1387.13,1211.53 1387.72,1211.53 1388.3,1211.53 1388.89,1211.53 1389.48,1211.53 1390.06,1211.53 1390.65,1211.53 1391.24,1211.53 1391.82,1211.53 1392.41,1211.53 1393,1211.53 1393.58,1211.53 1394.17,1211.53 1394.75,1211.53 1395.34,1211.53 1395.93,1211.53 1396.51,1211.53 1397.1,1211.53 1397.69,1211.53 1398.27,1211.53 1398.86,1211.53 1399.45,1211.53 1400.03,1211.53 1400.62,1211.53 1401.21,1211.53 1401.79,1211.53 1402.38,1211.53 1402.96,1211.53 1403.55,1211.53 1404.14,1211.53 1404.72,1211.53 1405.31,1211.53 1405.9,1211.53 1406.48,1211.53 1407.07,1211.53 1407.66,1211.53 1408.24,1211.53 1408.83,1211.53 1409.42,1211.53 1410,1211.53 1410.59,1211.53 1411.17,1211.53 1411.76,1211.53 1412.35,1211.53 1412.93,1211.53 1413.52,1211.53 1414.11,1211.53 1414.69,1211.53 1415.28,1211.53 1415.87,1211.53 1416.45,1211.53 1417.04,1211.53 1417.63,1211.53 1418.21,1211.53 1418.8,1211.53 1419.38,1211.53 1419.97,1211.53 1420.56,1211.53 1421.14,1211.53 1421.73,1211.53 1422.32,1211.53 1422.9,1211.53 1423.49,1211.53 1424.08,1211.53 1424.66,1211.53 1425.25,1211.53 1425.83,1211.53 1426.42,1211.53 1427.01,1211.53 1427.59,1211.53 1428.18,1211.53 1428.77,1211.53 1429.35,1211.53 1429.94,1211.53 1430.53,1211.53 1431.11,1211.53 1431.7,1211.53 1432.29,1211.53 1432.87,1211.53 1433.46,1211.53 1434.04,1211.53 1434.63,1211.53 1435.22,1211.53 1435.8,1211.53 1436.39,1211.53 1436.98,1211.53 1437.56,1211.53 1438.15,1211.53 1438.74,1211.53 1439.32,1211.53 1439.91,1211.53 1440.5,1211.53 1441.08,1211.53 1441.67,1211.53 1442.25,1211.53 1442.84,1211.53 1443.43,1211.53 1444.01,1211.53 1444.6,1211.53 1445.19,1211.53 1445.77,1211.53 1446.36,1211.53 1446.95,1211.53 1447.53,1211.53 1448.12,1211.53 1448.7,1211.53 1449.29,1211.53 1449.88,1211.53 1450.46,1211.53 1451.05,1211.53 1451.64,1211.53 1452.22,1211.53 1452.81,1211.53 1453.4,1211.53 1453.98,1211.53 1454.57,1211.53 1455.16,1211.53 1455.74,1211.53 1456.33,1211.53 1456.91,1211.53 1457.5,1211.53 1458.09,1211.53 1458.67,1211.53 1459.26,1211.53 1459.85,1211.53 1460.43,1211.53 1461.02,1211.53 1461.61,1211.53 1462.19,1211.53 1462.78,1211.53 1463.37,1211.53 1463.95,1211.53 1464.54,1211.53 1465.12,1211.53 1465.71,1211.53 1466.3,1211.53 1466.88,1211.53 1467.47,1211.53 1468.06,1211.53 1468.64,1211.53 1469.23,1211.53 1469.82,1211.53 1470.4,1211.53 1470.99,1211.53 1471.57,1211.53 1472.16,1211.53 1472.75,1211.53 1473.33,1211.53 1473.92,1211.53 1474.51,1211.53 1475.09,1211.53 1475.68,1211.53 1476.27,1211.53 1476.85,1211.53 1477.44,1211.53 1478.03,1211.53 1478.61,1211.53 1479.2,1211.53 1479.78,1211.53 1480.37,1211.53 1480.96,1211.53 1481.54,1211.53 1482.13,1211.53 1482.72,1211.53 1483.3,1211.53 1483.89,1211.53 1484.48,1211.53 1485.06,1211.53 1485.65,1211.53 1486.24,1211.53 1486.82,1211.53 1487.41,1211.53 1487.99,1211.53 1488.58,1211.53 1489.17,1211.53 1489.75,1211.53 1490.34,1211.53 1490.93,1211.53 1491.51,1211.53 1492.1,1211.53 1492.69,1211.53 1493.27,1211.53 1493.86,1211.53 1494.45,1211.53 1495.03,1211.53 1495.62,1211.53 1496.2,1211.53 1496.79,1211.53 1497.38,1211.53 1497.96,1211.53 1498.55,1211.53 1499.14,1211.53 1499.72,1211.53 1500.31,1211.53 1500.9,1211.53 1501.48,1211.53 1502.07,1211.53 1502.65,1211.53 1503.24,1211.53 1503.83,1211.53 1504.41,1211.53 1505,1211.53 1505.59,1211.53 1506.17,1211.53 1506.76,1211.53 1507.35,1211.53 1507.93,1211.53 1508.52,1211.53 1509.11,1211.53 1509.69,1211.53 1510.28,1211.53 1510.86,1211.53 1511.45,1211.53 1512.04,1211.53 1512.62,1211.53 1513.21,1211.53 1513.8,1211.53 1514.38,1211.53 1514.97,1211.53 1515.56,1211.53 1516.14,1211.53 1516.73,1211.53 1517.32,1211.53 1517.9,1211.53 1518.49,1211.53 1519.07,1211.53 1519.66,1211.53 1520.25,1211.53 1520.83,1211.53 1521.42,1211.53 1522.01,1211.53 1522.59,1211.53 1523.18,1211.53 1523.77,1211.53 1524.35,1211.53 1524.94,1211.53 1525.52,1211.53 1526.11,1211.53 1526.7,1211.53 1527.28,1211.53 1527.87,1211.53 1528.46,1211.53 1529.04,1211.53 1529.63,1211.53 1530.22,1211.53 1530.8,1211.53 1531.39,1211.53 1531.98,1211.53 1532.56,1211.53 1533.15,1211.53 1533.73,1211.53 1534.32,1211.53 1534.91,1211.53 1535.49,1211.53 1536.08,1211.53 1536.67,1211.53 1537.25,1211.53 1537.84,1211.53 1538.43,1211.53 1539.01,1211.53 1539.6,1211.53 1540.19,1211.53 1540.77,1211.53 1541.36,1211.53 1541.94,1211.53 1542.53,1211.53 1543.12,1211.53 1543.7,1211.53 1544.29,1211.53 1544.88,1211.53 1545.46,1211.53 1546.05,1211.53 1546.64,1211.53 1547.22,1211.53 1547.81,1211.53 1548.4,1211.53 1548.98,1211.53 1549.57,1211.53 1550.15,1211.53 1550.74,1211.53 1551.33,1211.53 1551.91,1211.53 1552.5,1211.53 1553.09,1211.53 1553.67,1211.53 1554.26,1211.53 1554.85,1211.53 1555.43,1211.53 1556.02,1211.53 1556.6,1211.53 1557.19,1211.53 1557.78,1211.53 1558.36,1211.53 1558.95,1211.53 1559.54,1211.53 1560.12,1211.53 1560.71,1211.53 1561.3,1211.53 1561.88,1211.53 1562.47,1211.53 1563.06,1211.53 1563.64,1211.53 1564.23,1211.53 1564.81,1211.53 1565.4,1211.53 1565.99,1211.53 1566.57,1211.53 1567.16,1211.53 1567.75,1211.53 1568.33,1211.53 1568.92,1211.53 1569.51,1211.53 1570.09,1211.53 1570.68,1211.53 1571.27,1211.53 1571.85,1211.53 1572.44,1211.53 1573.02,1211.53 1573.61,1211.53 1574.2,1211.53 1574.78,1211.53 1575.37,1211.53 1575.96,1211.53 1576.54,1211.53 1577.13,1211.53 1577.72,1211.53 1578.3,1211.53 1578.89,1211.53 1579.47,1211.53 1580.06,1211.53 1580.65,1211.53 1581.23,1211.53 1581.82,1211.53 1582.41,1211.53 1582.99,1211.53 1583.58,1211.53 1584.17,1211.53 1584.75,1211.53 1585.34,1211.53 1585.93,1211.53 1586.51,1211.53 1587.1,1211.53 1587.68,1211.53 1588.27,1211.53 1588.86,1211.53 1589.44,1211.53 1590.03,1211.53 1590.62,1211.53 1591.2,1211.53 1591.79,1211.53 1592.38,1211.53 1592.96,1211.53 1593.55,1211.53 1594.14,1211.53 1594.72,1211.53 1595.31,1211.53 1595.89,1211.53 1596.48,1211.53 1597.07,1211.53 1597.65,1211.53 1598.24,1211.53 1598.83,1211.53 1599.41,1211.53 1600,1211.53 1600.59,1211.53 1601.17,1211.53 1601.76,1211.53 1602.34,1211.53 1602.93,1211.53 1603.52,1211.53 1604.1,1211.53 1604.69,1211.53 1605.28,1211.53 1605.86,1211.53 1606.45,1211.53 1607.04,1211.53 1607.62,1211.53 1608.21,1211.53 1608.8,1211.53 1609.38,1211.53 1609.97,1211.53 1610.55,1211.53 1611.14,1211.53 1611.73,1211.53 1612.31,1211.53 1612.9,1211.53 1613.49,1211.53 1614.07,1211.53 1614.66,1211.53 1615.25,1211.53 1615.83,1211.53 1616.42,1211.53 1617.01,1211.53 1617.59,1211.53 1618.18,1211.53 1618.76,1211.53 1619.35,1211.53 1619.94,1211.53 1620.52,1211.53 1621.11,1211.53 1621.7,1211.53 1622.28,1211.53 1622.87,1211.53 1623.46,1211.53 1624.04,1211.53 1624.63,1211.53 1625.22,1211.53 1625.8,1211.53 1626.39,1211.53 1626.97,1211.53 1627.56,1211.53 1628.15,1211.53 1628.73,1211.53 1629.32,1211.53 1629.91,1211.53 1630.49,1211.53 1631.08,1211.53 1631.67,1211.53 1632.25,1211.53 1632.84,1211.53 1633.42,1211.53 1634.01,1211.53 1634.6,1211.53 1635.18,1211.53 1635.77,1211.53 1636.36,1211.53 1636.94,1211.53 1637.53,1211.53 1638.12,1211.53 1638.7,1211.53 1639.29,1211.53 1639.88,1211.53 1640.46,1211.53 1641.05,1211.53 1641.63,1211.53 1642.22,1211.53 1642.81,1211.53 1643.39,1211.53 1643.98,1211.53 1644.57,1211.53 1645.15,1211.53 1645.74,1211.53 1646.33,1211.53 1646.91,1211.53 1647.5,1211.53 1648.09,1211.53 1648.67,1211.53 1649.26,1211.53 1649.84,1211.53 1650.43,1211.53 1651.02,1211.53 1651.6,1211.53 1652.19,1211.53 1652.78,1211.53 1653.36,1211.53 1653.95,1211.53 1654.54,1211.53 1655.12,1211.53 1655.71,1211.53 1656.29,1211.53 1656.88,1211.53 1657.47,1211.53 1658.05,1211.53 1658.64,1211.53 1659.23,1211.53 1659.81,1211.53 1660.4,1211.53 1660.99,1211.53 1661.57,1211.53 1662.16,1211.53 1662.75,1211.53 1663.33,1211.53 1663.92,1211.53 1664.5,1211.53 1665.09,1211.53 1665.68,1211.53 1666.26,1211.53 1666.85,1211.53 1667.44,1211.53 1668.02,1211.53 1668.61,1211.53 1669.2,1211.53 1669.78,1211.53 1670.37,1211.53 1670.96,1211.53 1671.54,1211.53 1672.13,1211.53 1672.71,1211.53 1673.3,1211.53 1673.89,1211.53 1674.47,1211.53 1675.06,1211.53 1675.65,1211.53 1676.23,1211.53 1676.82,1211.53 1677.41,1211.53 1677.99,1211.53 1678.58,1211.53 1679.17,1211.53 1679.75,1211.53 1680.34,1211.53 1680.92,1211.53 1681.51,1211.53 1682.1,1211.53 1682.68,1211.53 1683.27,1211.53 1683.86,1211.53 1684.44,1211.53 1685.03,1211.53 1685.62,1211.53 1686.2,1211.53 1686.79,1211.53 1687.37,1211.53 1687.96,1211.53 1688.55,1211.53 1689.13,1211.53 1689.72,1211.53 1690.31,1211.53 1690.89,1211.53 1691.48,1211.53 1692.07,1211.53 1692.65,1211.53 1693.24,1211.53 1693.83,1211.53 1694.41,1211.53 1695,1211.53 1695.58,1211.53 1696.17,1211.53 1696.76,1211.53 1697.34,1211.53 1697.93,1211.53 1698.52,1211.53 1699.1,1211.53 1699.69,1211.53 1700.28,1211.53 1700.86,1211.53 1701.45,1211.53 1702.04,1211.53 1702.62,1211.53 1703.21,1211.53 1703.79,1211.53 1704.38,1211.53 1704.97,1211.53 1705.55,1211.53 1706.14,1211.53 1706.73,1211.53 1707.31,1211.53 1707.9,1211.53 1708.49,1211.53 1709.07,1211.53 1709.66,1211.53 1710.24,1211.53 1710.83,1211.53 1711.42,1211.53 1712,1211.53 1712.59,1211.53 1713.18,1211.53 1713.76,1211.53 1714.35,1211.53 1714.94,1211.53 1715.52,1211.53 1716.11,1211.53 1716.7,1211.53 1717.28,1211.53 1717.87,1211.53 1718.45,1211.53 1719.04,1211.53 1719.63,1211.53 1720.21,1211.53 1720.8,1211.53 1721.39,1211.53 1721.97,1211.53 1722.56,1211.53 1723.15,1211.53 1723.73,1211.53 1724.32,1211.53 1724.91,1211.53 1725.49,1211.53 1726.08,1211.53 1726.66,1211.53 1727.25,1211.53 1727.84,1211.53 1728.42,1211.53 1729.01,1211.53 1729.6,1211.53 1730.18,1211.53 1730.77,1211.53 1731.36,1211.53 1731.94,1211.53 1732.53,1211.53 1733.11,1211.53 1733.7,1211.53 1734.29,1211.53 1734.87,1211.53 1735.46,1211.53 1736.05,1211.53 1736.63,1211.53 1737.22,1211.53 1737.81,1211.53 1738.39,1211.53 1738.98,1211.53 1739.57,1211.53 1740.15,1211.53 1740.74,1211.53 1741.32,1211.53 1741.91,1211.53 1742.5,1211.53 1743.08,1211.53 1743.67,1211.53 1744.26,1211.53 1744.84,1211.53 1745.43,1211.53 1746.02,1211.53 1746.6,1211.53 1747.19,1211.53 1747.78,1211.53 1748.36,1211.53 1748.95,1211.53 1749.53,1211.53 1750.12,1211.53 1750.71,1211.53 1751.29,1211.53 1751.88,1211.53 1752.47,1211.53 1753.05,1211.53 1753.64,1211.53 1754.23,1211.53 1754.81,1211.53 1755.4,1211.53 1755.99,1211.53 1756.57,1211.53 1757.16,1211.53 1757.74,1211.53 1758.33,1211.53 1758.92,1211.53 1759.5,1211.53 1760.09,1211.53 1760.68,1211.53 1761.26,1211.53 1761.85,1211.53 1762.44,1211.53 1763.02,1211.53 1763.61,1211.53 1764.19,1211.53 1764.78,1211.53 1765.37,1211.53 1765.95,1211.53 1766.54,1211.53 1767.13,1211.53 1767.71,1211.53 1768.3,1211.53 1768.89,1211.53 1769.47,1211.53 1770.06,1211.53 1770.65,1211.53 1771.23,1211.53 1771.82,1211.53 1772.4,1211.53 1772.99,1211.53 1773.58,1211.53 1774.16,1211.53 1774.75,1211.53 1775.34,1211.53 1775.92,1211.53 1776.51,1211.53 1777.1,1211.53 1777.68,1211.53 1778.27,1211.53 1778.86,1211.53 1779.44,1211.53 1780.03,1211.53 1780.61,1211.53 1781.2,1211.53 1781.79,1211.53 1782.37,1211.53 1782.96,1211.53 1783.55,1211.53 1784.13,1211.53 1784.72,1211.53 1785.31,1211.53 1785.89,1211.53 1786.48,1211.53 1787.06,1211.53 1787.65,1211.53 1788.24,1211.53 1788.82,1211.53 1789.41,1211.53 1790,1211.53 1790.58,1211.53 1791.17,1211.53 1791.76,1211.53 1792.34,1211.53 1792.93,1211.53 1793.52,1211.53 1794.1,1211.53 1794.69,1211.53 1795.27,1211.53 1795.86,1211.53 1796.45,1211.53 1797.03,1211.53 1797.62,1211.53 1798.21,1211.53 1798.79,1211.53 1799.38,1211.53 1799.97,1211.53 1800.55,1211.53 1801.14,1211.53 1801.73,1211.53 1802.31,1211.53 1802.9,1211.53 1803.48,1211.53 1804.07,1211.53 1804.66,1211.53 1805.24,1211.53 1805.83,1211.53 1806.42,1211.53 1807,1211.53 1807.59,1211.53 1808.18,1211.53 1808.76,1211.53 1809.35,1211.53 1809.94,1211.53 1810.52,1211.53 1811.11,1211.53 1811.69,1211.53 1812.28,1211.53 1812.87,1211.53 1813.45,1211.53 1814.04,1211.53 1814.63,1211.53 1815.21,1211.53 1815.8,1211.53 1816.39,1211.53 1816.97,1211.53 1817.56,1211.53 1818.14,1211.53 1818.73,1211.53 1819.32,1211.53 1819.9,1211.53 1820.49,1211.53 1821.08,1211.53 1821.66,1211.53 1822.25,1211.53 1822.84,1211.53 1823.42,1211.53 1824.01,1211.53 1824.6,1211.53 1825.18,1211.53 1825.77,1211.53 1826.35,1211.53 1826.94,1211.53 1827.53,1211.53 1828.11,1211.53 1828.7,1211.53 1829.29,1211.53 1829.87,1211.53 1830.46,1211.53 1831.05,1211.53 1831.63,1211.53 1832.22,1211.53 1832.81,1211.53 1833.39,1211.53 1833.98,1211.53 1834.56,1211.53 1835.15,1211.53 1835.74,1211.53 1836.32,1211.53 1836.91,1211.53 1837.5,1211.53 1838.08,1211.53 1838.67,1211.53 1839.26,1211.53 1839.84,1211.53 1840.43,1211.53 1841.01,1211.53 1841.6,1211.53 1842.19,1211.53 1842.77,1211.53 1843.36,1211.53 1843.95,1211.53 1844.53,1211.53 1845.12,1211.53 1845.71,1211.53 1846.29,1211.53 1846.88,1211.53 1847.47,1211.53 1848.05,1211.53 1848.64,1211.53 1849.22,1211.53 1849.81,1211.53 1850.4,1211.53 1850.98,1211.53 1851.57,1211.53 1852.16,1211.53 1852.74,1211.53 1853.33,1211.53 1853.92,1211.53 1854.5,1211.53 1855.09,1211.53 1855.68,1211.53 1856.26,1211.53 1856.85,1211.53 1857.43,1211.53 1858.02,1211.53 1858.61,1211.53 1859.19,1211.53 1859.78,1211.53 1860.37,1211.53 1860.95,1211.53 1861.54,1211.53 1862.13,1211.53 1862.71,1211.53 1863.3,1211.53 1863.88,1211.53 1864.47,1211.53 1865.06,1211.53 1865.64,1211.53 1866.23,1211.53 1866.82,1211.53 1867.4,1211.53 1867.99,1211.53 1868.58,1211.53 1869.16,1211.53 1869.75,1211.53 1870.34,1211.53 1870.92,1211.53 1871.51,1211.53 1872.09,1211.53 1872.68,1211.53 1873.27,1211.53 1873.85,1211.53 1874.44,1211.53 1875.03,1211.53 1875.61,1211.53 1876.2,1211.53 1876.79,1211.53 1877.37,1211.53 1877.96,1211.53 1878.55,1211.53 1879.13,1211.53 1879.72,1211.53 1880.3,1211.53 1880.89,1211.53 1881.48,1211.53 1882.06,1211.53 1882.65,1211.53 1883.24,1211.53 1883.82,1211.53 1884.41,1211.53 1885,1211.53 1885.58,1211.53 1886.17,1211.53 1886.76,1211.53 1887.34,1211.53 1887.93,1211.53 1888.51,1211.53 1889.1,1211.53 1889.69,1211.53 1890.27,1211.53 1890.86,1211.53 1891.45,1211.53 1892.03,1211.53 1892.62,1211.53 1893.21,1211.53 1893.79,1211.53 1894.38,1211.53 1894.96,1211.53 1895.55,1211.53 1896.14,1211.53 1896.72,1211.53 1897.31,1211.53 1897.9,1211.53 1898.48,1211.53 1899.07,1211.53 1899.66,1211.53 1900.24,1211.53 1900.83,1211.53 1901.42,1211.53 1902,1211.53 1902.59,1211.53 1903.17,1211.53 1903.76,1211.53 1904.35,1211.53 1904.93,1211.53 1905.52,1211.53 1906.11,1211.53 1906.69,1211.53 1907.28,1211.53 1907.87,1211.53 1908.45,1211.53 1909.04,1211.53 1909.63,1211.53 1910.21,1211.53 1910.8,1211.53 1911.38,1211.53 1911.97,1211.53 1912.56,1211.53 1913.14,1211.53 1913.73,1211.53 1914.32,1211.53 1914.9,1211.53 1915.49,1211.53 1916.08,1211.53 1916.66,1211.53 1917.25,1211.53 1917.83,1211.53 1918.42,1211.53 1919.01,1211.53 1919.59,1211.53 1920.18,1211.53 1920.77,1211.53 1921.35,1211.53 1921.94,1211.53 1922.53,1211.53 1923.11,1211.53 1923.7,1211.53 1924.29,1211.53 1924.87,1211.53 1925.46,1211.53 1926.04,1211.53 1926.63,1211.53 1927.22,1211.53 1927.8,1211.53 1928.39,1211.53 1928.98,1211.53 1929.56,1211.53 1930.15,1211.53 1930.74,1211.53 1931.32,1211.53 1931.91,1211.53 1932.5,1211.53 1933.08,1211.53 1933.67,1211.53 1934.25,1211.53 1934.84,1211.53 1935.43,1211.53 1936.01,1211.53 1936.6,1211.53 1937.19,1211.53 1937.77,1211.53 1938.36,1211.53 1938.95,1211.53 1939.53,1211.53 1940.12,1211.53 1940.71,1211.53 1941.29,1211.53 1941.88,1211.53 1942.46,1211.53 1943.05,1211.53 1943.64,1211.53 1944.22,1211.53 1944.81,1211.53 1945.4,1211.53 1945.98,1211.53 1946.57,1211.53 1947.16,1211.53 1947.74,1211.53 1948.33,1211.53 1948.91,1211.53 1949.5,1211.53 1950.09,1211.53 1950.67,1211.53 1951.26,1211.53 1951.85,1211.53 1952.43,1211.53 1953.02,1211.53 1953.61,1211.53 1954.19,1211.53 1954.78,1211.53 1955.37,1211.53 1955.95,1211.53 1956.54,1211.53 1957.12,1211.53 1957.71,1211.53 1958.3,1211.53 1958.88,1211.53 1959.47,1211.53 1960.06,1211.53 1960.64,1211.53 1961.23,1211.53 1961.82,1211.53 1962.4,1211.53 1962.99,1211.53 1963.58,1211.53 1964.16,1211.53 1964.75,1211.53 1965.33,1211.53 1965.92,1211.53 1966.51,1211.53 1967.09,1211.53 1967.68,1211.53 1968.27,1211.53 1968.85,1211.53 1969.44,1211.53 1970.03,1211.53 1970.61,1211.53 1971.2,1211.53 1971.78,1211.53 1972.37,1211.53 1972.96,1211.53 1973.54,1211.53 1974.13,1211.53 1974.72,1211.53 1975.3,1211.53 1975.89,1211.53 1976.48,1211.53 1977.06,1211.53 1977.65,1211.53 1978.24,1211.53 1978.82,1211.53 1979.41,1211.53 1979.99,1211.53 1980.58,1211.53 1981.17,1211.53 1981.75,1211.53 1982.34,1211.53 1982.93,1211.53 1983.51,1211.53 1984.1,1211.53 1984.69,1211.53 1985.27,1211.53 1985.86,1211.53 1986.45,1211.53 1987.03,1211.53 1987.62,1211.53 1988.2,1211.53 1988.79,1211.53 1989.38,1211.53 1989.96,1211.53 1990.55,1211.53 1991.14,1211.53 1991.72,1211.53 1992.31,1211.53 1992.9,1211.53 1993.48,1211.53 1994.07,1211.53 1994.65,1211.53 1995.24,1211.53 1995.83,1211.53 1996.41,1211.53 1997,1211.53 1997.59,1211.53 1998.17,1211.53 1998.76,1211.53 1999.35,1211.53 1999.93,1211.53 2000.52,1211.53 2001.11,1211.53 2001.69,1211.53 2002.28,1211.53 2002.86,1211.53 2003.45,1211.53 2004.04,1211.53 2004.62,1211.53 2005.21,1211.53 2005.8,1211.53 2006.38,1211.53 2006.97,1211.53 2007.56,1211.53 2008.14,1211.53 2008.73,1211.53 2009.32,1211.53 2009.9,1211.53 2010.49,1211.53 2011.07,1211.53 2011.66,1211.53 2012.25,1211.53 2012.83,1211.53 2013.42,1211.53 2014.01,1211.53 2014.59,1211.53 2015.18,1211.53 2015.77,1211.53 2016.35,1211.53 2016.94,1211.53 2017.53,1211.53 2018.11,1211.53 2018.7,1211.53 2019.28,1211.53 2019.87,1211.53 2020.46,1211.53 2021.04,1211.53 2021.63,1211.53 2022.22,1211.53 2022.8,1211.53 2023.39,1211.53 2023.98,1211.53 2024.56,1211.53 2025.15,1211.53 2025.73,1211.53 2026.32,1211.53 2026.91,1211.53 2027.49,1211.53 2028.08,1211.53 2028.67,1211.53 2029.25,1211.53 2029.84,1211.53 2030.43,1211.53 2031.01,1211.53 2031.6,1211.53 2032.19,1211.53 2032.77,1211.53 2033.36,1211.53 2033.94,1211.53 2034.53,1211.53 2035.12,1211.53 2035.7,1211.53 2036.29,1211.53 2036.88,1211.53 2037.46,1211.53 2038.05,1211.53 2038.64,1211.53 2039.22,1211.53 2039.81,1211.53 2040.4,1211.53 2040.98,1211.53 2041.57,1211.53 2042.15,1211.53 2042.74,1211.53 2043.33,1211.53 2043.91,1211.53 2044.5,1211.53 2045.09,1211.53 2045.67,1211.53 2046.26,1211.53 2046.85,1211.53 2047.43,1211.53 2048.02,1211.53 2048.6,1211.53 2049.19,1211.53 2049.78,1211.53 2050.36,1211.53 2050.95,1211.53 2051.54,1211.53 2052.12,1211.53 2052.71,1211.53 2053.3,1211.53 2053.88,1211.53 2054.47,1211.53 2055.06,1211.53 2055.64,1211.53 2056.23,1211.53 2056.81,1211.53 2057.4,1211.53 2057.99,1211.53 2058.57,1211.53 2059.16,1211.53 2059.75,1211.53 2060.33,1211.53 2060.92,1211.53 2061.51,1211.53 2062.09,1211.53 2062.68,1211.53 2063.27,1211.53 2063.85,1211.53 2064.44,1211.53 2065.02,1211.53 2065.61,1211.53 2066.2,1211.53 2066.78,1211.53 2067.37,1211.53 2067.96,1211.53 2068.54,1211.53 2069.13,1211.53 2069.72,1211.53 2070.3,1211.53 2070.89,1211.53 2071.48,1211.53 2072.06,1211.53 2072.65,1211.53 2073.23,1211.53 2073.82,1211.53 2074.41,1211.53 2074.99,1211.53 2075.58,1211.53 2076.17,1211.53 2076.75,1211.53 2077.34,1211.53 2077.93,1211.53 2078.51,1211.53 2079.1,1211.53 2079.68,1211.53 2080.27,1211.53 2080.86,1211.53 2081.44,1211.53 2082.03,1211.53 2082.62,1211.53 2083.2,1211.53 2083.79,1211.53 2084.38,1211.53 2084.96,1211.53 2085.55,1211.53 2086.14,1211.53 2086.72,1211.53 2087.31,1211.53 2087.89,1211.53 2088.48,1211.53 2089.07,1211.53 2089.65,1211.53 2090.24,1211.53 2090.83,1211.53 2091.41,1211.53 2092,1211.53 2092.59,1211.53 2093.17,1211.53 2093.76,1211.53 2094.35,1211.53 2094.93,1211.53 2095.52,1211.53 2096.1,1211.53 2096.69,1211.53 2097.28,1211.53 2097.86,1211.53 2098.45,1211.53 2099.04,1211.53 2099.62,1211.53 2100.21,1211.53 2100.8,1211.53 2101.38,1211.53 2101.97,1211.53 2102.55,1211.53 2103.14,1211.53 2103.73,1211.53 2104.31,1211.53 2104.9,1211.53 2105.49,1211.53 2106.07,1211.53 2106.66,1211.53 2107.25,1211.53 2107.83,1211.53 2108.42,1211.53 2109.01,1211.53 2109.59,1211.53 2110.18,1211.53 2110.76,1211.53 2111.35,1211.53 2111.94,1211.53 2112.52,1211.53 2113.11,1211.53 2113.7,1211.53 2114.28,1211.53 2114.87,1211.53 2115.46,1211.53 2116.04,1211.53 2116.63,1211.53 2117.22,1211.53 2117.8,1211.53 2118.39,1211.53 2118.97,1211.53 2119.56,1211.53 2120.15,1211.53 2120.73,1211.53 2121.32,1211.53 2121.91,1211.53 2122.49,1211.53 2123.08,1211.53 2123.67,1211.53 2124.25,1211.53 2124.84,1211.53 2125.42,1211.53 2126.01,1211.53 2126.6,1211.53 2127.18,1211.53 2127.77,1211.53 2128.36,1211.53 2128.94,1211.53 2129.53,1211.53 2130.12,1211.53 2130.7,1211.53 2131.29,1211.53 2131.88,1211.53 2132.46,1211.53 2133.05,1211.53 2133.63,1211.53 2134.22,1211.53 2134.81,1211.53 2135.39,1211.53 2135.98,1211.53 2136.57,1211.53 2137.15,1211.53 2137.74,1211.53 2138.33,1211.53 2138.91,1211.53 2139.5,1211.53 2140.09,1211.53 2140.67,1211.53 2141.26,1211.53 2141.84,1211.53 2142.43,1211.53 2143.02,1211.53 2143.6,1211.53 2144.19,1211.53 2144.78,1211.53 2145.36,1211.53 2145.95,1211.53 2146.54,1211.53 2147.12,1211.53 2147.71,1211.53 2148.3,1211.53 2148.88,1211.53 2149.47,1211.53 2150.05,1211.53 2150.64,1211.53 2151.23,1211.53 2151.81,1211.53 2152.4,1211.53 2152.99,1211.53 2153.57,1211.53 2154.16,1211.53 2154.75,1211.53 2155.33,1211.53 2155.92,1211.53 2156.5,1211.53 2157.09,1211.53 2157.68,1211.53 2158.26,1211.53 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.33,1195.82 1399.54,899.083 \"/>\n<polyline clip-path=\"url(#clip872)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.7 985.439,1195.82 2158.26,1195.82 2158.26,1226.7 985.439,1226.7 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip870)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip873\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip870)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip870)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip870)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip873)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-11603.1 169.384,-11951.7 169.943,-12255.4 170.503,-12517.1 171.062,-12739.7 171.621,-12925.8 172.18,-13077.9 172.74,-13198.3 173.299,-13289.1 173.858,-13352.6 174.417,-12917.3 174.977,-12935.2 175.536,-12533.5 176.095,-12523.3 176.655,-12494.1 177.214,-12115.5 177.773,-12055.8 178.332,-11693.3 178.892,-11606.6 179.451,-11257.6 180.01,-11143.5 180.569,-10807.8 181.129,-10672.9 181.688,-10151.3 182.247,-10007.9 182.806,-9859.81 183.366,-9710.02 183.925,-9409.19 184.484,-9115.52 185.043,-8955.58 185.603,-8792.37 186.162,-8275.78 186.721,-8015.79 187.28,-7858.78 187.84,-7705.78 188.399,-7351.59 188.958,-7183.98 189.517,-7024.68 190.077,-6780.55 190.636,-6625.58 191.195,-6319.74 191.754,-6163.04 192.314,-5998.31 192.873,-5644.91 193.432,-5443.99 193.991,-5301.82 194.551,-5104.94 195.11,-4909.09 195.669,-4671.66 196.228,-4393.49 196.788,-4178.12 197.347,-4028.49 197.906,-3882.84 198.465,-3643.17 199.025,-3503.76 199.584,-3367.17 200.143,-3155.07 200.702,-3072.06 201.262,-2871.77 201.821,-2797 202.38,-2681.23 202.939,-2527.67 203.499,-2461.88 204.058,-2285.18 204.617,-2218.92 205.176,-2085.51 205.736,-2022.21 206.295,-1895.17 206.854,-1806.2 207.413,-1654.48 207.973,-1416.88 208.532,-1373.28 209.091,-1303.02 209.65,-1229.55 210.21,-1185.78 210.769,-1144.15 211.328,-1101.91 211.887,-974.098 212.447,-856.907 213.006,-793.536 213.565,-759.74 214.124,-719.468 214.684,-608.858 215.243,-477.308 215.802,-424.729 216.361,-302.744 216.921,-209.598 217.48,-164.466 218.039,-96.8276 218.598,-61.0736 219.158,-17.9604 219.717,-24.2951 220.276,34.7159 220.835,29.4095 221.395,46.8437 221.954,62.5806 222.513,102.39 223.072,138.786 223.632,154.333 224.191,172.698 224.75,190.624 225.309,229.713 225.869,269.424 226.428,282.81 226.987,359.434 227.546,371.639 228.106,426.961 228.665,438.789 229.224,494.497 229.783,525.266 230.343,552.036 230.902,579.439 231.461,664.589 232.02,664.693 232.58,669.837 233.139,710.202 233.698,708.402 234.257,711.571 234.817,691.36 235.376,752.964 235.935,754.93 236.494,852.468 237.054,848.216 237.613,864.752 238.172,843.357 238.731,895.455 239.291,890.018 239.85,907.701 240.409,928.222 240.968,943.081 241.528,920.592 242.087,901.12 242.646,919.515 243.205,913.31 243.765,928.153 244.324,978.542 244.883,993.302 245.442,973.907 246.002,970.122 246.561,986.488 247.12,986.047 247.679,1000.26 248.239,979.426 248.798,980.074 249.357,978.529 249.916,976.01 250.476,973.488 251.035,957.837 251.594,977.207 252.153,1029.94 252.713,1025.92 253.272,1023.28 253.831,1074.84 254.39,1102.83 254.95,1129.16 255.509,1119.2 256.068,1145.64 256.627,1155.74 257.187,1163.2 257.746,1151.97 258.305,1145.06 258.864,1133.22 259.424,1140.19 259.983,1165.88 260.542,1176.15 261.101,1165.13 261.661,1155.02 262.22,1144.55 262.779,1166.57 263.338,1155.2 263.898,1147.06 264.457,1141.06 265.016,1151.04 265.575,1156.76 266.135,1166.37 266.694,1207.97 267.253,1180.63 267.812,1188.1 268.372,1210.88 268.931,1214.44 269.49,1216.48 270.049,1198.44 270.609,1189.71 271.168,1177.17 271.727,1185.7 272.286,1205.85 272.846,1195.34 273.405,1198.24 273.964,1218.97 274.523,1207.8 275.083,1211.21 275.642,1216.18 276.201,1236.45 276.76,1236.07 277.32,1222.25 277.879,1190.11 278.438,1195.13 278.997,1216.81 279.557,1218.58 280.116,1187.63 280.675,1175.58 281.234,1177.6 281.794,1199.33 282.353,1185.72 282.912,1206.59 283.471,1228.31 284.031,1228.42 284.59,1216.44 285.149,1218.29 285.708,1188.76 286.268,1174.88 286.827,1147.66 287.386,1137.73 287.945,1109.55 288.505,1100.21 289.064,1075.47 289.623,1082.23 290.182,1058.89 290.742,1053.65 291.301,1083.91 291.86,1076.27 292.419,1051.82 292.979,1062.75 293.538,1091.11 294.097,1083.3 294.656,1091.3 295.216,1081.5 295.775,1075.02 296.334,1101.64 296.893,1106.77 297.453,1094.02 298.012,1088.06 298.571,1049.36 299.13,1058.31 299.69,1034.61 300.249,1046.23 300.808,1055.63 301.368,1029.08 301.927,1036.6 302.486,998.484 303.045,1024.3 303.605,1034.2 304.164,1060.91 304.723,1066 305.282,1040.35 305.842,982.975 306.401,1009.6 306.96,988.404 307.519,950.342 308.079,947.282 308.638,961.418 309.197,959.557 309.756,989.583 310.316,985.434 310.875,998.926 311.434,1016.62 311.993,1027.66 312.553,1018.94 313.112,1015.01 313.671,1023.73 314.23,1016.08 314.79,1024.6 315.349,983.248 315.908,948.678 316.467,962.82 317.027,972.249 317.586,936.966 318.145,940.512 318.704,940.077 319.264,940.551 319.823,972.161 320.382,986.024 320.941,984.928 321.501,981.395 322.06,946.001 322.619,974.908 323.178,969.97 323.738,996.191 324.297,1006.7 324.856,1000.94 325.415,1009.41 325.975,1002.89 326.534,981.176 327.093,960.788 327.652,958.511 328.212,985.919 328.771,981.75 329.33,978.181 329.889,971.336 330.449,1002.49 331.008,976.86 331.567,988.551 332.126,998.934 332.686,992.259 333.245,985.656 333.804,1009.38 334.363,1002.26 334.923,996.419 335.482,1007.03 336.041,1000.82 336.6,1014.75 337.16,973.679 337.719,936.351 338.278,916.023 338.837,896.782 339.397,895.913 339.956,940.821 340.515,929.849 341.074,938.693 341.634,936.466 342.193,916.948 342.752,944.514 343.311,954.068 343.871,964.642 344.43,992.951 344.989,1031.89 345.548,1038.19 346.108,1032.1 346.667,973.951 347.226,984.638 347.785,994.242 348.345,985.293 348.904,944.945 349.463,922.658 350.022,919.72 350.582,934.713 351.141,929.556 351.7,959.012 352.259,935.443 352.819,964.537 353.378,963.089 353.937,924.972 354.496,953.875 355.056,933.189 355.615,915.127 356.174,911.499 356.733,875.642 357.293,840.79 357.852,807.526 358.411,744.199 358.97,748.998 359.53,805.339 360.089,829.035 360.648,783.467 361.207,783.826 361.767,818.957 362.326,787.213 362.885,808.345 363.444,810.57 364.004,807.808 364.563,822.262 365.122,809.581 365.681,812.712 366.241,843.117 366.8,842.083 367.359,873.277 367.918,860.138 368.478,841.068 369.037,821.653 369.596,803.799 370.155,832.713 370.715,844.265 371.274,893.883 371.833,889.256 372.392,915.774 372.952,878.809 373.511,893.702 374.07,888.348 374.629,869.785 375.189,899.866 375.748,927.229 376.307,915.865 376.866,878.555 377.426,875.57 377.985,873.893 378.544,888.249 379.103,916.728 379.663,910.818 380.222,919.826 380.781,913.285 381.34,892.013 381.9,870.045 382.459,900.541 383.018,912.722 383.577,907.523 384.137,871.149 384.696,854.392 385.255,851.649 385.814,846.59 386.374,839.429 386.933,833.294 387.492,847.609 388.051,878.387 388.611,890.524 389.17,838.204 389.729,833.842 390.288,877.761 390.848,901.235 391.407,909.552 391.966,920.801 392.525,931.857 393.085,892.129 393.644,918.455 394.203,925.842 394.762,934.844 395.322,926.184 395.881,903.217 396.44,878.173 396.999,903.885 397.559,868.19 398.118,864.288 398.677,847.062 399.236,860.178 399.796,838.309 400.355,854.406 400.914,852.967 401.473,833.161 402.033,848.514 402.592,810.527 403.151,842.722 403.71,834.986 404.27,827.553 404.829,857.315 405.388,822.221 405.947,823.895 406.507,836.861 407.066,835.068 407.625,848.008 408.184,858.313 408.744,852.664 409.303,866.566 409.862,858.587 410.421,853.455 410.981,851.527 411.54,933.22 412.099,959.808 412.658,963.183 413.218,889.273 413.777,869.088 414.336,848.188 414.895,860.888 415.455,823.383 416.014,822.947 416.573,822.12 417.132,769.963 417.692,772.804 418.251,786.962 418.81,801.045 419.369,799.095 419.929,782.812 420.488,817.377 421.047,819.111 421.606,818.47 422.166,814.844 422.725,793.927 423.284,826.097 423.843,808.17 424.403,805.923 424.962,769.561 425.521,769.717 426.08,756.362 426.64,775.367 427.199,758.454 427.758,759.111 428.318,793.939 428.877,795.823 429.436,831.063 429.995,814.42 430.555,822.497 431.114,836.429 431.673,833.161 432.232,843.601 432.792,837.692 433.351,814.116 433.91,799.393 434.469,813.672 435.029,776.938 435.588,776.036 436.147,774.251 436.706,775.228 437.266,772.788 437.825,772.62 438.384,802.154 438.943,798.497 439.503,780.409 440.062,731.167 440.621,718.217 441.18,689.562 441.74,678.362 442.299,685.298 442.858,737.189 443.417,737.656 443.977,737.305 444.536,737.163 445.095,703.458 445.654,690.355 446.214,662.952 446.773,700.586 447.332,686.823 447.891,676.6 448.451,711.888 449.01,711.531 449.569,744.747 450.128,811.89 450.688,823.763 451.247,789.185 451.806,806.962 452.365,821.539 452.925,835.309 453.484,817.464 454.043,815.963 454.602,811.647 455.162,824.677 455.721,834.797 456.28,848.535 456.839,875.375 457.399,885.317 457.958,876.214 458.517,850.792 459.076,844.154 459.636,854.452 460.195,867.69 460.754,878.206 461.313,870.193 461.873,876.093 462.432,870.497 462.991,863.905 463.55,875.025 464.11,872.553 464.669,879.096 465.228,872.648 465.787,894.333 466.347,872.547 466.906,867.441 467.465,828.201 468.024,855.515 468.584,831.581 469.143,824.218 469.702,818.868 470.261,811.724 470.821,810.399 471.38,793.487 471.939,809.761 472.498,809.271 473.058,836.815 473.617,828.681 474.176,807.964 474.735,786.591 475.295,816.51 475.854,861.316 476.413,870.509 476.972,879.374 477.532,859.708 478.091,884.684 478.65,896.877 479.209,874.314 479.769,847.86 480.328,855.979 480.887,834.961 481.446,845.101 482.006,838.948 482.565,754.256 483.124,722.916 483.683,689.846 484.243,722.971 484.802,737.084 485.361,751.909 485.92,751.03 486.48,721.826 487.039,739.059 487.598,702.503 488.157,701.35 488.717,703.556 489.276,737.014 489.835,748.95 490.394,746.994 490.954,777.666 491.513,740.694 492.072,755.848 492.631,767.689 493.191,700.357 493.75,682.553 494.309,687.186 494.868,688.936 495.428,690.73 495.987,644.251 496.546,632.708 497.105,602.64 497.665,626.406 498.224,599.398 498.783,603.46 499.342,612.5 499.902,637.136 500.461,640.237 501.02,646.443 501.579,681.794 502.139,672.105 502.698,661.771 503.257,631.761 503.816,636.708 504.376,642.917 504.935,652.836 505.494,576.699 506.053,615.927 506.613,621.557 507.172,629.251 507.731,634.774 508.29,658.783 508.85,645.241 509.409,652.136 509.968,641.226 510.527,645.302 511.087,684.416 511.646,668.471 512.205,690.919 512.764,693.042 513.324,691.97 513.883,696.359 514.442,713.858 515.001,732.194 515.561,734.665 516.12,747.597 516.679,765.781 517.238,798.16 517.798,757.872 518.357,770.829 518.916,749.11 519.475,766.195 520.035,763.652 520.594,746.978 521.153,779.37 521.712,792.471 522.272,787.641 522.831,801.51 523.39,782.141 523.949,762.447 524.509,714.736 525.068,731.738 525.627,747.658 526.186,763.697 526.746,762.638 527.305,792.874 527.864,803.136 528.423,767.025 528.983,770.034 529.542,782.989 530.101,811.394 530.66,852.303 531.22,830.483 531.779,823.753 532.338,833.648 532.897,828.998 533.457,824.122 534.016,818.161 534.575,816.374 535.134,845.623 535.694,789.842 536.253,787.344 536.812,750.445 537.371,705.019 537.931,688.512 538.49,687.804 539.049,689.603 539.608,674.016 540.168,674.572 540.727,656.92 541.286,661.082 541.845,698.346 542.405,696.554 542.964,712.888 543.523,678.642 544.082,697.056 544.642,700.245 545.201,719.806 545.76,707.777 546.319,740.552 546.879,753.814 547.438,750.029 547.997,746.907 548.556,730.427 549.116,733.426 549.675,716.109 550.234,766.011 550.793,778.388 551.353,742.075 551.912,729.497 552.471,731.278 553.031,747.405 553.59,726.823 554.149,721.652 554.708,693.185 555.268,729.276 555.827,732.09 556.386,732.517 556.945,762.343 557.505,759.275 558.064,788.435 558.623,817.43 559.182,860.738 559.742,851.811 560.301,826.138 560.86,853.75 561.419,832.612 561.979,809.456 562.538,820.826 563.097,817.028 563.656,777.758 564.216,794.262 564.775,777.137 565.334,745.584 565.893,727.83 566.453,725.742 567.012,785.982 567.571,746.926 568.13,763.864 568.69,792.386 569.249,786.653 569.808,782.655 570.367,761.819 570.927,727.68 571.486,679.541 572.045,679.873 572.604,681.856 573.164,699.737 573.723,671.425 574.282,658.642 574.841,643.857 575.401,666.554 575.96,686.892 576.519,685.918 577.078,686.134 577.638,686.483 578.197,704.988 578.756,705.189 579.315,706.34 579.875,673.1 580.434,675.643 580.993,707.881 581.552,677.775 582.112,680.325 582.671,696.753 583.23,696.752 583.789,696.868 584.349,748.68 584.908,747.577 585.467,760.47 586.026,788.957 586.586,801.702 587.145,781.861 587.704,808.882 588.263,785.799 588.823,780.152 589.382,774.602 589.941,725.369 590.5,706.608 591.06,704.768 591.619,720.646 592.178,734.477 592.737,750.179 593.297,784.069 593.856,783.38 594.415,717.25 594.974,712.376 595.534,711.355 596.093,738.995 596.652,735.847 597.211,736.044 597.771,737.082 598.33,699.985 598.889,715.085 599.448,733.541 600.008,732.982 600.567,747.898 601.126,762.02 601.685,743.048 602.245,740.886 602.804,753.137 603.363,721.753 603.922,753.944 604.482,781.565 605.041,793.336 605.6,788.321 606.159,802.839 606.719,799.198 607.278,774.566 607.837,741.427 608.396,691.448 608.956,642.838 609.515,648.676 610.074,666.805 610.633,703.218 611.193,701.524 611.752,717.785 612.311,702.676 612.87,669.698 613.43,687.331 613.989,702.29 614.548,734.782 615.107,717.174 615.667,721.509 616.226,755.251 616.785,770.623 617.344,772.271 617.904,769.409 618.463,767.795 619.022,763.839 619.581,774.888 620.141,801.525 620.7,762.398 621.259,774.257 621.818,755.881 622.378,736.493 622.937,701.541 623.496,702.898 624.055,671.935 624.615,674.803 625.174,642.398 625.733,645.7 626.292,662.65 626.852,613.728 627.411,622.227 627.97,643.29 628.529,646.094 629.089,582.737 629.648,573.807 630.207,594.646 630.766,583.41 631.326,605.933 631.885,645.464 632.444,647.019 633.003,632.047 633.563,620.797 634.122,643.932 634.681,647.817 635.24,650.345 635.8,617.215 636.359,619.172 636.918,589.683 637.477,560.493 638.037,536.096 638.596,546.319 639.155,518.556 639.714,547.707 640.274,538.221 640.833,546.59 641.392,586.366 641.951,573.502 642.511,615.339 643.07,583.872 643.629,589.366 644.188,577.245 644.748,601.531 645.307,607.857 645.866,645.666 646.425,650.524 646.985,653.11 647.544,656.394 648.103,690.544 648.662,675.143 649.222,689.396 649.781,701.52 650.34,699.682 650.899,700.226 651.459,683.24 652.018,654.579 652.577,639.588 653.136,643.259 653.696,698.08 654.255,717.023 654.814,715.368 655.373,699.474 655.933,749.955 656.492,767.152 657.051,767.593 657.61,779.488 658.17,774.615 658.729,737.893 659.288,719.047 659.847,716.874 660.407,701.821 660.966,716.489 661.525,748.953 662.084,746.435 662.644,775.023 663.203,785.763 663.762,778.943 664.321,788.668 664.881,771.39 665.44,768.857 665.999,735.103 666.558,733.054 667.118,717.456 667.677,714.479 668.236,729.719 668.795,729.468 669.355,746.267 669.914,696.926 670.473,695.83 671.032,682.246 671.592,728.523 672.151,744.755 672.71,708.813 673.269,711.146 673.829,726.004 674.388,724.293 674.947,692.454 675.506,691.703 676.066,706.202 676.625,675.84 677.184,678.498 677.743,663.881 678.303,667.071 678.862,666.539 679.421,685.129 679.981,686.539 680.54,736.999 681.099,733.342 681.658,731.319 682.218,727.104 682.777,775.921 683.336,771.352 683.895,756 684.455,770.698 685.014,813.782 685.573,805.605 686.132,817.341 686.692,794.156 687.251,771.925 687.81,750.955 688.369,745.071 688.929,741.097 689.488,757.11 690.047,736.56 690.606,700.136 691.166,764.934 691.725,760.325 692.284,741.87 692.843,722.583 693.403,708.101 693.962,724.126 694.521,704.366 695.08,781.927 695.64,774.803 696.199,769.485 696.758,777.963 697.317,773.333 697.877,785.507 698.436,760.36 698.995,773.256 699.554,750.982 700.114,731.811 700.673,712.03 701.232,692.834 701.791,695.444 702.351,692.16 702.91,659.556 703.469,646.553 704.028,618.335 704.588,621.769 705.147,598.748 705.706,619.003 706.265,623.012 706.825,625.447 707.384,607.537 707.943,591.312 708.502,613.671 709.062,618.351 709.621,640.085 710.18,626.538 710.739,628.339 711.299,663.181 711.858,648.919 712.417,648.926 712.976,650.048 713.536,633.834 714.095,639.047 714.654,624.579 715.213,625.66 715.773,629.449 716.332,648.51 716.891,651.915 717.45,656.22 718.01,657.346 718.569,675.947 719.128,677.628 719.687,650.103 720.247,672.257 720.806,688.117 721.365,706.631 721.924,673.037 722.484,659.637 723.043,679.021 723.602,683.327 724.161,698.216 724.721,693.687 725.28,708.512 725.839,694.159 726.398,679.699 726.958,680.903 727.517,713.45 728.076,729.781 728.635,730.351 729.195,708.758 729.754,724.953 730.313,707.568 730.872,723.525 731.432,752.595 731.991,733.529 732.55,730.741 733.109,727.398 733.669,724.506 734.228,705.308 734.787,692.823 735.346,694.228 735.906,712.247 736.465,695.712 737.024,694.098 737.583,726.439 738.143,724.286 738.702,739.305 739.261,739.576 739.82,720.411 740.38,734.279 740.939,714.136 741.498,729.961 742.057,730.269 742.617,730.43 743.176,746.567 743.735,726.828 744.294,724.282 744.854,685.247 745.413,669.271 745.972,671.301 746.531,638.13 747.091,640.527 747.65,647.306 748.209,668.004 748.768,686.611 749.328,667.177 749.887,669.04 750.446,670.807 751.005,673.928 751.565,673.383 752.124,673.485 752.683,658.294 753.242,676.348 753.802,658.409 754.361,641.662 754.92,666.251 755.479,668.452 756.039,704.385 756.598,690.004 757.157,694.504 757.716,678.63 758.276,710.562 758.835,695.158 759.394,679.141 759.953,676.347 760.513,673.757 761.072,688.589 761.631,675.33 762.19,689.334 762.75,693.323 763.309,674.87 763.868,690.213 764.427,704.801 764.987,719.32 765.546,764.039 766.105,725.373 766.664,738.982 767.224,703.758 767.783,703.064 768.342,732.771 768.901,713.539 769.461,727.17 770.02,762.477 770.579,758.249 771.138,753.579 771.698,702.426 772.257,752.833 772.816,781.941 773.375,778.026 773.935,805.24 774.494,800.353 775.053,781.023 775.612,810.34 776.172,821.402 776.731,814.325 777.29,809.596 777.849,752.793 778.409,732.363 778.968,746.605 779.527,759.966 780.086,737.418 780.646,701.193 781.205,686.101 781.764,689.341 782.323,702.973 782.883,686.979 783.442,717.642 784.001,700.537 784.56,731.43 785.12,764.342 785.679,762.903 786.238,758.537 786.797,737.552 787.357,685.396 787.916,654.776 788.475,658.027 789.034,639.822 789.594,644.33 790.153,692.211 790.712,723.359 791.271,739.342 791.831,721.819 792.39,723.468 792.949,671.725 793.508,659.548 794.068,680.033 794.627,667.487 795.186,602.032 795.745,636.346 796.305,641.274 796.864,625.032 797.423,610.791 797.982,632.724 798.542,652.694 799.101,655.085 799.66,676.576 800.219,677.022 800.779,711.083 801.338,693.815 801.897,695.951 802.456,760.699 803.016,777.071 803.575,786.991 804.134,813.364 804.693,807.024 805.253,798.073 805.812,742.707 806.371,737.731 806.931,718.778 807.49,728.388 808.049,712.58 808.608,675.676 809.168,656.791 809.727,642.279 810.286,644.821 810.845,663.663 811.405,680.92 811.964,715.774 812.523,684.254 813.082,669.542 813.642,682.463 814.201,717.865 814.76,751.292 815.319,762.536 815.879,740.702 816.438,720.594 816.997,670.839 817.556,675.183 818.116,707.477 818.675,723.572 819.234,722.1 819.793,704.19 820.353,686.859 820.912,687.8 821.471,669.955 822.03,656.209 822.59,643.563 823.149,644.665 823.708,645.442 824.267,650.83 824.827,668.999 825.386,639.313 825.945,674.189 826.504,677.996 827.064,676.042 827.623,674.972 828.182,677.142 828.741,662.958 829.301,679.663 829.86,694.024 830.419,678.596 830.978,713.862 831.538,713.592 832.097,732.316 832.656,716.845 833.215,729.902 833.775,664.763 834.334,680.426 834.893,711.762 835.452,696.703 836.012,697.675 836.571,698.538 837.13,729.484 837.689,678.848 838.249,665.566 838.808,669.623 839.367,672.104 839.926,675.201 840.486,675.831 841.045,643.317 841.604,648.755 842.163,666.022 842.723,698.19 843.282,714.433 843.841,694.401 844.4,698.095 844.96,702.109 845.519,688.685 846.078,688.239 846.637,687.873 847.197,686.34 847.756,689.303 848.315,670.53 848.874,675.183 849.434,695.159 849.993,700.393 850.552,731.79 851.111,715.282 851.671,728.75 852.23,739.502 852.789,703.481 853.348,720.454 853.908,732.516 854.467,731.387 855.026,715.4 855.585,686.213 856.145,702.093 856.704,719.899 857.263,719.214 857.822,734.496 858.382,717.041 858.941,716.316 859.5,653.546 860.059,634.894 860.619,669.18 861.178,671.776 861.737,688.665 862.296,689.951 862.856,670.841 863.415,719.621 863.974,720.522 864.533,703.461 865.093,720.455 865.652,718.41 866.211,749.593 866.77,732.025 867.33,715.61 867.889,728.848 868.448,709.39 869.007,709.311 869.567,724.798 870.126,723.817 870.685,721.399 871.244,749.956 871.804,764.48 872.363,743.553 872.922,723.791 873.481,707.582 874.041,704.273 874.6,718.818 875.159,714.964 875.718,715.176 876.278,682.491 876.837,651.763 877.396,636.072 877.955,555.622 878.515,543.414 879.074,549.41 879.633,538.347 880.192,545.959 880.752,520.189 881.311,544.359 881.87,552.249 882.429,575.336 882.989,580.262 883.548,599.597 884.107,606.09 884.666,610.098 885.226,631.382 885.785,650.124 886.344,637.361 886.903,622.798 887.463,657.889 888.022,657.855 888.581,625.202 889.14,610.963 889.7,647.377 890.259,632.981 890.818,633.416 891.377,604.278 891.937,577.836 892.496,583.746 893.055,574.793 893.614,562.328 894.174,587.845 894.733,575.872 895.292,570.108 895.851,574.867 896.411,578.501 896.97,569.145 897.529,543.371 898.088,568.901 898.648,572.993 899.207,581.115 899.766,541.029 900.325,519.459 900.885,529.781 901.444,553.001 902.003,545.853 902.562,553.609 903.122,545.555 903.681,572.097 904.24,596.288 904.799,586.954 905.359,596.696 905.918,651.126 906.477,655.738 907.036,624.317 907.596,625.313 908.155,631.617 908.714,656.701 909.273,641.804 909.833,680.858 910.392,698.545 910.951,696.401 911.51,710.64 912.07,709.298 912.629,692.583 913.188,705.895 913.747,709.522 914.307,724.078 914.866,755.545 915.425,766.449 915.984,762.613 916.544,758.007 917.103,739.875 917.662,752.521 918.221,732.902 918.781,727.469 919.34,724.725 919.899,749.977 920.458,762.837 921.018,757.127 921.577,737.551 922.136,717.931 922.695,698.489 923.255,732.986 923.814,762.525 924.373,759.06 924.932,740.185 925.492,736.867 926.051,751.311 926.61,748.251 927.169,712.077 927.729,710.203 928.288,710.267 928.847,708.52 929.406,738.747 929.966,734.188 930.525,729.406 931.084,728.244 931.644,725.271 932.203,741.179 932.762,721.278 933.321,701.325 933.881,745.921 934.44,725.084 934.999,722.397 935.558,722.843 936.118,739.036 936.677,736.131 937.236,732.376 937.795,778.582 938.355,787.564 938.914,765.731 939.473,761.684 940.032,759.581 940.592,738.729 941.151,732.786 941.71,725.915 942.269,726.293 942.829,724.683 943.388,720.935 943.947,692.115 944.506,690.01 945.066,706.936 945.625,706.679 946.184,691.724 946.743,673.582 947.303,675.781 947.862,658.3 948.421,628.609 948.98,633.773 949.54,653.222 950.099,655.289 950.658,675.644 951.217,661.888 951.777,636.763 952.336,641.836 952.895,646.102 953.454,681.955 954.014,697.968 954.573,747.415 955.132,731.392 955.691,743.882 956.251,723.177 956.81,739.621 957.369,720.901 957.928,720.74 958.488,718.158 959.047,732.077 959.606,759.152 960.165,777.11 960.725,770.45 961.284,793.901 961.843,785.631 962.402,765.449 962.962,774.413 963.521,788.48 964.08,767.914 964.639,747.035 965.199,727.34 965.758,725.874 966.317,725.848 966.876,741.129 967.436,754.041 967.995,751.943 968.554,752.539 969.113,814.785 969.673,811.24 970.232,803.134 970.791,780.972 971.35,776.266 971.91,740.273 972.469,723.864 973.028,707.335 973.587,702.105 974.147,740.161 974.706,724.199 975.265,708.464 975.824,693.212 976.384,629.039 976.943,581.983 977.502,604.702 978.061,625.498 978.621,644.488 979.18,645.78 979.739,645.961 980.298,585.136 980.858,605.601 981.417,625.544 981.976,628.674 982.535,600.193 983.095,605.707 983.654,627 984.213,627.317 984.772,647.573 985.332,651.186 985.891,703.153 986.45,717.875 987.009,731.701 987.569,761.189 988.128,756.187 988.687,751.158 989.246,699.891 989.806,713.137 990.365,695.725 990.924,689.76 991.483,706.76 992.043,687.928 992.602,703.19 993.161,720.959 993.72,717.839 994.28,714.748 994.839,729.513 995.398,712.071 995.957,692.767 996.517,689.034 997.076,705.824 997.635,734.948 998.194,749.957 998.754,762.988 999.313,760.989 999.872,767.946 1000.43,760.642 1000.99,789.634 1001.55,800.545 1002.11,779.847 1002.67,824.711 1003.23,787.224 1003.79,715.275 1004.35,727.062 1004.91,739.057 1005.46,719.698 1006.02,749.522 1006.58,702.65 1007.14,731.973 1007.7,745.447 1008.26,711.953 1008.82,727.181 1009.38,738.881 1009.94,686.935 1010.5,722.594 1011.06,702.216 1011.62,734.369 1012.18,729.306 1012.73,712.297 1013.29,726.57 1013.85,770.031 1014.41,766.827 1014.97,725.283 1015.53,738.986 1016.09,717.104 1016.65,717.171 1017.21,713.85 1017.77,746.077 1018.33,762.704 1018.89,789.047 1019.45,796.248 1020.01,787.088 1020.56,766.478 1021.12,761.599 1021.68,742.628 1022.24,739.787 1022.8,733.008 1023.36,726.434 1023.92,743.066 1024.48,708.914 1025.04,710.316 1025.6,697.077 1026.16,696.505 1026.72,693.468 1027.28,691.044 1027.83,689.38 1028.39,689.504 1028.95,704.641 1029.51,720.119 1030.07,721.222 1030.63,731.408 1031.19,697.785 1031.75,663.607 1032.31,665.526 1032.87,651.919 1033.43,673.536 1033.99,728.686 1034.55,744.28 1035.1,741.5 1035.66,706.299 1036.22,640.69 1036.78,660.588 1037.34,645.615 1037.9,598.501 1038.46,618.035 1039.02,608.755 1039.58,614.303 1040.14,621.144 1040.7,673.465 1041.26,657.637 1041.82,641.898 1042.38,658.97 1042.93,661.254 1043.49,646.302 1044.05,634.06 1044.61,617.959 1045.17,607.028 1045.73,611.402 1046.29,647.845 1046.85,647.438 1047.41,664.323 1047.97,618.989 1048.53,637.107 1049.09,667.279 1049.65,685.381 1050.2,682.003 1050.76,663.167 1051.32,666.19 1051.88,700.156 1052.44,696.669 1053,713.622 1053.56,713.154 1054.12,677.833 1054.68,659.762 1055.24,710.591 1055.8,673.676 1056.36,677.659 1056.92,695.598 1057.48,695.862 1058.03,697.26 1058.59,680.604 1059.15,699.897 1059.71,698.17 1060.27,700.886 1060.83,669.809 1061.39,672.807 1061.95,672.096 1062.51,674.858 1063.07,723.263 1063.63,737.163 1064.19,736.101 1064.75,685.387 1065.3,684.471 1065.86,700.323 1066.42,718.144 1066.98,685.384 1067.54,685.423 1068.1,673.047 1068.66,674.064 1069.22,673.18 1069.78,674.582 1070.34,690.296 1070.9,721.002 1071.46,735.124 1072.02,763.328 1072.57,759.101 1073.13,740.272 1073.69,720.168 1074.25,720.162 1074.81,721.654 1075.37,721.836 1075.93,720.241 1076.49,717.5 1077.05,712.472 1077.61,725.994 1078.17,707.064 1078.73,686.941 1079.29,687.308 1079.85,666.782 1080.4,648.71 1080.96,635.627 1081.52,641.394 1082.08,675.574 1082.64,659.722 1083.2,660.254 1083.76,642.9 1084.32,648.67 1084.88,664.648 1085.44,662.782 1086,647.413 1086.56,653.085 1087.12,622.953 1087.67,627.731 1088.23,629.828 1088.79,613.994 1089.35,585.979 1089.91,560.737 1090.47,553.27 1091.03,561.487 1091.59,551.741 1092.15,608.323 1092.71,660.408 1093.27,645.877 1093.83,661.467 1094.39,665.253 1094.94,678.794 1095.5,677.137 1096.06,677.869 1096.62,710.05 1097.18,679.426 1097.74,651.127 1098.3,687.714 1098.86,671.119 1099.42,687 1099.98,689.527 1100.54,670.307 1101.1,667.14 1101.66,686.782 1102.22,687.075 1102.77,685.436 1103.33,688.616 1103.89,672.546 1104.45,659.037 1105.01,664.248 1105.57,633.169 1106.13,650.201 1106.69,653.357 1107.25,656.487 1107.81,672.387 1108.37,674.166 1108.93,695.2 1109.49,693.083 1110.04,708.714 1110.6,705.392 1111.16,672.814 1111.72,674.707 1112.28,709.535 1112.84,709.364 1113.4,709.71 1113.96,724.969 1114.52,691.431 1115.08,725.843 1115.64,759.011 1116.2,800.31 1116.76,779.994 1117.31,775.327 1117.87,752.641 1118.43,731.672 1118.99,745.416 1119.55,740.134 1120.11,716.833 1120.67,732.821 1121.23,761.662 1121.79,725.672 1122.35,756.975 1122.91,755.103 1123.47,686.372 1124.03,702.836 1124.59,682.228 1125.14,686.01 1125.7,653.377 1126.26,654.794 1126.82,655.479 1127.38,688.705 1127.94,673.964 1128.5,657.248 1129.06,660.468 1129.62,659.888 1130.18,662.344 1130.74,628.919 1131.3,616.573 1131.86,617.663 1132.41,653.957 1132.97,675.558 1133.53,676.626 1134.09,625.591 1134.65,610.832 1135.21,633.305 1135.77,619.105 1136.33,657.285 1136.89,660.511 1137.45,676.688 1138.01,690.344 1138.57,720.179 1139.13,699.812 1139.68,715.979 1140.24,714.146 1140.8,747.879 1141.36,727.519 1141.92,725.212 1142.48,719.672 1143.04,717.14 1143.6,732.494 1144.16,701.177 1144.72,680.949 1145.28,679.596 1145.84,697.529 1146.4,700.573 1146.96,712.322 1147.51,691.503 1148.07,705.728 1148.63,718.986 1149.19,701.723 1149.75,700.714 1150.31,667.201 1150.87,670.364 1151.43,637.057 1151.99,637.119 1152.55,672.582 1153.11,655.546 1153.67,653.779 1154.23,687.213 1154.78,702.317 1155.34,717.28 1155.9,683.568 1156.46,665.042 1157.02,665.85 1157.58,697.976 1158.14,694.509 1158.7,707.203 1159.26,723.587 1159.82,739.667 1160.38,754.405 1160.94,750.256 1161.5,733.764 1162.05,731.965 1162.61,724.783 1163.17,688.062 1163.73,700.152 1164.29,683.863 1164.85,670.602 1165.41,690.28 1165.97,706.14 1166.53,740.87 1167.09,756.434 1167.65,765.037 1168.21,775.179 1168.77,740.766 1169.33,705.031 1169.88,704.555 1170.44,704.924 1171,686.271 1171.56,670.845 1172.12,690.173 1172.68,690.798 1173.24,706.732 1173.8,670.711 1174.36,670.584 1174.92,673.446 1175.48,675.322 1176.04,691.599 1176.6,720.51 1177.15,683.674 1177.71,667.451 1178.27,636.131 1178.83,639.413 1179.39,645.514 1179.95,667.603 1180.51,680.979 1181.07,715.785 1181.63,713.943 1182.19,712.134 1182.75,709.556 1183.31,722.345 1183.87,753.52 1184.43,761.461 1184.98,721.4 1185.54,718.033 1186.1,699.208 1186.66,683.925 1187.22,667.534 1187.78,669.039 1188.34,666.337 1188.9,679.835 1189.46,710.715 1190.02,646.039 1190.58,619.201 1191.14,638.056 1191.7,643.005 1192.25,645.051 1192.81,647.993 1193.37,651.469 1193.93,604.006 1194.49,626.253 1195.05,633.098 1195.61,603.175 1196.17,592.001 1196.73,579.924 1197.29,603.742 1197.85,588.989 1198.41,559.976 1198.97,601.839 1199.52,602.849 1200.08,608.967 1200.64,612.912 1201.2,621.045 1201.76,625.012 1202.32,629.681 1202.88,633.082 1203.44,615.168 1204,606.329 1204.56,592.715 1205.12,598.897 1205.68,573.842 1206.24,580.756 1206.8,572.629 1207.35,596.364 1207.91,599.718 1208.47,603.816 1209.03,607.429 1209.59,598.031 1210.15,585.038 1210.71,608.087 1211.27,612.31 1211.83,586.596 1212.39,579.467 1212.95,598.083 1213.51,587.156 1214.07,595.925 1214.62,616.301 1215.18,653.111 1215.74,653.147 1216.3,688.726 1216.86,686.259 1217.42,703.825 1217.98,749.853 1218.54,745.695 1219.1,743.796 1219.66,726 1220.22,756.74 1220.78,736.001 1221.34,717.35 1221.89,715.88 1222.45,682.849 1223.01,655.319 1223.57,691.14 1224.13,658.704 1224.69,694.894 1225.25,697.899 1225.81,698.334 1226.37,731.365 1226.93,729.545 1227.49,741.614 1228.05,774.347 1228.61,786.793 1229.17,798.261 1229.72,827.524 1230.28,789.405 1230.84,768.572 1231.4,763.902 1231.96,796.004 1232.52,773.498 1233.08,737.814 1233.64,739.762 1234.2,735.692 1234.76,781.988 1235.32,745.803 1235.88,726.053 1236.44,754.68 1236.99,729.672 1237.55,726.579 1238.11,725.485 1238.67,722.98 1239.23,736.936 1239.79,747.546 1240.35,732.284 1240.91,775.467 1241.47,754.756 1242.03,765.167 1242.59,762.22 1243.15,758.56 1243.71,769.96 1244.26,733.401 1244.82,760.48 1245.38,771.433 1245.94,799.44 1246.5,808.043 1247.06,817.745 1247.62,763.008 1248.18,759.908 1248.74,726.262 1249.3,721.934 1249.86,703.097 1250.42,667.569 1250.98,702.22 1251.54,718.666 1252.09,681.078 1252.65,696.839 1253.21,677.29 1253.77,677.994 1254.33,695.345 1254.89,677.86 1255.45,693.674 1256.01,679.472 1256.57,662.338 1257.13,646.726 1257.69,632.804 1258.25,638.11 1258.81,653.597 1259.36,656.041 1259.92,657.793 1260.48,675.802 1261.04,675.735 1261.6,673.731 1262.16,673.615 1262.72,676.854 1263.28,643.186 1263.84,647.178 1264.4,635.909 1264.96,635.362 1265.52,607.091 1266.08,627.673 1266.63,634.889 1267.19,635.674 1267.75,619.939 1268.31,657.03 1268.87,661.769 1269.43,677.512 1269.99,691.774 1270.55,708.453 1271.11,690.001 1271.67,626.795 1272.23,649.682 1272.79,633.523 1273.35,618.17 1273.91,652.299 1274.46,672.258 1275.02,638.932 1275.58,622.667 1276.14,625.291 1276.7,642.359 1277.26,660.002 1277.82,645.2 1278.38,646.659 1278.94,648.612 1279.5,666.144 1280.06,666.76 1280.62,665.825 1281.18,664.404 1281.73,699.808 1282.29,695.495 1282.85,693.458 1283.41,695.977 1283.97,696.917 1284.53,646.594 1285.09,663.851 1285.65,660.901 1286.21,692.554 1286.77,691.625 1287.33,658.795 1287.89,690.266 1288.45,672.48 1289,706.563 1289.56,671.244 1290.12,668.766 1290.68,634.997 1291.24,653.607 1291.8,638.023 1292.36,606.185 1292.92,627.322 1293.48,615.013 1294.04,633.987 1294.6,608.648 1295.16,623.023 1295.72,627.608 1296.28,661.622 1296.83,664.835 1297.39,685.948 1297.95,704.181 1298.51,670.271 1299.07,685.839 1299.63,719.421 1300.19,733.807 1300.75,746.461 1301.31,775.346 1301.87,721.779 1302.43,656.431 1302.99,674.911 1303.55,677.225 1304.1,680.634 1304.66,683.461 1305.22,668.154 1305.78,665.604 1306.34,647.909 1306.9,678.406 1307.46,679.235 1308.02,661.279 1308.58,648.466 1309.14,636.413 1309.7,607.616 1310.26,611.557 1310.82,614.961 1311.38,586.297 1311.93,573.341 1312.49,548.013 1313.05,569.876 1313.61,578.497 1314.17,599.106 1314.73,601.829 1315.29,623.054 1315.85,658.775 1316.41,690.861 1316.97,707.093 1317.53,708.661 1318.09,675.272 1318.65,674.323 1319.2,656.323 1319.76,642.712 1320.32,676.85 1320.88,692.623 1321.44,645.009 1322,634.412 1322.56,639.794 1323.12,627.503 1323.68,663.458 1324.24,646.621 1324.8,628.293 1325.36,658.843 1325.92,628.688 1326.47,614.739 1327.03,635.844 1327.59,622.296 1328.15,594.942 1328.71,595.82 1329.27,599.859 1329.83,601.315 1330.39,639.004 1330.95,658.372 1331.51,658.59 1332.07,629.053 1332.63,648.514 1333.19,647.939 1333.75,664.867 1334.3,663.125 1334.86,697.753 1335.42,715.661 1335.98,697.7 1336.54,693.239 1337.1,721.73 1337.66,723.953 1338.22,719.22 1338.78,715.706 1339.34,742.584 1339.9,724.13 1340.46,722.376 1341.02,721.93 1341.57,701.732 1342.13,716.804 1342.69,766.138 1343.25,744.411 1343.81,729.916 1344.37,745.469 1344.93,757.963 1345.49,738.297 1346.05,748.417 1346.61,747.033 1347.17,760.265 1347.73,770.472 1348.29,766.064 1348.84,795.66 1349.4,770.9 1349.96,764.762 1350.52,760.106 1351.08,788.453 1351.64,766.175 1352.2,745.898 1352.76,759.01 1353.32,722.758 1353.88,733.969 1354.44,729.964 1355,729.395 1355.56,728.516 1356.12,708.268 1356.67,722.63 1357.23,740.493 1357.79,737.639 1358.35,717.651 1358.91,716.57 1359.47,717.653 1360.03,701.262 1360.59,736.066 1361.15,765.55 1361.71,731.874 1362.27,696.759 1362.83,711.067 1363.39,711.356 1363.94,694.723 1364.5,710.863 1365.06,728.088 1365.62,757.275 1366.18,755.832 1366.74,734.74 1367.3,717.02 1367.86,715.898 1368.42,709.872 1368.98,710.67 1369.54,708.003 1370.1,705.83 1370.66,701.97 1371.21,733.402 1371.77,694.514 1372.33,707.904 1372.89,691.028 1373.45,688.56 1374.01,737.771 1374.57,752.012 1375.13,731.393 1375.69,728.565 1376.25,675.171 1376.81,659.159 1377.37,690.659 1377.93,689.376 1378.49,693.325 1379.04,673.986 1379.6,624.745 1380.16,628.092 1380.72,585.955 1381.28,605.583 1381.84,579.814 1382.4,552.69 1382.96,591.318 1383.52,626.858 1384.08,647.752 1384.64,682.399 1385.2,652.904 1385.76,672.375 1386.31,674.765 1386.87,661.886 1387.43,633.881 1387.99,635.953 1388.55,637.427 1389.11,627.291 1389.67,625.761 1390.23,643.646 1390.79,646.422 1391.35,647.404 1391.91,664.625 1392.47,698.026 1393.03,698.095 1393.58,694.79 1394.14,694.844 1394.7,696.41 1395.26,681.324 1395.82,668.247 1396.38,653.067 1396.94,623.013 1397.5,644.729 1398.06,660.078 1398.62,647.659 1399.18,633.615 1399.74,653.222 1400.3,655.208 1400.86,627.173 1401.41,632.454 1401.97,684.341 1402.53,701.056 1403.09,699.236 1403.65,715.35 1404.21,700.43 1404.77,700.592 1405.33,701.434 1405.89,669.432 1406.45,639.078 1407.01,626.56 1407.57,614.626 1408.13,617.435 1408.68,616.392 1409.24,654.35 1409.8,685.021 1410.36,698.293 1410.92,697.898 1411.48,697.851 1412.04,696.558 1412.6,714.511 1413.16,718.046 1413.72,761.984 1414.28,791.965 1414.84,787.524 1415.4,799.365 1415.95,763.821 1416.51,743.368 1417.07,691.746 1417.63,695.971 1418.19,744.87 1418.75,741.949 1419.31,740.108 1419.87,734.8 1420.43,797.309 1420.99,759.147 1421.55,770.824 1422.11,766.502 1422.67,758.575 1423.23,753.846 1423.78,769.227 1424.34,785.828 1424.9,777.625 1425.46,756.273 1426.02,819.519 1426.58,797.568 1427.14,759.037 1427.7,771.151 1428.26,781.943 1428.82,778.219 1429.38,773.904 1429.94,770.435 1430.5,731.852 1431.05,701.419 1431.61,698.979 1432.17,698.807 1432.73,718.806 1433.29,703.342 1433.85,701.288 1434.41,716.72 1434.97,715.124 1435.53,683.85 1436.09,686.032 1436.65,716.324 1437.21,710.548 1437.77,675.58 1438.33,690.494 1438.88,642.894 1439.44,660.374 1440,646.936 1440.56,645.709 1441.12,649.379 1441.68,663.674 1442.24,678.934 1442.8,677.146 1443.36,692.925 1443.92,674.225 1444.48,672.661 1445.04,672.324 1445.6,672.696 1446.15,686.87 1446.71,638.164 1447.27,590.875 1447.83,580.384 1448.39,571.233 1448.95,576.977 1449.51,583.996 1450.07,591.897 1450.63,644.637 1451.19,645.395 1451.75,632.141 1452.31,555.208 1452.87,578.033 1453.42,585.431 1453.98,590.444 1454.54,623.27 1455.1,612.283 1455.66,633.389 1456.22,622.958 1456.78,639.452 1457.34,626.077 1457.9,647.026 1458.46,632.442 1459.02,618.858 1459.58,623.196 1460.14,628.323 1460.7,632.649 1461.25,635.094 1461.81,604.647 1462.37,607.128 1462.93,610.621 1463.49,631.796 1464.05,650.537 1464.61,635.972 1465.17,641.96 1465.73,638.494 1466.29,643.585 1466.85,678.151 1467.41,679.364 1467.97,680.606 1468.52,698.112 1469.08,698.624 1469.64,700.208 1470.2,687.853 1470.76,651.858 1471.32,651.981 1471.88,654.56 1472.44,672.558 1473,653.909 1473.56,673.929 1474.12,691.693 1474.68,737.936 1475.24,719.775 1475.79,735.594 1476.35,747.862 1476.91,743.546 1477.47,739.894 1478.03,701.727 1478.59,702.464 1479.15,733.418 1479.71,730.904 1480.27,708.461 1480.83,757.539 1481.39,787.205 1481.95,813.053 1482.51,785.361 1483.07,780.266 1483.62,822.952 1484.18,817.763 1484.74,796.378 1485.3,760.046 1485.86,755.862 1486.42,767.335 1486.98,762.901 1487.54,744.282 1488.1,788.102 1488.66,783.449 1489.22,796.125 1489.78,790.778 1490.34,752.114 1490.89,751.566 1491.45,761.147 1492.01,774.343 1492.57,751.035 1493.13,760.407 1493.69,709.62 1494.25,724.566 1494.81,771.794 1495.37,752.365 1495.93,766.808 1496.49,780.279 1497.05,775.055 1497.61,769.827 1498.16,746.413 1498.72,707.193 1499.28,706.977 1499.84,690.387 1500.4,687.089 1500.96,666.071 1501.52,685.604 1502.08,687.337 1502.64,668.986 1503.2,669.422 1503.76,671.352 1504.32,672.81 1504.88,705.505 1505.44,673.099 1505.99,625.082 1506.55,612.416 1507.11,633.758 1507.67,651.127 1508.23,668.865 1508.79,672.103 1509.35,641.929 1509.91,662.51 1510.47,698.744 1511.03,712.702 1511.59,694.927 1512.15,676.364 1512.71,613.659 1513.26,616.157 1513.82,651.077 1514.38,634.891 1514.94,624.593 1515.5,677.464 1516.06,658.77 1516.62,660.873 1517.18,695.406 1517.74,711.945 1518.3,677.742 1518.86,744.541 1519.42,758.268 1519.98,770.09 1520.53,718.059 1521.09,716.374 1521.65,750.128 1522.21,748.92 1522.77,777.451 1523.33,759.261 1523.89,691.963 1524.45,658.329 1525.01,646.408 1525.57,629.684 1526.13,633.253 1526.69,585.641 1527.25,611.388 1527.81,617.448 1528.36,638.778 1528.92,606.256 1529.48,609.26 1530.04,645.245 1530.6,679.734 1531.16,666.071 1531.72,668.148 1532.28,652.352 1532.84,653.758 1533.4,608.582 1533.96,629.231 1534.52,679.029 1535.08,663.381 1535.63,629.7 1536.19,636.393 1536.75,625.921 1537.31,661.51 1537.87,695.974 1538.43,742.088 1538.99,739.241 1539.55,731.586 1540.11,732.023 1540.67,745.465 1541.23,741.191 1541.79,722.386 1542.35,719.962 1542.9,719.021 1543.46,698.33 1544.02,747.841 1544.58,744.685 1545.14,741.002 1545.7,724.297 1546.26,740.515 1546.82,738.041 1547.38,719.484 1547.94,733.623 1548.5,746.615 1549.06,712.945 1549.62,714.444 1550.18,728.104 1550.73,726.064 1551.29,694.275 1551.85,711.61 1552.41,724.281 1552.97,722.936 1553.53,720.068 1554.09,717.749 1554.65,728.991 1555.21,724.971 1555.77,721.846 1556.33,702.402 1556.89,704.072 1557.45,666.042 1558,669.495 1558.56,683.12 1559.12,654.54 1559.68,685.827 1560.24,669.165 1560.8,654.476 1561.36,656.089 1561.92,657.846 1562.48,660.483 1563.04,663.044 1563.6,666.167 1564.16,682.838 1564.72,686.817 1565.28,703.914 1565.83,689.456 1566.39,641.704 1566.95,647.152 1567.51,681.795 1568.07,695.802 1568.63,694.083 1569.19,693.749 1569.75,693.761 1570.31,695.777 1570.87,693.64 1571.43,678.622 1571.99,694.577 1572.55,679.216 1573.1,649.61 1573.66,616.452 1574.22,649.962 1574.78,650.617 1575.34,653.654 1575.9,668.376 1576.46,654.769 1577.02,641.68 1577.58,641.908 1578.14,666.837 1578.7,668.687 1579.26,668.042 1579.82,669.318 1580.37,685.616 1580.93,686.834 1581.49,703.189 1582.05,700.422 1582.61,667.522 1583.17,681.326 1583.73,682.733 1584.29,652.064 1584.85,654.133 1585.41,673.592 1585.97,692.114 1586.53,692.838 1587.09,675.347 1587.65,673.387 1588.2,672.216 1588.76,673.071 1589.32,661.907 1589.88,662.998 1590.44,648.965 1591,649.513 1591.56,668.117 1592.12,700.052 1592.68,668.01 1593.24,666.346 1593.8,666.441 1594.36,650.4 1594.92,666.337 1595.47,654.678 1596.03,659.775 1596.59,678.082 1597.15,679.438 1597.71,681.034 1598.27,696.698 1598.83,694.542 1599.39,690.996 1599.95,720.777 1600.51,720.845 1601.07,716.636 1601.63,716.509 1602.19,730.811 1602.74,713.842 1603.3,709.897 1603.86,678.112 1604.42,675.553 1604.98,689.94 1605.54,656.262 1606.1,673.814 1606.66,696.167 1607.22,692.248 1607.78,707.449 1608.34,704.142 1608.9,686.1 1609.46,684.914 1610.02,671.055 1610.57,693.235 1611.13,697.087 1611.69,692.693 1612.25,725.579 1612.81,739.632 1613.37,750.831 1613.93,747.815 1614.49,742.01 1615.05,756.027 1615.61,733.993 1616.17,682.842 1616.73,645.555 1617.29,647.475 1617.84,616.145 1618.4,668.252 1618.96,671.917 1619.52,656.184 1620.08,658.762 1620.64,628.961 1621.2,663.801 1621.76,632.044 1622.32,623.928 1622.88,593.265 1623.44,617.091 1624,638.71 1624.56,640.665 1625.11,628.941 1625.67,618.888 1626.23,637.529 1626.79,621.711 1627.35,639.5 1627.91,608.782 1628.47,629.398 1629.03,647.048 1629.59,680.884 1630.15,680.44 1630.71,681.344 1631.27,663.489 1631.83,661.2 1632.39,660.489 1632.94,662.24 1633.5,648.875 1634.06,635.456 1634.62,688.304 1635.18,700.861 1635.74,718.34 1636.3,717.871 1636.86,731.468 1637.42,711.107 1637.98,758.588 1638.54,736.139 1639.1,720.407 1639.66,700.294 1640.21,682.135 1640.77,684.906 1641.33,686.035 1641.89,656.658 1642.45,655.522 1643.01,656.468 1643.57,690.054 1644.13,705.115 1644.69,672.562 1645.25,656.135 1645.81,706.763 1646.37,723.661 1646.93,738.833 1647.48,755.038 1648.04,766.492 1648.6,764.462 1649.16,743.38 1649.72,741.576 1650.28,740.327 1650.84,737.994 1651.4,734.879 1651.96,762.075 1652.52,756.833 1653.08,751.644 1653.64,750.426 1654.2,745.462 1654.76,742.456 1655.31,720.131 1655.87,734.086 1656.43,732.624 1656.99,697.1 1657.55,695.483 1658.11,678.004 1658.67,711.988 1659.23,708.781 1659.79,755.184 1660.35,751.293 1660.91,746.52 1661.47,728.364 1662.03,742.884 1662.58,675.141 1663.14,678.281 1663.7,680.33 1664.26,680.412 1664.82,695.448 1665.38,710.606 1665.94,759.046 1666.5,753.615 1667.06,715.96 1667.62,729.473 1668.18,722.868 1668.74,720.409 1669.3,721.5 1669.85,701.672 1670.41,685.615 1670.97,701.814 1671.53,722.298 1672.09,739.542 1672.65,701.245 1673.21,699.524 1673.77,678.472 1674.33,645.681 1674.89,615.029 1675.45,618.385 1676.01,605.399 1676.57,609.63 1677.13,616.52 1677.68,603.375 1678.24,590.352 1678.8,610.654 1679.36,597.074 1679.92,617.147 1680.48,621.09 1681.04,639.192 1681.6,657.861 1682.16,661.55 1682.72,646.328 1683.28,650.403 1683.84,632.805 1684.4,618.337 1684.95,670.7 1685.51,719.282 1686.07,685.444 1686.63,698.316 1687.19,699.022 1687.75,681.403 1688.31,665.809 1688.87,680.754 1689.43,696.368 1689.99,727.67 1690.55,690.93 1691.11,640.709 1691.67,645.735 1692.23,633.781 1692.78,653.03 1693.34,641.259 1693.9,657.528 1694.46,658.523 1695.02,691.672 1695.58,707.079 1696.14,708.781 1696.7,724.972 1697.26,723.876 1697.82,658.426 1698.38,642.068 1698.94,676.395 1699.5,708.676 1700.05,740.748 1700.61,755.005 1701.17,783.769 1701.73,760.8 1702.29,771.122 1702.85,751.019 1703.41,729.307 1703.97,711.776 1704.53,726.221 1705.09,727.503 1705.65,739.106 1706.21,720.813 1706.77,721.424 1707.32,722.169 1707.88,688.522 1708.44,690.825 1709,658.551 1709.56,663.69 1710.12,664.756 1710.68,653.903 1711.24,636.863 1711.8,656.418 1712.36,659.452 1712.92,660.586 1713.48,677.462 1714.04,695.768 1714.6,694.636 1715.15,663.156 1715.71,632.866 1716.27,633.292 1716.83,631.756 1717.39,655.17 1717.95,657.726 1718.51,613.158 1719.07,634.094 1719.63,682.831 1720.19,714.555 1720.75,716.66 1721.31,732.877 1721.87,733.562 1722.42,732.236 1722.98,748.17 1723.54,676.067 1724.1,673.115 1724.66,690.767 1725.22,692.792 1725.78,724.389 1726.34,741.018 1726.9,740.911 1727.46,754.116 1728.02,719.913 1728.58,718.219 1729.14,735.295 1729.69,717.961 1730.25,717.337 1730.81,717.602 1731.37,731.145 1731.93,726 1732.49,738.045 1733.05,735.82 1733.61,732.023 1734.17,742.919 1734.73,737.382 1735.29,670.729 1735.85,637.552 1736.41,656.176 1736.97,622.858 1737.52,606.582 1738.08,612.297 1738.64,614.737 1739.2,600.51 1739.76,607.81 1740.32,581.461 1740.88,615.739 1741.44,633.889 1742,653.693 1742.56,652.414 1743.12,655.392 1743.68,706.051 1744.24,707.368 1744.79,708.979 1745.35,770.975 1745.91,765.015 1746.47,744.015 1747.03,791.24 1747.59,814.226 1748.15,807.319 1748.71,803.375 1749.27,798.517 1749.83,803.336 1750.39,809.873 1750.95,786.691 1751.51,780.309 1752.06,775.6 1752.62,772.821 1753.18,798.472 1753.74,775.961 1754.3,804.668 1754.86,816.414 1755.42,792.119 1755.98,750.654 1756.54,734.142 1757.1,715.217 1757.66,665.224 1758.22,665.31 1758.78,697.966 1759.34,713.5 1759.89,693.975 1760.45,707.731 1761.01,693.759 1761.57,695.43 1762.13,695.321 1762.69,656.669 1763.25,637.861 1763.81,652.544 1764.37,620.353 1764.93,638.326 1765.49,640.211 1766.05,612.739 1766.61,632.449 1767.16,649.914 1767.72,652.341 1768.28,651.055 1768.84,652.895 1769.4,656.962 1769.96,645.13 1770.52,582.38 1771.08,542.075 1771.64,550.454 1772.2,558.498 1772.76,564.471 1773.32,602.667 1773.88,610.818 1774.43,580.801 1774.99,570.443 1775.55,608.765 1776.11,612.609 1776.67,613.994 1777.23,603.419 1777.79,625.61 1778.35,615.488 1778.91,616.389 1779.47,651.248 1780.03,687.274 1780.59,719.45 1781.15,729.695 1781.71,734.061 1782.26,717.086 1782.82,732.051 1783.38,728.827 1783.94,711.316 1784.5,710.257 1785.06,692.497 1785.62,708.799 1786.18,691.762 1786.74,705.168 1787.3,655.427 1787.86,640.32 1788.42,659.135 1788.98,640.777 1789.53,630.364 1790.09,617.609 1790.65,636.067 1791.21,621.044 1791.77,608.278 1792.33,628.702 1792.89,631.781 1793.45,599.032 1794.01,570.119 1794.57,560.605 1795.13,549.887 1795.69,541.332 1796.25,582.422 1796.8,620.364 1797.36,673.669 1797.92,673.259 1798.48,693.897 1799.04,695.502 1799.6,729.969 1800.16,729.929 1800.72,707.931 1801.28,723.971 1801.84,722.071 1802.4,720.633 1802.96,734.216 1803.52,717.653 1804.08,718.564 1804.63,735.05 1805.19,700.051 1805.75,697.324 1806.31,677.764 1806.87,695.531 1807.43,712.076 1807.99,711.548 1808.55,696.277 1809.11,680.771 1809.67,680.537 1810.23,662.87 1810.79,667.414 1811.35,701.084 1811.9,715.666 1812.46,713.423 1813.02,709.099 1813.58,709.773 1814.14,709.976 1814.7,678.361 1815.26,662.688 1815.82,681.578 1816.38,696.287 1816.94,699.477 1817.5,685.152 1818.06,699.961 1818.62,682.729 1819.18,685.857 1819.73,684.237 1820.29,702.363 1820.85,719.681 1821.41,702.354 1821.97,718.232 1822.53,698.909 1823.09,699.836 1823.65,711.385 1824.21,737.62 1824.77,766.353 1825.33,765.06 1825.89,743.604 1826.45,745.52 1827,740.906 1827.56,767.294 1828.12,743.036 1828.68,723.251 1829.24,673.892 1829.8,640.04 1830.36,591.63 1830.92,582.494 1831.48,589.883 1832.04,595.433 1832.6,598.697 1833.16,618.274 1833.72,651.951 1834.27,637.726 1834.83,641.554 1835.39,609.422 1835.95,630.562 1836.51,650.582 1837.07,653.598 1837.63,656.009 1838.19,688.343 \"/>\n<path clip-path=\"url(#clip873)\" d=\"M720.247 692.83 L720.806 692.83 L721.365 692.83 L721.924 692.83 L722.484 692.83 L723.043 692.83 L723.602 692.83 L724.161 692.83 L724.721 692.83 L725.28 692.83 L725.839 692.83 L726.398 692.83 L726.958 692.83 L727.517 692.83 L728.076 692.83 L728.635 692.83 L729.195 692.83 L729.754 692.83 L730.313 692.83 L730.872 692.83 L731.432 692.83 L731.991 692.83 L732.55 692.83 L733.109 692.83 L733.669 692.83 L734.228 692.83 L734.787 692.83 L735.346 692.83 L735.906 692.83 L736.465 692.83 L737.024 692.83 L737.583 692.83 L738.143 692.83 L738.702 692.83 L739.261 692.83 L739.82 692.83 L740.38 692.83 L740.939 692.83 L741.498 692.83 L742.057 692.83 L742.617 692.83 L743.176 692.83 L743.735 692.83 L744.294 692.83 L744.854 692.83 L745.413 692.83 L745.972 692.83 L746.531 692.83 L747.091 692.83 L747.65 692.83 L748.209 692.83 L748.768 692.83 L749.328 692.83 L749.887 692.83 L750.446 692.83 L751.005 692.83 L751.565 692.83 L752.124 692.83 L752.683 692.83 L753.242 692.83 L753.802 692.83 L754.361 692.83 L754.92 692.83 L755.479 692.83 L756.039 692.83 L756.598 692.83 L757.157 692.83 L757.716 692.83 L758.276 692.83 L758.835 692.83 L759.394 692.83 L759.953 692.83 L760.513 692.83 L761.072 692.83 L761.631 692.83 L762.19 692.83 L762.75 692.83 L763.309 692.83 L763.868 692.83 L764.427 692.83 L764.987 692.83 L765.546 692.83 L766.105 692.83 L766.664 692.83 L767.224 692.83 L767.783 692.83 L768.342 692.83 L768.901 692.83 L769.461 692.83 L770.02 692.83 L770.579 692.83 L771.138 692.83 L771.698 692.83 L772.257 692.83 L772.816 692.83 L773.375 692.83 L773.935 692.83 L774.494 692.83 L775.053 692.83 L775.612 692.83 L776.172 692.83 L776.731 692.83 L777.29 692.83 L777.849 692.83 L778.409 692.83 L778.968 692.83 L779.527 692.83 L780.086 692.83 L780.646 692.83 L781.205 692.83 L781.764 692.83 L782.323 692.83 L782.883 692.83 L783.442 692.83 L784.001 692.83 L784.56 692.83 L785.12 692.83 L785.679 692.83 L786.238 692.83 L786.797 692.83 L787.357 692.83 L787.916 692.83 L788.475 692.83 L789.034 692.83 L789.594 692.83 L790.153 692.83 L790.712 692.83 L791.271 692.83 L791.831 692.83 L792.39 692.83 L792.949 692.83 L793.508 692.83 L794.068 692.83 L794.627 692.83 L795.186 692.83 L795.745 692.83 L796.305 692.83 L796.864 692.83 L797.423 692.83 L797.982 692.83 L798.542 692.83 L799.101 692.83 L799.66 692.83 L800.219 692.83 L800.779 692.83 L801.338 692.83 L801.897 692.83 L802.456 692.83 L803.016 692.83 L803.575 692.83 L804.134 692.83 L804.693 692.83 L805.253 692.83 L805.812 692.83 L806.371 692.83 L806.931 692.83 L807.49 692.83 L808.049 692.83 L808.608 692.83 L809.168 692.83 L809.727 692.83 L810.286 692.83 L810.845 692.83 L811.405 692.83 L811.964 692.83 L812.523 692.83 L813.082 692.83 L813.642 692.83 L814.201 692.83 L814.76 692.83 L815.319 692.83 L815.879 692.83 L816.438 692.83 L816.997 692.83 L817.556 692.83 L818.116 692.83 L818.675 692.83 L819.234 692.83 L819.793 692.83 L820.353 692.83 L820.912 692.83 L821.471 692.83 L822.03 692.83 L822.59 692.83 L823.149 692.83 L823.708 692.83 L824.267 692.83 L824.827 692.83 L825.386 692.83 L825.945 692.83 L826.504 692.83 L827.064 692.83 L827.623 692.83 L828.182 692.83 L828.741 692.83 L829.301 692.83 L829.86 692.83 L830.419 692.83 L830.978 692.83 L831.538 692.83 L832.097 692.83 L832.656 692.83 L833.215 692.83 L833.775 692.83 L834.334 692.83 L834.893 692.83 L835.452 692.83 L836.012 692.83 L836.571 692.83 L837.13 692.83 L837.689 692.83 L838.249 692.83 L838.808 692.83 L839.367 692.83 L839.926 692.83 L840.486 692.83 L841.045 692.83 L841.604 692.83 L842.163 692.83 L842.723 692.83 L843.282 692.83 L843.841 692.83 L844.4 692.83 L844.96 692.83 L845.519 692.83 L846.078 692.83 L846.637 692.83 L847.197 692.83 L847.756 692.83 L848.315 692.83 L848.874 692.83 L849.434 692.83 L849.993 692.83 L850.552 692.83 L851.111 692.83 L851.671 692.83 L852.23 692.83 L852.789 692.83 L853.348 692.83 L853.908 692.83 L854.467 692.83 L855.026 692.83 L855.585 692.83 L856.145 692.83 L856.704 692.83 L857.263 692.83 L857.822 692.83 L858.382 692.83 L858.941 692.83 L859.5 692.83 L860.059 692.83 L860.619 692.83 L861.178 692.83 L861.737 692.83 L862.296 692.83 L862.856 692.83 L863.415 692.83 L863.974 692.83 L864.533 692.83 L865.093 692.83 L865.652 692.83 L866.211 692.83 L866.77 692.83 L867.33 692.83 L867.889 692.83 L868.448 692.83 L869.007 692.83 L869.567 692.83 L870.126 692.83 L870.685 692.83 L871.244 692.83 L871.804 692.83 L872.363 692.83 L872.922 692.83 L873.481 692.83 L874.041 692.83 L874.6 692.83 L875.159 692.83 L875.718 692.83 L876.278 692.83 L876.837 692.83 L877.396 692.83 L877.955 692.83 L878.515 692.83 L879.074 692.83 L879.633 692.83 L880.192 692.83 L880.752 692.83 L881.311 692.83 L881.87 692.83 L882.429 692.83 L882.989 692.83 L883.548 692.83 L884.107 692.83 L884.666 692.83 L885.226 692.83 L885.785 692.83 L886.344 692.83 L886.903 692.83 L887.463 692.83 L888.022 692.83 L888.581 692.83 L889.14 692.83 L889.7 692.83 L890.259 692.83 L890.818 692.83 L891.377 692.83 L891.937 692.83 L892.496 692.83 L893.055 692.83 L893.614 692.83 L894.174 692.83 L894.733 692.83 L895.292 692.83 L895.851 692.83 L896.411 692.83 L896.97 692.83 L897.529 692.83 L898.088 692.83 L898.648 692.83 L899.207 692.83 L899.766 692.83 L900.325 692.83 L900.885 692.83 L901.444 692.83 L902.003 692.83 L902.562 692.83 L903.122 692.83 L903.681 692.83 L904.24 692.83 L904.799 692.83 L905.359 692.83 L905.918 692.83 L906.477 692.83 L907.036 692.83 L907.596 692.83 L908.155 692.83 L908.714 692.83 L909.273 692.83 L909.833 692.83 L910.392 692.83 L910.951 692.83 L911.51 692.83 L912.07 692.83 L912.629 692.83 L913.188 692.83 L913.747 692.83 L914.307 692.83 L914.866 692.83 L915.425 692.83 L915.984 692.83 L916.544 692.83 L917.103 692.83 L917.662 692.83 L918.221 692.83 L918.781 692.83 L919.34 692.83 L919.899 692.83 L920.458 692.83 L921.018 692.83 L921.577 692.83 L922.136 692.83 L922.695 692.83 L923.255 692.83 L923.814 692.83 L924.373 692.83 L924.932 692.83 L925.492 692.83 L926.051 692.83 L926.61 692.83 L927.169 692.83 L927.729 692.83 L928.288 692.83 L928.847 692.83 L929.406 692.83 L929.966 692.83 L930.525 692.83 L931.084 692.83 L931.644 692.83 L932.203 692.83 L932.762 692.83 L933.321 692.83 L933.881 692.83 L934.44 692.83 L934.999 692.83 L935.558 692.83 L936.118 692.83 L936.677 692.83 L937.236 692.83 L937.795 692.83 L938.355 692.83 L938.914 692.83 L939.473 692.83 L940.032 692.83 L940.592 692.83 L941.151 692.83 L941.71 692.83 L942.269 692.83 L942.829 692.83 L943.388 692.83 L943.947 692.83 L944.506 692.83 L945.066 692.83 L945.625 692.83 L946.184 692.83 L946.743 692.83 L947.303 692.83 L947.862 692.83 L948.421 692.83 L948.98 692.83 L949.54 692.83 L950.099 692.83 L950.658 692.83 L951.217 692.83 L951.777 692.83 L952.336 692.83 L952.895 692.83 L953.454 692.83 L954.014 692.83 L954.573 692.83 L955.132 692.83 L955.691 692.83 L956.251 692.83 L956.81 692.83 L957.369 692.83 L957.928 692.83 L958.488 692.83 L959.047 692.83 L959.606 692.83 L960.165 692.83 L960.725 692.83 L961.284 692.83 L961.843 692.83 L962.402 692.83 L962.962 692.83 L963.521 692.83 L964.08 692.83 L964.639 692.83 L965.199 692.83 L965.758 692.83 L966.317 692.83 L966.876 692.83 L967.436 692.83 L967.995 692.83 L968.554 692.83 L969.113 692.83 L969.673 692.83 L970.232 692.83 L970.791 692.83 L971.35 692.83 L971.91 692.83 L972.469 692.83 L973.028 692.83 L973.587 692.83 L974.147 692.83 L974.706 692.83 L975.265 692.83 L975.824 692.83 L976.384 692.83 L976.943 692.83 L977.502 692.83 L978.061 692.83 L978.621 692.83 L979.18 692.83 L979.739 692.83 L980.298 692.83 L980.858 692.83 L981.417 692.83 L981.976 692.83 L982.535 692.83 L983.095 692.83 L983.654 692.83 L984.213 692.83 L984.772 692.83 L985.332 692.83 L985.891 692.83 L986.45 692.83 L987.009 692.83 L987.569 692.83 L988.128 692.83 L988.687 692.83 L989.246 692.83 L989.806 692.83 L990.365 692.83 L990.924 692.83 L991.483 692.83 L992.043 692.83 L992.602 692.83 L993.161 692.83 L993.72 692.83 L994.28 692.83 L994.839 692.83 L995.398 692.83 L995.957 692.83 L996.517 692.83 L997.076 692.83 L997.635 692.83 L998.194 692.83 L998.754 692.83 L999.313 692.83 L999.872 692.83 L1000.43 692.83 L1000.99 692.83 L1001.55 692.83 L1002.11 692.83 L1002.67 692.83 L1003.23 692.83 L1003.79 692.83 L1004.35 692.83 L1004.91 692.83 L1005.46 692.83 L1006.02 692.83 L1006.58 692.83 L1007.14 692.83 L1007.7 692.83 L1008.26 692.83 L1008.82 692.83 L1009.38 692.83 L1009.94 692.83 L1010.5 692.83 L1011.06 692.83 L1011.62 692.83 L1012.18 692.83 L1012.73 692.83 L1013.29 692.83 L1013.85 692.83 L1014.41 692.83 L1014.97 692.83 L1015.53 692.83 L1016.09 692.83 L1016.65 692.83 L1017.21 692.83 L1017.77 692.83 L1018.33 692.83 L1018.89 692.83 L1019.45 692.83 L1020.01 692.83 L1020.56 692.83 L1021.12 692.83 L1021.68 692.83 L1022.24 692.83 L1022.8 692.83 L1023.36 692.83 L1023.92 692.83 L1024.48 692.83 L1025.04 692.83 L1025.6 692.83 L1026.16 692.83 L1026.72 692.83 L1027.28 692.83 L1027.83 692.83 L1028.39 692.83 L1028.95 692.83 L1029.51 692.83 L1030.07 692.83 L1030.63 692.83 L1031.19 692.83 L1031.75 692.83 L1032.31 692.83 L1032.87 692.83 L1033.43 692.83 L1033.99 692.83 L1034.55 692.83 L1035.1 692.83 L1035.66 692.83 L1036.22 692.83 L1036.78 692.83 L1037.34 692.83 L1037.9 692.83 L1038.46 692.83 L1039.02 692.83 L1039.58 692.83 L1040.14 692.83 L1040.7 692.83 L1041.26 692.83 L1041.82 692.83 L1042.38 692.83 L1042.93 692.83 L1043.49 692.83 L1044.05 692.83 L1044.61 692.83 L1045.17 692.83 L1045.73 692.83 L1046.29 692.83 L1046.85 692.83 L1047.41 692.83 L1047.97 692.83 L1048.53 692.83 L1049.09 692.83 L1049.65 692.83 L1050.2 692.83 L1050.76 692.83 L1051.32 692.83 L1051.88 692.83 L1052.44 692.83 L1053 692.83 L1053.56 692.83 L1054.12 692.83 L1054.68 692.83 L1055.24 692.83 L1055.8 692.83 L1056.36 692.83 L1056.92 692.83 L1057.48 692.83 L1058.03 692.83 L1058.59 692.83 L1059.15 692.83 L1059.71 692.83 L1060.27 692.83 L1060.83 692.83 L1061.39 692.83 L1061.95 692.83 L1062.51 692.83 L1063.07 692.83 L1063.63 692.83 L1064.19 692.83 L1064.75 692.83 L1065.3 692.83 L1065.86 692.83 L1066.42 692.83 L1066.98 692.83 L1067.54 692.83 L1068.1 692.83 L1068.66 692.83 L1069.22 692.83 L1069.78 692.83 L1070.34 692.83 L1070.9 692.83 L1071.46 692.83 L1072.02 692.83 L1072.57 692.83 L1073.13 692.83 L1073.69 692.83 L1074.25 692.83 L1074.81 692.83 L1075.37 692.83 L1075.93 692.83 L1076.49 692.83 L1077.05 692.83 L1077.61 692.83 L1078.17 692.83 L1078.73 692.83 L1079.29 692.83 L1079.85 692.83 L1080.4 692.83 L1080.96 692.83 L1081.52 692.83 L1082.08 692.83 L1082.64 692.83 L1083.2 692.83 L1083.76 692.83 L1084.32 692.83 L1084.88 692.83 L1085.44 692.83 L1086 692.83 L1086.56 692.83 L1087.12 692.83 L1087.67 692.83 L1088.23 692.83 L1088.79 692.83 L1089.35 692.83 L1089.91 692.83 L1090.47 692.83 L1091.03 692.83 L1091.59 692.83 L1092.15 692.83 L1092.71 692.83 L1093.27 692.83 L1093.83 692.83 L1094.39 692.83 L1094.94 692.83 L1095.5 692.83 L1096.06 692.83 L1096.62 692.83 L1097.18 692.83 L1097.74 692.83 L1098.3 692.83 L1098.86 692.83 L1099.42 692.83 L1099.98 692.83 L1100.54 692.83 L1101.1 692.83 L1101.66 692.83 L1102.22 692.83 L1102.77 692.83 L1103.33 692.83 L1103.89 692.83 L1104.45 692.83 L1105.01 692.83 L1105.57 692.83 L1106.13 692.83 L1106.69 692.83 L1107.25 692.83 L1107.81 692.83 L1108.37 692.83 L1108.93 692.83 L1109.49 692.83 L1110.04 692.83 L1110.6 692.83 L1111.16 692.83 L1111.72 692.83 L1112.28 692.83 L1112.84 692.83 L1113.4 692.83 L1113.96 692.83 L1114.52 692.83 L1115.08 692.83 L1115.64 692.83 L1116.2 692.83 L1116.76 692.83 L1117.31 692.83 L1117.87 692.83 L1118.43 692.83 L1118.99 692.83 L1119.55 692.83 L1120.11 692.83 L1120.67 692.83 L1121.23 692.83 L1121.79 692.83 L1122.35 692.83 L1122.91 692.83 L1123.47 692.83 L1124.03 692.83 L1124.59 692.83 L1125.14 692.83 L1125.7 692.83 L1126.26 692.83 L1126.82 692.83 L1127.38 692.83 L1127.94 692.83 L1128.5 692.83 L1129.06 692.83 L1129.62 692.83 L1130.18 692.83 L1130.74 692.83 L1131.3 692.83 L1131.86 692.83 L1132.41 692.83 L1132.97 692.83 L1133.53 692.83 L1134.09 692.83 L1134.65 692.83 L1135.21 692.83 L1135.77 692.83 L1136.33 692.83 L1136.89 692.83 L1137.45 692.83 L1138.01 692.83 L1138.57 692.83 L1139.13 692.83 L1139.68 692.83 L1140.24 692.83 L1140.8 692.83 L1141.36 692.83 L1141.92 692.83 L1142.48 692.83 L1143.04 692.83 L1143.6 692.83 L1144.16 692.83 L1144.72 692.83 L1145.28 692.83 L1145.84 692.83 L1146.4 692.83 L1146.96 692.83 L1147.51 692.83 L1148.07 692.83 L1148.63 692.83 L1149.19 692.83 L1149.75 692.83 L1150.31 692.83 L1150.87 692.83 L1151.43 692.83 L1151.99 692.83 L1152.55 692.83 L1153.11 692.83 L1153.67 692.83 L1154.23 692.83 L1154.78 692.83 L1155.34 692.83 L1155.9 692.83 L1156.46 692.83 L1157.02 692.83 L1157.58 692.83 L1158.14 692.83 L1158.7 692.83 L1159.26 692.83 L1159.82 692.83 L1160.38 692.83 L1160.94 692.83 L1161.5 692.83 L1162.05 692.83 L1162.61 692.83 L1163.17 692.83 L1163.73 692.83 L1164.29 692.83 L1164.85 692.83 L1165.41 692.83 L1165.97 692.83 L1166.53 692.83 L1167.09 692.83 L1167.65 692.83 L1168.21 692.83 L1168.77 692.83 L1169.33 692.83 L1169.88 692.83 L1170.44 692.83 L1171 692.83 L1171.56 692.83 L1172.12 692.83 L1172.68 692.83 L1173.24 692.83 L1173.8 692.83 L1174.36 692.83 L1174.92 692.83 L1175.48 692.83 L1176.04 692.83 L1176.6 692.83 L1177.15 692.83 L1177.71 692.83 L1178.27 692.83 L1178.83 692.83 L1179.39 692.83 L1179.95 692.83 L1180.51 692.83 L1181.07 692.83 L1181.63 692.83 L1182.19 692.83 L1182.75 692.83 L1183.31 692.83 L1183.87 692.83 L1184.43 692.83 L1184.98 692.83 L1185.54 692.83 L1186.1 692.83 L1186.66 692.83 L1187.22 692.83 L1187.78 692.83 L1188.34 692.83 L1188.9 692.83 L1189.46 692.83 L1190.02 692.83 L1190.58 692.83 L1191.14 692.83 L1191.7 692.83 L1192.25 692.83 L1192.81 692.83 L1193.37 692.83 L1193.93 692.83 L1194.49 692.83 L1195.05 692.83 L1195.61 692.83 L1196.17 692.83 L1196.73 692.83 L1197.29 692.83 L1197.85 692.83 L1198.41 692.83 L1198.97 692.83 L1199.52 692.83 L1200.08 692.83 L1200.64 692.83 L1201.2 692.83 L1201.76 692.83 L1202.32 692.83 L1202.88 692.83 L1203.44 692.83 L1204 692.83 L1204.56 692.83 L1205.12 692.83 L1205.68 692.83 L1206.24 692.83 L1206.8 692.83 L1207.35 692.83 L1207.91 692.83 L1208.47 692.83 L1209.03 692.83 L1209.59 692.83 L1210.15 692.83 L1210.71 692.83 L1211.27 692.83 L1211.83 692.83 L1212.39 692.83 L1212.95 692.83 L1213.51 692.83 L1214.07 692.83 L1214.62 692.83 L1215.18 692.83 L1215.74 692.83 L1216.3 692.83 L1216.86 692.83 L1217.42 692.83 L1217.98 692.83 L1218.54 692.83 L1219.1 692.83 L1219.66 692.83 L1220.22 692.83 L1220.78 692.83 L1221.34 692.83 L1221.89 692.83 L1222.45 692.83 L1223.01 692.83 L1223.57 692.83 L1224.13 692.83 L1224.69 692.83 L1225.25 692.83 L1225.81 692.83 L1226.37 692.83 L1226.93 692.83 L1227.49 692.83 L1228.05 692.83 L1228.61 692.83 L1229.17 692.83 L1229.72 692.83 L1230.28 692.83 L1230.84 692.83 L1231.4 692.83 L1231.96 692.83 L1232.52 692.83 L1233.08 692.83 L1233.64 692.83 L1234.2 692.83 L1234.76 692.83 L1235.32 692.83 L1235.88 692.83 L1236.44 692.83 L1236.99 692.83 L1237.55 692.83 L1238.11 692.83 L1238.67 692.83 L1239.23 692.83 L1239.79 692.83 L1240.35 692.83 L1240.91 692.83 L1241.47 692.83 L1242.03 692.83 L1242.59 692.83 L1243.15 692.83 L1243.71 692.83 L1244.26 692.83 L1244.82 692.83 L1245.38 692.83 L1245.94 692.83 L1246.5 692.83 L1247.06 692.83 L1247.62 692.83 L1248.18 692.83 L1248.74 692.83 L1249.3 692.83 L1249.86 692.83 L1250.42 692.83 L1250.98 692.83 L1251.54 692.83 L1252.09 692.83 L1252.65 692.83 L1253.21 692.83 L1253.77 692.83 L1254.33 692.83 L1254.89 692.83 L1255.45 692.83 L1256.01 692.83 L1256.57 692.83 L1257.13 692.83 L1257.69 692.83 L1258.25 692.83 L1258.81 692.83 L1259.36 692.83 L1259.92 692.83 L1260.48 692.83 L1261.04 692.83 L1261.6 692.83 L1262.16 692.83 L1262.72 692.83 L1263.28 692.83 L1263.84 692.83 L1264.4 692.83 L1264.96 692.83 L1265.52 692.83 L1266.08 692.83 L1266.63 692.83 L1267.19 692.83 L1267.75 692.83 L1268.31 692.83 L1268.87 692.83 L1269.43 692.83 L1269.99 692.83 L1270.55 692.83 L1271.11 692.83 L1271.67 692.83 L1272.23 692.83 L1272.79 692.83 L1273.35 692.83 L1273.91 692.83 L1274.46 692.83 L1275.02 692.83 L1275.58 692.83 L1276.14 692.83 L1276.7 692.83 L1277.26 692.83 L1277.82 692.83 L1278.38 692.83 L1278.94 692.83 L1279.5 692.83 L1280.06 692.83 L1280.62 692.83 L1281.18 692.83 L1281.73 692.83 L1282.29 692.83 L1282.85 692.83 L1283.41 692.83 L1283.97 692.83 L1284.53 692.83 L1285.09 692.83 L1285.65 692.83 L1286.21 692.83 L1286.77 692.83 L1287.33 692.83 L1287.89 692.83 L1288.45 692.83 L1289 692.83 L1289.56 692.83 L1290.12 692.83 L1290.68 692.83 L1291.24 692.83 L1291.8 692.83 L1292.36 692.83 L1292.92 692.83 L1293.48 692.83 L1294.04 692.83 L1294.6 692.83 L1295.16 692.83 L1295.72 692.83 L1296.28 692.83 L1296.83 692.83 L1297.39 692.83 L1297.95 692.83 L1298.51 692.83 L1299.07 692.83 L1299.63 692.83 L1300.19 692.83 L1300.75 692.83 L1301.31 692.83 L1301.87 692.83 L1302.43 692.83 L1302.99 692.83 L1303.55 692.83 L1304.1 692.83 L1304.66 692.83 L1305.22 692.83 L1305.78 692.83 L1306.34 692.83 L1306.9 692.83 L1307.46 692.83 L1308.02 692.83 L1308.58 692.83 L1309.14 692.83 L1309.7 692.83 L1310.26 692.83 L1310.82 692.83 L1311.38 692.83 L1311.93 692.83 L1312.49 692.83 L1313.05 692.83 L1313.61 692.83 L1314.17 692.83 L1314.73 692.83 L1315.29 692.83 L1315.85 692.83 L1316.41 692.83 L1316.97 692.83 L1317.53 692.83 L1318.09 692.83 L1318.65 692.83 L1319.2 692.83 L1319.76 692.83 L1320.32 692.83 L1320.88 692.83 L1321.44 692.83 L1322 692.83 L1322.56 692.83 L1323.12 692.83 L1323.68 692.83 L1324.24 692.83 L1324.8 692.83 L1325.36 692.83 L1325.92 692.83 L1326.47 692.83 L1327.03 692.83 L1327.59 692.83 L1328.15 692.83 L1328.71 692.83 L1329.27 692.83 L1329.83 692.83 L1330.39 692.83 L1330.95 692.83 L1331.51 692.83 L1332.07 692.83 L1332.63 692.83 L1333.19 692.83 L1333.75 692.83 L1334.3 692.83 L1334.86 692.83 L1335.42 692.83 L1335.98 692.83 L1336.54 692.83 L1337.1 692.83 L1337.66 692.83 L1338.22 692.83 L1338.78 692.83 L1339.34 692.83 L1339.9 692.83 L1340.46 692.83 L1341.02 692.83 L1341.57 692.83 L1342.13 692.83 L1342.69 692.83 L1343.25 692.83 L1343.81 692.83 L1344.37 692.83 L1344.93 692.83 L1345.49 692.83 L1346.05 692.83 L1346.61 692.83 L1347.17 692.83 L1347.73 692.83 L1348.29 692.83 L1348.84 692.83 L1349.4 692.83 L1349.96 692.83 L1350.52 692.83 L1351.08 692.83 L1351.64 692.83 L1352.2 692.83 L1352.76 692.83 L1353.32 692.83 L1353.88 692.83 L1354.44 692.83 L1355 692.83 L1355.56 692.83 L1356.12 692.83 L1356.67 692.83 L1357.23 692.83 L1357.79 692.83 L1358.35 692.83 L1358.91 692.83 L1359.47 692.83 L1360.03 692.83 L1360.59 692.83 L1361.15 692.83 L1361.71 692.83 L1362.27 692.83 L1362.83 692.83 L1363.39 692.83 L1363.94 692.83 L1364.5 692.83 L1365.06 692.83 L1365.62 692.83 L1366.18 692.83 L1366.74 692.83 L1367.3 692.83 L1367.86 692.83 L1368.42 692.83 L1368.98 692.83 L1369.54 692.83 L1370.1 692.83 L1370.66 692.83 L1371.21 692.83 L1371.77 692.83 L1372.33 692.83 L1372.89 692.83 L1373.45 692.83 L1374.01 692.83 L1374.57 692.83 L1375.13 692.83 L1375.69 692.83 L1376.25 692.83 L1376.81 692.83 L1377.37 692.83 L1377.93 692.83 L1378.49 692.83 L1379.04 692.83 L1379.6 692.83 L1380.16 692.83 L1380.72 692.83 L1381.28 692.83 L1381.84 692.83 L1382.4 692.83 L1382.96 692.83 L1383.52 692.83 L1384.08 692.83 L1384.64 692.83 L1385.2 692.83 L1385.76 692.83 L1386.31 692.83 L1386.87 692.83 L1387.43 692.83 L1387.99 692.83 L1388.55 692.83 L1389.11 692.83 L1389.67 692.83 L1390.23 692.83 L1390.79 692.83 L1391.35 692.83 L1391.91 692.83 L1392.47 692.83 L1393.03 692.83 L1393.58 692.83 L1394.14 692.83 L1394.7 692.83 L1395.26 692.83 L1395.82 692.83 L1396.38 692.83 L1396.94 692.83 L1397.5 692.83 L1398.06 692.83 L1398.62 692.83 L1399.18 692.83 L1399.74 692.83 L1400.3 692.83 L1400.86 692.83 L1401.41 692.83 L1401.97 692.83 L1402.53 692.83 L1403.09 692.83 L1403.65 692.83 L1404.21 692.83 L1404.77 692.83 L1405.33 692.83 L1405.89 692.83 L1406.45 692.83 L1407.01 692.83 L1407.57 692.83 L1408.13 692.83 L1408.68 692.83 L1409.24 692.83 L1409.8 692.83 L1410.36 692.83 L1410.92 692.83 L1411.48 692.83 L1412.04 692.83 L1412.6 692.83 L1413.16 692.83 L1413.72 692.83 L1414.28 692.83 L1414.84 692.83 L1415.4 692.83 L1415.95 692.83 L1416.51 692.83 L1417.07 692.83 L1417.63 692.83 L1418.19 692.83 L1418.75 692.83 L1419.31 692.83 L1419.87 692.83 L1420.43 692.83 L1420.99 692.83 L1421.55 692.83 L1422.11 692.83 L1422.67 692.83 L1423.23 692.83 L1423.78 692.83 L1424.34 692.83 L1424.9 692.83 L1425.46 692.83 L1426.02 692.83 L1426.58 692.83 L1427.14 692.83 L1427.7 692.83 L1428.26 692.83 L1428.82 692.83 L1429.38 692.83 L1429.94 692.83 L1430.5 692.83 L1431.05 692.83 L1431.61 692.83 L1432.17 692.83 L1432.73 692.83 L1433.29 692.83 L1433.85 692.83 L1434.41 692.83 L1434.97 692.83 L1435.53 692.83 L1436.09 692.83 L1436.65 692.83 L1437.21 692.83 L1437.77 692.83 L1438.33 692.83 L1438.88 692.83 L1439.44 692.83 L1440 692.83 L1440.56 692.83 L1441.12 692.83 L1441.68 692.83 L1442.24 692.83 L1442.8 692.83 L1443.36 692.83 L1443.92 692.83 L1444.48 692.83 L1445.04 692.83 L1445.6 692.83 L1446.15 692.83 L1446.71 692.83 L1447.27 692.83 L1447.83 692.83 L1448.39 692.83 L1448.95 692.83 L1449.51 692.83 L1450.07 692.83 L1450.63 692.83 L1451.19 692.83 L1451.75 692.83 L1452.31 692.83 L1452.87 692.83 L1453.42 692.83 L1453.98 692.83 L1454.54 692.83 L1455.1 692.83 L1455.66 692.83 L1456.22 692.83 L1456.78 692.83 L1457.34 692.83 L1457.9 692.83 L1458.46 692.83 L1459.02 692.83 L1459.58 692.83 L1460.14 692.83 L1460.7 692.83 L1461.25 692.83 L1461.81 692.83 L1462.37 692.83 L1462.93 692.83 L1463.49 692.83 L1464.05 692.83 L1464.61 692.83 L1465.17 692.83 L1465.73 692.83 L1466.29 692.83 L1466.85 692.83 L1467.41 692.83 L1467.97 692.83 L1468.52 692.83 L1469.08 692.83 L1469.64 692.83 L1470.2 692.83 L1470.76 692.83 L1471.32 692.83 L1471.88 692.83 L1472.44 692.83 L1473 692.83 L1473.56 692.83 L1474.12 692.83 L1474.68 692.83 L1475.24 692.83 L1475.79 692.83 L1476.35 692.83 L1476.91 692.83 L1477.47 692.83 L1478.03 692.83 L1478.59 692.83 L1479.15 692.83 L1479.71 692.83 L1480.27 692.83 L1480.83 692.83 L1481.39 692.83 L1481.95 692.83 L1482.51 692.83 L1483.07 692.83 L1483.62 692.83 L1484.18 692.83 L1484.74 692.83 L1485.3 692.83 L1485.86 692.83 L1486.42 692.83 L1486.98 692.83 L1487.54 692.83 L1488.1 692.83 L1488.66 692.83 L1489.22 692.83 L1489.78 692.83 L1490.34 692.83 L1490.89 692.83 L1491.45 692.83 L1492.01 692.83 L1492.57 692.83 L1493.13 692.83 L1493.69 692.83 L1494.25 692.83 L1494.81 692.83 L1495.37 692.83 L1495.93 692.83 L1496.49 692.83 L1497.05 692.83 L1497.61 692.83 L1498.16 692.83 L1498.72 692.83 L1499.28 692.83 L1499.84 692.83 L1500.4 692.83 L1500.96 692.83 L1501.52 692.83 L1502.08 692.83 L1502.64 692.83 L1503.2 692.83 L1503.76 692.83 L1504.32 692.83 L1504.88 692.83 L1505.44 692.83 L1505.99 692.83 L1506.55 692.83 L1507.11 692.83 L1507.67 692.83 L1508.23 692.83 L1508.79 692.83 L1509.35 692.83 L1509.91 692.83 L1510.47 692.83 L1511.03 692.83 L1511.59 692.83 L1512.15 692.83 L1512.71 692.83 L1513.26 692.83 L1513.82 692.83 L1514.38 692.83 L1514.94 692.83 L1515.5 692.83 L1516.06 692.83 L1516.62 692.83 L1517.18 692.83 L1517.74 692.83 L1518.3 692.83 L1518.86 692.83 L1519.42 692.83 L1519.98 692.83 L1520.53 692.83 L1521.09 692.83 L1521.65 692.83 L1522.21 692.83 L1522.77 692.83 L1523.33 692.83 L1523.89 692.83 L1524.45 692.83 L1525.01 692.83 L1525.57 692.83 L1526.13 692.83 L1526.69 692.83 L1527.25 692.83 L1527.81 692.83 L1528.36 692.83 L1528.92 692.83 L1529.48 692.83 L1530.04 692.83 L1530.6 692.83 L1531.16 692.83 L1531.72 692.83 L1532.28 692.83 L1532.84 692.83 L1533.4 692.83 L1533.96 692.83 L1534.52 692.83 L1535.08 692.83 L1535.63 692.83 L1536.19 692.83 L1536.75 692.83 L1537.31 692.83 L1537.87 692.83 L1538.43 692.83 L1538.99 692.83 L1539.55 692.83 L1540.11 692.83 L1540.67 692.83 L1541.23 692.83 L1541.79 692.83 L1542.35 692.83 L1542.9 692.83 L1543.46 692.83 L1544.02 692.83 L1544.58 692.83 L1545.14 692.83 L1545.7 692.83 L1546.26 692.83 L1546.82 692.83 L1547.38 692.83 L1547.94 692.83 L1548.5 692.83 L1549.06 692.83 L1549.62 692.83 L1550.18 692.83 L1550.73 692.83 L1551.29 692.83 L1551.85 692.83 L1552.41 692.83 L1552.97 692.83 L1553.53 692.83 L1554.09 692.83 L1554.65 692.83 L1555.21 692.83 L1555.77 692.83 L1556.33 692.83 L1556.89 692.83 L1557.45 692.83 L1558 692.83 L1558.56 692.83 L1559.12 692.83 L1559.68 692.83 L1560.24 692.83 L1560.8 692.83 L1561.36 692.83 L1561.92 692.83 L1562.48 692.83 L1563.04 692.83 L1563.6 692.83 L1564.16 692.83 L1564.72 692.83 L1565.28 692.83 L1565.83 692.83 L1566.39 692.83 L1566.95 692.83 L1567.51 692.83 L1568.07 692.83 L1568.63 692.83 L1569.19 692.83 L1569.75 692.83 L1570.31 692.83 L1570.87 692.83 L1571.43 692.83 L1571.99 692.83 L1572.55 692.83 L1573.1 692.83 L1573.66 692.83 L1574.22 692.83 L1574.78 692.83 L1575.34 692.83 L1575.9 692.83 L1576.46 692.83 L1577.02 692.83 L1577.58 692.83 L1578.14 692.83 L1578.7 692.83 L1579.26 692.83 L1579.82 692.83 L1580.37 692.83 L1580.93 692.83 L1581.49 692.83 L1582.05 692.83 L1582.61 692.83 L1583.17 692.83 L1583.73 692.83 L1584.29 692.83 L1584.85 692.83 L1585.41 692.83 L1585.97 692.83 L1586.53 692.83 L1587.09 692.83 L1587.65 692.83 L1588.2 692.83 L1588.76 692.83 L1589.32 692.83 L1589.88 692.83 L1590.44 692.83 L1591 692.83 L1591.56 692.83 L1592.12 692.83 L1592.68 692.83 L1593.24 692.83 L1593.8 692.83 L1594.36 692.83 L1594.92 692.83 L1595.47 692.83 L1596.03 692.83 L1596.59 692.83 L1597.15 692.83 L1597.71 692.83 L1598.27 692.83 L1598.83 692.83 L1599.39 692.83 L1599.95 692.83 L1600.51 692.83 L1601.07 692.83 L1601.63 692.83 L1602.19 692.83 L1602.74 692.83 L1603.3 692.83 L1603.86 692.83 L1604.42 692.83 L1604.98 692.83 L1605.54 692.83 L1606.1 692.83 L1606.66 692.83 L1607.22 692.83 L1607.78 692.83 L1608.34 692.83 L1608.9 692.83 L1609.46 692.83 L1610.02 692.83 L1610.57 692.83 L1611.13 692.83 L1611.69 692.83 L1612.25 692.83 L1612.81 692.83 L1613.37 692.83 L1613.93 692.83 L1614.49 692.83 L1615.05 692.83 L1615.61 692.83 L1616.17 692.83 L1616.73 692.83 L1617.29 692.83 L1617.84 692.83 L1618.4 692.83 L1618.96 692.83 L1619.52 692.83 L1620.08 692.83 L1620.64 692.83 L1621.2 692.83 L1621.76 692.83 L1622.32 692.83 L1622.88 692.83 L1623.44 692.83 L1624 692.83 L1624.56 692.83 L1625.11 692.83 L1625.67 692.83 L1626.23 692.83 L1626.79 692.83 L1627.35 692.83 L1627.91 692.83 L1628.47 692.83 L1629.03 692.83 L1629.59 692.83 L1630.15 692.83 L1630.71 692.83 L1631.27 692.83 L1631.83 692.83 L1632.39 692.83 L1632.94 692.83 L1633.5 692.83 L1634.06 692.83 L1634.62 692.83 L1635.18 692.83 L1635.74 692.83 L1636.3 692.83 L1636.86 692.83 L1637.42 692.83 L1637.98 692.83 L1638.54 692.83 L1639.1 692.83 L1639.66 692.83 L1640.21 692.83 L1640.77 692.83 L1641.33 692.83 L1641.89 692.83 L1642.45 692.83 L1643.01 692.83 L1643.57 692.83 L1644.13 692.83 L1644.69 692.83 L1645.25 692.83 L1645.81 692.83 L1646.37 692.83 L1646.93 692.83 L1647.48 692.83 L1648.04 692.83 L1648.6 692.83 L1649.16 692.83 L1649.72 692.83 L1650.28 692.83 L1650.84 692.83 L1651.4 692.83 L1651.96 692.83 L1652.52 692.83 L1653.08 692.83 L1653.64 692.83 L1654.2 692.83 L1654.76 692.83 L1655.31 692.83 L1655.87 692.83 L1656.43 692.83 L1656.99 692.83 L1657.55 692.83 L1658.11 692.83 L1658.67 692.83 L1659.23 692.83 L1659.79 692.83 L1660.35 692.83 L1660.91 692.83 L1661.47 692.83 L1662.03 692.83 L1662.58 692.83 L1663.14 692.83 L1663.7 692.83 L1664.26 692.83 L1664.82 692.83 L1665.38 692.83 L1665.94 692.83 L1666.5 692.83 L1667.06 692.83 L1667.62 692.83 L1668.18 692.83 L1668.74 692.83 L1669.3 692.83 L1669.85 692.83 L1670.41 692.83 L1670.97 692.83 L1671.53 692.83 L1672.09 692.83 L1672.65 692.83 L1673.21 692.83 L1673.77 692.83 L1674.33 692.83 L1674.89 692.83 L1675.45 692.83 L1676.01 692.83 L1676.57 692.83 L1677.13 692.83 L1677.68 692.83 L1678.24 692.83 L1678.8 692.83 L1679.36 692.83 L1679.92 692.83 L1680.48 692.83 L1681.04 692.83 L1681.6 692.83 L1682.16 692.83 L1682.72 692.83 L1683.28 692.83 L1683.84 692.83 L1684.4 692.83 L1684.95 692.83 L1685.51 692.83 L1686.07 692.83 L1686.63 692.83 L1687.19 692.83 L1687.75 692.83 L1688.31 692.83 L1688.87 692.83 L1689.43 692.83 L1689.99 692.83 L1690.55 692.83 L1691.11 692.83 L1691.67 692.83 L1692.23 692.83 L1692.78 692.83 L1693.34 692.83 L1693.9 692.83 L1694.46 692.83 L1695.02 692.83 L1695.58 692.83 L1696.14 692.83 L1696.7 692.83 L1697.26 692.83 L1697.82 692.83 L1698.38 692.83 L1698.94 692.83 L1699.5 692.83 L1700.05 692.83 L1700.61 692.83 L1701.17 692.83 L1701.73 692.83 L1702.29 692.83 L1702.85 692.83 L1703.41 692.83 L1703.97 692.83 L1704.53 692.83 L1705.09 692.83 L1705.65 692.83 L1706.21 692.83 L1706.77 692.83 L1707.32 692.83 L1707.88 692.83 L1708.44 692.83 L1709 692.83 L1709.56 692.83 L1710.12 692.83 L1710.68 692.83 L1711.24 692.83 L1711.8 692.83 L1712.36 692.83 L1712.92 692.83 L1713.48 692.83 L1714.04 692.83 L1714.6 692.83 L1715.15 692.83 L1715.71 692.83 L1716.27 692.83 L1716.83 692.83 L1717.39 692.83 L1717.95 692.83 L1718.51 692.83 L1719.07 692.83 L1719.63 692.83 L1720.19 692.83 L1720.75 692.83 L1721.31 692.83 L1721.87 692.83 L1722.42 692.83 L1722.98 692.83 L1723.54 692.83 L1724.1 692.83 L1724.66 692.83 L1725.22 692.83 L1725.78 692.83 L1726.34 692.83 L1726.9 692.83 L1727.46 692.83 L1728.02 692.83 L1728.58 692.83 L1729.14 692.83 L1729.69 692.83 L1730.25 692.83 L1730.81 692.83 L1731.37 692.83 L1731.93 692.83 L1732.49 692.83 L1733.05 692.83 L1733.61 692.83 L1734.17 692.83 L1734.73 692.83 L1735.29 692.83 L1735.85 692.83 L1736.41 692.83 L1736.97 692.83 L1737.52 692.83 L1738.08 692.83 L1738.64 692.83 L1739.2 692.83 L1739.76 692.83 L1740.32 692.83 L1740.88 692.83 L1741.44 692.83 L1742 692.83 L1742.56 692.83 L1743.12 692.83 L1743.68 692.83 L1744.24 692.83 L1744.79 692.83 L1745.35 692.83 L1745.91 692.83 L1746.47 692.83 L1747.03 692.83 L1747.59 692.83 L1748.15 692.83 L1748.71 692.83 L1749.27 692.83 L1749.83 692.83 L1750.39 692.83 L1750.95 692.83 L1751.51 692.83 L1752.06 692.83 L1752.62 692.83 L1753.18 692.83 L1753.74 692.83 L1754.3 692.83 L1754.86 692.83 L1755.42 692.83 L1755.98 692.83 L1756.54 692.83 L1757.1 692.83 L1757.66 692.83 L1758.22 692.83 L1758.78 692.83 L1759.34 692.83 L1759.89 692.83 L1760.45 692.83 L1761.01 692.83 L1761.57 692.83 L1762.13 692.83 L1762.69 692.83 L1763.25 692.83 L1763.81 692.83 L1764.37 692.83 L1764.93 692.83 L1765.49 692.83 L1766.05 692.83 L1766.61 692.83 L1767.16 692.83 L1767.72 692.83 L1768.28 692.83 L1768.84 692.83 L1769.4 692.83 L1769.96 692.83 L1770.52 692.83 L1771.08 692.83 L1771.64 692.83 L1772.2 692.83 L1772.76 692.83 L1773.32 692.83 L1773.88 692.83 L1774.43 692.83 L1774.99 692.83 L1775.55 692.83 L1776.11 692.83 L1776.67 692.83 L1777.23 692.83 L1777.79 692.83 L1778.35 692.83 L1778.91 692.83 L1779.47 692.83 L1780.03 692.83 L1780.59 692.83 L1781.15 692.83 L1781.71 692.83 L1782.26 692.83 L1782.82 692.83 L1783.38 692.83 L1783.94 692.83 L1784.5 692.83 L1785.06 692.83 L1785.62 692.83 L1786.18 692.83 L1786.74 692.83 L1787.3 692.83 L1787.86 692.83 L1788.42 692.83 L1788.98 692.83 L1789.53 692.83 L1790.09 692.83 L1790.65 692.83 L1791.21 692.83 L1791.77 692.83 L1792.33 692.83 L1792.89 692.83 L1793.45 692.83 L1794.01 692.83 L1794.57 692.83 L1795.13 692.83 L1795.69 692.83 L1796.25 692.83 L1796.8 692.83 L1797.36 692.83 L1797.92 692.83 L1798.48 692.83 L1799.04 692.83 L1799.6 692.83 L1800.16 692.83 L1800.72 692.83 L1801.28 692.83 L1801.84 692.83 L1802.4 692.83 L1802.96 692.83 L1803.52 692.83 L1804.08 692.83 L1804.63 692.83 L1805.19 692.83 L1805.75 692.83 L1806.31 692.83 L1806.87 692.83 L1807.43 692.83 L1807.99 692.83 L1808.55 692.83 L1809.11 692.83 L1809.67 692.83 L1810.23 692.83 L1810.79 692.83 L1811.35 692.83 L1811.9 692.83 L1812.46 692.83 L1813.02 692.83 L1813.58 692.83 L1814.14 692.83 L1814.7 692.83 L1815.26 692.83 L1815.82 692.83 L1816.38 692.83 L1816.94 692.83 L1817.5 692.83 L1818.06 692.83 L1818.62 692.83 L1819.18 692.83 L1819.73 692.83 L1820.29 692.83 L1820.85 692.83 L1821.41 692.83 L1821.97 692.83 L1822.53 692.83 L1823.09 692.83 L1823.65 692.83 L1824.21 692.83 L1824.77 692.83 L1825.33 692.83 L1825.89 692.83 L1826.45 692.83 L1827 692.83 L1827.56 692.83 L1828.12 692.83 L1828.68 692.83 L1829.24 692.83 L1829.8 692.83 L1830.36 692.83 L1830.92 692.83 L1831.48 692.83 L1832.04 692.83 L1832.6 692.83 L1833.16 692.83 L1833.72 692.83 L1834.27 692.83 L1834.83 692.83 L1835.39 692.83 L1835.95 692.83 L1836.51 692.83 L1837.07 692.83 L1837.63 692.83 L1838.19 692.83 L1838.19 684.102 L1837.63 684.102 L1837.07 684.102 L1836.51 684.102 L1835.95 684.102 L1835.39 684.102 L1834.83 684.102 L1834.27 684.102 L1833.72 684.102 L1833.16 684.102 L1832.6 684.102 L1832.04 684.102 L1831.48 684.102 L1830.92 684.102 L1830.36 684.102 L1829.8 684.102 L1829.24 684.102 L1828.68 684.102 L1828.12 684.102 L1827.56 684.102 L1827 684.102 L1826.45 684.102 L1825.89 684.102 L1825.33 684.102 L1824.77 684.102 L1824.21 684.102 L1823.65 684.102 L1823.09 684.102 L1822.53 684.102 L1821.97 684.102 L1821.41 684.102 L1820.85 684.102 L1820.29 684.102 L1819.73 684.102 L1819.18 684.102 L1818.62 684.102 L1818.06 684.102 L1817.5 684.102 L1816.94 684.102 L1816.38 684.102 L1815.82 684.102 L1815.26 684.102 L1814.7 684.102 L1814.14 684.102 L1813.58 684.102 L1813.02 684.102 L1812.46 684.102 L1811.9 684.102 L1811.35 684.102 L1810.79 684.102 L1810.23 684.102 L1809.67 684.102 L1809.11 684.102 L1808.55 684.102 L1807.99 684.102 L1807.43 684.102 L1806.87 684.102 L1806.31 684.102 L1805.75 684.102 L1805.19 684.102 L1804.63 684.102 L1804.08 684.102 L1803.52 684.102 L1802.96 684.102 L1802.4 684.102 L1801.84 684.102 L1801.28 684.102 L1800.72 684.102 L1800.16 684.102 L1799.6 684.102 L1799.04 684.102 L1798.48 684.102 L1797.92 684.102 L1797.36 684.102 L1796.8 684.102 L1796.25 684.102 L1795.69 684.102 L1795.13 684.102 L1794.57 684.102 L1794.01 684.102 L1793.45 684.102 L1792.89 684.102 L1792.33 684.102 L1791.77 684.102 L1791.21 684.102 L1790.65 684.102 L1790.09 684.102 L1789.53 684.102 L1788.98 684.102 L1788.42 684.102 L1787.86 684.102 L1787.3 684.102 L1786.74 684.102 L1786.18 684.102 L1785.62 684.102 L1785.06 684.102 L1784.5 684.102 L1783.94 684.102 L1783.38 684.102 L1782.82 684.102 L1782.26 684.102 L1781.71 684.102 L1781.15 684.102 L1780.59 684.102 L1780.03 684.102 L1779.47 684.102 L1778.91 684.102 L1778.35 684.102 L1777.79 684.102 L1777.23 684.102 L1776.67 684.102 L1776.11 684.102 L1775.55 684.102 L1774.99 684.102 L1774.43 684.102 L1773.88 684.102 L1773.32 684.102 L1772.76 684.102 L1772.2 684.102 L1771.64 684.102 L1771.08 684.102 L1770.52 684.102 L1769.96 684.102 L1769.4 684.102 L1768.84 684.102 L1768.28 684.102 L1767.72 684.102 L1767.16 684.102 L1766.61 684.102 L1766.05 684.102 L1765.49 684.102 L1764.93 684.102 L1764.37 684.102 L1763.81 684.102 L1763.25 684.102 L1762.69 684.102 L1762.13 684.102 L1761.57 684.102 L1761.01 684.102 L1760.45 684.102 L1759.89 684.102 L1759.34 684.102 L1758.78 684.102 L1758.22 684.102 L1757.66 684.102 L1757.1 684.102 L1756.54 684.102 L1755.98 684.102 L1755.42 684.102 L1754.86 684.102 L1754.3 684.102 L1753.74 684.102 L1753.18 684.102 L1752.62 684.102 L1752.06 684.102 L1751.51 684.102 L1750.95 684.102 L1750.39 684.102 L1749.83 684.102 L1749.27 684.102 L1748.71 684.102 L1748.15 684.102 L1747.59 684.102 L1747.03 684.102 L1746.47 684.102 L1745.91 684.102 L1745.35 684.102 L1744.79 684.102 L1744.24 684.102 L1743.68 684.102 L1743.12 684.102 L1742.56 684.102 L1742 684.102 L1741.44 684.102 L1740.88 684.102 L1740.32 684.102 L1739.76 684.102 L1739.2 684.102 L1738.64 684.102 L1738.08 684.102 L1737.52 684.102 L1736.97 684.102 L1736.41 684.102 L1735.85 684.102 L1735.29 684.102 L1734.73 684.102 L1734.17 684.102 L1733.61 684.102 L1733.05 684.102 L1732.49 684.102 L1731.93 684.102 L1731.37 684.102 L1730.81 684.102 L1730.25 684.102 L1729.69 684.102 L1729.14 684.102 L1728.58 684.102 L1728.02 684.102 L1727.46 684.102 L1726.9 684.102 L1726.34 684.102 L1725.78 684.102 L1725.22 684.102 L1724.66 684.102 L1724.1 684.102 L1723.54 684.102 L1722.98 684.102 L1722.42 684.102 L1721.87 684.102 L1721.31 684.102 L1720.75 684.102 L1720.19 684.102 L1719.63 684.102 L1719.07 684.102 L1718.51 684.102 L1717.95 684.102 L1717.39 684.102 L1716.83 684.102 L1716.27 684.102 L1715.71 684.102 L1715.15 684.102 L1714.6 684.102 L1714.04 684.102 L1713.48 684.102 L1712.92 684.102 L1712.36 684.102 L1711.8 684.102 L1711.24 684.102 L1710.68 684.102 L1710.12 684.102 L1709.56 684.102 L1709 684.102 L1708.44 684.102 L1707.88 684.102 L1707.32 684.102 L1706.77 684.102 L1706.21 684.102 L1705.65 684.102 L1705.09 684.102 L1704.53 684.102 L1703.97 684.102 L1703.41 684.102 L1702.85 684.102 L1702.29 684.102 L1701.73 684.102 L1701.17 684.102 L1700.61 684.102 L1700.05 684.102 L1699.5 684.102 L1698.94 684.102 L1698.38 684.102 L1697.82 684.102 L1697.26 684.102 L1696.7 684.102 L1696.14 684.102 L1695.58 684.102 L1695.02 684.102 L1694.46 684.102 L1693.9 684.102 L1693.34 684.102 L1692.78 684.102 L1692.23 684.102 L1691.67 684.102 L1691.11 684.102 L1690.55 684.102 L1689.99 684.102 L1689.43 684.102 L1688.87 684.102 L1688.31 684.102 L1687.75 684.102 L1687.19 684.102 L1686.63 684.102 L1686.07 684.102 L1685.51 684.102 L1684.95 684.102 L1684.4 684.102 L1683.84 684.102 L1683.28 684.102 L1682.72 684.102 L1682.16 684.102 L1681.6 684.102 L1681.04 684.102 L1680.48 684.102 L1679.92 684.102 L1679.36 684.102 L1678.8 684.102 L1678.24 684.102 L1677.68 684.102 L1677.13 684.102 L1676.57 684.102 L1676.01 684.102 L1675.45 684.102 L1674.89 684.102 L1674.33 684.102 L1673.77 684.102 L1673.21 684.102 L1672.65 684.102 L1672.09 684.102 L1671.53 684.102 L1670.97 684.102 L1670.41 684.102 L1669.85 684.102 L1669.3 684.102 L1668.74 684.102 L1668.18 684.102 L1667.62 684.102 L1667.06 684.102 L1666.5 684.102 L1665.94 684.102 L1665.38 684.102 L1664.82 684.102 L1664.26 684.102 L1663.7 684.102 L1663.14 684.102 L1662.58 684.102 L1662.03 684.102 L1661.47 684.102 L1660.91 684.102 L1660.35 684.102 L1659.79 684.102 L1659.23 684.102 L1658.67 684.102 L1658.11 684.102 L1657.55 684.102 L1656.99 684.102 L1656.43 684.102 L1655.87 684.102 L1655.31 684.102 L1654.76 684.102 L1654.2 684.102 L1653.64 684.102 L1653.08 684.102 L1652.52 684.102 L1651.96 684.102 L1651.4 684.102 L1650.84 684.102 L1650.28 684.102 L1649.72 684.102 L1649.16 684.102 L1648.6 684.102 L1648.04 684.102 L1647.48 684.102 L1646.93 684.102 L1646.37 684.102 L1645.81 684.102 L1645.25 684.102 L1644.69 684.102 L1644.13 684.102 L1643.57 684.102 L1643.01 684.102 L1642.45 684.102 L1641.89 684.102 L1641.33 684.102 L1640.77 684.102 L1640.21 684.102 L1639.66 684.102 L1639.1 684.102 L1638.54 684.102 L1637.98 684.102 L1637.42 684.102 L1636.86 684.102 L1636.3 684.102 L1635.74 684.102 L1635.18 684.102 L1634.62 684.102 L1634.06 684.102 L1633.5 684.102 L1632.94 684.102 L1632.39 684.102 L1631.83 684.102 L1631.27 684.102 L1630.71 684.102 L1630.15 684.102 L1629.59 684.102 L1629.03 684.102 L1628.47 684.102 L1627.91 684.102 L1627.35 684.102 L1626.79 684.102 L1626.23 684.102 L1625.67 684.102 L1625.11 684.102 L1624.56 684.102 L1624 684.102 L1623.44 684.102 L1622.88 684.102 L1622.32 684.102 L1621.76 684.102 L1621.2 684.102 L1620.64 684.102 L1620.08 684.102 L1619.52 684.102 L1618.96 684.102 L1618.4 684.102 L1617.84 684.102 L1617.29 684.102 L1616.73 684.102 L1616.17 684.102 L1615.61 684.102 L1615.05 684.102 L1614.49 684.102 L1613.93 684.102 L1613.37 684.102 L1612.81 684.102 L1612.25 684.102 L1611.69 684.102 L1611.13 684.102 L1610.57 684.102 L1610.02 684.102 L1609.46 684.102 L1608.9 684.102 L1608.34 684.102 L1607.78 684.102 L1607.22 684.102 L1606.66 684.102 L1606.1 684.102 L1605.54 684.102 L1604.98 684.102 L1604.42 684.102 L1603.86 684.102 L1603.3 684.102 L1602.74 684.102 L1602.19 684.102 L1601.63 684.102 L1601.07 684.102 L1600.51 684.102 L1599.95 684.102 L1599.39 684.102 L1598.83 684.102 L1598.27 684.102 L1597.71 684.102 L1597.15 684.102 L1596.59 684.102 L1596.03 684.102 L1595.47 684.102 L1594.92 684.102 L1594.36 684.102 L1593.8 684.102 L1593.24 684.102 L1592.68 684.102 L1592.12 684.102 L1591.56 684.102 L1591 684.102 L1590.44 684.102 L1589.88 684.102 L1589.32 684.102 L1588.76 684.102 L1588.2 684.102 L1587.65 684.102 L1587.09 684.102 L1586.53 684.102 L1585.97 684.102 L1585.41 684.102 L1584.85 684.102 L1584.29 684.102 L1583.73 684.102 L1583.17 684.102 L1582.61 684.102 L1582.05 684.102 L1581.49 684.102 L1580.93 684.102 L1580.37 684.102 L1579.82 684.102 L1579.26 684.102 L1578.7 684.102 L1578.14 684.102 L1577.58 684.102 L1577.02 684.102 L1576.46 684.102 L1575.9 684.102 L1575.34 684.102 L1574.78 684.102 L1574.22 684.102 L1573.66 684.102 L1573.1 684.102 L1572.55 684.102 L1571.99 684.102 L1571.43 684.102 L1570.87 684.102 L1570.31 684.102 L1569.75 684.102 L1569.19 684.102 L1568.63 684.102 L1568.07 684.102 L1567.51 684.102 L1566.95 684.102 L1566.39 684.102 L1565.83 684.102 L1565.28 684.102 L1564.72 684.102 L1564.16 684.102 L1563.6 684.102 L1563.04 684.102 L1562.48 684.102 L1561.92 684.102 L1561.36 684.102 L1560.8 684.102 L1560.24 684.102 L1559.68 684.102 L1559.12 684.102 L1558.56 684.102 L1558 684.102 L1557.45 684.102 L1556.89 684.102 L1556.33 684.102 L1555.77 684.102 L1555.21 684.102 L1554.65 684.102 L1554.09 684.102 L1553.53 684.102 L1552.97 684.102 L1552.41 684.102 L1551.85 684.102 L1551.29 684.102 L1550.73 684.102 L1550.18 684.102 L1549.62 684.102 L1549.06 684.102 L1548.5 684.102 L1547.94 684.102 L1547.38 684.102 L1546.82 684.102 L1546.26 684.102 L1545.7 684.102 L1545.14 684.102 L1544.58 684.102 L1544.02 684.102 L1543.46 684.102 L1542.9 684.102 L1542.35 684.102 L1541.79 684.102 L1541.23 684.102 L1540.67 684.102 L1540.11 684.102 L1539.55 684.102 L1538.99 684.102 L1538.43 684.102 L1537.87 684.102 L1537.31 684.102 L1536.75 684.102 L1536.19 684.102 L1535.63 684.102 L1535.08 684.102 L1534.52 684.102 L1533.96 684.102 L1533.4 684.102 L1532.84 684.102 L1532.28 684.102 L1531.72 684.102 L1531.16 684.102 L1530.6 684.102 L1530.04 684.102 L1529.48 684.102 L1528.92 684.102 L1528.36 684.102 L1527.81 684.102 L1527.25 684.102 L1526.69 684.102 L1526.13 684.102 L1525.57 684.102 L1525.01 684.102 L1524.45 684.102 L1523.89 684.102 L1523.33 684.102 L1522.77 684.102 L1522.21 684.102 L1521.65 684.102 L1521.09 684.102 L1520.53 684.102 L1519.98 684.102 L1519.42 684.102 L1518.86 684.102 L1518.3 684.102 L1517.74 684.102 L1517.18 684.102 L1516.62 684.102 L1516.06 684.102 L1515.5 684.102 L1514.94 684.102 L1514.38 684.102 L1513.82 684.102 L1513.26 684.102 L1512.71 684.102 L1512.15 684.102 L1511.59 684.102 L1511.03 684.102 L1510.47 684.102 L1509.91 684.102 L1509.35 684.102 L1508.79 684.102 L1508.23 684.102 L1507.67 684.102 L1507.11 684.102 L1506.55 684.102 L1505.99 684.102 L1505.44 684.102 L1504.88 684.102 L1504.32 684.102 L1503.76 684.102 L1503.2 684.102 L1502.64 684.102 L1502.08 684.102 L1501.52 684.102 L1500.96 684.102 L1500.4 684.102 L1499.84 684.102 L1499.28 684.102 L1498.72 684.102 L1498.16 684.102 L1497.61 684.102 L1497.05 684.102 L1496.49 684.102 L1495.93 684.102 L1495.37 684.102 L1494.81 684.102 L1494.25 684.102 L1493.69 684.102 L1493.13 684.102 L1492.57 684.102 L1492.01 684.102 L1491.45 684.102 L1490.89 684.102 L1490.34 684.102 L1489.78 684.102 L1489.22 684.102 L1488.66 684.102 L1488.1 684.102 L1487.54 684.102 L1486.98 684.102 L1486.42 684.102 L1485.86 684.102 L1485.3 684.102 L1484.74 684.102 L1484.18 684.102 L1483.62 684.102 L1483.07 684.102 L1482.51 684.102 L1481.95 684.102 L1481.39 684.102 L1480.83 684.102 L1480.27 684.102 L1479.71 684.102 L1479.15 684.102 L1478.59 684.102 L1478.03 684.102 L1477.47 684.102 L1476.91 684.102 L1476.35 684.102 L1475.79 684.102 L1475.24 684.102 L1474.68 684.102 L1474.12 684.102 L1473.56 684.102 L1473 684.102 L1472.44 684.102 L1471.88 684.102 L1471.32 684.102 L1470.76 684.102 L1470.2 684.102 L1469.64 684.102 L1469.08 684.102 L1468.52 684.102 L1467.97 684.102 L1467.41 684.102 L1466.85 684.102 L1466.29 684.102 L1465.73 684.102 L1465.17 684.102 L1464.61 684.102 L1464.05 684.102 L1463.49 684.102 L1462.93 684.102 L1462.37 684.102 L1461.81 684.102 L1461.25 684.102 L1460.7 684.102 L1460.14 684.102 L1459.58 684.102 L1459.02 684.102 L1458.46 684.102 L1457.9 684.102 L1457.34 684.102 L1456.78 684.102 L1456.22 684.102 L1455.66 684.102 L1455.1 684.102 L1454.54 684.102 L1453.98 684.102 L1453.42 684.102 L1452.87 684.102 L1452.31 684.102 L1451.75 684.102 L1451.19 684.102 L1450.63 684.102 L1450.07 684.102 L1449.51 684.102 L1448.95 684.102 L1448.39 684.102 L1447.83 684.102 L1447.27 684.102 L1446.71 684.102 L1446.15 684.102 L1445.6 684.102 L1445.04 684.102 L1444.48 684.102 L1443.92 684.102 L1443.36 684.102 L1442.8 684.102 L1442.24 684.102 L1441.68 684.102 L1441.12 684.102 L1440.56 684.102 L1440 684.102 L1439.44 684.102 L1438.88 684.102 L1438.33 684.102 L1437.77 684.102 L1437.21 684.102 L1436.65 684.102 L1436.09 684.102 L1435.53 684.102 L1434.97 684.102 L1434.41 684.102 L1433.85 684.102 L1433.29 684.102 L1432.73 684.102 L1432.17 684.102 L1431.61 684.102 L1431.05 684.102 L1430.5 684.102 L1429.94 684.102 L1429.38 684.102 L1428.82 684.102 L1428.26 684.102 L1427.7 684.102 L1427.14 684.102 L1426.58 684.102 L1426.02 684.102 L1425.46 684.102 L1424.9 684.102 L1424.34 684.102 L1423.78 684.102 L1423.23 684.102 L1422.67 684.102 L1422.11 684.102 L1421.55 684.102 L1420.99 684.102 L1420.43 684.102 L1419.87 684.102 L1419.31 684.102 L1418.75 684.102 L1418.19 684.102 L1417.63 684.102 L1417.07 684.102 L1416.51 684.102 L1415.95 684.102 L1415.4 684.102 L1414.84 684.102 L1414.28 684.102 L1413.72 684.102 L1413.16 684.102 L1412.6 684.102 L1412.04 684.102 L1411.48 684.102 L1410.92 684.102 L1410.36 684.102 L1409.8 684.102 L1409.24 684.102 L1408.68 684.102 L1408.13 684.102 L1407.57 684.102 L1407.01 684.102 L1406.45 684.102 L1405.89 684.102 L1405.33 684.102 L1404.77 684.102 L1404.21 684.102 L1403.65 684.102 L1403.09 684.102 L1402.53 684.102 L1401.97 684.102 L1401.41 684.102 L1400.86 684.102 L1400.3 684.102 L1399.74 684.102 L1399.18 684.102 L1398.62 684.102 L1398.06 684.102 L1397.5 684.102 L1396.94 684.102 L1396.38 684.102 L1395.82 684.102 L1395.26 684.102 L1394.7 684.102 L1394.14 684.102 L1393.58 684.102 L1393.03 684.102 L1392.47 684.102 L1391.91 684.102 L1391.35 684.102 L1390.79 684.102 L1390.23 684.102 L1389.67 684.102 L1389.11 684.102 L1388.55 684.102 L1387.99 684.102 L1387.43 684.102 L1386.87 684.102 L1386.31 684.102 L1385.76 684.102 L1385.2 684.102 L1384.64 684.102 L1384.08 684.102 L1383.52 684.102 L1382.96 684.102 L1382.4 684.102 L1381.84 684.102 L1381.28 684.102 L1380.72 684.102 L1380.16 684.102 L1379.6 684.102 L1379.04 684.102 L1378.49 684.102 L1377.93 684.102 L1377.37 684.102 L1376.81 684.102 L1376.25 684.102 L1375.69 684.102 L1375.13 684.102 L1374.57 684.102 L1374.01 684.102 L1373.45 684.102 L1372.89 684.102 L1372.33 684.102 L1371.77 684.102 L1371.21 684.102 L1370.66 684.102 L1370.1 684.102 L1369.54 684.102 L1368.98 684.102 L1368.42 684.102 L1367.86 684.102 L1367.3 684.102 L1366.74 684.102 L1366.18 684.102 L1365.62 684.102 L1365.06 684.102 L1364.5 684.102 L1363.94 684.102 L1363.39 684.102 L1362.83 684.102 L1362.27 684.102 L1361.71 684.102 L1361.15 684.102 L1360.59 684.102 L1360.03 684.102 L1359.47 684.102 L1358.91 684.102 L1358.35 684.102 L1357.79 684.102 L1357.23 684.102 L1356.67 684.102 L1356.12 684.102 L1355.56 684.102 L1355 684.102 L1354.44 684.102 L1353.88 684.102 L1353.32 684.102 L1352.76 684.102 L1352.2 684.102 L1351.64 684.102 L1351.08 684.102 L1350.52 684.102 L1349.96 684.102 L1349.4 684.102 L1348.84 684.102 L1348.29 684.102 L1347.73 684.102 L1347.17 684.102 L1346.61 684.102 L1346.05 684.102 L1345.49 684.102 L1344.93 684.102 L1344.37 684.102 L1343.81 684.102 L1343.25 684.102 L1342.69 684.102 L1342.13 684.102 L1341.57 684.102 L1341.02 684.102 L1340.46 684.102 L1339.9 684.102 L1339.34 684.102 L1338.78 684.102 L1338.22 684.102 L1337.66 684.102 L1337.1 684.102 L1336.54 684.102 L1335.98 684.102 L1335.42 684.102 L1334.86 684.102 L1334.3 684.102 L1333.75 684.102 L1333.19 684.102 L1332.63 684.102 L1332.07 684.102 L1331.51 684.102 L1330.95 684.102 L1330.39 684.102 L1329.83 684.102 L1329.27 684.102 L1328.71 684.102 L1328.15 684.102 L1327.59 684.102 L1327.03 684.102 L1326.47 684.102 L1325.92 684.102 L1325.36 684.102 L1324.8 684.102 L1324.24 684.102 L1323.68 684.102 L1323.12 684.102 L1322.56 684.102 L1322 684.102 L1321.44 684.102 L1320.88 684.102 L1320.32 684.102 L1319.76 684.102 L1319.2 684.102 L1318.65 684.102 L1318.09 684.102 L1317.53 684.102 L1316.97 684.102 L1316.41 684.102 L1315.85 684.102 L1315.29 684.102 L1314.73 684.102 L1314.17 684.102 L1313.61 684.102 L1313.05 684.102 L1312.49 684.102 L1311.93 684.102 L1311.38 684.102 L1310.82 684.102 L1310.26 684.102 L1309.7 684.102 L1309.14 684.102 L1308.58 684.102 L1308.02 684.102 L1307.46 684.102 L1306.9 684.102 L1306.34 684.102 L1305.78 684.102 L1305.22 684.102 L1304.66 684.102 L1304.1 684.102 L1303.55 684.102 L1302.99 684.102 L1302.43 684.102 L1301.87 684.102 L1301.31 684.102 L1300.75 684.102 L1300.19 684.102 L1299.63 684.102 L1299.07 684.102 L1298.51 684.102 L1297.95 684.102 L1297.39 684.102 L1296.83 684.102 L1296.28 684.102 L1295.72 684.102 L1295.16 684.102 L1294.6 684.102 L1294.04 684.102 L1293.48 684.102 L1292.92 684.102 L1292.36 684.102 L1291.8 684.102 L1291.24 684.102 L1290.68 684.102 L1290.12 684.102 L1289.56 684.102 L1289 684.102 L1288.45 684.102 L1287.89 684.102 L1287.33 684.102 L1286.77 684.102 L1286.21 684.102 L1285.65 684.102 L1285.09 684.102 L1284.53 684.102 L1283.97 684.102 L1283.41 684.102 L1282.85 684.102 L1282.29 684.102 L1281.73 684.102 L1281.18 684.102 L1280.62 684.102 L1280.06 684.102 L1279.5 684.102 L1278.94 684.102 L1278.38 684.102 L1277.82 684.102 L1277.26 684.102 L1276.7 684.102 L1276.14 684.102 L1275.58 684.102 L1275.02 684.102 L1274.46 684.102 L1273.91 684.102 L1273.35 684.102 L1272.79 684.102 L1272.23 684.102 L1271.67 684.102 L1271.11 684.102 L1270.55 684.102 L1269.99 684.102 L1269.43 684.102 L1268.87 684.102 L1268.31 684.102 L1267.75 684.102 L1267.19 684.102 L1266.63 684.102 L1266.08 684.102 L1265.52 684.102 L1264.96 684.102 L1264.4 684.102 L1263.84 684.102 L1263.28 684.102 L1262.72 684.102 L1262.16 684.102 L1261.6 684.102 L1261.04 684.102 L1260.48 684.102 L1259.92 684.102 L1259.36 684.102 L1258.81 684.102 L1258.25 684.102 L1257.69 684.102 L1257.13 684.102 L1256.57 684.102 L1256.01 684.102 L1255.45 684.102 L1254.89 684.102 L1254.33 684.102 L1253.77 684.102 L1253.21 684.102 L1252.65 684.102 L1252.09 684.102 L1251.54 684.102 L1250.98 684.102 L1250.42 684.102 L1249.86 684.102 L1249.3 684.102 L1248.74 684.102 L1248.18 684.102 L1247.62 684.102 L1247.06 684.102 L1246.5 684.102 L1245.94 684.102 L1245.38 684.102 L1244.82 684.102 L1244.26 684.102 L1243.71 684.102 L1243.15 684.102 L1242.59 684.102 L1242.03 684.102 L1241.47 684.102 L1240.91 684.102 L1240.35 684.102 L1239.79 684.102 L1239.23 684.102 L1238.67 684.102 L1238.11 684.102 L1237.55 684.102 L1236.99 684.102 L1236.44 684.102 L1235.88 684.102 L1235.32 684.102 L1234.76 684.102 L1234.2 684.102 L1233.64 684.102 L1233.08 684.102 L1232.52 684.102 L1231.96 684.102 L1231.4 684.102 L1230.84 684.102 L1230.28 684.102 L1229.72 684.102 L1229.17 684.102 L1228.61 684.102 L1228.05 684.102 L1227.49 684.102 L1226.93 684.102 L1226.37 684.102 L1225.81 684.102 L1225.25 684.102 L1224.69 684.102 L1224.13 684.102 L1223.57 684.102 L1223.01 684.102 L1222.45 684.102 L1221.89 684.102 L1221.34 684.102 L1220.78 684.102 L1220.22 684.102 L1219.66 684.102 L1219.1 684.102 L1218.54 684.102 L1217.98 684.102 L1217.42 684.102 L1216.86 684.102 L1216.3 684.102 L1215.74 684.102 L1215.18 684.102 L1214.62 684.102 L1214.07 684.102 L1213.51 684.102 L1212.95 684.102 L1212.39 684.102 L1211.83 684.102 L1211.27 684.102 L1210.71 684.102 L1210.15 684.102 L1209.59 684.102 L1209.03 684.102 L1208.47 684.102 L1207.91 684.102 L1207.35 684.102 L1206.8 684.102 L1206.24 684.102 L1205.68 684.102 L1205.12 684.102 L1204.56 684.102 L1204 684.102 L1203.44 684.102 L1202.88 684.102 L1202.32 684.102 L1201.76 684.102 L1201.2 684.102 L1200.64 684.102 L1200.08 684.102 L1199.52 684.102 L1198.97 684.102 L1198.41 684.102 L1197.85 684.102 L1197.29 684.102 L1196.73 684.102 L1196.17 684.102 L1195.61 684.102 L1195.05 684.102 L1194.49 684.102 L1193.93 684.102 L1193.37 684.102 L1192.81 684.102 L1192.25 684.102 L1191.7 684.102 L1191.14 684.102 L1190.58 684.102 L1190.02 684.102 L1189.46 684.102 L1188.9 684.102 L1188.34 684.102 L1187.78 684.102 L1187.22 684.102 L1186.66 684.102 L1186.1 684.102 L1185.54 684.102 L1184.98 684.102 L1184.43 684.102 L1183.87 684.102 L1183.31 684.102 L1182.75 684.102 L1182.19 684.102 L1181.63 684.102 L1181.07 684.102 L1180.51 684.102 L1179.95 684.102 L1179.39 684.102 L1178.83 684.102 L1178.27 684.102 L1177.71 684.102 L1177.15 684.102 L1176.6 684.102 L1176.04 684.102 L1175.48 684.102 L1174.92 684.102 L1174.36 684.102 L1173.8 684.102 L1173.24 684.102 L1172.68 684.102 L1172.12 684.102 L1171.56 684.102 L1171 684.102 L1170.44 684.102 L1169.88 684.102 L1169.33 684.102 L1168.77 684.102 L1168.21 684.102 L1167.65 684.102 L1167.09 684.102 L1166.53 684.102 L1165.97 684.102 L1165.41 684.102 L1164.85 684.102 L1164.29 684.102 L1163.73 684.102 L1163.17 684.102 L1162.61 684.102 L1162.05 684.102 L1161.5 684.102 L1160.94 684.102 L1160.38 684.102 L1159.82 684.102 L1159.26 684.102 L1158.7 684.102 L1158.14 684.102 L1157.58 684.102 L1157.02 684.102 L1156.46 684.102 L1155.9 684.102 L1155.34 684.102 L1154.78 684.102 L1154.23 684.102 L1153.67 684.102 L1153.11 684.102 L1152.55 684.102 L1151.99 684.102 L1151.43 684.102 L1150.87 684.102 L1150.31 684.102 L1149.75 684.102 L1149.19 684.102 L1148.63 684.102 L1148.07 684.102 L1147.51 684.102 L1146.96 684.102 L1146.4 684.102 L1145.84 684.102 L1145.28 684.102 L1144.72 684.102 L1144.16 684.102 L1143.6 684.102 L1143.04 684.102 L1142.48 684.102 L1141.92 684.102 L1141.36 684.102 L1140.8 684.102 L1140.24 684.102 L1139.68 684.102 L1139.13 684.102 L1138.57 684.102 L1138.01 684.102 L1137.45 684.102 L1136.89 684.102 L1136.33 684.102 L1135.77 684.102 L1135.21 684.102 L1134.65 684.102 L1134.09 684.102 L1133.53 684.102 L1132.97 684.102 L1132.41 684.102 L1131.86 684.102 L1131.3 684.102 L1130.74 684.102 L1130.18 684.102 L1129.62 684.102 L1129.06 684.102 L1128.5 684.102 L1127.94 684.102 L1127.38 684.102 L1126.82 684.102 L1126.26 684.102 L1125.7 684.102 L1125.14 684.102 L1124.59 684.102 L1124.03 684.102 L1123.47 684.102 L1122.91 684.102 L1122.35 684.102 L1121.79 684.102 L1121.23 684.102 L1120.67 684.102 L1120.11 684.102 L1119.55 684.102 L1118.99 684.102 L1118.43 684.102 L1117.87 684.102 L1117.31 684.102 L1116.76 684.102 L1116.2 684.102 L1115.64 684.102 L1115.08 684.102 L1114.52 684.102 L1113.96 684.102 L1113.4 684.102 L1112.84 684.102 L1112.28 684.102 L1111.72 684.102 L1111.16 684.102 L1110.6 684.102 L1110.04 684.102 L1109.49 684.102 L1108.93 684.102 L1108.37 684.102 L1107.81 684.102 L1107.25 684.102 L1106.69 684.102 L1106.13 684.102 L1105.57 684.102 L1105.01 684.102 L1104.45 684.102 L1103.89 684.102 L1103.33 684.102 L1102.77 684.102 L1102.22 684.102 L1101.66 684.102 L1101.1 684.102 L1100.54 684.102 L1099.98 684.102 L1099.42 684.102 L1098.86 684.102 L1098.3 684.102 L1097.74 684.102 L1097.18 684.102 L1096.62 684.102 L1096.06 684.102 L1095.5 684.102 L1094.94 684.102 L1094.39 684.102 L1093.83 684.102 L1093.27 684.102 L1092.71 684.102 L1092.15 684.102 L1091.59 684.102 L1091.03 684.102 L1090.47 684.102 L1089.91 684.102 L1089.35 684.102 L1088.79 684.102 L1088.23 684.102 L1087.67 684.102 L1087.12 684.102 L1086.56 684.102 L1086 684.102 L1085.44 684.102 L1084.88 684.102 L1084.32 684.102 L1083.76 684.102 L1083.2 684.102 L1082.64 684.102 L1082.08 684.102 L1081.52 684.102 L1080.96 684.102 L1080.4 684.102 L1079.85 684.102 L1079.29 684.102 L1078.73 684.102 L1078.17 684.102 L1077.61 684.102 L1077.05 684.102 L1076.49 684.102 L1075.93 684.102 L1075.37 684.102 L1074.81 684.102 L1074.25 684.102 L1073.69 684.102 L1073.13 684.102 L1072.57 684.102 L1072.02 684.102 L1071.46 684.102 L1070.9 684.102 L1070.34 684.102 L1069.78 684.102 L1069.22 684.102 L1068.66 684.102 L1068.1 684.102 L1067.54 684.102 L1066.98 684.102 L1066.42 684.102 L1065.86 684.102 L1065.3 684.102 L1064.75 684.102 L1064.19 684.102 L1063.63 684.102 L1063.07 684.102 L1062.51 684.102 L1061.95 684.102 L1061.39 684.102 L1060.83 684.102 L1060.27 684.102 L1059.71 684.102 L1059.15 684.102 L1058.59 684.102 L1058.03 684.102 L1057.48 684.102 L1056.92 684.102 L1056.36 684.102 L1055.8 684.102 L1055.24 684.102 L1054.68 684.102 L1054.12 684.102 L1053.56 684.102 L1053 684.102 L1052.44 684.102 L1051.88 684.102 L1051.32 684.102 L1050.76 684.102 L1050.2 684.102 L1049.65 684.102 L1049.09 684.102 L1048.53 684.102 L1047.97 684.102 L1047.41 684.102 L1046.85 684.102 L1046.29 684.102 L1045.73 684.102 L1045.17 684.102 L1044.61 684.102 L1044.05 684.102 L1043.49 684.102 L1042.93 684.102 L1042.38 684.102 L1041.82 684.102 L1041.26 684.102 L1040.7 684.102 L1040.14 684.102 L1039.58 684.102 L1039.02 684.102 L1038.46 684.102 L1037.9 684.102 L1037.34 684.102 L1036.78 684.102 L1036.22 684.102 L1035.66 684.102 L1035.1 684.102 L1034.55 684.102 L1033.99 684.102 L1033.43 684.102 L1032.87 684.102 L1032.31 684.102 L1031.75 684.102 L1031.19 684.102 L1030.63 684.102 L1030.07 684.102 L1029.51 684.102 L1028.95 684.102 L1028.39 684.102 L1027.83 684.102 L1027.28 684.102 L1026.72 684.102 L1026.16 684.102 L1025.6 684.102 L1025.04 684.102 L1024.48 684.102 L1023.92 684.102 L1023.36 684.102 L1022.8 684.102 L1022.24 684.102 L1021.68 684.102 L1021.12 684.102 L1020.56 684.102 L1020.01 684.102 L1019.45 684.102 L1018.89 684.102 L1018.33 684.102 L1017.77 684.102 L1017.21 684.102 L1016.65 684.102 L1016.09 684.102 L1015.53 684.102 L1014.97 684.102 L1014.41 684.102 L1013.85 684.102 L1013.29 684.102 L1012.73 684.102 L1012.18 684.102 L1011.62 684.102 L1011.06 684.102 L1010.5 684.102 L1009.94 684.102 L1009.38 684.102 L1008.82 684.102 L1008.26 684.102 L1007.7 684.102 L1007.14 684.102 L1006.58 684.102 L1006.02 684.102 L1005.46 684.102 L1004.91 684.102 L1004.35 684.102 L1003.79 684.102 L1003.23 684.102 L1002.67 684.102 L1002.11 684.102 L1001.55 684.102 L1000.99 684.102 L1000.43 684.102 L999.872 684.102 L999.313 684.102 L998.754 684.102 L998.194 684.102 L997.635 684.102 L997.076 684.102 L996.517 684.102 L995.957 684.102 L995.398 684.102 L994.839 684.102 L994.28 684.102 L993.72 684.102 L993.161 684.102 L992.602 684.102 L992.043 684.102 L991.483 684.102 L990.924 684.102 L990.365 684.102 L989.806 684.102 L989.246 684.102 L988.687 684.102 L988.128 684.102 L987.569 684.102 L987.009 684.102 L986.45 684.102 L985.891 684.102 L985.332 684.102 L984.772 684.102 L984.213 684.102 L983.654 684.102 L983.095 684.102 L982.535 684.102 L981.976 684.102 L981.417 684.102 L980.858 684.102 L980.298 684.102 L979.739 684.102 L979.18 684.102 L978.621 684.102 L978.061 684.102 L977.502 684.102 L976.943 684.102 L976.384 684.102 L975.824 684.102 L975.265 684.102 L974.706 684.102 L974.147 684.102 L973.587 684.102 L973.028 684.102 L972.469 684.102 L971.91 684.102 L971.35 684.102 L970.791 684.102 L970.232 684.102 L969.673 684.102 L969.113 684.102 L968.554 684.102 L967.995 684.102 L967.436 684.102 L966.876 684.102 L966.317 684.102 L965.758 684.102 L965.199 684.102 L964.639 684.102 L964.08 684.102 L963.521 684.102 L962.962 684.102 L962.402 684.102 L961.843 684.102 L961.284 684.102 L960.725 684.102 L960.165 684.102 L959.606 684.102 L959.047 684.102 L958.488 684.102 L957.928 684.102 L957.369 684.102 L956.81 684.102 L956.251 684.102 L955.691 684.102 L955.132 684.102 L954.573 684.102 L954.014 684.102 L953.454 684.102 L952.895 684.102 L952.336 684.102 L951.777 684.102 L951.217 684.102 L950.658 684.102 L950.099 684.102 L949.54 684.102 L948.98 684.102 L948.421 684.102 L947.862 684.102 L947.303 684.102 L946.743 684.102 L946.184 684.102 L945.625 684.102 L945.066 684.102 L944.506 684.102 L943.947 684.102 L943.388 684.102 L942.829 684.102 L942.269 684.102 L941.71 684.102 L941.151 684.102 L940.592 684.102 L940.032 684.102 L939.473 684.102 L938.914 684.102 L938.355 684.102 L937.795 684.102 L937.236 684.102 L936.677 684.102 L936.118 684.102 L935.558 684.102 L934.999 684.102 L934.44 684.102 L933.881 684.102 L933.321 684.102 L932.762 684.102 L932.203 684.102 L931.644 684.102 L931.084 684.102 L930.525 684.102 L929.966 684.102 L929.406 684.102 L928.847 684.102 L928.288 684.102 L927.729 684.102 L927.169 684.102 L926.61 684.102 L926.051 684.102 L925.492 684.102 L924.932 684.102 L924.373 684.102 L923.814 684.102 L923.255 684.102 L922.695 684.102 L922.136 684.102 L921.577 684.102 L921.018 684.102 L920.458 684.102 L919.899 684.102 L919.34 684.102 L918.781 684.102 L918.221 684.102 L917.662 684.102 L917.103 684.102 L916.544 684.102 L915.984 684.102 L915.425 684.102 L914.866 684.102 L914.307 684.102 L913.747 684.102 L913.188 684.102 L912.629 684.102 L912.07 684.102 L911.51 684.102 L910.951 684.102 L910.392 684.102 L909.833 684.102 L909.273 684.102 L908.714 684.102 L908.155 684.102 L907.596 684.102 L907.036 684.102 L906.477 684.102 L905.918 684.102 L905.359 684.102 L904.799 684.102 L904.24 684.102 L903.681 684.102 L903.122 684.102 L902.562 684.102 L902.003 684.102 L901.444 684.102 L900.885 684.102 L900.325 684.102 L899.766 684.102 L899.207 684.102 L898.648 684.102 L898.088 684.102 L897.529 684.102 L896.97 684.102 L896.411 684.102 L895.851 684.102 L895.292 684.102 L894.733 684.102 L894.174 684.102 L893.614 684.102 L893.055 684.102 L892.496 684.102 L891.937 684.102 L891.377 684.102 L890.818 684.102 L890.259 684.102 L889.7 684.102 L889.14 684.102 L888.581 684.102 L888.022 684.102 L887.463 684.102 L886.903 684.102 L886.344 684.102 L885.785 684.102 L885.226 684.102 L884.666 684.102 L884.107 684.102 L883.548 684.102 L882.989 684.102 L882.429 684.102 L881.87 684.102 L881.311 684.102 L880.752 684.102 L880.192 684.102 L879.633 684.102 L879.074 684.102 L878.515 684.102 L877.955 684.102 L877.396 684.102 L876.837 684.102 L876.278 684.102 L875.718 684.102 L875.159 684.102 L874.6 684.102 L874.041 684.102 L873.481 684.102 L872.922 684.102 L872.363 684.102 L871.804 684.102 L871.244 684.102 L870.685 684.102 L870.126 684.102 L869.567 684.102 L869.007 684.102 L868.448 684.102 L867.889 684.102 L867.33 684.102 L866.77 684.102 L866.211 684.102 L865.652 684.102 L865.093 684.102 L864.533 684.102 L863.974 684.102 L863.415 684.102 L862.856 684.102 L862.296 684.102 L861.737 684.102 L861.178 684.102 L860.619 684.102 L860.059 684.102 L859.5 684.102 L858.941 684.102 L858.382 684.102 L857.822 684.102 L857.263 684.102 L856.704 684.102 L856.145 684.102 L855.585 684.102 L855.026 684.102 L854.467 684.102 L853.908 684.102 L853.348 684.102 L852.789 684.102 L852.23 684.102 L851.671 684.102 L851.111 684.102 L850.552 684.102 L849.993 684.102 L849.434 684.102 L848.874 684.102 L848.315 684.102 L847.756 684.102 L847.197 684.102 L846.637 684.102 L846.078 684.102 L845.519 684.102 L844.96 684.102 L844.4 684.102 L843.841 684.102 L843.282 684.102 L842.723 684.102 L842.163 684.102 L841.604 684.102 L841.045 684.102 L840.486 684.102 L839.926 684.102 L839.367 684.102 L838.808 684.102 L838.249 684.102 L837.689 684.102 L837.13 684.102 L836.571 684.102 L836.012 684.102 L835.452 684.102 L834.893 684.102 L834.334 684.102 L833.775 684.102 L833.215 684.102 L832.656 684.102 L832.097 684.102 L831.538 684.102 L830.978 684.102 L830.419 684.102 L829.86 684.102 L829.301 684.102 L828.741 684.102 L828.182 684.102 L827.623 684.102 L827.064 684.102 L826.504 684.102 L825.945 684.102 L825.386 684.102 L824.827 684.102 L824.267 684.102 L823.708 684.102 L823.149 684.102 L822.59 684.102 L822.03 684.102 L821.471 684.102 L820.912 684.102 L820.353 684.102 L819.793 684.102 L819.234 684.102 L818.675 684.102 L818.116 684.102 L817.556 684.102 L816.997 684.102 L816.438 684.102 L815.879 684.102 L815.319 684.102 L814.76 684.102 L814.201 684.102 L813.642 684.102 L813.082 684.102 L812.523 684.102 L811.964 684.102 L811.405 684.102 L810.845 684.102 L810.286 684.102 L809.727 684.102 L809.168 684.102 L808.608 684.102 L808.049 684.102 L807.49 684.102 L806.931 684.102 L806.371 684.102 L805.812 684.102 L805.253 684.102 L804.693 684.102 L804.134 684.102 L803.575 684.102 L803.016 684.102 L802.456 684.102 L801.897 684.102 L801.338 684.102 L800.779 684.102 L800.219 684.102 L799.66 684.102 L799.101 684.102 L798.542 684.102 L797.982 684.102 L797.423 684.102 L796.864 684.102 L796.305 684.102 L795.745 684.102 L795.186 684.102 L794.627 684.102 L794.068 684.102 L793.508 684.102 L792.949 684.102 L792.39 684.102 L791.831 684.102 L791.271 684.102 L790.712 684.102 L790.153 684.102 L789.594 684.102 L789.034 684.102 L788.475 684.102 L787.916 684.102 L787.357 684.102 L786.797 684.102 L786.238 684.102 L785.679 684.102 L785.12 684.102 L784.56 684.102 L784.001 684.102 L783.442 684.102 L782.883 684.102 L782.323 684.102 L781.764 684.102 L781.205 684.102 L780.646 684.102 L780.086 684.102 L779.527 684.102 L778.968 684.102 L778.409 684.102 L777.849 684.102 L777.29 684.102 L776.731 684.102 L776.172 684.102 L775.612 684.102 L775.053 684.102 L774.494 684.102 L773.935 684.102 L773.375 684.102 L772.816 684.102 L772.257 684.102 L771.698 684.102 L771.138 684.102 L770.579 684.102 L770.02 684.102 L769.461 684.102 L768.901 684.102 L768.342 684.102 L767.783 684.102 L767.224 684.102 L766.664 684.102 L766.105 684.102 L765.546 684.102 L764.987 684.102 L764.427 684.102 L763.868 684.102 L763.309 684.102 L762.75 684.102 L762.19 684.102 L761.631 684.102 L761.072 684.102 L760.513 684.102 L759.953 684.102 L759.394 684.102 L758.835 684.102 L758.276 684.102 L757.716 684.102 L757.157 684.102 L756.598 684.102 L756.039 684.102 L755.479 684.102 L754.92 684.102 L754.361 684.102 L753.802 684.102 L753.242 684.102 L752.683 684.102 L752.124 684.102 L751.565 684.102 L751.005 684.102 L750.446 684.102 L749.887 684.102 L749.328 684.102 L748.768 684.102 L748.209 684.102 L747.65 684.102 L747.091 684.102 L746.531 684.102 L745.972 684.102 L745.413 684.102 L744.854 684.102 L744.294 684.102 L743.735 684.102 L743.176 684.102 L742.617 684.102 L742.057 684.102 L741.498 684.102 L740.939 684.102 L740.38 684.102 L739.82 684.102 L739.261 684.102 L738.702 684.102 L738.143 684.102 L737.583 684.102 L737.024 684.102 L736.465 684.102 L735.906 684.102 L735.346 684.102 L734.787 684.102 L734.228 684.102 L733.669 684.102 L733.109 684.102 L732.55 684.102 L731.991 684.102 L731.432 684.102 L730.872 684.102 L730.313 684.102 L729.754 684.102 L729.195 684.102 L728.635 684.102 L728.076 684.102 L727.517 684.102 L726.958 684.102 L726.398 684.102 L725.839 684.102 L725.28 684.102 L724.721 684.102 L724.161 684.102 L723.602 684.102 L723.043 684.102 L722.484 684.102 L721.924 684.102 L721.365 684.102 L720.806 684.102 L720.247 684.102  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.466 720.806,688.466 721.365,688.466 721.924,688.466 722.484,688.466 723.043,688.466 723.602,688.466 724.161,688.466 724.721,688.466 725.28,688.466 725.839,688.466 726.398,688.466 726.958,688.466 727.517,688.466 728.076,688.466 728.635,688.466 729.195,688.466 729.754,688.466 730.313,688.466 730.872,688.466 731.432,688.466 731.991,688.466 732.55,688.466 733.109,688.466 733.669,688.466 734.228,688.466 734.787,688.466 735.346,688.466 735.906,688.466 736.465,688.466 737.024,688.466 737.583,688.466 738.143,688.466 738.702,688.466 739.261,688.466 739.82,688.466 740.38,688.466 740.939,688.466 741.498,688.466 742.057,688.466 742.617,688.466 743.176,688.466 743.735,688.466 744.294,688.466 744.854,688.466 745.413,688.466 745.972,688.466 746.531,688.466 747.091,688.466 747.65,688.466 748.209,688.466 748.768,688.466 749.328,688.466 749.887,688.466 750.446,688.466 751.005,688.466 751.565,688.466 752.124,688.466 752.683,688.466 753.242,688.466 753.802,688.466 754.361,688.466 754.92,688.466 755.479,688.466 756.039,688.466 756.598,688.466 757.157,688.466 757.716,688.466 758.276,688.466 758.835,688.466 759.394,688.466 759.953,688.466 760.513,688.466 761.072,688.466 761.631,688.466 762.19,688.466 762.75,688.466 763.309,688.466 763.868,688.466 764.427,688.466 764.987,688.466 765.546,688.466 766.105,688.466 766.664,688.466 767.224,688.466 767.783,688.466 768.342,688.466 768.901,688.466 769.461,688.466 770.02,688.466 770.579,688.466 771.138,688.466 771.698,688.466 772.257,688.466 772.816,688.466 773.375,688.466 773.935,688.466 774.494,688.466 775.053,688.466 775.612,688.466 776.172,688.466 776.731,688.466 777.29,688.466 777.849,688.466 778.409,688.466 778.968,688.466 779.527,688.466 780.086,688.466 780.646,688.466 781.205,688.466 781.764,688.466 782.323,688.466 782.883,688.466 783.442,688.466 784.001,688.466 784.56,688.466 785.12,688.466 785.679,688.466 786.238,688.466 786.797,688.466 787.357,688.466 787.916,688.466 788.475,688.466 789.034,688.466 789.594,688.466 790.153,688.466 790.712,688.466 791.271,688.466 791.831,688.466 792.39,688.466 792.949,688.466 793.508,688.466 794.068,688.466 794.627,688.466 795.186,688.466 795.745,688.466 796.305,688.466 796.864,688.466 797.423,688.466 797.982,688.466 798.542,688.466 799.101,688.466 799.66,688.466 800.219,688.466 800.779,688.466 801.338,688.466 801.897,688.466 802.456,688.466 803.016,688.466 803.575,688.466 804.134,688.466 804.693,688.466 805.253,688.466 805.812,688.466 806.371,688.466 806.931,688.466 807.49,688.466 808.049,688.466 808.608,688.466 809.168,688.466 809.727,688.466 810.286,688.466 810.845,688.466 811.405,688.466 811.964,688.466 812.523,688.466 813.082,688.466 813.642,688.466 814.201,688.466 814.76,688.466 815.319,688.466 815.879,688.466 816.438,688.466 816.997,688.466 817.556,688.466 818.116,688.466 818.675,688.466 819.234,688.466 819.793,688.466 820.353,688.466 820.912,688.466 821.471,688.466 822.03,688.466 822.59,688.466 823.149,688.466 823.708,688.466 824.267,688.466 824.827,688.466 825.386,688.466 825.945,688.466 826.504,688.466 827.064,688.466 827.623,688.466 828.182,688.466 828.741,688.466 829.301,688.466 829.86,688.466 830.419,688.466 830.978,688.466 831.538,688.466 832.097,688.466 832.656,688.466 833.215,688.466 833.775,688.466 834.334,688.466 834.893,688.466 835.452,688.466 836.012,688.466 836.571,688.466 837.13,688.466 837.689,688.466 838.249,688.466 838.808,688.466 839.367,688.466 839.926,688.466 840.486,688.466 841.045,688.466 841.604,688.466 842.163,688.466 842.723,688.466 843.282,688.466 843.841,688.466 844.4,688.466 844.96,688.466 845.519,688.466 846.078,688.466 846.637,688.466 847.197,688.466 847.756,688.466 848.315,688.466 848.874,688.466 849.434,688.466 849.993,688.466 850.552,688.466 851.111,688.466 851.671,688.466 852.23,688.466 852.789,688.466 853.348,688.466 853.908,688.466 854.467,688.466 855.026,688.466 855.585,688.466 856.145,688.466 856.704,688.466 857.263,688.466 857.822,688.466 858.382,688.466 858.941,688.466 859.5,688.466 860.059,688.466 860.619,688.466 861.178,688.466 861.737,688.466 862.296,688.466 862.856,688.466 863.415,688.466 863.974,688.466 864.533,688.466 865.093,688.466 865.652,688.466 866.211,688.466 866.77,688.466 867.33,688.466 867.889,688.466 868.448,688.466 869.007,688.466 869.567,688.466 870.126,688.466 870.685,688.466 871.244,688.466 871.804,688.466 872.363,688.466 872.922,688.466 873.481,688.466 874.041,688.466 874.6,688.466 875.159,688.466 875.718,688.466 876.278,688.466 876.837,688.466 877.396,688.466 877.955,688.466 878.515,688.466 879.074,688.466 879.633,688.466 880.192,688.466 880.752,688.466 881.311,688.466 881.87,688.466 882.429,688.466 882.989,688.466 883.548,688.466 884.107,688.466 884.666,688.466 885.226,688.466 885.785,688.466 886.344,688.466 886.903,688.466 887.463,688.466 888.022,688.466 888.581,688.466 889.14,688.466 889.7,688.466 890.259,688.466 890.818,688.466 891.377,688.466 891.937,688.466 892.496,688.466 893.055,688.466 893.614,688.466 894.174,688.466 894.733,688.466 895.292,688.466 895.851,688.466 896.411,688.466 896.97,688.466 897.529,688.466 898.088,688.466 898.648,688.466 899.207,688.466 899.766,688.466 900.325,688.466 900.885,688.466 901.444,688.466 902.003,688.466 902.562,688.466 903.122,688.466 903.681,688.466 904.24,688.466 904.799,688.466 905.359,688.466 905.918,688.466 906.477,688.466 907.036,688.466 907.596,688.466 908.155,688.466 908.714,688.466 909.273,688.466 909.833,688.466 910.392,688.466 910.951,688.466 911.51,688.466 912.07,688.466 912.629,688.466 913.188,688.466 913.747,688.466 914.307,688.466 914.866,688.466 915.425,688.466 915.984,688.466 916.544,688.466 917.103,688.466 917.662,688.466 918.221,688.466 918.781,688.466 919.34,688.466 919.899,688.466 920.458,688.466 921.018,688.466 921.577,688.466 922.136,688.466 922.695,688.466 923.255,688.466 923.814,688.466 924.373,688.466 924.932,688.466 925.492,688.466 926.051,688.466 926.61,688.466 927.169,688.466 927.729,688.466 928.288,688.466 928.847,688.466 929.406,688.466 929.966,688.466 930.525,688.466 931.084,688.466 931.644,688.466 932.203,688.466 932.762,688.466 933.321,688.466 933.881,688.466 934.44,688.466 934.999,688.466 935.558,688.466 936.118,688.466 936.677,688.466 937.236,688.466 937.795,688.466 938.355,688.466 938.914,688.466 939.473,688.466 940.032,688.466 940.592,688.466 941.151,688.466 941.71,688.466 942.269,688.466 942.829,688.466 943.388,688.466 943.947,688.466 944.506,688.466 945.066,688.466 945.625,688.466 946.184,688.466 946.743,688.466 947.303,688.466 947.862,688.466 948.421,688.466 948.98,688.466 949.54,688.466 950.099,688.466 950.658,688.466 951.217,688.466 951.777,688.466 952.336,688.466 952.895,688.466 953.454,688.466 954.014,688.466 954.573,688.466 955.132,688.466 955.691,688.466 956.251,688.466 956.81,688.466 957.369,688.466 957.928,688.466 958.488,688.466 959.047,688.466 959.606,688.466 960.165,688.466 960.725,688.466 961.284,688.466 961.843,688.466 962.402,688.466 962.962,688.466 963.521,688.466 964.08,688.466 964.639,688.466 965.199,688.466 965.758,688.466 966.317,688.466 966.876,688.466 967.436,688.466 967.995,688.466 968.554,688.466 969.113,688.466 969.673,688.466 970.232,688.466 970.791,688.466 971.35,688.466 971.91,688.466 972.469,688.466 973.028,688.466 973.587,688.466 974.147,688.466 974.706,688.466 975.265,688.466 975.824,688.466 976.384,688.466 976.943,688.466 977.502,688.466 978.061,688.466 978.621,688.466 979.18,688.466 979.739,688.466 980.298,688.466 980.858,688.466 981.417,688.466 981.976,688.466 982.535,688.466 983.095,688.466 983.654,688.466 984.213,688.466 984.772,688.466 985.332,688.466 985.891,688.466 986.45,688.466 987.009,688.466 987.569,688.466 988.128,688.466 988.687,688.466 989.246,688.466 989.806,688.466 990.365,688.466 990.924,688.466 991.483,688.466 992.043,688.466 992.602,688.466 993.161,688.466 993.72,688.466 994.28,688.466 994.839,688.466 995.398,688.466 995.957,688.466 996.517,688.466 997.076,688.466 997.635,688.466 998.194,688.466 998.754,688.466 999.313,688.466 999.872,688.466 1000.43,688.466 1000.99,688.466 1001.55,688.466 1002.11,688.466 1002.67,688.466 1003.23,688.466 1003.79,688.466 1004.35,688.466 1004.91,688.466 1005.46,688.466 1006.02,688.466 1006.58,688.466 1007.14,688.466 1007.7,688.466 1008.26,688.466 1008.82,688.466 1009.38,688.466 1009.94,688.466 1010.5,688.466 1011.06,688.466 1011.62,688.466 1012.18,688.466 1012.73,688.466 1013.29,688.466 1013.85,688.466 1014.41,688.466 1014.97,688.466 1015.53,688.466 1016.09,688.466 1016.65,688.466 1017.21,688.466 1017.77,688.466 1018.33,688.466 1018.89,688.466 1019.45,688.466 1020.01,688.466 1020.56,688.466 1021.12,688.466 1021.68,688.466 1022.24,688.466 1022.8,688.466 1023.36,688.466 1023.92,688.466 1024.48,688.466 1025.04,688.466 1025.6,688.466 1026.16,688.466 1026.72,688.466 1027.28,688.466 1027.83,688.466 1028.39,688.466 1028.95,688.466 1029.51,688.466 1030.07,688.466 1030.63,688.466 1031.19,688.466 1031.75,688.466 1032.31,688.466 1032.87,688.466 1033.43,688.466 1033.99,688.466 1034.55,688.466 1035.1,688.466 1035.66,688.466 1036.22,688.466 1036.78,688.466 1037.34,688.466 1037.9,688.466 1038.46,688.466 1039.02,688.466 1039.58,688.466 1040.14,688.466 1040.7,688.466 1041.26,688.466 1041.82,688.466 1042.38,688.466 1042.93,688.466 1043.49,688.466 1044.05,688.466 1044.61,688.466 1045.17,688.466 1045.73,688.466 1046.29,688.466 1046.85,688.466 1047.41,688.466 1047.97,688.466 1048.53,688.466 1049.09,688.466 1049.65,688.466 1050.2,688.466 1050.76,688.466 1051.32,688.466 1051.88,688.466 1052.44,688.466 1053,688.466 1053.56,688.466 1054.12,688.466 1054.68,688.466 1055.24,688.466 1055.8,688.466 1056.36,688.466 1056.92,688.466 1057.48,688.466 1058.03,688.466 1058.59,688.466 1059.15,688.466 1059.71,688.466 1060.27,688.466 1060.83,688.466 1061.39,688.466 1061.95,688.466 1062.51,688.466 1063.07,688.466 1063.63,688.466 1064.19,688.466 1064.75,688.466 1065.3,688.466 1065.86,688.466 1066.42,688.466 1066.98,688.466 1067.54,688.466 1068.1,688.466 1068.66,688.466 1069.22,688.466 1069.78,688.466 1070.34,688.466 1070.9,688.466 1071.46,688.466 1072.02,688.466 1072.57,688.466 1073.13,688.466 1073.69,688.466 1074.25,688.466 1074.81,688.466 1075.37,688.466 1075.93,688.466 1076.49,688.466 1077.05,688.466 1077.61,688.466 1078.17,688.466 1078.73,688.466 1079.29,688.466 1079.85,688.466 1080.4,688.466 1080.96,688.466 1081.52,688.466 1082.08,688.466 1082.64,688.466 1083.2,688.466 1083.76,688.466 1084.32,688.466 1084.88,688.466 1085.44,688.466 1086,688.466 1086.56,688.466 1087.12,688.466 1087.67,688.466 1088.23,688.466 1088.79,688.466 1089.35,688.466 1089.91,688.466 1090.47,688.466 1091.03,688.466 1091.59,688.466 1092.15,688.466 1092.71,688.466 1093.27,688.466 1093.83,688.466 1094.39,688.466 1094.94,688.466 1095.5,688.466 1096.06,688.466 1096.62,688.466 1097.18,688.466 1097.74,688.466 1098.3,688.466 1098.86,688.466 1099.42,688.466 1099.98,688.466 1100.54,688.466 1101.1,688.466 1101.66,688.466 1102.22,688.466 1102.77,688.466 1103.33,688.466 1103.89,688.466 1104.45,688.466 1105.01,688.466 1105.57,688.466 1106.13,688.466 1106.69,688.466 1107.25,688.466 1107.81,688.466 1108.37,688.466 1108.93,688.466 1109.49,688.466 1110.04,688.466 1110.6,688.466 1111.16,688.466 1111.72,688.466 1112.28,688.466 1112.84,688.466 1113.4,688.466 1113.96,688.466 1114.52,688.466 1115.08,688.466 1115.64,688.466 1116.2,688.466 1116.76,688.466 1117.31,688.466 1117.87,688.466 1118.43,688.466 1118.99,688.466 1119.55,688.466 1120.11,688.466 1120.67,688.466 1121.23,688.466 1121.79,688.466 1122.35,688.466 1122.91,688.466 1123.47,688.466 1124.03,688.466 1124.59,688.466 1125.14,688.466 1125.7,688.466 1126.26,688.466 1126.82,688.466 1127.38,688.466 1127.94,688.466 1128.5,688.466 1129.06,688.466 1129.62,688.466 1130.18,688.466 1130.74,688.466 1131.3,688.466 1131.86,688.466 1132.41,688.466 1132.97,688.466 1133.53,688.466 1134.09,688.466 1134.65,688.466 1135.21,688.466 1135.77,688.466 1136.33,688.466 1136.89,688.466 1137.45,688.466 1138.01,688.466 1138.57,688.466 1139.13,688.466 1139.68,688.466 1140.24,688.466 1140.8,688.466 1141.36,688.466 1141.92,688.466 1142.48,688.466 1143.04,688.466 1143.6,688.466 1144.16,688.466 1144.72,688.466 1145.28,688.466 1145.84,688.466 1146.4,688.466 1146.96,688.466 1147.51,688.466 1148.07,688.466 1148.63,688.466 1149.19,688.466 1149.75,688.466 1150.31,688.466 1150.87,688.466 1151.43,688.466 1151.99,688.466 1152.55,688.466 1153.11,688.466 1153.67,688.466 1154.23,688.466 1154.78,688.466 1155.34,688.466 1155.9,688.466 1156.46,688.466 1157.02,688.466 1157.58,688.466 1158.14,688.466 1158.7,688.466 1159.26,688.466 1159.82,688.466 1160.38,688.466 1160.94,688.466 1161.5,688.466 1162.05,688.466 1162.61,688.466 1163.17,688.466 1163.73,688.466 1164.29,688.466 1164.85,688.466 1165.41,688.466 1165.97,688.466 1166.53,688.466 1167.09,688.466 1167.65,688.466 1168.21,688.466 1168.77,688.466 1169.33,688.466 1169.88,688.466 1170.44,688.466 1171,688.466 1171.56,688.466 1172.12,688.466 1172.68,688.466 1173.24,688.466 1173.8,688.466 1174.36,688.466 1174.92,688.466 1175.48,688.466 1176.04,688.466 1176.6,688.466 1177.15,688.466 1177.71,688.466 1178.27,688.466 1178.83,688.466 1179.39,688.466 1179.95,688.466 1180.51,688.466 1181.07,688.466 1181.63,688.466 1182.19,688.466 1182.75,688.466 1183.31,688.466 1183.87,688.466 1184.43,688.466 1184.98,688.466 1185.54,688.466 1186.1,688.466 1186.66,688.466 1187.22,688.466 1187.78,688.466 1188.34,688.466 1188.9,688.466 1189.46,688.466 1190.02,688.466 1190.58,688.466 1191.14,688.466 1191.7,688.466 1192.25,688.466 1192.81,688.466 1193.37,688.466 1193.93,688.466 1194.49,688.466 1195.05,688.466 1195.61,688.466 1196.17,688.466 1196.73,688.466 1197.29,688.466 1197.85,688.466 1198.41,688.466 1198.97,688.466 1199.52,688.466 1200.08,688.466 1200.64,688.466 1201.2,688.466 1201.76,688.466 1202.32,688.466 1202.88,688.466 1203.44,688.466 1204,688.466 1204.56,688.466 1205.12,688.466 1205.68,688.466 1206.24,688.466 1206.8,688.466 1207.35,688.466 1207.91,688.466 1208.47,688.466 1209.03,688.466 1209.59,688.466 1210.15,688.466 1210.71,688.466 1211.27,688.466 1211.83,688.466 1212.39,688.466 1212.95,688.466 1213.51,688.466 1214.07,688.466 1214.62,688.466 1215.18,688.466 1215.74,688.466 1216.3,688.466 1216.86,688.466 1217.42,688.466 1217.98,688.466 1218.54,688.466 1219.1,688.466 1219.66,688.466 1220.22,688.466 1220.78,688.466 1221.34,688.466 1221.89,688.466 1222.45,688.466 1223.01,688.466 1223.57,688.466 1224.13,688.466 1224.69,688.466 1225.25,688.466 1225.81,688.466 1226.37,688.466 1226.93,688.466 1227.49,688.466 1228.05,688.466 1228.61,688.466 1229.17,688.466 1229.72,688.466 1230.28,688.466 1230.84,688.466 1231.4,688.466 1231.96,688.466 1232.52,688.466 1233.08,688.466 1233.64,688.466 1234.2,688.466 1234.76,688.466 1235.32,688.466 1235.88,688.466 1236.44,688.466 1236.99,688.466 1237.55,688.466 1238.11,688.466 1238.67,688.466 1239.23,688.466 1239.79,688.466 1240.35,688.466 1240.91,688.466 1241.47,688.466 1242.03,688.466 1242.59,688.466 1243.15,688.466 1243.71,688.466 1244.26,688.466 1244.82,688.466 1245.38,688.466 1245.94,688.466 1246.5,688.466 1247.06,688.466 1247.62,688.466 1248.18,688.466 1248.74,688.466 1249.3,688.466 1249.86,688.466 1250.42,688.466 1250.98,688.466 1251.54,688.466 1252.09,688.466 1252.65,688.466 1253.21,688.466 1253.77,688.466 1254.33,688.466 1254.89,688.466 1255.45,688.466 1256.01,688.466 1256.57,688.466 1257.13,688.466 1257.69,688.466 1258.25,688.466 1258.81,688.466 1259.36,688.466 1259.92,688.466 1260.48,688.466 1261.04,688.466 1261.6,688.466 1262.16,688.466 1262.72,688.466 1263.28,688.466 1263.84,688.466 1264.4,688.466 1264.96,688.466 1265.52,688.466 1266.08,688.466 1266.63,688.466 1267.19,688.466 1267.75,688.466 1268.31,688.466 1268.87,688.466 1269.43,688.466 1269.99,688.466 1270.55,688.466 1271.11,688.466 1271.67,688.466 1272.23,688.466 1272.79,688.466 1273.35,688.466 1273.91,688.466 1274.46,688.466 1275.02,688.466 1275.58,688.466 1276.14,688.466 1276.7,688.466 1277.26,688.466 1277.82,688.466 1278.38,688.466 1278.94,688.466 1279.5,688.466 1280.06,688.466 1280.62,688.466 1281.18,688.466 1281.73,688.466 1282.29,688.466 1282.85,688.466 1283.41,688.466 1283.97,688.466 1284.53,688.466 1285.09,688.466 1285.65,688.466 1286.21,688.466 1286.77,688.466 1287.33,688.466 1287.89,688.466 1288.45,688.466 1289,688.466 1289.56,688.466 1290.12,688.466 1290.68,688.466 1291.24,688.466 1291.8,688.466 1292.36,688.466 1292.92,688.466 1293.48,688.466 1294.04,688.466 1294.6,688.466 1295.16,688.466 1295.72,688.466 1296.28,688.466 1296.83,688.466 1297.39,688.466 1297.95,688.466 1298.51,688.466 1299.07,688.466 1299.63,688.466 1300.19,688.466 1300.75,688.466 1301.31,688.466 1301.87,688.466 1302.43,688.466 1302.99,688.466 1303.55,688.466 1304.1,688.466 1304.66,688.466 1305.22,688.466 1305.78,688.466 1306.34,688.466 1306.9,688.466 1307.46,688.466 1308.02,688.466 1308.58,688.466 1309.14,688.466 1309.7,688.466 1310.26,688.466 1310.82,688.466 1311.38,688.466 1311.93,688.466 1312.49,688.466 1313.05,688.466 1313.61,688.466 1314.17,688.466 1314.73,688.466 1315.29,688.466 1315.85,688.466 1316.41,688.466 1316.97,688.466 1317.53,688.466 1318.09,688.466 1318.65,688.466 1319.2,688.466 1319.76,688.466 1320.32,688.466 1320.88,688.466 1321.44,688.466 1322,688.466 1322.56,688.466 1323.12,688.466 1323.68,688.466 1324.24,688.466 1324.8,688.466 1325.36,688.466 1325.92,688.466 1326.47,688.466 1327.03,688.466 1327.59,688.466 1328.15,688.466 1328.71,688.466 1329.27,688.466 1329.83,688.466 1330.39,688.466 1330.95,688.466 1331.51,688.466 1332.07,688.466 1332.63,688.466 1333.19,688.466 1333.75,688.466 1334.3,688.466 1334.86,688.466 1335.42,688.466 1335.98,688.466 1336.54,688.466 1337.1,688.466 1337.66,688.466 1338.22,688.466 1338.78,688.466 1339.34,688.466 1339.9,688.466 1340.46,688.466 1341.02,688.466 1341.57,688.466 1342.13,688.466 1342.69,688.466 1343.25,688.466 1343.81,688.466 1344.37,688.466 1344.93,688.466 1345.49,688.466 1346.05,688.466 1346.61,688.466 1347.17,688.466 1347.73,688.466 1348.29,688.466 1348.84,688.466 1349.4,688.466 1349.96,688.466 1350.52,688.466 1351.08,688.466 1351.64,688.466 1352.2,688.466 1352.76,688.466 1353.32,688.466 1353.88,688.466 1354.44,688.466 1355,688.466 1355.56,688.466 1356.12,688.466 1356.67,688.466 1357.23,688.466 1357.79,688.466 1358.35,688.466 1358.91,688.466 1359.47,688.466 1360.03,688.466 1360.59,688.466 1361.15,688.466 1361.71,688.466 1362.27,688.466 1362.83,688.466 1363.39,688.466 1363.94,688.466 1364.5,688.466 1365.06,688.466 1365.62,688.466 1366.18,688.466 1366.74,688.466 1367.3,688.466 1367.86,688.466 1368.42,688.466 1368.98,688.466 1369.54,688.466 1370.1,688.466 1370.66,688.466 1371.21,688.466 1371.77,688.466 1372.33,688.466 1372.89,688.466 1373.45,688.466 1374.01,688.466 1374.57,688.466 1375.13,688.466 1375.69,688.466 1376.25,688.466 1376.81,688.466 1377.37,688.466 1377.93,688.466 1378.49,688.466 1379.04,688.466 1379.6,688.466 1380.16,688.466 1380.72,688.466 1381.28,688.466 1381.84,688.466 1382.4,688.466 1382.96,688.466 1383.52,688.466 1384.08,688.466 1384.64,688.466 1385.2,688.466 1385.76,688.466 1386.31,688.466 1386.87,688.466 1387.43,688.466 1387.99,688.466 1388.55,688.466 1389.11,688.466 1389.67,688.466 1390.23,688.466 1390.79,688.466 1391.35,688.466 1391.91,688.466 1392.47,688.466 1393.03,688.466 1393.58,688.466 1394.14,688.466 1394.7,688.466 1395.26,688.466 1395.82,688.466 1396.38,688.466 1396.94,688.466 1397.5,688.466 1398.06,688.466 1398.62,688.466 1399.18,688.466 1399.74,688.466 1400.3,688.466 1400.86,688.466 1401.41,688.466 1401.97,688.466 1402.53,688.466 1403.09,688.466 1403.65,688.466 1404.21,688.466 1404.77,688.466 1405.33,688.466 1405.89,688.466 1406.45,688.466 1407.01,688.466 1407.57,688.466 1408.13,688.466 1408.68,688.466 1409.24,688.466 1409.8,688.466 1410.36,688.466 1410.92,688.466 1411.48,688.466 1412.04,688.466 1412.6,688.466 1413.16,688.466 1413.72,688.466 1414.28,688.466 1414.84,688.466 1415.4,688.466 1415.95,688.466 1416.51,688.466 1417.07,688.466 1417.63,688.466 1418.19,688.466 1418.75,688.466 1419.31,688.466 1419.87,688.466 1420.43,688.466 1420.99,688.466 1421.55,688.466 1422.11,688.466 1422.67,688.466 1423.23,688.466 1423.78,688.466 1424.34,688.466 1424.9,688.466 1425.46,688.466 1426.02,688.466 1426.58,688.466 1427.14,688.466 1427.7,688.466 1428.26,688.466 1428.82,688.466 1429.38,688.466 1429.94,688.466 1430.5,688.466 1431.05,688.466 1431.61,688.466 1432.17,688.466 1432.73,688.466 1433.29,688.466 1433.85,688.466 1434.41,688.466 1434.97,688.466 1435.53,688.466 1436.09,688.466 1436.65,688.466 1437.21,688.466 1437.77,688.466 1438.33,688.466 1438.88,688.466 1439.44,688.466 1440,688.466 1440.56,688.466 1441.12,688.466 1441.68,688.466 1442.24,688.466 1442.8,688.466 1443.36,688.466 1443.92,688.466 1444.48,688.466 1445.04,688.466 1445.6,688.466 1446.15,688.466 1446.71,688.466 1447.27,688.466 1447.83,688.466 1448.39,688.466 1448.95,688.466 1449.51,688.466 1450.07,688.466 1450.63,688.466 1451.19,688.466 1451.75,688.466 1452.31,688.466 1452.87,688.466 1453.42,688.466 1453.98,688.466 1454.54,688.466 1455.1,688.466 1455.66,688.466 1456.22,688.466 1456.78,688.466 1457.34,688.466 1457.9,688.466 1458.46,688.466 1459.02,688.466 1459.58,688.466 1460.14,688.466 1460.7,688.466 1461.25,688.466 1461.81,688.466 1462.37,688.466 1462.93,688.466 1463.49,688.466 1464.05,688.466 1464.61,688.466 1465.17,688.466 1465.73,688.466 1466.29,688.466 1466.85,688.466 1467.41,688.466 1467.97,688.466 1468.52,688.466 1469.08,688.466 1469.64,688.466 1470.2,688.466 1470.76,688.466 1471.32,688.466 1471.88,688.466 1472.44,688.466 1473,688.466 1473.56,688.466 1474.12,688.466 1474.68,688.466 1475.24,688.466 1475.79,688.466 1476.35,688.466 1476.91,688.466 1477.47,688.466 1478.03,688.466 1478.59,688.466 1479.15,688.466 1479.71,688.466 1480.27,688.466 1480.83,688.466 1481.39,688.466 1481.95,688.466 1482.51,688.466 1483.07,688.466 1483.62,688.466 1484.18,688.466 1484.74,688.466 1485.3,688.466 1485.86,688.466 1486.42,688.466 1486.98,688.466 1487.54,688.466 1488.1,688.466 1488.66,688.466 1489.22,688.466 1489.78,688.466 1490.34,688.466 1490.89,688.466 1491.45,688.466 1492.01,688.466 1492.57,688.466 1493.13,688.466 1493.69,688.466 1494.25,688.466 1494.81,688.466 1495.37,688.466 1495.93,688.466 1496.49,688.466 1497.05,688.466 1497.61,688.466 1498.16,688.466 1498.72,688.466 1499.28,688.466 1499.84,688.466 1500.4,688.466 1500.96,688.466 1501.52,688.466 1502.08,688.466 1502.64,688.466 1503.2,688.466 1503.76,688.466 1504.32,688.466 1504.88,688.466 1505.44,688.466 1505.99,688.466 1506.55,688.466 1507.11,688.466 1507.67,688.466 1508.23,688.466 1508.79,688.466 1509.35,688.466 1509.91,688.466 1510.47,688.466 1511.03,688.466 1511.59,688.466 1512.15,688.466 1512.71,688.466 1513.26,688.466 1513.82,688.466 1514.38,688.466 1514.94,688.466 1515.5,688.466 1516.06,688.466 1516.62,688.466 1517.18,688.466 1517.74,688.466 1518.3,688.466 1518.86,688.466 1519.42,688.466 1519.98,688.466 1520.53,688.466 1521.09,688.466 1521.65,688.466 1522.21,688.466 1522.77,688.466 1523.33,688.466 1523.89,688.466 1524.45,688.466 1525.01,688.466 1525.57,688.466 1526.13,688.466 1526.69,688.466 1527.25,688.466 1527.81,688.466 1528.36,688.466 1528.92,688.466 1529.48,688.466 1530.04,688.466 1530.6,688.466 1531.16,688.466 1531.72,688.466 1532.28,688.466 1532.84,688.466 1533.4,688.466 1533.96,688.466 1534.52,688.466 1535.08,688.466 1535.63,688.466 1536.19,688.466 1536.75,688.466 1537.31,688.466 1537.87,688.466 1538.43,688.466 1538.99,688.466 1539.55,688.466 1540.11,688.466 1540.67,688.466 1541.23,688.466 1541.79,688.466 1542.35,688.466 1542.9,688.466 1543.46,688.466 1544.02,688.466 1544.58,688.466 1545.14,688.466 1545.7,688.466 1546.26,688.466 1546.82,688.466 1547.38,688.466 1547.94,688.466 1548.5,688.466 1549.06,688.466 1549.62,688.466 1550.18,688.466 1550.73,688.466 1551.29,688.466 1551.85,688.466 1552.41,688.466 1552.97,688.466 1553.53,688.466 1554.09,688.466 1554.65,688.466 1555.21,688.466 1555.77,688.466 1556.33,688.466 1556.89,688.466 1557.45,688.466 1558,688.466 1558.56,688.466 1559.12,688.466 1559.68,688.466 1560.24,688.466 1560.8,688.466 1561.36,688.466 1561.92,688.466 1562.48,688.466 1563.04,688.466 1563.6,688.466 1564.16,688.466 1564.72,688.466 1565.28,688.466 1565.83,688.466 1566.39,688.466 1566.95,688.466 1567.51,688.466 1568.07,688.466 1568.63,688.466 1569.19,688.466 1569.75,688.466 1570.31,688.466 1570.87,688.466 1571.43,688.466 1571.99,688.466 1572.55,688.466 1573.1,688.466 1573.66,688.466 1574.22,688.466 1574.78,688.466 1575.34,688.466 1575.9,688.466 1576.46,688.466 1577.02,688.466 1577.58,688.466 1578.14,688.466 1578.7,688.466 1579.26,688.466 1579.82,688.466 1580.37,688.466 1580.93,688.466 1581.49,688.466 1582.05,688.466 1582.61,688.466 1583.17,688.466 1583.73,688.466 1584.29,688.466 1584.85,688.466 1585.41,688.466 1585.97,688.466 1586.53,688.466 1587.09,688.466 1587.65,688.466 1588.2,688.466 1588.76,688.466 1589.32,688.466 1589.88,688.466 1590.44,688.466 1591,688.466 1591.56,688.466 1592.12,688.466 1592.68,688.466 1593.24,688.466 1593.8,688.466 1594.36,688.466 1594.92,688.466 1595.47,688.466 1596.03,688.466 1596.59,688.466 1597.15,688.466 1597.71,688.466 1598.27,688.466 1598.83,688.466 1599.39,688.466 1599.95,688.466 1600.51,688.466 1601.07,688.466 1601.63,688.466 1602.19,688.466 1602.74,688.466 1603.3,688.466 1603.86,688.466 1604.42,688.466 1604.98,688.466 1605.54,688.466 1606.1,688.466 1606.66,688.466 1607.22,688.466 1607.78,688.466 1608.34,688.466 1608.9,688.466 1609.46,688.466 1610.02,688.466 1610.57,688.466 1611.13,688.466 1611.69,688.466 1612.25,688.466 1612.81,688.466 1613.37,688.466 1613.93,688.466 1614.49,688.466 1615.05,688.466 1615.61,688.466 1616.17,688.466 1616.73,688.466 1617.29,688.466 1617.84,688.466 1618.4,688.466 1618.96,688.466 1619.52,688.466 1620.08,688.466 1620.64,688.466 1621.2,688.466 1621.76,688.466 1622.32,688.466 1622.88,688.466 1623.44,688.466 1624,688.466 1624.56,688.466 1625.11,688.466 1625.67,688.466 1626.23,688.466 1626.79,688.466 1627.35,688.466 1627.91,688.466 1628.47,688.466 1629.03,688.466 1629.59,688.466 1630.15,688.466 1630.71,688.466 1631.27,688.466 1631.83,688.466 1632.39,688.466 1632.94,688.466 1633.5,688.466 1634.06,688.466 1634.62,688.466 1635.18,688.466 1635.74,688.466 1636.3,688.466 1636.86,688.466 1637.42,688.466 1637.98,688.466 1638.54,688.466 1639.1,688.466 1639.66,688.466 1640.21,688.466 1640.77,688.466 1641.33,688.466 1641.89,688.466 1642.45,688.466 1643.01,688.466 1643.57,688.466 1644.13,688.466 1644.69,688.466 1645.25,688.466 1645.81,688.466 1646.37,688.466 1646.93,688.466 1647.48,688.466 1648.04,688.466 1648.6,688.466 1649.16,688.466 1649.72,688.466 1650.28,688.466 1650.84,688.466 1651.4,688.466 1651.96,688.466 1652.52,688.466 1653.08,688.466 1653.64,688.466 1654.2,688.466 1654.76,688.466 1655.31,688.466 1655.87,688.466 1656.43,688.466 1656.99,688.466 1657.55,688.466 1658.11,688.466 1658.67,688.466 1659.23,688.466 1659.79,688.466 1660.35,688.466 1660.91,688.466 1661.47,688.466 1662.03,688.466 1662.58,688.466 1663.14,688.466 1663.7,688.466 1664.26,688.466 1664.82,688.466 1665.38,688.466 1665.94,688.466 1666.5,688.466 1667.06,688.466 1667.62,688.466 1668.18,688.466 1668.74,688.466 1669.3,688.466 1669.85,688.466 1670.41,688.466 1670.97,688.466 1671.53,688.466 1672.09,688.466 1672.65,688.466 1673.21,688.466 1673.77,688.466 1674.33,688.466 1674.89,688.466 1675.45,688.466 1676.01,688.466 1676.57,688.466 1677.13,688.466 1677.68,688.466 1678.24,688.466 1678.8,688.466 1679.36,688.466 1679.92,688.466 1680.48,688.466 1681.04,688.466 1681.6,688.466 1682.16,688.466 1682.72,688.466 1683.28,688.466 1683.84,688.466 1684.4,688.466 1684.95,688.466 1685.51,688.466 1686.07,688.466 1686.63,688.466 1687.19,688.466 1687.75,688.466 1688.31,688.466 1688.87,688.466 1689.43,688.466 1689.99,688.466 1690.55,688.466 1691.11,688.466 1691.67,688.466 1692.23,688.466 1692.78,688.466 1693.34,688.466 1693.9,688.466 1694.46,688.466 1695.02,688.466 1695.58,688.466 1696.14,688.466 1696.7,688.466 1697.26,688.466 1697.82,688.466 1698.38,688.466 1698.94,688.466 1699.5,688.466 1700.05,688.466 1700.61,688.466 1701.17,688.466 1701.73,688.466 1702.29,688.466 1702.85,688.466 1703.41,688.466 1703.97,688.466 1704.53,688.466 1705.09,688.466 1705.65,688.466 1706.21,688.466 1706.77,688.466 1707.32,688.466 1707.88,688.466 1708.44,688.466 1709,688.466 1709.56,688.466 1710.12,688.466 1710.68,688.466 1711.24,688.466 1711.8,688.466 1712.36,688.466 1712.92,688.466 1713.48,688.466 1714.04,688.466 1714.6,688.466 1715.15,688.466 1715.71,688.466 1716.27,688.466 1716.83,688.466 1717.39,688.466 1717.95,688.466 1718.51,688.466 1719.07,688.466 1719.63,688.466 1720.19,688.466 1720.75,688.466 1721.31,688.466 1721.87,688.466 1722.42,688.466 1722.98,688.466 1723.54,688.466 1724.1,688.466 1724.66,688.466 1725.22,688.466 1725.78,688.466 1726.34,688.466 1726.9,688.466 1727.46,688.466 1728.02,688.466 1728.58,688.466 1729.14,688.466 1729.69,688.466 1730.25,688.466 1730.81,688.466 1731.37,688.466 1731.93,688.466 1732.49,688.466 1733.05,688.466 1733.61,688.466 1734.17,688.466 1734.73,688.466 1735.29,688.466 1735.85,688.466 1736.41,688.466 1736.97,688.466 1737.52,688.466 1738.08,688.466 1738.64,688.466 1739.2,688.466 1739.76,688.466 1740.32,688.466 1740.88,688.466 1741.44,688.466 1742,688.466 1742.56,688.466 1743.12,688.466 1743.68,688.466 1744.24,688.466 1744.79,688.466 1745.35,688.466 1745.91,688.466 1746.47,688.466 1747.03,688.466 1747.59,688.466 1748.15,688.466 1748.71,688.466 1749.27,688.466 1749.83,688.466 1750.39,688.466 1750.95,688.466 1751.51,688.466 1752.06,688.466 1752.62,688.466 1753.18,688.466 1753.74,688.466 1754.3,688.466 1754.86,688.466 1755.42,688.466 1755.98,688.466 1756.54,688.466 1757.1,688.466 1757.66,688.466 1758.22,688.466 1758.78,688.466 1759.34,688.466 1759.89,688.466 1760.45,688.466 1761.01,688.466 1761.57,688.466 1762.13,688.466 1762.69,688.466 1763.25,688.466 1763.81,688.466 1764.37,688.466 1764.93,688.466 1765.49,688.466 1766.05,688.466 1766.61,688.466 1767.16,688.466 1767.72,688.466 1768.28,688.466 1768.84,688.466 1769.4,688.466 1769.96,688.466 1770.52,688.466 1771.08,688.466 1771.64,688.466 1772.2,688.466 1772.76,688.466 1773.32,688.466 1773.88,688.466 1774.43,688.466 1774.99,688.466 1775.55,688.466 1776.11,688.466 1776.67,688.466 1777.23,688.466 1777.79,688.466 1778.35,688.466 1778.91,688.466 1779.47,688.466 1780.03,688.466 1780.59,688.466 1781.15,688.466 1781.71,688.466 1782.26,688.466 1782.82,688.466 1783.38,688.466 1783.94,688.466 1784.5,688.466 1785.06,688.466 1785.62,688.466 1786.18,688.466 1786.74,688.466 1787.3,688.466 1787.86,688.466 1788.42,688.466 1788.98,688.466 1789.53,688.466 1790.09,688.466 1790.65,688.466 1791.21,688.466 1791.77,688.466 1792.33,688.466 1792.89,688.466 1793.45,688.466 1794.01,688.466 1794.57,688.466 1795.13,688.466 1795.69,688.466 1796.25,688.466 1796.8,688.466 1797.36,688.466 1797.92,688.466 1798.48,688.466 1799.04,688.466 1799.6,688.466 1800.16,688.466 1800.72,688.466 1801.28,688.466 1801.84,688.466 1802.4,688.466 1802.96,688.466 1803.52,688.466 1804.08,688.466 1804.63,688.466 1805.19,688.466 1805.75,688.466 1806.31,688.466 1806.87,688.466 1807.43,688.466 1807.99,688.466 1808.55,688.466 1809.11,688.466 1809.67,688.466 1810.23,688.466 1810.79,688.466 1811.35,688.466 1811.9,688.466 1812.46,688.466 1813.02,688.466 1813.58,688.466 1814.14,688.466 1814.7,688.466 1815.26,688.466 1815.82,688.466 1816.38,688.466 1816.94,688.466 1817.5,688.466 1818.06,688.466 1818.62,688.466 1819.18,688.466 1819.73,688.466 1820.29,688.466 1820.85,688.466 1821.41,688.466 1821.97,688.466 1822.53,688.466 1823.09,688.466 1823.65,688.466 1824.21,688.466 1824.77,688.466 1825.33,688.466 1825.89,688.466 1826.45,688.466 1827,688.466 1827.56,688.466 1828.12,688.466 1828.68,688.466 1829.24,688.466 1829.8,688.466 1830.36,688.466 1830.92,688.466 1831.48,688.466 1832.04,688.466 1832.6,688.466 1833.16,688.466 1833.72,688.466 1834.27,688.466 1834.83,688.466 1835.39,688.466 1835.95,688.466 1836.51,688.466 1837.07,688.466 1837.63,688.466 1838.19,688.466 \"/>\n<path clip-path=\"url(#clip873)\" d=\"M720.247 686.107 L720.806 686.107 L721.365 686.107 L721.924 686.107 L722.484 686.107 L723.043 686.107 L723.602 686.107 L724.161 686.107 L724.721 686.107 L725.28 686.107 L725.839 686.107 L726.398 686.107 L726.958 686.107 L727.517 686.107 L728.076 686.107 L728.635 686.107 L729.195 686.107 L729.754 686.107 L730.313 686.107 L730.872 686.107 L731.432 686.107 L731.991 686.107 L732.55 686.107 L733.109 686.107 L733.669 686.107 L734.228 686.107 L734.787 686.107 L735.346 686.107 L735.906 686.107 L736.465 686.107 L737.024 686.107 L737.583 686.107 L738.143 686.107 L738.702 686.107 L739.261 686.107 L739.82 686.107 L740.38 686.107 L740.939 686.107 L741.498 686.107 L742.057 686.107 L742.617 686.107 L743.176 686.107 L743.735 686.107 L744.294 686.107 L744.854 686.107 L745.413 686.107 L745.972 686.107 L746.531 686.107 L747.091 686.107 L747.65 686.107 L748.209 686.107 L748.768 686.107 L749.328 686.107 L749.887 686.107 L750.446 686.107 L751.005 686.107 L751.565 686.107 L752.124 686.107 L752.683 686.107 L753.242 686.107 L753.802 686.107 L754.361 686.107 L754.92 686.107 L755.479 686.107 L756.039 686.107 L756.598 686.107 L757.157 686.107 L757.716 686.107 L758.276 686.107 L758.835 686.107 L759.394 686.107 L759.953 686.107 L760.513 686.107 L761.072 686.107 L761.631 686.107 L762.19 686.107 L762.75 686.107 L763.309 686.107 L763.868 686.107 L764.427 686.107 L764.987 686.107 L765.546 686.107 L766.105 686.107 L766.664 686.107 L767.224 686.107 L767.783 686.107 L768.342 686.107 L768.901 686.107 L769.461 686.107 L770.02 686.107 L770.579 686.107 L771.138 686.107 L771.698 686.107 L772.257 686.107 L772.816 686.107 L773.375 686.107 L773.935 686.107 L774.494 686.107 L775.053 686.107 L775.612 686.107 L776.172 686.107 L776.731 686.107 L777.29 686.107 L777.849 686.107 L778.409 686.107 L778.968 686.107 L779.527 686.107 L780.086 686.107 L780.646 686.107 L781.205 686.107 L781.764 686.107 L782.323 686.107 L782.883 686.107 L783.442 686.107 L784.001 686.107 L784.56 686.107 L785.12 686.107 L785.679 686.107 L786.238 686.107 L786.797 686.107 L787.357 686.107 L787.916 686.107 L788.475 686.107 L789.034 686.107 L789.594 686.107 L790.153 686.107 L790.712 686.107 L791.271 686.107 L791.831 686.107 L792.39 686.107 L792.949 686.107 L793.508 686.107 L794.068 686.107 L794.627 686.107 L795.186 686.107 L795.745 686.107 L796.305 686.107 L796.864 686.107 L797.423 686.107 L797.982 686.107 L798.542 686.107 L799.101 686.107 L799.66 686.107 L800.219 686.107 L800.779 686.107 L801.338 686.107 L801.897 686.107 L802.456 686.107 L803.016 686.107 L803.575 686.107 L804.134 686.107 L804.693 686.107 L805.253 686.107 L805.812 686.107 L806.371 686.107 L806.931 686.107 L807.49 686.107 L808.049 686.107 L808.608 686.107 L809.168 686.107 L809.727 686.107 L810.286 686.107 L810.845 686.107 L811.405 686.107 L811.964 686.107 L812.523 686.107 L813.082 686.107 L813.642 686.107 L814.201 686.107 L814.76 686.107 L815.319 686.107 L815.879 686.107 L816.438 686.107 L816.997 686.107 L817.556 686.107 L818.116 686.107 L818.675 686.107 L819.234 686.107 L819.793 686.107 L820.353 686.107 L820.912 686.107 L821.471 686.107 L822.03 686.107 L822.59 686.107 L823.149 686.107 L823.708 686.107 L824.267 686.107 L824.827 686.107 L825.386 686.107 L825.945 686.107 L826.504 686.107 L827.064 686.107 L827.623 686.107 L828.182 686.107 L828.741 686.107 L829.301 686.107 L829.86 686.107 L830.419 686.107 L830.978 686.107 L831.538 686.107 L832.097 686.107 L832.656 686.107 L833.215 686.107 L833.775 686.107 L834.334 686.107 L834.893 686.107 L835.452 686.107 L836.012 686.107 L836.571 686.107 L837.13 686.107 L837.689 686.107 L838.249 686.107 L838.808 686.107 L839.367 686.107 L839.926 686.107 L840.486 686.107 L841.045 686.107 L841.604 686.107 L842.163 686.107 L842.723 686.107 L843.282 686.107 L843.841 686.107 L844.4 686.107 L844.96 686.107 L845.519 686.107 L846.078 686.107 L846.637 686.107 L847.197 686.107 L847.756 686.107 L848.315 686.107 L848.874 686.107 L849.434 686.107 L849.993 686.107 L850.552 686.107 L851.111 686.107 L851.671 686.107 L852.23 686.107 L852.789 686.107 L853.348 686.107 L853.908 686.107 L854.467 686.107 L855.026 686.107 L855.585 686.107 L856.145 686.107 L856.704 686.107 L857.263 686.107 L857.822 686.107 L858.382 686.107 L858.941 686.107 L859.5 686.107 L860.059 686.107 L860.619 686.107 L861.178 686.107 L861.737 686.107 L862.296 686.107 L862.856 686.107 L863.415 686.107 L863.974 686.107 L864.533 686.107 L865.093 686.107 L865.652 686.107 L866.211 686.107 L866.77 686.107 L867.33 686.107 L867.889 686.107 L868.448 686.107 L869.007 686.107 L869.567 686.107 L870.126 686.107 L870.685 686.107 L871.244 686.107 L871.804 686.107 L872.363 686.107 L872.922 686.107 L873.481 686.107 L874.041 686.107 L874.6 686.107 L875.159 686.107 L875.718 686.107 L876.278 686.107 L876.837 686.107 L877.396 686.107 L877.955 686.107 L878.515 686.107 L879.074 686.107 L879.633 686.107 L880.192 686.107 L880.752 686.107 L881.311 686.107 L881.87 686.107 L882.429 686.107 L882.989 686.107 L883.548 686.107 L884.107 686.107 L884.666 686.107 L885.226 686.107 L885.785 686.107 L886.344 686.107 L886.903 686.107 L887.463 686.107 L888.022 686.107 L888.581 686.107 L889.14 686.107 L889.7 686.107 L890.259 686.107 L890.818 686.107 L891.377 686.107 L891.937 686.107 L892.496 686.107 L893.055 686.107 L893.614 686.107 L894.174 686.107 L894.733 686.107 L895.292 686.107 L895.851 686.107 L896.411 686.107 L896.97 686.107 L897.529 686.107 L898.088 686.107 L898.648 686.107 L899.207 686.107 L899.766 686.107 L900.325 686.107 L900.885 686.107 L901.444 686.107 L902.003 686.107 L902.562 686.107 L903.122 686.107 L903.681 686.107 L904.24 686.107 L904.799 686.107 L905.359 686.107 L905.918 686.107 L906.477 686.107 L907.036 686.107 L907.596 686.107 L908.155 686.107 L908.714 686.107 L909.273 686.107 L909.833 686.107 L910.392 686.107 L910.951 686.107 L911.51 686.107 L912.07 686.107 L912.629 686.107 L913.188 686.107 L913.747 686.107 L914.307 686.107 L914.866 686.107 L915.425 686.107 L915.984 686.107 L916.544 686.107 L917.103 686.107 L917.662 686.107 L918.221 686.107 L918.781 686.107 L919.34 686.107 L919.899 686.107 L920.458 686.107 L921.018 686.107 L921.577 686.107 L922.136 686.107 L922.695 686.107 L923.255 686.107 L923.814 686.107 L924.373 686.107 L924.932 686.107 L925.492 686.107 L926.051 686.107 L926.61 686.107 L927.169 686.107 L927.729 686.107 L928.288 686.107 L928.847 686.107 L929.406 686.107 L929.966 686.107 L930.525 686.107 L931.084 686.107 L931.644 686.107 L932.203 686.107 L932.762 686.107 L933.321 686.107 L933.881 686.107 L934.44 686.107 L934.999 686.107 L935.558 686.107 L936.118 686.107 L936.677 686.107 L937.236 686.107 L937.795 686.107 L938.355 686.107 L938.914 686.107 L939.473 686.107 L940.032 686.107 L940.592 686.107 L941.151 686.107 L941.71 686.107 L942.269 686.107 L942.829 686.107 L943.388 686.107 L943.947 686.107 L944.506 686.107 L945.066 686.107 L945.625 686.107 L946.184 686.107 L946.743 686.107 L947.303 686.107 L947.862 686.107 L948.421 686.107 L948.98 686.107 L949.54 686.107 L950.099 686.107 L950.658 686.107 L951.217 686.107 L951.777 686.107 L952.336 686.107 L952.895 686.107 L953.454 686.107 L954.014 686.107 L954.573 686.107 L955.132 686.107 L955.691 686.107 L956.251 686.107 L956.81 686.107 L957.369 686.107 L957.928 686.107 L958.488 686.107 L959.047 686.107 L959.606 686.107 L960.165 686.107 L960.725 686.107 L961.284 686.107 L961.843 686.107 L962.402 686.107 L962.962 686.107 L963.521 686.107 L964.08 686.107 L964.639 686.107 L965.199 686.107 L965.758 686.107 L966.317 686.107 L966.876 686.107 L967.436 686.107 L967.995 686.107 L968.554 686.107 L969.113 686.107 L969.673 686.107 L970.232 686.107 L970.791 686.107 L971.35 686.107 L971.91 686.107 L972.469 686.107 L973.028 686.107 L973.587 686.107 L974.147 686.107 L974.706 686.107 L975.265 686.107 L975.824 686.107 L976.384 686.107 L976.943 686.107 L977.502 686.107 L978.061 686.107 L978.621 686.107 L979.18 686.107 L979.739 686.107 L980.298 686.107 L980.858 686.107 L981.417 686.107 L981.976 686.107 L982.535 686.107 L983.095 686.107 L983.654 686.107 L984.213 686.107 L984.772 686.107 L985.332 686.107 L985.891 686.107 L986.45 686.107 L987.009 686.107 L987.569 686.107 L988.128 686.107 L988.687 686.107 L989.246 686.107 L989.806 686.107 L990.365 686.107 L990.924 686.107 L991.483 686.107 L992.043 686.107 L992.602 686.107 L993.161 686.107 L993.72 686.107 L994.28 686.107 L994.839 686.107 L995.398 686.107 L995.957 686.107 L996.517 686.107 L997.076 686.107 L997.635 686.107 L998.194 686.107 L998.754 686.107 L999.313 686.107 L999.872 686.107 L1000.43 686.107 L1000.99 686.107 L1001.55 686.107 L1002.11 686.107 L1002.67 686.107 L1003.23 686.107 L1003.79 686.107 L1004.35 686.107 L1004.91 686.107 L1005.46 686.107 L1006.02 686.107 L1006.58 686.107 L1007.14 686.107 L1007.7 686.107 L1008.26 686.107 L1008.82 686.107 L1009.38 686.107 L1009.94 686.107 L1010.5 686.107 L1011.06 686.107 L1011.62 686.107 L1012.18 686.107 L1012.73 686.107 L1013.29 686.107 L1013.85 686.107 L1014.41 686.107 L1014.97 686.107 L1015.53 686.107 L1016.09 686.107 L1016.65 686.107 L1017.21 686.107 L1017.77 686.107 L1018.33 686.107 L1018.89 686.107 L1019.45 686.107 L1020.01 686.107 L1020.56 686.107 L1021.12 686.107 L1021.68 686.107 L1022.24 686.107 L1022.8 686.107 L1023.36 686.107 L1023.92 686.107 L1024.48 686.107 L1025.04 686.107 L1025.6 686.107 L1026.16 686.107 L1026.72 686.107 L1027.28 686.107 L1027.83 686.107 L1028.39 686.107 L1028.95 686.107 L1029.51 686.107 L1030.07 686.107 L1030.63 686.107 L1031.19 686.107 L1031.75 686.107 L1032.31 686.107 L1032.87 686.107 L1033.43 686.107 L1033.99 686.107 L1034.55 686.107 L1035.1 686.107 L1035.66 686.107 L1036.22 686.107 L1036.78 686.107 L1037.34 686.107 L1037.9 686.107 L1038.46 686.107 L1039.02 686.107 L1039.58 686.107 L1040.14 686.107 L1040.7 686.107 L1041.26 686.107 L1041.82 686.107 L1042.38 686.107 L1042.93 686.107 L1043.49 686.107 L1044.05 686.107 L1044.61 686.107 L1045.17 686.107 L1045.73 686.107 L1046.29 686.107 L1046.85 686.107 L1047.41 686.107 L1047.97 686.107 L1048.53 686.107 L1049.09 686.107 L1049.65 686.107 L1050.2 686.107 L1050.76 686.107 L1051.32 686.107 L1051.88 686.107 L1052.44 686.107 L1053 686.107 L1053.56 686.107 L1054.12 686.107 L1054.68 686.107 L1055.24 686.107 L1055.8 686.107 L1056.36 686.107 L1056.92 686.107 L1057.48 686.107 L1058.03 686.107 L1058.59 686.107 L1059.15 686.107 L1059.71 686.107 L1060.27 686.107 L1060.83 686.107 L1061.39 686.107 L1061.95 686.107 L1062.51 686.107 L1063.07 686.107 L1063.63 686.107 L1064.19 686.107 L1064.75 686.107 L1065.3 686.107 L1065.86 686.107 L1066.42 686.107 L1066.98 686.107 L1067.54 686.107 L1068.1 686.107 L1068.66 686.107 L1069.22 686.107 L1069.78 686.107 L1070.34 686.107 L1070.9 686.107 L1071.46 686.107 L1072.02 686.107 L1072.57 686.107 L1073.13 686.107 L1073.69 686.107 L1074.25 686.107 L1074.81 686.107 L1075.37 686.107 L1075.93 686.107 L1076.49 686.107 L1077.05 686.107 L1077.61 686.107 L1078.17 686.107 L1078.73 686.107 L1079.29 686.107 L1079.85 686.107 L1080.4 686.107 L1080.96 686.107 L1081.52 686.107 L1082.08 686.107 L1082.64 686.107 L1083.2 686.107 L1083.76 686.107 L1084.32 686.107 L1084.88 686.107 L1085.44 686.107 L1086 686.107 L1086.56 686.107 L1087.12 686.107 L1087.67 686.107 L1088.23 686.107 L1088.79 686.107 L1089.35 686.107 L1089.91 686.107 L1090.47 686.107 L1091.03 686.107 L1091.59 686.107 L1092.15 686.107 L1092.71 686.107 L1093.27 686.107 L1093.83 686.107 L1094.39 686.107 L1094.94 686.107 L1095.5 686.107 L1096.06 686.107 L1096.62 686.107 L1097.18 686.107 L1097.74 686.107 L1098.3 686.107 L1098.86 686.107 L1099.42 686.107 L1099.98 686.107 L1100.54 686.107 L1101.1 686.107 L1101.66 686.107 L1102.22 686.107 L1102.77 686.107 L1103.33 686.107 L1103.89 686.107 L1104.45 686.107 L1105.01 686.107 L1105.57 686.107 L1106.13 686.107 L1106.69 686.107 L1107.25 686.107 L1107.81 686.107 L1108.37 686.107 L1108.93 686.107 L1109.49 686.107 L1110.04 686.107 L1110.6 686.107 L1111.16 686.107 L1111.72 686.107 L1112.28 686.107 L1112.84 686.107 L1113.4 686.107 L1113.96 686.107 L1114.52 686.107 L1115.08 686.107 L1115.64 686.107 L1116.2 686.107 L1116.76 686.107 L1117.31 686.107 L1117.87 686.107 L1118.43 686.107 L1118.99 686.107 L1119.55 686.107 L1120.11 686.107 L1120.67 686.107 L1121.23 686.107 L1121.79 686.107 L1122.35 686.107 L1122.91 686.107 L1123.47 686.107 L1124.03 686.107 L1124.59 686.107 L1125.14 686.107 L1125.7 686.107 L1126.26 686.107 L1126.82 686.107 L1127.38 686.107 L1127.94 686.107 L1128.5 686.107 L1129.06 686.107 L1129.62 686.107 L1130.18 686.107 L1130.74 686.107 L1131.3 686.107 L1131.86 686.107 L1132.41 686.107 L1132.97 686.107 L1133.53 686.107 L1134.09 686.107 L1134.65 686.107 L1135.21 686.107 L1135.77 686.107 L1136.33 686.107 L1136.89 686.107 L1137.45 686.107 L1138.01 686.107 L1138.57 686.107 L1139.13 686.107 L1139.68 686.107 L1140.24 686.107 L1140.8 686.107 L1141.36 686.107 L1141.92 686.107 L1142.48 686.107 L1143.04 686.107 L1143.6 686.107 L1144.16 686.107 L1144.72 686.107 L1145.28 686.107 L1145.84 686.107 L1146.4 686.107 L1146.96 686.107 L1147.51 686.107 L1148.07 686.107 L1148.63 686.107 L1149.19 686.107 L1149.75 686.107 L1150.31 686.107 L1150.87 686.107 L1151.43 686.107 L1151.99 686.107 L1152.55 686.107 L1153.11 686.107 L1153.67 686.107 L1154.23 686.107 L1154.78 686.107 L1155.34 686.107 L1155.9 686.107 L1156.46 686.107 L1157.02 686.107 L1157.58 686.107 L1158.14 686.107 L1158.7 686.107 L1159.26 686.107 L1159.82 686.107 L1160.38 686.107 L1160.94 686.107 L1161.5 686.107 L1162.05 686.107 L1162.61 686.107 L1163.17 686.107 L1163.73 686.107 L1164.29 686.107 L1164.85 686.107 L1165.41 686.107 L1165.97 686.107 L1166.53 686.107 L1167.09 686.107 L1167.65 686.107 L1168.21 686.107 L1168.77 686.107 L1169.33 686.107 L1169.88 686.107 L1170.44 686.107 L1171 686.107 L1171.56 686.107 L1172.12 686.107 L1172.68 686.107 L1173.24 686.107 L1173.8 686.107 L1174.36 686.107 L1174.92 686.107 L1175.48 686.107 L1176.04 686.107 L1176.6 686.107 L1177.15 686.107 L1177.71 686.107 L1178.27 686.107 L1178.83 686.107 L1179.39 686.107 L1179.95 686.107 L1180.51 686.107 L1181.07 686.107 L1181.63 686.107 L1182.19 686.107 L1182.75 686.107 L1183.31 686.107 L1183.87 686.107 L1184.43 686.107 L1184.98 686.107 L1185.54 686.107 L1186.1 686.107 L1186.66 686.107 L1187.22 686.107 L1187.78 686.107 L1188.34 686.107 L1188.9 686.107 L1189.46 686.107 L1190.02 686.107 L1190.58 686.107 L1191.14 686.107 L1191.7 686.107 L1192.25 686.107 L1192.81 686.107 L1193.37 686.107 L1193.93 686.107 L1194.49 686.107 L1195.05 686.107 L1195.61 686.107 L1196.17 686.107 L1196.73 686.107 L1197.29 686.107 L1197.85 686.107 L1198.41 686.107 L1198.97 686.107 L1199.52 686.107 L1200.08 686.107 L1200.64 686.107 L1201.2 686.107 L1201.76 686.107 L1202.32 686.107 L1202.88 686.107 L1203.44 686.107 L1204 686.107 L1204.56 686.107 L1205.12 686.107 L1205.68 686.107 L1206.24 686.107 L1206.8 686.107 L1207.35 686.107 L1207.91 686.107 L1208.47 686.107 L1209.03 686.107 L1209.59 686.107 L1210.15 686.107 L1210.71 686.107 L1211.27 686.107 L1211.83 686.107 L1212.39 686.107 L1212.95 686.107 L1213.51 686.107 L1214.07 686.107 L1214.62 686.107 L1215.18 686.107 L1215.74 686.107 L1216.3 686.107 L1216.86 686.107 L1217.42 686.107 L1217.98 686.107 L1218.54 686.107 L1219.1 686.107 L1219.66 686.107 L1220.22 686.107 L1220.78 686.107 L1221.34 686.107 L1221.89 686.107 L1222.45 686.107 L1223.01 686.107 L1223.57 686.107 L1224.13 686.107 L1224.69 686.107 L1225.25 686.107 L1225.81 686.107 L1226.37 686.107 L1226.93 686.107 L1227.49 686.107 L1228.05 686.107 L1228.61 686.107 L1229.17 686.107 L1229.72 686.107 L1230.28 686.107 L1230.84 686.107 L1231.4 686.107 L1231.96 686.107 L1232.52 686.107 L1233.08 686.107 L1233.64 686.107 L1234.2 686.107 L1234.76 686.107 L1235.32 686.107 L1235.88 686.107 L1236.44 686.107 L1236.99 686.107 L1237.55 686.107 L1238.11 686.107 L1238.67 686.107 L1239.23 686.107 L1239.79 686.107 L1240.35 686.107 L1240.91 686.107 L1241.47 686.107 L1242.03 686.107 L1242.59 686.107 L1243.15 686.107 L1243.71 686.107 L1244.26 686.107 L1244.82 686.107 L1245.38 686.107 L1245.94 686.107 L1246.5 686.107 L1247.06 686.107 L1247.62 686.107 L1248.18 686.107 L1248.74 686.107 L1249.3 686.107 L1249.86 686.107 L1250.42 686.107 L1250.98 686.107 L1251.54 686.107 L1252.09 686.107 L1252.65 686.107 L1253.21 686.107 L1253.77 686.107 L1254.33 686.107 L1254.89 686.107 L1255.45 686.107 L1256.01 686.107 L1256.57 686.107 L1257.13 686.107 L1257.69 686.107 L1258.25 686.107 L1258.81 686.107 L1259.36 686.107 L1259.92 686.107 L1260.48 686.107 L1261.04 686.107 L1261.6 686.107 L1262.16 686.107 L1262.72 686.107 L1263.28 686.107 L1263.84 686.107 L1264.4 686.107 L1264.96 686.107 L1265.52 686.107 L1266.08 686.107 L1266.63 686.107 L1267.19 686.107 L1267.75 686.107 L1268.31 686.107 L1268.87 686.107 L1269.43 686.107 L1269.99 686.107 L1270.55 686.107 L1271.11 686.107 L1271.67 686.107 L1272.23 686.107 L1272.79 686.107 L1273.35 686.107 L1273.91 686.107 L1274.46 686.107 L1275.02 686.107 L1275.58 686.107 L1276.14 686.107 L1276.7 686.107 L1277.26 686.107 L1277.82 686.107 L1278.38 686.107 L1278.94 686.107 L1279.5 686.107 L1280.06 686.107 L1280.62 686.107 L1281.18 686.107 L1281.73 686.107 L1282.29 686.107 L1282.85 686.107 L1283.41 686.107 L1283.97 686.107 L1284.53 686.107 L1285.09 686.107 L1285.65 686.107 L1286.21 686.107 L1286.77 686.107 L1287.33 686.107 L1287.89 686.107 L1288.45 686.107 L1289 686.107 L1289.56 686.107 L1290.12 686.107 L1290.68 686.107 L1291.24 686.107 L1291.8 686.107 L1292.36 686.107 L1292.92 686.107 L1293.48 686.107 L1294.04 686.107 L1294.6 686.107 L1295.16 686.107 L1295.72 686.107 L1296.28 686.107 L1296.83 686.107 L1297.39 686.107 L1297.95 686.107 L1298.51 686.107 L1299.07 686.107 L1299.63 686.107 L1300.19 686.107 L1300.75 686.107 L1301.31 686.107 L1301.87 686.107 L1302.43 686.107 L1302.99 686.107 L1303.55 686.107 L1304.1 686.107 L1304.66 686.107 L1305.22 686.107 L1305.78 686.107 L1306.34 686.107 L1306.9 686.107 L1307.46 686.107 L1308.02 686.107 L1308.58 686.107 L1309.14 686.107 L1309.7 686.107 L1310.26 686.107 L1310.82 686.107 L1311.38 686.107 L1311.93 686.107 L1312.49 686.107 L1313.05 686.107 L1313.61 686.107 L1314.17 686.107 L1314.73 686.107 L1315.29 686.107 L1315.85 686.107 L1316.41 686.107 L1316.97 686.107 L1317.53 686.107 L1318.09 686.107 L1318.65 686.107 L1319.2 686.107 L1319.76 686.107 L1320.32 686.107 L1320.88 686.107 L1321.44 686.107 L1322 686.107 L1322.56 686.107 L1323.12 686.107 L1323.68 686.107 L1324.24 686.107 L1324.8 686.107 L1325.36 686.107 L1325.92 686.107 L1326.47 686.107 L1327.03 686.107 L1327.59 686.107 L1328.15 686.107 L1328.71 686.107 L1329.27 686.107 L1329.83 686.107 L1330.39 686.107 L1330.95 686.107 L1331.51 686.107 L1332.07 686.107 L1332.63 686.107 L1333.19 686.107 L1333.75 686.107 L1334.3 686.107 L1334.86 686.107 L1335.42 686.107 L1335.98 686.107 L1336.54 686.107 L1337.1 686.107 L1337.66 686.107 L1338.22 686.107 L1338.78 686.107 L1339.34 686.107 L1339.9 686.107 L1340.46 686.107 L1341.02 686.107 L1341.57 686.107 L1342.13 686.107 L1342.69 686.107 L1343.25 686.107 L1343.81 686.107 L1344.37 686.107 L1344.93 686.107 L1345.49 686.107 L1346.05 686.107 L1346.61 686.107 L1347.17 686.107 L1347.73 686.107 L1348.29 686.107 L1348.84 686.107 L1349.4 686.107 L1349.96 686.107 L1350.52 686.107 L1351.08 686.107 L1351.64 686.107 L1352.2 686.107 L1352.76 686.107 L1353.32 686.107 L1353.88 686.107 L1354.44 686.107 L1355 686.107 L1355.56 686.107 L1356.12 686.107 L1356.67 686.107 L1357.23 686.107 L1357.79 686.107 L1358.35 686.107 L1358.91 686.107 L1359.47 686.107 L1360.03 686.107 L1360.59 686.107 L1361.15 686.107 L1361.71 686.107 L1362.27 686.107 L1362.83 686.107 L1363.39 686.107 L1363.94 686.107 L1364.5 686.107 L1365.06 686.107 L1365.62 686.107 L1366.18 686.107 L1366.74 686.107 L1367.3 686.107 L1367.86 686.107 L1368.42 686.107 L1368.98 686.107 L1369.54 686.107 L1370.1 686.107 L1370.66 686.107 L1371.21 686.107 L1371.77 686.107 L1372.33 686.107 L1372.89 686.107 L1373.45 686.107 L1374.01 686.107 L1374.57 686.107 L1375.13 686.107 L1375.69 686.107 L1376.25 686.107 L1376.81 686.107 L1377.37 686.107 L1377.93 686.107 L1378.49 686.107 L1379.04 686.107 L1379.6 686.107 L1380.16 686.107 L1380.72 686.107 L1381.28 686.107 L1381.84 686.107 L1382.4 686.107 L1382.96 686.107 L1383.52 686.107 L1384.08 686.107 L1384.64 686.107 L1385.2 686.107 L1385.76 686.107 L1386.31 686.107 L1386.87 686.107 L1387.43 686.107 L1387.99 686.107 L1388.55 686.107 L1389.11 686.107 L1389.67 686.107 L1390.23 686.107 L1390.79 686.107 L1391.35 686.107 L1391.91 686.107 L1392.47 686.107 L1393.03 686.107 L1393.58 686.107 L1394.14 686.107 L1394.7 686.107 L1395.26 686.107 L1395.82 686.107 L1396.38 686.107 L1396.94 686.107 L1397.5 686.107 L1398.06 686.107 L1398.62 686.107 L1399.18 686.107 L1399.74 686.107 L1400.3 686.107 L1400.86 686.107 L1401.41 686.107 L1401.97 686.107 L1402.53 686.107 L1403.09 686.107 L1403.65 686.107 L1404.21 686.107 L1404.77 686.107 L1405.33 686.107 L1405.89 686.107 L1406.45 686.107 L1407.01 686.107 L1407.57 686.107 L1408.13 686.107 L1408.68 686.107 L1409.24 686.107 L1409.8 686.107 L1410.36 686.107 L1410.92 686.107 L1411.48 686.107 L1412.04 686.107 L1412.6 686.107 L1413.16 686.107 L1413.72 686.107 L1414.28 686.107 L1414.84 686.107 L1415.4 686.107 L1415.95 686.107 L1416.51 686.107 L1417.07 686.107 L1417.63 686.107 L1418.19 686.107 L1418.75 686.107 L1419.31 686.107 L1419.87 686.107 L1420.43 686.107 L1420.99 686.107 L1421.55 686.107 L1422.11 686.107 L1422.67 686.107 L1423.23 686.107 L1423.78 686.107 L1424.34 686.107 L1424.9 686.107 L1425.46 686.107 L1426.02 686.107 L1426.58 686.107 L1427.14 686.107 L1427.7 686.107 L1428.26 686.107 L1428.82 686.107 L1429.38 686.107 L1429.94 686.107 L1430.5 686.107 L1431.05 686.107 L1431.61 686.107 L1432.17 686.107 L1432.73 686.107 L1433.29 686.107 L1433.85 686.107 L1434.41 686.107 L1434.97 686.107 L1435.53 686.107 L1436.09 686.107 L1436.65 686.107 L1437.21 686.107 L1437.77 686.107 L1438.33 686.107 L1438.88 686.107 L1439.44 686.107 L1440 686.107 L1440.56 686.107 L1441.12 686.107 L1441.68 686.107 L1442.24 686.107 L1442.8 686.107 L1443.36 686.107 L1443.92 686.107 L1444.48 686.107 L1445.04 686.107 L1445.6 686.107 L1446.15 686.107 L1446.71 686.107 L1447.27 686.107 L1447.83 686.107 L1448.39 686.107 L1448.95 686.107 L1449.51 686.107 L1450.07 686.107 L1450.63 686.107 L1451.19 686.107 L1451.75 686.107 L1452.31 686.107 L1452.87 686.107 L1453.42 686.107 L1453.98 686.107 L1454.54 686.107 L1455.1 686.107 L1455.66 686.107 L1456.22 686.107 L1456.78 686.107 L1457.34 686.107 L1457.9 686.107 L1458.46 686.107 L1459.02 686.107 L1459.58 686.107 L1460.14 686.107 L1460.7 686.107 L1461.25 686.107 L1461.81 686.107 L1462.37 686.107 L1462.93 686.107 L1463.49 686.107 L1464.05 686.107 L1464.61 686.107 L1465.17 686.107 L1465.73 686.107 L1466.29 686.107 L1466.85 686.107 L1467.41 686.107 L1467.97 686.107 L1468.52 686.107 L1469.08 686.107 L1469.64 686.107 L1470.2 686.107 L1470.76 686.107 L1471.32 686.107 L1471.88 686.107 L1472.44 686.107 L1473 686.107 L1473.56 686.107 L1474.12 686.107 L1474.68 686.107 L1475.24 686.107 L1475.79 686.107 L1476.35 686.107 L1476.91 686.107 L1477.47 686.107 L1478.03 686.107 L1478.59 686.107 L1479.15 686.107 L1479.71 686.107 L1480.27 686.107 L1480.83 686.107 L1481.39 686.107 L1481.95 686.107 L1482.51 686.107 L1483.07 686.107 L1483.62 686.107 L1484.18 686.107 L1484.74 686.107 L1485.3 686.107 L1485.86 686.107 L1486.42 686.107 L1486.98 686.107 L1487.54 686.107 L1488.1 686.107 L1488.66 686.107 L1489.22 686.107 L1489.78 686.107 L1490.34 686.107 L1490.89 686.107 L1491.45 686.107 L1492.01 686.107 L1492.57 686.107 L1493.13 686.107 L1493.69 686.107 L1494.25 686.107 L1494.81 686.107 L1495.37 686.107 L1495.93 686.107 L1496.49 686.107 L1497.05 686.107 L1497.61 686.107 L1498.16 686.107 L1498.72 686.107 L1499.28 686.107 L1499.84 686.107 L1500.4 686.107 L1500.96 686.107 L1501.52 686.107 L1502.08 686.107 L1502.64 686.107 L1503.2 686.107 L1503.76 686.107 L1504.32 686.107 L1504.88 686.107 L1505.44 686.107 L1505.99 686.107 L1506.55 686.107 L1507.11 686.107 L1507.67 686.107 L1508.23 686.107 L1508.79 686.107 L1509.35 686.107 L1509.91 686.107 L1510.47 686.107 L1511.03 686.107 L1511.59 686.107 L1512.15 686.107 L1512.71 686.107 L1513.26 686.107 L1513.82 686.107 L1514.38 686.107 L1514.94 686.107 L1515.5 686.107 L1516.06 686.107 L1516.62 686.107 L1517.18 686.107 L1517.74 686.107 L1518.3 686.107 L1518.86 686.107 L1519.42 686.107 L1519.98 686.107 L1520.53 686.107 L1521.09 686.107 L1521.65 686.107 L1522.21 686.107 L1522.77 686.107 L1523.33 686.107 L1523.89 686.107 L1524.45 686.107 L1525.01 686.107 L1525.57 686.107 L1526.13 686.107 L1526.69 686.107 L1527.25 686.107 L1527.81 686.107 L1528.36 686.107 L1528.92 686.107 L1529.48 686.107 L1530.04 686.107 L1530.6 686.107 L1531.16 686.107 L1531.72 686.107 L1532.28 686.107 L1532.84 686.107 L1533.4 686.107 L1533.96 686.107 L1534.52 686.107 L1535.08 686.107 L1535.63 686.107 L1536.19 686.107 L1536.75 686.107 L1537.31 686.107 L1537.87 686.107 L1538.43 686.107 L1538.99 686.107 L1539.55 686.107 L1540.11 686.107 L1540.67 686.107 L1541.23 686.107 L1541.79 686.107 L1542.35 686.107 L1542.9 686.107 L1543.46 686.107 L1544.02 686.107 L1544.58 686.107 L1545.14 686.107 L1545.7 686.107 L1546.26 686.107 L1546.82 686.107 L1547.38 686.107 L1547.94 686.107 L1548.5 686.107 L1549.06 686.107 L1549.62 686.107 L1550.18 686.107 L1550.73 686.107 L1551.29 686.107 L1551.85 686.107 L1552.41 686.107 L1552.97 686.107 L1553.53 686.107 L1554.09 686.107 L1554.65 686.107 L1555.21 686.107 L1555.77 686.107 L1556.33 686.107 L1556.89 686.107 L1557.45 686.107 L1558 686.107 L1558.56 686.107 L1559.12 686.107 L1559.68 686.107 L1560.24 686.107 L1560.8 686.107 L1561.36 686.107 L1561.92 686.107 L1562.48 686.107 L1563.04 686.107 L1563.6 686.107 L1564.16 686.107 L1564.72 686.107 L1565.28 686.107 L1565.83 686.107 L1566.39 686.107 L1566.95 686.107 L1567.51 686.107 L1568.07 686.107 L1568.63 686.107 L1569.19 686.107 L1569.75 686.107 L1570.31 686.107 L1570.87 686.107 L1571.43 686.107 L1571.99 686.107 L1572.55 686.107 L1573.1 686.107 L1573.66 686.107 L1574.22 686.107 L1574.78 686.107 L1575.34 686.107 L1575.9 686.107 L1576.46 686.107 L1577.02 686.107 L1577.58 686.107 L1578.14 686.107 L1578.7 686.107 L1579.26 686.107 L1579.82 686.107 L1580.37 686.107 L1580.93 686.107 L1581.49 686.107 L1582.05 686.107 L1582.61 686.107 L1583.17 686.107 L1583.73 686.107 L1584.29 686.107 L1584.85 686.107 L1585.41 686.107 L1585.97 686.107 L1586.53 686.107 L1587.09 686.107 L1587.65 686.107 L1588.2 686.107 L1588.76 686.107 L1589.32 686.107 L1589.88 686.107 L1590.44 686.107 L1591 686.107 L1591.56 686.107 L1592.12 686.107 L1592.68 686.107 L1593.24 686.107 L1593.8 686.107 L1594.36 686.107 L1594.92 686.107 L1595.47 686.107 L1596.03 686.107 L1596.59 686.107 L1597.15 686.107 L1597.71 686.107 L1598.27 686.107 L1598.83 686.107 L1599.39 686.107 L1599.95 686.107 L1600.51 686.107 L1601.07 686.107 L1601.63 686.107 L1602.19 686.107 L1602.74 686.107 L1603.3 686.107 L1603.86 686.107 L1604.42 686.107 L1604.98 686.107 L1605.54 686.107 L1606.1 686.107 L1606.66 686.107 L1607.22 686.107 L1607.78 686.107 L1608.34 686.107 L1608.9 686.107 L1609.46 686.107 L1610.02 686.107 L1610.57 686.107 L1611.13 686.107 L1611.69 686.107 L1612.25 686.107 L1612.81 686.107 L1613.37 686.107 L1613.93 686.107 L1614.49 686.107 L1615.05 686.107 L1615.61 686.107 L1616.17 686.107 L1616.73 686.107 L1617.29 686.107 L1617.84 686.107 L1618.4 686.107 L1618.96 686.107 L1619.52 686.107 L1620.08 686.107 L1620.64 686.107 L1621.2 686.107 L1621.76 686.107 L1622.32 686.107 L1622.88 686.107 L1623.44 686.107 L1624 686.107 L1624.56 686.107 L1625.11 686.107 L1625.67 686.107 L1626.23 686.107 L1626.79 686.107 L1627.35 686.107 L1627.91 686.107 L1628.47 686.107 L1629.03 686.107 L1629.59 686.107 L1630.15 686.107 L1630.71 686.107 L1631.27 686.107 L1631.83 686.107 L1632.39 686.107 L1632.94 686.107 L1633.5 686.107 L1634.06 686.107 L1634.62 686.107 L1635.18 686.107 L1635.74 686.107 L1636.3 686.107 L1636.86 686.107 L1637.42 686.107 L1637.98 686.107 L1638.54 686.107 L1639.1 686.107 L1639.66 686.107 L1640.21 686.107 L1640.77 686.107 L1641.33 686.107 L1641.89 686.107 L1642.45 686.107 L1643.01 686.107 L1643.57 686.107 L1644.13 686.107 L1644.69 686.107 L1645.25 686.107 L1645.81 686.107 L1646.37 686.107 L1646.93 686.107 L1647.48 686.107 L1648.04 686.107 L1648.6 686.107 L1649.16 686.107 L1649.72 686.107 L1650.28 686.107 L1650.84 686.107 L1651.4 686.107 L1651.96 686.107 L1652.52 686.107 L1653.08 686.107 L1653.64 686.107 L1654.2 686.107 L1654.76 686.107 L1655.31 686.107 L1655.87 686.107 L1656.43 686.107 L1656.99 686.107 L1657.55 686.107 L1658.11 686.107 L1658.67 686.107 L1659.23 686.107 L1659.79 686.107 L1660.35 686.107 L1660.91 686.107 L1661.47 686.107 L1662.03 686.107 L1662.58 686.107 L1663.14 686.107 L1663.7 686.107 L1664.26 686.107 L1664.82 686.107 L1665.38 686.107 L1665.94 686.107 L1666.5 686.107 L1667.06 686.107 L1667.62 686.107 L1668.18 686.107 L1668.74 686.107 L1669.3 686.107 L1669.85 686.107 L1670.41 686.107 L1670.97 686.107 L1671.53 686.107 L1672.09 686.107 L1672.65 686.107 L1673.21 686.107 L1673.77 686.107 L1674.33 686.107 L1674.89 686.107 L1675.45 686.107 L1676.01 686.107 L1676.57 686.107 L1677.13 686.107 L1677.68 686.107 L1678.24 686.107 L1678.8 686.107 L1679.36 686.107 L1679.92 686.107 L1680.48 686.107 L1681.04 686.107 L1681.6 686.107 L1682.16 686.107 L1682.72 686.107 L1683.28 686.107 L1683.84 686.107 L1684.4 686.107 L1684.95 686.107 L1685.51 686.107 L1686.07 686.107 L1686.63 686.107 L1687.19 686.107 L1687.75 686.107 L1688.31 686.107 L1688.87 686.107 L1689.43 686.107 L1689.99 686.107 L1690.55 686.107 L1691.11 686.107 L1691.67 686.107 L1692.23 686.107 L1692.78 686.107 L1693.34 686.107 L1693.9 686.107 L1694.46 686.107 L1695.02 686.107 L1695.58 686.107 L1696.14 686.107 L1696.7 686.107 L1697.26 686.107 L1697.82 686.107 L1698.38 686.107 L1698.94 686.107 L1699.5 686.107 L1700.05 686.107 L1700.61 686.107 L1701.17 686.107 L1701.73 686.107 L1702.29 686.107 L1702.85 686.107 L1703.41 686.107 L1703.97 686.107 L1704.53 686.107 L1705.09 686.107 L1705.65 686.107 L1706.21 686.107 L1706.77 686.107 L1707.32 686.107 L1707.88 686.107 L1708.44 686.107 L1709 686.107 L1709.56 686.107 L1710.12 686.107 L1710.68 686.107 L1711.24 686.107 L1711.8 686.107 L1712.36 686.107 L1712.92 686.107 L1713.48 686.107 L1714.04 686.107 L1714.6 686.107 L1715.15 686.107 L1715.71 686.107 L1716.27 686.107 L1716.83 686.107 L1717.39 686.107 L1717.95 686.107 L1718.51 686.107 L1719.07 686.107 L1719.63 686.107 L1720.19 686.107 L1720.75 686.107 L1721.31 686.107 L1721.87 686.107 L1722.42 686.107 L1722.98 686.107 L1723.54 686.107 L1724.1 686.107 L1724.66 686.107 L1725.22 686.107 L1725.78 686.107 L1726.34 686.107 L1726.9 686.107 L1727.46 686.107 L1728.02 686.107 L1728.58 686.107 L1729.14 686.107 L1729.69 686.107 L1730.25 686.107 L1730.81 686.107 L1731.37 686.107 L1731.93 686.107 L1732.49 686.107 L1733.05 686.107 L1733.61 686.107 L1734.17 686.107 L1734.73 686.107 L1735.29 686.107 L1735.85 686.107 L1736.41 686.107 L1736.97 686.107 L1737.52 686.107 L1738.08 686.107 L1738.64 686.107 L1739.2 686.107 L1739.76 686.107 L1740.32 686.107 L1740.88 686.107 L1741.44 686.107 L1742 686.107 L1742.56 686.107 L1743.12 686.107 L1743.68 686.107 L1744.24 686.107 L1744.79 686.107 L1745.35 686.107 L1745.91 686.107 L1746.47 686.107 L1747.03 686.107 L1747.59 686.107 L1748.15 686.107 L1748.71 686.107 L1749.27 686.107 L1749.83 686.107 L1750.39 686.107 L1750.95 686.107 L1751.51 686.107 L1752.06 686.107 L1752.62 686.107 L1753.18 686.107 L1753.74 686.107 L1754.3 686.107 L1754.86 686.107 L1755.42 686.107 L1755.98 686.107 L1756.54 686.107 L1757.1 686.107 L1757.66 686.107 L1758.22 686.107 L1758.78 686.107 L1759.34 686.107 L1759.89 686.107 L1760.45 686.107 L1761.01 686.107 L1761.57 686.107 L1762.13 686.107 L1762.69 686.107 L1763.25 686.107 L1763.81 686.107 L1764.37 686.107 L1764.93 686.107 L1765.49 686.107 L1766.05 686.107 L1766.61 686.107 L1767.16 686.107 L1767.72 686.107 L1768.28 686.107 L1768.84 686.107 L1769.4 686.107 L1769.96 686.107 L1770.52 686.107 L1771.08 686.107 L1771.64 686.107 L1772.2 686.107 L1772.76 686.107 L1773.32 686.107 L1773.88 686.107 L1774.43 686.107 L1774.99 686.107 L1775.55 686.107 L1776.11 686.107 L1776.67 686.107 L1777.23 686.107 L1777.79 686.107 L1778.35 686.107 L1778.91 686.107 L1779.47 686.107 L1780.03 686.107 L1780.59 686.107 L1781.15 686.107 L1781.71 686.107 L1782.26 686.107 L1782.82 686.107 L1783.38 686.107 L1783.94 686.107 L1784.5 686.107 L1785.06 686.107 L1785.62 686.107 L1786.18 686.107 L1786.74 686.107 L1787.3 686.107 L1787.86 686.107 L1788.42 686.107 L1788.98 686.107 L1789.53 686.107 L1790.09 686.107 L1790.65 686.107 L1791.21 686.107 L1791.77 686.107 L1792.33 686.107 L1792.89 686.107 L1793.45 686.107 L1794.01 686.107 L1794.57 686.107 L1795.13 686.107 L1795.69 686.107 L1796.25 686.107 L1796.8 686.107 L1797.36 686.107 L1797.92 686.107 L1798.48 686.107 L1799.04 686.107 L1799.6 686.107 L1800.16 686.107 L1800.72 686.107 L1801.28 686.107 L1801.84 686.107 L1802.4 686.107 L1802.96 686.107 L1803.52 686.107 L1804.08 686.107 L1804.63 686.107 L1805.19 686.107 L1805.75 686.107 L1806.31 686.107 L1806.87 686.107 L1807.43 686.107 L1807.99 686.107 L1808.55 686.107 L1809.11 686.107 L1809.67 686.107 L1810.23 686.107 L1810.79 686.107 L1811.35 686.107 L1811.9 686.107 L1812.46 686.107 L1813.02 686.107 L1813.58 686.107 L1814.14 686.107 L1814.7 686.107 L1815.26 686.107 L1815.82 686.107 L1816.38 686.107 L1816.94 686.107 L1817.5 686.107 L1818.06 686.107 L1818.62 686.107 L1819.18 686.107 L1819.73 686.107 L1820.29 686.107 L1820.85 686.107 L1821.41 686.107 L1821.97 686.107 L1822.53 686.107 L1823.09 686.107 L1823.65 686.107 L1824.21 686.107 L1824.77 686.107 L1825.33 686.107 L1825.89 686.107 L1826.45 686.107 L1827 686.107 L1827.56 686.107 L1828.12 686.107 L1828.68 686.107 L1829.24 686.107 L1829.8 686.107 L1830.36 686.107 L1830.92 686.107 L1831.48 686.107 L1832.04 686.107 L1832.6 686.107 L1833.16 686.107 L1833.72 686.107 L1834.27 686.107 L1834.83 686.107 L1835.39 686.107 L1835.95 686.107 L1836.51 686.107 L1837.07 686.107 L1837.63 686.107 L1838.19 686.107 L1838.19 682.677 L1837.63 682.677 L1837.07 682.677 L1836.51 682.677 L1835.95 682.677 L1835.39 682.677 L1834.83 682.677 L1834.27 682.677 L1833.72 682.677 L1833.16 682.677 L1832.6 682.677 L1832.04 682.677 L1831.48 682.677 L1830.92 682.677 L1830.36 682.677 L1829.8 682.677 L1829.24 682.677 L1828.68 682.677 L1828.12 682.677 L1827.56 682.677 L1827 682.677 L1826.45 682.677 L1825.89 682.677 L1825.33 682.677 L1824.77 682.677 L1824.21 682.677 L1823.65 682.677 L1823.09 682.677 L1822.53 682.677 L1821.97 682.677 L1821.41 682.677 L1820.85 682.677 L1820.29 682.677 L1819.73 682.677 L1819.18 682.677 L1818.62 682.677 L1818.06 682.677 L1817.5 682.677 L1816.94 682.677 L1816.38 682.677 L1815.82 682.677 L1815.26 682.677 L1814.7 682.677 L1814.14 682.677 L1813.58 682.677 L1813.02 682.677 L1812.46 682.677 L1811.9 682.677 L1811.35 682.677 L1810.79 682.677 L1810.23 682.677 L1809.67 682.677 L1809.11 682.677 L1808.55 682.677 L1807.99 682.677 L1807.43 682.677 L1806.87 682.677 L1806.31 682.677 L1805.75 682.677 L1805.19 682.677 L1804.63 682.677 L1804.08 682.677 L1803.52 682.677 L1802.96 682.677 L1802.4 682.677 L1801.84 682.677 L1801.28 682.677 L1800.72 682.677 L1800.16 682.677 L1799.6 682.677 L1799.04 682.677 L1798.48 682.677 L1797.92 682.677 L1797.36 682.677 L1796.8 682.677 L1796.25 682.677 L1795.69 682.677 L1795.13 682.677 L1794.57 682.677 L1794.01 682.677 L1793.45 682.677 L1792.89 682.677 L1792.33 682.677 L1791.77 682.677 L1791.21 682.677 L1790.65 682.677 L1790.09 682.677 L1789.53 682.677 L1788.98 682.677 L1788.42 682.677 L1787.86 682.677 L1787.3 682.677 L1786.74 682.677 L1786.18 682.677 L1785.62 682.677 L1785.06 682.677 L1784.5 682.677 L1783.94 682.677 L1783.38 682.677 L1782.82 682.677 L1782.26 682.677 L1781.71 682.677 L1781.15 682.677 L1780.59 682.677 L1780.03 682.677 L1779.47 682.677 L1778.91 682.677 L1778.35 682.677 L1777.79 682.677 L1777.23 682.677 L1776.67 682.677 L1776.11 682.677 L1775.55 682.677 L1774.99 682.677 L1774.43 682.677 L1773.88 682.677 L1773.32 682.677 L1772.76 682.677 L1772.2 682.677 L1771.64 682.677 L1771.08 682.677 L1770.52 682.677 L1769.96 682.677 L1769.4 682.677 L1768.84 682.677 L1768.28 682.677 L1767.72 682.677 L1767.16 682.677 L1766.61 682.677 L1766.05 682.677 L1765.49 682.677 L1764.93 682.677 L1764.37 682.677 L1763.81 682.677 L1763.25 682.677 L1762.69 682.677 L1762.13 682.677 L1761.57 682.677 L1761.01 682.677 L1760.45 682.677 L1759.89 682.677 L1759.34 682.677 L1758.78 682.677 L1758.22 682.677 L1757.66 682.677 L1757.1 682.677 L1756.54 682.677 L1755.98 682.677 L1755.42 682.677 L1754.86 682.677 L1754.3 682.677 L1753.74 682.677 L1753.18 682.677 L1752.62 682.677 L1752.06 682.677 L1751.51 682.677 L1750.95 682.677 L1750.39 682.677 L1749.83 682.677 L1749.27 682.677 L1748.71 682.677 L1748.15 682.677 L1747.59 682.677 L1747.03 682.677 L1746.47 682.677 L1745.91 682.677 L1745.35 682.677 L1744.79 682.677 L1744.24 682.677 L1743.68 682.677 L1743.12 682.677 L1742.56 682.677 L1742 682.677 L1741.44 682.677 L1740.88 682.677 L1740.32 682.677 L1739.76 682.677 L1739.2 682.677 L1738.64 682.677 L1738.08 682.677 L1737.52 682.677 L1736.97 682.677 L1736.41 682.677 L1735.85 682.677 L1735.29 682.677 L1734.73 682.677 L1734.17 682.677 L1733.61 682.677 L1733.05 682.677 L1732.49 682.677 L1731.93 682.677 L1731.37 682.677 L1730.81 682.677 L1730.25 682.677 L1729.69 682.677 L1729.14 682.677 L1728.58 682.677 L1728.02 682.677 L1727.46 682.677 L1726.9 682.677 L1726.34 682.677 L1725.78 682.677 L1725.22 682.677 L1724.66 682.677 L1724.1 682.677 L1723.54 682.677 L1722.98 682.677 L1722.42 682.677 L1721.87 682.677 L1721.31 682.677 L1720.75 682.677 L1720.19 682.677 L1719.63 682.677 L1719.07 682.677 L1718.51 682.677 L1717.95 682.677 L1717.39 682.677 L1716.83 682.677 L1716.27 682.677 L1715.71 682.677 L1715.15 682.677 L1714.6 682.677 L1714.04 682.677 L1713.48 682.677 L1712.92 682.677 L1712.36 682.677 L1711.8 682.677 L1711.24 682.677 L1710.68 682.677 L1710.12 682.677 L1709.56 682.677 L1709 682.677 L1708.44 682.677 L1707.88 682.677 L1707.32 682.677 L1706.77 682.677 L1706.21 682.677 L1705.65 682.677 L1705.09 682.677 L1704.53 682.677 L1703.97 682.677 L1703.41 682.677 L1702.85 682.677 L1702.29 682.677 L1701.73 682.677 L1701.17 682.677 L1700.61 682.677 L1700.05 682.677 L1699.5 682.677 L1698.94 682.677 L1698.38 682.677 L1697.82 682.677 L1697.26 682.677 L1696.7 682.677 L1696.14 682.677 L1695.58 682.677 L1695.02 682.677 L1694.46 682.677 L1693.9 682.677 L1693.34 682.677 L1692.78 682.677 L1692.23 682.677 L1691.67 682.677 L1691.11 682.677 L1690.55 682.677 L1689.99 682.677 L1689.43 682.677 L1688.87 682.677 L1688.31 682.677 L1687.75 682.677 L1687.19 682.677 L1686.63 682.677 L1686.07 682.677 L1685.51 682.677 L1684.95 682.677 L1684.4 682.677 L1683.84 682.677 L1683.28 682.677 L1682.72 682.677 L1682.16 682.677 L1681.6 682.677 L1681.04 682.677 L1680.48 682.677 L1679.92 682.677 L1679.36 682.677 L1678.8 682.677 L1678.24 682.677 L1677.68 682.677 L1677.13 682.677 L1676.57 682.677 L1676.01 682.677 L1675.45 682.677 L1674.89 682.677 L1674.33 682.677 L1673.77 682.677 L1673.21 682.677 L1672.65 682.677 L1672.09 682.677 L1671.53 682.677 L1670.97 682.677 L1670.41 682.677 L1669.85 682.677 L1669.3 682.677 L1668.74 682.677 L1668.18 682.677 L1667.62 682.677 L1667.06 682.677 L1666.5 682.677 L1665.94 682.677 L1665.38 682.677 L1664.82 682.677 L1664.26 682.677 L1663.7 682.677 L1663.14 682.677 L1662.58 682.677 L1662.03 682.677 L1661.47 682.677 L1660.91 682.677 L1660.35 682.677 L1659.79 682.677 L1659.23 682.677 L1658.67 682.677 L1658.11 682.677 L1657.55 682.677 L1656.99 682.677 L1656.43 682.677 L1655.87 682.677 L1655.31 682.677 L1654.76 682.677 L1654.2 682.677 L1653.64 682.677 L1653.08 682.677 L1652.52 682.677 L1651.96 682.677 L1651.4 682.677 L1650.84 682.677 L1650.28 682.677 L1649.72 682.677 L1649.16 682.677 L1648.6 682.677 L1648.04 682.677 L1647.48 682.677 L1646.93 682.677 L1646.37 682.677 L1645.81 682.677 L1645.25 682.677 L1644.69 682.677 L1644.13 682.677 L1643.57 682.677 L1643.01 682.677 L1642.45 682.677 L1641.89 682.677 L1641.33 682.677 L1640.77 682.677 L1640.21 682.677 L1639.66 682.677 L1639.1 682.677 L1638.54 682.677 L1637.98 682.677 L1637.42 682.677 L1636.86 682.677 L1636.3 682.677 L1635.74 682.677 L1635.18 682.677 L1634.62 682.677 L1634.06 682.677 L1633.5 682.677 L1632.94 682.677 L1632.39 682.677 L1631.83 682.677 L1631.27 682.677 L1630.71 682.677 L1630.15 682.677 L1629.59 682.677 L1629.03 682.677 L1628.47 682.677 L1627.91 682.677 L1627.35 682.677 L1626.79 682.677 L1626.23 682.677 L1625.67 682.677 L1625.11 682.677 L1624.56 682.677 L1624 682.677 L1623.44 682.677 L1622.88 682.677 L1622.32 682.677 L1621.76 682.677 L1621.2 682.677 L1620.64 682.677 L1620.08 682.677 L1619.52 682.677 L1618.96 682.677 L1618.4 682.677 L1617.84 682.677 L1617.29 682.677 L1616.73 682.677 L1616.17 682.677 L1615.61 682.677 L1615.05 682.677 L1614.49 682.677 L1613.93 682.677 L1613.37 682.677 L1612.81 682.677 L1612.25 682.677 L1611.69 682.677 L1611.13 682.677 L1610.57 682.677 L1610.02 682.677 L1609.46 682.677 L1608.9 682.677 L1608.34 682.677 L1607.78 682.677 L1607.22 682.677 L1606.66 682.677 L1606.1 682.677 L1605.54 682.677 L1604.98 682.677 L1604.42 682.677 L1603.86 682.677 L1603.3 682.677 L1602.74 682.677 L1602.19 682.677 L1601.63 682.677 L1601.07 682.677 L1600.51 682.677 L1599.95 682.677 L1599.39 682.677 L1598.83 682.677 L1598.27 682.677 L1597.71 682.677 L1597.15 682.677 L1596.59 682.677 L1596.03 682.677 L1595.47 682.677 L1594.92 682.677 L1594.36 682.677 L1593.8 682.677 L1593.24 682.677 L1592.68 682.677 L1592.12 682.677 L1591.56 682.677 L1591 682.677 L1590.44 682.677 L1589.88 682.677 L1589.32 682.677 L1588.76 682.677 L1588.2 682.677 L1587.65 682.677 L1587.09 682.677 L1586.53 682.677 L1585.97 682.677 L1585.41 682.677 L1584.85 682.677 L1584.29 682.677 L1583.73 682.677 L1583.17 682.677 L1582.61 682.677 L1582.05 682.677 L1581.49 682.677 L1580.93 682.677 L1580.37 682.677 L1579.82 682.677 L1579.26 682.677 L1578.7 682.677 L1578.14 682.677 L1577.58 682.677 L1577.02 682.677 L1576.46 682.677 L1575.9 682.677 L1575.34 682.677 L1574.78 682.677 L1574.22 682.677 L1573.66 682.677 L1573.1 682.677 L1572.55 682.677 L1571.99 682.677 L1571.43 682.677 L1570.87 682.677 L1570.31 682.677 L1569.75 682.677 L1569.19 682.677 L1568.63 682.677 L1568.07 682.677 L1567.51 682.677 L1566.95 682.677 L1566.39 682.677 L1565.83 682.677 L1565.28 682.677 L1564.72 682.677 L1564.16 682.677 L1563.6 682.677 L1563.04 682.677 L1562.48 682.677 L1561.92 682.677 L1561.36 682.677 L1560.8 682.677 L1560.24 682.677 L1559.68 682.677 L1559.12 682.677 L1558.56 682.677 L1558 682.677 L1557.45 682.677 L1556.89 682.677 L1556.33 682.677 L1555.77 682.677 L1555.21 682.677 L1554.65 682.677 L1554.09 682.677 L1553.53 682.677 L1552.97 682.677 L1552.41 682.677 L1551.85 682.677 L1551.29 682.677 L1550.73 682.677 L1550.18 682.677 L1549.62 682.677 L1549.06 682.677 L1548.5 682.677 L1547.94 682.677 L1547.38 682.677 L1546.82 682.677 L1546.26 682.677 L1545.7 682.677 L1545.14 682.677 L1544.58 682.677 L1544.02 682.677 L1543.46 682.677 L1542.9 682.677 L1542.35 682.677 L1541.79 682.677 L1541.23 682.677 L1540.67 682.677 L1540.11 682.677 L1539.55 682.677 L1538.99 682.677 L1538.43 682.677 L1537.87 682.677 L1537.31 682.677 L1536.75 682.677 L1536.19 682.677 L1535.63 682.677 L1535.08 682.677 L1534.52 682.677 L1533.96 682.677 L1533.4 682.677 L1532.84 682.677 L1532.28 682.677 L1531.72 682.677 L1531.16 682.677 L1530.6 682.677 L1530.04 682.677 L1529.48 682.677 L1528.92 682.677 L1528.36 682.677 L1527.81 682.677 L1527.25 682.677 L1526.69 682.677 L1526.13 682.677 L1525.57 682.677 L1525.01 682.677 L1524.45 682.677 L1523.89 682.677 L1523.33 682.677 L1522.77 682.677 L1522.21 682.677 L1521.65 682.677 L1521.09 682.677 L1520.53 682.677 L1519.98 682.677 L1519.42 682.677 L1518.86 682.677 L1518.3 682.677 L1517.74 682.677 L1517.18 682.677 L1516.62 682.677 L1516.06 682.677 L1515.5 682.677 L1514.94 682.677 L1514.38 682.677 L1513.82 682.677 L1513.26 682.677 L1512.71 682.677 L1512.15 682.677 L1511.59 682.677 L1511.03 682.677 L1510.47 682.677 L1509.91 682.677 L1509.35 682.677 L1508.79 682.677 L1508.23 682.677 L1507.67 682.677 L1507.11 682.677 L1506.55 682.677 L1505.99 682.677 L1505.44 682.677 L1504.88 682.677 L1504.32 682.677 L1503.76 682.677 L1503.2 682.677 L1502.64 682.677 L1502.08 682.677 L1501.52 682.677 L1500.96 682.677 L1500.4 682.677 L1499.84 682.677 L1499.28 682.677 L1498.72 682.677 L1498.16 682.677 L1497.61 682.677 L1497.05 682.677 L1496.49 682.677 L1495.93 682.677 L1495.37 682.677 L1494.81 682.677 L1494.25 682.677 L1493.69 682.677 L1493.13 682.677 L1492.57 682.677 L1492.01 682.677 L1491.45 682.677 L1490.89 682.677 L1490.34 682.677 L1489.78 682.677 L1489.22 682.677 L1488.66 682.677 L1488.1 682.677 L1487.54 682.677 L1486.98 682.677 L1486.42 682.677 L1485.86 682.677 L1485.3 682.677 L1484.74 682.677 L1484.18 682.677 L1483.62 682.677 L1483.07 682.677 L1482.51 682.677 L1481.95 682.677 L1481.39 682.677 L1480.83 682.677 L1480.27 682.677 L1479.71 682.677 L1479.15 682.677 L1478.59 682.677 L1478.03 682.677 L1477.47 682.677 L1476.91 682.677 L1476.35 682.677 L1475.79 682.677 L1475.24 682.677 L1474.68 682.677 L1474.12 682.677 L1473.56 682.677 L1473 682.677 L1472.44 682.677 L1471.88 682.677 L1471.32 682.677 L1470.76 682.677 L1470.2 682.677 L1469.64 682.677 L1469.08 682.677 L1468.52 682.677 L1467.97 682.677 L1467.41 682.677 L1466.85 682.677 L1466.29 682.677 L1465.73 682.677 L1465.17 682.677 L1464.61 682.677 L1464.05 682.677 L1463.49 682.677 L1462.93 682.677 L1462.37 682.677 L1461.81 682.677 L1461.25 682.677 L1460.7 682.677 L1460.14 682.677 L1459.58 682.677 L1459.02 682.677 L1458.46 682.677 L1457.9 682.677 L1457.34 682.677 L1456.78 682.677 L1456.22 682.677 L1455.66 682.677 L1455.1 682.677 L1454.54 682.677 L1453.98 682.677 L1453.42 682.677 L1452.87 682.677 L1452.31 682.677 L1451.75 682.677 L1451.19 682.677 L1450.63 682.677 L1450.07 682.677 L1449.51 682.677 L1448.95 682.677 L1448.39 682.677 L1447.83 682.677 L1447.27 682.677 L1446.71 682.677 L1446.15 682.677 L1445.6 682.677 L1445.04 682.677 L1444.48 682.677 L1443.92 682.677 L1443.36 682.677 L1442.8 682.677 L1442.24 682.677 L1441.68 682.677 L1441.12 682.677 L1440.56 682.677 L1440 682.677 L1439.44 682.677 L1438.88 682.677 L1438.33 682.677 L1437.77 682.677 L1437.21 682.677 L1436.65 682.677 L1436.09 682.677 L1435.53 682.677 L1434.97 682.677 L1434.41 682.677 L1433.85 682.677 L1433.29 682.677 L1432.73 682.677 L1432.17 682.677 L1431.61 682.677 L1431.05 682.677 L1430.5 682.677 L1429.94 682.677 L1429.38 682.677 L1428.82 682.677 L1428.26 682.677 L1427.7 682.677 L1427.14 682.677 L1426.58 682.677 L1426.02 682.677 L1425.46 682.677 L1424.9 682.677 L1424.34 682.677 L1423.78 682.677 L1423.23 682.677 L1422.67 682.677 L1422.11 682.677 L1421.55 682.677 L1420.99 682.677 L1420.43 682.677 L1419.87 682.677 L1419.31 682.677 L1418.75 682.677 L1418.19 682.677 L1417.63 682.677 L1417.07 682.677 L1416.51 682.677 L1415.95 682.677 L1415.4 682.677 L1414.84 682.677 L1414.28 682.677 L1413.72 682.677 L1413.16 682.677 L1412.6 682.677 L1412.04 682.677 L1411.48 682.677 L1410.92 682.677 L1410.36 682.677 L1409.8 682.677 L1409.24 682.677 L1408.68 682.677 L1408.13 682.677 L1407.57 682.677 L1407.01 682.677 L1406.45 682.677 L1405.89 682.677 L1405.33 682.677 L1404.77 682.677 L1404.21 682.677 L1403.65 682.677 L1403.09 682.677 L1402.53 682.677 L1401.97 682.677 L1401.41 682.677 L1400.86 682.677 L1400.3 682.677 L1399.74 682.677 L1399.18 682.677 L1398.62 682.677 L1398.06 682.677 L1397.5 682.677 L1396.94 682.677 L1396.38 682.677 L1395.82 682.677 L1395.26 682.677 L1394.7 682.677 L1394.14 682.677 L1393.58 682.677 L1393.03 682.677 L1392.47 682.677 L1391.91 682.677 L1391.35 682.677 L1390.79 682.677 L1390.23 682.677 L1389.67 682.677 L1389.11 682.677 L1388.55 682.677 L1387.99 682.677 L1387.43 682.677 L1386.87 682.677 L1386.31 682.677 L1385.76 682.677 L1385.2 682.677 L1384.64 682.677 L1384.08 682.677 L1383.52 682.677 L1382.96 682.677 L1382.4 682.677 L1381.84 682.677 L1381.28 682.677 L1380.72 682.677 L1380.16 682.677 L1379.6 682.677 L1379.04 682.677 L1378.49 682.677 L1377.93 682.677 L1377.37 682.677 L1376.81 682.677 L1376.25 682.677 L1375.69 682.677 L1375.13 682.677 L1374.57 682.677 L1374.01 682.677 L1373.45 682.677 L1372.89 682.677 L1372.33 682.677 L1371.77 682.677 L1371.21 682.677 L1370.66 682.677 L1370.1 682.677 L1369.54 682.677 L1368.98 682.677 L1368.42 682.677 L1367.86 682.677 L1367.3 682.677 L1366.74 682.677 L1366.18 682.677 L1365.62 682.677 L1365.06 682.677 L1364.5 682.677 L1363.94 682.677 L1363.39 682.677 L1362.83 682.677 L1362.27 682.677 L1361.71 682.677 L1361.15 682.677 L1360.59 682.677 L1360.03 682.677 L1359.47 682.677 L1358.91 682.677 L1358.35 682.677 L1357.79 682.677 L1357.23 682.677 L1356.67 682.677 L1356.12 682.677 L1355.56 682.677 L1355 682.677 L1354.44 682.677 L1353.88 682.677 L1353.32 682.677 L1352.76 682.677 L1352.2 682.677 L1351.64 682.677 L1351.08 682.677 L1350.52 682.677 L1349.96 682.677 L1349.4 682.677 L1348.84 682.677 L1348.29 682.677 L1347.73 682.677 L1347.17 682.677 L1346.61 682.677 L1346.05 682.677 L1345.49 682.677 L1344.93 682.677 L1344.37 682.677 L1343.81 682.677 L1343.25 682.677 L1342.69 682.677 L1342.13 682.677 L1341.57 682.677 L1341.02 682.677 L1340.46 682.677 L1339.9 682.677 L1339.34 682.677 L1338.78 682.677 L1338.22 682.677 L1337.66 682.677 L1337.1 682.677 L1336.54 682.677 L1335.98 682.677 L1335.42 682.677 L1334.86 682.677 L1334.3 682.677 L1333.75 682.677 L1333.19 682.677 L1332.63 682.677 L1332.07 682.677 L1331.51 682.677 L1330.95 682.677 L1330.39 682.677 L1329.83 682.677 L1329.27 682.677 L1328.71 682.677 L1328.15 682.677 L1327.59 682.677 L1327.03 682.677 L1326.47 682.677 L1325.92 682.677 L1325.36 682.677 L1324.8 682.677 L1324.24 682.677 L1323.68 682.677 L1323.12 682.677 L1322.56 682.677 L1322 682.677 L1321.44 682.677 L1320.88 682.677 L1320.32 682.677 L1319.76 682.677 L1319.2 682.677 L1318.65 682.677 L1318.09 682.677 L1317.53 682.677 L1316.97 682.677 L1316.41 682.677 L1315.85 682.677 L1315.29 682.677 L1314.73 682.677 L1314.17 682.677 L1313.61 682.677 L1313.05 682.677 L1312.49 682.677 L1311.93 682.677 L1311.38 682.677 L1310.82 682.677 L1310.26 682.677 L1309.7 682.677 L1309.14 682.677 L1308.58 682.677 L1308.02 682.677 L1307.46 682.677 L1306.9 682.677 L1306.34 682.677 L1305.78 682.677 L1305.22 682.677 L1304.66 682.677 L1304.1 682.677 L1303.55 682.677 L1302.99 682.677 L1302.43 682.677 L1301.87 682.677 L1301.31 682.677 L1300.75 682.677 L1300.19 682.677 L1299.63 682.677 L1299.07 682.677 L1298.51 682.677 L1297.95 682.677 L1297.39 682.677 L1296.83 682.677 L1296.28 682.677 L1295.72 682.677 L1295.16 682.677 L1294.6 682.677 L1294.04 682.677 L1293.48 682.677 L1292.92 682.677 L1292.36 682.677 L1291.8 682.677 L1291.24 682.677 L1290.68 682.677 L1290.12 682.677 L1289.56 682.677 L1289 682.677 L1288.45 682.677 L1287.89 682.677 L1287.33 682.677 L1286.77 682.677 L1286.21 682.677 L1285.65 682.677 L1285.09 682.677 L1284.53 682.677 L1283.97 682.677 L1283.41 682.677 L1282.85 682.677 L1282.29 682.677 L1281.73 682.677 L1281.18 682.677 L1280.62 682.677 L1280.06 682.677 L1279.5 682.677 L1278.94 682.677 L1278.38 682.677 L1277.82 682.677 L1277.26 682.677 L1276.7 682.677 L1276.14 682.677 L1275.58 682.677 L1275.02 682.677 L1274.46 682.677 L1273.91 682.677 L1273.35 682.677 L1272.79 682.677 L1272.23 682.677 L1271.67 682.677 L1271.11 682.677 L1270.55 682.677 L1269.99 682.677 L1269.43 682.677 L1268.87 682.677 L1268.31 682.677 L1267.75 682.677 L1267.19 682.677 L1266.63 682.677 L1266.08 682.677 L1265.52 682.677 L1264.96 682.677 L1264.4 682.677 L1263.84 682.677 L1263.28 682.677 L1262.72 682.677 L1262.16 682.677 L1261.6 682.677 L1261.04 682.677 L1260.48 682.677 L1259.92 682.677 L1259.36 682.677 L1258.81 682.677 L1258.25 682.677 L1257.69 682.677 L1257.13 682.677 L1256.57 682.677 L1256.01 682.677 L1255.45 682.677 L1254.89 682.677 L1254.33 682.677 L1253.77 682.677 L1253.21 682.677 L1252.65 682.677 L1252.09 682.677 L1251.54 682.677 L1250.98 682.677 L1250.42 682.677 L1249.86 682.677 L1249.3 682.677 L1248.74 682.677 L1248.18 682.677 L1247.62 682.677 L1247.06 682.677 L1246.5 682.677 L1245.94 682.677 L1245.38 682.677 L1244.82 682.677 L1244.26 682.677 L1243.71 682.677 L1243.15 682.677 L1242.59 682.677 L1242.03 682.677 L1241.47 682.677 L1240.91 682.677 L1240.35 682.677 L1239.79 682.677 L1239.23 682.677 L1238.67 682.677 L1238.11 682.677 L1237.55 682.677 L1236.99 682.677 L1236.44 682.677 L1235.88 682.677 L1235.32 682.677 L1234.76 682.677 L1234.2 682.677 L1233.64 682.677 L1233.08 682.677 L1232.52 682.677 L1231.96 682.677 L1231.4 682.677 L1230.84 682.677 L1230.28 682.677 L1229.72 682.677 L1229.17 682.677 L1228.61 682.677 L1228.05 682.677 L1227.49 682.677 L1226.93 682.677 L1226.37 682.677 L1225.81 682.677 L1225.25 682.677 L1224.69 682.677 L1224.13 682.677 L1223.57 682.677 L1223.01 682.677 L1222.45 682.677 L1221.89 682.677 L1221.34 682.677 L1220.78 682.677 L1220.22 682.677 L1219.66 682.677 L1219.1 682.677 L1218.54 682.677 L1217.98 682.677 L1217.42 682.677 L1216.86 682.677 L1216.3 682.677 L1215.74 682.677 L1215.18 682.677 L1214.62 682.677 L1214.07 682.677 L1213.51 682.677 L1212.95 682.677 L1212.39 682.677 L1211.83 682.677 L1211.27 682.677 L1210.71 682.677 L1210.15 682.677 L1209.59 682.677 L1209.03 682.677 L1208.47 682.677 L1207.91 682.677 L1207.35 682.677 L1206.8 682.677 L1206.24 682.677 L1205.68 682.677 L1205.12 682.677 L1204.56 682.677 L1204 682.677 L1203.44 682.677 L1202.88 682.677 L1202.32 682.677 L1201.76 682.677 L1201.2 682.677 L1200.64 682.677 L1200.08 682.677 L1199.52 682.677 L1198.97 682.677 L1198.41 682.677 L1197.85 682.677 L1197.29 682.677 L1196.73 682.677 L1196.17 682.677 L1195.61 682.677 L1195.05 682.677 L1194.49 682.677 L1193.93 682.677 L1193.37 682.677 L1192.81 682.677 L1192.25 682.677 L1191.7 682.677 L1191.14 682.677 L1190.58 682.677 L1190.02 682.677 L1189.46 682.677 L1188.9 682.677 L1188.34 682.677 L1187.78 682.677 L1187.22 682.677 L1186.66 682.677 L1186.1 682.677 L1185.54 682.677 L1184.98 682.677 L1184.43 682.677 L1183.87 682.677 L1183.31 682.677 L1182.75 682.677 L1182.19 682.677 L1181.63 682.677 L1181.07 682.677 L1180.51 682.677 L1179.95 682.677 L1179.39 682.677 L1178.83 682.677 L1178.27 682.677 L1177.71 682.677 L1177.15 682.677 L1176.6 682.677 L1176.04 682.677 L1175.48 682.677 L1174.92 682.677 L1174.36 682.677 L1173.8 682.677 L1173.24 682.677 L1172.68 682.677 L1172.12 682.677 L1171.56 682.677 L1171 682.677 L1170.44 682.677 L1169.88 682.677 L1169.33 682.677 L1168.77 682.677 L1168.21 682.677 L1167.65 682.677 L1167.09 682.677 L1166.53 682.677 L1165.97 682.677 L1165.41 682.677 L1164.85 682.677 L1164.29 682.677 L1163.73 682.677 L1163.17 682.677 L1162.61 682.677 L1162.05 682.677 L1161.5 682.677 L1160.94 682.677 L1160.38 682.677 L1159.82 682.677 L1159.26 682.677 L1158.7 682.677 L1158.14 682.677 L1157.58 682.677 L1157.02 682.677 L1156.46 682.677 L1155.9 682.677 L1155.34 682.677 L1154.78 682.677 L1154.23 682.677 L1153.67 682.677 L1153.11 682.677 L1152.55 682.677 L1151.99 682.677 L1151.43 682.677 L1150.87 682.677 L1150.31 682.677 L1149.75 682.677 L1149.19 682.677 L1148.63 682.677 L1148.07 682.677 L1147.51 682.677 L1146.96 682.677 L1146.4 682.677 L1145.84 682.677 L1145.28 682.677 L1144.72 682.677 L1144.16 682.677 L1143.6 682.677 L1143.04 682.677 L1142.48 682.677 L1141.92 682.677 L1141.36 682.677 L1140.8 682.677 L1140.24 682.677 L1139.68 682.677 L1139.13 682.677 L1138.57 682.677 L1138.01 682.677 L1137.45 682.677 L1136.89 682.677 L1136.33 682.677 L1135.77 682.677 L1135.21 682.677 L1134.65 682.677 L1134.09 682.677 L1133.53 682.677 L1132.97 682.677 L1132.41 682.677 L1131.86 682.677 L1131.3 682.677 L1130.74 682.677 L1130.18 682.677 L1129.62 682.677 L1129.06 682.677 L1128.5 682.677 L1127.94 682.677 L1127.38 682.677 L1126.82 682.677 L1126.26 682.677 L1125.7 682.677 L1125.14 682.677 L1124.59 682.677 L1124.03 682.677 L1123.47 682.677 L1122.91 682.677 L1122.35 682.677 L1121.79 682.677 L1121.23 682.677 L1120.67 682.677 L1120.11 682.677 L1119.55 682.677 L1118.99 682.677 L1118.43 682.677 L1117.87 682.677 L1117.31 682.677 L1116.76 682.677 L1116.2 682.677 L1115.64 682.677 L1115.08 682.677 L1114.52 682.677 L1113.96 682.677 L1113.4 682.677 L1112.84 682.677 L1112.28 682.677 L1111.72 682.677 L1111.16 682.677 L1110.6 682.677 L1110.04 682.677 L1109.49 682.677 L1108.93 682.677 L1108.37 682.677 L1107.81 682.677 L1107.25 682.677 L1106.69 682.677 L1106.13 682.677 L1105.57 682.677 L1105.01 682.677 L1104.45 682.677 L1103.89 682.677 L1103.33 682.677 L1102.77 682.677 L1102.22 682.677 L1101.66 682.677 L1101.1 682.677 L1100.54 682.677 L1099.98 682.677 L1099.42 682.677 L1098.86 682.677 L1098.3 682.677 L1097.74 682.677 L1097.18 682.677 L1096.62 682.677 L1096.06 682.677 L1095.5 682.677 L1094.94 682.677 L1094.39 682.677 L1093.83 682.677 L1093.27 682.677 L1092.71 682.677 L1092.15 682.677 L1091.59 682.677 L1091.03 682.677 L1090.47 682.677 L1089.91 682.677 L1089.35 682.677 L1088.79 682.677 L1088.23 682.677 L1087.67 682.677 L1087.12 682.677 L1086.56 682.677 L1086 682.677 L1085.44 682.677 L1084.88 682.677 L1084.32 682.677 L1083.76 682.677 L1083.2 682.677 L1082.64 682.677 L1082.08 682.677 L1081.52 682.677 L1080.96 682.677 L1080.4 682.677 L1079.85 682.677 L1079.29 682.677 L1078.73 682.677 L1078.17 682.677 L1077.61 682.677 L1077.05 682.677 L1076.49 682.677 L1075.93 682.677 L1075.37 682.677 L1074.81 682.677 L1074.25 682.677 L1073.69 682.677 L1073.13 682.677 L1072.57 682.677 L1072.02 682.677 L1071.46 682.677 L1070.9 682.677 L1070.34 682.677 L1069.78 682.677 L1069.22 682.677 L1068.66 682.677 L1068.1 682.677 L1067.54 682.677 L1066.98 682.677 L1066.42 682.677 L1065.86 682.677 L1065.3 682.677 L1064.75 682.677 L1064.19 682.677 L1063.63 682.677 L1063.07 682.677 L1062.51 682.677 L1061.95 682.677 L1061.39 682.677 L1060.83 682.677 L1060.27 682.677 L1059.71 682.677 L1059.15 682.677 L1058.59 682.677 L1058.03 682.677 L1057.48 682.677 L1056.92 682.677 L1056.36 682.677 L1055.8 682.677 L1055.24 682.677 L1054.68 682.677 L1054.12 682.677 L1053.56 682.677 L1053 682.677 L1052.44 682.677 L1051.88 682.677 L1051.32 682.677 L1050.76 682.677 L1050.2 682.677 L1049.65 682.677 L1049.09 682.677 L1048.53 682.677 L1047.97 682.677 L1047.41 682.677 L1046.85 682.677 L1046.29 682.677 L1045.73 682.677 L1045.17 682.677 L1044.61 682.677 L1044.05 682.677 L1043.49 682.677 L1042.93 682.677 L1042.38 682.677 L1041.82 682.677 L1041.26 682.677 L1040.7 682.677 L1040.14 682.677 L1039.58 682.677 L1039.02 682.677 L1038.46 682.677 L1037.9 682.677 L1037.34 682.677 L1036.78 682.677 L1036.22 682.677 L1035.66 682.677 L1035.1 682.677 L1034.55 682.677 L1033.99 682.677 L1033.43 682.677 L1032.87 682.677 L1032.31 682.677 L1031.75 682.677 L1031.19 682.677 L1030.63 682.677 L1030.07 682.677 L1029.51 682.677 L1028.95 682.677 L1028.39 682.677 L1027.83 682.677 L1027.28 682.677 L1026.72 682.677 L1026.16 682.677 L1025.6 682.677 L1025.04 682.677 L1024.48 682.677 L1023.92 682.677 L1023.36 682.677 L1022.8 682.677 L1022.24 682.677 L1021.68 682.677 L1021.12 682.677 L1020.56 682.677 L1020.01 682.677 L1019.45 682.677 L1018.89 682.677 L1018.33 682.677 L1017.77 682.677 L1017.21 682.677 L1016.65 682.677 L1016.09 682.677 L1015.53 682.677 L1014.97 682.677 L1014.41 682.677 L1013.85 682.677 L1013.29 682.677 L1012.73 682.677 L1012.18 682.677 L1011.62 682.677 L1011.06 682.677 L1010.5 682.677 L1009.94 682.677 L1009.38 682.677 L1008.82 682.677 L1008.26 682.677 L1007.7 682.677 L1007.14 682.677 L1006.58 682.677 L1006.02 682.677 L1005.46 682.677 L1004.91 682.677 L1004.35 682.677 L1003.79 682.677 L1003.23 682.677 L1002.67 682.677 L1002.11 682.677 L1001.55 682.677 L1000.99 682.677 L1000.43 682.677 L999.872 682.677 L999.313 682.677 L998.754 682.677 L998.194 682.677 L997.635 682.677 L997.076 682.677 L996.517 682.677 L995.957 682.677 L995.398 682.677 L994.839 682.677 L994.28 682.677 L993.72 682.677 L993.161 682.677 L992.602 682.677 L992.043 682.677 L991.483 682.677 L990.924 682.677 L990.365 682.677 L989.806 682.677 L989.246 682.677 L988.687 682.677 L988.128 682.677 L987.569 682.677 L987.009 682.677 L986.45 682.677 L985.891 682.677 L985.332 682.677 L984.772 682.677 L984.213 682.677 L983.654 682.677 L983.095 682.677 L982.535 682.677 L981.976 682.677 L981.417 682.677 L980.858 682.677 L980.298 682.677 L979.739 682.677 L979.18 682.677 L978.621 682.677 L978.061 682.677 L977.502 682.677 L976.943 682.677 L976.384 682.677 L975.824 682.677 L975.265 682.677 L974.706 682.677 L974.147 682.677 L973.587 682.677 L973.028 682.677 L972.469 682.677 L971.91 682.677 L971.35 682.677 L970.791 682.677 L970.232 682.677 L969.673 682.677 L969.113 682.677 L968.554 682.677 L967.995 682.677 L967.436 682.677 L966.876 682.677 L966.317 682.677 L965.758 682.677 L965.199 682.677 L964.639 682.677 L964.08 682.677 L963.521 682.677 L962.962 682.677 L962.402 682.677 L961.843 682.677 L961.284 682.677 L960.725 682.677 L960.165 682.677 L959.606 682.677 L959.047 682.677 L958.488 682.677 L957.928 682.677 L957.369 682.677 L956.81 682.677 L956.251 682.677 L955.691 682.677 L955.132 682.677 L954.573 682.677 L954.014 682.677 L953.454 682.677 L952.895 682.677 L952.336 682.677 L951.777 682.677 L951.217 682.677 L950.658 682.677 L950.099 682.677 L949.54 682.677 L948.98 682.677 L948.421 682.677 L947.862 682.677 L947.303 682.677 L946.743 682.677 L946.184 682.677 L945.625 682.677 L945.066 682.677 L944.506 682.677 L943.947 682.677 L943.388 682.677 L942.829 682.677 L942.269 682.677 L941.71 682.677 L941.151 682.677 L940.592 682.677 L940.032 682.677 L939.473 682.677 L938.914 682.677 L938.355 682.677 L937.795 682.677 L937.236 682.677 L936.677 682.677 L936.118 682.677 L935.558 682.677 L934.999 682.677 L934.44 682.677 L933.881 682.677 L933.321 682.677 L932.762 682.677 L932.203 682.677 L931.644 682.677 L931.084 682.677 L930.525 682.677 L929.966 682.677 L929.406 682.677 L928.847 682.677 L928.288 682.677 L927.729 682.677 L927.169 682.677 L926.61 682.677 L926.051 682.677 L925.492 682.677 L924.932 682.677 L924.373 682.677 L923.814 682.677 L923.255 682.677 L922.695 682.677 L922.136 682.677 L921.577 682.677 L921.018 682.677 L920.458 682.677 L919.899 682.677 L919.34 682.677 L918.781 682.677 L918.221 682.677 L917.662 682.677 L917.103 682.677 L916.544 682.677 L915.984 682.677 L915.425 682.677 L914.866 682.677 L914.307 682.677 L913.747 682.677 L913.188 682.677 L912.629 682.677 L912.07 682.677 L911.51 682.677 L910.951 682.677 L910.392 682.677 L909.833 682.677 L909.273 682.677 L908.714 682.677 L908.155 682.677 L907.596 682.677 L907.036 682.677 L906.477 682.677 L905.918 682.677 L905.359 682.677 L904.799 682.677 L904.24 682.677 L903.681 682.677 L903.122 682.677 L902.562 682.677 L902.003 682.677 L901.444 682.677 L900.885 682.677 L900.325 682.677 L899.766 682.677 L899.207 682.677 L898.648 682.677 L898.088 682.677 L897.529 682.677 L896.97 682.677 L896.411 682.677 L895.851 682.677 L895.292 682.677 L894.733 682.677 L894.174 682.677 L893.614 682.677 L893.055 682.677 L892.496 682.677 L891.937 682.677 L891.377 682.677 L890.818 682.677 L890.259 682.677 L889.7 682.677 L889.14 682.677 L888.581 682.677 L888.022 682.677 L887.463 682.677 L886.903 682.677 L886.344 682.677 L885.785 682.677 L885.226 682.677 L884.666 682.677 L884.107 682.677 L883.548 682.677 L882.989 682.677 L882.429 682.677 L881.87 682.677 L881.311 682.677 L880.752 682.677 L880.192 682.677 L879.633 682.677 L879.074 682.677 L878.515 682.677 L877.955 682.677 L877.396 682.677 L876.837 682.677 L876.278 682.677 L875.718 682.677 L875.159 682.677 L874.6 682.677 L874.041 682.677 L873.481 682.677 L872.922 682.677 L872.363 682.677 L871.804 682.677 L871.244 682.677 L870.685 682.677 L870.126 682.677 L869.567 682.677 L869.007 682.677 L868.448 682.677 L867.889 682.677 L867.33 682.677 L866.77 682.677 L866.211 682.677 L865.652 682.677 L865.093 682.677 L864.533 682.677 L863.974 682.677 L863.415 682.677 L862.856 682.677 L862.296 682.677 L861.737 682.677 L861.178 682.677 L860.619 682.677 L860.059 682.677 L859.5 682.677 L858.941 682.677 L858.382 682.677 L857.822 682.677 L857.263 682.677 L856.704 682.677 L856.145 682.677 L855.585 682.677 L855.026 682.677 L854.467 682.677 L853.908 682.677 L853.348 682.677 L852.789 682.677 L852.23 682.677 L851.671 682.677 L851.111 682.677 L850.552 682.677 L849.993 682.677 L849.434 682.677 L848.874 682.677 L848.315 682.677 L847.756 682.677 L847.197 682.677 L846.637 682.677 L846.078 682.677 L845.519 682.677 L844.96 682.677 L844.4 682.677 L843.841 682.677 L843.282 682.677 L842.723 682.677 L842.163 682.677 L841.604 682.677 L841.045 682.677 L840.486 682.677 L839.926 682.677 L839.367 682.677 L838.808 682.677 L838.249 682.677 L837.689 682.677 L837.13 682.677 L836.571 682.677 L836.012 682.677 L835.452 682.677 L834.893 682.677 L834.334 682.677 L833.775 682.677 L833.215 682.677 L832.656 682.677 L832.097 682.677 L831.538 682.677 L830.978 682.677 L830.419 682.677 L829.86 682.677 L829.301 682.677 L828.741 682.677 L828.182 682.677 L827.623 682.677 L827.064 682.677 L826.504 682.677 L825.945 682.677 L825.386 682.677 L824.827 682.677 L824.267 682.677 L823.708 682.677 L823.149 682.677 L822.59 682.677 L822.03 682.677 L821.471 682.677 L820.912 682.677 L820.353 682.677 L819.793 682.677 L819.234 682.677 L818.675 682.677 L818.116 682.677 L817.556 682.677 L816.997 682.677 L816.438 682.677 L815.879 682.677 L815.319 682.677 L814.76 682.677 L814.201 682.677 L813.642 682.677 L813.082 682.677 L812.523 682.677 L811.964 682.677 L811.405 682.677 L810.845 682.677 L810.286 682.677 L809.727 682.677 L809.168 682.677 L808.608 682.677 L808.049 682.677 L807.49 682.677 L806.931 682.677 L806.371 682.677 L805.812 682.677 L805.253 682.677 L804.693 682.677 L804.134 682.677 L803.575 682.677 L803.016 682.677 L802.456 682.677 L801.897 682.677 L801.338 682.677 L800.779 682.677 L800.219 682.677 L799.66 682.677 L799.101 682.677 L798.542 682.677 L797.982 682.677 L797.423 682.677 L796.864 682.677 L796.305 682.677 L795.745 682.677 L795.186 682.677 L794.627 682.677 L794.068 682.677 L793.508 682.677 L792.949 682.677 L792.39 682.677 L791.831 682.677 L791.271 682.677 L790.712 682.677 L790.153 682.677 L789.594 682.677 L789.034 682.677 L788.475 682.677 L787.916 682.677 L787.357 682.677 L786.797 682.677 L786.238 682.677 L785.679 682.677 L785.12 682.677 L784.56 682.677 L784.001 682.677 L783.442 682.677 L782.883 682.677 L782.323 682.677 L781.764 682.677 L781.205 682.677 L780.646 682.677 L780.086 682.677 L779.527 682.677 L778.968 682.677 L778.409 682.677 L777.849 682.677 L777.29 682.677 L776.731 682.677 L776.172 682.677 L775.612 682.677 L775.053 682.677 L774.494 682.677 L773.935 682.677 L773.375 682.677 L772.816 682.677 L772.257 682.677 L771.698 682.677 L771.138 682.677 L770.579 682.677 L770.02 682.677 L769.461 682.677 L768.901 682.677 L768.342 682.677 L767.783 682.677 L767.224 682.677 L766.664 682.677 L766.105 682.677 L765.546 682.677 L764.987 682.677 L764.427 682.677 L763.868 682.677 L763.309 682.677 L762.75 682.677 L762.19 682.677 L761.631 682.677 L761.072 682.677 L760.513 682.677 L759.953 682.677 L759.394 682.677 L758.835 682.677 L758.276 682.677 L757.716 682.677 L757.157 682.677 L756.598 682.677 L756.039 682.677 L755.479 682.677 L754.92 682.677 L754.361 682.677 L753.802 682.677 L753.242 682.677 L752.683 682.677 L752.124 682.677 L751.565 682.677 L751.005 682.677 L750.446 682.677 L749.887 682.677 L749.328 682.677 L748.768 682.677 L748.209 682.677 L747.65 682.677 L747.091 682.677 L746.531 682.677 L745.972 682.677 L745.413 682.677 L744.854 682.677 L744.294 682.677 L743.735 682.677 L743.176 682.677 L742.617 682.677 L742.057 682.677 L741.498 682.677 L740.939 682.677 L740.38 682.677 L739.82 682.677 L739.261 682.677 L738.702 682.677 L738.143 682.677 L737.583 682.677 L737.024 682.677 L736.465 682.677 L735.906 682.677 L735.346 682.677 L734.787 682.677 L734.228 682.677 L733.669 682.677 L733.109 682.677 L732.55 682.677 L731.991 682.677 L731.432 682.677 L730.872 682.677 L730.313 682.677 L729.754 682.677 L729.195 682.677 L728.635 682.677 L728.076 682.677 L727.517 682.677 L726.958 682.677 L726.398 682.677 L725.839 682.677 L725.28 682.677 L724.721 682.677 L724.161 682.677 L723.602 682.677 L723.043 682.677 L722.484 682.677 L721.924 682.677 L721.365 682.677 L720.806 682.677 L720.247 682.677  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip873)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.477 720.806,684.477 721.365,684.477 721.924,684.477 722.484,684.477 723.043,684.477 723.602,684.477 724.161,684.477 724.721,684.477 725.28,684.477 725.839,684.477 726.398,684.477 726.958,684.477 727.517,684.477 728.076,684.477 728.635,684.477 729.195,684.477 729.754,684.477 730.313,684.477 730.872,684.477 731.432,684.477 731.991,684.477 732.55,684.477 733.109,684.477 733.669,684.477 734.228,684.477 734.787,684.477 735.346,684.477 735.906,684.477 736.465,684.477 737.024,684.477 737.583,684.477 738.143,684.477 738.702,684.477 739.261,684.477 739.82,684.477 740.38,684.477 740.939,684.477 741.498,684.477 742.057,684.477 742.617,684.477 743.176,684.477 743.735,684.477 744.294,684.477 744.854,684.477 745.413,684.477 745.972,684.477 746.531,684.477 747.091,684.477 747.65,684.477 748.209,684.477 748.768,684.477 749.328,684.477 749.887,684.477 750.446,684.477 751.005,684.477 751.565,684.477 752.124,684.477 752.683,684.477 753.242,684.477 753.802,684.477 754.361,684.477 754.92,684.477 755.479,684.477 756.039,684.477 756.598,684.477 757.157,684.477 757.716,684.477 758.276,684.477 758.835,684.477 759.394,684.477 759.953,684.477 760.513,684.477 761.072,684.477 761.631,684.477 762.19,684.477 762.75,684.477 763.309,684.477 763.868,684.477 764.427,684.477 764.987,684.477 765.546,684.477 766.105,684.477 766.664,684.477 767.224,684.477 767.783,684.477 768.342,684.477 768.901,684.477 769.461,684.477 770.02,684.477 770.579,684.477 771.138,684.477 771.698,684.477 772.257,684.477 772.816,684.477 773.375,684.477 773.935,684.477 774.494,684.477 775.053,684.477 775.612,684.477 776.172,684.477 776.731,684.477 777.29,684.477 777.849,684.477 778.409,684.477 778.968,684.477 779.527,684.477 780.086,684.477 780.646,684.477 781.205,684.477 781.764,684.477 782.323,684.477 782.883,684.477 783.442,684.477 784.001,684.477 784.56,684.477 785.12,684.477 785.679,684.477 786.238,684.477 786.797,684.477 787.357,684.477 787.916,684.477 788.475,684.477 789.034,684.477 789.594,684.477 790.153,684.477 790.712,684.477 791.271,684.477 791.831,684.477 792.39,684.477 792.949,684.477 793.508,684.477 794.068,684.477 794.627,684.477 795.186,684.477 795.745,684.477 796.305,684.477 796.864,684.477 797.423,684.477 797.982,684.477 798.542,684.477 799.101,684.477 799.66,684.477 800.219,684.477 800.779,684.477 801.338,684.477 801.897,684.477 802.456,684.477 803.016,684.477 803.575,684.477 804.134,684.477 804.693,684.477 805.253,684.477 805.812,684.477 806.371,684.477 806.931,684.477 807.49,684.477 808.049,684.477 808.608,684.477 809.168,684.477 809.727,684.477 810.286,684.477 810.845,684.477 811.405,684.477 811.964,684.477 812.523,684.477 813.082,684.477 813.642,684.477 814.201,684.477 814.76,684.477 815.319,684.477 815.879,684.477 816.438,684.477 816.997,684.477 817.556,684.477 818.116,684.477 818.675,684.477 819.234,684.477 819.793,684.477 820.353,684.477 820.912,684.477 821.471,684.477 822.03,684.477 822.59,684.477 823.149,684.477 823.708,684.477 824.267,684.477 824.827,684.477 825.386,684.477 825.945,684.477 826.504,684.477 827.064,684.477 827.623,684.477 828.182,684.477 828.741,684.477 829.301,684.477 829.86,684.477 830.419,684.477 830.978,684.477 831.538,684.477 832.097,684.477 832.656,684.477 833.215,684.477 833.775,684.477 834.334,684.477 834.893,684.477 835.452,684.477 836.012,684.477 836.571,684.477 837.13,684.477 837.689,684.477 838.249,684.477 838.808,684.477 839.367,684.477 839.926,684.477 840.486,684.477 841.045,684.477 841.604,684.477 842.163,684.477 842.723,684.477 843.282,684.477 843.841,684.477 844.4,684.477 844.96,684.477 845.519,684.477 846.078,684.477 846.637,684.477 847.197,684.477 847.756,684.477 848.315,684.477 848.874,684.477 849.434,684.477 849.993,684.477 850.552,684.477 851.111,684.477 851.671,684.477 852.23,684.477 852.789,684.477 853.348,684.477 853.908,684.477 854.467,684.477 855.026,684.477 855.585,684.477 856.145,684.477 856.704,684.477 857.263,684.477 857.822,684.477 858.382,684.477 858.941,684.477 859.5,684.477 860.059,684.477 860.619,684.477 861.178,684.477 861.737,684.477 862.296,684.477 862.856,684.477 863.415,684.477 863.974,684.477 864.533,684.477 865.093,684.477 865.652,684.477 866.211,684.477 866.77,684.477 867.33,684.477 867.889,684.477 868.448,684.477 869.007,684.477 869.567,684.477 870.126,684.477 870.685,684.477 871.244,684.477 871.804,684.477 872.363,684.477 872.922,684.477 873.481,684.477 874.041,684.477 874.6,684.477 875.159,684.477 875.718,684.477 876.278,684.477 876.837,684.477 877.396,684.477 877.955,684.477 878.515,684.477 879.074,684.477 879.633,684.477 880.192,684.477 880.752,684.477 881.311,684.477 881.87,684.477 882.429,684.477 882.989,684.477 883.548,684.477 884.107,684.477 884.666,684.477 885.226,684.477 885.785,684.477 886.344,684.477 886.903,684.477 887.463,684.477 888.022,684.477 888.581,684.477 889.14,684.477 889.7,684.477 890.259,684.477 890.818,684.477 891.377,684.477 891.937,684.477 892.496,684.477 893.055,684.477 893.614,684.477 894.174,684.477 894.733,684.477 895.292,684.477 895.851,684.477 896.411,684.477 896.97,684.477 897.529,684.477 898.088,684.477 898.648,684.477 899.207,684.477 899.766,684.477 900.325,684.477 900.885,684.477 901.444,684.477 902.003,684.477 902.562,684.477 903.122,684.477 903.681,684.477 904.24,684.477 904.799,684.477 905.359,684.477 905.918,684.477 906.477,684.477 907.036,684.477 907.596,684.477 908.155,684.477 908.714,684.477 909.273,684.477 909.833,684.477 910.392,684.477 910.951,684.477 911.51,684.477 912.07,684.477 912.629,684.477 913.188,684.477 913.747,684.477 914.307,684.477 914.866,684.477 915.425,684.477 915.984,684.477 916.544,684.477 917.103,684.477 917.662,684.477 918.221,684.477 918.781,684.477 919.34,684.477 919.899,684.477 920.458,684.477 921.018,684.477 921.577,684.477 922.136,684.477 922.695,684.477 923.255,684.477 923.814,684.477 924.373,684.477 924.932,684.477 925.492,684.477 926.051,684.477 926.61,684.477 927.169,684.477 927.729,684.477 928.288,684.477 928.847,684.477 929.406,684.477 929.966,684.477 930.525,684.477 931.084,684.477 931.644,684.477 932.203,684.477 932.762,684.477 933.321,684.477 933.881,684.477 934.44,684.477 934.999,684.477 935.558,684.477 936.118,684.477 936.677,684.477 937.236,684.477 937.795,684.477 938.355,684.477 938.914,684.477 939.473,684.477 940.032,684.477 940.592,684.477 941.151,684.477 941.71,684.477 942.269,684.477 942.829,684.477 943.388,684.477 943.947,684.477 944.506,684.477 945.066,684.477 945.625,684.477 946.184,684.477 946.743,684.477 947.303,684.477 947.862,684.477 948.421,684.477 948.98,684.477 949.54,684.477 950.099,684.477 950.658,684.477 951.217,684.477 951.777,684.477 952.336,684.477 952.895,684.477 953.454,684.477 954.014,684.477 954.573,684.477 955.132,684.477 955.691,684.477 956.251,684.477 956.81,684.477 957.369,684.477 957.928,684.477 958.488,684.477 959.047,684.477 959.606,684.477 960.165,684.477 960.725,684.477 961.284,684.477 961.843,684.477 962.402,684.477 962.962,684.477 963.521,684.477 964.08,684.477 964.639,684.477 965.199,684.477 965.758,684.477 966.317,684.477 966.876,684.477 967.436,684.477 967.995,684.477 968.554,684.477 969.113,684.477 969.673,684.477 970.232,684.477 970.791,684.477 971.35,684.477 971.91,684.477 972.469,684.477 973.028,684.477 973.587,684.477 974.147,684.477 974.706,684.477 975.265,684.477 975.824,684.477 976.384,684.477 976.943,684.477 977.502,684.477 978.061,684.477 978.621,684.477 979.18,684.477 979.739,684.477 980.298,684.477 980.858,684.477 981.417,684.477 981.976,684.477 982.535,684.477 983.095,684.477 983.654,684.477 984.213,684.477 984.772,684.477 985.332,684.477 985.891,684.477 986.45,684.477 987.009,684.477 987.569,684.477 988.128,684.477 988.687,684.477 989.246,684.477 989.806,684.477 990.365,684.477 990.924,684.477 991.483,684.477 992.043,684.477 992.602,684.477 993.161,684.477 993.72,684.477 994.28,684.477 994.839,684.477 995.398,684.477 995.957,684.477 996.517,684.477 997.076,684.477 997.635,684.477 998.194,684.477 998.754,684.477 999.313,684.477 999.872,684.477 1000.43,684.477 1000.99,684.477 1001.55,684.477 1002.11,684.477 1002.67,684.477 1003.23,684.477 1003.79,684.477 1004.35,684.477 1004.91,684.477 1005.46,684.477 1006.02,684.477 1006.58,684.477 1007.14,684.477 1007.7,684.477 1008.26,684.477 1008.82,684.477 1009.38,684.477 1009.94,684.477 1010.5,684.477 1011.06,684.477 1011.62,684.477 1012.18,684.477 1012.73,684.477 1013.29,684.477 1013.85,684.477 1014.41,684.477 1014.97,684.477 1015.53,684.477 1016.09,684.477 1016.65,684.477 1017.21,684.477 1017.77,684.477 1018.33,684.477 1018.89,684.477 1019.45,684.477 1020.01,684.477 1020.56,684.477 1021.12,684.477 1021.68,684.477 1022.24,684.477 1022.8,684.477 1023.36,684.477 1023.92,684.477 1024.48,684.477 1025.04,684.477 1025.6,684.477 1026.16,684.477 1026.72,684.477 1027.28,684.477 1027.83,684.477 1028.39,684.477 1028.95,684.477 1029.51,684.477 1030.07,684.477 1030.63,684.477 1031.19,684.477 1031.75,684.477 1032.31,684.477 1032.87,684.477 1033.43,684.477 1033.99,684.477 1034.55,684.477 1035.1,684.477 1035.66,684.477 1036.22,684.477 1036.78,684.477 1037.34,684.477 1037.9,684.477 1038.46,684.477 1039.02,684.477 1039.58,684.477 1040.14,684.477 1040.7,684.477 1041.26,684.477 1041.82,684.477 1042.38,684.477 1042.93,684.477 1043.49,684.477 1044.05,684.477 1044.61,684.477 1045.17,684.477 1045.73,684.477 1046.29,684.477 1046.85,684.477 1047.41,684.477 1047.97,684.477 1048.53,684.477 1049.09,684.477 1049.65,684.477 1050.2,684.477 1050.76,684.477 1051.32,684.477 1051.88,684.477 1052.44,684.477 1053,684.477 1053.56,684.477 1054.12,684.477 1054.68,684.477 1055.24,684.477 1055.8,684.477 1056.36,684.477 1056.92,684.477 1057.48,684.477 1058.03,684.477 1058.59,684.477 1059.15,684.477 1059.71,684.477 1060.27,684.477 1060.83,684.477 1061.39,684.477 1061.95,684.477 1062.51,684.477 1063.07,684.477 1063.63,684.477 1064.19,684.477 1064.75,684.477 1065.3,684.477 1065.86,684.477 1066.42,684.477 1066.98,684.477 1067.54,684.477 1068.1,684.477 1068.66,684.477 1069.22,684.477 1069.78,684.477 1070.34,684.477 1070.9,684.477 1071.46,684.477 1072.02,684.477 1072.57,684.477 1073.13,684.477 1073.69,684.477 1074.25,684.477 1074.81,684.477 1075.37,684.477 1075.93,684.477 1076.49,684.477 1077.05,684.477 1077.61,684.477 1078.17,684.477 1078.73,684.477 1079.29,684.477 1079.85,684.477 1080.4,684.477 1080.96,684.477 1081.52,684.477 1082.08,684.477 1082.64,684.477 1083.2,684.477 1083.76,684.477 1084.32,684.477 1084.88,684.477 1085.44,684.477 1086,684.477 1086.56,684.477 1087.12,684.477 1087.67,684.477 1088.23,684.477 1088.79,684.477 1089.35,684.477 1089.91,684.477 1090.47,684.477 1091.03,684.477 1091.59,684.477 1092.15,684.477 1092.71,684.477 1093.27,684.477 1093.83,684.477 1094.39,684.477 1094.94,684.477 1095.5,684.477 1096.06,684.477 1096.62,684.477 1097.18,684.477 1097.74,684.477 1098.3,684.477 1098.86,684.477 1099.42,684.477 1099.98,684.477 1100.54,684.477 1101.1,684.477 1101.66,684.477 1102.22,684.477 1102.77,684.477 1103.33,684.477 1103.89,684.477 1104.45,684.477 1105.01,684.477 1105.57,684.477 1106.13,684.477 1106.69,684.477 1107.25,684.477 1107.81,684.477 1108.37,684.477 1108.93,684.477 1109.49,684.477 1110.04,684.477 1110.6,684.477 1111.16,684.477 1111.72,684.477 1112.28,684.477 1112.84,684.477 1113.4,684.477 1113.96,684.477 1114.52,684.477 1115.08,684.477 1115.64,684.477 1116.2,684.477 1116.76,684.477 1117.31,684.477 1117.87,684.477 1118.43,684.477 1118.99,684.477 1119.55,684.477 1120.11,684.477 1120.67,684.477 1121.23,684.477 1121.79,684.477 1122.35,684.477 1122.91,684.477 1123.47,684.477 1124.03,684.477 1124.59,684.477 1125.14,684.477 1125.7,684.477 1126.26,684.477 1126.82,684.477 1127.38,684.477 1127.94,684.477 1128.5,684.477 1129.06,684.477 1129.62,684.477 1130.18,684.477 1130.74,684.477 1131.3,684.477 1131.86,684.477 1132.41,684.477 1132.97,684.477 1133.53,684.477 1134.09,684.477 1134.65,684.477 1135.21,684.477 1135.77,684.477 1136.33,684.477 1136.89,684.477 1137.45,684.477 1138.01,684.477 1138.57,684.477 1139.13,684.477 1139.68,684.477 1140.24,684.477 1140.8,684.477 1141.36,684.477 1141.92,684.477 1142.48,684.477 1143.04,684.477 1143.6,684.477 1144.16,684.477 1144.72,684.477 1145.28,684.477 1145.84,684.477 1146.4,684.477 1146.96,684.477 1147.51,684.477 1148.07,684.477 1148.63,684.477 1149.19,684.477 1149.75,684.477 1150.31,684.477 1150.87,684.477 1151.43,684.477 1151.99,684.477 1152.55,684.477 1153.11,684.477 1153.67,684.477 1154.23,684.477 1154.78,684.477 1155.34,684.477 1155.9,684.477 1156.46,684.477 1157.02,684.477 1157.58,684.477 1158.14,684.477 1158.7,684.477 1159.26,684.477 1159.82,684.477 1160.38,684.477 1160.94,684.477 1161.5,684.477 1162.05,684.477 1162.61,684.477 1163.17,684.477 1163.73,684.477 1164.29,684.477 1164.85,684.477 1165.41,684.477 1165.97,684.477 1166.53,684.477 1167.09,684.477 1167.65,684.477 1168.21,684.477 1168.77,684.477 1169.33,684.477 1169.88,684.477 1170.44,684.477 1171,684.477 1171.56,684.477 1172.12,684.477 1172.68,684.477 1173.24,684.477 1173.8,684.477 1174.36,684.477 1174.92,684.477 1175.48,684.477 1176.04,684.477 1176.6,684.477 1177.15,684.477 1177.71,684.477 1178.27,684.477 1178.83,684.477 1179.39,684.477 1179.95,684.477 1180.51,684.477 1181.07,684.477 1181.63,684.477 1182.19,684.477 1182.75,684.477 1183.31,684.477 1183.87,684.477 1184.43,684.477 1184.98,684.477 1185.54,684.477 1186.1,684.477 1186.66,684.477 1187.22,684.477 1187.78,684.477 1188.34,684.477 1188.9,684.477 1189.46,684.477 1190.02,684.477 1190.58,684.477 1191.14,684.477 1191.7,684.477 1192.25,684.477 1192.81,684.477 1193.37,684.477 1193.93,684.477 1194.49,684.477 1195.05,684.477 1195.61,684.477 1196.17,684.477 1196.73,684.477 1197.29,684.477 1197.85,684.477 1198.41,684.477 1198.97,684.477 1199.52,684.477 1200.08,684.477 1200.64,684.477 1201.2,684.477 1201.76,684.477 1202.32,684.477 1202.88,684.477 1203.44,684.477 1204,684.477 1204.56,684.477 1205.12,684.477 1205.68,684.477 1206.24,684.477 1206.8,684.477 1207.35,684.477 1207.91,684.477 1208.47,684.477 1209.03,684.477 1209.59,684.477 1210.15,684.477 1210.71,684.477 1211.27,684.477 1211.83,684.477 1212.39,684.477 1212.95,684.477 1213.51,684.477 1214.07,684.477 1214.62,684.477 1215.18,684.477 1215.74,684.477 1216.3,684.477 1216.86,684.477 1217.42,684.477 1217.98,684.477 1218.54,684.477 1219.1,684.477 1219.66,684.477 1220.22,684.477 1220.78,684.477 1221.34,684.477 1221.89,684.477 1222.45,684.477 1223.01,684.477 1223.57,684.477 1224.13,684.477 1224.69,684.477 1225.25,684.477 1225.81,684.477 1226.37,684.477 1226.93,684.477 1227.49,684.477 1228.05,684.477 1228.61,684.477 1229.17,684.477 1229.72,684.477 1230.28,684.477 1230.84,684.477 1231.4,684.477 1231.96,684.477 1232.52,684.477 1233.08,684.477 1233.64,684.477 1234.2,684.477 1234.76,684.477 1235.32,684.477 1235.88,684.477 1236.44,684.477 1236.99,684.477 1237.55,684.477 1238.11,684.477 1238.67,684.477 1239.23,684.477 1239.79,684.477 1240.35,684.477 1240.91,684.477 1241.47,684.477 1242.03,684.477 1242.59,684.477 1243.15,684.477 1243.71,684.477 1244.26,684.477 1244.82,684.477 1245.38,684.477 1245.94,684.477 1246.5,684.477 1247.06,684.477 1247.62,684.477 1248.18,684.477 1248.74,684.477 1249.3,684.477 1249.86,684.477 1250.42,684.477 1250.98,684.477 1251.54,684.477 1252.09,684.477 1252.65,684.477 1253.21,684.477 1253.77,684.477 1254.33,684.477 1254.89,684.477 1255.45,684.477 1256.01,684.477 1256.57,684.477 1257.13,684.477 1257.69,684.477 1258.25,684.477 1258.81,684.477 1259.36,684.477 1259.92,684.477 1260.48,684.477 1261.04,684.477 1261.6,684.477 1262.16,684.477 1262.72,684.477 1263.28,684.477 1263.84,684.477 1264.4,684.477 1264.96,684.477 1265.52,684.477 1266.08,684.477 1266.63,684.477 1267.19,684.477 1267.75,684.477 1268.31,684.477 1268.87,684.477 1269.43,684.477 1269.99,684.477 1270.55,684.477 1271.11,684.477 1271.67,684.477 1272.23,684.477 1272.79,684.477 1273.35,684.477 1273.91,684.477 1274.46,684.477 1275.02,684.477 1275.58,684.477 1276.14,684.477 1276.7,684.477 1277.26,684.477 1277.82,684.477 1278.38,684.477 1278.94,684.477 1279.5,684.477 1280.06,684.477 1280.62,684.477 1281.18,684.477 1281.73,684.477 1282.29,684.477 1282.85,684.477 1283.41,684.477 1283.97,684.477 1284.53,684.477 1285.09,684.477 1285.65,684.477 1286.21,684.477 1286.77,684.477 1287.33,684.477 1287.89,684.477 1288.45,684.477 1289,684.477 1289.56,684.477 1290.12,684.477 1290.68,684.477 1291.24,684.477 1291.8,684.477 1292.36,684.477 1292.92,684.477 1293.48,684.477 1294.04,684.477 1294.6,684.477 1295.16,684.477 1295.72,684.477 1296.28,684.477 1296.83,684.477 1297.39,684.477 1297.95,684.477 1298.51,684.477 1299.07,684.477 1299.63,684.477 1300.19,684.477 1300.75,684.477 1301.31,684.477 1301.87,684.477 1302.43,684.477 1302.99,684.477 1303.55,684.477 1304.1,684.477 1304.66,684.477 1305.22,684.477 1305.78,684.477 1306.34,684.477 1306.9,684.477 1307.46,684.477 1308.02,684.477 1308.58,684.477 1309.14,684.477 1309.7,684.477 1310.26,684.477 1310.82,684.477 1311.38,684.477 1311.93,684.477 1312.49,684.477 1313.05,684.477 1313.61,684.477 1314.17,684.477 1314.73,684.477 1315.29,684.477 1315.85,684.477 1316.41,684.477 1316.97,684.477 1317.53,684.477 1318.09,684.477 1318.65,684.477 1319.2,684.477 1319.76,684.477 1320.32,684.477 1320.88,684.477 1321.44,684.477 1322,684.477 1322.56,684.477 1323.12,684.477 1323.68,684.477 1324.24,684.477 1324.8,684.477 1325.36,684.477 1325.92,684.477 1326.47,684.477 1327.03,684.477 1327.59,684.477 1328.15,684.477 1328.71,684.477 1329.27,684.477 1329.83,684.477 1330.39,684.477 1330.95,684.477 1331.51,684.477 1332.07,684.477 1332.63,684.477 1333.19,684.477 1333.75,684.477 1334.3,684.477 1334.86,684.477 1335.42,684.477 1335.98,684.477 1336.54,684.477 1337.1,684.477 1337.66,684.477 1338.22,684.477 1338.78,684.477 1339.34,684.477 1339.9,684.477 1340.46,684.477 1341.02,684.477 1341.57,684.477 1342.13,684.477 1342.69,684.477 1343.25,684.477 1343.81,684.477 1344.37,684.477 1344.93,684.477 1345.49,684.477 1346.05,684.477 1346.61,684.477 1347.17,684.477 1347.73,684.477 1348.29,684.477 1348.84,684.477 1349.4,684.477 1349.96,684.477 1350.52,684.477 1351.08,684.477 1351.64,684.477 1352.2,684.477 1352.76,684.477 1353.32,684.477 1353.88,684.477 1354.44,684.477 1355,684.477 1355.56,684.477 1356.12,684.477 1356.67,684.477 1357.23,684.477 1357.79,684.477 1358.35,684.477 1358.91,684.477 1359.47,684.477 1360.03,684.477 1360.59,684.477 1361.15,684.477 1361.71,684.477 1362.27,684.477 1362.83,684.477 1363.39,684.477 1363.94,684.477 1364.5,684.477 1365.06,684.477 1365.62,684.477 1366.18,684.477 1366.74,684.477 1367.3,684.477 1367.86,684.477 1368.42,684.477 1368.98,684.477 1369.54,684.477 1370.1,684.477 1370.66,684.477 1371.21,684.477 1371.77,684.477 1372.33,684.477 1372.89,684.477 1373.45,684.477 1374.01,684.477 1374.57,684.477 1375.13,684.477 1375.69,684.477 1376.25,684.477 1376.81,684.477 1377.37,684.477 1377.93,684.477 1378.49,684.477 1379.04,684.477 1379.6,684.477 1380.16,684.477 1380.72,684.477 1381.28,684.477 1381.84,684.477 1382.4,684.477 1382.96,684.477 1383.52,684.477 1384.08,684.477 1384.64,684.477 1385.2,684.477 1385.76,684.477 1386.31,684.477 1386.87,684.477 1387.43,684.477 1387.99,684.477 1388.55,684.477 1389.11,684.477 1389.67,684.477 1390.23,684.477 1390.79,684.477 1391.35,684.477 1391.91,684.477 1392.47,684.477 1393.03,684.477 1393.58,684.477 1394.14,684.477 1394.7,684.477 1395.26,684.477 1395.82,684.477 1396.38,684.477 1396.94,684.477 1397.5,684.477 1398.06,684.477 1398.62,684.477 1399.18,684.477 1399.74,684.477 1400.3,684.477 1400.86,684.477 1401.41,684.477 1401.97,684.477 1402.53,684.477 1403.09,684.477 1403.65,684.477 1404.21,684.477 1404.77,684.477 1405.33,684.477 1405.89,684.477 1406.45,684.477 1407.01,684.477 1407.57,684.477 1408.13,684.477 1408.68,684.477 1409.24,684.477 1409.8,684.477 1410.36,684.477 1410.92,684.477 1411.48,684.477 1412.04,684.477 1412.6,684.477 1413.16,684.477 1413.72,684.477 1414.28,684.477 1414.84,684.477 1415.4,684.477 1415.95,684.477 1416.51,684.477 1417.07,684.477 1417.63,684.477 1418.19,684.477 1418.75,684.477 1419.31,684.477 1419.87,684.477 1420.43,684.477 1420.99,684.477 1421.55,684.477 1422.11,684.477 1422.67,684.477 1423.23,684.477 1423.78,684.477 1424.34,684.477 1424.9,684.477 1425.46,684.477 1426.02,684.477 1426.58,684.477 1427.14,684.477 1427.7,684.477 1428.26,684.477 1428.82,684.477 1429.38,684.477 1429.94,684.477 1430.5,684.477 1431.05,684.477 1431.61,684.477 1432.17,684.477 1432.73,684.477 1433.29,684.477 1433.85,684.477 1434.41,684.477 1434.97,684.477 1435.53,684.477 1436.09,684.477 1436.65,684.477 1437.21,684.477 1437.77,684.477 1438.33,684.477 1438.88,684.477 1439.44,684.477 1440,684.477 1440.56,684.477 1441.12,684.477 1441.68,684.477 1442.24,684.477 1442.8,684.477 1443.36,684.477 1443.92,684.477 1444.48,684.477 1445.04,684.477 1445.6,684.477 1446.15,684.477 1446.71,684.477 1447.27,684.477 1447.83,684.477 1448.39,684.477 1448.95,684.477 1449.51,684.477 1450.07,684.477 1450.63,684.477 1451.19,684.477 1451.75,684.477 1452.31,684.477 1452.87,684.477 1453.42,684.477 1453.98,684.477 1454.54,684.477 1455.1,684.477 1455.66,684.477 1456.22,684.477 1456.78,684.477 1457.34,684.477 1457.9,684.477 1458.46,684.477 1459.02,684.477 1459.58,684.477 1460.14,684.477 1460.7,684.477 1461.25,684.477 1461.81,684.477 1462.37,684.477 1462.93,684.477 1463.49,684.477 1464.05,684.477 1464.61,684.477 1465.17,684.477 1465.73,684.477 1466.29,684.477 1466.85,684.477 1467.41,684.477 1467.97,684.477 1468.52,684.477 1469.08,684.477 1469.64,684.477 1470.2,684.477 1470.76,684.477 1471.32,684.477 1471.88,684.477 1472.44,684.477 1473,684.477 1473.56,684.477 1474.12,684.477 1474.68,684.477 1475.24,684.477 1475.79,684.477 1476.35,684.477 1476.91,684.477 1477.47,684.477 1478.03,684.477 1478.59,684.477 1479.15,684.477 1479.71,684.477 1480.27,684.477 1480.83,684.477 1481.39,684.477 1481.95,684.477 1482.51,684.477 1483.07,684.477 1483.62,684.477 1484.18,684.477 1484.74,684.477 1485.3,684.477 1485.86,684.477 1486.42,684.477 1486.98,684.477 1487.54,684.477 1488.1,684.477 1488.66,684.477 1489.22,684.477 1489.78,684.477 1490.34,684.477 1490.89,684.477 1491.45,684.477 1492.01,684.477 1492.57,684.477 1493.13,684.477 1493.69,684.477 1494.25,684.477 1494.81,684.477 1495.37,684.477 1495.93,684.477 1496.49,684.477 1497.05,684.477 1497.61,684.477 1498.16,684.477 1498.72,684.477 1499.28,684.477 1499.84,684.477 1500.4,684.477 1500.96,684.477 1501.52,684.477 1502.08,684.477 1502.64,684.477 1503.2,684.477 1503.76,684.477 1504.32,684.477 1504.88,684.477 1505.44,684.477 1505.99,684.477 1506.55,684.477 1507.11,684.477 1507.67,684.477 1508.23,684.477 1508.79,684.477 1509.35,684.477 1509.91,684.477 1510.47,684.477 1511.03,684.477 1511.59,684.477 1512.15,684.477 1512.71,684.477 1513.26,684.477 1513.82,684.477 1514.38,684.477 1514.94,684.477 1515.5,684.477 1516.06,684.477 1516.62,684.477 1517.18,684.477 1517.74,684.477 1518.3,684.477 1518.86,684.477 1519.42,684.477 1519.98,684.477 1520.53,684.477 1521.09,684.477 1521.65,684.477 1522.21,684.477 1522.77,684.477 1523.33,684.477 1523.89,684.477 1524.45,684.477 1525.01,684.477 1525.57,684.477 1526.13,684.477 1526.69,684.477 1527.25,684.477 1527.81,684.477 1528.36,684.477 1528.92,684.477 1529.48,684.477 1530.04,684.477 1530.6,684.477 1531.16,684.477 1531.72,684.477 1532.28,684.477 1532.84,684.477 1533.4,684.477 1533.96,684.477 1534.52,684.477 1535.08,684.477 1535.63,684.477 1536.19,684.477 1536.75,684.477 1537.31,684.477 1537.87,684.477 1538.43,684.477 1538.99,684.477 1539.55,684.477 1540.11,684.477 1540.67,684.477 1541.23,684.477 1541.79,684.477 1542.35,684.477 1542.9,684.477 1543.46,684.477 1544.02,684.477 1544.58,684.477 1545.14,684.477 1545.7,684.477 1546.26,684.477 1546.82,684.477 1547.38,684.477 1547.94,684.477 1548.5,684.477 1549.06,684.477 1549.62,684.477 1550.18,684.477 1550.73,684.477 1551.29,684.477 1551.85,684.477 1552.41,684.477 1552.97,684.477 1553.53,684.477 1554.09,684.477 1554.65,684.477 1555.21,684.477 1555.77,684.477 1556.33,684.477 1556.89,684.477 1557.45,684.477 1558,684.477 1558.56,684.477 1559.12,684.477 1559.68,684.477 1560.24,684.477 1560.8,684.477 1561.36,684.477 1561.92,684.477 1562.48,684.477 1563.04,684.477 1563.6,684.477 1564.16,684.477 1564.72,684.477 1565.28,684.477 1565.83,684.477 1566.39,684.477 1566.95,684.477 1567.51,684.477 1568.07,684.477 1568.63,684.477 1569.19,684.477 1569.75,684.477 1570.31,684.477 1570.87,684.477 1571.43,684.477 1571.99,684.477 1572.55,684.477 1573.1,684.477 1573.66,684.477 1574.22,684.477 1574.78,684.477 1575.34,684.477 1575.9,684.477 1576.46,684.477 1577.02,684.477 1577.58,684.477 1578.14,684.477 1578.7,684.477 1579.26,684.477 1579.82,684.477 1580.37,684.477 1580.93,684.477 1581.49,684.477 1582.05,684.477 1582.61,684.477 1583.17,684.477 1583.73,684.477 1584.29,684.477 1584.85,684.477 1585.41,684.477 1585.97,684.477 1586.53,684.477 1587.09,684.477 1587.65,684.477 1588.2,684.477 1588.76,684.477 1589.32,684.477 1589.88,684.477 1590.44,684.477 1591,684.477 1591.56,684.477 1592.12,684.477 1592.68,684.477 1593.24,684.477 1593.8,684.477 1594.36,684.477 1594.92,684.477 1595.47,684.477 1596.03,684.477 1596.59,684.477 1597.15,684.477 1597.71,684.477 1598.27,684.477 1598.83,684.477 1599.39,684.477 1599.95,684.477 1600.51,684.477 1601.07,684.477 1601.63,684.477 1602.19,684.477 1602.74,684.477 1603.3,684.477 1603.86,684.477 1604.42,684.477 1604.98,684.477 1605.54,684.477 1606.1,684.477 1606.66,684.477 1607.22,684.477 1607.78,684.477 1608.34,684.477 1608.9,684.477 1609.46,684.477 1610.02,684.477 1610.57,684.477 1611.13,684.477 1611.69,684.477 1612.25,684.477 1612.81,684.477 1613.37,684.477 1613.93,684.477 1614.49,684.477 1615.05,684.477 1615.61,684.477 1616.17,684.477 1616.73,684.477 1617.29,684.477 1617.84,684.477 1618.4,684.477 1618.96,684.477 1619.52,684.477 1620.08,684.477 1620.64,684.477 1621.2,684.477 1621.76,684.477 1622.32,684.477 1622.88,684.477 1623.44,684.477 1624,684.477 1624.56,684.477 1625.11,684.477 1625.67,684.477 1626.23,684.477 1626.79,684.477 1627.35,684.477 1627.91,684.477 1628.47,684.477 1629.03,684.477 1629.59,684.477 1630.15,684.477 1630.71,684.477 1631.27,684.477 1631.83,684.477 1632.39,684.477 1632.94,684.477 1633.5,684.477 1634.06,684.477 1634.62,684.477 1635.18,684.477 1635.74,684.477 1636.3,684.477 1636.86,684.477 1637.42,684.477 1637.98,684.477 1638.54,684.477 1639.1,684.477 1639.66,684.477 1640.21,684.477 1640.77,684.477 1641.33,684.477 1641.89,684.477 1642.45,684.477 1643.01,684.477 1643.57,684.477 1644.13,684.477 1644.69,684.477 1645.25,684.477 1645.81,684.477 1646.37,684.477 1646.93,684.477 1647.48,684.477 1648.04,684.477 1648.6,684.477 1649.16,684.477 1649.72,684.477 1650.28,684.477 1650.84,684.477 1651.4,684.477 1651.96,684.477 1652.52,684.477 1653.08,684.477 1653.64,684.477 1654.2,684.477 1654.76,684.477 1655.31,684.477 1655.87,684.477 1656.43,684.477 1656.99,684.477 1657.55,684.477 1658.11,684.477 1658.67,684.477 1659.23,684.477 1659.79,684.477 1660.35,684.477 1660.91,684.477 1661.47,684.477 1662.03,684.477 1662.58,684.477 1663.14,684.477 1663.7,684.477 1664.26,684.477 1664.82,684.477 1665.38,684.477 1665.94,684.477 1666.5,684.477 1667.06,684.477 1667.62,684.477 1668.18,684.477 1668.74,684.477 1669.3,684.477 1669.85,684.477 1670.41,684.477 1670.97,684.477 1671.53,684.477 1672.09,684.477 1672.65,684.477 1673.21,684.477 1673.77,684.477 1674.33,684.477 1674.89,684.477 1675.45,684.477 1676.01,684.477 1676.57,684.477 1677.13,684.477 1677.68,684.477 1678.24,684.477 1678.8,684.477 1679.36,684.477 1679.92,684.477 1680.48,684.477 1681.04,684.477 1681.6,684.477 1682.16,684.477 1682.72,684.477 1683.28,684.477 1683.84,684.477 1684.4,684.477 1684.95,684.477 1685.51,684.477 1686.07,684.477 1686.63,684.477 1687.19,684.477 1687.75,684.477 1688.31,684.477 1688.87,684.477 1689.43,684.477 1689.99,684.477 1690.55,684.477 1691.11,684.477 1691.67,684.477 1692.23,684.477 1692.78,684.477 1693.34,684.477 1693.9,684.477 1694.46,684.477 1695.02,684.477 1695.58,684.477 1696.14,684.477 1696.7,684.477 1697.26,684.477 1697.82,684.477 1698.38,684.477 1698.94,684.477 1699.5,684.477 1700.05,684.477 1700.61,684.477 1701.17,684.477 1701.73,684.477 1702.29,684.477 1702.85,684.477 1703.41,684.477 1703.97,684.477 1704.53,684.477 1705.09,684.477 1705.65,684.477 1706.21,684.477 1706.77,684.477 1707.32,684.477 1707.88,684.477 1708.44,684.477 1709,684.477 1709.56,684.477 1710.12,684.477 1710.68,684.477 1711.24,684.477 1711.8,684.477 1712.36,684.477 1712.92,684.477 1713.48,684.477 1714.04,684.477 1714.6,684.477 1715.15,684.477 1715.71,684.477 1716.27,684.477 1716.83,684.477 1717.39,684.477 1717.95,684.477 1718.51,684.477 1719.07,684.477 1719.63,684.477 1720.19,684.477 1720.75,684.477 1721.31,684.477 1721.87,684.477 1722.42,684.477 1722.98,684.477 1723.54,684.477 1724.1,684.477 1724.66,684.477 1725.22,684.477 1725.78,684.477 1726.34,684.477 1726.9,684.477 1727.46,684.477 1728.02,684.477 1728.58,684.477 1729.14,684.477 1729.69,684.477 1730.25,684.477 1730.81,684.477 1731.37,684.477 1731.93,684.477 1732.49,684.477 1733.05,684.477 1733.61,684.477 1734.17,684.477 1734.73,684.477 1735.29,684.477 1735.85,684.477 1736.41,684.477 1736.97,684.477 1737.52,684.477 1738.08,684.477 1738.64,684.477 1739.2,684.477 1739.76,684.477 1740.32,684.477 1740.88,684.477 1741.44,684.477 1742,684.477 1742.56,684.477 1743.12,684.477 1743.68,684.477 1744.24,684.477 1744.79,684.477 1745.35,684.477 1745.91,684.477 1746.47,684.477 1747.03,684.477 1747.59,684.477 1748.15,684.477 1748.71,684.477 1749.27,684.477 1749.83,684.477 1750.39,684.477 1750.95,684.477 1751.51,684.477 1752.06,684.477 1752.62,684.477 1753.18,684.477 1753.74,684.477 1754.3,684.477 1754.86,684.477 1755.42,684.477 1755.98,684.477 1756.54,684.477 1757.1,684.477 1757.66,684.477 1758.22,684.477 1758.78,684.477 1759.34,684.477 1759.89,684.477 1760.45,684.477 1761.01,684.477 1761.57,684.477 1762.13,684.477 1762.69,684.477 1763.25,684.477 1763.81,684.477 1764.37,684.477 1764.93,684.477 1765.49,684.477 1766.05,684.477 1766.61,684.477 1767.16,684.477 1767.72,684.477 1768.28,684.477 1768.84,684.477 1769.4,684.477 1769.96,684.477 1770.52,684.477 1771.08,684.477 1771.64,684.477 1772.2,684.477 1772.76,684.477 1773.32,684.477 1773.88,684.477 1774.43,684.477 1774.99,684.477 1775.55,684.477 1776.11,684.477 1776.67,684.477 1777.23,684.477 1777.79,684.477 1778.35,684.477 1778.91,684.477 1779.47,684.477 1780.03,684.477 1780.59,684.477 1781.15,684.477 1781.71,684.477 1782.26,684.477 1782.82,684.477 1783.38,684.477 1783.94,684.477 1784.5,684.477 1785.06,684.477 1785.62,684.477 1786.18,684.477 1786.74,684.477 1787.3,684.477 1787.86,684.477 1788.42,684.477 1788.98,684.477 1789.53,684.477 1790.09,684.477 1790.65,684.477 1791.21,684.477 1791.77,684.477 1792.33,684.477 1792.89,684.477 1793.45,684.477 1794.01,684.477 1794.57,684.477 1795.13,684.477 1795.69,684.477 1796.25,684.477 1796.8,684.477 1797.36,684.477 1797.92,684.477 1798.48,684.477 1799.04,684.477 1799.6,684.477 1800.16,684.477 1800.72,684.477 1801.28,684.477 1801.84,684.477 1802.4,684.477 1802.96,684.477 1803.52,684.477 1804.08,684.477 1804.63,684.477 1805.19,684.477 1805.75,684.477 1806.31,684.477 1806.87,684.477 1807.43,684.477 1807.99,684.477 1808.55,684.477 1809.11,684.477 1809.67,684.477 1810.23,684.477 1810.79,684.477 1811.35,684.477 1811.9,684.477 1812.46,684.477 1813.02,684.477 1813.58,684.477 1814.14,684.477 1814.7,684.477 1815.26,684.477 1815.82,684.477 1816.38,684.477 1816.94,684.477 1817.5,684.477 1818.06,684.477 1818.62,684.477 1819.18,684.477 1819.73,684.477 1820.29,684.477 1820.85,684.477 1821.41,684.477 1821.97,684.477 1822.53,684.477 1823.09,684.477 1823.65,684.477 1824.21,684.477 1824.77,684.477 1825.33,684.477 1825.89,684.477 1826.45,684.477 1827,684.477 1827.56,684.477 1828.12,684.477 1828.68,684.477 1829.24,684.477 1829.8,684.477 1830.36,684.477 1830.92,684.477 1831.48,684.477 1832.04,684.477 1832.6,684.477 1833.16,684.477 1833.72,684.477 1834.27,684.477 1834.83,684.477 1835.39,684.477 1835.95,684.477 1836.51,684.477 1837.07,684.477 1837.63,684.477 1838.19,684.477 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.039658981273128 ± 0.021972131362021835\nProjected Energy: -4.019575572718046 ± (0.008208454846790225, 0.009060893375354873)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.471246</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4026e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.06e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.736e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.292e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.534e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.105e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
